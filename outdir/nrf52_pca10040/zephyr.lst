
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000b0a0 	.word	0x2000b0a0
       4:	000283f1 	.word	0x000283f1
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00028451 	.word	0x00028451
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00028285 	.word	0x00028285
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00028285 	.word	0x00028285
      14:	00028285 	.word	0x00028285
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00028285 	.word	0x00028285
		for (b = 0; b < 8; b++) {
      1c:	00028285 	.word	0x00028285
      20:	00028285 	.word	0x00028285
			crc = (crc << 1);
      24:	00028285 	.word	0x00028285
			if (i < len) {
      28:	00028285 	.word	0x00028285
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00027dd5 	.word	0x00027dd5
      30:	00028285 	.word	0x00028285
      34:	00028285 	.word	0x00028285
      38:	00027d91 	.word	0x00027d91
      3c:	00028285 	.word	0x00028285

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	000283b5 00019afd 000283b5 000283b5     ................
	for (i = 0; i < len + padding; i++) {
      50:	000283b5 000283b5 000283b5 000283b5     ................
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	000283b5 000283b5 000283b5 000283b5     ................
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	000283b5 000283b5 000283b5 000283b5     ................
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	000283b5 000283b5 000283b5 000283b5     ................
      90:	000283b5 000283b5 000283b5 000283b5     ................
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	000283b5 000283b5 000283b5 000283b5     ................
      b0:	000283b5 000283b5 000283b5 000283b5     ................
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	000283b5 000283b5 000283b5 000283b5     ................
      d0:	000283b5 000283b5 000283b5              ............

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002abd 00000000 000281f1     .....*..........
      ec:	2000d4e4 000023f7 00000000 000281f1     ... .#..........
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 000281f1 00000000 000281f1     ................

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000d520 000027cb 00000000 000281f1      .. .'..........
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 000281f1 00000000 000281f1     ................
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 000281f1 00000000 00019b1d     ................
     13c:	00000000 000281f1 00000000 00019b5f     ............_...
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 000281f1 00000000 000281f1     ................
     15c:	00000000 000281f1 00000000 0000253d     ............=%..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 000281f1 00000000 000281f1     ................
     17c:	00000000 000281f1 00000000 000281f1     ................
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 000281f1 00000000 000281f1     ................
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 00019b55 00000000 000281f1     ....U...........
     1ac:	00000000 000281f1 00000000 000281f1     ................
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 000281f1 00000000 000281f1     ................
     1cc:	00000000 000281f1 00000000 000281f1     ................
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 000281f1 00000000 000281f1     ................
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 000281f1 00000000 000281f1     ................
     1fc:	00000000 000281f1 00000000 000281f1     ................
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 000281f1                       ........

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01c      	beq.n	1478 <publish_cb+0x44>
    143e:	2a07      	cmp	r2, #7
    1440:	d01d      	beq.n	147e <publish_cb+0x4a>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	f240 1233 	movw	r2, #307	; 0x133
    1458:	490c      	ldr	r1, [pc, #48]	; (148c <publish_cb+0x58>)
    145a:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145c:	f001 fe04 	bl	3068 <printk>

	if (client_ctx->publish_data) {
    1460:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1464:	b111      	cbz	r1, 146c <publish_cb+0x38>
		printk(", user_data: %s",
    1466:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1468:	f001 fdfe 	bl	3068 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146c:	480a      	ldr	r0, [pc, #40]	; (1498 <publish_cb+0x64>)
    146e:	f001 fdfb 	bl	3068 <printk>

	return rc;
}
    1472:	4620      	mov	r0, r4
    1474:	b003      	add	sp, #12
    1476:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1478:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    147a:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147c:	e7e9      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147e:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    1480:	4b07      	ldr	r3, [pc, #28]	; (14a0 <publish_cb+0x6c>)
    1482:	e7e6      	b.n	1452 <publish_cb+0x1e>
    1484:	0002eefc 	.word	0x0002eefc
    1488:	0002eed4 	.word	0x0002eed4
    148c:	0002ee48 	.word	0x0002ee48
    1490:	0002ef10 	.word	0x0002ef10
    1494:	0002ef2c 	.word	0x0002ef2c
    1498:	000325e4 	.word	0x000325e4
    149c:	0002eef0 	.word	0x0002eef0
    14a0:	0002eee0 	.word	0x0002eee0

000014a4 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	f240 1245 	movw	r2, #325	; 0x145
    14ac:	4902      	ldr	r1, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	4803      	ldr	r0, [pc, #12]	; (14bc <malformed_cb+0x18>)
    14b0:	f001 fdda 	bl	3068 <printk>
    14b4:	bd08      	pop	{r3, pc}
    14b6:	bf00      	nop
    14b8:	0002ee54 	.word	0x0002ee54
    14bc:	0002ee9c 	.word	0x0002ee9c

000014c0 <disconnect_cb>:
{
    14c0:	b510      	push	{r4, lr}
    14c2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c4:	f44f 7282 	mov.w	r2, #260	; 0x104
    14c8:	4906      	ldr	r1, [pc, #24]	; (14e4 <disconnect_cb+0x24>)
    14ca:	4807      	ldr	r0, [pc, #28]	; (14e8 <disconnect_cb+0x28>)
    14cc:	f001 fdcc 	bl	3068 <printk>
	if (client_ctx->disconnect_data) {
    14d0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14d4:	b111      	cbz	r1, 14dc <disconnect_cb+0x1c>
		printk(" user_data: %s",
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x2c>)
    14d8:	f001 fdc6 	bl	3068 <printk>
	printk("\n");
    14dc:	4804      	ldr	r0, [pc, #16]	; (14f0 <disconnect_cb+0x30>)
    14de:	f001 fdc3 	bl	3068 <printk>
    14e2:	bd10      	pop	{r4, pc}
    14e4:	0002ee38 	.word	0x0002ee38
    14e8:	0002ee78 	.word	0x0002ee78
    14ec:	0002ee80 	.word	0x0002ee80
    14f0:	000325e4 	.word	0x000325e4

000014f4 <connect_cb>:
{
    14f4:	b510      	push	{r4, lr}
    14f6:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f8:	22f1      	movs	r2, #241	; 0xf1
    14fa:	4907      	ldr	r1, [pc, #28]	; (1518 <connect_cb+0x24>)
    14fc:	4807      	ldr	r0, [pc, #28]	; (151c <connect_cb+0x28>)
    14fe:	f001 fdb3 	bl	3068 <printk>
	if (client_ctx->connect_data) {
    1502:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1506:	b111      	cbz	r1, 150e <connect_cb+0x1a>
		printk(" user_data: %s",
    1508:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x2c>)
    150a:	f001 fdad 	bl	3068 <printk>
	printk("\n");
    150e:	4805      	ldr	r0, [pc, #20]	; (1524 <connect_cb+0x30>)
    1510:	f001 fdaa 	bl	3068 <printk>
    1514:	bd10      	pop	{r4, pc}
    1516:	bf00      	nop
    1518:	0002ee2c 	.word	0x0002ee2c
    151c:	0002ee78 	.word	0x0002ee78
    1520:	0002ee80 	.word	0x0002ee80
    1524:	000325e4 	.word	0x000325e4

00001528 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    1528:	b530      	push	{r4, r5, lr}
    152a:	b083      	sub	sp, #12
	static char payload[270];
	snprintf(payload, sizeof(payload), "loop %d:%s\n", loop_count, encrypted_msg);
    152c:	4c08      	ldr	r4, [pc, #32]	; (1550 <get_message_payload+0x28>)
    152e:	4d09      	ldr	r5, [pc, #36]	; (1554 <get_message_payload+0x2c>)
    1530:	4b09      	ldr	r3, [pc, #36]	; (1558 <get_message_payload+0x30>)
    1532:	9300      	str	r3, [sp, #0]
    1534:	6823      	ldr	r3, [r4, #0]
    1536:	4a09      	ldr	r2, [pc, #36]	; (155c <get_message_payload+0x34>)
    1538:	f44f 7187 	mov.w	r1, #270	; 0x10e
    153c:	4628      	mov	r0, r5
    153e:	f029 facd 	bl	2aadc <snprintf>
	loop_count++;
    1542:	6823      	ldr	r3, [r4, #0]
    1544:	3301      	adds	r3, #1
    1546:	6023      	str	r3, [r4, #0]
	return payload;
}
    1548:	4628      	mov	r0, r5
    154a:	b003      	add	sp, #12
    154c:	bd30      	pop	{r4, r5, pc}
    154e:	bf00      	nop
    1550:	2000bdec 	.word	0x2000bdec
    1554:	20000510 	.word	0x20000510
    1558:	2000040c 	.word	0x2000040c
    155c:	0002ee90 	.word	0x0002ee90

00001560 <encrypt_aes_ecb>:
static void encrypt_aes_ecb(int index, int keysize) {
    1560:	b530      	push	{r4, r5, lr}
    1562:	b0c7      	sub	sp, #284	; 0x11c
    1564:	4604      	mov	r4, r0
    1566:	460d      	mov	r5, r1
	mbedtls_aes_init( &aes_ctx );
    1568:	4668      	mov	r0, sp
    156a:	f002 fb22 	bl	3bb2 <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &aes_ctx, keys[index], keysize );
    156e:	462a      	mov	r2, r5
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <encrypt_aes_ecb+0x34>)
    1572:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    1576:	4668      	mov	r0, sp
    1578:	f002 fb2a 	bl	3bd0 <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, curr_msg, encrypted_msg );
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <encrypt_aes_ecb+0x38>)
    157e:	4a07      	ldr	r2, [pc, #28]	; (159c <encrypt_aes_ecb+0x3c>)
    1580:	2101      	movs	r1, #1
    1582:	4668      	mov	r0, sp
    1584:	f003 f838 	bl	45f8 <mbedtls_aes_crypt_ecb>
	mbedtls_aes_free( &aes_ctx );	
    1588:	4668      	mov	r0, sp
    158a:	f002 fb19 	bl	3bc0 <mbedtls_aes_free>
}
    158e:	b047      	add	sp, #284	; 0x11c
    1590:	bd30      	pop	{r4, r5, pc}
    1592:	bf00      	nop
    1594:	2000bde0 	.word	0x2000bde0
    1598:	2000040c 	.word	0x2000040c
    159c:	2000000c 	.word	0x2000000c

000015a0 <encrypt_aes_ccm>:
static void encrypt_aes_ccm(int index, int keysize) {
    15a0:	b530      	push	{r4, r5, lr}
    15a2:	b097      	sub	sp, #92	; 0x5c
    15a4:	4604      	mov	r4, r0
    15a6:	460d      	mov	r5, r1
    mbedtls_ccm_init( &ccm );
    15a8:	a806      	add	r0, sp, #24
    15aa:	f003 f9ef 	bl	498c <mbedtls_ccm_init>
	mbedtls_ccm_setkey( &ccm, MBEDTLS_CIPHER_ID_AES, keys[index], keysize );
    15ae:	462b      	mov	r3, r5
    15b0:	4a10      	ldr	r2, [pc, #64]	; (15f4 <encrypt_aes_ccm+0x54>)
    15b2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    15b6:	2102      	movs	r1, #2
    15b8:	a806      	add	r0, sp, #24
    15ba:	f003 f9ed 	bl	4998 <mbedtls_ccm_setkey>
	mbedtls_ccm_encrypt_and_tag( &ccm, BUFSIZE, tmp, 8, NULL, 0, curr_msg, encrypted_msg, tmp, 16 );
    15be:	4a0e      	ldr	r2, [pc, #56]	; (15f8 <encrypt_aes_ccm+0x58>)
    15c0:	2310      	movs	r3, #16
    15c2:	9305      	str	r3, [sp, #20]
    15c4:	9204      	str	r2, [sp, #16]
    15c6:	4c0d      	ldr	r4, [pc, #52]	; (15fc <encrypt_aes_ccm+0x5c>)
    15c8:	9403      	str	r4, [sp, #12]
    15ca:	4b0d      	ldr	r3, [pc, #52]	; (1600 <encrypt_aes_ccm+0x60>)
    15cc:	9302      	str	r3, [sp, #8]
    15ce:	2300      	movs	r3, #0
    15d0:	9301      	str	r3, [sp, #4]
    15d2:	9300      	str	r3, [sp, #0]
    15d4:	2308      	movs	r3, #8
    15d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    15da:	a806      	add	r0, sp, #24
    15dc:	f003 fa0c 	bl	49f8 <mbedtls_ccm_encrypt_and_tag>
	printk("%s\n", encrypted_msg);
    15e0:	4621      	mov	r1, r4
    15e2:	4808      	ldr	r0, [pc, #32]	; (1604 <encrypt_aes_ccm+0x64>)
    15e4:	f001 fd40 	bl	3068 <printk>
	mbedtls_ccm_free( &ccm );
    15e8:	a806      	add	r0, sp, #24
    15ea:	f003 f9fc 	bl	49e6 <mbedtls_ccm_free>
}
    15ee:	b017      	add	sp, #92	; 0x5c
    15f0:	bd30      	pop	{r4, r5, pc}
    15f2:	bf00      	nop
    15f4:	2000bde0 	.word	0x2000bde0
    15f8:	20000720 	.word	0x20000720
    15fc:	2000040c 	.word	0x2000040c
    1600:	2000000c 	.word	0x2000000c
    1604:	0003208c 	.word	0x0003208c

00001608 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1608:	b538      	push	{r3, r4, r5, lr}
    160a:	4604      	mov	r4, r0
    160c:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_message_payload(qos);
    160e:	4608      	mov	r0, r1
    1610:	f7ff ff8a 	bl	1528 <get_message_payload>
    1614:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1616:	f7ff f873 	bl	700 <strlen>
    161a:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    161c:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    161e:	4804      	ldr	r0, [pc, #16]	; (1630 <prepare_msg+0x28>)
    1620:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1622:	f7ff f86d 	bl	700 <strlen>
    1626:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1628:	f000 fd84 	bl	2134 <sys_rand32_get>
    162c:	80a0      	strh	r0, [r4, #4]
    162e:	bd38      	pop	{r3, r4, r5, pc}
    1630:	0002eecc 	.word	0x0002eecc

00001634 <run_experiment>:
static void run_experiment(char *title, int index, int keysize, void (*encrypt)(int,int)) {
    1634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1638:	b083      	sub	sp, #12
    163a:	9001      	str	r0, [sp, #4]
    163c:	468b      	mov	fp, r1
    163e:	9200      	str	r2, [sp, #0]
    1640:	469a      	mov	sl, r3
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    1642:	2500      	movs	r5, #0
	uint32_t nanoseconds_spent = 0;
    1644:	46a9      	mov	r9, r5
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    1646:	e04f      	b.n	16e8 <run_experiment+0xb4>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    164c:	f028 f8e6 	bl	2981c <_impl_k_sleep>

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1650:	4e2a      	ldr	r6, [pc, #168]	; (16fc <run_experiment+0xc8>)
    1652:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1656:	4630      	mov	r0, r6
    1658:	f027 f9fc 	bl	28a54 <_impl_k_mutex_lock>
		memset( curr_msg, ++num, sizeof( curr_msg ) );
    165c:	4b28      	ldr	r3, [pc, #160]	; (1700 <run_experiment+0xcc>)
    165e:	6819      	ldr	r1, [r3, #0]
    1660:	3101      	adds	r1, #1
    1662:	6019      	str	r1, [r3, #0]
    1664:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1668:	4826      	ldr	r0, [pc, #152]	; (1704 <run_experiment+0xd0>)
    166a:	f029 f9e9 	bl	2aa40 <memset>
		start_time = k_cycle_get_32();
    166e:	f000 ffd7 	bl	2620 <_timer_cycle_get_32>
    1672:	4604      	mov	r4, r0
		encrypt(index, keysize);
    1674:	9900      	ldr	r1, [sp, #0]
    1676:	4658      	mov	r0, fp
    1678:	47d0      	blx	sl
	 	prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    167a:	4f23      	ldr	r7, [pc, #140]	; (1708 <run_experiment+0xd4>)
    167c:	f107 0830 	add.w	r8, r7, #48	; 0x30
    1680:	2100      	movs	r1, #0
    1682:	4640      	mov	r0, r8
    1684:	f7ff ffc0 	bl	1608 <prepare_msg>
	 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    1688:	4641      	mov	r1, r8
    168a:	f107 0048 	add.w	r0, r7, #72	; 0x48
    168e:	f025 f8af 	bl	267f0 <mqtt_tx_publish>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1692:	4630      	mov	r0, r6
    1694:	f027 fa48 	bl	28b28 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1698:	481c      	ldr	r0, [pc, #112]	; (170c <run_experiment+0xd8>)
    169a:	f028 f9fe 	bl	29a9a <_impl_k_sem_give>
		stop_time = k_cycle_get_32();
    169e:	f000 ffbf 	bl	2620 <_timer_cycle_get_32>
		cycles_spent = stop_time - start_time;
    16a2:	1b04      	subs	r4, r0, r4
		nanoseconds_spent = nanoseconds_spent + SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent);
    16a4:	4b1a      	ldr	r3, [pc, #104]	; (1710 <run_experiment+0xdc>)
    16a6:	681a      	ldr	r2, [r3, #0]
    16a8:	17d7      	asrs	r7, r2, #31
    16aa:	fba2 2304 	umull	r2, r3, r2, r4
    16ae:	fb04 3307 	mla	r3, r4, r7, r3
    16b2:	015c      	lsls	r4, r3, #5
    16b4:	0150      	lsls	r0, r2, #5
    16b6:	ea44 61d2 	orr.w	r1, r4, r2, lsr #27
    16ba:	1a80      	subs	r0, r0, r2
    16bc:	eb61 0103 	sbc.w	r1, r1, r3
    16c0:	008c      	lsls	r4, r1, #2
    16c2:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
    16c6:	0086      	lsls	r6, r0, #2
    16c8:	18b0      	adds	r0, r6, r2
    16ca:	eb44 0103 	adc.w	r1, r4, r3
    16ce:	00cb      	lsls	r3, r1, #3
    16d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    16d4:	00c2      	lsls	r2, r0, #3
    16d6:	4610      	mov	r0, r2
    16d8:	4619      	mov	r1, r3
    16da:	4b0e      	ldr	r3, [pc, #56]	; (1714 <run_experiment+0xe0>)
    16dc:	681a      	ldr	r2, [r3, #0]
    16de:	17d3      	asrs	r3, r2, #31
    16e0:	f7ff fd0c 	bl	10fc <__aeabi_uldivmod>
    16e4:	4481      	add	r9, r0
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    16e6:	3501      	adds	r5, #1
    16e8:	2d63      	cmp	r5, #99	; 0x63
    16ea:	ddad      	ble.n	1648 <run_experiment+0x14>
	printk("%s: Time spent:%" PRIu32 "\r\n", title, nanoseconds_spent);		
    16ec:	464a      	mov	r2, r9
    16ee:	9901      	ldr	r1, [sp, #4]
    16f0:	4809      	ldr	r0, [pc, #36]	; (1718 <run_experiment+0xe4>)
    16f2:	f001 fcb9 	bl	3068 <printk>
}
    16f6:	b003      	add	sp, #12
    16f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16fc:	2000d668 	.word	0x2000d668
    1700:	2000bdf0 	.word	0x2000bdf0
    1704:	2000000c 	.word	0x2000000c
    1708:	20000620 	.word	0x20000620
    170c:	2000d5f4 	.word	0x2000d5f4
    1710:	2000cb10 	.word	0x2000cb10
    1714:	2000cb0c 	.word	0x2000cb0c
    1718:	0002f030 	.word	0x0002f030

0000171c <message_thread>:
{
    171c:	b530      	push	{r4, r5, lr}
    171e:	b085      	sub	sp, #20
	memset( curr_msg, num, sizeof( curr_msg ) );
    1720:	4c27      	ldr	r4, [pc, #156]	; (17c0 <message_thread+0xa4>)
    1722:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1726:	6821      	ldr	r1, [r4, #0]
    1728:	4826      	ldr	r0, [pc, #152]	; (17c4 <message_thread+0xa8>)
    172a:	f029 f989 	bl	2aa40 <memset>
	memset( tmp, num, sizeof( tmp ) );
    172e:	22c8      	movs	r2, #200	; 0xc8
    1730:	6821      	ldr	r1, [r4, #0]
    1732:	4825      	ldr	r0, [pc, #148]	; (17c8 <message_thread+0xac>)
    1734:	f029 f984 	bl	2aa40 <memset>
	list = mbedtls_cipher_list();
    1738:	f003 f974 	bl	4a24 <mbedtls_cipher_list>
    173c:	4604      	mov	r4, r0
    while( *list )
    173e:	e007      	b.n	1750 <message_thread+0x34>
        cipher_info = mbedtls_cipher_info_from_type( *list );
    1740:	b2c0      	uxtb	r0, r0
    1742:	f003 f989 	bl	4a58 <mbedtls_cipher_info_from_type>
        printk( "%s\n", cipher_info->name );
    1746:	6881      	ldr	r1, [r0, #8]
    1748:	4820      	ldr	r0, [pc, #128]	; (17cc <message_thread+0xb0>)
    174a:	f001 fc8d 	bl	3068 <printk>
        list++;
    174e:	3404      	adds	r4, #4
    while( *list )
    1750:	6820      	ldr	r0, [r4, #0]
    1752:	2800      	cmp	r0, #0
    1754:	d1f4      	bne.n	1740 <message_thread+0x24>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    175a:	f028 f85f 	bl	2981c <_impl_k_sleep>
		for (int keysize = 128; keysize <= 256; keysize += 64) {
    175e:	2480      	movs	r4, #128	; 0x80
    1760:	e00d      	b.n	177e <message_thread+0x62>
			int index = (keysize - 128) / 64;
    1762:	118d      	asrs	r5, r1, #6
			snprintf(buf, sizeof buf, "AES_CCM_%d", keysize);
    1764:	4623      	mov	r3, r4
    1766:	4a1a      	ldr	r2, [pc, #104]	; (17d0 <message_thread+0xb4>)
    1768:	210c      	movs	r1, #12
    176a:	a801      	add	r0, sp, #4
    176c:	f029 f9b6 	bl	2aadc <snprintf>
			run_experiment(buf, index, keysize, encrypt_aes_ccm);
    1770:	4b18      	ldr	r3, [pc, #96]	; (17d4 <message_thread+0xb8>)
    1772:	4622      	mov	r2, r4
    1774:	4629      	mov	r1, r5
    1776:	a801      	add	r0, sp, #4
    1778:	f7ff ff5c 	bl	1634 <run_experiment>
		for (int keysize = 128; keysize <= 256; keysize += 64) {
    177c:	3440      	adds	r4, #64	; 0x40
    177e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1782:	dc04      	bgt.n	178e <message_thread+0x72>
			int index = (keysize - 128) / 64;
    1784:	f1b4 0180 	subs.w	r1, r4, #128	; 0x80
    1788:	d5eb      	bpl.n	1762 <message_thread+0x46>
    178a:	313f      	adds	r1, #63	; 0x3f
    178c:	e7e9      	b.n	1762 <message_thread+0x46>
    178e:	2480      	movs	r4, #128	; 0x80
    1790:	e00d      	b.n	17ae <message_thread+0x92>
			int index = (keysize - 128) / 64;
    1792:	118d      	asrs	r5, r1, #6
			snprintf(buf, sizeof buf, "AES_ECB_%d", keysize);
    1794:	4623      	mov	r3, r4
    1796:	4a10      	ldr	r2, [pc, #64]	; (17d8 <message_thread+0xbc>)
    1798:	210c      	movs	r1, #12
    179a:	a801      	add	r0, sp, #4
    179c:	f029 f99e 	bl	2aadc <snprintf>
			run_experiment(buf, index, keysize, encrypt_aes_ecb);
    17a0:	4b0e      	ldr	r3, [pc, #56]	; (17dc <message_thread+0xc0>)
    17a2:	4622      	mov	r2, r4
    17a4:	4629      	mov	r1, r5
    17a6:	a801      	add	r0, sp, #4
    17a8:	f7ff ff44 	bl	1634 <run_experiment>
		for (int keysize = 128; keysize <= 256; keysize += 64) {
    17ac:	3440      	adds	r4, #64	; 0x40
    17ae:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    17b2:	dcd0      	bgt.n	1756 <message_thread+0x3a>
			int index = (keysize - 128) / 64;
    17b4:	f1b4 0180 	subs.w	r1, r4, #128	; 0x80
    17b8:	d5eb      	bpl.n	1792 <message_thread+0x76>
    17ba:	313f      	adds	r1, #63	; 0x3f
    17bc:	e7e9      	b.n	1792 <message_thread+0x76>
    17be:	bf00      	nop
    17c0:	2000bdf0 	.word	0x2000bdf0
    17c4:	2000000c 	.word	0x2000000c
    17c8:	20000720 	.word	0x20000720
    17cc:	0003208c 	.word	0x0003208c
    17d0:	0002eeb4 	.word	0x0002eeb4
    17d4:	000015a1 	.word	0x000015a1
    17d8:	0002eec0 	.word	0x0002eec0
    17dc:	00001561 	.word	0x00001561

000017e0 <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    17e0:	b530      	push	{r4, r5, lr}
    17e2:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    17e4:	4c7c      	ldr	r4, [pc, #496]	; (19d8 <publisher_thread+0x1f8>)
    17e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    17ea:	2100      	movs	r1, #0
    17ec:	4620      	mov	r0, r4
    17ee:	f029 f927 	bl	2aa40 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    17f2:	4b7a      	ldr	r3, [pc, #488]	; (19dc <publisher_thread+0x1fc>)
    17f4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    17f8:	4b79      	ldr	r3, [pc, #484]	; (19e0 <publisher_thread+0x200>)
    17fa:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    17fe:	4b79      	ldr	r3, [pc, #484]	; (19e4 <publisher_thread+0x204>)
    1800:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1804:	f242 7310 	movw	r3, #10000	; 0x2710
    1808:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    180c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1810:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    1814:	4b74      	ldr	r3, [pc, #464]	; (19e8 <publisher_thread+0x208>)
    1816:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    181a:	f240 735b 	movw	r3, #1883	; 0x75b
    181e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    1822:	4b72      	ldr	r3, [pc, #456]	; (19ec <publisher_thread+0x20c>)
    1824:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    1828:	4871      	ldr	r0, [pc, #452]	; (19f0 <publisher_thread+0x210>)
    182a:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    182c:	f7fe ff68 	bl	700 <strlen>
    1830:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    1832:	7823      	ldrb	r3, [r4, #0]
    1834:	f043 0301 	orr.w	r3, r3, #1
    1838:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    183a:	4b6e      	ldr	r3, [pc, #440]	; (19f4 <publisher_thread+0x214>)
    183c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    1840:	4b6d      	ldr	r3, [pc, #436]	; (19f8 <publisher_thread+0x218>)
    1842:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1846:	4b6d      	ldr	r3, [pc, #436]	; (19fc <publisher_thread+0x21c>)
    1848:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    184c:	e0a0      	b.n	1990 <publisher_thread+0x1b0>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    184e:	4b6c      	ldr	r3, [pc, #432]	; (1a00 <publisher_thread+0x220>)
    1850:	e0ad      	b.n	19ae <publisher_thread+0x1ce>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    1852:	4b6b      	ldr	r3, [pc, #428]	; (1a00 <publisher_thread+0x220>)
    1854:	9301      	str	r3, [sp, #4]
    1856:	9400      	str	r4, [sp, #0]
    1858:	4b6a      	ldr	r3, [pc, #424]	; (1a04 <publisher_thread+0x224>)
    185a:	f240 129f 	movw	r2, #415	; 0x19f
    185e:	496a      	ldr	r1, [pc, #424]	; (1a08 <publisher_thread+0x228>)
    1860:	486a      	ldr	r0, [pc, #424]	; (1a0c <publisher_thread+0x22c>)
    1862:	f001 fc01 	bl	3068 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    1866:	b15c      	cbz	r4, 1880 <publisher_thread+0xa0>
    1868:	1c6b      	adds	r3, r5, #1
    186a:	2d63      	cmp	r5, #99	; 0x63
    186c:	dc08      	bgt.n	1880 <publisher_thread+0xa0>
    186e:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    1870:	4867      	ldr	r0, [pc, #412]	; (1a10 <publisher_thread+0x230>)
    1872:	f025 f903 	bl	26a7c <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1876:	4604      	mov	r4, r0
    1878:	2800      	cmp	r0, #0
    187a:	d1ea      	bne.n	1852 <publisher_thread+0x72>
    187c:	4b65      	ldr	r3, [pc, #404]	; (1a14 <publisher_thread+0x234>)
    187e:	e7e9      	b.n	1854 <publisher_thread+0x74>

		if (rc != 0) {
    1880:	b1cc      	cbz	r4, 18b6 <publisher_thread+0xd6>
    1882:	e0a0      	b.n	19c6 <publisher_thread+0x1e6>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1884:	4b5e      	ldr	r3, [pc, #376]	; (1a00 <publisher_thread+0x220>)
    1886:	9301      	str	r3, [sp, #4]
    1888:	9500      	str	r5, [sp, #0]
    188a:	4b63      	ldr	r3, [pc, #396]	; (1a18 <publisher_thread+0x238>)
    188c:	f240 12a9 	movw	r2, #425	; 0x1a9
    1890:	495d      	ldr	r1, [pc, #372]	; (1a08 <publisher_thread+0x228>)
    1892:	485e      	ldr	r0, [pc, #376]	; (1a0c <publisher_thread+0x22c>)
    1894:	f001 fbe8 	bl	3068 <printk>
    1898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    189c:	f027 ffbe 	bl	2981c <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    18a0:	b99d      	cbnz	r5, 18ca <publisher_thread+0xea>
    18a2:	1c63      	adds	r3, r4, #1
    18a4:	2c13      	cmp	r4, #19
    18a6:	dc10      	bgt.n	18ca <publisher_thread+0xea>
    18a8:	4a4b      	ldr	r2, [pc, #300]	; (19d8 <publisher_thread+0x1f8>)
    18aa:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    18ae:	f012 0f02 	tst.w	r2, #2
    18b2:	d10a      	bne.n	18ca <publisher_thread+0xea>
    18b4:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    18b6:	4848      	ldr	r0, [pc, #288]	; (19d8 <publisher_thread+0x1f8>)
    18b8:	4601      	mov	r1, r0
    18ba:	3048      	adds	r0, #72	; 0x48
    18bc:	f024 ff0c 	bl	266d8 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    18c0:	4605      	mov	r5, r0
    18c2:	2800      	cmp	r0, #0
    18c4:	d1de      	bne.n	1884 <publisher_thread+0xa4>
    18c6:	4b53      	ldr	r3, [pc, #332]	; (1a14 <publisher_thread+0x234>)
    18c8:	e7dd      	b.n	1886 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    18ca:	4b43      	ldr	r3, [pc, #268]	; (19d8 <publisher_thread+0x1f8>)
    18cc:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    18d0:	f013 0f02 	tst.w	r3, #2
    18d4:	d11b      	bne.n	190e <publisher_thread+0x12e>
			mqtt_close(&pub_ctx.mqtt_ctx);
    18d6:	484e      	ldr	r0, [pc, #312]	; (1a10 <publisher_thread+0x230>)
    18d8:	f025 f916 	bl	26b08 <mqtt_close>
			goto exit_pub;
    18dc:	e073      	b.n	19c6 <publisher_thread+0x1e6>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    18de:	2100      	movs	r1, #0
    18e0:	484e      	ldr	r0, [pc, #312]	; (1a1c <publisher_thread+0x23c>)
    18e2:	f7ff fe91 	bl	1608 <prepare_msg>
				message_changed=false;
    18e6:	2200      	movs	r2, #0
    18e8:	4b4d      	ldr	r3, [pc, #308]	; (1a20 <publisher_thread+0x240>)
    18ea:	701a      	strb	r2, [r3, #0]
    18ec:	e018      	b.n	1920 <publisher_thread+0x140>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
    18ee:	4a44      	ldr	r2, [pc, #272]	; (1a00 <publisher_thread+0x220>)
    18f0:	9201      	str	r2, [sp, #4]
    18f2:	9300      	str	r3, [sp, #0]
    18f4:	4b4b      	ldr	r3, [pc, #300]	; (1a24 <publisher_thread+0x244>)
    18f6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    18fa:	4943      	ldr	r1, [pc, #268]	; (1a08 <publisher_thread+0x228>)
    18fc:	4843      	ldr	r0, [pc, #268]	; (1a0c <publisher_thread+0x22c>)
    18fe:	f001 fbb3 	bl	3068 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1902:	f242 7110 	movw	r1, #10000	; 0x2710
    1906:	4848      	ldr	r0, [pc, #288]	; (1a28 <publisher_thread+0x248>)
    1908:	f028 f8da 	bl	29ac0 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    190c:	b9c0      	cbnz	r0, 1940 <publisher_thread+0x160>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    190e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1912:	4846      	ldr	r0, [pc, #280]	; (1a2c <publisher_thread+0x24c>)
    1914:	f027 f89e 	bl	28a54 <_impl_k_mutex_lock>
			if (message_changed) {
    1918:	4b41      	ldr	r3, [pc, #260]	; (1a20 <publisher_thread+0x240>)
    191a:	781c      	ldrb	r4, [r3, #0]
    191c:	2c00      	cmp	r4, #0
    191e:	d1de      	bne.n	18de <publisher_thread+0xfe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1920:	4842      	ldr	r0, [pc, #264]	; (1a2c <publisher_thread+0x24c>)
    1922:	f027 f901 	bl	28b28 <_impl_k_mutex_unlock>
			if (data_changed) {
    1926:	2c00      	cmp	r4, #0
    1928:	d0eb      	beq.n	1902 <publisher_thread+0x122>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    192a:	482b      	ldr	r0, [pc, #172]	; (19d8 <publisher_thread+0x1f8>)
    192c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    1930:	3048      	adds	r0, #72	; 0x48
    1932:	f024 ff5d 	bl	267f0 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    1936:	4603      	mov	r3, r0
    1938:	2800      	cmp	r0, #0
    193a:	d1d8      	bne.n	18ee <publisher_thread+0x10e>
    193c:	4a35      	ldr	r2, [pc, #212]	; (1a14 <publisher_thread+0x234>)
    193e:	e7d7      	b.n	18f0 <publisher_thread+0x110>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    1940:	4833      	ldr	r0, [pc, #204]	; (1a10 <publisher_thread+0x230>)
    1942:	f024 ff0b 	bl	2675c <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1946:	4603      	mov	r3, r0
    1948:	2800      	cmp	r0, #0
    194a:	d141      	bne.n	19d0 <publisher_thread+0x1f0>
    194c:	4a31      	ldr	r2, [pc, #196]	; (1a14 <publisher_thread+0x234>)
    194e:	9201      	str	r2, [sp, #4]
    1950:	9300      	str	r3, [sp, #0]
    1952:	4b37      	ldr	r3, [pc, #220]	; (1a30 <publisher_thread+0x250>)
    1954:	f240 12c5 	movw	r2, #453	; 0x1c5
    1958:	492b      	ldr	r1, [pc, #172]	; (1a08 <publisher_thread+0x228>)
    195a:	482c      	ldr	r0, [pc, #176]	; (1a0c <publisher_thread+0x22c>)
    195c:	f001 fb84 	bl	3068 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1964:	f027 ff5a 	bl	2981c <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1968:	4829      	ldr	r0, [pc, #164]	; (1a10 <publisher_thread+0x230>)
    196a:	f025 f8cd 	bl	26b08 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    196e:	4603      	mov	r3, r0
    1970:	2800      	cmp	r0, #0
    1972:	d12f      	bne.n	19d4 <publisher_thread+0x1f4>
    1974:	4a27      	ldr	r2, [pc, #156]	; (1a14 <publisher_thread+0x234>)
    1976:	9201      	str	r2, [sp, #4]
    1978:	9300      	str	r3, [sp, #0]
    197a:	4b2e      	ldr	r3, [pc, #184]	; (1a34 <publisher_thread+0x254>)
    197c:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
    1980:	4921      	ldr	r1, [pc, #132]	; (1a08 <publisher_thread+0x228>)
    1982:	4822      	ldr	r0, [pc, #136]	; (1a0c <publisher_thread+0x22c>)
    1984:	f001 fb70 	bl	3068 <printk>
    1988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    198c:	f027 ff46 	bl	2981c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1994:	4824      	ldr	r0, [pc, #144]	; (1a28 <publisher_thread+0x248>)
    1996:	f028 f893 	bl	29ac0 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    199a:	b9a0      	cbnz	r0, 19c6 <publisher_thread+0x1e6>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    199c:	2101      	movs	r1, #1
    199e:	481c      	ldr	r0, [pc, #112]	; (1a10 <publisher_thread+0x230>)
    19a0:	f025 f8a0 	bl	26ae4 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    19a4:	4605      	mov	r5, r0
    19a6:	2800      	cmp	r0, #0
    19a8:	f47f af51 	bne.w	184e <publisher_thread+0x6e>
    19ac:	4b19      	ldr	r3, [pc, #100]	; (1a14 <publisher_thread+0x234>)
    19ae:	9301      	str	r3, [sp, #4]
    19b0:	9500      	str	r5, [sp, #0]
    19b2:	4b21      	ldr	r3, [pc, #132]	; (1a38 <publisher_thread+0x258>)
    19b4:	f44f 72cb 	mov.w	r2, #406	; 0x196
    19b8:	4913      	ldr	r1, [pc, #76]	; (1a08 <publisher_thread+0x228>)
    19ba:	4814      	ldr	r0, [pc, #80]	; (1a0c <publisher_thread+0x22c>)
    19bc:	f001 fb54 	bl	3068 <printk>
		if (rc != 0) {
    19c0:	2d00      	cmp	r5, #0
    19c2:	f43f af55 	beq.w	1870 <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    19c6:	481d      	ldr	r0, [pc, #116]	; (1a3c <publisher_thread+0x25c>)
    19c8:	f001 fb4e 	bl	3068 <printk>
}
    19cc:	b003      	add	sp, #12
    19ce:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    19d0:	4a0b      	ldr	r2, [pc, #44]	; (1a00 <publisher_thread+0x220>)
    19d2:	e7bc      	b.n	194e <publisher_thread+0x16e>
		PRINT_RESULT("mqtt_close", rc);
    19d4:	4a0a      	ldr	r2, [pc, #40]	; (1a00 <publisher_thread+0x220>)
    19d6:	e7ce      	b.n	1976 <publisher_thread+0x196>
    19d8:	20000620 	.word	0x20000620
    19dc:	000014f5 	.word	0x000014f5
    19e0:	000014c1 	.word	0x000014c1
    19e4:	000014a5 	.word	0x000014a5
    19e8:	0002ef48 	.word	0x0002ef48
    19ec:	00001435 	.word	0x00001435
    19f0:	0002ef64 	.word	0x0002ef64
    19f4:	0002ef7c 	.word	0x0002ef7c
    19f8:	0002ef88 	.word	0x0002ef88
    19fc:	0002ef98 	.word	0x0002ef98
    1a00:	0002ef40 	.word	0x0002ef40
    1a04:	0002efc4 	.word	0x0002efc4
    1a08:	0002ee64 	.word	0x0002ee64
    1a0c:	0002efac 	.word	0x0002efac
    1a10:	20000668 	.word	0x20000668
    1a14:	0002ef3c 	.word	0x0002ef3c
    1a18:	0002efd4 	.word	0x0002efd4
    1a1c:	20000650 	.word	0x20000650
    1a20:	2000050c 	.word	0x2000050c
    1a24:	0002efe4 	.word	0x0002efe4
    1a28:	2000d5f4 	.word	0x2000d5f4
    1a2c:	2000d668 	.word	0x2000d668
    1a30:	0002eff4 	.word	0x0002eff4
    1a34:	0002f008 	.word	0x0002f008
    1a38:	0002efa0 	.word	0x0002efa0
    1a3c:	0002f014 	.word	0x0002f014

00001a40 <start_publisher>:


static void start_publisher()
{
    1a40:	b500      	push	{lr}
    1a42:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1a44:	2300      	movs	r3, #0
    1a46:	9305      	str	r3, [sp, #20]
    1a48:	9304      	str	r3, [sp, #16]
    1a4a:	2205      	movs	r2, #5
    1a4c:	9203      	str	r2, [sp, #12]
    1a4e:	9302      	str	r3, [sp, #8]
    1a50:	9301      	str	r3, [sp, #4]
    1a52:	9300      	str	r3, [sp, #0]
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <start_publisher+0x28>)
    1a56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a5a:	4904      	ldr	r1, [pc, #16]	; (1a6c <start_publisher+0x2c>)
    1a5c:	4804      	ldr	r0, [pc, #16]	; (1a70 <start_publisher+0x30>)
    1a5e:	f028 fa9b 	bl	29f98 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    1a62:	b007      	add	sp, #28
    1a64:	f85d fb04 	ldr.w	pc, [sp], #4
    1a68:	000017e1 	.word	0x000017e1
    1a6c:	20003990 	.word	0x20003990
    1a70:	20002ea0 	.word	0x20002ea0

00001a74 <start_message_thread>:
{
    1a74:	b500      	push	{lr}
    1a76:	b087      	sub	sp, #28
    1a78:	2300      	movs	r3, #0
    1a7a:	9305      	str	r3, [sp, #20]
    1a7c:	9304      	str	r3, [sp, #16]
    1a7e:	2205      	movs	r2, #5
    1a80:	9203      	str	r2, [sp, #12]
    1a82:	9302      	str	r3, [sp, #8]
    1a84:	9301      	str	r3, [sp, #4]
    1a86:	9300      	str	r3, [sp, #0]
    1a88:	4b04      	ldr	r3, [pc, #16]	; (1a9c <start_message_thread+0x28>)
    1a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a8e:	4904      	ldr	r1, [pc, #16]	; (1aa0 <start_message_thread+0x2c>)
    1a90:	4804      	ldr	r0, [pc, #16]	; (1aa4 <start_message_thread+0x30>)
    1a92:	f028 fa81 	bl	29f98 <_impl_k_thread_create>
}
    1a96:	b007      	add	sp, #28
    1a98:	f85d fb04 	ldr.w	pc, [sp], #4
    1a9c:	0000171d 	.word	0x0000171d
    1aa0:	20003190 	.word	0x20003190
    1aa4:	20002e38 	.word	0x20002e38

00001aa8 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1aa8:	b508      	push	{r3, lr}
	start_publisher();
    1aaa:	f7ff ffc9 	bl	1a40 <start_publisher>
	start_message_thread();
    1aae:	f7ff ffe1 	bl	1a74 <start_message_thread>
    1ab2:	bd08      	pop	{r3, pc}

00001ab4 <main>:
}


void main(void)
{
    1ab4:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    1ab6:	f01a f835 	bl	1bb24 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1aba:	f3bf 8f5b 	dmb	ish
    1abe:	68c3      	ldr	r3, [r0, #12]
    1ac0:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1ac4:	f013 0f01 	tst.w	r3, #1
    1ac8:	d000      	beq.n	1acc <main+0x18>
    1aca:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1acc:	4803      	ldr	r0, [pc, #12]	; (1adc <main+0x28>)
    1ace:	4b04      	ldr	r3, [pc, #16]	; (1ae0 <main+0x2c>)
    1ad0:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1ad2:	4b04      	ldr	r3, [pc, #16]	; (1ae4 <main+0x30>)
    1ad4:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    1ad6:	f021 fe63 	bl	237a0 <net_mgmt_add_event_callback>
	// 	k_mutex_unlock(&pub_data);
	// 	k_sem_give(&pub_sem);
	// 	k_sleep(10000);
	// }

	return;
    1ada:	e7f6      	b.n	1aca <main+0x16>
    1adc:	20000000 	.word	0x20000000
    1ae0:	00001aa9 	.word	0x00001aa9
    1ae4:	d0010002 	.word	0xd0010002

00001ae8 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1ae8:	4b08      	ldr	r3, [pc, #32]	; (1b0c <_sbrk+0x24>)
    1aea:	681a      	ldr	r2, [r3, #0]
    1aec:	4b08      	ldr	r3, [pc, #32]	; (1b10 <_sbrk+0x28>)
    1aee:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1af0:	4410      	add	r0, r2
    1af2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1af6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1afa:	4298      	cmp	r0, r3
    1afc:	d203      	bcs.n	1b06 <_sbrk+0x1e>
		heap_sz += count;
    1afe:	4b03      	ldr	r3, [pc, #12]	; (1b0c <_sbrk+0x24>)
    1b00:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    1b02:	4608      	mov	r0, r1
    1b04:	4770      	bx	lr
		return (void *)-1;
    1b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1b0a:	e7fa      	b.n	1b02 <_sbrk+0x1a>
    1b0c:	200007e8 	.word	0x200007e8
    1b10:	2000da54 	.word	0x2000da54

00001b14 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1b14:	b510      	push	{r4, lr}
    1b16:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1b18:	280a      	cmp	r0, #10
    1b1a:	d007      	beq.n	1b2c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1b1c:	4b07      	ldr	r3, [pc, #28]	; (1b3c <console_out+0x28>)
    1b1e:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1b20:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1b22:	685b      	ldr	r3, [r3, #4]
    1b24:	b2e1      	uxtb	r1, r4
    1b26:	4798      	blx	r3

	return c;
}
    1b28:	4620      	mov	r0, r4
    1b2a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1b2c:	4b03      	ldr	r3, [pc, #12]	; (1b3c <console_out+0x28>)
    1b2e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b30:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b32:	685b      	ldr	r3, [r3, #4]
    1b34:	210d      	movs	r1, #13
    1b36:	4798      	blx	r3
    1b38:	e7f0      	b.n	1b1c <console_out+0x8>
    1b3a:	bf00      	nop
    1b3c:	2000080c 	.word	0x2000080c

00001b40 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1b40:	b510      	push	{r4, lr}
    1b42:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1b44:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1b46:	691b      	ldr	r3, [r3, #16]
    1b48:	b11b      	cbz	r3, 1b52 <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1b4a:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1b4c:	2800      	cmp	r0, #0
    1b4e:	db02      	blt.n	1b56 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1b50:	bd10      	pop	{r4, pc}
	}

	return 0;
    1b52:	2000      	movs	r0, #0
    1b54:	e7fa      	b.n	1b4c <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1b56:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b5a:	b123      	cbz	r3, 1b66 <read_uart+0x26>
		api->irq_rx_disable(dev);
    1b5c:	4620      	mov	r0, r4
    1b5e:	4798      	blx	r3
		return -EIO;
    1b60:	f06f 0004 	mvn.w	r0, #4
    1b64:	bd10      	pop	{r4, pc}
    1b66:	f06f 0004 	mvn.w	r0, #4
    1b6a:	e7f1      	b.n	1b50 <read_uart+0x10>

00001b6c <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1b6c:	b500      	push	{lr}
    1b6e:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1b70:	4b19      	ldr	r3, [pc, #100]	; (1bd8 <console_input_init+0x6c>)
    1b72:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b74:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b78:	b103      	cbz	r3, 1b7c <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1b7a:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1b7c:	4b16      	ldr	r3, [pc, #88]	; (1bd8 <console_input_init+0x6c>)
    1b7e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b80:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1b82:	699b      	ldr	r3, [r3, #24]
    1b84:	b103      	cbz	r3, 1b88 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1b86:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1b88:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <console_input_init+0x6c>)
    1b8a:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1b8c:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1b8e:	b18b      	cbz	r3, 1bb4 <console_input_init+0x48>
    1b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b92:	b17b      	cbz	r3, 1bb4 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1b94:	4911      	ldr	r1, [pc, #68]	; (1bdc <console_input_init+0x70>)
    1b96:	4798      	blx	r3
    1b98:	e00c      	b.n	1bb4 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1b9a:	2201      	movs	r2, #1
    1b9c:	f10d 0107 	add.w	r1, sp, #7
    1ba0:	4798      	blx	r3
    1ba2:	e007      	b.n	1bb4 <console_input_init+0x48>
	return 0;
    1ba4:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1ba6:	b168      	cbz	r0, 1bc4 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1ba8:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <console_input_init+0x6c>)
    1baa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bac:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1bae:	691b      	ldr	r3, [r3, #16]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d1f2      	bne.n	1b9a <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1bb4:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <console_input_init+0x6c>)
    1bb6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bb8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d0f1      	beq.n	1ba4 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1bc0:	4798      	blx	r3
    1bc2:	e7f0      	b.n	1ba6 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <console_input_init+0x6c>)
    1bc6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bc8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1bca:	6a1b      	ldr	r3, [r3, #32]
    1bcc:	b103      	cbz	r3, 1bd0 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1bce:	4798      	blx	r3
}
    1bd0:	b003      	add	sp, #12
    1bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    1bd6:	bf00      	nop
    1bd8:	2000080c 	.word	0x2000080c
    1bdc:	00001ed9 	.word	0x00001ed9

00001be0 <del_char>:
{
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	4606      	mov	r6, r0
    1be4:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1be6:	4b17      	ldr	r3, [pc, #92]	; (1c44 <del_char+0x64>)
    1be8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bea:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	2108      	movs	r1, #8
    1bf0:	4798      	blx	r3
	if (end == 0) {
    1bf2:	b11d      	cbz	r5, 1bfc <del_char+0x1c>
	printk("\x1b[s");
    1bf4:	4814      	ldr	r0, [pc, #80]	; (1c48 <del_char+0x68>)
    1bf6:	f001 fa37 	bl	3068 <printk>
    1bfa:	e014      	b.n	1c26 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1bfc:	4c11      	ldr	r4, [pc, #68]	; (1c44 <del_char+0x64>)
    1bfe:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c00:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c02:	685b      	ldr	r3, [r3, #4]
    1c04:	2120      	movs	r1, #32
    1c06:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1c08:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c0a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c0c:	685b      	ldr	r3, [r3, #4]
    1c0e:	2108      	movs	r1, #8
    1c10:	4798      	blx	r3
    1c12:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1c14:	7871      	ldrb	r1, [r6, #1]
    1c16:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1c1a:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <del_char+0x64>)
    1c1c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c1e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c20:	685b      	ldr	r3, [r3, #4]
    1c22:	4798      	blx	r3
	while (end-- > 0) {
    1c24:	4625      	mov	r5, r4
    1c26:	1e6b      	subs	r3, r5, #1
    1c28:	b2dc      	uxtb	r4, r3
    1c2a:	2d00      	cmp	r5, #0
    1c2c:	d1f2      	bne.n	1c14 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <del_char+0x64>)
    1c30:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c32:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c34:	685b      	ldr	r3, [r3, #4]
    1c36:	2120      	movs	r1, #32
    1c38:	4798      	blx	r3
	printk("\x1b[u");
    1c3a:	4804      	ldr	r0, [pc, #16]	; (1c4c <del_char+0x6c>)
    1c3c:	f001 fa14 	bl	3068 <printk>
    1c40:	bd70      	pop	{r4, r5, r6, pc}
    1c42:	bf00      	nop
    1c44:	2000080c 	.word	0x2000080c
    1c48:	0002f090 	.word	0x0002f090
    1c4c:	0002f094 	.word	0x0002f094

00001c50 <insert_char>:
{
    1c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c54:	4605      	mov	r5, r0
    1c56:	4688      	mov	r8, r1
    1c58:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1c5a:	4b14      	ldr	r3, [pc, #80]	; (1cac <insert_char+0x5c>)
    1c5c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c5e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c60:	685b      	ldr	r3, [r3, #4]
    1c62:	4798      	blx	r3
	if (end == 0) {
    1c64:	b91c      	cbnz	r4, 1c6e <insert_char+0x1e>
		*pos = c;
    1c66:	f885 8000 	strb.w	r8, [r5]
		return;
    1c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1c6e:	462e      	mov	r6, r5
    1c70:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1c74:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1c78:	480d      	ldr	r0, [pc, #52]	; (1cb0 <insert_char+0x60>)
    1c7a:	f001 f9f5 	bl	3068 <printk>
    1c7e:	e00c      	b.n	1c9a <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1c80:	4b0a      	ldr	r3, [pc, #40]	; (1cac <insert_char+0x5c>)
    1c82:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c84:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c86:	685b      	ldr	r3, [r3, #4]
    1c88:	4639      	mov	r1, r7
    1c8a:	4798      	blx	r3
		c = *pos;
    1c8c:	4633      	mov	r3, r6
    1c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1c92:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1c94:	4617      	mov	r7, r2
	while (end-- > 0) {
    1c96:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1c98:	461e      	mov	r6, r3
	while (end-- > 0) {
    1c9a:	1e63      	subs	r3, r4, #1
    1c9c:	b2dd      	uxtb	r5, r3
    1c9e:	2c00      	cmp	r4, #0
    1ca0:	d1ee      	bne.n	1c80 <insert_char+0x30>
	printk("\x1b[u");
    1ca2:	4804      	ldr	r0, [pc, #16]	; (1cb4 <insert_char+0x64>)
    1ca4:	f001 f9e0 	bl	3068 <printk>
    1ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cac:	2000080c 	.word	0x2000080c
    1cb0:	0002f090 	.word	0x0002f090
    1cb4:	0002f094 	.word	0x0002f094

00001cb8 <handle_ansi>:
{
    1cb8:	b538      	push	{r3, r4, r5, lr}
    1cba:	4604      	mov	r4, r0
    1cbc:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cbe:	4b7f      	ldr	r3, [pc, #508]	; (1ebc <handle_ansi+0x204>)
    1cc0:	f3bf 8f5b 	dmb	ish
    1cc4:	e853 2f00 	ldrex	r2, [r3]
    1cc8:	f022 0104 	bic.w	r1, r2, #4
    1ccc:	e843 1000 	strex	r0, r1, [r3]
    1cd0:	2800      	cmp	r0, #0
    1cd2:	d1f7      	bne.n	1cc4 <handle_ansi+0xc>
    1cd4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1cd8:	f012 0f04 	tst.w	r2, #4
    1cdc:	d03c      	beq.n	1d58 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1cde:	f028 fdf7 	bl	2a8d0 <__locale_ctype_ptr>
    1ce2:	4420      	add	r0, r4
    1ce4:	7843      	ldrb	r3, [r0, #1]
    1ce6:	f013 0f04 	tst.w	r3, #4
    1cea:	d121      	bne.n	1d30 <handle_ansi+0x78>
			ansi_val = 1;
    1cec:	2201      	movs	r2, #1
    1cee:	4b74      	ldr	r3, [pc, #464]	; (1ec0 <handle_ansi+0x208>)
    1cf0:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1cf2:	2c46      	cmp	r4, #70	; 0x46
    1cf4:	f000 80d0 	beq.w	1e98 <handle_ansi+0x1e0>
    1cf8:	f200 8086 	bhi.w	1e08 <handle_ansi+0x150>
    1cfc:	2c43      	cmp	r4, #67	; 0x43
    1cfe:	f000 80a7 	beq.w	1e50 <handle_ansi+0x198>
    1d02:	2c44      	cmp	r4, #68	; 0x44
    1d04:	d106      	bne.n	1d14 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1d06:	4b6f      	ldr	r3, [pc, #444]	; (1ec4 <handle_ansi+0x20c>)
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	4a6d      	ldr	r2, [pc, #436]	; (1ec0 <handle_ansi+0x208>)
    1d0c:	6811      	ldr	r1, [r2, #0]
    1d0e:	428b      	cmp	r3, r1
    1d10:	f080 8092 	bcs.w	1e38 <handle_ansi+0x180>
    1d14:	4b69      	ldr	r3, [pc, #420]	; (1ebc <handle_ansi+0x204>)
    1d16:	f3bf 8f5b 	dmb	ish
    1d1a:	e853 2f00 	ldrex	r2, [r3]
    1d1e:	f022 0202 	bic.w	r2, r2, #2
    1d22:	e843 2100 	strex	r1, r2, [r3]
    1d26:	2900      	cmp	r1, #0
    1d28:	d1f7      	bne.n	1d1a <handle_ansi+0x62>
    1d2a:	f3bf 8f5b 	dmb	ish
    1d2e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d30:	4b62      	ldr	r3, [pc, #392]	; (1ebc <handle_ansi+0x204>)
    1d32:	f3bf 8f5b 	dmb	ish
    1d36:	e853 2f00 	ldrex	r2, [r3]
    1d3a:	f042 0208 	orr.w	r2, r2, #8
    1d3e:	e843 2100 	strex	r1, r2, [r3]
    1d42:	2900      	cmp	r1, #0
    1d44:	d1f7      	bne.n	1d36 <handle_ansi+0x7e>
    1d46:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1d4a:	3c30      	subs	r4, #48	; 0x30
    1d4c:	4b5c      	ldr	r3, [pc, #368]	; (1ec0 <handle_ansi+0x208>)
    1d4e:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1d50:	2200      	movs	r2, #0
    1d52:	4b5d      	ldr	r3, [pc, #372]	; (1ec8 <handle_ansi+0x210>)
    1d54:	601a      	str	r2, [r3, #0]
		return;
    1d56:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1d58:	f3bf 8f5b 	dmb	ish
    1d5c:	4b57      	ldr	r3, [pc, #348]	; (1ebc <handle_ansi+0x204>)
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1d64:	f013 0f08 	tst.w	r3, #8
    1d68:	d0c3      	beq.n	1cf2 <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1d6a:	f028 fdb1 	bl	2a8d0 <__locale_ctype_ptr>
    1d6e:	4420      	add	r0, r4
    1d70:	7843      	ldrb	r3, [r0, #1]
    1d72:	f013 0f04 	tst.w	r3, #4
    1d76:	d11b      	bne.n	1db0 <handle_ansi+0xf8>
		if (byte == ';' &&
    1d78:	2c3b      	cmp	r4, #59	; 0x3b
    1d7a:	d034      	beq.n	1de6 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d7c:	4b4f      	ldr	r3, [pc, #316]	; (1ebc <handle_ansi+0x204>)
    1d7e:	f3bf 8f5b 	dmb	ish
    1d82:	e853 2f00 	ldrex	r2, [r3]
    1d86:	f022 0208 	bic.w	r2, r2, #8
    1d8a:	e843 2100 	strex	r1, r2, [r3]
    1d8e:	2900      	cmp	r1, #0
    1d90:	d1f7      	bne.n	1d82 <handle_ansi+0xca>
    1d92:	f3bf 8f5b 	dmb	ish
    1d96:	f3bf 8f5b 	dmb	ish
    1d9a:	e853 2f00 	ldrex	r2, [r3]
    1d9e:	f022 0210 	bic.w	r2, r2, #16
    1da2:	e843 2100 	strex	r1, r2, [r3]
    1da6:	2900      	cmp	r1, #0
    1da8:	d1f7      	bne.n	1d9a <handle_ansi+0xe2>
    1daa:	f3bf 8f5b 	dmb	ish
    1dae:	e7a0      	b.n	1cf2 <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1db0:	f3bf 8f5b 	dmb	ish
    1db4:	4b41      	ldr	r3, [pc, #260]	; (1ebc <handle_ansi+0x204>)
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1dbc:	f013 0f10 	tst.w	r3, #16
    1dc0:	d008      	beq.n	1dd4 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1dc2:	4941      	ldr	r1, [pc, #260]	; (1ec8 <handle_ansi+0x210>)
    1dc4:	680a      	ldr	r2, [r1, #0]
    1dc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1dca:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1dcc:	4423      	add	r3, r4
    1dce:	3b30      	subs	r3, #48	; 0x30
    1dd0:	600b      	str	r3, [r1, #0]
    1dd2:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1dd4:	493a      	ldr	r1, [pc, #232]	; (1ec0 <handle_ansi+0x208>)
    1dd6:	680a      	ldr	r2, [r1, #0]
    1dd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1ddc:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1dde:	4423      	add	r3, r4
    1de0:	3b30      	subs	r3, #48	; 0x30
    1de2:	600b      	str	r3, [r1, #0]
    1de4:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1de6:	4b35      	ldr	r3, [pc, #212]	; (1ebc <handle_ansi+0x204>)
    1de8:	f3bf 8f5b 	dmb	ish
    1dec:	e853 2f00 	ldrex	r2, [r3]
    1df0:	f042 0110 	orr.w	r1, r2, #16
    1df4:	e843 1000 	strex	r0, r1, [r3]
    1df8:	2800      	cmp	r0, #0
    1dfa:	d1f7      	bne.n	1dec <handle_ansi+0x134>
    1dfc:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1e00:	f012 0f10 	tst.w	r2, #16
    1e04:	d1ba      	bne.n	1d7c <handle_ansi+0xc4>
    1e06:	e792      	b.n	1d2e <handle_ansi+0x76>
	switch (byte) {
    1e08:	2c48      	cmp	r4, #72	; 0x48
    1e0a:	d034      	beq.n	1e76 <handle_ansi+0x1be>
    1e0c:	2c7e      	cmp	r4, #126	; 0x7e
    1e0e:	d181      	bne.n	1d14 <handle_ansi+0x5c>
		if (!end) {
    1e10:	4b2e      	ldr	r3, [pc, #184]	; (1ecc <handle_ansi+0x214>)
    1e12:	781b      	ldrb	r3, [r3, #0]
    1e14:	2b00      	cmp	r3, #0
    1e16:	f43f af7d 	beq.w	1d14 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1e1a:	2101      	movs	r1, #1
    1e1c:	482c      	ldr	r0, [pc, #176]	; (1ed0 <handle_ansi+0x218>)
    1e1e:	f001 f923 	bl	3068 <printk>
		del_char(&line[cur], --end);
    1e22:	4b28      	ldr	r3, [pc, #160]	; (1ec4 <handle_ansi+0x20c>)
    1e24:	7818      	ldrb	r0, [r3, #0]
    1e26:	4b29      	ldr	r3, [pc, #164]	; (1ecc <handle_ansi+0x214>)
    1e28:	7819      	ldrb	r1, [r3, #0]
    1e2a:	3901      	subs	r1, #1
    1e2c:	b2c9      	uxtb	r1, r1
    1e2e:	7019      	strb	r1, [r3, #0]
    1e30:	4428      	add	r0, r5
    1e32:	f7ff fed5 	bl	1be0 <del_char>
		break;
    1e36:	e76d      	b.n	1d14 <handle_ansi+0x5c>
		end += ansi_val;
    1e38:	b2c8      	uxtb	r0, r1
    1e3a:	4c24      	ldr	r4, [pc, #144]	; (1ecc <handle_ansi+0x214>)
    1e3c:	7822      	ldrb	r2, [r4, #0]
    1e3e:	4402      	add	r2, r0
    1e40:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1e42:	1a1b      	subs	r3, r3, r0
    1e44:	4a1f      	ldr	r2, [pc, #124]	; (1ec4 <handle_ansi+0x20c>)
    1e46:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1e48:	4822      	ldr	r0, [pc, #136]	; (1ed4 <handle_ansi+0x21c>)
    1e4a:	f001 f90d 	bl	3068 <printk>
    1e4e:	e761      	b.n	1d14 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1e50:	4b1e      	ldr	r3, [pc, #120]	; (1ecc <handle_ansi+0x214>)
    1e52:	781b      	ldrb	r3, [r3, #0]
    1e54:	4a1a      	ldr	r2, [pc, #104]	; (1ec0 <handle_ansi+0x208>)
    1e56:	6811      	ldr	r1, [r2, #0]
    1e58:	428b      	cmp	r3, r1
    1e5a:	f4ff af5b 	bcc.w	1d14 <handle_ansi+0x5c>
		end -= ansi_val;
    1e5e:	b2ca      	uxtb	r2, r1
    1e60:	1a9b      	subs	r3, r3, r2
    1e62:	481a      	ldr	r0, [pc, #104]	; (1ecc <handle_ansi+0x214>)
    1e64:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1e66:	4b17      	ldr	r3, [pc, #92]	; (1ec4 <handle_ansi+0x20c>)
    1e68:	7818      	ldrb	r0, [r3, #0]
    1e6a:	4402      	add	r2, r0
    1e6c:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1e6e:	4818      	ldr	r0, [pc, #96]	; (1ed0 <handle_ansi+0x218>)
    1e70:	f001 f8fa 	bl	3068 <printk>
    1e74:	e74e      	b.n	1d14 <handle_ansi+0x5c>
		if (!cur) {
    1e76:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <handle_ansi+0x20c>)
    1e78:	7819      	ldrb	r1, [r3, #0]
    1e7a:	2900      	cmp	r1, #0
    1e7c:	f43f af4a 	beq.w	1d14 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1e80:	4814      	ldr	r0, [pc, #80]	; (1ed4 <handle_ansi+0x21c>)
    1e82:	f001 f8f1 	bl	3068 <printk>
		end += cur;
    1e86:	4911      	ldr	r1, [pc, #68]	; (1ecc <handle_ansi+0x214>)
    1e88:	4a0e      	ldr	r2, [pc, #56]	; (1ec4 <handle_ansi+0x20c>)
    1e8a:	780b      	ldrb	r3, [r1, #0]
    1e8c:	7810      	ldrb	r0, [r2, #0]
    1e8e:	4403      	add	r3, r0
    1e90:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1e92:	2300      	movs	r3, #0
    1e94:	7013      	strb	r3, [r2, #0]
		break;
    1e96:	e73d      	b.n	1d14 <handle_ansi+0x5c>
		if (!end) {
    1e98:	4b0c      	ldr	r3, [pc, #48]	; (1ecc <handle_ansi+0x214>)
    1e9a:	7819      	ldrb	r1, [r3, #0]
    1e9c:	2900      	cmp	r1, #0
    1e9e:	f43f af39 	beq.w	1d14 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1ea2:	480b      	ldr	r0, [pc, #44]	; (1ed0 <handle_ansi+0x218>)
    1ea4:	f001 f8e0 	bl	3068 <printk>
		cur += end;
    1ea8:	4906      	ldr	r1, [pc, #24]	; (1ec4 <handle_ansi+0x20c>)
    1eaa:	4a08      	ldr	r2, [pc, #32]	; (1ecc <handle_ansi+0x214>)
    1eac:	780b      	ldrb	r3, [r1, #0]
    1eae:	7810      	ldrb	r0, [r2, #0]
    1eb0:	4403      	add	r3, r0
    1eb2:	700b      	strb	r3, [r1, #0]
		end = 0;
    1eb4:	2300      	movs	r3, #0
    1eb6:	7013      	strb	r3, [r2, #0]
		break;
    1eb8:	e72c      	b.n	1d14 <handle_ansi+0x5c>
    1eba:	bf00      	nop
    1ebc:	20000804 	.word	0x20000804
    1ec0:	200007ec 	.word	0x200007ec
    1ec4:	20000800 	.word	0x20000800
    1ec8:	200007f0 	.word	0x200007f0
    1ecc:	20000801 	.word	0x20000801
    1ed0:	0002f0a0 	.word	0x0002f0a0
    1ed4:	0002f098 	.word	0x0002f098

00001ed8 <uart_console_isr>:
{
    1ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1edc:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1ede:	e001      	b.n	1ee4 <uart_console_isr+0xc>
	return 0;
    1ee0:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1ee2:	b9d8      	cbnz	r0, 1f1c <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1ee4:	4b78      	ldr	r3, [pc, #480]	; (20c8 <uart_console_isr+0x1f0>)
    1ee6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ee8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1eec:	2b00      	cmp	r3, #0
    1eee:	f000 80e7 	beq.w	20c0 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1ef2:	4798      	blx	r3
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d037      	beq.n	1f68 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1ef8:	4b73      	ldr	r3, [pc, #460]	; (20c8 <uart_console_isr+0x1f0>)
    1efa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1efc:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f00:	2b00      	cmp	r3, #0
    1f02:	f000 80df 	beq.w	20c4 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1f06:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1f08:	2800      	cmp	r0, #0
    1f0a:	d02d      	beq.n	1f68 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1f0c:	4b6e      	ldr	r3, [pc, #440]	; (20c8 <uart_console_isr+0x1f0>)
    1f0e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1f10:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f14:	2b00      	cmp	r3, #0
    1f16:	d0e3      	beq.n	1ee0 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1f18:	4798      	blx	r3
    1f1a:	e7e2      	b.n	1ee2 <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1f1c:	2201      	movs	r2, #1
    1f1e:	f10d 0107 	add.w	r1, sp, #7
    1f22:	4b69      	ldr	r3, [pc, #420]	; (20c8 <uart_console_isr+0x1f0>)
    1f24:	6818      	ldr	r0, [r3, #0]
    1f26:	f7ff fe0b 	bl	1b40 <read_uart>
		if (rx < 0) {
    1f2a:	2800      	cmp	r0, #0
    1f2c:	db1c      	blt.n	1f68 <uart_console_isr+0x90>
		if (!cmd) {
    1f2e:	4b67      	ldr	r3, [pc, #412]	; (20cc <uart_console_isr+0x1f4>)
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	b183      	cbz	r3, 1f56 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f34:	f3bf 8f5b 	dmb	ish
    1f38:	4b65      	ldr	r3, [pc, #404]	; (20d0 <uart_console_isr+0x1f8>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1f40:	f013 0f02 	tst.w	r3, #2
    1f44:	d013      	beq.n	1f6e <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1f46:	4b61      	ldr	r3, [pc, #388]	; (20cc <uart_console_isr+0x1f4>)
    1f48:	6819      	ldr	r1, [r3, #0]
    1f4a:	3104      	adds	r1, #4
    1f4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1f50:	f7ff feb2 	bl	1cb8 <handle_ansi>
			continue;
    1f54:	e7c6      	b.n	1ee4 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1f56:	2100      	movs	r1, #0
    1f58:	4b5e      	ldr	r3, [pc, #376]	; (20d4 <uart_console_isr+0x1fc>)
    1f5a:	6818      	ldr	r0, [r3, #0]
    1f5c:	f027 fa2e 	bl	293bc <k_queue_get>
    1f60:	4b5a      	ldr	r3, [pc, #360]	; (20cc <uart_console_isr+0x1f4>)
    1f62:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1f64:	2800      	cmp	r0, #0
    1f66:	d1e5      	bne.n	1f34 <uart_console_isr+0x5c>
}
    1f68:	b002      	add	sp, #8
    1f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f6e:	4b58      	ldr	r3, [pc, #352]	; (20d0 <uart_console_isr+0x1f8>)
    1f70:	f3bf 8f5b 	dmb	ish
    1f74:	e853 2f00 	ldrex	r2, [r3]
    1f78:	f022 0101 	bic.w	r1, r2, #1
    1f7c:	e843 1000 	strex	r0, r1, [r3]
    1f80:	2800      	cmp	r0, #0
    1f82:	d1f7      	bne.n	1f74 <uart_console_isr+0x9c>
    1f84:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1f88:	f012 0f01 	tst.w	r2, #1
    1f8c:	d01d      	beq.n	1fca <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f92:	2b5b      	cmp	r3, #91	; 0x5b
    1f94:	d1a6      	bne.n	1ee4 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f96:	4b4e      	ldr	r3, [pc, #312]	; (20d0 <uart_console_isr+0x1f8>)
    1f98:	f3bf 8f5b 	dmb	ish
    1f9c:	e853 2f00 	ldrex	r2, [r3]
    1fa0:	f042 0202 	orr.w	r2, r2, #2
    1fa4:	e843 2100 	strex	r1, r2, [r3]
    1fa8:	2900      	cmp	r1, #0
    1faa:	d1f7      	bne.n	1f9c <uart_console_isr+0xc4>
    1fac:	f3bf 8f5b 	dmb	ish
    1fb0:	f3bf 8f5b 	dmb	ish
    1fb4:	e853 2f00 	ldrex	r2, [r3]
    1fb8:	f042 0204 	orr.w	r2, r2, #4
    1fbc:	e843 2100 	strex	r1, r2, [r3]
    1fc0:	2900      	cmp	r1, #0
    1fc2:	d1f7      	bne.n	1fb4 <uart_console_isr+0xdc>
    1fc4:	f3bf 8f5b 	dmb	ish
			continue;
    1fc8:	e78c      	b.n	1ee4 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1fca:	f028 fc81 	bl	2a8d0 <__locale_ctype_ptr>
    1fce:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1fd2:	4408      	add	r0, r1
    1fd4:	7843      	ldrb	r3, [r0, #1]
    1fd6:	f013 0f97 	tst.w	r3, #151	; 0x97
    1fda:	d15f      	bne.n	209c <uart_console_isr+0x1c4>
			switch (byte) {
    1fdc:	290d      	cmp	r1, #13
    1fde:	d03c      	beq.n	205a <uart_console_isr+0x182>
    1fe0:	d916      	bls.n	2010 <uart_console_isr+0x138>
    1fe2:	291b      	cmp	r1, #27
    1fe4:	d02b      	beq.n	203e <uart_console_isr+0x166>
    1fe6:	297f      	cmp	r1, #127	; 0x7f
    1fe8:	f47f af7c 	bne.w	1ee4 <uart_console_isr+0xc>
				if (cur > 0) {
    1fec:	4b3a      	ldr	r3, [pc, #232]	; (20d8 <uart_console_isr+0x200>)
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	f43f af77 	beq.w	1ee4 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1ff6:	4a35      	ldr	r2, [pc, #212]	; (20cc <uart_console_isr+0x1f4>)
    1ff8:	6812      	ldr	r2, [r2, #0]
    1ffa:	3b01      	subs	r3, #1
    1ffc:	b2db      	uxtb	r3, r3
    1ffe:	4936      	ldr	r1, [pc, #216]	; (20d8 <uart_console_isr+0x200>)
    2000:	700b      	strb	r3, [r1, #0]
    2002:	4413      	add	r3, r2
    2004:	4a35      	ldr	r2, [pc, #212]	; (20dc <uart_console_isr+0x204>)
    2006:	7811      	ldrb	r1, [r2, #0]
    2008:	1d18      	adds	r0, r3, #4
    200a:	f7ff fde9 	bl	1be0 <del_char>
    200e:	e769      	b.n	1ee4 <uart_console_isr+0xc>
			switch (byte) {
    2010:	2909      	cmp	r1, #9
    2012:	f47f af67 	bne.w	1ee4 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    2016:	4b32      	ldr	r3, [pc, #200]	; (20e0 <uart_console_isr+0x208>)
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	2b00      	cmp	r3, #0
    201c:	f43f af62 	beq.w	1ee4 <uart_console_isr+0xc>
    2020:	4a2e      	ldr	r2, [pc, #184]	; (20dc <uart_console_isr+0x204>)
    2022:	7812      	ldrb	r2, [r2, #0]
    2024:	2a00      	cmp	r2, #0
    2026:	f47f af5d 	bne.w	1ee4 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    202a:	4a28      	ldr	r2, [pc, #160]	; (20cc <uart_console_isr+0x1f4>)
    202c:	6810      	ldr	r0, [r2, #0]
    202e:	4c2a      	ldr	r4, [pc, #168]	; (20d8 <uart_console_isr+0x200>)
    2030:	7821      	ldrb	r1, [r4, #0]
    2032:	3004      	adds	r0, #4
    2034:	4798      	blx	r3
    2036:	7823      	ldrb	r3, [r4, #0]
    2038:	4403      	add	r3, r0
    203a:	7023      	strb	r3, [r4, #0]
			continue;
    203c:	e752      	b.n	1ee4 <uart_console_isr+0xc>
    203e:	4b24      	ldr	r3, [pc, #144]	; (20d0 <uart_console_isr+0x1f8>)
    2040:	f3bf 8f5b 	dmb	ish
    2044:	e853 2f00 	ldrex	r2, [r3]
    2048:	f042 0201 	orr.w	r2, r2, #1
    204c:	e843 2100 	strex	r1, r2, [r3]
    2050:	2900      	cmp	r1, #0
    2052:	d1f7      	bne.n	2044 <uart_console_isr+0x16c>
    2054:	f3bf 8f5b 	dmb	ish
    2058:	e744      	b.n	1ee4 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    205a:	4d1c      	ldr	r5, [pc, #112]	; (20cc <uart_console_isr+0x1f4>)
    205c:	682b      	ldr	r3, [r5, #0]
    205e:	4f1e      	ldr	r7, [pc, #120]	; (20d8 <uart_console_isr+0x200>)
    2060:	783a      	ldrb	r2, [r7, #0]
    2062:	4e1e      	ldr	r6, [pc, #120]	; (20dc <uart_console_isr+0x204>)
    2064:	7831      	ldrb	r1, [r6, #0]
    2066:	440a      	add	r2, r1
    2068:	4413      	add	r3, r2
    206a:	2400      	movs	r4, #0
    206c:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    206e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 20c8 <uart_console_isr+0x1f0>
    2072:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    2076:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    2078:	685b      	ldr	r3, [r3, #4]
    207a:	210d      	movs	r1, #13
    207c:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    207e:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    2082:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    2084:	685b      	ldr	r3, [r3, #4]
    2086:	210a      	movs	r1, #10
    2088:	4798      	blx	r3
				cur = 0;
    208a:	703c      	strb	r4, [r7, #0]
				end = 0;
    208c:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    208e:	6829      	ldr	r1, [r5, #0]
    2090:	4b14      	ldr	r3, [pc, #80]	; (20e4 <uart_console_isr+0x20c>)
    2092:	6818      	ldr	r0, [r3, #0]
    2094:	f027 f96a 	bl	2936c <k_queue_append>
				cmd = NULL;
    2098:	602c      	str	r4, [r5, #0]
				break;
    209a:	e723      	b.n	1ee4 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    209c:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <uart_console_isr+0x200>)
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	4a0e      	ldr	r2, [pc, #56]	; (20dc <uart_console_isr+0x204>)
    20a2:	7812      	ldrb	r2, [r2, #0]
    20a4:	18d0      	adds	r0, r2, r3
    20a6:	287e      	cmp	r0, #126	; 0x7e
    20a8:	f63f af1c 	bhi.w	1ee4 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    20ac:	4807      	ldr	r0, [pc, #28]	; (20cc <uart_console_isr+0x1f4>)
    20ae:	6800      	ldr	r0, [r0, #0]
    20b0:	1c5d      	adds	r5, r3, #1
    20b2:	4c09      	ldr	r4, [pc, #36]	; (20d8 <uart_console_isr+0x200>)
    20b4:	7025      	strb	r5, [r4, #0]
    20b6:	4418      	add	r0, r3
    20b8:	3004      	adds	r0, #4
    20ba:	f7ff fdc9 	bl	1c50 <insert_char>
    20be:	e711      	b.n	1ee4 <uart_console_isr+0xc>
	return 0;
    20c0:	2000      	movs	r0, #0
    20c2:	e717      	b.n	1ef4 <uart_console_isr+0x1c>
	return 0;
    20c4:	2000      	movs	r0, #0
    20c6:	e71f      	b.n	1f08 <uart_console_isr+0x30>
    20c8:	2000080c 	.word	0x2000080c
    20cc:	200007f8 	.word	0x200007f8
    20d0:	20000804 	.word	0x20000804
    20d4:	200007f4 	.word	0x200007f4
    20d8:	20000800 	.word	0x20000800
    20dc:	20000801 	.word	0x20000801
    20e0:	200007fc 	.word	0x200007fc
    20e4:	20000808 	.word	0x20000808

000020e8 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    20e8:	b508      	push	{r3, lr}
	avail_queue = avail;
    20ea:	4b04      	ldr	r3, [pc, #16]	; (20fc <uart_register_input+0x14>)
    20ec:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    20ee:	4b04      	ldr	r3, [pc, #16]	; (2100 <uart_register_input+0x18>)
    20f0:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    20f2:	4b04      	ldr	r3, [pc, #16]	; (2104 <uart_register_input+0x1c>)
    20f4:	601a      	str	r2, [r3, #0]

	console_input_init();
    20f6:	f7ff fd39 	bl	1b6c <console_input_init>
    20fa:	bd08      	pop	{r3, pc}
    20fc:	200007f4 	.word	0x200007f4
    2100:	20000808 	.word	0x20000808
    2104:	200007fc 	.word	0x200007fc

00002108 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    2108:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    210a:	4802      	ldr	r0, [pc, #8]	; (2114 <uart_console_hook_install+0xc>)
    210c:	f000 fe70 	bl	2df0 <__printk_hook_install>
    2110:	bd08      	pop	{r3, pc}
    2112:	bf00      	nop
    2114:	00001b15 	.word	0x00001b15

00002118 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2118:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    211a:	4804      	ldr	r0, [pc, #16]	; (212c <uart_console_init+0x14>)
    211c:	f026 f9f6 	bl	2850c <device_get_binding>
    2120:	4b03      	ldr	r3, [pc, #12]	; (2130 <uart_console_init+0x18>)
    2122:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2124:	f7ff fff0 	bl	2108 <uart_console_hook_install>

	return 0;
}
    2128:	2000      	movs	r0, #0
    212a:	bd08      	pop	{r3, pc}
    212c:	0002f0a8 	.word	0x0002f0a8
    2130:	2000080c 	.word	0x2000080c

00002134 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    2134:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    2136:	f000 fa73 	bl	2620 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    213a:	4b08      	ldr	r3, [pc, #32]	; (215c <sys_rand32_get+0x28>)
    213c:	f3bf 8f5b 	dmb	ish
    2140:	e853 2f00 	ldrex	r2, [r3]
    2144:	4906      	ldr	r1, [pc, #24]	; (2160 <sys_rand32_get+0x2c>)
    2146:	1851      	adds	r1, r2, r1
    2148:	e843 1e00 	strex	lr, r1, [r3]
    214c:	f1be 0f00 	cmp.w	lr, #0
    2150:	d1f6      	bne.n	2140 <sys_rand32_get+0xc>
    2152:	f3bf 8f5b 	dmb	ish
}
    2156:	4410      	add	r0, r2
    2158:	bd08      	pop	{r3, pc}
    215a:	bf00      	nop
    215c:	20000810 	.word	0x20000810
    2160:	3b9aca0d 	.word	0x3b9aca0d

00002164 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2164:	6803      	ldr	r3, [r0, #0]
    2166:	689b      	ldr	r3, [r3, #8]
    2168:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    216a:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    216e:	d05b      	beq.n	2228 <baudrate_set+0xc4>
    2170:	d910      	bls.n	2194 <baudrate_set+0x30>
    2172:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2176:	d05e      	beq.n	2236 <baudrate_set+0xd2>
    2178:	d833      	bhi.n	21e2 <baudrate_set+0x7e>
    217a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    217e:	d055      	beq.n	222c <baudrate_set+0xc8>
    2180:	d929      	bls.n	21d6 <baudrate_set+0x72>
    2182:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2186:	d054      	beq.n	2232 <baudrate_set+0xce>
    2188:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    218c:	d11b      	bne.n	21c6 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    218e:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    2192:	e03b      	b.n	220c <baudrate_set+0xa8>
	switch (baudrate) {
    2194:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2198:	d03f      	beq.n	221a <baudrate_set+0xb6>
    219a:	d90b      	bls.n	21b4 <baudrate_set+0x50>
    219c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    21a0:	d03e      	beq.n	2220 <baudrate_set+0xbc>
    21a2:	d913      	bls.n	21cc <baudrate_set+0x68>
    21a4:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    21a8:	d03c      	beq.n	2224 <baudrate_set+0xc0>
    21aa:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    21ae:	d10a      	bne.n	21c6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    21b0:	4a27      	ldr	r2, [pc, #156]	; (2250 <baudrate_set+0xec>)
		break;
    21b2:	e02b      	b.n	220c <baudrate_set+0xa8>
	switch (baudrate) {
    21b4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    21b8:	d046      	beq.n	2248 <baudrate_set+0xe4>
    21ba:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    21be:	d029      	beq.n	2214 <baudrate_set+0xb0>
    21c0:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    21c4:	d020      	beq.n	2208 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    21c6:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    21ca:	4770      	bx	lr
	switch (baudrate) {
    21cc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    21d0:	d1f9      	bne.n	21c6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    21d2:	4a20      	ldr	r2, [pc, #128]	; (2254 <baudrate_set+0xf0>)
		break;
    21d4:	e01a      	b.n	220c <baudrate_set+0xa8>
	switch (baudrate) {
    21d6:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    21da:	d1f4      	bne.n	21c6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    21dc:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    21e0:	e014      	b.n	220c <baudrate_set+0xa8>
	switch (baudrate) {
    21e2:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    21e6:	d029      	beq.n	223c <baudrate_set+0xd8>
    21e8:	d908      	bls.n	21fc <baudrate_set+0x98>
    21ea:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    21ee:	d028      	beq.n	2242 <baudrate_set+0xde>
    21f0:	4a19      	ldr	r2, [pc, #100]	; (2258 <baudrate_set+0xf4>)
    21f2:	4291      	cmp	r1, r2
    21f4:	d1e7      	bne.n	21c6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    21f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    21fa:	e007      	b.n	220c <baudrate_set+0xa8>
	switch (baudrate) {
    21fc:	4a17      	ldr	r2, [pc, #92]	; (225c <baudrate_set+0xf8>)
    21fe:	4291      	cmp	r1, r2
    2200:	d1e1      	bne.n	21c6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    2202:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    2206:	e001      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2208:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    220c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    2210:	2000      	movs	r0, #0
    2212:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    2214:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2218:	e7f8      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    221a:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    221e:	e7f5      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2220:	4a0f      	ldr	r2, [pc, #60]	; (2260 <baudrate_set+0xfc>)
		break;
    2222:	e7f3      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    2224:	4a0f      	ldr	r2, [pc, #60]	; (2264 <baudrate_set+0x100>)
		break;
    2226:	e7f1      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2228:	4a0f      	ldr	r2, [pc, #60]	; (2268 <baudrate_set+0x104>)
		break;
    222a:	e7ef      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    222c:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    2230:	e7ec      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    2232:	4a0e      	ldr	r2, [pc, #56]	; (226c <baudrate_set+0x108>)
		break;
    2234:	e7ea      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    2236:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    223a:	e7e7      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    223c:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    2240:	e7e4      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    2242:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    2246:	e7e1      	b.n	220c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2248:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    224c:	e7de      	b.n	220c <baudrate_set+0xa8>
    224e:	bf00      	nop
    2250:	004ea000 	.word	0x004ea000
    2254:	0013b000 	.word	0x0013b000
    2258:	000f4240 	.word	0x000f4240
    225c:	0003d090 	.word	0x0003d090
    2260:	00275000 	.word	0x00275000
    2264:	003af000 	.word	0x003af000
    2268:	0075c000 	.word	0x0075c000
    226c:	013a9000 	.word	0x013a9000

00002270 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2270:	6803      	ldr	r3, [r0, #0]
    2272:	689b      	ldr	r3, [r3, #8]
    2274:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2276:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    227a:	b132      	cbz	r2, 228a <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    227c:	2000      	movs	r0, #0
    227e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2282:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2286:	700b      	strb	r3, [r1, #0]

	return 0;
    2288:	4770      	bx	lr
		return -1;
    228a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    228e:	4770      	bx	lr

00002290 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2290:	6803      	ldr	r3, [r0, #0]
    2292:	689b      	ldr	r3, [r3, #8]
    2294:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2296:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    229a:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    229e:	2b00      	cmp	r3, #0
    22a0:	d0fb      	beq.n	229a <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    22a2:	2300      	movs	r3, #0
    22a4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    22a8:	4608      	mov	r0, r1
    22aa:	4770      	bx	lr

000022ac <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22ac:	6803      	ldr	r3, [r0, #0]
    22ae:	689b      	ldr	r3, [r3, #8]
    22b0:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    22b2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    22b6:	b132      	cbz	r2, 22c6 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    22b8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    22bc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    22c0:	f000 000f 	and.w	r0, r0, #15
    22c4:	4770      	bx	lr
	u32_t error = 0;
    22c6:	2000      	movs	r0, #0
    22c8:	e7fa      	b.n	22c0 <uart_nrf5_err_check+0x14>

000022ca <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    22ca:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    22cc:	6803      	ldr	r3, [r0, #0]
    22ce:	689b      	ldr	r3, [r3, #8]
    22d0:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    22d2:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    22d4:	e007      	b.n	22e6 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    22d6:	2000      	movs	r0, #0
    22d8:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    22dc:	1c58      	adds	r0, r3, #1
    22de:	5ccb      	ldrb	r3, [r1, r3]
    22e0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    22e4:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    22e6:	4618      	mov	r0, r3
    22e8:	1ad5      	subs	r5, r2, r3
    22ea:	2d00      	cmp	r5, #0
    22ec:	dd03      	ble.n	22f6 <uart_nrf5_fifo_fill+0x2c>
    22ee:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    22f2:	2d00      	cmp	r5, #0
    22f4:	d1ef      	bne.n	22d6 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    22f6:	bc30      	pop	{r4, r5}
    22f8:	4770      	bx	lr

000022fa <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    22fa:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    22fc:	6803      	ldr	r3, [r0, #0]
    22fe:	689b      	ldr	r3, [r3, #8]
    2300:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    2302:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2304:	e007      	b.n	2316 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    2306:	2000      	movs	r0, #0
    2308:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    230c:	1c58      	adds	r0, r3, #1
    230e:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    2312:	54cd      	strb	r5, [r1, r3]
    2314:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2316:	4618      	mov	r0, r3
    2318:	1ad5      	subs	r5, r2, r3
    231a:	2d00      	cmp	r5, #0
    231c:	dd03      	ble.n	2326 <uart_nrf5_fifo_read+0x2c>
    231e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    2322:	2d00      	cmp	r5, #0
    2324:	d1ef      	bne.n	2306 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    2326:	bc30      	pop	{r4, r5}
    2328:	4770      	bx	lr

0000232a <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    232a:	6803      	ldr	r3, [r0, #0]
    232c:	689b      	ldr	r3, [r3, #8]
    232e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2330:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2334:	f043 0308 	orr.w	r3, r3, #8
    2338:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    233c:	4770      	bx	lr

0000233e <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    233e:	6803      	ldr	r3, [r0, #0]
    2340:	689b      	ldr	r3, [r3, #8]
    2342:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2344:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2348:	f043 0308 	orr.w	r3, r3, #8
    234c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2350:	4770      	bx	lr

00002352 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2352:	6803      	ldr	r3, [r0, #0]
    2354:	689b      	ldr	r3, [r3, #8]
    2356:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2358:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    235c:	4770      	bx	lr

0000235e <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    235e:	6803      	ldr	r3, [r0, #0]
    2360:	689b      	ldr	r3, [r3, #8]
    2362:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2364:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2368:	f043 0304 	orr.w	r3, r3, #4
    236c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2370:	4770      	bx	lr

00002372 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2372:	6803      	ldr	r3, [r0, #0]
    2374:	689b      	ldr	r3, [r3, #8]
    2376:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2378:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    237c:	f043 0304 	orr.w	r3, r3, #4
    2380:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2384:	4770      	bx	lr

00002386 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2386:	6803      	ldr	r3, [r0, #0]
    2388:	689b      	ldr	r3, [r3, #8]
    238a:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    238c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2390:	fab0 f080 	clz	r0, r0
    2394:	0940      	lsrs	r0, r0, #5
    2396:	4770      	bx	lr

00002398 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2398:	6803      	ldr	r3, [r0, #0]
    239a:	689b      	ldr	r3, [r3, #8]
    239c:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    239e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    23a2:	4770      	bx	lr

000023a4 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    23a4:	6803      	ldr	r3, [r0, #0]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    23aa:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    23ae:	f043 0310 	orr.w	r3, r3, #16
    23b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    23b6:	4770      	bx	lr

000023b8 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    23b8:	6803      	ldr	r3, [r0, #0]
    23ba:	689b      	ldr	r3, [r3, #8]
    23bc:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    23be:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    23c2:	f043 0310 	orr.w	r3, r3, #16
    23c6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    23ca:	4770      	bx	lr

000023cc <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    23cc:	b510      	push	{r4, lr}
    23ce:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    23d0:	f7ff ffbf 	bl	2352 <uart_nrf5_irq_tx_ready>
    23d4:	b110      	cbz	r0, 23dc <uart_nrf5_irq_is_pending+0x10>
    23d6:	2301      	movs	r3, #1
}
    23d8:	4618      	mov	r0, r3
    23da:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    23dc:	4620      	mov	r0, r4
    23de:	f7ff ffdb 	bl	2398 <uart_nrf5_irq_rx_ready>
    23e2:	4603      	mov	r3, r0
    23e4:	2800      	cmp	r0, #0
    23e6:	d0f7      	beq.n	23d8 <uart_nrf5_irq_is_pending+0xc>
    23e8:	2301      	movs	r3, #1
    23ea:	e7f5      	b.n	23d8 <uart_nrf5_irq_is_pending+0xc>

000023ec <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    23ec:	2001      	movs	r0, #1
    23ee:	4770      	bx	lr

000023f0 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    23f0:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    23f2:	6059      	str	r1, [r3, #4]
    23f4:	4770      	bx	lr

000023f6 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    23f6:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    23f8:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    23fa:	685b      	ldr	r3, [r3, #4]
    23fc:	b103      	cbz	r3, 2400 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    23fe:	4798      	blx	r3
    2400:	bd08      	pop	{r3, pc}

00002402 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    2402:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    2404:	2200      	movs	r2, #0
    2406:	2101      	movs	r1, #1
    2408:	2002      	movs	r0, #2
    240a:	f025 fedb 	bl	281c4 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    240e:	2002      	movs	r0, #2
    2410:	f025 feae 	bl	28170 <_arch_irq_enable>
    2414:	bd08      	pop	{r3, pc}
	...

00002418 <uart_nrf5_init>:
{
    2418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    241a:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    241c:	6803      	ldr	r3, [r0, #0]
    241e:	689b      	ldr	r3, [r3, #8]
    2420:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2422:	481d      	ldr	r0, [pc, #116]	; (2498 <uart_nrf5_init+0x80>)
    2424:	f026 f872 	bl	2850c <device_get_binding>
    2428:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    242a:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    242c:	681f      	ldr	r7, [r3, #0]
    242e:	f240 1301 	movw	r3, #257	; 0x101
    2432:	2206      	movs	r2, #6
    2434:	2100      	movs	r1, #0
    2436:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2438:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    243a:	681f      	ldr	r7, [r3, #0]
    243c:	2300      	movs	r3, #0
    243e:	2208      	movs	r2, #8
    2440:	4619      	mov	r1, r3
    2442:	4630      	mov	r0, r6
    2444:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2446:	2306      	movs	r3, #6
    2448:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    244c:	2308      	movs	r3, #8
    244e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    2452:	68a3      	ldr	r3, [r4, #8]
    2454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2458:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    245a:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    245c:	6822      	ldr	r2, [r4, #0]
    245e:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2460:	6852      	ldr	r2, [r2, #4]
    2462:	6819      	ldr	r1, [r3, #0]
    2464:	4620      	mov	r0, r4
    2466:	f7ff fe7d 	bl	2164 <baudrate_set>
	if (err) {
    246a:	4606      	mov	r6, r0
    246c:	b108      	cbz	r0, 2472 <uart_nrf5_init+0x5a>
}
    246e:	4630      	mov	r0, r6
    2470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    2472:	2304      	movs	r3, #4
    2474:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2478:	2300      	movs	r3, #0
    247a:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    247e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2482:	2301      	movs	r3, #1
    2484:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    2486:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2488:	4b04      	ldr	r3, [pc, #16]	; (249c <uart_nrf5_init+0x84>)
    248a:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    248c:	6823      	ldr	r3, [r4, #0]
    248e:	689b      	ldr	r3, [r3, #8]
    2490:	689b      	ldr	r3, [r3, #8]
    2492:	4620      	mov	r0, r4
    2494:	4798      	blx	r3
	return 0;
    2496:	e7ea      	b.n	246e <uart_nrf5_init+0x56>
    2498:	0002f0bc 	.word	0x0002f0bc
    249c:	0002f0e8 	.word	0x0002f0e8

000024a0 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    24a0:	4b08      	ldr	r3, [pc, #32]	; (24c4 <rtc_compare_set+0x24>)
    24a2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    24a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    24aa:	1ac0      	subs	r0, r0, r3
    24ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24b0:	3802      	subs	r0, #2
    24b2:	4b05      	ldr	r3, [pc, #20]	; (24c8 <rtc_compare_set+0x28>)
    24b4:	4298      	cmp	r0, r3
    24b6:	d904      	bls.n	24c2 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24bc:	4b03      	ldr	r3, [pc, #12]	; (24cc <rtc_compare_set+0x2c>)
    24be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    24c2:	4770      	bx	lr
    24c4:	40011000 	.word	0x40011000
    24c8:	007ffffd 	.word	0x007ffffd
    24cc:	e000e100 	.word	0xe000e100

000024d0 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    24d0:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    24d2:	4b15      	ldr	r3, [pc, #84]	; (2528 <rtc_announce_set_next+0x58>)
    24d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    24d8:	4a14      	ldr	r2, [pc, #80]	; (252c <rtc_announce_set_next+0x5c>)
    24da:	6811      	ldr	r1, [r2, #0]
    24dc:	1a5b      	subs	r3, r3, r1
    24de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    24e2:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    24e6:	d917      	bls.n	2518 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    24e8:	4a11      	ldr	r2, [pc, #68]	; (2530 <rtc_announce_set_next+0x60>)
    24ea:	fba2 0203 	umull	r0, r2, r2, r3
    24ee:	1a9b      	subs	r3, r3, r2
    24f0:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    24f4:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    24f6:	4a0f      	ldr	r2, [pc, #60]	; (2534 <rtc_announce_set_next+0x64>)
    24f8:	6810      	ldr	r0, [r2, #0]
    24fa:	4283      	cmp	r3, r0
    24fc:	d800      	bhi.n	2500 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    24fe:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2500:	f240 1347 	movw	r3, #327	; 0x147
    2504:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    250c:	4a07      	ldr	r2, [pc, #28]	; (252c <rtc_announce_set_next+0x5c>)
    250e:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <rtc_announce_set_next+0x68>)
    2512:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    2514:	f027 fb42 	bl	29b9c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <rtc_announce_set_next+0x5c>)
    251a:	6818      	ldr	r0, [r3, #0]
    251c:	f200 1047 	addw	r0, r0, #327	; 0x147
    2520:	f7ff ffbe 	bl	24a0 <rtc_compare_set>
    2524:	bd08      	pop	{r3, pc}
    2526:	bf00      	nop
    2528:	40011000 	.word	0x40011000
    252c:	20000818 	.word	0x20000818
    2530:	90d4f121 	.word	0x90d4f121
    2534:	20000814 	.word	0x20000814
    2538:	2000cb08 	.word	0x2000cb08

0000253c <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    253c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    253e:	2200      	movs	r2, #0
    2540:	4b02      	ldr	r3, [pc, #8]	; (254c <rtc1_nrf5_isr+0x10>)
    2542:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    2546:	f7ff ffc3 	bl	24d0 <rtc_announce_set_next>
    254a:	bd08      	pop	{r3, pc}
    254c:	40011000 	.word	0x40011000

00002550 <_timer_idle_enter>:
{
    2550:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    2552:	f246 4335 	movw	r3, #25653	; 0x6435
    2556:	4298      	cmp	r0, r3
    2558:	d900      	bls.n	255c <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    255a:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    255c:	4b05      	ldr	r3, [pc, #20]	; (2574 <_timer_idle_enter+0x24>)
    255e:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    2560:	4b05      	ldr	r3, [pc, #20]	; (2578 <_timer_idle_enter+0x28>)
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	f240 1247 	movw	r2, #327	; 0x147
    2568:	fb02 3000 	mla	r0, r2, r0, r3
    256c:	f7ff ff98 	bl	24a0 <rtc_compare_set>
    2570:	bd08      	pop	{r3, pc}
    2572:	bf00      	nop
    2574:	20000814 	.word	0x20000814
    2578:	20000818 	.word	0x20000818

0000257c <_timer_idle_exit>:
{
    257c:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    257e:	2200      	movs	r2, #0
    2580:	4b06      	ldr	r3, [pc, #24]	; (259c <_timer_idle_exit+0x20>)
    2582:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <_timer_idle_exit+0x24>)
    258c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2590:	f7ff ff9e 	bl	24d0 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2594:	2201      	movs	r2, #1
    2596:	4b03      	ldr	r3, [pc, #12]	; (25a4 <_timer_idle_exit+0x28>)
    2598:	601a      	str	r2, [r3, #0]
    259a:	bd08      	pop	{r3, pc}
    259c:	40011000 	.word	0x40011000
    25a0:	e000e100 	.word	0xe000e100
    25a4:	20000814 	.word	0x20000814

000025a8 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    25a8:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    25aa:	4818      	ldr	r0, [pc, #96]	; (260c <_sys_clock_driver_init+0x64>)
    25ac:	f025 ffae 	bl	2850c <device_get_binding>
	if (!clock) {
    25b0:	b348      	cbz	r0, 2606 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    25b2:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    25b4:	6812      	ldr	r2, [r2, #0]
    25b6:	2101      	movs	r1, #1
    25b8:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    25ba:	2400      	movs	r4, #0
    25bc:	4b14      	ldr	r3, [pc, #80]	; (2610 <_sys_clock_driver_init+0x68>)
    25be:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    25c0:	2601      	movs	r6, #1
    25c2:	4b14      	ldr	r3, [pc, #80]	; (2614 <_sys_clock_driver_init+0x6c>)
    25c4:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    25c6:	4d14      	ldr	r5, [pc, #80]	; (2618 <_sys_clock_driver_init+0x70>)
    25c8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    25cc:	f240 1347 	movw	r3, #327	; 0x147
    25d0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    25d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25d8:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    25dc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    25e0:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    25e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    25e8:	4b0c      	ldr	r3, [pc, #48]	; (261c <_sys_clock_driver_init+0x74>)
    25ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    25ee:	4622      	mov	r2, r4
    25f0:	4631      	mov	r1, r6
    25f2:	2011      	movs	r0, #17
    25f4:	f025 fde6 	bl	281c4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    25f8:	2011      	movs	r0, #17
    25fa:	f025 fdb9 	bl	28170 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    25fe:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    2600:	602e      	str	r6, [r5, #0]

	return 0;
    2602:	4620      	mov	r0, r4
    2604:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    260a:	bd70      	pop	{r4, r5, r6, pc}
    260c:	0002f0c4 	.word	0x0002f0c4
    2610:	20000818 	.word	0x20000818
    2614:	20000814 	.word	0x20000814
    2618:	40011000 	.word	0x40011000
    261c:	e000e100 	.word	0xe000e100

00002620 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2620:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    2622:	4b0d      	ldr	r3, [pc, #52]	; (2658 <_timer_cycle_get_32+0x38>)
    2624:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2628:	e000      	b.n	262c <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    262a:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    262c:	4b0b      	ldr	r3, [pc, #44]	; (265c <_timer_cycle_get_32+0x3c>)
    262e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2632:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2634:	f240 1047 	movw	r0, #327	; 0x147
    2638:	fb00 1212 	mls	r2, r0, r2, r1
    263c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    2640:	4b05      	ldr	r3, [pc, #20]	; (2658 <_timer_cycle_get_32+0x38>)
    2642:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    2646:	4299      	cmp	r1, r3
    2648:	d1ef      	bne.n	262a <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    264a:	4b05      	ldr	r3, [pc, #20]	; (2660 <_timer_cycle_get_32+0x40>)
    264c:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    264e:	fb00 2004 	mla	r0, r0, r4, r2
    2652:	bc10      	pop	{r4}
    2654:	4770      	bx	lr
    2656:	bf00      	nop
    2658:	40011000 	.word	0x40011000
    265c:	200030e8 	.word	0x200030e8
    2660:	2000cb0c 	.word	0x2000cb0c

00002664 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    2664:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2666:	6803      	ldr	r3, [r0, #0]
    2668:	689b      	ldr	r3, [r3, #8]
    266a:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    266c:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    266e:	2000      	movs	r0, #0
    2670:	e000      	b.n	2674 <gpiote_find_channel+0x10>
    2672:	3001      	adds	r0, #1
    2674:	2807      	cmp	r0, #7
    2676:	dc0d      	bgt.n	2694 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2678:	68d3      	ldr	r3, [r2, #12]
    267a:	40c3      	lsrs	r3, r0
    267c:	f013 0f01 	tst.w	r3, #1
    2680:	d0f7      	beq.n	2672 <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2682:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2686:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    268a:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    268e:	428b      	cmp	r3, r1
    2690:	d1ef      	bne.n	2672 <gpiote_find_channel+0xe>
    2692:	e001      	b.n	2698 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2694:	f06f 0012 	mvn.w	r0, #18
}
    2698:	bc10      	pop	{r4}
    269a:	4770      	bx	lr

0000269c <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    269c:	6800      	ldr	r0, [r0, #0]
    269e:	6880      	ldr	r0, [r0, #8]
    26a0:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    26a2:	b121      	cbz	r1, 26ae <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    26a4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    26a8:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    26aa:	2000      	movs	r0, #0
    26ac:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    26ae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    26b2:	fa21 f202 	lsr.w	r2, r1, r2
    26b6:	f002 0201 	and.w	r2, r2, #1
    26ba:	601a      	str	r2, [r3, #0]
    26bc:	e7f5      	b.n	26aa <gpio_nrf5_read+0xe>

000026be <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    26be:	6800      	ldr	r0, [r0, #0]
    26c0:	6880      	ldr	r0, [r0, #8]
    26c2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    26c4:	b961      	cbnz	r1, 26e0 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    26c6:	b12b      	cbz	r3, 26d4 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    26c8:	2301      	movs	r3, #1
    26ca:	fa03 f202 	lsl.w	r2, r3, r2
    26ce:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    26d2:	e007      	b.n	26e4 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    26d4:	2301      	movs	r3, #1
    26d6:	fa03 f202 	lsl.w	r2, r3, r2
    26da:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    26de:	e001      	b.n	26e4 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    26e0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    26e4:	2000      	movs	r0, #0
    26e6:	4770      	bx	lr

000026e8 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    26e8:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26ea:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    26ec:	b14a      	cbz	r2, 2702 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    26ee:	6823      	ldr	r3, [r4, #0]
    26f0:	600b      	str	r3, [r1, #0]
	list->head = node;
    26f2:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    26f4:	6863      	ldr	r3, [r4, #4]
    26f6:	b113      	cbz	r3, 26fe <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    26f8:	2000      	movs	r0, #0
    26fa:	bc10      	pop	{r4}
    26fc:	4770      	bx	lr
		list->tail = list->head;
    26fe:	6061      	str	r1, [r4, #4]
    2700:	e7fa      	b.n	26f8 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    2702:	4608      	mov	r0, r1
	return list->head;
    2704:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    2706:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2708:	2b00      	cmp	r3, #0
    270a:	d0f5      	beq.n	26f8 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    270c:	4298      	cmp	r0, r3
    270e:	d002      	beq.n	2716 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    2710:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	e7f8      	b.n	2708 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    2716:	b13a      	cbz	r2, 2728 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2718:	680b      	ldr	r3, [r1, #0]
    271a:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    271c:	6863      	ldr	r3, [r4, #4]
    271e:	4299      	cmp	r1, r3
    2720:	d009      	beq.n	2736 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    2722:	2300      	movs	r3, #0
    2724:	600b      	str	r3, [r1, #0]
    2726:	e7e7      	b.n	26f8 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2728:	680b      	ldr	r3, [r1, #0]
    272a:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    272c:	6862      	ldr	r2, [r4, #4]
    272e:	4291      	cmp	r1, r2
    2730:	d1f7      	bne.n	2722 <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    2732:	6063      	str	r3, [r4, #4]
    2734:	e7f5      	b.n	2722 <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    2736:	6062      	str	r2, [r4, #4]
    2738:	e7f3      	b.n	2722 <gpio_nrf5_manage_callback+0x3a>

0000273a <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    273a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    273c:	6803      	ldr	r3, [r0, #0]
    273e:	689b      	ldr	r3, [r3, #8]
    2740:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2742:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2744:	b9b9      	cbnz	r1, 2776 <gpio_nrf5_enable_callback+0x3c>
    2746:	460d      	mov	r5, r1
    2748:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    274a:	4611      	mov	r1, r2
    274c:	f7ff ff8a 	bl	2664 <gpiote_find_channel>
		if (i < 0) {
    2750:	2800      	cmp	r0, #0
    2752:	db12      	blt.n	277a <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2754:	2301      	movs	r3, #1
    2756:	fa03 f404 	lsl.w	r4, r3, r4
    275a:	68ba      	ldr	r2, [r7, #8]
    275c:	4314      	orrs	r4, r2
    275e:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2760:	f100 0240 	add.w	r2, r0, #64	; 0x40
    2764:	2100      	movs	r1, #0
    2766:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    276a:	fa03 f000 	lsl.w	r0, r3, r0
    276e:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2772:	4628      	mov	r0, r5
    2774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2776:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000277c <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    277e:	6803      	ldr	r3, [r0, #0]
    2780:	689b      	ldr	r3, [r3, #8]
    2782:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2784:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2786:	b991      	cbnz	r1, 27ae <gpio_nrf5_disable_callback+0x32>
    2788:	460d      	mov	r5, r1
    278a:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    278c:	4611      	mov	r1, r2
    278e:	f7ff ff69 	bl	2664 <gpiote_find_channel>
		if (i < 0) {
    2792:	2800      	cmp	r0, #0
    2794:	db0d      	blt.n	27b2 <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2796:	2301      	movs	r3, #1
    2798:	fa03 f404 	lsl.w	r4, r3, r4
    279c:	68b2      	ldr	r2, [r6, #8]
    279e:	ea22 0404 	bic.w	r4, r2, r4
    27a2:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    27a4:	4083      	lsls	r3, r0
    27a6:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    27aa:	4628      	mov	r0, r5
    27ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    27ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    27b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027b4 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    27b4:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    27b6:	2200      	movs	r2, #0
    27b8:	2101      	movs	r1, #1
    27ba:	2006      	movs	r0, #6
    27bc:	f025 fd02 	bl	281c4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    27c0:	2006      	movs	r0, #6
    27c2:	f025 fcd5 	bl	28170 <_arch_irq_enable>

	return 0;
}
    27c6:	2000      	movs	r0, #0
    27c8:	bd08      	pop	{r3, pc}

000027ca <gpio_nrf5_port_isr>:
{
    27ca:	b570      	push	{r4, r5, r6, lr}
    27cc:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    27ce:	6803      	ldr	r3, [r0, #0]
    27d0:	689b      	ldr	r3, [r3, #8]
    27d2:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    27d4:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    27d6:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    27d8:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    27da:	e000      	b.n	27de <gpio_nrf5_port_isr+0x14>
    27dc:	3301      	adds	r3, #1
    27de:	2b07      	cmp	r3, #7
    27e0:	dc14      	bgt.n	280c <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    27e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
    27e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    27ea:	2a00      	cmp	r2, #0
    27ec:	d0f6      	beq.n	27dc <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    27ee:	f103 0240 	add.w	r2, r3, #64	; 0x40
    27f2:	2000      	movs	r0, #0
    27f4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    27f8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    27fc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2800:	f3c0 2004 	ubfx	r0, r0, #8, #5
    2804:	2201      	movs	r2, #1
    2806:	4082      	lsls	r2, r0
    2808:	4316      	orrs	r6, r2
    280a:	e7e7      	b.n	27dc <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    280c:	68a3      	ldr	r3, [r4, #8]
    280e:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2810:	2006      	movs	r0, #6
    2812:	f025 fcbb 	bl	2818c <_arch_irq_disable>
	return list->head;
    2816:	6824      	ldr	r4, [r4, #0]
    2818:	e005      	b.n	2826 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    281a:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    281c:	b16c      	cbz	r4, 283a <gpio_nrf5_port_isr+0x70>
	return node->next;
    281e:	6823      	ldr	r3, [r4, #0]
    2820:	b16b      	cbz	r3, 283e <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2822:	b172      	cbz	r2, 2842 <gpio_nrf5_port_isr+0x78>
	return node->next;
    2824:	6824      	ldr	r4, [r4, #0]
    2826:	b174      	cbz	r4, 2846 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2828:	68a3      	ldr	r3, [r4, #8]
    282a:	421e      	tst	r6, r3
    282c:	d0f5      	beq.n	281a <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    282e:	6863      	ldr	r3, [r4, #4]
    2830:	4632      	mov	r2, r6
    2832:	4621      	mov	r1, r4
    2834:	4628      	mov	r0, r5
    2836:	4798      	blx	r3
    2838:	e7ef      	b.n	281a <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    283a:	4623      	mov	r3, r4
    283c:	e7f0      	b.n	2820 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    283e:	2400      	movs	r4, #0
    2840:	e7f1      	b.n	2826 <gpio_nrf5_port_isr+0x5c>
    2842:	2400      	movs	r4, #0
    2844:	e7ef      	b.n	2826 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2846:	2006      	movs	r0, #6
    2848:	f025 fc92 	bl	28170 <_arch_irq_enable>
    284c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002850 <gpio_nrf5_config>:
{
    2850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2854:	6804      	ldr	r4, [r0, #0]
    2856:	68a5      	ldr	r5, [r4, #8]
    2858:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    285a:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    285c:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    285e:	2900      	cmp	r1, #0
    2860:	d17f      	bne.n	2962 <gpio_nrf5_config+0x112>
    2862:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2864:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2868:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    286c:	f403 7440 	and.w	r4, r3, #768	; 0x300
    2870:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2874:	d025      	beq.n	28c2 <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2876:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    287a:	d024      	beq.n	28c6 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    287c:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    287e:	f013 0f01 	tst.w	r3, #1
    2882:	d030      	beq.n	28e6 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2884:	2c0c      	cmp	r4, #12
    2886:	d020      	beq.n	28ca <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2888:	2c04      	cmp	r4, #4
    288a:	d025      	beq.n	28d8 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    288c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    2890:	4938      	ldr	r1, [pc, #224]	; (2974 <gpio_nrf5_config+0x124>)
    2892:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    2896:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2898:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    289c:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    28a0:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    28a4:	f013 0102 	ands.w	r1, r3, #2
    28a8:	d04a      	beq.n	2940 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    28aa:	f013 0f20 	tst.w	r3, #32
    28ae:	d05b      	beq.n	2968 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    28b0:	f013 0f40 	tst.w	r3, #64	; 0x40
    28b4:	d123      	bne.n	28fe <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    28b6:	f013 0f04 	tst.w	r3, #4
    28ba:	d044      	beq.n	2946 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    28bc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    28c0:	e01f      	b.n	2902 <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    28c2:	240c      	movs	r4, #12
    28c4:	e7db      	b.n	287e <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    28c6:	2404      	movs	r4, #4
    28c8:	e7d9      	b.n	287e <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    28ca:	f04f 0c01 	mov.w	ip, #1
    28ce:	fa0c fc02 	lsl.w	ip, ip, r2
    28d2:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    28d6:	e7d9      	b.n	288c <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    28d8:	f04f 0c01 	mov.w	ip, #1
    28dc:	fa0c fc02 	lsl.w	ip, ip, r2
    28e0:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    28e4:	e7d2      	b.n	288c <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    28e6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    28ea:	f8df e088 	ldr.w	lr, [pc, #136]	; 2974 <gpio_nrf5_config+0x124>
    28ee:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    28f2:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    28f4:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    28f8:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    28fc:	e7d2      	b.n	28a4 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    28fe:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    2902:	4614      	mov	r4, r2
    2904:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2906:	68f8      	ldr	r0, [r7, #12]
    2908:	f7fe fc10 	bl	112c <__popcountsi2>
    290c:	2808      	cmp	r0, #8
    290e:	d02e      	beq.n	296e <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    2910:	4621      	mov	r1, r4
    2912:	4628      	mov	r0, r5
    2914:	f7ff fea6 	bl	2664 <gpiote_find_channel>
		if (i < 0) {
    2918:	2800      	cmp	r0, #0
    291a:	db17      	blt.n	294c <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    291c:	2301      	movs	r3, #1
    291e:	fa03 f200 	lsl.w	r2, r3, r0
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	4313      	orrs	r3, r2
    2926:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2928:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    292c:	0224      	lsls	r4, r4, #8
    292e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    2932:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2936:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    293a:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    293e:	4641      	mov	r1, r8
}
    2940:	4608      	mov	r0, r1
    2942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2946:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    294a:	e7da      	b.n	2902 <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    294c:	68fb      	ldr	r3, [r7, #12]
    294e:	43db      	mvns	r3, r3
    2950:	fa93 f0a3 	rbit	r0, r3
    2954:	fab0 f080 	clz	r0, r0
    2958:	2b00      	cmp	r3, #0
    295a:	d1df      	bne.n	291c <gpio_nrf5_config+0xcc>
    295c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2960:	e7dc      	b.n	291c <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    2962:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2966:	e7eb      	b.n	2940 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2968:	f06f 0185 	mvn.w	r1, #133	; 0x85
    296c:	e7e8      	b.n	2940 <gpio_nrf5_config+0xf0>
			return -EIO;
    296e:	f06f 0104 	mvn.w	r1, #4
    2972:	e7e5      	b.n	2940 <gpio_nrf5_config+0xf0>
    2974:	0002f12c 	.word	0x0002f12c

00002978 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2978:	f04f 0320 	mov.w	r3, #32
    297c:	f3ef 8111 	mrs	r1, BASEPRI
    2980:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2984:	4b12      	ldr	r3, [pc, #72]	; (29d0 <_m16src_stop+0x58>)
    2986:	781a      	ldrb	r2, [r3, #0]
    2988:	b192      	cbz	r2, 29b0 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    298a:	1e53      	subs	r3, r2, #1
    298c:	b2db      	uxtb	r3, r3
    298e:	4810      	ldr	r0, [pc, #64]	; (29d0 <_m16src_stop+0x58>)
    2990:	7003      	strb	r3, [r0, #0]
    2992:	b993      	cbnz	r3, 29ba <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2994:	4b0f      	ldr	r3, [pc, #60]	; (29d4 <_m16src_stop+0x5c>)
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	b99b      	cbnz	r3, 29c2 <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    299a:	4b0e      	ldr	r3, [pc, #56]	; (29d4 <_m16src_stop+0x5c>)
    299c:	2201      	movs	r2, #1
    299e:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29a0:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    29a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    29a8:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    29aa:	2000      	movs	r0, #0
    29ac:	7018      	strb	r0, [r3, #0]

	return 0;
}
    29ae:	4770      	bx	lr
    29b0:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    29b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    29b8:	4770      	bx	lr
    29ba:	f381 8811 	msr	BASEPRI, r1
		return 0;
    29be:	2000      	movs	r0, #0
    29c0:	4770      	bx	lr
		m16src_ref++;
    29c2:	4b03      	ldr	r3, [pc, #12]	; (29d0 <_m16src_stop+0x58>)
    29c4:	701a      	strb	r2, [r3, #0]
    29c6:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    29ca:	f06f 000a 	mvn.w	r0, #10
    29ce:	4770      	bx	lr
    29d0:	2000082e 	.word	0x2000082e
    29d4:	2000082d 	.word	0x2000082d

000029d8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    29d8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    29da:	2200      	movs	r2, #0
    29dc:	2101      	movs	r1, #1
    29de:	4610      	mov	r0, r2
    29e0:	f025 fbf0 	bl	281c4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    29e4:	2000      	movs	r0, #0
    29e6:	f025 fbc3 	bl	28170 <_arch_irq_enable>

	return 0;
}
    29ea:	2000      	movs	r0, #0
    29ec:	bd08      	pop	{r3, pc}
	...

000029f0 <_m16src_start>:
{
    29f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    29f2:	f04f 0320 	mov.w	r3, #32
    29f6:	f3ef 8411 	mrs	r4, BASEPRI
    29fa:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    29fe:	4a2c      	ldr	r2, [pc, #176]	; (2ab0 <_m16src_start+0xc0>)
    2a00:	7813      	ldrb	r3, [r2, #0]
    2a02:	1c58      	adds	r0, r3, #1
    2a04:	7010      	strb	r0, [r2, #0]
    2a06:	b153      	cbz	r3, 2a1e <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a08:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2a14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a18:	d047      	beq.n	2aaa <_m16src_start+0xba>
		return 0;
    2a1a:	2000      	movs	r0, #0
    2a1c:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    2a1e:	4a25      	ldr	r2, [pc, #148]	; (2ab4 <_m16src_start+0xc4>)
    2a20:	7812      	ldrb	r2, [r2, #0]
    2a22:	b9a2      	cbnz	r2, 2a4e <_m16src_start+0x5e>
	m16src_grd = 1;
    2a24:	2201      	movs	r2, #1
    2a26:	4b23      	ldr	r3, [pc, #140]	; (2ab4 <_m16src_start+0xc4>)
    2a28:	701a      	strb	r2, [r3, #0]
    2a2a:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    2a2e:	b3a1      	cbz	r1, 2a9a <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    2a30:	2000      	movs	r0, #0
    2a32:	f025 fbab 	bl	2818c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a3a:	2200      	movs	r2, #0
    2a3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2a40:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a44:	2201      	movs	r2, #1
    2a46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a4a:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2a4c:	e009      	b.n	2a62 <_m16src_start+0x72>
		m16src_ref--;
    2a4e:	4a18      	ldr	r2, [pc, #96]	; (2ab0 <_m16src_start+0xc0>)
    2a50:	7013      	strb	r3, [r2, #0]
    2a52:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    2a56:	f06f 000a 	mvn.w	r0, #10
    2a5a:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2a5c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    2a5e:	bf40      	sev
  __ASM volatile ("wfe");
    2a60:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d0f6      	beq.n	2a5c <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a6e:	2200      	movs	r2, #0
    2a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2a78:	f011 0f01 	tst.w	r1, #1
    2a7c:	d102      	bne.n	2a84 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a7e:	2201      	movs	r2, #1
    2a80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2a84:	2201      	movs	r2, #1
    2a86:	4b0c      	ldr	r3, [pc, #48]	; (2ab8 <_m16src_start+0xc8>)
    2a88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2a8c:	2000      	movs	r0, #0
    2a8e:	f025 fb6f 	bl	28170 <_arch_irq_enable>
	m16src_grd = 0;
    2a92:	2200      	movs	r2, #0
    2a94:	4b07      	ldr	r3, [pc, #28]	; (2ab4 <_m16src_start+0xc4>)
    2a96:	701a      	strb	r2, [r3, #0]
    2a98:	e7b8      	b.n	2a0c <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a9e:	2200      	movs	r2, #0
    2aa0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2aa4:	2201      	movs	r2, #1
    2aa6:	601a      	str	r2, [r3, #0]
    2aa8:	e7f3      	b.n	2a92 <_m16src_start+0xa2>
		return -EINPROGRESS;
    2aaa:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	2000082e 	.word	0x2000082e
    2ab4:	2000082d 	.word	0x2000082d
    2ab8:	e000e100 	.word	0xe000e100

00002abc <_power_clock_isr>:
{
    2abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ac0:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ac6:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2aca:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2ace:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2ad2:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2ad6:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2ada:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2ade:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2ae2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2ae6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2aea:	b11d      	cbz	r5, 2af4 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2aec:	f04f 0e00 	mov.w	lr, #0
    2af0:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2af4:	b127      	cbz	r7, 2b00 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2af6:	2700      	movs	r7, #0
    2af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2afc:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2b00:	b132      	cbz	r2, 2b10 <_power_clock_isr+0x54>
    2b02:	b129      	cbz	r1, 2b10 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b08:	2201      	movs	r2, #1
    2b0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2b0e:	611a      	str	r2, [r3, #16]
	if (lf) {
    2b10:	b126      	cbz	r6, 2b1c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b12:	2200      	movs	r2, #0
    2b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2b1c:	b910      	cbnz	r0, 2b24 <_power_clock_isr+0x68>
	if (ctto) {
    2b1e:	b964      	cbnz	r4, 2b3a <_power_clock_isr+0x7e>
    2b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2b24:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2b28:	2100      	movs	r1, #0
    2b2a:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2b2e:	4640      	mov	r0, r8
    2b30:	f7ff ff22 	bl	2978 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2b34:	2301      	movs	r3, #1
    2b36:	6173      	str	r3, [r6, #20]
    2b38:	e7f1      	b.n	2b1e <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b3e:	2100      	movs	r1, #0
    2b40:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b44:	2201      	movs	r2, #1
    2b46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b4a:	4640      	mov	r0, r8
    2b4c:	f7ff ff50 	bl	29f0 <_m16src_start>
		if (!err) {
    2b50:	2800      	cmp	r0, #0
    2b52:	d1e5      	bne.n	2b20 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b54:	2201      	movs	r2, #1
    2b56:	4b02      	ldr	r3, [pc, #8]	; (2b60 <_power_clock_isr+0xa4>)
    2b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2b5c:	e7e0      	b.n	2b20 <_power_clock_isr+0x64>
    2b5e:	bf00      	nop
    2b60:	e000e100 	.word	0xe000e100

00002b64 <_k32src_start>:
	__asm__ volatile(
    2b64:	f04f 0220 	mov.w	r2, #32
    2b68:	f3ef 8311 	mrs	r3, BASEPRI
    2b6c:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2b70:	4a38      	ldr	r2, [pc, #224]	; (2c54 <_k32src_start+0xf0>)
    2b72:	7812      	ldrb	r2, [r2, #0]
    2b74:	b152      	cbz	r2, 2b8c <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2b76:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b7e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2b82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b86:	d062      	beq.n	2c4e <_k32src_start+0xea>
		return 0;
    2b88:	2000      	movs	r0, #0
    2b8a:	4770      	bx	lr
{
    2b8c:	b570      	push	{r4, r5, r6, lr}
    2b8e:	460d      	mov	r5, r1
    2b90:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2b92:	2601      	movs	r6, #1
    2b94:	4a2f      	ldr	r2, [pc, #188]	; (2c54 <_k32src_start+0xf0>)
    2b96:	7016      	strb	r6, [r2, #0]
    2b98:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2b9c:	2000      	movs	r0, #0
    2b9e:	f025 faf5 	bl	2818c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ba6:	2200      	movs	r2, #0
    2ba8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2bac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2bb0:	2102      	movs	r1, #2
    2bb2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2bb6:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2bba:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2bbc:	e002      	b.n	2bc4 <_k32src_start+0x60>
    2bbe:	bf20      	wfe
  __ASM volatile ("sev");
    2bc0:	bf40      	sev
  __ASM volatile ("wfe");
    2bc2:	bf20      	wfe
    2bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d0f6      	beq.n	2bbe <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2bd0:	2100      	movs	r1, #0
    2bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bd6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2bda:	f012 0f02 	tst.w	r2, #2
    2bde:	d102      	bne.n	2be6 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2be0:	2202      	movs	r2, #2
    2be2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2be6:	2201      	movs	r2, #1
    2be8:	4b1b      	ldr	r3, [pc, #108]	; (2c58 <_k32src_start+0xf4>)
    2bea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2bee:	2000      	movs	r0, #0
    2bf0:	f025 fabe 	bl	28170 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bf8:	2218      	movs	r2, #24
    2bfa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2bfe:	2200      	movs	r2, #0
    2c00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2c04:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2c08:	f015 0f03 	tst.w	r5, #3
    2c0c:	d008      	beq.n	2c20 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c12:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2c16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2c1a:	d015      	beq.n	2c48 <_k32src_start+0xe4>
		return 0;
    2c1c:	2000      	movs	r0, #0
    2c1e:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2c20:	2210      	movs	r2, #16
    2c22:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2c26:	2218      	movs	r2, #24
    2c28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2c2c:	2201      	movs	r2, #1
    2c2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2c32:	2100      	movs	r1, #0
    2c34:	4620      	mov	r0, r4
    2c36:	f7ff fedb 	bl	29f0 <_m16src_start>
		if (!err) {
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d1e7      	bne.n	2c0e <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c3e:	2201      	movs	r2, #1
    2c40:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_k32src_start+0xf4>)
    2c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2c46:	e7e2      	b.n	2c0e <_k32src_start+0xaa>
		return -EINPROGRESS;
    2c48:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2c4c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2c4e:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2c52:	4770      	bx	lr
    2c54:	2000082c 	.word	0x2000082c
    2c58:	e000e100 	.word	0xe000e100

00002c5c <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2c5c:	2000      	movs	r0, #0
    2c5e:	4770      	bx	lr

00002c60 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2c60:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2c62:	680b      	ldr	r3, [r1, #0]
    2c64:	3301      	adds	r3, #1
    2c66:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2c68:	4b01      	ldr	r3, [pc, #4]	; (2c70 <char_out+0x10>)
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	4798      	blx	r3
}
    2c6e:	bd08      	pop	{r3, pc}
    2c70:	2000bdfc 	.word	0x2000bdfc

00002c74 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c78:	b083      	sub	sp, #12
    2c7a:	4606      	mov	r6, r0
    2c7c:	9101      	str	r1, [sp, #4]
    2c7e:	4691      	mov	r9, r2
    2c80:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2c82:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2c84:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2c88:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2c8a:	4653      	mov	r3, sl

	for (; size; size--) {
    2c8c:	e009      	b.n	2ca2 <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2c8e:	2809      	cmp	r0, #9
    2c90:	d91f      	bls.n	2cd2 <_printk_hex_ulong+0x5e>
    2c92:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2c94:	9901      	ldr	r1, [sp, #4]
    2c96:	4418      	add	r0, r3
    2c98:	47b0      	blx	r6
			digits++;
    2c9a:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2c9c:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2ca0:	462b      	mov	r3, r5
	for (; size; size--) {
    2ca2:	b323      	cbz	r3, 2cee <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2ca4:	1e5d      	subs	r5, r3, #1
    2ca6:	00a8      	lsls	r0, r5, #2
    2ca8:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2cac:	f010 000f 	ands.w	r0, r0, #15
    2cb0:	d1ed      	bne.n	2c8e <_printk_hex_ulong+0x1a>
    2cb2:	f1b8 0f00 	cmp.w	r8, #0
    2cb6:	d1ea      	bne.n	2c8e <_printk_hex_ulong+0x1a>
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d0e8      	beq.n	2c8e <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2cbc:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2cc2:	459a      	cmp	sl, r3
    2cc4:	dc11      	bgt.n	2cea <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2cc6:	2f01      	cmp	r7, #1
    2cc8:	d005      	beq.n	2cd6 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2cca:	2f02      	cmp	r7, #2
    2ccc:	d008      	beq.n	2ce0 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2cce:	46da      	mov	sl, fp
    2cd0:	e7e6      	b.n	2ca0 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2cd2:	2330      	movs	r3, #48	; 0x30
    2cd4:	e7de      	b.n	2c94 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2cd6:	9901      	ldr	r1, [sp, #4]
    2cd8:	2030      	movs	r0, #48	; 0x30
    2cda:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2cdc:	46da      	mov	sl, fp
    2cde:	e7df      	b.n	2ca0 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2ce0:	9901      	ldr	r1, [sp, #4]
    2ce2:	2020      	movs	r0, #32
    2ce4:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2ce6:	46da      	mov	sl, fp
    2ce8:	e7da      	b.n	2ca0 <_printk_hex_ulong+0x2c>
    2cea:	46da      	mov	sl, fp
    2cec:	e7d8      	b.n	2ca0 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2cee:	2f03      	cmp	r7, #3
    2cf0:	d002      	beq.n	2cf8 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2cf2:	b003      	add	sp, #12
    2cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2cfa:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2cfe:	1e65      	subs	r5, r4, #1
    2d00:	2c00      	cmp	r4, #0
    2d02:	ddf6      	ble.n	2cf2 <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2d04:	9901      	ldr	r1, [sp, #4]
    2d06:	2020      	movs	r0, #32
    2d08:	47b0      	blx	r6
		while (remaining-- > 0) {
    2d0a:	462c      	mov	r4, r5
    2d0c:	e7f7      	b.n	2cfe <_printk_hex_ulong+0x8a>
	...

00002d10 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d14:	b083      	sub	sp, #12
    2d16:	4682      	mov	sl, r0
    2d18:	9101      	str	r1, [sp, #4]
    2d1a:	469b      	mov	fp, r3
    2d1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2d1e:	2f00      	cmp	r7, #0
    2d20:	dd07      	ble.n	2d32 <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2d22:	4615      	mov	r5, r2
    2d24:	f04f 0901 	mov.w	r9, #1
    2d28:	260a      	movs	r6, #10
    2d2a:	f04f 0800 	mov.w	r8, #0
    2d2e:	4c22      	ldr	r4, [pc, #136]	; (2db8 <_printk_dec_ulong+0xa8>)
    2d30:	e015      	b.n	2d5e <_printk_dec_ulong+0x4e>
		min_width = 1;
    2d32:	2701      	movs	r7, #1
    2d34:	e7f5      	b.n	2d22 <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2d36:	1c60      	adds	r0, r4, #1
    2d38:	fbb5 f0f0 	udiv	r0, r5, r0
    2d3c:	9901      	ldr	r1, [sp, #4]
    2d3e:	3030      	adds	r0, #48	; 0x30
    2d40:	47d0      	blx	sl
			digits++;
    2d42:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2d46:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2d4a:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2d4c:	1c63      	adds	r3, r4, #1
    2d4e:	fbb5 f2f3 	udiv	r2, r5, r3
    2d52:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2d56:	4b19      	ldr	r3, [pc, #100]	; (2dbc <_printk_dec_ulong+0xac>)
    2d58:	fba3 3404 	umull	r3, r4, r3, r4
    2d5c:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2d5e:	2c08      	cmp	r4, #8
    2d60:	d914      	bls.n	2d8c <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2d62:	f1b8 0f00 	cmp.w	r8, #0
    2d66:	d1e6      	bne.n	2d36 <_printk_dec_ulong+0x26>
    2d68:	42ac      	cmp	r4, r5
    2d6a:	d3e4      	bcc.n	2d36 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2d6c:	42be      	cmp	r6, r7
    2d6e:	dcec      	bgt.n	2d4a <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2d70:	f1bb 0f02 	cmp.w	fp, #2
    2d74:	d8e9      	bhi.n	2d4a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2d76:	f1bb 0f01 	cmp.w	fp, #1
    2d7a:	d005      	beq.n	2d88 <_printk_dec_ulong+0x78>
    2d7c:	2020      	movs	r0, #32
    2d7e:	9901      	ldr	r1, [sp, #4]
    2d80:	47d0      	blx	sl
			digits++;
    2d82:	f109 0901 	add.w	r9, r9, #1
    2d86:	e7e0      	b.n	2d4a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2d88:	2030      	movs	r0, #48	; 0x30
    2d8a:	e7f8      	b.n	2d7e <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2d8c:	9901      	ldr	r1, [sp, #4]
    2d8e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2d92:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2d94:	f1bb 0f03 	cmp.w	fp, #3
    2d98:	d002      	beq.n	2da0 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2d9a:	b003      	add	sp, #12
    2d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2da0:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2da4:	e003      	b.n	2dae <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2da6:	9901      	ldr	r1, [sp, #4]
    2da8:	2020      	movs	r0, #32
    2daa:	47d0      	blx	sl
		while (remaining-- > 0) {
    2dac:	4627      	mov	r7, r4
    2dae:	1e7c      	subs	r4, r7, #1
    2db0:	2f00      	cmp	r7, #0
    2db2:	dcf8      	bgt.n	2da6 <_printk_dec_ulong+0x96>
    2db4:	e7f1      	b.n	2d9a <_printk_dec_ulong+0x8a>
    2db6:	bf00      	nop
    2db8:	3b9ac9ff 	.word	0x3b9ac9ff
    2dbc:	cccccccd 	.word	0xcccccccd

00002dc0 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2dc0:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2dc2:	680c      	ldr	r4, [r1, #0]
    2dc4:	b154      	cbz	r4, 2ddc <str_out+0x1c>
    2dc6:	688b      	ldr	r3, [r1, #8]
    2dc8:	684a      	ldr	r2, [r1, #4]
    2dca:	4293      	cmp	r3, r2
    2dcc:	da06      	bge.n	2ddc <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2dce:	3a01      	subs	r2, #1
    2dd0:	4293      	cmp	r3, r2
    2dd2:	d008      	beq.n	2de6 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2dd4:	1c5a      	adds	r2, r3, #1
    2dd6:	608a      	str	r2, [r1, #8]
    2dd8:	54e0      	strb	r0, [r4, r3]
    2dda:	e002      	b.n	2de2 <str_out+0x22>
		ctx->count++;
    2ddc:	688b      	ldr	r3, [r1, #8]
    2dde:	3301      	adds	r3, #1
    2de0:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2de2:	bc10      	pop	{r4}
    2de4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2de6:	1c5a      	adds	r2, r3, #1
    2de8:	608a      	str	r2, [r1, #8]
    2dea:	2200      	movs	r2, #0
    2dec:	54e2      	strb	r2, [r4, r3]
    2dee:	e7f8      	b.n	2de2 <str_out+0x22>

00002df0 <__printk_hook_install>:
	_char_out = fn;
    2df0:	4b01      	ldr	r3, [pc, #4]	; (2df8 <__printk_hook_install+0x8>)
    2df2:	6018      	str	r0, [r3, #0]
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	2000bdfc 	.word	0x2000bdfc

00002dfc <_vprintk>:
{
    2dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e00:	b084      	sub	sp, #16
    2e02:	4607      	mov	r7, r0
    2e04:	460e      	mov	r6, r1
    2e06:	4614      	mov	r4, r2
    2e08:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2e0a:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2e0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2e12:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2e14:	4645      	mov	r5, r8
	while (*fmt) {
    2e16:	e104      	b.n	3022 <_vprintk+0x226>
			switch (*fmt) {
    2e18:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2e1c:	2b55      	cmp	r3, #85	; 0x55
    2e1e:	f200 80f1 	bhi.w	3004 <_vprintk+0x208>
    2e22:	e8df f013 	tbh	[pc, r3, lsl #1]
    2e26:	00ea      	.short	0x00ea
    2e28:	00ef00ef 	.word	0x00ef00ef
    2e2c:	00ef00ef 	.word	0x00ef00ef
    2e30:	00ef00ef 	.word	0x00ef00ef
    2e34:	010800ef 	.word	0x010800ef
    2e38:	00ef00ef 	.word	0x00ef00ef
    2e3c:	00590056 	.word	0x00590056
    2e40:	00590059 	.word	0x00590059
    2e44:	00590059 	.word	0x00590059
    2e48:	00590059 	.word	0x00590059
    2e4c:	00590059 	.word	0x00590059
    2e50:	00ef00ef 	.word	0x00ef00ef
    2e54:	00ef00ef 	.word	0x00ef00ef
    2e58:	00ef00ef 	.word	0x00ef00ef
    2e5c:	00ef00ef 	.word	0x00ef00ef
    2e60:	00ef00ef 	.word	0x00ef00ef
    2e64:	00ef00ef 	.word	0x00ef00ef
    2e68:	00ef00ef 	.word	0x00ef00ef
    2e6c:	00ef00ef 	.word	0x00ef00ef
    2e70:	00ef00ef 	.word	0x00ef00ef
    2e74:	00ef00ef 	.word	0x00ef00ef
    2e78:	00ef00ef 	.word	0x00ef00ef
    2e7c:	00ef00ef 	.word	0x00ef00ef
    2e80:	00ef00ef 	.word	0x00ef00ef
    2e84:	00ef00ef 	.word	0x00ef00ef
    2e88:	00ef00ef 	.word	0x00ef00ef
    2e8c:	00ef00bc 	.word	0x00ef00bc
    2e90:	00ef00ef 	.word	0x00ef00ef
    2e94:	00ef00ef 	.word	0x00ef00ef
    2e98:	00ef00ef 	.word	0x00ef00ef
    2e9c:	00ef00ef 	.word	0x00ef00ef
    2ea0:	00e200ef 	.word	0x00e200ef
    2ea4:	00ef0076 	.word	0x00ef0076
    2ea8:	00ef00ef 	.word	0x00ef00ef
    2eac:	007600fd 	.word	0x007600fd
    2eb0:	00ef00ef 	.word	0x00ef00ef
    2eb4:	00ef0073 	.word	0x00ef0073
    2eb8:	00ef00ef 	.word	0x00ef00ef
    2ebc:	00ef00b2 	.word	0x00ef00b2
    2ec0:	00d500ef 	.word	0x00d500ef
    2ec4:	009900ef 	.word	0x009900ef
    2ec8:	00ef00ef 	.word	0x00ef00ef
    2ecc:	00ef00bc 	.word	0x00ef00bc
    2ed0:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2ed2:	f1ba 0f00 	cmp.w	sl, #0
    2ed6:	db10      	blt.n	2efa <_vprintk+0xfe>
				if (min_width < 0) {
    2ed8:	f1ba 0f00 	cmp.w	sl, #0
    2edc:	db13      	blt.n	2f06 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2ede:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2ee2:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2ee6:	4418      	add	r0, r3
    2ee8:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2eec:	f1b9 0f00 	cmp.w	r9, #0
    2ef0:	f040 8096 	bne.w	3020 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2ef4:	f04f 0902 	mov.w	r9, #2
    2ef8:	e092      	b.n	3020 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2efa:	f1b9 0f00 	cmp.w	r9, #0
    2efe:	d1eb      	bne.n	2ed8 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2f00:	f04f 0901 	mov.w	r9, #1
    2f04:	e08c      	b.n	3020 <_vprintk+0x224>
					min_width = *fmt - '0';
    2f06:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2f0a:	e7ef      	b.n	2eec <_vprintk+0xf0>
				long_ctr++;
    2f0c:	f108 0801 	add.w	r8, r8, #1
    2f10:	e086      	b.n	3020 <_vprintk+0x224>
				if (long_ctr < 2) {
    2f12:	f1b8 0f01 	cmp.w	r8, #1
    2f16:	dd13      	ble.n	2f40 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2f18:	9b03      	ldr	r3, [sp, #12]
    2f1a:	3307      	adds	r3, #7
    2f1c:	f023 0307 	bic.w	r3, r3, #7
    2f20:	f103 0208 	add.w	r2, r3, #8
    2f24:	9203      	str	r2, [sp, #12]
    2f26:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2f28:	2d00      	cmp	r5, #0
    2f2a:	db0e      	blt.n	2f4a <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2f2c:	f8cd a000 	str.w	sl, [sp]
    2f30:	464b      	mov	r3, r9
    2f32:	462a      	mov	r2, r5
    2f34:	4631      	mov	r1, r6
    2f36:	4638      	mov	r0, r7
    2f38:	f7ff feea 	bl	2d10 <_printk_dec_ulong>
			might_format = 0;
    2f3c:	2500      	movs	r5, #0
				break;
    2f3e:	e06f      	b.n	3020 <_vprintk+0x224>
					d = va_arg(ap, long);
    2f40:	9b03      	ldr	r3, [sp, #12]
    2f42:	1d1a      	adds	r2, r3, #4
    2f44:	9203      	str	r2, [sp, #12]
    2f46:	681d      	ldr	r5, [r3, #0]
    2f48:	e7ee      	b.n	2f28 <_vprintk+0x12c>
					out((int)'-', ctx);
    2f4a:	4631      	mov	r1, r6
    2f4c:	202d      	movs	r0, #45	; 0x2d
    2f4e:	47b8      	blx	r7
					d = -d;
    2f50:	426d      	negs	r5, r5
					min_width--;
    2f52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2f56:	e7e9      	b.n	2f2c <_vprintk+0x130>
				if (long_ctr < 2) {
    2f58:	f1b8 0f01 	cmp.w	r8, #1
    2f5c:	dd10      	ble.n	2f80 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2f5e:	9b03      	ldr	r3, [sp, #12]
    2f60:	3307      	adds	r3, #7
    2f62:	f023 0307 	bic.w	r3, r3, #7
    2f66:	f103 0208 	add.w	r2, r3, #8
    2f6a:	9203      	str	r2, [sp, #12]
    2f6c:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2f6e:	f8cd a000 	str.w	sl, [sp]
    2f72:	464b      	mov	r3, r9
    2f74:	4631      	mov	r1, r6
    2f76:	4638      	mov	r0, r7
    2f78:	f7ff feca 	bl	2d10 <_printk_dec_ulong>
			might_format = 0;
    2f7c:	2500      	movs	r5, #0
				break;
    2f7e:	e04f      	b.n	3020 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2f80:	9b03      	ldr	r3, [sp, #12]
    2f82:	1d1a      	adds	r2, r3, #4
    2f84:	9203      	str	r2, [sp, #12]
    2f86:	681a      	ldr	r2, [r3, #0]
    2f88:	e7f1      	b.n	2f6e <_vprintk+0x172>
				  out('0', ctx);
    2f8a:	4631      	mov	r1, r6
    2f8c:	2030      	movs	r0, #48	; 0x30
    2f8e:	47b8      	blx	r7
				  out('x', ctx);
    2f90:	4631      	mov	r1, r6
    2f92:	2078      	movs	r0, #120	; 0x78
    2f94:	47b8      	blx	r7
				  min_width = 8;
    2f96:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2f9a:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2f9e:	f1b8 0f01 	cmp.w	r8, #1
    2fa2:	dd10      	ble.n	2fc6 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2fa4:	9b03      	ldr	r3, [sp, #12]
    2fa6:	3307      	adds	r3, #7
    2fa8:	f023 0307 	bic.w	r3, r3, #7
    2fac:	f103 0208 	add.w	r2, r3, #8
    2fb0:	9203      	str	r2, [sp, #12]
    2fb2:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2fb4:	f8cd a000 	str.w	sl, [sp]
    2fb8:	464b      	mov	r3, r9
    2fba:	4631      	mov	r1, r6
    2fbc:	4638      	mov	r0, r7
    2fbe:	f7ff fe59 	bl	2c74 <_printk_hex_ulong>
			might_format = 0;
    2fc2:	2500      	movs	r5, #0
				break;
    2fc4:	e02c      	b.n	3020 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2fc6:	9b03      	ldr	r3, [sp, #12]
    2fc8:	1d1a      	adds	r2, r3, #4
    2fca:	9203      	str	r2, [sp, #12]
    2fcc:	681a      	ldr	r2, [r3, #0]
    2fce:	e7f1      	b.n	2fb4 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2fd0:	9b03      	ldr	r3, [sp, #12]
    2fd2:	1d1a      	adds	r2, r3, #4
    2fd4:	9203      	str	r2, [sp, #12]
    2fd6:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2fd8:	e002      	b.n	2fe0 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2fda:	3501      	adds	r5, #1
    2fdc:	4631      	mov	r1, r6
    2fde:	47b8      	blx	r7
				while (*s)
    2fe0:	7828      	ldrb	r0, [r5, #0]
    2fe2:	2800      	cmp	r0, #0
    2fe4:	d1f9      	bne.n	2fda <_vprintk+0x1de>
			might_format = 0;
    2fe6:	2500      	movs	r5, #0
    2fe8:	e01a      	b.n	3020 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2fea:	9b03      	ldr	r3, [sp, #12]
    2fec:	1d1a      	adds	r2, r3, #4
    2fee:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2ff0:	4631      	mov	r1, r6
    2ff2:	6818      	ldr	r0, [r3, #0]
    2ff4:	47b8      	blx	r7
			might_format = 0;
    2ff6:	2500      	movs	r5, #0
				break;
    2ff8:	e012      	b.n	3020 <_vprintk+0x224>
				out((int)'%', ctx);
    2ffa:	4631      	mov	r1, r6
    2ffc:	2025      	movs	r0, #37	; 0x25
    2ffe:	47b8      	blx	r7
			might_format = 0;
    3000:	2500      	movs	r5, #0
				break;
    3002:	e00d      	b.n	3020 <_vprintk+0x224>
				out((int)'%', ctx);
    3004:	4631      	mov	r1, r6
    3006:	2025      	movs	r0, #37	; 0x25
    3008:	47b8      	blx	r7
				out((int)*fmt, ctx);
    300a:	4631      	mov	r1, r6
    300c:	7820      	ldrb	r0, [r4, #0]
    300e:	47b8      	blx	r7
			might_format = 0;
    3010:	2500      	movs	r5, #0
				break;
    3012:	e005      	b.n	3020 <_vprintk+0x224>
				long_ctr = 0;
    3014:	46a8      	mov	r8, r5
				min_width = -1;
    3016:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    301a:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    301e:	2501      	movs	r5, #1
		++fmt;
    3020:	3401      	adds	r4, #1
	while (*fmt) {
    3022:	7820      	ldrb	r0, [r4, #0]
    3024:	b150      	cbz	r0, 303c <_vprintk+0x240>
		if (!might_format) {
    3026:	2d00      	cmp	r5, #0
    3028:	f47f aef6 	bne.w	2e18 <_vprintk+0x1c>
			if (*fmt != '%') {
    302c:	2825      	cmp	r0, #37	; 0x25
    302e:	d0f1      	beq.n	3014 <_vprintk+0x218>
				out((int)*fmt, ctx);
    3030:	4631      	mov	r1, r6
    3032:	47b8      	blx	r7
    3034:	e7f4      	b.n	3020 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    3036:	f04f 0903 	mov.w	r9, #3
    303a:	e7f1      	b.n	3020 <_vprintk+0x224>
}
    303c:	b004      	add	sp, #16
    303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00003044 <vprintk>:
{
    3044:	b510      	push	{r4, lr}
    3046:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    3048:	ac02      	add	r4, sp, #8
    304a:	2300      	movs	r3, #0
    304c:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    3050:	460b      	mov	r3, r1
    3052:	4602      	mov	r2, r0
    3054:	4621      	mov	r1, r4
    3056:	4803      	ldr	r0, [pc, #12]	; (3064 <vprintk+0x20>)
    3058:	f7ff fed0 	bl	2dfc <_vprintk>
}
    305c:	9801      	ldr	r0, [sp, #4]
    305e:	b002      	add	sp, #8
    3060:	bd10      	pop	{r4, pc}
    3062:	bf00      	nop
    3064:	00002c61 	.word	0x00002c61

00003068 <printk>:
{
    3068:	b40f      	push	{r0, r1, r2, r3}
    306a:	b500      	push	{lr}
    306c:	b083      	sub	sp, #12
    306e:	a904      	add	r1, sp, #16
    3070:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3074:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    3076:	f7ff ffe5 	bl	3044 <vprintk>
}
    307a:	b003      	add	sp, #12
    307c:	f85d eb04 	ldr.w	lr, [sp], #4
    3080:	b004      	add	sp, #16
    3082:	4770      	bx	lr

00003084 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    3084:	b40c      	push	{r2, r3}
    3086:	b510      	push	{r4, lr}
    3088:	b084      	sub	sp, #16
    308a:	4604      	mov	r4, r0
    308c:	ab06      	add	r3, sp, #24
    308e:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    3092:	9001      	str	r0, [sp, #4]
    3094:	9102      	str	r1, [sp, #8]
    3096:	2100      	movs	r1, #0
    3098:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    309a:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    309c:	a901      	add	r1, sp, #4
    309e:	4807      	ldr	r0, [pc, #28]	; (30bc <snprintk+0x38>)
    30a0:	f7ff feac 	bl	2dfc <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    30a4:	9b03      	ldr	r3, [sp, #12]
    30a6:	9a02      	ldr	r2, [sp, #8]
    30a8:	4293      	cmp	r3, r2
    30aa:	da01      	bge.n	30b0 <snprintk+0x2c>
		str[ctx.count] = '\0';
    30ac:	2200      	movs	r2, #0
    30ae:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    30b0:	9803      	ldr	r0, [sp, #12]
    30b2:	b004      	add	sp, #16
    30b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    30b8:	b002      	add	sp, #8
    30ba:	4770      	bx	lr
    30bc:	00002dc1 	.word	0x00002dc1

000030c0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    30c0:	4770      	bx	lr

000030c2 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    30c2:	428b      	cmp	r3, r1
    30c4:	d901      	bls.n	30ca <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    30c6:	2000      	movs	r0, #0
    30c8:	4770      	bx	lr
{
    30ca:	b510      	push	{r4, lr}
    30cc:	461c      	mov	r4, r3
    30ce:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    30d0:	461a      	mov	r2, r3
    30d2:	f7fd f8f5 	bl	2c0 <memcpy>
		return from_len;
    30d6:	4620      	mov	r0, r4
    30d8:	bd10      	pop	{r4, pc}

000030da <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    30da:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    30dc:	f027 fcb0 	bl	2aa40 <memset>
    30e0:	bd08      	pop	{r3, pc}

000030e2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    30e2:	09c3      	lsrs	r3, r0, #7
    30e4:	005a      	lsls	r2, r3, #1
    30e6:	4413      	add	r3, r2
    30e8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    30ec:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    30f0:	b2c0      	uxtb	r0, r0
    30f2:	4770      	bx	lr

000030f4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    30f4:	b4f0      	push	{r4, r5, r6, r7}
    30f6:	b08c      	sub	sp, #48	; 0x30
    30f8:	4604      	mov	r4, r0
    30fa:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    30fc:	ad01      	add	r5, sp, #4
    30fe:	4e2a      	ldr	r6, [pc, #168]	; (31a8 <tc_aes128_set_encrypt_key+0xb4>)
    3100:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3104:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3108:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    310c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3110:	2c00      	cmp	r4, #0
    3112:	d044      	beq.n	319e <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3114:	2f00      	cmp	r7, #0
    3116:	d044      	beq.n	31a2 <tc_aes128_set_encrypt_key+0xae>
    3118:	2200      	movs	r2, #0
    311a:	e00f      	b.n	313c <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    311c:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    3120:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    3124:	784b      	ldrb	r3, [r1, #1]
    3126:	041b      	lsls	r3, r3, #16
    3128:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    312c:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    312e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3132:	78c9      	ldrb	r1, [r1, #3]
    3134:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3136:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    313a:	3201      	adds	r2, #1
    313c:	2a03      	cmp	r2, #3
    313e:	d9ed      	bls.n	311c <tc_aes128_set_encrypt_key+0x28>
    3140:	e006      	b.n	3150 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3142:	1f11      	subs	r1, r2, #4
    3144:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3148:	404b      	eors	r3, r1
    314a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    314e:	3201      	adds	r2, #1
    3150:	2a2b      	cmp	r2, #43	; 0x2b
    3152:	d820      	bhi.n	3196 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    3154:	1e53      	subs	r3, r2, #1
    3156:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    315a:	f012 0f03 	tst.w	r2, #3
    315e:	d1f0      	bne.n	3142 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    3160:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3164:	0e19      	lsrs	r1, r3, #24
    3166:	4811      	ldr	r0, [pc, #68]	; (31ac <tc_aes128_set_encrypt_key+0xb8>)
    3168:	5c45      	ldrb	r5, [r0, r1]
    316a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    316e:	5c41      	ldrb	r1, [r0, r1]
    3170:	0409      	lsls	r1, r1, #16
    3172:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    3176:	f3c3 2507 	ubfx	r5, r3, #8, #8
    317a:	5d45      	ldrb	r5, [r0, r5]
    317c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    3180:	b2db      	uxtb	r3, r3
    3182:	5cc3      	ldrb	r3, [r0, r3]
    3184:	4319      	orrs	r1, r3
    3186:	f022 0303 	bic.w	r3, r2, #3
    318a:	a80c      	add	r0, sp, #48	; 0x30
    318c:	4403      	add	r3, r0
    318e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3192:	404b      	eors	r3, r1
    3194:	e7d5      	b.n	3142 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3196:	2001      	movs	r0, #1
}
    3198:	b00c      	add	sp, #48	; 0x30
    319a:	bcf0      	pop	{r4, r5, r6, r7}
    319c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    319e:	2000      	movs	r0, #0
    31a0:	e7fa      	b.n	3198 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    31a2:	2000      	movs	r0, #0
    31a4:	e7f8      	b.n	3198 <tc_aes128_set_encrypt_key+0xa4>
    31a6:	bf00      	nop
    31a8:	0002edb0 	.word	0x0002edb0
    31ac:	0002f1ac 	.word	0x0002f1ac

000031b0 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    31b0:	2800      	cmp	r0, #0
    31b2:	f000 8367 	beq.w	3884 <tc_aes_encrypt+0x6d4>
{
    31b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31ba:	b088      	sub	sp, #32
    31bc:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    31be:	2900      	cmp	r1, #0
    31c0:	f000 8362 	beq.w	3888 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    31c4:	2a00      	cmp	r2, #0
    31c6:	f000 8361 	beq.w	388c <tc_aes_encrypt+0x6dc>
    31ca:	4617      	mov	r7, r2
    31cc:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    31ce:	2310      	movs	r3, #16
    31d0:	4619      	mov	r1, r3
    31d2:	eb0d 0003 	add.w	r0, sp, r3
    31d6:	f7ff ff74 	bl	30c2 <_copy>
	add_round_key(state, s->words);
    31da:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    31dc:	683b      	ldr	r3, [r7, #0]
    31de:	f89d 2010 	ldrb.w	r2, [sp, #16]
    31e2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31e6:	f88d 2010 	strb.w	r2, [sp, #16]
    31ea:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31ee:	f89d 1011 	ldrb.w	r1, [sp, #17]
    31f2:	404a      	eors	r2, r1
    31f4:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    31f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31fc:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3200:	404a      	eors	r2, r1
    3202:	f88d 2012 	strb.w	r2, [sp, #18]
    3206:	b2db      	uxtb	r3, r3
    3208:	f89d 2013 	ldrb.w	r2, [sp, #19]
    320c:	4053      	eors	r3, r2
    320e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3218:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    321c:	f88d 2014 	strb.w	r2, [sp, #20]
    3220:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3224:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3228:	404a      	eors	r2, r1
    322a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    322e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3232:	f89d 1016 	ldrb.w	r1, [sp, #22]
    3236:	404a      	eors	r2, r1
    3238:	f88d 2016 	strb.w	r2, [sp, #22]
    323c:	b2db      	uxtb	r3, r3
    323e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3242:	4053      	eors	r3, r2
    3244:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3248:	68bb      	ldr	r3, [r7, #8]
    324a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    324e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3252:	f88d 2018 	strb.w	r2, [sp, #24]
    3256:	f3c3 4207 	ubfx	r2, r3, #16, #8
    325a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    325e:	404a      	eors	r2, r1
    3260:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3264:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3268:	f89d 101a 	ldrb.w	r1, [sp, #26]
    326c:	404a      	eors	r2, r1
    326e:	f88d 201a 	strb.w	r2, [sp, #26]
    3272:	b2db      	uxtb	r3, r3
    3274:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3278:	4053      	eors	r3, r2
    327a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3284:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3288:	f88d 201c 	strb.w	r2, [sp, #28]
    328c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3290:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3294:	404a      	eors	r2, r1
    3296:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    329a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    329e:	f89d 101e 	ldrb.w	r1, [sp, #30]
    32a2:	404a      	eors	r2, r1
    32a4:	f88d 201e 	strb.w	r2, [sp, #30]
    32a8:	b2db      	uxtb	r3, r3
    32aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
    32ae:	4053      	eors	r3, r2
    32b0:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    32b4:	2500      	movs	r5, #0
    32b6:	e210      	b.n	36da <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    32b8:	a904      	add	r1, sp, #16
    32ba:	5ccc      	ldrb	r4, [r1, r3]
    32bc:	4a02      	ldr	r2, [pc, #8]	; (32c8 <tc_aes_encrypt+0x118>)
    32be:	5d14      	ldrb	r4, [r2, r4]
    32c0:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    32c2:	3301      	adds	r3, #1
    32c4:	e002      	b.n	32cc <tc_aes_encrypt+0x11c>
    32c6:	bf00      	nop
    32c8:	0002f1ac 	.word	0x0002f1ac
    32cc:	2b0f      	cmp	r3, #15
    32ce:	d9f3      	bls.n	32b8 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    32d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    32d4:	f88d 3000 	strb.w	r3, [sp]
    32d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    32dc:	f88d 3001 	strb.w	r3, [sp, #1]
    32e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    32e4:	f88d 3002 	strb.w	r3, [sp, #2]
    32e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32ec:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    32f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    32f4:	f88d 3004 	strb.w	r3, [sp, #4]
    32f8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    32fc:	f88d 3005 	strb.w	r3, [sp, #5]
    3300:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3304:	f88d 3006 	strb.w	r3, [sp, #6]
    3308:	f89d 3013 	ldrb.w	r3, [sp, #19]
    330c:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3310:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3314:	f88d 3008 	strb.w	r3, [sp, #8]
    3318:	f89d 301d 	ldrb.w	r3, [sp, #29]
    331c:	f88d 3009 	strb.w	r3, [sp, #9]
    3320:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3324:	f88d 300a 	strb.w	r3, [sp, #10]
    3328:	f89d 3017 	ldrb.w	r3, [sp, #23]
    332c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3330:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3334:	f88d 300c 	strb.w	r3, [sp, #12]
    3338:	f89d 3011 	ldrb.w	r3, [sp, #17]
    333c:	f88d 300d 	strb.w	r3, [sp, #13]
    3340:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3344:	f88d 300e 	strb.w	r3, [sp, #14]
    3348:	f89d 301b 	ldrb.w	r3, [sp, #27]
    334c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3350:	2310      	movs	r3, #16
    3352:	466a      	mov	r2, sp
    3354:	4619      	mov	r1, r3
    3356:	eb0d 0003 	add.w	r0, sp, r3
    335a:	f7ff feb2 	bl	30c2 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    335e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3362:	f7ff febe 	bl	30e2 <_double_byte>
    3366:	4604      	mov	r4, r0
    3368:	f89d 0011 	ldrb.w	r0, [sp, #17]
    336c:	f7ff feb9 	bl	30e2 <_double_byte>
    3370:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3374:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3378:	f89d 3013 	ldrb.w	r3, [sp, #19]
    337c:	4048      	eors	r0, r1
    337e:	4044      	eors	r4, r0
    3380:	4062      	eors	r2, r4
    3382:	4053      	eors	r3, r2
    3384:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3388:	f89d 4010 	ldrb.w	r4, [sp, #16]
    338c:	4608      	mov	r0, r1
    338e:	f7ff fea8 	bl	30e2 <_double_byte>
    3392:	4044      	eors	r4, r0
    3394:	b2e4      	uxtb	r4, r4
    3396:	f89d 0012 	ldrb.w	r0, [sp, #18]
    339a:	f7ff fea2 	bl	30e2 <_double_byte>
    339e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    33a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    33a6:	4050      	eors	r0, r2
    33a8:	4044      	eors	r4, r0
    33aa:	405c      	eors	r4, r3
    33ac:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33b0:	f89d 4010 	ldrb.w	r4, [sp, #16]
    33b4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    33b8:	4044      	eors	r4, r0
    33ba:	4610      	mov	r0, r2
    33bc:	f7ff fe91 	bl	30e2 <_double_byte>
    33c0:	4044      	eors	r4, r0
    33c2:	b2e4      	uxtb	r4, r4
    33c4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    33c8:	f7ff fe8b 	bl	30e2 <_double_byte>
    33cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    33d0:	4058      	eors	r0, r3
    33d2:	4044      	eors	r4, r0
    33d4:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    33d8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    33dc:	f7ff fe81 	bl	30e2 <_double_byte>
    33e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
    33e4:	f89d 3011 	ldrb.w	r3, [sp, #17]
    33e8:	f89d 4012 	ldrb.w	r4, [sp, #18]
    33ec:	4050      	eors	r0, r2
    33ee:	4043      	eors	r3, r0
    33f0:	405c      	eors	r4, r3
    33f2:	b2e4      	uxtb	r4, r4
    33f4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    33f8:	f7ff fe73 	bl	30e2 <_double_byte>
    33fc:	4060      	eors	r0, r4
    33fe:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3402:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3406:	f7ff fe6c 	bl	30e2 <_double_byte>
    340a:	4604      	mov	r4, r0
    340c:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3410:	f7ff fe67 	bl	30e2 <_double_byte>
    3414:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3418:	f89d 2016 	ldrb.w	r2, [sp, #22]
    341c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3420:	4048      	eors	r0, r1
    3422:	4044      	eors	r4, r0
    3424:	4062      	eors	r2, r4
    3426:	4053      	eors	r3, r2
    3428:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    342c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3430:	4608      	mov	r0, r1
    3432:	f7ff fe56 	bl	30e2 <_double_byte>
    3436:	4044      	eors	r4, r0
    3438:	b2e4      	uxtb	r4, r4
    343a:	f89d 0016 	ldrb.w	r0, [sp, #22]
    343e:	f7ff fe50 	bl	30e2 <_double_byte>
    3442:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3446:	f89d 3017 	ldrb.w	r3, [sp, #23]
    344a:	4050      	eors	r0, r2
    344c:	4044      	eors	r4, r0
    344e:	405c      	eors	r4, r3
    3450:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3454:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3458:	f89d 0015 	ldrb.w	r0, [sp, #21]
    345c:	4044      	eors	r4, r0
    345e:	4610      	mov	r0, r2
    3460:	f7ff fe3f 	bl	30e2 <_double_byte>
    3464:	4044      	eors	r4, r0
    3466:	b2e4      	uxtb	r4, r4
    3468:	f89d 0017 	ldrb.w	r0, [sp, #23]
    346c:	f7ff fe39 	bl	30e2 <_double_byte>
    3470:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3474:	4058      	eors	r0, r3
    3476:	4044      	eors	r4, r0
    3478:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    347c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3480:	f7ff fe2f 	bl	30e2 <_double_byte>
    3484:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3488:	f89d 3015 	ldrb.w	r3, [sp, #21]
    348c:	f89d 4016 	ldrb.w	r4, [sp, #22]
    3490:	4050      	eors	r0, r2
    3492:	4043      	eors	r3, r0
    3494:	405c      	eors	r4, r3
    3496:	b2e4      	uxtb	r4, r4
    3498:	f89d 0017 	ldrb.w	r0, [sp, #23]
    349c:	f7ff fe21 	bl	30e2 <_double_byte>
    34a0:	4060      	eors	r0, r4
    34a2:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    34a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    34aa:	f7ff fe1a 	bl	30e2 <_double_byte>
    34ae:	4604      	mov	r4, r0
    34b0:	f89d 0019 	ldrb.w	r0, [sp, #25]
    34b4:	f7ff fe15 	bl	30e2 <_double_byte>
    34b8:	f89d 1019 	ldrb.w	r1, [sp, #25]
    34bc:	f89d 201a 	ldrb.w	r2, [sp, #26]
    34c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34c4:	4048      	eors	r0, r1
    34c6:	4044      	eors	r4, r0
    34c8:	4062      	eors	r2, r4
    34ca:	4053      	eors	r3, r2
    34cc:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    34d0:	f89d 4018 	ldrb.w	r4, [sp, #24]
    34d4:	4608      	mov	r0, r1
    34d6:	f7ff fe04 	bl	30e2 <_double_byte>
    34da:	4044      	eors	r4, r0
    34dc:	b2e4      	uxtb	r4, r4
    34de:	f89d 001a 	ldrb.w	r0, [sp, #26]
    34e2:	f7ff fdfe 	bl	30e2 <_double_byte>
    34e6:	f89d 201a 	ldrb.w	r2, [sp, #26]
    34ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34ee:	4050      	eors	r0, r2
    34f0:	4044      	eors	r4, r0
    34f2:	405c      	eors	r4, r3
    34f4:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    34f8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    34fc:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3500:	4044      	eors	r4, r0
    3502:	4610      	mov	r0, r2
    3504:	f7ff fded 	bl	30e2 <_double_byte>
    3508:	4044      	eors	r4, r0
    350a:	b2e4      	uxtb	r4, r4
    350c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3510:	f7ff fde7 	bl	30e2 <_double_byte>
    3514:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3518:	4058      	eors	r0, r3
    351a:	4044      	eors	r4, r0
    351c:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3520:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3524:	f7ff fddd 	bl	30e2 <_double_byte>
    3528:	f89d 2018 	ldrb.w	r2, [sp, #24]
    352c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3530:	f89d 401a 	ldrb.w	r4, [sp, #26]
    3534:	4050      	eors	r0, r2
    3536:	4043      	eors	r3, r0
    3538:	405c      	eors	r4, r3
    353a:	b2e4      	uxtb	r4, r4
    353c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3540:	f7ff fdcf 	bl	30e2 <_double_byte>
    3544:	4060      	eors	r0, r4
    3546:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    354a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    354e:	f7ff fdc8 	bl	30e2 <_double_byte>
    3552:	4604      	mov	r4, r0
    3554:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3558:	f7ff fdc3 	bl	30e2 <_double_byte>
    355c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3560:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3564:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3568:	4048      	eors	r0, r1
    356a:	4044      	eors	r4, r0
    356c:	4062      	eors	r2, r4
    356e:	4053      	eors	r3, r2
    3570:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3574:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3578:	4608      	mov	r0, r1
    357a:	f7ff fdb2 	bl	30e2 <_double_byte>
    357e:	4044      	eors	r4, r0
    3580:	b2e4      	uxtb	r4, r4
    3582:	f89d 001e 	ldrb.w	r0, [sp, #30]
    3586:	f7ff fdac 	bl	30e2 <_double_byte>
    358a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    358e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3592:	4050      	eors	r0, r2
    3594:	4044      	eors	r4, r0
    3596:	405c      	eors	r4, r3
    3598:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    359c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    35a0:	f89d 001d 	ldrb.w	r0, [sp, #29]
    35a4:	4044      	eors	r4, r0
    35a6:	4610      	mov	r0, r2
    35a8:	f7ff fd9b 	bl	30e2 <_double_byte>
    35ac:	4044      	eors	r4, r0
    35ae:	b2e4      	uxtb	r4, r4
    35b0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    35b4:	f7ff fd95 	bl	30e2 <_double_byte>
    35b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35bc:	4058      	eors	r0, r3
    35be:	4044      	eors	r4, r0
    35c0:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    35c4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35c8:	f7ff fd8b 	bl	30e2 <_double_byte>
    35cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
    35d0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35d4:	f89d 401e 	ldrb.w	r4, [sp, #30]
    35d8:	4050      	eors	r0, r2
    35da:	4043      	eors	r3, r0
    35dc:	405c      	eors	r4, r3
    35de:	b2e4      	uxtb	r4, r4
    35e0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    35e4:	f7ff fd7d 	bl	30e2 <_double_byte>
    35e8:	4060      	eors	r0, r4
    35ea:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    35ee:	2310      	movs	r3, #16
    35f0:	466a      	mov	r2, sp
    35f2:	4619      	mov	r1, r3
    35f4:	eb0d 0003 	add.w	r0, sp, r3
    35f8:	f7ff fd63 	bl	30c2 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    35fc:	3501      	adds	r5, #1
    35fe:	012b      	lsls	r3, r5, #4
    3600:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3602:	58f3      	ldr	r3, [r6, r3]
    3604:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3608:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    360c:	f88d 1010 	strb.w	r1, [sp, #16]
    3610:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3614:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3618:	4041      	eors	r1, r0
    361a:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    361e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3622:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3626:	4041      	eors	r1, r0
    3628:	f88d 1012 	strb.w	r1, [sp, #18]
    362c:	b2db      	uxtb	r3, r3
    362e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3632:	404b      	eors	r3, r1
    3634:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3638:	6853      	ldr	r3, [r2, #4]
    363a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    363e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3642:	f88d 1014 	strb.w	r1, [sp, #20]
    3646:	f3c3 4107 	ubfx	r1, r3, #16, #8
    364a:	f89d 0015 	ldrb.w	r0, [sp, #21]
    364e:	4041      	eors	r1, r0
    3650:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3654:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3658:	f89d 0016 	ldrb.w	r0, [sp, #22]
    365c:	4041      	eors	r1, r0
    365e:	f88d 1016 	strb.w	r1, [sp, #22]
    3662:	b2db      	uxtb	r3, r3
    3664:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3668:	404b      	eors	r3, r1
    366a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    366e:	6893      	ldr	r3, [r2, #8]
    3670:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3674:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3678:	f88d 1018 	strb.w	r1, [sp, #24]
    367c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3680:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3684:	4041      	eors	r1, r0
    3686:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    368a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    368e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3692:	4041      	eors	r1, r0
    3694:	f88d 101a 	strb.w	r1, [sp, #26]
    3698:	b2db      	uxtb	r3, r3
    369a:	f89d 101b 	ldrb.w	r1, [sp, #27]
    369e:	404b      	eors	r3, r1
    36a0:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    36a4:	68d3      	ldr	r3, [r2, #12]
    36a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
    36aa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    36ae:	f88d 201c 	strb.w	r2, [sp, #28]
    36b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    36b6:	f89d 101d 	ldrb.w	r1, [sp, #29]
    36ba:	404a      	eors	r2, r1
    36bc:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    36c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    36c4:	f89d 101e 	ldrb.w	r1, [sp, #30]
    36c8:	404a      	eors	r2, r1
    36ca:	f88d 201e 	strb.w	r2, [sp, #30]
    36ce:	b2db      	uxtb	r3, r3
    36d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    36d4:	4053      	eors	r3, r2
    36d6:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    36da:	2d08      	cmp	r5, #8
    36dc:	d801      	bhi.n	36e2 <tc_aes_encrypt+0x532>
    36de:	2300      	movs	r3, #0
    36e0:	e5f4      	b.n	32cc <tc_aes_encrypt+0x11c>
    36e2:	2300      	movs	r3, #0
    36e4:	e005      	b.n	36f2 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    36e6:	aa04      	add	r2, sp, #16
    36e8:	5cd1      	ldrb	r1, [r2, r3]
    36ea:	4869      	ldr	r0, [pc, #420]	; (3890 <tc_aes_encrypt+0x6e0>)
    36ec:	5c41      	ldrb	r1, [r0, r1]
    36ee:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    36f0:	3301      	adds	r3, #1
    36f2:	2b0f      	cmp	r3, #15
    36f4:	d9f7      	bls.n	36e6 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    36f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    36fa:	f88d 3000 	strb.w	r3, [sp]
    36fe:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3702:	f88d 3001 	strb.w	r3, [sp, #1]
    3706:	f89d 301a 	ldrb.w	r3, [sp, #26]
    370a:	f88d 3002 	strb.w	r3, [sp, #2]
    370e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3712:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3716:	f89d 3014 	ldrb.w	r3, [sp, #20]
    371a:	f88d 3004 	strb.w	r3, [sp, #4]
    371e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3722:	f88d 3005 	strb.w	r3, [sp, #5]
    3726:	f89d 301e 	ldrb.w	r3, [sp, #30]
    372a:	f88d 3006 	strb.w	r3, [sp, #6]
    372e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3732:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3736:	f89d 3018 	ldrb.w	r3, [sp, #24]
    373a:	f88d 3008 	strb.w	r3, [sp, #8]
    373e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3742:	f88d 3009 	strb.w	r3, [sp, #9]
    3746:	f89d 3012 	ldrb.w	r3, [sp, #18]
    374a:	f88d 300a 	strb.w	r3, [sp, #10]
    374e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3752:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3756:	f89d 301c 	ldrb.w	r3, [sp, #28]
    375a:	f88d 300c 	strb.w	r3, [sp, #12]
    375e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3762:	f88d 300d 	strb.w	r3, [sp, #13]
    3766:	f89d 3016 	ldrb.w	r3, [sp, #22]
    376a:	f88d 300e 	strb.w	r3, [sp, #14]
    376e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3772:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3776:	2310      	movs	r3, #16
    3778:	466a      	mov	r2, sp
    377a:	4619      	mov	r1, r3
    377c:	eb0d 0003 	add.w	r0, sp, r3
    3780:	f7ff fc9f 	bl	30c2 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3784:	1c6b      	adds	r3, r5, #1
    3786:	011b      	lsls	r3, r3, #4
    3788:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    378a:	58fb      	ldr	r3, [r7, r3]
    378c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3790:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3794:	f88d 1010 	strb.w	r1, [sp, #16]
    3798:	f3c3 4107 	ubfx	r1, r3, #16, #8
    379c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    37a0:	4041      	eors	r1, r0
    37a2:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    37a6:	f3c3 2107 	ubfx	r1, r3, #8, #8
    37aa:	f89d 0012 	ldrb.w	r0, [sp, #18]
    37ae:	4041      	eors	r1, r0
    37b0:	f88d 1012 	strb.w	r1, [sp, #18]
    37b4:	b2db      	uxtb	r3, r3
    37b6:	f89d 1013 	ldrb.w	r1, [sp, #19]
    37ba:	404b      	eors	r3, r1
    37bc:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    37c0:	6853      	ldr	r3, [r2, #4]
    37c2:	f89d 1014 	ldrb.w	r1, [sp, #20]
    37c6:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    37ca:	f88d 1014 	strb.w	r1, [sp, #20]
    37ce:	f3c3 4107 	ubfx	r1, r3, #16, #8
    37d2:	f89d 0015 	ldrb.w	r0, [sp, #21]
    37d6:	4041      	eors	r1, r0
    37d8:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    37dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    37e0:	f89d 0016 	ldrb.w	r0, [sp, #22]
    37e4:	4041      	eors	r1, r0
    37e6:	f88d 1016 	strb.w	r1, [sp, #22]
    37ea:	b2db      	uxtb	r3, r3
    37ec:	f89d 1017 	ldrb.w	r1, [sp, #23]
    37f0:	404b      	eors	r3, r1
    37f2:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    37f6:	6893      	ldr	r3, [r2, #8]
    37f8:	f89d 1018 	ldrb.w	r1, [sp, #24]
    37fc:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3800:	f88d 1018 	strb.w	r1, [sp, #24]
    3804:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3808:	f89d 0019 	ldrb.w	r0, [sp, #25]
    380c:	4041      	eors	r1, r0
    380e:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3812:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3816:	f89d 001a 	ldrb.w	r0, [sp, #26]
    381a:	4041      	eors	r1, r0
    381c:	f88d 101a 	strb.w	r1, [sp, #26]
    3820:	b2db      	uxtb	r3, r3
    3822:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3826:	404b      	eors	r3, r1
    3828:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    382c:	68d3      	ldr	r3, [r2, #12]
    382e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3832:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3836:	f88d 201c 	strb.w	r2, [sp, #28]
    383a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    383e:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3842:	404a      	eors	r2, r1
    3844:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3848:	f3c3 2207 	ubfx	r2, r3, #8, #8
    384c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3850:	404a      	eors	r2, r1
    3852:	f88d 201e 	strb.w	r2, [sp, #30]
    3856:	b2db      	uxtb	r3, r3
    3858:	f89d 201f 	ldrb.w	r2, [sp, #31]
    385c:	4053      	eors	r3, r2
    385e:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3862:	2310      	movs	r3, #16
    3864:	eb0d 0203 	add.w	r2, sp, r3
    3868:	4619      	mov	r1, r3
    386a:	4640      	mov	r0, r8
    386c:	f7ff fc29 	bl	30c2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3870:	2210      	movs	r2, #16
    3872:	2100      	movs	r1, #0
    3874:	eb0d 0002 	add.w	r0, sp, r2
    3878:	f7ff fc2f 	bl	30da <_set>

	return TC_CRYPTO_SUCCESS;
    387c:	2001      	movs	r0, #1
}
    387e:	b008      	add	sp, #32
    3880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3884:	2000      	movs	r0, #0
    3886:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3888:	2000      	movs	r0, #0
    388a:	e7f8      	b.n	387e <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    388c:	2000      	movs	r0, #0
    388e:	e7f6      	b.n	387e <tc_aes_encrypt+0x6ce>
    3890:	0002f1ac 	.word	0x0002f1ac

00003894 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3894:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    3896:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    389a:	f991 3000 	ldrsb.w	r3, [r1]
    389e:	2b00      	cmp	r3, #0
    38a0:	db0d      	blt.n	38be <gf_double+0x2a>
    38a2:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    38a4:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    38a6:	1e45      	subs	r5, r0, #1
    38a8:	7814      	ldrb	r4, [r2, #0]
    38aa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    38ae:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    38b0:	428a      	cmp	r2, r1
    38b2:	d006      	beq.n	38c2 <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    38b4:	7813      	ldrb	r3, [r2, #0]
    38b6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    38b8:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    38ba:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    38bc:	e7f3      	b.n	38a6 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    38be:	2387      	movs	r3, #135	; 0x87
    38c0:	e7f0      	b.n	38a4 <gf_double+0x10>
	}
}
    38c2:	bc30      	pop	{r4, r5}
    38c4:	4770      	bx	lr

000038c6 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    38c6:	b130      	cbz	r0, 38d6 <tc_cmac_erase+0x10>
{
    38c8:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    38ca:	2258      	movs	r2, #88	; 0x58
    38cc:	2100      	movs	r1, #0
    38ce:	f7ff fc04 	bl	30da <_set>

	return TC_CRYPTO_SUCCESS;
    38d2:	2001      	movs	r0, #1
    38d4:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    38d6:	2000      	movs	r0, #0
    38d8:	4770      	bx	lr

000038da <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    38da:	b1a0      	cbz	r0, 3906 <tc_cmac_init+0x2c>
{
    38dc:	b510      	push	{r4, lr}
    38de:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    38e0:	2210      	movs	r2, #16
    38e2:	2100      	movs	r1, #0
    38e4:	f7ff fbf9 	bl	30da <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    38e8:	2210      	movs	r2, #16
    38ea:	2100      	movs	r1, #0
    38ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
    38f0:	f7ff fbf3 	bl	30da <_set>
	s->leftover_offset = 0;
    38f4:	2300      	movs	r3, #0
    38f6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    38f8:	2200      	movs	r2, #0
    38fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    38fe:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    3902:	2001      	movs	r0, #1
    3904:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    3906:	2000      	movs	r0, #0
    3908:	4770      	bx	lr

0000390a <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    390a:	b338      	cbz	r0, 395c <tc_cmac_setup+0x52>
{
    390c:	b570      	push	{r4, r5, r6, lr}
    390e:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    3910:	b331      	cbz	r1, 3960 <tc_cmac_setup+0x56>
    3912:	4616      	mov	r6, r2
    3914:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    3916:	2258      	movs	r2, #88	; 0x58
    3918:	2100      	movs	r1, #0
    391a:	f7ff fbde 	bl	30da <_set>
	s->sched = sched;
    391e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3920:	4629      	mov	r1, r5
    3922:	4630      	mov	r0, r6
    3924:	f7ff fbe6 	bl	30f4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3928:	2210      	movs	r2, #16
    392a:	2100      	movs	r1, #0
    392c:	4620      	mov	r0, r4
    392e:	f7ff fbd4 	bl	30da <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    3932:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3934:	4621      	mov	r1, r4
    3936:	4620      	mov	r0, r4
    3938:	f7ff fc3a 	bl	31b0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    393c:	f104 0510 	add.w	r5, r4, #16
    3940:	4621      	mov	r1, r4
    3942:	4628      	mov	r0, r5
    3944:	f7ff ffa6 	bl	3894 <gf_double>
	gf_double (s->K2, s->K1);
    3948:	4629      	mov	r1, r5
    394a:	f104 0020 	add.w	r0, r4, #32
    394e:	f7ff ffa1 	bl	3894 <gf_double>
	tc_cmac_init(s);
    3952:	4620      	mov	r0, r4
    3954:	f7ff ffc1 	bl	38da <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3958:	2001      	movs	r0, #1
    395a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    395c:	2000      	movs	r0, #0
    395e:	4770      	bx	lr
    3960:	2000      	movs	r0, #0
}
    3962:	bd70      	pop	{r4, r5, r6, pc}

00003964 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3964:	2800      	cmp	r0, #0
    3966:	d05f      	beq.n	3a28 <tc_cmac_update+0xc4>
{
    3968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    396a:	460d      	mov	r5, r1
    396c:	4616      	mov	r6, r2
    396e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    3970:	2a00      	cmp	r2, #0
    3972:	d05b      	beq.n	3a2c <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3974:	2900      	cmp	r1, #0
    3976:	d05b      	beq.n	3a30 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3978:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    397c:	ea52 0103 	orrs.w	r1, r2, r3
    3980:	d058      	beq.n	3a34 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    3982:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3986:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    398a:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    398e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3990:	2800      	cmp	r0, #0
    3992:	d038      	beq.n	3a06 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3994:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3998:	42be      	cmp	r6, r7
    399a:	d30b      	bcc.n	39b4 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    399c:	3030      	adds	r0, #48	; 0x30
    399e:	463b      	mov	r3, r7
    39a0:	462a      	mov	r2, r5
    39a2:	4639      	mov	r1, r7
    39a4:	4420      	add	r0, r4
    39a6:	f7ff fb8c 	bl	30c2 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    39aa:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    39ac:	443d      	add	r5, r7
		s->leftover_offset = 0;
    39ae:	2300      	movs	r3, #0
    39b0:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    39b2:	e012      	b.n	39da <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    39b4:	3030      	adds	r0, #48	; 0x30
    39b6:	4633      	mov	r3, r6
    39b8:	462a      	mov	r2, r5
    39ba:	4631      	mov	r1, r6
    39bc:	4420      	add	r0, r4
    39be:	f7ff fb80 	bl	30c2 <_copy>
			s->leftover_offset += data_length;
    39c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    39c4:	4433      	add	r3, r6
    39c6:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    39c8:	2001      	movs	r0, #1
    39ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    39cc:	18e2      	adds	r2, r4, r3
    39ce:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    39d2:	5ce1      	ldrb	r1, [r4, r3]
    39d4:	404a      	eors	r2, r1
    39d6:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    39d8:	3301      	adds	r3, #1
    39da:	2b0f      	cmp	r3, #15
    39dc:	d9f6      	bls.n	39cc <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    39de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    39e0:	4621      	mov	r1, r4
    39e2:	4620      	mov	r0, r4
    39e4:	f7ff fbe4 	bl	31b0 <tc_aes_encrypt>
    39e8:	e00d      	b.n	3a06 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    39ea:	5cea      	ldrb	r2, [r5, r3]
    39ec:	5ce1      	ldrb	r1, [r4, r3]
    39ee:	404a      	eors	r2, r1
    39f0:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    39f2:	3301      	adds	r3, #1
    39f4:	2b0f      	cmp	r3, #15
    39f6:	d9f8      	bls.n	39ea <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    39f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    39fa:	4621      	mov	r1, r4
    39fc:	4620      	mov	r0, r4
    39fe:	f7ff fbd7 	bl	31b0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    3a02:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    3a04:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    3a06:	2e10      	cmp	r6, #16
    3a08:	d901      	bls.n	3a0e <tc_cmac_update+0xaa>
    3a0a:	2300      	movs	r3, #0
    3a0c:	e7f2      	b.n	39f4 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    3a0e:	b90e      	cbnz	r6, 3a14 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    3a10:	2001      	movs	r0, #1
}
    3a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    3a14:	4633      	mov	r3, r6
    3a16:	462a      	mov	r2, r5
    3a18:	4631      	mov	r1, r6
    3a1a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3a1e:	f7ff fb50 	bl	30c2 <_copy>
		s->leftover_offset = data_length;
    3a22:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3a24:	2001      	movs	r0, #1
    3a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3a28:	2000      	movs	r0, #0
    3a2a:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    3a2c:	2001      	movs	r0, #1
    3a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3a30:	2000      	movs	r0, #0
    3a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3a34:	2000      	movs	r0, #0
    3a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003a38 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3a38:	b370      	cbz	r0, 3a98 <tc_cmac_final+0x60>
{
    3a3a:	b570      	push	{r4, r5, r6, lr}
    3a3c:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    3a3e:	b369      	cbz	r1, 3a9c <tc_cmac_final+0x64>
    3a40:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    3a42:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3a44:	2a10      	cmp	r2, #16
    3a46:	d010      	beq.n	3a6a <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3a48:	f102 0030 	add.w	r0, r2, #48	; 0x30
    3a4c:	f1c2 0210 	rsb	r2, r2, #16
    3a50:	2100      	movs	r1, #0
    3a52:	4428      	add	r0, r5
    3a54:	f7ff fb41 	bl	30da <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3a58:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3a5a:	442b      	add	r3, r5
    3a5c:	2280      	movs	r2, #128	; 0x80
    3a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    3a62:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3a66:	2300      	movs	r3, #0
    3a68:	e00a      	b.n	3a80 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3a6a:	3110      	adds	r1, #16
    3a6c:	e7fb      	b.n	3a66 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    3a6e:	18ea      	adds	r2, r5, r3
    3a70:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3a74:	5ccc      	ldrb	r4, [r1, r3]
    3a76:	4054      	eors	r4, r2
    3a78:	5cea      	ldrb	r2, [r5, r3]
    3a7a:	4062      	eors	r2, r4
    3a7c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3a7e:	3301      	adds	r3, #1
    3a80:	2b0f      	cmp	r3, #15
    3a82:	d9f4      	bls.n	3a6e <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3a84:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3a86:	4629      	mov	r1, r5
    3a88:	4630      	mov	r0, r6
    3a8a:	f7ff fb91 	bl	31b0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    3a8e:	4628      	mov	r0, r5
    3a90:	f7ff ff19 	bl	38c6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3a94:	2001      	movs	r0, #1
    3a96:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3a98:	2000      	movs	r0, #0
    3a9a:	4770      	bx	lr
    3a9c:	2000      	movs	r0, #0
}
    3a9e:	bd70      	pop	{r4, r5, r6, pc}

00003aa0 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    3aa0:	2000      	movs	r0, #0
    3aa2:	4770      	bx	lr

00003aa4 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3aa4:	e003      	b.n	3aae <mbedtls_zeroize+0xa>
    3aa6:	2200      	movs	r2, #0
    3aa8:	7002      	strb	r2, [r0, #0]
    3aaa:	3001      	adds	r0, #1
    3aac:	4619      	mov	r1, r3
    3aae:	1e4b      	subs	r3, r1, #1
    3ab0:	2900      	cmp	r1, #0
    3ab2:	d1f8      	bne.n	3aa6 <mbedtls_zeroize+0x2>
}
    3ab4:	4770      	bx	lr

00003ab6 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ab6:	e003      	b.n	3ac0 <mbedtls_zeroize+0xa>
    3ab8:	2200      	movs	r2, #0
    3aba:	7002      	strb	r2, [r0, #0]
    3abc:	3001      	adds	r0, #1
    3abe:	4619      	mov	r1, r3
    3ac0:	1e4b      	subs	r3, r1, #1
    3ac2:	2900      	cmp	r1, #0
    3ac4:	d1f8      	bne.n	3ab8 <mbedtls_zeroize+0x2>
}
    3ac6:	4770      	bx	lr

00003ac8 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ac8:	e003      	b.n	3ad2 <mbedtls_zeroize+0xa>
    3aca:	2200      	movs	r2, #0
    3acc:	7002      	strb	r2, [r0, #0]
    3ace:	3001      	adds	r0, #1
    3ad0:	4619      	mov	r1, r3
    3ad2:	1e4b      	subs	r3, r1, #1
    3ad4:	2900      	cmp	r1, #0
    3ad6:	d1f8      	bne.n	3aca <mbedtls_zeroize+0x2>
}
    3ad8:	4770      	bx	lr

00003ada <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ada:	e003      	b.n	3ae4 <mbedtls_zeroize+0xa>
    3adc:	2200      	movs	r2, #0
    3ade:	7002      	strb	r2, [r0, #0]
    3ae0:	3001      	adds	r0, #1
    3ae2:	4619      	mov	r1, r3
    3ae4:	1e4b      	subs	r3, r1, #1
    3ae6:	2900      	cmp	r1, #0
    3ae8:	d1f8      	bne.n	3adc <mbedtls_zeroize+0x2>
}
    3aea:	4770      	bx	lr

00003aec <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3aec:	e003      	b.n	3af6 <mbedtls_zeroize+0xa>
    3aee:	2200      	movs	r2, #0
    3af0:	7002      	strb	r2, [r0, #0]
    3af2:	3001      	adds	r0, #1
    3af4:	4619      	mov	r1, r3
    3af6:	1e4b      	subs	r3, r1, #1
    3af8:	2900      	cmp	r1, #0
    3afa:	d1f8      	bne.n	3aee <mbedtls_zeroize+0x2>
}
    3afc:	4770      	bx	lr

00003afe <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3afe:	e003      	b.n	3b08 <mbedtls_zeroize+0xa>
    3b00:	2200      	movs	r2, #0
    3b02:	7002      	strb	r2, [r0, #0]
    3b04:	3001      	adds	r0, #1
    3b06:	4619      	mov	r1, r3
    3b08:	1e4b      	subs	r3, r1, #1
    3b0a:	2900      	cmp	r1, #0
    3b0c:	d1f8      	bne.n	3b00 <mbedtls_zeroize+0x2>
}
    3b0e:	4770      	bx	lr

00003b10 <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b10:	e003      	b.n	3b1a <mbedtls_zeroize+0xa>
    3b12:	2200      	movs	r2, #0
    3b14:	7002      	strb	r2, [r0, #0]
    3b16:	3001      	adds	r0, #1
    3b18:	4619      	mov	r1, r3
    3b1a:	1e4b      	subs	r3, r1, #1
    3b1c:	2900      	cmp	r1, #0
    3b1e:	d1f8      	bne.n	3b12 <mbedtls_zeroize+0x2>
}
    3b20:	4770      	bx	lr

00003b22 <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b22:	e003      	b.n	3b2c <mbedtls_zeroize+0xa>
    3b24:	2200      	movs	r2, #0
    3b26:	7002      	strb	r2, [r0, #0]
    3b28:	3001      	adds	r0, #1
    3b2a:	4619      	mov	r1, r3
    3b2c:	1e4b      	subs	r3, r1, #1
    3b2e:	2900      	cmp	r1, #0
    3b30:	d1f8      	bne.n	3b24 <mbedtls_zeroize+0x2>
}
    3b32:	4770      	bx	lr

00003b34 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b34:	e003      	b.n	3b3e <mbedtls_zeroize+0xa>
    3b36:	2200      	movs	r2, #0
    3b38:	7002      	strb	r2, [r0, #0]
    3b3a:	3001      	adds	r0, #1
    3b3c:	4619      	mov	r1, r3
    3b3e:	1e4b      	subs	r3, r1, #1
    3b40:	2900      	cmp	r1, #0
    3b42:	d1f8      	bne.n	3b36 <mbedtls_zeroize+0x2>
}
    3b44:	4770      	bx	lr

00003b46 <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b46:	e003      	b.n	3b50 <mbedtls_zeroize+0xa>
    3b48:	2200      	movs	r2, #0
    3b4a:	7002      	strb	r2, [r0, #0]
    3b4c:	3001      	adds	r0, #1
    3b4e:	4619      	mov	r1, r3
    3b50:	1e4b      	subs	r3, r1, #1
    3b52:	2900      	cmp	r1, #0
    3b54:	d1f8      	bne.n	3b48 <mbedtls_zeroize+0x2>
}
    3b56:	4770      	bx	lr

00003b58 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b58:	e003      	b.n	3b62 <mbedtls_zeroize+0xa>
    3b5a:	2200      	movs	r2, #0
    3b5c:	7002      	strb	r2, [r0, #0]
    3b5e:	3001      	adds	r0, #1
    3b60:	4619      	mov	r1, r3
    3b62:	1e4b      	subs	r3, r1, #1
    3b64:	2900      	cmp	r1, #0
    3b66:	d1f8      	bne.n	3b5a <mbedtls_zeroize+0x2>
}
    3b68:	4770      	bx	lr

00003b6a <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b6a:	e003      	b.n	3b74 <mbedtls_zeroize+0xa>
    3b6c:	2200      	movs	r2, #0
    3b6e:	7002      	strb	r2, [r0, #0]
    3b70:	3001      	adds	r0, #1
    3b72:	4619      	mov	r1, r3
    3b74:	1e4b      	subs	r3, r1, #1
    3b76:	2900      	cmp	r1, #0
    3b78:	d1f8      	bne.n	3b6c <mbedtls_zeroize+0x2>
}
    3b7a:	4770      	bx	lr

00003b7c <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b7c:	e003      	b.n	3b86 <mbedtls_zeroize+0xa>
    3b7e:	2200      	movs	r2, #0
    3b80:	7002      	strb	r2, [r0, #0]
    3b82:	3001      	adds	r0, #1
    3b84:	4619      	mov	r1, r3
    3b86:	1e4b      	subs	r3, r1, #1
    3b88:	2900      	cmp	r1, #0
    3b8a:	d1f8      	bne.n	3b7e <mbedtls_zeroize+0x2>
}
    3b8c:	4770      	bx	lr

00003b8e <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b8e:	e003      	b.n	3b98 <mbedtls_zeroize+0xa>
    3b90:	2200      	movs	r2, #0
    3b92:	7002      	strb	r2, [r0, #0]
    3b94:	3001      	adds	r0, #1
    3b96:	4619      	mov	r1, r3
    3b98:	1e4b      	subs	r3, r1, #1
    3b9a:	2900      	cmp	r1, #0
    3b9c:	d1f8      	bne.n	3b90 <mbedtls_zeroize+0x2>
}
    3b9e:	4770      	bx	lr

00003ba0 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ba0:	e003      	b.n	3baa <mbedtls_zeroize+0xa>
    3ba2:	2200      	movs	r2, #0
    3ba4:	7002      	strb	r2, [r0, #0]
    3ba6:	3001      	adds	r0, #1
    3ba8:	4619      	mov	r1, r3
    3baa:	1e4b      	subs	r3, r1, #1
    3bac:	2900      	cmp	r1, #0
    3bae:	d1f8      	bne.n	3ba2 <mbedtls_zeroize+0x2>
}
    3bb0:	4770      	bx	lr

00003bb2 <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3bb2:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3bb4:	f44f 728c 	mov.w	r2, #280	; 0x118
    3bb8:	2100      	movs	r1, #0
    3bba:	f026 ff41 	bl	2aa40 <memset>
    3bbe:	bd08      	pop	{r3, pc}

00003bc0 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3bc0:	b128      	cbz	r0, 3bce <mbedtls_aes_free+0xe>
{
    3bc2:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3bc4:	f44f 718c 	mov.w	r1, #280	; 0x118
    3bc8:	f7ff ff6c 	bl	3aa4 <mbedtls_zeroize>
    3bcc:	bd08      	pop	{r3, pc}
    3bce:	4770      	bx	lr

00003bd0 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3bd0:	2ac0      	cmp	r2, #192	; 0xc0
    3bd2:	d00f      	beq.n	3bf4 <mbedtls_aes_setkey_enc+0x24>
    3bd4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3bd8:	d00f      	beq.n	3bfa <mbedtls_aes_setkey_enc+0x2a>
    3bda:	2a80      	cmp	r2, #128	; 0x80
    3bdc:	d002      	beq.n	3be4 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3bde:	f06f 001f 	mvn.w	r0, #31
    3be2:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3be4:	230a      	movs	r3, #10
    3be6:	6003      	str	r3, [r0, #0]
{
    3be8:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3bea:	f100 0308 	add.w	r3, r0, #8
    3bee:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3bf0:	2500      	movs	r5, #0
    3bf2:	e015      	b.n	3c20 <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3bf4:	230c      	movs	r3, #12
    3bf6:	6003      	str	r3, [r0, #0]
    3bf8:	e7f6      	b.n	3be8 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3bfa:	230e      	movs	r3, #14
    3bfc:	6003      	str	r3, [r0, #0]
    3bfe:	e7f3      	b.n	3be8 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3c00:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3c04:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3c08:	7877      	ldrb	r7, [r6, #1]
    3c0a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3c0e:	78b7      	ldrb	r7, [r6, #2]
    3c10:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3c14:	78f6      	ldrb	r6, [r6, #3]
    3c16:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3c1a:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3c1e:	3501      	adds	r5, #1
    3c20:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3c24:	d3ec      	bcc.n	3c00 <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3c26:	6802      	ldr	r2, [r0, #0]
    3c28:	2a0c      	cmp	r2, #12
    3c2a:	d05d      	beq.n	3ce8 <mbedtls_aes_setkey_enc+0x118>
    3c2c:	2a0e      	cmp	r2, #14
    3c2e:	f000 80a0 	beq.w	3d72 <mbedtls_aes_setkey_enc+0x1a2>
    3c32:	2a0a      	cmp	r2, #10
    3c34:	d029      	beq.n	3c8a <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3c36:	2000      	movs	r0, #0
    3c38:	e025      	b.n	3c86 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3c3a:	681a      	ldr	r2, [r3, #0]
    3c3c:	494e      	ldr	r1, [pc, #312]	; (3d78 <mbedtls_aes_setkey_enc+0x1a8>)
    3c3e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3c42:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3c44:	68d9      	ldr	r1, [r3, #12]
    3c46:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3c4a:	484c      	ldr	r0, [pc, #304]	; (3d7c <mbedtls_aes_setkey_enc+0x1ac>)
    3c4c:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3c4e:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3c50:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3c54:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3c56:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3c5a:	0e0d      	lsrs	r5, r1, #24
    3c5c:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3c5e:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3c62:	b2cd      	uxtb	r5, r1
    3c64:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3c66:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3c6a:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3c6c:	6858      	ldr	r0, [r3, #4]
    3c6e:	4042      	eors	r2, r0
    3c70:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3c72:	6898      	ldr	r0, [r3, #8]
    3c74:	4042      	eors	r2, r0
    3c76:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3c78:	404a      	eors	r2, r1
    3c7a:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3c7c:	3401      	adds	r4, #1
    3c7e:	3310      	adds	r3, #16
    3c80:	2c09      	cmp	r4, #9
    3c82:	d9da      	bls.n	3c3a <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3c84:	2000      	movs	r0, #0
}
    3c86:	bcf0      	pop	{r4, r5, r6, r7}
    3c88:	4770      	bx	lr
    switch( ctx->nr )
    3c8a:	2400      	movs	r4, #0
    3c8c:	e7f8      	b.n	3c80 <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3c8e:	681a      	ldr	r2, [r3, #0]
    3c90:	4939      	ldr	r1, [pc, #228]	; (3d78 <mbedtls_aes_setkey_enc+0x1a8>)
    3c92:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3c96:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3c98:	6959      	ldr	r1, [r3, #20]
    3c9a:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3c9e:	4c37      	ldr	r4, [pc, #220]	; (3d7c <mbedtls_aes_setkey_enc+0x1ac>)
    3ca0:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3ca2:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3ca4:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3ca8:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3caa:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3cae:	0e0d      	lsrs	r5, r1, #24
    3cb0:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3cb2:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3cb6:	b2cd      	uxtb	r5, r1
    3cb8:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3cba:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3cbe:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3cc0:	685c      	ldr	r4, [r3, #4]
    3cc2:	4062      	eors	r2, r4
    3cc4:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3cc6:	689c      	ldr	r4, [r3, #8]
    3cc8:	4062      	eors	r2, r4
    3cca:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3ccc:	68dc      	ldr	r4, [r3, #12]
    3cce:	4062      	eors	r2, r4
    3cd0:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3cd2:	691c      	ldr	r4, [r3, #16]
    3cd4:	4062      	eors	r2, r4
    3cd6:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3cd8:	404a      	eors	r2, r1
    3cda:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3cdc:	3001      	adds	r0, #1
    3cde:	3318      	adds	r3, #24
    3ce0:	2807      	cmp	r0, #7
    3ce2:	d9d4      	bls.n	3c8e <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3ce4:	2000      	movs	r0, #0
    3ce6:	e7ce      	b.n	3c86 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3ce8:	2000      	movs	r0, #0
    3cea:	e7f9      	b.n	3ce0 <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3cec:	681a      	ldr	r2, [r3, #0]
    3cee:	4822      	ldr	r0, [pc, #136]	; (3d78 <mbedtls_aes_setkey_enc+0x1a8>)
    3cf0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3cf4:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3cf6:	69d8      	ldr	r0, [r3, #28]
    3cf8:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3cfc:	4d1f      	ldr	r5, [pc, #124]	; (3d7c <mbedtls_aes_setkey_enc+0x1ac>)
    3cfe:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3d00:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d02:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3d06:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3d08:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d0c:	0e04      	lsrs	r4, r0, #24
    3d0e:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d10:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3d14:	b2c4      	uxtb	r4, r0
    3d16:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d18:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3d1c:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3d1e:	685c      	ldr	r4, [r3, #4]
    3d20:	4062      	eors	r2, r4
    3d22:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3d24:	689c      	ldr	r4, [r3, #8]
    3d26:	4062      	eors	r2, r4
    3d28:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3d2a:	68dc      	ldr	r4, [r3, #12]
    3d2c:	4062      	eors	r2, r4
    3d2e:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3d30:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d32:	b2d6      	uxtb	r6, r2
    3d34:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3d36:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3d38:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3d3c:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d3e:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3d42:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3d46:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3d48:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3d4c:	0e12      	lsrs	r2, r2, #24
    3d4e:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3d50:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3d54:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3d56:	695c      	ldr	r4, [r3, #20]
    3d58:	4062      	eors	r2, r4
    3d5a:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3d5c:	699c      	ldr	r4, [r3, #24]
    3d5e:	4062      	eors	r2, r4
    3d60:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3d62:	4042      	eors	r2, r0
    3d64:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3d66:	3101      	adds	r1, #1
    3d68:	3320      	adds	r3, #32
    3d6a:	2906      	cmp	r1, #6
    3d6c:	d9be      	bls.n	3cec <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3d6e:	2000      	movs	r0, #0
    3d70:	e789      	b.n	3c86 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3d72:	2100      	movs	r1, #0
    3d74:	e7f9      	b.n	3d6a <mbedtls_aes_setkey_enc+0x19a>
    3d76:	bf00      	nop
    3d78:	00030544 	.word	0x00030544
    3d7c:	0002f444 	.word	0x0002f444

00003d80 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
    3d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d84:	b0c7      	sub	sp, #284	; 0x11c
    3d86:	4680      	mov	r8, r0
    3d88:	460c      	mov	r4, r1
    3d8a:	4615      	mov	r5, r2
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
    3d8c:	4668      	mov	r0, sp
    3d8e:	f7ff ff10 	bl	3bb2 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3d92:	f108 0308 	add.w	r3, r8, #8
    3d96:	f8c8 3004 	str.w	r3, [r8, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
    3d9a:	462a      	mov	r2, r5
    3d9c:	4621      	mov	r1, r4
    3d9e:	4668      	mov	r0, sp
    3da0:	f7ff ff16 	bl	3bd0 <mbedtls_aes_setkey_enc>
    3da4:	4681      	mov	r9, r0
    3da6:	2800      	cmp	r0, #0
    3da8:	d148      	bne.n	3e3c <mbedtls_aes_setkey_dec+0xbc>
        goto exit;

    ctx->nr = cty.nr;
    3daa:	9f00      	ldr	r7, [sp, #0]
    3dac:	f8c8 7000 	str.w	r7, [r8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
    3db0:	9a01      	ldr	r2, [sp, #4]
    3db2:	013b      	lsls	r3, r7, #4
    3db4:	18d6      	adds	r6, r2, r3

    *RK++ = *SK++;
    3db6:	58d3      	ldr	r3, [r2, r3]
    3db8:	f8c8 3008 	str.w	r3, [r8, #8]
    *RK++ = *SK++;
    3dbc:	6873      	ldr	r3, [r6, #4]
    3dbe:	f8c8 300c 	str.w	r3, [r8, #12]
    *RK++ = *SK++;
    3dc2:	68b3      	ldr	r3, [r6, #8]
    3dc4:	f8c8 3010 	str.w	r3, [r8, #16]
    *RK++ = *SK++;
    3dc8:	f108 0518 	add.w	r5, r8, #24
    3dcc:	68f3      	ldr	r3, [r6, #12]
    3dce:	f8c8 3014 	str.w	r3, [r8, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    3dd2:	3f01      	subs	r7, #1
    3dd4:	3e10      	subs	r6, #16
    3dd6:	e025      	b.n	3e24 <mbedtls_aes_setkey_dec+0xa4>
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
    3dd8:	f856 2b04 	ldr.w	r2, [r6], #4
    3ddc:	b2d3      	uxtb	r3, r2
    3dde:	491b      	ldr	r1, [pc, #108]	; (3e4c <mbedtls_aes_setkey_dec+0xcc>)
    3de0:	f811 e003 	ldrb.w	lr, [r1, r3]
    3de4:	4b1a      	ldr	r3, [pc, #104]	; (3e50 <mbedtls_aes_setkey_dec+0xd0>)
    3de6:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
    3dea:	f3c2 2e07 	ubfx	lr, r2, #8, #8
    3dee:	f811 c00e 	ldrb.w	ip, [r1, lr]
    3df2:	4c18      	ldr	r4, [pc, #96]	; (3e54 <mbedtls_aes_setkey_dec+0xd4>)
    3df4:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
    3df8:	4063      	eors	r3, r4
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
    3dfa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
    3dfe:	f811 c00e 	ldrb.w	ip, [r1, lr]
    3e02:	4c15      	ldr	r4, [pc, #84]	; (3e58 <mbedtls_aes_setkey_dec+0xd8>)
    3e04:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
    3e08:	4063      	eors	r3, r4
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
    3e0a:	0e12      	lsrs	r2, r2, #24
    3e0c:	5c89      	ldrb	r1, [r1, r2]
    3e0e:	4a13      	ldr	r2, [pc, #76]	; (3e5c <mbedtls_aes_setkey_dec+0xdc>)
    3e10:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
    3e14:	4053      	eors	r3, r2
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
    3e16:	602b      	str	r3, [r5, #0]
        for( j = 0; j < 4; j++, SK++ )
    3e18:	3001      	adds	r0, #1
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
    3e1a:	3504      	adds	r5, #4
        for( j = 0; j < 4; j++, SK++ )
    3e1c:	2803      	cmp	r0, #3
    3e1e:	dddb      	ble.n	3dd8 <mbedtls_aes_setkey_dec+0x58>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    3e20:	3f01      	subs	r7, #1
    3e22:	3e20      	subs	r6, #32
    3e24:	2f00      	cmp	r7, #0
    3e26:	dd01      	ble.n	3e2c <mbedtls_aes_setkey_dec+0xac>
    3e28:	4648      	mov	r0, r9
    3e2a:	e7f7      	b.n	3e1c <mbedtls_aes_setkey_dec+0x9c>
        }
    }

    *RK++ = *SK++;
    3e2c:	6833      	ldr	r3, [r6, #0]
    3e2e:	602b      	str	r3, [r5, #0]
    *RK++ = *SK++;
    3e30:	6873      	ldr	r3, [r6, #4]
    3e32:	606b      	str	r3, [r5, #4]
    *RK++ = *SK++;
    3e34:	68b3      	ldr	r3, [r6, #8]
    3e36:	60ab      	str	r3, [r5, #8]
    *RK++ = *SK++;
    3e38:	68f3      	ldr	r3, [r6, #12]
    3e3a:	60eb      	str	r3, [r5, #12]

exit:
    mbedtls_aes_free( &cty );
    3e3c:	4668      	mov	r0, sp
    3e3e:	f7ff febf 	bl	3bc0 <mbedtls_aes_free>

    return( ret );
}
    3e42:	4648      	mov	r0, r9
    3e44:	b047      	add	sp, #284	; 0x11c
    3e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e4a:	bf00      	nop
    3e4c:	0002f444 	.word	0x0002f444
    3e50:	0003066c 	.word	0x0003066c
    3e54:	00030a6c 	.word	0x00030a6c
    3e58:	00030e6c 	.word	0x00030e6c
    3e5c:	0003126c 	.word	0x0003126c

00003e60 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e64:	b083      	sub	sp, #12
    3e66:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3e68:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3e6a:	f891 9000 	ldrb.w	r9, [r1]
    3e6e:	784b      	ldrb	r3, [r1, #1]
    3e70:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3e74:	788b      	ldrb	r3, [r1, #2]
    3e76:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3e7a:	78cb      	ldrb	r3, [r1, #3]
    3e7c:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3e80:	6813      	ldr	r3, [r2, #0]
    3e82:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3e86:	f891 a004 	ldrb.w	sl, [r1, #4]
    3e8a:	794b      	ldrb	r3, [r1, #5]
    3e8c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3e90:	798b      	ldrb	r3, [r1, #6]
    3e92:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3e96:	79cb      	ldrb	r3, [r1, #7]
    3e98:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3e9c:	6853      	ldr	r3, [r2, #4]
    3e9e:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3ea2:	7a0c      	ldrb	r4, [r1, #8]
    3ea4:	7a4b      	ldrb	r3, [r1, #9]
    3ea6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3eaa:	7a8b      	ldrb	r3, [r1, #10]
    3eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3eb0:	7acb      	ldrb	r3, [r1, #11]
    3eb2:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3eb6:	6893      	ldr	r3, [r2, #8]
    3eb8:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3eba:	7b0b      	ldrb	r3, [r1, #12]
    3ebc:	7b4d      	ldrb	r5, [r1, #13]
    3ebe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3ec2:	7b8d      	ldrb	r5, [r1, #14]
    3ec4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3ec8:	7bc9      	ldrb	r1, [r1, #15]
    3eca:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3ece:	f102 0610 	add.w	r6, r2, #16
    3ed2:	68d3      	ldr	r3, [r2, #12]
    3ed4:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3ed6:	6803      	ldr	r3, [r0, #0]
    3ed8:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3edc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3ee0:	460b      	mov	r3, r1
    3ee2:	e0bd      	b.n	4060 <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3ee4:	6832      	ldr	r2, [r6, #0]
    3ee6:	fa5f f089 	uxtb.w	r0, r9
    3eea:	49cb      	ldr	r1, [pc, #812]	; (4218 <mbedtls_internal_aes_encrypt+0x3b8>)
    3eec:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ef0:	ea82 0c00 	eor.w	ip, r2, r0
    3ef4:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3ef8:	4dc8      	ldr	r5, [pc, #800]	; (421c <mbedtls_internal_aes_encrypt+0x3bc>)
    3efa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3efe:	ea8c 0c02 	eor.w	ip, ip, r2
    3f02:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3f06:	48c6      	ldr	r0, [pc, #792]	; (4220 <mbedtls_internal_aes_encrypt+0x3c0>)
    3f08:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3f0c:	ea8c 0c02 	eor.w	ip, ip, r2
    3f10:	0e1f      	lsrs	r7, r3, #24
    3f12:	4ac4      	ldr	r2, [pc, #784]	; (4224 <mbedtls_internal_aes_encrypt+0x3c4>)
    3f14:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3f18:	ea8c 0c07 	eor.w	ip, ip, r7
    3f1c:	fa5f fe8a 	uxtb.w	lr, sl
    3f20:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3f24:	6877      	ldr	r7, [r6, #4]
    3f26:	ea87 080e 	eor.w	r8, r7, lr
    3f2a:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3f2e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3f32:	ea88 0807 	eor.w	r8, r8, r7
    3f36:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3f3a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3f3e:	ea88 0807 	eor.w	r8, r8, r7
    3f42:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3f46:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3f4a:	ea88 0807 	eor.w	r8, r8, r7
    3f4e:	fa5f fe84 	uxtb.w	lr, r4
    3f52:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3f56:	68b7      	ldr	r7, [r6, #8]
    3f58:	ea87 0e0e 	eor.w	lr, r7, lr
    3f5c:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3f60:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3f64:	ea8e 0e07 	eor.w	lr, lr, r7
    3f68:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3f6c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3f70:	ea8e 0e07 	eor.w	lr, lr, r7
    3f74:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3f78:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3f7c:	ea8e 0e07 	eor.w	lr, lr, r7
    3f80:	68f7      	ldr	r7, [r6, #12]
    3f82:	b2db      	uxtb	r3, r3
    3f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3f88:	405f      	eors	r7, r3
    3f8a:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3f8e:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3f92:	405f      	eors	r7, r3
    3f94:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3f98:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3f9c:	405f      	eors	r7, r3
    3f9e:	0e24      	lsrs	r4, r4, #24
    3fa0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3fa4:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3fa6:	6933      	ldr	r3, [r6, #16]
    3fa8:	fa5f f48c 	uxtb.w	r4, ip
    3fac:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3fb0:	ea83 0904 	eor.w	r9, r3, r4
    3fb4:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3fb8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fbc:	ea89 0903 	eor.w	r9, r9, r3
    3fc0:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3fc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3fc8:	ea89 0903 	eor.w	r9, r9, r3
    3fcc:	0e3b      	lsrs	r3, r7, #24
    3fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3fd2:	ea89 0903 	eor.w	r9, r9, r3
    3fd6:	6973      	ldr	r3, [r6, #20]
    3fd8:	fa5f f488 	uxtb.w	r4, r8
    3fdc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3fe0:	ea83 0a04 	eor.w	sl, r3, r4
    3fe4:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3fe8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fec:	ea8a 0a03 	eor.w	sl, sl, r3
    3ff0:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3ff4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3ff8:	ea8a 0a03 	eor.w	sl, sl, r3
    3ffc:	ea4f 631c 	mov.w	r3, ip, lsr #24
    4000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4004:	ea8a 0a03 	eor.w	sl, sl, r3
    4008:	69b3      	ldr	r3, [r6, #24]
    400a:	fa5f f48e 	uxtb.w	r4, lr
    400e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4012:	405c      	eors	r4, r3
    4014:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4018:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    401c:	405c      	eors	r4, r3
    401e:	f3cc 4307 	ubfx	r3, ip, #16, #8
    4022:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4026:	405c      	eors	r4, r3
    4028:	ea4f 6318 	mov.w	r3, r8, lsr #24
    402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4030:	405c      	eors	r4, r3
    4032:	69f3      	ldr	r3, [r6, #28]
    4034:	b2ff      	uxtb	r7, r7
    4036:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    403a:	404b      	eors	r3, r1
    403c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    4040:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    4044:	404b      	eors	r3, r1
    4046:	f3c8 4807 	ubfx	r8, r8, #16, #8
    404a:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    404e:	404b      	eors	r3, r1
    4050:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    4054:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    4058:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    405a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    405e:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4060:	f1bb 0f00 	cmp.w	fp, #0
    4064:	f73f af3e 	bgt.w	3ee4 <mbedtls_internal_aes_encrypt+0x84>
    4068:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    406a:	6833      	ldr	r3, [r6, #0]
    406c:	fa5f f289 	uxtb.w	r2, r9
    4070:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4218 <mbedtls_internal_aes_encrypt+0x3b8>
    4074:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4078:	405a      	eors	r2, r3
    407a:	f3ca 2307 	ubfx	r3, sl, #8, #8
    407e:	4f67      	ldr	r7, [pc, #412]	; (421c <mbedtls_internal_aes_encrypt+0x3bc>)
    4080:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    4084:	405a      	eors	r2, r3
    4086:	f3c4 4307 	ubfx	r3, r4, #16, #8
    408a:	4d65      	ldr	r5, [pc, #404]	; (4220 <mbedtls_internal_aes_encrypt+0x3c0>)
    408c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4090:	405a      	eors	r2, r3
    4092:	0e0b      	lsrs	r3, r1, #24
    4094:	4863      	ldr	r0, [pc, #396]	; (4224 <mbedtls_internal_aes_encrypt+0x3c4>)
    4096:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    409a:	405a      	eors	r2, r3
    409c:	fa5f fc8a 	uxtb.w	ip, sl
    40a0:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    40a4:	6873      	ldr	r3, [r6, #4]
    40a6:	ea83 0c0c 	eor.w	ip, r3, ip
    40aa:	f3c4 2307 	ubfx	r3, r4, #8, #8
    40ae:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    40b2:	ea8c 0c03 	eor.w	ip, ip, r3
    40b6:	f3c1 4307 	ubfx	r3, r1, #16, #8
    40ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    40be:	ea8c 0c03 	eor.w	ip, ip, r3
    40c2:	ea4f 6319 	mov.w	r3, r9, lsr #24
    40c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    40ca:	ea8c 0c03 	eor.w	ip, ip, r3
    40ce:	fa5f f884 	uxtb.w	r8, r4
    40d2:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    40d6:	68b3      	ldr	r3, [r6, #8]
    40d8:	ea83 0808 	eor.w	r8, r3, r8
    40dc:	f3c1 2307 	ubfx	r3, r1, #8, #8
    40e0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    40e4:	ea88 0803 	eor.w	r8, r8, r3
    40e8:	f3c9 4307 	ubfx	r3, r9, #16, #8
    40ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    40f0:	ea88 0803 	eor.w	r8, r8, r3
    40f4:	ea4f 631a 	mov.w	r3, sl, lsr #24
    40f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    40fc:	ea88 0803 	eor.w	r8, r8, r3
    4100:	68f3      	ldr	r3, [r6, #12]
    4102:	b2c9      	uxtb	r1, r1
    4104:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    4108:	404b      	eors	r3, r1
    410a:	f3c9 2907 	ubfx	r9, r9, #8, #8
    410e:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    4112:	405f      	eors	r7, r3
    4114:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    4118:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    411c:	405f      	eors	r7, r3
    411e:	0e24      	lsrs	r4, r4, #24
    4120:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    4124:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    4126:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    4128:	b2d0      	uxtb	r0, r2
    412a:	4b3f      	ldr	r3, [pc, #252]	; (4228 <mbedtls_internal_aes_encrypt+0x3c8>)
    412c:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    412e:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4130:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4134:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    4136:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    413a:	f3c8 4107 	ubfx	r1, r8, #16, #8
    413e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4140:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4144:	0e39      	lsrs	r1, r7, #24
    4146:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    4148:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    414c:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    414e:	fa5f f08c 	uxtb.w	r0, ip
    4152:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    4154:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4156:	f3c8 2107 	ubfx	r1, r8, #8, #8
    415a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    415c:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    4160:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4164:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4166:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    416a:	0e11      	lsrs	r1, r2, #24
    416c:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    416e:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4172:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4174:	fa5f f588 	uxtb.w	r5, r8
    4178:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    417a:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    417c:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4180:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4182:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4186:	f3c2 4107 	ubfx	r1, r2, #16, #8
    418a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    418c:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4190:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4194:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    4196:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    419a:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    419c:	b2ff      	uxtb	r7, r7
    419e:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    41a0:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    41a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    41a6:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    41a8:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    41ac:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    41b0:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    41b4:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    41b8:	ea4f 6818 	mov.w	r8, r8, lsr #24
    41bc:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    41c0:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    41c4:	9e01      	ldr	r6, [sp, #4]
    41c6:	7034      	strb	r4, [r6, #0]
    41c8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    41cc:	7072      	strb	r2, [r6, #1]
    41ce:	f3c4 4207 	ubfx	r2, r4, #16, #8
    41d2:	70b2      	strb	r2, [r6, #2]
    41d4:	0e24      	lsrs	r4, r4, #24
    41d6:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    41d8:	7130      	strb	r0, [r6, #4]
    41da:	f3c0 2207 	ubfx	r2, r0, #8, #8
    41de:	7172      	strb	r2, [r6, #5]
    41e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
    41e4:	71b2      	strb	r2, [r6, #6]
    41e6:	0e00      	lsrs	r0, r0, #24
    41e8:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    41ea:	7235      	strb	r5, [r6, #8]
    41ec:	f3c5 2207 	ubfx	r2, r5, #8, #8
    41f0:	7272      	strb	r2, [r6, #9]
    41f2:	f3c5 4207 	ubfx	r2, r5, #16, #8
    41f6:	72b2      	strb	r2, [r6, #10]
    41f8:	0e2d      	lsrs	r5, r5, #24
    41fa:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    41fc:	7333      	strb	r3, [r6, #12]
    41fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4202:	7372      	strb	r2, [r6, #13]
    4204:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4208:	73b2      	strb	r2, [r6, #14]
    420a:	0e1b      	lsrs	r3, r3, #24
    420c:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    420e:	2000      	movs	r0, #0
    4210:	b003      	add	sp, #12
    4212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4216:	bf00      	nop
    4218:	0002f544 	.word	0x0002f544
    421c:	0002f944 	.word	0x0002f944
    4220:	0002fd44 	.word	0x0002fd44
    4224:	00030144 	.word	0x00030144
    4228:	0002f444 	.word	0x0002f444

0000422c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4230:	b083      	sub	sp, #12
    4232:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    4234:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    4236:	f891 a000 	ldrb.w	sl, [r1]
    423a:	784b      	ldrb	r3, [r1, #1]
    423c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    4240:	788b      	ldrb	r3, [r1, #2]
    4242:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    4246:	78cb      	ldrb	r3, [r1, #3]
    4248:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    424c:	6813      	ldr	r3, [r2, #0]
    424e:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    4252:	f891 9004 	ldrb.w	r9, [r1, #4]
    4256:	794b      	ldrb	r3, [r1, #5]
    4258:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    425c:	798b      	ldrb	r3, [r1, #6]
    425e:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    4262:	79cb      	ldrb	r3, [r1, #7]
    4264:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    4268:	6853      	ldr	r3, [r2, #4]
    426a:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    426e:	7a0c      	ldrb	r4, [r1, #8]
    4270:	7a4b      	ldrb	r3, [r1, #9]
    4272:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    4276:	7a8b      	ldrb	r3, [r1, #10]
    4278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    427c:	7acb      	ldrb	r3, [r1, #11]
    427e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    4282:	6893      	ldr	r3, [r2, #8]
    4284:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    4286:	7b0b      	ldrb	r3, [r1, #12]
    4288:	7b4d      	ldrb	r5, [r1, #13]
    428a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    428e:	7b8d      	ldrb	r5, [r1, #14]
    4290:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    4294:	7bc9      	ldrb	r1, [r1, #15]
    4296:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    429a:	f102 0610 	add.w	r6, r2, #16
    429e:	68d3      	ldr	r3, [r2, #12]
    42a0:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    42a2:	6803      	ldr	r3, [r0, #0]
    42a4:	ea4f 0b63 	mov.w	fp, r3, asr #1
    42a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    42ac:	460b      	mov	r3, r1
    42ae:	e0bd      	b.n	442c <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    42b0:	6832      	ldr	r2, [r6, #0]
    42b2:	fa5f f08a 	uxtb.w	r0, sl
    42b6:	49cb      	ldr	r1, [pc, #812]	; (45e4 <mbedtls_internal_aes_decrypt+0x3b8>)
    42b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    42bc:	ea82 0800 	eor.w	r8, r2, r0
    42c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    42c4:	4dc8      	ldr	r5, [pc, #800]	; (45e8 <mbedtls_internal_aes_decrypt+0x3bc>)
    42c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    42ca:	ea88 0802 	eor.w	r8, r8, r2
    42ce:	f3c4 4207 	ubfx	r2, r4, #16, #8
    42d2:	48c6      	ldr	r0, [pc, #792]	; (45ec <mbedtls_internal_aes_decrypt+0x3c0>)
    42d4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42d8:	ea88 0802 	eor.w	r8, r8, r2
    42dc:	ea4f 6719 	mov.w	r7, r9, lsr #24
    42e0:	4ac3      	ldr	r2, [pc, #780]	; (45f0 <mbedtls_internal_aes_decrypt+0x3c4>)
    42e2:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    42e6:	ea88 0807 	eor.w	r8, r8, r7
    42ea:	fa5f fe89 	uxtb.w	lr, r9
    42ee:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    42f2:	6877      	ldr	r7, [r6, #4]
    42f4:	ea87 0c0e 	eor.w	ip, r7, lr
    42f8:	f3ca 2707 	ubfx	r7, sl, #8, #8
    42fc:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4300:	ea8c 0c07 	eor.w	ip, ip, r7
    4304:	f3c3 4707 	ubfx	r7, r3, #16, #8
    4308:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    430c:	ea8c 0c07 	eor.w	ip, ip, r7
    4310:	0e27      	lsrs	r7, r4, #24
    4312:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4316:	ea8c 0c07 	eor.w	ip, ip, r7
    431a:	fa5f fe84 	uxtb.w	lr, r4
    431e:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    4322:	68b7      	ldr	r7, [r6, #8]
    4324:	ea87 0e0e 	eor.w	lr, r7, lr
    4328:	f3c9 2707 	ubfx	r7, r9, #8, #8
    432c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4330:	ea8e 0e07 	eor.w	lr, lr, r7
    4334:	f3ca 4707 	ubfx	r7, sl, #16, #8
    4338:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    433c:	ea8e 0e07 	eor.w	lr, lr, r7
    4340:	0e1f      	lsrs	r7, r3, #24
    4342:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4346:	ea8e 0e07 	eor.w	lr, lr, r7
    434a:	68f7      	ldr	r7, [r6, #12]
    434c:	b2db      	uxtb	r3, r3
    434e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4352:	405f      	eors	r7, r3
    4354:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4358:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    435c:	405f      	eors	r7, r3
    435e:	f3c9 4907 	ubfx	r9, r9, #16, #8
    4362:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    4366:	405f      	eors	r7, r3
    4368:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    436c:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    4370:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    4372:	6933      	ldr	r3, [r6, #16]
    4374:	fa5f f488 	uxtb.w	r4, r8
    4378:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    437c:	ea83 0a04 	eor.w	sl, r3, r4
    4380:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4384:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4388:	ea8a 0a03 	eor.w	sl, sl, r3
    438c:	f3ce 4307 	ubfx	r3, lr, #16, #8
    4390:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4394:	ea8a 0a03 	eor.w	sl, sl, r3
    4398:	ea4f 631c 	mov.w	r3, ip, lsr #24
    439c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    43a0:	ea8a 0a03 	eor.w	sl, sl, r3
    43a4:	6973      	ldr	r3, [r6, #20]
    43a6:	fa5f f48c 	uxtb.w	r4, ip
    43aa:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    43ae:	ea83 0904 	eor.w	r9, r3, r4
    43b2:	f3c8 2307 	ubfx	r3, r8, #8, #8
    43b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    43ba:	ea89 0903 	eor.w	r9, r9, r3
    43be:	f3c7 4307 	ubfx	r3, r7, #16, #8
    43c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    43c6:	ea89 0903 	eor.w	r9, r9, r3
    43ca:	ea4f 631e 	mov.w	r3, lr, lsr #24
    43ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    43d2:	ea89 0903 	eor.w	r9, r9, r3
    43d6:	69b3      	ldr	r3, [r6, #24]
    43d8:	fa5f f48e 	uxtb.w	r4, lr
    43dc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    43e0:	405c      	eors	r4, r3
    43e2:	f3cc 2307 	ubfx	r3, ip, #8, #8
    43e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    43ea:	405c      	eors	r4, r3
    43ec:	f3c8 4307 	ubfx	r3, r8, #16, #8
    43f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    43f4:	405c      	eors	r4, r3
    43f6:	0e3b      	lsrs	r3, r7, #24
    43f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    43fc:	405c      	eors	r4, r3
    43fe:	69f3      	ldr	r3, [r6, #28]
    4400:	b2ff      	uxtb	r7, r7
    4402:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    4406:	404b      	eors	r3, r1
    4408:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    440c:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    4410:	404b      	eors	r3, r1
    4412:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4416:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    441a:	404b      	eors	r3, r1
    441c:	ea4f 6818 	mov.w	r8, r8, lsr #24
    4420:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4424:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4426:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    442a:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    442c:	f1bb 0f00 	cmp.w	fp, #0
    4430:	f73f af3e 	bgt.w	42b0 <mbedtls_internal_aes_decrypt+0x84>
    4434:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4436:	6833      	ldr	r3, [r6, #0]
    4438:	fa5f f28a 	uxtb.w	r2, sl
    443c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 45e4 <mbedtls_internal_aes_decrypt+0x3b8>
    4440:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4444:	4053      	eors	r3, r2
    4446:	f3c1 2207 	ubfx	r2, r1, #8, #8
    444a:	4f67      	ldr	r7, [pc, #412]	; (45e8 <mbedtls_internal_aes_decrypt+0x3bc>)
    444c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4450:	4053      	eors	r3, r2
    4452:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4456:	4d65      	ldr	r5, [pc, #404]	; (45ec <mbedtls_internal_aes_decrypt+0x3c0>)
    4458:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    445c:	4053      	eors	r3, r2
    445e:	ea4f 6219 	mov.w	r2, r9, lsr #24
    4462:	4863      	ldr	r0, [pc, #396]	; (45f0 <mbedtls_internal_aes_decrypt+0x3c4>)
    4464:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4468:	4053      	eors	r3, r2
    446a:	fa5f fc89 	uxtb.w	ip, r9
    446e:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    4472:	6872      	ldr	r2, [r6, #4]
    4474:	ea82 0c0c 	eor.w	ip, r2, ip
    4478:	f3ca 2207 	ubfx	r2, sl, #8, #8
    447c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4480:	ea8c 0c02 	eor.w	ip, ip, r2
    4484:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4488:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    448c:	ea8c 0c02 	eor.w	ip, ip, r2
    4490:	0e22      	lsrs	r2, r4, #24
    4492:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4496:	ea8c 0c02 	eor.w	ip, ip, r2
    449a:	fa5f f884 	uxtb.w	r8, r4
    449e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    44a2:	68b2      	ldr	r2, [r6, #8]
    44a4:	ea82 0808 	eor.w	r8, r2, r8
    44a8:	f3c9 2207 	ubfx	r2, r9, #8, #8
    44ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    44b0:	ea88 0802 	eor.w	r8, r8, r2
    44b4:	f3ca 4207 	ubfx	r2, sl, #16, #8
    44b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    44bc:	ea88 0802 	eor.w	r8, r8, r2
    44c0:	0e0a      	lsrs	r2, r1, #24
    44c2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    44c6:	ea88 0802 	eor.w	r8, r8, r2
    44ca:	68f2      	ldr	r2, [r6, #12]
    44cc:	b2c9      	uxtb	r1, r1
    44ce:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    44d2:	404a      	eors	r2, r1
    44d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
    44d8:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    44dc:	4057      	eors	r7, r2
    44de:	f3c9 4907 	ubfx	r9, r9, #16, #8
    44e2:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    44e6:	4057      	eors	r7, r2
    44e8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    44ec:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    44f0:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    44f2:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    44f4:	b2d8      	uxtb	r0, r3
    44f6:	4a3f      	ldr	r2, [pc, #252]	; (45f4 <mbedtls_internal_aes_decrypt+0x3c8>)
    44f8:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    44fa:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    44fc:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4500:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    4502:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    4506:	f3c8 4107 	ubfx	r1, r8, #16, #8
    450a:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    450c:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4510:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4514:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    4516:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    451a:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    451c:	fa5f f08c 	uxtb.w	r0, ip
    4520:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    4522:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4524:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4528:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    452a:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    452e:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4532:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4534:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    4538:	ea4f 6118 	mov.w	r1, r8, lsr #24
    453c:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    453e:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4542:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4544:	fa5f f588 	uxtb.w	r5, r8
    4548:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    454a:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    454c:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4550:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4552:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4556:	f3c3 4107 	ubfx	r1, r3, #16, #8
    455a:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    455c:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4560:	0e39      	lsrs	r1, r7, #24
    4562:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4564:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4568:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    456a:	b2ff      	uxtb	r7, r7
    456c:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    456e:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4570:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4574:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4578:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    457c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4580:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4584:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4588:	0e1b      	lsrs	r3, r3, #24
    458a:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    458c:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    4590:	9e01      	ldr	r6, [sp, #4]
    4592:	7034      	strb	r4, [r6, #0]
    4594:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4598:	7072      	strb	r2, [r6, #1]
    459a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    459e:	70b2      	strb	r2, [r6, #2]
    45a0:	0e24      	lsrs	r4, r4, #24
    45a2:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    45a4:	7130      	strb	r0, [r6, #4]
    45a6:	f3c0 2207 	ubfx	r2, r0, #8, #8
    45aa:	7172      	strb	r2, [r6, #5]
    45ac:	f3c0 4207 	ubfx	r2, r0, #16, #8
    45b0:	71b2      	strb	r2, [r6, #6]
    45b2:	0e00      	lsrs	r0, r0, #24
    45b4:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    45b6:	7235      	strb	r5, [r6, #8]
    45b8:	f3c5 2207 	ubfx	r2, r5, #8, #8
    45bc:	7272      	strb	r2, [r6, #9]
    45be:	f3c5 4207 	ubfx	r2, r5, #16, #8
    45c2:	72b2      	strb	r2, [r6, #10]
    45c4:	0e2d      	lsrs	r5, r5, #24
    45c6:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    45c8:	7333      	strb	r3, [r6, #12]
    45ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
    45ce:	7372      	strb	r2, [r6, #13]
    45d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
    45d4:	73b2      	strb	r2, [r6, #14]
    45d6:	0e1b      	lsrs	r3, r3, #24
    45d8:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    45da:	2000      	movs	r0, #0
    45dc:	b003      	add	sp, #12
    45de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45e2:	bf00      	nop
    45e4:	0003066c 	.word	0x0003066c
    45e8:	00030a6c 	.word	0x00030a6c
    45ec:	00030e6c 	.word	0x00030e6c
    45f0:	0003126c 	.word	0x0003126c
    45f4:	0003056c 	.word	0x0003056c

000045f8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    45f8:	b510      	push	{r4, lr}
    45fa:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    45fc:	2901      	cmp	r1, #1
    45fe:	d004      	beq.n	460a <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    4600:	461a      	mov	r2, r3
    4602:	4621      	mov	r1, r4
    4604:	f7ff fe12 	bl	422c <mbedtls_internal_aes_decrypt>
}
    4608:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    460a:	461a      	mov	r2, r3
    460c:	4621      	mov	r1, r4
    460e:	f7ff fc27 	bl	3e60 <mbedtls_internal_aes_encrypt>
    4612:	bd10      	pop	{r4, pc}

00004614 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
    4614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4618:	b095      	sub	sp, #84	; 0x54
    461a:	9004      	str	r0, [sp, #16]
    461c:	9303      	str	r3, [sp, #12]
    461e:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
    4622:	9d21      	ldr	r5, [sp, #132]	; 0x84
    4624:	9e22      	ldr	r6, [sp, #136]	; 0x88
    /*
     * Check length requirements: SP800-38C A.1
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     */
    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )
    4626:	9b24      	ldr	r3, [sp, #144]	; 0x90
    4628:	3b04      	subs	r3, #4
    462a:	2b0c      	cmp	r3, #12
    462c:	f200 8191 	bhi.w	4952 <ccm_auth_crypt+0x33e>
    4630:	4689      	mov	r9, r1
    4632:	4617      	mov	r7, r2
    4634:	9b24      	ldr	r3, [sp, #144]	; 0x90
    4636:	f013 0f01 	tst.w	r3, #1
    463a:	f040 818e 	bne.w	495a <ccm_auth_crypt+0x346>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
    463e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4640:	3b07      	subs	r3, #7
    4642:	2b06      	cmp	r3, #6
    4644:	f200 818d 	bhi.w	4962 <ccm_auth_crypt+0x34e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
    4648:	f5ba 4f7f 	cmp.w	sl, #65280	; 0xff00
    464c:	f200 818d 	bhi.w	496a <ccm_auth_crypt+0x356>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
    4650:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
    4654:	f1c2 040f 	rsb	r4, r2, #15
    4658:	b2e4      	uxtb	r4, r4
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    465a:	f1ba 0f00 	cmp.w	sl, #0
    465e:	d017      	beq.n	4690 <ccm_auth_crypt+0x7c>
    4660:	2140      	movs	r1, #64	; 0x40
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    4662:	9b24      	ldr	r3, [sp, #144]	; 0x90
    4664:	3b02      	subs	r3, #2
    4666:	085b      	lsrs	r3, r3, #1
    4668:	00db      	lsls	r3, r3, #3
    466a:	b2db      	uxtb	r3, r3
    466c:	4319      	orrs	r1, r3
    b[0] |= q - 1;
    466e:	f1c2 020e 	rsb	r2, r2, #14
    4672:	b2d3      	uxtb	r3, r2
    4674:	9305      	str	r3, [sp, #20]
    4676:	b25b      	sxtb	r3, r3
    4678:	430b      	orrs	r3, r1
    467a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c

    memcpy( b + 1, iv, iv_len );
    467e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4680:	9903      	ldr	r1, [sp, #12]
    4682:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
    4686:	f7fb fe1b 	bl	2c0 <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
    468a:	4639      	mov	r1, r7
    468c:	2300      	movs	r3, #0
    468e:	e00a      	b.n	46a6 <ccm_auth_crypt+0x92>
    b[0] |= ( add_len > 0 ) << 6;
    4690:	2100      	movs	r1, #0
    4692:	e7e6      	b.n	4662 <ccm_auth_crypt+0x4e>
        b[15-i] = (unsigned char)( len_left & 0xFF );
    4694:	f1c3 020f 	rsb	r2, r3, #15
    4698:	a814      	add	r0, sp, #80	; 0x50
    469a:	4402      	add	r2, r0
    469c:	f802 1c14 	strb.w	r1, [r2, #-20]
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
    46a0:	3301      	adds	r3, #1
    46a2:	b2db      	uxtb	r3, r3
    46a4:	0a09      	lsrs	r1, r1, #8
    46a6:	42a3      	cmp	r3, r4
    46a8:	d3f4      	bcc.n	4694 <ccm_auth_crypt+0x80>

    if( len_left > 0 )
    46aa:	2900      	cmp	r1, #0
    46ac:	f040 8161 	bne.w	4972 <ccm_auth_crypt+0x35e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
    46b0:	2210      	movs	r2, #16
    46b2:	a80b      	add	r0, sp, #44	; 0x2c
    46b4:	f026 f9c4 	bl	2aa40 <memset>
    UPDATE_CBC_MAC;
    46b8:	2300      	movs	r3, #0
    46ba:	e00a      	b.n	46d2 <ccm_auth_crypt+0xbe>
    46bc:	aa14      	add	r2, sp, #80	; 0x50
    46be:	441a      	add	r2, r3
    46c0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
    46c4:	f812 0c24 	ldrb.w	r0, [r2, #-36]
    46c8:	4041      	eors	r1, r0
    46ca:	f802 1c24 	strb.w	r1, [r2, #-36]
    46ce:	3301      	adds	r3, #1
    46d0:	b2db      	uxtb	r3, r3
    46d2:	2b0f      	cmp	r3, #15
    46d4:	d9f2      	bls.n	46bc <ccm_auth_crypt+0xa8>
    46d6:	9804      	ldr	r0, [sp, #16]
    46d8:	9002      	str	r0, [sp, #8]
    46da:	ab13      	add	r3, sp, #76	; 0x4c
    46dc:	9300      	str	r3, [sp, #0]
    46de:	ab0b      	add	r3, sp, #44	; 0x2c
    46e0:	2210      	movs	r2, #16
    46e2:	4619      	mov	r1, r3
    46e4:	f000 fa3c 	bl	4b60 <mbedtls_cipher_update>
    46e8:	4683      	mov	fp, r0
    46ea:	2800      	cmp	r0, #0
    46ec:	f040 814a 	bne.w	4984 <ccm_auth_crypt+0x370>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
    46f0:	f1ba 0f00 	cmp.w	sl, #0
    46f4:	d066      	beq.n	47c4 <ccm_auth_crypt+0x1b0>
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
    46f6:	2210      	movs	r2, #16
    46f8:	2100      	movs	r1, #0
    46fa:	a80f      	add	r0, sp, #60	; 0x3c
    46fc:	f026 f9a0 	bl	2aa40 <memset>
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
    4700:	f3ca 2307 	ubfx	r3, sl, #8, #8
    4704:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
    4708:	f88d a03d 	strb.w	sl, [sp, #61]	; 0x3d

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
    470c:	46d0      	mov	r8, sl
    470e:	f1ba 0f0e 	cmp.w	sl, #14
    4712:	bf28      	it	cs
    4714:	f04f 080e 	movcs.w	r8, #14
        memcpy( b + 2, src, use_len );
    4718:	4642      	mov	r2, r8
    471a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    471c:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
    4720:	f7fb fdce 	bl	2c0 <memcpy>
        len_left -= use_len;
    4724:	ebaa 0a08 	sub.w	sl, sl, r8
        src += use_len;
    4728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    472a:	4498      	add	r8, r3

        UPDATE_CBC_MAC;
    472c:	2300      	movs	r3, #0
    472e:	e00a      	b.n	4746 <ccm_auth_crypt+0x132>
    4730:	aa14      	add	r2, sp, #80	; 0x50
    4732:	441a      	add	r2, r3
    4734:	f812 1c14 	ldrb.w	r1, [r2, #-20]
    4738:	f812 0c24 	ldrb.w	r0, [r2, #-36]
    473c:	4041      	eors	r1, r0
    473e:	f802 1c24 	strb.w	r1, [r2, #-36]
    4742:	3301      	adds	r3, #1
    4744:	b2db      	uxtb	r3, r3
    4746:	2b0f      	cmp	r3, #15
    4748:	d9f2      	bls.n	4730 <ccm_auth_crypt+0x11c>
    474a:	ab13      	add	r3, sp, #76	; 0x4c
    474c:	9300      	str	r3, [sp, #0]
    474e:	ab0b      	add	r3, sp, #44	; 0x2c
    4750:	2210      	movs	r2, #16
    4752:	4619      	mov	r1, r3
    4754:	9804      	ldr	r0, [sp, #16]
    4756:	f000 fa03 	bl	4b60 <mbedtls_cipher_update>
    475a:	4683      	mov	fp, r0
    475c:	2800      	cmp	r0, #0
    475e:	f040 8111 	bne.w	4984 <ccm_auth_crypt+0x370>
    4762:	46a3      	mov	fp, r4
    4764:	4654      	mov	r4, sl
    4766:	e01a      	b.n	479e <ccm_auth_crypt+0x18a>
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
    4768:	aa14      	add	r2, sp, #80	; 0x50
    476a:	441a      	add	r2, r3
    476c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
    4770:	f812 0c24 	ldrb.w	r0, [r2, #-36]
    4774:	4041      	eors	r1, r0
    4776:	f802 1c24 	strb.w	r1, [r2, #-36]
    477a:	3301      	adds	r3, #1
    477c:	b2db      	uxtb	r3, r3
    477e:	2b0f      	cmp	r3, #15
    4780:	d9f2      	bls.n	4768 <ccm_auth_crypt+0x154>
    4782:	ab13      	add	r3, sp, #76	; 0x4c
    4784:	9300      	str	r3, [sp, #0]
    4786:	ab0b      	add	r3, sp, #44	; 0x2c
    4788:	2210      	movs	r2, #16
    478a:	4619      	mov	r1, r3
    478c:	9802      	ldr	r0, [sp, #8]
    478e:	f000 f9e7 	bl	4b60 <mbedtls_cipher_update>
    4792:	2800      	cmp	r0, #0
    4794:	f040 80f1 	bne.w	497a <ccm_auth_crypt+0x366>

            len_left -= use_len;
    4798:	eba4 040a 	sub.w	r4, r4, sl
            src += use_len;
    479c:	44d0      	add	r8, sl
        while( len_left > 0 )
    479e:	b184      	cbz	r4, 47c2 <ccm_auth_crypt+0x1ae>
            use_len = len_left > 16 ? 16 : len_left;
    47a0:	46a2      	mov	sl, r4
    47a2:	2c10      	cmp	r4, #16
    47a4:	bf28      	it	cs
    47a6:	f04f 0a10 	movcs.w	sl, #16
            memset( b, 0, 16 );
    47aa:	2210      	movs	r2, #16
    47ac:	2100      	movs	r1, #0
    47ae:	a80f      	add	r0, sp, #60	; 0x3c
    47b0:	f026 f946 	bl	2aa40 <memset>
            memcpy( b, src, use_len );
    47b4:	4652      	mov	r2, sl
    47b6:	4641      	mov	r1, r8
    47b8:	a80f      	add	r0, sp, #60	; 0x3c
    47ba:	f7fb fd81 	bl	2c0 <memcpy>
            UPDATE_CBC_MAC;
    47be:	2300      	movs	r3, #0
    47c0:	e7dd      	b.n	477e <ccm_auth_crypt+0x16a>
    47c2:	465c      	mov	r4, fp
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
    47c4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    47c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    47cc:	f808 3d34 	strb.w	r3, [r8, #-52]!
    memcpy( ctr + 1, iv, iv_len );
    47d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    47d2:	9903      	ldr	r1, [sp, #12]
    47d4:	f10d 001d 	add.w	r0, sp, #29
    47d8:	f7fb fd72 	bl	2c0 <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
    47dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    47de:	1c58      	adds	r0, r3, #1
    47e0:	4622      	mov	r2, r4
    47e2:	2100      	movs	r1, #0
    47e4:	4440      	add	r0, r8
    47e6:	f026 f92b 	bl	2aa40 <memset>
    ctr[15] = 1;
    47ea:	2301      	movs	r3, #1
    47ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
    47f0:	2f00      	cmp	r7, #0
    47f2:	f000 8082 	beq.w	48fa <ccm_auth_crypt+0x2e6>
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
    47f6:	46b8      	mov	r8, r7
    47f8:	2f10      	cmp	r7, #16
    47fa:	bf28      	it	cs
    47fc:	f04f 0810 	movcs.w	r8, #16

        if( mode == CCM_ENCRYPT )
    4800:	f1b9 0f00 	cmp.w	r9, #0
    4804:	d123      	bne.n	484e <ccm_auth_crypt+0x23a>
        {
            memset( b, 0, 16 );
    4806:	2210      	movs	r2, #16
    4808:	2100      	movs	r1, #0
    480a:	a80f      	add	r0, sp, #60	; 0x3c
    480c:	f026 f918 	bl	2aa40 <memset>
            memcpy( b, src, use_len );
    4810:	4642      	mov	r2, r8
    4812:	4629      	mov	r1, r5
    4814:	a80f      	add	r0, sp, #60	; 0x3c
    4816:	f7fb fd53 	bl	2c0 <memcpy>
            UPDATE_CBC_MAC;
    481a:	2300      	movs	r3, #0
    481c:	e00a      	b.n	4834 <ccm_auth_crypt+0x220>
    481e:	aa14      	add	r2, sp, #80	; 0x50
    4820:	441a      	add	r2, r3
    4822:	f812 1c14 	ldrb.w	r1, [r2, #-20]
    4826:	f812 0c24 	ldrb.w	r0, [r2, #-36]
    482a:	4041      	eors	r1, r0
    482c:	f802 1c24 	strb.w	r1, [r2, #-36]
    4830:	3301      	adds	r3, #1
    4832:	b2db      	uxtb	r3, r3
    4834:	2b0f      	cmp	r3, #15
    4836:	d9f2      	bls.n	481e <ccm_auth_crypt+0x20a>
    4838:	ab13      	add	r3, sp, #76	; 0x4c
    483a:	9300      	str	r3, [sp, #0]
    483c:	ab0b      	add	r3, sp, #44	; 0x2c
    483e:	2210      	movs	r2, #16
    4840:	4619      	mov	r1, r3
    4842:	9802      	ldr	r0, [sp, #8]
    4844:	f000 f98c 	bl	4b60 <mbedtls_cipher_update>
    4848:	2800      	cmp	r0, #0
    484a:	f040 8098 	bne.w	497e <ccm_auth_crypt+0x36a>
        }

        CTR_CRYPT( dst, src, use_len );
    484e:	ab13      	add	r3, sp, #76	; 0x4c
    4850:	9300      	str	r3, [sp, #0]
    4852:	ab0f      	add	r3, sp, #60	; 0x3c
    4854:	2210      	movs	r2, #16
    4856:	a907      	add	r1, sp, #28
    4858:	9802      	ldr	r0, [sp, #8]
    485a:	f000 f981 	bl	4b60 <mbedtls_cipher_update>
    485e:	2800      	cmp	r0, #0
    4860:	f040 808f 	bne.w	4982 <ccm_auth_crypt+0x36e>
    4864:	2300      	movs	r3, #0
    4866:	e008      	b.n	487a <ccm_auth_crypt+0x266>
    4868:	5cea      	ldrb	r2, [r5, r3]
    486a:	a914      	add	r1, sp, #80	; 0x50
    486c:	4419      	add	r1, r3
    486e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
    4872:	404a      	eors	r2, r1
    4874:	54f2      	strb	r2, [r6, r3]
    4876:	3301      	adds	r3, #1
    4878:	b2db      	uxtb	r3, r3
    487a:	4598      	cmp	r8, r3
    487c:	d8f4      	bhi.n	4868 <ccm_auth_crypt+0x254>

        if( mode == CCM_DECRYPT )
    487e:	f1b9 0f01 	cmp.w	r9, #1
    4882:	d015      	beq.n	48b0 <ccm_auth_crypt+0x29c>
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
            UPDATE_CBC_MAC;
        }

        dst += use_len;
    4884:	4446      	add	r6, r8
        src += use_len;
    4886:	4445      	add	r5, r8
        len_left -= use_len;
    4888:	eba7 0708 	sub.w	r7, r7, r8

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
    488c:	2200      	movs	r2, #0
    488e:	42a2      	cmp	r2, r4
    4890:	d2ae      	bcs.n	47f0 <ccm_auth_crypt+0x1dc>
            if( ++ctr[15-i] != 0 )
    4892:	f1c2 010f 	rsb	r1, r2, #15
    4896:	ab14      	add	r3, sp, #80	; 0x50
    4898:	4419      	add	r1, r3
    489a:	f811 3c34 	ldrb.w	r3, [r1, #-52]
    489e:	3301      	adds	r3, #1
    48a0:	b2db      	uxtb	r3, r3
    48a2:	f801 3c34 	strb.w	r3, [r1, #-52]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d1a2      	bne.n	47f0 <ccm_auth_crypt+0x1dc>
        for( i = 0; i < q; i++ )
    48aa:	3201      	adds	r2, #1
    48ac:	b2d2      	uxtb	r2, r2
    48ae:	e7ee      	b.n	488e <ccm_auth_crypt+0x27a>
            memset( b, 0, 16 );
    48b0:	2210      	movs	r2, #16
    48b2:	2100      	movs	r1, #0
    48b4:	a80f      	add	r0, sp, #60	; 0x3c
    48b6:	f026 f8c3 	bl	2aa40 <memset>
            memcpy( b, dst, use_len );
    48ba:	4642      	mov	r2, r8
    48bc:	4631      	mov	r1, r6
    48be:	a80f      	add	r0, sp, #60	; 0x3c
    48c0:	f7fb fcfe 	bl	2c0 <memcpy>
            UPDATE_CBC_MAC;
    48c4:	2300      	movs	r3, #0
    48c6:	e00a      	b.n	48de <ccm_auth_crypt+0x2ca>
    48c8:	aa14      	add	r2, sp, #80	; 0x50
    48ca:	441a      	add	r2, r3
    48cc:	f812 1c14 	ldrb.w	r1, [r2, #-20]
    48d0:	f812 0c24 	ldrb.w	r0, [r2, #-36]
    48d4:	4041      	eors	r1, r0
    48d6:	f802 1c24 	strb.w	r1, [r2, #-36]
    48da:	3301      	adds	r3, #1
    48dc:	b2db      	uxtb	r3, r3
    48de:	2b0f      	cmp	r3, #15
    48e0:	d9f2      	bls.n	48c8 <ccm_auth_crypt+0x2b4>
    48e2:	ab13      	add	r3, sp, #76	; 0x4c
    48e4:	9300      	str	r3, [sp, #0]
    48e6:	ab0b      	add	r3, sp, #44	; 0x2c
    48e8:	2210      	movs	r2, #16
    48ea:	4619      	mov	r1, r3
    48ec:	9802      	ldr	r0, [sp, #8]
    48ee:	f000 f937 	bl	4b60 <mbedtls_cipher_update>
    48f2:	2800      	cmp	r0, #0
    48f4:	d0c6      	beq.n	4884 <ccm_auth_crypt+0x270>
    48f6:	4683      	mov	fp, r0
    48f8:	e044      	b.n	4984 <ccm_auth_crypt+0x370>
    48fa:	2300      	movs	r3, #0
    48fc:	e008      	b.n	4910 <ccm_auth_crypt+0x2fc>

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
    48fe:	f1c3 020f 	rsb	r2, r3, #15
    4902:	a914      	add	r1, sp, #80	; 0x50
    4904:	440a      	add	r2, r1
    4906:	2100      	movs	r1, #0
    4908:	f802 1c34 	strb.w	r1, [r2, #-52]
    for( i = 0; i < q; i++ )
    490c:	3301      	adds	r3, #1
    490e:	b2db      	uxtb	r3, r3
    4910:	42a3      	cmp	r3, r4
    4912:	d3f4      	bcc.n	48fe <ccm_auth_crypt+0x2ea>

    CTR_CRYPT( y, y, 16 );
    4914:	ab13      	add	r3, sp, #76	; 0x4c
    4916:	9300      	str	r3, [sp, #0]
    4918:	ab0f      	add	r3, sp, #60	; 0x3c
    491a:	2210      	movs	r2, #16
    491c:	a907      	add	r1, sp, #28
    491e:	9804      	ldr	r0, [sp, #16]
    4920:	f000 f91e 	bl	4b60 <mbedtls_cipher_update>
    4924:	4683      	mov	fp, r0
    4926:	bb68      	cbnz	r0, 4984 <ccm_auth_crypt+0x370>
    4928:	2300      	movs	r3, #0
    492a:	e00a      	b.n	4942 <ccm_auth_crypt+0x32e>
    492c:	aa14      	add	r2, sp, #80	; 0x50
    492e:	441a      	add	r2, r3
    4930:	f812 1c24 	ldrb.w	r1, [r2, #-36]
    4934:	f812 0c14 	ldrb.w	r0, [r2, #-20]
    4938:	4041      	eors	r1, r0
    493a:	f802 1c24 	strb.w	r1, [r2, #-36]
    493e:	3301      	adds	r3, #1
    4940:	b2db      	uxtb	r3, r3
    4942:	2b0f      	cmp	r3, #15
    4944:	d9f2      	bls.n	492c <ccm_auth_crypt+0x318>
    memcpy( tag, y, tag_len );
    4946:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4948:	a90b      	add	r1, sp, #44	; 0x2c
    494a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    494c:	f7fb fcb8 	bl	2c0 <memcpy>

    return( 0 );
    4950:	e018      	b.n	4984 <ccm_auth_crypt+0x370>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    4952:	f06f 030c 	mvn.w	r3, #12
    4956:	469b      	mov	fp, r3
    4958:	e014      	b.n	4984 <ccm_auth_crypt+0x370>
    495a:	f06f 030c 	mvn.w	r3, #12
    495e:	469b      	mov	fp, r3
    4960:	e010      	b.n	4984 <ccm_auth_crypt+0x370>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    4962:	f06f 030c 	mvn.w	r3, #12
    4966:	469b      	mov	fp, r3
    4968:	e00c      	b.n	4984 <ccm_auth_crypt+0x370>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    496a:	f06f 030c 	mvn.w	r3, #12
    496e:	469b      	mov	fp, r3
    4970:	e008      	b.n	4984 <ccm_auth_crypt+0x370>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    4972:	f06f 030c 	mvn.w	r3, #12
    4976:	469b      	mov	fp, r3
    4978:	e004      	b.n	4984 <ccm_auth_crypt+0x370>
    497a:	4683      	mov	fp, r0
    497c:	e002      	b.n	4984 <ccm_auth_crypt+0x370>
    497e:	4683      	mov	fp, r0
    4980:	e000      	b.n	4984 <ccm_auth_crypt+0x370>
    4982:	4683      	mov	fp, r0
}
    4984:	4658      	mov	r0, fp
    4986:	b015      	add	sp, #84	; 0x54
    4988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000498c <mbedtls_ccm_init>:
{
    498c:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
    498e:	223c      	movs	r2, #60	; 0x3c
    4990:	2100      	movs	r1, #0
    4992:	f026 f855 	bl	2aa40 <memset>
    4996:	bd08      	pop	{r3, pc}

00004998 <mbedtls_ccm_setkey>:
{
    4998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    499a:	4604      	mov	r4, r0
    499c:	4608      	mov	r0, r1
    499e:	4617      	mov	r7, r2
    49a0:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    49a2:	2201      	movs	r2, #1
    49a4:	4619      	mov	r1, r3
    49a6:	f000 f863 	bl	4a70 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
    49aa:	b1b0      	cbz	r0, 49da <mbedtls_ccm_setkey+0x42>
    49ac:	4605      	mov	r5, r0
    if( cipher_info->block_size != 16 )
    49ae:	6943      	ldr	r3, [r0, #20]
    49b0:	2b10      	cmp	r3, #16
    49b2:	d115      	bne.n	49e0 <mbedtls_ccm_setkey+0x48>
    mbedtls_cipher_free( &ctx->cipher_ctx );
    49b4:	4620      	mov	r0, r4
    49b6:	f000 f871 	bl	4a9c <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
    49ba:	4629      	mov	r1, r5
    49bc:	4620      	mov	r0, r4
    49be:	f000 f887 	bl	4ad0 <mbedtls_cipher_setup>
    49c2:	4603      	mov	r3, r0
    49c4:	b108      	cbz	r0, 49ca <mbedtls_ccm_setkey+0x32>
}
    49c6:	4618      	mov	r0, r3
    49c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
    49ca:	2301      	movs	r3, #1
    49cc:	4632      	mov	r2, r6
    49ce:	4639      	mov	r1, r7
    49d0:	4620      	mov	r0, r4
    49d2:	f000 f899 	bl	4b08 <mbedtls_cipher_setkey>
    49d6:	4603      	mov	r3, r0
    49d8:	e7f5      	b.n	49c6 <mbedtls_ccm_setkey+0x2e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    49da:	f06f 030c 	mvn.w	r3, #12
    49de:	e7f2      	b.n	49c6 <mbedtls_ccm_setkey+0x2e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
    49e0:	f06f 030c 	mvn.w	r3, #12
    49e4:	e7ef      	b.n	49c6 <mbedtls_ccm_setkey+0x2e>

000049e6 <mbedtls_ccm_free>:
{
    49e6:	b510      	push	{r4, lr}
    49e8:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
    49ea:	f000 f857 	bl	4a9c <mbedtls_cipher_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
    49ee:	213c      	movs	r1, #60	; 0x3c
    49f0:	4620      	mov	r0, r4
    49f2:	f7ff f869 	bl	3ac8 <mbedtls_zeroize>
    49f6:	bd10      	pop	{r4, pc}

000049f8 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
    49f8:	b510      	push	{r4, lr}
    49fa:	b088      	sub	sp, #32
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
    49fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    49fe:	9406      	str	r4, [sp, #24]
    4a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4a02:	9405      	str	r4, [sp, #20]
    4a04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4a06:	9404      	str	r4, [sp, #16]
    4a08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    4a0a:	9403      	str	r4, [sp, #12]
    4a0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4a0e:	9402      	str	r4, [sp, #8]
    4a10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4a12:	9401      	str	r4, [sp, #4]
    4a14:	9300      	str	r3, [sp, #0]
    4a16:	4613      	mov	r3, r2
    4a18:	460a      	mov	r2, r1
    4a1a:	2100      	movs	r1, #0
    4a1c:	f7ff fdfa 	bl	4614 <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
    4a20:	b008      	add	sp, #32
    4a22:	bd10      	pop	{r4, pc}

00004a24 <mbedtls_cipher_list>:
const int *mbedtls_cipher_list( void )
{
    const mbedtls_cipher_definition_t *def;
    int *type;

    if( ! supported_init )
    4a24:	4b09      	ldr	r3, [pc, #36]	; (4a4c <mbedtls_cipher_list+0x28>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	b96b      	cbnz	r3, 4a46 <mbedtls_cipher_list+0x22>
    4a2a:	4b09      	ldr	r3, [pc, #36]	; (4a50 <mbedtls_cipher_list+0x2c>)
    4a2c:	4a09      	ldr	r2, [pc, #36]	; (4a54 <mbedtls_cipher_list+0x30>)
    4a2e:	e002      	b.n	4a36 <mbedtls_cipher_list+0x12>
    {
        def = mbedtls_cipher_definitions;
        type = mbedtls_cipher_supported;

        while( def->type != 0 )
            *type++ = (*def++).type;
    4a30:	3208      	adds	r2, #8
    4a32:	6019      	str	r1, [r3, #0]
    4a34:	3304      	adds	r3, #4
        while( def->type != 0 )
    4a36:	7811      	ldrb	r1, [r2, #0]
    4a38:	2900      	cmp	r1, #0
    4a3a:	d1f9      	bne.n	4a30 <mbedtls_cipher_list+0xc>

        *type = 0;
    4a3c:	2200      	movs	r2, #0
    4a3e:	601a      	str	r2, [r3, #0]

        supported_init = 1;
    4a40:	2201      	movs	r2, #1
    4a42:	4b02      	ldr	r3, [pc, #8]	; (4a4c <mbedtls_cipher_list+0x28>)
    4a44:	601a      	str	r2, [r3, #0]
    }

    return( mbedtls_cipher_supported );
}
    4a46:	4802      	ldr	r0, [pc, #8]	; (4a50 <mbedtls_cipher_list+0x2c>)
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop
    4a4c:	20000830 	.word	0x20000830
    4a50:	20002f08 	.word	0x20002f08
    4a54:	00031744 	.word	0x00031744

00004a58 <mbedtls_cipher_info_from_type>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
    4a58:	4b04      	ldr	r3, [pc, #16]	; (4a6c <mbedtls_cipher_info_from_type+0x14>)
    4a5a:	685a      	ldr	r2, [r3, #4]
    4a5c:	b122      	cbz	r2, 4a68 <mbedtls_cipher_info_from_type+0x10>
        if( def->type == cipher_type )
    4a5e:	7819      	ldrb	r1, [r3, #0]
    4a60:	4281      	cmp	r1, r0
    4a62:	d001      	beq.n	4a68 <mbedtls_cipher_info_from_type+0x10>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
    4a64:	3308      	adds	r3, #8
    4a66:	e7f8      	b.n	4a5a <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
    4a68:	4610      	mov	r0, r2
    4a6a:	4770      	bx	lr
    4a6c:	00031744 	.word	0x00031744

00004a70 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    4a70:	b430      	push	{r4, r5}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
    4a72:	4c09      	ldr	r4, [pc, #36]	; (4a98 <mbedtls_cipher_info_from_values+0x28>)
    4a74:	e000      	b.n	4a78 <mbedtls_cipher_info_from_values+0x8>
    4a76:	3408      	adds	r4, #8
    4a78:	6863      	ldr	r3, [r4, #4]
    4a7a:	b14b      	cbz	r3, 4a90 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
    4a7c:	699d      	ldr	r5, [r3, #24]
    4a7e:	782d      	ldrb	r5, [r5, #0]
    4a80:	4285      	cmp	r5, r0
    4a82:	d1f8      	bne.n	4a76 <mbedtls_cipher_info_from_values+0x6>
            def->info->key_bitlen == (unsigned) key_bitlen &&
    4a84:	685d      	ldr	r5, [r3, #4]
        if( def->info->base->cipher == cipher_id &&
    4a86:	428d      	cmp	r5, r1
    4a88:	d1f5      	bne.n	4a76 <mbedtls_cipher_info_from_values+0x6>
            def->info->mode == mode )
    4a8a:	785d      	ldrb	r5, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
    4a8c:	4295      	cmp	r5, r2
    4a8e:	d1f2      	bne.n	4a76 <mbedtls_cipher_info_from_values+0x6>
            return( def->info );

    return( NULL );
}
    4a90:	4618      	mov	r0, r3
    4a92:	bc30      	pop	{r4, r5}
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop
    4a98:	00031744 	.word	0x00031744

00004a9c <mbedtls_cipher_free>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
    if( ctx == NULL )
    4a9c:	b1a8      	cbz	r0, 4aca <mbedtls_cipher_free+0x2e>
{
    4a9e:	b510      	push	{r4, lr}
    4aa0:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_CMAC_C)
    if( ctx->cmac_ctx )
    4aa2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4aa4:	b130      	cbz	r0, 4ab4 <mbedtls_cipher_free+0x18>
    {
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
    4aa6:	2124      	movs	r1, #36	; 0x24
    4aa8:	f7ff f817 	bl	3ada <mbedtls_zeroize>
       mbedtls_free( ctx->cmac_ctx );
    4aac:	4b07      	ldr	r3, [pc, #28]	; (4acc <mbedtls_cipher_free+0x30>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4ab2:	4798      	blx	r3
    }
#endif

    if( ctx->cipher_ctx )
    4ab4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4ab6:	b118      	cbz	r0, 4ac0 <mbedtls_cipher_free+0x24>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
    4ab8:	6823      	ldr	r3, [r4, #0]
    4aba:	699b      	ldr	r3, [r3, #24]
    4abc:	695b      	ldr	r3, [r3, #20]
    4abe:	4798      	blx	r3

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
    4ac0:	213c      	movs	r1, #60	; 0x3c
    4ac2:	4620      	mov	r0, r4
    4ac4:	f7ff f809 	bl	3ada <mbedtls_zeroize>
    4ac8:	bd10      	pop	{r4, pc}
    4aca:	4770      	bx	lr
    4acc:	2000be04 	.word	0x2000be04

00004ad0 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
    4ad0:	b179      	cbz	r1, 4af2 <mbedtls_cipher_setup+0x22>
{
    4ad2:	b538      	push	{r3, r4, r5, lr}
    4ad4:	460d      	mov	r5, r1
    if( NULL == cipher_info || NULL == ctx )
    4ad6:	b170      	cbz	r0, 4af6 <mbedtls_cipher_setup+0x26>
    4ad8:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
    4ada:	223c      	movs	r2, #60	; 0x3c
    4adc:	2100      	movs	r1, #0
    4ade:	f025 ffaf 	bl	2aa40 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
    4ae2:	69ab      	ldr	r3, [r5, #24]
    4ae4:	691b      	ldr	r3, [r3, #16]
    4ae6:	4798      	blx	r3
    4ae8:	6360      	str	r0, [r4, #52]	; 0x34
    4aea:	b130      	cbz	r0, 4afa <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
    4aec:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
    4aee:	2000      	movs	r0, #0
    4af0:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4af2:	4803      	ldr	r0, [pc, #12]	; (4b00 <mbedtls_cipher_setup+0x30>)
    4af4:	4770      	bx	lr
    4af6:	4802      	ldr	r0, [pc, #8]	; (4b00 <mbedtls_cipher_setup+0x30>)
    4af8:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
    4afa:	4802      	ldr	r0, [pc, #8]	; (4b04 <mbedtls_cipher_setup+0x34>)
}
    4afc:	bd38      	pop	{r3, r4, r5, pc}
    4afe:	bf00      	nop
    4b00:	ffff9f00 	.word	0xffff9f00
    4b04:	ffff9e80 	.word	0xffff9e80

00004b08 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
    4b08:	b1f8      	cbz	r0, 4b4a <mbedtls_cipher_setkey+0x42>
{
    4b0a:	b538      	push	{r3, r4, r5, lr}
    4b0c:	4605      	mov	r5, r0
    if( NULL == ctx || NULL == ctx->cipher_info )
    4b0e:	6804      	ldr	r4, [r0, #0]
    4b10:	b1ec      	cbz	r4, 4b4e <mbedtls_cipher_setkey+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
    4b12:	6920      	ldr	r0, [r4, #16]
    4b14:	f010 0f02 	tst.w	r0, #2
    4b18:	d102      	bne.n	4b20 <mbedtls_cipher_setkey+0x18>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    4b1a:	6860      	ldr	r0, [r4, #4]
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
    4b1c:	4290      	cmp	r0, r2
    4b1e:	d118      	bne.n	4b52 <mbedtls_cipher_setkey+0x4a>
    4b20:	4628      	mov	r0, r5
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
    4b22:	606a      	str	r2, [r5, #4]
    ctx->operation = operation;
    4b24:	722b      	strb	r3, [r5, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
    4b26:	2b01      	cmp	r3, #1
    4b28:	d00a      	beq.n	4b40 <mbedtls_cipher_setkey+0x38>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
    4b2a:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
    4b2c:	2d03      	cmp	r5, #3
    4b2e:	d007      	beq.n	4b40 <mbedtls_cipher_setkey+0x38>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
    4b30:	2d05      	cmp	r5, #5
    4b32:	d005      	beq.n	4b40 <mbedtls_cipher_setkey+0x38>
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
    4b34:	b97b      	cbnz	r3, 4b56 <mbedtls_cipher_setkey+0x4e>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
    4b36:	69a3      	ldr	r3, [r4, #24]
    4b38:	68db      	ldr	r3, [r3, #12]
    4b3a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    4b3c:	4798      	blx	r3
    4b3e:	bd38      	pop	{r3, r4, r5, pc}
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
    4b40:	69a3      	ldr	r3, [r4, #24]
    4b42:	689b      	ldr	r3, [r3, #8]
    4b44:	6b40      	ldr	r0, [r0, #52]	; 0x34
    4b46:	4798      	blx	r3
    4b48:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4b4a:	4804      	ldr	r0, [pc, #16]	; (4b5c <mbedtls_cipher_setkey+0x54>)
    4b4c:	4770      	bx	lr
    4b4e:	4803      	ldr	r0, [pc, #12]	; (4b5c <mbedtls_cipher_setkey+0x54>)
    4b50:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4b52:	4802      	ldr	r0, [pc, #8]	; (4b5c <mbedtls_cipher_setkey+0x54>)
    4b54:	bd38      	pop	{r3, r4, r5, pc}
                ctx->key_bitlen );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4b56:	4801      	ldr	r0, [pc, #4]	; (4b5c <mbedtls_cipher_setkey+0x54>)
}
    4b58:	bd38      	pop	{r3, r4, r5, pc}
    4b5a:	bf00      	nop
    4b5c:	ffff9f00 	.word	0xffff9f00

00004b60 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
    4b60:	b570      	push	{r4, r5, r6, lr}
    4b62:	9d04      	ldr	r5, [sp, #16]
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
    4b64:	b330      	cbz	r0, 4bb4 <mbedtls_cipher_update+0x54>
    4b66:	4604      	mov	r4, r0
    4b68:	6800      	ldr	r0, [r0, #0]
    4b6a:	b328      	cbz	r0, 4bb8 <mbedtls_cipher_update+0x58>
    4b6c:	b335      	cbz	r5, 4bbc <mbedtls_cipher_update+0x5c>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    4b6e:	2000      	movs	r0, #0
    4b70:	6028      	str	r0, [r5, #0]
 * \return              size of the cipher's blocks, or 0 if ctx has not been
 *                      initialised.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
    4b72:	6820      	ldr	r0, [r4, #0]
    4b74:	b180      	cbz	r0, 4b98 <mbedtls_cipher_update+0x38>
        return 0;

    return ctx->cipher_info->block_size;
    4b76:	6940      	ldr	r0, [r0, #20]
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    4b78:	6826      	ldr	r6, [r4, #0]
    4b7a:	7876      	ldrb	r6, [r6, #1]
    4b7c:	2e01      	cmp	r6, #1
    4b7e:	d00d      	beq.n	4b9c <mbedtls_cipher_update+0x3c>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
    }
#endif

    if ( 0 == block_size )
    4b80:	b300      	cbz	r0, 4bc4 <mbedtls_cipher_update+0x64>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
    4b82:	4299      	cmp	r1, r3
    4b84:	d120      	bne.n	4bc8 <mbedtls_cipher_update+0x68>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
    4b86:	69e3      	ldr	r3, [r4, #28]
    if( input == output &&
    4b88:	bb03      	cbnz	r3, 4bcc <mbedtls_cipher_update+0x6c>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
    4b8a:	fbb2 f3f0 	udiv	r3, r2, r0
    4b8e:	fb00 2213 	mls	r2, r0, r3, r2
    4b92:	b9ea      	cbnz	r2, 4bd0 <mbedtls_cipher_update+0x70>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    4b94:	480f      	ldr	r0, [pc, #60]	; (4bd4 <mbedtls_cipher_update+0x74>)
    4b96:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
    4b98:	2000      	movs	r0, #0
    4b9a:	e7ed      	b.n	4b78 <mbedtls_cipher_update+0x18>
        if( ilen != block_size )
    4b9c:	4282      	cmp	r2, r0
    4b9e:	d10f      	bne.n	4bc0 <mbedtls_cipher_update+0x60>
        *olen = ilen;
    4ba0:	602a      	str	r2, [r5, #0]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
    4ba2:	6822      	ldr	r2, [r4, #0]
    4ba4:	6992      	ldr	r2, [r2, #24]
    4ba6:	6855      	ldr	r5, [r2, #4]
    4ba8:	460a      	mov	r2, r1
    4baa:	f994 1008 	ldrsb.w	r1, [r4, #8]
    4bae:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4bb0:	47a8      	blx	r5
    4bb2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4bb4:	4808      	ldr	r0, [pc, #32]	; (4bd8 <mbedtls_cipher_update+0x78>)
    4bb6:	bd70      	pop	{r4, r5, r6, pc}
    4bb8:	4807      	ldr	r0, [pc, #28]	; (4bd8 <mbedtls_cipher_update+0x78>)
    4bba:	bd70      	pop	{r4, r5, r6, pc}
    4bbc:	4806      	ldr	r0, [pc, #24]	; (4bd8 <mbedtls_cipher_update+0x78>)
    4bbe:	bd70      	pop	{r4, r5, r6, pc}
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
    4bc0:	4806      	ldr	r0, [pc, #24]	; (4bdc <mbedtls_cipher_update+0x7c>)
    4bc2:	bd70      	pop	{r4, r5, r6, pc}
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    4bc4:	4806      	ldr	r0, [pc, #24]	; (4be0 <mbedtls_cipher_update+0x80>)
    4bc6:	bd70      	pop	{r4, r5, r6, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    4bc8:	4802      	ldr	r0, [pc, #8]	; (4bd4 <mbedtls_cipher_update+0x74>)
    4bca:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    4bcc:	4802      	ldr	r0, [pc, #8]	; (4bd8 <mbedtls_cipher_update+0x78>)
    4bce:	bd70      	pop	{r4, r5, r6, pc}
    4bd0:	4801      	ldr	r0, [pc, #4]	; (4bd8 <mbedtls_cipher_update+0x78>)
}
    4bd2:	bd70      	pop	{r4, r5, r6, pc}
    4bd4:	ffff9f80 	.word	0xffff9f80
    4bd8:	ffff9f00 	.word	0xffff9f00
    4bdc:	ffff9d80 	.word	0xffff9d80
    4be0:	ffff9c80 	.word	0xffff9c80

00004be4 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
    4be4:	b510      	push	{r4, lr}
    4be6:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
    4be8:	f7ff fefd 	bl	49e6 <mbedtls_ccm_free>
    mbedtls_free( ctx );
    4bec:	4b02      	ldr	r3, [pc, #8]	; (4bf8 <ccm_ctx_free+0x14>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	4620      	mov	r0, r4
    4bf2:	4798      	blx	r3
    4bf4:	bd10      	pop	{r4, pc}
    4bf6:	bf00      	nop
    4bf8:	2000be04 	.word	0x2000be04

00004bfc <ccm_ctx_alloc>:
{
    4bfc:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
    4bfe:	4b05      	ldr	r3, [pc, #20]	; (4c14 <ccm_ctx_alloc+0x18>)
    4c00:	681b      	ldr	r3, [r3, #0]
    4c02:	213c      	movs	r1, #60	; 0x3c
    4c04:	2001      	movs	r0, #1
    4c06:	4798      	blx	r3
    if( ctx != NULL )
    4c08:	4604      	mov	r4, r0
    4c0a:	b108      	cbz	r0, 4c10 <ccm_ctx_alloc+0x14>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
    4c0c:	f7ff febe 	bl	498c <mbedtls_ccm_init>
}
    4c10:	4620      	mov	r0, r4
    4c12:	bd10      	pop	{r4, pc}
    4c14:	2000be00 	.word	0x2000be00

00004c18 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    4c18:	b508      	push	{r3, lr}
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
    4c1a:	4613      	mov	r3, r2
    4c1c:	460a      	mov	r2, r1
    4c1e:	2102      	movs	r1, #2
    4c20:	f7ff feba 	bl	4998 <mbedtls_ccm_setkey>
                     key, key_bitlen );
}
    4c24:	bd08      	pop	{r3, pc}
	...

00004c28 <aes_ctx_free>:
{
    4c28:	b510      	push	{r4, lr}
    4c2a:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    4c2c:	f7fe ffc8 	bl	3bc0 <mbedtls_aes_free>
    mbedtls_free( ctx );
    4c30:	4b02      	ldr	r3, [pc, #8]	; (4c3c <aes_ctx_free+0x14>)
    4c32:	681b      	ldr	r3, [r3, #0]
    4c34:	4620      	mov	r0, r4
    4c36:	4798      	blx	r3
    4c38:	bd10      	pop	{r4, pc}
    4c3a:	bf00      	nop
    4c3c:	2000be04 	.word	0x2000be04

00004c40 <aes_ctx_alloc>:
{
    4c40:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
    4c42:	4b07      	ldr	r3, [pc, #28]	; (4c60 <aes_ctx_alloc+0x20>)
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	f44f 718c 	mov.w	r1, #280	; 0x118
    4c4a:	2001      	movs	r0, #1
    4c4c:	4798      	blx	r3
    if( aes == NULL )
    4c4e:	b120      	cbz	r0, 4c5a <aes_ctx_alloc+0x1a>
    4c50:	4604      	mov	r4, r0
    mbedtls_aes_init( aes );
    4c52:	f7fe ffae 	bl	3bb2 <mbedtls_aes_init>
    return( aes );
    4c56:	4620      	mov	r0, r4
    4c58:	bd10      	pop	{r4, pc}
        return( NULL );
    4c5a:	2000      	movs	r0, #0
}
    4c5c:	bd10      	pop	{r4, pc}
    4c5e:	bf00      	nop
    4c60:	2000be00 	.word	0x2000be00

00004c64 <aes_setkey_dec_wrap>:
{
    4c64:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
    4c66:	f7ff f88b 	bl	3d80 <mbedtls_aes_setkey_dec>
}
    4c6a:	bd08      	pop	{r3, pc}

00004c6c <aes_setkey_enc_wrap>:
{
    4c6c:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
    4c6e:	f7fe ffaf 	bl	3bd0 <mbedtls_aes_setkey_enc>
}
    4c72:	bd08      	pop	{r3, pc}

00004c74 <aes_crypt_ecb_wrap>:
{
    4c74:	b508      	push	{r3, lr}
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
    4c76:	f7ff fcbf 	bl	45f8 <mbedtls_aes_crypt_ecb>
}
    4c7a:	bd08      	pop	{r3, pc}

00004c7c <platform_calloc_uninit>:
static void *platform_calloc_uninit( size_t n, size_t size )
{
    ((void) n);
    ((void) size);
    return( NULL );
}
    4c7c:	2000      	movs	r0, #0
    4c7e:	4770      	bx	lr

00004c80 <platform_free_uninit>:
#define MBEDTLS_PLATFORM_STD_CALLOC   platform_calloc_uninit
#endif /* !MBEDTLS_PLATFORM_STD_CALLOC */

#if !defined(MBEDTLS_PLATFORM_STD_FREE)
static void platform_free_uninit( void *ptr )
{
    4c80:	4770      	bx	lr

00004c82 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    4c82:	b530      	push	{r4, r5, lr}
    4c84:	b085      	sub	sp, #20
    4c86:	4604      	mov	r4, r0
    4c88:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    4c8a:	2203      	movs	r2, #3
    4c8c:	4668      	mov	r0, sp
    4c8e:	f7fb fb17 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    4c92:	220d      	movs	r2, #13
    4c94:	2100      	movs	r1, #0
    4c96:	f10d 0003 	add.w	r0, sp, #3
    4c9a:	f025 fed1 	bl	2aa40 <memset>

	err = bt_encrypt_le(irk, res, res);
    4c9e:	466a      	mov	r2, sp
    4ca0:	4669      	mov	r1, sp
    4ca2:	4620      	mov	r0, r4
    4ca4:	f00d f8a0 	bl	11de8 <bt_encrypt_le>
	if (err) {
    4ca8:	4604      	mov	r4, r0
    4caa:	b110      	cbz	r0, 4cb2 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    4cac:	4620      	mov	r0, r4
    4cae:	b005      	add	sp, #20
    4cb0:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    4cb2:	2203      	movs	r2, #3
    4cb4:	4669      	mov	r1, sp
    4cb6:	4628      	mov	r0, r5
    4cb8:	f7fb fb02 	bl	2c0 <memcpy>
	return 0;
    4cbc:	e7f6      	b.n	4cac <ah+0x2a>

00004cbe <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    4cbe:	b510      	push	{r4, lr}
    4cc0:	b082      	sub	sp, #8
    4cc2:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    4cc4:	aa01      	add	r2, sp, #4
    4cc6:	3103      	adds	r1, #3
    4cc8:	f7ff ffdb 	bl	4c82 <ah>
	if (err) {
    4ccc:	b110      	cbz	r0, 4cd4 <bt_rpa_irk_matches+0x16>
		return false;
    4cce:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    4cd0:	b002      	add	sp, #8
    4cd2:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    4cd4:	2203      	movs	r2, #3
    4cd6:	a901      	add	r1, sp, #4
    4cd8:	4620      	mov	r0, r4
    4cda:	f025 fe1d 	bl	2a918 <memcmp>
    4cde:	fab0 f080 	clz	r0, r0
    4ce2:	0940      	lsrs	r0, r0, #5
    4ce4:	e7f4      	b.n	4cd0 <bt_rpa_irk_matches+0x12>

00004ce6 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    4ce6:	b570      	push	{r4, r5, r6, lr}
    4ce8:	4606      	mov	r6, r0
    4cea:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    4cec:	1ccd      	adds	r5, r1, #3
    4cee:	2103      	movs	r1, #3
    4cf0:	4628      	mov	r0, r5
    4cf2:	f00d f85d 	bl	11db0 <bt_rand>
	if (err) {
    4cf6:	4603      	mov	r3, r0
    4cf8:	b108      	cbz	r0, 4cfe <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    4cfa:	4618      	mov	r0, r3
    4cfc:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    4cfe:	f994 3005 	ldrsb.w	r3, [r4, #5]
    4d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4d0a:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    4d0c:	4622      	mov	r2, r4
    4d0e:	4629      	mov	r1, r5
    4d10:	4630      	mov	r0, r6
    4d12:	f7ff ffb6 	bl	4c82 <ah>
    4d16:	4603      	mov	r3, r0
    4d18:	e7ef      	b.n	4cfa <bt_rpa_create+0x14>
	...

00004d1c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4d1c:	b570      	push	{r4, r5, r6, lr}
    4d1e:	4605      	mov	r5, r0
    4d20:	460c      	mov	r4, r1
	switch (src->type) {
    4d22:	7803      	ldrb	r3, [r0, #0]
    4d24:	2b01      	cmp	r3, #1
    4d26:	d010      	beq.n	4d4a <uuid_to_uuid128+0x2e>
    4d28:	b113      	cbz	r3, 4d30 <uuid_to_uuid128+0x14>
    4d2a:	2b02      	cmp	r3, #2
    4d2c:	d01f      	beq.n	4d6e <uuid_to_uuid128+0x52>
    4d2e:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4d30:	4e12      	ldr	r6, [pc, #72]	; (4d7c <uuid_to_uuid128+0x60>)
    4d32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4d34:	6020      	str	r0, [r4, #0]
    4d36:	6061      	str	r1, [r4, #4]
    4d38:	60a2      	str	r2, [r4, #8]
    4d3a:	60e3      	str	r3, [r4, #12]
    4d3c:	7833      	ldrb	r3, [r6, #0]
    4d3e:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    4d40:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    4d42:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    4d44:	0a1b      	lsrs	r3, r3, #8
    4d46:	73a3      	strb	r3, [r4, #14]
    4d48:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    4d4a:	4e0c      	ldr	r6, [pc, #48]	; (4d7c <uuid_to_uuid128+0x60>)
    4d4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4d4e:	6020      	str	r0, [r4, #0]
    4d50:	6061      	str	r1, [r4, #4]
    4d52:	60a2      	str	r2, [r4, #8]
    4d54:	60e3      	str	r3, [r4, #12]
    4d56:	7833      	ldrb	r3, [r6, #0]
    4d58:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    4d5a:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    4d5c:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    4d5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4d62:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    4d64:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4d66:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    4d68:	0a1b      	lsrs	r3, r3, #8
    4d6a:	7423      	strb	r3, [r4, #16]
    4d6c:	bd70      	pop	{r4, r5, r6, pc}
    4d6e:	4608      	mov	r0, r1
    4d70:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    4d72:	2211      	movs	r2, #17
    4d74:	f7fb faa4 	bl	2c0 <memcpy>
    4d78:	bd70      	pop	{r4, r5, r6, pc}
    4d7a:	bf00      	nop
    4d7c:	0003177c 	.word	0x0003177c

00004d80 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4d80:	b510      	push	{r4, lr}
    4d82:	b08a      	sub	sp, #40	; 0x28
    4d84:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    4d86:	a905      	add	r1, sp, #20
    4d88:	f7ff ffc8 	bl	4d1c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    4d8c:	4669      	mov	r1, sp
    4d8e:	4620      	mov	r0, r4
    4d90:	f7ff ffc4 	bl	4d1c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    4d94:	2210      	movs	r2, #16
    4d96:	f10d 0101 	add.w	r1, sp, #1
    4d9a:	f10d 0015 	add.w	r0, sp, #21
    4d9e:	f025 fdbb 	bl	2a918 <memcmp>
}
    4da2:	b00a      	add	sp, #40	; 0x28
    4da4:	bd10      	pop	{r4, pc}

00004da6 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4da6:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    4da8:	7803      	ldrb	r3, [r0, #0]
    4daa:	780a      	ldrb	r2, [r1, #0]
    4dac:	4293      	cmp	r3, r2
    4dae:	d107      	bne.n	4dc0 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    4db0:	2b01      	cmp	r3, #1
    4db2:	d00c      	beq.n	4dce <bt_uuid_cmp+0x28>
    4db4:	b13b      	cbz	r3, 4dc6 <bt_uuid_cmp+0x20>
    4db6:	2b02      	cmp	r3, #2
    4db8:	d00d      	beq.n	4dd6 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    4dba:	f06f 0015 	mvn.w	r0, #21
}
    4dbe:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    4dc0:	f7ff ffde 	bl	4d80 <uuid128_cmp>
    4dc4:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    4dc6:	8840      	ldrh	r0, [r0, #2]
    4dc8:	884b      	ldrh	r3, [r1, #2]
    4dca:	1ac0      	subs	r0, r0, r3
    4dcc:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    4dce:	6840      	ldr	r0, [r0, #4]
    4dd0:	684b      	ldr	r3, [r1, #4]
    4dd2:	1ac0      	subs	r0, r0, r3
    4dd4:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    4dd6:	2210      	movs	r2, #16
    4dd8:	3101      	adds	r1, #1
    4dda:	3001      	adds	r0, #1
    4ddc:	f025 fd9c 	bl	2a918 <memcmp>
    4de0:	bd08      	pop	{r3, pc}
	...

00004de4 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    4de4:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4de6:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    4de8:	4b06      	ldr	r3, [pc, #24]	; (4e04 <le_dhkey_complete+0x20>)
    4dea:	681b      	ldr	r3, [r3, #0]
    4dec:	b133      	cbz	r3, 4dfc <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4dee:	7802      	ldrb	r2, [r0, #0]
    4df0:	b92a      	cbnz	r2, 4dfe <le_dhkey_complete+0x1a>
    4df2:	3001      	adds	r0, #1
    4df4:	4798      	blx	r3
		dh_key_cb = NULL;
    4df6:	2200      	movs	r2, #0
    4df8:	4b02      	ldr	r3, [pc, #8]	; (4e04 <le_dhkey_complete+0x20>)
    4dfa:	601a      	str	r2, [r3, #0]
    4dfc:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4dfe:	2000      	movs	r0, #0
    4e00:	e7f8      	b.n	4df4 <le_dhkey_complete+0x10>
    4e02:	bf00      	nop
    4e04:	20000834 	.word	0x20000834

00004e08 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4e08:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    4e0a:	7851      	ldrb	r1, [r2, #1]
    4e0c:	4b06      	ldr	r3, [pc, #24]	; (4e28 <read_local_ver_complete+0x20>)
    4e0e:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4e10:	8851      	ldrh	r1, [r2, #2]
    4e12:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    4e14:	7911      	ldrb	r1, [r2, #4]
    4e16:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4e18:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    4e1c:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4e1e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    4e22:	829a      	strh	r2, [r3, #20]
    4e24:	4770      	bx	lr
    4e26:	bf00      	nop
    4e28:	2000be08 	.word	0x2000be08

00004e2c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    4e2c:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    4e2e:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    4e30:	7a1a      	ldrb	r2, [r3, #8]
    4e32:	79dc      	ldrb	r4, [r3, #7]
    4e34:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    4e38:	7999      	ldrb	r1, [r3, #6]
    4e3a:	795a      	ldrb	r2, [r3, #5]
    4e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4e40:	2000      	movs	r0, #0
    4e42:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4e46:	791c      	ldrb	r4, [r3, #4]
    4e48:	78da      	ldrb	r2, [r3, #3]
    4e4a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    4e4e:	789c      	ldrb	r4, [r3, #2]
    4e50:	785b      	ldrb	r3, [r3, #1]
    4e52:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4e5a:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    4e5c:	4b02      	ldr	r3, [pc, #8]	; (4e68 <le_read_supp_states_complete+0x3c>)
    4e5e:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    4e62:	bc10      	pop	{r4}
    4e64:	4770      	bx	lr
    4e66:	bf00      	nop
    4e68:	2000be08 	.word	0x2000be08

00004e6c <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4e6c:	7803      	ldrb	r3, [r0, #0]
    4e6e:	f013 0f01 	tst.w	r3, #1
    4e72:	d106      	bne.n	4e82 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4e74:	4b0c      	ldr	r3, [pc, #48]	; (4ea8 <valid_adv_param+0x3c>)
    4e76:	7b9b      	ldrb	r3, [r3, #14]
    4e78:	2b08      	cmp	r3, #8
    4e7a:	d802      	bhi.n	4e82 <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    4e7c:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4e7e:	2b9f      	cmp	r3, #159	; 0x9f
    4e80:	d90c      	bls.n	4e9c <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    4e82:	8843      	ldrh	r3, [r0, #2]
    4e84:	8882      	ldrh	r2, [r0, #4]
    4e86:	4293      	cmp	r3, r2
    4e88:	d80a      	bhi.n	4ea0 <valid_adv_param+0x34>
    4e8a:	2b1f      	cmp	r3, #31
    4e8c:	d90a      	bls.n	4ea4 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    4e8e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    4e92:	d801      	bhi.n	4e98 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    4e94:	2001      	movs	r0, #1
}
    4e96:	4770      	bx	lr
		return false;
    4e98:	2000      	movs	r0, #0
    4e9a:	4770      	bx	lr
			return false;
    4e9c:	2000      	movs	r0, #0
    4e9e:	4770      	bx	lr
		return false;
    4ea0:	2000      	movs	r0, #0
    4ea2:	4770      	bx	lr
    4ea4:	2000      	movs	r0, #0
    4ea6:	4770      	bx	lr
    4ea8:	2000be08 	.word	0x2000be08

00004eac <hci_reset_complete>:
	u8_t status = buf->data[0];
    4eac:	6883      	ldr	r3, [r0, #8]
    4eae:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    4eb0:	b103      	cbz	r3, 4eb4 <hci_reset_complete+0x8>
    4eb2:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    4eb4:	2200      	movs	r2, #0
    4eb6:	4b07      	ldr	r3, [pc, #28]	; (4ed4 <hci_reset_complete+0x28>)
    4eb8:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4eba:	4b07      	ldr	r3, [pc, #28]	; (4ed8 <hci_reset_complete+0x2c>)
    4ebc:	2201      	movs	r2, #1
    4ebe:	f3bf 8f5b 	dmb	ish
    4ec2:	e853 1f00 	ldrex	r1, [r3]
    4ec6:	e843 2000 	strex	r0, r2, [r3]
    4eca:	2800      	cmp	r0, #0
    4ecc:	d1f9      	bne.n	4ec2 <hci_reset_complete+0x16>
    4ece:	f3bf 8f5b 	dmb	ish
    4ed2:	e7ee      	b.n	4eb2 <hci_reset_complete+0x6>
    4ed4:	20000880 	.word	0x20000880
    4ed8:	2000be78 	.word	0x2000be78

00004edc <read_local_features_complete>:
{
    4edc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    4ede:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4ee0:	2208      	movs	r2, #8
    4ee2:	3101      	adds	r1, #1
    4ee4:	4801      	ldr	r0, [pc, #4]	; (4eec <read_local_features_complete+0x10>)
    4ee6:	f7fb f9eb 	bl	2c0 <memcpy>
    4eea:	bd08      	pop	{r3, pc}
    4eec:	2000be1e 	.word	0x2000be1e

00004ef0 <read_bdaddr_complete>:
{
    4ef0:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    4ef2:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4ef4:	4c04      	ldr	r4, [pc, #16]	; (4f08 <read_bdaddr_complete+0x18>)
    4ef6:	2206      	movs	r2, #6
    4ef8:	3101      	adds	r1, #1
    4efa:	1c60      	adds	r0, r4, #1
    4efc:	f7fb f9e0 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    4f00:	2300      	movs	r3, #0
    4f02:	7023      	strb	r3, [r4, #0]
    4f04:	bd10      	pop	{r4, pc}
    4f06:	bf00      	nop
    4f08:	2000be08 	.word	0x2000be08

00004f0c <read_supported_commands_complete>:
{
    4f0c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    4f0e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    4f10:	2240      	movs	r2, #64	; 0x40
    4f12:	3101      	adds	r1, #1
    4f14:	4801      	ldr	r0, [pc, #4]	; (4f1c <read_supported_commands_complete+0x10>)
    4f16:	f7fb f9d3 	bl	2c0 <memcpy>
    4f1a:	bd08      	pop	{r3, pc}
    4f1c:	2000be26 	.word	0x2000be26

00004f20 <read_le_features_complete>:
{
    4f20:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    4f22:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4f24:	2208      	movs	r2, #8
    4f26:	3101      	adds	r1, #1
    4f28:	4801      	ldr	r0, [pc, #4]	; (4f30 <read_le_features_complete+0x10>)
    4f2a:	f7fb f9c9 	bl	2c0 <memcpy>
    4f2e:	bd08      	pop	{r3, pc}
    4f30:	2000be80 	.word	0x2000be80

00004f34 <le_read_buffer_size_complete>:
{
    4f34:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    4f36:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4f38:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    4f3c:	b299      	uxth	r1, r3
    4f3e:	4807      	ldr	r0, [pc, #28]	; (4f5c <le_read_buffer_size_complete+0x28>)
    4f40:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4f44:	b901      	cbnz	r1, 4f48 <le_read_buffer_size_complete+0x14>
    4f46:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4f48:	78d1      	ldrb	r1, [r2, #3]
    4f4a:	2902      	cmp	r1, #2
    4f4c:	bf28      	it	cs
    4f4e:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4f50:	460a      	mov	r2, r1
    4f52:	308c      	adds	r0, #140	; 0x8c
    4f54:	f024 fd98 	bl	29a88 <_impl_k_sem_init>
    4f58:	e7f5      	b.n	4f46 <le_read_buffer_size_complete+0x12>
    4f5a:	bf00      	nop
    4f5c:	2000be08 	.word	0x2000be08

00004f60 <read_buffer_size_complete>:
{
    4f60:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    4f62:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    4f64:	4b09      	ldr	r3, [pc, #36]	; (4f8c <read_buffer_size_complete+0x2c>)
    4f66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    4f6a:	b103      	cbz	r3, 4f6e <read_buffer_size_complete+0xe>
    4f6c:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4f6e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    4f72:	4806      	ldr	r0, [pc, #24]	; (4f8c <read_buffer_size_complete+0x2c>)
    4f74:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    4f78:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    4f7a:	2902      	cmp	r1, #2
    4f7c:	bf28      	it	cs
    4f7e:	2102      	movcs	r1, #2
    4f80:	460a      	mov	r2, r1
    4f82:	308c      	adds	r0, #140	; 0x8c
    4f84:	f024 fd80 	bl	29a88 <_impl_k_sem_init>
    4f88:	e7f0      	b.n	4f6c <read_buffer_size_complete+0xc>
    4f8a:	bf00      	nop
    4f8c:	2000be08 	.word	0x2000be08

00004f90 <le_pkey_complete>:
{
    4f90:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    4f92:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f94:	4b17      	ldr	r3, [pc, #92]	; (4ff4 <le_pkey_complete+0x64>)
    4f96:	f3bf 8f5b 	dmb	ish
    4f9a:	e853 2f00 	ldrex	r2, [r3]
    4f9e:	f022 0210 	bic.w	r2, r2, #16
    4fa2:	e843 2100 	strex	r1, r2, [r3]
    4fa6:	2900      	cmp	r1, #0
    4fa8:	d1f7      	bne.n	4f9a <le_pkey_complete+0xa>
    4faa:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    4fae:	782b      	ldrb	r3, [r5, #0]
    4fb0:	b113      	cbz	r3, 4fb8 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4fb2:	4b11      	ldr	r3, [pc, #68]	; (4ff8 <le_pkey_complete+0x68>)
    4fb4:	681c      	ldr	r4, [r3, #0]
    4fb6:	e015      	b.n	4fe4 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    4fb8:	2240      	movs	r2, #64	; 0x40
    4fba:	1c69      	adds	r1, r5, #1
    4fbc:	480f      	ldr	r0, [pc, #60]	; (4ffc <le_pkey_complete+0x6c>)
    4fbe:	f7fb f97f 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4fc2:	4b0c      	ldr	r3, [pc, #48]	; (4ff4 <le_pkey_complete+0x64>)
    4fc4:	f3bf 8f5b 	dmb	ish
    4fc8:	e853 2f00 	ldrex	r2, [r3]
    4fcc:	f042 0208 	orr.w	r2, r2, #8
    4fd0:	e843 2100 	strex	r1, r2, [r3]
    4fd4:	2900      	cmp	r1, #0
    4fd6:	d1f7      	bne.n	4fc8 <le_pkey_complete+0x38>
    4fd8:	f3bf 8f5b 	dmb	ish
    4fdc:	e7e9      	b.n	4fb2 <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    4fde:	2000      	movs	r0, #0
    4fe0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4fe2:	6864      	ldr	r4, [r4, #4]
    4fe4:	b12c      	cbz	r4, 4ff2 <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    4fe6:	6823      	ldr	r3, [r4, #0]
    4fe8:	782a      	ldrb	r2, [r5, #0]
    4fea:	2a00      	cmp	r2, #0
    4fec:	d1f7      	bne.n	4fde <le_pkey_complete+0x4e>
    4fee:	1c68      	adds	r0, r5, #1
    4ff0:	e7f6      	b.n	4fe0 <le_pkey_complete+0x50>
}
    4ff2:	bd38      	pop	{r3, r4, r5, pc}
    4ff4:	2000be78 	.word	0x2000be78
    4ff8:	20000878 	.word	0x20000878
    4ffc:	20000838 	.word	0x20000838

00005000 <hci_acl>:
{
    5000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5002:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    5004:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    5006:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5008:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    500a:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    500c:	f100 0510 	add.w	r5, r0, #16
    5010:	89c3      	ldrh	r3, [r0, #14]
    5012:	442b      	add	r3, r5
    5014:	3303      	adds	r3, #3
    5016:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    501a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    501e:	805a      	strh	r2, [r3, #2]
    5020:	89c3      	ldrh	r3, [r0, #14]
    5022:	442b      	add	r3, r5
    5024:	3303      	adds	r3, #3
    5026:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    502a:	22ff      	movs	r2, #255	; 0xff
    502c:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    502e:	2104      	movs	r1, #4
    5030:	3008      	adds	r0, #8
    5032:	f016 fa80 	bl	1b536 <net_buf_simple_pull>
	if (buf->len != len) {
    5036:	89a3      	ldrh	r3, [r4, #12]
    5038:	429e      	cmp	r6, r3
    503a:	d003      	beq.n	5044 <hci_acl+0x44>
		net_buf_unref(buf);
    503c:	4620      	mov	r0, r4
    503e:	f016 f9e1 	bl	1b404 <net_buf_unref>
		return;
    5042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5044:	89e3      	ldrh	r3, [r4, #14]
    5046:	442b      	add	r3, r5
    5048:	3303      	adds	r3, #3
    504a:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    504e:	8858      	ldrh	r0, [r3, #2]
    5050:	f002 fc7e 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    5054:	4606      	mov	r6, r0
    5056:	b180      	cbz	r0, 507a <hci_acl+0x7a>
    5058:	89e3      	ldrh	r3, [r4, #14]
    505a:	441d      	add	r5, r3
    505c:	3503      	adds	r5, #3
    505e:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    5062:	f003 f83b 	bl	80dc <bt_conn_get_id>
    5066:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    5068:	463a      	mov	r2, r7
    506a:	4621      	mov	r1, r4
    506c:	4630      	mov	r0, r6
    506e:	f002 fb23 	bl	76b8 <bt_conn_recv>
	bt_conn_unref(conn);
    5072:	4630      	mov	r0, r6
    5074:	f002 fcf0 	bl	7a58 <bt_conn_unref>
    5078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    507a:	4620      	mov	r0, r4
    507c:	f016 f9c2 	bl	1b404 <net_buf_unref>
		return;
    5080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005082 <update_sec_level>:
{
    5082:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    5084:	7a83      	ldrb	r3, [r0, #10]
    5086:	b18b      	cbz	r3, 50ac <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    5088:	6f03      	ldr	r3, [r0, #112]	; 0x70
    508a:	b1ab      	cbz	r3, 50b8 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    508c:	f3bf 8f5b 	dmb	ish
    5090:	689b      	ldr	r3, [r3, #8]
    5092:	f3bf 8f5b 	dmb	ish
    5096:	f013 0f01 	tst.w	r3, #1
    509a:	d00d      	beq.n	50b8 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    509c:	6f03      	ldr	r3, [r0, #112]	; 0x70
    509e:	899b      	ldrh	r3, [r3, #12]
    50a0:	f013 0f20 	tst.w	r3, #32
    50a4:	d005      	beq.n	50b2 <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    50a6:	2304      	movs	r3, #4
    50a8:	7203      	strb	r3, [r0, #8]
    50aa:	e007      	b.n	50bc <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    50ac:	2301      	movs	r3, #1
    50ae:	7203      	strb	r3, [r0, #8]
		return;
    50b0:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    50b2:	2303      	movs	r3, #3
    50b4:	7203      	strb	r3, [r0, #8]
    50b6:	e001      	b.n	50bc <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    50b8:	2302      	movs	r3, #2
    50ba:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    50bc:	7a42      	ldrb	r2, [r0, #9]
    50be:	7a03      	ldrb	r3, [r0, #8]
    50c0:	429a      	cmp	r2, r3
    50c2:	d800      	bhi.n	50c6 <update_sec_level+0x44>
    50c4:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    50c6:	2105      	movs	r1, #5
    50c8:	f002 fe8a 	bl	7de0 <bt_conn_disconnect>
    50cc:	e7fa      	b.n	50c4 <update_sec_level+0x42>

000050ce <hci_encrypt_change>:
{
    50ce:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    50d0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    50d2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    50d6:	f002 fc3b 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    50da:	b1e0      	cbz	r0, 5116 <hci_encrypt_change+0x48>
    50dc:	4604      	mov	r4, r0
	if (evt->status) {
    50de:	782b      	ldrb	r3, [r5, #0]
    50e0:	b13b      	cbz	r3, 50f2 <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    50e2:	7883      	ldrb	r3, [r0, #2]
    50e4:	b90b      	cbnz	r3, 50ea <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    50e6:	7a03      	ldrb	r3, [r0, #8]
    50e8:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    50ea:	4620      	mov	r0, r4
    50ec:	f002 fcb4 	bl	7a58 <bt_conn_unref>
		return;
    50f0:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    50f2:	78eb      	ldrb	r3, [r5, #3]
    50f4:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    50f6:	7882      	ldrb	r2, [r0, #2]
    50f8:	b91a      	cbnz	r2, 5102 <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    50fa:	b96b      	cbnz	r3, 5118 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    50fc:	4620      	mov	r0, r4
    50fe:	f7ff ffc0 	bl	5082 <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    5102:	7829      	ldrb	r1, [r5, #0]
    5104:	4620      	mov	r0, r4
    5106:	f003 fbcb 	bl	88a0 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    510a:	4620      	mov	r0, r4
    510c:	f002 fa9e 	bl	764c <bt_conn_security_changed>
	bt_conn_unref(conn);
    5110:	4620      	mov	r0, r4
    5112:	f002 fca1 	bl	7a58 <bt_conn_unref>
    5116:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    5118:	f008 fafe 	bl	d718 <bt_smp_update_keys>
    511c:	e7ee      	b.n	50fc <hci_encrypt_change+0x2e>

0000511e <hci_encrypt_key_refresh_complete>:
{
    511e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    5120:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5122:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5126:	f002 fc13 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    512a:	b170      	cbz	r0, 514a <hci_encrypt_key_refresh_complete+0x2c>
    512c:	4604      	mov	r4, r0
	if (evt->status) {
    512e:	7829      	ldrb	r1, [r5, #0]
    5130:	b961      	cbnz	r1, 514c <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    5132:	7883      	ldrb	r3, [r0, #2]
    5134:	b16b      	cbz	r3, 5152 <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    5136:	7829      	ldrb	r1, [r5, #0]
    5138:	4620      	mov	r0, r4
    513a:	f003 fbb1 	bl	88a0 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    513e:	4620      	mov	r0, r4
    5140:	f002 fa84 	bl	764c <bt_conn_security_changed>
	bt_conn_unref(conn);
    5144:	4620      	mov	r0, r4
    5146:	f002 fc87 	bl	7a58 <bt_conn_unref>
    514a:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    514c:	f003 fba8 	bl	88a0 <bt_l2cap_encrypt_change>
		return;
    5150:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    5152:	f008 fae1 	bl	d718 <bt_smp_update_keys>
		update_sec_level(conn);
    5156:	4620      	mov	r0, r4
    5158:	f7ff ff93 	bl	5082 <update_sec_level>
    515c:	e7eb      	b.n	5136 <hci_encrypt_key_refresh_complete+0x18>

0000515e <find_id_addr>:
{
    515e:	b510      	push	{r4, lr}
    5160:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    5162:	f008 fbe3 	bl	d92c <bt_keys_find_irk>
		if (keys) {
    5166:	b100      	cbz	r0, 516a <find_id_addr+0xc>
			return &keys->addr;
    5168:	bd10      	pop	{r4, pc}
	return addr;
    516a:	4620      	mov	r0, r4
}
    516c:	bd10      	pop	{r4, pc}
	...

00005170 <update_conn_param>:
{
    5170:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    5172:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    5176:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    5178:	b12b      	cbz	r3, 5186 <update_conn_param+0x16>
    517a:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    517e:	4803      	ldr	r0, [pc, #12]	; (518c <update_conn_param+0x1c>)
    5180:	f025 fad4 	bl	2a72c <k_delayed_work_submit_to_queue>
    5184:	bd08      	pop	{r3, pc}
    5186:	2200      	movs	r2, #0
    5188:	e7f9      	b.n	517e <update_conn_param+0xe>
    518a:	bf00      	nop
    518c:	200030f0 	.word	0x200030f0

00005190 <le_data_len_change>:
{
    5190:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    5192:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5194:	8818      	ldrh	r0, [r3, #0]
    5196:	f002 fbdb 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    519a:	b198      	cbz	r0, 51c4 <le_data_len_change+0x34>
    519c:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    519e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    51a0:	f3bf 8f5b 	dmb	ish
    51a4:	e853 2f00 	ldrex	r2, [r3]
    51a8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    51ac:	e843 1000 	strex	r0, r1, [r3]
    51b0:	2800      	cmp	r0, #0
    51b2:	d1f7      	bne.n	51a4 <le_data_len_change+0x14>
    51b4:	f3bf 8f5b 	dmb	ish
    51b8:	f412 7f80 	tst.w	r2, #256	; 0x100
    51bc:	d103      	bne.n	51c6 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    51be:	4620      	mov	r0, r4
    51c0:	f002 fc4a 	bl	7a58 <bt_conn_unref>
    51c4:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    51c6:	4620      	mov	r0, r4
    51c8:	f7ff ffd2 	bl	5170 <update_conn_param>
    51cc:	e7f7      	b.n	51be <le_data_len_change+0x2e>
	...

000051d0 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    51d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    51d2:	4b12      	ldr	r3, [pc, #72]	; (521c <le_data_len_change+0x4c>)
    51d4:	e9d3 4500 	ldrd	r4, r5, [r3]
    51d8:	2400      	movs	r4, #0
    51da:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    51de:	ea54 0305 	orrs.w	r3, r4, r5
    51e2:	d008      	beq.n	51f6 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    51e4:	4b0e      	ldr	r3, [pc, #56]	; (5220 <le_data_len_change+0x50>)
    51e6:	e9d3 4500 	ldrd	r4, r5, [r3]
    51ea:	f004 0440 	and.w	r4, r4, #64	; 0x40
    51ee:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    51f0:	ea54 0305 	orrs.w	r3, r4, r5
    51f4:	d100      	bne.n	51f8 <le_data_len_change+0x28>
    51f6:	bd38      	pop	{r3, r4, r5, pc}
    51f8:	4613      	mov	r3, r2
    51fa:	460d      	mov	r5, r1
    51fc:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    51fe:	220a      	movs	r2, #10
    5200:	2107      	movs	r1, #7
    5202:	4618      	mov	r0, r3
    5204:	f008 fcf0 	bl	dbe8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    5208:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    520a:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    520c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    520e:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    5210:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    5212:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    5214:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    5216:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    5218:	8103      	strh	r3, [r0, #8]
    521a:	e7ec      	b.n	51f6 <le_data_len_change+0x26>
    521c:	2000c0f8 	.word	0x2000c0f8
    5220:	2000c100 	.word	0x2000c100

00005224 <le_conn_update_complete>:
{
    5224:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    5226:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5228:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    522c:	f002 fb90 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    5230:	b128      	cbz	r0, 523e <le_conn_update_complete+0x1a>
    5232:	4605      	mov	r5, r0
	if (!evt->status) {
    5234:	7823      	ldrb	r3, [r4, #0]
    5236:	b11b      	cbz	r3, 5240 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    5238:	4628      	mov	r0, r5
    523a:	f002 fc0d 	bl	7a58 <bt_conn_unref>
    523e:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    5240:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    5244:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    5248:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    524c:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5250:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    5254:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    5258:	f002 f912 	bl	7480 <notify_le_param_updated>
    525c:	e7ec      	b.n	5238 <le_conn_update_complete+0x14>
	...

00005260 <le_conn_update_complete>:
{
    5260:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5262:	4b14      	ldr	r3, [pc, #80]	; (52b4 <le_conn_update_complete+0x54>)
    5264:	e9d3 4500 	ldrd	r4, r5, [r3]
    5268:	2400      	movs	r4, #0
    526a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    526e:	ea54 0305 	orrs.w	r3, r4, r5
    5272:	d008      	beq.n	5286 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    5274:	4b10      	ldr	r3, [pc, #64]	; (52b8 <le_conn_update_complete+0x58>)
    5276:	e9d3 4500 	ldrd	r4, r5, [r3]
    527a:	f004 0404 	and.w	r4, r4, #4
    527e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5280:	ea54 0305 	orrs.w	r3, r4, r5
    5284:	d100      	bne.n	5288 <le_conn_update_complete+0x28>
    5286:	bd38      	pop	{r3, r4, r5, pc}
    5288:	4613      	mov	r3, r2
    528a:	460d      	mov	r5, r1
    528c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    528e:	2209      	movs	r2, #9
    5290:	2103      	movs	r1, #3
    5292:	4618      	mov	r0, r3
    5294:	f008 fca8 	bl	dbe8 <meta_evt>
	sep->status = radio_cu->status;
    5298:	78e3      	ldrb	r3, [r4, #3]
    529a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    529c:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    52a0:	88a3      	ldrh	r3, [r4, #4]
    52a2:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    52a6:	88e3      	ldrh	r3, [r4, #6]
    52a8:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    52ac:	8923      	ldrh	r3, [r4, #8]
    52ae:	f8a0 3007 	strh.w	r3, [r0, #7]
    52b2:	e7e8      	b.n	5286 <le_conn_update_complete+0x26>
    52b4:	2000c0f8 	.word	0x2000c0f8
    52b8:	2000c100 	.word	0x2000c100

000052bc <hci_cmd_done>:
{
    52bc:	b538      	push	{r3, r4, r5, lr}
    52be:	460d      	mov	r5, r1
    52c0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    52c2:	7990      	ldrb	r0, [r2, #6]
    52c4:	f016 f824 	bl	1b310 <net_buf_pool_get>
    52c8:	4b0b      	ldr	r3, [pc, #44]	; (52f8 <hci_cmd_done+0x3c>)
    52ca:	4283      	cmp	r3, r0
    52cc:	d000      	beq.n	52d0 <hci_cmd_done+0x14>
    52ce:	bd38      	pop	{r3, r4, r5, pc}
    52d0:	f104 0210 	add.w	r2, r4, #16
    52d4:	89e3      	ldrh	r3, [r4, #14]
    52d6:	4413      	add	r3, r2
    52d8:	3303      	adds	r3, #3
    52da:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    52de:	6859      	ldr	r1, [r3, #4]
    52e0:	2900      	cmp	r1, #0
    52e2:	d0f4      	beq.n	52ce <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    52e4:	705d      	strb	r5, [r3, #1]
    52e6:	89e3      	ldrh	r3, [r4, #14]
    52e8:	441a      	add	r2, r3
    52ea:	3203      	adds	r2, #3
    52ec:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    52f0:	6850      	ldr	r0, [r2, #4]
    52f2:	f024 fbd2 	bl	29a9a <_impl_k_sem_give>
    52f6:	e7ea      	b.n	52ce <hci_cmd_done+0x12>
    52f8:	2000d6ac 	.word	0x2000d6ac

000052fc <hci_cmd_complete>:
{
    52fc:	b570      	push	{r4, r5, r6, lr}
    52fe:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    5300:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    5304:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    5308:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    530a:	2103      	movs	r1, #3
    530c:	f016 f913 	bl	1b536 <net_buf_simple_pull>
	status = buf->data[0];
    5310:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    5312:	4622      	mov	r2, r4
    5314:	7819      	ldrb	r1, [r3, #0]
    5316:	4630      	mov	r0, r6
    5318:	f7ff ffd0 	bl	52bc <hci_cmd_done>
	if (ncmd) {
    531c:	b905      	cbnz	r5, 5320 <hci_cmd_complete+0x24>
    531e:	bd70      	pop	{r4, r5, r6, pc}
    5320:	4801      	ldr	r0, [pc, #4]	; (5328 <hci_cmd_complete+0x2c>)
    5322:	f024 fbba 	bl	29a9a <_impl_k_sem_give>
}
    5326:	e7fa      	b.n	531e <hci_cmd_complete+0x22>
    5328:	2000beb0 	.word	0x2000beb0

0000532c <hci_cmd_status>:
{
    532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    532e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    5330:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    5334:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    5336:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    5338:	2104      	movs	r1, #4
    533a:	f016 f8fc 	bl	1b536 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    533e:	462a      	mov	r2, r5
    5340:	7821      	ldrb	r1, [r4, #0]
    5342:	4638      	mov	r0, r7
    5344:	f7ff ffba 	bl	52bc <hci_cmd_done>
	if (ncmd) {
    5348:	b906      	cbnz	r6, 534c <hci_cmd_status+0x20>
    534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    534c:	4801      	ldr	r0, [pc, #4]	; (5354 <hci_cmd_status+0x28>)
    534e:	f024 fba4 	bl	29a9a <_impl_k_sem_give>
}
    5352:	e7fa      	b.n	534a <hci_cmd_status+0x1e>
    5354:	2000beb0 	.word	0x2000beb0

00005358 <hci_num_completed_packets>:
{
    5358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    535c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    5360:	2700      	movs	r7, #0
    5362:	e026      	b.n	53b2 <hci_num_completed_packets+0x5a>
    5364:	f386 8811 	msr	BASEPRI, r6
			continue;
    5368:	e022      	b.n	53b0 <hci_num_completed_packets+0x58>
    536a:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    536e:	b1e1      	cbz	r1, 53aa <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    5370:	f104 001c 	add.w	r0, r4, #28
    5374:	f023 fffa 	bl	2936c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    5378:	4620      	mov	r0, r4
    537a:	f002 f85f 	bl	743c <bt_conn_get_pkts>
    537e:	f024 fb8c 	bl	29a9a <_impl_k_sem_give>
		while (count--) {
    5382:	4635      	mov	r5, r6
    5384:	1e6b      	subs	r3, r5, #1
    5386:	b29e      	uxth	r6, r3
    5388:	b17d      	cbz	r5, 53aa <hci_num_completed_packets+0x52>
	__asm__ volatile(
    538a:	f04f 0220 	mov.w	r2, #32
    538e:	f3ef 8311 	mrs	r3, BASEPRI
    5392:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    5396:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    5398:	2900      	cmp	r1, #0
    539a:	d0e6      	beq.n	536a <hci_num_completed_packets+0x12>
	list->head = node->next;
    539c:	680a      	ldr	r2, [r1, #0]
    539e:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    53a0:	69a0      	ldr	r0, [r4, #24]
    53a2:	4281      	cmp	r1, r0
    53a4:	d1e1      	bne.n	536a <hci_num_completed_packets+0x12>
		list->tail = list->head;
    53a6:	61a2      	str	r2, [r4, #24]
    53a8:	e7df      	b.n	536a <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    53aa:	4620      	mov	r0, r4
    53ac:	f002 fb54 	bl	7a58 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    53b0:	3701      	adds	r7, #1
    53b2:	f898 3000 	ldrb.w	r3, [r8]
    53b6:	429f      	cmp	r7, r3
    53b8:	da13      	bge.n	53e2 <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    53ba:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    53be:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    53c2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    53c6:	f04f 0320 	mov.w	r3, #32
    53ca:	f3ef 8611 	mrs	r6, BASEPRI
    53ce:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    53d2:	f002 fabd 	bl	7950 <bt_conn_lookup_handle>
		if (!conn) {
    53d6:	4604      	mov	r4, r0
    53d8:	2800      	cmp	r0, #0
    53da:	d0c3      	beq.n	5364 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    53dc:	f386 8811 	msr	BASEPRI, r6
    53e0:	e7d0      	b.n	5384 <hci_num_completed_packets+0x2c>
}
    53e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000053e8 <bt_hci_cmd_create>:
{
    53e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ea:	4607      	mov	r7, r0
    53ec:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    53ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    53f2:	4812      	ldr	r0, [pc, #72]	; (543c <bt_hci_cmd_create+0x54>)
    53f4:	f015 ff98 	bl	1b328 <net_buf_alloc>
    53f8:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    53fa:	2100      	movs	r1, #0
    53fc:	f015 ffef 	bl	1b3de <net_buf_reserve>
    5400:	f104 0310 	add.w	r3, r4, #16
    5404:	89e2      	ldrh	r2, [r4, #14]
    5406:	441a      	add	r2, r3
    5408:	3203      	adds	r2, #3
    540a:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    540e:	2100      	movs	r1, #0
    5410:	7011      	strb	r1, [r2, #0]
    5412:	89e2      	ldrh	r2, [r4, #14]
    5414:	441a      	add	r2, r3
    5416:	3203      	adds	r2, #3
    5418:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    541c:	8057      	strh	r7, [r2, #2]
    541e:	89e2      	ldrh	r2, [r4, #14]
    5420:	4413      	add	r3, r2
    5422:	3303      	adds	r3, #3
    5424:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    5428:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    542a:	2103      	movs	r1, #3
    542c:	f104 0008 	add.w	r0, r4, #8
    5430:	f016 f834 	bl	1b49c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    5434:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    5436:	7085      	strb	r5, [r0, #2]
}
    5438:	4620      	mov	r0, r4
    543a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    543c:	2000d6ac 	.word	0x2000d6ac

00005440 <bt_hci_cmd_send_sync>:
{
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	b086      	sub	sp, #24
    5444:	4616      	mov	r6, r2
	if (!buf) {
    5446:	460d      	mov	r5, r1
    5448:	b329      	cbz	r1, 5496 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    544a:	2201      	movs	r2, #1
    544c:	2100      	movs	r1, #0
    544e:	4668      	mov	r0, sp
    5450:	f024 fb1a 	bl	29a88 <_impl_k_sem_init>
    5454:	f105 0410 	add.w	r4, r5, #16
    5458:	89eb      	ldrh	r3, [r5, #14]
    545a:	4423      	add	r3, r4
    545c:	3303      	adds	r3, #3
    545e:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    5462:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    5466:	4628      	mov	r0, r5
    5468:	f015 ffe8 	bl	1b43c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    546c:	4629      	mov	r1, r5
    546e:	4813      	ldr	r0, [pc, #76]	; (54bc <bt_hci_cmd_send_sync+0x7c>)
    5470:	f015 ffba 	bl	1b3e8 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5474:	f242 7110 	movw	r1, #10000	; 0x2710
    5478:	4668      	mov	r0, sp
    547a:	f024 fb21 	bl	29ac0 <_impl_k_sem_take>
    547e:	89eb      	ldrh	r3, [r5, #14]
    5480:	441c      	add	r4, r3
    5482:	3403      	adds	r4, #3
    5484:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    5488:	7863      	ldrb	r3, [r4, #1]
    548a:	b963      	cbnz	r3, 54a6 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    548c:	b18e      	cbz	r6, 54b2 <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    548e:	6035      	str	r5, [r6, #0]
		err = 0;
    5490:	2000      	movs	r0, #0
}
    5492:	b006      	add	sp, #24
    5494:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    5496:	f7ff ffa7 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    549a:	4605      	mov	r5, r0
    549c:	2800      	cmp	r0, #0
    549e:	d1d4      	bne.n	544a <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    54a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    54a4:	e7f5      	b.n	5492 <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    54a6:	4628      	mov	r0, r5
    54a8:	f015 ffac 	bl	1b404 <net_buf_unref>
		err = -EIO;
    54ac:	f06f 0004 	mvn.w	r0, #4
    54b0:	e7ef      	b.n	5492 <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    54b2:	4628      	mov	r0, r5
    54b4:	f015 ffa6 	bl	1b404 <net_buf_unref>
		err = 0;
    54b8:	2000      	movs	r0, #0
    54ba:	e7ea      	b.n	5492 <bt_hci_cmd_send_sync+0x52>
    54bc:	2000bedc 	.word	0x2000bedc

000054c0 <common_init>:
{
    54c0:	b510      	push	{r4, lr}
    54c2:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    54c4:	aa01      	add	r2, sp, #4
    54c6:	2100      	movs	r1, #0
    54c8:	f640 4003 	movw	r0, #3075	; 0xc03
    54cc:	f7ff ffb8 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    54d0:	4604      	mov	r4, r0
    54d2:	b110      	cbz	r0, 54da <common_init+0x1a>
}
    54d4:	4620      	mov	r0, r4
    54d6:	b002      	add	sp, #8
    54d8:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    54da:	9801      	ldr	r0, [sp, #4]
    54dc:	f7ff fce6 	bl	4eac <hci_reset_complete>
	net_buf_unref(rsp);
    54e0:	ac02      	add	r4, sp, #8
    54e2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    54e6:	f015 ff8d 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    54ea:	4622      	mov	r2, r4
    54ec:	2100      	movs	r1, #0
    54ee:	f241 0003 	movw	r0, #4099	; 0x1003
    54f2:	f7ff ffa5 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    54f6:	4604      	mov	r4, r0
    54f8:	2800      	cmp	r0, #0
    54fa:	d1eb      	bne.n	54d4 <common_init+0x14>
	read_local_features_complete(rsp);
    54fc:	9801      	ldr	r0, [sp, #4]
    54fe:	f7ff fced 	bl	4edc <read_local_features_complete>
	net_buf_unref(rsp);
    5502:	ac02      	add	r4, sp, #8
    5504:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5508:	f015 ff7c 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    550c:	4622      	mov	r2, r4
    550e:	2100      	movs	r1, #0
    5510:	f241 0001 	movw	r0, #4097	; 0x1001
    5514:	f7ff ff94 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5518:	4604      	mov	r4, r0
    551a:	2800      	cmp	r0, #0
    551c:	d1da      	bne.n	54d4 <common_init+0x14>
	read_local_ver_complete(rsp);
    551e:	9801      	ldr	r0, [sp, #4]
    5520:	f7ff fc72 	bl	4e08 <read_local_ver_complete>
	net_buf_unref(rsp);
    5524:	ac02      	add	r4, sp, #8
    5526:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    552a:	f015 ff6b 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    552e:	4622      	mov	r2, r4
    5530:	2100      	movs	r1, #0
    5532:	f241 0009 	movw	r0, #4105	; 0x1009
    5536:	f7ff ff83 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    553a:	4604      	mov	r4, r0
    553c:	2800      	cmp	r0, #0
    553e:	d1c9      	bne.n	54d4 <common_init+0x14>
	read_bdaddr_complete(rsp);
    5540:	9801      	ldr	r0, [sp, #4]
    5542:	f7ff fcd5 	bl	4ef0 <read_bdaddr_complete>
	net_buf_unref(rsp);
    5546:	ac02      	add	r4, sp, #8
    5548:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    554c:	f015 ff5a 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    5550:	4622      	mov	r2, r4
    5552:	2100      	movs	r1, #0
    5554:	f241 0002 	movw	r0, #4098	; 0x1002
    5558:	f7ff ff72 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    555c:	4604      	mov	r4, r0
    555e:	2800      	cmp	r0, #0
    5560:	d1b8      	bne.n	54d4 <common_init+0x14>
	read_supported_commands_complete(rsp);
    5562:	9801      	ldr	r0, [sp, #4]
    5564:	f7ff fcd2 	bl	4f0c <read_supported_commands_complete>
	net_buf_unref(rsp);
    5568:	9801      	ldr	r0, [sp, #4]
    556a:	f015 ff4b 	bl	1b404 <net_buf_unref>
	return 0;
    556e:	e7b1      	b.n	54d4 <common_init+0x14>

00005570 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    5570:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    5572:	4b3a      	ldr	r3, [pc, #232]	; (565c <common_init+0xec>)
    5574:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    5578:	2a00      	cmp	r2, #0
    557a:	d15e      	bne.n	563a <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    557c:	2200      	movs	r2, #0
    557e:	4b37      	ldr	r3, [pc, #220]	; (565c <common_init+0xec>)
    5580:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    5584:	4c35      	ldr	r4, [pc, #212]	; (565c <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    5586:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    558a:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    558e:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    5592:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    5596:	f00a fa47 	bl	fa28 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    559a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    559e:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    55a2:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    55a6:	462b      	mov	r3, r5
    55a8:	440a      	add	r2, r1
    55aa:	2108      	movs	r1, #8
    55ac:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    55b0:	f00a fa3a 	bl	fa28 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    55b4:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    55b8:	2202      	movs	r2, #2
    55ba:	2124      	movs	r1, #36	; 0x24
    55bc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    55c0:	f00a fa32 	bl	fa28 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    55c4:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    55c8:	3a01      	subs	r2, #1
    55ca:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    55ce:	b292      	uxth	r2, r2
    55d0:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    55d4:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    55d8:	f00a fa26 	bl	fa28 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    55dc:	4628      	mov	r0, r5
    55de:	f00a fa48 	bl	fa72 <mem_acquire>
	LL_ASSERT(link);
    55e2:	b3a0      	cbz	r0, 564e <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    55e4:	4c1d      	ldr	r4, [pc, #116]	; (565c <common_init+0xec>)
    55e6:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    55ea:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    55ee:	f00a faa5 	bl	fb3c <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    55f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    55f6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    55fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    55fe:	20ff      	movs	r0, #255	; 0xff
    5600:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    5604:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    5608:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    560c:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    5610:	231f      	movs	r3, #31
    5612:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    5616:	2325      	movs	r3, #37	; 0x25
    5618:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    561c:	231b      	movs	r3, #27
    561e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    5622:	f44f 73a4 	mov.w	r3, #328	; 0x148
    5626:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    562a:	2303      	movs	r3, #3
    562c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    5630:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    5634:	f00c ff58 	bl	124e8 <packet_rx_allocate>
    5638:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    563a:	4618      	mov	r0, r3
    563c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    5640:	f44f 71aa 	mov.w	r1, #340	; 0x154
    5644:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    5648:	f00a f9ee 	bl	fa28 <mem_init>
    564c:	e79a      	b.n	5584 <common_init+0x14>
	LL_ASSERT(link);
    564e:	4040      	eors	r0, r0
    5650:	f380 8811 	msr	BASEPRI, r0
    5654:	f04f 0004 	mov.w	r0, #4
    5658:	df02      	svc	2
    565a:	bf00      	nop
    565c:	2000144c 	.word	0x2000144c

00005660 <le_set_event_mask>:
{
    5660:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    5662:	2108      	movs	r1, #8
    5664:	f242 0001 	movw	r0, #8193	; 0x2001
    5668:	f7ff febe 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    566c:	2800      	cmp	r0, #0
    566e:	d042      	beq.n	56f6 <le_set_event_mask+0x96>
    5670:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    5672:	2108      	movs	r1, #8
    5674:	4408      	add	r0, r1
    5676:	f015 ff11 	bl	1b49c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    567a:	4b20      	ldr	r3, [pc, #128]	; (56fc <le_set_event_mask+0x9c>)
    567c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    5680:	f011 0f02 	tst.w	r1, #2
    5684:	d131      	bne.n	56ea <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    5686:	220f      	movs	r2, #15
    5688:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    568a:	f011 0f20 	tst.w	r1, #32
    568e:	d001      	beq.n	5694 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    5690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    5694:	4d19      	ldr	r5, [pc, #100]	; (56fc <le_set_event_mask+0x9c>)
    5696:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    569a:	f015 0f09 	tst.w	r5, #9
    569e:	d001      	beq.n	56a4 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    56a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    56a4:	f011 0f01 	tst.w	r1, #1
    56a8:	d001      	beq.n	56ae <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    56aa:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    56ae:	4913      	ldr	r1, [pc, #76]	; (56fc <le_set_event_mask+0x9c>)
    56b0:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    56b4:	f001 0106 	and.w	r1, r1, #6
    56b8:	2906      	cmp	r1, #6
    56ba:	d019      	beq.n	56f0 <le_set_event_mask+0x90>
	dst[0] = val;
    56bc:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    56be:	f3c2 2107 	ubfx	r1, r2, #8, #8
    56c2:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    56c4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    56c6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    56c8:	0a12      	lsrs	r2, r2, #8
    56ca:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    56cc:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    56ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
    56d2:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    56d4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    56d6:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    56d8:	0a1b      	lsrs	r3, r3, #8
    56da:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    56dc:	2200      	movs	r2, #0
    56de:	4621      	mov	r1, r4
    56e0:	f242 0001 	movw	r0, #8193	; 0x2001
    56e4:	f7ff feac 	bl	5440 <bt_hci_cmd_send_sync>
    56e8:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    56ea:	222f      	movs	r2, #47	; 0x2f
    56ec:	2300      	movs	r3, #0
    56ee:	e7cc      	b.n	568a <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    56f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    56f4:	e7e2      	b.n	56bc <le_set_event_mask+0x5c>
		return -ENOBUFS;
    56f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    56fa:	bd38      	pop	{r3, r4, r5, pc}
    56fc:	2000be08 	.word	0x2000be08

00005700 <le_set_event_mask>:
{
    5700:	b570      	push	{r4, r5, r6, lr}
    5702:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    5704:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    5706:	79da      	ldrb	r2, [r3, #7]
    5708:	7999      	ldrb	r1, [r3, #6]
    570a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    570e:	7958      	ldrb	r0, [r3, #5]
    5710:	791a      	ldrb	r2, [r3, #4]
    5712:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5716:	2400      	movs	r4, #0
    5718:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    571c:	78d9      	ldrb	r1, [r3, #3]
    571e:	789a      	ldrb	r2, [r3, #2]
    5720:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5724:	7859      	ldrb	r1, [r3, #1]
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    572c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5730:	ea44 0003 	orr.w	r0, r4, r3
    5734:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    5736:	4b04      	ldr	r3, [pc, #16]	; (5748 <le_set_event_mask+0x48>)
    5738:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    573c:	2101      	movs	r1, #1
    573e:	4630      	mov	r0, r6
    5740:	f008 f9b8 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    5744:	7004      	strb	r4, [r0, #0]
    5746:	bd70      	pop	{r4, r5, r6, pc}
    5748:	2000c100 	.word	0x2000c100

0000574c <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    574c:	4b4c      	ldr	r3, [pc, #304]	; (5880 <le_init+0x134>)
    574e:	7e9b      	ldrb	r3, [r3, #26]
    5750:	f013 0f40 	tst.w	r3, #64	; 0x40
    5754:	f000 808c 	beq.w	5870 <le_init+0x124>
{
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    575c:	aa01      	add	r2, sp, #4
    575e:	2100      	movs	r1, #0
    5760:	f242 0003 	movw	r0, #8195	; 0x2003
    5764:	f7ff fe6c 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5768:	4603      	mov	r3, r0
    576a:	b110      	cbz	r0, 5772 <le_init+0x26>
}
    576c:	4618      	mov	r0, r3
    576e:	b002      	add	sp, #8
    5770:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    5772:	9801      	ldr	r0, [sp, #4]
    5774:	f7ff fbd4 	bl	4f20 <read_le_features_complete>
	net_buf_unref(rsp);
    5778:	ac02      	add	r4, sp, #8
    577a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    577e:	f015 fe41 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5782:	4622      	mov	r2, r4
    5784:	2100      	movs	r1, #0
    5786:	f242 0002 	movw	r0, #8194	; 0x2002
    578a:	f7ff fe59 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    578e:	4603      	mov	r3, r0
    5790:	2800      	cmp	r0, #0
    5792:	d1eb      	bne.n	576c <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    5794:	9801      	ldr	r0, [sp, #4]
    5796:	f7ff fbcd 	bl	4f34 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    579a:	9801      	ldr	r0, [sp, #4]
    579c:	f015 fe32 	bl	1b404 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    57a0:	4b37      	ldr	r3, [pc, #220]	; (5880 <le_init+0x134>)
    57a2:	7e9b      	ldrb	r3, [r3, #26]
    57a4:	f013 0f20 	tst.w	r3, #32
    57a8:	d037      	beq.n	581a <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    57aa:	4b35      	ldr	r3, [pc, #212]	; (5880 <le_init+0x134>)
    57ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    57b0:	f013 0f08 	tst.w	r3, #8
    57b4:	d149      	bne.n	584a <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    57b6:	4b32      	ldr	r3, [pc, #200]	; (5880 <le_init+0x134>)
    57b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    57bc:	f013 0f20 	tst.w	r3, #32
    57c0:	d027      	beq.n	5812 <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    57c2:	466a      	mov	r2, sp
    57c4:	2100      	movs	r1, #0
    57c6:	f242 002f 	movw	r0, #8239	; 0x202f
    57ca:	f7ff fe39 	bl	5440 <bt_hci_cmd_send_sync>
		if (err) {
    57ce:	4603      	mov	r3, r0
    57d0:	2800      	cmp	r0, #0
    57d2:	d1cb      	bne.n	576c <le_init+0x20>
		rp = (void *)rsp->data;
    57d4:	9800      	ldr	r0, [sp, #0]
    57d6:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    57d8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    57dc:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    57e0:	f015 fe10 	bl	1b404 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    57e4:	2104      	movs	r1, #4
    57e6:	f242 0024 	movw	r0, #8228	; 0x2024
    57ea:	f7ff fdfd 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    57ee:	4604      	mov	r4, r0
    57f0:	2800      	cmp	r0, #0
    57f2:	d03a      	beq.n	586a <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    57f4:	2104      	movs	r1, #4
    57f6:	3008      	adds	r0, #8
    57f8:	f015 fe50 	bl	1b49c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    57fc:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    57fe:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5800:	2200      	movs	r2, #0
    5802:	4621      	mov	r1, r4
    5804:	f242 0024 	movw	r0, #8228	; 0x2024
    5808:	f7ff fe1a 	bl	5440 <bt_hci_cmd_send_sync>
		if (err) {
    580c:	4603      	mov	r3, r0
    580e:	2800      	cmp	r0, #0
    5810:	d1ac      	bne.n	576c <le_init+0x20>
	return  le_set_event_mask();
    5812:	f7ff ff25 	bl	5660 <le_set_event_mask>
    5816:	4603      	mov	r3, r0
    5818:	e7a8      	b.n	576c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    581a:	2102      	movs	r1, #2
    581c:	f640 406d 	movw	r0, #3181	; 0xc6d
    5820:	f7ff fde2 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    5824:	4604      	mov	r4, r0
    5826:	b338      	cbz	r0, 5878 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    5828:	2102      	movs	r1, #2
    582a:	3008      	adds	r0, #8
    582c:	f015 fe36 	bl	1b49c <net_buf_simple_add>
		cp_le->le = 0x01;
    5830:	2301      	movs	r3, #1
    5832:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    5834:	2200      	movs	r2, #0
    5836:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5838:	4621      	mov	r1, r4
    583a:	f640 406d 	movw	r0, #3181	; 0xc6d
    583e:	f7ff fdff 	bl	5440 <bt_hci_cmd_send_sync>
		if (err) {
    5842:	4603      	mov	r3, r0
    5844:	2800      	cmp	r0, #0
    5846:	d0b0      	beq.n	57aa <le_init+0x5e>
    5848:	e790      	b.n	576c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    584a:	aa01      	add	r2, sp, #4
    584c:	2100      	movs	r1, #0
    584e:	f242 001c 	movw	r0, #8220	; 0x201c
    5852:	f7ff fdf5 	bl	5440 <bt_hci_cmd_send_sync>
		if (err) {
    5856:	4603      	mov	r3, r0
    5858:	2800      	cmp	r0, #0
    585a:	d187      	bne.n	576c <le_init+0x20>
		le_read_supp_states_complete(rsp);
    585c:	9801      	ldr	r0, [sp, #4]
    585e:	f7ff fae5 	bl	4e2c <le_read_supp_states_complete>
		net_buf_unref(rsp);
    5862:	9801      	ldr	r0, [sp, #4]
    5864:	f015 fdce 	bl	1b404 <net_buf_unref>
    5868:	e7a5      	b.n	57b6 <le_init+0x6a>
			return -ENOBUFS;
    586a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    586e:	e77d      	b.n	576c <le_init+0x20>
		return -ENODEV;
    5870:	f06f 0312 	mvn.w	r3, #18
}
    5874:	4618      	mov	r0, r3
    5876:	4770      	bx	lr
			return -ENOBUFS;
    5878:	f06f 0368 	mvn.w	r3, #104	; 0x68
    587c:	e776      	b.n	576c <le_init+0x20>
    587e:	bf00      	nop
    5880:	2000be08 	.word	0x2000be08

00005884 <br_init>:
{
    5884:	b510      	push	{r4, lr}
    5886:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    5888:	4b0b      	ldr	r3, [pc, #44]	; (58b8 <br_init+0x34>)
    588a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    588e:	b11b      	cbz	r3, 5898 <br_init+0x14>
		return 0;
    5890:	2400      	movs	r4, #0
}
    5892:	4620      	mov	r0, r4
    5894:	b002      	add	sp, #8
    5896:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5898:	aa01      	add	r2, sp, #4
    589a:	2100      	movs	r1, #0
    589c:	f241 0005 	movw	r0, #4101	; 0x1005
    58a0:	f7ff fdce 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    58a4:	4604      	mov	r4, r0
    58a6:	2800      	cmp	r0, #0
    58a8:	d1f3      	bne.n	5892 <br_init+0xe>
	read_buffer_size_complete(rsp);
    58aa:	9801      	ldr	r0, [sp, #4]
    58ac:	f7ff fb58 	bl	4f60 <read_buffer_size_complete>
	net_buf_unref(rsp);
    58b0:	9801      	ldr	r0, [sp, #4]
    58b2:	f015 fda7 	bl	1b404 <net_buf_unref>
	return 0;
    58b6:	e7ec      	b.n	5892 <br_init+0xe>
    58b8:	2000be08 	.word	0x2000be08

000058bc <set_event_mask>:
{
    58bc:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    58be:	2108      	movs	r1, #8
    58c0:	f640 4001 	movw	r0, #3073	; 0xc01
    58c4:	f7ff fd90 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    58c8:	b348      	cbz	r0, 591e <set_event_mask+0x62>
    58ca:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    58cc:	2108      	movs	r1, #8
    58ce:	4408      	add	r0, r1
    58d0:	f015 fde4 	bl	1b49c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    58d4:	4b13      	ldr	r3, [pc, #76]	; (5924 <set_event_mask+0x68>)
    58d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    58da:	f013 0f01 	tst.w	r3, #1
    58de:	d11b      	bne.n	5918 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    58e0:	4a11      	ldr	r2, [pc, #68]	; (5928 <set_event_mask+0x6c>)
    58e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    58e6:	b291      	uxth	r1, r2
	dst[0] = val;
    58e8:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    58ea:	0a09      	lsrs	r1, r1, #8
    58ec:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    58ee:	0c12      	lsrs	r2, r2, #16
    58f0:	b291      	uxth	r1, r2
	dst[0] = val;
    58f2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    58f4:	0a0a      	lsrs	r2, r1, #8
    58f6:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    58f8:	b29a      	uxth	r2, r3
	dst[0] = val;
    58fa:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    58fc:	0a12      	lsrs	r2, r2, #8
    58fe:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    5900:	0c1b      	lsrs	r3, r3, #16
    5902:	b29a      	uxth	r2, r3
	dst[0] = val;
    5904:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    5906:	0a13      	lsrs	r3, r2, #8
    5908:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    590a:	2200      	movs	r2, #0
    590c:	4621      	mov	r1, r4
    590e:	f640 4001 	movw	r0, #3073	; 0xc01
    5912:	f7ff fd95 	bl	5440 <bt_hci_cmd_send_sync>
    5916:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    5918:	4a04      	ldr	r2, [pc, #16]	; (592c <set_event_mask+0x70>)
    591a:	4b05      	ldr	r3, [pc, #20]	; (5930 <set_event_mask+0x74>)
    591c:	e7e3      	b.n	58e6 <set_event_mask+0x2a>
		return -ENOBUFS;
    591e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5922:	bd10      	pop	{r4, pc}
    5924:	2000be08 	.word	0x2000be08
    5928:	02008810 	.word	0x02008810
    592c:	02008890 	.word	0x02008890
    5930:	20008000 	.word	0x20008000

00005934 <set_event_mask>:
{
    5934:	b570      	push	{r4, r5, r6, lr}
    5936:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    5938:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    593a:	79da      	ldrb	r2, [r3, #7]
    593c:	7999      	ldrb	r1, [r3, #6]
    593e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    5942:	7958      	ldrb	r0, [r3, #5]
    5944:	791a      	ldrb	r2, [r3, #4]
    5946:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    594a:	2400      	movs	r4, #0
    594c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5950:	78d9      	ldrb	r1, [r3, #3]
    5952:	789a      	ldrb	r2, [r3, #2]
    5954:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5958:	7859      	ldrb	r1, [r3, #1]
    595a:	781b      	ldrb	r3, [r3, #0]
    595c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5964:	ea44 0003 	orr.w	r0, r4, r3
    5968:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    596a:	4b04      	ldr	r3, [pc, #16]	; (597c <set_event_mask+0x48>)
    596c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5970:	2101      	movs	r1, #1
    5972:	4630      	mov	r0, r6
    5974:	f008 f89e 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    5978:	7004      	strb	r4, [r0, #0]
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	2000c0f8 	.word	0x2000c0f8

00005980 <hci_vs_init>:
{
    5980:	b510      	push	{r4, lr}
    5982:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5984:	aa01      	add	r2, sp, #4
    5986:	2100      	movs	r1, #0
    5988:	f64f 4001 	movw	r0, #64513	; 0xfc01
    598c:	f7ff fd58 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5990:	b108      	cbz	r0, 5996 <hci_vs_init+0x16>
}
    5992:	b002      	add	sp, #8
    5994:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    5996:	ac02      	add	r4, sp, #8
    5998:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    599c:	f015 fd32 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    59a0:	4622      	mov	r2, r4
    59a2:	2100      	movs	r1, #0
    59a4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    59a8:	f7ff fd4a 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    59ac:	2800      	cmp	r0, #0
    59ae:	d1f0      	bne.n	5992 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    59b0:	9b01      	ldr	r3, [sp, #4]
    59b2:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    59b4:	2202      	movs	r2, #2
    59b6:	3101      	adds	r1, #1
    59b8:	480d      	ldr	r0, [pc, #52]	; (59f0 <hci_vs_init+0x70>)
    59ba:	f7fa fc81 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    59be:	ac02      	add	r4, sp, #8
    59c0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    59c4:	f015 fd1e 	bl	1b404 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    59c8:	4622      	mov	r2, r4
    59ca:	2100      	movs	r1, #0
    59cc:	f64f 4003 	movw	r0, #64515	; 0xfc03
    59d0:	f7ff fd36 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    59d4:	2800      	cmp	r0, #0
    59d6:	d1dc      	bne.n	5992 <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    59dc:	2201      	movs	r2, #1
    59de:	4411      	add	r1, r2
    59e0:	4804      	ldr	r0, [pc, #16]	; (59f4 <hci_vs_init+0x74>)
    59e2:	f7fa fc6d 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    59e6:	9801      	ldr	r0, [sp, #4]
    59e8:	f015 fd0c 	bl	1b404 <net_buf_unref>
    59ec:	e7d1      	b.n	5992 <hci_vs_init+0x12>
    59ee:	bf00      	nop
    59f0:	2000be67 	.word	0x2000be67
    59f4:	2000be66 	.word	0x2000be66

000059f8 <set_random_address>:
{
    59f8:	b570      	push	{r4, r5, r6, lr}
    59fa:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    59fc:	2206      	movs	r2, #6
    59fe:	4914      	ldr	r1, [pc, #80]	; (5a50 <set_random_address+0x58>)
    5a00:	f024 ff8a 	bl	2a918 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5a04:	4604      	mov	r4, r0
    5a06:	b908      	cbnz	r0, 5a0c <set_random_address+0x14>
}
    5a08:	4620      	mov	r0, r4
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5a0c:	2106      	movs	r1, #6
    5a0e:	f242 0005 	movw	r0, #8197	; 0x2005
    5a12:	f7ff fce9 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5a16:	4604      	mov	r4, r0
    5a18:	b1b8      	cbz	r0, 5a4a <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    5a1a:	2206      	movs	r2, #6
    5a1c:	4629      	mov	r1, r5
    5a1e:	3008      	adds	r0, #8
    5a20:	f015 fd42 	bl	1b4a8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5a24:	2200      	movs	r2, #0
    5a26:	4621      	mov	r1, r4
    5a28:	f242 0005 	movw	r0, #8197	; 0x2005
    5a2c:	f7ff fd08 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5a30:	4604      	mov	r4, r0
    5a32:	2800      	cmp	r0, #0
    5a34:	d1e8      	bne.n	5a08 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    5a36:	4e07      	ldr	r6, [pc, #28]	; (5a54 <set_random_address+0x5c>)
    5a38:	2206      	movs	r2, #6
    5a3a:	4629      	mov	r1, r5
    5a3c:	f106 0008 	add.w	r0, r6, #8
    5a40:	f7fa fc3e 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5a44:	2301      	movs	r3, #1
    5a46:	71f3      	strb	r3, [r6, #7]
	return 0;
    5a48:	e7de      	b.n	5a08 <set_random_address+0x10>
		return -ENOBUFS;
    5a4a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5a4e:	e7db      	b.n	5a08 <set_random_address+0x10>
    5a50:	2000be10 	.word	0x2000be10
    5a54:	2000be08 	.word	0x2000be08

00005a58 <le_set_private_addr>:
{
    5a58:	b500      	push	{lr}
    5a5a:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5a5c:	2106      	movs	r1, #6
    5a5e:	4668      	mov	r0, sp
    5a60:	f00c f9a6 	bl	11db0 <bt_rand>
	if (err) {
    5a64:	4603      	mov	r3, r0
    5a66:	b118      	cbz	r0, 5a70 <le_set_private_addr+0x18>
}
    5a68:	4618      	mov	r0, r3
    5a6a:	b003      	add	sp, #12
    5a6c:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    5a70:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5a78:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    5a7c:	4668      	mov	r0, sp
    5a7e:	f7ff ffbb 	bl	59f8 <set_random_address>
    5a82:	4603      	mov	r3, r0
    5a84:	e7f0      	b.n	5a68 <le_set_private_addr+0x10>
	...

00005a88 <bt_hci_stop_scanning>:
{
    5a88:	b530      	push	{r4, r5, lr}
    5a8a:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a8c:	f3bf 8f5b 	dmb	ish
    5a90:	4b26      	ldr	r3, [pc, #152]	; (5b2c <bt_hci_stop_scanning+0xa4>)
    5a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a94:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5a98:	f013 0f80 	tst.w	r3, #128	; 0x80
    5a9c:	d03f      	beq.n	5b1e <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    5a9e:	2102      	movs	r1, #2
    5aa0:	f242 000c 	movw	r0, #8204	; 0x200c
    5aa4:	f7ff fca0 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5aa8:	4604      	mov	r4, r0
    5aaa:	2800      	cmp	r0, #0
    5aac:	d03a      	beq.n	5b24 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    5aae:	2102      	movs	r1, #2
    5ab0:	3008      	adds	r0, #8
    5ab2:	f015 fcf3 	bl	1b49c <net_buf_simple_add>
    5ab6:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5ab8:	2202      	movs	r2, #2
    5aba:	2100      	movs	r1, #0
    5abc:	f024 ffc0 	bl	2aa40 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5ac0:	2300      	movs	r3, #0
    5ac2:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    5ac4:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5ac6:	aa01      	add	r2, sp, #4
    5ac8:	4621      	mov	r1, r4
    5aca:	f242 000c 	movw	r0, #8204	; 0x200c
    5ace:	f7ff fcb7 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5ad2:	4604      	mov	r4, r0
    5ad4:	b930      	cbnz	r0, 5ae4 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    5ad6:	9b01      	ldr	r3, [sp, #4]
    5ad8:	689b      	ldr	r3, [r3, #8]
    5ada:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    5adc:	b12c      	cbz	r4, 5aea <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    5ade:	9801      	ldr	r0, [sp, #4]
    5ae0:	f015 fc90 	bl	1b404 <net_buf_unref>
}
    5ae4:	4620      	mov	r0, r4
    5ae6:	b003      	add	sp, #12
    5ae8:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5aea:	4b11      	ldr	r3, [pc, #68]	; (5b30 <bt_hci_stop_scanning+0xa8>)
    5aec:	f3bf 8f5b 	dmb	ish
    5af0:	e853 2f00 	ldrex	r2, [r3]
    5af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5af8:	e843 2100 	strex	r1, r2, [r3]
    5afc:	2900      	cmp	r1, #0
    5afe:	d1f7      	bne.n	5af0 <bt_hci_stop_scanning+0x68>
    5b00:	f3bf 8f5b 	dmb	ish
    5b04:	f3bf 8f5b 	dmb	ish
    5b08:	e853 2f00 	ldrex	r2, [r3]
    5b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    5b10:	e843 2100 	strex	r1, r2, [r3]
    5b14:	2900      	cmp	r1, #0
    5b16:	d1f7      	bne.n	5b08 <bt_hci_stop_scanning+0x80>
    5b18:	f3bf 8f5b 	dmb	ish
    5b1c:	e7df      	b.n	5ade <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    5b1e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5b22:	e7df      	b.n	5ae4 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    5b24:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5b28:	e7dc      	b.n	5ae4 <bt_hci_stop_scanning+0x5c>
    5b2a:	bf00      	nop
    5b2c:	2000be08 	.word	0x2000be08
    5b30:	2000be78 	.word	0x2000be78

00005b34 <set_advertise_enable>:
{
    5b34:	b538      	push	{r3, r4, r5, lr}
    5b36:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5b38:	2101      	movs	r1, #1
    5b3a:	f242 000a 	movw	r0, #8202	; 0x200a
    5b3e:	f7ff fc53 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5b42:	b380      	cbz	r0, 5ba6 <set_advertise_enable+0x72>
    5b44:	4604      	mov	r4, r0
	if (enable) {
    5b46:	b1dd      	cbz	r5, 5b80 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5b48:	2101      	movs	r1, #1
    5b4a:	3008      	adds	r0, #8
    5b4c:	f015 fcb7 	bl	1b4be <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5b50:	2200      	movs	r2, #0
    5b52:	4621      	mov	r1, r4
    5b54:	f242 000a 	movw	r0, #8202	; 0x200a
    5b58:	f7ff fc72 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5b5c:	4603      	mov	r3, r0
    5b5e:	b968      	cbnz	r0, 5b7c <set_advertise_enable+0x48>
	if (enable) {
    5b60:	b99d      	cbnz	r5, 5b8a <set_advertise_enable+0x56>
    5b62:	4a12      	ldr	r2, [pc, #72]	; (5bac <set_advertise_enable+0x78>)
    5b64:	f3bf 8f5b 	dmb	ish
    5b68:	e852 1f00 	ldrex	r1, [r2]
    5b6c:	f021 0120 	bic.w	r1, r1, #32
    5b70:	e842 1000 	strex	r0, r1, [r2]
    5b74:	2800      	cmp	r0, #0
    5b76:	d1f7      	bne.n	5b68 <set_advertise_enable+0x34>
    5b78:	f3bf 8f5b 	dmb	ish
}
    5b7c:	4618      	mov	r0, r3
    5b7e:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5b80:	2100      	movs	r1, #0
    5b82:	3008      	adds	r0, #8
    5b84:	f015 fc9b 	bl	1b4be <net_buf_simple_add_u8>
    5b88:	e7e2      	b.n	5b50 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b8a:	4a08      	ldr	r2, [pc, #32]	; (5bac <set_advertise_enable+0x78>)
    5b8c:	f3bf 8f5b 	dmb	ish
    5b90:	e852 1f00 	ldrex	r1, [r2]
    5b94:	f041 0120 	orr.w	r1, r1, #32
    5b98:	e842 1000 	strex	r0, r1, [r2]
    5b9c:	2800      	cmp	r0, #0
    5b9e:	d1f7      	bne.n	5b90 <set_advertise_enable+0x5c>
    5ba0:	f3bf 8f5b 	dmb	ish
    5ba4:	e7ea      	b.n	5b7c <set_advertise_enable+0x48>
		return -ENOBUFS;
    5ba6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5baa:	e7e7      	b.n	5b7c <set_advertise_enable+0x48>
    5bac:	2000be78 	.word	0x2000be78

00005bb0 <hci_le_create_conn>:
{
    5bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bb2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5bb4:	2119      	movs	r1, #25
    5bb6:	f242 000d 	movw	r0, #8205	; 0x200d
    5bba:	f7ff fc15 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5bbe:	b378      	cbz	r0, 5c20 <hci_le_create_conn+0x70>
    5bc0:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5bc2:	2119      	movs	r1, #25
    5bc4:	3008      	adds	r0, #8
    5bc6:	f015 fc69 	bl	1b49c <net_buf_simple_add>
    5bca:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5bcc:	2219      	movs	r2, #25
    5bce:	2100      	movs	r1, #0
    5bd0:	f024 ff36 	bl	2aa40 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    5bd4:	2600      	movs	r6, #0
    5bd6:	2360      	movs	r3, #96	; 0x60
    5bd8:	7023      	strb	r3, [r4, #0]
    5bda:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    5bdc:	70a3      	strb	r3, [r4, #2]
    5bde:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5be0:	2207      	movs	r2, #7
    5be2:	f105 0156 	add.w	r1, r5, #86	; 0x56
    5be6:	1d60      	adds	r0, r4, #5
    5be8:	f7fa fb6a 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    5bec:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    5bf0:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    5bf2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    5bf6:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5bfa:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    5bfe:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    5c02:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    5c06:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5c0a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5c0e:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    5c12:	4632      	mov	r2, r6
    5c14:	4639      	mov	r1, r7
    5c16:	f242 000d 	movw	r0, #8205	; 0x200d
    5c1a:	f7ff fc11 	bl	5440 <bt_hci_cmd_send_sync>
    5c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    5c20:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005c26 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    5c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c2a:	4682      	mov	sl, r0
    5c2c:	460f      	mov	r7, r1
    5c2e:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5c30:	2120      	movs	r1, #32
    5c32:	f7ff fbd9 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5c36:	2800      	cmp	r0, #0
    5c38:	d03c      	beq.n	5cb4 <set_ad+0x8e>
    5c3a:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    5c3c:	2120      	movs	r1, #32
    5c3e:	3008      	adds	r0, #8
    5c40:	f015 fc2c 	bl	1b49c <net_buf_simple_add>
    5c44:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    5c46:	2220      	movs	r2, #32
    5c48:	2100      	movs	r1, #0
    5c4a:	f024 fef9 	bl	2aa40 <memset>

	for (i = 0; i < ad_len; i++) {
    5c4e:	2600      	movs	r6, #0
    5c50:	4546      	cmp	r6, r8
    5c52:	d228      	bcs.n	5ca6 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    5c54:	7822      	ldrb	r2, [r4, #0]
    5c56:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    5c5a:	786b      	ldrb	r3, [r5, #1]
    5c5c:	4413      	add	r3, r2
    5c5e:	3302      	adds	r3, #2
    5c60:	2b1f      	cmp	r3, #31
    5c62:	dc19      	bgt.n	5c98 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    5c64:	1c53      	adds	r3, r2, #1
    5c66:	b2db      	uxtb	r3, r3
    5c68:	7023      	strb	r3, [r4, #0]
    5c6a:	7869      	ldrb	r1, [r5, #1]
    5c6c:	3101      	adds	r1, #1
    5c6e:	4422      	add	r2, r4
    5c70:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    5c72:	1c58      	adds	r0, r3, #1
    5c74:	b2c0      	uxtb	r0, r0
    5c76:	7020      	strb	r0, [r4, #0]
    5c78:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    5c7c:	4423      	add	r3, r4
    5c7e:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    5c80:	4420      	add	r0, r4
    5c82:	786a      	ldrb	r2, [r5, #1]
    5c84:	6869      	ldr	r1, [r5, #4]
    5c86:	3001      	adds	r0, #1
    5c88:	f7fa fb1a 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    5c8c:	786b      	ldrb	r3, [r5, #1]
    5c8e:	7822      	ldrb	r2, [r4, #0]
    5c90:	4413      	add	r3, r2
    5c92:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    5c94:	3601      	adds	r6, #1
    5c96:	e7db      	b.n	5c50 <set_ad+0x2a>
			net_buf_unref(buf);
    5c98:	4648      	mov	r0, r9
    5c9a:	f015 fbb3 	bl	1b404 <net_buf_unref>
			return -EINVAL;
    5c9e:	f06f 0015 	mvn.w	r0, #21
    5ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5ca6:	2200      	movs	r2, #0
    5ca8:	4649      	mov	r1, r9
    5caa:	4650      	mov	r0, sl
    5cac:	f7ff fbc8 	bl	5440 <bt_hci_cmd_send_sync>
    5cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    5cb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005cbc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    5cbc:	8802      	ldrh	r2, [r0, #0]
    5cbe:	8843      	ldrh	r3, [r0, #2]
    5cc0:	429a      	cmp	r2, r3
    5cc2:	d81a      	bhi.n	5cfa <bt_le_conn_params_valid+0x3e>
    5cc4:	2a05      	cmp	r2, #5
    5cc6:	d91a      	bls.n	5cfe <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    5cc8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5ccc:	d819      	bhi.n	5d02 <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    5cce:	8881      	ldrh	r1, [r0, #4]
    5cd0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    5cd4:	d217      	bcs.n	5d06 <bt_le_conn_params_valid+0x4a>
{
    5cd6:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    5cd8:	88c0      	ldrh	r0, [r0, #6]
    5cda:	f1a0 020a 	sub.w	r2, r0, #10
    5cde:	b292      	uxth	r2, r2
    5ce0:	f640 4476 	movw	r4, #3190	; 0xc76
    5ce4:	42a2      	cmp	r2, r4
    5ce6:	d810      	bhi.n	5d0a <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    5ce8:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    5cec:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    5cf0:	da01      	bge.n	5cf6 <bt_le_conn_params_valid+0x3a>
	return true;
    5cf2:	2001      	movs	r0, #1
    5cf4:	e00a      	b.n	5d0c <bt_le_conn_params_valid+0x50>
		return false;
    5cf6:	2000      	movs	r0, #0
    5cf8:	e008      	b.n	5d0c <bt_le_conn_params_valid+0x50>
		return false;
    5cfa:	2000      	movs	r0, #0
    5cfc:	4770      	bx	lr
    5cfe:	2000      	movs	r0, #0
    5d00:	4770      	bx	lr
    5d02:	2000      	movs	r0, #0
    5d04:	4770      	bx	lr
		return false;
    5d06:	2000      	movs	r0, #0
    5d08:	4770      	bx	lr
		return false;
    5d0a:	2000      	movs	r0, #0
}
    5d0c:	bc10      	pop	{r4}
    5d0e:	4770      	bx	lr

00005d10 <bt_addr_le_create_static>:
{
    5d10:	b510      	push	{r4, lr}
    5d12:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    5d14:	2301      	movs	r3, #1
    5d16:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    5d1a:	2106      	movs	r1, #6
    5d1c:	f00c f848 	bl	11db0 <bt_rand>
	if (err) {
    5d20:	4602      	mov	r2, r0
    5d22:	b918      	cbnz	r0, 5d2c <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    5d24:	79a3      	ldrb	r3, [r4, #6]
    5d26:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5d2a:	71a3      	strb	r3, [r4, #6]
}
    5d2c:	4610      	mov	r0, r2
    5d2e:	bd10      	pop	{r4, pc}

00005d30 <set_static_addr>:
{
    5d30:	b510      	push	{r4, lr}
    5d32:	b082      	sub	sp, #8
	if (bt_storage) {
    5d34:	4b2e      	ldr	r3, [pc, #184]	; (5df0 <set_static_addr+0xc0>)
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	b13b      	cbz	r3, 5d4a <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    5d3a:	681c      	ldr	r4, [r3, #0]
    5d3c:	2307      	movs	r3, #7
    5d3e:	4a2d      	ldr	r2, [pc, #180]	; (5df4 <set_static_addr+0xc4>)
    5d40:	2100      	movs	r1, #0
    5d42:	4608      	mov	r0, r1
    5d44:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    5d46:	2807      	cmp	r0, #7
    5d48:	d02c      	beq.n	5da4 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    5d4a:	4b2a      	ldr	r3, [pc, #168]	; (5df4 <set_static_addr+0xc4>)
    5d4c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    5d50:	f013 0f01 	tst.w	r3, #1
    5d54:	d018      	beq.n	5d88 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    5d56:	aa01      	add	r2, sp, #4
    5d58:	2100      	movs	r1, #0
    5d5a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5d5e:	f7ff fb6f 	bl	5440 <bt_hci_cmd_send_sync>
		if (err) {
    5d62:	b988      	cbnz	r0, 5d88 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    5d64:	9801      	ldr	r0, [sp, #4]
    5d66:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    5d68:	784b      	ldrb	r3, [r1, #1]
    5d6a:	b15b      	cbz	r3, 5d84 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    5d6c:	4821      	ldr	r0, [pc, #132]	; (5df4 <set_static_addr+0xc4>)
    5d6e:	2301      	movs	r3, #1
    5d70:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    5d74:	2206      	movs	r2, #6
    5d76:	3102      	adds	r1, #2
    5d78:	f7fa faa2 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    5d7c:	9801      	ldr	r0, [sp, #4]
    5d7e:	f015 fb41 	bl	1b404 <net_buf_unref>
    5d82:	e00f      	b.n	5da4 <set_static_addr+0x74>
		net_buf_unref(rsp);
    5d84:	f015 fb3e 	bl	1b404 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    5d88:	481a      	ldr	r0, [pc, #104]	; (5df4 <set_static_addr+0xc4>)
    5d8a:	f7ff ffc1 	bl	5d10 <bt_addr_le_create_static>
	if (err) {
    5d8e:	4603      	mov	r3, r0
    5d90:	b9b8      	cbnz	r0, 5dc2 <set_static_addr+0x92>
	if (bt_storage) {
    5d92:	4b17      	ldr	r3, [pc, #92]	; (5df0 <set_static_addr+0xc0>)
    5d94:	681b      	ldr	r3, [r3, #0]
    5d96:	b12b      	cbz	r3, 5da4 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    5d98:	685c      	ldr	r4, [r3, #4]
    5d9a:	2307      	movs	r3, #7
    5d9c:	4a15      	ldr	r2, [pc, #84]	; (5df4 <set_static_addr+0xc4>)
    5d9e:	2100      	movs	r1, #0
    5da0:	4608      	mov	r0, r1
    5da2:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5da4:	4b13      	ldr	r3, [pc, #76]	; (5df4 <set_static_addr+0xc4>)
    5da6:	781b      	ldrb	r3, [r3, #0]
    5da8:	2b01      	cmp	r3, #1
    5daa:	d11b      	bne.n	5de4 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    5dac:	4b11      	ldr	r3, [pc, #68]	; (5df4 <set_static_addr+0xc4>)
    5dae:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5db0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5db4:	2bc0      	cmp	r3, #192	; 0xc0
    5db6:	d118      	bne.n	5dea <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    5db8:	480f      	ldr	r0, [pc, #60]	; (5df8 <set_static_addr+0xc8>)
    5dba:	f7ff fe1d 	bl	59f8 <set_random_address>
	if (err) {
    5dbe:	4603      	mov	r3, r0
    5dc0:	b110      	cbz	r0, 5dc8 <set_static_addr+0x98>
}
    5dc2:	4618      	mov	r0, r3
    5dc4:	b002      	add	sp, #8
    5dc6:	bd10      	pop	{r4, pc}
    5dc8:	4a0c      	ldr	r2, [pc, #48]	; (5dfc <set_static_addr+0xcc>)
    5dca:	f3bf 8f5b 	dmb	ish
    5dce:	e852 1f00 	ldrex	r1, [r2]
    5dd2:	f041 0104 	orr.w	r1, r1, #4
    5dd6:	e842 1000 	strex	r0, r1, [r2]
    5dda:	2800      	cmp	r0, #0
    5ddc:	d1f7      	bne.n	5dce <set_static_addr+0x9e>
    5dde:	f3bf 8f5b 	dmb	ish
	return 0;
    5de2:	e7ee      	b.n	5dc2 <set_static_addr+0x92>
		return -EINVAL;
    5de4:	f06f 0315 	mvn.w	r3, #21
    5de8:	e7eb      	b.n	5dc2 <set_static_addr+0x92>
    5dea:	f06f 0315 	mvn.w	r3, #21
    5dee:	e7e8      	b.n	5dc2 <set_static_addr+0x92>
    5df0:	20002f3c 	.word	0x20002f3c
    5df4:	2000be08 	.word	0x2000be08
    5df8:	2000be09 	.word	0x2000be09
    5dfc:	2000be78 	.word	0x2000be78

00005e00 <hci_init>:
{
    5e00:	b510      	push	{r4, lr}
    5e02:	b084      	sub	sp, #16
	err = common_init();
    5e04:	f7ff fb5c 	bl	54c0 <common_init>
	if (err) {
    5e08:	4604      	mov	r4, r0
    5e0a:	b110      	cbz	r0, 5e12 <hci_init+0x12>
}
    5e0c:	4620      	mov	r0, r4
    5e0e:	b004      	add	sp, #16
    5e10:	bd10      	pop	{r4, pc}
	err = le_init();
    5e12:	f7ff fc9b 	bl	574c <le_init>
	if (err) {
    5e16:	4604      	mov	r4, r0
    5e18:	2800      	cmp	r0, #0
    5e1a:	d1f7      	bne.n	5e0c <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5e1c:	4b17      	ldr	r3, [pc, #92]	; (5e7c <hci_init+0x7c>)
    5e1e:	7e9b      	ldrb	r3, [r3, #26]
    5e20:	f013 0f20 	tst.w	r3, #32
    5e24:	d104      	bne.n	5e30 <hci_init+0x30>
		err = br_init();
    5e26:	f7ff fd2d 	bl	5884 <br_init>
		if (err) {
    5e2a:	4604      	mov	r4, r0
    5e2c:	2800      	cmp	r0, #0
    5e2e:	d1ed      	bne.n	5e0c <hci_init+0xc>
	err = set_event_mask();
    5e30:	f7ff fd44 	bl	58bc <set_event_mask>
	if (err) {
    5e34:	4604      	mov	r4, r0
    5e36:	2800      	cmp	r0, #0
    5e38:	d1e8      	bne.n	5e0c <hci_init+0xc>
	hci_vs_init();
    5e3a:	f7ff fda1 	bl	5980 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    5e3e:	2300      	movs	r3, #0
    5e40:	9300      	str	r3, [sp, #0]
    5e42:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    5e46:	2207      	movs	r2, #7
    5e48:	4669      	mov	r1, sp
    5e4a:	480c      	ldr	r0, [pc, #48]	; (5e7c <hci_init+0x7c>)
    5e4c:	f024 fd64 	bl	2a918 <memcmp>
    5e50:	b178      	cbz	r0, 5e72 <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    5e52:	4b0b      	ldr	r3, [pc, #44]	; (5e80 <hci_init+0x80>)
    5e54:	e893 0003 	ldmia.w	r3, {r0, r1}
    5e58:	9002      	str	r0, [sp, #8]
    5e5a:	f8ad 100c 	strh.w	r1, [sp, #12]
    5e5e:	0c09      	lsrs	r1, r1, #16
    5e60:	f88d 100e 	strb.w	r1, [sp, #14]
    5e64:	2207      	movs	r2, #7
    5e66:	a902      	add	r1, sp, #8
    5e68:	4804      	ldr	r0, [pc, #16]	; (5e7c <hci_init+0x7c>)
    5e6a:	f024 fd55 	bl	2a918 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    5e6e:	2800      	cmp	r0, #0
    5e70:	d1cc      	bne.n	5e0c <hci_init+0xc>
		err = set_static_addr();
    5e72:	f7ff ff5d 	bl	5d30 <set_static_addr>
    5e76:	4604      	mov	r4, r0
    5e78:	e7c8      	b.n	5e0c <hci_init+0xc>
    5e7a:	bf00      	nop
    5e7c:	2000be08 	.word	0x2000be08
    5e80:	0002ede0 	.word	0x0002ede0

00005e84 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    5e84:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    5e86:	2100      	movs	r1, #0
    5e88:	4608      	mov	r0, r1
    5e8a:	f007 ffb1 	bl	ddf0 <reset>
    5e8e:	bd08      	pop	{r3, pc}

00005e90 <bt_send>:
{
    5e90:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    5e92:	4b03      	ldr	r3, [pc, #12]	; (5ea0 <bt_send+0x10>)
    5e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5e98:	68db      	ldr	r3, [r3, #12]
    5e9a:	4798      	blx	r3
}
    5e9c:	bd08      	pop	{r3, pc}
    5e9e:	bf00      	nop
    5ea0:	2000be08 	.word	0x2000be08

00005ea4 <bt_hci_cmd_send>:
{
    5ea4:	b538      	push	{r3, r4, r5, lr}
    5ea6:	4605      	mov	r5, r0
	if (!buf) {
    5ea8:	460c      	mov	r4, r1
    5eaa:	b151      	cbz	r1, 5ec2 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5eac:	f640 4335 	movw	r3, #3125	; 0xc35
    5eb0:	429d      	cmp	r5, r3
    5eb2:	d00e      	beq.n	5ed2 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5eb4:	4621      	mov	r1, r4
    5eb6:	480c      	ldr	r0, [pc, #48]	; (5ee8 <bt_hci_cmd_send+0x44>)
    5eb8:	f015 fa96 	bl	1b3e8 <net_buf_put>
	return 0;
    5ebc:	2500      	movs	r5, #0
}
    5ebe:	4628      	mov	r0, r5
    5ec0:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    5ec2:	f7ff fa91 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    5ec6:	4604      	mov	r4, r0
    5ec8:	2800      	cmp	r0, #0
    5eca:	d1ef      	bne.n	5eac <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    5ecc:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5ed0:	e7f5      	b.n	5ebe <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    5ed2:	4620      	mov	r0, r4
    5ed4:	f7ff ffdc 	bl	5e90 <bt_send>
		if (err) {
    5ed8:	4605      	mov	r5, r0
    5eda:	2800      	cmp	r0, #0
    5edc:	d0ef      	beq.n	5ebe <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    5ede:	4620      	mov	r0, r4
    5ee0:	f015 fa90 	bl	1b404 <net_buf_unref>
    5ee4:	e7eb      	b.n	5ebe <bt_hci_cmd_send+0x1a>
    5ee6:	bf00      	nop
    5ee8:	2000bedc 	.word	0x2000bedc

00005eec <start_le_scan>:
{
    5eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ef0:	b083      	sub	sp, #12
    5ef2:	4606      	mov	r6, r0
    5ef4:	4689      	mov	r9, r1
    5ef6:	4615      	mov	r5, r2
    5ef8:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    5efa:	2107      	movs	r1, #7
    5efc:	f242 000b 	movw	r0, #8203	; 0x200b
    5f00:	f7ff fa72 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5f04:	2800      	cmp	r0, #0
    5f06:	d072      	beq.n	5fee <start_le_scan+0x102>
    5f08:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    5f0a:	2107      	movs	r1, #7
    5f0c:	3008      	adds	r0, #8
    5f0e:	f015 fac5 	bl	1b49c <net_buf_simple_add>
    5f12:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    5f14:	2207      	movs	r2, #7
    5f16:	2100      	movs	r1, #0
    5f18:	f024 fd92 	bl	2aa40 <memset>
	set_param->scan_type = scan_type;
    5f1c:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    5f1e:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    5f22:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    5f26:	2300      	movs	r3, #0
    5f28:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    5f2a:	4b34      	ldr	r3, [pc, #208]	; (5ffc <start_le_scan+0x110>)
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    5f30:	2e01      	cmp	r6, #1
    5f32:	d02c      	beq.n	5f8e <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    5f34:	4639      	mov	r1, r7
    5f36:	f242 000b 	movw	r0, #8203	; 0x200b
    5f3a:	f7ff ffb3 	bl	5ea4 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    5f3e:	2102      	movs	r1, #2
    5f40:	f242 000c 	movw	r0, #8204	; 0x200c
    5f44:	f7ff fa50 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    5f48:	4604      	mov	r4, r0
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d052      	beq.n	5ff4 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    5f4e:	2102      	movs	r1, #2
    5f50:	3008      	adds	r0, #8
    5f52:	f015 faa3 	bl	1b49c <net_buf_simple_add>
    5f56:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5f58:	2202      	movs	r2, #2
    5f5a:	2100      	movs	r1, #0
    5f5c:	f024 fd70 	bl	2aa40 <memset>
	scan_enable->filter_dup = filter_dup;
    5f60:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    5f64:	2301      	movs	r3, #1
    5f66:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5f68:	aa01      	add	r2, sp, #4
    5f6a:	4621      	mov	r1, r4
    5f6c:	f242 000c 	movw	r0, #8204	; 0x200c
    5f70:	f7ff fa66 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    5f74:	4605      	mov	r5, r0
    5f76:	b930      	cbnz	r0, 5f86 <start_le_scan+0x9a>
	err = rsp->data[0];
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	689b      	ldr	r3, [r3, #8]
    5f7c:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    5f7e:	b1d5      	cbz	r5, 5fb6 <start_le_scan+0xca>
	net_buf_unref(rsp);
    5f80:	9801      	ldr	r0, [sp, #4]
    5f82:	f015 fa3f 	bl	1b404 <net_buf_unref>
}
    5f86:	4628      	mov	r0, r5
    5f88:	b003      	add	sp, #12
    5f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f8e:	f3bf 8f5b 	dmb	ish
    5f92:	4b1a      	ldr	r3, [pc, #104]	; (5ffc <start_le_scan+0x110>)
    5f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f96:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    5f9a:	f013 0f20 	tst.w	r3, #32
    5f9e:	d1c9      	bne.n	5f34 <start_le_scan+0x48>
			err = le_set_private_addr();
    5fa0:	f7ff fd5a 	bl	5a58 <le_set_private_addr>
			if (err) {
    5fa4:	4605      	mov	r5, r0
    5fa6:	b910      	cbnz	r0, 5fae <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    5fa8:	2301      	movs	r3, #1
    5faa:	7163      	strb	r3, [r4, #5]
    5fac:	e7c2      	b.n	5f34 <start_le_scan+0x48>
				net_buf_unref(buf);
    5fae:	4638      	mov	r0, r7
    5fb0:	f015 fa28 	bl	1b404 <net_buf_unref>
				return err;
    5fb4:	e7e7      	b.n	5f86 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5fb6:	4b12      	ldr	r3, [pc, #72]	; (6000 <start_le_scan+0x114>)
    5fb8:	f3bf 8f5b 	dmb	ish
    5fbc:	e853 2f00 	ldrex	r2, [r3]
    5fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5fc4:	e843 2100 	strex	r1, r2, [r3]
    5fc8:	2900      	cmp	r1, #0
    5fca:	d1f7      	bne.n	5fbc <start_le_scan+0xd0>
    5fcc:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    5fd0:	2e01      	cmp	r6, #1
    5fd2:	d1d5      	bne.n	5f80 <start_le_scan+0x94>
    5fd4:	f3bf 8f5b 	dmb	ish
    5fd8:	e853 2f00 	ldrex	r2, [r3]
    5fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5fe0:	e843 2100 	strex	r1, r2, [r3]
    5fe4:	2900      	cmp	r1, #0
    5fe6:	d1f7      	bne.n	5fd8 <start_le_scan+0xec>
    5fe8:	f3bf 8f5b 	dmb	ish
    5fec:	e7c8      	b.n	5f80 <start_le_scan+0x94>
		return -ENOBUFS;
    5fee:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5ff2:	e7c8      	b.n	5f86 <start_le_scan+0x9a>
		return -ENOBUFS;
    5ff4:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5ff8:	e7c5      	b.n	5f86 <start_le_scan+0x9a>
    5ffa:	bf00      	nop
    5ffc:	2000be08 	.word	0x2000be08
    6000:	2000be78 	.word	0x2000be78

00006004 <bt_le_scan_update>:
{
    6004:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6006:	f3bf 8f5b 	dmb	ish
    600a:	4b17      	ldr	r3, [pc, #92]	; (6068 <bt_le_scan_update+0x64>)
    600c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    600e:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6012:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6016:	b114      	cbz	r4, 601e <bt_le_scan_update+0x1a>
		return 0;
    6018:	2300      	movs	r3, #0
}
    601a:	4618      	mov	r0, r3
    601c:	bd38      	pop	{r3, r4, r5, pc}
    601e:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6020:	f3bf 8f5b 	dmb	ish
    6024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6026:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    602a:	f013 0f80 	tst.w	r3, #128	; 0x80
    602e:	d004      	beq.n	603a <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    6030:	f7ff fd2a 	bl	5a88 <bt_hci_stop_scanning>
		if (err) {
    6034:	4603      	mov	r3, r0
    6036:	2800      	cmp	r0, #0
    6038:	d1ef      	bne.n	601a <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    603a:	2101      	movs	r1, #1
    603c:	2000      	movs	r0, #0
    603e:	f001 fcd9 	bl	79f4 <bt_conn_lookup_state_le>
		if (!conn) {
    6042:	b170      	cbz	r0, 6062 <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    6044:	f001 fd08 	bl	7a58 <bt_conn_unref>
		if (fast_scan) {
    6048:	b13d      	cbz	r5, 605a <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    604a:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    604c:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    604e:	2301      	movs	r3, #1
    6050:	2000      	movs	r0, #0
    6052:	f7ff ff4b 	bl	5eec <start_le_scan>
    6056:	4603      	mov	r3, r0
    6058:	e7df      	b.n	601a <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    605a:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    605c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6060:	e7f5      	b.n	604e <bt_le_scan_update+0x4a>
			return 0;
    6062:	4623      	mov	r3, r4
    6064:	e7d9      	b.n	601a <bt_le_scan_update+0x16>
    6066:	bf00      	nop
    6068:	2000be08 	.word	0x2000be08

0000606c <bt_init>:
{
    606c:	b510      	push	{r4, lr}
	err = hci_init();
    606e:	f7ff fec7 	bl	5e00 <hci_init>
	if (err) {
    6072:	4604      	mov	r4, r0
    6074:	b108      	cbz	r0, 607a <bt_init+0xe>
}
    6076:	4620      	mov	r0, r4
    6078:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    607a:	f002 f83b 	bl	80f4 <bt_conn_init>
		if (err) {
    607e:	4604      	mov	r4, r0
    6080:	2800      	cmp	r0, #0
    6082:	d1f8      	bne.n	6076 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6084:	4b07      	ldr	r3, [pc, #28]	; (60a4 <bt_init+0x38>)
    6086:	f3bf 8f5b 	dmb	ish
    608a:	e853 2f00 	ldrex	r2, [r3]
    608e:	f042 0202 	orr.w	r2, r2, #2
    6092:	e843 2100 	strex	r1, r2, [r3]
    6096:	2900      	cmp	r1, #0
    6098:	d1f7      	bne.n	608a <bt_init+0x1e>
    609a:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    609e:	f7ff ffb1 	bl	6004 <bt_le_scan_update>
	return 0;
    60a2:	e7e8      	b.n	6076 <bt_init+0xa>
    60a4:	2000be78 	.word	0x2000be78

000060a8 <init_work>:
{
    60a8:	b508      	push	{r3, lr}
	err = bt_init();
    60aa:	f7ff ffdf 	bl	606c <bt_init>
	if (ready_cb) {
    60ae:	4b02      	ldr	r3, [pc, #8]	; (60b8 <init_work+0x10>)
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	b103      	cbz	r3, 60b6 <init_work+0xe>
		ready_cb(err);
    60b4:	4798      	blx	r3
    60b6:	bd08      	pop	{r3, pc}
    60b8:	2000087c 	.word	0x2000087c

000060bc <hci_disconn_complete>:
{
    60bc:	b530      	push	{r4, r5, lr}
    60be:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    60c0:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    60c2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    60c6:	7823      	ldrb	r3, [r4, #0]
    60c8:	b10b      	cbz	r3, 60ce <hci_disconn_complete+0x12>
}
    60ca:	b005      	add	sp, #20
    60cc:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    60ce:	f001 fc3f 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    60d2:	4605      	mov	r5, r0
    60d4:	2800      	cmp	r0, #0
    60d6:	d034      	beq.n	6142 <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    60d8:	78e3      	ldrb	r3, [r4, #3]
    60da:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    60dc:	f022 faf8 	bl	286d0 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    60e0:	2200      	movs	r2, #0
	size_t unused = 0;
    60e2:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    60e4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    60e8:	d206      	bcs.n	60f8 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    60ea:	4927      	ldr	r1, [pc, #156]	; (6188 <hci_disconn_complete+0xcc>)
    60ec:	5c89      	ldrb	r1, [r1, r2]
    60ee:	29aa      	cmp	r1, #170	; 0xaa
    60f0:	d102      	bne.n	60f8 <hci_disconn_complete+0x3c>
			unused++;
    60f2:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    60f4:	3201      	adds	r2, #1
    60f6:	e7f5      	b.n	60e4 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    60f8:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    60fc:	2264      	movs	r2, #100	; 0x64
    60fe:	fb02 f201 	mul.w	r2, r2, r1
    6102:	4822      	ldr	r0, [pc, #136]	; (618c <hci_disconn_complete+0xd0>)
    6104:	fba0 0202 	umull	r0, r2, r0, r2
    6108:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    610a:	9202      	str	r2, [sp, #8]
    610c:	f44f 7220 	mov.w	r2, #640	; 0x280
    6110:	9201      	str	r2, [sp, #4]
    6112:	9100      	str	r1, [sp, #0]
    6114:	491e      	ldr	r1, [pc, #120]	; (6190 <hci_disconn_complete+0xd4>)
    6116:	481f      	ldr	r0, [pc, #124]	; (6194 <hci_disconn_complete+0xd8>)
    6118:	f7fc ffa6 	bl	3068 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    611c:	2100      	movs	r1, #0
    611e:	4628      	mov	r0, r5
    6120:	f001 fd28 	bl	7b74 <bt_conn_set_state>
	conn->handle = 0;
    6124:	2300      	movs	r3, #0
    6126:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    6128:	78ab      	ldrb	r3, [r5, #2]
    612a:	bb03      	cbnz	r3, 616e <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    612c:	f3bf 8f5b 	dmb	ish
    6130:	686b      	ldr	r3, [r5, #4]
    6132:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    6136:	f013 0f01 	tst.w	r3, #1
    613a:	d11c      	bne.n	6176 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    613c:	4628      	mov	r0, r5
    613e:	f001 fc8b 	bl	7a58 <bt_conn_unref>
    6142:	f3bf 8f5b 	dmb	ish
    6146:	4b14      	ldr	r3, [pc, #80]	; (6198 <hci_disconn_complete+0xdc>)
    6148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    614a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    614e:	f013 0f40 	tst.w	r3, #64	; 0x40
    6152:	d0ba      	beq.n	60ca <hci_disconn_complete+0xe>
    6154:	f3bf 8f5b 	dmb	ish
    6158:	4b0f      	ldr	r3, [pc, #60]	; (6198 <hci_disconn_complete+0xdc>)
    615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    615c:	f3bf 8f5b 	dmb	ish
    6160:	f013 0f20 	tst.w	r3, #32
    6164:	d1b1      	bne.n	60ca <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    6166:	2001      	movs	r0, #1
    6168:	f7ff fce4 	bl	5b34 <set_advertise_enable>
    616c:	e7ad      	b.n	60ca <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    616e:	4628      	mov	r0, r5
    6170:	f001 fc72 	bl	7a58 <bt_conn_unref>
		return;
    6174:	e7a9      	b.n	60ca <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6176:	2101      	movs	r1, #1
    6178:	4628      	mov	r0, r5
    617a:	f001 fcfb 	bl	7b74 <bt_conn_set_state>
		bt_le_scan_update(false);
    617e:	2000      	movs	r0, #0
    6180:	f7ff ff40 	bl	6004 <bt_le_scan_update>
    6184:	e7da      	b.n	613c <hci_disconn_complete+0x80>
    6186:	bf00      	nop
    6188:	20004190 	.word	0x20004190
    618c:	cccccccd 	.word	0xcccccccd
    6190:	00031790 	.word	0x00031790
    6194:	0003179c 	.word	0x0003179c
    6198:	2000be08 	.word	0x2000be08

0000619c <check_pending_conn>:
{
    619c:	b538      	push	{r3, r4, r5, lr}
    619e:	f3bf 8f5b 	dmb	ish
    61a2:	4b23      	ldr	r3, [pc, #140]	; (6230 <check_pending_conn+0x94>)
    61a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    61a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    61aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    61ae:	d101      	bne.n	61b4 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    61b0:	2a01      	cmp	r2, #1
    61b2:	d900      	bls.n	61b6 <check_pending_conn+0x1a>
    61b4:	bd38      	pop	{r3, r4, r5, pc}
    61b6:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    61b8:	2101      	movs	r1, #1
    61ba:	f001 fc1b 	bl	79f4 <bt_conn_lookup_state_le>
	if (!conn) {
    61be:	4605      	mov	r5, r0
    61c0:	2800      	cmp	r0, #0
    61c2:	d0f7      	beq.n	61b4 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    61c4:	f7ff fc60 	bl	5a88 <bt_hci_stop_scanning>
    61c8:	b9c0      	cbnz	r0, 61fc <check_pending_conn+0x60>
    61ca:	f3bf 8f5b 	dmb	ish
    61ce:	4b18      	ldr	r3, [pc, #96]	; (6230 <check_pending_conn+0x94>)
    61d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    61d2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    61d6:	f013 0f04 	tst.w	r3, #4
    61da:	d11c      	bne.n	6216 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    61dc:	2207      	movs	r2, #7
    61de:	4914      	ldr	r1, [pc, #80]	; (6230 <check_pending_conn+0x94>)
    61e0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    61e4:	f7fa f86c 	bl	2c0 <memcpy>
    61e8:	2207      	movs	r2, #7
    61ea:	4621      	mov	r1, r4
    61ec:	f105 0056 	add.w	r0, r5, #86	; 0x56
    61f0:	f7fa f866 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    61f4:	4628      	mov	r0, r5
    61f6:	f7ff fcdb 	bl	5bb0 <hci_le_create_conn>
    61fa:	b180      	cbz	r0, 621e <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    61fc:	231f      	movs	r3, #31
    61fe:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6200:	2100      	movs	r1, #0
    6202:	4628      	mov	r0, r5
    6204:	f001 fcb6 	bl	7b74 <bt_conn_set_state>
	bt_conn_unref(conn);
    6208:	4628      	mov	r0, r5
    620a:	f001 fc25 	bl	7a58 <bt_conn_unref>
	bt_le_scan_update(false);
    620e:	2000      	movs	r0, #0
    6210:	f7ff fef8 	bl	6004 <bt_le_scan_update>
    6214:	e7ce      	b.n	61b4 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    6216:	4807      	ldr	r0, [pc, #28]	; (6234 <check_pending_conn+0x98>)
    6218:	f7ff fbee 	bl	59f8 <set_random_address>
    621c:	e7de      	b.n	61dc <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    621e:	2102      	movs	r1, #2
    6220:	4628      	mov	r0, r5
    6222:	f001 fca7 	bl	7b74 <bt_conn_set_state>
	bt_conn_unref(conn);
    6226:	4628      	mov	r0, r5
    6228:	f001 fc16 	bl	7a58 <bt_conn_unref>
	return;
    622c:	bd38      	pop	{r3, r4, r5, pc}
    622e:	bf00      	nop
    6230:	2000be08 	.word	0x2000be08
    6234:	2000be09 	.word	0x2000be09

00006238 <le_adv_report>:
{
    6238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    623c:	b083      	sub	sp, #12
    623e:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    6240:	f100 0308 	add.w	r3, r0, #8
    6244:	9300      	str	r3, [sp, #0]
    6246:	4618      	mov	r0, r3
    6248:	f015 f97d 	bl	1b546 <net_buf_simple_pull_u8>
	while (num_reports--) {
    624c:	e00a      	b.n	6264 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    624e:	7822      	ldrb	r2, [r4, #0]
    6250:	4631      	mov	r1, r6
    6252:	9801      	ldr	r0, [sp, #4]
    6254:	f7ff ffa2 	bl	619c <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    6258:	7a21      	ldrb	r1, [r4, #8]
    625a:	3101      	adds	r1, #1
    625c:	9800      	ldr	r0, [sp, #0]
    625e:	f015 f96a 	bl	1b536 <net_buf_simple_pull>
	while (num_reports--) {
    6262:	4638      	mov	r0, r7
    6264:	1e43      	subs	r3, r0, #1
    6266:	b2df      	uxtb	r7, r3
    6268:	b368      	cbz	r0, 62c6 <le_adv_report+0x8e>
		info = (void *)buf->data;
    626a:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    626c:	2109      	movs	r1, #9
    626e:	f8dd 9000 	ldr.w	r9, [sp]
    6272:	4648      	mov	r0, r9
    6274:	f015 f95f 	bl	1b536 <net_buf_simple_pull>
		rssi = info->data[info->length];
    6278:	7a23      	ldrb	r3, [r4, #8]
    627a:	4423      	add	r3, r4
    627c:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    6280:	1c66      	adds	r6, r4, #1
    6282:	4630      	mov	r0, r6
    6284:	f7fe ff6b 	bl	515e <find_id_addr>
    6288:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    628a:	4b10      	ldr	r3, [pc, #64]	; (62cc <le_adv_report+0x94>)
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	2b00      	cmp	r3, #0
    6290:	d0dd      	beq.n	624e <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    6292:	f8cd 9000 	str.w	r9, [sp]
    6296:	4648      	mov	r0, r9
    6298:	f015 f965 	bl	1b566 <net_buf_simple_headroom>
    629c:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    62a0:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    62a4:	7a23      	ldrb	r3, [r4, #8]
    62a6:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    62a8:	4b08      	ldr	r3, [pc, #32]	; (62cc <le_adv_report+0x94>)
    62aa:	f8d3 b000 	ldr.w	fp, [r3]
    62ae:	9b00      	ldr	r3, [sp, #0]
    62b0:	7822      	ldrb	r2, [r4, #0]
    62b2:	4641      	mov	r1, r8
    62b4:	9801      	ldr	r0, [sp, #4]
    62b6:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    62b8:	f105 0310 	add.w	r3, r5, #16
    62bc:	4453      	add	r3, sl
    62be:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    62c0:	f8a5 900c 	strh.w	r9, [r5, #12]
    62c4:	e7c3      	b.n	624e <le_adv_report+0x16>
}
    62c6:	b003      	add	sp, #12
    62c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62cc:	20000880 	.word	0x20000880

000062d0 <hci_le_read_remote_features>:
{
    62d0:	b538      	push	{r3, r4, r5, lr}
    62d2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    62d4:	2102      	movs	r1, #2
    62d6:	f242 0016 	movw	r0, #8214	; 0x2016
    62da:	f7ff f885 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    62de:	b168      	cbz	r0, 62fc <hci_le_read_remote_features+0x2c>
    62e0:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    62e2:	2102      	movs	r1, #2
    62e4:	3008      	adds	r0, #8
    62e6:	f015 f8d9 	bl	1b49c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    62ea:	882b      	ldrh	r3, [r5, #0]
    62ec:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    62ee:	4621      	mov	r1, r4
    62f0:	f242 0016 	movw	r0, #8214	; 0x2016
    62f4:	f7ff fdd6 	bl	5ea4 <bt_hci_cmd_send>
	return 0;
    62f8:	2000      	movs	r0, #0
    62fa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    62fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6300:	bd38      	pop	{r3, r4, r5, pc}

00006302 <hci_le_set_phy>:
{
    6302:	b538      	push	{r3, r4, r5, lr}
    6304:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    6306:	2107      	movs	r1, #7
    6308:	f242 0032 	movw	r0, #8242	; 0x2032
    630c:	f7ff f86c 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    6310:	b1a0      	cbz	r0, 633c <hci_le_set_phy+0x3a>
    6312:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6314:	2107      	movs	r1, #7
    6316:	3008      	adds	r0, #8
    6318:	f015 f8c0 	bl	1b49c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    631c:	8823      	ldrh	r3, [r4, #0]
    631e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    6320:	2400      	movs	r4, #0
    6322:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    6324:	2302      	movs	r3, #2
    6326:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    6328:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    632a:	7144      	strb	r4, [r0, #5]
    632c:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    632e:	4629      	mov	r1, r5
    6330:	f242 0032 	movw	r0, #8242	; 0x2032
    6334:	f7ff fdb6 	bl	5ea4 <bt_hci_cmd_send>
	return 0;
    6338:	4620      	mov	r0, r4
    633a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    633c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6340:	bd38      	pop	{r3, r4, r5, pc}

00006342 <hci_le_set_data_len>:
{
    6342:	b5f0      	push	{r4, r5, r6, r7, lr}
    6344:	b083      	sub	sp, #12
    6346:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    6348:	aa01      	add	r2, sp, #4
    634a:	2100      	movs	r1, #0
    634c:	f242 002f 	movw	r0, #8239	; 0x202f
    6350:	f7ff f876 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    6354:	4603      	mov	r3, r0
    6356:	b110      	cbz	r0, 635e <hci_le_set_data_len+0x1c>
}
    6358:	4618      	mov	r0, r3
    635a:	b003      	add	sp, #12
    635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    635e:	9801      	ldr	r0, [sp, #4]
    6360:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    6362:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    6366:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    636a:	f015 f84b 	bl	1b404 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    636e:	2106      	movs	r1, #6
    6370:	f242 0022 	movw	r0, #8226	; 0x2022
    6374:	f7ff f838 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    6378:	4605      	mov	r5, r0
    637a:	b170      	cbz	r0, 639a <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    637c:	2106      	movs	r1, #6
    637e:	3008      	adds	r0, #8
    6380:	f015 f88c 	bl	1b49c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6384:	8823      	ldrh	r3, [r4, #0]
    6386:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    6388:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    638a:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    638c:	4629      	mov	r1, r5
    638e:	f242 0022 	movw	r0, #8226	; 0x2022
    6392:	f7ff fd87 	bl	5ea4 <bt_hci_cmd_send>
    6396:	4603      	mov	r3, r0
    6398:	e7de      	b.n	6358 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    639a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    639e:	e7db      	b.n	6358 <hci_le_set_data_len+0x16>

000063a0 <le_conn_complete>:
{
    63a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    63a4:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    63a6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    63aa:	7823      	ldrb	r3, [r4, #0]
    63ac:	b17b      	cbz	r3, 63ce <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    63ae:	2102      	movs	r1, #2
    63b0:	2000      	movs	r0, #0
    63b2:	f001 fb1f 	bl	79f4 <bt_conn_lookup_state_le>
		if (!conn) {
    63b6:	4605      	mov	r5, r0
    63b8:	b3d0      	cbz	r0, 6430 <le_conn_complete+0x90>
		conn->err = evt->status;
    63ba:	7823      	ldrb	r3, [r4, #0]
    63bc:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    63be:	2100      	movs	r1, #0
    63c0:	f001 fbd8 	bl	7b74 <bt_conn_set_state>
		bt_conn_unref(conn);
    63c4:	4628      	mov	r0, r5
    63c6:	f001 fb47 	bl	7a58 <bt_conn_unref>
		return;
    63ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    63ce:	1d27      	adds	r7, r4, #4
    63d0:	4638      	mov	r0, r7
    63d2:	f7fe fec4 	bl	515e <find_id_addr>
    63d6:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    63d8:	2102      	movs	r1, #2
    63da:	f001 fb0b 	bl	79f4 <bt_conn_lookup_state_le>
    63de:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    63e0:	78e3      	ldrb	r3, [r4, #3]
    63e2:	2b01      	cmp	r3, #1
    63e4:	d026      	beq.n	6434 <le_conn_complete+0x94>
	if (!conn) {
    63e6:	b31d      	cbz	r5, 6430 <le_conn_complete+0x90>
	conn->handle   = handle;
    63e8:	4628      	mov	r0, r5
    63ea:	f820 6b48 	strh.w	r6, [r0], #72
    63ee:	2207      	movs	r2, #7
    63f0:	4641      	mov	r1, r8
    63f2:	f7f9 ff65 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    63f6:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    63fa:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    63fe:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    6402:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6406:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    640a:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    640e:	78e3      	ldrb	r3, [r4, #3]
    6410:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    6412:	2b01      	cmp	r3, #1
    6414:	d022      	beq.n	645c <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6416:	2103      	movs	r1, #3
    6418:	4628      	mov	r0, r5
    641a:	f001 fbab 	bl	7b74 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    641e:	7b2b      	ldrb	r3, [r5, #12]
    6420:	2b03      	cmp	r3, #3
    6422:	d03b      	beq.n	649c <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    6424:	4628      	mov	r0, r5
    6426:	f001 fb17 	bl	7a58 <bt_conn_unref>
	bt_le_scan_update(false);
    642a:	2000      	movs	r0, #0
    642c:	f7ff fdea 	bl	6004 <bt_le_scan_update>
    6430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6434:	4b3a      	ldr	r3, [pc, #232]	; (6520 <le_conn_complete+0x180>)
    6436:	f3bf 8f5b 	dmb	ish
    643a:	e853 2f00 	ldrex	r2, [r3]
    643e:	f022 0220 	bic.w	r2, r2, #32
    6442:	e843 2100 	strex	r1, r2, [r3]
    6446:	2900      	cmp	r1, #0
    6448:	d1f7      	bne.n	643a <le_conn_complete+0x9a>
    644a:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    644e:	2d00      	cmp	r5, #0
    6450:	d1c9      	bne.n	63e6 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    6452:	4640      	mov	r0, r8
    6454:	f001 fa30 	bl	78b8 <bt_conn_add_le>
    6458:	4605      	mov	r5, r0
    645a:	e7c4      	b.n	63e6 <le_conn_complete+0x46>
    645c:	2207      	movs	r2, #7
    645e:	4639      	mov	r1, r7
    6460:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    6464:	f7f9 ff2c 	bl	2c0 <memcpy>
    6468:	4e2e      	ldr	r6, [pc, #184]	; (6524 <le_conn_complete+0x184>)
    646a:	2207      	movs	r2, #7
    646c:	4631      	mov	r1, r6
    646e:	f105 0056 	add.w	r0, r5, #86	; 0x56
    6472:	f7f9 ff25 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6476:	f3bf 8f5b 	dmb	ish
    647a:	6f33      	ldr	r3, [r6, #112]	; 0x70
    647c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6480:	f013 0f40 	tst.w	r3, #64	; 0x40
    6484:	d0c7      	beq.n	6416 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    6486:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    648a:	2200      	movs	r2, #0
    648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6490:	4313      	orrs	r3, r2
    6492:	d0c0      	beq.n	6416 <le_conn_complete+0x76>
			set_advertise_enable(true);
    6494:	2001      	movs	r0, #1
    6496:	f7ff fb4d 	bl	5b34 <set_advertise_enable>
    649a:	e7bc      	b.n	6416 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    649c:	78e3      	ldrb	r3, [r4, #3]
    649e:	b12b      	cbz	r3, 64ac <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    64a0:	4b20      	ldr	r3, [pc, #128]	; (6524 <le_conn_complete+0x184>)
    64a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    64a6:	f013 0f08 	tst.w	r3, #8
    64aa:	d004      	beq.n	64b6 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    64ac:	4628      	mov	r0, r5
    64ae:	f7ff ff0f 	bl	62d0 <hci_le_read_remote_features>
		if (!err) {
    64b2:	2800      	cmp	r0, #0
    64b4:	d0b6      	beq.n	6424 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    64b6:	4b1b      	ldr	r3, [pc, #108]	; (6524 <le_conn_complete+0x184>)
    64b8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    64bc:	f013 0f01 	tst.w	r3, #1
    64c0:	d10d      	bne.n	64de <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    64c2:	4b18      	ldr	r3, [pc, #96]	; (6524 <le_conn_complete+0x184>)
    64c4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    64c8:	f013 0f20 	tst.w	r3, #32
    64cc:	d003      	beq.n	64d6 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    64ce:	4628      	mov	r0, r5
    64d0:	f7ff ff37 	bl	6342 <hci_le_set_data_len>
		if (!err) {
    64d4:	b1b0      	cbz	r0, 6504 <le_conn_complete+0x164>
	update_conn_param(conn);
    64d6:	4628      	mov	r0, r5
    64d8:	f7fe fe4a 	bl	5170 <update_conn_param>
    64dc:	e7a2      	b.n	6424 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    64de:	4628      	mov	r0, r5
    64e0:	f7ff ff0f 	bl	6302 <hci_le_set_phy>
		if (!err) {
    64e4:	2800      	cmp	r0, #0
    64e6:	d1ec      	bne.n	64c2 <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    64e8:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    64ea:	f3bf 8f5b 	dmb	ish
    64ee:	e853 2f00 	ldrex	r2, [r3]
    64f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    64f6:	e843 2100 	strex	r1, r2, [r3]
    64fa:	2900      	cmp	r1, #0
    64fc:	d1f7      	bne.n	64ee <le_conn_complete+0x14e>
    64fe:	f3bf 8f5b 	dmb	ish
    6502:	e78f      	b.n	6424 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    6504:	1d2b      	adds	r3, r5, #4
    6506:	f3bf 8f5b 	dmb	ish
    650a:	e853 2f00 	ldrex	r2, [r3]
    650e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    6512:	e843 2100 	strex	r1, r2, [r3]
    6516:	2900      	cmp	r1, #0
    6518:	d1f7      	bne.n	650a <le_conn_complete+0x16a>
    651a:	f3bf 8f5b 	dmb	ish
    651e:	e781      	b.n	6424 <le_conn_complete+0x84>
    6520:	2000be78 	.word	0x2000be78
    6524:	2000be08 	.word	0x2000be08

00006528 <le_conn_complete>:
{
    6528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    652c:	4604      	mov	r4, r0
    652e:	460f      	mov	r7, r1
    6530:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    6532:	1d85      	adds	r5, r0, #6
    6534:	f100 060c 	add.w	r6, r0, #12
    6538:	4633      	mov	r3, r6
    653a:	22ff      	movs	r2, #255	; 0xff
    653c:	4629      	mov	r1, r5
    653e:	7940      	ldrb	r0, [r0, #5]
    6540:	f014 faf8 	bl	1ab34 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6544:	4b40      	ldr	r3, [pc, #256]	; (6648 <le_conn_complete+0x120>)
    6546:	e9d3 2300 	ldrd	r2, r3, [r3]
    654a:	2200      	movs	r2, #0
    654c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6550:	4313      	orrs	r3, r2
    6552:	d077      	beq.n	6644 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6554:	4b3d      	ldr	r3, [pc, #244]	; (664c <le_conn_complete+0x124>)
    6556:	e9d3 2300 	ldrd	r2, r3, [r3]
    655a:	f002 0001 	and.w	r0, r2, #1
    655e:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6560:	4301      	orrs	r1, r0
    6562:	d104      	bne.n	656e <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    6564:	f402 7000 	and.w	r0, r2, #512	; 0x200
    6568:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    656a:	4301      	orrs	r1, r0
    656c:	d06a      	beq.n	6644 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    656e:	78e1      	ldrb	r1, [r4, #3]
    6570:	b919      	cbnz	r1, 657a <le_conn_complete+0x52>
		conn_count++;
    6572:	4837      	ldr	r0, [pc, #220]	; (6650 <le_conn_complete+0x128>)
    6574:	6801      	ldr	r1, [r0, #0]
    6576:	3101      	adds	r1, #1
    6578:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    657a:	f402 7200 	and.w	r2, r2, #512	; 0x200
    657e:	2300      	movs	r3, #0
    6580:	4313      	orrs	r3, r2
    6582:	d03e      	beq.n	6602 <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6584:	221e      	movs	r2, #30
    6586:	210a      	movs	r1, #10
    6588:	4640      	mov	r0, r8
    658a:	f007 fb2d 	bl	dbe8 <meta_evt>
    658e:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    6590:	78e3      	ldrb	r3, [r4, #3]
    6592:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    6594:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    6598:	7923      	ldrb	r3, [r4, #4]
    659a:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    659c:	7963      	ldrb	r3, [r4, #5]
    659e:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    65a0:	2206      	movs	r2, #6
    65a2:	4629      	mov	r1, r5
    65a4:	3005      	adds	r0, #5
    65a6:	f7f9 fe8b 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    65aa:	7ca3      	ldrb	r3, [r4, #18]
    65ac:	b123      	cbz	r3, 65b8 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    65ae:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    65b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    65b4:	2b40      	cmp	r3, #64	; 0x40
    65b6:	d01c      	beq.n	65f2 <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    65b8:	2206      	movs	r2, #6
    65ba:	2100      	movs	r1, #0
    65bc:	f108 000b 	add.w	r0, r8, #11
    65c0:	f024 fa3e 	bl	2aa40 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    65c4:	2206      	movs	r2, #6
    65c6:	4631      	mov	r1, r6
    65c8:	f108 0011 	add.w	r0, r8, #17
    65cc:	f7f9 fe78 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    65d0:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    65d4:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    65d8:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    65dc:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    65e0:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    65e4:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    65e8:	7fe3      	ldrb	r3, [r4, #31]
    65ea:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    65ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    65f2:	2206      	movs	r2, #6
    65f4:	f104 0113 	add.w	r1, r4, #19
    65f8:	f108 000b 	add.w	r0, r8, #11
    65fc:	f7f9 fe60 	bl	2c0 <memcpy>
    6600:	e7e0      	b.n	65c4 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6602:	2212      	movs	r2, #18
    6604:	2101      	movs	r1, #1
    6606:	4640      	mov	r0, r8
    6608:	f007 faee 	bl	dbe8 <meta_evt>
    660c:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    660e:	78e3      	ldrb	r3, [r4, #3]
    6610:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    6612:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    6616:	7923      	ldrb	r3, [r4, #4]
    6618:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    661a:	7963      	ldrb	r3, [r4, #5]
    661c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    661e:	2206      	movs	r2, #6
    6620:	4629      	mov	r1, r5
    6622:	3005      	adds	r0, #5
    6624:	f7f9 fe4c 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    6628:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    662c:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    6630:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    6634:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    6638:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    663c:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    6640:	7fe3      	ldrb	r3, [r4, #31]
    6642:	7473      	strb	r3, [r6, #17]
    6644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6648:	2000c0f8 	.word	0x2000c0f8
    664c:	2000c100 	.word	0x2000c100
    6650:	20000f9c 	.word	0x20000f9c

00006654 <le_remote_feat_complete>:
{
    6654:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    6656:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6658:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    665c:	f001 f978 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    6660:	b1f0      	cbz	r0, 66a0 <le_remote_feat_complete+0x4c>
    6662:	4604      	mov	r4, r0
	if (!evt->status) {
    6664:	782b      	ldrb	r3, [r5, #0]
    6666:	b1e3      	cbz	r3, 66a2 <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    6668:	4b24      	ldr	r3, [pc, #144]	; (66fc <le_remote_feat_complete+0xa8>)
    666a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    666e:	f013 0f01 	tst.w	r3, #1
    6672:	d004      	beq.n	667e <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    6674:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    6678:	f013 0f01 	tst.w	r3, #1
    667c:	d117      	bne.n	66ae <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    667e:	4b1f      	ldr	r3, [pc, #124]	; (66fc <le_remote_feat_complete+0xa8>)
    6680:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6684:	f013 0f20 	tst.w	r3, #32
    6688:	d004      	beq.n	6694 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    668a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    668e:	f013 0f20 	tst.w	r3, #32
    6692:	d11f      	bne.n	66d4 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    6694:	4620      	mov	r0, r4
    6696:	f7fe fd6b 	bl	5170 <update_conn_param>
	bt_conn_unref(conn);
    669a:	4620      	mov	r0, r4
    669c:	f001 f9dc 	bl	7a58 <bt_conn_unref>
    66a0:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    66a2:	2208      	movs	r2, #8
    66a4:	1ce9      	adds	r1, r5, #3
    66a6:	3068      	adds	r0, #104	; 0x68
    66a8:	f7f9 fe0a 	bl	2c0 <memcpy>
    66ac:	e7dc      	b.n	6668 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    66ae:	4620      	mov	r0, r4
    66b0:	f7ff fe27 	bl	6302 <hci_le_set_phy>
		if (!err) {
    66b4:	2800      	cmp	r0, #0
    66b6:	d1e2      	bne.n	667e <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    66b8:	1d23      	adds	r3, r4, #4
    66ba:	f3bf 8f5b 	dmb	ish
    66be:	e853 2f00 	ldrex	r2, [r3]
    66c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    66c6:	e843 2100 	strex	r1, r2, [r3]
    66ca:	2900      	cmp	r1, #0
    66cc:	d1f7      	bne.n	66be <le_remote_feat_complete+0x6a>
    66ce:	f3bf 8f5b 	dmb	ish
    66d2:	e7e2      	b.n	669a <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    66d4:	4620      	mov	r0, r4
    66d6:	f7ff fe34 	bl	6342 <hci_le_set_data_len>
		if (!err) {
    66da:	2800      	cmp	r0, #0
    66dc:	d1da      	bne.n	6694 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    66de:	1d23      	adds	r3, r4, #4
    66e0:	f3bf 8f5b 	dmb	ish
    66e4:	e853 2f00 	ldrex	r2, [r3]
    66e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    66ec:	e843 2100 	strex	r1, r2, [r3]
    66f0:	2900      	cmp	r1, #0
    66f2:	d1f7      	bne.n	66e4 <le_remote_feat_complete+0x90>
    66f4:	f3bf 8f5b 	dmb	ish
    66f8:	e7cf      	b.n	669a <le_remote_feat_complete+0x46>
    66fa:	bf00      	nop
    66fc:	2000be08 	.word	0x2000be08

00006700 <le_remote_feat_complete>:
{
    6700:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6702:	4c14      	ldr	r4, [pc, #80]	; (6754 <le_remote_feat_complete+0x54>)
    6704:	e9d4 4500 	ldrd	r4, r5, [r4]
    6708:	2400      	movs	r4, #0
    670a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    670e:	432c      	orrs	r4, r5
    6710:	d007      	beq.n	6722 <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    6712:	4c11      	ldr	r4, [pc, #68]	; (6758 <le_remote_feat_complete+0x58>)
    6714:	e9d4 4500 	ldrd	r4, r5, [r4]
    6718:	f004 0408 	and.w	r4, r4, #8
    671c:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    671e:	432c      	orrs	r4, r5
    6720:	d100      	bne.n	6724 <le_remote_feat_complete+0x24>
    6722:	bd70      	pop	{r4, r5, r6, pc}
    6724:	4615      	mov	r5, r2
    6726:	460e      	mov	r6, r1
    6728:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    672a:	220b      	movs	r2, #11
    672c:	2104      	movs	r1, #4
    672e:	4618      	mov	r0, r3
    6730:	f007 fa5a 	bl	dbe8 <meta_evt>
	sep->status = status;
    6734:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6736:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    673a:	b12c      	cbz	r4, 6748 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    673c:	2208      	movs	r2, #8
    673e:	2100      	movs	r1, #0
    6740:	3003      	adds	r0, #3
    6742:	f024 f97d 	bl	2aa40 <memset>
    6746:	e7ec      	b.n	6722 <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    6748:	2208      	movs	r2, #8
    674a:	1d31      	adds	r1, r6, #4
    674c:	3003      	adds	r0, #3
    674e:	f7f9 fdb7 	bl	2c0 <memcpy>
    6752:	bd70      	pop	{r4, r5, r6, pc}
    6754:	2000c0f8 	.word	0x2000c0f8
    6758:	2000c100 	.word	0x2000c100

0000675c <le_phy_update_complete>:
{
    675c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    675e:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6760:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    6764:	f001 f8f4 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    6768:	b308      	cbz	r0, 67ae <le_phy_update_complete+0x52>
    676a:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    676c:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    676e:	f3bf 8f5b 	dmb	ish
    6772:	e855 3f00 	ldrex	r3, [r5]
    6776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    677a:	e845 2100 	strex	r1, r2, [r5]
    677e:	2900      	cmp	r1, #0
    6780:	d1f7      	bne.n	6772 <le_phy_update_complete+0x16>
    6782:	f3bf 8f5b 	dmb	ish
    6786:	f013 0f80 	tst.w	r3, #128	; 0x80
    678a:	d00d      	beq.n	67a8 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    678c:	4b11      	ldr	r3, [pc, #68]	; (67d4 <le_phy_update_complete+0x78>)
    678e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6792:	f013 0f20 	tst.w	r3, #32
    6796:	d004      	beq.n	67a2 <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    6798:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    679c:	f013 0f20 	tst.w	r3, #32
    67a0:	d106      	bne.n	67b0 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    67a2:	4620      	mov	r0, r4
    67a4:	f7fe fce4 	bl	5170 <update_conn_param>
	bt_conn_unref(conn);
    67a8:	4620      	mov	r0, r4
    67aa:	f001 f955 	bl	7a58 <bt_conn_unref>
    67ae:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    67b0:	4620      	mov	r0, r4
    67b2:	f7ff fdc6 	bl	6342 <hci_le_set_data_len>
		if (!err) {
    67b6:	2800      	cmp	r0, #0
    67b8:	d1f3      	bne.n	67a2 <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    67ba:	f3bf 8f5b 	dmb	ish
    67be:	e855 3f00 	ldrex	r3, [r5]
    67c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    67c6:	e845 3200 	strex	r2, r3, [r5]
    67ca:	2a00      	cmp	r2, #0
    67cc:	d1f7      	bne.n	67be <le_phy_update_complete+0x62>
    67ce:	f3bf 8f5b 	dmb	ish
    67d2:	e7e9      	b.n	67a8 <le_phy_update_complete+0x4c>
    67d4:	2000be08 	.word	0x2000be08

000067d8 <le_conn_param_neg_reply>:
{
    67d8:	b570      	push	{r4, r5, r6, lr}
    67da:	4606      	mov	r6, r0
    67dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    67de:	2103      	movs	r1, #3
    67e0:	f242 0021 	movw	r0, #8225	; 0x2021
    67e4:	f7fe fe00 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    67e8:	b160      	cbz	r0, 6804 <le_conn_param_neg_reply+0x2c>
    67ea:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    67ec:	2103      	movs	r1, #3
    67ee:	3008      	adds	r0, #8
    67f0:	f014 fe54 	bl	1b49c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    67f4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    67f6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    67f8:	4621      	mov	r1, r4
    67fa:	f242 0021 	movw	r0, #8225	; 0x2021
    67fe:	f7ff fb51 	bl	5ea4 <bt_hci_cmd_send>
    6802:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6804:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6808:	bd70      	pop	{r4, r5, r6, pc}

0000680a <le_conn_param_req_reply>:
{
    680a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    680c:	4607      	mov	r7, r0
    680e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6810:	210e      	movs	r1, #14
    6812:	f242 0020 	movw	r0, #8224	; 0x2020
    6816:	f7fe fde7 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    681a:	b1c0      	cbz	r0, 684e <le_conn_param_req_reply+0x44>
    681c:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    681e:	210e      	movs	r1, #14
    6820:	3008      	adds	r0, #8
    6822:	f014 fe3b 	bl	1b49c <net_buf_simple_add>
    6826:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    6828:	220e      	movs	r2, #14
    682a:	2100      	movs	r1, #0
    682c:	f024 f908 	bl	2aa40 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    6830:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6832:	882b      	ldrh	r3, [r5, #0]
    6834:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6836:	886b      	ldrh	r3, [r5, #2]
    6838:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    683a:	88ab      	ldrh	r3, [r5, #4]
    683c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    683e:	88eb      	ldrh	r3, [r5, #6]
    6840:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6842:	4631      	mov	r1, r6
    6844:	f242 0020 	movw	r0, #8224	; 0x2020
    6848:	f7ff fb2c 	bl	5ea4 <bt_hci_cmd_send>
    684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    684e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006854 <le_conn_param_req_reply>:
{
    6854:	b570      	push	{r4, r5, r6, lr}
    6856:	b082      	sub	sp, #8
    6858:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    685a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    685c:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    685e:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    6860:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    6862:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    6864:	9201      	str	r2, [sp, #4]
    6866:	9100      	str	r1, [sp, #0]
    6868:	2200      	movs	r2, #0
    686a:	2102      	movs	r1, #2
    686c:	b2a0      	uxth	r0, r4
    686e:	f012 f927 	bl	18ac0 <ll_conn_update>
    6872:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    6874:	2103      	movs	r1, #3
    6876:	4630      	mov	r0, r6
    6878:	f007 f91c 	bl	dab4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    687c:	b12d      	cbz	r5, 688a <le_conn_param_req_reply+0x36>
    687e:	230c      	movs	r3, #12
    6880:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6882:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    6886:	b002      	add	sp, #8
    6888:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    688a:	2300      	movs	r3, #0
    688c:	e7f8      	b.n	6880 <le_conn_param_req_reply+0x2c>
	...

00006890 <le_conn_param_req>:
{
    6890:	b530      	push	{r4, r5, lr}
    6892:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6894:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6896:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6898:	885a      	ldrh	r2, [r3, #2]
    689a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    689e:	889a      	ldrh	r2, [r3, #4]
    68a0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    68a4:	88da      	ldrh	r2, [r3, #6]
    68a6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    68aa:	891b      	ldrh	r3, [r3, #8]
    68ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    68b0:	4620      	mov	r0, r4
    68b2:	f001 f84d 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    68b6:	b178      	cbz	r0, 68d8 <le_conn_param_req+0x48>
    68b8:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    68ba:	4669      	mov	r1, sp
    68bc:	f000 fdf6 	bl	74ac <le_param_req>
    68c0:	b980      	cbnz	r0, 68e4 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    68c2:	211e      	movs	r1, #30
    68c4:	4620      	mov	r0, r4
    68c6:	f7ff ff87 	bl	67d8 <le_conn_param_neg_reply>
    68ca:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    68cc:	4628      	mov	r0, r5
    68ce:	f001 f8c3 	bl	7a58 <bt_conn_unref>
}
    68d2:	4620      	mov	r0, r4
    68d4:	b003      	add	sp, #12
    68d6:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    68d8:	2102      	movs	r1, #2
    68da:	4620      	mov	r0, r4
    68dc:	f7ff ff7c 	bl	67d8 <le_conn_param_neg_reply>
    68e0:	4604      	mov	r4, r0
    68e2:	e7f6      	b.n	68d2 <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    68e4:	4669      	mov	r1, sp
    68e6:	4620      	mov	r0, r4
    68e8:	f7ff ff8f 	bl	680a <le_conn_param_req_reply>
    68ec:	4604      	mov	r4, r0
    68ee:	e7ed      	b.n	68cc <le_conn_param_req+0x3c>

000068f0 <le_conn_param_req>:
{
    68f0:	b530      	push	{r4, r5, lr}
    68f2:	b083      	sub	sp, #12
    68f4:	4604      	mov	r4, r0
    68f6:	460d      	mov	r5, r1
    68f8:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    68fa:	4b14      	ldr	r3, [pc, #80]	; (694c <le_conn_param_req+0x5c>)
    68fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    6900:	2200      	movs	r2, #0
    6902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6906:	4313      	orrs	r3, r2
    6908:	d007      	beq.n	691a <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    690a:	4b11      	ldr	r3, [pc, #68]	; (6950 <le_conn_param_req+0x60>)
    690c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6910:	f002 0220 	and.w	r2, r2, #32
    6914:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6916:	4313      	orrs	r3, r2
    6918:	d109      	bne.n	692e <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    691a:	2300      	movs	r3, #0
    691c:	9301      	str	r3, [sp, #4]
    691e:	9300      	str	r3, [sp, #0]
    6920:	221a      	movs	r2, #26
    6922:	2102      	movs	r1, #2
    6924:	4628      	mov	r0, r5
    6926:	f012 f8cb 	bl	18ac0 <ll_conn_update>
}
    692a:	b003      	add	sp, #12
    692c:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    692e:	220a      	movs	r2, #10
    6930:	2106      	movs	r1, #6
    6932:	f007 f959 	bl	dbe8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    6936:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    6938:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    693a:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    693c:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    693e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    6940:	8923      	ldrh	r3, [r4, #8]
    6942:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    6944:	8963      	ldrh	r3, [r4, #10]
    6946:	8103      	strh	r3, [r0, #8]
    6948:	e7ef      	b.n	692a <le_conn_param_req+0x3a>
    694a:	bf00      	nop
    694c:	2000c0f8 	.word	0x2000c0f8
    6950:	2000c100 	.word	0x2000c100

00006954 <le_ltk_request>:
{
    6954:	b5f0      	push	{r4, r5, r6, r7, lr}
    6956:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6958:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    695a:	8820      	ldrh	r0, [r4, #0]
    695c:	f000 fff8 	bl	7950 <bt_conn_lookup_handle>
	if (!conn) {
    6960:	2800      	cmp	r0, #0
    6962:	d040      	beq.n	69e6 <le_ltk_request+0x92>
    6964:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    6966:	f8d4 2002 	ldr.w	r2, [r4, #2]
    696a:	f8d4 3006 	ldr.w	r3, [r4, #6]
    696e:	4313      	orrs	r3, r2
    6970:	d102      	bne.n	6978 <le_ltk_request+0x24>
    6972:	8963      	ldrh	r3, [r4, #10]
    6974:	2b00      	cmp	r3, #0
    6976:	d038      	beq.n	69ea <le_ltk_request+0x96>
	if (!conn->le.keys) {
    6978:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    697a:	2b00      	cmp	r3, #0
    697c:	d053      	beq.n	6a26 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    697e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6980:	b16b      	cbz	r3, 699e <le_ltk_request+0x4a>
    6982:	899a      	ldrh	r2, [r3, #12]
    6984:	f012 0f20 	tst.w	r2, #32
    6988:	d009      	beq.n	699e <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    698a:	f8d4 0002 	ldr.w	r0, [r4, #2]
    698e:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    6992:	ea50 0201 	orrs.w	r2, r0, r1
    6996:	d102      	bne.n	699e <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    6998:	8962      	ldrh	r2, [r4, #10]
    699a:	2a00      	cmp	r2, #0
    699c:	d052      	beq.n	6a44 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    699e:	b16b      	cbz	r3, 69bc <le_ltk_request+0x68>
    69a0:	899a      	ldrh	r2, [r3, #12]
    69a2:	f012 0f01 	tst.w	r2, #1
    69a6:	d009      	beq.n	69bc <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    69a8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    69ac:	f8d4 6002 	ldr.w	r6, [r4, #2]
    69b0:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    69b4:	42b9      	cmp	r1, r7
    69b6:	bf08      	it	eq
    69b8:	42b0      	cmpeq	r0, r6
    69ba:	d06a      	beq.n	6a92 <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    69bc:	2102      	movs	r1, #2
    69be:	f242 001b 	movw	r0, #8219	; 0x201b
    69c2:	f7fe fd11 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    69c6:	4606      	mov	r6, r0
    69c8:	b150      	cbz	r0, 69e0 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    69ca:	2102      	movs	r1, #2
    69cc:	3008      	adds	r0, #8
    69ce:	f014 fd65 	bl	1b49c <net_buf_simple_add>
	cp->handle = evt->handle;
    69d2:	8823      	ldrh	r3, [r4, #0]
    69d4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    69d6:	4631      	mov	r1, r6
    69d8:	f242 001b 	movw	r0, #8219	; 0x201b
    69dc:	f7ff fa62 	bl	5ea4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    69e0:	4628      	mov	r0, r5
    69e2:	f001 f839 	bl	7a58 <bt_conn_unref>
}
    69e6:	b005      	add	sp, #20
    69e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    69ea:	4669      	mov	r1, sp
    69ec:	f006 ff14 	bl	d818 <bt_smp_get_tk>
    69f0:	2800      	cmp	r0, #0
    69f2:	d0c1      	beq.n	6978 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    69f4:	2112      	movs	r1, #18
    69f6:	f242 001a 	movw	r0, #8218	; 0x201a
    69fa:	f7fe fcf5 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    69fe:	4606      	mov	r6, r0
    6a00:	2800      	cmp	r0, #0
    6a02:	d0ed      	beq.n	69e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6a04:	2112      	movs	r1, #18
    6a06:	3008      	adds	r0, #8
    6a08:	f014 fd48 	bl	1b49c <net_buf_simple_add>
		cp->handle = evt->handle;
    6a0c:	8823      	ldrh	r3, [r4, #0]
    6a0e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    6a12:	2210      	movs	r2, #16
    6a14:	4669      	mov	r1, sp
    6a16:	f7f9 fc53 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6a1a:	4631      	mov	r1, r6
    6a1c:	f242 001a 	movw	r0, #8218	; 0x201a
    6a20:	f7ff fa40 	bl	5ea4 <bt_hci_cmd_send>
		goto done;
    6a24:	e7dc      	b.n	69e0 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    6a26:	f105 0648 	add.w	r6, r5, #72	; 0x48
    6a2a:	4631      	mov	r1, r6
    6a2c:	2020      	movs	r0, #32
    6a2e:	f006 ff59 	bl	d8e4 <bt_keys_find>
    6a32:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    6a34:	2800      	cmp	r0, #0
    6a36:	d1a2      	bne.n	697e <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    6a38:	4631      	mov	r1, r6
    6a3a:	2001      	movs	r0, #1
    6a3c:	f006 ff52 	bl	d8e4 <bt_keys_find>
    6a40:	6728      	str	r0, [r5, #112]	; 0x70
    6a42:	e79c      	b.n	697e <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6a44:	2112      	movs	r1, #18
    6a46:	f242 001a 	movw	r0, #8218	; 0x201a
    6a4a:	f7fe fccd 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    6a4e:	4606      	mov	r6, r0
    6a50:	2800      	cmp	r0, #0
    6a52:	d0c5      	beq.n	69e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6a54:	2112      	movs	r1, #18
    6a56:	3008      	adds	r0, #8
    6a58:	f014 fd20 	bl	1b49c <net_buf_simple_add>
		cp->handle = evt->handle;
    6a5c:	8823      	ldrh	r3, [r4, #0]
    6a5e:	4604      	mov	r4, r0
    6a60:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    6a64:	6f29      	ldr	r1, [r5, #112]	; 0x70
    6a66:	79ca      	ldrb	r2, [r1, #7]
    6a68:	311a      	adds	r1, #26
    6a6a:	4620      	mov	r0, r4
    6a6c:	f7f9 fc28 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6a70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6a72:	79d8      	ldrb	r0, [r3, #7]
    6a74:	280f      	cmp	r0, #15
    6a76:	d905      	bls.n	6a84 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6a78:	4631      	mov	r1, r6
    6a7a:	f242 001a 	movw	r0, #8218	; 0x201a
    6a7e:	f7ff fa11 	bl	5ea4 <bt_hci_cmd_send>
		goto done;
    6a82:	e7ad      	b.n	69e0 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6a84:	f1c0 0210 	rsb	r2, r0, #16
    6a88:	2100      	movs	r1, #0
    6a8a:	4420      	add	r0, r4
    6a8c:	f023 ffd8 	bl	2aa40 <memset>
    6a90:	e7f2      	b.n	6a78 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    6a92:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    6a96:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    6a98:	429a      	cmp	r2, r3
    6a9a:	d18f      	bne.n	69bc <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6a9c:	2112      	movs	r1, #18
    6a9e:	f242 001a 	movw	r0, #8218	; 0x201a
    6aa2:	f7fe fca1 	bl	53e8 <bt_hci_cmd_create>
		if (!buf) {
    6aa6:	4606      	mov	r6, r0
    6aa8:	2800      	cmp	r0, #0
    6aaa:	d099      	beq.n	69e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6aac:	2112      	movs	r1, #18
    6aae:	3008      	adds	r0, #8
    6ab0:	f014 fcf4 	bl	1b49c <net_buf_simple_add>
		cp->handle = evt->handle;
    6ab4:	8823      	ldrh	r3, [r4, #0]
    6ab6:	4604      	mov	r4, r0
    6ab8:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    6abc:	6f29      	ldr	r1, [r5, #112]	; 0x70
    6abe:	79ca      	ldrb	r2, [r1, #7]
    6ac0:	317a      	adds	r1, #122	; 0x7a
    6ac2:	4620      	mov	r0, r4
    6ac4:	f7f9 fbfc 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6ac8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6aca:	79d8      	ldrb	r0, [r3, #7]
    6acc:	280f      	cmp	r0, #15
    6ace:	d905      	bls.n	6adc <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6ad0:	4631      	mov	r1, r6
    6ad2:	f242 001a 	movw	r0, #8218	; 0x201a
    6ad6:	f7ff f9e5 	bl	5ea4 <bt_hci_cmd_send>
		goto done;
    6ada:	e781      	b.n	69e0 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6adc:	f1c0 0210 	rsb	r2, r0, #16
    6ae0:	2100      	movs	r1, #0
    6ae2:	4420      	add	r0, r4
    6ae4:	f023 ffac 	bl	2aa40 <memset>
    6ae8:	e7f2      	b.n	6ad0 <le_ltk_request+0x17c>
	...

00006aec <le_ltk_request>:
{
    6aec:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6aee:	4b15      	ldr	r3, [pc, #84]	; (6b44 <le_ltk_request+0x58>)
    6af0:	e9d3 4500 	ldrd	r4, r5, [r3]
    6af4:	2400      	movs	r4, #0
    6af6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6afa:	ea54 0305 	orrs.w	r3, r4, r5
    6afe:	d008      	beq.n	6b12 <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    6b00:	4b11      	ldr	r3, [pc, #68]	; (6b48 <le_ltk_request+0x5c>)
    6b02:	e9d3 4500 	ldrd	r4, r5, [r3]
    6b06:	f004 0410 	and.w	r4, r4, #16
    6b0a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6b0c:	ea54 0305 	orrs.w	r3, r4, r5
    6b10:	d100      	bne.n	6b14 <le_ltk_request+0x28>
    6b12:	bd70      	pop	{r4, r5, r6, pc}
    6b14:	4613      	mov	r3, r2
    6b16:	460d      	mov	r5, r1
    6b18:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    6b1a:	220c      	movs	r2, #12
    6b1c:	2105      	movs	r1, #5
    6b1e:	4618      	mov	r0, r3
    6b20:	f007 f862 	bl	dbe8 <meta_evt>
    6b24:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    6b26:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    6b2a:	2208      	movs	r2, #8
    6b2c:	1d21      	adds	r1, r4, #4
    6b2e:	f7f9 fbc7 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    6b32:	2202      	movs	r2, #2
    6b34:	f104 010c 	add.w	r1, r4, #12
    6b38:	f106 000a 	add.w	r0, r6, #10
    6b3c:	f7f9 fbc0 	bl	2c0 <memcpy>
    6b40:	e7e7      	b.n	6b12 <le_ltk_request+0x26>
    6b42:	bf00      	nop
    6b44:	2000c0f8 	.word	0x2000c0f8
    6b48:	2000c100 	.word	0x2000c100

00006b4c <hci_le_meta_event>:
{
    6b4c:	b538      	push	{r3, r4, r5, lr}
    6b4e:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    6b50:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    6b54:	2101      	movs	r1, #1
    6b56:	f014 fcee 	bl	1b536 <net_buf_simple_pull>
	switch (evt->subevent) {
    6b5a:	782b      	ldrb	r3, [r5, #0]
    6b5c:	3b01      	subs	r3, #1
    6b5e:	2b0b      	cmp	r3, #11
    6b60:	d82e      	bhi.n	6bc0 <hci_le_meta_event+0x74>
    6b62:	e8df f003 	tbb	[pc, r3]
    6b66:	2a06      	.short	0x2a06
    6b68:	121e0e0a 	.word	0x121e0e0a
    6b6c:	2d262216 	.word	0x2d262216
    6b70:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    6b72:	4620      	mov	r0, r4
    6b74:	f7ff fc14 	bl	63a0 <le_conn_complete>
		break;
    6b78:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    6b7a:	4620      	mov	r0, r4
    6b7c:	f7fe fb52 	bl	5224 <le_conn_update_complete>
		break;
    6b80:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    6b82:	4620      	mov	r0, r4
    6b84:	f7ff fd66 	bl	6654 <le_remote_feat_complete>
		break;
    6b88:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    6b8a:	4620      	mov	r0, r4
    6b8c:	f7ff fe80 	bl	6890 <le_conn_param_req>
		break;
    6b90:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    6b92:	4620      	mov	r0, r4
    6b94:	f7fe fafc 	bl	5190 <le_data_len_change>
		break;
    6b98:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    6b9a:	4620      	mov	r0, r4
    6b9c:	f7ff fdde 	bl	675c <le_phy_update_complete>
		break;
    6ba0:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    6ba2:	4620      	mov	r0, r4
    6ba4:	f7ff fed6 	bl	6954 <le_ltk_request>
		break;
    6ba8:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    6baa:	4620      	mov	r0, r4
    6bac:	f7fe f9f0 	bl	4f90 <le_pkey_complete>
		break;
    6bb0:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    6bb2:	4620      	mov	r0, r4
    6bb4:	f7fe f916 	bl	4de4 <le_dhkey_complete>
		break;
    6bb8:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    6bba:	4620      	mov	r0, r4
    6bbc:	f7ff fb3c 	bl	6238 <le_adv_report>
    6bc0:	bd38      	pop	{r3, r4, r5, pc}

00006bc2 <hci_event>:
{
    6bc2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6bc4:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6bc6:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    6bc8:	2b0e      	cmp	r3, #14
    6bca:	d316      	bcc.n	6bfa <hci_event+0x38>
    6bcc:	2b0f      	cmp	r3, #15
    6bce:	d901      	bls.n	6bd4 <hci_event+0x12>
    6bd0:	2b13      	cmp	r3, #19
    6bd2:	d112      	bne.n	6bfa <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    6bd4:	2301      	movs	r3, #1
    6bd6:	b993      	cbnz	r3, 6bfe <hci_event+0x3c>
    6bd8:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6bda:	2102      	movs	r1, #2
    6bdc:	3008      	adds	r0, #8
    6bde:	f014 fcaa 	bl	1b536 <net_buf_simple_pull>
	switch (hdr->evt) {
    6be2:	782b      	ldrb	r3, [r5, #0]
    6be4:	2b08      	cmp	r3, #8
    6be6:	d019      	beq.n	6c1c <hci_event+0x5a>
    6be8:	d90f      	bls.n	6c0a <hci_event+0x48>
    6bea:	2b30      	cmp	r3, #48	; 0x30
    6bec:	d01a      	beq.n	6c24 <hci_event+0x62>
    6bee:	2b3e      	cmp	r3, #62	; 0x3e
    6bf0:	d110      	bne.n	6c14 <hci_event+0x52>
		hci_le_meta_event(buf);
    6bf2:	4620      	mov	r0, r4
    6bf4:	f7ff ffaa 	bl	6b4c <hci_le_meta_event>
		break;
    6bf8:	e00c      	b.n	6c14 <hci_event+0x52>
	default:
		return false;
    6bfa:	2300      	movs	r3, #0
    6bfc:	e7eb      	b.n	6bd6 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6bfe:	4040      	eors	r0, r0
    6c00:	f380 8811 	msr	BASEPRI, r0
    6c04:	f04f 0004 	mov.w	r0, #4
    6c08:	df02      	svc	2
	switch (hdr->evt) {
    6c0a:	2b05      	cmp	r3, #5
    6c0c:	d102      	bne.n	6c14 <hci_event+0x52>
		hci_disconn_complete(buf);
    6c0e:	4620      	mov	r0, r4
    6c10:	f7ff fa54 	bl	60bc <hci_disconn_complete>
	net_buf_unref(buf);
    6c14:	4620      	mov	r0, r4
    6c16:	f014 fbf5 	bl	1b404 <net_buf_unref>
    6c1a:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    6c1c:	4620      	mov	r0, r4
    6c1e:	f7fe fa56 	bl	50ce <hci_encrypt_change>
		break;
    6c22:	e7f7      	b.n	6c14 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    6c24:	4620      	mov	r0, r4
    6c26:	f7fe fa7a 	bl	511e <hci_encrypt_key_refresh_complete>
		break;
    6c2a:	e7f3      	b.n	6c14 <hci_event+0x52>

00006c2c <send_cmd>:
{
    6c2c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6c2e:	2100      	movs	r1, #0
    6c30:	4820      	ldr	r0, [pc, #128]	; (6cb4 <send_cmd+0x88>)
    6c32:	f014 fbba 	bl	1b3aa <net_buf_get>
	BT_ASSERT(buf);
    6c36:	b1d0      	cbz	r0, 6c6e <send_cmd+0x42>
    6c38:	4604      	mov	r4, r0
    6c3a:	4d1f      	ldr	r5, [pc, #124]	; (6cb8 <send_cmd+0x8c>)
    6c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c40:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    6c44:	f022 ff3c 	bl	29ac0 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6c48:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6c4c:	b120      	cbz	r0, 6c58 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    6c4e:	f014 fbd9 	bl	1b404 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6c52:	2200      	movs	r2, #0
    6c54:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6c58:	4620      	mov	r0, r4
    6c5a:	f014 fbef 	bl	1b43c <net_buf_ref>
    6c5e:	4b16      	ldr	r3, [pc, #88]	; (6cb8 <send_cmd+0x8c>)
    6c60:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    6c64:	4620      	mov	r0, r4
    6c66:	f7ff f913 	bl	5e90 <bt_send>
	if (err) {
    6c6a:	b930      	cbnz	r0, 6c7a <send_cmd+0x4e>
    6c6c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6c6e:	4040      	eors	r0, r0
    6c70:	f380 8811 	msr	BASEPRI, r0
    6c74:	f04f 0004 	mov.w	r0, #4
    6c78:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6c7a:	4d0f      	ldr	r5, [pc, #60]	; (6cb8 <send_cmd+0x8c>)
    6c7c:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    6c80:	f022 ff0b 	bl	29a9a <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    6c84:	f104 0310 	add.w	r3, r4, #16
    6c88:	89e2      	ldrh	r2, [r4, #14]
    6c8a:	4413      	add	r3, r2
    6c8c:	3303      	adds	r3, #3
    6c8e:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6c92:	2200      	movs	r2, #0
    6c94:	211f      	movs	r1, #31
    6c96:	8858      	ldrh	r0, [r3, #2]
    6c98:	f7fe fb10 	bl	52bc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6c9c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6ca0:	f014 fbb0 	bl	1b404 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6ca4:	2300      	movs	r3, #0
    6ca6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    6caa:	4620      	mov	r0, r4
    6cac:	f014 fbaa 	bl	1b404 <net_buf_unref>
}
    6cb0:	e7dc      	b.n	6c6c <send_cmd+0x40>
    6cb2:	bf00      	nop
    6cb4:	2000bedc 	.word	0x2000bedc
    6cb8:	2000be08 	.word	0x2000be08

00006cbc <process_events>:
{
    6cbc:	b538      	push	{r3, r4, r5, lr}
    6cbe:	4604      	mov	r4, r0
    6cc0:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    6cc2:	e003      	b.n	6ccc <process_events+0x10>
				send_cmd();
    6cc4:	f7ff ffb2 	bl	6c2c <send_cmd>
	for (; count; ev++, count--) {
    6cc8:	3414      	adds	r4, #20
    6cca:	3d01      	subs	r5, #1
    6ccc:	b1a5      	cbz	r5, 6cf8 <process_events+0x3c>
		switch (ev->state) {
    6cce:	7b63      	ldrb	r3, [r4, #13]
    6cd0:	091b      	lsrs	r3, r3, #4
    6cd2:	2b04      	cmp	r3, #4
    6cd4:	d1f8      	bne.n	6cc8 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6cd6:	7b23      	ldrb	r3, [r4, #12]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d0f3      	beq.n	6cc4 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6cdc:	2b01      	cmp	r3, #1
    6cde:	d006      	beq.n	6cee <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6ce0:	2b02      	cmp	r3, #2
    6ce2:	d1f1      	bne.n	6cc8 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6ce4:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    6ce6:	382c      	subs	r0, #44	; 0x2c
    6ce8:	f001 f9c8 	bl	807c <bt_conn_process_tx>
    6cec:	e7ec      	b.n	6cc8 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6cee:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    6cf0:	381c      	subs	r0, #28
    6cf2:	f000 fd65 	bl	77c0 <bt_conn_notify_tx>
    6cf6:	e7e7      	b.n	6cc8 <process_events+0xc>
}
    6cf8:	bd38      	pop	{r3, r4, r5, pc}
	...

00006cfc <hci_tx_thread>:
{
    6cfc:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    6cfe:	4c0f      	ldr	r4, [pc, #60]	; (6d3c <hci_tx_thread+0x40>)
    6d00:	7b63      	ldrb	r3, [r4, #13]
    6d02:	f36f 1307 	bfc	r3, #4, #4
    6d06:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    6d08:	f104 0014 	add.w	r0, r4, #20
    6d0c:	f000 feca 	bl	7aa4 <bt_conn_prepare_events>
    6d10:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    6d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6d16:	4629      	mov	r1, r5
    6d18:	4620      	mov	r0, r4
    6d1a:	f022 f81d 	bl	28d58 <k_poll>
		BT_ASSERT(err == 0);
    6d1e:	b930      	cbnz	r0, 6d2e <hci_tx_thread+0x32>
		process_events(events, ev_count);
    6d20:	4629      	mov	r1, r5
    6d22:	4806      	ldr	r0, [pc, #24]	; (6d3c <hci_tx_thread+0x40>)
    6d24:	f7ff ffca 	bl	6cbc <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6d28:	f022 fd5e 	bl	297e8 <_impl_k_yield>
    6d2c:	e7e7      	b.n	6cfe <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    6d2e:	4040      	eors	r0, r0
    6d30:	f380 8811 	msr	BASEPRI, r0
    6d34:	f04f 0004 	mov.w	r0, #4
    6d38:	df02      	svc	2
    6d3a:	bf00      	nop
    6d3c:	2000bef0 	.word	0x2000bef0

00006d40 <bt_recv>:
{
    6d40:	b510      	push	{r4, lr}
    6d42:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    6d44:	7980      	ldrb	r0, [r0, #6]
    6d46:	f014 fae3 	bl	1b310 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6d4a:	8ac3      	ldrh	r3, [r0, #22]
    6d4c:	2b03      	cmp	r3, #3
    6d4e:	d910      	bls.n	6d72 <bt_recv+0x32>
    6d50:	f104 0310 	add.w	r3, r4, #16
    6d54:	89e2      	ldrh	r2, [r4, #14]
    6d56:	4413      	add	r3, r2
    6d58:	3303      	adds	r3, #3
    6d5a:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    6d5e:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    6d60:	2b01      	cmp	r3, #1
    6d62:	d00c      	beq.n	6d7e <bt_recv+0x3e>
    6d64:	2b03      	cmp	r3, #3
    6d66:	d10f      	bne.n	6d88 <bt_recv+0x48>
		hci_acl(buf);
    6d68:	4620      	mov	r0, r4
    6d6a:	f7fe f949 	bl	5000 <hci_acl>
		return 0;
    6d6e:	2000      	movs	r0, #0
    6d70:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    6d72:	4620      	mov	r0, r4
    6d74:	f014 fb46 	bl	1b404 <net_buf_unref>
		return -EINVAL;
    6d78:	f06f 0015 	mvn.w	r0, #21
    6d7c:	bd10      	pop	{r4, pc}
		hci_event(buf);
    6d7e:	4620      	mov	r0, r4
    6d80:	f7ff ff1f 	bl	6bc2 <hci_event>
		return 0;
    6d84:	2000      	movs	r0, #0
    6d86:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    6d88:	4620      	mov	r0, r4
    6d8a:	f014 fb3b 	bl	1b404 <net_buf_unref>
		return -EINVAL;
    6d8e:	f06f 0015 	mvn.w	r0, #21
}
    6d92:	bd10      	pop	{r4, pc}

00006d94 <bt_recv_prio>:
{
    6d94:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6d96:	6885      	ldr	r5, [r0, #8]
    6d98:	f100 0310 	add.w	r3, r0, #16
    6d9c:	89c2      	ldrh	r2, [r0, #14]
    6d9e:	4413      	add	r3, r2
    6da0:	3303      	adds	r3, #3
    6da2:	f023 0303 	bic.w	r3, r3, #3
    6da6:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6da8:	2b01      	cmp	r3, #1
    6daa:	d120      	bne.n	6dee <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6dac:	8983      	ldrh	r3, [r0, #12]
    6dae:	2b01      	cmp	r3, #1
    6db0:	d923      	bls.n	6dfa <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6db2:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    6db4:	2b0e      	cmp	r3, #14
    6db6:	d326      	bcc.n	6e06 <bt_recv_prio+0x72>
    6db8:	2b0f      	cmp	r3, #15
    6dba:	d901      	bls.n	6dc0 <bt_recv_prio+0x2c>
    6dbc:	2b13      	cmp	r3, #19
    6dbe:	d122      	bne.n	6e06 <bt_recv_prio+0x72>
		return true;
    6dc0:	2301      	movs	r3, #1
    6dc2:	b313      	cbz	r3, 6e0a <bt_recv_prio+0x76>
    6dc4:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6dc6:	2102      	movs	r1, #2
    6dc8:	3008      	adds	r0, #8
    6dca:	f014 fbb4 	bl	1b536 <net_buf_simple_pull>
	switch (hdr->evt) {
    6dce:	782b      	ldrb	r3, [r5, #0]
    6dd0:	2b0f      	cmp	r3, #15
    6dd2:	d028      	beq.n	6e26 <bt_recv_prio+0x92>
    6dd4:	2b13      	cmp	r3, #19
    6dd6:	d02a      	beq.n	6e2e <bt_recv_prio+0x9a>
    6dd8:	2b0e      	cmp	r3, #14
    6dda:	d01c      	beq.n	6e16 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    6ddc:	4620      	mov	r0, r4
    6dde:	f014 fb11 	bl	1b404 <net_buf_unref>
		BT_ASSERT(0);
    6de2:	4040      	eors	r0, r0
    6de4:	f380 8811 	msr	BASEPRI, r0
    6de8:	f04f 0004 	mov.w	r0, #4
    6dec:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6dee:	4040      	eors	r0, r0
    6df0:	f380 8811 	msr	BASEPRI, r0
    6df4:	f04f 0004 	mov.w	r0, #4
    6df8:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6dfa:	4040      	eors	r0, r0
    6dfc:	f380 8811 	msr	BASEPRI, r0
    6e00:	f04f 0004 	mov.w	r0, #4
    6e04:	df02      	svc	2
		return false;
    6e06:	2300      	movs	r3, #0
    6e08:	e7db      	b.n	6dc2 <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6e0a:	4040      	eors	r0, r0
    6e0c:	f380 8811 	msr	BASEPRI, r0
    6e10:	f04f 0004 	mov.w	r0, #4
    6e14:	df02      	svc	2
		hci_cmd_complete(buf);
    6e16:	4620      	mov	r0, r4
    6e18:	f7fe fa70 	bl	52fc <hci_cmd_complete>
	net_buf_unref(buf);
    6e1c:	4620      	mov	r0, r4
    6e1e:	f014 faf1 	bl	1b404 <net_buf_unref>
}
    6e22:	2000      	movs	r0, #0
    6e24:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    6e26:	4620      	mov	r0, r4
    6e28:	f7fe fa80 	bl	532c <hci_cmd_status>
		break;
    6e2c:	e7f6      	b.n	6e1c <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    6e2e:	4620      	mov	r0, r4
    6e30:	f7fe fa92 	bl	5358 <hci_num_completed_packets>
		break;
    6e34:	e7f2      	b.n	6e1c <bt_recv_prio+0x88>
	...

00006e38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6e38:	4b0a      	ldr	r3, [pc, #40]	; (6e64 <bt_hci_driver_register+0x2c>)
    6e3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6e3e:	b943      	cbnz	r3, 6e52 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    6e40:	6883      	ldr	r3, [r0, #8]
    6e42:	b14b      	cbz	r3, 6e58 <bt_hci_driver_register+0x20>
    6e44:	68c3      	ldr	r3, [r0, #12]
    6e46:	b153      	cbz	r3, 6e5e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    6e48:	4b06      	ldr	r3, [pc, #24]	; (6e64 <bt_hci_driver_register+0x2c>)
    6e4a:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    6e4e:	2000      	movs	r0, #0
    6e50:	4770      	bx	lr
		return -EALREADY;
    6e52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6e56:	4770      	bx	lr
		return -EINVAL;
    6e58:	f06f 0015 	mvn.w	r0, #21
    6e5c:	4770      	bx	lr
    6e5e:	f06f 0015 	mvn.w	r0, #21
}
    6e62:	4770      	bx	lr
    6e64:	2000be08 	.word	0x2000be08

00006e68 <bt_enable>:
{
    6e68:	b530      	push	{r4, r5, lr}
    6e6a:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    6e6c:	4b29      	ldr	r3, [pc, #164]	; (6f14 <bt_enable+0xac>)
    6e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6e72:	2b00      	cmp	r3, #0
    6e74:	d047      	beq.n	6f06 <bt_enable+0x9e>
    6e76:	4b28      	ldr	r3, [pc, #160]	; (6f18 <bt_enable+0xb0>)
    6e78:	f3bf 8f5b 	dmb	ish
    6e7c:	e853 2f00 	ldrex	r2, [r3]
    6e80:	f042 0101 	orr.w	r1, r2, #1
    6e84:	e843 1400 	strex	r4, r1, [r3]
    6e88:	2c00      	cmp	r4, #0
    6e8a:	d1f7      	bne.n	6e7c <bt_enable+0x14>
    6e8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6e90:	f012 0f01 	tst.w	r2, #1
    6e94:	d13a      	bne.n	6f0c <bt_enable+0xa4>
    6e96:	4604      	mov	r4, r0
	ready_cb = cb;
    6e98:	4b20      	ldr	r3, [pc, #128]	; (6f1c <bt_enable+0xb4>)
    6e9a:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    6e9c:	2300      	movs	r3, #0
    6e9e:	9305      	str	r3, [sp, #20]
    6ea0:	9304      	str	r3, [sp, #16]
    6ea2:	f06f 0208 	mvn.w	r2, #8
    6ea6:	9203      	str	r2, [sp, #12]
    6ea8:	9302      	str	r3, [sp, #8]
    6eaa:	9301      	str	r3, [sp, #4]
    6eac:	9300      	str	r3, [sp, #0]
    6eae:	4b1c      	ldr	r3, [pc, #112]	; (6f20 <bt_enable+0xb8>)
    6eb0:	f44f 7220 	mov.w	r2, #640	; 0x280
    6eb4:	491b      	ldr	r1, [pc, #108]	; (6f24 <bt_enable+0xbc>)
    6eb6:	481c      	ldr	r0, [pc, #112]	; (6f28 <bt_enable+0xc0>)
    6eb8:	f023 f86e 	bl	29f98 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    6ebc:	4b15      	ldr	r3, [pc, #84]	; (6f14 <bt_enable+0xac>)
    6ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6ec2:	689b      	ldr	r3, [r3, #8]
    6ec4:	4798      	blx	r3
	if (err) {
    6ec6:	4605      	mov	r5, r0
    6ec8:	b980      	cbnz	r0, 6eec <bt_enable+0x84>
	if (!cb) {
    6eca:	b194      	cbz	r4, 6ef2 <bt_enable+0x8a>
    6ecc:	4b17      	ldr	r3, [pc, #92]	; (6f2c <bt_enable+0xc4>)
    6ece:	f3bf 8f5b 	dmb	ish
    6ed2:	e853 2f00 	ldrex	r2, [r3]
    6ed6:	f042 0101 	orr.w	r1, r2, #1
    6eda:	e843 1000 	strex	r0, r1, [r3]
    6ede:	2800      	cmp	r0, #0
    6ee0:	d1f7      	bne.n	6ed2 <bt_enable+0x6a>
    6ee2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6ee6:	f012 0f01 	tst.w	r2, #1
    6eea:	d006      	beq.n	6efa <bt_enable+0x92>
}
    6eec:	4628      	mov	r0, r5
    6eee:	b007      	add	sp, #28
    6ef0:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    6ef2:	f7ff f8bb 	bl	606c <bt_init>
    6ef6:	4605      	mov	r5, r0
    6ef8:	e7f8      	b.n	6eec <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    6efa:	f1a3 0108 	sub.w	r1, r3, #8
    6efe:	480c      	ldr	r0, [pc, #48]	; (6f30 <bt_enable+0xc8>)
    6f00:	f022 fa34 	bl	2936c <k_queue_append>
    6f04:	e7f2      	b.n	6eec <bt_enable+0x84>
		return -ENODEV;
    6f06:	f06f 0512 	mvn.w	r5, #18
    6f0a:	e7ef      	b.n	6eec <bt_enable+0x84>
		return -EALREADY;
    6f0c:	f06f 0577 	mvn.w	r5, #119	; 0x77
    6f10:	e7ec      	b.n	6eec <bt_enable+0x84>
    6f12:	bf00      	nop
    6f14:	2000be08 	.word	0x2000be08
    6f18:	2000be78 	.word	0x2000be78
    6f1c:	2000087c 	.word	0x2000087c
    6f20:	00006cfd 	.word	0x00006cfd
    6f24:	20004190 	.word	0x20004190
    6f28:	20000884 	.word	0x20000884
    6f2c:	2000be74 	.word	0x2000be74
    6f30:	200030f0 	.word	0x200030f0

00006f34 <bt_addr_le_is_bonded>:
{
    6f34:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    6f36:	f006 fd51 	bl	d9dc <bt_keys_find_addr>
		return keys && keys->keys;
    6f3a:	b118      	cbz	r0, 6f44 <bt_addr_le_is_bonded+0x10>
    6f3c:	8983      	ldrh	r3, [r0, #12]
    6f3e:	b91b      	cbnz	r3, 6f48 <bt_addr_le_is_bonded+0x14>
    6f40:	2000      	movs	r0, #0
    6f42:	bd08      	pop	{r3, pc}
    6f44:	2000      	movs	r0, #0
    6f46:	bd08      	pop	{r3, pc}
    6f48:	2001      	movs	r0, #1
}
    6f4a:	bd08      	pop	{r3, pc}

00006f4c <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f50:	4605      	mov	r5, r0
    6f52:	460c      	mov	r4, r1
    6f54:	4617      	mov	r7, r2
    6f56:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    6f58:	f7fd ff88 	bl	4e6c <valid_adv_param>
    6f5c:	2800      	cmp	r0, #0
    6f5e:	f000 808d 	beq.w	707c <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f62:	f3bf 8f5b 	dmb	ish
    6f66:	4b4b      	ldr	r3, [pc, #300]	; (7094 <bt_le_adv_start+0x148>)
    6f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6f6a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6f6e:	f013 0f20 	tst.w	r3, #32
    6f72:	f040 8086 	bne.w	7082 <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    6f76:	463a      	mov	r2, r7
    6f78:	4621      	mov	r1, r4
    6f7a:	f242 0008 	movw	r0, #8200	; 0x2008
    6f7e:	f7fe fe52 	bl	5c26 <set_ad>
	if (err) {
    6f82:	4604      	mov	r4, r0
    6f84:	2800      	cmp	r0, #0
    6f86:	d13b      	bne.n	7000 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6f88:	2e00      	cmp	r6, #0
    6f8a:	d03c      	beq.n	7006 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6f8c:	9a06      	ldr	r2, [sp, #24]
    6f8e:	4631      	mov	r1, r6
    6f90:	f242 0009 	movw	r0, #8201	; 0x2009
    6f94:	f7fe fe47 	bl	5c26 <set_ad>
		if (err) {
    6f98:	4604      	mov	r4, r0
    6f9a:	bb88      	cbnz	r0, 7000 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    6f9c:	210f      	movs	r1, #15
    6f9e:	f242 0006 	movw	r0, #8198	; 0x2006
    6fa2:	f7fe fa21 	bl	53e8 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    6fa6:	4680      	mov	r8, r0
    6fa8:	2800      	cmp	r0, #0
    6faa:	d06d      	beq.n	7088 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    6fac:	210f      	movs	r1, #15
    6fae:	3008      	adds	r0, #8
    6fb0:	f014 fa74 	bl	1b49c <net_buf_simple_add>
    6fb4:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    6fb6:	220f      	movs	r2, #15
    6fb8:	2100      	movs	r1, #0
    6fba:	f023 fd41 	bl	2aa40 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    6fbe:	886b      	ldrh	r3, [r5, #2]
    6fc0:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    6fc2:	88ab      	ldrh	r3, [r5, #4]
    6fc4:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    6fc6:	2307      	movs	r3, #7
    6fc8:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    6fca:	782b      	ldrb	r3, [r5, #0]
    6fcc:	f013 0f01 	tst.w	r3, #1
    6fd0:	d11e      	bne.n	7010 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    6fd2:	68a8      	ldr	r0, [r5, #8]
    6fd4:	b378      	cbz	r0, 7036 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    6fd6:	7943      	ldrb	r3, [r0, #5]
    6fd8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6fdc:	d157      	bne.n	708e <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    6fde:	f7fe fd0b 	bl	59f8 <set_random_address>
    6fe2:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    6fe4:	bb5c      	cbnz	r4, 703e <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    6fe6:	2301      	movs	r3, #1
    6fe8:	717b      	strb	r3, [r7, #5]

		if (sd) {
    6fea:	b366      	cbz	r6, 7046 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    6fec:	2302      	movs	r3, #2
    6fee:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    6ff0:	2200      	movs	r2, #0
    6ff2:	4641      	mov	r1, r8
    6ff4:	f242 0006 	movw	r0, #8198	; 0x2006
    6ff8:	f7fe fa22 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    6ffc:	4604      	mov	r4, r0
    6ffe:	b328      	cbz	r0, 704c <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    7000:	4620      	mov	r0, r4
    7002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7006:	782b      	ldrb	r3, [r5, #0]
    7008:	f013 0f01 	tst.w	r3, #1
    700c:	d0c6      	beq.n	6f9c <bt_le_adv_start+0x50>
    700e:	e7bd      	b.n	6f8c <bt_le_adv_start+0x40>
    7010:	f3bf 8f5b 	dmb	ish
    7014:	4b1f      	ldr	r3, [pc, #124]	; (7094 <bt_le_adv_start+0x148>)
    7016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7018:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    701c:	f013 0f04 	tst.w	r3, #4
    7020:	d105      	bne.n	702e <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    7022:	4b1c      	ldr	r3, [pc, #112]	; (7094 <bt_le_adv_start+0x148>)
    7024:	781b      	ldrb	r3, [r3, #0]
    7026:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    7028:	2300      	movs	r3, #0
    702a:	713b      	strb	r3, [r7, #4]
    702c:	e7e0      	b.n	6ff0 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    702e:	481a      	ldr	r0, [pc, #104]	; (7098 <bt_le_adv_start+0x14c>)
    7030:	f7fe fce2 	bl	59f8 <set_random_address>
    7034:	e7f5      	b.n	7022 <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    7036:	f7fe fd0f 	bl	5a58 <le_set_private_addr>
    703a:	4604      	mov	r4, r0
    703c:	e7d2      	b.n	6fe4 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    703e:	4640      	mov	r0, r8
    7040:	f014 f9e0 	bl	1b404 <net_buf_unref>
			return err;
    7044:	e7dc      	b.n	7000 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    7046:	2303      	movs	r3, #3
    7048:	713b      	strb	r3, [r7, #4]
    704a:	e7d1      	b.n	6ff0 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    704c:	2001      	movs	r0, #1
    704e:	f7fe fd71 	bl	5b34 <set_advertise_enable>
	if (err) {
    7052:	4604      	mov	r4, r0
    7054:	2800      	cmp	r0, #0
    7056:	d1d3      	bne.n	7000 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7058:	782b      	ldrb	r3, [r5, #0]
    705a:	f013 0f02 	tst.w	r3, #2
    705e:	d1cf      	bne.n	7000 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7060:	4b0e      	ldr	r3, [pc, #56]	; (709c <bt_le_adv_start+0x150>)
    7062:	f3bf 8f5b 	dmb	ish
    7066:	e853 2f00 	ldrex	r2, [r3]
    706a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    706e:	e843 2100 	strex	r1, r2, [r3]
    7072:	2900      	cmp	r1, #0
    7074:	d1f7      	bne.n	7066 <bt_le_adv_start+0x11a>
    7076:	f3bf 8f5b 	dmb	ish
    707a:	e7c1      	b.n	7000 <bt_le_adv_start+0xb4>
		return -EINVAL;
    707c:	f06f 0415 	mvn.w	r4, #21
    7080:	e7be      	b.n	7000 <bt_le_adv_start+0xb4>
		return -EALREADY;
    7082:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7086:	e7bb      	b.n	7000 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    7088:	f06f 0468 	mvn.w	r4, #104	; 0x68
    708c:	e7b8      	b.n	7000 <bt_le_adv_start+0xb4>
				return -EINVAL;
    708e:	f06f 0415 	mvn.w	r4, #21
    7092:	e7b5      	b.n	7000 <bt_le_adv_start+0xb4>
    7094:	2000be08 	.word	0x2000be08
    7098:	2000be09 	.word	0x2000be09
    709c:	2000be78 	.word	0x2000be78

000070a0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    70a0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    70a2:	4b16      	ldr	r3, [pc, #88]	; (70fc <bt_le_adv_stop+0x5c>)
    70a4:	f103 0270 	add.w	r2, r3, #112	; 0x70
    70a8:	f3bf 8f5b 	dmb	ish
    70ac:	e852 1f00 	ldrex	r1, [r2]
    70b0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    70b4:	e842 1000 	strex	r0, r1, [r2]
    70b8:	2800      	cmp	r0, #0
    70ba:	d1f7      	bne.n	70ac <bt_le_adv_stop+0xc>
    70bc:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70c0:	f3bf 8f5b 	dmb	ish
    70c4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    70c6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    70ca:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    70ce:	b90c      	cbnz	r4, 70d4 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    70d0:	4620      	mov	r0, r4
    70d2:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    70d4:	2000      	movs	r0, #0
    70d6:	f7fe fd2d 	bl	5b34 <set_advertise_enable>
	if (err) {
    70da:	4604      	mov	r4, r0
    70dc:	2800      	cmp	r0, #0
    70de:	d1f7      	bne.n	70d0 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70e0:	f3bf 8f5b 	dmb	ish
    70e4:	4b05      	ldr	r3, [pc, #20]	; (70fc <bt_le_adv_stop+0x5c>)
    70e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    70e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    70ec:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    70f0:	b90b      	cbnz	r3, 70f6 <bt_le_adv_stop+0x56>
	return 0;
    70f2:	461c      	mov	r4, r3
    70f4:	e7ec      	b.n	70d0 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    70f6:	f7fe fcaf 	bl	5a58 <le_set_private_addr>
    70fa:	e7e9      	b.n	70d0 <bt_le_adv_stop+0x30>
    70fc:	2000be08 	.word	0x2000be08

00007100 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    7100:	b538      	push	{r3, r4, r5, lr}
    7102:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    7104:	4808      	ldr	r0, [pc, #32]	; (7128 <bt_buf_get_rx+0x28>)
    7106:	f014 f90f 	bl	1b328 <net_buf_alloc>
#endif

	if (buf) {
    710a:	4604      	mov	r4, r0
    710c:	b150      	cbz	r0, 7124 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    710e:	2100      	movs	r1, #0
    7110:	f014 f965 	bl	1b3de <net_buf_reserve>
    7114:	f104 0310 	add.w	r3, r4, #16
    7118:	89e2      	ldrh	r2, [r4, #14]
    711a:	4413      	add	r3, r2
    711c:	3303      	adds	r3, #3
    711e:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    7122:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7124:	4620      	mov	r0, r4
    7126:	bd38      	pop	{r3, r4, r5, pc}
    7128:	2000d6cc 	.word	0x2000d6cc

0000712c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    712c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    712e:	f04f 0320 	mov.w	r3, #32
    7132:	f3ef 8211 	mrs	r2, BASEPRI
    7136:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    713a:	4b0f      	ldr	r3, [pc, #60]	; (7178 <bt_buf_get_cmd_complete+0x4c>)
    713c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    7140:	2500      	movs	r5, #0
    7142:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7146:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    714a:	b17c      	cbz	r4, 716c <bt_buf_get_cmd_complete+0x40>
    714c:	f104 0310 	add.w	r3, r4, #16
    7150:	89e2      	ldrh	r2, [r4, #14]
    7152:	4413      	add	r3, r2
    7154:	3303      	adds	r3, #3
    7156:	f023 0303 	bic.w	r3, r3, #3
    715a:	2201      	movs	r2, #1
    715c:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    715e:	4629      	mov	r1, r5
    7160:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7162:	4620      	mov	r0, r4
    7164:	f014 f93b 	bl	1b3de <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    7168:	4620      	mov	r0, r4
    716a:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    716c:	4601      	mov	r1, r0
    716e:	2001      	movs	r0, #1
    7170:	f7ff ffc6 	bl	7100 <bt_buf_get_rx>
    7174:	4604      	mov	r4, r0
    7176:	e7f7      	b.n	7168 <bt_buf_get_cmd_complete+0x3c>
    7178:	2000be08 	.word	0x2000be08

0000717c <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    717c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    717e:	4b29      	ldr	r3, [pc, #164]	; (7224 <bt_pub_key_gen+0xa8>)
    7180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    7184:	f003 0306 	and.w	r3, r3, #6
    7188:	2b06      	cmp	r3, #6
    718a:	d148      	bne.n	721e <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    718c:	4b26      	ldr	r3, [pc, #152]	; (7228 <bt_pub_key_gen+0xac>)
    718e:	681a      	ldr	r2, [r3, #0]
    7190:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    7192:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7194:	4b25      	ldr	r3, [pc, #148]	; (722c <bt_pub_key_gen+0xb0>)
    7196:	f3bf 8f5b 	dmb	ish
    719a:	e853 2f00 	ldrex	r2, [r3]
    719e:	f042 0110 	orr.w	r1, r2, #16
    71a2:	e843 1400 	strex	r4, r1, [r3]
    71a6:	2c00      	cmp	r4, #0
    71a8:	d1f7      	bne.n	719a <bt_pub_key_gen+0x1e>
    71aa:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    71ae:	f012 0f10 	tst.w	r2, #16
    71b2:	d002      	beq.n	71ba <bt_pub_key_gen+0x3e>
		return 0;
    71b4:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    71b6:	4630      	mov	r0, r6
    71b8:	bd70      	pop	{r4, r5, r6, pc}
    71ba:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    71bc:	f3bf 8f5b 	dmb	ish
    71c0:	e853 2f00 	ldrex	r2, [r3]
    71c4:	f022 0208 	bic.w	r2, r2, #8
    71c8:	e843 2100 	strex	r1, r2, [r3]
    71cc:	2900      	cmp	r1, #0
    71ce:	d1f7      	bne.n	71c0 <bt_pub_key_gen+0x44>
    71d0:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    71d4:	2200      	movs	r2, #0
    71d6:	4611      	mov	r1, r2
    71d8:	f242 0025 	movw	r0, #8229	; 0x2025
    71dc:	f7fe f930 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    71e0:	4606      	mov	r6, r0
    71e2:	b910      	cbnz	r0, 71ea <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    71e4:	4b10      	ldr	r3, [pc, #64]	; (7228 <bt_pub_key_gen+0xac>)
    71e6:	681c      	ldr	r4, [r3, #0]
    71e8:	e011      	b.n	720e <bt_pub_key_gen+0x92>
    71ea:	4b10      	ldr	r3, [pc, #64]	; (722c <bt_pub_key_gen+0xb0>)
    71ec:	f3bf 8f5b 	dmb	ish
    71f0:	e853 2f00 	ldrex	r2, [r3]
    71f4:	f022 0210 	bic.w	r2, r2, #16
    71f8:	e843 2100 	strex	r1, r2, [r3]
    71fc:	2900      	cmp	r1, #0
    71fe:	d1f7      	bne.n	71f0 <bt_pub_key_gen+0x74>
    7200:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    7204:	2200      	movs	r2, #0
    7206:	4b08      	ldr	r3, [pc, #32]	; (7228 <bt_pub_key_gen+0xac>)
    7208:	601a      	str	r2, [r3, #0]
		return err;
    720a:	e7d4      	b.n	71b6 <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    720c:	6864      	ldr	r4, [r4, #4]
    720e:	2c00      	cmp	r4, #0
    7210:	d0d1      	beq.n	71b6 <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    7212:	42ac      	cmp	r4, r5
    7214:	d0fa      	beq.n	720c <bt_pub_key_gen+0x90>
			cb->func(NULL);
    7216:	6823      	ldr	r3, [r4, #0]
    7218:	2000      	movs	r0, #0
    721a:	4798      	blx	r3
    721c:	e7f6      	b.n	720c <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    721e:	f06f 0685 	mvn.w	r6, #133	; 0x85
    7222:	e7c8      	b.n	71b6 <bt_pub_key_gen+0x3a>
    7224:	2000be08 	.word	0x2000be08
    7228:	20000878 	.word	0x20000878
    722c:	2000be78 	.word	0x2000be78

00007230 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    7230:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7232:	4b21      	ldr	r3, [pc, #132]	; (72b8 <bt_dh_key_gen+0x88>)
    7234:	681b      	ldr	r3, [r3, #0]
    7236:	bbab      	cbnz	r3, 72a4 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7238:	f3bf 8f5b 	dmb	ish
    723c:	4b1f      	ldr	r3, [pc, #124]	; (72bc <bt_dh_key_gen+0x8c>)
    723e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7240:	f3bf 8f5b 	dmb	ish
    7244:	f013 0f10 	tst.w	r3, #16
    7248:	d130      	bne.n	72ac <bt_dh_key_gen+0x7c>
    724a:	f3bf 8f5b 	dmb	ish
    724e:	4b1b      	ldr	r3, [pc, #108]	; (72bc <bt_dh_key_gen+0x8c>)
    7250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7252:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    7256:	f013 0f08 	tst.w	r3, #8
    725a:	d02a      	beq.n	72b2 <bt_dh_key_gen+0x82>
    725c:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    725e:	4b16      	ldr	r3, [pc, #88]	; (72b8 <bt_dh_key_gen+0x88>)
    7260:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    7262:	2140      	movs	r1, #64	; 0x40
    7264:	f242 0026 	movw	r0, #8230	; 0x2026
    7268:	f7fe f8be 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    726c:	4605      	mov	r5, r0
    726e:	b198      	cbz	r0, 7298 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    7270:	2140      	movs	r1, #64	; 0x40
    7272:	3008      	adds	r0, #8
    7274:	f014 f912 	bl	1b49c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    7278:	2240      	movs	r2, #64	; 0x40
    727a:	4621      	mov	r1, r4
    727c:	f7f9 f820 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    7280:	2200      	movs	r2, #0
    7282:	4629      	mov	r1, r5
    7284:	f242 0026 	movw	r0, #8230	; 0x2026
    7288:	f7fe f8da 	bl	5440 <bt_hci_cmd_send_sync>
	if (err) {
    728c:	4603      	mov	r3, r0
    728e:	b158      	cbz	r0, 72a8 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    7290:	2100      	movs	r1, #0
    7292:	4a09      	ldr	r2, [pc, #36]	; (72b8 <bt_dh_key_gen+0x88>)
    7294:	6011      	str	r1, [r2, #0]
		return err;
    7296:	e007      	b.n	72a8 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    7298:	2200      	movs	r2, #0
    729a:	4b07      	ldr	r3, [pc, #28]	; (72b8 <bt_dh_key_gen+0x88>)
    729c:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    729e:	f06f 0368 	mvn.w	r3, #104	; 0x68
    72a2:	e001      	b.n	72a8 <bt_dh_key_gen+0x78>
		return -EBUSY;
    72a4:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    72a8:	4618      	mov	r0, r3
    72aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    72ac:	f06f 030f 	mvn.w	r3, #15
    72b0:	e7fa      	b.n	72a8 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    72b2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    72b6:	e7f7      	b.n	72a8 <bt_dh_key_gen+0x78>
    72b8:	20000834 	.word	0x20000834
    72bc:	2000be08 	.word	0x2000be08

000072c0 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    72c0:	b538      	push	{r3, r4, r5, lr}
    72c2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    72c4:	4b06      	ldr	r3, [pc, #24]	; (72e0 <notify_connected+0x20>)
    72c6:	681c      	ldr	r4, [r3, #0]
    72c8:	e000      	b.n	72cc <notify_connected+0xc>
    72ca:	69a4      	ldr	r4, [r4, #24]
    72cc:	b134      	cbz	r4, 72dc <notify_connected+0x1c>
		if (cb->connected) {
    72ce:	6823      	ldr	r3, [r4, #0]
    72d0:	2b00      	cmp	r3, #0
    72d2:	d0fa      	beq.n	72ca <notify_connected+0xa>
			cb->connected(conn, conn->err);
    72d4:	7ae9      	ldrb	r1, [r5, #11]
    72d6:	4628      	mov	r0, r5
    72d8:	4798      	blx	r3
    72da:	e7f6      	b.n	72ca <notify_connected+0xa>
		}
	}
}
    72dc:	bd38      	pop	{r3, r4, r5, pc}
    72de:	bf00      	nop
    72e0:	20000954 	.word	0x20000954

000072e4 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    72e4:	b538      	push	{r3, r4, r5, lr}
    72e6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    72e8:	4b06      	ldr	r3, [pc, #24]	; (7304 <notify_disconnected+0x20>)
    72ea:	681c      	ldr	r4, [r3, #0]
    72ec:	e000      	b.n	72f0 <notify_disconnected+0xc>
    72ee:	69a4      	ldr	r4, [r4, #24]
    72f0:	b134      	cbz	r4, 7300 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    72f2:	6863      	ldr	r3, [r4, #4]
    72f4:	2b00      	cmp	r3, #0
    72f6:	d0fa      	beq.n	72ee <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    72f8:	7ae9      	ldrb	r1, [r5, #11]
    72fa:	4628      	mov	r0, r5
    72fc:	4798      	blx	r3
    72fe:	e7f6      	b.n	72ee <notify_disconnected+0xa>
		}
	}
}
    7300:	bd38      	pop	{r3, r4, r5, pc}
    7302:	bf00      	nop
    7304:	20000954 	.word	0x20000954

00007308 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7308:	2300      	movs	r3, #0
    730a:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    730c:	4b04      	ldr	r3, [pc, #16]	; (7320 <tx_free+0x18>)
    730e:	681a      	ldr	r2, [r3, #0]
    7310:	6002      	str	r2, [r0, #0]
	list->head = node;
    7312:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    7314:	685b      	ldr	r3, [r3, #4]
    7316:	b103      	cbz	r3, 731a <tx_free+0x12>
    7318:	4770      	bx	lr
		list->tail = list->head;
    731a:	4b01      	ldr	r3, [pc, #4]	; (7320 <tx_free+0x18>)
    731c:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    731e:	e7fb      	b.n	7318 <tx_free+0x10>
    7320:	20000af4 	.word	0x20000af4

00007324 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    7324:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    7326:	4a0f      	ldr	r2, [pc, #60]	; (7364 <add_pending_tx+0x40>)
    7328:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    732a:	681c      	ldr	r4, [r3, #0]
    732c:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    732e:	6852      	ldr	r2, [r2, #4]
    7330:	4293      	cmp	r3, r2
    7332:	d011      	beq.n	7358 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    7334:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    7336:	f04f 0220 	mov.w	r2, #32
    733a:	f3ef 8111 	mrs	r1, BASEPRI
    733e:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    7342:	2200      	movs	r2, #0
    7344:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    7346:	6982      	ldr	r2, [r0, #24]
    7348:	b14a      	cbz	r2, 735e <add_pending_tx+0x3a>
		list->tail->next = node;
    734a:	6013      	str	r3, [r2, #0]
		list->tail = node;
    734c:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    734e:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    7352:	4618      	mov	r0, r3
    7354:	bc10      	pop	{r4}
    7356:	4770      	bx	lr
		list->tail = list->head;
    7358:	4a02      	ldr	r2, [pc, #8]	; (7364 <add_pending_tx+0x40>)
    735a:	6054      	str	r4, [r2, #4]
    735c:	e7ea      	b.n	7334 <add_pending_tx+0x10>
		list->tail = node;
    735e:	6183      	str	r3, [r0, #24]
		list->head = node;
    7360:	6143      	str	r3, [r0, #20]
    7362:	e7f4      	b.n	734e <add_pending_tx+0x2a>
    7364:	20000af4 	.word	0x20000af4

00007368 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    7368:	b510      	push	{r4, lr}
	__asm__ volatile(
    736a:	f04f 0320 	mov.w	r3, #32
    736e:	f3ef 8411 	mrs	r4, BASEPRI
    7372:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    7376:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    7378:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    737a:	b163      	cbz	r3, 7396 <remove_pending_tx+0x2e>
		if (test == node) {
    737c:	4299      	cmp	r1, r3
    737e:	d002      	beq.n	7386 <remove_pending_tx+0x1e>
		prev = test;
    7380:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    7382:	681b      	ldr	r3, [r3, #0]
    7384:	e7f9      	b.n	737a <remove_pending_tx+0x12>
	if (!prev_node) {
    7386:	b162      	cbz	r2, 73a2 <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    7388:	680b      	ldr	r3, [r1, #0]
    738a:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    738c:	6983      	ldr	r3, [r0, #24]
    738e:	4299      	cmp	r1, r3
    7390:	d00e      	beq.n	73b0 <remove_pending_tx+0x48>
	node->next = NULL;
    7392:	2300      	movs	r3, #0
    7394:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7396:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    739a:	4608      	mov	r0, r1
    739c:	f7ff ffb4 	bl	7308 <tx_free>
    73a0:	bd10      	pop	{r4, pc}
		list->head = node->next;
    73a2:	680b      	ldr	r3, [r1, #0]
    73a4:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    73a6:	6982      	ldr	r2, [r0, #24]
    73a8:	4291      	cmp	r1, r2
    73aa:	d1f2      	bne.n	7392 <remove_pending_tx+0x2a>
			list->tail = list->head;
    73ac:	6183      	str	r3, [r0, #24]
    73ae:	e7f0      	b.n	7392 <remove_pending_tx+0x2a>
			list->tail = prev_node;
    73b0:	6182      	str	r2, [r0, #24]
    73b2:	e7ee      	b.n	7392 <remove_pending_tx+0x2a>

000073b4 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    73b4:	884b      	ldrh	r3, [r1, #2]
    73b6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    73ba:	888b      	ldrh	r3, [r1, #4]
    73bc:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    73c0:	88cb      	ldrh	r3, [r1, #6]
    73c2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    73c6:	4770      	bx	lr

000073c8 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    73c8:	89c3      	ldrh	r3, [r0, #14]
    73ca:	b903      	cbnz	r3, 73ce <bt_conn_reset_rx_state+0x6>
    73cc:	4770      	bx	lr
{
    73ce:	b510      	push	{r4, lr}
    73d0:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    73d2:	6900      	ldr	r0, [r0, #16]
    73d4:	f014 f816 	bl	1b404 <net_buf_unref>
	conn->rx = NULL;
    73d8:	2300      	movs	r3, #0
    73da:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    73dc:	81e3      	strh	r3, [r4, #14]
    73de:	bd10      	pop	{r4, pc}

000073e0 <conn_new>:
{
    73e0:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    73e2:	2300      	movs	r3, #0
    73e4:	b1ab      	cbz	r3, 7412 <conn_new+0x32>
	struct bt_conn *conn = NULL;
    73e6:	2400      	movs	r4, #0
	if (!conn) {
    73e8:	b18c      	cbz	r4, 740e <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    73ea:	229c      	movs	r2, #156	; 0x9c
    73ec:	2100      	movs	r1, #0
    73ee:	4620      	mov	r0, r4
    73f0:	f023 fb26 	bl	2aa40 <memset>
	atomic_set(&conn->ref, 1);
    73f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    73f8:	2201      	movs	r2, #1
    73fa:	f3bf 8f5b 	dmb	ish
    73fe:	e853 1f00 	ldrex	r1, [r3]
    7402:	e843 2000 	strex	r0, r2, [r3]
    7406:	2800      	cmp	r0, #0
    7408:	d1f9      	bne.n	73fe <conn_new+0x1e>
    740a:	f3bf 8f5b 	dmb	ish
}
    740e:	4620      	mov	r0, r4
    7410:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    7412:	229c      	movs	r2, #156	; 0x9c
    7414:	fb02 f203 	mul.w	r2, r2, r3
    7418:	3240      	adds	r2, #64	; 0x40
    741a:	4907      	ldr	r1, [pc, #28]	; (7438 <conn_new+0x58>)
    741c:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    741e:	f3bf 8f5b 	dmb	ish
    7422:	6852      	ldr	r2, [r2, #4]
    7424:	f3bf 8f5b 	dmb	ish
    7428:	b10a      	cbz	r2, 742e <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    742a:	3301      	adds	r3, #1
    742c:	e7da      	b.n	73e4 <conn_new+0x4>
			conn = &conns[i];
    742e:	229c      	movs	r2, #156	; 0x9c
    7430:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    7434:	e7d8      	b.n	73e8 <conn_new+0x8>
    7436:	bf00      	nop
    7438:	20000968 	.word	0x20000968

0000743c <bt_conn_get_pkts>:
}
    743c:	4800      	ldr	r0, [pc, #0]	; (7440 <bt_conn_get_pkts+0x4>)
    743e:	4770      	bx	lr
    7440:	2000be94 	.word	0x2000be94

00007444 <process_unack_tx>:
{
    7444:	b510      	push	{r4, lr}
    7446:	4604      	mov	r4, r0
    7448:	e009      	b.n	745e <process_unack_tx+0x1a>
    744a:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    744e:	b1b0      	cbz	r0, 747e <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    7450:	f7ff ff5a 	bl	7308 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    7454:	4620      	mov	r0, r4
    7456:	f7ff fff1 	bl	743c <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    745a:	f022 fb1e 	bl	29a9a <_impl_k_sem_give>
	__asm__ volatile(
    745e:	f04f 0220 	mov.w	r2, #32
    7462:	f3ef 8311 	mrs	r3, BASEPRI
    7466:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    746a:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    746c:	2800      	cmp	r0, #0
    746e:	d0ec      	beq.n	744a <process_unack_tx+0x6>
	list->head = node->next;
    7470:	6802      	ldr	r2, [r0, #0]
    7472:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    7474:	69a1      	ldr	r1, [r4, #24]
    7476:	4288      	cmp	r0, r1
    7478:	d1e7      	bne.n	744a <process_unack_tx+0x6>
		list->tail = list->head;
    747a:	61a2      	str	r2, [r4, #24]
    747c:	e7e5      	b.n	744a <process_unack_tx+0x6>
    747e:	bd10      	pop	{r4, pc}

00007480 <notify_le_param_updated>:
{
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7484:	4b08      	ldr	r3, [pc, #32]	; (74a8 <notify_le_param_updated+0x28>)
    7486:	681c      	ldr	r4, [r3, #0]
    7488:	e000      	b.n	748c <notify_le_param_updated+0xc>
    748a:	69a4      	ldr	r4, [r4, #24]
    748c:	b15c      	cbz	r4, 74a6 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    748e:	68e6      	ldr	r6, [r4, #12]
    7490:	2e00      	cmp	r6, #0
    7492:	d0fa      	beq.n	748a <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    7494:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    7498:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    749c:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    74a0:	4628      	mov	r0, r5
    74a2:	47b0      	blx	r6
    74a4:	e7f1      	b.n	748a <notify_le_param_updated+0xa>
}
    74a6:	bd70      	pop	{r4, r5, r6, pc}
    74a8:	20000954 	.word	0x20000954

000074ac <le_param_req>:
{
    74ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ae:	4606      	mov	r6, r0
    74b0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    74b2:	4608      	mov	r0, r1
    74b4:	f7fe fc02 	bl	5cbc <bt_le_conn_params_valid>
    74b8:	4607      	mov	r7, r0
    74ba:	b198      	cbz	r0, 74e4 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    74bc:	4b0a      	ldr	r3, [pc, #40]	; (74e8 <le_param_req+0x3c>)
    74be:	681c      	ldr	r4, [r3, #0]
    74c0:	e000      	b.n	74c4 <le_param_req+0x18>
    74c2:	69a4      	ldr	r4, [r4, #24]
    74c4:	b174      	cbz	r4, 74e4 <le_param_req+0x38>
		if (!cb->le_param_req) {
    74c6:	68a3      	ldr	r3, [r4, #8]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d0fa      	beq.n	74c2 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    74cc:	4629      	mov	r1, r5
    74ce:	4630      	mov	r0, r6
    74d0:	4798      	blx	r3
    74d2:	b130      	cbz	r0, 74e2 <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    74d4:	4628      	mov	r0, r5
    74d6:	f7fe fbf1 	bl	5cbc <bt_le_conn_params_valid>
    74da:	2800      	cmp	r0, #0
    74dc:	d1f1      	bne.n	74c2 <le_param_req+0x16>
			return false;
    74de:	4607      	mov	r7, r0
    74e0:	e000      	b.n	74e4 <le_param_req+0x38>
			return false;
    74e2:	4607      	mov	r7, r0
}
    74e4:	4638      	mov	r0, r7
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74e8:	20000954 	.word	0x20000954

000074ec <bt_conn_identity_resolved>:
{
    74ec:	b570      	push	{r4, r5, r6, lr}
    74ee:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    74f0:	78c3      	ldrb	r3, [r0, #3]
    74f2:	b923      	cbnz	r3, 74fe <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    74f4:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    74f8:	4b08      	ldr	r3, [pc, #32]	; (751c <bt_conn_identity_resolved+0x30>)
    74fa:	681c      	ldr	r4, [r3, #0]
    74fc:	e003      	b.n	7506 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    74fe:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    7502:	e7f9      	b.n	74f8 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    7504:	69a4      	ldr	r4, [r4, #24]
    7506:	b144      	cbz	r4, 751a <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    7508:	6923      	ldr	r3, [r4, #16]
    750a:	2b00      	cmp	r3, #0
    750c:	d0fa      	beq.n	7504 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    750e:	f105 0248 	add.w	r2, r5, #72	; 0x48
    7512:	4631      	mov	r1, r6
    7514:	4628      	mov	r0, r5
    7516:	4798      	blx	r3
    7518:	e7f4      	b.n	7504 <bt_conn_identity_resolved+0x18>
}
    751a:	bd70      	pop	{r4, r5, r6, pc}
    751c:	20000954 	.word	0x20000954

00007520 <bt_conn_le_start_encryption>:
{
    7520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7524:	4680      	mov	r8, r0
    7526:	4617      	mov	r7, r2
    7528:	461c      	mov	r4, r3
    752a:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    752c:	211c      	movs	r1, #28
    752e:	f242 0019 	movw	r0, #8217	; 0x2019
    7532:	f7fd ff59 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    7536:	b338      	cbz	r0, 7588 <bt_conn_le_start_encryption+0x68>
    7538:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    753a:	211c      	movs	r1, #28
    753c:	3008      	adds	r0, #8
    753e:	f013 ffad 	bl	1b49c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7542:	f8b8 2000 	ldrh.w	r2, [r8]
    7546:	4603      	mov	r3, r0
    7548:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    754c:	f8c0 7002 	str.w	r7, [r0, #2]
    7550:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    7552:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    7556:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    7558:	f100 040c 	add.w	r4, r0, #12
    755c:	462a      	mov	r2, r5
    755e:	9907      	ldr	r1, [sp, #28]
    7560:	4620      	mov	r0, r4
    7562:	f7f8 fead 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    7566:	2d0f      	cmp	r5, #15
    7568:	d907      	bls.n	757a <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    756a:	2200      	movs	r2, #0
    756c:	4631      	mov	r1, r6
    756e:	f242 0019 	movw	r0, #8217	; 0x2019
    7572:	f7fd ff65 	bl	5440 <bt_hci_cmd_send_sync>
    7576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    757a:	f1c5 0210 	rsb	r2, r5, #16
    757e:	2100      	movs	r1, #0
    7580:	1960      	adds	r0, r4, r5
    7582:	f023 fa5d 	bl	2aa40 <memset>
    7586:	e7f0      	b.n	756a <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    7588:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007590 <start_security>:
{
    7590:	b530      	push	{r4, r5, lr}
    7592:	b085      	sub	sp, #20
    7594:	4604      	mov	r4, r0
	switch (conn->role) {
    7596:	78c3      	ldrb	r3, [r0, #3]
    7598:	b123      	cbz	r3, 75a4 <start_security+0x14>
    759a:	2b01      	cmp	r3, #1
    759c:	d052      	beq.n	7644 <start_security+0xb4>
		return -EINVAL;
    759e:	f06f 0015 	mvn.w	r0, #21
    75a2:	e051      	b.n	7648 <start_security+0xb8>
		if (!conn->le.keys) {
    75a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    75a6:	b353      	cbz	r3, 75fe <start_security+0x6e>
		if (!conn->le.keys ||
    75a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    75aa:	2b00      	cmp	r3, #0
    75ac:	d036      	beq.n	761c <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    75ae:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    75b0:	f012 0f24 	tst.w	r2, #36	; 0x24
    75b4:	d032      	beq.n	761c <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    75b6:	7a62      	ldrb	r2, [r4, #9]
    75b8:	2a02      	cmp	r2, #2
    75ba:	d833      	bhi.n	7624 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    75bc:	7a63      	ldrb	r3, [r4, #9]
    75be:	2b03      	cmp	r3, #3
    75c0:	d90d      	bls.n	75de <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    75c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    75c4:	f3bf 8f5b 	dmb	ish
    75c8:	689b      	ldr	r3, [r3, #8]
    75ca:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    75ce:	f013 0f01 	tst.w	r3, #1
    75d2:	d104      	bne.n	75de <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    75d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    75d6:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    75d8:	f013 0f20 	tst.w	r3, #32
    75dc:	d02e      	beq.n	763c <start_security+0xac>
						   conn->le.keys->ltk.rand,
    75de:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    75e0:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    75e4:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    75e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    75ea:	9502      	str	r5, [sp, #8]
    75ec:	9201      	str	r2, [sp, #4]
    75ee:	8b1b      	ldrh	r3, [r3, #24]
    75f0:	9300      	str	r3, [sp, #0]
    75f2:	4602      	mov	r2, r0
    75f4:	460b      	mov	r3, r1
    75f6:	4620      	mov	r0, r4
    75f8:	f7ff ff92 	bl	7520 <bt_conn_le_start_encryption>
    75fc:	e024      	b.n	7648 <start_security+0xb8>
						     &conn->le.dst);
    75fe:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    7602:	4629      	mov	r1, r5
    7604:	2020      	movs	r0, #32
    7606:	f006 f96d 	bl	d8e4 <bt_keys_find>
    760a:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    760c:	2800      	cmp	r0, #0
    760e:	d1cb      	bne.n	75a8 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    7610:	4629      	mov	r1, r5
    7612:	2004      	movs	r0, #4
    7614:	f006 f966 	bl	d8e4 <bt_keys_find>
    7618:	6720      	str	r0, [r4, #112]	; 0x70
    761a:	e7c5      	b.n	75a8 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    761c:	4620      	mov	r0, r4
    761e:	f005 ff14 	bl	d44a <bt_smp_send_pairing_req>
    7622:	e011      	b.n	7648 <start_security+0xb8>
    7624:	f3bf 8f5b 	dmb	ish
    7628:	689b      	ldr	r3, [r3, #8]
    762a:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    762e:	f013 0f01 	tst.w	r3, #1
    7632:	d1c3      	bne.n	75bc <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    7634:	4620      	mov	r0, r4
    7636:	f005 ff08 	bl	d44a <bt_smp_send_pairing_req>
    763a:	e005      	b.n	7648 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    763c:	4620      	mov	r0, r4
    763e:	f005 ff04 	bl	d44a <bt_smp_send_pairing_req>
    7642:	e001      	b.n	7648 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    7644:	f005 feae 	bl	d3a4 <bt_smp_send_security_req>
}
    7648:	b005      	add	sp, #20
    764a:	bd30      	pop	{r4, r5, pc}

0000764c <bt_conn_security_changed>:
{
    764c:	b538      	push	{r3, r4, r5, lr}
    764e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7650:	4b06      	ldr	r3, [pc, #24]	; (766c <bt_conn_security_changed+0x20>)
    7652:	681c      	ldr	r4, [r3, #0]
    7654:	e000      	b.n	7658 <bt_conn_security_changed+0xc>
    7656:	69a4      	ldr	r4, [r4, #24]
    7658:	b134      	cbz	r4, 7668 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    765a:	6963      	ldr	r3, [r4, #20]
    765c:	2b00      	cmp	r3, #0
    765e:	d0fa      	beq.n	7656 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    7660:	7a29      	ldrb	r1, [r5, #8]
    7662:	4628      	mov	r0, r5
    7664:	4798      	blx	r3
    7666:	e7f6      	b.n	7656 <bt_conn_security_changed+0xa>
}
    7668:	bd38      	pop	{r3, r4, r5, pc}
    766a:	bf00      	nop
    766c:	20000954 	.word	0x20000954

00007670 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    7670:	7b03      	ldrb	r3, [r0, #12]
    7672:	2b03      	cmp	r3, #3
    7674:	d112      	bne.n	769c <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    7676:	7a03      	ldrb	r3, [r0, #8]
    7678:	428b      	cmp	r3, r1
    767a:	d212      	bcs.n	76a2 <bt_conn_security+0x32>
    767c:	7a43      	ldrb	r3, [r0, #9]
    767e:	4299      	cmp	r1, r3
    7680:	d801      	bhi.n	7686 <bt_conn_security+0x16>
		return 0;
    7682:	2300      	movs	r3, #0
    7684:	e00e      	b.n	76a4 <bt_conn_security+0x34>
{
    7686:	b510      	push	{r4, lr}
    7688:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    768a:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    768c:	f7ff ff80 	bl	7590 <start_security>
	if (err) {
    7690:	4603      	mov	r3, r0
    7692:	b108      	cbz	r0, 7698 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    7694:	7a22      	ldrb	r2, [r4, #8]
    7696:	7262      	strb	r2, [r4, #9]
}
    7698:	4618      	mov	r0, r3
    769a:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    769c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    76a0:	e000      	b.n	76a4 <bt_conn_security+0x34>
		return 0;
    76a2:	2300      	movs	r3, #0
}
    76a4:	4618      	mov	r0, r3
    76a6:	4770      	bx	lr

000076a8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    76a8:	4b02      	ldr	r3, [pc, #8]	; (76b4 <bt_conn_cb_register+0xc>)
    76aa:	681a      	ldr	r2, [r3, #0]
    76ac:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    76ae:	6018      	str	r0, [r3, #0]
    76b0:	4770      	bx	lr
    76b2:	bf00      	nop
    76b4:	20000954 	.word	0x20000954

000076b8 <bt_conn_recv>:
{
    76b8:	b570      	push	{r4, r5, r6, lr}
    76ba:	4605      	mov	r5, r0
    76bc:	460c      	mov	r4, r1
	switch (flags) {
    76be:	2a01      	cmp	r2, #1
    76c0:	d01a      	beq.n	76f8 <bt_conn_recv+0x40>
    76c2:	2a02      	cmp	r2, #2
    76c4:	d149      	bne.n	775a <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    76c6:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    76c8:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    76ca:	89c3      	ldrh	r3, [r0, #14]
    76cc:	b97b      	cbnz	r3, 76ee <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    76ce:	89a3      	ldrh	r3, [r4, #12]
    76d0:	1af3      	subs	r3, r6, r3
    76d2:	3304      	adds	r3, #4
    76d4:	b29b      	uxth	r3, r3
    76d6:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    76d8:	b963      	cbnz	r3, 76f4 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    76da:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    76dc:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    76de:	3304      	adds	r3, #4
    76e0:	89a2      	ldrh	r2, [r4, #12]
    76e2:	4293      	cmp	r3, r2
    76e4:	d03f      	beq.n	7766 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    76e6:	4620      	mov	r0, r4
    76e8:	f013 fe8c 	bl	1b404 <net_buf_unref>
		return;
    76ec:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    76ee:	f7ff fe6b 	bl	73c8 <bt_conn_reset_rx_state>
    76f2:	e7ec      	b.n	76ce <bt_conn_recv+0x16>
			conn->rx = buf;
    76f4:	612c      	str	r4, [r5, #16]
			return;
    76f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    76f8:	89c3      	ldrh	r3, [r0, #14]
    76fa:	b1db      	cbz	r3, 7734 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    76fc:	898e      	ldrh	r6, [r1, #12]
    76fe:	42b3      	cmp	r3, r6
    7700:	d31e      	bcc.n	7740 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7702:	6900      	ldr	r0, [r0, #16]
    7704:	3008      	adds	r0, #8
    7706:	f013 ff32 	bl	1b56e <net_buf_simple_tailroom>
    770a:	4286      	cmp	r6, r0
    770c:	d81e      	bhi.n	774c <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    770e:	6928      	ldr	r0, [r5, #16]
    7710:	89a2      	ldrh	r2, [r4, #12]
    7712:	68a1      	ldr	r1, [r4, #8]
    7714:	3008      	adds	r0, #8
    7716:	f013 fec7 	bl	1b4a8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    771a:	89a2      	ldrh	r2, [r4, #12]
    771c:	89eb      	ldrh	r3, [r5, #14]
    771e:	1a9b      	subs	r3, r3, r2
    7720:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    7722:	4620      	mov	r0, r4
    7724:	f013 fe6e 	bl	1b404 <net_buf_unref>
		if (conn->rx_len) {
    7728:	89eb      	ldrh	r3, [r5, #14]
    772a:	bb03      	cbnz	r3, 776e <bt_conn_recv+0xb6>
		buf = conn->rx;
    772c:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    772e:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    7730:	81eb      	strh	r3, [r5, #14]
		break;
    7732:	e7d2      	b.n	76da <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    7734:	f7ff fe48 	bl	73c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    7738:	4620      	mov	r0, r4
    773a:	f013 fe63 	bl	1b404 <net_buf_unref>
			return;
    773e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    7740:	f7ff fe42 	bl	73c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    7744:	4620      	mov	r0, r4
    7746:	f013 fe5d 	bl	1b404 <net_buf_unref>
			return;
    774a:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    774c:	4628      	mov	r0, r5
    774e:	f7ff fe3b 	bl	73c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    7752:	4620      	mov	r0, r4
    7754:	f013 fe56 	bl	1b404 <net_buf_unref>
			return;
    7758:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    775a:	f7ff fe35 	bl	73c8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    775e:	4620      	mov	r0, r4
    7760:	f013 fe50 	bl	1b404 <net_buf_unref>
		return;
    7764:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    7766:	4621      	mov	r1, r4
    7768:	4628      	mov	r0, r5
    776a:	f001 fd06 	bl	917a <bt_l2cap_recv>
    776e:	bd70      	pop	{r4, r5, r6, pc}

00007770 <bt_conn_send_cb>:
{
    7770:	b570      	push	{r4, r5, r6, lr}
    7772:	4605      	mov	r5, r0
    7774:	460c      	mov	r4, r1
    7776:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    7778:	7988      	ldrb	r0, [r1, #6]
    777a:	f013 fdc9 	bl	1b310 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    777e:	8ac3      	ldrh	r3, [r0, #22]
    7780:	2b03      	cmp	r3, #3
    7782:	d911      	bls.n	77a8 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    7784:	7b2b      	ldrb	r3, [r5, #12]
    7786:	2b03      	cmp	r3, #3
    7788:	d114      	bne.n	77b4 <bt_conn_send_cb+0x44>
    778a:	f104 0310 	add.w	r3, r4, #16
    778e:	89e2      	ldrh	r2, [r4, #14]
    7790:	4413      	add	r3, r2
    7792:	3303      	adds	r3, #3
    7794:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    7798:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    779a:	4621      	mov	r1, r4
    779c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    77a0:	f013 fe22 	bl	1b3e8 <net_buf_put>
	return 0;
    77a4:	2000      	movs	r0, #0
}
    77a6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    77a8:	4620      	mov	r0, r4
    77aa:	f013 fe2b 	bl	1b404 <net_buf_unref>
		return -EINVAL;
    77ae:	f06f 0015 	mvn.w	r0, #21
    77b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    77b4:	4620      	mov	r0, r4
    77b6:	f013 fe25 	bl	1b404 <net_buf_unref>
		return -ENOTCONN;
    77ba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    77be:	bd70      	pop	{r4, r5, r6, pc}

000077c0 <bt_conn_notify_tx>:
{
    77c0:	b538      	push	{r3, r4, r5, lr}
    77c2:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    77c4:	e002      	b.n	77cc <bt_conn_notify_tx+0xc>
		tx_free(tx);
    77c6:	4620      	mov	r0, r4
    77c8:	f7ff fd9e 	bl	7308 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    77cc:	2100      	movs	r1, #0
    77ce:	f105 001c 	add.w	r0, r5, #28
    77d2:	f021 fdf3 	bl	293bc <k_queue_get>
    77d6:	4604      	mov	r4, r0
    77d8:	b128      	cbz	r0, 77e6 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    77da:	6863      	ldr	r3, [r4, #4]
    77dc:	2b00      	cmp	r3, #0
    77de:	d0f2      	beq.n	77c6 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    77e0:	4628      	mov	r0, r5
    77e2:	4798      	blx	r3
    77e4:	e7ef      	b.n	77c6 <bt_conn_notify_tx+0x6>
}
    77e6:	bd38      	pop	{r3, r4, r5, pc}

000077e8 <notify_tx>:
{
    77e8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    77ea:	2400      	movs	r4, #0
    77ec:	b104      	cbz	r4, 77f0 <notify_tx+0x8>
}
    77ee:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    77f0:	239c      	movs	r3, #156	; 0x9c
    77f2:	fb03 f304 	mul.w	r3, r3, r4
    77f6:	3340      	adds	r3, #64	; 0x40
    77f8:	4a0b      	ldr	r2, [pc, #44]	; (7828 <notify_tx+0x40>)
    77fa:	4413      	add	r3, r2
    77fc:	f3bf 8f5b 	dmb	ish
    7800:	685b      	ldr	r3, [r3, #4]
    7802:	f3bf 8f5b 	dmb	ish
    7806:	b13b      	cbz	r3, 7818 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    7808:	239c      	movs	r3, #156	; 0x9c
    780a:	fb03 2304 	mla	r3, r3, r4, r2
    780e:	7b1b      	ldrb	r3, [r3, #12]
    7810:	3b03      	subs	r3, #3
    7812:	b2db      	uxtb	r3, r3
    7814:	2b01      	cmp	r3, #1
    7816:	d901      	bls.n	781c <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7818:	3401      	adds	r4, #1
    781a:	e7e7      	b.n	77ec <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    781c:	209c      	movs	r0, #156	; 0x9c
    781e:	fb00 2004 	mla	r0, r0, r4, r2
    7822:	f7ff ffcd 	bl	77c0 <bt_conn_notify_tx>
    7826:	e7f7      	b.n	7818 <notify_tx+0x30>
    7828:	20000968 	.word	0x20000968

0000782c <send_frag>:
{
    782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7830:	4606      	mov	r6, r0
    7832:	460d      	mov	r5, r1
    7834:	4690      	mov	r8, r2
    7836:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    7838:	f7ff fe00 	bl	743c <bt_conn_get_pkts>
    783c:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    783e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7842:	f022 f93d 	bl	29ac0 <_impl_k_sem_take>
	notify_tx();
    7846:	f7ff ffcf 	bl	77e8 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    784a:	7b33      	ldrb	r3, [r6, #12]
    784c:	2b03      	cmp	r3, #3
    784e:	d006      	beq.n	785e <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7850:	4638      	mov	r0, r7
    7852:	f022 f922 	bl	29a9a <_impl_k_sem_give>
	if (always_consume) {
    7856:	bb4c      	cbnz	r4, 78ac <send_frag+0x80>
}
    7858:	4620      	mov	r0, r4
    785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    785e:	2104      	movs	r1, #4
    7860:	f105 0008 	add.w	r0, r5, #8
    7864:	f013 fe51 	bl	1b50a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7868:	f9b6 3000 	ldrsh.w	r3, [r6]
    786c:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    7870:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7874:	89ab      	ldrh	r3, [r5, #12]
    7876:	3b04      	subs	r3, #4
    7878:	8043      	strh	r3, [r0, #2]
    787a:	f105 0310 	add.w	r3, r5, #16
    787e:	89ea      	ldrh	r2, [r5, #14]
    7880:	4413      	add	r3, r2
    7882:	3303      	adds	r3, #3
    7884:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    7888:	6819      	ldr	r1, [r3, #0]
    788a:	2202      	movs	r2, #2
    788c:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    788e:	4630      	mov	r0, r6
    7890:	f7ff fd48 	bl	7324 <add_pending_tx>
    7894:	4680      	mov	r8, r0
	err = bt_send(buf);
    7896:	4628      	mov	r0, r5
    7898:	f7fe fafa 	bl	5e90 <bt_send>
	if (err) {
    789c:	b908      	cbnz	r0, 78a2 <send_frag+0x76>
	return true;
    789e:	2401      	movs	r4, #1
    78a0:	e7da      	b.n	7858 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    78a2:	4641      	mov	r1, r8
    78a4:	4630      	mov	r0, r6
    78a6:	f7ff fd5f 	bl	7368 <remove_pending_tx>
		goto fail;
    78aa:	e7d1      	b.n	7850 <send_frag+0x24>
		net_buf_unref(buf);
    78ac:	4628      	mov	r0, r5
    78ae:	f013 fda9 	bl	1b404 <net_buf_unref>
	return false;
    78b2:	2400      	movs	r4, #0
    78b4:	e7d0      	b.n	7858 <send_frag+0x2c>
	...

000078b8 <bt_conn_add_le>:
{
    78b8:	b538      	push	{r3, r4, r5, lr}
    78ba:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    78bc:	f7ff fd90 	bl	73e0 <conn_new>
	if (!conn) {
    78c0:	4604      	mov	r4, r0
    78c2:	b1a0      	cbz	r0, 78ee <bt_conn_add_le+0x36>
    78c4:	2207      	movs	r2, #7
    78c6:	4629      	mov	r1, r5
    78c8:	3048      	adds	r0, #72	; 0x48
    78ca:	f7f8 fcf9 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    78ce:	2301      	movs	r3, #1
    78d0:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    78d2:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    78d4:	2300      	movs	r3, #0
    78d6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    78d8:	2318      	movs	r3, #24
    78da:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    78de:	2328      	movs	r3, #40	; 0x28
    78e0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    78e4:	4903      	ldr	r1, [pc, #12]	; (78f4 <bt_conn_add_le+0x3c>)
    78e6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    78ea:	f022 fea7 	bl	2a63c <k_delayed_work_init>
}
    78ee:	4620      	mov	r0, r4
    78f0:	bd38      	pop	{r3, r4, r5, pc}
    78f2:	bf00      	nop
    78f4:	00007ef5 	.word	0x00007ef5

000078f8 <bt_conn_addr_le_cmp>:
{
    78f8:	b538      	push	{r3, r4, r5, lr}
    78fa:	4604      	mov	r4, r0
    78fc:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    78fe:	2207      	movs	r2, #7
    7900:	f100 0148 	add.w	r1, r0, #72	; 0x48
    7904:	4628      	mov	r0, r5
    7906:	f023 f807 	bl	2a918 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    790a:	4603      	mov	r3, r0
    790c:	b140      	cbz	r0, 7920 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    790e:	78e3      	ldrb	r3, [r4, #3]
    7910:	b143      	cbz	r3, 7924 <bt_conn_addr_le_cmp+0x2c>
    7912:	2207      	movs	r2, #7
    7914:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    7918:	4628      	mov	r0, r5
    791a:	f022 fffd 	bl	2a918 <memcmp>
    791e:	4603      	mov	r3, r0
}
    7920:	4618      	mov	r0, r3
    7922:	bd38      	pop	{r3, r4, r5, pc}
    7924:	2207      	movs	r2, #7
    7926:	f104 0156 	add.w	r1, r4, #86	; 0x56
    792a:	4628      	mov	r0, r5
    792c:	f022 fff4 	bl	2a918 <memcmp>
    7930:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    7932:	e7f5      	b.n	7920 <bt_conn_addr_le_cmp+0x28>

00007934 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    7934:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7938:	f3bf 8f5b 	dmb	ish
    793c:	e853 2f00 	ldrex	r2, [r3]
    7940:	3201      	adds	r2, #1
    7942:	e843 2100 	strex	r1, r2, [r3]
    7946:	2900      	cmp	r1, #0
    7948:	d1f8      	bne.n	793c <bt_conn_ref+0x8>
    794a:	f3bf 8f5b 	dmb	ish
}
    794e:	4770      	bx	lr

00007950 <bt_conn_lookup_handle>:
{
    7950:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7952:	2300      	movs	r3, #0
    7954:	b10b      	cbz	r3, 795a <bt_conn_lookup_handle+0xa>
	return NULL;
    7956:	2000      	movs	r0, #0
}
    7958:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    795a:	229c      	movs	r2, #156	; 0x9c
    795c:	fb02 f203 	mul.w	r2, r2, r3
    7960:	3240      	adds	r2, #64	; 0x40
    7962:	490f      	ldr	r1, [pc, #60]	; (79a0 <bt_conn_lookup_handle+0x50>)
    7964:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7966:	f3bf 8f5b 	dmb	ish
    796a:	6852      	ldr	r2, [r2, #4]
    796c:	f3bf 8f5b 	dmb	ish
    7970:	b13a      	cbz	r2, 7982 <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    7972:	229c      	movs	r2, #156	; 0x9c
    7974:	fb02 1203 	mla	r2, r2, r3, r1
    7978:	7b12      	ldrb	r2, [r2, #12]
    797a:	3a03      	subs	r2, #3
    797c:	b2d2      	uxtb	r2, r2
    797e:	2a01      	cmp	r2, #1
    7980:	d901      	bls.n	7986 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7982:	3301      	adds	r3, #1
    7984:	e7e6      	b.n	7954 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    7986:	229c      	movs	r2, #156	; 0x9c
    7988:	fb02 f203 	mul.w	r2, r2, r3
    798c:	5a8a      	ldrh	r2, [r1, r2]
    798e:	4282      	cmp	r2, r0
    7990:	d1f7      	bne.n	7982 <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    7992:	209c      	movs	r0, #156	; 0x9c
    7994:	fb00 1003 	mla	r0, r0, r3, r1
    7998:	f7ff ffcc 	bl	7934 <bt_conn_ref>
    799c:	bd08      	pop	{r3, pc}
    799e:	bf00      	nop
    79a0:	20000968 	.word	0x20000968

000079a4 <bt_conn_lookup_addr_le>:
{
    79a4:	b570      	push	{r4, r5, r6, lr}
    79a6:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    79a8:	2400      	movs	r4, #0
    79aa:	b10c      	cbz	r4, 79b0 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    79ac:	2000      	movs	r0, #0
}
    79ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    79b0:	239c      	movs	r3, #156	; 0x9c
    79b2:	fb03 f304 	mul.w	r3, r3, r4
    79b6:	3340      	adds	r3, #64	; 0x40
    79b8:	4a0d      	ldr	r2, [pc, #52]	; (79f0 <bt_conn_lookup_addr_le+0x4c>)
    79ba:	4413      	add	r3, r2
    79bc:	f3bf 8f5b 	dmb	ish
    79c0:	685b      	ldr	r3, [r3, #4]
    79c2:	f3bf 8f5b 	dmb	ish
    79c6:	b123      	cbz	r3, 79d2 <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    79c8:	239c      	movs	r3, #156	; 0x9c
    79ca:	fb03 2304 	mla	r3, r3, r4, r2
    79ce:	789b      	ldrb	r3, [r3, #2]
    79d0:	b10b      	cbz	r3, 79d6 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    79d2:	3401      	adds	r4, #1
    79d4:	e7e9      	b.n	79aa <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    79d6:	269c      	movs	r6, #156	; 0x9c
    79d8:	fb06 2604 	mla	r6, r6, r4, r2
    79dc:	4629      	mov	r1, r5
    79de:	4630      	mov	r0, r6
    79e0:	f7ff ff8a 	bl	78f8 <bt_conn_addr_le_cmp>
    79e4:	2800      	cmp	r0, #0
    79e6:	d1f4      	bne.n	79d2 <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    79e8:	4630      	mov	r0, r6
    79ea:	f7ff ffa3 	bl	7934 <bt_conn_ref>
    79ee:	bd70      	pop	{r4, r5, r6, pc}
    79f0:	20000968 	.word	0x20000968

000079f4 <bt_conn_lookup_state_le>:
{
    79f4:	b570      	push	{r4, r5, r6, lr}
    79f6:	4605      	mov	r5, r0
    79f8:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    79fa:	2400      	movs	r4, #0
    79fc:	b10c      	cbz	r4, 7a02 <bt_conn_lookup_state_le+0xe>
	return NULL;
    79fe:	2000      	movs	r0, #0
}
    7a00:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    7a02:	239c      	movs	r3, #156	; 0x9c
    7a04:	fb03 f304 	mul.w	r3, r3, r4
    7a08:	3340      	adds	r3, #64	; 0x40
    7a0a:	4a12      	ldr	r2, [pc, #72]	; (7a54 <bt_conn_lookup_state_le+0x60>)
    7a0c:	4413      	add	r3, r2
    7a0e:	f3bf 8f5b 	dmb	ish
    7a12:	685b      	ldr	r3, [r3, #4]
    7a14:	f3bf 8f5b 	dmb	ish
    7a18:	b19b      	cbz	r3, 7a42 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7a1a:	239c      	movs	r3, #156	; 0x9c
    7a1c:	fb03 2304 	mla	r3, r3, r4, r2
    7a20:	789b      	ldrb	r3, [r3, #2]
    7a22:	b973      	cbnz	r3, 7a42 <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    7a24:	b135      	cbz	r5, 7a34 <bt_conn_lookup_state_le+0x40>
    7a26:	4629      	mov	r1, r5
    7a28:	209c      	movs	r0, #156	; 0x9c
    7a2a:	fb00 2004 	mla	r0, r0, r4, r2
    7a2e:	f7ff ff63 	bl	78f8 <bt_conn_addr_le_cmp>
    7a32:	b930      	cbnz	r0, 7a42 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    7a34:	239c      	movs	r3, #156	; 0x9c
    7a36:	4a07      	ldr	r2, [pc, #28]	; (7a54 <bt_conn_lookup_state_le+0x60>)
    7a38:	fb03 2304 	mla	r3, r3, r4, r2
    7a3c:	7b1b      	ldrb	r3, [r3, #12]
    7a3e:	42b3      	cmp	r3, r6
    7a40:	d001      	beq.n	7a46 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7a42:	3401      	adds	r4, #1
    7a44:	e7da      	b.n	79fc <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    7a46:	209c      	movs	r0, #156	; 0x9c
    7a48:	fb00 2004 	mla	r0, r0, r4, r2
    7a4c:	f7ff ff72 	bl	7934 <bt_conn_ref>
    7a50:	bd70      	pop	{r4, r5, r6, pc}
    7a52:	bf00      	nop
    7a54:	20000968 	.word	0x20000968

00007a58 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    7a58:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7a5a:	f3bf 8f5b 	dmb	ish
    7a5e:	e850 3f00 	ldrex	r3, [r0]
    7a62:	3b01      	subs	r3, #1
    7a64:	e840 3200 	strex	r2, r3, [r0]
    7a68:	2a00      	cmp	r2, #0
    7a6a:	d1f8      	bne.n	7a5e <bt_conn_unref+0x6>
    7a6c:	f3bf 8f5b 	dmb	ish
    7a70:	4770      	bx	lr

00007a72 <conn_cleanup>:
{
    7a72:	b510      	push	{r4, lr}
    7a74:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7a76:	e002      	b.n	7a7e <conn_cleanup+0xc>
		net_buf_unref(buf);
    7a78:	4618      	mov	r0, r3
    7a7a:	f013 fcc3 	bl	1b404 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7a7e:	2100      	movs	r1, #0
    7a80:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7a84:	f013 fc91 	bl	1b3aa <net_buf_get>
    7a88:	4603      	mov	r3, r0
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d1f4      	bne.n	7a78 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    7a8e:	4620      	mov	r0, r4
    7a90:	f7ff fe96 	bl	77c0 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    7a94:	4620      	mov	r0, r4
    7a96:	f7ff fc97 	bl	73c8 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    7a9a:	4620      	mov	r0, r4
    7a9c:	f7ff ffdc 	bl	7a58 <bt_conn_unref>
    7aa0:	bd10      	pop	{r4, pc}
	...

00007aa4 <bt_conn_prepare_events>:
{
    7aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7aa8:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    7aaa:	4b30      	ldr	r3, [pc, #192]	; (7b6c <bt_conn_prepare_events+0xc8>)
    7aac:	2400      	movs	r4, #0
    7aae:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7ab0:	4622      	mov	r2, r4
    7ab2:	2101      	movs	r1, #1
    7ab4:	f021 f93c 	bl	28d30 <k_poll_event_init>
    7ab8:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7aba:	b114      	cbz	r4, 7ac2 <bt_conn_prepare_events+0x1e>
}
    7abc:	4628      	mov	r0, r5
    7abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    7ac2:	4a2b      	ldr	r2, [pc, #172]	; (7b70 <bt_conn_prepare_events+0xcc>)
    7ac4:	239c      	movs	r3, #156	; 0x9c
    7ac6:	fb03 f304 	mul.w	r3, r3, r4
    7aca:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    7acc:	3340      	adds	r3, #64	; 0x40
    7ace:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7ad0:	f3bf 8f5b 	dmb	ish
    7ad4:	685b      	ldr	r3, [r3, #4]
    7ad6:	f3bf 8f5b 	dmb	ish
    7ada:	b143      	cbz	r3, 7aee <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7adc:	7b03      	ldrb	r3, [r0, #12]
    7ade:	b143      	cbz	r3, 7af2 <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    7ae0:	239c      	movs	r3, #156	; 0x9c
    7ae2:	4a23      	ldr	r2, [pc, #140]	; (7b70 <bt_conn_prepare_events+0xcc>)
    7ae4:	fb03 2304 	mla	r3, r3, r4, r2
    7ae8:	7b1b      	ldrb	r3, [r3, #12]
    7aea:	2b03      	cmp	r3, #3
    7aec:	d015      	beq.n	7b1a <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7aee:	3401      	adds	r4, #1
    7af0:	e7e3      	b.n	7aba <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    7af2:	4603      	mov	r3, r0
    7af4:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7af6:	f3bf 8f5b 	dmb	ish
    7afa:	e853 2f00 	ldrex	r2, [r3]
    7afe:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7b02:	e843 1700 	strex	r7, r1, [r3]
    7b06:	2f00      	cmp	r7, #0
    7b08:	d1f7      	bne.n	7afa <bt_conn_prepare_events+0x56>
    7b0a:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    7b0e:	f012 0f40 	tst.w	r2, #64	; 0x40
    7b12:	d0e5      	beq.n	7ae0 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    7b14:	f7ff ffad 	bl	7a72 <conn_cleanup>
			continue;
    7b18:	e7e9      	b.n	7aee <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    7b1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7b1e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7b22:	44b0      	add	r8, r6
				  &conn->tx_notify);
    7b24:	4691      	mov	r9, r2
    7b26:	279c      	movs	r7, #156	; 0x9c
    7b28:	fb07 f704 	mul.w	r7, r7, r4
    7b2c:	f107 0318 	add.w	r3, r7, #24
    7b30:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    7b32:	3304      	adds	r3, #4
    7b34:	2200      	movs	r2, #0
    7b36:	2104      	movs	r1, #4
    7b38:	4640      	mov	r0, r8
    7b3a:	f021 f8f9 	bl	28d30 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    7b3e:	1c6b      	adds	r3, r5, #1
    7b40:	2201      	movs	r2, #1
    7b42:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    7b46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b4a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7b4e:	44b0      	add	r8, r6
				  &conn->tx_queue);
    7b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
    7b54:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    7b56:	3304      	adds	r3, #4
    7b58:	2200      	movs	r2, #0
    7b5a:	2104      	movs	r1, #4
    7b5c:	4640      	mov	r0, r8
    7b5e:	f021 f8e7 	bl	28d30 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    7b62:	3502      	adds	r5, #2
    7b64:	2302      	movs	r3, #2
    7b66:	f888 300c 	strb.w	r3, [r8, #12]
    7b6a:	e7c0      	b.n	7aee <bt_conn_prepare_events+0x4a>
    7b6c:	2000bf40 	.word	0x2000bf40
    7b70:	20000968 	.word	0x20000968

00007b74 <bt_conn_set_state>:
{
    7b74:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    7b76:	7b05      	ldrb	r5, [r0, #12]
    7b78:	428d      	cmp	r5, r1
    7b7a:	d00a      	beq.n	7b92 <bt_conn_set_state+0x1e>
    7b7c:	4604      	mov	r4, r0
	conn->state = state;
    7b7e:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    7b80:	b145      	cbz	r5, 7b94 <bt_conn_set_state+0x20>
    7b82:	2d02      	cmp	r5, #2
    7b84:	d009      	beq.n	7b9a <bt_conn_set_state+0x26>
	switch (conn->state) {
    7b86:	7b23      	ldrb	r3, [r4, #12]
    7b88:	2b02      	cmp	r3, #2
    7b8a:	d068      	beq.n	7c5e <bt_conn_set_state+0xea>
    7b8c:	2b03      	cmp	r3, #3
    7b8e:	d00b      	beq.n	7ba8 <bt_conn_set_state+0x34>
    7b90:	b31b      	cbz	r3, 7bda <bt_conn_set_state+0x66>
    7b92:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    7b94:	f7ff fece 	bl	7934 <bt_conn_ref>
		break;
    7b98:	e7f5      	b.n	7b86 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    7b9a:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d1f2      	bne.n	7b86 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    7ba0:	3074      	adds	r0, #116	; 0x74
    7ba2:	f022 fd69 	bl	2a678 <k_delayed_work_cancel>
    7ba6:	e7ee      	b.n	7b86 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7ba8:	78a3      	ldrb	r3, [r4, #2]
    7baa:	2b02      	cmp	r3, #2
    7bac:	d0f1      	beq.n	7b92 <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    7bae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7bb2:	f021 fba8 	bl	29306 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    7bb6:	f104 001c 	add.w	r0, r4, #28
    7bba:	f021 fba4 	bl	29306 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    7bbe:	2100      	movs	r1, #0
    7bc0:	482d      	ldr	r0, [pc, #180]	; (7c78 <bt_conn_set_state+0x104>)
    7bc2:	f021 fb41 	bl	29248 <k_poll_signal>
	list->head = NULL;
    7bc6:	2300      	movs	r3, #0
    7bc8:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    7bca:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    7bcc:	4620      	mov	r0, r4
    7bce:	f001 f87d 	bl	8ccc <bt_l2cap_connected>
		notify_connected(conn);
    7bd2:	4620      	mov	r0, r4
    7bd4:	f7ff fb74 	bl	72c0 <notify_connected>
		break;
    7bd8:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    7bda:	78a3      	ldrb	r3, [r4, #2]
    7bdc:	2b02      	cmp	r3, #2
    7bde:	d00d      	beq.n	7bfc <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    7be0:	1eeb      	subs	r3, r5, #3
    7be2:	b2db      	uxtb	r3, r3
    7be4:	2b01      	cmp	r3, #1
    7be6:	d90d      	bls.n	7c04 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    7be8:	2d02      	cmp	r5, #2
    7bea:	d02d      	beq.n	7c48 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    7bec:	2d01      	cmp	r5, #1
    7bee:	d1d0      	bne.n	7b92 <bt_conn_set_state+0x1e>
			if (conn->err) {
    7bf0:	7ae3      	ldrb	r3, [r4, #11]
    7bf2:	bb83      	cbnz	r3, 7c56 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    7bf4:	4620      	mov	r0, r4
    7bf6:	f7ff ff2f 	bl	7a58 <bt_conn_unref>
    7bfa:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7bfc:	4620      	mov	r0, r4
    7bfe:	f7ff ff2b 	bl	7a58 <bt_conn_unref>
			break;
    7c02:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    7c04:	4620      	mov	r0, r4
    7c06:	f000 fd21 	bl	864c <bt_l2cap_disconnected>
			notify_disconnected(conn);
    7c0a:	4620      	mov	r0, r4
    7c0c:	f7ff fb6a 	bl	72e4 <notify_disconnected>
			process_unack_tx(conn);
    7c10:	4620      	mov	r0, r4
    7c12:	f7ff fc17 	bl	7444 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    7c16:	78a3      	ldrb	r3, [r4, #2]
    7c18:	b18b      	cbz	r3, 7c3e <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    7c1a:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c1c:	f3bf 8f5b 	dmb	ish
    7c20:	e854 3f00 	ldrex	r3, [r4]
    7c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c28:	e844 3200 	strex	r2, r3, [r4]
    7c2c:	2a00      	cmp	r2, #0
    7c2e:	d1f7      	bne.n	7c20 <bt_conn_set_state+0xac>
    7c30:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    7c34:	2100      	movs	r1, #0
    7c36:	4810      	ldr	r0, [pc, #64]	; (7c78 <bt_conn_set_state+0x104>)
    7c38:	f021 fb06 	bl	29248 <k_poll_signal>
    7c3c:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    7c3e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7c42:	f022 fd19 	bl	2a678 <k_delayed_work_cancel>
    7c46:	e7e8      	b.n	7c1a <bt_conn_set_state+0xa6>
			notify_connected(conn);
    7c48:	4620      	mov	r0, r4
    7c4a:	f7ff fb39 	bl	72c0 <notify_connected>
			bt_conn_unref(conn);
    7c4e:	4620      	mov	r0, r4
    7c50:	f7ff ff02 	bl	7a58 <bt_conn_unref>
    7c54:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    7c56:	4620      	mov	r0, r4
    7c58:	f7ff fb32 	bl	72c0 <notify_connected>
    7c5c:	e7ca      	b.n	7bf4 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7c5e:	78a3      	ldrb	r3, [r4, #2]
    7c60:	2b02      	cmp	r3, #2
    7c62:	d096      	beq.n	7b92 <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7c64:	2b00      	cmp	r3, #0
    7c66:	d194      	bne.n	7b92 <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7c68:	f640 32b8 	movw	r2, #3000	; 0xbb8
    7c6c:	f104 0174 	add.w	r1, r4, #116	; 0x74
    7c70:	4802      	ldr	r0, [pc, #8]	; (7c7c <bt_conn_set_state+0x108>)
    7c72:	f022 fd5b 	bl	2a72c <k_delayed_work_submit_to_queue>
    7c76:	e78c      	b.n	7b92 <bt_conn_set_state+0x1e>
    7c78:	2000bf40 	.word	0x2000bf40
    7c7c:	200030f0 	.word	0x200030f0

00007c80 <bt_hci_disconnect>:
{
    7c80:	b570      	push	{r4, r5, r6, lr}
    7c82:	4605      	mov	r5, r0
    7c84:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    7c86:	2103      	movs	r1, #3
    7c88:	f240 4006 	movw	r0, #1030	; 0x406
    7c8c:	f7fd fbac 	bl	53e8 <bt_hci_cmd_create>
	if (!buf) {
    7c90:	b1a8      	cbz	r0, 7cbe <bt_hci_disconnect+0x3e>
    7c92:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    7c94:	2103      	movs	r1, #3
    7c96:	3008      	adds	r0, #8
    7c98:	f013 fc00 	bl	1b49c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    7c9c:	882b      	ldrh	r3, [r5, #0]
    7c9e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    7ca0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    7ca2:	4621      	mov	r1, r4
    7ca4:	f240 4006 	movw	r0, #1030	; 0x406
    7ca8:	f7fe f8fc 	bl	5ea4 <bt_hci_cmd_send>
	if (err) {
    7cac:	4604      	mov	r4, r0
    7cae:	b108      	cbz	r0, 7cb4 <bt_hci_disconnect+0x34>
}
    7cb0:	4620      	mov	r0, r4
    7cb2:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7cb4:	2104      	movs	r1, #4
    7cb6:	4628      	mov	r0, r5
    7cb8:	f7ff ff5c 	bl	7b74 <bt_conn_set_state>
	return 0;
    7cbc:	e7f8      	b.n	7cb0 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    7cbe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7cc2:	e7f5      	b.n	7cb0 <bt_hci_disconnect+0x30>

00007cc4 <bt_conn_get_info>:
	info->type = conn->type;
    7cc4:	7883      	ldrb	r3, [r0, #2]
    7cc6:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    7cc8:	78c3      	ldrb	r3, [r0, #3]
    7cca:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    7ccc:	7883      	ldrb	r3, [r0, #2]
    7cce:	b9cb      	cbnz	r3, 7d04 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    7cd0:	78c3      	ldrb	r3, [r0, #3]
    7cd2:	b983      	cbnz	r3, 7cf6 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    7cd4:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7cd8:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    7cda:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7cde:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    7ce0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7ce4:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    7ce6:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    7cea:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    7cec:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    7cf0:	820b      	strh	r3, [r1, #16]
		return 0;
    7cf2:	2000      	movs	r0, #0
    7cf4:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    7cf6:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7cfa:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    7cfc:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7d00:	608b      	str	r3, [r1, #8]
    7d02:	e7ed      	b.n	7ce0 <bt_conn_get_info+0x1c>
	return -EINVAL;
    7d04:	f06f 0015 	mvn.w	r0, #21
}
    7d08:	4770      	bx	lr
	...

00007d0c <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7d0c:	b570      	push	{r4, r5, r6, lr}
    7d0e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    7d10:	460d      	mov	r5, r1
    7d12:	b121      	cbz	r1, 7d1e <bt_le_set_auto_conn+0x12>
    7d14:	4608      	mov	r0, r1
    7d16:	f7fd ffd1 	bl	5cbc <bt_le_conn_params_valid>
    7d1a:	2800      	cmp	r0, #0
    7d1c:	d05a      	beq.n	7dd4 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    7d1e:	4630      	mov	r0, r6
    7d20:	f7ff fe40 	bl	79a4 <bt_conn_lookup_addr_le>
	if (!conn) {
    7d24:	4604      	mov	r4, r0
    7d26:	b1d8      	cbz	r0, 7d60 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    7d28:	b33d      	cbz	r5, 7d7a <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    7d2a:	4629      	mov	r1, r5
    7d2c:	4620      	mov	r0, r4
    7d2e:	f7ff fb41 	bl	73b4 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    7d32:	1d23      	adds	r3, r4, #4
    7d34:	f3bf 8f5b 	dmb	ish
    7d38:	e853 2f00 	ldrex	r2, [r3]
    7d3c:	f042 0101 	orr.w	r1, r2, #1
    7d40:	e843 1000 	strex	r0, r1, [r3]
    7d44:	2800      	cmp	r0, #0
    7d46:	d1f7      	bne.n	7d38 <bt_le_set_auto_conn+0x2c>
    7d48:	f3bf 8f5b 	dmb	ish
    7d4c:	f012 0f01 	tst.w	r2, #1
    7d50:	d00f      	beq.n	7d72 <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    7d52:	7b23      	ldrb	r3, [r4, #12]
    7d54:	b363      	cbz	r3, 7db0 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    7d56:	4620      	mov	r0, r4
    7d58:	f7ff fe7e 	bl	7a58 <bt_conn_unref>

	return 0;
    7d5c:	2000      	movs	r0, #0
    7d5e:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    7d60:	4630      	mov	r0, r6
    7d62:	f7ff fda9 	bl	78b8 <bt_conn_add_le>
		if (!conn) {
    7d66:	4604      	mov	r4, r0
    7d68:	2800      	cmp	r0, #0
    7d6a:	d1dd      	bne.n	7d28 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    7d6c:	f06f 000b 	mvn.w	r0, #11
}
    7d70:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    7d72:	4620      	mov	r0, r4
    7d74:	f7ff fdde 	bl	7934 <bt_conn_ref>
    7d78:	e7eb      	b.n	7d52 <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    7d7a:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d7c:	f3bf 8f5b 	dmb	ish
    7d80:	e853 2f00 	ldrex	r2, [r3]
    7d84:	f022 0101 	bic.w	r1, r2, #1
    7d88:	e843 1000 	strex	r0, r1, [r3]
    7d8c:	2800      	cmp	r0, #0
    7d8e:	d1f7      	bne.n	7d80 <bt_le_set_auto_conn+0x74>
    7d90:	f3bf 8f5b 	dmb	ish
    7d94:	f012 0f01 	tst.w	r2, #1
    7d98:	d0db      	beq.n	7d52 <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    7d9a:	4620      	mov	r0, r4
    7d9c:	f7ff fe5c 	bl	7a58 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    7da0:	7b23      	ldrb	r3, [r4, #12]
    7da2:	2b01      	cmp	r3, #1
    7da4:	d1d5      	bne.n	7d52 <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7da6:	2100      	movs	r1, #0
    7da8:	4620      	mov	r0, r4
    7daa:	f7ff fee3 	bl	7b74 <bt_conn_set_state>
    7dae:	e7d0      	b.n	7d52 <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7db0:	f3bf 8f5b 	dmb	ish
    7db4:	4b09      	ldr	r3, [pc, #36]	; (7ddc <bt_le_set_auto_conn+0xd0>)
    7db6:	681b      	ldr	r3, [r3, #0]
    7db8:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7dbc:	f013 0f02 	tst.w	r3, #2
    7dc0:	d0c9      	beq.n	7d56 <bt_le_set_auto_conn+0x4a>
		if (param) {
    7dc2:	b11d      	cbz	r5, 7dcc <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7dc4:	2101      	movs	r1, #1
    7dc6:	4620      	mov	r0, r4
    7dc8:	f7ff fed4 	bl	7b74 <bt_conn_set_state>
		bt_le_scan_update(false);
    7dcc:	2000      	movs	r0, #0
    7dce:	f7fe f919 	bl	6004 <bt_le_scan_update>
    7dd2:	e7c0      	b.n	7d56 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    7dd4:	f06f 0015 	mvn.w	r0, #21
    7dd8:	bd70      	pop	{r4, r5, r6, pc}
    7dda:	bf00      	nop
    7ddc:	2000be78 	.word	0x2000be78

00007de0 <bt_conn_disconnect>:
{
    7de0:	b538      	push	{r3, r4, r5, lr}
    7de2:	4604      	mov	r4, r0
    7de4:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    7de6:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7de8:	b13b      	cbz	r3, 7dfa <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    7dea:	7b23      	ldrb	r3, [r4, #12]
    7dec:	3b01      	subs	r3, #1
    7dee:	2b03      	cmp	r3, #3
    7df0:	d823      	bhi.n	7e3a <bt_conn_disconnect+0x5a>
    7df2:	e8df f003 	tbb	[pc, r3]
    7df6:	1309      	.short	0x1309
    7df8:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7dfa:	2100      	movs	r1, #0
    7dfc:	3048      	adds	r0, #72	; 0x48
    7dfe:	f7ff ff85 	bl	7d0c <bt_le_set_auto_conn>
    7e02:	e7f2      	b.n	7dea <bt_conn_disconnect+0xa>
		return 0;
    7e04:	2000      	movs	r0, #0
    7e06:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    7e08:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7e0a:	2100      	movs	r1, #0
    7e0c:	4620      	mov	r0, r4
    7e0e:	f7ff feb1 	bl	7b74 <bt_conn_set_state>
		bt_le_scan_update(false);
    7e12:	2000      	movs	r0, #0
    7e14:	f7fe f8f6 	bl	6004 <bt_le_scan_update>
		return 0;
    7e18:	2000      	movs	r0, #0
    7e1a:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    7e1c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7e20:	f022 fc2a 	bl	2a678 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    7e24:	2100      	movs	r1, #0
    7e26:	f242 000e 	movw	r0, #8206	; 0x200e
    7e2a:	f7fe f83b 	bl	5ea4 <bt_hci_cmd_send>
    7e2e:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    7e30:	4629      	mov	r1, r5
    7e32:	4620      	mov	r0, r4
    7e34:	f7ff ff24 	bl	7c80 <bt_hci_disconnect>
    7e38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7e3a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7e3e:	bd38      	pop	{r3, r4, r5, pc}

00007e40 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    7e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e42:	4607      	mov	r7, r0
    7e44:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    7e46:	210e      	movs	r1, #14
    7e48:	f242 0013 	movw	r0, #8211	; 0x2013
    7e4c:	f7fd facc 	bl	53e8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    7e50:	b1c8      	cbz	r0, 7e86 <bt_conn_le_conn_update+0x46>
    7e52:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    7e54:	210e      	movs	r1, #14
    7e56:	3008      	adds	r0, #8
    7e58:	f013 fb20 	bl	1b49c <net_buf_simple_add>
    7e5c:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    7e5e:	220e      	movs	r2, #14
    7e60:	2100      	movs	r1, #0
    7e62:	f022 fded 	bl	2aa40 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    7e66:	883b      	ldrh	r3, [r7, #0]
    7e68:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    7e6a:	882b      	ldrh	r3, [r5, #0]
    7e6c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    7e6e:	886b      	ldrh	r3, [r5, #2]
    7e70:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    7e72:	88ab      	ldrh	r3, [r5, #4]
    7e74:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    7e76:	88eb      	ldrh	r3, [r5, #6]
    7e78:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    7e7a:	4631      	mov	r1, r6
    7e7c:	f242 0013 	movw	r0, #8211	; 0x2013
    7e80:	f7fe f810 	bl	5ea4 <bt_hci_cmd_send>
    7e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    7e86:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    7e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007e8c <bt_conn_le_param_update>:
{
    7e8c:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    7e8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7e92:	880a      	ldrh	r2, [r1, #0]
    7e94:	4293      	cmp	r3, r2
    7e96:	d307      	bcc.n	7ea8 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    7e98:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    7e9a:	4293      	cmp	r3, r2
    7e9c:	d804      	bhi.n	7ea8 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    7e9e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    7ea2:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    7ea4:	429a      	cmp	r2, r3
    7ea6:	d016      	beq.n	7ed6 <bt_conn_le_param_update+0x4a>
    7ea8:	460d      	mov	r5, r1
    7eaa:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    7eac:	3074      	adds	r0, #116	; 0x74
    7eae:	f022 fbe3 	bl	2a678 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7eb2:	4b0f      	ldr	r3, [pc, #60]	; (7ef0 <bt_conn_le_param_update+0x64>)
    7eb4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7eb8:	f013 0f02 	tst.w	r3, #2
    7ebc:	d004      	beq.n	7ec8 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7ebe:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7ec2:	f013 0f02 	tst.w	r3, #2
    7ec6:	d101      	bne.n	7ecc <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    7ec8:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7eca:	b963      	cbnz	r3, 7ee6 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    7ecc:	4629      	mov	r1, r5
    7ece:	4620      	mov	r0, r4
    7ed0:	f7ff ffb6 	bl	7e40 <bt_conn_le_conn_update>
    7ed4:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    7ed6:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    7eda:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    7edc:	429a      	cmp	r2, r3
    7ede:	d1e3      	bne.n	7ea8 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    7ee0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7ee4:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    7ee6:	4629      	mov	r1, r5
    7ee8:	4620      	mov	r0, r4
    7eea:	f001 f821 	bl	8f30 <bt_l2cap_update_conn_param>
    7eee:	bd38      	pop	{r3, r4, r5, pc}
    7ef0:	2000be08 	.word	0x2000be08

00007ef4 <le_conn_update>:
{
    7ef4:	b500      	push	{lr}
    7ef6:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7ef8:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    7efc:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7f00:	2b02      	cmp	r3, #2
    7f02:	d016      	beq.n	7f32 <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7f04:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    7f08:	f8ad 3000 	strh.w	r3, [sp]
    7f0c:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    7f10:	f8ad 3002 	strh.w	r3, [sp, #2]
    7f14:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    7f18:	f8ad 3004 	strh.w	r3, [sp, #4]
    7f1c:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    7f20:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    7f24:	4669      	mov	r1, sp
    7f26:	4610      	mov	r0, r2
    7f28:	f7ff ffb0 	bl	7e8c <bt_conn_le_param_update>
}
    7f2c:	b003      	add	sp, #12
    7f2e:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    7f32:	2113      	movs	r1, #19
    7f34:	4610      	mov	r0, r2
    7f36:	f7ff ff53 	bl	7de0 <bt_conn_disconnect>
		return;
    7f3a:	e7f7      	b.n	7f2c <le_conn_update+0x38>

00007f3c <le_conn_update>:
{
    7f3c:	b510      	push	{r4, lr}
    7f3e:	b082      	sub	sp, #8
    7f40:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    7f42:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7f44:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    7f46:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    7f48:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    7f4a:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7f4c:	9201      	str	r2, [sp, #4]
    7f4e:	9100      	str	r1, [sp, #0]
    7f50:	2200      	movs	r2, #0
    7f52:	4611      	mov	r1, r2
    7f54:	f010 fdb4 	bl	18ac0 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    7f58:	b100      	cbz	r0, 7f5c <le_conn_update+0x20>
    7f5a:	200c      	movs	r0, #12
    7f5c:	f005 fd82 	bl	da64 <cmd_status>
    7f60:	6020      	str	r0, [r4, #0]
}
    7f62:	b002      	add	sp, #8
    7f64:	bd10      	pop	{r4, pc}
	...

00007f68 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    7f68:	b538      	push	{r3, r4, r5, lr}
    7f6a:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    7f6c:	4603      	mov	r3, r0
    7f6e:	b150      	cbz	r0, 7f86 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    7f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f74:	4618      	mov	r0, r3
    7f76:	f013 f9d7 	bl	1b328 <net_buf_alloc>
    7f7a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    7f7c:	1d29      	adds	r1, r5, #4
    7f7e:	f013 fa2e 	bl	1b3de <net_buf_reserve>

	return buf;
}
    7f82:	4620      	mov	r0, r4
    7f84:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    7f86:	4b01      	ldr	r3, [pc, #4]	; (7f8c <bt_conn_create_pdu+0x24>)
    7f88:	e7f2      	b.n	7f70 <bt_conn_create_pdu+0x8>
    7f8a:	bf00      	nop
    7f8c:	2000d68c 	.word	0x2000d68c

00007f90 <create_frag>:
{
    7f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f92:	4606      	mov	r6, r0
    7f94:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    7f96:	2100      	movs	r1, #0
    7f98:	4608      	mov	r0, r1
    7f9a:	f7ff ffe5 	bl	7f68 <bt_conn_create_pdu>
    7f9e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7fa0:	7b33      	ldrb	r3, [r6, #12]
    7fa2:	2b03      	cmp	r3, #3
    7fa4:	d121      	bne.n	7fea <create_frag+0x5a>
    7fa6:	f100 0310 	add.w	r3, r0, #16
    7faa:	89c2      	ldrh	r2, [r0, #14]
    7fac:	4413      	add	r3, r2
    7fae:	3303      	adds	r3, #3
    7fb0:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    7fb4:	2200      	movs	r2, #0
    7fb6:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    7fb8:	4b10      	ldr	r3, [pc, #64]	; (7ffc <create_frag+0x6c>)
    7fba:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    7fbe:	f100 0608 	add.w	r6, r0, #8
    7fc2:	4630      	mov	r0, r6
    7fc4:	f013 fad3 	bl	1b56e <net_buf_simple_tailroom>
    7fc8:	4287      	cmp	r7, r0
    7fca:	d212      	bcs.n	7ff2 <create_frag+0x62>
	return bt_dev.le.mtu;
    7fcc:	4b0b      	ldr	r3, [pc, #44]	; (7ffc <create_frag+0x6c>)
    7fce:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    7fd2:	463a      	mov	r2, r7
    7fd4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7fd8:	4630      	mov	r0, r6
    7fda:	f013 fa65 	bl	1b4a8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    7fde:	4639      	mov	r1, r7
    7fe0:	4620      	mov	r0, r4
    7fe2:	f013 faa8 	bl	1b536 <net_buf_simple_pull>
}
    7fe6:	4628      	mov	r0, r5
    7fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    7fea:	f013 fa0b 	bl	1b404 <net_buf_unref>
		return NULL;
    7fee:	2500      	movs	r5, #0
    7ff0:	e7f9      	b.n	7fe6 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    7ff2:	4630      	mov	r0, r6
    7ff4:	f013 fabb 	bl	1b56e <net_buf_simple_tailroom>
    7ff8:	b287      	uxth	r7, r0
    7ffa:	e7ea      	b.n	7fd2 <create_frag+0x42>
    7ffc:	2000be08 	.word	0x2000be08

00008000 <send_buf>:
{
    8000:	b538      	push	{r3, r4, r5, lr}
    8002:	4605      	mov	r5, r0
    8004:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    8006:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    8008:	4b1b      	ldr	r3, [pc, #108]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    800a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    800e:	429a      	cmp	r2, r3
    8010:	d91f      	bls.n	8052 <send_buf+0x52>
	frag = create_frag(conn, buf);
    8012:	f7ff ffbd 	bl	7f90 <create_frag>
	if (!frag) {
    8016:	4601      	mov	r1, r0
    8018:	b350      	cbz	r0, 8070 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    801a:	2301      	movs	r3, #1
    801c:	2200      	movs	r2, #0
    801e:	4628      	mov	r0, r5
    8020:	f7ff fc04 	bl	782c <send_frag>
    8024:	4603      	mov	r3, r0
    8026:	b1c8      	cbz	r0, 805c <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    8028:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    802a:	4a13      	ldr	r2, [pc, #76]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    802c:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    8030:	429a      	cmp	r2, r3
    8032:	d215      	bcs.n	8060 <send_buf+0x60>
		frag = create_frag(conn, buf);
    8034:	4621      	mov	r1, r4
    8036:	4628      	mov	r0, r5
    8038:	f7ff ffaa 	bl	7f90 <create_frag>
		if (!frag) {
    803c:	4601      	mov	r1, r0
    803e:	b1c8      	cbz	r0, 8074 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    8040:	2301      	movs	r3, #1
    8042:	461a      	mov	r2, r3
    8044:	4628      	mov	r0, r5
    8046:	f7ff fbf1 	bl	782c <send_frag>
    804a:	4603      	mov	r3, r0
    804c:	2800      	cmp	r0, #0
    804e:	d1eb      	bne.n	8028 <send_buf+0x28>
    8050:	e004      	b.n	805c <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    8052:	2300      	movs	r3, #0
    8054:	461a      	mov	r2, r3
    8056:	f7ff fbe9 	bl	782c <send_frag>
    805a:	4603      	mov	r3, r0
}
    805c:	4618      	mov	r0, r3
    805e:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    8060:	2300      	movs	r3, #0
    8062:	2201      	movs	r2, #1
    8064:	4621      	mov	r1, r4
    8066:	4628      	mov	r0, r5
    8068:	f7ff fbe0 	bl	782c <send_frag>
    806c:	4603      	mov	r3, r0
    806e:	e7f5      	b.n	805c <send_buf+0x5c>
		return false;
    8070:	2300      	movs	r3, #0
    8072:	e7f3      	b.n	805c <send_buf+0x5c>
			return false;
    8074:	2300      	movs	r3, #0
    8076:	e7f1      	b.n	805c <send_buf+0x5c>
    8078:	2000be08 	.word	0x2000be08

0000807c <bt_conn_process_tx>:
{
    807c:	b538      	push	{r3, r4, r5, lr}
    807e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    8080:	7b03      	ldrb	r3, [r0, #12]
    8082:	b97b      	cbnz	r3, 80a4 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    8084:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8086:	f3bf 8f5b 	dmb	ish
    808a:	e853 2f00 	ldrex	r2, [r3]
    808e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8092:	e843 1000 	strex	r0, r1, [r3]
    8096:	2800      	cmp	r0, #0
    8098:	d1f7      	bne.n	808a <bt_conn_process_tx+0xe>
    809a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    809e:	f012 0f40 	tst.w	r2, #64	; 0x40
    80a2:	d10c      	bne.n	80be <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    80a4:	2100      	movs	r1, #0
    80a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    80aa:	f013 f97e 	bl	1b3aa <net_buf_get>
	BT_ASSERT(buf);
    80ae:	4605      	mov	r5, r0
    80b0:	b148      	cbz	r0, 80c6 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    80b2:	4601      	mov	r1, r0
    80b4:	4620      	mov	r0, r4
    80b6:	f7ff ffa3 	bl	8000 <send_buf>
    80ba:	b150      	cbz	r0, 80d2 <bt_conn_process_tx+0x56>
    80bc:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    80be:	4620      	mov	r0, r4
    80c0:	f7ff fcd7 	bl	7a72 <conn_cleanup>
		return;
    80c4:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    80c6:	4040      	eors	r0, r0
    80c8:	f380 8811 	msr	BASEPRI, r0
    80cc:	f04f 0004 	mov.w	r0, #4
    80d0:	df02      	svc	2
		net_buf_unref(buf);
    80d2:	4628      	mov	r0, r5
    80d4:	f013 f996 	bl	1b404 <net_buf_unref>
    80d8:	e7f0      	b.n	80bc <bt_conn_process_tx+0x40>
	...

000080dc <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    80dc:	4b03      	ldr	r3, [pc, #12]	; (80ec <bt_conn_get_id+0x10>)
    80de:	1ac0      	subs	r0, r0, r3
    80e0:	1080      	asrs	r0, r0, #2
    80e2:	4b03      	ldr	r3, [pc, #12]	; (80f0 <bt_conn_get_id+0x14>)
    80e4:	fb03 f000 	mul.w	r0, r3, r0
}
    80e8:	b2c0      	uxtb	r0, r0
    80ea:	4770      	bx	lr
    80ec:	20000968 	.word	0x20000968
    80f0:	96f96f97 	.word	0x96f96f97

000080f4 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    80f4:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    80f6:	2300      	movs	r3, #0
    80f8:	e000      	b.n	80fc <bt_conn_init+0x8>
    80fa:	3301      	adds	r3, #1
    80fc:	2b01      	cmp	r3, #1
    80fe:	d80d      	bhi.n	811c <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    8100:	491a      	ldr	r1, [pc, #104]	; (816c <bt_conn_init+0x78>)
    8102:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    8106:	4a1a      	ldr	r2, [pc, #104]	; (8170 <bt_conn_init+0x7c>)
    8108:	6814      	ldr	r4, [r2, #0]
    810a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    810e:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    8110:	6852      	ldr	r2, [r2, #4]
    8112:	2a00      	cmp	r2, #0
    8114:	d1f1      	bne.n	80fa <bt_conn_init+0x6>
		list->tail = list->head;
    8116:	4a16      	ldr	r2, [pc, #88]	; (8170 <bt_conn_init+0x7c>)
    8118:	6050      	str	r0, [r2, #4]
    811a:	e7ee      	b.n	80fa <bt_conn_init+0x6>
	}

	bt_att_init();
    811c:	f002 fa68 	bl	a5f0 <bt_att_init>

	err = bt_smp_init();
    8120:	f005 fba2 	bl	d868 <bt_smp_init>
	if (err) {
    8124:	4605      	mov	r5, r0
    8126:	b108      	cbz	r0, 812c <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    8128:	4628      	mov	r0, r5
    812a:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    812c:	f000 ff20 	bl	8f70 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8130:	462c      	mov	r4, r5
    8132:	2c00      	cmp	r4, #0
    8134:	d1f8      	bne.n	8128 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    8136:	4a0f      	ldr	r2, [pc, #60]	; (8174 <bt_conn_init+0x80>)
    8138:	239c      	movs	r3, #156	; 0x9c
    813a:	fb03 f304 	mul.w	r3, r3, r4
    813e:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    8140:	3340      	adds	r3, #64	; 0x40
    8142:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8144:	f3bf 8f5b 	dmb	ish
    8148:	685b      	ldr	r3, [r3, #4]
    814a:	f3bf 8f5b 	dmb	ish
    814e:	b90b      	cbnz	r3, 8154 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8150:	3401      	adds	r4, #1
    8152:	e7ee      	b.n	8132 <bt_conn_init+0x3e>
    8154:	f3bf 8f5b 	dmb	ish
    8158:	6843      	ldr	r3, [r0, #4]
    815a:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    815e:	f013 0f01 	tst.w	r3, #1
    8162:	d0f5      	beq.n	8150 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8164:	2101      	movs	r1, #1
    8166:	f7ff fd05 	bl	7b74 <bt_conn_set_state>
    816a:	e7f1      	b.n	8150 <bt_conn_init+0x5c>
    816c:	20000958 	.word	0x20000958
    8170:	20000af4 	.word	0x20000af4
    8174:	20000968 	.word	0x20000968

00008178 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    8178:	4a05      	ldr	r2, [pc, #20]	; (8190 <get_ident+0x18>)
    817a:	7813      	ldrb	r3, [r2, #0]
    817c:	3301      	adds	r3, #1
    817e:	b2db      	uxtb	r3, r3
    8180:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    8182:	b90b      	cbnz	r3, 8188 <get_ident+0x10>
		ident++;
    8184:	3301      	adds	r3, #1
    8186:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    8188:	4b01      	ldr	r3, [pc, #4]	; (8190 <get_ident+0x18>)
    818a:	7818      	ldrb	r0, [r3, #0]
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	20000b98 	.word	0x20000b98

00008194 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    8194:	b430      	push	{r4, r5}
	return list->head;
    8196:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8198:	b113      	cbz	r3, 81a0 <__l2cap_lookup_ident+0xc>
    819a:	3b08      	subs	r3, #8
    819c:	2400      	movs	r4, #0
    819e:	e01b      	b.n	81d8 <__l2cap_lookup_ident+0x44>
    81a0:	2300      	movs	r3, #0
    81a2:	e7fb      	b.n	819c <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    81a4:	b35a      	cbz	r2, 81fe <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    81a6:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    81aa:	b144      	cbz	r4, 81be <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    81ac:	6899      	ldr	r1, [r3, #8]
    81ae:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    81b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    81b2:	428a      	cmp	r2, r1
    81b4:	d00a      	beq.n	81cc <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    81b6:	2200      	movs	r2, #0
    81b8:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    81ba:	4618      	mov	r0, r3
    81bc:	e01d      	b.n	81fa <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    81be:	6899      	ldr	r1, [r3, #8]
    81c0:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    81c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    81c4:	4294      	cmp	r4, r2
    81c6:	d1f6      	bne.n	81b6 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    81c8:	6401      	str	r1, [r0, #64]	; 0x40
    81ca:	e7f4      	b.n	81b6 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    81cc:	6404      	str	r4, [r0, #64]	; 0x40
    81ce:	e7f2      	b.n	81b6 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    81d0:	4625      	mov	r5, r4
    81d2:	e00a      	b.n	81ea <__l2cap_lookup_ident+0x56>
    81d4:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    81d6:	3b08      	subs	r3, #8
    81d8:	b173      	cbz	r3, 81f8 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    81da:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    81de:	428d      	cmp	r5, r1
    81e0:	d0e0      	beq.n	81a4 <__l2cap_lookup_ident+0x10>
    81e2:	f113 0408 	adds.w	r4, r3, #8
    81e6:	d0f3      	beq.n	81d0 <__l2cap_lookup_ident+0x3c>
	return node->next;
    81e8:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    81ea:	b11d      	cbz	r5, 81f4 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    81ec:	2c00      	cmp	r4, #0
    81ee:	d0f1      	beq.n	81d4 <__l2cap_lookup_ident+0x40>
	return node->next;
    81f0:	689b      	ldr	r3, [r3, #8]
    81f2:	e7f0      	b.n	81d6 <__l2cap_lookup_ident+0x42>
    81f4:	2300      	movs	r3, #0
    81f6:	e7ef      	b.n	81d8 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    81f8:	2000      	movs	r0, #0
}
    81fa:	bc30      	pop	{r4, r5}
    81fc:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    81fe:	4618      	mov	r0, r3
    8200:	e7fb      	b.n	81fa <__l2cap_lookup_ident+0x66>
	...

00008204 <l2cap_server_lookup_psm>:
	return list->head;
    8204:	4b0d      	ldr	r3, [pc, #52]	; (823c <l2cap_server_lookup_psm+0x38>)
    8206:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    8208:	b10b      	cbz	r3, 820e <l2cap_server_lookup_psm+0xa>
    820a:	3b08      	subs	r3, #8
    820c:	e006      	b.n	821c <l2cap_server_lookup_psm+0x18>
    820e:	2300      	movs	r3, #0
    8210:	e004      	b.n	821c <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8212:	4611      	mov	r1, r2
    8214:	e00a      	b.n	822c <l2cap_server_lookup_psm+0x28>
	return node->next;
    8216:	689a      	ldr	r2, [r3, #8]
    8218:	f1a2 0308 	sub.w	r3, r2, #8
    821c:	b163      	cbz	r3, 8238 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    821e:	881a      	ldrh	r2, [r3, #0]
    8220:	4282      	cmp	r2, r0
    8222:	d009      	beq.n	8238 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8224:	f113 0208 	adds.w	r2, r3, #8
    8228:	d0f3      	beq.n	8212 <l2cap_server_lookup_psm+0xe>
	return node->next;
    822a:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    822c:	b111      	cbz	r1, 8234 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    822e:	2a00      	cmp	r2, #0
    8230:	d1f1      	bne.n	8216 <l2cap_server_lookup_psm+0x12>
    8232:	e7f1      	b.n	8218 <l2cap_server_lookup_psm+0x14>
    8234:	2300      	movs	r3, #0
    8236:	e7f1      	b.n	821c <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    8238:	4618      	mov	r0, r3
    823a:	4770      	bx	lr
    823c:	20000ba4 	.word	0x20000ba4

00008240 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    8240:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    8244:	b29b      	uxth	r3, r3
    8246:	2b3f      	cmp	r3, #63	; 0x3f
    8248:	d835      	bhi.n	82b6 <l2cap_remove_tx_cid+0x76>
	return list->head;
    824a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    824c:	b12b      	cbz	r3, 825a <l2cap_remove_tx_cid+0x1a>
    824e:	3b08      	subs	r3, #8
    8250:	2200      	movs	r2, #0
    8252:	2b00      	cmp	r3, #0
    8254:	d031      	beq.n	82ba <l2cap_remove_tx_cid+0x7a>
{
    8256:	b410      	push	{r4}
    8258:	e01c      	b.n	8294 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    825a:	2300      	movs	r3, #0
    825c:	e7f8      	b.n	8250 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    825e:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    8262:	b14a      	cbz	r2, 8278 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    8264:	689c      	ldr	r4, [r3, #8]
    8266:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    8268:	6c04      	ldr	r4, [r0, #64]	; 0x40
    826a:	42a1      	cmp	r1, r4
    826c:	d00b      	beq.n	8286 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    826e:	2200      	movs	r2, #0
    8270:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    8272:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    8274:	bc10      	pop	{r4}
    8276:	4770      	bx	lr
		list->head = node->next;
    8278:	689a      	ldr	r2, [r3, #8]
    827a:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    827c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    827e:	428c      	cmp	r4, r1
    8280:	d1f5      	bne.n	826e <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    8282:	6402      	str	r2, [r0, #64]	; 0x40
    8284:	e7f3      	b.n	826e <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    8286:	6402      	str	r2, [r0, #64]	; 0x40
    8288:	e7f1      	b.n	826e <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    828a:	4614      	mov	r4, r2
    828c:	e00a      	b.n	82a4 <l2cap_remove_tx_cid+0x64>
    828e:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8290:	3b08      	subs	r3, #8
    8292:	b173      	cbz	r3, 82b2 <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    8294:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    8298:	42a1      	cmp	r1, r4
    829a:	d0e0      	beq.n	825e <l2cap_remove_tx_cid+0x1e>
    829c:	f113 0208 	adds.w	r2, r3, #8
    82a0:	d0f3      	beq.n	828a <l2cap_remove_tx_cid+0x4a>
	return node->next;
    82a2:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    82a4:	b11c      	cbz	r4, 82ae <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    82a6:	2a00      	cmp	r2, #0
    82a8:	d0f1      	beq.n	828e <l2cap_remove_tx_cid+0x4e>
	return node->next;
    82aa:	689b      	ldr	r3, [r3, #8]
    82ac:	e7f0      	b.n	8290 <l2cap_remove_tx_cid+0x50>
    82ae:	2300      	movs	r3, #0
    82b0:	e7ef      	b.n	8292 <l2cap_remove_tx_cid+0x52>
	return NULL;
    82b2:	2000      	movs	r0, #0
    82b4:	e7de      	b.n	8274 <l2cap_remove_tx_cid+0x34>
		return NULL;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
	return NULL;
    82ba:	2000      	movs	r0, #0
}
    82bc:	4770      	bx	lr

000082be <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    82be:	4770      	bx	lr

000082c0 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    82c0:	4770      	bx	lr
	...

000082c4 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    82c4:	2000      	movs	r0, #0
    82c6:	b110      	cbz	r0, 82ce <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    82c8:	f06f 000b 	mvn.w	r0, #11
}
    82cc:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    82ce:	239c      	movs	r3, #156	; 0x9c
    82d0:	fb03 f300 	mul.w	r3, r3, r0
    82d4:	4a06      	ldr	r2, [pc, #24]	; (82f0 <l2cap_accept+0x2c>)
    82d6:	58d3      	ldr	r3, [r2, r3]
    82d8:	b10b      	cbz	r3, 82de <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    82da:	3001      	adds	r0, #1
    82dc:	e7f3      	b.n	82c6 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    82de:	239c      	movs	r3, #156	; 0x9c
    82e0:	4a03      	ldr	r2, [pc, #12]	; (82f0 <l2cap_accept+0x2c>)
    82e2:	fb03 2300 	mla	r3, r3, r0, r2
    82e6:	4a03      	ldr	r2, [pc, #12]	; (82f4 <l2cap_accept+0x30>)
    82e8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    82ea:	600b      	str	r3, [r1, #0]
		return 0;
    82ec:	4770      	bx	lr
    82ee:	bf00      	nop
    82f0:	20000afc 	.word	0x20000afc
    82f4:	2000bf5c 	.word	0x2000bf5c

000082f8 <l2cap_alloc_frag>:
{
    82f8:	b538      	push	{r3, r4, r5, lr}
    82fa:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    82fc:	6843      	ldr	r3, [r0, #4]
    82fe:	68db      	ldr	r3, [r3, #12]
    8300:	4798      	blx	r3
	if (!frag) {
    8302:	4604      	mov	r4, r0
    8304:	b120      	cbz	r0, 8310 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    8306:	4601      	mov	r1, r0
    8308:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    830c:	f013 f8ab 	bl	1b466 <net_buf_frag_add>
}
    8310:	4620      	mov	r0, r4
    8312:	bd38      	pop	{r3, r4, r5, pc}

00008314 <l2cap_chan_rx_give_credits>:
{
    8314:	b538      	push	{r3, r4, r5, lr}
    8316:	4605      	mov	r5, r0
	while (credits--) {
    8318:	e004      	b.n	8324 <l2cap_chan_rx_give_credits+0x10>
    831a:	f105 0048 	add.w	r0, r5, #72	; 0x48
    831e:	f021 fbbc 	bl	29a9a <_impl_k_sem_give>
    8322:	4621      	mov	r1, r4
    8324:	1e4b      	subs	r3, r1, #1
    8326:	b29c      	uxth	r4, r3
    8328:	2900      	cmp	r1, #0
    832a:	d1f6      	bne.n	831a <l2cap_chan_rx_give_credits+0x6>
}
    832c:	bd38      	pop	{r3, r4, r5, pc}

0000832e <l2cap_chan_tx_give_credits>:
{
    832e:	b538      	push	{r3, r4, r5, lr}
    8330:	4605      	mov	r5, r0
	while (credits--) {
    8332:	e004      	b.n	833e <l2cap_chan_tx_give_credits+0x10>
    8334:	f105 0068 	add.w	r0, r5, #104	; 0x68
    8338:	f021 fbaf 	bl	29a9a <_impl_k_sem_give>
    833c:	4621      	mov	r1, r4
    833e:	1e4b      	subs	r3, r1, #1
    8340:	b29c      	uxth	r4, r3
    8342:	2900      	cmp	r1, #0
    8344:	d1f6      	bne.n	8334 <l2cap_chan_tx_give_credits+0x6>
}
    8346:	bd38      	pop	{r3, r4, r5, pc}

00008348 <l2cap_chan_destroy>:
{
    8348:	b510      	push	{r4, lr}
    834a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    834c:	3010      	adds	r0, #16
    834e:	f022 f993 	bl	2a678 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    8352:	e002      	b.n	835a <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    8354:	4618      	mov	r0, r3
    8356:	f013 f855 	bl	1b404 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    835a:	2100      	movs	r1, #0
    835c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8360:	f013 f823 	bl	1b3aa <net_buf_get>
    8364:	4603      	mov	r3, r0
    8366:	2800      	cmp	r0, #0
    8368:	d1f4      	bne.n	8354 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    836a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    836e:	b130      	cbz	r0, 837e <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    8370:	f013 f848 	bl	1b404 <net_buf_unref>
		ch->_sdu = NULL;
    8374:	2300      	movs	r3, #0
    8376:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    837a:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    837e:	bd10      	pop	{r4, pc}

00008380 <l2cap_chan_le_get_tx_buf>:
{
    8380:	b508      	push	{r3, lr}
    8382:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    8384:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    8388:	b118      	cbz	r0, 8392 <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    838a:	2200      	movs	r2, #0
    838c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    8390:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    8392:	2100      	movs	r1, #0
    8394:	f103 0080 	add.w	r0, r3, #128	; 0x80
    8398:	f013 f807 	bl	1b3aa <net_buf_get>
}
    839c:	bd08      	pop	{r3, pc}

0000839e <l2cap_chan_tx_init>:
{
    839e:	b510      	push	{r4, lr}
    83a0:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    83a2:	2220      	movs	r2, #32
    83a4:	2100      	movs	r1, #0
    83a6:	3060      	adds	r0, #96	; 0x60
    83a8:	f022 fb4a 	bl	2aa40 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    83ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    83b0:	2100      	movs	r1, #0
    83b2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    83b6:	f021 fb67 	bl	29a88 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    83ba:	f104 0080 	add.w	r0, r4, #128	; 0x80
    83be:	f020 ffa2 	bl	29306 <k_queue_init>
    83c2:	bd10      	pop	{r4, pc}

000083c4 <l2cap_chan_rx_init>:
{
    83c4:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    83c6:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    83ca:	b913      	cbnz	r3, 83d2 <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    83cc:	2342      	movs	r3, #66	; 0x42
    83ce:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    83d2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    83d6:	b96b      	cbnz	r3, 83f4 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    83d8:	6843      	ldr	r3, [r0, #4]
    83da:	68db      	ldr	r3, [r3, #12]
    83dc:	b1cb      	cbz	r3, 8412 <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    83de:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    83e2:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    83e4:	4a0d      	ldr	r2, [pc, #52]	; (841c <l2cap_chan_rx_init+0x58>)
    83e6:	fb82 1203 	smull	r1, r2, r2, r3
    83ea:	17db      	asrs	r3, r3, #31
    83ec:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    83f0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    83f4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    83f8:	3302      	adds	r3, #2
    83fa:	2b44      	cmp	r3, #68	; 0x44
    83fc:	bfa8      	it	ge
    83fe:	2344      	movge	r3, #68	; 0x44
    8400:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    8404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8408:	2100      	movs	r1, #0
    840a:	3048      	adds	r0, #72	; 0x48
    840c:	f021 fb3c 	bl	29a88 <_impl_k_sem_init>
    8410:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    8412:	2302      	movs	r3, #2
    8414:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    8418:	e7ec      	b.n	83f4 <l2cap_chan_rx_init+0x30>
    841a:	bf00      	nop
    841c:	78787879 	.word	0x78787879

00008420 <l2cap_change_security>:
{
    8420:	b508      	push	{r3, lr}
	switch (err) {
    8422:	2905      	cmp	r1, #5
    8424:	d00e      	beq.n	8444 <l2cap_change_security+0x24>
    8426:	2908      	cmp	r1, #8
    8428:	d120      	bne.n	846c <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    842a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    842e:	2b01      	cmp	r3, #1
    8430:	d81f      	bhi.n	8472 <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    8432:	2302      	movs	r3, #2
    8434:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    8438:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    843c:	6800      	ldr	r0, [r0, #0]
    843e:	f7ff f917 	bl	7670 <bt_conn_security>
    8442:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    8444:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    8448:	2b01      	cmp	r3, #1
    844a:	d905      	bls.n	8458 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    844c:	2b02      	cmp	r3, #2
    844e:	d807      	bhi.n	8460 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    8450:	2303      	movs	r3, #3
    8452:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    8456:	e7ef      	b.n	8438 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    8458:	2302      	movs	r3, #2
    845a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    845e:	e7eb      	b.n	8438 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    8460:	2b03      	cmp	r3, #3
    8462:	d809      	bhi.n	8478 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    8464:	2304      	movs	r3, #4
    8466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    846a:	e7e5      	b.n	8438 <l2cap_change_security+0x18>
		return -EINVAL;
    846c:	f06f 0015 	mvn.w	r0, #21
    8470:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8472:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8476:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8478:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    847c:	bd08      	pop	{r3, pc}
	...

00008480 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    8480:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    8484:	2200      	movs	r2, #0
    8486:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    8488:	4a05      	ldr	r2, [pc, #20]	; (84a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    848a:	6852      	ldr	r2, [r2, #4]
    848c:	b11a      	cbz	r2, 8496 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    848e:	6013      	str	r3, [r2, #0]
		list->tail = node;
    8490:	4a03      	ldr	r2, [pc, #12]	; (84a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    8492:	6053      	str	r3, [r2, #4]
    8494:	4770      	bx	lr
		list->tail = node;
    8496:	4a02      	ldr	r2, [pc, #8]	; (84a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    8498:	6053      	str	r3, [r2, #4]
		list->head = node;
    849a:	6013      	str	r3, [r2, #0]
    849c:	4770      	bx	lr
    849e:	bf00      	nop
    84a0:	20000b9c 	.word	0x20000b9c

000084a4 <bt_l2cap_chan_remove>:
	return list->head;
    84a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84a6:	b123      	cbz	r3, 84b2 <bt_l2cap_chan_remove+0xe>
    84a8:	3b08      	subs	r3, #8
    84aa:	2200      	movs	r2, #0
    84ac:	b35b      	cbz	r3, 8506 <bt_l2cap_chan_remove+0x62>
{
    84ae:	b410      	push	{r4}
    84b0:	e01c      	b.n	84ec <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84b2:	2300      	movs	r3, #0
    84b4:	e7f9      	b.n	84aa <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    84b6:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    84ba:	b142      	cbz	r2, 84ce <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    84bc:	689c      	ldr	r4, [r3, #8]
    84be:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    84c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
    84c2:	42a1      	cmp	r1, r4
    84c4:	d00a      	beq.n	84dc <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    84c6:	2200      	movs	r2, #0
    84c8:	609a      	str	r2, [r3, #8]
}
    84ca:	bc10      	pop	{r4}
    84cc:	4770      	bx	lr
		list->head = node->next;
    84ce:	689a      	ldr	r2, [r3, #8]
    84d0:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    84d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    84d4:	428c      	cmp	r4, r1
    84d6:	d1f6      	bne.n	84c6 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    84d8:	6402      	str	r2, [r0, #64]	; 0x40
    84da:	e7f4      	b.n	84c6 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    84dc:	6402      	str	r2, [r0, #64]	; 0x40
    84de:	e7f2      	b.n	84c6 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84e0:	4614      	mov	r4, r2
    84e2:	e009      	b.n	84f8 <bt_l2cap_chan_remove+0x54>
    84e4:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84e6:	3b08      	subs	r3, #8
    84e8:	2b00      	cmp	r3, #0
    84ea:	d0ee      	beq.n	84ca <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    84ec:	428b      	cmp	r3, r1
    84ee:	d0e2      	beq.n	84b6 <bt_l2cap_chan_remove+0x12>
    84f0:	f113 0208 	adds.w	r2, r3, #8
    84f4:	d0f4      	beq.n	84e0 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    84f6:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84f8:	b11c      	cbz	r4, 8502 <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84fa:	2a00      	cmp	r2, #0
    84fc:	d0f2      	beq.n	84e4 <bt_l2cap_chan_remove+0x40>
	return node->next;
    84fe:	689b      	ldr	r3, [r3, #8]
    8500:	e7f1      	b.n	84e6 <bt_l2cap_chan_remove+0x42>
    8502:	2300      	movs	r3, #0
    8504:	e7f0      	b.n	84e8 <bt_l2cap_chan_remove+0x44>
    8506:	4770      	bx	lr

00008508 <bt_l2cap_chan_set_state>:
	chan->state = state;
    8508:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    850c:	4770      	bx	lr

0000850e <bt_l2cap_chan_del>:
{
    850e:	b510      	push	{r4, lr}
    8510:	4604      	mov	r4, r0
	if (!chan->conn) {
    8512:	6803      	ldr	r3, [r0, #0]
    8514:	b12b      	cbz	r3, 8522 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    8516:	6843      	ldr	r3, [r0, #4]
    8518:	685b      	ldr	r3, [r3, #4]
    851a:	b103      	cbz	r3, 851e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    851c:	4798      	blx	r3
	chan->conn = NULL;
    851e:	2300      	movs	r3, #0
    8520:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    8522:	2100      	movs	r1, #0
    8524:	4620      	mov	r0, r4
    8526:	f7ff ffef 	bl	8508 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    852a:	2300      	movs	r3, #0
    852c:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    852e:	68e3      	ldr	r3, [r4, #12]
    8530:	b10b      	cbz	r3, 8536 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    8532:	4620      	mov	r0, r4
    8534:	4798      	blx	r3
    8536:	bd10      	pop	{r4, pc}

00008538 <l2cap_rtx_timeout>:
{
    8538:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    853a:	f1a0 0410 	sub.w	r4, r0, #16
    853e:	4621      	mov	r1, r4
    8540:	f850 0c10 	ldr.w	r0, [r0, #-16]
    8544:	f7ff ffae 	bl	84a4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    8548:	4620      	mov	r0, r4
    854a:	f7ff ffe0 	bl	850e <bt_l2cap_chan_del>
    854e:	bd10      	pop	{r4, pc}

00008550 <le_conn_rsp>:
{
    8550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8554:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    8556:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    8558:	8992      	ldrh	r2, [r2, #12]
    855a:	2a09      	cmp	r2, #9
    855c:	d927      	bls.n	85ae <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    855e:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    8562:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    8566:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    856a:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    856c:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    856e:	b14d      	cbz	r5, 8584 <le_conn_rsp+0x34>
    8570:	2d05      	cmp	r5, #5
    8572:	d007      	beq.n	8584 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    8574:	2d08      	cmp	r5, #8
    8576:	d005      	beq.n	8584 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    8578:	2201      	movs	r2, #1
    857a:	4630      	mov	r0, r6
    857c:	f7ff fe0a 	bl	8194 <__l2cap_lookup_ident>
    8580:	4604      	mov	r4, r0
    8582:	e004      	b.n	858e <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    8584:	2200      	movs	r2, #0
    8586:	4630      	mov	r0, r6
    8588:	f7ff fe04 	bl	8194 <__l2cap_lookup_ident>
    858c:	4604      	mov	r4, r0
	if (!chan) {
    858e:	b174      	cbz	r4, 85ae <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    8590:	f104 0010 	add.w	r0, r4, #16
    8594:	f022 f870 	bl	2a678 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    8598:	2300      	movs	r3, #0
    859a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    859e:	2d05      	cmp	r5, #5
    85a0:	d021      	beq.n	85e6 <le_conn_rsp+0x96>
    85a2:	2d08      	cmp	r5, #8
    85a4:	d01f      	beq.n	85e6 <le_conn_rsp+0x96>
    85a6:	b125      	cbz	r5, 85b2 <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    85a8:	4620      	mov	r0, r4
    85aa:	f7ff ffb0 	bl	850e <bt_l2cap_chan_del>
    85ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    85b2:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    85b6:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    85ba:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    85be:	2103      	movs	r1, #3
    85c0:	4620      	mov	r0, r4
    85c2:	f7ff ffa1 	bl	8508 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    85c6:	6863      	ldr	r3, [r4, #4]
    85c8:	681b      	ldr	r3, [r3, #0]
    85ca:	b10b      	cbz	r3, 85d0 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    85cc:	4620      	mov	r0, r4
    85ce:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    85d0:	4639      	mov	r1, r7
    85d2:	4620      	mov	r0, r4
    85d4:	f7ff feab 	bl	832e <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    85d8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    85dc:	4620      	mov	r0, r4
    85de:	f7ff fe99 	bl	8314 <l2cap_chan_rx_give_credits>
		break;
    85e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    85e6:	4629      	mov	r1, r5
    85e8:	4620      	mov	r0, r4
    85ea:	f7ff ff19 	bl	8420 <l2cap_change_security>
    85ee:	2800      	cmp	r0, #0
    85f0:	d0dd      	beq.n	85ae <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    85f2:	4621      	mov	r1, r4
    85f4:	4630      	mov	r0, r6
    85f6:	f7ff ff55 	bl	84a4 <bt_l2cap_chan_remove>
    85fa:	e7d5      	b.n	85a8 <le_conn_rsp+0x58>

000085fc <le_disconn_rsp>:
{
    85fc:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    85fe:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    8600:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    8602:	8993      	ldrh	r3, [r2, #12]
    8604:	2b03      	cmp	r3, #3
    8606:	d800      	bhi.n	860a <le_disconn_rsp+0xe>
    8608:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    860a:	8809      	ldrh	r1, [r1, #0]
    860c:	f7ff fe18 	bl	8240 <l2cap_remove_tx_cid>
	if (!chan) {
    8610:	2800      	cmp	r0, #0
    8612:	d0f9      	beq.n	8608 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    8614:	f7ff ff7b 	bl	850e <bt_l2cap_chan_del>
    8618:	e7f6      	b.n	8608 <le_disconn_rsp+0xc>

0000861a <reject_cmd>:
{
    861a:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    861c:	2201      	movs	r2, #1
    861e:	6800      	ldr	r0, [r0, #0]
    8620:	f7ff fdb8 	bl	8194 <__l2cap_lookup_ident>
	if (!chan) {
    8624:	b108      	cbz	r0, 862a <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    8626:	f7ff ff72 	bl	850e <bt_l2cap_chan_del>
    862a:	bd08      	pop	{r3, pc}

0000862c <bt_l2cap_chan_add>:
{
    862c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    862e:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    8632:	2400      	movs	r4, #0
    8634:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    8636:	6c04      	ldr	r4, [r0, #64]	; 0x40
    8638:	b12c      	cbz	r4, 8646 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    863a:	6023      	str	r3, [r4, #0]
		list->tail = node;
    863c:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    863e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    8640:	60ca      	str	r2, [r1, #12]
}
    8642:	bc10      	pop	{r4}
    8644:	4770      	bx	lr
		list->tail = node;
    8646:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    8648:	63c3      	str	r3, [r0, #60]	; 0x3c
    864a:	e7f8      	b.n	863e <bt_l2cap_chan_add+0x12>

0000864c <bt_l2cap_disconnected>:
{
    864c:	b510      	push	{r4, lr}
	return list->head;
    864e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    8650:	b140      	cbz	r0, 8664 <bt_l2cap_disconnected+0x18>
    8652:	3808      	subs	r0, #8
    8654:	b140      	cbz	r0, 8668 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8656:	f110 0408 	adds.w	r4, r0, #8
    865a:	d000      	beq.n	865e <bt_l2cap_disconnected+0x12>
	return node->next;
    865c:	6884      	ldr	r4, [r0, #8]
    865e:	b12c      	cbz	r4, 866c <bt_l2cap_disconnected+0x20>
    8660:	3c08      	subs	r4, #8
    8662:	e00a      	b.n	867a <bt_l2cap_disconnected+0x2e>
    8664:	2000      	movs	r0, #0
    8666:	e7f5      	b.n	8654 <bt_l2cap_disconnected+0x8>
    8668:	4604      	mov	r4, r0
    866a:	e006      	b.n	867a <bt_l2cap_disconnected+0x2e>
    866c:	2400      	movs	r4, #0
    866e:	e004      	b.n	867a <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8670:	461a      	mov	r2, r3
    8672:	e00a      	b.n	868a <bt_l2cap_disconnected+0x3e>
    8674:	3b08      	subs	r3, #8
    8676:	4620      	mov	r0, r4
    8678:	461c      	mov	r4, r3
    867a:	b178      	cbz	r0, 869c <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    867c:	f7ff ff47 	bl	850e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    8680:	b144      	cbz	r4, 8694 <bt_l2cap_disconnected+0x48>
    8682:	f114 0308 	adds.w	r3, r4, #8
    8686:	d0f3      	beq.n	8670 <bt_l2cap_disconnected+0x24>
	return node->next;
    8688:	68a2      	ldr	r2, [r4, #8]
    868a:	b12a      	cbz	r2, 8698 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    868c:	2b00      	cmp	r3, #0
    868e:	d0f1      	beq.n	8674 <bt_l2cap_disconnected+0x28>
	return node->next;
    8690:	68a3      	ldr	r3, [r4, #8]
    8692:	e7ef      	b.n	8674 <bt_l2cap_disconnected+0x28>
    8694:	4623      	mov	r3, r4
    8696:	e7ee      	b.n	8676 <bt_l2cap_disconnected+0x2a>
    8698:	2300      	movs	r3, #0
    869a:	e7ec      	b.n	8676 <bt_l2cap_disconnected+0x2a>
}
    869c:	bd10      	pop	{r4, pc}

0000869e <bt_l2cap_create_pdu>:
{
    869e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    86a0:	3104      	adds	r1, #4
    86a2:	f7ff fc61 	bl	7f68 <bt_conn_create_pdu>
}
    86a6:	bd08      	pop	{r3, pc}

000086a8 <l2cap_create_le_sig_pdu>:
{
    86a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86aa:	460f      	mov	r7, r1
    86ac:	4616      	mov	r6, r2
    86ae:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    86b0:	2100      	movs	r1, #0
    86b2:	4608      	mov	r0, r1
    86b4:	f7ff fff3 	bl	869e <bt_l2cap_create_pdu>
    86b8:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    86ba:	2104      	movs	r1, #4
    86bc:	3008      	adds	r0, #8
    86be:	f012 feed 	bl	1b49c <net_buf_simple_add>
	hdr->code = code;
    86c2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    86c4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    86c6:	8045      	strh	r5, [r0, #2]
}
    86c8:	4620      	mov	r0, r4
    86ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000086cc <l2cap_chan_create_seg>:
{
    86cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86d0:	4605      	mov	r5, r0
    86d2:	460c      	mov	r4, r1
    86d4:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    86d6:	7988      	ldrb	r0, [r1, #6]
    86d8:	f012 fe1a 	bl	1b310 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    86dc:	89a3      	ldrh	r3, [r4, #12]
    86de:	4443      	add	r3, r8
    86e0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    86e4:	4293      	cmp	r3, r2
    86e6:	d802      	bhi.n	86ee <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    86e8:	8ac3      	ldrh	r3, [r0, #22]
    86ea:	2b03      	cmp	r3, #3
    86ec:	d815      	bhi.n	871a <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    86ee:	79a0      	ldrb	r0, [r4, #6]
    86f0:	f012 fe0e 	bl	1b310 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    86f4:	8ac3      	ldrh	r3, [r0, #22]
    86f6:	2b03      	cmp	r3, #3
    86f8:	d902      	bls.n	8700 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    86fa:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    86fc:	2b4b      	cmp	r3, #75	; 0x4b
    86fe:	d82e      	bhi.n	875e <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    8700:	2100      	movs	r1, #0
    8702:	4608      	mov	r0, r1
    8704:	f7ff ffcb 	bl	869e <bt_l2cap_create_pdu>
    8708:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    870a:	f1b8 0f00 	cmp.w	r8, #0
    870e:	d038      	beq.n	8782 <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    8710:	f106 0008 	add.w	r0, r6, #8
    8714:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    8716:	2100      	movs	r1, #0
    8718:	e02e      	b.n	8778 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    871a:	fa1f f688 	uxth.w	r6, r8
    871e:	3608      	adds	r6, #8
    8720:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    8722:	f104 0708 	add.w	r7, r4, #8
    8726:	4638      	mov	r0, r7
    8728:	f012 ff1d 	bl	1b566 <net_buf_simple_headroom>
    872c:	42b0      	cmp	r0, r6
    872e:	d3de      	bcc.n	86ee <l2cap_chan_create_seg+0x22>
    8730:	6823      	ldr	r3, [r4, #0]
    8732:	2b00      	cmp	r3, #0
    8734:	d1db      	bne.n	86ee <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    8736:	f1b8 0f00 	cmp.w	r8, #0
    873a:	d00b      	beq.n	8754 <l2cap_chan_create_seg+0x88>
    873c:	4623      	mov	r3, r4
    873e:	2100      	movs	r1, #0
    8740:	e002      	b.n	8748 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    8742:	899a      	ldrh	r2, [r3, #12]
    8744:	4411      	add	r1, r2
		buf = buf->frags;
    8746:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8748:	2b00      	cmp	r3, #0
    874a:	d1fa      	bne.n	8742 <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    874c:	b289      	uxth	r1, r1
    874e:	4638      	mov	r0, r7
    8750:	f012 fee3 	bl	1b51a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    8754:	4620      	mov	r0, r4
    8756:	f012 fe71 	bl	1b43c <net_buf_ref>
    875a:	4606      	mov	r6, r0
    875c:	e02f      	b.n	87be <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    875e:	2100      	movs	r1, #0
    8760:	f012 fde2 	bl	1b328 <net_buf_alloc>
		if (seg) {
    8764:	4606      	mov	r6, r0
    8766:	2800      	cmp	r0, #0
    8768:	d0ca      	beq.n	8700 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    876a:	2108      	movs	r1, #8
    876c:	f012 fe37 	bl	1b3de <net_buf_reserve>
    8770:	e7cb      	b.n	870a <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    8772:	899a      	ldrh	r2, [r3, #12]
    8774:	4411      	add	r1, r2
		buf = buf->frags;
    8776:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8778:	2b00      	cmp	r3, #0
    877a:	d1fa      	bne.n	8772 <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    877c:	b289      	uxth	r1, r1
    877e:	f012 fea5 	bl	1b4cc <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    8782:	f106 0708 	add.w	r7, r6, #8
    8786:	4638      	mov	r0, r7
    8788:	f012 fef1 	bl	1b56e <net_buf_simple_tailroom>
    878c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    8790:	eba5 0308 	sub.w	r3, r5, r8
    8794:	4298      	cmp	r0, r3
    8796:	d315      	bcc.n	87c4 <l2cap_chan_create_seg+0xf8>
    8798:	fa1f f888 	uxth.w	r8, r8
    879c:	eba5 0508 	sub.w	r5, r5, r8
    87a0:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    87a2:	89a0      	ldrh	r0, [r4, #12]
    87a4:	4285      	cmp	r5, r0
    87a6:	bf28      	it	cs
    87a8:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    87aa:	462a      	mov	r2, r5
    87ac:	f854 1f08 	ldr.w	r1, [r4, #8]!
    87b0:	4638      	mov	r0, r7
    87b2:	f012 fe79 	bl	1b4a8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    87b6:	4629      	mov	r1, r5
    87b8:	4620      	mov	r0, r4
    87ba:	f012 febc 	bl	1b536 <net_buf_simple_pull>
}
    87be:	4630      	mov	r0, r6
    87c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    87c4:	4638      	mov	r0, r7
    87c6:	f012 fed2 	bl	1b56e <net_buf_simple_tailroom>
    87ca:	b285      	uxth	r5, r0
    87cc:	e7e9      	b.n	87a2 <l2cap_chan_create_seg+0xd6>

000087ce <bt_l2cap_send_cb>:
{
    87ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87d0:	4605      	mov	r5, r0
    87d2:	460f      	mov	r7, r1
    87d4:	4614      	mov	r4, r2
    87d6:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    87d8:	2104      	movs	r1, #4
    87da:	f102 0008 	add.w	r0, r2, #8
    87de:	f012 fe94 	bl	1b50a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    87e2:	89a3      	ldrh	r3, [r4, #12]
    87e4:	3b04      	subs	r3, #4
    87e6:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    87e8:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    87ea:	4632      	mov	r2, r6
    87ec:	4621      	mov	r1, r4
    87ee:	4628      	mov	r0, r5
    87f0:	f7fe ffbe 	bl	7770 <bt_conn_send_cb>
    87f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000087f8 <l2cap_chan_send_req>:
{
    87f8:	b538      	push	{r3, r4, r5, lr}
    87fa:	4604      	mov	r4, r0
    87fc:	460d      	mov	r5, r1
	if (timeout) {
    87fe:	b94a      	cbnz	r2, 8814 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    8800:	3010      	adds	r0, #16
    8802:	f021 ff39 	bl	2a678 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    8806:	2300      	movs	r3, #0
    8808:	462a      	mov	r2, r5
    880a:	2105      	movs	r1, #5
    880c:	6820      	ldr	r0, [r4, #0]
    880e:	f7ff ffde 	bl	87ce <bt_l2cap_send_cb>
    8812:	bd38      	pop	{r3, r4, r5, pc}
    8814:	f100 0110 	add.w	r1, r0, #16
    8818:	4801      	ldr	r0, [pc, #4]	; (8820 <l2cap_chan_send_req+0x28>)
    881a:	f021 ff87 	bl	2a72c <k_delayed_work_submit_to_queue>
    881e:	e7f2      	b.n	8806 <l2cap_chan_send_req+0xe>
    8820:	200030f0 	.word	0x200030f0

00008824 <l2cap_le_conn_req>:
{
    8824:	b538      	push	{r3, r4, r5, lr}
    8826:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    8828:	f7ff fca6 	bl	8178 <get_ident>
    882c:	4602      	mov	r2, r0
    882e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    8832:	230a      	movs	r3, #10
    8834:	2114      	movs	r1, #20
    8836:	2000      	movs	r0, #0
    8838:	f7ff ff36 	bl	86a8 <l2cap_create_le_sig_pdu>
    883c:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    883e:	210a      	movs	r1, #10
    8840:	3008      	adds	r0, #8
    8842:	f012 fe2b 	bl	1b49c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    8846:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    8848:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    884a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    884e:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    8850:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    8854:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    8856:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    885a:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    885c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    8860:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    8862:	f649 4240 	movw	r2, #40000	; 0x9c40
    8866:	4629      	mov	r1, r5
    8868:	4620      	mov	r0, r4
    886a:	f7ff ffc5 	bl	87f8 <l2cap_chan_send_req>
}
    886e:	2000      	movs	r0, #0
    8870:	bd38      	pop	{r3, r4, r5, pc}

00008872 <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    8872:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8876:	2b01      	cmp	r3, #1
    8878:	d000      	beq.n	887c <l2cap_le_encrypt_change+0xa>
    887a:	4770      	bx	lr
    887c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    8880:	2b00      	cmp	r3, #0
    8882:	d1fa      	bne.n	887a <l2cap_le_encrypt_change+0x8>
{
    8884:	b510      	push	{r4, lr}
    8886:	4604      	mov	r4, r0
	if (status) {
    8888:	b911      	cbnz	r1, 8890 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    888a:	f7ff ffcb 	bl	8824 <l2cap_le_conn_req>
    888e:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    8890:	4601      	mov	r1, r0
    8892:	6800      	ldr	r0, [r0, #0]
    8894:	f7ff fe06 	bl	84a4 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    8898:	4620      	mov	r0, r4
    889a:	f7ff fe38 	bl	850e <bt_l2cap_chan_del>
		return;
    889e:	bd10      	pop	{r4, pc}

000088a0 <bt_l2cap_encrypt_change>:
{
    88a0:	b538      	push	{r3, r4, r5, lr}
    88a2:	460d      	mov	r5, r1
	return list->head;
    88a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    88a6:	b10c      	cbz	r4, 88ac <bt_l2cap_encrypt_change+0xc>
    88a8:	3c08      	subs	r4, #8
    88aa:	e00a      	b.n	88c2 <bt_l2cap_encrypt_change+0x22>
    88ac:	2400      	movs	r4, #0
    88ae:	e008      	b.n	88c2 <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    88b0:	f114 0308 	adds.w	r3, r4, #8
    88b4:	d012      	beq.n	88dc <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    88b6:	68a2      	ldr	r2, [r4, #8]
    88b8:	b192      	cbz	r2, 88e0 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    88ba:	b103      	cbz	r3, 88be <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    88bc:	68a3      	ldr	r3, [r4, #8]
    88be:	f1a3 0408 	sub.w	r4, r3, #8
    88c2:	b17c      	cbz	r4, 88e4 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    88c4:	4629      	mov	r1, r5
    88c6:	4620      	mov	r0, r4
    88c8:	f7ff ffd3 	bl	8872 <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    88cc:	6863      	ldr	r3, [r4, #4]
    88ce:	689b      	ldr	r3, [r3, #8]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d0ed      	beq.n	88b0 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    88d4:	4629      	mov	r1, r5
    88d6:	4620      	mov	r0, r4
    88d8:	4798      	blx	r3
    88da:	e7e9      	b.n	88b0 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    88dc:	461a      	mov	r2, r3
    88de:	e7eb      	b.n	88b8 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    88e0:	2400      	movs	r4, #0
    88e2:	e7ee      	b.n	88c2 <bt_l2cap_encrypt_change+0x22>
}
    88e4:	bd38      	pop	{r3, r4, r5, pc}

000088e6 <l2cap_chan_update_credits>:
{
    88e6:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    88e8:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    88ea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    88ee:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    88f2:	d900      	bls.n	88f6 <l2cap_chan_update_credits+0x10>
    88f4:	bd70      	pop	{r4, r5, r6, pc}
    88f6:	460e      	mov	r6, r1
    88f8:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    88fa:	b2a4      	uxth	r4, r4
    88fc:	1b1b      	subs	r3, r3, r4
    88fe:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    8900:	4621      	mov	r1, r4
    8902:	f7ff fd07 	bl	8314 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    8906:	f7ff fc37 	bl	8178 <get_ident>
    890a:	2304      	movs	r3, #4
    890c:	4602      	mov	r2, r0
    890e:	2116      	movs	r1, #22
    8910:	4630      	mov	r0, r6
    8912:	f7ff fec9 	bl	86a8 <l2cap_create_le_sig_pdu>
    8916:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    8918:	2104      	movs	r1, #4
    891a:	3008      	adds	r0, #8
    891c:	f012 fdbe 	bl	1b49c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    8920:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8924:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    8926:	8044      	strh	r4, [r0, #2]
    8928:	2300      	movs	r3, #0
    892a:	4632      	mov	r2, r6
    892c:	2105      	movs	r1, #5
    892e:	6828      	ldr	r0, [r5, #0]
    8930:	f7ff ff4d 	bl	87ce <bt_l2cap_send_cb>
}
    8934:	e7de      	b.n	88f4 <l2cap_chan_update_credits+0xe>

00008936 <l2cap_chan_le_send>:
{
    8936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8938:	4604      	mov	r4, r0
    893a:	460d      	mov	r5, r1
    893c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    893e:	2100      	movs	r1, #0
    8940:	3068      	adds	r0, #104	; 0x68
    8942:	f021 f8bd 	bl	29ac0 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    8946:	b9b0      	cbnz	r0, 8976 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    8948:	4632      	mov	r2, r6
    894a:	4629      	mov	r1, r5
    894c:	4620      	mov	r0, r4
    894e:	f7ff febd 	bl	86cc <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    8952:	6827      	ldr	r7, [r4, #0]
    8954:	b157      	cbz	r7, 896c <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    8956:	8985      	ldrh	r5, [r0, #12]
    8958:	1bad      	subs	r5, r5, r6
    895a:	2300      	movs	r3, #0
    895c:	4602      	mov	r2, r0
    895e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    8962:	4638      	mov	r0, r7
    8964:	f7ff ff33 	bl	87ce <bt_l2cap_send_cb>
}
    8968:	4628      	mov	r0, r5
    896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    896c:	f012 fd4a 	bl	1b404 <net_buf_unref>
		return -ECONNRESET;
    8970:	f06f 0567 	mvn.w	r5, #103	; 0x67
    8974:	e7f8      	b.n	8968 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    8976:	f06f 050a 	mvn.w	r5, #10
    897a:	e7f5      	b.n	8968 <l2cap_chan_le_send+0x32>

0000897c <l2cap_chan_le_send_sdu>:
{
    897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8980:	b082      	sub	sp, #8
    8982:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    8984:	680d      	ldr	r5, [r1, #0]
    8986:	462b      	mov	r3, r5
	size_t bytes = 0;
    8988:	2200      	movs	r2, #0
    898a:	e002      	b.n	8992 <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    898c:	899c      	ldrh	r4, [r3, #12]
    898e:	4422      	add	r2, r4
		buf = buf->frags;
    8990:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8992:	2b00      	cmp	r3, #0
    8994:	d1fa      	bne.n	898c <l2cap_chan_le_send_sdu+0x10>
    8996:	9b01      	ldr	r3, [sp, #4]
    8998:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    899a:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    899e:	4294      	cmp	r4, r2
    89a0:	dc54      	bgt.n	8a4c <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    89a2:	89aa      	ldrh	r2, [r5, #12]
    89a4:	b912      	cbnz	r2, 89ac <l2cap_chan_le_send_sdu+0x30>
    89a6:	682a      	ldr	r2, [r5, #0]
    89a8:	b102      	cbz	r2, 89ac <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    89aa:	4615      	mov	r5, r2
    89ac:	4688      	mov	r8, r1
    89ae:	4607      	mov	r7, r0
	if (!sent) {
    89b0:	b10b      	cbz	r3, 89b6 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    89b2:	2600      	movs	r6, #0
    89b4:	e024      	b.n	8a00 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    89b6:	2202      	movs	r2, #2
    89b8:	4629      	mov	r1, r5
    89ba:	f7ff ffbc 	bl	8936 <l2cap_chan_le_send>
		if (ret < 0) {
    89be:	1e06      	subs	r6, r0, #0
    89c0:	db01      	blt.n	89c6 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    89c2:	9601      	str	r6, [sp, #4]
    89c4:	e7f5      	b.n	89b2 <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    89c6:	f116 0f0b 	cmn.w	r6, #11
    89ca:	d002      	beq.n	89d2 <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    89cc:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    89d0:	e038      	b.n	8a44 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    89d2:	f105 0010 	add.w	r0, r5, #16
    89d6:	89eb      	ldrh	r3, [r5, #14]
    89d8:	4418      	add	r0, r3
    89da:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    89dc:	2204      	movs	r2, #4
    89de:	eb0d 0102 	add.w	r1, sp, r2
    89e2:	f020 0003 	bic.w	r0, r0, #3
    89e6:	f7f7 fc6b 	bl	2c0 <memcpy>
    89ea:	e7ef      	b.n	89cc <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    89ec:	2200      	movs	r2, #0
    89ee:	4629      	mov	r1, r5
    89f0:	4638      	mov	r0, r7
    89f2:	f7ff ffa0 	bl	8936 <l2cap_chan_le_send>
		if (ret < 0) {
    89f6:	1e06      	subs	r6, r0, #0
    89f8:	db0e      	blt.n	8a18 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	4433      	add	r3, r6
    89fe:	9301      	str	r3, [sp, #4]
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	429c      	cmp	r4, r3
    8a04:	dd1b      	ble.n	8a3e <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    8a06:	89ab      	ldrh	r3, [r5, #12]
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d1ef      	bne.n	89ec <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    8a0c:	4629      	mov	r1, r5
    8a0e:	2000      	movs	r0, #0
    8a10:	f012 fd38 	bl	1b484 <net_buf_frag_del>
    8a14:	4605      	mov	r5, r0
    8a16:	e7e9      	b.n	89ec <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    8a18:	f116 0f0b 	cmn.w	r6, #11
    8a1c:	d002      	beq.n	8a24 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    8a1e:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    8a22:	e00f      	b.n	8a44 <l2cap_chan_le_send_sdu+0xc8>
    8a24:	f105 0010 	add.w	r0, r5, #16
    8a28:	89eb      	ldrh	r3, [r5, #14]
    8a2a:	4418      	add	r0, r3
    8a2c:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8a2e:	2204      	movs	r2, #4
    8a30:	eb0d 0102 	add.w	r1, sp, r2
    8a34:	f020 0003 	bic.w	r0, r0, #3
    8a38:	f7f7 fc42 	bl	2c0 <memcpy>
    8a3c:	e7ef      	b.n	8a1e <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    8a3e:	4628      	mov	r0, r5
    8a40:	f012 fce0 	bl	1b404 <net_buf_unref>
}
    8a44:	4630      	mov	r0, r6
    8a46:	b002      	add	sp, #8
    8a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    8a4c:	f06f 0679 	mvn.w	r6, #121	; 0x79
    8a50:	e7f8      	b.n	8a44 <l2cap_chan_le_send_sdu+0xc8>

00008a52 <l2cap_chan_le_send_resume>:
{
    8a52:	b510      	push	{r4, lr}
    8a54:	b082      	sub	sp, #8
    8a56:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    8a58:	4620      	mov	r0, r4
    8a5a:	f7ff fc91 	bl	8380 <l2cap_chan_le_get_tx_buf>
    8a5e:	9001      	str	r0, [sp, #4]
    8a60:	b180      	cbz	r0, 8a84 <l2cap_chan_le_send_resume+0x32>
    8a62:	f100 0310 	add.w	r3, r0, #16
    8a66:	89c2      	ldrh	r2, [r0, #14]
    8a68:	4413      	add	r3, r2
    8a6a:	3303      	adds	r3, #3
    8a6c:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    8a70:	681a      	ldr	r2, [r3, #0]
    8a72:	a901      	add	r1, sp, #4
    8a74:	4620      	mov	r0, r4
    8a76:	f7ff ff81 	bl	897c <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    8a7a:	2800      	cmp	r0, #0
    8a7c:	daec      	bge.n	8a58 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    8a7e:	f110 0f0b 	cmn.w	r0, #11
    8a82:	d001      	beq.n	8a88 <l2cap_chan_le_send_resume+0x36>
}
    8a84:	b002      	add	sp, #8
    8a86:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    8a88:	9b01      	ldr	r3, [sp, #4]
    8a8a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    8a8e:	e7f9      	b.n	8a84 <l2cap_chan_le_send_resume+0x32>

00008a90 <l2cap_send_reject>:
{
    8a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a94:	4680      	mov	r8, r0
    8a96:	4691      	mov	r9, r2
    8a98:	461e      	mov	r6, r3
    8a9a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8a9e:	1cbb      	adds	r3, r7, #2
    8aa0:	460a      	mov	r2, r1
    8aa2:	2101      	movs	r1, #1
    8aa4:	2000      	movs	r0, #0
    8aa6:	f7ff fdff 	bl	86a8 <l2cap_create_le_sig_pdu>
    8aaa:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    8aac:	f100 0508 	add.w	r5, r0, #8
    8ab0:	2102      	movs	r1, #2
    8ab2:	4628      	mov	r0, r5
    8ab4:	f012 fcf2 	bl	1b49c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    8ab8:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    8abc:	b126      	cbz	r6, 8ac8 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    8abe:	463a      	mov	r2, r7
    8ac0:	4631      	mov	r1, r6
    8ac2:	4628      	mov	r0, r5
    8ac4:	f012 fcf0 	bl	1b4a8 <net_buf_simple_add_mem>
    8ac8:	2300      	movs	r3, #0
    8aca:	4622      	mov	r2, r4
    8acc:	2105      	movs	r1, #5
    8ace:	4640      	mov	r0, r8
    8ad0:	f7ff fe7d 	bl	87ce <bt_l2cap_send_cb>
    8ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008ad8 <le_conn_param_update_req>:
{
    8ad8:	b570      	push	{r4, r5, r6, lr}
    8ada:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8adc:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    8ade:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    8ae0:	8990      	ldrh	r0, [r2, #12]
    8ae2:	2807      	cmp	r0, #7
    8ae4:	d908      	bls.n	8af8 <le_conn_param_update_req+0x20>
    8ae6:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8ae8:	78e2      	ldrb	r2, [r4, #3]
    8aea:	b13a      	cbz	r2, 8afc <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8aec:	2200      	movs	r2, #0
    8aee:	9200      	str	r2, [sp, #0]
    8af0:	4613      	mov	r3, r2
    8af2:	4620      	mov	r0, r4
    8af4:	f7ff ffcc 	bl	8a90 <l2cap_send_reject>
}
    8af8:	b004      	add	sp, #16
    8afa:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    8afc:	881a      	ldrh	r2, [r3, #0]
    8afe:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    8b02:	885a      	ldrh	r2, [r3, #2]
    8b04:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8b08:	889a      	ldrh	r2, [r3, #4]
    8b0a:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    8b0e:	88db      	ldrh	r3, [r3, #6]
    8b10:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8b14:	2302      	movs	r3, #2
    8b16:	460a      	mov	r2, r1
    8b18:	2113      	movs	r1, #19
    8b1a:	f7ff fdc5 	bl	86a8 <l2cap_create_le_sig_pdu>
    8b1e:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    8b20:	a902      	add	r1, sp, #8
    8b22:	4620      	mov	r0, r4
    8b24:	f7fe fcc2 	bl	74ac <le_param_req>
    8b28:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8b2a:	2102      	movs	r1, #2
    8b2c:	f106 0008 	add.w	r0, r6, #8
    8b30:	f012 fcb4 	bl	1b49c <net_buf_simple_add>
	if (accepted) {
    8b34:	b17d      	cbz	r5, 8b56 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    8b36:	2300      	movs	r3, #0
    8b38:	7003      	strb	r3, [r0, #0]
    8b3a:	7043      	strb	r3, [r0, #1]
    8b3c:	2300      	movs	r3, #0
    8b3e:	4632      	mov	r2, r6
    8b40:	2105      	movs	r1, #5
    8b42:	4620      	mov	r0, r4
    8b44:	f7ff fe43 	bl	87ce <bt_l2cap_send_cb>
	if (accepted) {
    8b48:	2d00      	cmp	r5, #0
    8b4a:	d0d5      	beq.n	8af8 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    8b4c:	a902      	add	r1, sp, #8
    8b4e:	4620      	mov	r0, r4
    8b50:	f7ff f976 	bl	7e40 <bt_conn_le_conn_update>
    8b54:	e7d0      	b.n	8af8 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    8b56:	2301      	movs	r3, #1
    8b58:	7003      	strb	r3, [r0, #0]
    8b5a:	2300      	movs	r3, #0
    8b5c:	7043      	strb	r3, [r0, #1]
    8b5e:	e7ed      	b.n	8b3c <le_conn_param_update_req+0x64>

00008b60 <le_disconn_req>:
{
    8b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b64:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8b66:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    8b68:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    8b6a:	8993      	ldrh	r3, [r2, #12]
    8b6c:	2b03      	cmp	r3, #3
    8b6e:	d802      	bhi.n	8b76 <le_disconn_req+0x16>
}
    8b70:	b004      	add	sp, #16
    8b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b76:	4614      	mov	r4, r2
    8b78:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    8b7a:	8879      	ldrh	r1, [r7, #2]
    8b7c:	4630      	mov	r0, r6
    8b7e:	f7ff fb5f 	bl	8240 <l2cap_remove_tx_cid>
	if (!chan) {
    8b82:	4680      	mov	r8, r0
    8b84:	b1d0      	cbz	r0, 8bbc <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    8b86:	2304      	movs	r3, #4
    8b88:	462a      	mov	r2, r5
    8b8a:	2107      	movs	r1, #7
    8b8c:	4620      	mov	r0, r4
    8b8e:	f7ff fd8b 	bl	86a8 <l2cap_create_le_sig_pdu>
    8b92:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8b94:	2104      	movs	r1, #4
    8b96:	3008      	adds	r0, #8
    8b98:	f012 fc80 	bl	1b49c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    8b9c:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    8ba0:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    8ba2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    8ba6:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    8ba8:	4640      	mov	r0, r8
    8baa:	f7ff fcb0 	bl	850e <bt_l2cap_chan_del>
    8bae:	2300      	movs	r3, #0
    8bb0:	4622      	mov	r2, r4
    8bb2:	2105      	movs	r1, #5
    8bb4:	4630      	mov	r0, r6
    8bb6:	f7ff fe0a 	bl	87ce <bt_l2cap_send_cb>
    8bba:	e7d9      	b.n	8b70 <le_disconn_req+0x10>
		data.scid = req->scid;
    8bbc:	887b      	ldrh	r3, [r7, #2]
    8bbe:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    8bc2:	883b      	ldrh	r3, [r7, #0]
    8bc4:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    8bc8:	2304      	movs	r3, #4
    8bca:	9300      	str	r3, [sp, #0]
    8bcc:	ab03      	add	r3, sp, #12
    8bce:	2202      	movs	r2, #2
    8bd0:	4629      	mov	r1, r5
    8bd2:	4630      	mov	r0, r6
    8bd4:	f7ff ff5c 	bl	8a90 <l2cap_send_reject>
    8bd8:	e7ca      	b.n	8b70 <le_disconn_req+0x10>

00008bda <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    8bda:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8bdc:	b108      	cbz	r0, 8be2 <bt_l2cap_le_lookup_tx_cid+0x8>
    8bde:	3808      	subs	r0, #8
    8be0:	e006      	b.n	8bf0 <bt_l2cap_le_lookup_tx_cid+0x16>
    8be2:	2000      	movs	r0, #0
    8be4:	e004      	b.n	8bf0 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8be6:	461a      	mov	r2, r3
    8be8:	e00b      	b.n	8c02 <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    8bea:	6883      	ldr	r3, [r0, #8]
    8bec:	f1a3 0008 	sub.w	r0, r3, #8
    8bf0:	b168      	cbz	r0, 8c0e <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    8bf2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    8bf6:	428b      	cmp	r3, r1
    8bf8:	d009      	beq.n	8c0e <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8bfa:	f110 0308 	adds.w	r3, r0, #8
    8bfe:	d0f2      	beq.n	8be6 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    8c00:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8c02:	b112      	cbz	r2, 8c0a <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c04:	2b00      	cmp	r3, #0
    8c06:	d1f0      	bne.n	8bea <bt_l2cap_le_lookup_tx_cid+0x10>
    8c08:	e7f0      	b.n	8bec <bt_l2cap_le_lookup_tx_cid+0x12>
    8c0a:	2000      	movs	r0, #0
    8c0c:	e7f0      	b.n	8bf0 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    8c0e:	4770      	bx	lr

00008c10 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    8c10:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8c12:	b108      	cbz	r0, 8c18 <bt_l2cap_le_lookup_rx_cid+0x8>
    8c14:	3808      	subs	r0, #8
    8c16:	e006      	b.n	8c26 <bt_l2cap_le_lookup_rx_cid+0x16>
    8c18:	2000      	movs	r0, #0
    8c1a:	e004      	b.n	8c26 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c1c:	461a      	mov	r2, r3
    8c1e:	e00b      	b.n	8c38 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    8c20:	6883      	ldr	r3, [r0, #8]
    8c22:	f1a3 0008 	sub.w	r0, r3, #8
    8c26:	b168      	cbz	r0, 8c44 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    8c28:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8c2c:	428b      	cmp	r3, r1
    8c2e:	d009      	beq.n	8c44 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c30:	f110 0308 	adds.w	r3, r0, #8
    8c34:	d0f2      	beq.n	8c1c <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    8c36:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8c38:	b112      	cbz	r2, 8c40 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d1f0      	bne.n	8c20 <bt_l2cap_le_lookup_rx_cid+0x10>
    8c3e:	e7f0      	b.n	8c22 <bt_l2cap_le_lookup_rx_cid+0x12>
    8c40:	2000      	movs	r0, #0
    8c42:	e7f0      	b.n	8c26 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    8c44:	4770      	bx	lr

00008c46 <l2cap_chan_alloc_cid>:
{
    8c46:	b570      	push	{r4, r5, r6, lr}
    8c48:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    8c4a:	460d      	mov	r5, r1
    8c4c:	b1a1      	cbz	r1, 8c78 <l2cap_chan_alloc_cid+0x32>
    8c4e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    8c52:	b9ab      	cbnz	r3, 8c80 <l2cap_chan_alloc_cid+0x3a>
    8c54:	2440      	movs	r4, #64	; 0x40
    8c56:	e001      	b.n	8c5c <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    8c58:	3401      	adds	r4, #1
    8c5a:	b2a4      	uxth	r4, r4
    8c5c:	2c7f      	cmp	r4, #127	; 0x7f
    8c5e:	d80d      	bhi.n	8c7c <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    8c60:	2d00      	cmp	r5, #0
    8c62:	d0f9      	beq.n	8c58 <l2cap_chan_alloc_cid+0x12>
    8c64:	4621      	mov	r1, r4
    8c66:	4630      	mov	r0, r6
    8c68:	f7ff ffd2 	bl	8c10 <bt_l2cap_le_lookup_rx_cid>
    8c6c:	2800      	cmp	r0, #0
    8c6e:	d1f3      	bne.n	8c58 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    8c70:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    8c74:	4628      	mov	r0, r5
    8c76:	bd70      	pop	{r4, r5, r6, pc}
    8c78:	2440      	movs	r4, #64	; 0x40
    8c7a:	e7ef      	b.n	8c5c <l2cap_chan_alloc_cid+0x16>
	return NULL;
    8c7c:	2000      	movs	r0, #0
    8c7e:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    8c80:	4608      	mov	r0, r1
}
    8c82:	bd70      	pop	{r4, r5, r6, pc}

00008c84 <l2cap_chan_add>:
{
    8c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c86:	4606      	mov	r6, r0
    8c88:	460c      	mov	r4, r1
    8c8a:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    8c8c:	f7ff ffdb 	bl	8c46 <l2cap_chan_alloc_cid>
	if (!ch) {
    8c90:	b1c0      	cbz	r0, 8cc4 <l2cap_chan_add+0x40>
    8c92:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8c94:	490c      	ldr	r1, [pc, #48]	; (8cc8 <l2cap_chan_add+0x44>)
    8c96:	f104 0010 	add.w	r0, r4, #16
    8c9a:	f021 fccf 	bl	2a63c <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    8c9e:	463a      	mov	r2, r7
    8ca0:	4621      	mov	r1, r4
    8ca2:	4630      	mov	r0, r6
    8ca4:	f7ff fcc2 	bl	862c <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8ca8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8cac:	3b40      	subs	r3, #64	; 0x40
    8cae:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    8cb0:	2b3f      	cmp	r3, #63	; 0x3f
    8cb2:	d901      	bls.n	8cb8 <l2cap_chan_add+0x34>
	return true;
    8cb4:	2001      	movs	r0, #1
}
    8cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    8cb8:	2101      	movs	r1, #1
    8cba:	4620      	mov	r0, r4
    8cbc:	f7ff fc24 	bl	8508 <bt_l2cap_chan_set_state>
	return true;
    8cc0:	2001      	movs	r0, #1
    8cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    8cc4:	2000      	movs	r0, #0
    8cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cc8:	00008539 	.word	0x00008539

00008ccc <bt_l2cap_connected>:
{
    8ccc:	b530      	push	{r4, r5, lr}
    8cce:	b083      	sub	sp, #12
    8cd0:	4605      	mov	r5, r0
	return list->head;
    8cd2:	4b18      	ldr	r3, [pc, #96]	; (8d34 <bt_l2cap_connected+0x68>)
    8cd4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8cd6:	b10c      	cbz	r4, 8cdc <bt_l2cap_connected+0x10>
    8cd8:	3c08      	subs	r4, #8
    8cda:	e00a      	b.n	8cf2 <bt_l2cap_connected+0x26>
    8cdc:	2400      	movs	r4, #0
    8cde:	e008      	b.n	8cf2 <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8ce0:	f114 0308 	adds.w	r3, r4, #8
    8ce4:	d01f      	beq.n	8d26 <bt_l2cap_connected+0x5a>
	return node->next;
    8ce6:	68a2      	ldr	r2, [r4, #8]
    8ce8:	b1fa      	cbz	r2, 8d2a <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8cea:	b103      	cbz	r3, 8cee <bt_l2cap_connected+0x22>
	return node->next;
    8cec:	68a3      	ldr	r3, [r4, #8]
    8cee:	f1a3 0408 	sub.w	r4, r3, #8
    8cf2:	b1e4      	cbz	r4, 8d2e <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    8cf4:	6863      	ldr	r3, [r4, #4]
    8cf6:	a901      	add	r1, sp, #4
    8cf8:	4628      	mov	r0, r5
    8cfa:	4798      	blx	r3
    8cfc:	2800      	cmp	r0, #0
    8cfe:	dbef      	blt.n	8ce0 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    8d00:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    8d02:	8823      	ldrh	r3, [r4, #0]
    8d04:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    8d08:	8823      	ldrh	r3, [r4, #0]
    8d0a:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    8d0e:	2200      	movs	r2, #0
    8d10:	4628      	mov	r0, r5
    8d12:	f7ff ffb7 	bl	8c84 <l2cap_chan_add>
    8d16:	b150      	cbz	r0, 8d2e <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    8d18:	9801      	ldr	r0, [sp, #4]
    8d1a:	6843      	ldr	r3, [r0, #4]
    8d1c:	681b      	ldr	r3, [r3, #0]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d0de      	beq.n	8ce0 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    8d22:	4798      	blx	r3
    8d24:	e7dc      	b.n	8ce0 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8d26:	461a      	mov	r2, r3
    8d28:	e7de      	b.n	8ce8 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8d2a:	2400      	movs	r4, #0
    8d2c:	e7e1      	b.n	8cf2 <bt_l2cap_connected+0x26>
}
    8d2e:	b003      	add	sp, #12
    8d30:	bd30      	pop	{r4, r5, pc}
    8d32:	bf00      	nop
    8d34:	20000b9c 	.word	0x20000b9c

00008d38 <le_conn_req>:
{
    8d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d3c:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8d3e:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    8d40:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    8d42:	8990      	ldrh	r0, [r2, #12]
    8d44:	2809      	cmp	r0, #9
    8d46:	d912      	bls.n	8d6e <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    8d48:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    8d4c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    8d50:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    8d54:	889e      	ldrh	r6, [r3, #4]
    8d56:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    8d58:	88df      	ldrh	r7, [r3, #6]
    8d5a:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    8d5e:	891d      	ldrh	r5, [r3, #8]
    8d60:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    8d64:	2816      	cmp	r0, #22
    8d66:	d902      	bls.n	8d6e <le_conn_req+0x36>
    8d68:	f1be 0f16 	cmp.w	lr, #22
    8d6c:	d802      	bhi.n	8d74 <le_conn_req+0x3c>
}
    8d6e:	b005      	add	sp, #20
    8d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d74:	4610      	mov	r0, r2
    8d76:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8d78:	230a      	movs	r3, #10
    8d7a:	2115      	movs	r1, #21
    8d7c:	f7ff fc94 	bl	86a8 <l2cap_create_le_sig_pdu>
    8d80:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    8d82:	210a      	movs	r1, #10
    8d84:	3008      	adds	r0, #8
    8d86:	f012 fb89 	bl	1b49c <net_buf_simple_add>
    8d8a:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    8d8c:	220a      	movs	r2, #10
    8d8e:	2100      	movs	r1, #0
    8d90:	f021 fe56 	bl	2aa40 <memset>
	server = l2cap_server_lookup_psm(psm);
    8d94:	4648      	mov	r0, r9
    8d96:	f7ff fa35 	bl	8204 <l2cap_server_lookup_psm>
	if (!server) {
    8d9a:	4681      	mov	r9, r0
    8d9c:	b168      	cbz	r0, 8dba <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    8d9e:	7a22      	ldrb	r2, [r4, #8]
    8da0:	7883      	ldrb	r3, [r0, #2]
    8da2:	429a      	cmp	r2, r3
    8da4:	d20d      	bcs.n	8dc2 <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    8da6:	2305      	movs	r3, #5
    8da8:	9a01      	ldr	r2, [sp, #4]
    8daa:	8113      	strh	r3, [r2, #8]
    8dac:	2300      	movs	r3, #0
    8dae:	9a00      	ldr	r2, [sp, #0]
    8db0:	2105      	movs	r1, #5
    8db2:	4620      	mov	r0, r4
    8db4:	f7ff fd0b 	bl	87ce <bt_l2cap_send_cb>
    8db8:	e7d9      	b.n	8d6e <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    8dba:	2302      	movs	r3, #2
    8dbc:	9a01      	ldr	r2, [sp, #4]
    8dbe:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8dc0:	e7f4      	b.n	8dac <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    8dc2:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    8dc6:	b29b      	uxth	r3, r3
    8dc8:	2b3f      	cmp	r3, #63	; 0x3f
    8dca:	d903      	bls.n	8dd4 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    8dcc:	2309      	movs	r3, #9
    8dce:	9a01      	ldr	r2, [sp, #4]
    8dd0:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8dd2:	e7eb      	b.n	8dac <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8dd4:	4651      	mov	r1, sl
    8dd6:	4620      	mov	r0, r4
    8dd8:	f7ff feff 	bl	8bda <bt_l2cap_le_lookup_tx_cid>
    8ddc:	9003      	str	r0, [sp, #12]
	if (chan) {
    8dde:	b118      	cbz	r0, 8de8 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    8de0:	230a      	movs	r3, #10
    8de2:	9a01      	ldr	r2, [sp, #4]
    8de4:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8de6:	e7e1      	b.n	8dac <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    8de8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8dec:	a903      	add	r1, sp, #12
    8dee:	4620      	mov	r0, r4
    8df0:	4798      	blx	r3
    8df2:	2800      	cmp	r0, #0
    8df4:	da03      	bge.n	8dfe <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    8df6:	2304      	movs	r3, #4
    8df8:	9a01      	ldr	r2, [sp, #4]
    8dfa:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8dfc:	e7d6      	b.n	8dac <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    8dfe:	9903      	ldr	r1, [sp, #12]
    8e00:	f899 3002 	ldrb.w	r3, [r9, #2]
    8e04:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8e08:	4a1e      	ldr	r2, [pc, #120]	; (8e84 <le_conn_req+0x14c>)
    8e0a:	4620      	mov	r0, r4
    8e0c:	f7ff ff3a 	bl	8c84 <l2cap_chan_add>
    8e10:	b918      	cbnz	r0, 8e1a <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    8e12:	2304      	movs	r3, #4
    8e14:	9a01      	ldr	r2, [sp, #4]
    8e16:	8113      	strh	r3, [r2, #8]
    8e18:	e7c8      	b.n	8dac <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    8e1a:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    8e1e:	4650      	mov	r0, sl
    8e20:	f7ff fabd 	bl	839e <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    8e24:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    8e28:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    8e2c:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    8e30:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    8e34:	4659      	mov	r1, fp
    8e36:	4650      	mov	r0, sl
    8e38:	f7ff fa79 	bl	832e <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    8e3c:	4650      	mov	r0, sl
    8e3e:	f7ff fac1 	bl	83c4 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    8e42:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    8e46:	4650      	mov	r0, sl
    8e48:	f7ff fa64 	bl	8314 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    8e4c:	9803      	ldr	r0, [sp, #12]
    8e4e:	f8b9 3000 	ldrh.w	r3, [r9]
    8e52:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    8e54:	2103      	movs	r1, #3
    8e56:	f7ff fb57 	bl	8508 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    8e5a:	9803      	ldr	r0, [sp, #12]
    8e5c:	6843      	ldr	r3, [r0, #4]
    8e5e:	681b      	ldr	r3, [r3, #0]
    8e60:	b103      	cbz	r3, 8e64 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    8e62:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    8e64:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    8e68:	9901      	ldr	r1, [sp, #4]
    8e6a:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    8e6c:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    8e70:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    8e72:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    8e76:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8e78:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    8e7c:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    8e7e:	2300      	movs	r3, #0
    8e80:	810b      	strh	r3, [r1, #8]
    8e82:	e793      	b.n	8dac <le_conn_req+0x74>
    8e84:	00008349 	.word	0x00008349

00008e88 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    8e88:	1e53      	subs	r3, r2, #1
    8e8a:	b29b      	uxth	r3, r3
    8e8c:	2bfe      	cmp	r3, #254	; 0xfe
    8e8e:	d814      	bhi.n	8eba <l2cap_le_connect+0x32>
{
    8e90:	b570      	push	{r4, r5, r6, lr}
    8e92:	4615      	mov	r5, r2
    8e94:	460c      	mov	r4, r1
    8e96:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    8e98:	4608      	mov	r0, r1
    8e9a:	f7ff fa80 	bl	839e <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    8e9e:	4620      	mov	r0, r4
    8ea0:	f7ff fa90 	bl	83c4 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    8ea4:	4a08      	ldr	r2, [pc, #32]	; (8ec8 <l2cap_le_connect+0x40>)
    8ea6:	4621      	mov	r1, r4
    8ea8:	4630      	mov	r0, r6
    8eaa:	f7ff feeb 	bl	8c84 <l2cap_chan_add>
    8eae:	b138      	cbz	r0, 8ec0 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    8eb0:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    8eb2:	4620      	mov	r0, r4
    8eb4:	f7ff fcb6 	bl	8824 <l2cap_le_conn_req>
    8eb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    8eba:	f06f 0015 	mvn.w	r0, #21
    8ebe:	4770      	bx	lr
		return -ENOMEM;
    8ec0:	f06f 000b 	mvn.w	r0, #11
}
    8ec4:	bd70      	pop	{r4, r5, r6, pc}
    8ec6:	bf00      	nop
    8ec8:	00008349 	.word	0x00008349

00008ecc <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    8ecc:	8802      	ldrh	r2, [r0, #0]
    8ece:	1e53      	subs	r3, r2, #1
    8ed0:	b29b      	uxth	r3, r3
    8ed2:	2bfe      	cmp	r3, #254	; 0xfe
    8ed4:	d81d      	bhi.n	8f12 <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    8ed6:	6843      	ldr	r3, [r0, #4]
    8ed8:	b1f3      	cbz	r3, 8f18 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    8eda:	7883      	ldrb	r3, [r0, #2]
    8edc:	2b04      	cmp	r3, #4
    8ede:	d81e      	bhi.n	8f1e <bt_l2cap_server_register+0x52>
{
    8ee0:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    8ee2:	b90b      	cbnz	r3, 8ee8 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    8ee4:	2301      	movs	r3, #1
    8ee6:	7083      	strb	r3, [r0, #2]
    8ee8:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    8eea:	4610      	mov	r0, r2
    8eec:	f7ff f98a 	bl	8204 <l2cap_server_lookup_psm>
    8ef0:	b9c0      	cbnz	r0, 8f24 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    8ef2:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    8ef6:	2200      	movs	r2, #0
    8ef8:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    8efa:	4a0c      	ldr	r2, [pc, #48]	; (8f2c <bt_l2cap_server_register+0x60>)
    8efc:	6852      	ldr	r2, [r2, #4]
    8efe:	b122      	cbz	r2, 8f0a <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    8f00:	6013      	str	r3, [r2, #0]
		list->tail = node;
    8f02:	4a0a      	ldr	r2, [pc, #40]	; (8f2c <bt_l2cap_server_register+0x60>)
    8f04:	6053      	str	r3, [r2, #4]
	return 0;
    8f06:	2000      	movs	r0, #0
    8f08:	bd10      	pop	{r4, pc}
		list->tail = node;
    8f0a:	4a08      	ldr	r2, [pc, #32]	; (8f2c <bt_l2cap_server_register+0x60>)
    8f0c:	6053      	str	r3, [r2, #4]
		list->head = node;
    8f0e:	6013      	str	r3, [r2, #0]
    8f10:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8f12:	f06f 0015 	mvn.w	r0, #21
    8f16:	4770      	bx	lr
    8f18:	f06f 0015 	mvn.w	r0, #21
    8f1c:	4770      	bx	lr
		return -EINVAL;
    8f1e:	f06f 0015 	mvn.w	r0, #21
    8f22:	4770      	bx	lr
		return -EADDRINUSE;
    8f24:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    8f28:	bd10      	pop	{r4, pc}
    8f2a:	bf00      	nop
    8f2c:	20000ba4 	.word	0x20000ba4

00008f30 <bt_l2cap_update_conn_param>:
{
    8f30:	b570      	push	{r4, r5, r6, lr}
    8f32:	4606      	mov	r6, r0
    8f34:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8f36:	f7ff f91f 	bl	8178 <get_ident>
    8f3a:	2308      	movs	r3, #8
    8f3c:	4602      	mov	r2, r0
    8f3e:	2112      	movs	r1, #18
    8f40:	2000      	movs	r0, #0
    8f42:	f7ff fbb1 	bl	86a8 <l2cap_create_le_sig_pdu>
    8f46:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    8f48:	2108      	movs	r1, #8
    8f4a:	4408      	add	r0, r1
    8f4c:	f012 faa6 	bl	1b49c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8f50:	8823      	ldrh	r3, [r4, #0]
    8f52:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8f54:	8863      	ldrh	r3, [r4, #2]
    8f56:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8f58:	88a3      	ldrh	r3, [r4, #4]
    8f5a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8f5c:	88e3      	ldrh	r3, [r4, #6]
    8f5e:	80c3      	strh	r3, [r0, #6]
    8f60:	2300      	movs	r3, #0
    8f62:	462a      	mov	r2, r5
    8f64:	2105      	movs	r1, #5
    8f66:	4630      	mov	r0, r6
    8f68:	f7ff fc31 	bl	87ce <bt_l2cap_send_cb>
}
    8f6c:	2000      	movs	r0, #0
    8f6e:	bd70      	pop	{r4, r5, r6, pc}

00008f70 <bt_l2cap_init>:
{
    8f70:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    8f72:	4802      	ldr	r0, [pc, #8]	; (8f7c <bt_l2cap_init+0xc>)
    8f74:	f7ff fa84 	bl	8480 <bt_l2cap_le_fixed_chan_register>
    8f78:	bd08      	pop	{r3, pc}
    8f7a:	bf00      	nop
    8f7c:	2000bf50 	.word	0x2000bf50

00008f80 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    8f80:	b188      	cbz	r0, 8fa6 <bt_l2cap_chan_connect+0x26>
{
    8f82:	b508      	push	{r3, lr}
    8f84:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    8f86:	7b00      	ldrb	r0, [r0, #12]
    8f88:	2803      	cmp	r0, #3
    8f8a:	d10f      	bne.n	8fac <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    8f8c:	b189      	cbz	r1, 8fb2 <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    8f8e:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    8f92:	2804      	cmp	r0, #4
    8f94:	d810      	bhi.n	8fb8 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    8f96:	b910      	cbnz	r0, 8f9e <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    8f98:	2001      	movs	r0, #1
    8f9a:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    8f9e:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    8fa0:	f7ff ff72 	bl	8e88 <l2cap_le_connect>
    8fa4:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    8fa6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8faa:	4770      	bx	lr
    8fac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8fb0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8fb2:	f06f 0015 	mvn.w	r0, #21
    8fb6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8fb8:	f06f 0015 	mvn.w	r0, #21
}
    8fbc:	bd08      	pop	{r3, pc}

00008fbe <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    8fbe:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    8fc0:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    8fc2:	b30b      	cbz	r3, 9008 <bt_l2cap_chan_disconnect+0x4a>
    8fc4:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    8fc6:	f7ff f8d7 	bl	8178 <get_ident>
    8fca:	4602      	mov	r2, r0
    8fcc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    8fd0:	2304      	movs	r3, #4
    8fd2:	2106      	movs	r1, #6
    8fd4:	2000      	movs	r0, #0
    8fd6:	f7ff fb67 	bl	86a8 <l2cap_create_le_sig_pdu>
    8fda:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    8fdc:	2104      	movs	r1, #4
    8fde:	3008      	adds	r0, #8
    8fe0:	f012 fa5c 	bl	1b49c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    8fe4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8fe8:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8fea:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    8fee:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    8ff0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    8ff4:	4629      	mov	r1, r5
    8ff6:	4620      	mov	r0, r4
    8ff8:	f7ff fbfe 	bl	87f8 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    8ffc:	2104      	movs	r1, #4
    8ffe:	4620      	mov	r0, r4
    9000:	f7ff fa82 	bl	8508 <bt_l2cap_chan_set_state>

	return 0;
    9004:	2000      	movs	r0, #0
    9006:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    9008:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    900c:	bd38      	pop	{r3, r4, r5, pc}

0000900e <l2cap_chan_le_recv_sdu>:
{
    900e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9012:	4681      	mov	r9, r0
    9014:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    9016:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    901a:	4603      	mov	r3, r0
	size_t bytes = 0;
    901c:	2200      	movs	r2, #0
    901e:	e002      	b.n	9026 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    9020:	8999      	ldrh	r1, [r3, #12]
    9022:	440a      	add	r2, r1
		buf = buf->frags;
    9024:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    9026:	2b00      	cmp	r3, #0
    9028:	d1fa      	bne.n	9020 <l2cap_chan_le_recv_sdu+0x12>
    902a:	89b3      	ldrh	r3, [r6, #12]
    902c:	441a      	add	r2, r3
    902e:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    9032:	429a      	cmp	r2, r3
    9034:	d803      	bhi.n	903e <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    9036:	f012 fa05 	bl	1b444 <net_buf_frag_last>
    903a:	4680      	mov	r8, r0
	while (buf->len) {
    903c:	e017      	b.n	906e <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    903e:	4648      	mov	r0, r9
    9040:	f7ff ffbd 	bl	8fbe <bt_l2cap_chan_disconnect>
		return;
    9044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    9048:	f108 0708 	add.w	r7, r8, #8
    904c:	4638      	mov	r0, r7
    904e:	f012 fa8e 	bl	1b56e <net_buf_simple_tailroom>
    9052:	89b4      	ldrh	r4, [r6, #12]
    9054:	42a0      	cmp	r0, r4
    9056:	d31d      	bcc.n	9094 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    9058:	4635      	mov	r5, r6
    905a:	4622      	mov	r2, r4
    905c:	f855 1f08 	ldr.w	r1, [r5, #8]!
    9060:	4638      	mov	r0, r7
    9062:	f012 fa21 	bl	1b4a8 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    9066:	4621      	mov	r1, r4
    9068:	4628      	mov	r0, r5
    906a:	f012 fa64 	bl	1b536 <net_buf_simple_pull>
	while (buf->len) {
    906e:	89b3      	ldrh	r3, [r6, #12]
    9070:	b1ab      	cbz	r3, 909e <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    9072:	f108 0008 	add.w	r0, r8, #8
    9076:	f012 fa7a 	bl	1b56e <net_buf_simple_tailroom>
    907a:	2800      	cmp	r0, #0
    907c:	d1e4      	bne.n	9048 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    907e:	4648      	mov	r0, r9
    9080:	f7ff f93a 	bl	82f8 <l2cap_alloc_frag>
			if (!frag) {
    9084:	4680      	mov	r8, r0
    9086:	2800      	cmp	r0, #0
    9088:	d1de      	bne.n	9048 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    908a:	4648      	mov	r0, r9
    908c:	f7ff ff97 	bl	8fbe <bt_l2cap_chan_disconnect>
				return;
    9090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    9094:	4638      	mov	r0, r7
    9096:	f012 fa6a 	bl	1b56e <net_buf_simple_tailroom>
    909a:	b284      	uxth	r4, r0
    909c:	e7dc      	b.n	9058 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    909e:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    90a2:	460b      	mov	r3, r1
	size_t bytes = 0;
    90a4:	2200      	movs	r2, #0
    90a6:	e002      	b.n	90ae <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    90a8:	8998      	ldrh	r0, [r3, #12]
    90aa:	4402      	add	r2, r0
		buf = buf->frags;
    90ac:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    90ae:	2b00      	cmp	r3, #0
    90b0:	d1fa      	bne.n	90a8 <l2cap_chan_le_recv_sdu+0x9a>
    90b2:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    90b6:	4293      	cmp	r3, r2
    90b8:	d005      	beq.n	90c6 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    90ba:	4631      	mov	r1, r6
    90bc:	4648      	mov	r0, r9
    90be:	f7ff fc12 	bl	88e6 <l2cap_chan_update_credits>
    90c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    90c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    90ca:	691b      	ldr	r3, [r3, #16]
    90cc:	4648      	mov	r0, r9
    90ce:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    90d0:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    90d4:	f012 f996 	bl	1b404 <net_buf_unref>
		chan->_sdu = NULL;
    90d8:	2300      	movs	r3, #0
    90da:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    90de:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    90e2:	e7ea      	b.n	90ba <l2cap_chan_le_recv_sdu+0xac>

000090e4 <l2cap_chan_le_recv>:
{
    90e4:	b570      	push	{r4, r5, r6, lr}
    90e6:	4604      	mov	r4, r0
    90e8:	460d      	mov	r5, r1
    90ea:	2100      	movs	r1, #0
    90ec:	3048      	adds	r0, #72	; 0x48
    90ee:	f020 fce7 	bl	29ac0 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    90f2:	b938      	cbnz	r0, 9104 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    90f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    90f8:	b143      	cbz	r3, 910c <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    90fa:	4629      	mov	r1, r5
    90fc:	4620      	mov	r0, r4
    90fe:	f7ff ff86 	bl	900e <l2cap_chan_le_recv_sdu>
		return;
    9102:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    9104:	4620      	mov	r0, r4
    9106:	f7ff ff5a 	bl	8fbe <bt_l2cap_chan_disconnect>
		return;
    910a:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    910c:	f105 0008 	add.w	r0, r5, #8
    9110:	f012 fa21 	bl	1b556 <net_buf_simple_pull_le16>
    9114:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    9116:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    911a:	4298      	cmp	r0, r3
    911c:	d80e      	bhi.n	913c <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    911e:	6862      	ldr	r2, [r4, #4]
    9120:	68d3      	ldr	r3, [r2, #12]
    9122:	b19b      	cbz	r3, 914c <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    9124:	4620      	mov	r0, r4
    9126:	4798      	blx	r3
    9128:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    912c:	b150      	cbz	r0, 9144 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    912e:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    9132:	4629      	mov	r1, r5
    9134:	4620      	mov	r0, r4
    9136:	f7ff ff6a 	bl	900e <l2cap_chan_le_recv_sdu>
		return;
    913a:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    913c:	4620      	mov	r0, r4
    913e:	f7ff ff3e 	bl	8fbe <bt_l2cap_chan_disconnect>
		return;
    9142:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    9144:	4620      	mov	r0, r4
    9146:	f7ff ff3a 	bl	8fbe <bt_l2cap_chan_disconnect>
			return;
    914a:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    914c:	6913      	ldr	r3, [r2, #16]
    914e:	4629      	mov	r1, r5
    9150:	4620      	mov	r0, r4
    9152:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    9154:	4629      	mov	r1, r5
    9156:	4620      	mov	r0, r4
    9158:	f7ff fbc5 	bl	88e6 <l2cap_chan_update_credits>
    915c:	bd70      	pop	{r4, r5, r6, pc}

0000915e <l2cap_chan_recv>:
{
    915e:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    9160:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    9164:	3b40      	subs	r3, #64	; 0x40
    9166:	b29b      	uxth	r3, r3
    9168:	2b3f      	cmp	r3, #63	; 0x3f
    916a:	d903      	bls.n	9174 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    916c:	6843      	ldr	r3, [r0, #4]
    916e:	691b      	ldr	r3, [r3, #16]
    9170:	4798      	blx	r3
    9172:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    9174:	f7ff ffb6 	bl	90e4 <l2cap_chan_le_recv>
		return;
    9178:	bd08      	pop	{r3, pc}

0000917a <bt_l2cap_recv>:
{
    917a:	b570      	push	{r4, r5, r6, lr}
    917c:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    917e:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9180:	898b      	ldrh	r3, [r1, #12]
    9182:	2b03      	cmp	r3, #3
    9184:	d912      	bls.n	91ac <bt_l2cap_recv+0x32>
    9186:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    9188:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    918a:	2104      	movs	r1, #4
    918c:	f104 0008 	add.w	r0, r4, #8
    9190:	f012 f9d1 	bl	1b536 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    9194:	4631      	mov	r1, r6
    9196:	4628      	mov	r0, r5
    9198:	f7ff fd3a 	bl	8c10 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    919c:	b150      	cbz	r0, 91b4 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    919e:	4621      	mov	r1, r4
    91a0:	f7ff ffdd 	bl	915e <l2cap_chan_recv>
	net_buf_unref(buf);
    91a4:	4620      	mov	r0, r4
    91a6:	f012 f92d 	bl	1b404 <net_buf_unref>
    91aa:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    91ac:	4608      	mov	r0, r1
    91ae:	f012 f929 	bl	1b404 <net_buf_unref>
		return;
    91b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    91b4:	4620      	mov	r0, r4
    91b6:	f012 f925 	bl	1b404 <net_buf_unref>
		return;
    91ba:	bd70      	pop	{r4, r5, r6, pc}

000091bc <le_credits>:
{
    91bc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    91be:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    91c0:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    91c2:	8993      	ldrh	r3, [r2, #12]
    91c4:	2b03      	cmp	r3, #3
    91c6:	d800      	bhi.n	91ca <le_credits+0xe>
    91c8:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    91ca:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    91cc:	8809      	ldrh	r1, [r1, #0]
    91ce:	f7ff fd04 	bl	8bda <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    91d2:	4604      	mov	r4, r0
    91d4:	2800      	cmp	r0, #0
    91d6:	d0f7      	beq.n	91c8 <le_credits+0xc>
    91d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    91da:	442b      	add	r3, r5
    91dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    91e0:	d206      	bcs.n	91f0 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    91e2:	4629      	mov	r1, r5
    91e4:	f7ff f8a3 	bl	832e <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    91e8:	4620      	mov	r0, r4
    91ea:	f7ff fc32 	bl	8a52 <l2cap_chan_le_send_resume>
    91ee:	e7eb      	b.n	91c8 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    91f0:	f7ff fee5 	bl	8fbe <bt_l2cap_chan_disconnect>
		return;
    91f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000091f8 <l2cap_recv>:
{
    91f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    91fa:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    91fc:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    91fe:	898b      	ldrh	r3, [r1, #12]
    9200:	2b03      	cmp	r3, #3
    9202:	d801      	bhi.n	9208 <l2cap_recv+0x10>
}
    9204:	b003      	add	sp, #12
    9206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9208:	460c      	mov	r4, r1
    920a:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    920c:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    920e:	2104      	movs	r1, #4
    9210:	f104 0008 	add.w	r0, r4, #8
    9214:	f012 f98f 	bl	1b536 <net_buf_simple_pull>
	if (buf->len != len) {
    9218:	89a3      	ldrh	r3, [r4, #12]
    921a:	429f      	cmp	r7, r3
    921c:	d1f2      	bne.n	9204 <l2cap_recv+0xc>
	if (!hdr->ident) {
    921e:	7871      	ldrb	r1, [r6, #1]
    9220:	2900      	cmp	r1, #0
    9222:	d0ef      	beq.n	9204 <l2cap_recv+0xc>
	switch (hdr->code) {
    9224:	7833      	ldrb	r3, [r6, #0]
    9226:	3b01      	subs	r3, #1
    9228:	2b15      	cmp	r3, #21
    922a:	d852      	bhi.n	92d2 <l2cap_recv+0xda>
    922c:	a201      	add	r2, pc, #4	; (adr r2, 9234 <l2cap_recv+0x3c>)
    922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9232:	bf00      	nop
    9234:	000092c9 	.word	0x000092c9
    9238:	000092d3 	.word	0x000092d3
    923c:	000092d3 	.word	0x000092d3
    9240:	000092d3 	.word	0x000092d3
    9244:	000092d3 	.word	0x000092d3
    9248:	000092ab 	.word	0x000092ab
    924c:	000092b5 	.word	0x000092b5
    9250:	000092d3 	.word	0x000092d3
    9254:	000092d3 	.word	0x000092d3
    9258:	000092d3 	.word	0x000092d3
    925c:	000092d3 	.word	0x000092d3
    9260:	000092d3 	.word	0x000092d3
    9264:	000092d3 	.word	0x000092d3
    9268:	000092d3 	.word	0x000092d3
    926c:	000092d3 	.word	0x000092d3
    9270:	000092d3 	.word	0x000092d3
    9274:	000092d3 	.word	0x000092d3
    9278:	0000928d 	.word	0x0000928d
    927c:	00009205 	.word	0x00009205
    9280:	00009297 	.word	0x00009297
    9284:	000092a1 	.word	0x000092a1
    9288:	000092bf 	.word	0x000092bf
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    928c:	4622      	mov	r2, r4
    928e:	4628      	mov	r0, r5
    9290:	f7ff fc22 	bl	8ad8 <le_conn_param_update_req>
		break;
    9294:	e7b6      	b.n	9204 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    9296:	4622      	mov	r2, r4
    9298:	4628      	mov	r0, r5
    929a:	f7ff fd4d 	bl	8d38 <le_conn_req>
		break;
    929e:	e7b1      	b.n	9204 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    92a0:	4622      	mov	r2, r4
    92a2:	4628      	mov	r0, r5
    92a4:	f7ff f954 	bl	8550 <le_conn_rsp>
		break;
    92a8:	e7ac      	b.n	9204 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    92aa:	4622      	mov	r2, r4
    92ac:	4628      	mov	r0, r5
    92ae:	f7ff fc57 	bl	8b60 <le_disconn_req>
		break;
    92b2:	e7a7      	b.n	9204 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    92b4:	4622      	mov	r2, r4
    92b6:	4628      	mov	r0, r5
    92b8:	f7ff f9a0 	bl	85fc <le_disconn_rsp>
		break;
    92bc:	e7a2      	b.n	9204 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    92be:	4622      	mov	r2, r4
    92c0:	4628      	mov	r0, r5
    92c2:	f7ff ff7b 	bl	91bc <le_credits>
		break;
    92c6:	e79d      	b.n	9204 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    92c8:	4622      	mov	r2, r4
    92ca:	4628      	mov	r0, r5
    92cc:	f7ff f9a5 	bl	861a <reject_cmd>
		break;
    92d0:	e798      	b.n	9204 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    92d2:	6828      	ldr	r0, [r5, #0]
    92d4:	2200      	movs	r2, #0
    92d6:	9200      	str	r2, [sp, #0]
    92d8:	4613      	mov	r3, r2
    92da:	f7ff fbd9 	bl	8a90 <l2cap_send_reject>
		break;
    92de:	e791      	b.n	9204 <l2cap_recv+0xc>

000092e0 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    92e0:	b510      	push	{r4, lr}
    92e2:	b082      	sub	sp, #8
    92e4:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    92e6:	b1f9      	cbz	r1, 9328 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    92e8:	6803      	ldr	r3, [r0, #0]
    92ea:	b303      	cbz	r3, 932e <bt_l2cap_chan_send+0x4e>
    92ec:	7b1b      	ldrb	r3, [r3, #12]
    92ee:	2b03      	cmp	r3, #3
    92f0:	d120      	bne.n	9334 <bt_l2cap_chan_send+0x54>
    92f2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    92f4:	2200      	movs	r2, #0
    92f6:	a901      	add	r1, sp, #4
    92f8:	f7ff fb40 	bl	897c <l2cap_chan_le_send_sdu>
	if (err < 0) {
    92fc:	2800      	cmp	r0, #0
    92fe:	db01      	blt.n	9304 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    9300:	b002      	add	sp, #8
    9302:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    9304:	f110 0f0b 	cmn.w	r0, #11
    9308:	d1fa      	bne.n	9300 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    930a:	9901      	ldr	r1, [sp, #4]
    930c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    9310:	f012 f86a 	bl	1b3e8 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    9314:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    9316:	f102 0310 	add.w	r3, r2, #16
    931a:	89d2      	ldrh	r2, [r2, #14]
    931c:	4413      	add	r3, r2
    931e:	3303      	adds	r3, #3
    9320:	f023 0303 	bic.w	r3, r3, #3
    9324:	6818      	ldr	r0, [r3, #0]
    9326:	e7eb      	b.n	9300 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    9328:	f06f 0015 	mvn.w	r0, #21
    932c:	e7e8      	b.n	9300 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    932e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9332:	e7e5      	b.n	9300 <bt_l2cap_chan_send+0x20>
    9334:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9338:	e7e2      	b.n	9300 <bt_l2cap_chan_send+0x20>

0000933a <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    933a:	b100      	cbz	r0, 933e <range_is_valid+0x4>
    933c:	b919      	cbnz	r1, 9346 <range_is_valid+0xc>
		if (err) {
    933e:	b142      	cbz	r2, 9352 <range_is_valid+0x18>
			*err = 0;
    9340:	2000      	movs	r0, #0
    9342:	8010      	strh	r0, [r2, #0]
    9344:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    9346:	4288      	cmp	r0, r1
    9348:	d905      	bls.n	9356 <range_is_valid+0x1c>
		if (err) {
    934a:	b132      	cbz	r2, 935a <range_is_valid+0x20>
			*err = start;
    934c:	8010      	strh	r0, [r2, #0]
		}
		return false;
    934e:	2000      	movs	r0, #0
    9350:	4770      	bx	lr
		return false;
    9352:	2000      	movs	r0, #0
    9354:	4770      	bx	lr
	}

	return true;
    9356:	2001      	movs	r0, #1
    9358:	4770      	bx	lr
		return false;
    935a:	2000      	movs	r0, #0
}
    935c:	4770      	bx	lr

0000935e <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    935e:	f012 0f01 	tst.w	r2, #1
    9362:	d007      	beq.n	9374 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    9364:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    9366:	f013 0f15 	tst.w	r3, #21
    936a:	d101      	bne.n	9370 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    936c:	2002      	movs	r0, #2
    936e:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    9370:	684b      	ldr	r3, [r1, #4]
    9372:	b1eb      	cbz	r3, 93b0 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    9374:	f012 0f02 	tst.w	r2, #2
    9378:	d007      	beq.n	938a <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    937a:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    937c:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    9380:	d101      	bne.n	9386 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    9382:	2003      	movs	r0, #3
    9384:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    9386:	688b      	ldr	r3, [r1, #8]
    9388:	b1a3      	cbz	r3, 93b4 <check_perm+0x56>
	}

	mask &= attr->perm;
    938a:	7c8b      	ldrb	r3, [r1, #18]
    938c:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    938e:	f012 0f30 	tst.w	r2, #48	; 0x30
    9392:	d004      	beq.n	939e <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    9394:	7a03      	ldrb	r3, [r0, #8]
    9396:	2b02      	cmp	r3, #2
    9398:	d801      	bhi.n	939e <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    939a:	2005      	movs	r0, #5
    939c:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    939e:	f012 0f0c 	tst.w	r2, #12
    93a2:	d009      	beq.n	93b8 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    93a4:	7a83      	ldrb	r3, [r0, #10]
    93a6:	b90b      	cbnz	r3, 93ac <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    93a8:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    93aa:	4770      	bx	lr
	return 0;
    93ac:	2000      	movs	r0, #0
    93ae:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    93b0:	2002      	movs	r0, #2
    93b2:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    93b4:	2003      	movs	r0, #3
    93b6:	4770      	bx	lr
	return 0;
    93b8:	2000      	movs	r0, #0
    93ba:	4770      	bx	lr

000093bc <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    93bc:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    93c0:	2bfe      	cmp	r3, #254	; 0xfe
    93c2:	d901      	bls.n	93c8 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    93c4:	200e      	movs	r0, #14
}
    93c6:	4770      	bx	lr
		return -err;
    93c8:	4240      	negs	r0, r0
    93ca:	b2c0      	uxtb	r0, r0
    93cc:	4770      	bx	lr

000093ce <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    93ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93d2:	b082      	sub	sp, #8
    93d4:	4606      	mov	r6, r0
    93d6:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    93d8:	680f      	ldr	r7, [r1, #0]
    93da:	222a      	movs	r2, #42	; 0x2a
    93dc:	4601      	mov	r1, r0
    93de:	4638      	mov	r0, r7
    93e0:	f7ff ffbd 	bl	935e <check_perm>
    93e4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    93e6:	b120      	cbz	r0, 93f2 <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    93e8:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    93ea:	4628      	mov	r0, r5
    93ec:	b002      	add	sp, #8
    93ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93f2:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    93f4:	f8d6 8008 	ldr.w	r8, [r6, #8]
    93f8:	7c23      	ldrb	r3, [r4, #16]
    93fa:	8a62      	ldrh	r2, [r4, #18]
    93fc:	2100      	movs	r1, #0
    93fe:	9101      	str	r1, [sp, #4]
    9400:	9200      	str	r2, [sp, #0]
    9402:	68e2      	ldr	r2, [r4, #12]
    9404:	4631      	mov	r1, r6
    9406:	4638      	mov	r0, r7
    9408:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    940a:	2800      	cmp	r0, #0
    940c:	db02      	blt.n	9414 <write_cb+0x46>
    940e:	7c23      	ldrb	r3, [r4, #16]
    9410:	4298      	cmp	r0, r3
    9412:	d003      	beq.n	941c <write_cb+0x4e>
		data->err = err_to_att(write);
    9414:	f7ff ffd2 	bl	93bc <err_to_att>
    9418:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    941a:	e7e6      	b.n	93ea <write_cb+0x1c>
	data->err = 0;
    941c:	2300      	movs	r3, #0
    941e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    9420:	2501      	movs	r5, #1
    9422:	e7e2      	b.n	93ea <write_cb+0x1c>

00009424 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    9424:	2006      	movs	r0, #6
    9426:	4770      	bx	lr

00009428 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    9428:	2006      	movs	r0, #6
    942a:	4770      	bx	lr

0000942c <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    942c:	2300      	movs	r3, #0
    942e:	2b1a      	cmp	r3, #26
    9430:	d80b      	bhi.n	944a <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    9432:	4a09      	ldr	r2, [pc, #36]	; (9458 <att_op_get_type+0x2c>)
    9434:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    9438:	4282      	cmp	r2, r0
    943a:	d001      	beq.n	9440 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    943c:	3301      	adds	r3, #1
    943e:	e7f6      	b.n	942e <att_op_get_type+0x2>
			return handlers[i].type;
    9440:	4a05      	ldr	r2, [pc, #20]	; (9458 <att_op_get_type+0x2c>)
    9442:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9446:	7898      	ldrb	r0, [r3, #2]
    9448:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    944a:	f010 0f40 	tst.w	r0, #64	; 0x40
    944e:	d101      	bne.n	9454 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    9450:	2006      	movs	r0, #6
}
    9452:	4770      	bx	lr
		return ATT_COMMAND;
    9454:	2000      	movs	r0, #0
    9456:	4770      	bx	lr
    9458:	000317d0 	.word	0x000317d0

0000945c <att_cb>:
{
    945c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    945e:	6883      	ldr	r3, [r0, #8]
    9460:	7818      	ldrb	r0, [r3, #0]
    9462:	f7ff ffe3 	bl	942c <att_op_get_type>
    9466:	3801      	subs	r0, #1
    9468:	2804      	cmp	r0, #4
    946a:	d808      	bhi.n	947e <att_cb+0x22>
    946c:	e8df f000 	tbb	[pc, r0]
    9470:	09070305 	.word	0x09070305
    9474:	05          	.byte	0x05
    9475:	00          	.byte	0x00
		return att_rsp_sent;
    9476:	4804      	ldr	r0, [pc, #16]	; (9488 <att_cb+0x2c>)
    9478:	bd08      	pop	{r3, pc}
		return att_req_sent;
    947a:	4804      	ldr	r0, [pc, #16]	; (948c <att_cb+0x30>)
    947c:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    947e:	4804      	ldr	r0, [pc, #16]	; (9490 <att_cb+0x34>)
    9480:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    9482:	4804      	ldr	r0, [pc, #16]	; (9494 <att_cb+0x38>)
}
    9484:	bd08      	pop	{r3, pc}
    9486:	bf00      	nop
    9488:	000095cf 	.word	0x000095cf
    948c:	00009641 	.word	0x00009641
    9490:	000095f9 	.word	0x000095f9
    9494:	00009607 	.word	0x00009607

00009498 <read_cb>:
{
    9498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    949c:	b083      	sub	sp, #12
    949e:	4606      	mov	r6, r0
    94a0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    94a2:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    94a6:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    94aa:	6888      	ldr	r0, [r1, #8]
    94ac:	2100      	movs	r1, #0
    94ae:	3008      	adds	r0, #8
    94b0:	f011 fff4 	bl	1b49c <net_buf_simple_add>
    94b4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    94b6:	2300      	movs	r3, #0
    94b8:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    94ba:	2215      	movs	r2, #21
    94bc:	4631      	mov	r1, r6
    94be:	4638      	mov	r0, r7
    94c0:	f7ff ff4d 	bl	935e <check_perm>
    94c4:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    94c6:	b120      	cbz	r0, 94d2 <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    94c8:	2500      	movs	r5, #0
}
    94ca:	4628      	mov	r0, r5
    94cc:	b003      	add	sp, #12
    94ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    94d2:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    94d4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    94d8:	68a3      	ldr	r3, [r4, #8]
    94da:	6899      	ldr	r1, [r3, #8]
    94dc:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    94de:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    94e2:	1a9b      	subs	r3, r3, r2
    94e4:	88a0      	ldrh	r0, [r4, #4]
    94e6:	9000      	str	r0, [sp, #0]
    94e8:	b29b      	uxth	r3, r3
    94ea:	440a      	add	r2, r1
    94ec:	4631      	mov	r1, r6
    94ee:	4638      	mov	r0, r7
    94f0:	47c8      	blx	r9
	if (read < 0) {
    94f2:	1e01      	subs	r1, r0, #0
    94f4:	db05      	blt.n	9502 <read_cb+0x6a>
	net_buf_add(data->buf, read);
    94f6:	68a0      	ldr	r0, [r4, #8]
    94f8:	3008      	adds	r0, #8
    94fa:	f011 ffcf 	bl	1b49c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    94fe:	2501      	movs	r5, #1
    9500:	e7e3      	b.n	94ca <read_cb+0x32>
		data->err = err_to_att(read);
    9502:	4608      	mov	r0, r1
    9504:	f7ff ff5a 	bl	93bc <err_to_att>
    9508:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    950a:	e7de      	b.n	94ca <read_cb+0x32>

0000950c <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    950c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    950e:	7b03      	ldrb	r3, [r0, #12]
    9510:	2b03      	cmp	r3, #3
    9512:	d10f      	bne.n	9534 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9514:	2104      	movs	r1, #4
    9516:	f7ff fb7b 	bl	8c10 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    951a:	b168      	cbz	r0, 9538 <att_chan_get+0x2c>
    951c:	f3bf 8f5b 	dmb	ish
    9520:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    9524:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    9528:	f012 0f04 	tst.w	r2, #4
    952c:	d100      	bne.n	9530 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    952e:	bd08      	pop	{r3, pc}
		return NULL;
    9530:	2000      	movs	r0, #0
    9532:	bd08      	pop	{r3, pc}
		return NULL;
    9534:	2000      	movs	r0, #0
    9536:	bd08      	pop	{r3, pc}
		return NULL;
    9538:	2000      	movs	r0, #0
    953a:	bd08      	pop	{r3, pc}

0000953c <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    953e:	2400      	movs	r4, #0
    9540:	b11c      	cbz	r4, 954a <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    9542:	f06f 040b 	mvn.w	r4, #11
}
    9546:	4620      	mov	r0, r4
    9548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    954a:	23ec      	movs	r3, #236	; 0xec
    954c:	fb03 f304 	mul.w	r3, r3, r4
    9550:	4a12      	ldr	r2, [pc, #72]	; (959c <bt_att_accept+0x60>)
    9552:	58d3      	ldr	r3, [r2, r3]
    9554:	b10b      	cbz	r3, 955a <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    9556:	3401      	adds	r4, #1
    9558:	e7f2      	b.n	9540 <bt_att_accept+0x4>
    955a:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    955c:	480f      	ldr	r0, [pc, #60]	; (959c <bt_att_accept+0x60>)
    955e:	23ec      	movs	r3, #236	; 0xec
    9560:	fb03 f304 	mul.w	r3, r3, r4
    9564:	18c6      	adds	r6, r0, r3
    9566:	4a0e      	ldr	r2, [pc, #56]	; (95a0 <bt_att_accept+0x64>)
    9568:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    956a:	f103 0298 	add.w	r2, r3, #152	; 0x98
    956e:	4402      	add	r2, r0
    9570:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9572:	2100      	movs	r1, #0
    9574:	f3bf 8f5b 	dmb	ish
    9578:	e852 7f00 	ldrex	r7, [r2]
    957c:	e842 1e00 	strex	lr, r1, [r2]
    9580:	f1be 0f00 	cmp.w	lr, #0
    9584:	d1f8      	bne.n	9578 <bt_att_accept+0x3c>
    9586:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    958a:	33d0      	adds	r3, #208	; 0xd0
    958c:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    958e:	2202      	movs	r2, #2
    9590:	4611      	mov	r1, r2
    9592:	3004      	adds	r0, #4
    9594:	f020 fa78 	bl	29a88 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    9598:	602e      	str	r6, [r5, #0]
		return 0;
    959a:	e7d4      	b.n	9546 <bt_att_accept+0xa>
    959c:	20000bac 	.word	0x20000bac
    95a0:	2000bf7c 	.word	0x2000bf7c

000095a4 <att_req_destroy>:
{
    95a4:	b510      	push	{r4, lr}
    95a6:	4604      	mov	r4, r0
	if (req->buf) {
    95a8:	6900      	ldr	r0, [r0, #16]
    95aa:	b108      	cbz	r0, 95b0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    95ac:	f011 ff2a 	bl	1b404 <net_buf_unref>
	if (req->destroy) {
    95b0:	68a3      	ldr	r3, [r4, #8]
    95b2:	b10b      	cbz	r3, 95b8 <att_req_destroy+0x14>
		req->destroy(req);
    95b4:	4620      	mov	r0, r4
    95b6:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    95b8:	2218      	movs	r2, #24
    95ba:	2100      	movs	r1, #0
    95bc:	4620      	mov	r0, r4
    95be:	f021 fa3f 	bl	2aa40 <memset>
    95c2:	bd10      	pop	{r4, pc}

000095c4 <att_get>:
{
    95c4:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    95c6:	2104      	movs	r1, #4
    95c8:	f7ff fb07 	bl	8bda <bt_l2cap_le_lookup_tx_cid>
}
    95cc:	bd08      	pop	{r3, pc}

000095ce <att_rsp_sent>:
{
    95ce:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    95d0:	f7ff fff8 	bl	95c4 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    95d4:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    95d8:	f3bf 8f5b 	dmb	ish
    95dc:	e853 2f00 	ldrex	r2, [r3]
    95e0:	f022 0201 	bic.w	r2, r2, #1
    95e4:	e843 2100 	strex	r1, r2, [r3]
    95e8:	2900      	cmp	r1, #0
    95ea:	d1f7      	bne.n	95dc <att_rsp_sent+0xe>
    95ec:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    95f0:	30d4      	adds	r0, #212	; 0xd4
    95f2:	f020 fa52 	bl	29a9a <_impl_k_sem_give>
    95f6:	bd08      	pop	{r3, pc}

000095f8 <att_pdu_sent>:
{
    95f8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    95fa:	f7ff ffe3 	bl	95c4 <att_get>
    95fe:	30d4      	adds	r0, #212	; 0xd4
    9600:	f020 fa4b 	bl	29a9a <_impl_k_sem_give>
    9604:	bd08      	pop	{r3, pc}

00009606 <att_cfm_sent>:
{
    9606:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    9608:	f7ff ffdc 	bl	95c4 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    960c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    9610:	f3bf 8f5b 	dmb	ish
    9614:	e853 2f00 	ldrex	r2, [r3]
    9618:	f022 0202 	bic.w	r2, r2, #2
    961c:	e843 2100 	strex	r1, r2, [r3]
    9620:	2900      	cmp	r1, #0
    9622:	d1f7      	bne.n	9614 <att_cfm_sent+0xe>
    9624:	f3bf 8f5b 	dmb	ish
    9628:	30d4      	adds	r0, #212	; 0xd4
    962a:	f020 fa36 	bl	29a9a <_impl_k_sem_give>
    962e:	bd08      	pop	{r3, pc}

00009630 <att_notify>:
{
    9630:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    9632:	f101 0008 	add.w	r0, r1, #8
    9636:	f011 ff8e 	bl	1b556 <net_buf_simple_pull_le16>
}
    963a:	2000      	movs	r0, #0
    963c:	bd08      	pop	{r3, pc}
	...

00009640 <att_req_sent>:
{
    9640:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    9642:	f7ff ffbf 	bl	95c4 <att_get>
    9646:	4604      	mov	r4, r0
    9648:	30d4      	adds	r0, #212	; 0xd4
    964a:	f020 fa26 	bl	29a9a <_impl_k_sem_give>
	if (att->req) {
    964e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9652:	b133      	cbz	r3, 9662 <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9654:	f247 5230 	movw	r2, #30000	; 0x7530
    9658:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    965c:	4801      	ldr	r0, [pc, #4]	; (9664 <att_req_sent+0x24>)
    965e:	f021 f865 	bl	2a72c <k_delayed_work_submit_to_queue>
    9662:	bd10      	pop	{r4, pc}
    9664:	200030f0 	.word	0x200030f0

00009668 <read_group_cb>:
{
    9668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    966c:	b084      	sub	sp, #16
    966e:	4605      	mov	r5, r0
    9670:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9672:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9674:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9676:	2300      	movs	r3, #0
    9678:	f88d 3008 	strb.w	r3, [sp, #8]
    967c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9680:	f8ad 300a 	strh.w	r3, [sp, #10]
    9684:	a902      	add	r1, sp, #8
    9686:	6800      	ldr	r0, [r0, #0]
    9688:	f7fb fb8d 	bl	4da6 <bt_uuid_cmp>
    968c:	b1a8      	cbz	r0, 96ba <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    968e:	2300      	movs	r3, #0
    9690:	f88d 300c 	strb.w	r3, [sp, #12]
    9694:	f642 0301 	movw	r3, #10241	; 0x2801
    9698:	f8ad 300e 	strh.w	r3, [sp, #14]
    969c:	a903      	add	r1, sp, #12
    969e:	6828      	ldr	r0, [r5, #0]
    96a0:	f7fb fb81 	bl	4da6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    96a4:	b148      	cbz	r0, 96ba <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    96a6:	6923      	ldr	r3, [r4, #16]
    96a8:	2b00      	cmp	r3, #0
    96aa:	d04c      	beq.n	9746 <read_group_cb+0xde>
    96ac:	8a2a      	ldrh	r2, [r5, #16]
    96ae:	8859      	ldrh	r1, [r3, #2]
    96b0:	428a      	cmp	r2, r1
    96b2:	d94a      	bls.n	974a <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    96b4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    96b6:	2001      	movs	r0, #1
    96b8:	e039      	b.n	972e <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    96ba:	6861      	ldr	r1, [r4, #4]
    96bc:	6828      	ldr	r0, [r5, #0]
    96be:	f7fb fb72 	bl	4da6 <bt_uuid_cmp>
    96c2:	2800      	cmp	r0, #0
    96c4:	d130      	bne.n	9728 <read_group_cb+0xc0>
	if (data->rsp->len &&
    96c6:	68e3      	ldr	r3, [r4, #12]
    96c8:	781a      	ldrb	r2, [r3, #0]
    96ca:	b132      	cbz	r2, 96da <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    96cc:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    96d0:	68a1      	ldr	r1, [r4, #8]
    96d2:	8989      	ldrh	r1, [r1, #12]
    96d4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    96d6:	4293      	cmp	r3, r2
    96d8:	db39      	blt.n	974e <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    96da:	68a0      	ldr	r0, [r4, #8]
    96dc:	2104      	movs	r1, #4
    96de:	3008      	adds	r0, #8
    96e0:	f011 fedc 	bl	1b49c <net_buf_simple_add>
    96e4:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    96e6:	8a2b      	ldrh	r3, [r5, #16]
    96e8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    96ea:	6923      	ldr	r3, [r4, #16]
    96ec:	8a2a      	ldrh	r2, [r5, #16]
    96ee:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    96f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    96f4:	68a3      	ldr	r3, [r4, #8]
    96f6:	6899      	ldr	r1, [r3, #8]
    96f8:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    96fa:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    96fe:	1a9b      	subs	r3, r3, r2
    9700:	2000      	movs	r0, #0
    9702:	9000      	str	r0, [sp, #0]
    9704:	b29b      	uxth	r3, r3
    9706:	440a      	add	r2, r1
    9708:	4629      	mov	r1, r5
    970a:	4638      	mov	r0, r7
    970c:	47c0      	blx	r8
	if (read < 0) {
    970e:	1e01      	subs	r1, r0, #0
    9710:	db1f      	blt.n	9752 <read_group_cb+0xea>
	if (!data->rsp->len) {
    9712:	68e2      	ldr	r2, [r4, #12]
    9714:	7813      	ldrb	r3, [r2, #0]
    9716:	b96b      	cbnz	r3, 9734 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    9718:	1d0b      	adds	r3, r1, #4
    971a:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    971c:	68a0      	ldr	r0, [r4, #8]
    971e:	3008      	adds	r0, #8
    9720:	f011 febc 	bl	1b49c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    9724:	2001      	movs	r0, #1
    9726:	e002      	b.n	972e <read_group_cb+0xc6>
		data->group = NULL;
    9728:	2300      	movs	r3, #0
    972a:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    972c:	2001      	movs	r0, #1
}
    972e:	b004      	add	sp, #16
    9730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    9734:	1d0a      	adds	r2, r1, #4
    9736:	4293      	cmp	r3, r2
    9738:	d0f0      	beq.n	971c <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    973a:	68a2      	ldr	r2, [r4, #8]
    973c:	8993      	ldrh	r3, [r2, #12]
    973e:	3b04      	subs	r3, #4
    9740:	8193      	strh	r3, [r2, #12]
		return false;
    9742:	2000      	movs	r0, #0
    9744:	e7f3      	b.n	972e <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    9746:	2001      	movs	r0, #1
    9748:	e7f1      	b.n	972e <read_group_cb+0xc6>
    974a:	2001      	movs	r0, #1
    974c:	e7ef      	b.n	972e <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    974e:	2000      	movs	r0, #0
    9750:	e7ed      	b.n	972e <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    9752:	2000      	movs	r0, #0
    9754:	e7eb      	b.n	972e <read_group_cb+0xc6>

00009756 <read_type_cb>:
{
    9756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    975a:	b082      	sub	sp, #8
    975c:	4606      	mov	r6, r0
    975e:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9760:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9762:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9766:	6849      	ldr	r1, [r1, #4]
    9768:	6800      	ldr	r0, [r0, #0]
    976a:	f7fb fb1c 	bl	4da6 <bt_uuid_cmp>
    976e:	2800      	cmp	r0, #0
    9770:	d14d      	bne.n	980e <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    9772:	2215      	movs	r2, #21
    9774:	4631      	mov	r1, r6
    9776:	4640      	mov	r0, r8
    9778:	f7ff fdf1 	bl	935e <check_perm>
    977c:	4605      	mov	r5, r0
    977e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    9780:	b130      	cbz	r0, 9790 <read_type_cb+0x3a>
		if (data->rsp->len) {
    9782:	68e3      	ldr	r3, [r4, #12]
    9784:	781d      	ldrb	r5, [r3, #0]
    9786:	2d00      	cmp	r5, #0
    9788:	d042      	beq.n	9810 <read_type_cb+0xba>
			data->err = 0x00;
    978a:	2500      	movs	r5, #0
    978c:	7525      	strb	r5, [r4, #20]
    978e:	e03f      	b.n	9810 <read_type_cb+0xba>
	data->err = 0x00;
    9790:	f04f 0900 	mov.w	r9, #0
    9794:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    9798:	68a0      	ldr	r0, [r4, #8]
    979a:	2102      	movs	r1, #2
    979c:	3008      	adds	r0, #8
    979e:	f011 fe7d 	bl	1b49c <net_buf_simple_add>
    97a2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    97a4:	8a33      	ldrh	r3, [r6, #16]
    97a6:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    97a8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    97ac:	68a3      	ldr	r3, [r4, #8]
    97ae:	6899      	ldr	r1, [r3, #8]
    97b0:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    97b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    97b6:	1a9b      	subs	r3, r3, r2
    97b8:	f8cd 9000 	str.w	r9, [sp]
    97bc:	b29b      	uxth	r3, r3
    97be:	440a      	add	r2, r1
    97c0:	4631      	mov	r1, r6
    97c2:	4640      	mov	r0, r8
    97c4:	47d0      	blx	sl
	if (read < 0) {
    97c6:	1e01      	subs	r1, r0, #0
    97c8:	db14      	blt.n	97f4 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    97ca:	68e2      	ldr	r2, [r4, #12]
    97cc:	7813      	ldrb	r3, [r2, #0]
    97ce:	b9b3      	cbnz	r3, 97fe <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    97d0:	1c8b      	adds	r3, r1, #2
    97d2:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    97d4:	68a0      	ldr	r0, [r4, #8]
    97d6:	3008      	adds	r0, #8
    97d8:	f011 fe60 	bl	1b49c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    97dc:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    97e0:	68a3      	ldr	r3, [r4, #8]
    97e2:	899b      	ldrh	r3, [r3, #12]
    97e4:	1aed      	subs	r5, r5, r3
    97e6:	68e3      	ldr	r3, [r4, #12]
    97e8:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    97ea:	429d      	cmp	r5, r3
    97ec:	bfd4      	ite	le
    97ee:	2500      	movle	r5, #0
    97f0:	2501      	movgt	r5, #1
    97f2:	e00d      	b.n	9810 <read_type_cb+0xba>
		data->err = err_to_att(read);
    97f4:	4608      	mov	r0, r1
    97f6:	f7ff fde1 	bl	93bc <err_to_att>
    97fa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    97fc:	e008      	b.n	9810 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    97fe:	1c8a      	adds	r2, r1, #2
    9800:	4293      	cmp	r3, r2
    9802:	d0e7      	beq.n	97d4 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    9804:	68a2      	ldr	r2, [r4, #8]
    9806:	8993      	ldrh	r3, [r2, #12]
    9808:	3b02      	subs	r3, #2
    980a:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    980c:	e000      	b.n	9810 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    980e:	2501      	movs	r5, #1
}
    9810:	4628      	mov	r0, r5
    9812:	b002      	add	sp, #8
    9814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009818 <uuid_create>:
{
    9818:	b510      	push	{r4, lr}
    981a:	4604      	mov	r4, r0
	switch (buf->len) {
    981c:	898b      	ldrh	r3, [r1, #12]
    981e:	2b02      	cmp	r3, #2
    9820:	d003      	beq.n	982a <uuid_create+0x12>
    9822:	2b10      	cmp	r3, #16
    9824:	d00a      	beq.n	983c <uuid_create+0x24>
	return false;
    9826:	2000      	movs	r0, #0
}
    9828:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    982a:	2300      	movs	r3, #0
    982c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    982e:	f101 0008 	add.w	r0, r1, #8
    9832:	f011 fe90 	bl	1b556 <net_buf_simple_pull_le16>
    9836:	8060      	strh	r0, [r4, #2]
		return true;
    9838:	2001      	movs	r0, #1
    983a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    983c:	2302      	movs	r3, #2
    983e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    9842:	898a      	ldrh	r2, [r1, #12]
    9844:	6889      	ldr	r1, [r1, #8]
    9846:	f7f6 fd3b 	bl	2c0 <memcpy>
		return true;
    984a:	2001      	movs	r0, #1
    984c:	bd10      	pop	{r4, pc}

0000984e <find_info_cb>:
{
    984e:	b570      	push	{r4, r5, r6, lr}
    9850:	4605      	mov	r5, r0
    9852:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9854:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    9856:	688b      	ldr	r3, [r1, #8]
    9858:	b13b      	cbz	r3, 986a <find_info_cb+0x1c>
	switch (data->rsp->format) {
    985a:	68a3      	ldr	r3, [r4, #8]
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	2b01      	cmp	r3, #1
    9860:	d011      	beq.n	9886 <find_info_cb+0x38>
    9862:	2b02      	cmp	r3, #2
    9864:	d02b      	beq.n	98be <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    9866:	2000      	movs	r0, #0
    9868:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    986a:	6848      	ldr	r0, [r1, #4]
    986c:	2101      	movs	r1, #1
    986e:	3008      	adds	r0, #8
    9870:	f011 fe14 	bl	1b49c <net_buf_simple_add>
    9874:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    9876:	682b      	ldr	r3, [r5, #0]
    9878:	781b      	ldrb	r3, [r3, #0]
    987a:	b913      	cbnz	r3, 9882 <find_info_cb+0x34>
    987c:	2301      	movs	r3, #1
    987e:	7003      	strb	r3, [r0, #0]
    9880:	e7eb      	b.n	985a <find_info_cb+0xc>
    9882:	2302      	movs	r3, #2
    9884:	e7fb      	b.n	987e <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    9886:	682b      	ldr	r3, [r5, #0]
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	b10b      	cbz	r3, 9890 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    988c:	2000      	movs	r0, #0
    988e:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    9890:	6860      	ldr	r0, [r4, #4]
    9892:	2104      	movs	r1, #4
    9894:	3008      	adds	r0, #8
    9896:	f011 fe01 	bl	1b49c <net_buf_simple_add>
    989a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    989c:	8a2b      	ldrh	r3, [r5, #16]
    989e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    98a0:	68e3      	ldr	r3, [r4, #12]
    98a2:	682a      	ldr	r2, [r5, #0]
    98a4:	8852      	ldrh	r2, [r2, #2]
    98a6:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    98a8:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    98ac:	6862      	ldr	r2, [r4, #4]
    98ae:	8992      	ldrh	r2, [r2, #12]
    98b0:	1a9b      	subs	r3, r3, r2
    98b2:	2b04      	cmp	r3, #4
    98b4:	d801      	bhi.n	98ba <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    98b6:	2000      	movs	r0, #0
    98b8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    98ba:	2001      	movs	r0, #1
    98bc:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    98be:	682b      	ldr	r3, [r5, #0]
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	2b02      	cmp	r3, #2
    98c4:	d001      	beq.n	98ca <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    98c6:	2000      	movs	r0, #0
    98c8:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    98ca:	6860      	ldr	r0, [r4, #4]
    98cc:	2112      	movs	r1, #18
    98ce:	3008      	adds	r0, #8
    98d0:	f011 fde4 	bl	1b49c <net_buf_simple_add>
    98d4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    98d6:	8a2b      	ldrh	r3, [r5, #16]
    98d8:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    98da:	68e0      	ldr	r0, [r4, #12]
    98dc:	6829      	ldr	r1, [r5, #0]
    98de:	2210      	movs	r2, #16
    98e0:	3101      	adds	r1, #1
    98e2:	3002      	adds	r0, #2
    98e4:	f7f6 fcec 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    98e8:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    98ec:	6862      	ldr	r2, [r4, #4]
    98ee:	8992      	ldrh	r2, [r2, #12]
    98f0:	1a9b      	subs	r3, r3, r2
    98f2:	2b12      	cmp	r3, #18
    98f4:	d901      	bls.n	98fa <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    98f6:	2001      	movs	r0, #1
    98f8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    98fa:	2000      	movs	r0, #0
}
    98fc:	bd70      	pop	{r4, r5, r6, pc}

000098fe <find_type_cb>:
{
    98fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    9900:	b089      	sub	sp, #36	; 0x24
    9902:	4605      	mov	r5, r0
    9904:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9906:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9908:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    990a:	2300      	movs	r3, #0
    990c:	f88d 3018 	strb.w	r3, [sp, #24]
    9910:	f642 0301 	movw	r3, #10241	; 0x2801
    9914:	f8ad 301a 	strh.w	r3, [sp, #26]
    9918:	a906      	add	r1, sp, #24
    991a:	6800      	ldr	r0, [r0, #0]
    991c:	f7fb fa43 	bl	4da6 <bt_uuid_cmp>
    9920:	b920      	cbnz	r0, 992c <find_type_cb+0x2e>
		data->group = NULL;
    9922:	2300      	movs	r3, #0
    9924:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9926:	2001      	movs	r0, #1
}
    9928:	b009      	add	sp, #36	; 0x24
    992a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    992c:	2300      	movs	r3, #0
    992e:	f88d 301c 	strb.w	r3, [sp, #28]
    9932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9936:	f8ad 301e 	strh.w	r3, [sp, #30]
    993a:	a907      	add	r1, sp, #28
    993c:	6828      	ldr	r0, [r5, #0]
    993e:	f7fb fa32 	bl	4da6 <bt_uuid_cmp>
    9942:	b148      	cbz	r0, 9958 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    9944:	68a3      	ldr	r3, [r4, #8]
    9946:	2b00      	cmp	r3, #0
    9948:	d039      	beq.n	99be <find_type_cb+0xc0>
    994a:	8a2a      	ldrh	r2, [r5, #16]
    994c:	8859      	ldrh	r1, [r3, #2]
    994e:	428a      	cmp	r2, r1
    9950:	d937      	bls.n	99c2 <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9952:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9954:	2001      	movs	r0, #1
    9956:	e7e7      	b.n	9928 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    9958:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    995c:	6862      	ldr	r2, [r4, #4]
    995e:	8992      	ldrh	r2, [r2, #12]
    9960:	1a9b      	subs	r3, r3, r2
    9962:	2b03      	cmp	r3, #3
    9964:	d801      	bhi.n	996a <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    9966:	2000      	movs	r0, #0
    9968:	e7de      	b.n	9928 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    996a:	686e      	ldr	r6, [r5, #4]
    996c:	2300      	movs	r3, #0
    996e:	9300      	str	r3, [sp, #0]
    9970:	2310      	movs	r3, #16
    9972:	aa02      	add	r2, sp, #8
    9974:	4629      	mov	r1, r5
    9976:	4638      	mov	r0, r7
    9978:	47b0      	blx	r6
	if (read < 0) {
    997a:	1e02      	subs	r2, r0, #0
    997c:	db06      	blt.n	998c <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    997e:	7c23      	ldrb	r3, [r4, #16]
    9980:	429a      	cmp	r2, r3
    9982:	d007      	beq.n	9994 <find_type_cb+0x96>
		data->group = NULL;
    9984:	2300      	movs	r3, #0
    9986:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9988:	2001      	movs	r0, #1
    998a:	e7cd      	b.n	9928 <find_type_cb+0x2a>
		data->group = NULL;
    998c:	2300      	movs	r3, #0
    998e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9990:	2001      	movs	r0, #1
    9992:	e7c9      	b.n	9928 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9994:	a902      	add	r1, sp, #8
    9996:	68e0      	ldr	r0, [r4, #12]
    9998:	f020 ffbe 	bl	2a918 <memcmp>
    999c:	2800      	cmp	r0, #0
    999e:	d1f1      	bne.n	9984 <find_type_cb+0x86>
	data->err = 0x00;
    99a0:	2300      	movs	r3, #0
    99a2:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    99a4:	6860      	ldr	r0, [r4, #4]
    99a6:	2104      	movs	r1, #4
    99a8:	3008      	adds	r0, #8
    99aa:	f011 fd77 	bl	1b49c <net_buf_simple_add>
    99ae:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    99b0:	8a2b      	ldrh	r3, [r5, #16]
    99b2:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    99b4:	68a3      	ldr	r3, [r4, #8]
    99b6:	8a2a      	ldrh	r2, [r5, #16]
    99b8:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    99ba:	2001      	movs	r0, #1
    99bc:	e7b4      	b.n	9928 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    99be:	2001      	movs	r0, #1
    99c0:	e7b2      	b.n	9928 <find_type_cb+0x2a>
    99c2:	2001      	movs	r0, #1
    99c4:	e7b0      	b.n	9928 <find_type_cb+0x2a>

000099c6 <att_change_security>:
{
    99c6:	b508      	push	{r3, lr}
	switch (err) {
    99c8:	2905      	cmp	r1, #5
    99ca:	d008      	beq.n	99de <att_change_security+0x18>
    99cc:	290f      	cmp	r1, #15
    99ce:	d113      	bne.n	99f8 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    99d0:	7a03      	ldrb	r3, [r0, #8]
    99d2:	2b01      	cmp	r3, #1
    99d4:	d813      	bhi.n	99fe <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    99d6:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    99d8:	f7fd fe4a 	bl	7670 <bt_conn_security>
    99dc:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    99de:	7a03      	ldrb	r3, [r0, #8]
    99e0:	2b01      	cmp	r3, #1
    99e2:	d905      	bls.n	99f0 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    99e4:	2b02      	cmp	r3, #2
    99e6:	d905      	bls.n	99f4 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    99e8:	2b03      	cmp	r3, #3
    99ea:	d80b      	bhi.n	9a04 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    99ec:	2104      	movs	r1, #4
    99ee:	e7f3      	b.n	99d8 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    99f0:	2102      	movs	r1, #2
    99f2:	e7f1      	b.n	99d8 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    99f4:	2103      	movs	r1, #3
    99f6:	e7ef      	b.n	99d8 <att_change_security+0x12>
		return -EINVAL;
    99f8:	f06f 0015 	mvn.w	r0, #21
    99fc:	bd08      	pop	{r3, pc}
			return -EALREADY;
    99fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a02:	bd08      	pop	{r3, pc}
			return -EALREADY;
    9a04:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    9a08:	bd08      	pop	{r3, pc}
	...

00009a0c <bt_att_connected>:
{
    9a0c:	b510      	push	{r4, lr}
    9a0e:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9a10:	2317      	movs	r3, #23
    9a12:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9a16:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    9a1a:	4906      	ldr	r1, [pc, #24]	; (9a34 <bt_att_connected+0x28>)
    9a1c:	30ac      	adds	r0, #172	; 0xac
    9a1e:	f020 fe0d 	bl	2a63c <k_delayed_work_init>
	list->head = NULL;
    9a22:	2300      	movs	r3, #0
    9a24:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    9a28:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    9a2c:	6820      	ldr	r0, [r4, #0]
    9a2e:	f001 fadd 	bl	afec <bt_gatt_connected>
    9a32:	bd10      	pop	{r4, pc}
    9a34:	00009d93 	.word	0x00009d93

00009a38 <att_send_req>:
{
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4605      	mov	r5, r0
    9a3c:	460c      	mov	r4, r1
	att->req = req;
    9a3e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    9a42:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9a46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9a4a:	4630      	mov	r0, r6
    9a4c:	f020 f838 	bl	29ac0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9a50:	682b      	ldr	r3, [r5, #0]
    9a52:	7b1b      	ldrb	r3, [r3, #12]
    9a54:	2b03      	cmp	r3, #3
    9a56:	d019      	beq.n	9a8c <att_send_req+0x54>
    9a58:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9a5a:	b323      	cbz	r3, 9aa6 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    9a5c:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    9a5e:	f106 0008 	add.w	r0, r6, #8
    9a62:	f011 fd80 	bl	1b566 <net_buf_simple_headroom>
    9a66:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    9a68:	89b3      	ldrh	r3, [r6, #12]
    9a6a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9a6c:	682d      	ldr	r5, [r5, #0]
    9a6e:	6920      	ldr	r0, [r4, #16]
    9a70:	f011 fce4 	bl	1b43c <net_buf_ref>
    9a74:	4606      	mov	r6, r0
    9a76:	6920      	ldr	r0, [r4, #16]
    9a78:	f7ff fcf0 	bl	945c <att_cb>
    9a7c:	4603      	mov	r3, r0
    9a7e:	4632      	mov	r2, r6
    9a80:	2104      	movs	r1, #4
    9a82:	4628      	mov	r0, r5
    9a84:	f7fe fea3 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    9a88:	2000      	movs	r0, #0
}
    9a8a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9a8c:	f3bf 8f5b 	dmb	ish
    9a90:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9a94:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9a98:	f013 0f04 	tst.w	r3, #4
    9a9c:	d101      	bne.n	9aa2 <att_send_req+0x6a>
    9a9e:	2301      	movs	r3, #1
    9aa0:	e7db      	b.n	9a5a <att_send_req+0x22>
    9aa2:	2300      	movs	r3, #0
    9aa4:	e7d9      	b.n	9a5a <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9aa6:	4630      	mov	r0, r6
    9aa8:	f01f fff7 	bl	29a9a <_impl_k_sem_give>
		return -ENOTCONN;
    9aac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9ab0:	bd70      	pop	{r4, r5, r6, pc}

00009ab2 <att_process>:
{
    9ab2:	b508      	push	{r3, lr}
	return (!list->head);
    9ab4:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9ab8:	b131      	cbz	r1, 9ac8 <att_process+0x16>
	list->head = node->next;
    9aba:	680b      	ldr	r3, [r1, #0]
    9abc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    9ac0:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9ac4:	4291      	cmp	r1, r2
    9ac6:	d003      	beq.n	9ad0 <att_process+0x1e>
	if (!node) {
    9ac8:	b109      	cbz	r1, 9ace <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    9aca:	f7ff ffb5 	bl	9a38 <att_send_req>
    9ace:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    9ad0:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9ad4:	e7f8      	b.n	9ac8 <att_process+0x16>

00009ad6 <att_handle_rsp>:
{
    9ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ada:	b082      	sub	sp, #8
    9adc:	4604      	mov	r4, r0
    9ade:	460e      	mov	r6, r1
    9ae0:	4617      	mov	r7, r2
    9ae2:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    9ae4:	30ac      	adds	r0, #172	; 0xac
    9ae6:	f020 fdc7 	bl	2a678 <k_delayed_work_cancel>
	if (!att->req) {
    9aea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9aee:	b1e3      	cbz	r3, 9b2a <att_handle_rsp+0x54>
	if (att->req->buf) {
    9af0:	6918      	ldr	r0, [r3, #16]
    9af2:	b128      	cbz	r0, 9b00 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    9af4:	f011 fc86 	bl	1b404 <net_buf_unref>
		att->req->buf = NULL;
    9af8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9afc:	2200      	movs	r2, #0
    9afe:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    9b00:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9b04:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    9b08:	2200      	movs	r2, #0
    9b0a:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9b0c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9b10:	9300      	str	r3, [sp, #0]
    9b12:	463b      	mov	r3, r7
    9b14:	4632      	mov	r2, r6
    9b16:	4629      	mov	r1, r5
    9b18:	6820      	ldr	r0, [r4, #0]
    9b1a:	47c0      	blx	r8
	if (!att->req->func) {
    9b1c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    9b20:	6843      	ldr	r3, [r0, #4]
    9b22:	b14b      	cbz	r3, 9b38 <att_handle_rsp+0x62>
	att->req = NULL;
    9b24:	2300      	movs	r3, #0
    9b26:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    9b2a:	4620      	mov	r0, r4
    9b2c:	f7ff ffc1 	bl	9ab2 <att_process>
}
    9b30:	2000      	movs	r0, #0
    9b32:	b002      	add	sp, #8
    9b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    9b38:	f7ff fd34 	bl	95a4 <att_req_destroy>
    9b3c:	e7f2      	b.n	9b24 <att_handle_rsp+0x4e>

00009b3e <att_confirm>:
{
    9b3e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b40:	2300      	movs	r3, #0
    9b42:	898a      	ldrh	r2, [r1, #12]
    9b44:	6889      	ldr	r1, [r1, #8]
    9b46:	f7ff ffc6 	bl	9ad6 <att_handle_rsp>
}
    9b4a:	bd08      	pop	{r3, pc}

00009b4c <att_handle_exec_write_rsp>:
{
    9b4c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b4e:	2300      	movs	r3, #0
    9b50:	898a      	ldrh	r2, [r1, #12]
    9b52:	6889      	ldr	r1, [r1, #8]
    9b54:	f7ff ffbf 	bl	9ad6 <att_handle_rsp>
}
    9b58:	bd08      	pop	{r3, pc}

00009b5a <att_handle_prepare_write_rsp>:
{
    9b5a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b5c:	2300      	movs	r3, #0
    9b5e:	898a      	ldrh	r2, [r1, #12]
    9b60:	6889      	ldr	r1, [r1, #8]
    9b62:	f7ff ffb8 	bl	9ad6 <att_handle_rsp>
}
    9b66:	bd08      	pop	{r3, pc}

00009b68 <att_handle_write_rsp>:
{
    9b68:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b6a:	2300      	movs	r3, #0
    9b6c:	898a      	ldrh	r2, [r1, #12]
    9b6e:	6889      	ldr	r1, [r1, #8]
    9b70:	f7ff ffb1 	bl	9ad6 <att_handle_rsp>
}
    9b74:	bd08      	pop	{r3, pc}

00009b76 <att_handle_read_mult_rsp>:
{
    9b76:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b78:	2300      	movs	r3, #0
    9b7a:	898a      	ldrh	r2, [r1, #12]
    9b7c:	6889      	ldr	r1, [r1, #8]
    9b7e:	f7ff ffaa 	bl	9ad6 <att_handle_rsp>
}
    9b82:	bd08      	pop	{r3, pc}

00009b84 <att_handle_read_blob_rsp>:
{
    9b84:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b86:	2300      	movs	r3, #0
    9b88:	898a      	ldrh	r2, [r1, #12]
    9b8a:	6889      	ldr	r1, [r1, #8]
    9b8c:	f7ff ffa3 	bl	9ad6 <att_handle_rsp>
}
    9b90:	bd08      	pop	{r3, pc}

00009b92 <att_handle_read_rsp>:
{
    9b92:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9b94:	2300      	movs	r3, #0
    9b96:	898a      	ldrh	r2, [r1, #12]
    9b98:	6889      	ldr	r1, [r1, #8]
    9b9a:	f7ff ff9c 	bl	9ad6 <att_handle_rsp>
}
    9b9e:	bd08      	pop	{r3, pc}

00009ba0 <att_handle_read_type_rsp>:
{
    9ba0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9ba2:	2300      	movs	r3, #0
    9ba4:	898a      	ldrh	r2, [r1, #12]
    9ba6:	6889      	ldr	r1, [r1, #8]
    9ba8:	f7ff ff95 	bl	9ad6 <att_handle_rsp>
}
    9bac:	bd08      	pop	{r3, pc}

00009bae <att_handle_find_type_rsp>:
{
    9bae:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9bb0:	2300      	movs	r3, #0
    9bb2:	898a      	ldrh	r2, [r1, #12]
    9bb4:	6889      	ldr	r1, [r1, #8]
    9bb6:	f7ff ff8e 	bl	9ad6 <att_handle_rsp>
}
    9bba:	bd08      	pop	{r3, pc}

00009bbc <att_handle_find_info_rsp>:
{
    9bbc:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9bbe:	2300      	movs	r3, #0
    9bc0:	898a      	ldrh	r2, [r1, #12]
    9bc2:	6889      	ldr	r1, [r1, #8]
    9bc4:	f7ff ff87 	bl	9ad6 <att_handle_rsp>
}
    9bc8:	bd08      	pop	{r3, pc}

00009bca <att_mtu_rsp>:
	if (!att) {
    9bca:	b1b8      	cbz	r0, 9bfc <att_mtu_rsp+0x32>
{
    9bcc:	b508      	push	{r3, lr}
    9bce:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    9bd0:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    9bd2:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    9bd4:	2b16      	cmp	r3, #22
    9bd6:	d90b      	bls.n	9bf0 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    9bd8:	2b41      	cmp	r3, #65	; 0x41
    9bda:	bf28      	it	cs
    9bdc:	2341      	movcs	r3, #65	; 0x41
    9bde:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    9be2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    9be6:	2300      	movs	r3, #0
    9be8:	8992      	ldrh	r2, [r2, #12]
    9bea:	f7ff ff74 	bl	9ad6 <att_handle_rsp>
    9bee:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    9bf0:	2304      	movs	r3, #4
    9bf2:	2200      	movs	r2, #0
    9bf4:	4611      	mov	r1, r2
    9bf6:	f7ff ff6e 	bl	9ad6 <att_handle_rsp>
    9bfa:	bd08      	pop	{r3, pc}
		return 0;
    9bfc:	2000      	movs	r0, #0
    9bfe:	4770      	bx	lr

00009c00 <bt_att_encrypt_change>:
{
    9c00:	b570      	push	{r4, r5, r6, lr}
    9c02:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    9c04:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    9c06:	b941      	cbnz	r1, 9c1a <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    9c08:	7a2b      	ldrb	r3, [r5, #8]
    9c0a:	2b01      	cmp	r3, #1
    9c0c:	d004      	beq.n	9c18 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    9c0e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    9c12:	b10b      	cbz	r3, 9c18 <bt_att_encrypt_change+0x18>
    9c14:	7d1b      	ldrb	r3, [r3, #20]
    9c16:	b933      	cbnz	r3, 9c26 <bt_att_encrypt_change+0x26>
    9c18:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9c1a:	2305      	movs	r3, #5
    9c1c:	2200      	movs	r2, #0
    9c1e:	4611      	mov	r1, r2
    9c20:	f7ff ff59 	bl	9ad6 <att_handle_rsp>
		return;
    9c24:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    9c26:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9c2e:	4630      	mov	r0, r6
    9c30:	f01f ff46 	bl	29ac0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9c34:	6823      	ldr	r3, [r4, #0]
    9c36:	7b1b      	ldrb	r3, [r3, #12]
    9c38:	2b03      	cmp	r3, #3
    9c3a:	d012      	beq.n	9c62 <bt_att_encrypt_change+0x62>
    9c3c:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9c3e:	b1eb      	cbz	r3, 9c7c <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    9c40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9c44:	691e      	ldr	r6, [r3, #16]
    9c46:	4630      	mov	r0, r6
    9c48:	f7ff fc08 	bl	945c <att_cb>
    9c4c:	4603      	mov	r3, r0
    9c4e:	4632      	mov	r2, r6
    9c50:	2104      	movs	r1, #4
    9c52:	4628      	mov	r0, r5
    9c54:	f7fe fdbb 	bl	87ce <bt_l2cap_send_cb>
	att->req->buf = NULL;
    9c58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9c5c:	2200      	movs	r2, #0
    9c5e:	611a      	str	r2, [r3, #16]
    9c60:	e7da      	b.n	9c18 <bt_att_encrypt_change+0x18>
    9c62:	f3bf 8f5b 	dmb	ish
    9c66:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    9c6a:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9c6e:	f013 0f04 	tst.w	r3, #4
    9c72:	d101      	bne.n	9c78 <bt_att_encrypt_change+0x78>
    9c74:	2301      	movs	r3, #1
    9c76:	e7e2      	b.n	9c3e <bt_att_encrypt_change+0x3e>
    9c78:	2300      	movs	r3, #0
    9c7a:	e7e0      	b.n	9c3e <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9c7c:	4630      	mov	r0, r6
    9c7e:	f01f ff0c 	bl	29a9a <_impl_k_sem_give>
    9c82:	bd70      	pop	{r4, r5, r6, pc}

00009c84 <att_error_rsp>:
{
    9c84:	b538      	push	{r3, r4, r5, lr}
    9c86:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    9c88:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    9c8a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9c8e:	b1fb      	cbz	r3, 9cd0 <att_error_rsp+0x4c>
	if (att->req->buf) {
    9c90:	691a      	ldr	r2, [r3, #16]
    9c92:	b132      	cbz	r2, 9ca2 <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    9c94:	f102 0110 	add.w	r1, r2, #16
    9c98:	899d      	ldrh	r5, [r3, #12]
    9c9a:	4429      	add	r1, r5
    9c9c:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    9c9e:	89db      	ldrh	r3, [r3, #14]
    9ca0:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    9ca2:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    9ca4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9ca8:	7d1b      	ldrb	r3, [r3, #20]
    9caa:	b133      	cbz	r3, 9cba <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    9cac:	462b      	mov	r3, r5
    9cae:	2200      	movs	r2, #0
    9cb0:	4611      	mov	r1, r2
    9cb2:	4620      	mov	r0, r4
    9cb4:	f7ff ff0f 	bl	9ad6 <att_handle_rsp>
}
    9cb8:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    9cba:	4629      	mov	r1, r5
    9cbc:	6820      	ldr	r0, [r4, #0]
    9cbe:	f7ff fe82 	bl	99c6 <att_change_security>
    9cc2:	2800      	cmp	r0, #0
    9cc4:	d1f2      	bne.n	9cac <att_error_rsp+0x28>
		att->req->retrying = true;
    9cc6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9cca:	2201      	movs	r2, #1
    9ccc:	751a      	strb	r2, [r3, #20]
		return 0;
    9cce:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    9cd0:	250e      	movs	r5, #14
    9cd2:	e7eb      	b.n	9cac <att_error_rsp+0x28>

00009cd4 <att_reset>:
{
    9cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd6:	b083      	sub	sp, #12
    9cd8:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    9cda:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9cde:	f3bf 8f5b 	dmb	ish
    9ce2:	e853 2f00 	ldrex	r2, [r3]
    9ce6:	f042 0204 	orr.w	r2, r2, #4
    9cea:	e843 2100 	strex	r1, r2, [r3]
    9cee:	2900      	cmp	r1, #0
    9cf0:	d1f7      	bne.n	9ce2 <att_reset+0xe>
    9cf2:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    9cf6:	2400      	movs	r4, #0
    9cf8:	e004      	b.n	9d04 <att_reset+0x30>
    9cfa:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    9cfe:	f01f fecc 	bl	29a9a <_impl_k_sem_give>
    9d02:	3401      	adds	r4, #1
    9d04:	2c01      	cmp	r4, #1
    9d06:	ddf8      	ble.n	9cfa <att_reset+0x26>
	return list->head;
    9d08:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9d0c:	b11d      	cbz	r5, 9d16 <att_reset+0x42>
    9d0e:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9d10:	b145      	cbz	r5, 9d24 <att_reset+0x50>
	return node->next;
    9d12:	682c      	ldr	r4, [r5, #0]
    9d14:	e006      	b.n	9d24 <att_reset+0x50>
    9d16:	462c      	mov	r4, r5
    9d18:	e004      	b.n	9d24 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9d1a:	4623      	mov	r3, r4
    9d1c:	e014      	b.n	9d48 <att_reset+0x74>
    9d1e:	4623      	mov	r3, r4
    9d20:	4625      	mov	r5, r4
    9d22:	461c      	mov	r4, r3
    9d24:	b1c5      	cbz	r5, 9d58 <att_reset+0x84>
		if (req->func) {
    9d26:	686e      	ldr	r6, [r5, #4]
    9d28:	b12e      	cbz	r6, 9d36 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    9d2a:	9500      	str	r5, [sp, #0]
    9d2c:	2300      	movs	r3, #0
    9d2e:	461a      	mov	r2, r3
    9d30:	210e      	movs	r1, #14
    9d32:	4618      	mov	r0, r3
    9d34:	47b0      	blx	r6
		att_req_destroy(req);
    9d36:	4628      	mov	r0, r5
    9d38:	f7ff fc34 	bl	95a4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9d3c:	2c00      	cmp	r4, #0
    9d3e:	d0ee      	beq.n	9d1e <att_reset+0x4a>
    9d40:	4622      	mov	r2, r4
    9d42:	2c00      	cmp	r4, #0
    9d44:	d0e9      	beq.n	9d1a <att_reset+0x46>
	return node->next;
    9d46:	6823      	ldr	r3, [r4, #0]
    9d48:	b113      	cbz	r3, 9d50 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9d4a:	b11a      	cbz	r2, 9d54 <att_reset+0x80>
	return node->next;
    9d4c:	6823      	ldr	r3, [r4, #0]
    9d4e:	e7e7      	b.n	9d20 <att_reset+0x4c>
    9d50:	2300      	movs	r3, #0
    9d52:	e7e5      	b.n	9d20 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9d54:	2300      	movs	r3, #0
    9d56:	e7e3      	b.n	9d20 <att_reset+0x4c>
	list->head = NULL;
    9d58:	2300      	movs	r3, #0
    9d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    9d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    9d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    9d66:	b12b      	cbz	r3, 9d74 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9d68:	230e      	movs	r3, #14
    9d6a:	2200      	movs	r2, #0
    9d6c:	4611      	mov	r1, r2
    9d6e:	4638      	mov	r0, r7
    9d70:	f7ff feb1 	bl	9ad6 <att_handle_rsp>
}
    9d74:	b003      	add	sp, #12
    9d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009d78 <bt_att_disconnected>:
{
    9d78:	b510      	push	{r4, lr}
    9d7a:	4604      	mov	r4, r0
	att_reset(att);
    9d7c:	f7ff ffaa 	bl	9cd4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9d80:	6820      	ldr	r0, [r4, #0]
    9d82:	f001 f93f 	bl	b004 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    9d86:	22ec      	movs	r2, #236	; 0xec
    9d88:	2100      	movs	r1, #0
    9d8a:	4620      	mov	r0, r4
    9d8c:	f020 fe58 	bl	2aa40 <memset>
    9d90:	bd10      	pop	{r4, pc}

00009d92 <att_timeout>:
{
    9d92:	b510      	push	{r4, lr}
    9d94:	4604      	mov	r4, r0
	att_reset(att);
    9d96:	38ac      	subs	r0, #172	; 0xac
    9d98:	f7ff ff9c 	bl	9cd4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9d9c:	f854 0cac 	ldr.w	r0, [r4, #-172]
    9da0:	f001 f930 	bl	b004 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9da4:	2300      	movs	r3, #0
    9da6:	f844 3cac 	str.w	r3, [r4, #-172]
    9daa:	bd10      	pop	{r4, pc}

00009dac <bt_att_create_pdu>:
{
    9dac:	b538      	push	{r3, r4, r5, lr}
    9dae:	460d      	mov	r5, r1
    9db0:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    9db2:	f7ff fbab 	bl	950c <att_chan_get>
	if (!att) {
    9db6:	b180      	cbz	r0, 9dda <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9db8:	3401      	adds	r4, #1
    9dba:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    9dbe:	429c      	cmp	r4, r3
    9dc0:	d80d      	bhi.n	9dde <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    9dc2:	2100      	movs	r1, #0
    9dc4:	4608      	mov	r0, r1
    9dc6:	f7fe fc6a 	bl	869e <bt_l2cap_create_pdu>
    9dca:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9dcc:	2101      	movs	r1, #1
    9dce:	3008      	adds	r0, #8
    9dd0:	f011 fb64 	bl	1b49c <net_buf_simple_add>
	hdr->code = op;
    9dd4:	7005      	strb	r5, [r0, #0]
}
    9dd6:	4620      	mov	r0, r4
    9dd8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    9dda:	2400      	movs	r4, #0
    9ddc:	e7fb      	b.n	9dd6 <bt_att_create_pdu+0x2a>
		return NULL;
    9dde:	2400      	movs	r4, #0
    9de0:	e7f9      	b.n	9dd6 <bt_att_create_pdu+0x2a>
	...

00009de4 <att_indicate>:
{
    9de4:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9de6:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9de8:	f101 0008 	add.w	r0, r1, #8
    9dec:	f011 fbb3 	bl	1b556 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    9df0:	2200      	movs	r2, #0
    9df2:	211e      	movs	r1, #30
    9df4:	4620      	mov	r0, r4
    9df6:	f7ff ffd9 	bl	9dac <bt_att_create_pdu>
	if (!buf) {
    9dfa:	b128      	cbz	r0, 9e08 <att_indicate+0x24>
    9dfc:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    9dfe:	4b03      	ldr	r3, [pc, #12]	; (9e0c <att_indicate+0x28>)
    9e00:	2104      	movs	r1, #4
    9e02:	4620      	mov	r0, r4
    9e04:	f7fe fce3 	bl	87ce <bt_l2cap_send_cb>
}
    9e08:	2000      	movs	r0, #0
    9e0a:	bd10      	pop	{r4, pc}
    9e0c:	00009607 	.word	0x00009607

00009e10 <att_mtu_req>:
{
    9e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9e14:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9e16:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    9e18:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9e1a:	2d16      	cmp	r5, #22
    9e1c:	d802      	bhi.n	9e24 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    9e1e:	2004      	movs	r0, #4
    9e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e24:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9e26:	2202      	movs	r2, #2
    9e28:	2103      	movs	r1, #3
    9e2a:	4638      	mov	r0, r7
    9e2c:	f7ff ffbe 	bl	9dac <bt_att_create_pdu>
	if (!pdu) {
    9e30:	4680      	mov	r8, r0
    9e32:	b1b8      	cbz	r0, 9e64 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    9e34:	2102      	movs	r1, #2
    9e36:	3008      	adds	r0, #8
    9e38:	f011 fb30 	bl	1b49c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9e3c:	2600      	movs	r6, #0
    9e3e:	2341      	movs	r3, #65	; 0x41
    9e40:	7003      	strb	r3, [r0, #0]
    9e42:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    9e44:	4b09      	ldr	r3, [pc, #36]	; (9e6c <att_mtu_req+0x5c>)
    9e46:	4642      	mov	r2, r8
    9e48:	2104      	movs	r1, #4
    9e4a:	4638      	mov	r0, r7
    9e4c:	f7fe fcbf 	bl	87ce <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    9e50:	2d41      	cmp	r5, #65	; 0x41
    9e52:	bf28      	it	cs
    9e54:	2541      	movcs	r5, #65	; 0x41
    9e56:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    9e5a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    9e5e:	4630      	mov	r0, r6
    9e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    9e64:	200e      	movs	r0, #14
}
    9e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e6a:	bf00      	nop
    9e6c:	000095cf 	.word	0x000095cf

00009e70 <send_err_rsp>:
	if (!req) {
    9e70:	b901      	cbnz	r1, 9e74 <send_err_rsp+0x4>
    9e72:	4770      	bx	lr
{
    9e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e78:	460f      	mov	r7, r1
    9e7a:	461d      	mov	r5, r3
    9e7c:	4616      	mov	r6, r2
    9e7e:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9e80:	2204      	movs	r2, #4
    9e82:	2101      	movs	r1, #1
    9e84:	f7ff ff92 	bl	9dac <bt_att_create_pdu>
	if (!buf) {
    9e88:	4680      	mov	r8, r0
    9e8a:	b168      	cbz	r0, 9ea8 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9e8c:	2104      	movs	r1, #4
    9e8e:	3008      	adds	r0, #8
    9e90:	f011 fb04 	bl	1b49c <net_buf_simple_add>
	rsp->request = req;
    9e94:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    9e96:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    9e9a:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9e9c:	4b03      	ldr	r3, [pc, #12]	; (9eac <send_err_rsp+0x3c>)
    9e9e:	4642      	mov	r2, r8
    9ea0:	2104      	movs	r1, #4
    9ea2:	4620      	mov	r0, r4
    9ea4:	f7fe fc93 	bl	87ce <bt_l2cap_send_cb>
    9ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eac:	000095cf 	.word	0x000095cf

00009eb0 <bt_att_recv>:
{
    9eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    9eb2:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9eb4:	898b      	ldrh	r3, [r1, #12]
    9eb6:	b903      	cbnz	r3, 9eba <bt_att_recv+0xa>
    9eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eba:	460e      	mov	r6, r1
    9ebc:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    9ebe:	2101      	movs	r1, #1
    9ec0:	f106 0008 	add.w	r0, r6, #8
    9ec4:	f011 fb37 	bl	1b536 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9ec8:	2300      	movs	r3, #0
    9eca:	2b1a      	cmp	r3, #26
    9ecc:	d822      	bhi.n	9f14 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    9ece:	782c      	ldrb	r4, [r5, #0]
    9ed0:	4a2c      	ldr	r2, [pc, #176]	; (9f84 <bt_att_recv+0xd4>)
    9ed2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    9ed6:	4294      	cmp	r4, r2
    9ed8:	d001      	beq.n	9ede <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9eda:	3301      	adds	r3, #1
    9edc:	e7f5      	b.n	9eca <bt_att_recv+0x1a>
			handler = &handlers[i];
    9ede:	4c29      	ldr	r4, [pc, #164]	; (9f84 <bt_att_recv+0xd4>)
    9ee0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    9ee4:	b1c4      	cbz	r4, 9f18 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    9ee6:	78a3      	ldrb	r3, [r4, #2]
    9ee8:	2b01      	cmp	r3, #1
    9eea:	d022      	beq.n	9f32 <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    9eec:	78a3      	ldrb	r3, [r4, #2]
    9eee:	2b05      	cmp	r3, #5
    9ef0:	d031      	beq.n	9f56 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    9ef2:	89b2      	ldrh	r2, [r6, #12]
    9ef4:	7863      	ldrb	r3, [r4, #1]
    9ef6:	429a      	cmp	r2, r3
    9ef8:	d23f      	bcs.n	9f7a <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    9efa:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    9efc:	78a2      	ldrb	r2, [r4, #2]
    9efe:	2a01      	cmp	r2, #1
    9f00:	d1da      	bne.n	9eb8 <bt_att_recv+0x8>
    9f02:	2800      	cmp	r0, #0
    9f04:	d0d8      	beq.n	9eb8 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9f06:	4603      	mov	r3, r0
    9f08:	2200      	movs	r2, #0
    9f0a:	7829      	ldrb	r1, [r5, #0]
    9f0c:	6838      	ldr	r0, [r7, #0]
    9f0e:	f7ff ffaf 	bl	9e70 <send_err_rsp>
    9f12:	e7d1      	b.n	9eb8 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9f14:	2400      	movs	r4, #0
    9f16:	e7e5      	b.n	9ee4 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9f18:	782c      	ldrb	r4, [r5, #0]
    9f1a:	4620      	mov	r0, r4
    9f1c:	f7ff fa86 	bl	942c <att_op_get_type>
    9f20:	2800      	cmp	r0, #0
    9f22:	d0c9      	beq.n	9eb8 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    9f24:	2306      	movs	r3, #6
    9f26:	2200      	movs	r2, #0
    9f28:	4621      	mov	r1, r4
    9f2a:	6838      	ldr	r0, [r7, #0]
    9f2c:	f7ff ffa0 	bl	9e70 <send_err_rsp>
    9f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    9f32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    9f36:	f3bf 8f5b 	dmb	ish
    9f3a:	e853 2f00 	ldrex	r2, [r3]
    9f3e:	f042 0101 	orr.w	r1, r2, #1
    9f42:	e843 1000 	strex	r0, r1, [r3]
    9f46:	2800      	cmp	r0, #0
    9f48:	d1f7      	bne.n	9f3a <bt_att_recv+0x8a>
    9f4a:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    9f4e:	f012 0f01 	tst.w	r2, #1
    9f52:	d0cb      	beq.n	9eec <bt_att_recv+0x3c>
    9f54:	e7b0      	b.n	9eb8 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    9f56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    9f5a:	f3bf 8f5b 	dmb	ish
    9f5e:	e853 2f00 	ldrex	r2, [r3]
    9f62:	f042 0102 	orr.w	r1, r2, #2
    9f66:	e843 1000 	strex	r0, r1, [r3]
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d1f7      	bne.n	9f5e <bt_att_recv+0xae>
    9f6e:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    9f72:	f012 0f02 	tst.w	r2, #2
    9f76:	d0bc      	beq.n	9ef2 <bt_att_recv+0x42>
    9f78:	e79e      	b.n	9eb8 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    9f7a:	6863      	ldr	r3, [r4, #4]
    9f7c:	4631      	mov	r1, r6
    9f7e:	4638      	mov	r0, r7
    9f80:	4798      	blx	r3
    9f82:	e7bb      	b.n	9efc <bt_att_recv+0x4c>
    9f84:	000317d0 	.word	0x000317d0

00009f88 <att_write_rsp>:
{
    9f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f8c:	b086      	sub	sp, #24
	if (!handle) {
    9f8e:	b923      	cbnz	r3, 9f9a <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    9f90:	2401      	movs	r4, #1
}
    9f92:	4620      	mov	r0, r4
    9f94:	b006      	add	sp, #24
    9f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f9a:	4698      	mov	r8, r3
    9f9c:	4617      	mov	r7, r2
    9f9e:	460e      	mov	r6, r1
    9fa0:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    9fa2:	2218      	movs	r2, #24
    9fa4:	2100      	movs	r1, #0
    9fa6:	4668      	mov	r0, sp
    9fa8:	f020 fd4a 	bl	2aa40 <memset>
	if (rsp) {
    9fac:	b137      	cbz	r7, 9fbc <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    9fae:	2200      	movs	r2, #0
    9fb0:	4639      	mov	r1, r7
    9fb2:	4628      	mov	r0, r5
    9fb4:	f7ff fefa 	bl	9dac <bt_att_create_pdu>
    9fb8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9fba:	b3a0      	cbz	r0, a026 <att_write_rsp+0x9e>
	data.conn = conn;
    9fbc:	9500      	str	r5, [sp, #0]
	data.op = op;
    9fbe:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    9fc2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9fc6:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9fcc:	9303      	str	r3, [sp, #12]
	data.len = len;
    9fce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    9fd2:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9fd6:	2301      	movs	r3, #1
    9fd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9fdc:	466b      	mov	r3, sp
    9fde:	4a13      	ldr	r2, [pc, #76]	; (a02c <att_write_rsp+0xa4>)
    9fe0:	4641      	mov	r1, r8
    9fe2:	4640      	mov	r0, r8
    9fe4:	f000 ff26 	bl	ae34 <bt_gatt_foreach_attr>
	if (data.err) {
    9fe8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9fec:	b194      	cbz	r4, a014 <att_write_rsp+0x8c>
		if (rsp) {
    9fee:	b91f      	cbnz	r7, 9ff8 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9ff0:	2e18      	cmp	r6, #24
    9ff2:	d00c      	beq.n	a00e <att_write_rsp+0x86>
    9ff4:	2400      	movs	r4, #0
    9ff6:	e7cc      	b.n	9f92 <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    9ff8:	9801      	ldr	r0, [sp, #4]
    9ffa:	f011 fa03 	bl	1b404 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    9ffe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a002:	4642      	mov	r2, r8
    a004:	4631      	mov	r1, r6
    a006:	4628      	mov	r0, r5
    a008:	f7ff ff32 	bl	9e70 <send_err_rsp>
    a00c:	e7f0      	b.n	9ff0 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    a00e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    a012:	e7be      	b.n	9f92 <att_write_rsp+0xa>
	if (data.buf) {
    a014:	9a01      	ldr	r2, [sp, #4]
    a016:	2a00      	cmp	r2, #0
    a018:	d0bb      	beq.n	9f92 <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    a01a:	4b05      	ldr	r3, [pc, #20]	; (a030 <att_write_rsp+0xa8>)
    a01c:	2104      	movs	r1, #4
    a01e:	4628      	mov	r0, r5
    a020:	f7fe fbd5 	bl	87ce <bt_l2cap_send_cb>
    a024:	e7b5      	b.n	9f92 <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    a026:	240e      	movs	r4, #14
    a028:	e7b3      	b.n	9f92 <att_write_rsp+0xa>
    a02a:	bf00      	nop
    a02c:	000093cf 	.word	0x000093cf
    a030:	000095cf 	.word	0x000095cf

0000a034 <att_signed_write_cmd>:
{
    a034:	b5f0      	push	{r4, r5, r6, r7, lr}
    a036:	b085      	sub	sp, #20
    a038:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a03a:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    a03c:	460c      	mov	r4, r1
    a03e:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    a042:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    a044:	2101      	movs	r1, #1
    a046:	4620      	mov	r0, r4
    a048:	f011 fa5f 	bl	1b50a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    a04c:	4629      	mov	r1, r5
    a04e:	4630      	mov	r0, r6
    a050:	f003 faf2 	bl	d638 <bt_smp_sign_verify>
	if (err) {
    a054:	b110      	cbz	r0, a05c <att_signed_write_cmd+0x28>
		return 0;
    a056:	2000      	movs	r0, #0
}
    a058:	b005      	add	sp, #20
    a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    a05c:	2101      	movs	r1, #1
    a05e:	4620      	mov	r0, r4
    a060:	f011 fa69 	bl	1b536 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    a064:	2102      	movs	r1, #2
    a066:	4620      	mov	r0, r4
    a068:	f011 fa65 	bl	1b536 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    a06c:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    a06e:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    a070:	3b0c      	subs	r3, #12
    a072:	b2db      	uxtb	r3, r3
    a074:	9302      	str	r3, [sp, #8]
    a076:	9201      	str	r2, [sp, #4]
    a078:	2100      	movs	r1, #0
    a07a:	9100      	str	r1, [sp, #0]
    a07c:	463b      	mov	r3, r7
    a07e:	460a      	mov	r2, r1
    a080:	4630      	mov	r0, r6
    a082:	f7ff ff81 	bl	9f88 <att_write_rsp>
    a086:	e7e7      	b.n	a058 <att_signed_write_cmd+0x24>

0000a088 <att_write_cmd>:
{
    a088:	b530      	push	{r4, r5, lr}
    a08a:	b085      	sub	sp, #20
    a08c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a08e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    a090:	f101 0008 	add.w	r0, r1, #8
    a094:	f011 fa5f 	bl	1b556 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    a098:	68a3      	ldr	r3, [r4, #8]
    a09a:	7b22      	ldrb	r2, [r4, #12]
    a09c:	9202      	str	r2, [sp, #8]
    a09e:	9301      	str	r3, [sp, #4]
    a0a0:	2100      	movs	r1, #0
    a0a2:	9100      	str	r1, [sp, #0]
    a0a4:	4603      	mov	r3, r0
    a0a6:	460a      	mov	r2, r1
    a0a8:	4628      	mov	r0, r5
    a0aa:	f7ff ff6d 	bl	9f88 <att_write_rsp>
}
    a0ae:	b005      	add	sp, #20
    a0b0:	bd30      	pop	{r4, r5, pc}

0000a0b2 <att_write_req>:
{
    a0b2:	b530      	push	{r4, r5, lr}
    a0b4:	b085      	sub	sp, #20
    a0b6:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a0b8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    a0ba:	f101 0008 	add.w	r0, r1, #8
    a0be:	f011 fa4a 	bl	1b556 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    a0c2:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    a0c4:	7b22      	ldrb	r2, [r4, #12]
    a0c6:	9202      	str	r2, [sp, #8]
    a0c8:	9301      	str	r3, [sp, #4]
    a0ca:	2300      	movs	r3, #0
    a0cc:	9300      	str	r3, [sp, #0]
    a0ce:	4603      	mov	r3, r0
    a0d0:	2213      	movs	r2, #19
    a0d2:	2112      	movs	r1, #18
    a0d4:	4628      	mov	r0, r5
    a0d6:	f7ff ff57 	bl	9f88 <att_write_rsp>
}
    a0da:	b005      	add	sp, #20
    a0dc:	bd30      	pop	{r4, r5, pc}
	...

0000a0e0 <att_read_group_rsp>:
{
    a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0e4:	b086      	sub	sp, #24
    a0e6:	4604      	mov	r4, r0
    a0e8:	4688      	mov	r8, r1
    a0ea:	4616      	mov	r6, r2
    a0ec:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    a0ee:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    a0f0:	2214      	movs	r2, #20
    a0f2:	2100      	movs	r1, #0
    a0f4:	a801      	add	r0, sp, #4
    a0f6:	f020 fca3 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    a0fa:	2201      	movs	r2, #1
    a0fc:	2111      	movs	r1, #17
    a0fe:	4628      	mov	r0, r5
    a100:	f7ff fe54 	bl	9dac <bt_att_create_pdu>
    a104:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    a106:	b328      	cbz	r0, a154 <att_read_group_rsp+0x74>
	data.att = att;
    a108:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    a10a:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a10e:	2101      	movs	r1, #1
    a110:	3008      	adds	r0, #8
    a112:	f011 f9c3 	bl	1b49c <net_buf_simple_add>
    a116:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    a118:	2300      	movs	r3, #0
    a11a:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    a11c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a11e:	ab01      	add	r3, sp, #4
    a120:	4a0f      	ldr	r2, [pc, #60]	; (a160 <att_read_group_rsp+0x80>)
    a122:	4639      	mov	r1, r7
    a124:	4630      	mov	r0, r6
    a126:	f000 fe85 	bl	ae34 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    a12a:	9b04      	ldr	r3, [sp, #16]
    a12c:	781c      	ldrb	r4, [r3, #0]
    a12e:	b13c      	cbz	r4, a140 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a130:	4b0c      	ldr	r3, [pc, #48]	; (a164 <att_read_group_rsp+0x84>)
    a132:	9a03      	ldr	r2, [sp, #12]
    a134:	2104      	movs	r1, #4
    a136:	4628      	mov	r0, r5
    a138:	f7fe fb49 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a13c:	2400      	movs	r4, #0
    a13e:	e00a      	b.n	a156 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    a140:	9803      	ldr	r0, [sp, #12]
    a142:	f011 f95f 	bl	1b404 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    a146:	230a      	movs	r3, #10
    a148:	4632      	mov	r2, r6
    a14a:	2110      	movs	r1, #16
    a14c:	4628      	mov	r0, r5
    a14e:	f7ff fe8f 	bl	9e70 <send_err_rsp>
		return 0;
    a152:	e000      	b.n	a156 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    a154:	240e      	movs	r4, #14
}
    a156:	4620      	mov	r0, r4
    a158:	b006      	add	sp, #24
    a15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a15e:	bf00      	nop
    a160:	00009669 	.word	0x00009669
    a164:	000095cf 	.word	0x000095cf

0000a168 <att_read_group_req>:
{
    a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a16c:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    a16e:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    a170:	898b      	ldrh	r3, [r1, #12]
    a172:	2b06      	cmp	r3, #6
    a174:	d005      	beq.n	a182 <att_read_group_req+0x1a>
    a176:	2b14      	cmp	r3, #20
    a178:	d003      	beq.n	a182 <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    a17a:	2004      	movs	r0, #4
}
    a17c:	b008      	add	sp, #32
    a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a182:	460c      	mov	r4, r1
    a184:	4605      	mov	r5, r0
	req = (void *)buf->data;
    a186:	4608      	mov	r0, r1
    a188:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    a18c:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a18e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    a192:	2104      	movs	r1, #4
    a194:	f011 f9cf 	bl	1b536 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    a198:	4621      	mov	r1, r4
    a19a:	a801      	add	r0, sp, #4
    a19c:	f7ff fb3c 	bl	9818 <uuid_create>
    a1a0:	b908      	cbnz	r0, a1a6 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    a1a2:	200e      	movs	r0, #14
    a1a4:	e7ea      	b.n	a17c <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    a1a6:	f10d 0216 	add.w	r2, sp, #22
    a1aa:	4641      	mov	r1, r8
    a1ac:	4638      	mov	r0, r7
    a1ae:	f7ff f8c4 	bl	933a <range_is_valid>
    a1b2:	b1f0      	cbz	r0, a1f2 <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a1b4:	2300      	movs	r3, #0
    a1b6:	f88d 3018 	strb.w	r3, [sp, #24]
    a1ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a1be:	f8ad 301a 	strh.w	r3, [sp, #26]
    a1c2:	a906      	add	r1, sp, #24
    a1c4:	a801      	add	r0, sp, #4
    a1c6:	f7fa fdee 	bl	4da6 <bt_uuid_cmp>
    a1ca:	b158      	cbz	r0, a1e4 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    a1cc:	2300      	movs	r3, #0
    a1ce:	f88d 301c 	strb.w	r3, [sp, #28]
    a1d2:	f642 0301 	movw	r3, #10241	; 0x2801
    a1d6:	f8ad 301e 	strh.w	r3, [sp, #30]
    a1da:	a907      	add	r1, sp, #28
    a1dc:	a801      	add	r0, sp, #4
    a1de:	f7fa fde2 	bl	4da6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a1e2:	b978      	cbnz	r0, a204 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    a1e4:	4643      	mov	r3, r8
    a1e6:	463a      	mov	r2, r7
    a1e8:	a901      	add	r1, sp, #4
    a1ea:	4628      	mov	r0, r5
    a1ec:	f7ff ff78 	bl	a0e0 <att_read_group_rsp>
    a1f0:	e7c4      	b.n	a17c <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    a1f2:	2301      	movs	r3, #1
    a1f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a1f8:	2110      	movs	r1, #16
    a1fa:	4630      	mov	r0, r6
    a1fc:	f7ff fe38 	bl	9e70 <send_err_rsp>
		return 0;
    a200:	2000      	movs	r0, #0
    a202:	e7bb      	b.n	a17c <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    a204:	2310      	movs	r3, #16
    a206:	463a      	mov	r2, r7
    a208:	4619      	mov	r1, r3
    a20a:	4630      	mov	r0, r6
    a20c:	f7ff fe30 	bl	9e70 <send_err_rsp>
		return 0;
    a210:	2000      	movs	r0, #0
    a212:	e7b3      	b.n	a17c <att_read_group_req+0x14>

0000a214 <att_read_mult_req>:
{
    a214:	b570      	push	{r4, r5, r6, lr}
    a216:	b086      	sub	sp, #24
    a218:	4605      	mov	r5, r0
    a21a:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a21c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    a21e:	2214      	movs	r2, #20
    a220:	2100      	movs	r1, #0
    a222:	a801      	add	r0, sp, #4
    a224:	f020 fc0c 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a228:	2200      	movs	r2, #0
    a22a:	210f      	movs	r1, #15
    a22c:	4630      	mov	r0, r6
    a22e:	f7ff fdbd 	bl	9dac <bt_att_create_pdu>
    a232:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    a234:	b348      	cbz	r0, a28a <att_read_mult_req+0x76>
	data.att = att;
    a236:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    a238:	89a3      	ldrh	r3, [r4, #12]
    a23a:	2b01      	cmp	r3, #1
    a23c:	d91c      	bls.n	a278 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    a23e:	f104 0008 	add.w	r0, r4, #8
    a242:	f011 f988 	bl	1b556 <net_buf_simple_pull_le16>
    a246:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a248:	2301      	movs	r3, #1
    a24a:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a24e:	ab01      	add	r3, sp, #4
    a250:	4a0f      	ldr	r2, [pc, #60]	; (a290 <att_read_mult_req+0x7c>)
    a252:	4601      	mov	r1, r0
    a254:	f000 fdee 	bl	ae34 <bt_gatt_foreach_attr>
		if (data.err) {
    a258:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a25c:	2b00      	cmp	r3, #0
    a25e:	d0eb      	beq.n	a238 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    a260:	9803      	ldr	r0, [sp, #12]
    a262:	f011 f8cf 	bl	1b404 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    a266:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a26a:	462a      	mov	r2, r5
    a26c:	210e      	movs	r1, #14
    a26e:	4630      	mov	r0, r6
    a270:	f7ff fdfe 	bl	9e70 <send_err_rsp>
			return 0;
    a274:	2000      	movs	r0, #0
    a276:	e006      	b.n	a286 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a278:	4b06      	ldr	r3, [pc, #24]	; (a294 <att_read_mult_req+0x80>)
    a27a:	9a03      	ldr	r2, [sp, #12]
    a27c:	2104      	movs	r1, #4
    a27e:	4630      	mov	r0, r6
    a280:	f7fe faa5 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a284:	2000      	movs	r0, #0
}
    a286:	b006      	add	sp, #24
    a288:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    a28a:	200e      	movs	r0, #14
    a28c:	e7fb      	b.n	a286 <att_read_mult_req+0x72>
    a28e:	bf00      	nop
    a290:	00009499 	.word	0x00009499
    a294:	000095cf 	.word	0x000095cf

0000a298 <att_read_rsp>:
{
    a298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a29c:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    a29e:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    a2a0:	b923      	cbnz	r3, a2ac <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    a2a2:	2401      	movs	r4, #1
}
    a2a4:	4620      	mov	r0, r4
    a2a6:	b006      	add	sp, #24
    a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2ac:	461d      	mov	r5, r3
    a2ae:	4616      	mov	r6, r2
    a2b0:	4688      	mov	r8, r1
    a2b2:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    a2b4:	2214      	movs	r2, #20
    a2b6:	2100      	movs	r1, #0
    a2b8:	a801      	add	r0, sp, #4
    a2ba:	f020 fbc1 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a2be:	2200      	movs	r2, #0
    a2c0:	4631      	mov	r1, r6
    a2c2:	4638      	mov	r0, r7
    a2c4:	f7ff fd72 	bl	9dac <bt_att_create_pdu>
    a2c8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    a2ca:	b318      	cbz	r0, a314 <att_read_rsp+0x7c>
	data.att = att;
    a2cc:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    a2ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    a2d2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a2d6:	2301      	movs	r3, #1
    a2d8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a2dc:	ab01      	add	r3, sp, #4
    a2de:	4a0e      	ldr	r2, [pc, #56]	; (a318 <att_read_rsp+0x80>)
    a2e0:	4629      	mov	r1, r5
    a2e2:	4628      	mov	r0, r5
    a2e4:	f000 fda6 	bl	ae34 <bt_gatt_foreach_attr>
	if (data.err) {
    a2e8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    a2ec:	b934      	cbnz	r4, a2fc <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a2ee:	4b0b      	ldr	r3, [pc, #44]	; (a31c <att_read_rsp+0x84>)
    a2f0:	9a03      	ldr	r2, [sp, #12]
    a2f2:	2104      	movs	r1, #4
    a2f4:	4638      	mov	r0, r7
    a2f6:	f7fe fa6a 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a2fa:	e7d3      	b.n	a2a4 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    a2fc:	9803      	ldr	r0, [sp, #12]
    a2fe:	f011 f881 	bl	1b404 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    a302:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a306:	462a      	mov	r2, r5
    a308:	4641      	mov	r1, r8
    a30a:	4638      	mov	r0, r7
    a30c:	f7ff fdb0 	bl	9e70 <send_err_rsp>
		return 0;
    a310:	2400      	movs	r4, #0
    a312:	e7c7      	b.n	a2a4 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    a314:	240e      	movs	r4, #14
    a316:	e7c5      	b.n	a2a4 <att_read_rsp+0xc>
    a318:	00009499 	.word	0x00009499
    a31c:	000095cf 	.word	0x000095cf

0000a320 <att_read_blob_req>:
{
    a320:	b500      	push	{lr}
    a322:	b083      	sub	sp, #12
	req = (void *)buf->data;
    a324:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    a326:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    a328:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    a32a:	9200      	str	r2, [sp, #0]
    a32c:	220d      	movs	r2, #13
    a32e:	210c      	movs	r1, #12
    a330:	f7ff ffb2 	bl	a298 <att_read_rsp>
}
    a334:	b003      	add	sp, #12
    a336:	f85d fb04 	ldr.w	pc, [sp], #4

0000a33a <att_read_req>:
{
    a33a:	b500      	push	{lr}
    a33c:	b083      	sub	sp, #12
	req = (void *)buf->data;
    a33e:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    a340:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    a342:	2200      	movs	r2, #0
    a344:	9200      	str	r2, [sp, #0]
    a346:	220b      	movs	r2, #11
    a348:	210a      	movs	r1, #10
    a34a:	f7ff ffa5 	bl	a298 <att_read_rsp>
}
    a34e:	b003      	add	sp, #12
    a350:	f85d fb04 	ldr.w	pc, [sp], #4

0000a354 <att_read_type_rsp>:
{
    a354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a358:	b086      	sub	sp, #24
    a35a:	4604      	mov	r4, r0
    a35c:	4688      	mov	r8, r1
    a35e:	4616      	mov	r6, r2
    a360:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    a362:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    a364:	2218      	movs	r2, #24
    a366:	2100      	movs	r1, #0
    a368:	4668      	mov	r0, sp
    a36a:	f020 fb69 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a36e:	2201      	movs	r2, #1
    a370:	2109      	movs	r1, #9
    a372:	4628      	mov	r0, r5
    a374:	f7ff fd1a 	bl	9dac <bt_att_create_pdu>
    a378:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a37a:	b340      	cbz	r0, a3ce <att_read_type_rsp+0x7a>
	data.att = att;
    a37c:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    a37e:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a382:	2101      	movs	r1, #1
    a384:	3008      	adds	r0, #8
    a386:	f011 f889 	bl	1b49c <net_buf_simple_add>
    a38a:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    a38c:	2300      	movs	r3, #0
    a38e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a390:	230a      	movs	r3, #10
    a392:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a396:	466b      	mov	r3, sp
    a398:	4a0f      	ldr	r2, [pc, #60]	; (a3d8 <att_read_type_rsp+0x84>)
    a39a:	4639      	mov	r1, r7
    a39c:	4630      	mov	r0, r6
    a39e:	f000 fd49 	bl	ae34 <bt_gatt_foreach_attr>
	if (data.err) {
    a3a2:	f89d 4014 	ldrb.w	r4, [sp, #20]
    a3a6:	b934      	cbnz	r4, a3b6 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a3a8:	4b0c      	ldr	r3, [pc, #48]	; (a3dc <att_read_type_rsp+0x88>)
    a3aa:	9a02      	ldr	r2, [sp, #8]
    a3ac:	2104      	movs	r1, #4
    a3ae:	4628      	mov	r0, r5
    a3b0:	f7fe fa0d 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a3b4:	e00c      	b.n	a3d0 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    a3b6:	9802      	ldr	r0, [sp, #8]
    a3b8:	f011 f824 	bl	1b404 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    a3bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a3c0:	4632      	mov	r2, r6
    a3c2:	2108      	movs	r1, #8
    a3c4:	4628      	mov	r0, r5
    a3c6:	f7ff fd53 	bl	9e70 <send_err_rsp>
		return 0;
    a3ca:	2400      	movs	r4, #0
    a3cc:	e000      	b.n	a3d0 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    a3ce:	240e      	movs	r4, #14
}
    a3d0:	4620      	mov	r0, r4
    a3d2:	b006      	add	sp, #24
    a3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3d8:	00009757 	.word	0x00009757
    a3dc:	000095cf 	.word	0x000095cf

0000a3e0 <att_read_type_req>:
{
    a3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3e4:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    a3e6:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    a3e8:	898b      	ldrh	r3, [r1, #12]
    a3ea:	2b06      	cmp	r3, #6
    a3ec:	d005      	beq.n	a3fa <att_read_type_req+0x1a>
    a3ee:	2b14      	cmp	r3, #20
    a3f0:	d003      	beq.n	a3fa <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    a3f2:	2004      	movs	r0, #4
}
    a3f4:	b006      	add	sp, #24
    a3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3fa:	460c      	mov	r4, r1
    a3fc:	4605      	mov	r5, r0
	req = (void *)buf->data;
    a3fe:	4608      	mov	r0, r1
    a400:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    a404:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a406:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    a40a:	2104      	movs	r1, #4
    a40c:	f011 f893 	bl	1b536 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    a410:	4621      	mov	r1, r4
    a412:	a801      	add	r0, sp, #4
    a414:	f7ff fa00 	bl	9818 <uuid_create>
    a418:	b908      	cbnz	r0, a41e <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    a41a:	200e      	movs	r0, #14
    a41c:	e7ea      	b.n	a3f4 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    a41e:	f10d 0216 	add.w	r2, sp, #22
    a422:	4641      	mov	r1, r8
    a424:	4638      	mov	r0, r7
    a426:	f7fe ff88 	bl	933a <range_is_valid>
    a42a:	b130      	cbz	r0, a43a <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    a42c:	4643      	mov	r3, r8
    a42e:	463a      	mov	r2, r7
    a430:	a901      	add	r1, sp, #4
    a432:	4628      	mov	r0, r5
    a434:	f7ff ff8e 	bl	a354 <att_read_type_rsp>
    a438:	e7dc      	b.n	a3f4 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    a43a:	2301      	movs	r3, #1
    a43c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a440:	2108      	movs	r1, #8
    a442:	4630      	mov	r0, r6
    a444:	f7ff fd14 	bl	9e70 <send_err_rsp>
		return 0;
    a448:	2000      	movs	r0, #0
    a44a:	e7d3      	b.n	a3f4 <att_read_type_req+0x14>

0000a44c <att_find_type_rsp>:
{
    a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a450:	b086      	sub	sp, #24
    a452:	4604      	mov	r4, r0
    a454:	460e      	mov	r6, r1
    a456:	4617      	mov	r7, r2
    a458:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    a45a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    a45c:	2214      	movs	r2, #20
    a45e:	2100      	movs	r1, #0
    a460:	a801      	add	r0, sp, #4
    a462:	f020 faed 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a466:	2200      	movs	r2, #0
    a468:	2107      	movs	r1, #7
    a46a:	4628      	mov	r0, r5
    a46c:	f7ff fc9e 	bl	9dac <bt_att_create_pdu>
    a470:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a472:	b338      	cbz	r0, a4c4 <att_find_type_rsp+0x78>
	data.att = att;
    a474:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    a476:	2300      	movs	r3, #0
    a478:	9303      	str	r3, [sp, #12]
	data.value = value;
    a47a:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    a47e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a482:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a486:	230a      	movs	r3, #10
    a488:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a48c:	ab01      	add	r3, sp, #4
    a48e:	4a10      	ldr	r2, [pc, #64]	; (a4d0 <att_find_type_rsp+0x84>)
    a490:	4639      	mov	r1, r7
    a492:	4630      	mov	r0, r6
    a494:	f000 fcce 	bl	ae34 <bt_gatt_foreach_attr>
	if (data.err) {
    a498:	f89d 4015 	ldrb.w	r4, [sp, #21]
    a49c:	b934      	cbnz	r4, a4ac <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a49e:	4b0d      	ldr	r3, [pc, #52]	; (a4d4 <att_find_type_rsp+0x88>)
    a4a0:	9a02      	ldr	r2, [sp, #8]
    a4a2:	2104      	movs	r1, #4
    a4a4:	4628      	mov	r0, r5
    a4a6:	f7fe f992 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a4aa:	e00c      	b.n	a4c6 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    a4ac:	9802      	ldr	r0, [sp, #8]
    a4ae:	f010 ffa9 	bl	1b404 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    a4b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a4b6:	4632      	mov	r2, r6
    a4b8:	2106      	movs	r1, #6
    a4ba:	4628      	mov	r0, r5
    a4bc:	f7ff fcd8 	bl	9e70 <send_err_rsp>
		return 0;
    a4c0:	2400      	movs	r4, #0
    a4c2:	e000      	b.n	a4c6 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    a4c4:	240e      	movs	r4, #14
}
    a4c6:	4620      	mov	r0, r4
    a4c8:	b006      	add	sp, #24
    a4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4ce:	bf00      	nop
    a4d0:	000098ff 	.word	0x000098ff
    a4d4:	000095cf 	.word	0x000095cf

0000a4d8 <att_find_type_req>:
{
    a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4dc:	b084      	sub	sp, #16
    a4de:	4605      	mov	r5, r0
    a4e0:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a4e2:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    a4e6:	4608      	mov	r0, r1
    a4e8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    a4ec:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a4ee:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    a4f0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    a4f4:	2106      	movs	r1, #6
    a4f6:	f011 f81e 	bl	1b536 <net_buf_simple_pull>
    a4fa:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    a4fc:	f10d 020e 	add.w	r2, sp, #14
    a500:	4631      	mov	r1, r6
    a502:	4620      	mov	r0, r4
    a504:	f7fe ff19 	bl	933a <range_is_valid>
    a508:	b160      	cbz	r0, a524 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    a50a:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    a50e:	d012      	beq.n	a536 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    a510:	230a      	movs	r3, #10
    a512:	4622      	mov	r2, r4
    a514:	2106      	movs	r1, #6
    a516:	4648      	mov	r0, r9
    a518:	f7ff fcaa 	bl	9e70 <send_err_rsp>
		return 0;
    a51c:	2000      	movs	r0, #0
}
    a51e:	b004      	add	sp, #16
    a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    a524:	2301      	movs	r3, #1
    a526:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    a52a:	2106      	movs	r1, #6
    a52c:	4648      	mov	r0, r9
    a52e:	f7ff fc9f 	bl	9e70 <send_err_rsp>
		return 0;
    a532:	2000      	movs	r0, #0
    a534:	e7f3      	b.n	a51e <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a536:	7b3b      	ldrb	r3, [r7, #12]
    a538:	9300      	str	r3, [sp, #0]
    a53a:	4653      	mov	r3, sl
    a53c:	4632      	mov	r2, r6
    a53e:	4621      	mov	r1, r4
    a540:	4628      	mov	r0, r5
    a542:	f7ff ff83 	bl	a44c <att_find_type_rsp>
    a546:	e7ea      	b.n	a51e <att_find_type_req+0x46>

0000a548 <att_find_info_rsp>:
{
    a548:	b5f0      	push	{r4, r5, r6, r7, lr}
    a54a:	b085      	sub	sp, #20
    a54c:	4605      	mov	r5, r0
    a54e:	460e      	mov	r6, r1
    a550:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    a552:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    a554:	2210      	movs	r2, #16
    a556:	2100      	movs	r1, #0
    a558:	4668      	mov	r0, sp
    a55a:	f020 fa71 	bl	2aa40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a55e:	2200      	movs	r2, #0
    a560:	2105      	movs	r1, #5
    a562:	4620      	mov	r0, r4
    a564:	f7ff fc22 	bl	9dac <bt_att_create_pdu>
    a568:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    a56a:	b1e8      	cbz	r0, a5a8 <att_find_info_rsp+0x60>
	data.att = att;
    a56c:	ab04      	add	r3, sp, #16
    a56e:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a572:	4a0e      	ldr	r2, [pc, #56]	; (a5ac <att_find_info_rsp+0x64>)
    a574:	4639      	mov	r1, r7
    a576:	4630      	mov	r0, r6
    a578:	f000 fc5c 	bl	ae34 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a57c:	9b02      	ldr	r3, [sp, #8]
    a57e:	b143      	cbz	r3, a592 <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a580:	4b0b      	ldr	r3, [pc, #44]	; (a5b0 <att_find_info_rsp+0x68>)
    a582:	9a01      	ldr	r2, [sp, #4]
    a584:	2104      	movs	r1, #4
    a586:	4620      	mov	r0, r4
    a588:	f7fe f921 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    a58c:	2000      	movs	r0, #0
}
    a58e:	b005      	add	sp, #20
    a590:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    a592:	9801      	ldr	r0, [sp, #4]
    a594:	f010 ff36 	bl	1b404 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    a598:	230a      	movs	r3, #10
    a59a:	4632      	mov	r2, r6
    a59c:	2104      	movs	r1, #4
    a59e:	4620      	mov	r0, r4
    a5a0:	f7ff fc66 	bl	9e70 <send_err_rsp>
		return 0;
    a5a4:	2000      	movs	r0, #0
    a5a6:	e7f2      	b.n	a58e <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a5a8:	200e      	movs	r0, #14
    a5aa:	e7f0      	b.n	a58e <att_find_info_rsp+0x46>
    a5ac:	0000984f 	.word	0x0000984f
    a5b0:	000095cf 	.word	0x000095cf

0000a5b4 <att_find_info_req>:
{
    a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5b6:	b083      	sub	sp, #12
    a5b8:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    a5ba:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    a5bc:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a5be:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a5c0:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    a5c2:	f10d 0206 	add.w	r2, sp, #6
    a5c6:	4631      	mov	r1, r6
    a5c8:	4628      	mov	r0, r5
    a5ca:	f7fe feb6 	bl	933a <range_is_valid>
    a5ce:	b130      	cbz	r0, a5de <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    a5d0:	4632      	mov	r2, r6
    a5d2:	4629      	mov	r1, r5
    a5d4:	4620      	mov	r0, r4
    a5d6:	f7ff ffb7 	bl	a548 <att_find_info_rsp>
}
    a5da:	b003      	add	sp, #12
    a5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    a5de:	2301      	movs	r3, #1
    a5e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a5e4:	2104      	movs	r1, #4
    a5e6:	4638      	mov	r0, r7
    a5e8:	f7ff fc42 	bl	9e70 <send_err_rsp>
		return 0;
    a5ec:	2000      	movs	r0, #0
    a5ee:	e7f4      	b.n	a5da <att_find_info_req+0x26>

0000a5f0 <bt_att_init>:

void bt_att_init(void)
{
    a5f0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    a5f2:	4803      	ldr	r0, [pc, #12]	; (a600 <bt_att_init+0x10>)
    a5f4:	f7fd ff44 	bl	8480 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    a5f8:	f000 fb3c 	bl	ac74 <bt_gatt_init>
    a5fc:	bd08      	pop	{r3, pc}
    a5fe:	bf00      	nop
    a600:	2000bf70 	.word	0x2000bf70

0000a604 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    a606:	2800      	cmp	r0, #0
    a608:	d043      	beq.n	a692 <bt_att_send+0x8e>
    a60a:	4606      	mov	r6, r0
    a60c:	2900      	cmp	r1, #0
    a60e:	d043      	beq.n	a698 <bt_att_send+0x94>
    a610:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    a612:	f7fe ff7b 	bl	950c <att_chan_get>
	if (!att) {
    a616:	4605      	mov	r5, r0
    a618:	2800      	cmp	r0, #0
    a61a:	d040      	beq.n	a69e <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    a61c:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    a620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a624:	4638      	mov	r0, r7
    a626:	f01f fa4b 	bl	29ac0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    a62a:	682b      	ldr	r3, [r5, #0]
    a62c:	7b1b      	ldrb	r3, [r3, #12]
    a62e:	2b03      	cmp	r3, #3
    a630:	d011      	beq.n	a656 <bt_att_send+0x52>
    a632:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    a634:	b1e3      	cbz	r3, a670 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    a636:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a638:	781b      	ldrb	r3, [r3, #0]
    a63a:	2bd2      	cmp	r3, #210	; 0xd2
    a63c:	d01e      	beq.n	a67c <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    a63e:	4620      	mov	r0, r4
    a640:	f7fe ff0c 	bl	945c <att_cb>
    a644:	4603      	mov	r3, r0
    a646:	4622      	mov	r2, r4
    a648:	2104      	movs	r1, #4
    a64a:	4630      	mov	r0, r6
    a64c:	f7fe f8bf 	bl	87ce <bt_l2cap_send_cb>

	return 0;
    a650:	2500      	movs	r5, #0
}
    a652:	4628      	mov	r0, r5
    a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a656:	f3bf 8f5b 	dmb	ish
    a65a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    a65e:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    a662:	f013 0f04 	tst.w	r3, #4
    a666:	d101      	bne.n	a66c <bt_att_send+0x68>
    a668:	2301      	movs	r3, #1
    a66a:	e7e3      	b.n	a634 <bt_att_send+0x30>
    a66c:	2300      	movs	r3, #0
    a66e:	e7e1      	b.n	a634 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a670:	4638      	mov	r0, r7
    a672:	f01f fa12 	bl	29a9a <_impl_k_sem_give>
		return -ENOTCONN;
    a676:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    a67a:	e7ea      	b.n	a652 <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    a67c:	4621      	mov	r1, r4
    a67e:	4630      	mov	r0, r6
    a680:	f003 f81a 	bl	d6b8 <bt_smp_sign>
		if (err) {
    a684:	4605      	mov	r5, r0
    a686:	2800      	cmp	r0, #0
    a688:	d0d9      	beq.n	a63e <bt_att_send+0x3a>
    a68a:	4638      	mov	r0, r7
    a68c:	f01f fa05 	bl	29a9a <_impl_k_sem_give>
			return err;
    a690:	e7df      	b.n	a652 <bt_att_send+0x4e>
		return -EINVAL;
    a692:	f06f 0515 	mvn.w	r5, #21
    a696:	e7dc      	b.n	a652 <bt_att_send+0x4e>
    a698:	f06f 0515 	mvn.w	r5, #21
    a69c:	e7d9      	b.n	a652 <bt_att_send+0x4e>
		return -ENOTCONN;
    a69e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    a6a2:	e7d6      	b.n	a652 <bt_att_send+0x4e>

0000a6a4 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    a6a4:	b1e0      	cbz	r0, a6e0 <bt_att_req_send+0x3c>
    a6a6:	b1f1      	cbz	r1, a6e6 <bt_att_req_send+0x42>
{
    a6a8:	b510      	push	{r4, lr}
    a6aa:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    a6ac:	f7fe ff2e 	bl	950c <att_chan_get>
	if (!att) {
    a6b0:	b1e0      	cbz	r0, a6ec <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    a6b2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a6b6:	b17a      	cbz	r2, a6d8 <bt_att_req_send+0x34>
	node->next = NULL;
    a6b8:	2200      	movs	r2, #0
    a6ba:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    a6bc:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    a6c0:	b122      	cbz	r2, a6cc <bt_att_req_send+0x28>
		list->tail->next = node;
    a6c2:	6014      	str	r4, [r2, #0]
		list->tail = node;
    a6c4:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    a6c8:	2000      	movs	r0, #0
    a6ca:	bd10      	pop	{r4, pc}
		list->tail = node;
    a6cc:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    a6d0:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    a6d4:	2000      	movs	r0, #0
    a6d6:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    a6d8:	4621      	mov	r1, r4
    a6da:	f7ff f9ad 	bl	9a38 <att_send_req>
    a6de:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a6e0:	f06f 0015 	mvn.w	r0, #21
    a6e4:	4770      	bx	lr
    a6e6:	f06f 0015 	mvn.w	r0, #21
    a6ea:	4770      	bx	lr
		return -ENOTCONN;
    a6ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    a6f0:	bd10      	pop	{r4, pc}

0000a6f2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    a6f2:	4770      	bx	lr

0000a6f4 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    a6f4:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    a6f6:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    a6f8:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    a6fa:	4a1c      	ldr	r2, [pc, #112]	; (a76c <gatt_register+0x78>)
    a6fc:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    a6fe:	b172      	cbz	r2, a71e <gatt_register+0x2a>
	return list->tail;
    a700:	4a1a      	ldr	r2, [pc, #104]	; (a76c <gatt_register+0x78>)
    a702:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a704:	b14a      	cbz	r2, a71a <gatt_register+0x26>
    a706:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    a708:	6815      	ldr	r5, [r2, #0]
    a70a:	8892      	ldrh	r2, [r2, #4]
    a70c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a710:	0091      	lsls	r1, r2, #2
    a712:	3914      	subs	r1, #20
    a714:	4429      	add	r1, r5
    a716:	8a0a      	ldrh	r2, [r1, #16]
    a718:	e009      	b.n	a72e <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a71a:	2200      	movs	r2, #0
    a71c:	e7f4      	b.n	a708 <gatt_register+0x14>
		handle = 0;
    a71e:	2200      	movs	r2, #0
    a720:	e005      	b.n	a72e <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    a722:	428a      	cmp	r2, r1
    a724:	d21e      	bcs.n	a764 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    a726:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    a728:	3414      	adds	r4, #20
    a72a:	3b01      	subs	r3, #1
    a72c:	b29b      	uxth	r3, r3
    a72e:	b13c      	cbz	r4, a740 <gatt_register+0x4c>
    a730:	b133      	cbz	r3, a740 <gatt_register+0x4c>
		if (!attrs->handle) {
    a732:	8a21      	ldrh	r1, [r4, #16]
    a734:	2900      	cmp	r1, #0
    a736:	d1f4      	bne.n	a722 <gatt_register+0x2e>
			attrs->handle = ++handle;
    a738:	3201      	adds	r2, #1
    a73a:	b292      	uxth	r2, r2
    a73c:	8222      	strh	r2, [r4, #16]
    a73e:	e7f3      	b.n	a728 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    a740:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    a744:	2200      	movs	r2, #0
    a746:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    a748:	4a08      	ldr	r2, [pc, #32]	; (a76c <gatt_register+0x78>)
    a74a:	6852      	ldr	r2, [r2, #4]
    a74c:	b12a      	cbz	r2, a75a <gatt_register+0x66>
		list->tail->next = node;
    a74e:	6013      	str	r3, [r2, #0]
		list->tail = node;
    a750:	4a06      	ldr	r2, [pc, #24]	; (a76c <gatt_register+0x78>)
    a752:	6053      	str	r3, [r2, #4]

	return 0;
    a754:	2000      	movs	r0, #0
}
    a756:	bc30      	pop	{r4, r5}
    a758:	4770      	bx	lr
		list->tail = node;
    a75a:	4a04      	ldr	r2, [pc, #16]	; (a76c <gatt_register+0x78>)
    a75c:	6053      	str	r3, [r2, #4]
		list->head = node;
    a75e:	6013      	str	r3, [r2, #0]
	return 0;
    a760:	2000      	movs	r0, #0
    a762:	e7f8      	b.n	a756 <gatt_register+0x62>
			return -EINVAL;
    a764:	f06f 0015 	mvn.w	r0, #21
    a768:	e7f5      	b.n	a756 <gatt_register+0x62>
    a76a:	bf00      	nop
    a76c:	20000c98 	.word	0x20000c98

0000a770 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    a770:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    a772:	8804      	ldrh	r4, [r0, #0]
    a774:	4294      	cmp	r4, r2
    a776:	d802      	bhi.n	a77e <update_range+0xe>
    a778:	880d      	ldrh	r5, [r1, #0]
    a77a:	429d      	cmp	r5, r3
    a77c:	d209      	bcs.n	a792 <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    a77e:	4294      	cmp	r4, r2
    a780:	d900      	bls.n	a784 <update_range+0x14>
		*start = new_start;
    a782:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    a784:	880a      	ldrh	r2, [r1, #0]
    a786:	4293      	cmp	r3, r2
    a788:	d905      	bls.n	a796 <update_range+0x26>
		*end = new_end;
    a78a:	800b      	strh	r3, [r1, #0]
	}

	return true;
    a78c:	2001      	movs	r0, #1
}
    a78e:	bc30      	pop	{r4, r5}
    a790:	4770      	bx	lr
		return false;
    a792:	2000      	movs	r0, #0
    a794:	e7fb      	b.n	a78e <update_range+0x1e>
	return true;
    a796:	2001      	movs	r0, #1
    a798:	e7f9      	b.n	a78e <update_range+0x1e>

0000a79a <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    a79a:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    a79c:	2000      	movs	r0, #0
    a79e:	4770      	bx	lr

0000a7a0 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    a7a0:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    a7a2:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    a7a4:	4623      	mov	r3, r4
    a7a6:	e000      	b.n	a7aa <gatt_ccc_changed+0xa>
    a7a8:	3301      	adds	r3, #1
    a7aa:	684a      	ldr	r2, [r1, #4]
    a7ac:	429a      	cmp	r2, r3
    a7ae:	d907      	bls.n	a7c0 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    a7b0:	680a      	ldr	r2, [r1, #0]
    a7b2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    a7b6:	8912      	ldrh	r2, [r2, #8]
    a7b8:	4294      	cmp	r4, r2
    a7ba:	d2f5      	bcs.n	a7a8 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    a7bc:	4614      	mov	r4, r2
    a7be:	e7f3      	b.n	a7a8 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    a7c0:	890b      	ldrh	r3, [r1, #8]
    a7c2:	429c      	cmp	r4, r3
    a7c4:	d003      	beq.n	a7ce <gatt_ccc_changed+0x2e>
		ccc->value = value;
    a7c6:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    a7c8:	68cb      	ldr	r3, [r1, #12]
    a7ca:	4621      	mov	r1, r4
    a7cc:	4798      	blx	r3
    a7ce:	bd10      	pop	{r4, pc}

0000a7d0 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    a7d0:	b510      	push	{r4, lr}
    a7d2:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    a7d4:	69dc      	ldr	r4, [r3, #28]
    a7d6:	460a      	mov	r2, r1
    a7d8:	6999      	ldr	r1, [r3, #24]
    a7da:	47a0      	blx	r4
    a7dc:	bd10      	pop	{r4, pc}
	...

0000a7e0 <sc_indicate_rsp>:
{
    a7e0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a7e2:	4b0f      	ldr	r3, [pc, #60]	; (a820 <sc_indicate_rsp+0x40>)
    a7e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
    a7e8:	f3bf 8f5b 	dmb	ish
    a7ec:	e852 1f00 	ldrex	r1, [r2]
    a7f0:	f021 0102 	bic.w	r1, r1, #2
    a7f4:	e842 1000 	strex	r0, r1, [r2]
    a7f8:	2800      	cmp	r0, #0
    a7fa:	d1f7      	bne.n	a7ec <sc_indicate_rsp+0xc>
    a7fc:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a800:	f3bf 8f5b 	dmb	ish
    a804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a806:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a80a:	f013 0f01 	tst.w	r3, #1
    a80e:	d100      	bne.n	a812 <sc_indicate_rsp+0x32>
    a810:	bd08      	pop	{r3, pc}
    a812:	2200      	movs	r2, #0
    a814:	4903      	ldr	r1, [pc, #12]	; (a824 <sc_indicate_rsp+0x44>)
    a816:	4804      	ldr	r0, [pc, #16]	; (a828 <sc_indicate_rsp+0x48>)
    a818:	f01f ff88 	bl	2a72c <k_delayed_work_submit_to_queue>
}
    a81c:	e7f8      	b.n	a810 <sc_indicate_rsp+0x30>
    a81e:	bf00      	nop
    a820:	20000ca0 	.word	0x20000ca0
    a824:	20000ccc 	.word	0x20000ccc
    a828:	200030f0 	.word	0x200030f0

0000a82c <sc_indicate>:
{
    a82c:	b510      	push	{r4, lr}
    a82e:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    a830:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a832:	f3bf 8f5b 	dmb	ish
    a836:	e850 3f00 	ldrex	r3, [r0]
    a83a:	f043 0e01 	orr.w	lr, r3, #1
    a83e:	e840 ec00 	strex	ip, lr, [r0]
    a842:	f1bc 0f00 	cmp.w	ip, #0
    a846:	d1f6      	bne.n	a836 <sc_indicate+0xa>
    a848:	f3bf 8f5b 	dmb	ish
    a84c:	f013 0f01 	tst.w	r3, #1
    a850:	d10a      	bne.n	a868 <sc_indicate+0x3c>
		sc->start = start;
    a852:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    a854:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a856:	f3bf 8f5b 	dmb	ish
    a85a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a85c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    a860:	f013 0f02 	tst.w	r3, #2
    a864:	d00b      	beq.n	a87e <sc_indicate+0x52>
    a866:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    a868:	4613      	mov	r3, r2
    a86a:	460a      	mov	r2, r1
    a86c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    a870:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a874:	f7ff ff7c 	bl	a770 <update_range>
    a878:	2800      	cmp	r0, #0
    a87a:	d1ec      	bne.n	a856 <sc_indicate+0x2a>
    a87c:	e7f3      	b.n	a866 <sc_indicate+0x3a>
    a87e:	220a      	movs	r2, #10
    a880:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a884:	4801      	ldr	r0, [pc, #4]	; (a88c <sc_indicate+0x60>)
    a886:	f01f ff51 	bl	2a72c <k_delayed_work_submit_to_queue>
    a88a:	e7ec      	b.n	a866 <sc_indicate+0x3a>
    a88c:	200030f0 	.word	0x200030f0

0000a890 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    a890:	b510      	push	{r4, lr}
    a892:	b082      	sub	sp, #8
    a894:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    a896:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    a898:	6a09      	ldr	r1, [r1, #32]
    a89a:	a801      	add	r0, sp, #4
    a89c:	f7f5 fd10 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    a8a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    a8a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    a8a8:	89a1      	ldrh	r1, [r4, #12]
    a8aa:	b909      	cbnz	r1, a8b0 <sc_save+0x20>
    a8ac:	89e1      	ldrh	r1, [r4, #14]
    a8ae:	b139      	cbz	r1, a8c0 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    a8b0:	f104 010e 	add.w	r1, r4, #14
    a8b4:	f104 000c 	add.w	r0, r4, #12
    a8b8:	f7ff ff5a 	bl	a770 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    a8bc:	b002      	add	sp, #8
    a8be:	bd10      	pop	{r4, pc}
		*stored = data;
    a8c0:	9801      	ldr	r0, [sp, #4]
    a8c2:	60e0      	str	r0, [r4, #12]
		goto done;
    a8c4:	e7fa      	b.n	a8bc <sc_save+0x2c>

0000a8c6 <bt_gatt_attr_write_ccc>:
{
    a8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8ca:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a8ce:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a8d0:	2c02      	cmp	r4, #2
    a8d2:	d84f      	bhi.n	a974 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a8d4:	4698      	mov	r8, r3
    a8d6:	441c      	add	r4, r3
    a8d8:	2c02      	cmp	r4, #2
    a8da:	d84e      	bhi.n	a97a <bt_gatt_attr_write_ccc+0xb4>
    a8dc:	460f      	mov	r7, r1
    a8de:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a8e0:	7853      	ldrb	r3, [r2, #1]
    a8e2:	7816      	ldrb	r6, [r2, #0]
    a8e4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a8e8:	2400      	movs	r4, #0
    a8ea:	686b      	ldr	r3, [r5, #4]
    a8ec:	429c      	cmp	r4, r3
    a8ee:	d209      	bcs.n	a904 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a8f0:	6829      	ldr	r1, [r5, #0]
    a8f2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a8f6:	3101      	adds	r1, #1
    a8f8:	4648      	mov	r0, r9
    a8fa:	f7fc fffd 	bl	78f8 <bt_conn_addr_le_cmp>
    a8fe:	b108      	cbz	r0, a904 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a900:	3401      	adds	r4, #1
    a902:	e7f2      	b.n	a8ea <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a904:	686b      	ldr	r3, [r5, #4]
    a906:	429c      	cmp	r4, r3
    a908:	d026      	beq.n	a958 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a90a:	b91e      	cbnz	r6, a914 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a90c:	682a      	ldr	r2, [r5, #0]
    a90e:	0123      	lsls	r3, r4, #4
    a910:	2100      	movs	r1, #0
    a912:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a914:	682b      	ldr	r3, [r5, #0]
    a916:	0124      	lsls	r4, r4, #4
    a918:	4423      	add	r3, r4
    a91a:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a91c:	682b      	ldr	r3, [r5, #0]
    a91e:	441c      	add	r4, r3
    a920:	8922      	ldrh	r2, [r4, #8]
    a922:	892b      	ldrh	r3, [r5, #8]
    a924:	429a      	cmp	r2, r3
    a926:	d003      	beq.n	a930 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a928:	4629      	mov	r1, r5
    a92a:	4638      	mov	r0, r7
    a92c:	f7ff ff38 	bl	a7a0 <gatt_ccc_changed>
}
    a930:	4640      	mov	r0, r8
    a932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a936:	2207      	movs	r2, #7
    a938:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a93c:	3001      	adds	r0, #1
    a93e:	f7f5 fcbf 	bl	2c0 <memcpy>
			if (value) {
    a942:	b11e      	cbz	r6, a94c <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a944:	682b      	ldr	r3, [r5, #0]
    a946:	2201      	movs	r2, #1
    a948:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a94c:	686b      	ldr	r3, [r5, #4]
    a94e:	429c      	cmp	r4, r3
    a950:	d1e0      	bne.n	a914 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a952:	f06f 0810 	mvn.w	r8, #16
    a956:	e7eb      	b.n	a930 <bt_gatt_attr_write_ccc+0x6a>
    a958:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a95a:	429c      	cmp	r4, r3
    a95c:	d2f6      	bcs.n	a94c <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a95e:	682a      	ldr	r2, [r5, #0]
    a960:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a964:	eb02 000a 	add.w	r0, r2, sl
    a968:	f812 200a 	ldrb.w	r2, [r2, sl]
    a96c:	2a00      	cmp	r2, #0
    a96e:	d0e2      	beq.n	a936 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a970:	3401      	adds	r4, #1
    a972:	e7f2      	b.n	a95a <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a974:	f06f 0806 	mvn.w	r8, #6
    a978:	e7da      	b.n	a930 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a97a:	f06f 080c 	mvn.w	r8, #12
    a97e:	e7d7      	b.n	a930 <bt_gatt_attr_write_ccc+0x6a>

0000a980 <gatt_send>:
{
    a980:	b538      	push	{r3, r4, r5, lr}
    a982:	460d      	mov	r5, r1
	if (params) {
    a984:	b153      	cbz	r3, a99c <gatt_send+0x1c>
    a986:	4619      	mov	r1, r3
		req->buf = buf;
    a988:	611d      	str	r5, [r3, #16]
		req->func = func;
    a98a:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a98c:	9b04      	ldr	r3, [sp, #16]
    a98e:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a990:	f7ff fe88 	bl	a6a4 <bt_att_req_send>
    a994:	4604      	mov	r4, r0
	if (err) {
    a996:	b92c      	cbnz	r4, a9a4 <gatt_send+0x24>
}
    a998:	4620      	mov	r0, r4
    a99a:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a99c:	f7ff fe32 	bl	a604 <bt_att_send>
    a9a0:	4604      	mov	r4, r0
    a9a2:	e7f8      	b.n	a996 <gatt_send+0x16>
		net_buf_unref(buf);
    a9a4:	4628      	mov	r0, r5
    a9a6:	f010 fd2d 	bl	1b404 <net_buf_unref>
	return err;
    a9aa:	e7f5      	b.n	a998 <gatt_send+0x18>

0000a9ac <gatt_indicate>:
{
    a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9b0:	b082      	sub	sp, #8
    a9b2:	4680      	mov	r8, r0
    a9b4:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a9b6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a9b8:	3202      	adds	r2, #2
    a9ba:	211d      	movs	r1, #29
    a9bc:	f7ff f9f6 	bl	9dac <bt_att_create_pdu>
	if (!buf) {
    a9c0:	b1f8      	cbz	r0, aa02 <gatt_indicate+0x56>
    a9c2:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a9c4:	f100 0708 	add.w	r7, r0, #8
    a9c8:	2102      	movs	r1, #2
    a9ca:	4638      	mov	r0, r7
    a9cc:	f010 fd66 	bl	1b49c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a9d0:	69a3      	ldr	r3, [r4, #24]
    a9d2:	8a1b      	ldrh	r3, [r3, #16]
    a9d4:	4605      	mov	r5, r0
    a9d6:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a9da:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a9dc:	4638      	mov	r0, r7
    a9de:	f010 fd5d 	bl	1b49c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a9e2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a9e4:	6a21      	ldr	r1, [r4, #32]
    a9e6:	4628      	mov	r0, r5
    a9e8:	f7f5 fc6a 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a9ec:	2300      	movs	r3, #0
    a9ee:	9300      	str	r3, [sp, #0]
    a9f0:	4623      	mov	r3, r4
    a9f2:	4a05      	ldr	r2, [pc, #20]	; (aa08 <gatt_indicate+0x5c>)
    a9f4:	4631      	mov	r1, r6
    a9f6:	4640      	mov	r0, r8
    a9f8:	f7ff ffc2 	bl	a980 <gatt_send>
}
    a9fc:	b002      	add	sp, #8
    a9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    aa02:	f06f 000b 	mvn.w	r0, #11
    aa06:	e7f9      	b.n	a9fc <gatt_indicate+0x50>
    aa08:	0000a7d1 	.word	0x0000a7d1

0000aa0c <gatt_notify>:
{
    aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa10:	4680      	mov	r8, r0
    aa12:	468a      	mov	sl, r1
    aa14:	4691      	mov	r9, r2
    aa16:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    aa18:	1c9a      	adds	r2, r3, #2
    aa1a:	211b      	movs	r1, #27
    aa1c:	f7ff f9c6 	bl	9dac <bt_att_create_pdu>
	if (!buf) {
    aa20:	b1d8      	cbz	r0, aa5a <gatt_notify+0x4e>
    aa22:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    aa24:	f100 0708 	add.w	r7, r0, #8
    aa28:	2102      	movs	r1, #2
    aa2a:	4638      	mov	r0, r7
    aa2c:	f010 fd36 	bl	1b49c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    aa30:	4605      	mov	r5, r0
    aa32:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    aa36:	4621      	mov	r1, r4
    aa38:	4638      	mov	r0, r7
    aa3a:	f010 fd2f 	bl	1b49c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    aa3e:	4622      	mov	r2, r4
    aa40:	4649      	mov	r1, r9
    aa42:	4628      	mov	r0, r5
    aa44:	f7f5 fc3c 	bl	2c0 <memcpy>
    aa48:	2300      	movs	r3, #0
    aa4a:	4632      	mov	r2, r6
    aa4c:	2104      	movs	r1, #4
    aa4e:	4640      	mov	r0, r8
    aa50:	f7fd febd 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    aa54:	2000      	movs	r0, #0
    aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    aa5a:	f06f 000b 	mvn.w	r0, #11
}
    aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000aa64 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa68:	b082      	sub	sp, #8
    aa6a:	4604      	mov	r4, r0
    aa6c:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    aa6e:	2300      	movs	r3, #0
    aa70:	f88d 3000 	strb.w	r3, [sp]
    aa74:	f642 1302 	movw	r3, #10498	; 0x2902
    aa78:	f8ad 3002 	strh.w	r3, [sp, #2]
    aa7c:	4669      	mov	r1, sp
    aa7e:	6800      	ldr	r0, [r0, #0]
    aa80:	f7fa f991 	bl	4da6 <bt_uuid_cmp>
    aa84:	b938      	cbnz	r0, aa96 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa86:	68a2      	ldr	r2, [r4, #8]
    aa88:	4b29      	ldr	r3, [pc, #164]	; (ab30 <notify_cb+0xcc>)
    aa8a:	429a      	cmp	r2, r3
    aa8c:	d012      	beq.n	aab4 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    aa8e:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    aa90:	b002      	add	sp, #8
    aa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    aa96:	6820      	ldr	r0, [r4, #0]
    aa98:	2300      	movs	r3, #0
    aa9a:	f88d 3004 	strb.w	r3, [sp, #4]
    aa9e:	f642 0303 	movw	r3, #10243	; 0x2803
    aaa2:	f8ad 3006 	strh.w	r3, [sp, #6]
    aaa6:	a901      	add	r1, sp, #4
    aaa8:	f7fa f97d 	bl	4da6 <bt_uuid_cmp>
    aaac:	2800      	cmp	r0, #0
    aaae:	d0ef      	beq.n	aa90 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    aab0:	2001      	movs	r0, #1
    aab2:	e7ed      	b.n	aa90 <notify_cb+0x2c>
	ccc = attr->user_data;
    aab4:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    aab6:	2400      	movs	r4, #0
    aab8:	e01a      	b.n	aaf0 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    aaba:	6828      	ldr	r0, [r5, #0]
    aabc:	4b1d      	ldr	r3, [pc, #116]	; (ab34 <notify_cb+0xd0>)
    aabe:	4298      	cmp	r0, r3
    aac0:	d115      	bne.n	aaee <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    aac2:	6979      	ldr	r1, [r7, #20]
    aac4:	4430      	add	r0, r6
    aac6:	f7ff fee3 	bl	a890 <sc_save>
			continue;
    aaca:	e010      	b.n	aaee <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    aacc:	88bb      	ldrh	r3, [r7, #4]
    aace:	2b02      	cmp	r3, #2
    aad0:	d024      	beq.n	ab1c <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    aad2:	68b9      	ldr	r1, [r7, #8]
    aad4:	8a3b      	ldrh	r3, [r7, #16]
    aad6:	68fa      	ldr	r2, [r7, #12]
    aad8:	8a09      	ldrh	r1, [r1, #16]
    aada:	f7ff ff97 	bl	aa0c <gatt_notify>
    aade:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    aae0:	4640      	mov	r0, r8
    aae2:	f7fc ffb9 	bl	7a58 <bt_conn_unref>
		if (err < 0) {
    aae6:	2e00      	cmp	r6, #0
    aae8:	db1f      	blt.n	ab2a <notify_cb+0xc6>
		data->err = 0;
    aaea:	2300      	movs	r3, #0
    aaec:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    aaee:	3401      	adds	r4, #1
    aaf0:	686b      	ldr	r3, [r5, #4]
    aaf2:	429c      	cmp	r4, r3
    aaf4:	d217      	bcs.n	ab26 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    aaf6:	6828      	ldr	r0, [r5, #0]
    aaf8:	0126      	lsls	r6, r4, #4
    aafa:	4430      	add	r0, r6
    aafc:	8902      	ldrh	r2, [r0, #8]
    aafe:	88bb      	ldrh	r3, [r7, #4]
    ab00:	429a      	cmp	r2, r3
    ab02:	d1f4      	bne.n	aaee <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    ab04:	3001      	adds	r0, #1
    ab06:	f7fc ff4d 	bl	79a4 <bt_conn_lookup_addr_le>
		if (!conn) {
    ab0a:	4680      	mov	r8, r0
    ab0c:	2800      	cmp	r0, #0
    ab0e:	d0d4      	beq.n	aaba <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    ab10:	7b03      	ldrb	r3, [r0, #12]
    ab12:	2b03      	cmp	r3, #3
    ab14:	d0da      	beq.n	aacc <notify_cb+0x68>
			bt_conn_unref(conn);
    ab16:	f7fc ff9f 	bl	7a58 <bt_conn_unref>
			continue;
    ab1a:	e7e8      	b.n	aaee <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    ab1c:	6979      	ldr	r1, [r7, #20]
    ab1e:	f7ff ff45 	bl	a9ac <gatt_indicate>
    ab22:	4606      	mov	r6, r0
    ab24:	e7dc      	b.n	aae0 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    ab26:	2001      	movs	r0, #1
    ab28:	e7b2      	b.n	aa90 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    ab2a:	2000      	movs	r0, #0
    ab2c:	e7b0      	b.n	aa90 <notify_cb+0x2c>
    ab2e:	bf00      	nop
    ab30:	0000a8c7 	.word	0x0000a8c7
    ab34:	20000cf8 	.word	0x20000cf8

0000ab38 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    ab38:	8981      	ldrh	r1, [r0, #12]
    ab3a:	b909      	cbnz	r1, ab40 <sc_restore+0x8>
    ab3c:	89c3      	ldrh	r3, [r0, #14]
    ab3e:	b163      	cbz	r3, ab5a <sc_restore+0x22>
{
    ab40:	b510      	push	{r4, lr}
    ab42:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    ab44:	89c2      	ldrh	r2, [r0, #14]
    ab46:	4805      	ldr	r0, [pc, #20]	; (ab5c <sc_restore+0x24>)
    ab48:	f7ff fe70 	bl	a82c <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    ab4c:	2204      	movs	r2, #4
    ab4e:	2100      	movs	r1, #0
    ab50:	f104 000c 	add.w	r0, r4, #12
    ab54:	f01f ff74 	bl	2aa40 <memset>
    ab58:	bd10      	pop	{r4, pc}
    ab5a:	4770      	bx	lr
    ab5c:	20000ca0 	.word	0x20000ca0

0000ab60 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ab60:	6882      	ldr	r2, [r0, #8]
    ab62:	4b16      	ldr	r3, [pc, #88]	; (abbc <connected_cb+0x5c>)
    ab64:	429a      	cmp	r2, r3
    ab66:	d001      	beq.n	ab6c <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    ab68:	2001      	movs	r0, #1
    ab6a:	4770      	bx	lr
{
    ab6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab70:	460f      	mov	r7, r1
    ab72:	4680      	mov	r8, r0
	ccc = attr->user_data;
    ab74:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    ab76:	2400      	movs	r4, #0
    ab78:	e004      	b.n	ab84 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    ab7a:	4430      	add	r0, r6
    ab7c:	f7ff ffdc 	bl	ab38 <sc_restore>
    ab80:	e019      	b.n	abb6 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    ab82:	3401      	adds	r4, #1
    ab84:	686b      	ldr	r3, [r5, #4]
    ab86:	429c      	cmp	r4, r3
    ab88:	d215      	bcs.n	abb6 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    ab8a:	6829      	ldr	r1, [r5, #0]
    ab8c:	0126      	lsls	r6, r4, #4
    ab8e:	4431      	add	r1, r6
    ab90:	3101      	adds	r1, #1
    ab92:	4638      	mov	r0, r7
    ab94:	f7fc feb0 	bl	78f8 <bt_conn_addr_le_cmp>
    ab98:	2800      	cmp	r0, #0
    ab9a:	d1f2      	bne.n	ab82 <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    ab9c:	682b      	ldr	r3, [r5, #0]
    ab9e:	4433      	add	r3, r6
    aba0:	891b      	ldrh	r3, [r3, #8]
    aba2:	2b00      	cmp	r3, #0
    aba4:	d0ed      	beq.n	ab82 <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    aba6:	4629      	mov	r1, r5
    aba8:	4640      	mov	r0, r8
    abaa:	f7ff fdf9 	bl	a7a0 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    abae:	6828      	ldr	r0, [r5, #0]
    abb0:	4b03      	ldr	r3, [pc, #12]	; (abc0 <connected_cb+0x60>)
    abb2:	4298      	cmp	r0, r3
    abb4:	d0e1      	beq.n	ab7a <connected_cb+0x1a>
}
    abb6:	2001      	movs	r0, #1
    abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abbc:	0000a8c7 	.word	0x0000a8c7
    abc0:	20000cf8 	.word	0x20000cf8

0000abc4 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    abc8:	6882      	ldr	r2, [r0, #8]
    abca:	4b29      	ldr	r3, [pc, #164]	; (ac70 <disconnected_cb+0xac>)
    abcc:	429a      	cmp	r2, r3
    abce:	d002      	beq.n	abd6 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    abd0:	2001      	movs	r0, #1
    abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    abd6:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    abd8:	892b      	ldrh	r3, [r5, #8]
    abda:	2b00      	cmp	r3, #0
    abdc:	d0f8      	beq.n	abd0 <disconnected_cb+0xc>
    abde:	4688      	mov	r8, r1
    abe0:	4607      	mov	r7, r0
    abe2:	2400      	movs	r4, #0
    abe4:	e012      	b.n	ac0c <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    abe6:	f7fc ff37 	bl	7a58 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    abea:	e7f1      	b.n	abd0 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    abec:	f108 0948 	add.w	r9, r8, #72	; 0x48
    abf0:	4648      	mov	r0, r9
    abf2:	f7fc f99f 	bl	6f34 <bt_addr_le_is_bonded>
    abf6:	bb28      	cbnz	r0, ac44 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    abf8:	682b      	ldr	r3, [r5, #0]
    abfa:	2100      	movs	r1, #0
    abfc:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    abfe:	6828      	ldr	r0, [r5, #0]
    ac00:	4430      	add	r0, r6
    ac02:	2202      	movs	r2, #2
    ac04:	3008      	adds	r0, #8
    ac06:	f01f ff1b 	bl	2aa40 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    ac0a:	3401      	adds	r4, #1
    ac0c:	686b      	ldr	r3, [r5, #4]
    ac0e:	429c      	cmp	r4, r3
    ac10:	d220      	bcs.n	ac54 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    ac12:	6829      	ldr	r1, [r5, #0]
    ac14:	0126      	lsls	r6, r4, #4
    ac16:	4431      	add	r1, r6
    ac18:	890b      	ldrh	r3, [r1, #8]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d0f5      	beq.n	ac0a <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    ac1e:	3101      	adds	r1, #1
    ac20:	4640      	mov	r0, r8
    ac22:	f7fc fe69 	bl	78f8 <bt_conn_addr_le_cmp>
    ac26:	2800      	cmp	r0, #0
    ac28:	d0e0      	beq.n	abec <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    ac2a:	6828      	ldr	r0, [r5, #0]
    ac2c:	4430      	add	r0, r6
    ac2e:	3001      	adds	r0, #1
    ac30:	f7fc feb8 	bl	79a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    ac34:	2800      	cmp	r0, #0
    ac36:	d0e8      	beq.n	ac0a <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    ac38:	7b02      	ldrb	r2, [r0, #12]
    ac3a:	2a03      	cmp	r2, #3
    ac3c:	d0d3      	beq.n	abe6 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    ac3e:	f7fc ff0b 	bl	7a58 <bt_conn_unref>
    ac42:	e7e2      	b.n	ac0a <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    ac44:	6828      	ldr	r0, [r5, #0]
    ac46:	4430      	add	r0, r6
    ac48:	2207      	movs	r2, #7
    ac4a:	4649      	mov	r1, r9
    ac4c:	3001      	adds	r0, #1
    ac4e:	f7f5 fb37 	bl	2c0 <memcpy>
    ac52:	e7da      	b.n	ac0a <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    ac54:	2202      	movs	r2, #2
    ac56:	2100      	movs	r1, #0
    ac58:	f105 0008 	add.w	r0, r5, #8
    ac5c:	f01f fef0 	bl	2aa40 <memset>
	if (ccc->cfg_changed) {
    ac60:	68eb      	ldr	r3, [r5, #12]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d0b4      	beq.n	abd0 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    ac66:	8929      	ldrh	r1, [r5, #8]
    ac68:	4638      	mov	r0, r7
    ac6a:	4798      	blx	r3
    ac6c:	e7b0      	b.n	abd0 <disconnected_cb+0xc>
    ac6e:	bf00      	nop
    ac70:	0000a8c7 	.word	0x0000a8c7

0000ac74 <bt_gatt_init>:
{
    ac74:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    ac76:	4805      	ldr	r0, [pc, #20]	; (ac8c <bt_gatt_init+0x18>)
    ac78:	f7ff fd3c 	bl	a6f4 <gatt_register>
	gatt_register(&gatt_svc);
    ac7c:	4804      	ldr	r0, [pc, #16]	; (ac90 <bt_gatt_init+0x1c>)
    ac7e:	f7ff fd39 	bl	a6f4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    ac82:	4904      	ldr	r1, [pc, #16]	; (ac94 <bt_gatt_init+0x20>)
    ac84:	4804      	ldr	r0, [pc, #16]	; (ac98 <bt_gatt_init+0x24>)
    ac86:	f01f fcd9 	bl	2a63c <k_delayed_work_init>
    ac8a:	bd08      	pop	{r3, pc}
    ac8c:	2000c064 	.word	0x2000c064
    ac90:	2000c0c0 	.word	0x2000c0c0
    ac94:	0000af69 	.word	0x0000af69
    ac98:	20000ccc 	.word	0x20000ccc

0000ac9c <bt_gatt_service_register>:
{
    ac9c:	b510      	push	{r4, lr}
    ac9e:	b082      	sub	sp, #8
    aca0:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    aca2:	6803      	ldr	r3, [r0, #0]
    aca4:	6818      	ldr	r0, [r3, #0]
    aca6:	2300      	movs	r3, #0
    aca8:	f88d 3000 	strb.w	r3, [sp]
    acac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    acb0:	f8ad 3002 	strh.w	r3, [sp, #2]
    acb4:	4669      	mov	r1, sp
    acb6:	f7fa f876 	bl	4da6 <bt_uuid_cmp>
    acba:	b300      	cbz	r0, acfe <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    acbc:	6823      	ldr	r3, [r4, #0]
    acbe:	6818      	ldr	r0, [r3, #0]
    acc0:	2300      	movs	r3, #0
    acc2:	f88d 3004 	strb.w	r3, [sp, #4]
    acc6:	f641 0301 	movw	r3, #6145	; 0x1801
    acca:	f8ad 3006 	strh.w	r3, [sp, #6]
    acce:	a901      	add	r1, sp, #4
    acd0:	f7fa f869 	bl	4da6 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    acd4:	b1b0      	cbz	r0, ad04 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    acd6:	4620      	mov	r0, r4
    acd8:	f7ff fd0c 	bl	a6f4 <gatt_register>
	if (err < 0) {
    acdc:	2800      	cmp	r0, #0
    acde:	db0c      	blt.n	acfa <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    ace0:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    ace2:	88a2      	ldrh	r2, [r4, #4]
    ace4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ace8:	0093      	lsls	r3, r2, #2
    acea:	3b14      	subs	r3, #20
    acec:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    acee:	8a1a      	ldrh	r2, [r3, #16]
    acf0:	8a09      	ldrh	r1, [r1, #16]
    acf2:	4806      	ldr	r0, [pc, #24]	; (ad0c <bt_gatt_service_register+0x70>)
    acf4:	f7ff fd9a 	bl	a82c <sc_indicate>
	return 0;
    acf8:	2000      	movs	r0, #0
}
    acfa:	b002      	add	sp, #8
    acfc:	bd10      	pop	{r4, pc}
		return -EALREADY;
    acfe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ad02:	e7fa      	b.n	acfa <bt_gatt_service_register+0x5e>
    ad04:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ad08:	e7f7      	b.n	acfa <bt_gatt_service_register+0x5e>
    ad0a:	bf00      	nop
    ad0c:	20000ca0 	.word	0x20000ca0

0000ad10 <bt_gatt_attr_read>:
{
    ad10:	b510      	push	{r4, lr}
    ad12:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad16:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    ad1a:	42a1      	cmp	r1, r4
    ad1c:	d80c      	bhi.n	ad38 <bt_gatt_attr_read+0x28>
    ad1e:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    ad20:	1a64      	subs	r4, r4, r1
    ad22:	42a3      	cmp	r3, r4
    ad24:	bfa8      	it	ge
    ad26:	4623      	movge	r3, r4
    ad28:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    ad2a:	4622      	mov	r2, r4
    ad2c:	9b03      	ldr	r3, [sp, #12]
    ad2e:	4419      	add	r1, r3
    ad30:	f7f5 fac6 	bl	2c0 <memcpy>
}
    ad34:	4620      	mov	r0, r4
    ad36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ad38:	f06f 0406 	mvn.w	r4, #6
    ad3c:	e7fa      	b.n	ad34 <bt_gatt_attr_read+0x24>

0000ad3e <read_appearance>:
{
    ad3e:	b530      	push	{r4, r5, lr}
    ad40:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    ad42:	ac06      	add	r4, sp, #24
    ad44:	2500      	movs	r5, #0
    ad46:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    ad4a:	2502      	movs	r5, #2
    ad4c:	9502      	str	r5, [sp, #8]
    ad4e:	9401      	str	r4, [sp, #4]
    ad50:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    ad54:	9400      	str	r4, [sp, #0]
    ad56:	f7ff ffdb 	bl	ad10 <bt_gatt_attr_read>
}
    ad5a:	b007      	add	sp, #28
    ad5c:	bd30      	pop	{r4, r5, pc}
	...

0000ad60 <read_name>:
{
    ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad64:	b084      	sub	sp, #16
    ad66:	4605      	mov	r5, r0
    ad68:	460e      	mov	r6, r1
    ad6a:	4617      	mov	r7, r2
    ad6c:	4698      	mov	r8, r3
				 strlen(gap_name));
    ad6e:	4c09      	ldr	r4, [pc, #36]	; (ad94 <read_name+0x34>)
    ad70:	4620      	mov	r0, r4
    ad72:	f7f5 fcc5 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    ad76:	b280      	uxth	r0, r0
    ad78:	9002      	str	r0, [sp, #8]
    ad7a:	9401      	str	r4, [sp, #4]
    ad7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ad80:	9300      	str	r3, [sp, #0]
    ad82:	4643      	mov	r3, r8
    ad84:	463a      	mov	r2, r7
    ad86:	4631      	mov	r1, r6
    ad88:	4628      	mov	r0, r5
    ad8a:	f7ff ffc1 	bl	ad10 <bt_gatt_attr_read>
}
    ad8e:	b004      	add	sp, #16
    ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad94:	00031918 	.word	0x00031918

0000ad98 <bt_gatt_attr_read_service>:
{
    ad98:	b570      	push	{r4, r5, r6, lr}
    ad9a:	b086      	sub	sp, #24
    ad9c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    ada0:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    ada2:	7826      	ldrb	r6, [r4, #0]
    ada4:	b146      	cbz	r6, adb8 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    ada6:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    ada8:	2610      	movs	r6, #16
    adaa:	9602      	str	r6, [sp, #8]
    adac:	9401      	str	r4, [sp, #4]
    adae:	9500      	str	r5, [sp, #0]
    adb0:	f7ff ffae 	bl	ad10 <bt_gatt_attr_read>
}
    adb4:	b006      	add	sp, #24
    adb6:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    adb8:	8866      	ldrh	r6, [r4, #2]
    adba:	ac06      	add	r4, sp, #24
    adbc:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    adc0:	2602      	movs	r6, #2
    adc2:	9602      	str	r6, [sp, #8]
    adc4:	9401      	str	r4, [sp, #4]
    adc6:	9500      	str	r5, [sp, #0]
    adc8:	f7ff ffa2 	bl	ad10 <bt_gatt_attr_read>
    adcc:	e7f2      	b.n	adb4 <bt_gatt_attr_read_service+0x1c>

0000adce <bt_gatt_attr_read_ccc>:
{
    adce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    add2:	b086      	sub	sp, #24
    add4:	4607      	mov	r7, r0
    add6:	4688      	mov	r8, r1
    add8:	4691      	mov	r9, r2
    adda:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    addc:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    adde:	2400      	movs	r4, #0
    ade0:	686b      	ldr	r3, [r5, #4]
    ade2:	429c      	cmp	r4, r3
    ade4:	d20e      	bcs.n	ae04 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    ade6:	6829      	ldr	r1, [r5, #0]
    ade8:	0126      	lsls	r6, r4, #4
    adea:	4431      	add	r1, r6
    adec:	3101      	adds	r1, #1
    adee:	4638      	mov	r0, r7
    adf0:	f7fc fd82 	bl	78f8 <bt_conn_addr_le_cmp>
    adf4:	b108      	cbz	r0, adfa <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    adf6:	3401      	adds	r4, #1
    adf8:	e7f2      	b.n	ade0 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    adfa:	682b      	ldr	r3, [r5, #0]
    adfc:	441e      	add	r6, r3
    adfe:	8933      	ldrh	r3, [r6, #8]
    ae00:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    ae04:	686b      	ldr	r3, [r5, #4]
    ae06:	429c      	cmp	r4, r3
    ae08:	d010      	beq.n	ae2c <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    ae0a:	2302      	movs	r3, #2
    ae0c:	9302      	str	r3, [sp, #8]
    ae0e:	f10d 0316 	add.w	r3, sp, #22
    ae12:	9301      	str	r3, [sp, #4]
    ae14:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ae18:	9300      	str	r3, [sp, #0]
    ae1a:	4653      	mov	r3, sl
    ae1c:	464a      	mov	r2, r9
    ae1e:	4641      	mov	r1, r8
    ae20:	4638      	mov	r0, r7
    ae22:	f7ff ff75 	bl	ad10 <bt_gatt_attr_read>
}
    ae26:	b006      	add	sp, #24
    ae28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    ae2c:	2300      	movs	r3, #0
    ae2e:	f8ad 3016 	strh.w	r3, [sp, #22]
    ae32:	e7ea      	b.n	ae0a <bt_gatt_attr_read_ccc+0x3c>

0000ae34 <bt_gatt_foreach_attr>:
{
    ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae38:	4606      	mov	r6, r0
    ae3a:	460f      	mov	r7, r1
    ae3c:	4690      	mov	r8, r2
    ae3e:	4699      	mov	r9, r3
	return list->head;
    ae40:	4b15      	ldr	r3, [pc, #84]	; (ae98 <bt_gatt_foreach_attr+0x64>)
    ae42:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    ae44:	b10d      	cbz	r5, ae4a <bt_gatt_foreach_attr+0x16>
    ae46:	3d08      	subs	r5, #8
    ae48:	e01e      	b.n	ae88 <bt_gatt_foreach_attr+0x54>
    ae4a:	2500      	movs	r5, #0
    ae4c:	e01c      	b.n	ae88 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    ae4e:	3401      	adds	r4, #1
    ae50:	88ab      	ldrh	r3, [r5, #4]
    ae52:	429c      	cmp	r4, r3
    ae54:	da0f      	bge.n	ae76 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    ae56:	6828      	ldr	r0, [r5, #0]
    ae58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    ae5c:	0093      	lsls	r3, r2, #2
    ae5e:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    ae60:	8a03      	ldrh	r3, [r0, #16]
    ae62:	42b3      	cmp	r3, r6
    ae64:	d3f3      	bcc.n	ae4e <bt_gatt_foreach_attr+0x1a>
    ae66:	42bb      	cmp	r3, r7
    ae68:	d8f1      	bhi.n	ae4e <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    ae6a:	4649      	mov	r1, r9
    ae6c:	47c0      	blx	r8
    ae6e:	2800      	cmp	r0, #0
    ae70:	d1ed      	bne.n	ae4e <bt_gatt_foreach_attr+0x1a>
    ae72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    ae76:	f115 0308 	adds.w	r3, r5, #8
    ae7a:	d009      	beq.n	ae90 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    ae7c:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    ae7e:	b14a      	cbz	r2, ae94 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    ae80:	b103      	cbz	r3, ae84 <bt_gatt_foreach_attr+0x50>
	return node->next;
    ae82:	68ab      	ldr	r3, [r5, #8]
    ae84:	f1a3 0508 	sub.w	r5, r3, #8
    ae88:	2d00      	cmp	r5, #0
    ae8a:	d0f2      	beq.n	ae72 <bt_gatt_foreach_attr+0x3e>
    ae8c:	2400      	movs	r4, #0
    ae8e:	e7df      	b.n	ae50 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    ae90:	461a      	mov	r2, r3
    ae92:	e7f4      	b.n	ae7e <bt_gatt_foreach_attr+0x4a>
    ae94:	2500      	movs	r5, #0
    ae96:	e7f7      	b.n	ae88 <bt_gatt_foreach_attr+0x54>
    ae98:	20000c98 	.word	0x20000c98

0000ae9c <bt_gatt_attr_next>:
{
    ae9c:	b500      	push	{lr}
    ae9e:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    aea0:	ab02      	add	r3, sp, #8
    aea2:	2200      	movs	r2, #0
    aea4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    aea8:	8a00      	ldrh	r0, [r0, #16]
    aeaa:	3001      	adds	r0, #1
    aeac:	b280      	uxth	r0, r0
    aeae:	4a04      	ldr	r2, [pc, #16]	; (aec0 <bt_gatt_attr_next+0x24>)
    aeb0:	4601      	mov	r1, r0
    aeb2:	f7ff ffbf 	bl	ae34 <bt_gatt_foreach_attr>
}
    aeb6:	9801      	ldr	r0, [sp, #4]
    aeb8:	b003      	add	sp, #12
    aeba:	f85d fb04 	ldr.w	pc, [sp], #4
    aebe:	bf00      	nop
    aec0:	0000a79b 	.word	0x0000a79b

0000aec4 <bt_gatt_attr_read_chrc>:
{
    aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aec8:	b08a      	sub	sp, #40	; 0x28
    aeca:	4606      	mov	r6, r0
    aecc:	460c      	mov	r4, r1
    aece:	4617      	mov	r7, r2
    aed0:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    aed2:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    aed4:	792b      	ldrb	r3, [r5, #4]
    aed6:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    aeda:	4608      	mov	r0, r1
    aedc:	f7ff ffde 	bl	ae9c <bt_gatt_attr_next>
	if (!next) {
    aee0:	b1c0      	cbz	r0, af14 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    aee2:	8a03      	ldrh	r3, [r0, #16]
    aee4:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    aee8:	6829      	ldr	r1, [r5, #0]
    aeea:	780b      	ldrb	r3, [r1, #0]
    aeec:	b9c3      	cbnz	r3, af20 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    aeee:	884b      	ldrh	r3, [r1, #2]
    aef0:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    aef4:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    aef6:	9302      	str	r3, [sp, #8]
    aef8:	ab05      	add	r3, sp, #20
    aefa:	9301      	str	r3, [sp, #4]
    aefc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    af00:	9300      	str	r3, [sp, #0]
    af02:	4643      	mov	r3, r8
    af04:	463a      	mov	r2, r7
    af06:	4621      	mov	r1, r4
    af08:	4630      	mov	r0, r6
    af0a:	f7ff ff01 	bl	ad10 <bt_gatt_attr_read>
}
    af0e:	b00a      	add	sp, #40	; 0x28
    af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    af14:	2300      	movs	r3, #0
    af16:	f88d 3015 	strb.w	r3, [sp, #21]
    af1a:	f88d 3016 	strb.w	r3, [sp, #22]
    af1e:	e7e3      	b.n	aee8 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    af20:	2210      	movs	r2, #16
    af22:	3101      	adds	r1, #1
    af24:	f10d 0017 	add.w	r0, sp, #23
    af28:	f7f5 f9ca 	bl	2c0 <memcpy>
		value_len += 16;
    af2c:	2313      	movs	r3, #19
    af2e:	e7e2      	b.n	aef6 <bt_gatt_attr_read_chrc+0x32>

0000af30 <bt_gatt_indicate>:
{
    af30:	b500      	push	{lr}
    af32:	b087      	sub	sp, #28
	if (conn) {
    af34:	b120      	cbz	r0, af40 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    af36:	f7ff fd39 	bl	a9ac <gatt_indicate>
}
    af3a:	b007      	add	sp, #28
    af3c:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    af40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    af44:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    af46:	2302      	movs	r3, #2
    af48:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    af4c:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    af4e:	6988      	ldr	r0, [r1, #24]
    af50:	466b      	mov	r3, sp
    af52:	4a04      	ldr	r2, [pc, #16]	; (af64 <bt_gatt_indicate+0x34>)
    af54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    af58:	8a00      	ldrh	r0, [r0, #16]
    af5a:	f7ff ff6b 	bl	ae34 <bt_gatt_foreach_attr>
	return nfy.err;
    af5e:	9800      	ldr	r0, [sp, #0]
    af60:	e7eb      	b.n	af3a <bt_gatt_indicate+0xa>
    af62:	bf00      	nop
    af64:	0000aa65 	.word	0x0000aa65

0000af68 <sc_process>:
{
    af68:	b510      	push	{r4, lr}
    af6a:	b082      	sub	sp, #8
    af6c:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    af6e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    af72:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    af76:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    af7a:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    af7e:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    af82:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af86:	f3bf 8f5b 	dmb	ish
    af8a:	e854 2f00 	ldrex	r2, [r4]
    af8e:	f022 0201 	bic.w	r2, r2, #1
    af92:	e844 2000 	strex	r0, r2, [r4]
    af96:	2800      	cmp	r0, #0
    af98:	d1f7      	bne.n	af8a <sc_process+0x22>
    af9a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    af9e:	2000      	movs	r0, #0
    afa0:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    afa4:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    afa8:	4a0e      	ldr	r2, [pc, #56]	; (afe4 <sc_process+0x7c>)
    afaa:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    afae:	4a0e      	ldr	r2, [pc, #56]	; (afe8 <sc_process+0x80>)
    afb0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    afb4:	aa01      	add	r2, sp, #4
    afb6:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    afba:	2204      	movs	r2, #4
    afbc:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    afc0:	f7ff ffb6 	bl	af30 <bt_gatt_indicate>
    afc4:	b108      	cbz	r0, afca <sc_process+0x62>
}
    afc6:	b002      	add	sp, #8
    afc8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    afca:	f3bf 8f5b 	dmb	ish
    afce:	e854 3f00 	ldrex	r3, [r4]
    afd2:	f043 0302 	orr.w	r3, r3, #2
    afd6:	e844 3200 	strex	r2, r3, [r4]
    afda:	2a00      	cmp	r2, #0
    afdc:	d1f7      	bne.n	afce <sc_process+0x66>
    afde:	f3bf 8f5b 	dmb	ish
    afe2:	e7f0      	b.n	afc6 <sc_process+0x5e>
    afe4:	2000c098 	.word	0x2000c098
    afe8:	0000a7e1 	.word	0x0000a7e1

0000afec <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    afec:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    afee:	4603      	mov	r3, r0
    aff0:	4a03      	ldr	r2, [pc, #12]	; (b000 <bt_gatt_connected+0x14>)
    aff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aff6:	2001      	movs	r0, #1
    aff8:	f7ff ff1c 	bl	ae34 <bt_gatt_foreach_attr>
    affc:	bd08      	pop	{r3, pc}
    affe:	bf00      	nop
    b000:	0000ab61 	.word	0x0000ab61

0000b004 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b004:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b006:	4603      	mov	r3, r0
    b008:	4a03      	ldr	r2, [pc, #12]	; (b018 <bt_gatt_disconnected+0x14>)
    b00a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b00e:	2001      	movs	r0, #1
    b010:	f7ff ff10 	bl	ae34 <bt_gatt_foreach_attr>
    b014:	bd08      	pop	{r3, pc}
    b016:	bf00      	nop
    b018:	0000abc5 	.word	0x0000abc5

0000b01c <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    b01c:	4b11      	ldr	r3, [pc, #68]	; (b064 <get_io_capa+0x48>)
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	b1db      	cbz	r3, b05a <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b022:	681a      	ldr	r2, [r3, #0]
    b024:	b152      	cbz	r2, b03c <get_io_capa+0x20>
    b026:	6859      	ldr	r1, [r3, #4]
    b028:	b141      	cbz	r1, b03c <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b02a:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b02c:	b109      	cbz	r1, b032 <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b02e:	2004      	movs	r0, #4
    b030:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b032:	490d      	ldr	r1, [pc, #52]	; (b068 <get_io_capa+0x4c>)
    b034:	7809      	ldrb	r1, [r1, #0]
    b036:	b909      	cbnz	r1, b03c <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b038:	2004      	movs	r0, #4
    b03a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b03c:	490a      	ldr	r1, [pc, #40]	; (b068 <get_io_capa+0x4c>)
    b03e:	7809      	ldrb	r1, [r1, #0]
    b040:	b121      	cbz	r1, b04c <get_io_capa+0x30>
    b042:	b11a      	cbz	r2, b04c <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    b044:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    b046:	b109      	cbz	r1, b04c <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    b048:	2001      	movs	r0, #1
    b04a:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    b04c:	685b      	ldr	r3, [r3, #4]
    b04e:	b10b      	cbz	r3, b054 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    b050:	2002      	movs	r0, #2
    b052:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    b054:	b11a      	cbz	r2, b05e <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    b056:	2000      	movs	r0, #0
    b058:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b05a:	2003      	movs	r0, #3
    b05c:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    b05e:	2003      	movs	r0, #3
}
    b060:	4770      	bx	lr
    b062:	bf00      	nop
    b064:	20002f28 	.word	0x20002f28
    b068:	20000f00 	.word	0x20000f00

0000b06c <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    b06c:	2904      	cmp	r1, #4
    b06e:	d811      	bhi.n	b094 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    b070:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    b074:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    b078:	4313      	orrs	r3, r2
    b07a:	f013 0f04 	tst.w	r3, #4
    b07e:	d00b      	beq.n	b098 <get_pair_method+0x2c>
{
    b080:	b510      	push	{r4, lr}
    b082:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    b084:	f7ff ffca 	bl	b01c <get_io_capa>
    b088:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    b08c:	4c03      	ldr	r4, [pc, #12]	; (b09c <get_pair_method+0x30>)
    b08e:	4421      	add	r1, r4
    b090:	5c08      	ldrb	r0, [r1, r0]
    b092:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    b094:	2000      	movs	r0, #0
    b096:	4770      	bx	lr
		return JUST_WORKS;
    b098:	2000      	movs	r0, #0
    b09a:	4770      	bx	lr
    b09c:	0003193c 	.word	0x0003193c

0000b0a0 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    b0a0:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    b0a4:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    b0a8:	4290      	cmp	r0, r2
    b0aa:	bf28      	it	cs
    b0ac:	4610      	movcs	r0, r2
    b0ae:	4770      	bx	lr

0000b0b0 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    b0b0:	b430      	push	{r4, r5}
	size_t len = 16;
    b0b2:	2310      	movs	r3, #16

	while (len--) {
    b0b4:	e007      	b.n	b0c6 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    b0b6:	7803      	ldrb	r3, [r0, #0]
    b0b8:	780d      	ldrb	r5, [r1, #0]
    b0ba:	406b      	eors	r3, r5
    b0bc:	7013      	strb	r3, [r2, #0]
	while (len--) {
    b0be:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    b0c0:	3201      	adds	r2, #1
    b0c2:	3101      	adds	r1, #1
    b0c4:	3001      	adds	r0, #1
	while (len--) {
    b0c6:	1e5c      	subs	r4, r3, #1
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d1f4      	bne.n	b0b6 <xor_128+0x6>
	}
}
    b0cc:	bc30      	pop	{r4, r5}
    b0ce:	4770      	bx	lr

0000b0d0 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    b0d0:	2904      	cmp	r1, #4
    b0d2:	d819      	bhi.n	b108 <legacy_get_pair_method+0x38>
{
    b0d4:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    b0d6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    b0da:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    b0de:	4313      	orrs	r3, r2
    b0e0:	f013 0f04 	tst.w	r3, #4
    b0e4:	d012      	beq.n	b10c <legacy_get_pair_method+0x3c>
    b0e6:	460c      	mov	r4, r1
    b0e8:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    b0ea:	f7ff ff97 	bl	b01c <get_io_capa>
    b0ee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    b0f2:	4c08      	ldr	r4, [pc, #32]	; (b114 <legacy_get_pair_method+0x44>)
    b0f4:	4421      	add	r1, r4
    b0f6:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    b0f8:	2804      	cmp	r0, #4
    b0fa:	d000      	beq.n	b0fe <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    b0fc:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b0fe:	682b      	ldr	r3, [r5, #0]
    b100:	78db      	ldrb	r3, [r3, #3]
    b102:	b92b      	cbnz	r3, b110 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    b104:	2002      	movs	r0, #2
    b106:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    b108:	2000      	movs	r0, #0
    b10a:	4770      	bx	lr
		return JUST_WORKS;
    b10c:	2000      	movs	r0, #0
    b10e:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    b110:	2001      	movs	r0, #1
    b112:	e7f3      	b.n	b0fc <legacy_get_pair_method+0x2c>
    b114:	00031920 	.word	0x00031920

0000b118 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    b118:	b510      	push	{r4, lr}
	if (sc_supported) {
    b11a:	4b09      	ldr	r3, [pc, #36]	; (b140 <get_auth+0x28>)
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	b143      	cbz	r3, b132 <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    b120:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    b124:	f7ff ff7a 	bl	b01c <get_io_capa>
    b128:	2803      	cmp	r0, #3
    b12a:	d005      	beq.n	b138 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    b12c:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    b130:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    b132:	f000 0407 	and.w	r4, r0, #7
    b136:	e7f5      	b.n	b124 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    b138:	f004 000b 	and.w	r0, r4, #11
    b13c:	bd10      	pop	{r4, pc}
    b13e:	bf00      	nop
    b140:	20000f00 	.word	0x20000f00

0000b144 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    b144:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    b146:	7a43      	ldrb	r3, [r0, #9]
    b148:	3b01      	subs	r3, #1
    b14a:	2b03      	cmp	r3, #3
    b14c:	d818      	bhi.n	b180 <sec_level_reachable+0x3c>
    b14e:	e8df f003 	tbb	[pc, r3]
    b152:	0202      	.short	0x0202
    b154:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    b156:	2001      	movs	r0, #1
    b158:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    b15a:	f7ff ff5f 	bl	b01c <get_io_capa>
    b15e:	3803      	subs	r0, #3
    b160:	bf18      	it	ne
    b162:	2001      	movne	r0, #1
    b164:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    b166:	f7ff ff59 	bl	b01c <get_io_capa>
    b16a:	2803      	cmp	r0, #3
    b16c:	d004      	beq.n	b178 <sec_level_reachable+0x34>
    b16e:	4b05      	ldr	r3, [pc, #20]	; (b184 <sec_level_reachable+0x40>)
    b170:	781b      	ldrb	r3, [r3, #0]
    b172:	b91b      	cbnz	r3, b17c <sec_level_reachable+0x38>
    b174:	2000      	movs	r0, #0
    b176:	bd08      	pop	{r3, pc}
    b178:	2000      	movs	r0, #0
    b17a:	bd08      	pop	{r3, pc}
    b17c:	2001      	movs	r0, #1
    b17e:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    b180:	2000      	movs	r0, #0
	}
}
    b182:	bd08      	pop	{r3, pc}
    b184:	20000f00 	.word	0x20000f00

0000b188 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b188:	2000      	movs	r0, #0
    b18a:	b110      	cbz	r0, b192 <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    b18c:	f06f 000b 	mvn.w	r0, #11
}
    b190:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    b192:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b196:	fb03 f300 	mul.w	r3, r3, r0
    b19a:	4a07      	ldr	r2, [pc, #28]	; (b1b8 <bt_smp_accept+0x30>)
    b19c:	58d3      	ldr	r3, [r2, r3]
    b19e:	b10b      	cbz	r3, b1a4 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b1a0:	3001      	adds	r0, #1
    b1a2:	e7f2      	b.n	b18a <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    b1a4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b1a8:	4a03      	ldr	r2, [pc, #12]	; (b1b8 <bt_smp_accept+0x30>)
    b1aa:	fb03 2300 	mla	r3, r3, r0, r2
    b1ae:	4a03      	ldr	r2, [pc, #12]	; (b1bc <bt_smp_accept+0x34>)
    b1b0:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    b1b2:	600b      	str	r3, [r1, #0]
		return 0;
    b1b4:	4770      	bx	lr
    b1b6:	bf00      	nop
    b1b8:	20000d18 	.word	0x20000d18
    b1bc:	2000c0d8 	.word	0x2000c0d8

0000b1c0 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    b1c0:	4b04      	ldr	r3, [pc, #16]	; (b1d4 <le_sc_supported+0x14>)
    b1c2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    b1c6:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    b1ca:	2806      	cmp	r0, #6
    b1cc:	bf14      	ite	ne
    b1ce:	2000      	movne	r0, #0
    b1d0:	2001      	moveq	r0, #1
    b1d2:	4770      	bx	lr
    b1d4:	2000be08 	.word	0x2000be08

0000b1d8 <smp_chan_get>:
{
    b1d8:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b1da:	2106      	movs	r1, #6
    b1dc:	f7fd fd18 	bl	8c10 <bt_l2cap_le_lookup_rx_cid>
}
    b1e0:	bd08      	pop	{r3, pc}

0000b1e2 <smp_create_pdu>:
{
    b1e2:	b538      	push	{r3, r4, r5, lr}
    b1e4:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    b1e6:	2100      	movs	r1, #0
    b1e8:	4608      	mov	r0, r1
    b1ea:	f7fd fa58 	bl	869e <bt_l2cap_create_pdu>
    b1ee:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    b1f0:	2101      	movs	r1, #1
    b1f2:	3008      	adds	r0, #8
    b1f4:	f010 f952 	bl	1b49c <net_buf_simple_add>
	hdr->code = op;
    b1f8:	7005      	strb	r5, [r0, #0]
}
    b1fa:	4620      	mov	r0, r4
    b1fc:	bd38      	pop	{r3, r4, r5, pc}

0000b1fe <smp_init>:
{
    b1fe:	b510      	push	{r4, lr}
    b200:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    b202:	22e0      	movs	r2, #224	; 0xe0
    b204:	2100      	movs	r1, #0
    b206:	309c      	adds	r0, #156	; 0x9c
    b208:	f01f fc1a 	bl	2aa40 <memset>
	if (bt_rand(smp->prnd, 16)) {
    b20c:	2110      	movs	r1, #16
    b20e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b212:	f006 fdcd 	bl	11db0 <bt_rand>
    b216:	b110      	cbz	r0, b21e <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    b218:	2308      	movs	r3, #8
}
    b21a:	4618      	mov	r0, r3
    b21c:	bd10      	pop	{r4, pc}
    b21e:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b220:	349c      	adds	r4, #156	; 0x9c
    b222:	f3bf 8f5b 	dmb	ish
    b226:	e854 2f00 	ldrex	r2, [r4]
    b22a:	f042 0220 	orr.w	r2, r2, #32
    b22e:	e844 2100 	strex	r1, r2, [r4]
    b232:	2900      	cmp	r1, #0
    b234:	d1f7      	bne.n	b226 <smp_init+0x28>
    b236:	f3bf 8f5b 	dmb	ish
	return 0;
    b23a:	e7ee      	b.n	b21a <smp_init+0x1c>

0000b23c <display_passkey>:
{
    b23c:	b538      	push	{r3, r4, r5, lr}
    b23e:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    b240:	2104      	movs	r1, #4
    b242:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    b246:	f006 fdb3 	bl	11db0 <bt_rand>
    b24a:	b108      	cbz	r0, b250 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    b24c:	2008      	movs	r0, #8
}
    b24e:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    b250:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    b254:	4909      	ldr	r1, [pc, #36]	; (b27c <display_passkey+0x40>)
    b256:	fba1 2103 	umull	r2, r1, r1, r3
    b25a:	0c89      	lsrs	r1, r1, #18
    b25c:	4a08      	ldr	r2, [pc, #32]	; (b280 <display_passkey+0x44>)
    b25e:	fb02 3111 	mls	r1, r2, r1, r3
    b262:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    b266:	2500      	movs	r5, #0
    b268:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    b26c:	4b05      	ldr	r3, [pc, #20]	; (b284 <display_passkey+0x48>)
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	681b      	ldr	r3, [r3, #0]
    b272:	6820      	ldr	r0, [r4, #0]
    b274:	4798      	blx	r3
	return 0;
    b276:	4628      	mov	r0, r5
    b278:	bd38      	pop	{r3, r4, r5, pc}
    b27a:	bf00      	nop
    b27c:	431bde83 	.word	0x431bde83
    b280:	000f4240 	.word	0x000f4240
    b284:	20002f28 	.word	0x20002f28

0000b288 <smp_send>:
{
    b288:	b510      	push	{r4, lr}
    b28a:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    b28c:	4613      	mov	r3, r2
    b28e:	460a      	mov	r2, r1
    b290:	2106      	movs	r1, #6
    b292:	6800      	ldr	r0, [r0, #0]
    b294:	f7fd fa9b 	bl	87ce <bt_l2cap_send_cb>
    b298:	f247 5230 	movw	r2, #30000	; 0x7530
    b29c:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    b2a0:	4801      	ldr	r0, [pc, #4]	; (b2a8 <smp_send+0x20>)
    b2a2:	f01f fa43 	bl	2a72c <k_delayed_work_submit_to_queue>
    b2a6:	bd10      	pop	{r4, pc}
    b2a8:	200030f0 	.word	0x200030f0

0000b2ac <sc_smp_send_dhkey_check>:
{
    b2ac:	b570      	push	{r4, r5, r6, lr}
    b2ae:	4604      	mov	r4, r0
    b2b0:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    b2b2:	2210      	movs	r2, #16
    b2b4:	210d      	movs	r1, #13
    b2b6:	6800      	ldr	r0, [r0, #0]
    b2b8:	f7ff ff93 	bl	b1e2 <smp_create_pdu>
	if (!buf) {
    b2bc:	b178      	cbz	r0, b2de <sc_smp_send_dhkey_check+0x32>
    b2be:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    b2c0:	2110      	movs	r1, #16
    b2c2:	3008      	adds	r0, #8
    b2c4:	f010 f8ea 	bl	1b49c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    b2c8:	2210      	movs	r2, #16
    b2ca:	4631      	mov	r1, r6
    b2cc:	f7f4 fff8 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    b2d0:	2200      	movs	r2, #0
    b2d2:	4629      	mov	r1, r5
    b2d4:	4620      	mov	r0, r4
    b2d6:	f7ff ffd7 	bl	b288 <smp_send>
	return 0;
    b2da:	2000      	movs	r0, #0
    b2dc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b2de:	2008      	movs	r0, #8
}
    b2e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b2e4 <sc_send_public_key>:
{
    b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2e6:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    b2e8:	2240      	movs	r2, #64	; 0x40
    b2ea:	210c      	movs	r1, #12
    b2ec:	6800      	ldr	r0, [r0, #0]
    b2ee:	f7ff ff78 	bl	b1e2 <smp_create_pdu>
	if (!req_buf) {
    b2f2:	b1b0      	cbz	r0, b322 <sc_send_public_key+0x3e>
    b2f4:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    b2f6:	2140      	movs	r1, #64	; 0x40
    b2f8:	3008      	adds	r0, #8
    b2fa:	f010 f8cf 	bl	1b49c <net_buf_simple_add>
    b2fe:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b300:	4e09      	ldr	r6, [pc, #36]	; (b328 <sc_send_public_key+0x44>)
    b302:	2220      	movs	r2, #32
    b304:	4631      	mov	r1, r6
    b306:	f7f4 ffdb 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    b30a:	2220      	movs	r2, #32
    b30c:	18b1      	adds	r1, r6, r2
    b30e:	18b8      	adds	r0, r7, r2
    b310:	f7f4 ffd6 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    b314:	2200      	movs	r2, #0
    b316:	4629      	mov	r1, r5
    b318:	4620      	mov	r0, r4
    b31a:	f7ff ffb5 	bl	b288 <smp_send>
	return 0;
    b31e:	2000      	movs	r0, #0
    b320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b322:	2008      	movs	r0, #8
}
    b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b326:	bf00      	nop
    b328:	20000ec0 	.word	0x20000ec0

0000b32c <send_pairing_rsp>:
{
    b32c:	b538      	push	{r3, r4, r5, lr}
    b32e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    b330:	2206      	movs	r2, #6
    b332:	2102      	movs	r1, #2
    b334:	6800      	ldr	r0, [r0, #0]
    b336:	f7ff ff54 	bl	b1e2 <smp_create_pdu>
	if (!rsp_buf) {
    b33a:	b180      	cbz	r0, b35e <send_pairing_rsp+0x32>
    b33c:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    b33e:	2106      	movs	r1, #6
    b340:	3008      	adds	r0, #8
    b342:	f010 f8ab 	bl	1b49c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    b346:	2206      	movs	r2, #6
    b348:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    b34c:	f7f4 ffb8 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    b350:	2200      	movs	r2, #0
    b352:	4629      	mov	r1, r5
    b354:	4620      	mov	r0, r4
    b356:	f7ff ff97 	bl	b288 <smp_send>
	return 0;
    b35a:	2000      	movs	r0, #0
    b35c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b35e:	2008      	movs	r0, #8
}
    b360:	bd38      	pop	{r3, r4, r5, pc}

0000b362 <smp_send_pairing_random>:
{
    b362:	b538      	push	{r3, r4, r5, lr}
    b364:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    b366:	2210      	movs	r2, #16
    b368:	2104      	movs	r1, #4
    b36a:	6800      	ldr	r0, [r0, #0]
    b36c:	f7ff ff39 	bl	b1e2 <smp_create_pdu>
	if (!rsp_buf) {
    b370:	b180      	cbz	r0, b394 <smp_send_pairing_random+0x32>
    b372:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    b374:	2110      	movs	r1, #16
    b376:	3008      	adds	r0, #8
    b378:	f010 f890 	bl	1b49c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    b37c:	2210      	movs	r2, #16
    b37e:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b382:	f7f4 ff9d 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    b386:	2200      	movs	r2, #0
    b388:	4629      	mov	r1, r5
    b38a:	4620      	mov	r0, r4
    b38c:	f7ff ff7c 	bl	b288 <smp_send>
	return 0;
    b390:	2000      	movs	r0, #0
    b392:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b394:	2008      	movs	r0, #8
}
    b396:	bd38      	pop	{r3, r4, r5, pc}

0000b398 <bt_smp_aes_cmac>:
{
    b398:	b570      	push	{r4, r5, r6, lr}
    b39a:	b0c2      	sub	sp, #264	; 0x108
    b39c:	460c      	mov	r4, r1
    b39e:	4615      	mov	r5, r2
    b3a0:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    b3a2:	aa16      	add	r2, sp, #88	; 0x58
    b3a4:	4601      	mov	r1, r0
    b3a6:	4668      	mov	r0, sp
    b3a8:	f7f8 faaf 	bl	390a <tc_cmac_setup>
    b3ac:	b180      	cbz	r0, b3d0 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    b3ae:	462a      	mov	r2, r5
    b3b0:	4621      	mov	r1, r4
    b3b2:	4668      	mov	r0, sp
    b3b4:	f7f8 fad6 	bl	3964 <tc_cmac_update>
    b3b8:	b168      	cbz	r0, b3d6 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    b3ba:	4669      	mov	r1, sp
    b3bc:	4630      	mov	r0, r6
    b3be:	f7f8 fb3b 	bl	3a38 <tc_cmac_final>
    b3c2:	b110      	cbz	r0, b3ca <bt_smp_aes_cmac+0x32>
	return 0;
    b3c4:	2000      	movs	r0, #0
}
    b3c6:	b042      	add	sp, #264	; 0x108
    b3c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    b3ca:	f06f 0004 	mvn.w	r0, #4
    b3ce:	e7fa      	b.n	b3c6 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    b3d0:	f06f 0004 	mvn.w	r0, #4
    b3d4:	e7f7      	b.n	b3c6 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    b3d6:	f06f 0004 	mvn.w	r0, #4
    b3da:	e7f4      	b.n	b3c6 <bt_smp_aes_cmac+0x2e>

0000b3dc <smp_sign_buf>:
{
    b3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b3e0:	b08b      	sub	sp, #44	; 0x2c
    b3e2:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    b3e4:	188f      	adds	r7, r1, r2
    b3e6:	683b      	ldr	r3, [r7, #0]
    b3e8:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    b3ea:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    b3ec:	2300      	movs	r3, #0
    b3ee:	e006      	b.n	b3fe <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    b3f0:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b3f2:	1af1      	subs	r1, r6, r3
    b3f4:	3901      	subs	r1, #1
    b3f6:	5c6c      	ldrb	r4, [r5, r1]
    b3f8:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b3fa:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    b3fc:	3301      	adds	r3, #1
    b3fe:	ea4f 0856 	mov.w	r8, r6, lsr #1
    b402:	4543      	cmp	r3, r8
    b404:	d3f4      	bcc.n	b3f0 <smp_sign_buf+0x14>
	src += length - 1;
    b406:	300f      	adds	r0, #15
    b408:	2410      	movs	r4, #16
    b40a:	ab05      	add	r3, sp, #20
    b40c:	e004      	b.n	b418 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b40e:	7802      	ldrb	r2, [r0, #0]
    b410:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    b412:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b414:	3801      	subs	r0, #1
    b416:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b418:	2c00      	cmp	r4, #0
    b41a:	d1f8      	bne.n	b40e <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    b41c:	ab01      	add	r3, sp, #4
    b41e:	4632      	mov	r2, r6
    b420:	4629      	mov	r1, r5
    b422:	a805      	add	r0, sp, #20
    b424:	f7ff ffb8 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b428:	4681      	mov	r9, r0
    b42a:	bb08      	cbnz	r0, b470 <smp_sign_buf+0x94>
    b42c:	4623      	mov	r3, r4
    b42e:	e009      	b.n	b444 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    b430:	aa01      	add	r2, sp, #4
    b432:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b434:	f1c3 010f 	rsb	r1, r3, #15
    b438:	f812 e001 	ldrb.w	lr, [r2, r1]
    b43c:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b440:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    b442:	3301      	adds	r3, #1
    b444:	2b07      	cmp	r3, #7
    b446:	d9f3      	bls.n	b430 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    b448:	2204      	movs	r2, #4
    b44a:	a909      	add	r1, sp, #36	; 0x24
    b44c:	a802      	add	r0, sp, #8
    b44e:	f7f4 ff37 	bl	2c0 <memcpy>
    b452:	e006      	b.n	b462 <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    b454:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b456:	1b33      	subs	r3, r6, r4
    b458:	3b01      	subs	r3, #1
    b45a:	5ce9      	ldrb	r1, [r5, r3]
    b45c:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b45e:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    b460:	3401      	adds	r4, #1
    b462:	45a0      	cmp	r8, r4
    b464:	d8f6      	bhi.n	b454 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    b466:	220c      	movs	r2, #12
    b468:	a902      	add	r1, sp, #8
    b46a:	4638      	mov	r0, r7
    b46c:	f7f4 ff28 	bl	2c0 <memcpy>
}
    b470:	4648      	mov	r0, r9
    b472:	b00b      	add	sp, #44	; 0x2c
    b474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b478 <smp_f4>:
{
    b478:	b5f0      	push	{r4, r5, r6, r7, lr}
    b47a:	b097      	sub	sp, #92	; 0x5c
    b47c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    b47e:	301f      	adds	r0, #31
    b480:	2420      	movs	r4, #32
    b482:	ad01      	add	r5, sp, #4
    b484:	e004      	b.n	b490 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b486:	7807      	ldrb	r7, [r0, #0]
    b488:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    b48a:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b48c:	3801      	subs	r0, #1
    b48e:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b490:	2c00      	cmp	r4, #0
    b492:	d1f8      	bne.n	b486 <smp_f4+0xe>
	src += length - 1;
    b494:	311f      	adds	r1, #31
    b496:	2020      	movs	r0, #32
    b498:	ac09      	add	r4, sp, #36	; 0x24
    b49a:	e004      	b.n	b4a6 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b49c:	780d      	ldrb	r5, [r1, #0]
    b49e:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    b4a0:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b4a2:	3901      	subs	r1, #1
    b4a4:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    b4a6:	2800      	cmp	r0, #0
    b4a8:	d1f8      	bne.n	b49c <smp_f4+0x24>
	m[64] = z;
    b4aa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    b4ae:	320f      	adds	r2, #15
    b4b0:	2410      	movs	r4, #16
    b4b2:	ab12      	add	r3, sp, #72	; 0x48
    b4b4:	e004      	b.n	b4c0 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b4b6:	7811      	ldrb	r1, [r2, #0]
    b4b8:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    b4ba:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b4bc:	3a01      	subs	r2, #1
    b4be:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b4c0:	2c00      	cmp	r4, #0
    b4c2:	d1f8      	bne.n	b4b6 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    b4c4:	4633      	mov	r3, r6
    b4c6:	2241      	movs	r2, #65	; 0x41
    b4c8:	a901      	add	r1, sp, #4
    b4ca:	a812      	add	r0, sp, #72	; 0x48
    b4cc:	f7ff ff64 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b4d0:	4605      	mov	r5, r0
    b4d2:	b138      	cbz	r0, b4e4 <smp_f4+0x6c>
    b4d4:	e008      	b.n	b4e8 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    b4d6:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b4d8:	f1c4 030f 	rsb	r3, r4, #15
    b4dc:	5cf1      	ldrb	r1, [r6, r3]
    b4de:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b4e0:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    b4e2:	3401      	adds	r4, #1
    b4e4:	2c07      	cmp	r4, #7
    b4e6:	d9f6      	bls.n	b4d6 <smp_f4+0x5e>
}
    b4e8:	4628      	mov	r0, r5
    b4ea:	b017      	add	sp, #92	; 0x5c
    b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000b4f0 <sc_smp_check_confirm>:
	switch (smp->method) {
    b4f0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b4f4:	2b03      	cmp	r3, #3
    b4f6:	d827      	bhi.n	b548 <sc_smp_check_confirm+0x58>
    b4f8:	e8df f003 	tbb	[pc, r3]
    b4fc:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b500:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    b504:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    b508:	40d3      	lsrs	r3, r2
    b50a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    b50e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b512:	b2db      	uxtb	r3, r3
		break;
    b514:	e000      	b.n	b518 <sc_smp_check_confirm+0x28>
		r = 0;
    b516:	2300      	movs	r3, #0
{
    b518:	b510      	push	{r4, lr}
    b51a:	b086      	sub	sp, #24
    b51c:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    b51e:	aa02      	add	r2, sp, #8
    b520:	9200      	str	r2, [sp, #0]
    b522:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    b526:	490a      	ldr	r1, [pc, #40]	; (b550 <sc_smp_check_confirm+0x60>)
    b528:	30f3      	adds	r0, #243	; 0xf3
    b52a:	f7ff ffa5 	bl	b478 <smp_f4>
    b52e:	b110      	cbz	r0, b536 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    b530:	2008      	movs	r0, #8
}
    b532:	b006      	add	sp, #24
    b534:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    b536:	2210      	movs	r2, #16
    b538:	a902      	add	r1, sp, #8
    b53a:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b53e:	f01f f9eb 	bl	2a918 <memcmp>
    b542:	b118      	cbz	r0, b54c <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    b544:	2004      	movs	r0, #4
    b546:	e7f4      	b.n	b532 <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    b548:	2008      	movs	r0, #8
    b54a:	4770      	bx	lr
	return 0;
    b54c:	2000      	movs	r0, #0
    b54e:	e7f0      	b.n	b532 <sc_smp_check_confirm+0x42>
    b550:	20000ec0 	.word	0x20000ec0

0000b554 <smp_f5>:
{
    b554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b558:	b09b      	sub	sp, #108	; 0x6c
    b55a:	4604      	mov	r4, r0
    b55c:	460e      	mov	r6, r1
    b55e:	4615      	mov	r5, r2
    b560:	461f      	mov	r7, r3
    b562:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    b566:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    b56a:	2235      	movs	r2, #53	; 0x35
    b56c:	2100      	movs	r1, #0
    b56e:	a80c      	add	r0, sp, #48	; 0x30
    b570:	f01f fa66 	bl	2aa40 <memset>
    b574:	2362      	movs	r3, #98	; 0x62
    b576:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    b57a:	2374      	movs	r3, #116	; 0x74
    b57c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    b580:	236c      	movs	r3, #108	; 0x6c
    b582:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    b586:	2365      	movs	r3, #101	; 0x65
    b588:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    b58c:	2301      	movs	r3, #1
    b58e:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    b592:	f104 001f 	add.w	r0, r4, #31
    b596:	2320      	movs	r3, #32
    b598:	466a      	mov	r2, sp
    b59a:	e004      	b.n	b5a6 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b59c:	7801      	ldrb	r1, [r0, #0]
    b59e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b5a0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5a2:	3801      	subs	r0, #1
    b5a4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	d1f8      	bne.n	b59c <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b5aa:	ab08      	add	r3, sp, #32
    b5ac:	2220      	movs	r2, #32
    b5ae:	4669      	mov	r1, sp
    b5b0:	4838      	ldr	r0, [pc, #224]	; (b694 <smp_f5+0x140>)
    b5b2:	f7ff fef1 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b5b6:	4686      	mov	lr, r0
    b5b8:	2800      	cmp	r0, #0
    b5ba:	d166      	bne.n	b68a <smp_f5+0x136>
	src += length - 1;
    b5bc:	360f      	adds	r6, #15
    b5be:	2310      	movs	r3, #16
    b5c0:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    b5c4:	e004      	b.n	b5d0 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5c6:	7831      	ldrb	r1, [r6, #0]
    b5c8:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b5ca:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5cc:	3e01      	subs	r6, #1
    b5ce:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d1f8      	bne.n	b5c6 <smp_f5+0x72>
	src += length - 1;
    b5d4:	350f      	adds	r5, #15
    b5d6:	2310      	movs	r3, #16
    b5d8:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    b5dc:	e004      	b.n	b5e8 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5de:	7829      	ldrb	r1, [r5, #0]
    b5e0:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b5e2:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5e4:	3d01      	subs	r5, #1
    b5e6:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	d1f8      	bne.n	b5de <smp_f5+0x8a>
	m[37] = a1->type;
    b5ec:	f817 3b06 	ldrb.w	r3, [r7], #6
    b5f0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    b5f4:	2306      	movs	r3, #6
    b5f6:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    b5fa:	e004      	b.n	b606 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b5fc:	7839      	ldrb	r1, [r7, #0]
    b5fe:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b600:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b602:	3f01      	subs	r7, #1
    b604:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b606:	2b00      	cmp	r3, #0
    b608:	d1f8      	bne.n	b5fc <smp_f5+0xa8>
	m[44] = a2->type;
    b60a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b60c:	f813 2b06 	ldrb.w	r2, [r3], #6
    b610:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    b614:	2406      	movs	r4, #6
    b616:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    b61a:	e004      	b.n	b626 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b61c:	7819      	ldrb	r1, [r3, #0]
    b61e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b620:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b622:	3b01      	subs	r3, #1
    b624:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b626:	2c00      	cmp	r4, #0
    b628:	d1f8      	bne.n	b61c <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b62a:	4643      	mov	r3, r8
    b62c:	2235      	movs	r2, #53	; 0x35
    b62e:	a90c      	add	r1, sp, #48	; 0x30
    b630:	a808      	add	r0, sp, #32
    b632:	f7ff feb1 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b636:	4686      	mov	lr, r0
    b638:	bb38      	cbnz	r0, b68a <smp_f5+0x136>
    b63a:	4623      	mov	r3, r4
    b63c:	e00a      	b.n	b654 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    b63e:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b642:	f1c3 020f 	rsb	r2, r3, #15
    b646:	f818 0002 	ldrb.w	r0, [r8, r2]
    b64a:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b64e:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    b652:	3301      	adds	r3, #1
    b654:	2b07      	cmp	r3, #7
    b656:	d9f2      	bls.n	b63e <smp_f5+0xea>
	m[0] = 0x01;
    b658:	a91a      	add	r1, sp, #104	; 0x68
    b65a:	2301      	movs	r3, #1
    b65c:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b660:	464b      	mov	r3, r9
    b662:	2235      	movs	r2, #53	; 0x35
    b664:	a808      	add	r0, sp, #32
    b666:	f7ff fe97 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b66a:	4686      	mov	lr, r0
    b66c:	b158      	cbz	r0, b686 <smp_f5+0x132>
    b66e:	e00c      	b.n	b68a <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    b670:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b674:	f1c4 030f 	rsb	r3, r4, #15
    b678:	f819 1003 	ldrb.w	r1, [r9, r3]
    b67c:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b680:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    b684:	3401      	adds	r4, #1
    b686:	2c07      	cmp	r4, #7
    b688:	d9f2      	bls.n	b670 <smp_f5+0x11c>
}
    b68a:	4670      	mov	r0, lr
    b68c:	b01b      	add	sp, #108	; 0x6c
    b68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b692:	bf00      	nop
    b694:	00031958 	.word	0x00031958

0000b698 <smp_f6>:
{
    b698:	b5f0      	push	{r4, r5, r6, r7, lr}
    b69a:	b097      	sub	sp, #92	; 0x5c
    b69c:	4604      	mov	r4, r0
    b69e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    b6a0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    b6a2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    b6a4:	310f      	adds	r1, #15
    b6a6:	2010      	movs	r0, #16
    b6a8:	f10d 0e04 	add.w	lr, sp, #4
    b6ac:	e007      	b.n	b6be <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6ae:	f891 c000 	ldrb.w	ip, [r1]
    b6b2:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    b6b6:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6b8:	3901      	subs	r1, #1
    b6ba:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    b6be:	2800      	cmp	r0, #0
    b6c0:	d1f5      	bne.n	b6ae <smp_f6+0x16>
	src += length - 1;
    b6c2:	320f      	adds	r2, #15
    b6c4:	2110      	movs	r1, #16
    b6c6:	a805      	add	r0, sp, #20
    b6c8:	e006      	b.n	b6d8 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6ca:	f892 e000 	ldrb.w	lr, [r2]
    b6ce:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    b6d2:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6d4:	3a01      	subs	r2, #1
    b6d6:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b6d8:	2900      	cmp	r1, #0
    b6da:	d1f6      	bne.n	b6ca <smp_f6+0x32>
	src += length - 1;
    b6dc:	330f      	adds	r3, #15
    b6de:	2210      	movs	r2, #16
    b6e0:	a909      	add	r1, sp, #36	; 0x24
    b6e2:	e004      	b.n	b6ee <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6e4:	7818      	ldrb	r0, [r3, #0]
    b6e6:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b6e8:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6ea:	3b01      	subs	r3, #1
    b6ec:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b6ee:	2a00      	cmp	r2, #0
    b6f0:	d1f8      	bne.n	b6e4 <smp_f6+0x4c>
	src += length - 1;
    b6f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b6f4:	3302      	adds	r3, #2
    b6f6:	2203      	movs	r2, #3
    b6f8:	a90d      	add	r1, sp, #52	; 0x34
    b6fa:	e004      	b.n	b706 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b6fc:	7818      	ldrb	r0, [r3, #0]
    b6fe:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b700:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b702:	3b01      	subs	r3, #1
    b704:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b706:	2a00      	cmp	r2, #0
    b708:	d1f8      	bne.n	b6fc <smp_f6+0x64>
	m[51] = a1->type;
    b70a:	4631      	mov	r1, r6
    b70c:	f811 3b01 	ldrb.w	r3, [r1], #1
    b710:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    b714:	2206      	movs	r2, #6
    b716:	a80e      	add	r0, sp, #56	; 0x38
    b718:	f7f4 fdd2 	bl	2c0 <memcpy>
	src += length - 1;
    b71c:	3606      	adds	r6, #6
    b71e:	2306      	movs	r3, #6
    b720:	aa0e      	add	r2, sp, #56	; 0x38
    b722:	e004      	b.n	b72e <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b724:	7831      	ldrb	r1, [r6, #0]
    b726:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b728:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b72a:	3e01      	subs	r6, #1
    b72c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b72e:	2b00      	cmp	r3, #0
    b730:	d1f8      	bne.n	b724 <smp_f6+0x8c>
	m[58] = a2->type;
    b732:	4629      	mov	r1, r5
    b734:	f811 3b01 	ldrb.w	r3, [r1], #1
    b738:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    b73c:	2206      	movs	r2, #6
    b73e:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    b742:	f7f4 fdbd 	bl	2c0 <memcpy>
	src += length - 1;
    b746:	3506      	adds	r5, #6
    b748:	2306      	movs	r3, #6
    b74a:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    b74e:	e004      	b.n	b75a <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b750:	7829      	ldrb	r1, [r5, #0]
    b752:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b754:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b756:	3d01      	subs	r5, #1
    b758:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b75a:	2b00      	cmp	r3, #0
    b75c:	d1f8      	bne.n	b750 <smp_f6+0xb8>
	src += length - 1;
    b75e:	f104 000f 	add.w	r0, r4, #15
    b762:	2410      	movs	r4, #16
    b764:	ab12      	add	r3, sp, #72	; 0x48
    b766:	e004      	b.n	b772 <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b768:	7802      	ldrb	r2, [r0, #0]
    b76a:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    b76c:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b76e:	3801      	subs	r0, #1
    b770:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b772:	2c00      	cmp	r4, #0
    b774:	d1f8      	bne.n	b768 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    b776:	463b      	mov	r3, r7
    b778:	2241      	movs	r2, #65	; 0x41
    b77a:	a901      	add	r1, sp, #4
    b77c:	a812      	add	r0, sp, #72	; 0x48
    b77e:	f7ff fe0b 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b782:	4605      	mov	r5, r0
    b784:	b138      	cbz	r0, b796 <smp_f6+0xfe>
    b786:	e008      	b.n	b79a <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    b788:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b78a:	f1c4 030f 	rsb	r3, r4, #15
    b78e:	5cf9      	ldrb	r1, [r7, r3]
    b790:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b792:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    b794:	3401      	adds	r4, #1
    b796:	2c07      	cmp	r4, #7
    b798:	d9f6      	bls.n	b788 <smp_f6+0xf0>
}
    b79a:	4628      	mov	r0, r5
    b79c:	b017      	add	sp, #92	; 0x5c
    b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b7a0 <compute_and_send_master_dhcheck>:
{
    b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7a2:	b08d      	sub	sp, #52	; 0x34
    b7a4:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b7a6:	2210      	movs	r2, #16
    b7a8:	2100      	movs	r1, #0
    b7aa:	eb0d 0002 	add.w	r0, sp, r2
    b7ae:	f01f f947 	bl	2aa40 <memset>
	switch (smp->method) {
    b7b2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b7b6:	2b03      	cmp	r3, #3
    b7b8:	d84a      	bhi.n	b850 <compute_and_send_master_dhcheck+0xb0>
    b7ba:	e8df f003 	tbb	[pc, r3]
    b7be:	0208      	.short	0x0208
    b7c0:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b7c2:	2204      	movs	r2, #4
    b7c4:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b7c8:	a804      	add	r0, sp, #16
    b7ca:	f7f4 fd79 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b7ce:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    b7d2:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    b7d6:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b7d8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b7dc:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b7e0:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b7e4:	9102      	str	r1, [sp, #8]
    b7e6:	9501      	str	r5, [sp, #4]
    b7e8:	9200      	str	r2, [sp, #0]
    b7ea:	334f      	adds	r3, #79	; 0x4f
    b7ec:	463a      	mov	r2, r7
    b7ee:	4631      	mov	r1, r6
    b7f0:	f204 1033 	addw	r0, r4, #307	; 0x133
    b7f4:	f7ff feae 	bl	b554 <smp_f5>
    b7f8:	b110      	cbz	r0, b800 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b7fa:	2008      	movs	r0, #8
}
    b7fc:	b00d      	add	sp, #52	; 0x34
    b7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b800:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b804:	6823      	ldr	r3, [r4, #0]
    b806:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    b80a:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b80c:	a808      	add	r0, sp, #32
    b80e:	9003      	str	r0, [sp, #12]
    b810:	9302      	str	r3, [sp, #8]
    b812:	9101      	str	r1, [sp, #4]
    b814:	9200      	str	r2, [sp, #0]
    b816:	ab04      	add	r3, sp, #16
    b818:	463a      	mov	r2, r7
    b81a:	4631      	mov	r1, r6
    b81c:	4628      	mov	r0, r5
    b81e:	f7ff ff3b 	bl	b698 <smp_f6>
    b822:	b108      	cbz	r0, b828 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b824:	2008      	movs	r0, #8
    b826:	e7e9      	b.n	b7fc <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b828:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b82c:	f3bf 8f5b 	dmb	ish
    b830:	e853 2f00 	ldrex	r2, [r3]
    b834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b838:	e843 2100 	strex	r1, r2, [r3]
    b83c:	2900      	cmp	r1, #0
    b83e:	d1f7      	bne.n	b830 <compute_and_send_master_dhcheck+0x90>
    b840:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    b844:	a908      	add	r1, sp, #32
    b846:	4620      	mov	r0, r4
    b848:	f7ff fd30 	bl	b2ac <sc_smp_send_dhkey_check>
	return 0;
    b84c:	2000      	movs	r0, #0
    b84e:	e7d5      	b.n	b7fc <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b850:	2008      	movs	r0, #8
    b852:	e7d3      	b.n	b7fc <compute_and_send_master_dhcheck+0x5c>

0000b854 <compute_and_check_and_send_slave_dhcheck>:
{
    b854:	b5f0      	push	{r4, r5, r6, r7, lr}
    b856:	b091      	sub	sp, #68	; 0x44
    b858:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b85a:	2210      	movs	r2, #16
    b85c:	2100      	movs	r1, #0
    b85e:	eb0d 0002 	add.w	r0, sp, r2
    b862:	f01f f8ed 	bl	2aa40 <memset>
	switch (smp->method) {
    b866:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b86a:	2b03      	cmp	r3, #3
    b86c:	d866      	bhi.n	b93c <compute_and_check_and_send_slave_dhcheck+0xe8>
    b86e:	e8df f003 	tbb	[pc, r3]
    b872:	0208      	.short	0x0208
    b874:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b876:	2204      	movs	r2, #4
    b878:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b87c:	a804      	add	r0, sp, #16
    b87e:	f7f4 fd1f 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b882:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    b886:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    b88a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b88c:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b890:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b894:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b898:	9102      	str	r1, [sp, #8]
    b89a:	9501      	str	r5, [sp, #4]
    b89c:	9200      	str	r2, [sp, #0]
    b89e:	334f      	adds	r3, #79	; 0x4f
    b8a0:	463a      	mov	r2, r7
    b8a2:	4631      	mov	r1, r6
    b8a4:	f204 1033 	addw	r0, r4, #307	; 0x133
    b8a8:	f7ff fe54 	bl	b554 <smp_f5>
    b8ac:	b110      	cbz	r0, b8b4 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b8ae:	2008      	movs	r0, #8
}
    b8b0:	b011      	add	sp, #68	; 0x44
    b8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b8b4:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    b8b8:	6823      	ldr	r3, [r4, #0]
    b8ba:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b8be:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b8c0:	a808      	add	r0, sp, #32
    b8c2:	9003      	str	r0, [sp, #12]
    b8c4:	9302      	str	r3, [sp, #8]
    b8c6:	9101      	str	r1, [sp, #4]
    b8c8:	9200      	str	r2, [sp, #0]
    b8ca:	ab04      	add	r3, sp, #16
    b8cc:	4632      	mov	r2, r6
    b8ce:	4639      	mov	r1, r7
    b8d0:	4628      	mov	r0, r5
    b8d2:	f7ff fee1 	bl	b698 <smp_f6>
    b8d6:	b108      	cbz	r0, b8dc <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b8d8:	2008      	movs	r0, #8
    b8da:	e7e9      	b.n	b8b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b8dc:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b8e0:	6823      	ldr	r3, [r4, #0]
    b8e2:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b8e6:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b8e8:	a80c      	add	r0, sp, #48	; 0x30
    b8ea:	9003      	str	r0, [sp, #12]
    b8ec:	9302      	str	r3, [sp, #8]
    b8ee:	9101      	str	r1, [sp, #4]
    b8f0:	9200      	str	r2, [sp, #0]
    b8f2:	ab04      	add	r3, sp, #16
    b8f4:	463a      	mov	r2, r7
    b8f6:	4631      	mov	r1, r6
    b8f8:	4628      	mov	r0, r5
    b8fa:	f7ff fecd 	bl	b698 <smp_f6>
    b8fe:	b108      	cbz	r0, b904 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b900:	2008      	movs	r0, #8
    b902:	e7d5      	b.n	b8b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b904:	2210      	movs	r2, #16
    b906:	a90c      	add	r1, sp, #48	; 0x30
    b908:	f204 1053 	addw	r0, r4, #339	; 0x153
    b90c:	f01f f804 	bl	2a918 <memcmp>
    b910:	b108      	cbz	r0, b916 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b912:	200b      	movs	r0, #11
    b914:	e7cc      	b.n	b8b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b916:	a908      	add	r1, sp, #32
    b918:	4620      	mov	r0, r4
    b91a:	f7ff fcc7 	bl	b2ac <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b91e:	34a0      	adds	r4, #160	; 0xa0
    b920:	f3bf 8f5b 	dmb	ish
    b924:	e854 3f00 	ldrex	r3, [r4]
    b928:	f043 0302 	orr.w	r3, r3, #2
    b92c:	e844 3200 	strex	r2, r3, [r4]
    b930:	2a00      	cmp	r2, #0
    b932:	d1f7      	bne.n	b924 <compute_and_check_and_send_slave_dhcheck+0xd0>
    b934:	f3bf 8f5b 	dmb	ish
	return 0;
    b938:	2000      	movs	r0, #0
    b93a:	e7b9      	b.n	b8b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b93c:	2008      	movs	r0, #8
    b93e:	e7b7      	b.n	b8b0 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b940 <smp_g2>:
{
    b940:	b5f0      	push	{r4, r5, r6, r7, lr}
    b942:	b099      	sub	sp, #100	; 0x64
    b944:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b946:	301f      	adds	r0, #31
    b948:	2520      	movs	r5, #32
    b94a:	ae04      	add	r6, sp, #16
    b94c:	e004      	b.n	b958 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b94e:	7807      	ldrb	r7, [r0, #0]
    b950:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b952:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b954:	3801      	subs	r0, #1
    b956:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b958:	2d00      	cmp	r5, #0
    b95a:	d1f8      	bne.n	b94e <smp_g2+0xe>
	src += length - 1;
    b95c:	311f      	adds	r1, #31
    b95e:	2020      	movs	r0, #32
    b960:	ad0c      	add	r5, sp, #48	; 0x30
    b962:	e004      	b.n	b96e <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b964:	780e      	ldrb	r6, [r1, #0]
    b966:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b968:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b96a:	3901      	subs	r1, #1
    b96c:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b96e:	2800      	cmp	r0, #0
    b970:	d1f8      	bne.n	b964 <smp_g2+0x24>
	src += length - 1;
    b972:	330f      	adds	r3, #15
    b974:	2110      	movs	r1, #16
    b976:	a814      	add	r0, sp, #80	; 0x50
    b978:	e004      	b.n	b984 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b97a:	781d      	ldrb	r5, [r3, #0]
    b97c:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b97e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b980:	3b01      	subs	r3, #1
    b982:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b984:	2900      	cmp	r1, #0
    b986:	d1f8      	bne.n	b97a <smp_g2+0x3a>
	src += length - 1;
    b988:	320f      	adds	r2, #15
    b98a:	2310      	movs	r3, #16
    b98c:	4669      	mov	r1, sp
    b98e:	e004      	b.n	b99a <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b990:	7810      	ldrb	r0, [r2, #0]
    b992:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b994:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b996:	3a01      	subs	r2, #1
    b998:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b99a:	2b00      	cmp	r3, #0
    b99c:	d1f8      	bne.n	b990 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b99e:	466b      	mov	r3, sp
    b9a0:	2250      	movs	r2, #80	; 0x50
    b9a2:	a904      	add	r1, sp, #16
    b9a4:	4668      	mov	r0, sp
    b9a6:	f7ff fcf7 	bl	b398 <bt_smp_aes_cmac>
	if (err) {
    b9aa:	4605      	mov	r5, r0
    b9ac:	b110      	cbz	r0, b9b4 <smp_g2+0x74>
}
    b9ae:	4628      	mov	r0, r5
    b9b0:	b019      	add	sp, #100	; 0x64
    b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b9b4:	2204      	movs	r2, #4
    b9b6:	a903      	add	r1, sp, #12
    b9b8:	4620      	mov	r0, r4
    b9ba:	f7f4 fc81 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b9be:	6822      	ldr	r2, [r4, #0]
    b9c0:	0a13      	lsrs	r3, r2, #8
    b9c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b9c6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b9ca:	0211      	lsls	r1, r2, #8
    b9cc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b9d0:	430b      	orrs	r3, r1
    b9d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b9d6:	4a04      	ldr	r2, [pc, #16]	; (b9e8 <smp_g2+0xa8>)
    b9d8:	fba2 1203 	umull	r1, r2, r2, r3
    b9dc:	0c92      	lsrs	r2, r2, #18
    b9de:	4903      	ldr	r1, [pc, #12]	; (b9ec <smp_g2+0xac>)
    b9e0:	fb01 3212 	mls	r2, r1, r2, r3
    b9e4:	6022      	str	r2, [r4, #0]
	return 0;
    b9e6:	e7e2      	b.n	b9ae <smp_g2+0x6e>
    b9e8:	431bde83 	.word	0x431bde83
    b9ec:	000f4240 	.word	0x000f4240

0000b9f0 <smp_send_pairing_confirm>:
{
    b9f0:	b570      	push	{r4, r5, r6, lr}
    b9f2:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b9f4:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b9f6:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b9fa:	2b03      	cmp	r3, #3
    b9fc:	d83f      	bhi.n	ba7e <smp_send_pairing_confirm+0x8e>
    b9fe:	e8df f003 	tbb	[pc, r3]
    ba02:	020d      	.short	0x020d
    ba04:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ba06:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    ba0a:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    ba0e:	40dd      	lsrs	r5, r3
    ba10:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    ba14:	f065 057f 	orn	r5, r5, #127	; 0x7f
    ba18:	b2ed      	uxtb	r5, r5
		break;
    ba1a:	e000      	b.n	ba1e <smp_send_pairing_confirm+0x2e>
		r = 0;
    ba1c:	2500      	movs	r5, #0
    ba1e:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    ba20:	2210      	movs	r2, #16
    ba22:	2103      	movs	r1, #3
    ba24:	4630      	mov	r0, r6
    ba26:	f7ff fbdc 	bl	b1e2 <smp_create_pdu>
	if (!buf) {
    ba2a:	4606      	mov	r6, r0
    ba2c:	b348      	cbz	r0, ba82 <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    ba2e:	2110      	movs	r1, #16
    ba30:	3008      	adds	r0, #8
    ba32:	f00f fd33 	bl	1b49c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    ba36:	9000      	str	r0, [sp, #0]
    ba38:	462b      	mov	r3, r5
    ba3a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    ba3e:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    ba42:	4811      	ldr	r0, [pc, #68]	; (ba88 <smp_send_pairing_confirm+0x98>)
    ba44:	f7ff fd18 	bl	b478 <smp_f4>
    ba48:	b120      	cbz	r0, ba54 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    ba4a:	4630      	mov	r0, r6
    ba4c:	f00f fcda 	bl	1b404 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    ba50:	2008      	movs	r0, #8
    ba52:	e017      	b.n	ba84 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    ba54:	2200      	movs	r2, #0
    ba56:	4631      	mov	r1, r6
    ba58:	4620      	mov	r0, r4
    ba5a:	f7ff fc15 	bl	b288 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ba5e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ba62:	f3bf 8f5b 	dmb	ish
    ba66:	e850 3f00 	ldrex	r3, [r0]
    ba6a:	f023 0301 	bic.w	r3, r3, #1
    ba6e:	e840 3200 	strex	r2, r3, [r0]
    ba72:	2a00      	cmp	r2, #0
    ba74:	d1f7      	bne.n	ba66 <smp_send_pairing_confirm+0x76>
    ba76:	f3bf 8f5b 	dmb	ish
	return 0;
    ba7a:	2000      	movs	r0, #0
    ba7c:	e002      	b.n	ba84 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    ba7e:	2008      	movs	r0, #8
    ba80:	e000      	b.n	ba84 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    ba82:	2008      	movs	r0, #8
}
    ba84:	b002      	add	sp, #8
    ba86:	bd70      	pop	{r4, r5, r6, pc}
    ba88:	20000ec0 	.word	0x20000ec0

0000ba8c <smp_c1>:
{
    ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba90:	b088      	sub	sp, #32
    ba92:	4604      	mov	r4, r0
    ba94:	460f      	mov	r7, r1
    ba96:	4611      	mov	r1, r2
    ba98:	4698      	mov	r8, r3
    ba9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ba9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    ba9e:	782b      	ldrb	r3, [r5, #0]
    baa0:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    baa4:	7833      	ldrb	r3, [r6, #0]
    baa6:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    baaa:	2207      	movs	r2, #7
    baac:	f10d 0012 	add.w	r0, sp, #18
    bab0:	f7f4 fc06 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    bab4:	2207      	movs	r2, #7
    bab6:	4641      	mov	r1, r8
    bab8:	f10d 0019 	add.w	r0, sp, #25
    babc:	f7f4 fc00 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    bac0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bac2:	a904      	add	r1, sp, #16
    bac4:	4638      	mov	r0, r7
    bac6:	f7ff faf3 	bl	b0b0 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    baca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bacc:	4611      	mov	r1, r2
    bace:	4620      	mov	r0, r4
    bad0:	f006 f98a 	bl	11de8 <bt_encrypt_le>
	if (err) {
    bad4:	4603      	mov	r3, r0
    bad6:	b118      	cbz	r0, bae0 <smp_c1+0x54>
}
    bad8:	4618      	mov	r0, r3
    bada:	b008      	add	sp, #32
    badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    bae0:	2206      	movs	r2, #6
    bae2:	1c71      	adds	r1, r6, #1
    bae4:	4668      	mov	r0, sp
    bae6:	f7f4 fbeb 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    baea:	2206      	movs	r2, #6
    baec:	1c69      	adds	r1, r5, #1
    baee:	eb0d 0002 	add.w	r0, sp, r2
    baf2:	f7f4 fbe5 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    baf6:	2204      	movs	r2, #4
    baf8:	2100      	movs	r1, #0
    bafa:	a803      	add	r0, sp, #12
    bafc:	f01e ffa0 	bl	2aa40 <memset>
	xor_128(enc_data, p2, enc_data);
    bb00:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bb02:	4669      	mov	r1, sp
    bb04:	4610      	mov	r0, r2
    bb06:	f7ff fad3 	bl	b0b0 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    bb0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bb0c:	4611      	mov	r1, r2
    bb0e:	4620      	mov	r0, r4
    bb10:	f006 f96a 	bl	11de8 <bt_encrypt_le>
    bb14:	4603      	mov	r3, r0
    bb16:	e7df      	b.n	bad8 <smp_c1+0x4c>

0000bb18 <legacy_send_pairing_confirm>:
{
    bb18:	b570      	push	{r4, r5, r6, lr}
    bb1a:	b084      	sub	sp, #16
    bb1c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bb1e:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    bb20:	2210      	movs	r2, #16
    bb22:	2103      	movs	r1, #3
    bb24:	4628      	mov	r0, r5
    bb26:	f7ff fb5c 	bl	b1e2 <smp_create_pdu>
	if (!buf) {
    bb2a:	b370      	cbz	r0, bb8a <legacy_send_pairing_confirm+0x72>
    bb2c:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    bb2e:	2110      	movs	r1, #16
    bb30:	3008      	adds	r0, #8
    bb32:	f00f fcb3 	bl	1b49c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    bb36:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    bb3a:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    bb3c:	9002      	str	r0, [sp, #8]
    bb3e:	9501      	str	r5, [sp, #4]
    bb40:	9300      	str	r3, [sp, #0]
    bb42:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    bb46:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    bb4a:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    bb4e:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    bb52:	f7ff ff9b 	bl	ba8c <smp_c1>
    bb56:	b120      	cbz	r0, bb62 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    bb58:	4630      	mov	r0, r6
    bb5a:	f00f fc53 	bl	1b404 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    bb5e:	2008      	movs	r0, #8
    bb60:	e014      	b.n	bb8c <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    bb62:	2200      	movs	r2, #0
    bb64:	4631      	mov	r1, r6
    bb66:	4620      	mov	r0, r4
    bb68:	f7ff fb8e 	bl	b288 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    bb6c:	34a0      	adds	r4, #160	; 0xa0
    bb6e:	f3bf 8f5b 	dmb	ish
    bb72:	e854 3f00 	ldrex	r3, [r4]
    bb76:	f023 0301 	bic.w	r3, r3, #1
    bb7a:	e844 3200 	strex	r2, r3, [r4]
    bb7e:	2a00      	cmp	r2, #0
    bb80:	d1f7      	bne.n	bb72 <legacy_send_pairing_confirm+0x5a>
    bb82:	f3bf 8f5b 	dmb	ish
	return 0;
    bb86:	2000      	movs	r0, #0
    bb88:	e000      	b.n	bb8c <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    bb8a:	2008      	movs	r0, #8
}
    bb8c:	b004      	add	sp, #16
    bb8e:	bd70      	pop	{r4, r5, r6, pc}

0000bb90 <legacy_pairing_confirm>:
{
    bb90:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bb92:	6803      	ldr	r3, [r0, #0]
    bb94:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bb96:	b1c3      	cbz	r3, bbca <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bb98:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb9c:	f3bf 8f5b 	dmb	ish
    bba0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    bba4:	f3bf 8f5b 	dmb	ish
    bba8:	f412 7f00 	tst.w	r2, #512	; 0x200
    bbac:	d01e      	beq.n	bbec <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbae:	f3bf 8f5b 	dmb	ish
    bbb2:	e853 2f00 	ldrex	r2, [r3]
    bbb6:	f042 0201 	orr.w	r2, r2, #1
    bbba:	e843 2100 	strex	r1, r2, [r3]
    bbbe:	2900      	cmp	r1, #0
    bbc0:	d1f7      	bne.n	bbb2 <legacy_pairing_confirm+0x22>
    bbc2:	f3bf 8f5b 	dmb	ish
	return 0;
    bbc6:	2000      	movs	r0, #0
}
    bbc8:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bbca:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    bbce:	f3bf 8f5b 	dmb	ish
    bbd2:	e853 2f00 	ldrex	r2, [r3]
    bbd6:	f042 0208 	orr.w	r2, r2, #8
    bbda:	e843 2100 	strex	r1, r2, [r3]
    bbde:	2900      	cmp	r1, #0
    bbe0:	d1f7      	bne.n	bbd2 <legacy_pairing_confirm+0x42>
    bbe2:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    bbe6:	f7ff ff97 	bl	bb18 <legacy_send_pairing_confirm>
    bbea:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    bbec:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    bbf0:	f3bf 8f5b 	dmb	ish
    bbf4:	e853 2f00 	ldrex	r2, [r3]
    bbf8:	f042 0210 	orr.w	r2, r2, #16
    bbfc:	e843 2100 	strex	r1, r2, [r3]
    bc00:	2900      	cmp	r1, #0
    bc02:	d1f7      	bne.n	bbf4 <legacy_pairing_confirm+0x64>
    bc04:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    bc08:	f7ff ff86 	bl	bb18 <legacy_send_pairing_confirm>
    bc0c:	bd08      	pop	{r3, pc}

0000bc0e <smp_pairing_confirm>:
{
    bc0e:	b510      	push	{r4, lr}
    bc10:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    bc12:	2210      	movs	r2, #16
    bc14:	6889      	ldr	r1, [r1, #8]
    bc16:	30b3      	adds	r0, #179	; 0xb3
    bc18:	f7f4 fb52 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bc1c:	6823      	ldr	r3, [r4, #0]
    bc1e:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc20:	b313      	cbz	r3, bc68 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bc22:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc26:	f3bf 8f5b 	dmb	ish
    bc2a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bc2e:	f3bf 8f5b 	dmb	ish
    bc32:	f013 0f20 	tst.w	r3, #32
    bc36:	d029      	beq.n	bc8c <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    bc38:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bc3c:	2b01      	cmp	r3, #1
    bc3e:	d029      	beq.n	bc94 <smp_pairing_confirm+0x86>
    bc40:	2b02      	cmp	r3, #2
    bc42:	d150      	bne.n	bce6 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bc44:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc48:	f3bf 8f5b 	dmb	ish
    bc4c:	e853 2f00 	ldrex	r2, [r3]
    bc50:	f042 0210 	orr.w	r2, r2, #16
    bc54:	e843 2100 	strex	r1, r2, [r3]
    bc58:	2900      	cmp	r1, #0
    bc5a:	d1f7      	bne.n	bc4c <smp_pairing_confirm+0x3e>
    bc5c:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    bc60:	4620      	mov	r0, r4
    bc62:	f7ff fec5 	bl	b9f0 <smp_send_pairing_confirm>
    bc66:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bc68:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bc6c:	f3bf 8f5b 	dmb	ish
    bc70:	e853 2f00 	ldrex	r2, [r3]
    bc74:	f042 0210 	orr.w	r2, r2, #16
    bc78:	e843 2100 	strex	r1, r2, [r3]
    bc7c:	2900      	cmp	r1, #0
    bc7e:	d1f7      	bne.n	bc70 <smp_pairing_confirm+0x62>
    bc80:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    bc84:	4620      	mov	r0, r4
    bc86:	f7ff fb6c 	bl	b362 <smp_send_pairing_random>
    bc8a:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    bc8c:	4620      	mov	r0, r4
    bc8e:	f7ff ff7f 	bl	bb90 <legacy_pairing_confirm>
    bc92:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc94:	f3bf 8f5b 	dmb	ish
    bc98:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bc9c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bca0:	f413 7f00 	tst.w	r3, #512	; 0x200
    bca4:	d111      	bne.n	bcca <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bca6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bcaa:	f3bf 8f5b 	dmb	ish
    bcae:	e853 2f00 	ldrex	r2, [r3]
    bcb2:	f042 0210 	orr.w	r2, r2, #16
    bcb6:	e843 2100 	strex	r1, r2, [r3]
    bcba:	2900      	cmp	r1, #0
    bcbc:	d1f7      	bne.n	bcae <smp_pairing_confirm+0xa0>
    bcbe:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    bcc2:	4620      	mov	r0, r4
    bcc4:	f7ff fe94 	bl	b9f0 <smp_send_pairing_confirm>
    bcc8:	bd10      	pop	{r4, pc}
    bcca:	f3bf 8f5b 	dmb	ish
    bcce:	e852 3f00 	ldrex	r3, [r2]
    bcd2:	f043 0301 	orr.w	r3, r3, #1
    bcd6:	e842 3100 	strex	r1, r3, [r2]
    bcda:	2900      	cmp	r1, #0
    bcdc:	d1f7      	bne.n	bcce <smp_pairing_confirm+0xc0>
    bcde:	f3bf 8f5b 	dmb	ish
			return 0;
    bce2:	2000      	movs	r0, #0
    bce4:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    bce6:	2008      	movs	r0, #8
}
    bce8:	bd10      	pop	{r4, pc}

0000bcea <smp_s1>:
{
    bcea:	b570      	push	{r4, r5, r6, lr}
    bcec:	4605      	mov	r5, r0
    bcee:	460e      	mov	r6, r1
    bcf0:	4611      	mov	r1, r2
    bcf2:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    bcf4:	2208      	movs	r2, #8
    bcf6:	4618      	mov	r0, r3
    bcf8:	f7f4 fae2 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    bcfc:	2208      	movs	r2, #8
    bcfe:	4631      	mov	r1, r6
    bd00:	18a0      	adds	r0, r4, r2
    bd02:	f7f4 fadd 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    bd06:	4622      	mov	r2, r4
    bd08:	4621      	mov	r1, r4
    bd0a:	4628      	mov	r0, r5
    bd0c:	f006 f86c 	bl	11de8 <bt_encrypt_le>
}
    bd10:	bd70      	pop	{r4, r5, r6, pc}

0000bd12 <smp_reset>:
{
    bd12:	b538      	push	{r3, r4, r5, lr}
    bd14:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bd16:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    bd18:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    bd1c:	f01e fcac 	bl	2a678 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    bd20:	2200      	movs	r2, #0
    bd22:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    bd26:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bd2a:	f3bf 8f5b 	dmb	ish
    bd2e:	e853 1f00 	ldrex	r1, [r3]
    bd32:	e843 2000 	strex	r0, r2, [r3]
    bd36:	2800      	cmp	r0, #0
    bd38:	d1f9      	bne.n	bd2e <smp_reset+0x1c>
    bd3a:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    bd3e:	34a0      	adds	r4, #160	; 0xa0
    bd40:	f3bf 8f5b 	dmb	ish
    bd44:	e854 1f00 	ldrex	r1, [r4]
    bd48:	e844 2000 	strex	r0, r2, [r4]
    bd4c:	2800      	cmp	r0, #0
    bd4e:	d1f9      	bne.n	bd44 <smp_reset+0x32>
    bd50:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    bd54:	7a69      	ldrb	r1, [r5, #9]
    bd56:	7a2a      	ldrb	r2, [r5, #8]
    bd58:	4291      	cmp	r1, r2
    bd5a:	d000      	beq.n	bd5e <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    bd5c:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    bd5e:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bd60:	b162      	cbz	r2, bd7c <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd62:	f3bf 8f5b 	dmb	ish
    bd66:	e853 2f00 	ldrex	r2, [r3]
    bd6a:	f042 0202 	orr.w	r2, r2, #2
    bd6e:	e843 2100 	strex	r1, r2, [r3]
    bd72:	2900      	cmp	r1, #0
    bd74:	d1f7      	bne.n	bd66 <smp_reset+0x54>
    bd76:	f3bf 8f5b 	dmb	ish
    bd7a:	bd38      	pop	{r3, r4, r5, pc}
    bd7c:	f3bf 8f5b 	dmb	ish
    bd80:	e853 2f00 	ldrex	r2, [r3]
    bd84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    bd88:	e843 2100 	strex	r1, r2, [r3]
    bd8c:	2900      	cmp	r1, #0
    bd8e:	d1f7      	bne.n	bd80 <smp_reset+0x6e>
    bd90:	f3bf 8f5b 	dmb	ish
    bd94:	bd38      	pop	{r3, r4, r5, pc}

0000bd96 <smp_pairing_complete>:
{
    bd96:	b508      	push	{r3, lr}
	smp_reset(smp);
    bd98:	f7ff ffbb 	bl	bd12 <smp_reset>
    bd9c:	bd08      	pop	{r3, pc}

0000bd9e <smp_error>:
{
    bd9e:	b570      	push	{r4, r5, r6, lr}
    bda0:	4604      	mov	r4, r0
    bda2:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    bda4:	f7ff fff7 	bl	bd96 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    bda8:	2201      	movs	r2, #1
    bdaa:	2105      	movs	r1, #5
    bdac:	6820      	ldr	r0, [r4, #0]
    bdae:	f7ff fa18 	bl	b1e2 <smp_create_pdu>
	if (!buf) {
    bdb2:	b168      	cbz	r0, bdd0 <smp_error+0x32>
    bdb4:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    bdb6:	2101      	movs	r1, #1
    bdb8:	3008      	adds	r0, #8
    bdba:	f00f fb6f 	bl	1b49c <net_buf_simple_add>
	rsp->reason = reason;
    bdbe:	7006      	strb	r6, [r0, #0]
    bdc0:	2300      	movs	r3, #0
    bdc2:	462a      	mov	r2, r5
    bdc4:	2106      	movs	r1, #6
    bdc6:	6820      	ldr	r0, [r4, #0]
    bdc8:	f7fc fd01 	bl	87ce <bt_l2cap_send_cb>
	return 0;
    bdcc:	2000      	movs	r0, #0
    bdce:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    bdd0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    bdd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000bdd8 <bt_smp_dhkey_ready>:
{
    bdd8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    bdda:	2400      	movs	r4, #0
    bddc:	b384      	cbz	r4, be40 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    bdde:	2400      	movs	r4, #0
	if (!smp) {
    bde0:	b36c      	cbz	r4, be3e <bt_smp_dhkey_ready+0x66>
    bde2:	4601      	mov	r1, r0
	if (!dhkey) {
    bde4:	2800      	cmp	r0, #0
    bde6:	d04b      	beq.n	be80 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    bde8:	2220      	movs	r2, #32
    bdea:	f204 1033 	addw	r0, r4, #307	; 0x133
    bdee:	f7f4 fa67 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bdf2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdf6:	f3bf 8f5b 	dmb	ish
    bdfa:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    bdfe:	f3bf 8f5b 	dmb	ish
    be02:	f412 7f00 	tst.w	r2, #512	; 0x200
    be06:	d140      	bne.n	be8a <bt_smp_dhkey_ready+0xb2>
    be08:	f3bf 8f5b 	dmb	ish
    be0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    be10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    be14:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    be18:	d144      	bne.n	bea4 <bt_smp_dhkey_ready+0xcc>
    be1a:	f3bf 8f5b 	dmb	ish
    be1e:	681b      	ldr	r3, [r3, #0]
    be20:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    be24:	f413 7f80 	tst.w	r3, #256	; 0x100
    be28:	d009      	beq.n	be3e <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    be2a:	6823      	ldr	r3, [r4, #0]
    be2c:	78db      	ldrb	r3, [r3, #3]
    be2e:	2b00      	cmp	r3, #0
    be30:	d149      	bne.n	bec6 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    be32:	4620      	mov	r0, r4
    be34:	f7ff fcb4 	bl	b7a0 <compute_and_send_master_dhcheck>
			if (err) {
    be38:	4601      	mov	r1, r0
    be3a:	2800      	cmp	r0, #0
    be3c:	d13f      	bne.n	bebe <bt_smp_dhkey_ready+0xe6>
    be3e:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    be40:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    be44:	fb03 f304 	mul.w	r3, r3, r4
    be48:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    be4c:	4b23      	ldr	r3, [pc, #140]	; (bedc <bt_smp_dhkey_ready+0x104>)
    be4e:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    be50:	f3bf 8f5b 	dmb	ish
    be54:	e853 2f00 	ldrex	r2, [r3]
    be58:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    be5c:	e843 1e00 	strex	lr, r1, [r3]
    be60:	f1be 0f00 	cmp.w	lr, #0
    be64:	d1f6      	bne.n	be54 <bt_smp_dhkey_ready+0x7c>
    be66:	f3bf 8f5b 	dmb	ish
    be6a:	f012 0f80 	tst.w	r2, #128	; 0x80
    be6e:	d101      	bne.n	be74 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    be70:	3401      	adds	r4, #1
    be72:	e7b3      	b.n	bddc <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    be74:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    be78:	4b18      	ldr	r3, [pc, #96]	; (bedc <bt_smp_dhkey_ready+0x104>)
    be7a:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    be7e:	e7af      	b.n	bde0 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    be80:	210b      	movs	r1, #11
    be82:	4620      	mov	r0, r4
    be84:	f7ff ff8b 	bl	bd9e <smp_error>
		return;
    be88:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be8a:	f3bf 8f5b 	dmb	ish
    be8e:	e853 2f00 	ldrex	r2, [r3]
    be92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    be96:	e843 2100 	strex	r1, r2, [r3]
    be9a:	2900      	cmp	r1, #0
    be9c:	d1f7      	bne.n	be8e <bt_smp_dhkey_ready+0xb6>
    be9e:	f3bf 8f5b 	dmb	ish
    bea2:	bd10      	pop	{r4, pc}
    bea4:	f3bf 8f5b 	dmb	ish
    bea8:	e853 2f00 	ldrex	r2, [r3]
    beac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    beb0:	e843 2100 	strex	r1, r2, [r3]
    beb4:	2900      	cmp	r1, #0
    beb6:	d1f7      	bne.n	bea8 <bt_smp_dhkey_ready+0xd0>
    beb8:	f3bf 8f5b 	dmb	ish
    bebc:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    bebe:	4620      	mov	r0, r4
    bec0:	f7ff ff6d 	bl	bd9e <smp_error>
    bec4:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    bec6:	4620      	mov	r0, r4
    bec8:	f7ff fcc4 	bl	b854 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    becc:	4601      	mov	r1, r0
    bece:	2800      	cmp	r0, #0
    bed0:	d0b5      	beq.n	be3e <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    bed2:	4620      	mov	r0, r4
    bed4:	f7ff ff63 	bl	bd9e <smp_error>
    bed8:	e7b1      	b.n	be3e <bt_smp_dhkey_ready+0x66>
    beda:	bf00      	nop
    bedc:	20000d18 	.word	0x20000d18

0000bee0 <smp_pairing_failed>:
{
    bee0:	b538      	push	{r3, r4, r5, lr}
    bee2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bee4:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    bee6:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    bee8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    beec:	3b01      	subs	r3, #1
    beee:	2b02      	cmp	r3, #2
    bef0:	d913      	bls.n	bf1a <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bef2:	f3bf 8f5b 	dmb	ish
    bef6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    befa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    befe:	f013 0f04 	tst.w	r3, #4
    bf02:	d004      	beq.n	bf0e <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    bf04:	6823      	ldr	r3, [r4, #0]
    bf06:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    bf08:	b108      	cbz	r0, bf0e <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    bf0a:	f001 fd98 	bl	da3e <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    bf0e:	7829      	ldrb	r1, [r5, #0]
    bf10:	4620      	mov	r0, r4
    bf12:	f7ff ff40 	bl	bd96 <smp_pairing_complete>
}
    bf16:	2000      	movs	r0, #0
    bf18:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    bf1a:	4b02      	ldr	r3, [pc, #8]	; (bf24 <smp_pairing_failed+0x44>)
    bf1c:	681b      	ldr	r3, [r3, #0]
    bf1e:	68db      	ldr	r3, [r3, #12]
    bf20:	4798      	blx	r3
		break;
    bf22:	e7e6      	b.n	bef2 <smp_pairing_failed+0x12>
    bf24:	20002f28 	.word	0x20002f28

0000bf28 <bt_smp_disconnected>:
{
    bf28:	b538      	push	{r3, r4, r5, lr}
    bf2a:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    bf2c:	6803      	ldr	r3, [r0, #0]
    bf2e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    bf30:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    bf34:	f01e fba0 	bl	2a678 <k_delayed_work_cancel>
	if (keys) {
    bf38:	b164      	cbz	r4, bf54 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    bf3a:	89a3      	ldrh	r3, [r4, #12]
    bf3c:	b13b      	cbz	r3, bf4e <bt_smp_disconnected+0x26>
    bf3e:	f3bf 8f5b 	dmb	ish
    bf42:	68a3      	ldr	r3, [r4, #8]
    bf44:	f3bf 8f5b 	dmb	ish
    bf48:	f013 0f02 	tst.w	r3, #2
    bf4c:	d002      	beq.n	bf54 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    bf4e:	4620      	mov	r0, r4
    bf50:	f001 fd75 	bl	da3e <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    bf54:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    bf58:	2100      	movs	r1, #0
    bf5a:	4628      	mov	r0, r5
    bf5c:	f01e fd70 	bl	2aa40 <memset>
    bf60:	bd38      	pop	{r3, r4, r5, pc}

0000bf62 <smp_timeout>:
{
    bf62:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    bf64:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    bf68:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    bf6c:	f3bf 8f5b 	dmb	ish
    bf70:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    bf74:	f3bf 8f5b 	dmb	ish
    bf78:	f013 0f04 	tst.w	r3, #4
    bf7c:	d004      	beq.n	bf88 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    bf7e:	682b      	ldr	r3, [r5, #0]
    bf80:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    bf82:	b108      	cbz	r0, bf88 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    bf84:	f001 fd5b 	bl	da3e <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    bf88:	2108      	movs	r1, #8
    bf8a:	4628      	mov	r0, r5
    bf8c:	f7ff ff03 	bl	bd96 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf90:	f3bf 8f5b 	dmb	ish
    bf94:	e854 3f00 	ldrex	r3, [r4]
    bf98:	f043 0310 	orr.w	r3, r3, #16
    bf9c:	e844 3200 	strex	r2, r3, [r4]
    bfa0:	2a00      	cmp	r2, #0
    bfa2:	d1f7      	bne.n	bf94 <smp_timeout+0x32>
    bfa4:	f3bf 8f5b 	dmb	ish
    bfa8:	bd38      	pop	{r3, r4, r5, pc}
	...

0000bfac <legacy_distribute_keys>:
{
    bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfb0:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    bfb2:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    bfb4:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    bfb6:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    bfba:	f013 0f01 	tst.w	r3, #1
    bfbe:	d102      	bne.n	bfc6 <legacy_distribute_keys+0x1a>
}
    bfc0:	b008      	add	sp, #32
    bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfc6:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    bfc8:	2110      	movs	r1, #16
    bfca:	eb0d 0001 	add.w	r0, sp, r1
    bfce:	f005 feef 	bl	11db0 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    bfd2:	2108      	movs	r1, #8
    bfd4:	eb0d 0001 	add.w	r0, sp, r1
    bfd8:	f005 feea 	bl	11db0 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    bfdc:	2102      	movs	r1, #2
    bfde:	f10d 0006 	add.w	r0, sp, #6
    bfe2:	f005 fee5 	bl	11db0 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    bfe6:	2210      	movs	r2, #16
    bfe8:	2106      	movs	r1, #6
    bfea:	4628      	mov	r0, r5
    bfec:	f7ff f8f9 	bl	b1e2 <smp_create_pdu>
		if (!buf) {
    bff0:	4607      	mov	r7, r0
    bff2:	2800      	cmp	r0, #0
    bff4:	d0e4      	beq.n	bfc0 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    bff6:	2110      	movs	r1, #16
    bff8:	3008      	adds	r0, #8
    bffa:	f00f fa4f 	bl	1b49c <net_buf_simple_add>
    bffe:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    c000:	79f2      	ldrb	r2, [r6, #7]
    c002:	a904      	add	r1, sp, #16
    c004:	f7f4 f95c 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    c008:	79f0      	ldrb	r0, [r6, #7]
    c00a:	280f      	cmp	r0, #15
    c00c:	d93b      	bls.n	c086 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    c00e:	2200      	movs	r2, #0
    c010:	4639      	mov	r1, r7
    c012:	4620      	mov	r0, r4
    c014:	f7ff f938 	bl	b288 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    c018:	220a      	movs	r2, #10
    c01a:	2107      	movs	r1, #7
    c01c:	4628      	mov	r0, r5
    c01e:	f7ff f8e0 	bl	b1e2 <smp_create_pdu>
		if (!buf) {
    c022:	4605      	mov	r5, r0
    c024:	2800      	cmp	r0, #0
    c026:	d0cb      	beq.n	bfc0 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    c028:	210a      	movs	r1, #10
    c02a:	3008      	adds	r0, #8
    c02c:	f00f fa36 	bl	1b49c <net_buf_simple_add>
		ident->rand = rand;
    c030:	9b03      	ldr	r3, [sp, #12]
    c032:	9a02      	ldr	r2, [sp, #8]
    c034:	f8c0 2002 	str.w	r2, [r0, #2]
    c038:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    c03c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c040:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    c042:	4a14      	ldr	r2, [pc, #80]	; (c094 <legacy_distribute_keys+0xe8>)
    c044:	4629      	mov	r1, r5
    c046:	4620      	mov	r0, r4
    c048:	f7ff f91e 	bl	b288 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c04c:	f3bf 8f5b 	dmb	ish
    c050:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c054:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c058:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c05c:	d0b0      	beq.n	bfc0 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    c05e:	2101      	movs	r1, #1
    c060:	4630      	mov	r0, r6
    c062:	f001 fcd5 	bl	da10 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    c066:	2210      	movs	r2, #16
    c068:	eb0d 0102 	add.w	r1, sp, r2
    c06c:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    c070:	f7f4 f926 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    c074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c078:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    c07c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c080:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    c084:	e79c      	b.n	bfc0 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    c086:	f1c0 0210 	rsb	r2, r0, #16
    c08a:	2100      	movs	r1, #0
    c08c:	4440      	add	r0, r8
    c08e:	f01e fcd7 	bl	2aa40 <memset>
    c092:	e7bc      	b.n	c00e <legacy_distribute_keys+0x62>
    c094:	0000ccc7 	.word	0x0000ccc7

0000c098 <bt_smp_distribute_keys>:
{
    c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c09a:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    c09c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    c09e:	b176      	cbz	r6, c0be <bt_smp_distribute_keys+0x26>
    c0a0:	4604      	mov	r4, r0
    c0a2:	f3bf 8f5b 	dmb	ish
    c0a6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c0aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c0ae:	f013 0f20 	tst.w	r3, #32
    c0b2:	d005      	beq.n	c0c0 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    c0b4:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c0b8:	f013 0f04 	tst.w	r3, #4
    c0bc:	d103      	bne.n	c0c6 <bt_smp_distribute_keys+0x2e>
    c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    c0c0:	f7ff ff74 	bl	bfac <legacy_distribute_keys>
    c0c4:	e7f6      	b.n	c0b4 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    c0c6:	2210      	movs	r2, #16
    c0c8:	210a      	movs	r1, #10
    c0ca:	4628      	mov	r0, r5
    c0cc:	f7ff f889 	bl	b1e2 <smp_create_pdu>
		if (!buf) {
    c0d0:	4605      	mov	r5, r0
    c0d2:	2800      	cmp	r0, #0
    c0d4:	d0f3      	beq.n	c0be <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    c0d6:	2110      	movs	r1, #16
    c0d8:	3008      	adds	r0, #8
    c0da:	f00f f9df 	bl	1b49c <net_buf_simple_add>
    c0de:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    c0e0:	2110      	movs	r1, #16
    c0e2:	f005 fe65 	bl	11db0 <bt_rand>
    c0e6:	f3bf 8f5b 	dmb	ish
    c0ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c0ee:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c0f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c0f6:	d105      	bne.n	c104 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    c0f8:	4a09      	ldr	r2, [pc, #36]	; (c120 <bt_smp_distribute_keys+0x88>)
    c0fa:	4629      	mov	r1, r5
    c0fc:	4620      	mov	r0, r4
    c0fe:	f7ff f8c3 	bl	b288 <smp_send>
    c102:	e7dc      	b.n	c0be <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    c104:	2108      	movs	r1, #8
    c106:	4630      	mov	r0, r6
    c108:	f001 fc82 	bl	da10 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    c10c:	2210      	movs	r2, #16
    c10e:	4639      	mov	r1, r7
    c110:	f106 0048 	add.w	r0, r6, #72	; 0x48
    c114:	f7f4 f8d4 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    c118:	2300      	movs	r3, #0
    c11a:	65b3      	str	r3, [r6, #88]	; 0x58
    c11c:	e7ec      	b.n	c0f8 <bt_smp_distribute_keys+0x60>
    c11e:	bf00      	nop
    c120:	0000ccbd 	.word	0x0000ccbd

0000c124 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    c124:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    c126:	b911      	cbnz	r1, c12e <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    c128:	b108      	cbz	r0, c12e <bt_smp_encrypt_change+0xa>
    c12a:	7a9a      	ldrb	r2, [r3, #10]
    c12c:	b902      	cbnz	r2, c130 <bt_smp_encrypt_change+0xc>
    c12e:	4770      	bx	lr
{
    c130:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    c132:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c136:	f3bf 8f5b 	dmb	ish
    c13a:	e852 1f00 	ldrex	r1, [r2]
    c13e:	f021 0402 	bic.w	r4, r1, #2
    c142:	e842 4e00 	strex	lr, r4, [r2]
    c146:	f1be 0f00 	cmp.w	lr, #0
    c14a:	d1f6      	bne.n	c13a <bt_smp_encrypt_change+0x16>
    c14c:	f3bf 8f5b 	dmb	ish
    c150:	f011 0f02 	tst.w	r1, #2
    c154:	d100      	bne.n	c158 <bt_smp_encrypt_change+0x34>
    c156:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c158:	f3bf 8f5b 	dmb	ish
    c15c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    c160:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c164:	f011 0f08 	tst.w	r1, #8
    c168:	d04b      	beq.n	c202 <bt_smp_encrypt_change+0xde>
    c16a:	f3bf 8f5b 	dmb	ish
    c16e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    c172:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c176:	f011 0f20 	tst.w	r1, #32
    c17a:	d015      	beq.n	c1a8 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    c17c:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c180:	f011 0f08 	tst.w	r1, #8
    c184:	d004      	beq.n	c190 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    c186:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    c18a:	f011 0f08 	tst.w	r1, #8
    c18e:	d146      	bne.n	c21e <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    c190:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c194:	f021 0108 	bic.w	r1, r1, #8
    c198:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    c19c:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    c1a0:	f021 0108 	bic.w	r1, r1, #8
    c1a4:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    c1a8:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    c1ac:	f011 0f01 	tst.w	r1, #1
    c1b0:	d142      	bne.n	c238 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c1b2:	f011 0f02 	tst.w	r1, #2
    c1b6:	d14f      	bne.n	c258 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c1b8:	f011 0f04 	tst.w	r1, #4
    c1bc:	d15c      	bne.n	c278 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c1be:	f3bf 8f5b 	dmb	ish
    c1c2:	e852 1f00 	ldrex	r1, [r2]
    c1c6:	f041 0104 	orr.w	r1, r1, #4
    c1ca:	e842 1400 	strex	r4, r1, [r2]
    c1ce:	2c00      	cmp	r4, #0
    c1d0:	d1f7      	bne.n	c1c2 <bt_smp_encrypt_change+0x9e>
    c1d2:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    c1d6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c1d8:	b91b      	cbnz	r3, c1e2 <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    c1da:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d1b9      	bne.n	c156 <bt_smp_encrypt_change+0x32>
    c1e2:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    c1e4:	f7ff ff58 	bl	c098 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    c1e8:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c1ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c1f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c1f4:	2b00      	cmp	r3, #0
    c1f6:	d1ae      	bne.n	c156 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    c1f8:	2100      	movs	r1, #0
    c1fa:	4620      	mov	r0, r4
    c1fc:	f7ff fdcb 	bl	bd96 <smp_pairing_complete>
    c200:	e7a9      	b.n	c156 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    c202:	309c      	adds	r0, #156	; 0x9c
    c204:	f3bf 8f5b 	dmb	ish
    c208:	e850 3f00 	ldrex	r3, [r0]
    c20c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    c210:	e840 3200 	strex	r2, r3, [r0]
    c214:	2a00      	cmp	r2, #0
    c216:	d1f7      	bne.n	c208 <bt_smp_encrypt_change+0xe4>
    c218:	f3bf 8f5b 	dmb	ish
    c21c:	bd10      	pop	{r4, pc}
    c21e:	f3bf 8f5b 	dmb	ish
    c222:	e852 1f00 	ldrex	r1, [r2]
    c226:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    c22a:	e842 1400 	strex	r4, r1, [r2]
    c22e:	2c00      	cmp	r4, #0
    c230:	d1f7      	bne.n	c222 <bt_smp_encrypt_change+0xfe>
    c232:	f3bf 8f5b 	dmb	ish
    c236:	e7ab      	b.n	c190 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    c238:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    c23c:	f3bf 8f5b 	dmb	ish
    c240:	e851 4f00 	ldrex	r4, [r1]
    c244:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    c248:	e841 4e00 	strex	lr, r4, [r1]
    c24c:	f1be 0f00 	cmp.w	lr, #0
    c250:	d1f6      	bne.n	c240 <bt_smp_encrypt_change+0x11c>
    c252:	f3bf 8f5b 	dmb	ish
    c256:	e7b2      	b.n	c1be <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c258:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    c25c:	f3bf 8f5b 	dmb	ish
    c260:	e851 4f00 	ldrex	r4, [r1]
    c264:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    c268:	e841 4e00 	strex	lr, r4, [r1]
    c26c:	f1be 0f00 	cmp.w	lr, #0
    c270:	d1f6      	bne.n	c260 <bt_smp_encrypt_change+0x13c>
    c272:	f3bf 8f5b 	dmb	ish
    c276:	e7a2      	b.n	c1be <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c278:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    c27c:	f3bf 8f5b 	dmb	ish
    c280:	e851 4f00 	ldrex	r4, [r1]
    c284:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    c288:	e841 4e00 	strex	lr, r4, [r1]
    c28c:	f1be 0f00 	cmp.w	lr, #0
    c290:	d1f6      	bne.n	c280 <bt_smp_encrypt_change+0x15c>
    c292:	f3bf 8f5b 	dmb	ish
    c296:	e792      	b.n	c1be <bt_smp_encrypt_change+0x9a>

0000c298 <bt_smp_recv>:
{
    c298:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    c29a:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    c29c:	898b      	ldrh	r3, [r1, #12]
    c29e:	b903      	cbnz	r3, c2a2 <bt_smp_recv+0xa>
    c2a0:	bd70      	pop	{r4, r5, r6, pc}
    c2a2:	460c      	mov	r4, r1
    c2a4:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    c2a6:	2101      	movs	r1, #1
    c2a8:	f104 0008 	add.w	r0, r4, #8
    c2ac:	f00f f943 	bl	1b536 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2b0:	f3bf 8f5b 	dmb	ish
    c2b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c2b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c2bc:	f013 0f10 	tst.w	r3, #16
    c2c0:	d1ee      	bne.n	c2a0 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    c2c2:	7833      	ldrb	r3, [r6, #0]
    c2c4:	2b0d      	cmp	r3, #13
    c2c6:	d824      	bhi.n	c312 <bt_smp_recv+0x7a>
    c2c8:	4a21      	ldr	r2, [pc, #132]	; (c350 <bt_smp_recv+0xb8>)
    c2ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    c2ce:	b302      	cbz	r2, c312 <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    c2d0:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c2d4:	f003 001f 	and.w	r0, r3, #31
    c2d8:	2101      	movs	r1, #1
    c2da:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c2dc:	095b      	lsrs	r3, r3, #5
    c2de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c2e2:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c2e4:	f3bf 8f5b 	dmb	ish
    c2e8:	e853 2f00 	ldrex	r2, [r3]
    c2ec:	ea02 0e00 	and.w	lr, r2, r0
    c2f0:	e843 ec00 	strex	ip, lr, [r3]
    c2f4:	f1bc 0f00 	cmp.w	ip, #0
    c2f8:	d1f6      	bne.n	c2e8 <bt_smp_recv+0x50>
    c2fa:	f3bf 8f5b 	dmb	ish
    c2fe:	4211      	tst	r1, r2
    c300:	d10c      	bne.n	c31c <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    c302:	7833      	ldrb	r3, [r6, #0]
    c304:	2b05      	cmp	r3, #5
    c306:	d0cb      	beq.n	c2a0 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c308:	2108      	movs	r1, #8
    c30a:	4628      	mov	r0, r5
    c30c:	f7ff fd47 	bl	bd9e <smp_error>
    c310:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    c312:	2107      	movs	r1, #7
    c314:	4628      	mov	r0, r5
    c316:	f7ff fd42 	bl	bd9e <smp_error>
		return;
    c31a:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    c31c:	89a1      	ldrh	r1, [r4, #12]
    c31e:	7832      	ldrb	r2, [r6, #0]
    c320:	4b0b      	ldr	r3, [pc, #44]	; (c350 <bt_smp_recv+0xb8>)
    c322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c326:	791b      	ldrb	r3, [r3, #4]
    c328:	4299      	cmp	r1, r3
    c32a:	d004      	beq.n	c336 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    c32c:	210a      	movs	r1, #10
    c32e:	4628      	mov	r0, r5
    c330:	f7ff fd35 	bl	bd9e <smp_error>
		return;
    c334:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    c336:	4b06      	ldr	r3, [pc, #24]	; (c350 <bt_smp_recv+0xb8>)
    c338:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    c33c:	4621      	mov	r1, r4
    c33e:	4628      	mov	r0, r5
    c340:	4798      	blx	r3
	if (err) {
    c342:	4601      	mov	r1, r0
    c344:	2800      	cmp	r0, #0
    c346:	d0ab      	beq.n	c2a0 <bt_smp_recv+0x8>
		smp_error(smp, err);
    c348:	4628      	mov	r0, r5
    c34a:	f7ff fd28 	bl	bd9e <smp_error>
    c34e:	e7a7      	b.n	c2a0 <bt_smp_recv+0x8>
    c350:	000318a8 	.word	0x000318a8

0000c354 <smp_dhkey_check>:
{
    c354:	b570      	push	{r4, r5, r6, lr}
    c356:	b08c      	sub	sp, #48	; 0x30
    c358:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    c35a:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c35c:	6803      	ldr	r3, [r0, #0]
    c35e:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c360:	b12c      	cbz	r4, c36e <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    c362:	2c01      	cmp	r4, #1
    c364:	d058      	beq.n	c418 <smp_dhkey_check+0xc4>
	return 0;
    c366:	2400      	movs	r4, #0
}
    c368:	4620      	mov	r0, r4
    c36a:	b00c      	add	sp, #48	; 0x30
    c36c:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    c36e:	2210      	movs	r2, #16
    c370:	2100      	movs	r1, #0
    c372:	a808      	add	r0, sp, #32
    c374:	f01e fb64 	bl	2aa40 <memset>
		switch (smp->method) {
    c378:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    c37c:	2b03      	cmp	r3, #3
    c37e:	d847      	bhi.n	c410 <smp_dhkey_check+0xbc>
    c380:	e8df f003 	tbb	[pc, r3]
    c384:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    c388:	2204      	movs	r2, #4
    c38a:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    c38e:	a808      	add	r0, sp, #32
    c390:	f7f3 ff96 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    c394:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    c398:	682b      	ldr	r3, [r5, #0]
    c39a:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    c39e:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    c3a0:	a804      	add	r0, sp, #16
    c3a2:	9003      	str	r0, [sp, #12]
    c3a4:	9302      	str	r3, [sp, #8]
    c3a6:	9101      	str	r1, [sp, #4]
    c3a8:	9200      	str	r2, [sp, #0]
    c3aa:	ab08      	add	r3, sp, #32
    c3ac:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    c3b0:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    c3b4:	f205 1063 	addw	r0, r5, #355	; 0x163
    c3b8:	f7ff f96e 	bl	b698 <smp_f6>
    c3bc:	b108      	cbz	r0, c3c2 <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    c3be:	2408      	movs	r4, #8
    c3c0:	e7d2      	b.n	c368 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    c3c2:	2210      	movs	r2, #16
    c3c4:	4631      	mov	r1, r6
    c3c6:	eb0d 0002 	add.w	r0, sp, r2
    c3ca:	f01e faa5 	bl	2a918 <memcmp>
    c3ce:	b108      	cbz	r0, c3d4 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    c3d0:	240b      	movs	r4, #11
    c3d2:	e7c9      	b.n	c368 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    c3d4:	4628      	mov	r0, r5
    c3d6:	f7fe fe63 	bl	b0a0 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    c3da:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    c3de:	9002      	str	r0, [sp, #8]
    c3e0:	9301      	str	r3, [sp, #4]
    c3e2:	2300      	movs	r3, #0
    c3e4:	9300      	str	r3, [sp, #0]
    c3e6:	2200      	movs	r2, #0
    c3e8:	2300      	movs	r3, #0
    c3ea:	6828      	ldr	r0, [r5, #0]
    c3ec:	f7fb f898 	bl	7520 <bt_conn_le_start_encryption>
    c3f0:	2800      	cmp	r0, #0
    c3f2:	db0f      	blt.n	c414 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c3f4:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3f6:	f3bf 8f5b 	dmb	ish
    c3fa:	e855 3f00 	ldrex	r3, [r5]
    c3fe:	f043 0302 	orr.w	r3, r3, #2
    c402:	e845 3200 	strex	r2, r3, [r5]
    c406:	2a00      	cmp	r2, #0
    c408:	d1f7      	bne.n	c3fa <smp_dhkey_check+0xa6>
    c40a:	f3bf 8f5b 	dmb	ish
		return 0;
    c40e:	e7ab      	b.n	c368 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    c410:	2408      	movs	r4, #8
    c412:	e7a9      	b.n	c368 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    c414:	2408      	movs	r4, #8
    c416:	e7a7      	b.n	c368 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c418:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c41c:	f3bf 8f5b 	dmb	ish
    c420:	e854 3f00 	ldrex	r3, [r4]
    c424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c428:	e844 3200 	strex	r2, r3, [r4]
    c42c:	2a00      	cmp	r2, #0
    c42e:	d1f7      	bne.n	c420 <smp_dhkey_check+0xcc>
    c430:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    c434:	2210      	movs	r2, #16
    c436:	4631      	mov	r1, r6
    c438:	f205 1053 	addw	r0, r5, #339	; 0x153
    c43c:	f7f3 ff40 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c440:	f3bf 8f5b 	dmb	ish
    c444:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c448:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    c44c:	f013 0f80 	tst.w	r3, #128	; 0x80
    c450:	d10d      	bne.n	c46e <smp_dhkey_check+0x11a>
    c452:	f3bf 8f5b 	dmb	ish
    c456:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c45a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c45e:	f413 7f00 	tst.w	r3, #512	; 0x200
    c462:	d112      	bne.n	c48a <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    c464:	4628      	mov	r0, r5
    c466:	f7ff f9f5 	bl	b854 <compute_and_check_and_send_slave_dhcheck>
    c46a:	4604      	mov	r4, r0
    c46c:	e77c      	b.n	c368 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c46e:	f3bf 8f5b 	dmb	ish
    c472:	e854 3f00 	ldrex	r3, [r4]
    c476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c47a:	e844 3200 	strex	r2, r3, [r4]
    c47e:	2a00      	cmp	r2, #0
    c480:	d1f7      	bne.n	c472 <smp_dhkey_check+0x11e>
    c482:	f3bf 8f5b 	dmb	ish
			return 0;
    c486:	2400      	movs	r4, #0
    c488:	e76e      	b.n	c368 <smp_dhkey_check+0x14>
    c48a:	f3bf 8f5b 	dmb	ish
    c48e:	e854 3f00 	ldrex	r3, [r4]
    c492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c496:	e844 3200 	strex	r2, r3, [r4]
    c49a:	2a00      	cmp	r2, #0
    c49c:	d1f7      	bne.n	c48e <smp_dhkey_check+0x13a>
    c49e:	f3bf 8f5b 	dmb	ish
			return 0;
    c4a2:	2400      	movs	r4, #0
    c4a4:	e760      	b.n	c368 <smp_dhkey_check+0x14>

0000c4a6 <legacy_pairing_random>:
{
    c4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4aa:	b088      	sub	sp, #32
    c4ac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c4ae:	4605      	mov	r5, r0
    c4b0:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c4b4:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c4b8:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    c4bc:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c4c0:	a904      	add	r1, sp, #16
    c4c2:	9102      	str	r1, [sp, #8]
    c4c4:	9201      	str	r2, [sp, #4]
    c4c6:	9300      	str	r3, [sp, #0]
    c4c8:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    c4cc:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    c4d0:	4641      	mov	r1, r8
    c4d2:	4628      	mov	r0, r5
    c4d4:	f7ff fada 	bl	ba8c <smp_c1>
	if (err) {
    c4d8:	b120      	cbz	r0, c4e4 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    c4da:	2708      	movs	r7, #8
}
    c4dc:	4638      	mov	r0, r7
    c4de:	b008      	add	sp, #32
    c4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c4e4:	2210      	movs	r2, #16
    c4e6:	eb0d 0102 	add.w	r1, sp, r2
    c4ea:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    c4ee:	f01e fa13 	bl	2a918 <memcmp>
    c4f2:	b108      	cbz	r0, c4f8 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c4f4:	2704      	movs	r7, #4
    c4f6:	e7f1      	b.n	c4dc <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    c4f8:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4fa:	bb3f      	cbnz	r7, c54c <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    c4fc:	ab04      	add	r3, sp, #16
    c4fe:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    c502:	4641      	mov	r1, r8
    c504:	4628      	mov	r0, r5
    c506:	f7ff fbf0 	bl	bcea <smp_s1>
		if (err) {
    c50a:	b108      	cbz	r0, c510 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    c50c:	2708      	movs	r7, #8
    c50e:	e7e5      	b.n	c4dc <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    c510:	4620      	mov	r0, r4
    c512:	f7fe fdc5 	bl	b0a0 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    c516:	9002      	str	r0, [sp, #8]
    c518:	ab04      	add	r3, sp, #16
    c51a:	9301      	str	r3, [sp, #4]
    c51c:	2300      	movs	r3, #0
    c51e:	9300      	str	r3, [sp, #0]
    c520:	2200      	movs	r2, #0
    c522:	2300      	movs	r3, #0
    c524:	4630      	mov	r0, r6
    c526:	f7fa fffb 	bl	7520 <bt_conn_le_start_encryption>
    c52a:	b108      	cbz	r0, c530 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    c52c:	2708      	movs	r7, #8
    c52e:	e7d5      	b.n	c4dc <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c530:	34a0      	adds	r4, #160	; 0xa0
    c532:	f3bf 8f5b 	dmb	ish
    c536:	e854 3f00 	ldrex	r3, [r4]
    c53a:	f043 0302 	orr.w	r3, r3, #2
    c53e:	e844 3200 	strex	r2, r3, [r4]
    c542:	2a00      	cmp	r2, #0
    c544:	d1f7      	bne.n	c536 <legacy_pairing_random+0x90>
    c546:	f3bf 8f5b 	dmb	ish
		return 0;
    c54a:	e7c7      	b.n	c4dc <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    c54c:	ab04      	add	r3, sp, #16
    c54e:	4642      	mov	r2, r8
    c550:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    c554:	4628      	mov	r0, r5
    c556:	f7ff fbc8 	bl	bcea <smp_s1>
		if (err) {
    c55a:	b108      	cbz	r0, c560 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    c55c:	2708      	movs	r7, #8
    c55e:	e7bd      	b.n	c4dc <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    c560:	2210      	movs	r2, #16
    c562:	eb0d 0102 	add.w	r1, sp, r2
    c566:	4628      	mov	r0, r5
    c568:	f7f3 feaa 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c56c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c570:	f3bf 8f5b 	dmb	ish
    c574:	e853 2f00 	ldrex	r2, [r3]
    c578:	f042 0202 	orr.w	r2, r2, #2
    c57c:	e843 2100 	strex	r1, r2, [r3]
    c580:	2900      	cmp	r1, #0
    c582:	d1f7      	bne.n	c574 <legacy_pairing_random+0xce>
    c584:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    c588:	4620      	mov	r0, r4
    c58a:	f7fe feea 	bl	b362 <smp_send_pairing_random>
	return 0;
    c58e:	2700      	movs	r7, #0
    c590:	e7a4      	b.n	c4dc <legacy_pairing_random+0x36>
	...

0000c594 <smp_pairing_random>:
{
    c594:	b5f0      	push	{r4, r5, r6, r7, lr}
    c596:	b085      	sub	sp, #20
    c598:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c59a:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    c59e:	2210      	movs	r2, #16
    c5a0:	6889      	ldr	r1, [r1, #8]
    c5a2:	4628      	mov	r0, r5
    c5a4:	f7f3 fe8c 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5a8:	f3bf 8f5b 	dmb	ish
    c5ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c5b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5b4:	f013 0f20 	tst.w	r3, #32
    c5b8:	d00d      	beq.n	c5d6 <smp_pairing_random+0x42>
    c5ba:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c5be:	6823      	ldr	r3, [r4, #0]
    c5c0:	78db      	ldrb	r3, [r3, #3]
    c5c2:	b17b      	cbz	r3, c5e4 <smp_pairing_random+0x50>
	switch (smp->method) {
    c5c4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c5c8:	2b03      	cmp	r3, #3
    c5ca:	f200 8106 	bhi.w	c7da <smp_pairing_random+0x246>
    c5ce:	e8df f003 	tbb	[pc, r3]
    c5d2:	bfa0      	.short	0xbfa0
    c5d4:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    c5d6:	4620      	mov	r0, r4
    c5d8:	f7ff ff65 	bl	c4a6 <legacy_pairing_random>
    c5dc:	4606      	mov	r6, r0
}
    c5de:	4630      	mov	r0, r6
    c5e0:	b005      	add	sp, #20
    c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    c5e4:	4620      	mov	r0, r4
    c5e6:	f7fe ff83 	bl	b4f0 <sc_smp_check_confirm>
		if (err) {
    c5ea:	4606      	mov	r6, r0
    c5ec:	2800      	cmp	r0, #0
    c5ee:	d1f6      	bne.n	c5de <smp_pairing_random+0x4a>
		switch (smp->method) {
    c5f0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c5f4:	2b03      	cmp	r3, #3
    c5f6:	f200 80ee 	bhi.w	c7d6 <smp_pairing_random+0x242>
    c5fa:	e8df f003 	tbb	[pc, r3]
    c5fe:	2e50      	.short	0x2e50
    c600:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    c602:	ab03      	add	r3, sp, #12
    c604:	9300      	str	r3, [sp, #0]
    c606:	462b      	mov	r3, r5
    c608:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    c60c:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    c610:	4873      	ldr	r0, [pc, #460]	; (c7e0 <smp_pairing_random+0x24c>)
    c612:	f7ff f995 	bl	b940 <smp_g2>
    c616:	b108      	cbz	r0, c61c <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    c618:	2608      	movs	r6, #8
    c61a:	e7e0      	b.n	c5de <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c61c:	f3bf 8f5b 	dmb	ish
    c620:	e857 3f00 	ldrex	r3, [r7]
    c624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c628:	e847 3200 	strex	r2, r3, [r7]
    c62c:	2a00      	cmp	r2, #0
    c62e:	d1f7      	bne.n	c620 <smp_pairing_random+0x8c>
    c630:	f3bf 8f5b 	dmb	ish
    c634:	f3bf 8f5b 	dmb	ish
    c638:	e857 3f00 	ldrex	r3, [r7]
    c63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c640:	e847 3200 	strex	r2, r3, [r7]
    c644:	2a00      	cmp	r2, #0
    c646:	d1f7      	bne.n	c638 <smp_pairing_random+0xa4>
    c648:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c64c:	4b65      	ldr	r3, [pc, #404]	; (c7e4 <smp_pairing_random+0x250>)
    c64e:	681b      	ldr	r3, [r3, #0]
    c650:	689b      	ldr	r3, [r3, #8]
    c652:	9903      	ldr	r1, [sp, #12]
    c654:	6820      	ldr	r0, [r4, #0]
    c656:	4798      	blx	r3
			return 0;
    c658:	e7c1      	b.n	c5de <smp_pairing_random+0x4a>
			smp->passkey_round++;
    c65a:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    c65e:	3301      	adds	r3, #1
    c660:	b2db      	uxtb	r3, r3
    c662:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    c666:	2b14      	cmp	r3, #20
    c668:	d019      	beq.n	c69e <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    c66a:	2110      	movs	r1, #16
    c66c:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c670:	f005 fb9e 	bl	11db0 <bt_rand>
    c674:	b108      	cbz	r0, c67a <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    c676:	2608      	movs	r6, #8
    c678:	e7b1      	b.n	c5de <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    c67a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c67e:	f3bf 8f5b 	dmb	ish
    c682:	e853 2f00 	ldrex	r2, [r3]
    c686:	f042 0208 	orr.w	r2, r2, #8
    c68a:	e843 2100 	strex	r1, r2, [r3]
    c68e:	2900      	cmp	r1, #0
    c690:	d1f7      	bne.n	c682 <smp_pairing_random+0xee>
    c692:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    c696:	4620      	mov	r0, r4
    c698:	f7ff f9aa 	bl	b9f0 <smp_send_pairing_confirm>
			return 0;
    c69c:	e79f      	b.n	c5de <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c69e:	f3bf 8f5b 	dmb	ish
    c6a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c6a6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    c6aa:	f013 0f80 	tst.w	r3, #128	; 0x80
    c6ae:	d00c      	beq.n	c6ca <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6b0:	f3bf 8f5b 	dmb	ish
    c6b4:	e857 3f00 	ldrex	r3, [r7]
    c6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c6bc:	e847 3200 	strex	r2, r3, [r7]
    c6c0:	2a00      	cmp	r2, #0
    c6c2:	d1f7      	bne.n	c6b4 <smp_pairing_random+0x120>
    c6c4:	f3bf 8f5b 	dmb	ish
			return 0;
    c6c8:	e789      	b.n	c5de <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    c6ca:	4620      	mov	r0, r4
    c6cc:	f7ff f868 	bl	b7a0 <compute_and_send_master_dhcheck>
    c6d0:	4606      	mov	r6, r0
    c6d2:	e784      	b.n	c5de <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c6d4:	ab03      	add	r3, sp, #12
    c6d6:	9300      	str	r3, [sp, #0]
    c6d8:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    c6dc:	462a      	mov	r2, r5
    c6de:	4940      	ldr	r1, [pc, #256]	; (c7e0 <smp_pairing_random+0x24c>)
    c6e0:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    c6e4:	f7ff f92c 	bl	b940 <smp_g2>
    c6e8:	b108      	cbz	r0, c6ee <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    c6ea:	2608      	movs	r6, #8
    c6ec:	e777      	b.n	c5de <smp_pairing_random+0x4a>
    c6ee:	f3bf 8f5b 	dmb	ish
    c6f2:	e857 3f00 	ldrex	r3, [r7]
    c6f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c6fa:	e847 3200 	strex	r2, r3, [r7]
    c6fe:	2a00      	cmp	r2, #0
    c700:	d1f7      	bne.n	c6f2 <smp_pairing_random+0x15e>
    c702:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c706:	4b37      	ldr	r3, [pc, #220]	; (c7e4 <smp_pairing_random+0x250>)
    c708:	681b      	ldr	r3, [r3, #0]
    c70a:	689b      	ldr	r3, [r3, #8]
    c70c:	9903      	ldr	r1, [sp, #12]
    c70e:	6820      	ldr	r0, [r4, #0]
    c710:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c712:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c716:	f3bf 8f5b 	dmb	ish
    c71a:	e853 2f00 	ldrex	r2, [r3]
    c71e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c722:	e843 2100 	strex	r1, r2, [r3]
    c726:	2900      	cmp	r1, #0
    c728:	d1f7      	bne.n	c71a <smp_pairing_random+0x186>
    c72a:	f3bf 8f5b 	dmb	ish
    c72e:	f3bf 8f5b 	dmb	ish
    c732:	e857 3f00 	ldrex	r3, [r7]
    c736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c73a:	e847 3200 	strex	r2, r3, [r7]
    c73e:	2a00      	cmp	r2, #0
    c740:	d1f7      	bne.n	c732 <smp_pairing_random+0x19e>
    c742:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    c746:	4620      	mov	r0, r4
    c748:	f7fe fe0b 	bl	b362 <smp_send_pairing_random>
	return 0;
    c74c:	2600      	movs	r6, #0
    c74e:	e746      	b.n	c5de <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    c750:	4620      	mov	r0, r4
    c752:	f7fe fecd 	bl	b4f0 <sc_smp_check_confirm>
		if (err) {
    c756:	4606      	mov	r6, r0
    c758:	2800      	cmp	r0, #0
    c75a:	f47f af40 	bne.w	c5de <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    c75e:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    c762:	f3bf 8f5b 	dmb	ish
    c766:	e855 3f00 	ldrex	r3, [r5]
    c76a:	f043 0308 	orr.w	r3, r3, #8
    c76e:	e845 3200 	strex	r2, r3, [r5]
    c772:	2a00      	cmp	r2, #0
    c774:	d1f7      	bne.n	c766 <smp_pairing_random+0x1d2>
    c776:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    c77a:	4620      	mov	r0, r4
    c77c:	f7fe fdf1 	bl	b362 <smp_send_pairing_random>
		smp->passkey_round++;
    c780:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    c784:	3301      	adds	r3, #1
    c786:	b2db      	uxtb	r3, r3
    c788:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    c78c:	2b14      	cmp	r3, #20
    c78e:	d009      	beq.n	c7a4 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    c790:	2110      	movs	r1, #16
    c792:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c796:	f005 fb0b 	bl	11db0 <bt_rand>
    c79a:	2800      	cmp	r0, #0
    c79c:	f43f af1f 	beq.w	c5de <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c7a0:	2608      	movs	r6, #8
    c7a2:	e71c      	b.n	c5de <smp_pairing_random+0x4a>
    c7a4:	f3bf 8f5b 	dmb	ish
    c7a8:	e855 3f00 	ldrex	r3, [r5]
    c7ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c7b0:	e845 3200 	strex	r2, r3, [r5]
    c7b4:	2a00      	cmp	r2, #0
    c7b6:	d1f7      	bne.n	c7a8 <smp_pairing_random+0x214>
    c7b8:	f3bf 8f5b 	dmb	ish
    c7bc:	f3bf 8f5b 	dmb	ish
    c7c0:	e857 3f00 	ldrex	r3, [r7]
    c7c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c7c8:	e847 3200 	strex	r2, r3, [r7]
    c7cc:	2a00      	cmp	r2, #0
    c7ce:	d1f7      	bne.n	c7c0 <smp_pairing_random+0x22c>
    c7d0:	f3bf 8f5b 	dmb	ish
			return 0;
    c7d4:	e703      	b.n	c5de <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c7d6:	2608      	movs	r6, #8
    c7d8:	e701      	b.n	c5de <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    c7da:	2608      	movs	r6, #8
    c7dc:	e6ff      	b.n	c5de <smp_pairing_random+0x4a>
    c7de:	bf00      	nop
    c7e0:	20000ec0 	.word	0x20000ec0
    c7e4:	20002f28 	.word	0x20002f28

0000c7e8 <generate_dhkey>:
{
    c7e8:	b510      	push	{r4, lr}
    c7ea:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c7ec:	490a      	ldr	r1, [pc, #40]	; (c818 <generate_dhkey+0x30>)
    c7ee:	30f3      	adds	r0, #243	; 0xf3
    c7f0:	f7fa fd1e 	bl	7230 <bt_dh_key_gen>
    c7f4:	b108      	cbz	r0, c7fa <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    c7f6:	2008      	movs	r0, #8
}
    c7f8:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c7fa:	34a0      	adds	r4, #160	; 0xa0
    c7fc:	f3bf 8f5b 	dmb	ish
    c800:	e854 3f00 	ldrex	r3, [r4]
    c804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c808:	e844 3200 	strex	r2, r3, [r4]
    c80c:	2a00      	cmp	r2, #0
    c80e:	d1f7      	bne.n	c800 <generate_dhkey+0x18>
    c810:	f3bf 8f5b 	dmb	ish
	return 0;
    c814:	bd10      	pop	{r4, pc}
    c816:	bf00      	nop
    c818:	0000bdd9 	.word	0x0000bdd9

0000c81c <smp_public_key_slave>:
{
    c81c:	b510      	push	{r4, lr}
    c81e:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    c820:	f7fe fd60 	bl	b2e4 <sc_send_public_key>
	if (err) {
    c824:	4603      	mov	r3, r0
    c826:	2800      	cmp	r0, #0
    c828:	d154      	bne.n	c8d4 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    c82a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c82e:	2b03      	cmp	r3, #3
    c830:	d852      	bhi.n	c8d8 <smp_public_key_slave+0xbc>
    c832:	e8df f003 	tbb	[pc, r3]
    c836:	2a02      	.short	0x2a02
    c838:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c83a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c83e:	f3bf 8f5b 	dmb	ish
    c842:	e853 2f00 	ldrex	r2, [r3]
    c846:	f042 0210 	orr.w	r2, r2, #16
    c84a:	e843 2100 	strex	r1, r2, [r3]
    c84e:	2900      	cmp	r1, #0
    c850:	d1f7      	bne.n	c842 <smp_public_key_slave+0x26>
    c852:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    c856:	4620      	mov	r0, r4
    c858:	f7ff f8ca 	bl	b9f0 <smp_send_pairing_confirm>
		if (err) {
    c85c:	4603      	mov	r3, r0
    c85e:	b3a8      	cbz	r0, c8cc <smp_public_key_slave+0xb0>
    c860:	e038      	b.n	c8d4 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    c862:	4620      	mov	r0, r4
    c864:	f7fe fcea 	bl	b23c <display_passkey>
		if (err) {
    c868:	4603      	mov	r3, r0
    c86a:	bb98      	cbnz	r0, c8d4 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c86c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c870:	f3bf 8f5b 	dmb	ish
    c874:	e853 2f00 	ldrex	r2, [r3]
    c878:	f042 0208 	orr.w	r2, r2, #8
    c87c:	e843 2100 	strex	r1, r2, [r3]
    c880:	2900      	cmp	r1, #0
    c882:	d1f7      	bne.n	c874 <smp_public_key_slave+0x58>
    c884:	f3bf 8f5b 	dmb	ish
    c888:	e020      	b.n	c8cc <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c88a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c88e:	f3bf 8f5b 	dmb	ish
    c892:	e853 2f00 	ldrex	r2, [r3]
    c896:	f042 0208 	orr.w	r2, r2, #8
    c89a:	e843 2100 	strex	r1, r2, [r3]
    c89e:	2900      	cmp	r1, #0
    c8a0:	d1f7      	bne.n	c892 <smp_public_key_slave+0x76>
    c8a2:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c8a6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c8aa:	f3bf 8f5b 	dmb	ish
    c8ae:	e853 2f00 	ldrex	r2, [r3]
    c8b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c8b6:	e843 2100 	strex	r1, r2, [r3]
    c8ba:	2900      	cmp	r1, #0
    c8bc:	d1f7      	bne.n	c8ae <smp_public_key_slave+0x92>
    c8be:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    c8c2:	4b06      	ldr	r3, [pc, #24]	; (c8dc <smp_public_key_slave+0xc0>)
    c8c4:	681b      	ldr	r3, [r3, #0]
    c8c6:	685b      	ldr	r3, [r3, #4]
    c8c8:	6820      	ldr	r0, [r4, #0]
    c8ca:	4798      	blx	r3
	return generate_dhkey(smp);
    c8cc:	4620      	mov	r0, r4
    c8ce:	f7ff ff8b 	bl	c7e8 <generate_dhkey>
    c8d2:	4603      	mov	r3, r0
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c8d8:	2308      	movs	r3, #8
    c8da:	e7fb      	b.n	c8d4 <smp_public_key_slave+0xb8>
    c8dc:	20002f28 	.word	0x20002f28

0000c8e0 <bt_smp_pkey_ready>:
{
    c8e0:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c8e2:	b150      	cbz	r0, c8fa <bt_smp_pkey_ready+0x1a>
    c8e4:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c8e6:	2240      	movs	r2, #64	; 0x40
    c8e8:	4826      	ldr	r0, [pc, #152]	; (c984 <bt_smp_pkey_ready+0xa4>)
    c8ea:	f7f3 fce9 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c8ee:	2201      	movs	r2, #1
    c8f0:	4b25      	ldr	r3, [pc, #148]	; (c988 <bt_smp_pkey_ready+0xa8>)
    c8f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c8f4:	2400      	movs	r4, #0
    c8f6:	b124      	cbz	r4, c902 <bt_smp_pkey_ready+0x22>
    c8f8:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c8fa:	2200      	movs	r2, #0
    c8fc:	4b22      	ldr	r3, [pc, #136]	; (c988 <bt_smp_pkey_ready+0xa8>)
    c8fe:	701a      	strb	r2, [r3, #0]
		return;
    c900:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c902:	4a22      	ldr	r2, [pc, #136]	; (c98c <bt_smp_pkey_ready+0xac>)
    c904:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c908:	fb03 f304 	mul.w	r3, r3, r4
    c90c:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c90e:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c910:	f3bf 8f5b 	dmb	ish
    c914:	58d3      	ldr	r3, [r2, r3]
    c916:	f3bf 8f5b 	dmb	ish
    c91a:	f013 0f40 	tst.w	r3, #64	; 0x40
    c91e:	d020      	beq.n	c962 <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c920:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c924:	fb03 f304 	mul.w	r3, r3, r4
    c928:	58d3      	ldr	r3, [r2, r3]
    c92a:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c92c:	b9fb      	cbnz	r3, c96e <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c92e:	4628      	mov	r0, r5
    c930:	f7fe fcd8 	bl	b2e4 <sc_send_public_key>
			if (err) {
    c934:	4601      	mov	r1, r0
    c936:	b9b0      	cbnz	r0, c966 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c938:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c93c:	fb03 f304 	mul.w	r3, r3, r4
    c940:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c944:	4b11      	ldr	r3, [pc, #68]	; (c98c <bt_smp_pkey_ready+0xac>)
    c946:	4413      	add	r3, r2
    c948:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c94a:	f3bf 8f5b 	dmb	ish
    c94e:	e853 2f00 	ldrex	r2, [r3]
    c952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c956:	e843 2100 	strex	r1, r2, [r3]
    c95a:	2900      	cmp	r1, #0
    c95c:	d1f7      	bne.n	c94e <bt_smp_pkey_ready+0x6e>
    c95e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c962:	3401      	adds	r4, #1
    c964:	e7c7      	b.n	c8f6 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c966:	4628      	mov	r0, r5
    c968:	f7ff fa19 	bl	bd9e <smp_error>
    c96c:	e7e4      	b.n	c938 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c96e:	4628      	mov	r0, r5
    c970:	f7ff ff54 	bl	c81c <smp_public_key_slave>
		if (err) {
    c974:	4601      	mov	r1, r0
    c976:	2800      	cmp	r0, #0
    c978:	d0f3      	beq.n	c962 <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c97a:	4628      	mov	r0, r5
    c97c:	f7ff fa0f 	bl	bd9e <smp_error>
    c980:	e7ef      	b.n	c962 <bt_smp_pkey_ready+0x82>
    c982:	bf00      	nop
    c984:	20000ec0 	.word	0x20000ec0
    c988:	20000ebc 	.word	0x20000ebc
    c98c:	20000d18 	.word	0x20000d18

0000c990 <smp_public_key>:
{
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c994:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c996:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c99a:	2220      	movs	r2, #32
    c99c:	4631      	mov	r1, r6
    c99e:	4628      	mov	r0, r5
    c9a0:	f7f3 fc8e 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c9a4:	2220      	movs	r2, #32
    c9a6:	18b1      	adds	r1, r6, r2
    c9a8:	f204 1013 	addw	r0, r4, #275	; 0x113
    c9ac:	f7f3 fc88 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c9b0:	2240      	movs	r2, #64	; 0x40
    c9b2:	493d      	ldr	r1, [pc, #244]	; (caa8 <smp_public_key+0x118>)
    c9b4:	4628      	mov	r0, r5
    c9b6:	f01d ffaf 	bl	2a918 <memcmp>
    c9ba:	b158      	cbz	r0, c9d4 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c9bc:	6823      	ldr	r3, [r4, #0]
    c9be:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d156      	bne.n	ca72 <smp_public_key+0xe2>
		switch (smp->method) {
    c9c4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c9c8:	2b03      	cmp	r3, #3
    c9ca:	d86a      	bhi.n	caa2 <smp_public_key+0x112>
    c9cc:	e8df f003 	tbb	[pc, r3]
    c9d0:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c9d4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c9d8:	f3bf 8f5b 	dmb	ish
    c9dc:	e853 2f00 	ldrex	r2, [r3]
    c9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c9e4:	e843 2100 	strex	r1, r2, [r3]
    c9e8:	2900      	cmp	r1, #0
    c9ea:	d1f7      	bne.n	c9dc <smp_public_key+0x4c>
    c9ec:	f3bf 8f5b 	dmb	ish
    c9f0:	e7e4      	b.n	c9bc <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c9f2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c9f6:	f3bf 8f5b 	dmb	ish
    c9fa:	e853 2f00 	ldrex	r2, [r3]
    c9fe:	f042 0208 	orr.w	r2, r2, #8
    ca02:	e843 2100 	strex	r1, r2, [r3]
    ca06:	2900      	cmp	r1, #0
    ca08:	d1f7      	bne.n	c9fa <smp_public_key+0x6a>
    ca0a:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    ca0e:	4620      	mov	r0, r4
    ca10:	f7ff feea 	bl	c7e8 <generate_dhkey>
    ca14:	4603      	mov	r3, r0
    ca16:	e033      	b.n	ca80 <smp_public_key+0xf0>
			err = display_passkey(smp);
    ca18:	4620      	mov	r0, r4
    ca1a:	f7fe fc0f 	bl	b23c <display_passkey>
			if (err) {
    ca1e:	4603      	mov	r3, r0
    ca20:	bb70      	cbnz	r0, ca80 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    ca22:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    ca26:	f3bf 8f5b 	dmb	ish
    ca2a:	e853 2f00 	ldrex	r2, [r3]
    ca2e:	f042 0208 	orr.w	r2, r2, #8
    ca32:	e843 2100 	strex	r1, r2, [r3]
    ca36:	2900      	cmp	r1, #0
    ca38:	d1f7      	bne.n	ca2a <smp_public_key+0x9a>
    ca3a:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    ca3e:	4620      	mov	r0, r4
    ca40:	f7fe ffd6 	bl	b9f0 <smp_send_pairing_confirm>
			if (err) {
    ca44:	4603      	mov	r3, r0
    ca46:	b9d8      	cbnz	r0, ca80 <smp_public_key+0xf0>
    ca48:	e7e1      	b.n	ca0e <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ca4a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    ca4e:	f3bf 8f5b 	dmb	ish
    ca52:	e853 2f00 	ldrex	r2, [r3]
    ca56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ca5a:	e843 2100 	strex	r1, r2, [r3]
    ca5e:	2900      	cmp	r1, #0
    ca60:	d1f7      	bne.n	ca52 <smp_public_key+0xc2>
    ca62:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ca66:	4b11      	ldr	r3, [pc, #68]	; (caac <smp_public_key+0x11c>)
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	685b      	ldr	r3, [r3, #4]
    ca6c:	6820      	ldr	r0, [r4, #0]
    ca6e:	4798      	blx	r3
			break;
    ca70:	e7cd      	b.n	ca0e <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    ca72:	4b0f      	ldr	r3, [pc, #60]	; (cab0 <smp_public_key+0x120>)
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	b12b      	cbz	r3, ca84 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    ca78:	4620      	mov	r0, r4
    ca7a:	f7ff fecf 	bl	c81c <smp_public_key_slave>
    ca7e:	4603      	mov	r3, r0
}
    ca80:	4618      	mov	r0, r3
    ca82:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ca84:	34a0      	adds	r4, #160	; 0xa0
    ca86:	f3bf 8f5b 	dmb	ish
    ca8a:	e854 3f00 	ldrex	r3, [r4]
    ca8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca92:	e844 3200 	strex	r2, r3, [r4]
    ca96:	2a00      	cmp	r2, #0
    ca98:	d1f7      	bne.n	ca8a <smp_public_key+0xfa>
    ca9a:	f3bf 8f5b 	dmb	ish
		return 0;
    ca9e:	2300      	movs	r3, #0
    caa0:	e7ee      	b.n	ca80 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    caa2:	2308      	movs	r3, #8
    caa4:	e7ec      	b.n	ca80 <smp_public_key+0xf0>
    caa6:	bf00      	nop
    caa8:	00031968 	.word	0x00031968
    caac:	20002f28 	.word	0x20002f28
    cab0:	20000ebc 	.word	0x20000ebc

0000cab4 <smp_signing_info>:
{
    cab4:	b570      	push	{r4, r5, r6, lr}
    cab6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cab8:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    caba:	f3bf 8f5b 	dmb	ish
    cabe:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cac2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cac6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    caca:	d111      	bne.n	caf0 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    cacc:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cad0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    cad4:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cad8:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cada:	b902      	cbnz	r2, cade <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cadc:	b1ab      	cbz	r3, cb0a <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    cade:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    cae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    caea:	b193      	cbz	r3, cb12 <smp_signing_info+0x5e>
	return 0;
    caec:	2000      	movs	r0, #0
}
    caee:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    caf0:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    caf2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    caf6:	2010      	movs	r0, #16
    caf8:	f000 ff8e 	bl	da18 <bt_keys_get_type>
		if (!keys) {
    cafc:	b178      	cbz	r0, cb1e <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    cafe:	2210      	movs	r2, #16
    cb00:	4631      	mov	r1, r6
    cb02:	305c      	adds	r0, #92	; 0x5c
    cb04:	f7f3 fbdc 	bl	2c0 <memcpy>
    cb08:	e7e0      	b.n	cacc <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    cb0a:	4620      	mov	r0, r4
    cb0c:	f7ff fac4 	bl	c098 <bt_smp_distribute_keys>
    cb10:	e7e5      	b.n	cade <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    cb12:	2100      	movs	r1, #0
    cb14:	4620      	mov	r0, r4
    cb16:	f7ff f93e 	bl	bd96 <smp_pairing_complete>
	return 0;
    cb1a:	2000      	movs	r0, #0
    cb1c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    cb1e:	2008      	movs	r0, #8
    cb20:	bd70      	pop	{r4, r5, r6, pc}

0000cb22 <smp_ident_info>:
{
    cb22:	b538      	push	{r3, r4, r5, lr}
    cb24:	4604      	mov	r4, r0
    cb26:	f3bf 8f5b 	dmb	ish
    cb2a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cb2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cb32:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cb36:	d00b      	beq.n	cb50 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    cb38:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    cb3a:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    cb3c:	3148      	adds	r1, #72	; 0x48
    cb3e:	2002      	movs	r0, #2
    cb40:	f000 ff6a 	bl	da18 <bt_keys_get_type>
		if (!keys) {
    cb44:	b198      	cbz	r0, cb6e <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    cb46:	2210      	movs	r2, #16
    cb48:	4629      	mov	r1, r5
    cb4a:	3030      	adds	r0, #48	; 0x30
    cb4c:	f7f3 fbb8 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    cb50:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb52:	f3bf 8f5b 	dmb	ish
    cb56:	e854 3f00 	ldrex	r3, [r4]
    cb5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cb5e:	e844 3200 	strex	r2, r3, [r4]
    cb62:	2a00      	cmp	r2, #0
    cb64:	d1f7      	bne.n	cb56 <smp_ident_info+0x34>
    cb66:	f3bf 8f5b 	dmb	ish
	return 0;
    cb6a:	2000      	movs	r0, #0
    cb6c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    cb6e:	2008      	movs	r0, #8
}
    cb70:	bd38      	pop	{r3, r4, r5, pc}

0000cb72 <smp_master_ident>:
{
    cb72:	b570      	push	{r4, r5, r6, lr}
    cb74:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cb76:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb78:	f3bf 8f5b 	dmb	ish
    cb7c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cb80:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cb84:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cb88:	d116      	bne.n	cbb8 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    cb8a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cb8e:	f013 0f02 	tst.w	r3, #2
    cb92:	d127      	bne.n	cbe4 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    cb94:	f013 0f04 	tst.w	r3, #4
    cb98:	d133      	bne.n	cc02 <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cb9a:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cb9c:	b91b      	cbnz	r3, cba6 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cb9e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cba2:	2b00      	cmp	r3, #0
    cba4:	d03c      	beq.n	cc20 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    cba6:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    cbaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    cbb2:	b3cb      	cbz	r3, cc28 <smp_master_ident+0xb6>
	return 0;
    cbb4:	2000      	movs	r0, #0
}
    cbb6:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    cbb8:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    cbba:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cbbe:	2004      	movs	r0, #4
    cbc0:	f000 ff2a 	bl	da18 <bt_keys_get_type>
		if (!keys) {
    cbc4:	b3b0      	cbz	r0, cc34 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    cbc6:	8832      	ldrh	r2, [r6, #0]
    cbc8:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    cbca:	f8d6 1002 	ldr.w	r1, [r6, #2]
    cbce:	f8d6 2006 	ldr.w	r2, [r6, #6]
    cbd2:	6101      	str	r1, [r0, #16]
    cbd4:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    cbd6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cbda:	f023 0301 	bic.w	r3, r3, #1
    cbde:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    cbe2:	e7d2      	b.n	cb8a <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    cbe4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cbe8:	f3bf 8f5b 	dmb	ish
    cbec:	e853 2f00 	ldrex	r2, [r3]
    cbf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    cbf4:	e843 2100 	strex	r1, r2, [r3]
    cbf8:	2900      	cmp	r1, #0
    cbfa:	d1f7      	bne.n	cbec <smp_master_ident+0x7a>
    cbfc:	f3bf 8f5b 	dmb	ish
    cc00:	e7cb      	b.n	cb9a <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cc02:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    cc06:	f3bf 8f5b 	dmb	ish
    cc0a:	e853 2f00 	ldrex	r2, [r3]
    cc0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cc12:	e843 2100 	strex	r1, r2, [r3]
    cc16:	2900      	cmp	r1, #0
    cc18:	d1f7      	bne.n	cc0a <smp_master_ident+0x98>
    cc1a:	f3bf 8f5b 	dmb	ish
    cc1e:	e7bc      	b.n	cb9a <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    cc20:	4620      	mov	r0, r4
    cc22:	f7ff fa39 	bl	c098 <bt_smp_distribute_keys>
    cc26:	e7be      	b.n	cba6 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    cc28:	2100      	movs	r1, #0
    cc2a:	4620      	mov	r0, r4
    cc2c:	f7ff f8b3 	bl	bd96 <smp_pairing_complete>
	return 0;
    cc30:	2000      	movs	r0, #0
    cc32:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    cc34:	2008      	movs	r0, #8
    cc36:	bd70      	pop	{r4, r5, r6, pc}

0000cc38 <smp_encrypt_info>:
{
    cc38:	b538      	push	{r3, r4, r5, lr}
    cc3a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc3c:	f3bf 8f5b 	dmb	ish
    cc40:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cc44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cc48:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cc4c:	d00b      	beq.n	cc66 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    cc4e:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    cc50:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    cc52:	3148      	adds	r1, #72	; 0x48
    cc54:	2004      	movs	r0, #4
    cc56:	f000 fedf 	bl	da18 <bt_keys_get_type>
		if (!keys) {
    cc5a:	b198      	cbz	r0, cc84 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    cc5c:	2210      	movs	r2, #16
    cc5e:	4629      	mov	r1, r5
    cc60:	301a      	adds	r0, #26
    cc62:	f7f3 fb2d 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    cc66:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc68:	f3bf 8f5b 	dmb	ish
    cc6c:	e854 3f00 	ldrex	r3, [r4]
    cc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cc74:	e844 3200 	strex	r2, r3, [r4]
    cc78:	2a00      	cmp	r2, #0
    cc7a:	d1f7      	bne.n	cc6c <smp_encrypt_info+0x34>
    cc7c:	f3bf 8f5b 	dmb	ish
	return 0;
    cc80:	2000      	movs	r0, #0
    cc82:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    cc84:	2008      	movs	r0, #8
}
    cc86:	bd38      	pop	{r3, r4, r5, pc}

0000cc88 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    cc88:	7883      	ldrb	r3, [r0, #2]
    cc8a:	b103      	cbz	r3, cc8e <smp_check_complete+0x6>
    cc8c:	4770      	bx	lr
{
    cc8e:	b510      	push	{r4, lr}
    cc90:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    cc92:	2106      	movs	r1, #6
    cc94:	f7fb ffa1 	bl	8bda <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    cc98:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    cc9c:	ea21 0104 	bic.w	r1, r1, r4
    cca0:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    cca4:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    cca8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ccb0:	b103      	cbz	r3, ccb4 <smp_check_complete+0x2c>
    ccb2:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    ccb4:	2100      	movs	r1, #0
    ccb6:	f7ff f86e 	bl	bd96 <smp_pairing_complete>
    ccba:	e7fa      	b.n	ccb2 <smp_check_complete+0x2a>

0000ccbc <sign_info_sent>:
{
    ccbc:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    ccbe:	2104      	movs	r1, #4
    ccc0:	f7ff ffe2 	bl	cc88 <smp_check_complete>
    ccc4:	bd08      	pop	{r3, pc}

0000ccc6 <ident_sent>:
{
    ccc6:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    ccc8:	2101      	movs	r1, #1
    ccca:	f7ff ffdd 	bl	cc88 <smp_check_complete>
    ccce:	bd08      	pop	{r3, pc}

0000ccd0 <smp_ident_addr_info>:
{
    ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ccd4:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ccd6:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ccd8:	782b      	ldrb	r3, [r5, #0]
    ccda:	b153      	cbz	r3, ccf2 <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    ccdc:	79ab      	ldrb	r3, [r5, #6]
    ccde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cce2:	2bc0      	cmp	r3, #192	; 0xc0
    cce4:	bf14      	ite	ne
    cce6:	2300      	movne	r3, #0
    cce8:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    ccea:	b923      	cbnz	r3, ccf6 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    ccec:	200a      	movs	r0, #10
    ccee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    ccf2:	2301      	movs	r3, #1
    ccf4:	e7f9      	b.n	ccea <smp_ident_addr_info+0x1a>
    ccf6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ccf8:	f3bf 8f5b 	dmb	ish
    ccfc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd00:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cd04:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cd08:	d119      	bne.n	cd3e <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    cd0a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cd0e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cd12:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    cd16:	f013 0f04 	tst.w	r3, #4
    cd1a:	d14f      	bne.n	cdbc <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cd1c:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cd1e:	b91b      	cbnz	r3, cd28 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cd20:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    cd24:	2b00      	cmp	r3, #0
    cd26:	d058      	beq.n	cdda <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    cd28:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    cd2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    cd34:	2b00      	cmp	r3, #0
    cd36:	d054      	beq.n	cde2 <smp_ident_addr_info+0x112>
	return 0;
    cd38:	2000      	movs	r0, #0
}
    cd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    cd3e:	f106 0848 	add.w	r8, r6, #72	; 0x48
    cd42:	4641      	mov	r1, r8
    cd44:	2002      	movs	r0, #2
    cd46:	f000 fe67 	bl	da18 <bt_keys_get_type>
		if (!keys) {
    cd4a:	4681      	mov	r9, r0
    cd4c:	2800      	cmp	r0, #0
    cd4e:	d04f      	beq.n	cdf0 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    cd50:	78f3      	ldrb	r3, [r6, #3]
    cd52:	bb43      	cbnz	r3, cda6 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    cd54:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cd58:	780b      	ldrb	r3, [r1, #0]
    cd5a:	2b01      	cmp	r3, #1
    cd5c:	d026      	beq.n	cdac <smp_ident_addr_info+0xdc>
		return false;
    cd5e:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    cd60:	2f00      	cmp	r7, #0
    cd62:	d0d2      	beq.n	cd0a <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    cd64:	2206      	movs	r2, #6
    cd66:	3101      	adds	r1, #1
    cd68:	f109 0040 	add.w	r0, r9, #64	; 0x40
    cd6c:	f7f3 faa8 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    cd70:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    cd74:	b13b      	cbz	r3, cd86 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    cd76:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    cd7a:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    cd7e:	2fc0      	cmp	r7, #192	; 0xc0
    cd80:	bf14      	ite	ne
    cd82:	2700      	movne	r7, #0
    cd84:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    cd86:	2f00      	cmp	r7, #0
    cd88:	d1bf      	bne.n	cd0a <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    cd8a:	2207      	movs	r2, #7
    cd8c:	4629      	mov	r1, r5
    cd8e:	4648      	mov	r0, r9
    cd90:	f7f3 fa96 	bl	2c0 <memcpy>
    cd94:	2207      	movs	r2, #7
    cd96:	4629      	mov	r1, r5
    cd98:	4640      	mov	r0, r8
    cd9a:	f7f3 fa91 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    cd9e:	4630      	mov	r0, r6
    cda0:	f7fa fba4 	bl	74ec <bt_conn_identity_resolved>
    cda4:	e7b1      	b.n	cd0a <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    cda6:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    cdaa:	e7d5      	b.n	cd58 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    cdac:	798f      	ldrb	r7, [r1, #6]
    cdae:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    cdb2:	2f40      	cmp	r7, #64	; 0x40
    cdb4:	bf14      	ite	ne
    cdb6:	2700      	movne	r7, #0
    cdb8:	2701      	moveq	r7, #1
    cdba:	e7d1      	b.n	cd60 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cdbc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdc0:	f3bf 8f5b 	dmb	ish
    cdc4:	e853 2f00 	ldrex	r2, [r3]
    cdc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cdcc:	e843 2100 	strex	r1, r2, [r3]
    cdd0:	2900      	cmp	r1, #0
    cdd2:	d1f7      	bne.n	cdc4 <smp_ident_addr_info+0xf4>
    cdd4:	f3bf 8f5b 	dmb	ish
    cdd8:	e7a0      	b.n	cd1c <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    cdda:	4620      	mov	r0, r4
    cddc:	f7ff f95c 	bl	c098 <bt_smp_distribute_keys>
    cde0:	e7a2      	b.n	cd28 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    cde2:	2100      	movs	r1, #0
    cde4:	4620      	mov	r0, r4
    cde6:	f7fe ffd6 	bl	bd96 <smp_pairing_complete>
	return 0;
    cdea:	2000      	movs	r0, #0
    cdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    cdf0:	2008      	movs	r0, #8
    cdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000cdf8 <legacy_request_tk>:
{
    cdf8:	b570      	push	{r4, r5, r6, lr}
    cdfa:	b082      	sub	sp, #8
    cdfc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cdfe:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    ce00:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ce04:	f000 fdea 	bl	d9dc <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    ce08:	b168      	cbz	r0, ce26 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce0a:	f3bf 8f5b 	dmb	ish
    ce0e:	6883      	ldr	r3, [r0, #8]
    ce10:	f3bf 8f5b 	dmb	ish
    ce14:	f013 0f01 	tst.w	r3, #1
    ce18:	d005      	beq.n	ce26 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    ce1a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    ce1e:	b913      	cbnz	r3, ce26 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    ce20:	2008      	movs	r0, #8
}
    ce22:	b002      	add	sp, #8
    ce24:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    ce26:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    ce2a:	2b01      	cmp	r3, #1
    ce2c:	d025      	beq.n	ce7a <legacy_request_tk+0x82>
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d037      	beq.n	cea2 <legacy_request_tk+0xaa>
    ce32:	2b02      	cmp	r3, #2
    ce34:	d001      	beq.n	ce3a <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    ce36:	2008      	movs	r0, #8
    ce38:	e7f3      	b.n	ce22 <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    ce3a:	2104      	movs	r1, #4
    ce3c:	eb0d 0001 	add.w	r0, sp, r1
    ce40:	f004 ffb6 	bl	11db0 <bt_rand>
    ce44:	b108      	cbz	r0, ce4a <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    ce46:	2008      	movs	r0, #8
    ce48:	e7eb      	b.n	ce22 <legacy_request_tk+0x2a>
		passkey %= 1000000;
    ce4a:	9b01      	ldr	r3, [sp, #4]
    ce4c:	4916      	ldr	r1, [pc, #88]	; (cea8 <legacy_request_tk+0xb0>)
    ce4e:	fba1 2103 	umull	r2, r1, r1, r3
    ce52:	0c89      	lsrs	r1, r1, #18
    ce54:	4a15      	ldr	r2, [pc, #84]	; (ceac <legacy_request_tk+0xb4>)
    ce56:	fb02 3111 	mls	r1, r2, r1, r3
    ce5a:	ae02      	add	r6, sp, #8
    ce5c:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    ce60:	4b13      	ldr	r3, [pc, #76]	; (ceb0 <legacy_request_tk+0xb8>)
    ce62:	681b      	ldr	r3, [r3, #0]
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	4628      	mov	r0, r5
    ce68:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    ce6a:	2204      	movs	r2, #4
    ce6c:	4631      	mov	r1, r6
    ce6e:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    ce72:	f7f3 fa25 	bl	2c0 <memcpy>
	return 0;
    ce76:	2000      	movs	r0, #0
		break;
    ce78:	e7d3      	b.n	ce22 <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ce7a:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce7c:	f3bf 8f5b 	dmb	ish
    ce80:	e854 3f00 	ldrex	r3, [r4]
    ce84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ce88:	e844 3200 	strex	r2, r3, [r4]
    ce8c:	2a00      	cmp	r2, #0
    ce8e:	d1f7      	bne.n	ce80 <legacy_request_tk+0x88>
    ce90:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    ce94:	4b06      	ldr	r3, [pc, #24]	; (ceb0 <legacy_request_tk+0xb8>)
    ce96:	681b      	ldr	r3, [r3, #0]
    ce98:	685b      	ldr	r3, [r3, #4]
    ce9a:	4628      	mov	r0, r5
    ce9c:	4798      	blx	r3
	return 0;
    ce9e:	2000      	movs	r0, #0
		break;
    cea0:	e7bf      	b.n	ce22 <legacy_request_tk+0x2a>
	return 0;
    cea2:	2000      	movs	r0, #0
    cea4:	e7bd      	b.n	ce22 <legacy_request_tk+0x2a>
    cea6:	bf00      	nop
    cea8:	431bde83 	.word	0x431bde83
    ceac:	000f4240 	.word	0x000f4240
    ceb0:	20002f28 	.word	0x20002f28

0000ceb4 <legacy_pairing_rsp>:
{
    ceb4:	b538      	push	{r3, r4, r5, lr}
    ceb6:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    ceb8:	f7fe f90a 	bl	b0d0 <legacy_get_pair_method>
    cebc:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    cec0:	bb10      	cbnz	r0, cf08 <legacy_pairing_rsp+0x54>
    cec2:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    cec4:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cec8:	f3bf 8f5b 	dmb	ish
    cecc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    ced0:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    ced4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    ced8:	d016      	beq.n	cf08 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ceda:	4b24      	ldr	r3, [pc, #144]	; (cf6c <legacy_pairing_rsp+0xb8>)
    cedc:	681b      	ldr	r3, [r3, #0]
    cede:	b19b      	cbz	r3, cf08 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    cee0:	691b      	ldr	r3, [r3, #16]
    cee2:	b18b      	cbz	r3, cf08 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cee4:	f3bf 8f5b 	dmb	ish
    cee8:	e852 3f00 	ldrex	r3, [r2]
    ceec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cef0:	e842 3100 	strex	r1, r3, [r2]
    cef4:	2900      	cmp	r1, #0
    cef6:	d1f7      	bne.n	cee8 <legacy_pairing_rsp+0x34>
    cef8:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    cefc:	4b1b      	ldr	r3, [pc, #108]	; (cf6c <legacy_pairing_rsp+0xb8>)
    cefe:	681b      	ldr	r3, [r3, #0]
    cf00:	691b      	ldr	r3, [r3, #16]
    cf02:	6828      	ldr	r0, [r5, #0]
    cf04:	4798      	blx	r3
		return 0;
    cf06:	e004      	b.n	cf12 <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    cf08:	4628      	mov	r0, r5
    cf0a:	f7ff ff75 	bl	cdf8 <legacy_request_tk>
	if (ret) {
    cf0e:	4604      	mov	r4, r0
    cf10:	b108      	cbz	r0, cf16 <legacy_pairing_rsp+0x62>
}
    cf12:	4620      	mov	r0, r4
    cf14:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    cf16:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf1a:	f3bf 8f5b 	dmb	ish
    cf1e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    cf22:	f3bf 8f5b 	dmb	ish
    cf26:	f412 7f00 	tst.w	r2, #512	; 0x200
    cf2a:	d00c      	beq.n	cf46 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf2c:	f3bf 8f5b 	dmb	ish
    cf30:	e853 2f00 	ldrex	r2, [r3]
    cf34:	f042 0201 	orr.w	r2, r2, #1
    cf38:	e843 2100 	strex	r1, r2, [r3]
    cf3c:	2900      	cmp	r1, #0
    cf3e:	d1f7      	bne.n	cf30 <legacy_pairing_rsp+0x7c>
    cf40:	f3bf 8f5b 	dmb	ish
	return 0;
    cf44:	e7e5      	b.n	cf12 <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cf46:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    cf4a:	f3bf 8f5b 	dmb	ish
    cf4e:	e853 2f00 	ldrex	r2, [r3]
    cf52:	f042 0208 	orr.w	r2, r2, #8
    cf56:	e843 2100 	strex	r1, r2, [r3]
    cf5a:	2900      	cmp	r1, #0
    cf5c:	d1f7      	bne.n	cf4e <legacy_pairing_rsp+0x9a>
    cf5e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    cf62:	4628      	mov	r0, r5
    cf64:	f7fe fdd8 	bl	bb18 <legacy_send_pairing_confirm>
    cf68:	4604      	mov	r4, r0
    cf6a:	e7d2      	b.n	cf12 <legacy_pairing_rsp+0x5e>
    cf6c:	20002f28 	.word	0x20002f28

0000cf70 <smp_pairing_rsp>:
{
    cf70:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    cf72:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    cf74:	78eb      	ldrb	r3, [r5, #3]
    cf76:	3b07      	subs	r3, #7
    cf78:	b2db      	uxtb	r3, r3
    cf7a:	2b09      	cmp	r3, #9
    cf7c:	d902      	bls.n	cf84 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    cf7e:	2506      	movs	r5, #6
}
    cf80:	4628      	mov	r0, r5
    cf82:	bd70      	pop	{r4, r5, r6, pc}
    cf84:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    cf86:	792b      	ldrb	r3, [r5, #4]
    cf88:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    cf8c:	4013      	ands	r3, r2
    cf8e:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    cf92:	796b      	ldrb	r3, [r5, #5]
    cf94:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    cf98:	4013      	ands	r3, r2
    cf9a:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    cf9e:	2302      	movs	r3, #2
    cfa0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    cfa4:	2206      	movs	r2, #6
    cfa6:	4629      	mov	r1, r5
    cfa8:	30ad      	adds	r0, #173	; 0xad
    cfaa:	f7f3 f989 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cfae:	78ab      	ldrb	r3, [r5, #2]
    cfb0:	f013 0f08 	tst.w	r3, #8
    cfb4:	d004      	beq.n	cfc0 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    cfb6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cfba:	f013 0f08 	tst.w	r3, #8
    cfbe:	d148      	bne.n	d052 <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cfc0:	78ab      	ldrb	r3, [r5, #2]
    cfc2:	f013 0f20 	tst.w	r3, #32
    cfc6:	d004      	beq.n	cfd2 <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    cfc8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cfcc:	f013 0f20 	tst.w	r3, #32
    cfd0:	d14e      	bne.n	d070 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cfd2:	78ab      	ldrb	r3, [r5, #2]
    cfd4:	f013 0f01 	tst.w	r3, #1
    cfd8:	d004      	beq.n	cfe4 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    cfda:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cfde:	f013 0f01 	tst.w	r3, #1
    cfe2:	d154      	bne.n	d08e <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cfe4:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cfe8:	f3bf 8f5b 	dmb	ish
    cfec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cff0:	f3bf 8f5b 	dmb	ish
    cff4:	f013 0f20 	tst.w	r3, #32
    cff8:	d058      	beq.n	d0ac <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    cffa:	7829      	ldrb	r1, [r5, #0]
    cffc:	4620      	mov	r0, r4
    cffe:	f7fe f835 	bl	b06c <get_pair_method>
    d002:	4605      	mov	r5, r0
    d004:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    d008:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    d00c:	f003 0304 	and.w	r3, r3, #4
    d010:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    d014:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    d018:	f003 0306 	and.w	r3, r3, #6
    d01c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    d020:	2800      	cmp	r0, #0
    d022:	d049      	beq.n	d0b8 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    d024:	4b3c      	ldr	r3, [pc, #240]	; (d118 <smp_pairing_rsp+0x1a8>)
    d026:	781b      	ldrb	r3, [r3, #0]
    d028:	2b00      	cmp	r3, #0
    d02a:	d067      	beq.n	d0fc <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d02c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d030:	f3bf 8f5b 	dmb	ish
    d034:	e853 2f00 	ldrex	r2, [r3]
    d038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    d03c:	e843 2100 	strex	r1, r2, [r3]
    d040:	2900      	cmp	r1, #0
    d042:	d1f7      	bne.n	d034 <smp_pairing_rsp+0xc4>
    d044:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    d048:	4620      	mov	r0, r4
    d04a:	f7fe f94b 	bl	b2e4 <sc_send_public_key>
    d04e:	4605      	mov	r5, r0
    d050:	e796      	b.n	cf80 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d052:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d056:	f3bf 8f5b 	dmb	ish
    d05a:	e853 2f00 	ldrex	r2, [r3]
    d05e:	f042 0220 	orr.w	r2, r2, #32
    d062:	e843 2100 	strex	r1, r2, [r3]
    d066:	2900      	cmp	r1, #0
    d068:	d1f7      	bne.n	d05a <smp_pairing_rsp+0xea>
    d06a:	f3bf 8f5b 	dmb	ish
    d06e:	e7a7      	b.n	cfc0 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d070:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d074:	f3bf 8f5b 	dmb	ish
    d078:	e853 2f00 	ldrex	r2, [r3]
    d07c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    d080:	e843 2100 	strex	r1, r2, [r3]
    d084:	2900      	cmp	r1, #0
    d086:	d1f7      	bne.n	d078 <smp_pairing_rsp+0x108>
    d088:	f3bf 8f5b 	dmb	ish
    d08c:	e7a1      	b.n	cfd2 <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d08e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d092:	f3bf 8f5b 	dmb	ish
    d096:	e853 2f00 	ldrex	r2, [r3]
    d09a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d09e:	e843 2100 	strex	r1, r2, [r3]
    d0a2:	2900      	cmp	r1, #0
    d0a4:	d1f7      	bne.n	d096 <smp_pairing_rsp+0x126>
    d0a6:	f3bf 8f5b 	dmb	ish
    d0aa:	e79b      	b.n	cfe4 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    d0ac:	7829      	ldrb	r1, [r5, #0]
    d0ae:	4620      	mov	r0, r4
    d0b0:	f7ff ff00 	bl	ceb4 <legacy_pairing_rsp>
    d0b4:	4605      	mov	r5, r0
    d0b6:	e763      	b.n	cf80 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0b8:	f3bf 8f5b 	dmb	ish
    d0bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    d0c0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d0c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d0c8:	d0ac      	beq.n	d024 <smp_pairing_rsp+0xb4>
    d0ca:	4b14      	ldr	r3, [pc, #80]	; (d11c <smp_pairing_rsp+0x1ac>)
    d0cc:	681b      	ldr	r3, [r3, #0]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	d0a8      	beq.n	d024 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    d0d2:	691b      	ldr	r3, [r3, #16]
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d0a5      	beq.n	d024 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d0d8:	f3bf 8f5b 	dmb	ish
    d0dc:	e856 3f00 	ldrex	r3, [r6]
    d0e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d0e4:	e846 3200 	strex	r2, r3, [r6]
    d0e8:	2a00      	cmp	r2, #0
    d0ea:	d1f7      	bne.n	d0dc <smp_pairing_rsp+0x16c>
    d0ec:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    d0f0:	4b0a      	ldr	r3, [pc, #40]	; (d11c <smp_pairing_rsp+0x1ac>)
    d0f2:	681b      	ldr	r3, [r3, #0]
    d0f4:	691b      	ldr	r3, [r3, #16]
    d0f6:	6820      	ldr	r0, [r4, #0]
    d0f8:	4798      	blx	r3
			return 0;
    d0fa:	e741      	b.n	cf80 <smp_pairing_rsp+0x10>
    d0fc:	f3bf 8f5b 	dmb	ish
    d100:	e856 3f00 	ldrex	r3, [r6]
    d104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d108:	e846 3200 	strex	r2, r3, [r6]
    d10c:	2a00      	cmp	r2, #0
    d10e:	d1f7      	bne.n	d100 <smp_pairing_rsp+0x190>
    d110:	f3bf 8f5b 	dmb	ish
		return 0;
    d114:	2500      	movs	r5, #0
    d116:	e733      	b.n	cf80 <smp_pairing_rsp+0x10>
    d118:	20000ebc 	.word	0x20000ebc
    d11c:	20002f28 	.word	0x20002f28

0000d120 <legacy_pairing_req>:
{
    d120:	b538      	push	{r3, r4, r5, lr}
    d122:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    d124:	f7fd ffd4 	bl	b0d0 <legacy_get_pair_method>
    d128:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    d12c:	bb10      	cbnz	r0, d174 <legacy_pairing_req+0x54>
    d12e:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d130:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d134:	f3bf 8f5b 	dmb	ish
    d138:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d13c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    d140:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d144:	d116      	bne.n	d174 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d146:	4b18      	ldr	r3, [pc, #96]	; (d1a8 <legacy_pairing_req+0x88>)
    d148:	681b      	ldr	r3, [r3, #0]
    d14a:	b19b      	cbz	r3, d174 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    d14c:	691b      	ldr	r3, [r3, #16]
    d14e:	b18b      	cbz	r3, d174 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d150:	f3bf 8f5b 	dmb	ish
    d154:	e852 3f00 	ldrex	r3, [r2]
    d158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d15c:	e842 3100 	strex	r1, r3, [r2]
    d160:	2900      	cmp	r1, #0
    d162:	d1f7      	bne.n	d154 <legacy_pairing_req+0x34>
    d164:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d168:	4b0f      	ldr	r3, [pc, #60]	; (d1a8 <legacy_pairing_req+0x88>)
    d16a:	681b      	ldr	r3, [r3, #0]
    d16c:	691b      	ldr	r3, [r3, #16]
    d16e:	6828      	ldr	r0, [r5, #0]
    d170:	4798      	blx	r3
		return 0;
    d172:	e004      	b.n	d17e <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    d174:	4628      	mov	r0, r5
    d176:	f7fe f8d9 	bl	b32c <send_pairing_rsp>
	if (ret) {
    d17a:	4604      	mov	r4, r0
    d17c:	b108      	cbz	r0, d182 <legacy_pairing_req+0x62>
}
    d17e:	4620      	mov	r0, r4
    d180:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d182:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    d186:	f3bf 8f5b 	dmb	ish
    d18a:	e853 2f00 	ldrex	r2, [r3]
    d18e:	f042 0208 	orr.w	r2, r2, #8
    d192:	e843 2100 	strex	r1, r2, [r3]
    d196:	2900      	cmp	r1, #0
    d198:	d1f7      	bne.n	d18a <legacy_pairing_req+0x6a>
    d19a:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    d19e:	4628      	mov	r0, r5
    d1a0:	f7ff fe2a 	bl	cdf8 <legacy_request_tk>
    d1a4:	4604      	mov	r4, r0
    d1a6:	e7ea      	b.n	d17e <legacy_pairing_req+0x5e>
    d1a8:	20002f28 	.word	0x20002f28

0000d1ac <smp_pairing_req>:
{
    d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    d1ae:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d1b0:	78f3      	ldrb	r3, [r6, #3]
    d1b2:	3b07      	subs	r3, #7
    d1b4:	b2db      	uxtb	r3, r3
    d1b6:	2b09      	cmp	r3, #9
    d1b8:	d902      	bls.n	d1c0 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    d1ba:	2506      	movs	r5, #6
}
    d1bc:	4628      	mov	r0, r5
    d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1c0:	4604      	mov	r4, r0
	ret = smp_init(smp);
    d1c2:	f7fe f81c 	bl	b1fe <smp_init>
	if (ret) {
    d1c6:	b108      	cbz	r0, d1cc <smp_pairing_req+0x20>
		return ret;
    d1c8:	b2c5      	uxtb	r5, r0
    d1ca:	e7f7      	b.n	d1bc <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d1cc:	2301      	movs	r3, #1
    d1ce:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    d1d2:	2206      	movs	r2, #6
    d1d4:	4631      	mov	r1, r6
    d1d6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    d1da:	f7f3 f871 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    d1de:	2302      	movs	r3, #2
    d1e0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    d1e4:	78b0      	ldrb	r0, [r6, #2]
    d1e6:	f7fd ff97 	bl	b118 <get_auth>
    d1ea:	4605      	mov	r5, r0
    d1ec:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    d1f0:	f7fd ff14 	bl	b01c <get_io_capa>
    d1f4:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    d1f8:	2300      	movs	r3, #0
    d1fa:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d1fe:	2310      	movs	r3, #16
    d200:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    d204:	7933      	ldrb	r3, [r6, #4]
    d206:	f003 0307 	and.w	r3, r3, #7
    d20a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d20e:	7973      	ldrb	r3, [r6, #5]
    d210:	f003 0305 	and.w	r3, r3, #5
    d214:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d218:	f015 0f08 	tst.w	r5, #8
    d21c:	d003      	beq.n	d226 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    d21e:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d220:	f013 0f08 	tst.w	r3, #8
    d224:	d15b      	bne.n	d2de <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d226:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    d22a:	f013 0f20 	tst.w	r3, #32
    d22e:	d003      	beq.n	d238 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    d230:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d232:	f013 0f20 	tst.w	r3, #32
    d236:	d16d      	bne.n	d314 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    d238:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d23c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    d240:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    d244:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d248:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    d24c:	f013 0f01 	tst.w	r3, #1
    d250:	d003      	beq.n	d25a <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    d252:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d254:	f013 0f01 	tst.w	r3, #1
    d258:	d16b      	bne.n	d332 <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d25a:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    d25e:	f3bf 8f5b 	dmb	ish
    d262:	e857 3f00 	ldrex	r3, [r7]
    d266:	f043 0308 	orr.w	r3, r3, #8
    d26a:	e847 3200 	strex	r2, r3, [r7]
    d26e:	2a00      	cmp	r2, #0
    d270:	d1f7      	bne.n	d262 <smp_pairing_req+0xb6>
    d272:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d276:	f3bf 8f5b 	dmb	ish
    d27a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    d27e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d282:	f013 0f20 	tst.w	r3, #32
    d286:	d063      	beq.n	d350 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    d288:	7831      	ldrb	r1, [r6, #0]
    d28a:	4620      	mov	r0, r4
    d28c:	f7fd feee 	bl	b06c <get_pair_method>
    d290:	4605      	mov	r5, r0
    d292:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    d296:	2800      	cmp	r0, #0
    d298:	d160      	bne.n	d35c <smp_pairing_req+0x1b0>
    d29a:	f3bf 8f5b 	dmb	ish
    d29e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    d2a2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d2a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d2aa:	d157      	bne.n	d35c <smp_pairing_req+0x1b0>
    d2ac:	4b35      	ldr	r3, [pc, #212]	; (d384 <smp_pairing_req+0x1d8>)
    d2ae:	681b      	ldr	r3, [r3, #0]
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d053      	beq.n	d35c <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    d2b4:	691b      	ldr	r3, [r3, #16]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d050      	beq.n	d35c <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d2ba:	f3bf 8f5b 	dmb	ish
    d2be:	e857 3f00 	ldrex	r3, [r7]
    d2c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d2c6:	e847 3200 	strex	r2, r3, [r7]
    d2ca:	2a00      	cmp	r2, #0
    d2cc:	d1f7      	bne.n	d2be <smp_pairing_req+0x112>
    d2ce:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    d2d2:	4b2c      	ldr	r3, [pc, #176]	; (d384 <smp_pairing_req+0x1d8>)
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	691b      	ldr	r3, [r3, #16]
    d2d8:	6820      	ldr	r0, [r4, #0]
    d2da:	4798      	blx	r3
			return 0;
    d2dc:	e76e      	b.n	d1bc <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d2de:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d2e2:	f3bf 8f5b 	dmb	ish
    d2e6:	e853 2f00 	ldrex	r2, [r3]
    d2ea:	f042 0220 	orr.w	r2, r2, #32
    d2ee:	e843 2100 	strex	r1, r2, [r3]
    d2f2:	2900      	cmp	r1, #0
    d2f4:	d1f7      	bne.n	d2e6 <smp_pairing_req+0x13a>
    d2f6:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    d2fa:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    d2fe:	f003 0306 	and.w	r3, r3, #6
    d302:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    d306:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d30a:	f003 0304 	and.w	r3, r3, #4
    d30e:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    d312:	e788      	b.n	d226 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d314:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d318:	f3bf 8f5b 	dmb	ish
    d31c:	e853 2f00 	ldrex	r2, [r3]
    d320:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    d324:	e843 2100 	strex	r1, r2, [r3]
    d328:	2900      	cmp	r1, #0
    d32a:	d1f7      	bne.n	d31c <smp_pairing_req+0x170>
    d32c:	f3bf 8f5b 	dmb	ish
    d330:	e782      	b.n	d238 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d332:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d336:	f3bf 8f5b 	dmb	ish
    d33a:	e853 2f00 	ldrex	r2, [r3]
    d33e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d342:	e843 2100 	strex	r1, r2, [r3]
    d346:	2900      	cmp	r1, #0
    d348:	d1f7      	bne.n	d33a <smp_pairing_req+0x18e>
    d34a:	f3bf 8f5b 	dmb	ish
    d34e:	e784      	b.n	d25a <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    d350:	7831      	ldrb	r1, [r6, #0]
    d352:	4620      	mov	r0, r4
    d354:	f7ff fee4 	bl	d120 <legacy_pairing_req>
    d358:	4605      	mov	r5, r0
    d35a:	e72f      	b.n	d1bc <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d35c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d360:	f3bf 8f5b 	dmb	ish
    d364:	e853 2f00 	ldrex	r2, [r3]
    d368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    d36c:	e843 2100 	strex	r1, r2, [r3]
    d370:	2900      	cmp	r1, #0
    d372:	d1f7      	bne.n	d364 <smp_pairing_req+0x1b8>
    d374:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    d378:	4620      	mov	r0, r4
    d37a:	f7fd ffd7 	bl	b32c <send_pairing_rsp>
    d37e:	4605      	mov	r5, r0
    d380:	e71c      	b.n	d1bc <smp_pairing_req+0x10>
    d382:	bf00      	nop
    d384:	20002f28 	.word	0x20002f28

0000d388 <bt_smp_connected>:
{
    d388:	b510      	push	{r4, lr}
    d38a:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    d38c:	4904      	ldr	r1, [pc, #16]	; (d3a0 <bt_smp_connected+0x18>)
    d38e:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    d392:	f01d f953 	bl	2a63c <k_delayed_work_init>
	smp_reset(smp);
    d396:	4620      	mov	r0, r4
    d398:	f7fe fcbb 	bl	bd12 <smp_reset>
    d39c:	bd10      	pop	{r4, pc}
    d39e:	bf00      	nop
    d3a0:	0000bf63 	.word	0x0000bf63

0000d3a4 <bt_smp_send_security_req>:
{
    d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3a8:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    d3aa:	f7fd ff15 	bl	b1d8 <smp_chan_get>
	if (!smp) {
    d3ae:	b3e8      	cbz	r0, d42c <bt_smp_send_security_req+0x88>
    d3b0:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3b2:	f3bf 8f5b 	dmb	ish
    d3b6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d3ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d3be:	f013 0f10 	tst.w	r3, #16
    d3c2:	d136      	bne.n	d432 <bt_smp_send_security_req+0x8e>
    d3c4:	f3bf 8f5b 	dmb	ish
    d3c8:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    d3cc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    d3d0:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d3d4:	bb85      	cbnz	r5, d438 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    d3d6:	4630      	mov	r0, r6
    d3d8:	f7fd feb4 	bl	b144 <sec_level_reachable>
    d3dc:	b378      	cbz	r0, d43e <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    d3de:	2201      	movs	r2, #1
    d3e0:	210b      	movs	r1, #11
    d3e2:	4630      	mov	r0, r6
    d3e4:	f7fd fefd 	bl	b1e2 <smp_create_pdu>
	if (!req_buf) {
    d3e8:	4607      	mov	r7, r0
    d3ea:	b358      	cbz	r0, d444 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    d3ec:	2101      	movs	r1, #1
    d3ee:	3008      	adds	r0, #8
    d3f0:	f00e f854 	bl	1b49c <net_buf_simple_add>
    d3f4:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    d3f6:	2009      	movs	r0, #9
    d3f8:	f7fd fe8e 	bl	b118 <get_auth>
    d3fc:	f888 0000 	strb.w	r0, [r8]
    d400:	2300      	movs	r3, #0
    d402:	463a      	mov	r2, r7
    d404:	2106      	movs	r1, #6
    d406:	4630      	mov	r0, r6
    d408:	f7fb f9e1 	bl	87ce <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    d40c:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d40e:	f3bf 8f5b 	dmb	ish
    d412:	e854 3f00 	ldrex	r3, [r4]
    d416:	f043 0320 	orr.w	r3, r3, #32
    d41a:	e844 3200 	strex	r2, r3, [r4]
    d41e:	2a00      	cmp	r2, #0
    d420:	d1f7      	bne.n	d412 <bt_smp_send_security_req+0x6e>
    d422:	f3bf 8f5b 	dmb	ish
}
    d426:	4628      	mov	r0, r5
    d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    d42c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    d430:	e7f9      	b.n	d426 <bt_smp_send_security_req+0x82>
		return -EIO;
    d432:	f06f 0504 	mvn.w	r5, #4
    d436:	e7f6      	b.n	d426 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    d438:	f06f 050f 	mvn.w	r5, #15
    d43c:	e7f3      	b.n	d426 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    d43e:	f06f 0515 	mvn.w	r5, #21
    d442:	e7f0      	b.n	d426 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    d444:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d448:	e7ed      	b.n	d426 <bt_smp_send_security_req+0x82>

0000d44a <bt_smp_send_pairing_req>:
{
    d44a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d44e:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    d450:	f7fd fec2 	bl	b1d8 <smp_chan_get>
	if (!smp) {
    d454:	2800      	cmp	r0, #0
    d456:	d06b      	beq.n	d530 <bt_smp_send_pairing_req+0xe6>
    d458:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d45a:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d45e:	f3bf 8f5b 	dmb	ish
    d462:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d466:	f3bf 8f5b 	dmb	ish
    d46a:	f013 0f10 	tst.w	r3, #16
    d46e:	d162      	bne.n	d536 <bt_smp_send_pairing_req+0xec>
    d470:	f3bf 8f5b 	dmb	ish
    d474:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d478:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d47c:	f013 0f08 	tst.w	r3, #8
    d480:	d15c      	bne.n	d53c <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    d482:	4628      	mov	r0, r5
    d484:	f7fd fe5e 	bl	b144 <sec_level_reachable>
    d488:	2800      	cmp	r0, #0
    d48a:	d05a      	beq.n	d542 <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    d48c:	4620      	mov	r0, r4
    d48e:	f7fd feb6 	bl	b1fe <smp_init>
    d492:	4680      	mov	r8, r0
    d494:	2800      	cmp	r0, #0
    d496:	d157      	bne.n	d548 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    d498:	2206      	movs	r2, #6
    d49a:	2101      	movs	r1, #1
    d49c:	4628      	mov	r0, r5
    d49e:	f7fd fea0 	bl	b1e2 <smp_create_pdu>
	if (!req_buf) {
    d4a2:	4607      	mov	r7, r0
    d4a4:	2800      	cmp	r0, #0
    d4a6:	d052      	beq.n	d54e <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    d4a8:	2106      	movs	r1, #6
    d4aa:	3008      	adds	r0, #8
    d4ac:	f00d fff6 	bl	1b49c <net_buf_simple_add>
    d4b0:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    d4b2:	2009      	movs	r0, #9
    d4b4:	f7fd fe30 	bl	b118 <get_auth>
    d4b8:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    d4ba:	f7fd fdaf 	bl	b01c <get_io_capa>
    d4be:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    d4c0:	f04f 0900 	mov.w	r9, #0
    d4c4:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d4c8:	2310      	movs	r3, #16
    d4ca:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    d4cc:	2205      	movs	r2, #5
    d4ce:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    d4d0:	2307      	movs	r3, #7
    d4d2:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    d4d4:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    d4d8:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d4dc:	2301      	movs	r3, #1
    d4de:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    d4e2:	2206      	movs	r2, #6
    d4e4:	4629      	mov	r1, r5
    d4e6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    d4ea:	f7f2 fee9 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    d4ee:	464a      	mov	r2, r9
    d4f0:	4639      	mov	r1, r7
    d4f2:	4620      	mov	r0, r4
    d4f4:	f7fd fec8 	bl	b288 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    d4f8:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d4fa:	f3bf 8f5b 	dmb	ish
    d4fe:	e854 3f00 	ldrex	r3, [r4]
    d502:	f043 0304 	orr.w	r3, r3, #4
    d506:	e844 3200 	strex	r2, r3, [r4]
    d50a:	2a00      	cmp	r2, #0
    d50c:	d1f7      	bne.n	d4fe <bt_smp_send_pairing_req+0xb4>
    d50e:	f3bf 8f5b 	dmb	ish
    d512:	f3bf 8f5b 	dmb	ish
    d516:	e856 3f00 	ldrex	r3, [r6]
    d51a:	f043 0308 	orr.w	r3, r3, #8
    d51e:	e846 3200 	strex	r2, r3, [r6]
    d522:	2a00      	cmp	r2, #0
    d524:	d1f7      	bne.n	d516 <bt_smp_send_pairing_req+0xcc>
    d526:	f3bf 8f5b 	dmb	ish
}
    d52a:	4640      	mov	r0, r8
    d52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    d530:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    d534:	e7f9      	b.n	d52a <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    d536:	f06f 0804 	mvn.w	r8, #4
    d53a:	e7f6      	b.n	d52a <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    d53c:	f06f 080f 	mvn.w	r8, #15
    d540:	e7f3      	b.n	d52a <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    d542:	f06f 0815 	mvn.w	r8, #21
    d546:	e7f0      	b.n	d52a <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    d548:	f06f 0868 	mvn.w	r8, #104	; 0x68
    d54c:	e7ed      	b.n	d52a <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    d54e:	f06f 0868 	mvn.w	r8, #104	; 0x68
    d552:	e7ea      	b.n	d52a <bt_smp_send_pairing_req+0xe0>

0000d554 <smp_security_request>:
{
    d554:	b5f0      	push	{r4, r5, r6, r7, lr}
    d556:	b085      	sub	sp, #20
    d558:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    d55a:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    d55c:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    d55e:	4a35      	ldr	r2, [pc, #212]	; (d634 <smp_security_request+0xe0>)
    d560:	7812      	ldrb	r2, [r2, #0]
    d562:	b332      	cbz	r2, d5b2 <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    d564:	781d      	ldrb	r5, [r3, #0]
    d566:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    d56a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d56c:	b32b      	cbz	r3, d5ba <smp_security_request+0x66>
	if (!conn->le.keys) {
    d56e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d570:	2b00      	cmp	r3, #0
    d572:	d039      	beq.n	d5e8 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    d574:	f015 0f04 	tst.w	r5, #4
    d578:	d12e      	bne.n	d5d8 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    d57a:	f015 0f08 	tst.w	r5, #8
    d57e:	d004      	beq.n	d58a <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    d580:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d582:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    d584:	f013 0f20 	tst.w	r3, #32
    d588:	d02e      	beq.n	d5e8 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    d58a:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    d58c:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    d590:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    d592:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    d596:	9502      	str	r5, [sp, #8]
    d598:	9201      	str	r2, [sp, #4]
    d59a:	8b1b      	ldrh	r3, [r3, #24]
    d59c:	9300      	str	r3, [sp, #0]
    d59e:	4602      	mov	r2, r0
    d5a0:	460b      	mov	r3, r1
    d5a2:	4620      	mov	r0, r4
    d5a4:	f7f9 ffbc 	bl	7520 <bt_conn_le_start_encryption>
    d5a8:	2800      	cmp	r0, #0
    d5aa:	da24      	bge.n	d5f6 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    d5ac:	2008      	movs	r0, #8
}
    d5ae:	b005      	add	sp, #20
    d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    d5b2:	781d      	ldrb	r5, [r3, #0]
    d5b4:	f005 0507 	and.w	r5, r5, #7
    d5b8:	e7d7      	b.n	d56a <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    d5ba:	f104 0748 	add.w	r7, r4, #72	; 0x48
    d5be:	4639      	mov	r1, r7
    d5c0:	2020      	movs	r0, #32
    d5c2:	f000 f98f 	bl	d8e4 <bt_keys_find>
    d5c6:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    d5c8:	2800      	cmp	r0, #0
    d5ca:	d1d0      	bne.n	d56e <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    d5cc:	4639      	mov	r1, r7
    d5ce:	2004      	movs	r0, #4
    d5d0:	f000 f988 	bl	d8e4 <bt_keys_find>
    d5d4:	6720      	str	r0, [r4, #112]	; 0x70
    d5d6:	e7ca      	b.n	d56e <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d5d8:	f3bf 8f5b 	dmb	ish
    d5dc:	689b      	ldr	r3, [r3, #8]
    d5de:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    d5e2:	f013 0f01 	tst.w	r3, #1
    d5e6:	d1c8      	bne.n	d57a <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    d5e8:	4620      	mov	r0, r4
    d5ea:	f7ff ff2e 	bl	d44a <bt_smp_send_pairing_req>
    d5ee:	2800      	cmp	r0, #0
    d5f0:	da10      	bge.n	d614 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    d5f2:	2008      	movs	r0, #8
    d5f4:	e7db      	b.n	d5ae <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d5f6:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d5f8:	f3bf 8f5b 	dmb	ish
    d5fc:	e856 3f00 	ldrex	r3, [r6]
    d600:	f043 0302 	orr.w	r3, r3, #2
    d604:	e846 3200 	strex	r2, r3, [r6]
    d608:	2a00      	cmp	r2, #0
    d60a:	d1f7      	bne.n	d5fc <smp_security_request+0xa8>
    d60c:	f3bf 8f5b 	dmb	ish
	return 0;
    d610:	2000      	movs	r0, #0
    d612:	e7cc      	b.n	d5ae <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    d614:	36a0      	adds	r6, #160	; 0xa0
    d616:	f3bf 8f5b 	dmb	ish
    d61a:	e856 3f00 	ldrex	r3, [r6]
    d61e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d622:	e846 3200 	strex	r2, r3, [r6]
    d626:	2a00      	cmp	r2, #0
    d628:	d1f7      	bne.n	d61a <smp_security_request+0xc6>
    d62a:	f3bf 8f5b 	dmb	ish
	return 0;
    d62e:	2000      	movs	r0, #0
    d630:	e7bd      	b.n	d5ae <smp_security_request+0x5a>
    d632:	bf00      	nop
    d634:	20000f00 	.word	0x20000f00

0000d638 <bt_smp_sign_verify>:
{
    d638:	b530      	push	{r4, r5, lr}
    d63a:	b085      	sub	sp, #20
    d63c:	4605      	mov	r5, r0
    d63e:	460c      	mov	r4, r1
	return buf->data + buf->len;
    d640:	6889      	ldr	r1, [r1, #8]
    d642:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    d644:	3b0c      	subs	r3, #12
    d646:	220c      	movs	r2, #12
    d648:	4419      	add	r1, r3
    d64a:	a801      	add	r0, sp, #4
    d64c:	f7f2 fe38 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    d650:	f105 0148 	add.w	r1, r5, #72	; 0x48
    d654:	2010      	movs	r0, #16
    d656:	f000 f945 	bl	d8e4 <bt_keys_find>
	if (!keys) {
    d65a:	b320      	cbz	r0, d6a6 <bt_smp_sign_verify+0x6e>
    d65c:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    d65e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d660:	a904      	add	r1, sp, #16
    d662:	f841 3d10 	str.w	r3, [r1, #-16]!
    d666:	68a0      	ldr	r0, [r4, #8]
    d668:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    d66a:	3b0c      	subs	r3, #12
    d66c:	2204      	movs	r2, #4
    d66e:	4418      	add	r0, r3
    d670:	f7f2 fe26 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    d674:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    d676:	3a0c      	subs	r2, #12
    d678:	b292      	uxth	r2, r2
    d67a:	68a1      	ldr	r1, [r4, #8]
    d67c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    d680:	f7fd feac 	bl	b3dc <smp_sign_buf>
	if (err) {
    d684:	b990      	cbnz	r0, d6ac <bt_smp_sign_verify+0x74>
    d686:	68a1      	ldr	r1, [r4, #8]
    d688:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    d68a:	3b0c      	subs	r3, #12
    d68c:	220c      	movs	r2, #12
    d68e:	4419      	add	r1, r3
    d690:	a801      	add	r0, sp, #4
    d692:	f01d f941 	bl	2a918 <memcmp>
    d696:	4602      	mov	r2, r0
    d698:	b958      	cbnz	r0, d6b2 <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    d69a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    d69c:	3301      	adds	r3, #1
    d69e:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    d6a0:	4610      	mov	r0, r2
    d6a2:	b005      	add	sp, #20
    d6a4:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    d6a6:	f06f 0201 	mvn.w	r2, #1
    d6aa:	e7f9      	b.n	d6a0 <bt_smp_sign_verify+0x68>
		return -EIO;
    d6ac:	f06f 0204 	mvn.w	r2, #4
    d6b0:	e7f6      	b.n	d6a0 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    d6b2:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    d6b6:	e7f3      	b.n	d6a0 <bt_smp_sign_verify+0x68>

0000d6b8 <bt_smp_sign>:
{
    d6b8:	b530      	push	{r4, r5, lr}
    d6ba:	b083      	sub	sp, #12
    d6bc:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    d6be:	f100 0148 	add.w	r1, r0, #72	; 0x48
    d6c2:	2008      	movs	r0, #8
    d6c4:	f000 f90e 	bl	d8e4 <bt_keys_find>
	if (!keys) {
    d6c8:	b300      	cbz	r0, d70c <bt_smp_sign+0x54>
    d6ca:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    d6cc:	210c      	movs	r1, #12
    d6ce:	f104 0008 	add.w	r0, r4, #8
    d6d2:	f00d fee3 	bl	1b49c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    d6d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d6d8:	a902      	add	r1, sp, #8
    d6da:	f841 3d04 	str.w	r3, [r1, #-4]!
    d6de:	68a0      	ldr	r0, [r4, #8]
    d6e0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    d6e2:	3b0c      	subs	r3, #12
    d6e4:	2204      	movs	r2, #4
    d6e6:	4418      	add	r0, r3
    d6e8:	f7f2 fdea 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    d6ec:	89a2      	ldrh	r2, [r4, #12]
    d6ee:	3a0c      	subs	r2, #12
    d6f0:	b292      	uxth	r2, r2
    d6f2:	68a1      	ldr	r1, [r4, #8]
    d6f4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    d6f8:	f7fd fe70 	bl	b3dc <smp_sign_buf>
	if (err) {
    d6fc:	4602      	mov	r2, r0
    d6fe:	b940      	cbnz	r0, d712 <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    d700:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d702:	3301      	adds	r3, #1
    d704:	65ab      	str	r3, [r5, #88]	; 0x58
}
    d706:	4610      	mov	r0, r2
    d708:	b003      	add	sp, #12
    d70a:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    d70c:	f06f 0201 	mvn.w	r2, #1
    d710:	e7f9      	b.n	d706 <bt_smp_sign+0x4e>
		return -EIO;
    d712:	f06f 0204 	mvn.w	r2, #4
    d716:	e7f6      	b.n	d706 <bt_smp_sign+0x4e>

0000d718 <bt_smp_update_keys>:
{
    d718:	b570      	push	{r4, r5, r6, lr}
    d71a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    d71c:	f7fd fd5c 	bl	b1d8 <smp_chan_get>
	if (!smp) {
    d720:	2800      	cmp	r0, #0
    d722:	d03d      	beq.n	d7a0 <bt_smp_update_keys+0x88>
    d724:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d726:	f3bf 8f5b 	dmb	ish
    d72a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d72e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d732:	f013 0f08 	tst.w	r3, #8
    d736:	d033      	beq.n	d7a0 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    d738:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d73a:	b108      	cbz	r0, d740 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    d73c:	f000 f97f 	bl	da3e <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    d740:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d744:	f000 f8a4 	bl	d890 <bt_keys_get_addr>
    d748:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    d74a:	b348      	cbz	r0, d7a0 <bt_smp_update_keys+0x88>
    d74c:	f3bf 8f5b 	dmb	ish
    d750:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d754:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    d758:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d75c:	d121      	bne.n	d7a2 <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    d75e:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    d762:	3b01      	subs	r3, #1
    d764:	2b02      	cmp	r3, #2
    d766:	d82b      	bhi.n	d7c0 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d768:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d76a:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d76c:	f3bf 8f5b 	dmb	ish
    d770:	e853 2f00 	ldrex	r2, [r3]
    d774:	f042 0201 	orr.w	r2, r2, #1
    d778:	e843 2100 	strex	r1, r2, [r3]
    d77c:	2900      	cmp	r1, #0
    d77e:	d1f7      	bne.n	d770 <bt_smp_update_keys+0x58>
    d780:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    d784:	6f26      	ldr	r6, [r4, #112]	; 0x70
    d786:	4628      	mov	r0, r5
    d788:	f7fd fc8a 	bl	b0a0 <get_encryption_key_size>
    d78c:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d78e:	f3bf 8f5b 	dmb	ish
    d792:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d796:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d79a:	f013 0f20 	tst.w	r3, #32
    d79e:	d11e      	bne.n	d7de <bt_smp_update_keys+0xc6>
    d7a0:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    d7a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d7a4:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d7a6:	f3bf 8f5b 	dmb	ish
    d7aa:	e853 2f00 	ldrex	r2, [r3]
    d7ae:	f042 0202 	orr.w	r2, r2, #2
    d7b2:	e843 2100 	strex	r1, r2, [r3]
    d7b6:	2900      	cmp	r1, #0
    d7b8:	d1f7      	bne.n	d7aa <bt_smp_update_keys+0x92>
    d7ba:	f3bf 8f5b 	dmb	ish
    d7be:	e7ce      	b.n	d75e <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d7c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d7c2:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d7c4:	f3bf 8f5b 	dmb	ish
    d7c8:	e853 2f00 	ldrex	r2, [r3]
    d7cc:	f022 0201 	bic.w	r2, r2, #1
    d7d0:	e843 2100 	strex	r1, r2, [r3]
    d7d4:	2900      	cmp	r1, #0
    d7d6:	d1f7      	bne.n	d7c8 <bt_smp_update_keys+0xb0>
    d7d8:	f3bf 8f5b 	dmb	ish
    d7dc:	e7d2      	b.n	d784 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d7de:	f3bf 8f5b 	dmb	ish
    d7e2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d7e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d7ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d7ee:	d0d7      	beq.n	d7a0 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    d7f0:	2120      	movs	r1, #32
    d7f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d7f4:	f000 f90c 	bl	da10 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    d7f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d7fa:	2210      	movs	r2, #16
    d7fc:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    d800:	301a      	adds	r0, #26
    d802:	f7f2 fd5d 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    d806:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d808:	2000      	movs	r0, #0
    d80a:	2100      	movs	r1, #0
    d80c:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    d810:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d812:	2200      	movs	r2, #0
    d814:	831a      	strh	r2, [r3, #24]
    d816:	e7c3      	b.n	d7a0 <bt_smp_update_keys+0x88>

0000d818 <bt_smp_get_tk>:
{
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    d81c:	f7fd fcdc 	bl	b1d8 <smp_chan_get>
	if (!smp) {
    d820:	b300      	cbz	r0, d864 <bt_smp_get_tk+0x4c>
    d822:	4604      	mov	r4, r0
    d824:	f3bf 8f5b 	dmb	ish
    d828:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d82c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d830:	f013 0f08 	tst.w	r3, #8
    d834:	d101      	bne.n	d83a <bt_smp_get_tk+0x22>
		return false;
    d836:	2000      	movs	r0, #0
    d838:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    d83a:	f7fd fc31 	bl	b0a0 <get_encryption_key_size>
    d83e:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    d840:	4602      	mov	r2, r0
    d842:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    d846:	4628      	mov	r0, r5
    d848:	f7f2 fd3a 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    d84c:	2e0f      	cmp	r6, #15
    d84e:	d901      	bls.n	d854 <bt_smp_get_tk+0x3c>
	return true;
    d850:	2001      	movs	r0, #1
}
    d852:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    d854:	f1c6 0210 	rsb	r2, r6, #16
    d858:	2100      	movs	r1, #0
    d85a:	19a8      	adds	r0, r5, r6
    d85c:	f01d f8f0 	bl	2aa40 <memset>
	return true;
    d860:	2001      	movs	r0, #1
    d862:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    d864:	2000      	movs	r0, #0
    d866:	bd70      	pop	{r4, r5, r6, pc}

0000d868 <bt_smp_init>:

int bt_smp_init(void)
{
    d868:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    d86a:	f7fd fca9 	bl	b1c0 <le_sc_supported>
    d86e:	4b05      	ldr	r3, [pc, #20]	; (d884 <bt_smp_init+0x1c>)
    d870:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    d872:	4805      	ldr	r0, [pc, #20]	; (d888 <bt_smp_init+0x20>)
    d874:	f7fa fe04 	bl	8480 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    d878:	4804      	ldr	r0, [pc, #16]	; (d88c <bt_smp_init+0x24>)
    d87a:	f7f9 fc7f 	bl	717c <bt_pub_key_gen>

	return smp_self_test();
}
    d87e:	2000      	movs	r0, #0
    d880:	bd08      	pop	{r3, pc}
    d882:	bf00      	nop
    d884:	20000f00 	.word	0x20000f00
    d888:	2000c0cc 	.word	0x2000c0cc
    d88c:	2000c0ec 	.word	0x2000c0ec

0000d890 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    d890:	b5f0      	push	{r4, r5, r6, r7, lr}
    d892:	b083      	sub	sp, #12
    d894:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d896:	2500      	movs	r5, #0
    d898:	b11d      	cbz	r5, d8a2 <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    d89a:	2400      	movs	r4, #0
}
    d89c:	4620      	mov	r0, r4
    d89e:	b003      	add	sp, #12
    d8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    d8a2:	00eb      	lsls	r3, r5, #3
    d8a4:	442b      	add	r3, r5
    d8a6:	011a      	lsls	r2, r3, #4
    d8a8:	4c0d      	ldr	r4, [pc, #52]	; (d8e0 <bt_keys_get_addr+0x50>)
    d8aa:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    d8ac:	2207      	movs	r2, #7
    d8ae:	4631      	mov	r1, r6
    d8b0:	4620      	mov	r0, r4
    d8b2:	f01d f831 	bl	2a918 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    d8b6:	2800      	cmp	r0, #0
    d8b8:	d0f0      	beq.n	d89c <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    d8ba:	2300      	movs	r3, #0
    d8bc:	9300      	str	r3, [sp, #0]
    d8be:	f8cd 3003 	str.w	r3, [sp, #3]
    d8c2:	2207      	movs	r2, #7
    d8c4:	4669      	mov	r1, sp
    d8c6:	4620      	mov	r0, r4
    d8c8:	f01d f826 	bl	2a918 <memcmp>
    d8cc:	b108      	cbz	r0, d8d2 <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d8ce:	3501      	adds	r5, #1
    d8d0:	e7e2      	b.n	d898 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d8d2:	2207      	movs	r2, #7
    d8d4:	4631      	mov	r1, r6
    d8d6:	4620      	mov	r0, r4
    d8d8:	f7f2 fcf2 	bl	2c0 <memcpy>
			return keys;
    d8dc:	e7de      	b.n	d89c <bt_keys_get_addr+0xc>
    d8de:	bf00      	nop
    d8e0:	20000f08 	.word	0x20000f08

0000d8e4 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d8e4:	b570      	push	{r4, r5, r6, lr}
    d8e6:	4605      	mov	r5, r0
    d8e8:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d8ea:	2400      	movs	r4, #0
    d8ec:	b10c      	cbz	r4, d8f2 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d8ee:	2000      	movs	r0, #0
}
    d8f0:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d8f2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d8f6:	011a      	lsls	r2, r3, #4
    d8f8:	4b0b      	ldr	r3, [pc, #44]	; (d928 <bt_keys_find+0x44>)
    d8fa:	4413      	add	r3, r2
    d8fc:	899b      	ldrh	r3, [r3, #12]
    d8fe:	422b      	tst	r3, r5
    d900:	d101      	bne.n	d906 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d902:	3401      	adds	r4, #1
    d904:	e7f2      	b.n	d8ec <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d906:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d90a:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d90c:	2207      	movs	r2, #7
    d90e:	4631      	mov	r1, r6
    d910:	4805      	ldr	r0, [pc, #20]	; (d928 <bt_keys_find+0x44>)
    d912:	4418      	add	r0, r3
    d914:	f01d f800 	bl	2a918 <memcmp>
		if ((key_pool[i].keys & type) &&
    d918:	2800      	cmp	r0, #0
    d91a:	d1f2      	bne.n	d902 <bt_keys_find+0x1e>
			return &key_pool[i];
    d91c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d920:	0123      	lsls	r3, r4, #4
    d922:	4801      	ldr	r0, [pc, #4]	; (d928 <bt_keys_find+0x44>)
    d924:	4418      	add	r0, r3
    d926:	bd70      	pop	{r4, r5, r6, pc}
    d928:	20000f08 	.word	0x20000f08

0000d92c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d92e:	7803      	ldrb	r3, [r0, #0]
    d930:	2b01      	cmp	r3, #1
    d932:	d004      	beq.n	d93e <bt_keys_find_irk+0x12>
		return false;
    d934:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d936:	b153      	cbz	r3, d94e <bt_keys_find_irk+0x22>
    d938:	4605      	mov	r5, r0
    d93a:	2400      	movs	r4, #0
    d93c:	e00a      	b.n	d954 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d93e:	7983      	ldrb	r3, [r0, #6]
    d940:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d944:	2b40      	cmp	r3, #64	; 0x40
    d946:	bf14      	ite	ne
    d948:	2300      	movne	r3, #0
    d94a:	2301      	moveq	r3, #1
    d94c:	e7f3      	b.n	d936 <bt_keys_find_irk+0xa>
		return NULL;
    d94e:	2000      	movs	r0, #0
    d950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d952:	3401      	adds	r4, #1
    d954:	b9c4      	cbnz	r4, d988 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d956:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d95a:	011a      	lsls	r2, r3, #4
    d95c:	4b1e      	ldr	r3, [pc, #120]	; (d9d8 <bt_keys_find_irk+0xac>)
    d95e:	4413      	add	r3, r2
    d960:	899b      	ldrh	r3, [r3, #12]
    d962:	f013 0f02 	tst.w	r3, #2
    d966:	d0f4      	beq.n	d952 <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d968:	4611      	mov	r1, r2
    d96a:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d96c:	2206      	movs	r2, #6
    d96e:	4b1a      	ldr	r3, [pc, #104]	; (d9d8 <bt_keys_find_irk+0xac>)
    d970:	4419      	add	r1, r3
    d972:	1c68      	adds	r0, r5, #1
    d974:	f01c ffd0 	bl	2a918 <memcmp>
    d978:	2800      	cmp	r0, #0
    d97a:	d1ea      	bne.n	d952 <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d97c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d980:	0123      	lsls	r3, r4, #4
    d982:	4815      	ldr	r0, [pc, #84]	; (d9d8 <bt_keys_find_irk+0xac>)
    d984:	4418      	add	r0, r3
    d986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d988:	2400      	movs	r4, #0
    d98a:	e000      	b.n	d98e <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d98c:	3401      	adds	r4, #1
    d98e:	bb04      	cbnz	r4, d9d2 <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d990:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d994:	011a      	lsls	r2, r3, #4
    d996:	4b10      	ldr	r3, [pc, #64]	; (d9d8 <bt_keys_find_irk+0xac>)
    d998:	4413      	add	r3, r2
    d99a:	899b      	ldrh	r3, [r3, #12]
    d99c:	f013 0f02 	tst.w	r3, #2
    d9a0:	d0f4      	beq.n	d98c <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d9a2:	4610      	mov	r0, r2
    d9a4:	3030      	adds	r0, #48	; 0x30
    d9a6:	1c6e      	adds	r6, r5, #1
    d9a8:	4631      	mov	r1, r6
    d9aa:	4b0b      	ldr	r3, [pc, #44]	; (d9d8 <bt_keys_find_irk+0xac>)
    d9ac:	4418      	add	r0, r3
    d9ae:	f7f7 f986 	bl	4cbe <bt_rpa_irk_matches>
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d0ea      	beq.n	d98c <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d9b6:	4d08      	ldr	r5, [pc, #32]	; (d9d8 <bt_keys_find_irk+0xac>)
    d9b8:	00e7      	lsls	r7, r4, #3
    d9ba:	193a      	adds	r2, r7, r4
    d9bc:	0113      	lsls	r3, r2, #4
    d9be:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d9c0:	2206      	movs	r2, #6
    d9c2:	4631      	mov	r1, r6
    d9c4:	18e8      	adds	r0, r5, r3
    d9c6:	f7f2 fc7b 	bl	2c0 <memcpy>

			return &key_pool[i];
    d9ca:	443c      	add	r4, r7
    d9cc:	0120      	lsls	r0, r4, #4
    d9ce:	4428      	add	r0, r5
    d9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d9d2:	2000      	movs	r0, #0
}
    d9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9d6:	bf00      	nop
    d9d8:	20000f08 	.word	0x20000f08

0000d9dc <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d9dc:	b538      	push	{r3, r4, r5, lr}
    d9de:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d9e0:	2400      	movs	r4, #0
    d9e2:	b10c      	cbz	r4, d9e8 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d9e4:	2000      	movs	r0, #0
}
    d9e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d9e8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d9ec:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d9ee:	2207      	movs	r2, #7
    d9f0:	4629      	mov	r1, r5
    d9f2:	4806      	ldr	r0, [pc, #24]	; (da0c <bt_keys_find_addr+0x30>)
    d9f4:	4418      	add	r0, r3
    d9f6:	f01c ff8f 	bl	2a918 <memcmp>
    d9fa:	b108      	cbz	r0, da00 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d9fc:	3401      	adds	r4, #1
    d9fe:	e7f0      	b.n	d9e2 <bt_keys_find_addr+0x6>
			return &key_pool[i];
    da00:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    da04:	0123      	lsls	r3, r4, #4
    da06:	4801      	ldr	r0, [pc, #4]	; (da0c <bt_keys_find_addr+0x30>)
    da08:	4418      	add	r0, r3
    da0a:	bd38      	pop	{r3, r4, r5, pc}
    da0c:	20000f08 	.word	0x20000f08

0000da10 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    da10:	8983      	ldrh	r3, [r0, #12]
    da12:	4319      	orrs	r1, r3
    da14:	8181      	strh	r1, [r0, #12]
    da16:	4770      	bx	lr

0000da18 <bt_keys_get_type>:
{
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	4606      	mov	r6, r0
    da1c:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    da1e:	f7ff ff61 	bl	d8e4 <bt_keys_find>
	if (keys) {
    da22:	4604      	mov	r4, r0
    da24:	b108      	cbz	r0, da2a <bt_keys_get_type+0x12>
}
    da26:	4620      	mov	r0, r4
    da28:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    da2a:	4628      	mov	r0, r5
    da2c:	f7ff ff30 	bl	d890 <bt_keys_get_addr>
	if (!keys) {
    da30:	4604      	mov	r4, r0
    da32:	2800      	cmp	r0, #0
    da34:	d0f7      	beq.n	da26 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    da36:	4631      	mov	r1, r6
    da38:	f7ff ffea 	bl	da10 <bt_keys_add_type>
	return keys;
    da3c:	e7f3      	b.n	da26 <bt_keys_get_type+0xe>

0000da3e <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    da3e:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    da40:	2290      	movs	r2, #144	; 0x90
    da42:	2100      	movs	r1, #0
    da44:	f01c fffc 	bl	2aa40 <memset>
    da48:	bd08      	pop	{r3, pc}

0000da4a <status_cmd_handle>:
}
    da4a:	f06f 0015 	mvn.w	r0, #21
    da4e:	4770      	bx	lr

0000da50 <evt_create>:
{
    da50:	b538      	push	{r3, r4, r5, lr}
    da52:	460d      	mov	r5, r1
    da54:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    da56:	2102      	movs	r1, #2
    da58:	3008      	adds	r0, #8
    da5a:	f00d fd1f 	bl	1b49c <net_buf_simple_add>
	hdr->evt = evt;
    da5e:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    da60:	7044      	strb	r4, [r0, #1]
    da62:	bd38      	pop	{r3, r4, r5, pc}

0000da64 <cmd_status>:
{
    da64:	b538      	push	{r3, r4, r5, lr}
    da66:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    da68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da6c:	f7f9 fb5e 	bl	712c <bt_buf_get_cmd_complete>
    da70:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    da72:	2204      	movs	r2, #4
    da74:	210f      	movs	r1, #15
    da76:	f7ff ffeb 	bl	da50 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    da7a:	2104      	movs	r1, #4
    da7c:	f104 0008 	add.w	r0, r4, #8
    da80:	f00d fd0c 	bl	1b49c <net_buf_simple_add>
	cs->status = status;
    da84:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    da86:	2301      	movs	r3, #1
    da88:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    da8a:	4b02      	ldr	r3, [pc, #8]	; (da94 <cmd_status+0x30>)
    da8c:	881b      	ldrh	r3, [r3, #0]
    da8e:	8043      	strh	r3, [r0, #2]
}
    da90:	4620      	mov	r0, r4
    da92:	bd38      	pop	{r3, r4, r5, pc}
    da94:	20000f98 	.word	0x20000f98

0000da98 <disconnect>:
{
    da98:	b510      	push	{r4, lr}
    da9a:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    da9c:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    da9e:	7899      	ldrb	r1, [r3, #2]
    daa0:	8818      	ldrh	r0, [r3, #0]
    daa2:	f00b f964 	bl	18d6e <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    daa6:	b100      	cbz	r0, daaa <disconnect+0x12>
    daa8:	200c      	movs	r0, #12
    daaa:	f7ff ffdb 	bl	da64 <cmd_status>
    daae:	6020      	str	r0, [r4, #0]
    dab0:	bd10      	pop	{r4, pc}
	...

0000dab4 <cmd_complete>:
{
    dab4:	b538      	push	{r3, r4, r5, lr}
    dab6:	4604      	mov	r4, r0
    dab8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    daba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dabe:	f7f9 fb35 	bl	712c <bt_buf_get_cmd_complete>
    dac2:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    dac4:	1cea      	adds	r2, r5, #3
    dac6:	b2d2      	uxtb	r2, r2
    dac8:	210e      	movs	r1, #14
    daca:	f7ff ffc1 	bl	da50 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    dace:	6820      	ldr	r0, [r4, #0]
    dad0:	2103      	movs	r1, #3
    dad2:	3008      	adds	r0, #8
    dad4:	f00d fce2 	bl	1b49c <net_buf_simple_add>
	cc->ncmd = 1;
    dad8:	2301      	movs	r3, #1
    dada:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    dadc:	4b04      	ldr	r3, [pc, #16]	; (daf0 <cmd_complete+0x3c>)
    dade:	881b      	ldrh	r3, [r3, #0]
    dae0:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    dae4:	6820      	ldr	r0, [r4, #0]
    dae6:	4629      	mov	r1, r5
    dae8:	3008      	adds	r0, #8
    daea:	f00d fcd7 	bl	1b49c <net_buf_simple_add>
}
    daee:	bd38      	pop	{r3, r4, r5, pc}
    daf0:	20000f98 	.word	0x20000f98

0000daf4 <set_event_mask_page_2>:
{
    daf4:	b570      	push	{r4, r5, r6, lr}
    daf6:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    daf8:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    dafa:	79da      	ldrb	r2, [r3, #7]
    dafc:	7999      	ldrb	r1, [r3, #6]
    dafe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    db02:	7958      	ldrb	r0, [r3, #5]
    db04:	791a      	ldrb	r2, [r3, #4]
    db06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    db0a:	2400      	movs	r4, #0
    db0c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    db10:	78d9      	ldrb	r1, [r3, #3]
    db12:	789a      	ldrb	r2, [r3, #2]
    db14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    db18:	7859      	ldrb	r1, [r3, #1]
    db1a:	781b      	ldrb	r3, [r3, #0]
    db1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    db20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    db24:	ea44 0003 	orr.w	r0, r4, r3
    db28:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    db2a:	4b04      	ldr	r3, [pc, #16]	; (db3c <set_event_mask_page_2+0x48>)
    db2c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    db30:	2101      	movs	r1, #1
    db32:	4630      	mov	r0, r6
    db34:	f7ff ffbe 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    db38:	7004      	strb	r4, [r0, #0]
    db3a:	bd70      	pop	{r4, r5, r6, pc}
    db3c:	20001028 	.word	0x20001028

0000db40 <read_local_version_info>:
{
    db40:	b508      	push	{r3, lr}
    db42:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db44:	2109      	movs	r1, #9
    db46:	f7ff ffb5 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    db4a:	2300      	movs	r3, #0
    db4c:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    db4e:	2209      	movs	r2, #9
    db50:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    db52:	7083      	strb	r3, [r0, #2]
    db54:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    db56:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    db58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    db5c:	7143      	strb	r3, [r0, #5]
    db5e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    db60:	71c3      	strb	r3, [r0, #7]
    db62:	7203      	strb	r3, [r0, #8]
    db64:	bd08      	pop	{r3, pc}

0000db66 <le_read_buffer_size>:
{
    db66:	b508      	push	{r3, lr}
    db68:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db6a:	2104      	movs	r1, #4
    db6c:	f7ff ffa2 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    db70:	2300      	movs	r3, #0
    db72:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    db74:	221b      	movs	r2, #27
    db76:	7042      	strb	r2, [r0, #1]
    db78:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    db7a:	2302      	movs	r3, #2
    db7c:	70c3      	strb	r3, [r0, #3]
    db7e:	bd08      	pop	{r3, pc}

0000db80 <le_read_supp_states>:
{
    db80:	b508      	push	{r3, lr}
    db82:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db84:	2109      	movs	r1, #9
    db86:	f7ff ff95 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    db8a:	2200      	movs	r2, #0
    db8c:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    db8e:	23ff      	movs	r3, #255	; 0xff
    db90:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    db92:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    db94:	213f      	movs	r1, #63	; 0x3f
    db96:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    db98:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    db9a:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    db9c:	2303      	movs	r3, #3
    db9e:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    dba0:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    dba2:	7202      	strb	r2, [r0, #8]
    dba4:	bd08      	pop	{r3, pc}

0000dba6 <le_read_adv_chan_tx_power>:
{
    dba6:	b508      	push	{r3, lr}
    dba8:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dbaa:	2102      	movs	r1, #2
    dbac:	f7ff ff82 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    dbb0:	2300      	movs	r3, #0
    dbb2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    dbb4:	7043      	strb	r3, [r0, #1]
    dbb6:	bd08      	pop	{r3, pc}

0000dbb8 <vs_read_version_info>:
{
    dbb8:	b508      	push	{r3, lr}
    dbba:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dbbc:	210d      	movs	r1, #13
    dbbe:	f7ff ff79 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    dbc2:	2300      	movs	r3, #0
    dbc4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    dbc6:	2202      	movs	r2, #2
    dbc8:	7042      	strb	r2, [r0, #1]
    dbca:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    dbcc:	70c2      	strb	r2, [r0, #3]
    dbce:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    dbd0:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    dbd2:	2201      	movs	r2, #1
    dbd4:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dbd6:	2209      	movs	r2, #9
    dbd8:	71c2      	strb	r2, [r0, #7]
    dbda:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    dbdc:	2263      	movs	r2, #99	; 0x63
    dbde:	7242      	strb	r2, [r0, #9]
    dbe0:	7283      	strb	r3, [r0, #10]
    dbe2:	72c3      	strb	r3, [r0, #11]
    dbe4:	7303      	strb	r3, [r0, #12]
    dbe6:	bd08      	pop	{r3, pc}

0000dbe8 <meta_evt>:
{
    dbe8:	b570      	push	{r4, r5, r6, lr}
    dbea:	4604      	mov	r4, r0
    dbec:	460e      	mov	r6, r1
    dbee:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    dbf0:	3201      	adds	r2, #1
    dbf2:	b2d2      	uxtb	r2, r2
    dbf4:	213e      	movs	r1, #62	; 0x3e
    dbf6:	f7ff ff2b 	bl	da50 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    dbfa:	3408      	adds	r4, #8
    dbfc:	2101      	movs	r1, #1
    dbfe:	4620      	mov	r0, r4
    dc00:	f00d fc4c 	bl	1b49c <net_buf_simple_add>
	me->subevent = subevt;
    dc04:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    dc06:	4629      	mov	r1, r5
    dc08:	4620      	mov	r0, r4
    dc0a:	f00d fc47 	bl	1b49c <net_buf_simple_add>
}
    dc0e:	bd70      	pop	{r4, r5, r6, pc}

0000dc10 <le_chan_sel_algo>:
{
    dc10:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dc12:	4b0f      	ldr	r3, [pc, #60]	; (dc50 <le_chan_sel_algo+0x40>)
    dc14:	e9d3 4500 	ldrd	r4, r5, [r3]
    dc18:	2400      	movs	r4, #0
    dc1a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    dc1e:	ea54 0305 	orrs.w	r3, r4, r5
    dc22:	d008      	beq.n	dc36 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    dc24:	4b0b      	ldr	r3, [pc, #44]	; (dc54 <le_chan_sel_algo+0x44>)
    dc26:	e9d3 4500 	ldrd	r4, r5, [r3]
    dc2a:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    dc2e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dc30:	ea54 0305 	orrs.w	r3, r4, r5
    dc34:	d100      	bne.n	dc38 <le_chan_sel_algo+0x28>
    dc36:	bd38      	pop	{r3, r4, r5, pc}
    dc38:	4613      	mov	r3, r2
    dc3a:	460d      	mov	r5, r1
    dc3c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    dc3e:	2203      	movs	r2, #3
    dc40:	2114      	movs	r1, #20
    dc42:	4618      	mov	r0, r3
    dc44:	f7ff ffd0 	bl	dbe8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dc48:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    dc4a:	78e3      	ldrb	r3, [r4, #3]
    dc4c:	7083      	strb	r3, [r0, #2]
    dc4e:	e7f2      	b.n	dc36 <le_chan_sel_algo+0x26>
    dc50:	2000c0f8 	.word	0x2000c0f8
    dc54:	2000c100 	.word	0x2000c100

0000dc58 <disconn_complete>:
{
    dc58:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    dc5a:	4b11      	ldr	r3, [pc, #68]	; (dca0 <disconn_complete+0x48>)
    dc5c:	e9d3 4500 	ldrd	r4, r5, [r3]
    dc60:	f004 0410 	and.w	r4, r4, #16
    dc64:	2500      	movs	r5, #0
    dc66:	ea54 0305 	orrs.w	r3, r4, r5
    dc6a:	d100      	bne.n	dc6e <disconn_complete+0x16>
    dc6c:	bd70      	pop	{r4, r5, r6, pc}
    dc6e:	4614      	mov	r4, r2
    dc70:	460e      	mov	r6, r1
    dc72:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    dc74:	2204      	movs	r2, #4
    dc76:	2105      	movs	r1, #5
    dc78:	4620      	mov	r0, r4
    dc7a:	f7ff fee9 	bl	da50 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    dc7e:	2104      	movs	r1, #4
    dc80:	f104 0008 	add.w	r0, r4, #8
    dc84:	f00d fc0a 	bl	1b49c <net_buf_simple_add>
	ep->status = 0x00;
    dc88:	2300      	movs	r3, #0
    dc8a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    dc8c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    dc90:	782b      	ldrb	r3, [r5, #0]
    dc92:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    dc94:	4a03      	ldr	r2, [pc, #12]	; (dca4 <disconn_complete+0x4c>)
    dc96:	6813      	ldr	r3, [r2, #0]
    dc98:	3b01      	subs	r3, #1
    dc9a:	6013      	str	r3, [r2, #0]
    dc9c:	e7e6      	b.n	dc6c <disconn_complete+0x14>
    dc9e:	bf00      	nop
    dca0:	2000c0f8 	.word	0x2000c0f8
    dca4:	20000f9c 	.word	0x20000f9c

0000dca8 <enc_refresh_complete>:
{
    dca8:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    dcaa:	4b0d      	ldr	r3, [pc, #52]	; (dce0 <enc_refresh_complete+0x38>)
    dcac:	e9d3 4500 	ldrd	r4, r5, [r3]
    dcb0:	2400      	movs	r4, #0
    dcb2:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    dcb6:	ea54 0305 	orrs.w	r3, r4, r5
    dcba:	d100      	bne.n	dcbe <enc_refresh_complete+0x16>
    dcbc:	bd38      	pop	{r3, r4, r5, pc}
    dcbe:	4614      	mov	r4, r2
    dcc0:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    dcc2:	2203      	movs	r2, #3
    dcc4:	2130      	movs	r1, #48	; 0x30
    dcc6:	4620      	mov	r0, r4
    dcc8:	f7ff fec2 	bl	da50 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    dccc:	2103      	movs	r1, #3
    dcce:	f104 0008 	add.w	r0, r4, #8
    dcd2:	f00d fbe3 	bl	1b49c <net_buf_simple_add>
	ep->status = 0x00;
    dcd6:	2300      	movs	r3, #0
    dcd8:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    dcda:	f8a0 5001 	strh.w	r5, [r0, #1]
    dcde:	e7ed      	b.n	dcbc <enc_refresh_complete+0x14>
    dce0:	2000c0f8 	.word	0x2000c0f8

0000dce4 <auth_payload_timeout_exp>:
{
    dce4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    dce6:	4b0c      	ldr	r3, [pc, #48]	; (dd18 <auth_payload_timeout_exp+0x34>)
    dce8:	e9d3 4500 	ldrd	r4, r5, [r3]
    dcec:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    dcf0:	2500      	movs	r5, #0
    dcf2:	ea54 0305 	orrs.w	r3, r4, r5
    dcf6:	d100      	bne.n	dcfa <auth_payload_timeout_exp+0x16>
    dcf8:	bd38      	pop	{r3, r4, r5, pc}
    dcfa:	4614      	mov	r4, r2
    dcfc:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    dcfe:	2202      	movs	r2, #2
    dd00:	2157      	movs	r1, #87	; 0x57
    dd02:	4620      	mov	r0, r4
    dd04:	f7ff fea4 	bl	da50 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    dd08:	2102      	movs	r1, #2
    dd0a:	f104 0008 	add.w	r0, r4, #8
    dd0e:	f00d fbc5 	bl	1b49c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    dd12:	8005      	strh	r5, [r0, #0]
    dd14:	e7f0      	b.n	dcf8 <auth_payload_timeout_exp+0x14>
    dd16:	bf00      	nop
    dd18:	20001028 	.word	0x20001028

0000dd1c <remote_version_info>:
{
    dd1c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    dd1e:	4b11      	ldr	r3, [pc, #68]	; (dd64 <remote_version_info+0x48>)
    dd20:	e9d3 4500 	ldrd	r4, r5, [r3]
    dd24:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    dd28:	2500      	movs	r5, #0
    dd2a:	ea54 0305 	orrs.w	r3, r4, r5
    dd2e:	d100      	bne.n	dd32 <remote_version_info+0x16>
    dd30:	bd70      	pop	{r4, r5, r6, pc}
    dd32:	4615      	mov	r5, r2
    dd34:	460e      	mov	r6, r1
    dd36:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    dd38:	2208      	movs	r2, #8
    dd3a:	210c      	movs	r1, #12
    dd3c:	4628      	mov	r0, r5
    dd3e:	f7ff fe87 	bl	da50 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    dd42:	2108      	movs	r1, #8
    dd44:	1868      	adds	r0, r5, r1
    dd46:	f00d fba9 	bl	1b49c <net_buf_simple_add>
	ep->status = 0x00;
    dd4a:	2300      	movs	r3, #0
    dd4c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    dd4e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    dd52:	7923      	ldrb	r3, [r4, #4]
    dd54:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    dd56:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    dd5a:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    dd5c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    dd60:	80c3      	strh	r3, [r0, #6]
    dd62:	e7e5      	b.n	dd30 <remote_version_info+0x14>
    dd64:	2000c0f8 	.word	0x2000c0f8

0000dd68 <encrypt_change>:
{
    dd68:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    dd6a:	4b0f      	ldr	r3, [pc, #60]	; (dda8 <encrypt_change+0x40>)
    dd6c:	e9d3 4500 	ldrd	r4, r5, [r3]
    dd70:	f004 0480 	and.w	r4, r4, #128	; 0x80
    dd74:	2500      	movs	r5, #0
    dd76:	ea54 0305 	orrs.w	r3, r4, r5
    dd7a:	d100      	bne.n	dd7e <encrypt_change+0x16>
    dd7c:	bd70      	pop	{r4, r5, r6, pc}
    dd7e:	4615      	mov	r5, r2
    dd80:	460e      	mov	r6, r1
    dd82:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    dd84:	2204      	movs	r2, #4
    dd86:	2108      	movs	r1, #8
    dd88:	4628      	mov	r0, r5
    dd8a:	f7ff fe61 	bl	da50 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    dd8e:	2104      	movs	r1, #4
    dd90:	f105 0008 	add.w	r0, r5, #8
    dd94:	f00d fb82 	bl	1b49c <net_buf_simple_add>
	ep->status = err;
    dd98:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    dd9a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    dd9e:	fab4 f384 	clz	r3, r4
    dda2:	095b      	lsrs	r3, r3, #5
    dda4:	70c3      	strb	r3, [r0, #3]
    dda6:	e7e9      	b.n	dd7c <encrypt_change+0x14>
    dda8:	2000c0f8 	.word	0x2000c0f8

0000ddac <read_remote_ver_info>:
{
    ddac:	b510      	push	{r4, lr}
    ddae:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    ddb0:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    ddb2:	8818      	ldrh	r0, [r3, #0]
    ddb4:	f00a ffc5 	bl	18d42 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    ddb8:	b100      	cbz	r0, ddbc <read_remote_ver_info+0x10>
    ddba:	200c      	movs	r0, #12
    ddbc:	f7ff fe52 	bl	da64 <cmd_status>
    ddc0:	6020      	str	r0, [r4, #0]
    ddc2:	bd10      	pop	{r4, pc}

0000ddc4 <link_control_cmd_handle>:
{
    ddc4:	b508      	push	{r3, lr}
    ddc6:	460b      	mov	r3, r1
	switch (ocf) {
    ddc8:	2806      	cmp	r0, #6
    ddca:	d004      	beq.n	ddd6 <link_control_cmd_handle+0x12>
    ddcc:	281d      	cmp	r0, #29
    ddce:	d008      	beq.n	dde2 <link_control_cmd_handle+0x1e>
		return -EINVAL;
    ddd0:	f06f 0015 	mvn.w	r0, #21
}
    ddd4:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    ddd6:	4611      	mov	r1, r2
    ddd8:	4618      	mov	r0, r3
    ddda:	f7ff fe5d 	bl	da98 <disconnect>
	return 0;
    ddde:	2000      	movs	r0, #0
		break;
    dde0:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    dde2:	4611      	mov	r1, r2
    dde4:	4618      	mov	r0, r3
    dde6:	f7ff ffe1 	bl	ddac <read_remote_ver_info>
	return 0;
    ddea:	2000      	movs	r0, #0
		break;
    ddec:	bd08      	pop	{r3, pc}
	...

0000ddf0 <reset>:
{
    ddf0:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    ddf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ddf6:	4b0f      	ldr	r3, [pc, #60]	; (de34 <reset+0x44>)
    ddf8:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    ddfa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ddfe:	f641 75ff 	movw	r5, #8191	; 0x1fff
    de02:	4b0d      	ldr	r3, [pc, #52]	; (de38 <reset+0x48>)
    de04:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    de08:	2400      	movs	r4, #0
    de0a:	2500      	movs	r5, #0
    de0c:	4b0b      	ldr	r3, [pc, #44]	; (de3c <reset+0x4c>)
    de0e:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    de12:	241f      	movs	r4, #31
    de14:	2500      	movs	r5, #0
    de16:	4b0a      	ldr	r3, [pc, #40]	; (de40 <reset+0x50>)
    de18:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    de1c:	b140      	cbz	r0, de30 <reset+0x40>
    de1e:	460c      	mov	r4, r1
		ll_reset();
    de20:	f00a fc8a 	bl	18738 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    de24:	2101      	movs	r1, #1
    de26:	4620      	mov	r0, r4
    de28:	f7ff fe44 	bl	dab4 <cmd_complete>
		ccst->status = 0x00;
    de2c:	2300      	movs	r3, #0
    de2e:	7003      	strb	r3, [r0, #0]
    de30:	bd38      	pop	{r3, r4, r5, pc}
    de32:	bf00      	nop
    de34:	20000fa0 	.word	0x20000fa0
    de38:	2000c0f8 	.word	0x2000c0f8
    de3c:	20001028 	.word	0x20001028
    de40:	2000c100 	.word	0x2000c100

0000de44 <read_tx_power_level>:
{
    de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de46:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    de48:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    de4a:	881d      	ldrh	r5, [r3, #0]
    de4c:	b2ae      	uxth	r6, r5
	type = cmd->type;
    de4e:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    de50:	2104      	movs	r1, #4
    de52:	4610      	mov	r0, r2
    de54:	f7ff fe2e 	bl	dab4 <cmd_complete>
    de58:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    de5a:	1cc2      	adds	r2, r0, #3
    de5c:	4639      	mov	r1, r7
    de5e:	4630      	mov	r0, r6
    de60:	f00a ff9b 	bl	18d9a <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    de64:	b120      	cbz	r0, de70 <read_tx_power_level+0x2c>
    de66:	2302      	movs	r3, #2
    de68:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de6a:	f8a4 5001 	strh.w	r5, [r4, #1]
    de6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    de70:	2300      	movs	r3, #0
    de72:	e7f9      	b.n	de68 <read_tx_power_level+0x24>

0000de74 <read_auth_payload_timeout>:
{
    de74:	b570      	push	{r4, r5, r6, lr}
    de76:	b082      	sub	sp, #8
    de78:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    de7a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    de7c:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    de7e:	f10d 0106 	add.w	r1, sp, #6
    de82:	b2a0      	uxth	r0, r4
    de84:	f00a ff98 	bl	18db8 <ll_apto_get>
    de88:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    de8a:	2105      	movs	r1, #5
    de8c:	4630      	mov	r0, r6
    de8e:	f7ff fe11 	bl	dab4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de92:	b14d      	cbz	r5, dea8 <read_auth_payload_timeout+0x34>
    de94:	230c      	movs	r3, #12
    de96:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de98:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    de9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    dea0:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    dea4:	b002      	add	sp, #8
    dea6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dea8:	2300      	movs	r3, #0
    deaa:	e7f4      	b.n	de96 <read_auth_payload_timeout+0x22>

0000deac <write_auth_payload_timeout>:
{
    deac:	b570      	push	{r4, r5, r6, lr}
    deae:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    deb0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    deb2:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    deb4:	8859      	ldrh	r1, [r3, #2]
    deb6:	b2a0      	uxth	r0, r4
    deb8:	f00a ff9a 	bl	18df0 <ll_apto_set>
    debc:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    debe:	2103      	movs	r1, #3
    dec0:	4630      	mov	r0, r6
    dec2:	f7ff fdf7 	bl	dab4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dec6:	b125      	cbz	r5, ded2 <write_auth_payload_timeout+0x26>
    dec8:	230c      	movs	r3, #12
    deca:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    decc:	f8a0 4001 	strh.w	r4, [r0, #1]
    ded0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ded2:	2300      	movs	r3, #0
    ded4:	e7f9      	b.n	deca <write_auth_payload_timeout+0x1e>

0000ded6 <ctrl_bb_cmd_handle>:
{
    ded6:	b508      	push	{r3, lr}
    ded8:	460b      	mov	r3, r1
	switch (ocf) {
    deda:	282d      	cmp	r0, #45	; 0x2d
    dedc:	d01f      	beq.n	df1e <ctrl_bb_cmd_handle+0x48>
    dede:	d908      	bls.n	def2 <ctrl_bb_cmd_handle+0x1c>
    dee0:	287b      	cmp	r0, #123	; 0x7b
    dee2:	d022      	beq.n	df2a <ctrl_bb_cmd_handle+0x54>
    dee4:	287c      	cmp	r0, #124	; 0x7c
    dee6:	d026      	beq.n	df36 <ctrl_bb_cmd_handle+0x60>
    dee8:	2863      	cmp	r0, #99	; 0x63
    deea:	d012      	beq.n	df12 <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    deec:	f06f 0015 	mvn.w	r0, #21
}
    def0:	bd08      	pop	{r3, pc}
	switch (ocf) {
    def2:	2801      	cmp	r0, #1
    def4:	d007      	beq.n	df06 <ctrl_bb_cmd_handle+0x30>
    def6:	2803      	cmp	r0, #3
    def8:	d1f8      	bne.n	deec <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    defa:	4611      	mov	r1, r2
    defc:	4618      	mov	r0, r3
    defe:	f7ff ff77 	bl	ddf0 <reset>
	return 0;
    df02:	2000      	movs	r0, #0
		break;
    df04:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    df06:	4611      	mov	r1, r2
    df08:	4618      	mov	r0, r3
    df0a:	f7f7 fd13 	bl	5934 <set_event_mask>
	return 0;
    df0e:	2000      	movs	r0, #0
		break;
    df10:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    df12:	4611      	mov	r1, r2
    df14:	4618      	mov	r0, r3
    df16:	f7ff fded 	bl	daf4 <set_event_mask_page_2>
	return 0;
    df1a:	2000      	movs	r0, #0
		break;
    df1c:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    df1e:	4611      	mov	r1, r2
    df20:	4618      	mov	r0, r3
    df22:	f7ff ff8f 	bl	de44 <read_tx_power_level>
	return 0;
    df26:	2000      	movs	r0, #0
		break;
    df28:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    df2a:	4611      	mov	r1, r2
    df2c:	4618      	mov	r0, r3
    df2e:	f7ff ffa1 	bl	de74 <read_auth_payload_timeout>
	return 0;
    df32:	2000      	movs	r0, #0
		break;
    df34:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    df36:	4611      	mov	r1, r2
    df38:	4618      	mov	r0, r3
    df3a:	f7ff ffb7 	bl	deac <write_auth_payload_timeout>
	return 0;
    df3e:	2000      	movs	r0, #0
		break;
    df40:	bd08      	pop	{r3, pc}

0000df42 <read_supported_commands>:
{
    df42:	b510      	push	{r4, lr}
    df44:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    df46:	2141      	movs	r1, #65	; 0x41
    df48:	f7ff fdb4 	bl	dab4 <cmd_complete>
    df4c:	4604      	mov	r4, r0
	rp->status = 0x00;
    df4e:	2100      	movs	r1, #0
    df50:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    df54:	2240      	movs	r2, #64	; 0x40
    df56:	f01c fd73 	bl	2aa40 <memset>
	rp->commands[2] |= BIT(7);
    df5a:	78e3      	ldrb	r3, [r4, #3]
    df5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    df60:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    df62:	79a3      	ldrb	r3, [r4, #6]
    df64:	f063 033f 	orn	r3, r3, #63	; 0x3f
    df68:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    df6a:	7ae3      	ldrb	r3, [r4, #11]
    df6c:	f043 0304 	orr.w	r3, r3, #4
    df70:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    df72:	7be3      	ldrb	r3, [r4, #15]
    df74:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    df78:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    df7a:	7c23      	ldrb	r3, [r4, #16]
    df7c:	f043 0302 	orr.w	r3, r3, #2
    df80:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    df82:	7de3      	ldrb	r3, [r4, #23]
    df84:	f043 0304 	orr.w	r3, r3, #4
    df88:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    df8a:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    df8c:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    df8e:	f062 0208 	orn	r2, r2, #8
    df92:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    df94:	22ff      	movs	r2, #255	; 0xff
    df96:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    df98:	f043 030f 	orr.w	r3, r3, #15
    df9c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    df9e:	7863      	ldrb	r3, [r4, #1]
    dfa0:	f043 0320 	orr.w	r3, r3, #32
    dfa4:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    dfa6:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    dfa8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    dfac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    dfb0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    dfb4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    dfb8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    dfbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    dfc0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    dfc4:	f040 0004 	orr.w	r0, r0, #4
    dfc8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    dfcc:	f061 010f 	orn	r1, r1, #15
    dfd0:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    dfd4:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    dfd8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    dfdc:	f043 030f 	orr.w	r3, r3, #15
    dfe0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    dfe4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    dfe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dfec:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    dff0:	bd10      	pop	{r4, pc}

0000dff2 <read_local_features>:
{
    dff2:	b510      	push	{r4, lr}
    dff4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dff6:	2109      	movs	r1, #9
    dff8:	f7ff fd5c 	bl	dab4 <cmd_complete>
    dffc:	4604      	mov	r4, r0
	rp->status = 0x00;
    dffe:	2100      	movs	r1, #0
    e000:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    e004:	2208      	movs	r2, #8
    e006:	f01c fd1b 	bl	2aa40 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    e00a:	2360      	movs	r3, #96	; 0x60
    e00c:	7163      	strb	r3, [r4, #5]
    e00e:	bd10      	pop	{r4, pc}

0000e010 <le_read_local_features>:
{
    e010:	b510      	push	{r4, lr}
    e012:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e014:	2109      	movs	r1, #9
    e016:	f7ff fd4d 	bl	dab4 <cmd_complete>
    e01a:	4604      	mov	r4, r0
	rp->status = 0x00;
    e01c:	2100      	movs	r1, #0
    e01e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    e022:	2208      	movs	r2, #8
    e024:	f01c fd0c 	bl	2aa40 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    e028:	23ff      	movs	r3, #255	; 0xff
    e02a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    e02c:	2341      	movs	r3, #65	; 0x41
    e02e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    e030:	2301      	movs	r3, #1
    e032:	70e3      	strb	r3, [r4, #3]
    e034:	bd10      	pop	{r4, pc}

0000e036 <vs_read_supported_commands>:
{
    e036:	b510      	push	{r4, lr}
    e038:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e03a:	2141      	movs	r1, #65	; 0x41
    e03c:	f7ff fd3a 	bl	dab4 <cmd_complete>
    e040:	4604      	mov	r4, r0
	rp->status = 0x00;
    e042:	2100      	movs	r1, #0
    e044:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    e048:	2240      	movs	r2, #64	; 0x40
    e04a:	f01c fcf9 	bl	2aa40 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    e04e:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    e050:	f063 0358 	orn	r3, r3, #88	; 0x58
    e054:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    e056:	78a3      	ldrb	r3, [r4, #2]
    e058:	f043 0303 	orr.w	r3, r3, #3
    e05c:	70a3      	strb	r3, [r4, #2]
    e05e:	bd10      	pop	{r4, pc}

0000e060 <vs_read_supported_features>:
{
    e060:	b508      	push	{r3, lr}
    e062:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e064:	2109      	movs	r1, #9
    e066:	f7ff fd25 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e06a:	2100      	movs	r1, #0
    e06c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    e070:	2208      	movs	r2, #8
    e072:	f01c fce5 	bl	2aa40 <memset>
    e076:	bd08      	pop	{r3, pc}

0000e078 <vs_read_static_addrs>:
{
    e078:	b510      	push	{r4, lr}
    e07a:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    e07c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    e084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e088:	d00d      	beq.n	e0a6 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    e08a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e08e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    e092:	f013 0f01 	tst.w	r3, #1
    e096:	d110      	bne.n	e0ba <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    e098:	2102      	movs	r1, #2
    e09a:	f7ff fd0b 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e09e:	2300      	movs	r3, #0
    e0a0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    e0a2:	7043      	strb	r3, [r0, #1]
    e0a4:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    e0a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e0aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    e0ae:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    e0b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e0b4:	4293      	cmp	r3, r2
    e0b6:	d1e8      	bne.n	e08a <vs_read_static_addrs+0x12>
    e0b8:	e7ee      	b.n	e098 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    e0ba:	2118      	movs	r1, #24
    e0bc:	f7ff fcfa 	bl	dab4 <cmd_complete>
		rp->status = 0x00;
    e0c0:	2100      	movs	r1, #0
    e0c2:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    e0c4:	2301      	movs	r3, #1
    e0c6:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    e0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    e0cc:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    e0d0:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    e0d2:	f3c3 2407 	ubfx	r4, r3, #8, #8
    e0d6:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    e0d8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e0da:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    e0dc:	0a1b      	lsrs	r3, r3, #8
    e0de:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    e0e0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    e0e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e0e8:	b29b      	uxth	r3, r3
	dst[0] = val;
    e0ea:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    e0ec:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    e0ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
    e0f2:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    e0f4:	2210      	movs	r2, #16
    e0f6:	3008      	adds	r0, #8
    e0f8:	f01c fca2 	bl	2aa40 <memset>
		return;
    e0fc:	bd10      	pop	{r4, pc}

0000e0fe <vs_read_key_hierarchy_roots>:
{
    e0fe:	b510      	push	{r4, lr}
    e100:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e102:	2121      	movs	r1, #33	; 0x21
    e104:	f7ff fcd6 	bl	dab4 <cmd_complete>
    e108:	4604      	mov	r4, r0
	rp->status = 0x00;
    e10a:	2300      	movs	r3, #0
    e10c:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    e10e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e11a:	d03f      	beq.n	e19c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    e11c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    e124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e128:	d038      	beq.n	e19c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    e12a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e12e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    e132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e136:	d031      	beq.n	e19c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    e138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e13c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    e140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e144:	d02a      	beq.n	e19c <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    e146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    e14a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    e14e:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    e150:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e154:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    e156:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e158:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    e15a:	0a1b      	lsrs	r3, r3, #8
    e15c:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    e15e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    e162:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    e164:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e168:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    e16a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e16c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    e16e:	0a1b      	lsrs	r3, r3, #8
    e170:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    e172:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    e176:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    e178:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e17c:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    e17e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e180:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    e182:	0a1b      	lsrs	r3, r3, #8
    e184:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    e186:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    e18a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e18c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    e190:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    e192:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e194:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e196:	0a1b      	lsrs	r3, r3, #8
    e198:	7403      	strb	r3, [r0, #16]
    e19a:	e004      	b.n	e1a6 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    e19c:	2210      	movs	r2, #16
    e19e:	2100      	movs	r1, #0
    e1a0:	1c60      	adds	r0, r4, #1
    e1a2:	f01c fc4d 	bl	2aa40 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    e1a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e1ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e1b2:	d040      	beq.n	e236 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    e1b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    e1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e1c0:	d039      	beq.n	e236 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    e1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e1ce:	d032      	beq.n	e236 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    e1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    e1d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e1dc:	d02b      	beq.n	e236 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    e1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    e1e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    e1e6:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    e1e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e1ec:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    e1ee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e1f0:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    e1f2:	0a1b      	lsrs	r3, r3, #8
    e1f4:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    e1f6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    e1fa:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    e1fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e200:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    e202:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e204:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    e206:	0a1b      	lsrs	r3, r3, #8
    e208:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    e20a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    e20e:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    e210:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e214:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    e216:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e218:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    e21a:	0a1b      	lsrs	r3, r3, #8
    e21c:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    e21e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    e222:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    e224:	f3c3 2207 	ubfx	r2, r3, #8, #8
    e228:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    e22a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e22c:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    e22e:	0a1b      	lsrs	r3, r3, #8
    e230:	f884 3020 	strb.w	r3, [r4, #32]
    e234:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    e236:	2210      	movs	r2, #16
    e238:	2100      	movs	r1, #0
    e23a:	f104 0011 	add.w	r0, r4, #17
    e23e:	f01c fbff 	bl	2aa40 <memset>
    e242:	bd10      	pop	{r4, pc}

0000e244 <read_bd_addr>:
{
    e244:	b508      	push	{r3, lr}
    e246:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e248:	2107      	movs	r1, #7
    e24a:	f7ff fc33 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e24e:	2300      	movs	r3, #0
    e250:	4601      	mov	r1, r0
    e252:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    e256:	4618      	mov	r0, r3
    e258:	f00b fd62 	bl	19d20 <ll_addr_get>
    e25c:	bd08      	pop	{r3, pc}

0000e25e <info_cmd_handle>:
{
    e25e:	b508      	push	{r3, lr}
    e260:	460b      	mov	r3, r1
	switch (ocf) {
    e262:	3801      	subs	r0, #1
    e264:	2808      	cmp	r0, #8
    e266:	d81e      	bhi.n	e2a6 <info_cmd_handle+0x48>
    e268:	e8df f000 	tbb	[pc, r0]
    e26c:	1d110b05 	.word	0x1d110b05
    e270:	1d1d1d1d 	.word	0x1d1d1d1d
    e274:	17          	.byte	0x17
    e275:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    e276:	4611      	mov	r1, r2
    e278:	4618      	mov	r0, r3
    e27a:	f7ff fc61 	bl	db40 <read_local_version_info>
	return 0;
    e27e:	2000      	movs	r0, #0
		break;
    e280:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    e282:	4611      	mov	r1, r2
    e284:	4618      	mov	r0, r3
    e286:	f7ff fe5c 	bl	df42 <read_supported_commands>
	return 0;
    e28a:	2000      	movs	r0, #0
		break;
    e28c:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    e28e:	4611      	mov	r1, r2
    e290:	4618      	mov	r0, r3
    e292:	f7ff feae 	bl	dff2 <read_local_features>
	return 0;
    e296:	2000      	movs	r0, #0
		break;
    e298:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    e29a:	4611      	mov	r1, r2
    e29c:	4618      	mov	r0, r3
    e29e:	f7ff ffd1 	bl	e244 <read_bd_addr>
	return 0;
    e2a2:	2000      	movs	r0, #0
		break;
    e2a4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e2a6:	f06f 0015 	mvn.w	r0, #21
}
    e2aa:	bd08      	pop	{r3, pc}

0000e2ac <le_set_random_address>:
{
    e2ac:	b510      	push	{r4, lr}
    e2ae:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    e2b0:	6881      	ldr	r1, [r0, #8]
    e2b2:	2001      	movs	r0, #1
    e2b4:	f00b fd56 	bl	19d64 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2b8:	2101      	movs	r1, #1
    e2ba:	4620      	mov	r0, r4
    e2bc:	f7ff fbfa 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    e2c0:	2300      	movs	r3, #0
    e2c2:	7003      	strb	r3, [r0, #0]
    e2c4:	bd10      	pop	{r4, pc}

0000e2c6 <vs_write_bd_addr>:
{
    e2c6:	b510      	push	{r4, lr}
    e2c8:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    e2ca:	6881      	ldr	r1, [r0, #8]
    e2cc:	2000      	movs	r0, #0
    e2ce:	f00b fd49 	bl	19d64 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2d2:	2101      	movs	r1, #1
    e2d4:	4620      	mov	r0, r4
    e2d6:	f7ff fbed 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    e2da:	2300      	movs	r3, #0
    e2dc:	7003      	strb	r3, [r0, #0]
    e2de:	bd10      	pop	{r4, pc}

0000e2e0 <le_read_wl_size>:
{
    e2e0:	b510      	push	{r4, lr}
    e2e2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e2e4:	2102      	movs	r1, #2
    e2e6:	f7ff fbe5 	bl	dab4 <cmd_complete>
    e2ea:	4604      	mov	r4, r0
	rp->status = 0x00;
    e2ec:	2300      	movs	r3, #0
    e2ee:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    e2f0:	f00b ff38 	bl	1a164 <ll_wl_size_get>
    e2f4:	7060      	strb	r0, [r4, #1]
    e2f6:	bd10      	pop	{r4, pc}

0000e2f8 <le_clear_wl>:
{
    e2f8:	b510      	push	{r4, lr}
    e2fa:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2fc:	2101      	movs	r1, #1
    e2fe:	f7ff fbd9 	bl	dab4 <cmd_complete>
    e302:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    e304:	f00b ff30 	bl	1a168 <ll_wl_clear>
    e308:	7020      	strb	r0, [r4, #0]
    e30a:	bd10      	pop	{r4, pc}

0000e30c <le_add_dev_to_wl>:
{
    e30c:	b538      	push	{r3, r4, r5, lr}
    e30e:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    e310:	6880      	ldr	r0, [r0, #8]
    e312:	f00c f81b 	bl	1a34c <ll_wl_add>
    e316:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e318:	2101      	movs	r1, #1
    e31a:	4628      	mov	r0, r5
    e31c:	f7ff fbca 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e320:	7004      	strb	r4, [r0, #0]
    e322:	bd38      	pop	{r3, r4, r5, pc}

0000e324 <le_rem_dev_from_wl>:
{
    e324:	b538      	push	{r3, r4, r5, lr}
    e326:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    e328:	6880      	ldr	r0, [r0, #8]
    e32a:	f00b ff33 	bl	1a194 <ll_wl_remove>
    e32e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e330:	2101      	movs	r1, #1
    e332:	4628      	mov	r0, r5
    e334:	f7ff fbbe 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e338:	7004      	strb	r4, [r0, #0]
    e33a:	bd38      	pop	{r3, r4, r5, pc}

0000e33c <le_encrypt>:
{
    e33c:	b510      	push	{r4, lr}
    e33e:	b084      	sub	sp, #16
    e340:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    e342:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    e344:	2300      	movs	r3, #0
    e346:	466a      	mov	r2, sp
    e348:	f100 0110 	add.w	r1, r0, #16
    e34c:	f001 fc9e 	bl	fc8c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    e350:	2111      	movs	r1, #17
    e352:	4620      	mov	r0, r4
    e354:	f7ff fbae 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e358:	2300      	movs	r3, #0
    e35a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    e35e:	2210      	movs	r2, #16
    e360:	4669      	mov	r1, sp
    e362:	f7f1 ffad 	bl	2c0 <memcpy>
}
    e366:	b004      	add	sp, #16
    e368:	bd10      	pop	{r4, pc}
	...

0000e36c <vs_read_build_info>:
{
    e36c:	b570      	push	{r4, r5, r6, lr}
    e36e:	b08a      	sub	sp, #40	; 0x28
    e370:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    e372:	466c      	mov	r4, sp
    e374:	4d0c      	ldr	r5, [pc, #48]	; (e3a8 <vs_read_build_info+0x3c>)
    e376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e37e:	e895 0003 	ldmia.w	r5, {r0, r1}
    e382:	f844 0b04 	str.w	r0, [r4], #4
    e386:	f824 1b02 	strh.w	r1, [r4], #2
    e38a:	0c09      	lsrs	r1, r1, #16
    e38c:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    e38e:	2128      	movs	r1, #40	; 0x28
    e390:	4630      	mov	r0, r6
    e392:	f7ff fb8f 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e396:	2300      	movs	r3, #0
    e398:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    e39c:	2227      	movs	r2, #39	; 0x27
    e39e:	4669      	mov	r1, sp
    e3a0:	f7f1 ff8e 	bl	2c0 <memcpy>
}
    e3a4:	b00a      	add	sp, #40	; 0x28
    e3a6:	bd70      	pop	{r4, r5, r6, pc}
    e3a8:	000319fc 	.word	0x000319fc

0000e3ac <vendor_cmd_handle>:
{
    e3ac:	b508      	push	{r3, lr}
    e3ae:	460b      	mov	r3, r1
	switch (ocf) {
    e3b0:	3801      	subs	r0, #1
    e3b2:	2809      	cmp	r0, #9
    e3b4:	d830      	bhi.n	e418 <vendor_cmd_handle+0x6c>
    e3b6:	e8df f000 	tbb	[pc, r0]
    e3ba:	0b05      	.short	0x0b05
    e3bc:	1d2f2f11 	.word	0x1d2f2f11
    e3c0:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    e3c4:	4611      	mov	r1, r2
    e3c6:	4618      	mov	r0, r3
    e3c8:	f7ff fbf6 	bl	dbb8 <vs_read_version_info>
	return 0;
    e3cc:	2000      	movs	r0, #0
		break;
    e3ce:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    e3d0:	4611      	mov	r1, r2
    e3d2:	4618      	mov	r0, r3
    e3d4:	f7ff fe2f 	bl	e036 <vs_read_supported_commands>
	return 0;
    e3d8:	2000      	movs	r0, #0
		break;
    e3da:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    e3dc:	4611      	mov	r1, r2
    e3de:	4618      	mov	r0, r3
    e3e0:	f7ff fe3e 	bl	e060 <vs_read_supported_features>
	return 0;
    e3e4:	2000      	movs	r0, #0
		break;
    e3e6:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    e3e8:	4611      	mov	r1, r2
    e3ea:	4618      	mov	r0, r3
    e3ec:	f7ff ffbe 	bl	e36c <vs_read_build_info>
	return 0;
    e3f0:	2000      	movs	r0, #0
		break;
    e3f2:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    e3f4:	4611      	mov	r1, r2
    e3f6:	4618      	mov	r0, r3
    e3f8:	f7ff ff65 	bl	e2c6 <vs_write_bd_addr>
	return 0;
    e3fc:	2000      	movs	r0, #0
		break;
    e3fe:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    e400:	4611      	mov	r1, r2
    e402:	4618      	mov	r0, r3
    e404:	f7ff fe38 	bl	e078 <vs_read_static_addrs>
	return 0;
    e408:	2000      	movs	r0, #0
		break;
    e40a:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    e40c:	4611      	mov	r1, r2
    e40e:	4618      	mov	r0, r3
    e410:	f7ff fe75 	bl	e0fe <vs_read_key_hierarchy_roots>
	return 0;
    e414:	2000      	movs	r0, #0
		break;
    e416:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e418:	f06f 0015 	mvn.w	r0, #21
}
    e41c:	bd08      	pop	{r3, pc}

0000e41e <le_unknown_rsp>:
{
    e41e:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    e420:	7903      	ldrb	r3, [r0, #4]
    e422:	2b0e      	cmp	r3, #14
    e424:	d000      	beq.n	e428 <le_unknown_rsp+0xa>
    e426:	bd08      	pop	{r3, pc}
    e428:	4613      	mov	r3, r2
    e42a:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e42c:	2100      	movs	r1, #0
    e42e:	201a      	movs	r0, #26
    e430:	f7f8 f966 	bl	6700 <le_remote_feat_complete>
}
    e434:	e7f7      	b.n	e426 <le_unknown_rsp+0x8>

0000e436 <le_rand>:
{
    e436:	b508      	push	{r3, lr}
    e438:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e43a:	2109      	movs	r1, #9
    e43c:	f7ff fb3a 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e440:	2300      	movs	r3, #0
    e442:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    e446:	2108      	movs	r1, #8
    e448:	f003 fcb2 	bl	11db0 <bt_rand>
    e44c:	bd08      	pop	{r3, pc}

0000e44e <le_set_adv_param>:
{
    e44e:	b570      	push	{r4, r5, r6, lr}
    e450:	b08c      	sub	sp, #48	; 0x30
    e452:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    e454:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    e456:	460c      	mov	r4, r1
    e458:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    e45c:	790b      	ldrb	r3, [r1, #4]
    e45e:	2000      	movs	r0, #0
    e460:	900a      	str	r0, [sp, #40]	; 0x28
    e462:	9009      	str	r0, [sp, #36]	; 0x24
    e464:	9008      	str	r0, [sp, #32]
    e466:	9007      	str	r0, [sp, #28]
    e468:	9006      	str	r0, [sp, #24]
    e46a:	9005      	str	r0, [sp, #20]
    e46c:	7b8e      	ldrb	r6, [r1, #14]
    e46e:	9604      	str	r6, [sp, #16]
    e470:	7b4e      	ldrb	r6, [r1, #13]
    e472:	9603      	str	r6, [sp, #12]
    e474:	9402      	str	r4, [sp, #8]
    e476:	798c      	ldrb	r4, [r1, #6]
    e478:	9401      	str	r4, [sp, #4]
    e47a:	7949      	ldrb	r1, [r1, #5]
    e47c:	9100      	str	r1, [sp, #0]
    e47e:	4601      	mov	r1, r0
    e480:	f00c fc40 	bl	1ad04 <ll_adv_params_set>
    e484:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e486:	2101      	movs	r1, #1
    e488:	4628      	mov	r0, r5
    e48a:	f7ff fb13 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e48e:	7004      	strb	r4, [r0, #0]
}
    e490:	b00c      	add	sp, #48	; 0x30
    e492:	bd70      	pop	{r4, r5, r6, pc}

0000e494 <le_set_adv_data>:
{
    e494:	b510      	push	{r4, lr}
    e496:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    e498:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    e49a:	1c59      	adds	r1, r3, #1
    e49c:	7818      	ldrb	r0, [r3, #0]
    e49e:	f00c fd55 	bl	1af4c <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e4a2:	2101      	movs	r1, #1
    e4a4:	4620      	mov	r0, r4
    e4a6:	f7ff fb05 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    e4aa:	2300      	movs	r3, #0
    e4ac:	7003      	strb	r3, [r0, #0]
    e4ae:	bd10      	pop	{r4, pc}

0000e4b0 <le_set_scan_rsp_data>:
{
    e4b0:	b510      	push	{r4, lr}
    e4b2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    e4b4:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    e4b6:	1c59      	adds	r1, r3, #1
    e4b8:	7818      	ldrb	r0, [r3, #0]
    e4ba:	f00c fda0 	bl	1affe <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e4be:	2101      	movs	r1, #1
    e4c0:	4620      	mov	r0, r4
    e4c2:	f7ff faf7 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    e4c6:	2300      	movs	r3, #0
    e4c8:	7003      	strb	r3, [r0, #0]
    e4ca:	bd10      	pop	{r4, pc}

0000e4cc <le_set_adv_enable>:
{
    e4cc:	b538      	push	{r3, r4, r5, lr}
    e4ce:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    e4d0:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    e4d2:	7818      	ldrb	r0, [r3, #0]
    e4d4:	f00c fdd8 	bl	1b088 <ll_adv_enable>
    e4d8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e4da:	2101      	movs	r1, #1
    e4dc:	4628      	mov	r0, r5
    e4de:	f7ff fae9 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e4e2:	b114      	cbz	r4, e4ea <le_set_adv_enable+0x1e>
    e4e4:	230c      	movs	r3, #12
    e4e6:	7003      	strb	r3, [r0, #0]
    e4e8:	bd38      	pop	{r3, r4, r5, pc}
    e4ea:	2300      	movs	r3, #0
    e4ec:	e7fb      	b.n	e4e6 <le_set_adv_enable+0x1a>

0000e4ee <le_set_scan_param>:
{
    e4ee:	b530      	push	{r4, r5, lr}
    e4f0:	b083      	sub	sp, #12
    e4f2:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    e4f4:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    e4f6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    e4fa:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    e4fe:	7820      	ldrb	r0, [r4, #0]
    e500:	7963      	ldrb	r3, [r4, #5]
    e502:	79a4      	ldrb	r4, [r4, #6]
    e504:	9400      	str	r4, [sp, #0]
    e506:	f00c fe51 	bl	1b1ac <ll_scan_params_set>
    e50a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e50c:	2101      	movs	r1, #1
    e50e:	4628      	mov	r0, r5
    e510:	f7ff fad0 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e514:	b11c      	cbz	r4, e51e <le_set_scan_param+0x30>
    e516:	230c      	movs	r3, #12
    e518:	7003      	strb	r3, [r0, #0]
}
    e51a:	b003      	add	sp, #12
    e51c:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e51e:	2300      	movs	r3, #0
    e520:	e7fa      	b.n	e518 <le_set_scan_param+0x2a>
	...

0000e524 <le_set_scan_enable>:
{
    e524:	b538      	push	{r3, r4, r5, lr}
    e526:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    e528:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    e52a:	781a      	ldrb	r2, [r3, #0]
    e52c:	b13a      	cbz	r2, e53e <le_set_scan_enable+0x1a>
    e52e:	785a      	ldrb	r2, [r3, #1]
    e530:	b12a      	cbz	r2, e53e <le_set_scan_enable+0x1a>
		dup_count = 0;
    e532:	2200      	movs	r2, #0
    e534:	490b      	ldr	r1, [pc, #44]	; (e564 <le_set_scan_enable+0x40>)
    e536:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    e538:	490b      	ldr	r1, [pc, #44]	; (e568 <le_set_scan_enable+0x44>)
    e53a:	600a      	str	r2, [r1, #0]
    e53c:	e003      	b.n	e546 <le_set_scan_enable+0x22>
		dup_count = -1;
    e53e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e542:	4a08      	ldr	r2, [pc, #32]	; (e564 <le_set_scan_enable+0x40>)
    e544:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    e546:	7818      	ldrb	r0, [r3, #0]
    e548:	f00c fe4c 	bl	1b1e4 <ll_scan_enable>
    e54c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e54e:	2101      	movs	r1, #1
    e550:	4628      	mov	r0, r5
    e552:	f7ff faaf 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e556:	b114      	cbz	r4, e55e <le_set_scan_enable+0x3a>
    e558:	230c      	movs	r3, #12
    e55a:	7003      	strb	r3, [r0, #0]
    e55c:	bd38      	pop	{r3, r4, r5, pc}
    e55e:	2300      	movs	r3, #0
    e560:	e7fb      	b.n	e55a <le_set_scan_enable+0x36>
    e562:	bf00      	nop
    e564:	20000fa0 	.word	0x20000fa0
    e568:	20000fa4 	.word	0x20000fa4

0000e56c <le_create_connection>:
{
    e56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e56e:	b087      	sub	sp, #28
    e570:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    e572:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    e574:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    e576:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    e578:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    e57c:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    e580:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    e584:	7922      	ldrb	r2, [r4, #4]
    e586:	7963      	ldrb	r3, [r4, #5]
    e588:	1da6      	adds	r6, r4, #6
    e58a:	7b24      	ldrb	r4, [r4, #12]
    e58c:	f8cd c010 	str.w	ip, [sp, #16]
    e590:	f8cd e00c 	str.w	lr, [sp, #12]
    e594:	9702      	str	r7, [sp, #8]
    e596:	9401      	str	r4, [sp, #4]
    e598:	9600      	str	r6, [sp, #0]
    e59a:	f00c fe63 	bl	1b264 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e59e:	b100      	cbz	r0, e5a2 <le_create_connection+0x36>
    e5a0:	200c      	movs	r0, #12
    e5a2:	f7ff fa5f 	bl	da64 <cmd_status>
    e5a6:	6028      	str	r0, [r5, #0]
}
    e5a8:	b007      	add	sp, #28
    e5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e5ac <le_create_conn_cancel>:
{
    e5ac:	b538      	push	{r3, r4, r5, lr}
    e5ae:	460d      	mov	r5, r1
	status = ll_connect_disable();
    e5b0:	f00b f9fe 	bl	199b0 <ll_connect_disable>
    e5b4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e5b6:	2101      	movs	r1, #1
    e5b8:	4628      	mov	r0, r5
    e5ba:	f7ff fa7b 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e5be:	b114      	cbz	r4, e5c6 <le_create_conn_cancel+0x1a>
    e5c0:	230c      	movs	r3, #12
    e5c2:	7003      	strb	r3, [r0, #0]
    e5c4:	bd38      	pop	{r3, r4, r5, pc}
    e5c6:	2300      	movs	r3, #0
    e5c8:	e7fb      	b.n	e5c2 <le_create_conn_cancel+0x16>

0000e5ca <le_set_host_chan_classif>:
{
    e5ca:	b538      	push	{r3, r4, r5, lr}
    e5cc:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    e5ce:	6880      	ldr	r0, [r0, #8]
    e5d0:	f00a fb06 	bl	18be0 <ll_chm_update>
    e5d4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e5d6:	2101      	movs	r1, #1
    e5d8:	4628      	mov	r0, r5
    e5da:	f7ff fa6b 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e5de:	b114      	cbz	r4, e5e6 <le_set_host_chan_classif+0x1c>
    e5e0:	230c      	movs	r3, #12
    e5e2:	7003      	strb	r3, [r0, #0]
    e5e4:	bd38      	pop	{r3, r4, r5, pc}
    e5e6:	2300      	movs	r3, #0
    e5e8:	e7fb      	b.n	e5e2 <le_set_host_chan_classif+0x18>

0000e5ea <le_start_encryption>:
{
    e5ea:	b510      	push	{r4, lr}
    e5ec:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    e5ee:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e5f0:	4611      	mov	r1, r2
    e5f2:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    e5f6:	f102 030c 	add.w	r3, r2, #12
    e5fa:	320a      	adds	r2, #10
    e5fc:	f00a fe2a 	bl	19254 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e600:	b100      	cbz	r0, e604 <le_start_encryption+0x1a>
    e602:	200c      	movs	r0, #12
    e604:	f7ff fa2e 	bl	da64 <cmd_status>
    e608:	6020      	str	r0, [r4, #0]
    e60a:	bd10      	pop	{r4, pc}

0000e60c <le_ltk_req_reply>:
{
    e60c:	b570      	push	{r4, r5, r6, lr}
    e60e:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    e610:	6882      	ldr	r2, [r0, #8]
    e612:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    e616:	2100      	movs	r1, #0
    e618:	b2a0      	uxth	r0, r4
    e61a:	f00a fb34 	bl	18c86 <ll_start_enc_req_send>
    e61e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e620:	2103      	movs	r1, #3
    e622:	4630      	mov	r0, r6
    e624:	f7ff fa46 	bl	dab4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e628:	b125      	cbz	r5, e634 <le_ltk_req_reply+0x28>
    e62a:	230c      	movs	r3, #12
    e62c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e62e:	f8a0 4001 	strh.w	r4, [r0, #1]
    e632:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e634:	2300      	movs	r3, #0
    e636:	e7f9      	b.n	e62c <le_ltk_req_reply+0x20>

0000e638 <le_ltk_req_neg_reply>:
{
    e638:	b570      	push	{r4, r5, r6, lr}
    e63a:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    e63c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e63e:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    e640:	2200      	movs	r2, #0
    e642:	2106      	movs	r1, #6
    e644:	b2a0      	uxth	r0, r4
    e646:	f00a fb1e 	bl	18c86 <ll_start_enc_req_send>
    e64a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e64c:	2103      	movs	r1, #3
    e64e:	4630      	mov	r0, r6
    e650:	f7ff fa30 	bl	dab4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e654:	b125      	cbz	r5, e660 <le_ltk_req_neg_reply+0x28>
    e656:	230c      	movs	r3, #12
    e658:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    e65a:	f8a0 4001 	strh.w	r4, [r0, #1]
    e65e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e660:	2300      	movs	r3, #0
    e662:	e7f9      	b.n	e658 <le_ltk_req_neg_reply+0x20>

0000e664 <le_read_chan_map>:
{
    e664:	b570      	push	{r4, r5, r6, lr}
    e666:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    e668:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e66a:	8815      	ldrh	r5, [r2, #0]
    e66c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    e66e:	2108      	movs	r1, #8
    e670:	4618      	mov	r0, r3
    e672:	f7ff fa1f 	bl	dab4 <cmd_complete>
    e676:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    e678:	1cc1      	adds	r1, r0, #3
    e67a:	4630      	mov	r0, r6
    e67c:	f00a faee 	bl	18c5c <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    e680:	b120      	cbz	r0, e68c <le_read_chan_map+0x28>
    e682:	2302      	movs	r3, #2
    e684:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    e686:	f8a4 5001 	strh.w	r5, [r4, #1]
    e68a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    e68c:	2300      	movs	r3, #0
    e68e:	e7f9      	b.n	e684 <le_read_chan_map+0x20>

0000e690 <le_read_remote_features>:
{
    e690:	b510      	push	{r4, lr}
    e692:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    e694:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    e696:	8818      	ldrh	r0, [r3, #0]
    e698:	f00a fb3d 	bl	18d16 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e69c:	b100      	cbz	r0, e6a0 <le_read_remote_features+0x10>
    e69e:	200c      	movs	r0, #12
    e6a0:	f7ff f9e0 	bl	da64 <cmd_status>
    e6a4:	6020      	str	r0, [r4, #0]
    e6a6:	bd10      	pop	{r4, pc}

0000e6a8 <le_conn_param_req_neg_reply>:
{
    e6a8:	b570      	push	{r4, r5, r6, lr}
    e6aa:	b082      	sub	sp, #8
    e6ac:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    e6ae:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e6b0:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    e6b2:	789a      	ldrb	r2, [r3, #2]
    e6b4:	2300      	movs	r3, #0
    e6b6:	9301      	str	r3, [sp, #4]
    e6b8:	9300      	str	r3, [sp, #0]
    e6ba:	2102      	movs	r1, #2
    e6bc:	b2a0      	uxth	r0, r4
    e6be:	f00a f9ff 	bl	18ac0 <ll_conn_update>
    e6c2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e6c4:	2103      	movs	r1, #3
    e6c6:	4630      	mov	r0, r6
    e6c8:	f7ff f9f4 	bl	dab4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e6cc:	b12d      	cbz	r5, e6da <le_conn_param_req_neg_reply+0x32>
    e6ce:	230c      	movs	r3, #12
    e6d0:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e6d2:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    e6d6:	b002      	add	sp, #8
    e6d8:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e6da:	2300      	movs	r3, #0
    e6dc:	e7f8      	b.n	e6d0 <le_conn_param_req_neg_reply+0x28>

0000e6de <le_set_data_len>:
{
    e6de:	b570      	push	{r4, r5, r6, lr}
    e6e0:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    e6e2:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e6e4:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    e6e6:	889a      	ldrh	r2, [r3, #4]
    e6e8:	8859      	ldrh	r1, [r3, #2]
    e6ea:	b2a0      	uxth	r0, r4
    e6ec:	f00a fb97 	bl	18e1e <ll_length_req_send>
    e6f0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e6f2:	2103      	movs	r1, #3
    e6f4:	4630      	mov	r0, r6
    e6f6:	f7ff f9dd 	bl	dab4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e6fa:	b125      	cbz	r5, e706 <le_set_data_len+0x28>
    e6fc:	230c      	movs	r3, #12
    e6fe:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e700:	f8a0 4001 	strh.w	r4, [r0, #1]
    e704:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e706:	2300      	movs	r3, #0
    e708:	e7f9      	b.n	e6fe <le_set_data_len+0x20>

0000e70a <le_read_default_data_len>:
{
    e70a:	b510      	push	{r4, lr}
    e70c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e70e:	2105      	movs	r1, #5
    e710:	f7ff f9d0 	bl	dab4 <cmd_complete>
    e714:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    e716:	1cc1      	adds	r1, r0, #3
    e718:	3001      	adds	r0, #1
    e71a:	f00a fba7 	bl	18e6c <ll_length_default_get>
	rp->status = 0x00;
    e71e:	2300      	movs	r3, #0
    e720:	7023      	strb	r3, [r4, #0]
    e722:	bd10      	pop	{r4, pc}

0000e724 <le_write_default_data_len>:
{
    e724:	b538      	push	{r3, r4, r5, lr}
    e726:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    e728:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    e72a:	8859      	ldrh	r1, [r3, #2]
    e72c:	8818      	ldrh	r0, [r3, #0]
    e72e:	f00a fba7 	bl	18e80 <ll_length_default_set>
    e732:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e734:	2101      	movs	r1, #1
    e736:	4628      	mov	r0, r5
    e738:	f7ff f9bc 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e73c:	b114      	cbz	r4, e744 <le_write_default_data_len+0x20>
    e73e:	231e      	movs	r3, #30
    e740:	7003      	strb	r3, [r0, #0]
    e742:	bd38      	pop	{r3, r4, r5, pc}
    e744:	2300      	movs	r3, #0
    e746:	e7fb      	b.n	e740 <le_write_default_data_len+0x1c>

0000e748 <le_read_max_data_len>:
{
    e748:	b510      	push	{r4, lr}
    e74a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e74c:	2109      	movs	r1, #9
    e74e:	f7ff f9b1 	bl	dab4 <cmd_complete>
    e752:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    e754:	1dc3      	adds	r3, r0, #7
    e756:	1d42      	adds	r2, r0, #5
    e758:	1cc1      	adds	r1, r0, #3
    e75a:	3001      	adds	r0, #1
    e75c:	f00a fb9a 	bl	18e94 <ll_length_max_get>
	rp->status = 0x00;
    e760:	2300      	movs	r3, #0
    e762:	7023      	strb	r3, [r4, #0]
    e764:	bd10      	pop	{r4, pc}
	...

0000e768 <le_phy_upd_complete>:
{
    e768:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e76a:	4b1a      	ldr	r3, [pc, #104]	; (e7d4 <le_phy_upd_complete+0x6c>)
    e76c:	e9d3 4500 	ldrd	r4, r5, [r3]
    e770:	2400      	movs	r4, #0
    e772:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    e776:	ea54 0305 	orrs.w	r3, r4, r5
    e77a:	d008      	beq.n	e78e <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e77c:	4b16      	ldr	r3, [pc, #88]	; (e7d8 <le_phy_upd_complete+0x70>)
    e77e:	e9d3 4500 	ldrd	r4, r5, [r3]
    e782:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    e786:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e788:	ea54 0305 	orrs.w	r3, r4, r5
    e78c:	d100      	bne.n	e790 <le_phy_upd_complete+0x28>
    e78e:	bd38      	pop	{r3, r4, r5, pc}
    e790:	4613      	mov	r3, r2
    e792:	460c      	mov	r4, r1
    e794:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e796:	2205      	movs	r2, #5
    e798:	210c      	movs	r1, #12
    e79a:	4618      	mov	r0, r3
    e79c:	f7ff fa24 	bl	dbe8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e7a0:	78eb      	ldrb	r3, [r5, #3]
    e7a2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e7a4:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e7a8:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    e7aa:	fa92 f3a2 	rbit	r3, r2
    e7ae:	fab3 f383 	clz	r3, r3
    e7b2:	b90a      	cbnz	r2, e7b8 <le_phy_upd_complete+0x50>
    e7b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7b8:	3301      	adds	r3, #1
    e7ba:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e7bc:	796a      	ldrb	r2, [r5, #5]
    e7be:	fa92 f3a2 	rbit	r3, r2
    e7c2:	fab3 f383 	clz	r3, r3
    e7c6:	b90a      	cbnz	r2, e7cc <le_phy_upd_complete+0x64>
    e7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7cc:	3301      	adds	r3, #1
    e7ce:	7103      	strb	r3, [r0, #4]
    e7d0:	e7dd      	b.n	e78e <le_phy_upd_complete+0x26>
    e7d2:	bf00      	nop
    e7d4:	2000c0f8 	.word	0x2000c0f8
    e7d8:	2000c100 	.word	0x2000c100

0000e7dc <le_read_phy>:
{
    e7dc:	b570      	push	{r4, r5, r6, lr}
    e7de:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    e7e0:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e7e2:	8815      	ldrh	r5, [r2, #0]
    e7e4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    e7e6:	2105      	movs	r1, #5
    e7e8:	4618      	mov	r0, r3
    e7ea:	f7ff f963 	bl	dab4 <cmd_complete>
    e7ee:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    e7f0:	1d02      	adds	r2, r0, #4
    e7f2:	1cc1      	adds	r1, r0, #3
    e7f4:	4630      	mov	r0, r6
    e7f6:	f00a fb57 	bl	18ea8 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e7fa:	b1c0      	cbz	r0, e82e <le_read_phy+0x52>
    e7fc:	230c      	movs	r3, #12
    e7fe:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e800:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    e804:	78e2      	ldrb	r2, [r4, #3]
    e806:	fa92 f3a2 	rbit	r3, r2
    e80a:	fab3 f383 	clz	r3, r3
    e80e:	b90a      	cbnz	r2, e814 <le_read_phy+0x38>
    e810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e814:	3301      	adds	r3, #1
    e816:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    e818:	7922      	ldrb	r2, [r4, #4]
    e81a:	fa92 f3a2 	rbit	r3, r2
    e81e:	fab3 f383 	clz	r3, r3
    e822:	b90a      	cbnz	r2, e828 <le_read_phy+0x4c>
    e824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e828:	3301      	adds	r3, #1
    e82a:	7123      	strb	r3, [r4, #4]
    e82c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e82e:	2300      	movs	r3, #0
    e830:	e7e5      	b.n	e7fe <le_read_phy+0x22>

0000e832 <le_set_default_phy>:
{
    e832:	b538      	push	{r3, r4, r5, lr}
    e834:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    e836:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e838:	781a      	ldrb	r2, [r3, #0]
    e83a:	f012 0f01 	tst.w	r2, #1
    e83e:	d001      	beq.n	e844 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    e840:	2107      	movs	r1, #7
    e842:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e844:	f012 0f02 	tst.w	r2, #2
    e848:	d001      	beq.n	e84e <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    e84a:	2207      	movs	r2, #7
    e84c:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    e84e:	7899      	ldrb	r1, [r3, #2]
    e850:	7858      	ldrb	r0, [r3, #1]
    e852:	f00a fb3d 	bl	18ed0 <ll_phy_default_set>
    e856:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e858:	2101      	movs	r1, #1
    e85a:	4628      	mov	r0, r5
    e85c:	f7ff f92a 	bl	dab4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e860:	b114      	cbz	r4, e868 <le_set_default_phy+0x36>
    e862:	231e      	movs	r3, #30
    e864:	7003      	strb	r3, [r0, #0]
    e866:	bd38      	pop	{r3, r4, r5, pc}
    e868:	2300      	movs	r3, #0
    e86a:	e7fb      	b.n	e864 <le_set_default_phy+0x32>

0000e86c <le_set_phy>:
{
    e86c:	b538      	push	{r3, r4, r5, lr}
    e86e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    e870:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e872:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    e874:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e878:	788b      	ldrb	r3, [r1, #2]
    e87a:	f013 0f01 	tst.w	r3, #1
    e87e:	d001      	beq.n	e884 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    e880:	2507      	movs	r5, #7
    e882:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e884:	f013 0f02 	tst.w	r3, #2
    e888:	d001      	beq.n	e88e <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    e88a:	2307      	movs	r3, #7
    e88c:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    e88e:	f012 0f03 	tst.w	r2, #3
    e892:	d00c      	beq.n	e8ae <le_set_phy+0x42>
		phy_opts -= 1;
    e894:	3a01      	subs	r2, #1
		phy_opts &= 1;
    e896:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    e89a:	790b      	ldrb	r3, [r1, #4]
    e89c:	78c9      	ldrb	r1, [r1, #3]
    e89e:	f00a fb21 	bl	18ee4 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e8a2:	b100      	cbz	r0, e8a6 <le_set_phy+0x3a>
    e8a4:	200c      	movs	r0, #12
    e8a6:	f7ff f8dd 	bl	da64 <cmd_status>
    e8aa:	6020      	str	r0, [r4, #0]
    e8ac:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    e8ae:	2200      	movs	r2, #0
    e8b0:	e7f3      	b.n	e89a <le_set_phy+0x2e>

0000e8b2 <le_add_dev_to_rl>:
{
    e8b2:	b538      	push	{r3, r4, r5, lr}
    e8b4:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    e8b6:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    e8b8:	f100 0217 	add.w	r2, r0, #23
    e8bc:	1dc1      	adds	r1, r0, #7
    e8be:	f00b fffb 	bl	1a8b8 <ll_rl_add>
    e8c2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e8c4:	2101      	movs	r1, #1
    e8c6:	4628      	mov	r0, r5
    e8c8:	f7ff f8f4 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e8cc:	7004      	strb	r4, [r0, #0]
    e8ce:	bd38      	pop	{r3, r4, r5, pc}

0000e8d0 <le_rem_dev_from_rl>:
{
    e8d0:	b538      	push	{r3, r4, r5, lr}
    e8d2:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e8d4:	6880      	ldr	r0, [r0, #8]
    e8d6:	f00c f8ad 	bl	1aa34 <ll_rl_remove>
    e8da:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e8dc:	2101      	movs	r1, #1
    e8de:	4628      	mov	r0, r5
    e8e0:	f7ff f8e8 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e8e4:	7004      	strb	r4, [r0, #0]
    e8e6:	bd38      	pop	{r3, r4, r5, pc}

0000e8e8 <le_clear_rl>:
{
    e8e8:	b510      	push	{r4, lr}
    e8ea:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e8ec:	2101      	movs	r1, #1
    e8ee:	f7ff f8e1 	bl	dab4 <cmd_complete>
    e8f2:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e8f4:	f00b ffd4 	bl	1a8a0 <ll_rl_clear>
    e8f8:	7020      	strb	r0, [r4, #0]
    e8fa:	bd10      	pop	{r4, pc}

0000e8fc <le_read_rl_size>:
{
    e8fc:	b510      	push	{r4, lr}
    e8fe:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e900:	2102      	movs	r1, #2
    e902:	f7ff f8d7 	bl	dab4 <cmd_complete>
    e906:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e908:	f00b ffc8 	bl	1a89c <ll_rl_size_get>
    e90c:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e90e:	2300      	movs	r3, #0
    e910:	7023      	strb	r3, [r4, #0]
    e912:	bd10      	pop	{r4, pc}

0000e914 <le_read_peer_rpa>:
{
    e914:	b510      	push	{r4, lr}
    e916:	b082      	sub	sp, #8
    e918:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e91a:	2207      	movs	r2, #7
    e91c:	6881      	ldr	r1, [r0, #8]
    e91e:	4668      	mov	r0, sp
    e920:	f7f1 fcce 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e924:	2107      	movs	r1, #7
    e926:	4620      	mov	r0, r4
    e928:	f7ff f8c4 	bl	dab4 <cmd_complete>
    e92c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e92e:	1c41      	adds	r1, r0, #1
    e930:	4668      	mov	r0, sp
    e932:	f00c f923 	bl	1ab7c <ll_rl_crpa_get>
    e936:	7020      	strb	r0, [r4, #0]
}
    e938:	b002      	add	sp, #8
    e93a:	bd10      	pop	{r4, pc}

0000e93c <le_read_local_rpa>:
{
    e93c:	b510      	push	{r4, lr}
    e93e:	b082      	sub	sp, #8
    e940:	460c      	mov	r4, r1
    e942:	2207      	movs	r2, #7
    e944:	6881      	ldr	r1, [r0, #8]
    e946:	4668      	mov	r0, sp
    e948:	f7f1 fcba 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e94c:	2107      	movs	r1, #7
    e94e:	4620      	mov	r0, r4
    e950:	f7ff f8b0 	bl	dab4 <cmd_complete>
    e954:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e956:	1c41      	adds	r1, r0, #1
    e958:	4668      	mov	r0, sp
    e95a:	f00c f937 	bl	1abcc <ll_rl_lrpa_get>
    e95e:	7020      	strb	r0, [r4, #0]
}
    e960:	b002      	add	sp, #8
    e962:	bd10      	pop	{r4, pc}

0000e964 <le_set_addr_res_enable>:
{
    e964:	b538      	push	{r3, r4, r5, lr}
    e966:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e968:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e96a:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e96c:	2101      	movs	r1, #1
    e96e:	4618      	mov	r0, r3
    e970:	f7ff f8a0 	bl	dab4 <cmd_complete>
    e974:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e976:	4628      	mov	r0, r5
    e978:	f00c f942 	bl	1ac00 <ll_rl_enable>
    e97c:	7020      	strb	r0, [r4, #0]
    e97e:	bd38      	pop	{r3, r4, r5, pc}

0000e980 <le_set_rpa_timeout>:
{
    e980:	b510      	push	{r4, lr}
    e982:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e984:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e986:	8818      	ldrh	r0, [r3, #0]
    e988:	f00c f952 	bl	1ac30 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e98c:	2101      	movs	r1, #1
    e98e:	4620      	mov	r0, r4
    e990:	f7ff f890 	bl	dab4 <cmd_complete>
	ccst->status = 0x00;
    e994:	2300      	movs	r3, #0
    e996:	7003      	strb	r3, [r0, #0]
    e998:	bd10      	pop	{r4, pc}

0000e99a <le_set_privacy_mode>:
{
    e99a:	b538      	push	{r3, r4, r5, lr}
    e99c:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e99e:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e9a0:	79c1      	ldrb	r1, [r0, #7]
    e9a2:	f00c f94f 	bl	1ac44 <ll_priv_mode_set>
    e9a6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e9a8:	2101      	movs	r1, #1
    e9aa:	4628      	mov	r0, r5
    e9ac:	f7ff f882 	bl	dab4 <cmd_complete>
	ccst->status = status;
    e9b0:	7004      	strb	r4, [r0, #0]
    e9b2:	bd38      	pop	{r3, r4, r5, pc}

0000e9b4 <le_read_tx_power>:
{
    e9b4:	b508      	push	{r3, lr}
    e9b6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e9b8:	2103      	movs	r1, #3
    e9ba:	f7ff f87b 	bl	dab4 <cmd_complete>
	rp->status = 0x00;
    e9be:	4601      	mov	r1, r0
    e9c0:	2300      	movs	r3, #0
    e9c2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e9c6:	3001      	adds	r0, #1
    e9c8:	f00a f9f1 	bl	18dae <ll_tx_power_get>
    e9cc:	bd08      	pop	{r3, pc}

0000e9ce <controller_cmd_handle>:
{
    e9ce:	b508      	push	{r3, lr}
    e9d0:	460b      	mov	r3, r1
	switch (ocf) {
    e9d2:	3801      	subs	r0, #1
    e9d4:	284d      	cmp	r0, #77	; 0x4d
    e9d6:	f200 8164 	bhi.w	eca2 <controller_cmd_handle+0x2d4>
    e9da:	e8df f010 	tbh	[pc, r0, lsl #1]
    e9de:	004e      	.short	0x004e
    e9e0:	005a0054 	.word	0x005a0054
    e9e4:	00600162 	.word	0x00600162
    e9e8:	00960090 	.word	0x00960090
    e9ec:	00a2009c 	.word	0x00a2009c
    e9f0:	00ae00a8 	.word	0x00ae00a8
    e9f4:	00ba00b4 	.word	0x00ba00b4
    e9f8:	006600c0 	.word	0x006600c0
    e9fc:	0072006c 	.word	0x0072006c
    ea00:	00ea0078 	.word	0x00ea0078
    ea04:	00de00c6 	.word	0x00de00c6
    ea08:	007e00e4 	.word	0x007e00e4
    ea0c:	00cc0084 	.word	0x00cc0084
    ea10:	00d800d2 	.word	0x00d800d2
    ea14:	0162008a 	.word	0x0162008a
    ea18:	01620162 	.word	0x01620162
    ea1c:	00f600f0 	.word	0x00f600f0
    ea20:	010200fc 	.word	0x010200fc
    ea24:	01620108 	.word	0x01620108
    ea28:	01260162 	.word	0x01260162
    ea2c:	0132012c 	.word	0x0132012c
    ea30:	013e0138 	.word	0x013e0138
    ea34:	014a0144 	.word	0x014a0144
    ea38:	010e0150 	.word	0x010e0150
    ea3c:	011a0114 	.word	0x011a0114
    ea40:	01620120 	.word	0x01620120
    ea44:	01620162 	.word	0x01620162
    ea48:	01620162 	.word	0x01620162
    ea4c:	01620162 	.word	0x01620162
    ea50:	01620162 	.word	0x01620162
    ea54:	01620162 	.word	0x01620162
    ea58:	01620162 	.word	0x01620162
    ea5c:	01620162 	.word	0x01620162
    ea60:	01620162 	.word	0x01620162
    ea64:	01620162 	.word	0x01620162
    ea68:	01620162 	.word	0x01620162
    ea6c:	01620162 	.word	0x01620162
    ea70:	015c0162 	.word	0x015c0162
    ea74:	01620162 	.word	0x01620162
    ea78:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    ea7a:	4611      	mov	r1, r2
    ea7c:	4618      	mov	r0, r3
    ea7e:	f7f6 fe3f 	bl	5700 <le_set_event_mask>
	return 0;
    ea82:	2000      	movs	r0, #0
		break;
    ea84:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    ea86:	4611      	mov	r1, r2
    ea88:	4618      	mov	r0, r3
    ea8a:	f7ff f86c 	bl	db66 <le_read_buffer_size>
	return 0;
    ea8e:	2000      	movs	r0, #0
		break;
    ea90:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    ea92:	4611      	mov	r1, r2
    ea94:	4618      	mov	r0, r3
    ea96:	f7ff fabb 	bl	e010 <le_read_local_features>
	return 0;
    ea9a:	2000      	movs	r0, #0
		break;
    ea9c:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    ea9e:	4611      	mov	r1, r2
    eaa0:	4618      	mov	r0, r3
    eaa2:	f7ff fc03 	bl	e2ac <le_set_random_address>
	return 0;
    eaa6:	2000      	movs	r0, #0
		break;
    eaa8:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    eaaa:	4611      	mov	r1, r2
    eaac:	4618      	mov	r0, r3
    eaae:	f7ff fc17 	bl	e2e0 <le_read_wl_size>
	return 0;
    eab2:	2000      	movs	r0, #0
		break;
    eab4:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    eab6:	4611      	mov	r1, r2
    eab8:	4618      	mov	r0, r3
    eaba:	f7ff fc1d 	bl	e2f8 <le_clear_wl>
	return 0;
    eabe:	2000      	movs	r0, #0
		break;
    eac0:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    eac2:	4611      	mov	r1, r2
    eac4:	4618      	mov	r0, r3
    eac6:	f7ff fc21 	bl	e30c <le_add_dev_to_wl>
	return 0;
    eaca:	2000      	movs	r0, #0
		break;
    eacc:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    eace:	4611      	mov	r1, r2
    ead0:	4618      	mov	r0, r3
    ead2:	f7ff fc27 	bl	e324 <le_rem_dev_from_wl>
	return 0;
    ead6:	2000      	movs	r0, #0
		break;
    ead8:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    eada:	4611      	mov	r1, r2
    eadc:	4618      	mov	r0, r3
    eade:	f7ff fc2d 	bl	e33c <le_encrypt>
	return 0;
    eae2:	2000      	movs	r0, #0
		break;
    eae4:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    eae6:	4611      	mov	r1, r2
    eae8:	4618      	mov	r0, r3
    eaea:	f7ff fca4 	bl	e436 <le_rand>
	return 0;
    eaee:	2000      	movs	r0, #0
		break;
    eaf0:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    eaf2:	4611      	mov	r1, r2
    eaf4:	4618      	mov	r0, r3
    eaf6:	f7ff f843 	bl	db80 <le_read_supp_states>
	return 0;
    eafa:	2000      	movs	r0, #0
		break;
    eafc:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    eafe:	4611      	mov	r1, r2
    eb00:	4618      	mov	r0, r3
    eb02:	f7ff fca4 	bl	e44e <le_set_adv_param>
	return 0;
    eb06:	2000      	movs	r0, #0
		break;
    eb08:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    eb0a:	4611      	mov	r1, r2
    eb0c:	4618      	mov	r0, r3
    eb0e:	f7ff f84a 	bl	dba6 <le_read_adv_chan_tx_power>
	return 0;
    eb12:	2000      	movs	r0, #0
		break;
    eb14:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    eb16:	4611      	mov	r1, r2
    eb18:	4618      	mov	r0, r3
    eb1a:	f7ff fcbb 	bl	e494 <le_set_adv_data>
	return 0;
    eb1e:	2000      	movs	r0, #0
		break;
    eb20:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    eb22:	4611      	mov	r1, r2
    eb24:	4618      	mov	r0, r3
    eb26:	f7ff fcc3 	bl	e4b0 <le_set_scan_rsp_data>
	return 0;
    eb2a:	2000      	movs	r0, #0
		break;
    eb2c:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    eb2e:	4611      	mov	r1, r2
    eb30:	4618      	mov	r0, r3
    eb32:	f7ff fccb 	bl	e4cc <le_set_adv_enable>
	return 0;
    eb36:	2000      	movs	r0, #0
		break;
    eb38:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    eb3a:	4611      	mov	r1, r2
    eb3c:	4618      	mov	r0, r3
    eb3e:	f7ff fcd6 	bl	e4ee <le_set_scan_param>
	return 0;
    eb42:	2000      	movs	r0, #0
		break;
    eb44:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    eb46:	4611      	mov	r1, r2
    eb48:	4618      	mov	r0, r3
    eb4a:	f7ff fceb 	bl	e524 <le_set_scan_enable>
	return 0;
    eb4e:	2000      	movs	r0, #0
		break;
    eb50:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    eb52:	4611      	mov	r1, r2
    eb54:	4618      	mov	r0, r3
    eb56:	f7ff fd09 	bl	e56c <le_create_connection>
	return 0;
    eb5a:	2000      	movs	r0, #0
		break;
    eb5c:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    eb5e:	4611      	mov	r1, r2
    eb60:	4618      	mov	r0, r3
    eb62:	f7ff fd23 	bl	e5ac <le_create_conn_cancel>
	return 0;
    eb66:	2000      	movs	r0, #0
		break;
    eb68:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    eb6a:	4611      	mov	r1, r2
    eb6c:	4618      	mov	r0, r3
    eb6e:	f7ff fd2c 	bl	e5ca <le_set_host_chan_classif>
	return 0;
    eb72:	2000      	movs	r0, #0
		break;
    eb74:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    eb76:	4611      	mov	r1, r2
    eb78:	4618      	mov	r0, r3
    eb7a:	f7ff fd36 	bl	e5ea <le_start_encryption>
	return 0;
    eb7e:	2000      	movs	r0, #0
		break;
    eb80:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    eb82:	4611      	mov	r1, r2
    eb84:	4618      	mov	r0, r3
    eb86:	f7ff fd41 	bl	e60c <le_ltk_req_reply>
	return 0;
    eb8a:	2000      	movs	r0, #0
		break;
    eb8c:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    eb8e:	4611      	mov	r1, r2
    eb90:	4618      	mov	r0, r3
    eb92:	f7ff fd51 	bl	e638 <le_ltk_req_neg_reply>
	return 0;
    eb96:	2000      	movs	r0, #0
		break;
    eb98:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    eb9a:	4611      	mov	r1, r2
    eb9c:	4618      	mov	r0, r3
    eb9e:	f7ff fd61 	bl	e664 <le_read_chan_map>
	return 0;
    eba2:	2000      	movs	r0, #0
		break;
    eba4:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    eba6:	4611      	mov	r1, r2
    eba8:	4618      	mov	r0, r3
    ebaa:	f7ff fd71 	bl	e690 <le_read_remote_features>
	return 0;
    ebae:	2000      	movs	r0, #0
		break;
    ebb0:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    ebb2:	4611      	mov	r1, r2
    ebb4:	4618      	mov	r0, r3
    ebb6:	f7f9 f9c1 	bl	7f3c <le_conn_update>
	return 0;
    ebba:	2000      	movs	r0, #0
		break;
    ebbc:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    ebbe:	4611      	mov	r1, r2
    ebc0:	4618      	mov	r0, r3
    ebc2:	f7f7 fe47 	bl	6854 <le_conn_param_req_reply>
	return 0;
    ebc6:	2000      	movs	r0, #0
		break;
    ebc8:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    ebca:	4611      	mov	r1, r2
    ebcc:	4618      	mov	r0, r3
    ebce:	f7ff fd6b 	bl	e6a8 <le_conn_param_req_neg_reply>
	return 0;
    ebd2:	2000      	movs	r0, #0
		break;
    ebd4:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    ebd6:	4611      	mov	r1, r2
    ebd8:	4618      	mov	r0, r3
    ebda:	f7ff fd80 	bl	e6de <le_set_data_len>
	return 0;
    ebde:	2000      	movs	r0, #0
		break;
    ebe0:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    ebe2:	4611      	mov	r1, r2
    ebe4:	4618      	mov	r0, r3
    ebe6:	f7ff fd90 	bl	e70a <le_read_default_data_len>
	return 0;
    ebea:	2000      	movs	r0, #0
		break;
    ebec:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    ebee:	4611      	mov	r1, r2
    ebf0:	4618      	mov	r0, r3
    ebf2:	f7ff fd97 	bl	e724 <le_write_default_data_len>
	return 0;
    ebf6:	2000      	movs	r0, #0
		break;
    ebf8:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    ebfa:	4611      	mov	r1, r2
    ebfc:	4618      	mov	r0, r3
    ebfe:	f7ff fda3 	bl	e748 <le_read_max_data_len>
	return 0;
    ec02:	2000      	movs	r0, #0
		break;
    ec04:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    ec06:	4611      	mov	r1, r2
    ec08:	4618      	mov	r0, r3
    ec0a:	f7ff fde7 	bl	e7dc <le_read_phy>
	return 0;
    ec0e:	2000      	movs	r0, #0
		break;
    ec10:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    ec12:	4611      	mov	r1, r2
    ec14:	4618      	mov	r0, r3
    ec16:	f7ff fe0c 	bl	e832 <le_set_default_phy>
	return 0;
    ec1a:	2000      	movs	r0, #0
		break;
    ec1c:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    ec1e:	4611      	mov	r1, r2
    ec20:	4618      	mov	r0, r3
    ec22:	f7ff fe23 	bl	e86c <le_set_phy>
	return 0;
    ec26:	2000      	movs	r0, #0
		break;
    ec28:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    ec2a:	4611      	mov	r1, r2
    ec2c:	4618      	mov	r0, r3
    ec2e:	f7ff fe40 	bl	e8b2 <le_add_dev_to_rl>
	return 0;
    ec32:	2000      	movs	r0, #0
		break;
    ec34:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    ec36:	4611      	mov	r1, r2
    ec38:	4618      	mov	r0, r3
    ec3a:	f7ff fe49 	bl	e8d0 <le_rem_dev_from_rl>
	return 0;
    ec3e:	2000      	movs	r0, #0
		break;
    ec40:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    ec42:	4611      	mov	r1, r2
    ec44:	4618      	mov	r0, r3
    ec46:	f7ff fe4f 	bl	e8e8 <le_clear_rl>
	return 0;
    ec4a:	2000      	movs	r0, #0
		break;
    ec4c:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    ec4e:	4611      	mov	r1, r2
    ec50:	4618      	mov	r0, r3
    ec52:	f7ff fe53 	bl	e8fc <le_read_rl_size>
	return 0;
    ec56:	2000      	movs	r0, #0
		break;
    ec58:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    ec5a:	4611      	mov	r1, r2
    ec5c:	4618      	mov	r0, r3
    ec5e:	f7ff fe59 	bl	e914 <le_read_peer_rpa>
	return 0;
    ec62:	2000      	movs	r0, #0
		break;
    ec64:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    ec66:	4611      	mov	r1, r2
    ec68:	4618      	mov	r0, r3
    ec6a:	f7ff fe67 	bl	e93c <le_read_local_rpa>
	return 0;
    ec6e:	2000      	movs	r0, #0
		break;
    ec70:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    ec72:	4611      	mov	r1, r2
    ec74:	4618      	mov	r0, r3
    ec76:	f7ff fe75 	bl	e964 <le_set_addr_res_enable>
	return 0;
    ec7a:	2000      	movs	r0, #0
		break;
    ec7c:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    ec7e:	4611      	mov	r1, r2
    ec80:	4618      	mov	r0, r3
    ec82:	f7ff fe7d 	bl	e980 <le_set_rpa_timeout>
	return 0;
    ec86:	2000      	movs	r0, #0
		break;
    ec88:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    ec8a:	4611      	mov	r1, r2
    ec8c:	4618      	mov	r0, r3
    ec8e:	f7ff fe84 	bl	e99a <le_set_privacy_mode>
	return 0;
    ec92:	2000      	movs	r0, #0
		break;
    ec94:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    ec96:	4611      	mov	r1, r2
    ec98:	4618      	mov	r0, r3
    ec9a:	f7ff fe8b 	bl	e9b4 <le_read_tx_power>
	return 0;
    ec9e:	2000      	movs	r0, #0
		break;
    eca0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    eca2:	f06f 0015 	mvn.w	r0, #21
}
    eca6:	bd08      	pop	{r3, pc}

0000eca8 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    eca8:	4b0e      	ldr	r3, [pc, #56]	; (ece4 <data_buf_overflow+0x3c>)
    ecaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    ecb2:	2300      	movs	r3, #0
    ecb4:	4313      	orrs	r3, r2
    ecb6:	d100      	bne.n	ecba <data_buf_overflow+0x12>
    ecb8:	4770      	bx	lr
{
    ecba:	b510      	push	{r4, lr}
    ecbc:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ecbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecc2:	2001      	movs	r0, #1
    ecc4:	f7f8 fa1c 	bl	7100 <bt_buf_get_rx>
    ecc8:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    ecca:	2201      	movs	r2, #1
    eccc:	211a      	movs	r1, #26
    ecce:	f7fe febf 	bl	da50 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    ecd2:	6820      	ldr	r0, [r4, #0]
    ecd4:	2101      	movs	r1, #1
    ecd6:	3008      	adds	r0, #8
    ecd8:	f00c fbe0 	bl	1b49c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    ecdc:	2301      	movs	r3, #1
    ecde:	7003      	strb	r3, [r0, #0]
    ece0:	bd10      	pop	{r4, pc}
    ece2:	bf00      	nop
    ece4:	2000c0f8 	.word	0x2000c0f8

0000ece8 <encode_data_ctrl>:
{
    ece8:	b510      	push	{r4, lr}
    ecea:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    ecec:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    ecee:	78e0      	ldrb	r0, [r4, #3]
    ecf0:	3803      	subs	r0, #3
    ecf2:	2812      	cmp	r0, #18
    ecf4:	d82e      	bhi.n	ed54 <encode_data_ctrl+0x6c>
    ecf6:	e8df f000 	tbb	[pc, r0]
    ecfa:	2d0a      	.short	0x2d0a
    ecfc:	2d290e2d 	.word	0x2d290e2d
    ed00:	192d2d12 	.word	0x192d2d12
    ed04:	2d212d1d 	.word	0x2d212d1d
    ed08:	252d2d2d 	.word	0x252d2d2d
    ed0c:	25          	.byte	0x25
    ed0d:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    ed0e:	4620      	mov	r0, r4
    ed10:	f7f7 feec 	bl	6aec <le_ltk_request>
		break;
    ed14:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    ed16:	2000      	movs	r0, #0
    ed18:	f7ff f826 	bl	dd68 <encrypt_change>
		break;
    ed1c:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    ed1e:	4613      	mov	r3, r2
    ed20:	460a      	mov	r2, r1
    ed22:	4621      	mov	r1, r4
    ed24:	2000      	movs	r0, #0
    ed26:	f7f7 fceb 	bl	6700 <le_remote_feat_complete>
		break;
    ed2a:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    ed2c:	4620      	mov	r0, r4
    ed2e:	f7fe fff5 	bl	dd1c <remote_version_info>
		break;
    ed32:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    ed34:	7920      	ldrb	r0, [r4, #4]
    ed36:	f7ff f817 	bl	dd68 <encrypt_change>
		break;
    ed3a:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    ed3c:	4620      	mov	r0, r4
    ed3e:	f7f7 fdd7 	bl	68f0 <le_conn_param_req>
		break;
    ed42:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    ed44:	4620      	mov	r0, r4
    ed46:	f7f6 fa43 	bl	51d0 <le_data_len_change>
		break;
    ed4a:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    ed4c:	4620      	mov	r0, r4
    ed4e:	f7ff fb66 	bl	e41e <le_unknown_rsp>
		break;
    ed52:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    ed54:	4040      	eors	r0, r0
    ed56:	f380 8811 	msr	BASEPRI, r0
    ed5a:	f04f 0004 	mov.w	r0, #4
    ed5e:	df02      	svc	2

0000ed60 <le_advertising_report>:
{
    ed60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed64:	b082      	sub	sp, #8
    ed66:	4605      	mov	r5, r0
    ed68:	460e      	mov	r6, r1
    ed6a:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    ed6c:	4b90      	ldr	r3, [pc, #576]	; (efb0 <le_advertising_report+0x250>)
    ed6e:	e893 0003 	ldmia.w	r3, {r0, r1}
    ed72:	9000      	str	r0, [sp, #0]
    ed74:	f8ad 1004 	strh.w	r1, [sp, #4]
    ed78:	0c09      	lsrs	r1, r1, #16
    ed7a:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    ed7e:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    ed80:	330b      	adds	r3, #11
    ed82:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    ed86:	782b      	ldrb	r3, [r5, #0]
    ed88:	f013 0f40 	tst.w	r3, #64	; 0x40
    ed8c:	d125      	bne.n	edda <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    ed8e:	4b89      	ldr	r3, [pc, #548]	; (efb4 <le_advertising_report+0x254>)
    ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed94:	2200      	movs	r2, #0
    ed96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ed9a:	4313      	orrs	r3, r2
    ed9c:	f000 80b0 	beq.w	ef00 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    eda0:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    eda2:	330c      	adds	r3, #12
    eda4:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    eda6:	b947      	cbnz	r7, edba <le_advertising_report+0x5a>
    eda8:	4b83      	ldr	r3, [pc, #524]	; (efb8 <le_advertising_report+0x258>)
    edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    edae:	f002 0202 	and.w	r2, r2, #2
    edb2:	2300      	movs	r3, #0
    edb4:	4313      	orrs	r3, r2
    edb6:	f000 80a3 	beq.w	ef00 <le_advertising_report+0x1a0>
    edba:	b147      	cbz	r7, edce <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    edbc:	4b7e      	ldr	r3, [pc, #504]	; (efb8 <le_advertising_report+0x258>)
    edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    edc2:	f002 020b 	and.w	r2, r2, #11
    edc6:	2300      	movs	r3, #0
    edc8:	4313      	orrs	r3, r2
    edca:	f000 8099 	beq.w	ef00 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    edce:	4b7b      	ldr	r3, [pc, #492]	; (efbc <le_advertising_report+0x25c>)
    edd0:	681b      	ldr	r3, [r3, #0]
    edd2:	2b00      	cmp	r3, #0
    edd4:	db08      	blt.n	ede8 <le_advertising_report+0x88>
    edd6:	2400      	movs	r4, #0
    edd8:	e009      	b.n	edee <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    edda:	1cab      	adds	r3, r5, #2
    eddc:	4642      	mov	r2, r8
    edde:	2100      	movs	r1, #0
    ede0:	4608      	mov	r0, r1
    ede2:	f00b fea7 	bl	1ab34 <ll_rl_crpa_set>
    ede6:	e7d2      	b.n	ed8e <le_advertising_report+0x2e>
	return false;
    ede8:	2300      	movs	r3, #0
    edea:	e054      	b.n	ee96 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    edec:	3401      	adds	r4, #1
    edee:	4b73      	ldr	r3, [pc, #460]	; (efbc <le_advertising_report+0x25c>)
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	429c      	cmp	r4, r3
    edf4:	da26      	bge.n	ee44 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    edf6:	4972      	ldr	r1, [pc, #456]	; (efc0 <le_advertising_report+0x260>)
    edf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    edfc:	2206      	movs	r2, #6
    edfe:	3102      	adds	r1, #2
    ee00:	1ca8      	adds	r0, r5, #2
    ee02:	f01b fd89 	bl	2a918 <memcmp>
    ee06:	2800      	cmp	r0, #0
    ee08:	d1f0      	bne.n	edec <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    ee0a:	782b      	ldrb	r3, [r5, #0]
    ee0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee10:	4a6b      	ldr	r2, [pc, #428]	; (efc0 <le_advertising_report+0x260>)
    ee12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    ee16:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    ee18:	4293      	cmp	r3, r2
    ee1a:	d1e7      	bne.n	edec <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    ee1c:	4b68      	ldr	r3, [pc, #416]	; (efc0 <le_advertising_report+0x260>)
    ee1e:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    ee22:	782b      	ldrb	r3, [r5, #0]
    ee24:	f003 030f 	and.w	r3, r3, #15
    ee28:	fa22 f103 	lsr.w	r1, r2, r3
    ee2c:	f011 0f01 	tst.w	r1, #1
    ee30:	d171      	bne.n	ef16 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    ee32:	2101      	movs	r1, #1
    ee34:	fa01 f303 	lsl.w	r3, r1, r3
    ee38:	431a      	orrs	r2, r3
    ee3a:	4b61      	ldr	r3, [pc, #388]	; (efc0 <le_advertising_report+0x260>)
    ee3c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    ee40:	2300      	movs	r3, #0
    ee42:	e028      	b.n	ee96 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    ee44:	f8df a17c 	ldr.w	sl, [pc, #380]	; efc4 <le_advertising_report+0x264>
    ee48:	f8da 0000 	ldr.w	r0, [sl]
    ee4c:	4c5c      	ldr	r4, [pc, #368]	; (efc0 <le_advertising_report+0x260>)
    ee4e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ee52:	2206      	movs	r2, #6
    ee54:	1ca9      	adds	r1, r5, #2
    ee56:	3002      	adds	r0, #2
    ee58:	f7f1 fa32 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    ee5c:	f8da 3000 	ldr.w	r3, [sl]
    ee60:	782a      	ldrb	r2, [r5, #0]
    ee62:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ee66:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ee6a:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    ee6c:	782a      	ldrb	r2, [r5, #0]
    ee6e:	f002 010f 	and.w	r1, r2, #15
    ee72:	2201      	movs	r2, #1
    ee74:	408a      	lsls	r2, r1
    ee76:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    ee7a:	4a50      	ldr	r2, [pc, #320]	; (efbc <le_advertising_report+0x25c>)
    ee7c:	6812      	ldr	r2, [r2, #0]
    ee7e:	2a0f      	cmp	r2, #15
    ee80:	dc41      	bgt.n	ef06 <le_advertising_report+0x1a6>
			dup_count++;
    ee82:	3201      	adds	r2, #1
    ee84:	4b4d      	ldr	r3, [pc, #308]	; (efbc <le_advertising_report+0x25c>)
    ee86:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    ee88:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    ee8c:	4b4d      	ldr	r3, [pc, #308]	; (efc4 <le_advertising_report+0x264>)
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	2b10      	cmp	r3, #16
    ee92:	d03c      	beq.n	ef0e <le_advertising_report+0x1ae>
	return false;
    ee94:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    ee96:	bb9b      	cbnz	r3, ef00 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    ee98:	782b      	ldrb	r3, [r5, #0]
    ee9a:	f003 030f 	and.w	r3, r3, #15
    ee9e:	2b01      	cmp	r3, #1
    eea0:	d03b      	beq.n	ef1a <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    eea2:	786c      	ldrb	r4, [r5, #1]
    eea4:	3c06      	subs	r4, #6
    eea6:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    eea8:	786a      	ldrb	r2, [r5, #1]
    eeaa:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    eeac:	f816 a002 	ldrb.w	sl, [r6, r2]
    eeb0:	f1ca 0a00 	rsb	sl, sl, #0
    eeb4:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    eeb8:	2f00      	cmp	r7, #0
    eeba:	d041      	beq.n	ef40 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    eebc:	2b01      	cmp	r3, #1
    eebe:	d12e      	bne.n	ef1e <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    eec0:	2211      	movs	r2, #17
    eec2:	210b      	movs	r1, #11
    eec4:	4648      	mov	r0, r9
    eec6:	f7fe fe8f 	bl	dbe8 <meta_evt>
    eeca:	4604      	mov	r4, r0
		drp->num_reports = 1;
    eecc:	2301      	movs	r3, #1
    eece:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    eed0:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    eed2:	f00b fce3 	bl	1a89c <ll_rl_size_get>
    eed6:	4580      	cmp	r8, r0
    eed8:	d227      	bcs.n	ef2a <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    eeda:	1ce2      	adds	r2, r4, #3
    eedc:	1ca1      	adds	r1, r4, #2
    eede:	4640      	mov	r0, r8
    eee0:	f00b fa84 	bl	1a3ec <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    eee4:	78a3      	ldrb	r3, [r4, #2]
    eee6:	3302      	adds	r3, #2
    eee8:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    eeea:	2301      	movs	r3, #1
    eeec:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    eeee:	2206      	movs	r2, #6
    eef0:	f105 0108 	add.w	r1, r5, #8
    eef4:	f104 000a 	add.w	r0, r4, #10
    eef8:	f7f1 f9e2 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    eefc:	f884 a010 	strb.w	sl, [r4, #16]
}
    ef00:	b002      	add	sp, #8
    ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    ef06:	3301      	adds	r3, #1
    ef08:	4a2e      	ldr	r2, [pc, #184]	; (efc4 <le_advertising_report+0x264>)
    ef0a:	6013      	str	r3, [r2, #0]
    ef0c:	e7be      	b.n	ee8c <le_advertising_report+0x12c>
			dup_curr = 0;
    ef0e:	2300      	movs	r3, #0
    ef10:	4a2c      	ldr	r2, [pc, #176]	; (efc4 <le_advertising_report+0x264>)
    ef12:	6013      	str	r3, [r2, #0]
    ef14:	e7bf      	b.n	ee96 <le_advertising_report+0x136>
					return true;
    ef16:	2301      	movs	r3, #1
    ef18:	e7bd      	b.n	ee96 <le_advertising_report+0x136>
		data_len = 0;
    ef1a:	2400      	movs	r4, #0
    ef1c:	e7c4      	b.n	eea8 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    ef1e:	4040      	eors	r0, r0
    ef20:	f380 8811 	msr	BASEPRI, r0
    ef24:	f04f 0004 	mov.w	r0, #4
    ef28:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    ef2a:	4629      	mov	r1, r5
    ef2c:	f811 3b02 	ldrb.w	r3, [r1], #2
    ef30:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ef34:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    ef36:	2206      	movs	r2, #6
    ef38:	1ce0      	adds	r0, r4, #3
    ef3a:	f7f1 f9c1 	bl	2c0 <memcpy>
    ef3e:	e7d4      	b.n	eeea <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ef40:	f104 020b 	add.w	r2, r4, #11
    ef44:	b2d2      	uxtb	r2, r2
    ef46:	2102      	movs	r1, #2
    ef48:	4648      	mov	r0, r9
    ef4a:	f7fe fe4d 	bl	dbe8 <meta_evt>
    ef4e:	4607      	mov	r7, r0
	sep->num_reports = 1;
    ef50:	2301      	movs	r3, #1
    ef52:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    ef54:	782b      	ldrb	r3, [r5, #0]
    ef56:	f003 030f 	and.w	r3, r3, #15
    ef5a:	aa02      	add	r2, sp, #8
    ef5c:	4413      	add	r3, r2
    ef5e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    ef62:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    ef64:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    ef66:	330b      	adds	r3, #11
    ef68:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    ef6a:	f00b fc97 	bl	1a89c <ll_rl_size_get>
    ef6e:	4286      	cmp	r6, r0
    ef70:	d212      	bcs.n	ef98 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    ef72:	1cfa      	adds	r2, r7, #3
    ef74:	1cb9      	adds	r1, r7, #2
    ef76:	4630      	mov	r0, r6
    ef78:	f00b fa38 	bl	1a3ec <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    ef7c:	78bb      	ldrb	r3, [r7, #2]
    ef7e:	3302      	adds	r3, #2
    ef80:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    ef82:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    ef84:	370a      	adds	r7, #10
    ef86:	4622      	mov	r2, r4
    ef88:	f105 0108 	add.w	r1, r5, #8
    ef8c:	4638      	mov	r0, r7
    ef8e:	f7f1 f997 	bl	2c0 <memcpy>
	*prssi = rssi;
    ef92:	f807 a004 	strb.w	sl, [r7, r4]
    ef96:	e7b3      	b.n	ef00 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    ef98:	4629      	mov	r1, r5
    ef9a:	f811 3b02 	ldrb.w	r3, [r1], #2
    ef9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    efa2:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    efa4:	2206      	movs	r2, #6
    efa6:	1cf8      	adds	r0, r7, #3
    efa8:	f7f1 f98a 	bl	2c0 <memcpy>
    efac:	e7e9      	b.n	ef82 <le_advertising_report+0x222>
    efae:	bf00      	nop
    efb0:	0002ede8 	.word	0x0002ede8
    efb4:	2000c0f8 	.word	0x2000c0f8
    efb8:	2000c100 	.word	0x2000c100
    efbc:	20000fa0 	.word	0x20000fa0
    efc0:	20000fa8 	.word	0x20000fa8
    efc4:	20000fa4 	.word	0x20000fa4

0000efc8 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    efc8:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    efca:	7803      	ldrb	r3, [r0, #0]
    efcc:	f003 030f 	and.w	r3, r3, #15
    efd0:	2b07      	cmp	r3, #7
    efd2:	d000      	beq.n	efd6 <le_adv_ext_report+0xe>
    efd4:	4770      	bx	lr
    efd6:	2a00      	cmp	r2, #0
    efd8:	d0fc      	beq.n	efd4 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    efda:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    efdc:	7883      	ldrb	r3, [r0, #2]
    efde:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    efe2:	d0f7      	beq.n	efd4 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    efe4:	78c3      	ldrb	r3, [r0, #3]
    efe6:	f013 0f01 	tst.w	r3, #1
    efea:	d0f3      	beq.n	efd4 <le_adv_ext_report+0xc>
{
    efec:	b570      	push	{r4, r5, r6, lr}
    efee:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    eff0:	7803      	ldrb	r3, [r0, #0]
    eff2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eff6:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    effa:	2206      	movs	r2, #6
    effc:	f10d 0019 	add.w	r0, sp, #25
    f000:	f7f1 f95e 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f004:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f008:	2b03      	cmp	r3, #3
    f00a:	d830      	bhi.n	f06e <le_adv_ext_report+0xa6>
    f00c:	e8df f003 	tbb	[pc, r3]
    f010:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f014:	4919      	ldr	r1, [pc, #100]	; (f07c <le_adv_ext_report+0xb4>)
    f016:	a808      	add	r0, sp, #32
    f018:	f01b fe40 	bl	2ac9c <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    f01c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    f020:	f89d 201d 	ldrb.w	r2, [sp, #29]
    f024:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    f028:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f02c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    f030:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f034:	ae08      	add	r6, sp, #32
    f036:	9605      	str	r6, [sp, #20]
    f038:	9504      	str	r5, [sp, #16]
    f03a:	9403      	str	r4, [sp, #12]
    f03c:	9002      	str	r0, [sp, #8]
    f03e:	9101      	str	r1, [sp, #4]
    f040:	9200      	str	r2, [sp, #0]
    f042:	4a0f      	ldr	r2, [pc, #60]	; (f080 <le_adv_ext_report+0xb8>)
    f044:	211b      	movs	r1, #27
    f046:	a80b      	add	r0, sp, #44	; 0x2c
    f048:	f7f4 f81c 	bl	3084 <snprintk>
}
    f04c:	b012      	add	sp, #72	; 0x48
    f04e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f050:	490c      	ldr	r1, [pc, #48]	; (f084 <le_adv_ext_report+0xbc>)
    f052:	a808      	add	r0, sp, #32
    f054:	f01b fe22 	bl	2ac9c <strcpy>
    f058:	e7e0      	b.n	f01c <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    f05a:	490b      	ldr	r1, [pc, #44]	; (f088 <le_adv_ext_report+0xc0>)
    f05c:	a808      	add	r0, sp, #32
    f05e:	f01b fe1d 	bl	2ac9c <strcpy>
    f062:	e7db      	b.n	f01c <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    f064:	4909      	ldr	r1, [pc, #36]	; (f08c <le_adv_ext_report+0xc4>)
    f066:	a808      	add	r0, sp, #32
    f068:	f01b fe18 	bl	2ac9c <strcpy>
    f06c:	e7d6      	b.n	f01c <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f06e:	4a08      	ldr	r2, [pc, #32]	; (f090 <le_adv_ext_report+0xc8>)
    f070:	210a      	movs	r1, #10
    f072:	a808      	add	r0, sp, #32
    f074:	f7f4 f806 	bl	3084 <snprintk>
    f078:	e7d0      	b.n	f01c <le_adv_ext_report+0x54>
    f07a:	bf00      	nop
    f07c:	000319a8 	.word	0x000319a8
    f080:	000319d8 	.word	0x000319d8
    f084:	000319b0 	.word	0x000319b0
    f088:	000319b8 	.word	0x000319b8
    f08c:	000319c4 	.word	0x000319c4
    f090:	000319d0 	.word	0x000319d0

0000f094 <le_adv_ext_1M_report>:
{
    f094:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    f096:	2301      	movs	r3, #1
    f098:	f7ff ff96 	bl	efc8 <le_adv_ext_report>
    f09c:	bd08      	pop	{r3, pc}

0000f09e <le_adv_ext_coded_report>:
{
    f09e:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    f0a0:	2304      	movs	r3, #4
    f0a2:	f7ff ff91 	bl	efc8 <le_adv_ext_report>
    f0a6:	bd08      	pop	{r3, pc}

0000f0a8 <le_scan_req_received>:
{
    f0a8:	b570      	push	{r4, r5, r6, lr}
    f0aa:	b092      	sub	sp, #72	; 0x48
    f0ac:	4604      	mov	r4, r0
    f0ae:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f0b0:	4b33      	ldr	r3, [pc, #204]	; (f180 <le_scan_req_received+0xd8>)
    f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0b6:	2200      	movs	r2, #0
    f0b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f0bc:	4313      	orrs	r3, r2
    f0be:	d007      	beq.n	f0d0 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    f0c0:	4b30      	ldr	r3, [pc, #192]	; (f184 <le_scan_req_received+0xdc>)
    f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0c6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    f0ca:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f0cc:	4313      	orrs	r3, r2
    f0ce:	d146      	bne.n	f15e <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    f0d0:	4621      	mov	r1, r4
    f0d2:	f811 3b02 	ldrb.w	r3, [r1], #2
    f0d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f0da:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    f0de:	2206      	movs	r2, #6
    f0e0:	f10d 0019 	add.w	r0, sp, #25
    f0e4:	f7f1 f8ec 	bl	2c0 <memcpy>
	switch (addr->type) {
    f0e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f0ec:	2b03      	cmp	r3, #3
    f0ee:	d830      	bhi.n	f152 <le_scan_req_received+0xaa>
    f0f0:	e8df f003 	tbb	[pc, r3]
    f0f4:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    f0f8:	4923      	ldr	r1, [pc, #140]	; (f188 <le_scan_req_received+0xe0>)
    f0fa:	a808      	add	r0, sp, #32
    f0fc:	f01b fdce 	bl	2ac9c <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    f100:	f89d 301e 	ldrb.w	r3, [sp, #30]
    f104:	f89d 201d 	ldrb.w	r2, [sp, #29]
    f108:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    f10c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f110:	f89d 401a 	ldrb.w	r4, [sp, #26]
    f114:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f118:	ae08      	add	r6, sp, #32
    f11a:	9605      	str	r6, [sp, #20]
    f11c:	9504      	str	r5, [sp, #16]
    f11e:	9403      	str	r4, [sp, #12]
    f120:	9002      	str	r0, [sp, #8]
    f122:	9101      	str	r1, [sp, #4]
    f124:	9200      	str	r2, [sp, #0]
    f126:	4a19      	ldr	r2, [pc, #100]	; (f18c <le_scan_req_received+0xe4>)
    f128:	211b      	movs	r1, #27
    f12a:	a80b      	add	r0, sp, #44	; 0x2c
    f12c:	f7f3 ffaa 	bl	3084 <snprintk>
}
    f130:	b012      	add	sp, #72	; 0x48
    f132:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f134:	4916      	ldr	r1, [pc, #88]	; (f190 <le_scan_req_received+0xe8>)
    f136:	a808      	add	r0, sp, #32
    f138:	f01b fdb0 	bl	2ac9c <strcpy>
    f13c:	e7e0      	b.n	f100 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    f13e:	4915      	ldr	r1, [pc, #84]	; (f194 <le_scan_req_received+0xec>)
    f140:	a808      	add	r0, sp, #32
    f142:	f01b fdab 	bl	2ac9c <strcpy>
    f146:	e7db      	b.n	f100 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    f148:	4913      	ldr	r1, [pc, #76]	; (f198 <le_scan_req_received+0xf0>)
    f14a:	a808      	add	r0, sp, #32
    f14c:	f01b fda6 	bl	2ac9c <strcpy>
    f150:	e7d6      	b.n	f100 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f152:	4a12      	ldr	r2, [pc, #72]	; (f19c <le_scan_req_received+0xf4>)
    f154:	210a      	movs	r1, #10
    f156:	a808      	add	r0, sp, #32
    f158:	f7f3 ff94 	bl	3084 <snprintk>
    f15c:	e7d0      	b.n	f100 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    f15e:	2208      	movs	r2, #8
    f160:	2113      	movs	r1, #19
    f162:	f7fe fd41 	bl	dbe8 <meta_evt>
	sep->handle = 0;
    f166:	2300      	movs	r3, #0
    f168:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    f16a:	4621      	mov	r1, r4
    f16c:	f811 3b02 	ldrb.w	r3, [r1], #2
    f170:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f174:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    f176:	2206      	movs	r2, #6
    f178:	3002      	adds	r0, #2
    f17a:	f7f1 f8a1 	bl	2c0 <memcpy>
    f17e:	e7d7      	b.n	f130 <le_scan_req_received+0x88>
    f180:	2000c0f8 	.word	0x2000c0f8
    f184:	2000c100 	.word	0x2000c100
    f188:	000319a8 	.word	0x000319a8
    f18c:	000319d8 	.word	0x000319d8
    f190:	000319b0 	.word	0x000319b0
    f194:	000319b8 	.word	0x000319b8
    f198:	000319c4 	.word	0x000319c4
    f19c:	000319d0 	.word	0x000319d0

0000f1a0 <encode_control>:
{
    f1a0:	b510      	push	{r4, lr}
    f1a2:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    f1a4:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    f1a6:	7903      	ldrb	r3, [r0, #4]
    f1a8:	3b02      	subs	r3, #2
    f1aa:	2b0a      	cmp	r3, #10
    f1ac:	d837      	bhi.n	f21e <encode_control+0x7e>
    f1ae:	e8df f003 	tbb	[pc, r3]
    f1b2:	0b06      	.short	0x0b06
    f1b4:	1e1a1510 	.word	0x1e1a1510
    f1b8:	2e2a2622 	.word	0x2e2a2622
    f1bc:	32          	.byte	0x32
    f1bd:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    f1be:	4601      	mov	r1, r0
    f1c0:	4620      	mov	r0, r4
    f1c2:	f7ff fdcd 	bl	ed60 <le_advertising_report>
		break;
    f1c6:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    f1c8:	4601      	mov	r1, r0
    f1ca:	4620      	mov	r0, r4
    f1cc:	f7ff ff62 	bl	f094 <le_adv_ext_1M_report>
		break;
    f1d0:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    f1d2:	4601      	mov	r1, r0
    f1d4:	4620      	mov	r0, r4
    f1d6:	f7ff ff62 	bl	f09e <le_adv_ext_coded_report>
		break;
    f1da:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    f1dc:	4601      	mov	r1, r0
    f1de:	4620      	mov	r0, r4
    f1e0:	f7ff ff62 	bl	f0a8 <le_scan_req_received>
		break;
    f1e4:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    f1e6:	4620      	mov	r0, r4
    f1e8:	f7f7 f99e 	bl	6528 <le_conn_complete>
		break;
    f1ec:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    f1ee:	4620      	mov	r0, r4
    f1f0:	f7fe fd32 	bl	dc58 <disconn_complete>
		break;
    f1f4:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    f1f6:	4620      	mov	r0, r4
    f1f8:	f7f6 f832 	bl	5260 <le_conn_update_complete>
		break;
    f1fc:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    f1fe:	4620      	mov	r0, r4
    f200:	f7fe fd52 	bl	dca8 <enc_refresh_complete>
		break;
    f204:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    f206:	4620      	mov	r0, r4
    f208:	f7fe fd6c 	bl	dce4 <auth_payload_timeout_exp>
		break;
    f20c:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    f20e:	4620      	mov	r0, r4
    f210:	f7fe fcfe 	bl	dc10 <le_chan_sel_algo>
		break;
    f214:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    f216:	4620      	mov	r0, r4
    f218:	f7ff faa6 	bl	e768 <le_phy_upd_complete>
		return;
    f21c:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    f21e:	4040      	eors	r0, r0
    f220:	f380 8811 	msr	BASEPRI, r0
    f224:	f04f 0004 	mov.w	r0, #4
    f228:	df02      	svc	2
	...

0000f22c <hci_cmd_handle>:
{
    f22c:	b510      	push	{r4, lr}
    f22e:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    f230:	2300      	movs	r3, #0
    f232:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    f234:	8983      	ldrh	r3, [r0, #12]
    f236:	2b02      	cmp	r3, #2
    f238:	d94a      	bls.n	f2d0 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    f23a:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    f23c:	8814      	ldrh	r4, [r2, #0]
    f23e:	4926      	ldr	r1, [pc, #152]	; (f2d8 <hci_cmd_handle+0xac>)
    f240:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    f242:	7892      	ldrb	r2, [r2, #2]
    f244:	4293      	cmp	r3, r2
    f246:	d345      	bcc.n	f2d4 <hci_cmd_handle+0xa8>
    f248:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    f24a:	2103      	movs	r1, #3
    f24c:	3008      	adds	r0, #8
    f24e:	f00c f972 	bl	1b536 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    f252:	4b21      	ldr	r3, [pc, #132]	; (f2d8 <hci_cmd_handle+0xac>)
    f254:	881b      	ldrh	r3, [r3, #0]
    f256:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    f25a:	0a9b      	lsrs	r3, r3, #10
    f25c:	2b04      	cmp	r3, #4
    f25e:	d01c      	beq.n	f29a <hci_cmd_handle+0x6e>
    f260:	d908      	bls.n	f274 <hci_cmd_handle+0x48>
    f262:	2b08      	cmp	r3, #8
    f264:	d023      	beq.n	f2ae <hci_cmd_handle+0x82>
    f266:	2b3f      	cmp	r3, #63	; 0x3f
    f268:	d026      	beq.n	f2b8 <hci_cmd_handle+0x8c>
    f26a:	2b05      	cmp	r3, #5
    f26c:	d01a      	beq.n	f2a4 <hci_cmd_handle+0x78>
		err = -EINVAL;
    f26e:	f06f 0015 	mvn.w	r0, #21
    f272:	e00c      	b.n	f28e <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    f274:	2b01      	cmp	r3, #1
    f276:	d006      	beq.n	f286 <hci_cmd_handle+0x5a>
    f278:	2b03      	cmp	r3, #3
    f27a:	d1f8      	bne.n	f26e <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    f27c:	aa01      	add	r2, sp, #4
    f27e:	4621      	mov	r1, r4
    f280:	f7fe fe29 	bl	ded6 <ctrl_bb_cmd_handle>
		break;
    f284:	e003      	b.n	f28e <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    f286:	aa01      	add	r2, sp, #4
    f288:	4621      	mov	r1, r4
    f28a:	f7fe fd9b 	bl	ddc4 <link_control_cmd_handle>
	if (err == -EINVAL) {
    f28e:	f110 0f16 	cmn.w	r0, #22
    f292:	d016      	beq.n	f2c2 <hci_cmd_handle+0x96>
	return evt;
    f294:	9801      	ldr	r0, [sp, #4]
}
    f296:	b002      	add	sp, #8
    f298:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    f29a:	aa01      	add	r2, sp, #4
    f29c:	4621      	mov	r1, r4
    f29e:	f7fe ffde 	bl	e25e <info_cmd_handle>
		break;
    f2a2:	e7f4      	b.n	f28e <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    f2a4:	aa01      	add	r2, sp, #4
    f2a6:	4621      	mov	r1, r4
    f2a8:	f7fe fbcf 	bl	da4a <status_cmd_handle>
		break;
    f2ac:	e7ef      	b.n	f28e <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    f2ae:	aa01      	add	r2, sp, #4
    f2b0:	4621      	mov	r1, r4
    f2b2:	f7ff fb8c 	bl	e9ce <controller_cmd_handle>
		break;
    f2b6:	e7ea      	b.n	f28e <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    f2b8:	aa01      	add	r2, sp, #4
    f2ba:	4621      	mov	r1, r4
    f2bc:	f7ff f876 	bl	e3ac <vendor_cmd_handle>
		break;
    f2c0:	e7e5      	b.n	f28e <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    f2c2:	2101      	movs	r1, #1
    f2c4:	a801      	add	r0, sp, #4
    f2c6:	f7fe fbf5 	bl	dab4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    f2ca:	2301      	movs	r3, #1
    f2cc:	7003      	strb	r3, [r0, #0]
    f2ce:	e7e1      	b.n	f294 <hci_cmd_handle+0x68>
		return NULL;
    f2d0:	2000      	movs	r0, #0
    f2d2:	e7e0      	b.n	f296 <hci_cmd_handle+0x6a>
		return NULL;
    f2d4:	2000      	movs	r0, #0
    f2d6:	e7de      	b.n	f296 <hci_cmd_handle+0x6a>
    f2d8:	20000f98 	.word	0x20000f98

0000f2dc <hci_acl_handle>:
{
    f2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    f2e0:	2300      	movs	r3, #0
    f2e2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    f2e4:	8983      	ldrh	r3, [r0, #12]
    f2e6:	2b03      	cmp	r3, #3
    f2e8:	d93e      	bls.n	f368 <hci_acl_handle+0x8c>
    f2ea:	4689      	mov	r9, r1
    f2ec:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    f2ee:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    f2f2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    f2f6:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    f2f8:	2104      	movs	r1, #4
    f2fa:	f00c f91c 	bl	1b536 <net_buf_simple_pull>
	if (buf->len < len) {
    f2fe:	89a3      	ldrh	r3, [r4, #12]
    f300:	4598      	cmp	r8, r3
    f302:	d835      	bhi.n	f370 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    f304:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    f306:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    f30a:	f009 ff1d 	bl	19148 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    f30e:	4605      	mov	r5, r0
    f310:	b140      	cbz	r0, f324 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    f312:	b177      	cbz	r7, f332 <hci_acl_handle+0x56>
    f314:	2f02      	cmp	r7, #2
    f316:	d00c      	beq.n	f332 <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    f318:	7903      	ldrb	r3, [r0, #4]
    f31a:	2201      	movs	r2, #1
    f31c:	f362 0301 	bfi	r3, r2, #0, #2
    f320:	7103      	strb	r3, [r0, #4]
    f322:	e00b      	b.n	f33c <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    f324:	4648      	mov	r0, r9
    f326:	f7ff fcbf 	bl	eca8 <data_buf_overflow>
		return -ENOBUFS;
    f32a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    f332:	792b      	ldrb	r3, [r5, #4]
    f334:	2202      	movs	r2, #2
    f336:	f362 0301 	bfi	r3, r2, #0, #2
    f33a:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    f33c:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    f340:	4642      	mov	r2, r8
    f342:	68a1      	ldr	r1, [r4, #8]
    f344:	1de8      	adds	r0, r5, #7
    f346:	f7f0 ffbb 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    f34a:	4629      	mov	r1, r5
    f34c:	4630      	mov	r0, r6
    f34e:	f009 ff0b 	bl	19168 <radio_tx_mem_enqueue>
    f352:	b910      	cbnz	r0, f35a <hci_acl_handle+0x7e>
	return 0;
    f354:	2000      	movs	r0, #0
}
    f356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    f35a:	4628      	mov	r0, r5
    f35c:	f009 fefc 	bl	19158 <radio_tx_mem_release>
		return -EINVAL;
    f360:	f06f 0015 	mvn.w	r0, #21
    f364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    f368:	f06f 0015 	mvn.w	r0, #21
    f36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    f370:	f06f 0015 	mvn.w	r0, #21
    f374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f378 <hci_acl_encode>:
{
    f378:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    f37a:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    f37c:	7a03      	ldrb	r3, [r0, #8]
    f37e:	f003 0303 	and.w	r3, r3, #3
    f382:	3b01      	subs	r3, #1
    f384:	2b01      	cmp	r3, #1
    f386:	d81d      	bhi.n	f3c4 <hci_acl_encode+0x4c>
    f388:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    f38a:	f101 0508 	add.w	r5, r1, #8
    f38e:	2104      	movs	r1, #4
    f390:	4628      	mov	r0, r5
    f392:	f00c f883 	bl	1b49c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    f396:	7a23      	ldrb	r3, [r4, #8]
    f398:	f003 0303 	and.w	r3, r3, #3
    f39c:	2b02      	cmp	r3, #2
    f39e:	d00e      	beq.n	f3be <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    f3a0:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    f3a4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    f3a6:	7a63      	ldrb	r3, [r4, #9]
    f3a8:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    f3aa:	7a61      	ldrb	r1, [r4, #9]
    f3ac:	4628      	mov	r0, r5
    f3ae:	f00c f875 	bl	1b49c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    f3b2:	7a62      	ldrb	r2, [r4, #9]
    f3b4:	f104 010b 	add.w	r1, r4, #11
    f3b8:	f7f0 ff82 	bl	2c0 <memcpy>
}
    f3bc:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    f3be:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    f3c2:	e7ef      	b.n	f3a4 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    f3c4:	4040      	eors	r0, r0
    f3c6:	f380 8811 	msr	BASEPRI, r0
    f3ca:	f04f 0004 	mov.w	r0, #4
    f3ce:	df02      	svc	2

0000f3d0 <hci_evt_encode>:
{
    f3d0:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    f3d2:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f3d6:	7903      	ldrb	r3, [r0, #4]
    f3d8:	2b01      	cmp	r3, #1
    f3da:	d004      	beq.n	f3e6 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    f3dc:	460a      	mov	r2, r1
    f3de:	4621      	mov	r1, r4
    f3e0:	f7ff fede 	bl	f1a0 <encode_control>
    f3e4:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    f3e6:	460a      	mov	r2, r1
    f3e8:	4621      	mov	r1, r4
    f3ea:	f7ff fc7d 	bl	ece8 <encode_data_ctrl>
    f3ee:	bd10      	pop	{r4, pc}

0000f3f0 <hci_num_cmplt_encode>:
{
    f3f0:	b570      	push	{r4, r5, r6, lr}
    f3f2:	4606      	mov	r6, r0
    f3f4:	460d      	mov	r5, r1
    f3f6:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    f3f8:	2205      	movs	r2, #5
    f3fa:	2113      	movs	r1, #19
    f3fc:	f7fe fb28 	bl	da50 <evt_create>
	ep = net_buf_add(buf, len);
    f400:	2105      	movs	r1, #5
    f402:	f106 0008 	add.w	r0, r6, #8
    f406:	f00c f849 	bl	1b49c <net_buf_simple_add>
	ep->num_handles = num_handles;
    f40a:	2301      	movs	r3, #1
    f40c:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    f40e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    f412:	f8a0 4003 	strh.w	r4, [r0, #3]
    f416:	bd70      	pop	{r4, r5, r6, pc}

0000f418 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f418:	7903      	ldrb	r3, [r0, #4]
    f41a:	2b01      	cmp	r3, #1
    f41c:	d011      	beq.n	f442 <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    f41e:	3b02      	subs	r3, #2
    f420:	2b0a      	cmp	r3, #10
    f422:	d80b      	bhi.n	f43c <hci_get_class+0x24>
    f424:	e8df f003 	tbb	[pc, r3]
    f428:	06060606 	.word	0x06060606
    f42c:	08080816 	.word	0x08080816
    f430:	0808      	.short	0x0808
    f432:	08          	.byte	0x08
    f433:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    f434:	2001      	movs	r0, #1
    f436:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    f438:	2002      	movs	r0, #2
    f43a:	4770      	bx	lr
			return -1;
    f43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f440:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    f442:	7a03      	ldrb	r3, [r0, #8]
    f444:	f003 0303 	and.w	r3, r3, #3
    f448:	2b03      	cmp	r3, #3
    f44a:	d001      	beq.n	f450 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    f44c:	2003      	movs	r0, #3
}
    f44e:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    f450:	2002      	movs	r0, #2
    f452:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    f454:	2000      	movs	r0, #0
    f456:	4770      	bx	lr

0000f458 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    f458:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    f45a:	4802      	ldr	r0, [pc, #8]	; (f464 <_hci_driver_init+0xc>)
    f45c:	f7f7 fcec 	bl	6e38 <bt_hci_driver_register>

	return 0;
}
    f460:	2000      	movs	r0, #0
    f462:	bd08      	pop	{r3, pc}
    f464:	00031a24 	.word	0x00031a24

0000f468 <acl_handle>:
{
    f468:	b510      	push	{r4, lr}
    f46a:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    f46c:	a901      	add	r1, sp, #4
    f46e:	f7ff ff35 	bl	f2dc <hci_acl_handle>
    f472:	4604      	mov	r4, r0
	if (evt) {
    f474:	9801      	ldr	r0, [sp, #4]
    f476:	b108      	cbz	r0, f47c <acl_handle+0x14>
		bt_recv_prio(evt);
    f478:	f7f7 fc8c 	bl	6d94 <bt_recv_prio>
}
    f47c:	4620      	mov	r0, r4
    f47e:	b002      	add	sp, #8
    f480:	bd10      	pop	{r4, pc}

0000f482 <cmd_handle>:
{
    f482:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    f484:	f7ff fed2 	bl	f22c <hci_cmd_handle>
	if (evt) {
    f488:	b108      	cbz	r0, f48e <cmd_handle+0xc>
		bt_recv_prio(evt);
    f48a:	f7f7 fc83 	bl	6d94 <bt_recv_prio>
}
    f48e:	2000      	movs	r0, #0
    f490:	bd08      	pop	{r3, pc}

0000f492 <hci_driver_send>:
{
    f492:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    f494:	8983      	ldrh	r3, [r0, #12]
    f496:	b1cb      	cbz	r3, f4cc <hci_driver_send+0x3a>
    f498:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    f49a:	f100 0310 	add.w	r3, r0, #16
    f49e:	89c2      	ldrh	r2, [r0, #14]
    f4a0:	4413      	add	r3, r2
    f4a2:	3303      	adds	r3, #3
    f4a4:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    f4a8:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    f4aa:	b13b      	cbz	r3, f4bc <hci_driver_send+0x2a>
    f4ac:	2b02      	cmp	r3, #2
    f4ae:	d110      	bne.n	f4d2 <hci_driver_send+0x40>
		err = acl_handle(buf);
    f4b0:	f7ff ffda 	bl	f468 <acl_handle>
    f4b4:	4605      	mov	r5, r0
	if (!err) {
    f4b6:	b12d      	cbz	r5, f4c4 <hci_driver_send+0x32>
}
    f4b8:	4628      	mov	r0, r5
    f4ba:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    f4bc:	f7ff ffe1 	bl	f482 <cmd_handle>
    f4c0:	4605      	mov	r5, r0
		break;
    f4c2:	e7f8      	b.n	f4b6 <hci_driver_send+0x24>
		net_buf_unref(buf);
    f4c4:	4620      	mov	r0, r4
    f4c6:	f00b ff9d 	bl	1b404 <net_buf_unref>
    f4ca:	e7f5      	b.n	f4b8 <hci_driver_send+0x26>
		return -EINVAL;
    f4cc:	f06f 0515 	mvn.w	r5, #21
    f4d0:	e7f2      	b.n	f4b8 <hci_driver_send+0x26>
		return -EINVAL;
    f4d2:	f06f 0515 	mvn.w	r5, #21
    f4d6:	e7ef      	b.n	f4b8 <hci_driver_send+0x26>

0000f4d8 <prio_recv_thread>:
{
    f4d8:	b530      	push	{r4, r5, lr}
    f4da:	b087      	sub	sp, #28
    f4dc:	e00f      	b.n	f4fe <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f4de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f4e2:	2001      	movs	r0, #1
    f4e4:	f7f7 fe0c 	bl	7100 <bt_buf_get_rx>
    f4e8:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f4ea:	4622      	mov	r2, r4
    f4ec:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    f4f0:	f7ff ff7e 	bl	f3f0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    f4f4:	4628      	mov	r0, r5
    f4f6:	f7f7 fc4d 	bl	6d94 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    f4fa:	f01a f975 	bl	297e8 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    f4fe:	f10d 0112 	add.w	r1, sp, #18
    f502:	a805      	add	r0, sp, #20
    f504:	f009 fd20 	bl	18f48 <radio_rx_get>
    f508:	4604      	mov	r4, r0
    f50a:	2800      	cmp	r0, #0
    f50c:	d1e7      	bne.n	f4de <prio_recv_thread+0x6>
		if (node_rx) {
    f50e:	9b05      	ldr	r3, [sp, #20]
    f510:	b133      	cbz	r3, f520 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    f512:	f00a fa59 	bl	199c8 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    f516:	9905      	ldr	r1, [sp, #20]
    f518:	481a      	ldr	r0, [pc, #104]	; (f584 <prio_recv_thread+0xac>)
    f51a:	f019 ff27 	bl	2936c <k_queue_append>
    f51e:	e7ee      	b.n	f4fe <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    f520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f524:	4818      	ldr	r0, [pc, #96]	; (f588 <prio_recv_thread+0xb0>)
    f526:	f01a facb 	bl	29ac0 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    f52a:	f01a fb15 	bl	29b58 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    f52e:	4b17      	ldr	r3, [pc, #92]	; (f58c <prio_recv_thread+0xb4>)
    f530:	681b      	ldr	r3, [r3, #0]
    f532:	1ac3      	subs	r3, r0, r3
    f534:	f241 3288 	movw	r2, #5000	; 0x1388
    f538:	4293      	cmp	r3, r2
    f53a:	d9e0      	bls.n	f4fe <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    f53c:	2200      	movs	r2, #0
	size_t unused = 0;
    f53e:	4613      	mov	r3, r2
    f540:	e001      	b.n	f546 <prio_recv_thread+0x6e>
			unused++;
    f542:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    f544:	3201      	adds	r2, #1
    f546:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    f54a:	d203      	bcs.n	f554 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    f54c:	4910      	ldr	r1, [pc, #64]	; (f590 <prio_recv_thread+0xb8>)
    f54e:	5c89      	ldrb	r1, [r1, r2]
    f550:	29aa      	cmp	r1, #170	; 0xaa
    f552:	d0f6      	beq.n	f542 <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    f554:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    f558:	2264      	movs	r2, #100	; 0x64
    f55a:	fb02 f201 	mul.w	r2, r2, r1
    f55e:	0992      	lsrs	r2, r2, #6
    f560:	480c      	ldr	r0, [pc, #48]	; (f594 <prio_recv_thread+0xbc>)
    f562:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    f566:	9202      	str	r2, [sp, #8]
    f568:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f56c:	9201      	str	r2, [sp, #4]
    f56e:	9100      	str	r1, [sp, #0]
    f570:	4909      	ldr	r1, [pc, #36]	; (f598 <prio_recv_thread+0xc0>)
    f572:	480a      	ldr	r0, [pc, #40]	; (f59c <prio_recv_thread+0xc4>)
    f574:	f7f3 fd78 	bl	3068 <printk>
    f578:	f01a faee 	bl	29b58 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    f57c:	4b03      	ldr	r3, [pc, #12]	; (f58c <prio_recv_thread+0xb4>)
    f57e:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    f580:	e7bd      	b.n	f4fe <prio_recv_thread+0x26>
    f582:	bf00      	nop
    f584:	2000d67c 	.word	0x2000d67c
    f588:	2000d60c 	.word	0x2000d60c
    f58c:	20001030 	.word	0x20001030
    f590:	20004718 	.word	0x20004718
    f594:	2492492d 	.word	0x2492492d
    f598:	00031a34 	.word	0x00031a34
    f59c:	0003179c 	.word	0x0003179c

0000f5a0 <hci_driver_open>:
{
    f5a0:	b530      	push	{r4, r5, lr}
    f5a2:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    f5a4:	4814      	ldr	r0, [pc, #80]	; (f5f8 <hci_driver_open+0x58>)
    f5a6:	f00a fb37 	bl	19c18 <ll_init>
	if (err) {
    f5aa:	4605      	mov	r5, r0
    f5ac:	b110      	cbz	r0, f5b4 <hci_driver_open+0x14>
}
    f5ae:	4628      	mov	r0, r5
    f5b0:	b007      	add	sp, #28
    f5b2:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    f5b4:	f7f6 fc66 	bl	5e84 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    f5b8:	2400      	movs	r4, #0
    f5ba:	9405      	str	r4, [sp, #20]
    f5bc:	9404      	str	r4, [sp, #16]
    f5be:	f06f 0309 	mvn.w	r3, #9
    f5c2:	9303      	str	r3, [sp, #12]
    f5c4:	9402      	str	r4, [sp, #8]
    f5c6:	9401      	str	r4, [sp, #4]
    f5c8:	9400      	str	r4, [sp, #0]
    f5ca:	4b0c      	ldr	r3, [pc, #48]	; (f5fc <hci_driver_open+0x5c>)
    f5cc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f5d0:	490b      	ldr	r1, [pc, #44]	; (f600 <hci_driver_open+0x60>)
    f5d2:	480c      	ldr	r0, [pc, #48]	; (f604 <hci_driver_open+0x64>)
    f5d4:	f01a fce0 	bl	29f98 <_impl_k_thread_create>
    f5d8:	9405      	str	r4, [sp, #20]
    f5da:	9404      	str	r4, [sp, #16]
    f5dc:	f06f 0307 	mvn.w	r3, #7
    f5e0:	9303      	str	r3, [sp, #12]
    f5e2:	9402      	str	r4, [sp, #8]
    f5e4:	9401      	str	r4, [sp, #4]
    f5e6:	9400      	str	r4, [sp, #0]
    f5e8:	4b07      	ldr	r3, [pc, #28]	; (f608 <hci_driver_open+0x68>)
    f5ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f5ee:	4907      	ldr	r1, [pc, #28]	; (f60c <hci_driver_open+0x6c>)
    f5f0:	4807      	ldr	r0, [pc, #28]	; (f610 <hci_driver_open+0x70>)
    f5f2:	f01a fcd1 	bl	29f98 <_impl_k_thread_create>
	return 0;
    f5f6:	e7da      	b.n	f5ae <hci_driver_open+0xe>
    f5f8:	2000d60c 	.word	0x2000d60c
    f5fc:	0000f4d9 	.word	0x0000f4d9
    f600:	20004718 	.word	0x20004718
    f604:	20003074 	.word	0x20003074
    f608:	0000f615 	.word	0x0000f615
    f60c:	200048d8 	.word	0x200048d8
    f610:	20002f40 	.word	0x20002f40

0000f614 <recv_thread>:
{
    f614:	b510      	push	{r4, lr}
    f616:	b086      	sub	sp, #24
    f618:	e029      	b.n	f66e <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    f61a:	2801      	cmp	r0, #1
    f61c:	d042      	beq.n	f6a4 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f61e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f622:	2001      	movs	r0, #1
    f624:	f7f7 fd6c 	bl	7100 <bt_buf_get_rx>
    f628:	4604      	mov	r4, r0
		if (buf) {
    f62a:	b11c      	cbz	r4, f634 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    f62c:	4621      	mov	r1, r4
    f62e:	9805      	ldr	r0, [sp, #20]
    f630:	f7ff fece 	bl	f3d0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    f634:	2100      	movs	r1, #0
    f636:	9b05      	ldr	r3, [sp, #20]
    f638:	88d8      	ldrh	r0, [r3, #6]
    f63a:	f009 fd49 	bl	190d0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    f63e:	a806      	add	r0, sp, #24
    f640:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    f644:	2200      	movs	r2, #0
    f646:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    f648:	f009 fcbe 	bl	18fc8 <radio_rx_mem_release>
		if (buf) {
    f64c:	b124      	cbz	r4, f658 <recv_thread+0x44>
			if (buf->len) {
    f64e:	89a3      	ldrh	r3, [r4, #12]
    f650:	b3ab      	cbz	r3, f6be <recv_thread+0xaa>
				bt_recv(buf);
    f652:	4620      	mov	r0, r4
    f654:	f7f7 fb74 	bl	6d40 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    f658:	f01a f8c6 	bl	297e8 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    f65c:	f01a fa7c 	bl	29b58 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    f660:	4b29      	ldr	r3, [pc, #164]	; (f708 <recv_thread+0xf4>)
    f662:	681b      	ldr	r3, [r3, #0]
    f664:	1ac0      	subs	r0, r0, r3
    f666:	f241 3388 	movw	r3, #5000	; 0x1388
    f66a:	4298      	cmp	r0, r3
    f66c:	d82b      	bhi.n	f6c6 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    f66e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f672:	4826      	ldr	r0, [pc, #152]	; (f70c <recv_thread+0xf8>)
    f674:	f019 fea2 	bl	293bc <k_queue_get>
		if (node_rx && !buf) {
    f678:	b1f8      	cbz	r0, f6ba <recv_thread+0xa6>
    f67a:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    f67c:	f7ff fecc 	bl	f418 <hci_get_class>
    f680:	9405      	str	r4, [sp, #20]
	switch (class) {
    f682:	2800      	cmp	r0, #0
    f684:	db13      	blt.n	f6ae <recv_thread+0x9a>
    f686:	2802      	cmp	r0, #2
    f688:	ddc7      	ble.n	f61a <recv_thread+0x6>
    f68a:	2803      	cmp	r0, #3
    f68c:	d10f      	bne.n	f6ae <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f68e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f692:	2003      	movs	r0, #3
    f694:	f7f7 fd34 	bl	7100 <bt_buf_get_rx>
    f698:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f69a:	4601      	mov	r1, r0
    f69c:	9805      	ldr	r0, [sp, #20]
    f69e:	f7ff fe6b 	bl	f378 <hci_acl_encode>
    f6a2:	e7c7      	b.n	f634 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    f6a4:	2100      	movs	r1, #0
    f6a6:	f7f7 fd2b 	bl	7100 <bt_buf_get_rx>
    f6aa:	4604      	mov	r4, r0
    f6ac:	e7bd      	b.n	f62a <recv_thread+0x16>
		LL_ASSERT(0);
    f6ae:	4040      	eors	r0, r0
    f6b0:	f380 8811 	msr	BASEPRI, r0
    f6b4:	f04f 0004 	mov.w	r0, #4
    f6b8:	df02      	svc	2
		struct net_buf *buf = NULL;
    f6ba:	2400      	movs	r4, #0
    f6bc:	e7c6      	b.n	f64c <recv_thread+0x38>
				net_buf_unref(buf);
    f6be:	4620      	mov	r0, r4
    f6c0:	f00b fea0 	bl	1b404 <net_buf_unref>
    f6c4:	e7c8      	b.n	f658 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    f6c6:	2200      	movs	r2, #0
	size_t unused = 0;
    f6c8:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    f6ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    f6ce:	d206      	bcs.n	f6de <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    f6d0:	490f      	ldr	r1, [pc, #60]	; (f710 <recv_thread+0xfc>)
    f6d2:	5c89      	ldrb	r1, [r1, r2]
    f6d4:	29aa      	cmp	r1, #170	; 0xaa
    f6d6:	d102      	bne.n	f6de <recv_thread+0xca>
			unused++;
    f6d8:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    f6da:	3201      	adds	r2, #1
    f6dc:	e7f5      	b.n	f6ca <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    f6de:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    f6e2:	2264      	movs	r2, #100	; 0x64
    f6e4:	fb02 f201 	mul.w	r2, r2, r1
    f6e8:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    f6ea:	9202      	str	r2, [sp, #8]
    f6ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f6f0:	9201      	str	r2, [sp, #4]
    f6f2:	9100      	str	r1, [sp, #0]
    f6f4:	4907      	ldr	r1, [pc, #28]	; (f714 <recv_thread+0x100>)
    f6f6:	4808      	ldr	r0, [pc, #32]	; (f718 <recv_thread+0x104>)
    f6f8:	f7f3 fcb6 	bl	3068 <printk>
    f6fc:	f01a fa2c 	bl	29b58 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    f700:	4b01      	ldr	r3, [pc, #4]	; (f708 <recv_thread+0xf4>)
    f702:	6018      	str	r0, [r3, #0]
    f704:	e7b3      	b.n	f66e <recv_thread+0x5a>
    f706:	bf00      	nop
    f708:	20001034 	.word	0x20001034
    f70c:	2000d67c 	.word	0x2000d67c
    f710:	200048d8 	.word	0x200048d8
    f714:	00031a4c 	.word	0x00031a4c
    f718:	0003179c 	.word	0x0003179c

0000f71c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    f71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    f71e:	2304      	movs	r3, #4
	while (callee_id--) {
    f720:	e01d      	b.n	f75e <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    f722:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    f726:	4911      	ldr	r1, [pc, #68]	; (f76c <mayfly_init+0x50>)
    f728:	0065      	lsls	r5, r4, #1
    f72a:	192b      	adds	r3, r5, r4
    f72c:	009a      	lsls	r2, r3, #2
    f72e:	0073      	lsls	r3, r6, #1
    f730:	eb03 0e06 	add.w	lr, r3, r6
    f734:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f738:	46be      	mov	lr, r7
    f73a:	443a      	add	r2, r7
    f73c:	440a      	add	r2, r1
    f73e:	4425      	add	r5, r4
    f740:	00af      	lsls	r7, r5, #2
    f742:	4477      	add	r7, lr
    f744:	3204      	adds	r2, #4
    f746:	4439      	add	r1, r7
    f748:	4b09      	ldr	r3, [pc, #36]	; (f770 <mayfly_init+0x54>)
    f74a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f74e:	f000 f9f5 	bl	fb3c <memq_init>
		while (caller_id--) {
    f752:	4623      	mov	r3, r4
    f754:	1e5c      	subs	r4, r3, #1
    f756:	b2e4      	uxtb	r4, r4
    f758:	2b00      	cmp	r3, #0
    f75a:	d1e2      	bne.n	f722 <mayfly_init+0x6>
	while (callee_id--) {
    f75c:	4633      	mov	r3, r6
    f75e:	1e5e      	subs	r6, r3, #1
    f760:	b2f6      	uxtb	r6, r6
    f762:	b10b      	cbz	r3, f768 <mayfly_init+0x4c>
    f764:	2304      	movs	r3, #4
    f766:	e7f5      	b.n	f754 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f76a:	bf00      	nop
    f76c:	200010b8 	.word	0x200010b8
    f770:	20001038 	.word	0x20001038

0000f774 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    f774:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    f776:	b1ea      	cbz	r2, f7b4 <mayfly_enable+0x40>
    f778:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    f77a:	0042      	lsls	r2, r0, #1
    f77c:	4402      	add	r2, r0
    f77e:	0093      	lsls	r3, r2, #2
    f780:	004c      	lsls	r4, r1, #1
    f782:	440c      	add	r4, r1
    f784:	0122      	lsls	r2, r4, #4
    f786:	441a      	add	r2, r3
    f788:	4b18      	ldr	r3, [pc, #96]	; (f7ec <mayfly_enable+0x78>)
    f78a:	4413      	add	r3, r2
    f78c:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f78e:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    f790:	429a      	cmp	r2, r3
    f792:	d003      	beq.n	f79c <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f794:	462a      	mov	r2, r5
    f796:	f00a f9e6 	bl	19b66 <mayfly_enable_cb>
    f79a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    f79c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f7a0:	00a3      	lsls	r3, r4, #2
    f7a2:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f7a6:	0134      	lsls	r4, r6, #4
    f7a8:	4423      	add	r3, r4
    f7aa:	4c10      	ldr	r4, [pc, #64]	; (f7ec <mayfly_enable+0x78>)
    f7ac:	4423      	add	r3, r4
    f7ae:	3201      	adds	r2, #1
    f7b0:	721a      	strb	r2, [r3, #8]
    f7b2:	e7ef      	b.n	f794 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    f7b4:	0042      	lsls	r2, r0, #1
    f7b6:	4402      	add	r2, r0
    f7b8:	0093      	lsls	r3, r2, #2
    f7ba:	004c      	lsls	r4, r1, #1
    f7bc:	440c      	add	r4, r1
    f7be:	0122      	lsls	r2, r4, #4
    f7c0:	441a      	add	r2, r3
    f7c2:	4b0a      	ldr	r3, [pc, #40]	; (f7ec <mayfly_enable+0x78>)
    f7c4:	4413      	add	r3, r2
    f7c6:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f7c8:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    f7ca:	429a      	cmp	r2, r3
    f7cc:	d000      	beq.n	f7d0 <mayfly_enable+0x5c>
    f7ce:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    f7d0:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f7d4:	00a3      	lsls	r3, r4, #2
    f7d6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    f7da:	012c      	lsls	r4, r5, #4
    f7dc:	4423      	add	r3, r4
    f7de:	4c03      	ldr	r4, [pc, #12]	; (f7ec <mayfly_enable+0x78>)
    f7e0:	4423      	add	r3, r4
    f7e2:	3201      	adds	r2, #1
    f7e4:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    f7e6:	f00a f9f5 	bl	19bd4 <mayfly_pend>
		}
	}
}
    f7ea:	e7f0      	b.n	f7ce <mayfly_enable+0x5a>
    f7ec:	200010b8 	.word	0x200010b8

0000f7f0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7f2:	4605      	mov	r5, r0
    f7f4:	460e      	mov	r6, r1
    f7f6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f7f8:	b19a      	cbz	r2, f822 <mayfly_enqueue+0x32>
    f7fa:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f7fc:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    f7fe:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f800:	7823      	ldrb	r3, [r4, #0]
    f802:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    f804:	f013 0303 	ands.w	r3, r3, #3
    f808:	d032      	beq.n	f870 <mayfly_enqueue+0x80>
		if (chain) {
    f80a:	b371      	cbz	r1, f86a <mayfly_enqueue+0x7a>
			if (state != 1) {
    f80c:	2b01      	cmp	r3, #1
    f80e:	d04c      	beq.n	f8aa <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f810:	3201      	adds	r2, #1
    f812:	b2d2      	uxtb	r2, r2
    f814:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    f816:	4631      	mov	r1, r6
    f818:	4628      	mov	r0, r5
    f81a:	f00a f9db 	bl	19bd4 <mayfly_pend>

				return 0;
    f81e:	2000      	movs	r0, #0
    f820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f822:	f00a f9c4 	bl	19bae <mayfly_prio_is_equal>
    f826:	b908      	cbnz	r0, f82c <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f828:	2101      	movs	r1, #1
    f82a:	e7e7      	b.n	f7fc <mayfly_enqueue+0xc>
    f82c:	4631      	mov	r1, r6
    f82e:	4628      	mov	r0, r5
    f830:	f00a f9ab 	bl	19b8a <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f834:	b1b8      	cbz	r0, f866 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    f836:	481e      	ldr	r0, [pc, #120]	; (f8b0 <mayfly_enqueue+0xc0>)
    f838:	0069      	lsls	r1, r5, #1
    f83a:	194a      	adds	r2, r1, r5
    f83c:	0093      	lsls	r3, r2, #2
    f83e:	0072      	lsls	r2, r6, #1
    f840:	eb02 0e06 	add.w	lr, r2, r6
    f844:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f848:	46be      	mov	lr, r7
    f84a:	443b      	add	r3, r7
    f84c:	4403      	add	r3, r0
    f84e:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    f850:	194b      	adds	r3, r1, r5
    f852:	0099      	lsls	r1, r3, #2
    f854:	4471      	add	r1, lr
    f856:	4408      	add	r0, r1
    f858:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    f85a:	429f      	cmp	r7, r3
    f85c:	d001      	beq.n	f862 <mayfly_enqueue+0x72>
    f85e:	2101      	movs	r1, #1
    f860:	e7cc      	b.n	f7fc <mayfly_enqueue+0xc>
    f862:	2100      	movs	r1, #0
    f864:	e7ca      	b.n	f7fc <mayfly_enqueue+0xc>
    f866:	2101      	movs	r1, #1
    f868:	e7c8      	b.n	f7fc <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    f86a:	1c93      	adds	r3, r2, #2
    f86c:	b2db      	uxtb	r3, r3
    f86e:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    f870:	b1b1      	cbz	r1, f8a0 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    f872:	3201      	adds	r2, #1
    f874:	b2d2      	uxtb	r2, r2
    f876:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    f878:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    f87c:	009a      	lsls	r2, r3, #2
    f87e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f882:	010b      	lsls	r3, r1, #4
    f884:	441a      	add	r2, r3
    f886:	4b0a      	ldr	r3, [pc, #40]	; (f8b0 <mayfly_enqueue+0xc0>)
    f888:	441a      	add	r2, r3
    f88a:	3204      	adds	r2, #4
    f88c:	6861      	ldr	r1, [r4, #4]
    f88e:	4620      	mov	r0, r4
    f890:	f000 f957 	bl	fb42 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f894:	4631      	mov	r1, r6
    f896:	4628      	mov	r0, r5
    f898:	f00a f99c 	bl	19bd4 <mayfly_pend>

	return 0;
    f89c:	2000      	movs	r0, #0
    f89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    f8a0:	68e3      	ldr	r3, [r4, #12]
    f8a2:	68a0      	ldr	r0, [r4, #8]
    f8a4:	4798      	blx	r3
		return 0;
    f8a6:	2000      	movs	r0, #0
    f8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    f8aa:	2001      	movs	r0, #1
}
    f8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8ae:	bf00      	nop
    f8b0:	200010b8 	.word	0x200010b8

0000f8b4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8b8:	b085      	sub	sp, #20
    f8ba:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    f8bc:	2304      	movs	r3, #4
	u8_t enable = 0;
    f8be:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    f8c2:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f8c6:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f8ca:	fa5f f989 	uxtb.w	r9, r9
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	f000 809b 	beq.w	fa0a <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f8d4:	aa04      	add	r2, sp, #16
    f8d6:	2300      	movs	r3, #0
    f8d8:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f8dc:	4657      	mov	r7, sl
    f8de:	464e      	mov	r6, r9
    f8e0:	4850      	ldr	r0, [pc, #320]	; (fa24 <mayfly_run+0x170>)
    f8e2:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f8e6:	4449      	add	r1, r9
    f8e8:	008b      	lsls	r3, r1, #2
    f8ea:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f8ee:	4451      	add	r1, sl
    f8f0:	010c      	lsls	r4, r1, #4
    f8f2:	4423      	add	r3, r4
    f8f4:	18c4      	adds	r4, r0, r3
    f8f6:	58c1      	ldr	r1, [r0, r3]
    f8f8:	6860      	ldr	r0, [r4, #4]
    f8fa:	f000 f929 	bl	fb50 <memq_peek>
    f8fe:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f900:	e017      	b.n	f932 <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f902:	3a01      	subs	r2, #1
    f904:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f906:	9b03      	ldr	r3, [sp, #12]
    f908:	68da      	ldr	r2, [r3, #12]
    f90a:	6898      	ldr	r0, [r3, #8]
    f90c:	4790      	blx	r2
    f90e:	e01b      	b.n	f948 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f910:	4944      	ldr	r1, [pc, #272]	; (fa24 <mayfly_run+0x170>)
    f912:	0072      	lsls	r2, r6, #1
    f914:	4432      	add	r2, r6
    f916:	0093      	lsls	r3, r2, #2
    f918:	007a      	lsls	r2, r7, #1
    f91a:	443a      	add	r2, r7
    f91c:	0110      	lsls	r0, r2, #4
    f91e:	4403      	add	r3, r0
    f920:	18c8      	adds	r0, r1, r3
    f922:	aa03      	add	r2, sp, #12
    f924:	58c9      	ldr	r1, [r1, r3]
    f926:	6840      	ldr	r0, [r0, #4]
    f928:	f000 f912 	bl	fb50 <memq_peek>
    f92c:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f92e:	2c01      	cmp	r4, #1
    f930:	d026      	beq.n	f980 <mayfly_run+0xcc>
		while (link) {
    f932:	f1b8 0f00 	cmp.w	r8, #0
    f936:	d030      	beq.n	f99a <mayfly_run+0xe6>
			req = m->_req;
    f938:	9b03      	ldr	r3, [sp, #12]
    f93a:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f93c:	785a      	ldrb	r2, [r3, #1]
    f93e:	1aa4      	subs	r4, r4, r2
    f940:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f944:	2c01      	cmp	r4, #1
    f946:	d0dc      	beq.n	f902 <mayfly_run+0x4e>
			req = m->_req;
    f948:	9b03      	ldr	r3, [sp, #12]
    f94a:	781d      	ldrb	r5, [r3, #0]
    f94c:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f94e:	785b      	ldrb	r3, [r3, #1]
    f950:	1aeb      	subs	r3, r5, r3
    f952:	f003 0303 	and.w	r3, r3, #3
    f956:	2b01      	cmp	r3, #1
    f958:	d0da      	beq.n	f910 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f95a:	0072      	lsls	r2, r6, #1
    f95c:	4432      	add	r2, r6
    f95e:	0093      	lsls	r3, r2, #2
    f960:	0079      	lsls	r1, r7, #1
    f962:	4439      	add	r1, r7
    f964:	010a      	lsls	r2, r1, #4
    f966:	441a      	add	r2, r3
    f968:	4b2e      	ldr	r3, [pc, #184]	; (fa24 <mayfly_run+0x170>)
    f96a:	4413      	add	r3, r2
    f96c:	2200      	movs	r2, #0
    f96e:	4619      	mov	r1, r3
    f970:	6858      	ldr	r0, [r3, #4]
    f972:	f000 f8f6 	bl	fb62 <memq_dequeue>
				m->_link = link;
    f976:	9b03      	ldr	r3, [sp, #12]
    f978:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f97c:	705d      	strb	r5, [r3, #1]
    f97e:	e7c7      	b.n	f910 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f980:	f1b9 0f00 	cmp.w	r9, #0
    f984:	d006      	beq.n	f994 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f986:	4651      	mov	r1, sl
    f988:	4650      	mov	r0, sl
    f98a:	f00a f923 	bl	19bd4 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f98e:	b005      	add	sp, #20
    f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f994:	2800      	cmp	r0, #0
    f996:	d0cc      	beq.n	f932 <mayfly_run+0x7e>
    f998:	e7f5      	b.n	f986 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f99a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f99e:	444a      	add	r2, r9
    f9a0:	0093      	lsls	r3, r2, #2
    f9a2:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f9a6:	4451      	add	r1, sl
    f9a8:	010a      	lsls	r2, r1, #4
    f9aa:	441a      	add	r2, r3
    f9ac:	4b1d      	ldr	r3, [pc, #116]	; (fa24 <mayfly_run+0x170>)
    f9ae:	4413      	add	r3, r2
    f9b0:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f9b2:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f9b4:	4299      	cmp	r1, r3
    f9b6:	d00b      	beq.n	f9d0 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f9b8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f9bc:	0093      	lsls	r3, r2, #2
    f9be:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f9c2:	0102      	lsls	r2, r0, #4
    f9c4:	4413      	add	r3, r2
    f9c6:	4a17      	ldr	r2, [pc, #92]	; (fa24 <mayfly_run+0x170>)
    f9c8:	4413      	add	r3, r2
    f9ca:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f9cc:	2301      	movs	r3, #1
    f9ce:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f9d0:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f9d4:	444a      	add	r2, r9
    f9d6:	0093      	lsls	r3, r2, #2
    f9d8:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f9dc:	4451      	add	r1, sl
    f9de:	010a      	lsls	r2, r1, #4
    f9e0:	441a      	add	r2, r3
    f9e2:	4b10      	ldr	r3, [pc, #64]	; (fa24 <mayfly_run+0x170>)
    f9e4:	4413      	add	r3, r2
    f9e6:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f9e8:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f9ea:	4299      	cmp	r1, r3
    f9ec:	d00b      	beq.n	fa06 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f9ee:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f9f2:	0093      	lsls	r3, r2, #2
    f9f4:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f9f8:	0102      	lsls	r2, r0, #4
    f9fa:	4413      	add	r3, r2
    f9fc:	4a09      	ldr	r2, [pc, #36]	; (fa24 <mayfly_run+0x170>)
    f9fe:	4413      	add	r3, r2
    fa00:	7259      	strb	r1, [r3, #9]
			enable = 1;
    fa02:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    fa06:	464b      	mov	r3, r9
    fa08:	e75d      	b.n	f8c6 <mayfly_run+0x12>
	if (disable && !enable) {
    fa0a:	9b01      	ldr	r3, [sp, #4]
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	d0be      	beq.n	f98e <mayfly_run+0xda>
    fa10:	f1bb 0f00 	cmp.w	fp, #0
    fa14:	d1bb      	bne.n	f98e <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    fa16:	2200      	movs	r2, #0
    fa18:	4651      	mov	r1, sl
    fa1a:	4650      	mov	r0, sl
    fa1c:	f00a f8a3 	bl	19b66 <mayfly_enable_cb>
    fa20:	e7b5      	b.n	f98e <mayfly_run+0xda>
    fa22:	bf00      	nop
    fa24:	200010b8 	.word	0x200010b8

0000fa28 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa2a:	b083      	sub	sp, #12
    fa2c:	4607      	mov	r7, r0
    fa2e:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    fa30:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fa32:	1dfb      	adds	r3, r7, #7
    fa34:	f023 0303 	bic.w	r3, r3, #3
    fa38:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fa3a:	460e      	mov	r6, r1
    fa3c:	3a01      	subs	r2, #1
    fa3e:	b295      	uxth	r5, r2
    fa40:	2204      	movs	r2, #4
    fa42:	2100      	movs	r1, #0
    fa44:	fb05 7000 	mla	r0, r5, r0, r7
    fa48:	f01a fffa 	bl	2aa40 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    fa4c:	e00b      	b.n	fa66 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    fa4e:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    fa52:	443b      	add	r3, r7
    fa54:	a902      	add	r1, sp, #8
    fa56:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    fa5a:	2204      	movs	r2, #4
    fa5c:	fb04 7006 	mla	r0, r4, r6, r7
    fa60:	f7f0 fc2e 	bl	2c0 <memcpy>
	while (mem_count--) {
    fa64:	4625      	mov	r5, r4
    fa66:	1e6c      	subs	r4, r5, #1
    fa68:	b2a4      	uxth	r4, r4
    fa6a:	2d00      	cmp	r5, #0
    fa6c:	d1ef      	bne.n	fa4e <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    fa6e:	b003      	add	sp, #12
    fa70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fa72 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    fa72:	b570      	push	{r4, r5, r6, lr}
    fa74:	b082      	sub	sp, #8
	if (*mem_head) {
    fa76:	6805      	ldr	r5, [r0, #0]
    fa78:	b1a5      	cbz	r5, faa4 <mem_acquire+0x32>
    fa7a:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    fa7c:	1deb      	adds	r3, r5, #7
    fa7e:	f023 0303 	bic.w	r3, r3, #3
    fa82:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    fa84:	3b01      	subs	r3, #1
    fa86:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    fa88:	2204      	movs	r2, #4
    fa8a:	4629      	mov	r1, r5
    fa8c:	eb0d 0002 	add.w	r0, sp, r2
    fa90:	f7f0 fc16 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    fa94:	9b01      	ldr	r3, [sp, #4]
    fa96:	b11b      	cbz	r3, faa0 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    fa98:	3307      	adds	r3, #7
    fa9a:	f023 0303 	bic.w	r3, r3, #3
    fa9e:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    faa0:	9b01      	ldr	r3, [sp, #4]
    faa2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    faa4:	4628      	mov	r0, r5
    faa6:	b002      	add	sp, #8
    faa8:	bd70      	pop	{r4, r5, r6, pc}

0000faaa <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    faaa:	b570      	push	{r4, r5, r6, lr}
    faac:	4606      	mov	r6, r0
    faae:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    fab0:	680b      	ldr	r3, [r1, #0]
    fab2:	b183      	cbz	r3, fad6 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    fab4:	3307      	adds	r3, #7
    fab6:	f023 0303 	bic.w	r3, r3, #3
    faba:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    fabc:	3401      	adds	r4, #1
    fabe:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    fac0:	2204      	movs	r2, #4
    fac2:	4629      	mov	r1, r5
    fac4:	4630      	mov	r0, r6
    fac6:	f7f0 fbfb 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    faca:	1df3      	adds	r3, r6, #7
    facc:	f023 0303 	bic.w	r3, r3, #3
    fad0:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    fad2:	602e      	str	r6, [r5, #0]
    fad4:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    fad6:	2400      	movs	r4, #0
    fad8:	e7f0      	b.n	fabc <mem_release+0x12>

0000fada <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    fada:	4603      	mov	r3, r0
    fadc:	b120      	cbz	r0, fae8 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    fade:	3307      	adds	r3, #7
    fae0:	f023 0303 	bic.w	r3, r3, #3
    fae4:	8818      	ldrh	r0, [r3, #0]
    fae6:	4770      	bx	lr
	u16_t free_count = 0;
    fae8:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    faea:	4770      	bx	lr

0000faec <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    faec:	fb02 0001 	mla	r0, r2, r1, r0
    faf0:	4770      	bx	lr

0000faf2 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    faf2:	1a40      	subs	r0, r0, r1
    faf4:	b280      	uxth	r0, r0
}
    faf6:	fbb0 f0f2 	udiv	r0, r0, r2
    fafa:	4770      	bx	lr

0000fafc <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    fafc:	4411      	add	r1, r2
	while (len--) {
    fafe:	e004      	b.n	fb0a <mem_rcopy+0xe>
		*dst++ = *--src;
    fb00:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    fb04:	7002      	strb	r2, [r0, #0]
	while (len--) {
    fb06:	461a      	mov	r2, r3
		*dst++ = *--src;
    fb08:	3001      	adds	r0, #1
	while (len--) {
    fb0a:	1e53      	subs	r3, r2, #1
    fb0c:	b29b      	uxth	r3, r3
    fb0e:	2a00      	cmp	r2, #0
    fb10:	d1f6      	bne.n	fb00 <mem_rcopy+0x4>
	}
}
    fb12:	4770      	bx	lr

0000fb14 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    fb14:	1e4b      	subs	r3, r1, #1
    fb16:	b29b      	uxth	r3, r3
    fb18:	b171      	cbz	r1, fb38 <mem_nz+0x24>
{
    fb1a:	b410      	push	{r4}
		if (*src++) {
    fb1c:	1c44      	adds	r4, r0, #1
    fb1e:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    fb20:	4619      	mov	r1, r3
		if (*src++) {
    fb22:	b93a      	cbnz	r2, fb34 <mem_nz+0x20>
    fb24:	4620      	mov	r0, r4
	while (len--) {
    fb26:	3b01      	subs	r3, #1
    fb28:	b29b      	uxth	r3, r3
    fb2a:	2900      	cmp	r1, #0
    fb2c:	d1f6      	bne.n	fb1c <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    fb2e:	2000      	movs	r0, #0
}
    fb30:	bc10      	pop	{r4}
    fb32:	4770      	bx	lr
			return 1;
    fb34:	2001      	movs	r0, #1
    fb36:	e7fb      	b.n	fb30 <mem_nz+0x1c>
	return 0;
    fb38:	2000      	movs	r0, #0
}
    fb3a:	4770      	bx	lr

0000fb3c <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    fb3c:	6010      	str	r0, [r2, #0]
    fb3e:	6008      	str	r0, [r1, #0]

	return link;
}
    fb40:	4770      	bx	lr

0000fb42 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    fb42:	6813      	ldr	r3, [r2, #0]
    fb44:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    fb46:	6813      	ldr	r3, [r2, #0]
    fb48:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    fb4a:	6011      	str	r1, [r2, #0]

	return link;
}
    fb4c:	4608      	mov	r0, r1
    fb4e:	4770      	bx	lr

0000fb50 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    fb50:	4281      	cmp	r1, r0
    fb52:	d004      	beq.n	fb5e <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    fb54:	b10a      	cbz	r2, fb5a <memq_peek+0xa>
		*mem = *((void **)link + 1);
    fb56:	684b      	ldr	r3, [r1, #4]
    fb58:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    fb5a:	4608      	mov	r0, r1
    fb5c:	4770      	bx	lr
		return 0;
    fb5e:	2100      	movs	r1, #0
    fb60:	e7fb      	b.n	fb5a <memq_peek+0xa>

0000fb62 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    fb62:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    fb64:	4283      	cmp	r3, r0
    fb66:	d006      	beq.n	fb76 <memq_dequeue+0x14>
	if (mem) {
    fb68:	b10a      	cbz	r2, fb6e <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    fb6a:	6858      	ldr	r0, [r3, #4]
    fb6c:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    fb6e:	681a      	ldr	r2, [r3, #0]
    fb70:	600a      	str	r2, [r1, #0]

	return link;
}
    fb72:	4618      	mov	r0, r3
    fb74:	4770      	bx	lr
		return 0;
    fb76:	2300      	movs	r3, #0
    fb78:	e7f9      	b.n	fb6e <memq_dequeue+0xc>

0000fb7a <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    fb7a:	b410      	push	{r4}
	u8_t one_count = 0;
    fb7c:	2200      	movs	r2, #0

	while (octets_len--) {
    fb7e:	e008      	b.n	fb92 <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    fb80:	1e59      	subs	r1, r3, #1
    fb82:	b249      	sxtb	r1, r1
    fb84:	400b      	ands	r3, r1
			one_count++;
    fb86:	3201      	adds	r2, #1
    fb88:	b2d2      	uxtb	r2, r2
		while (bite) {
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d1f8      	bne.n	fb80 <util_ones_count_get+0x6>
		}
		octets++;
    fb8e:	3001      	adds	r0, #1
	while (octets_len--) {
    fb90:	4621      	mov	r1, r4
    fb92:	1e4b      	subs	r3, r1, #1
    fb94:	b2dc      	uxtb	r4, r3
    fb96:	b109      	cbz	r1, fb9c <util_ones_count_get+0x22>
		bite = *octets;
    fb98:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    fb9a:	e7f6      	b.n	fb8a <util_ones_count_get+0x10>
	}

	return one_count;
}
    fb9c:	4610      	mov	r0, r2
    fb9e:	bc10      	pop	{r4}
    fba0:	4770      	bx	lr
	...

0000fba4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    fba4:	4b05      	ldr	r3, [pc, #20]	; (fbbc <cntr_init+0x18>)
    fba6:	2200      	movs	r2, #0
    fba8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    fbac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    fbb0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    fbb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fbb8:	4770      	bx	lr
    fbba:	bf00      	nop
    fbbc:	4000b000 	.word	0x4000b000

0000fbc0 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    fbc0:	4a05      	ldr	r2, [pc, #20]	; (fbd8 <cntr_start+0x18>)
    fbc2:	7813      	ldrb	r3, [r2, #0]
    fbc4:	1c59      	adds	r1, r3, #1
    fbc6:	7011      	strb	r1, [r2, #0]
    fbc8:	b923      	cbnz	r3, fbd4 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    fbca:	2201      	movs	r2, #1
    fbcc:	4b03      	ldr	r3, [pc, #12]	; (fbdc <cntr_start+0x1c>)
    fbce:	601a      	str	r2, [r3, #0]

	return 0;
    fbd0:	2000      	movs	r0, #0
    fbd2:	4770      	bx	lr
		return 1;
    fbd4:	2001      	movs	r0, #1
}
    fbd6:	4770      	bx	lr
    fbd8:	20001178 	.word	0x20001178
    fbdc:	4000b000 	.word	0x4000b000

0000fbe0 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    fbe0:	4b0a      	ldr	r3, [pc, #40]	; (fc0c <cntr_stop+0x2c>)
    fbe2:	781b      	ldrb	r3, [r3, #0]
    fbe4:	b14b      	cbz	r3, fbfa <cntr_stop+0x1a>

	if (--_refcount) {
    fbe6:	3b01      	subs	r3, #1
    fbe8:	b2db      	uxtb	r3, r3
    fbea:	4a08      	ldr	r2, [pc, #32]	; (fc0c <cntr_stop+0x2c>)
    fbec:	7013      	strb	r3, [r2, #0]
    fbee:	b953      	cbnz	r3, fc06 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    fbf0:	2201      	movs	r2, #1
    fbf2:	4b07      	ldr	r3, [pc, #28]	; (fc10 <cntr_stop+0x30>)
    fbf4:	605a      	str	r2, [r3, #4]

	return 0;
    fbf6:	2000      	movs	r0, #0
    fbf8:	4770      	bx	lr
	LL_ASSERT(_refcount);
    fbfa:	4040      	eors	r0, r0
    fbfc:	f380 8811 	msr	BASEPRI, r0
    fc00:	f04f 0004 	mov.w	r0, #4
    fc04:	df02      	svc	2
		return 1;
    fc06:	2001      	movs	r0, #1
}
    fc08:	4770      	bx	lr
    fc0a:	bf00      	nop
    fc0c:	20001178 	.word	0x20001178
    fc10:	4000b000 	.word	0x4000b000

0000fc14 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    fc14:	4b01      	ldr	r3, [pc, #4]	; (fc1c <cntr_cnt_get+0x8>)
    fc16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    fc1a:	4770      	bx	lr
    fc1c:	4000b000 	.word	0x4000b000

0000fc20 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    fc20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    fc24:	4b01      	ldr	r3, [pc, #4]	; (fc2c <cntr_cmp_set+0xc>)
    fc26:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    fc2a:	4770      	bx	lr
    fc2c:	4000b000 	.word	0x4000b000

0000fc30 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    fc30:	e009      	b.n	fc46 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    fc32:	4b15      	ldr	r3, [pc, #84]	; (fc88 <do_ecb+0x58>)
    fc34:	2201      	movs	r2, #1
    fc36:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    fc38:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fc3c:	b91b      	cbnz	r3, fc46 <do_ecb+0x16>
    fc3e:	4b12      	ldr	r3, [pc, #72]	; (fc88 <do_ecb+0x58>)
    fc40:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fc44:	b9d3      	cbnz	r3, fc7c <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    fc46:	4b10      	ldr	r3, [pc, #64]	; (fc88 <do_ecb+0x58>)
    fc48:	2201      	movs	r2, #1
    fc4a:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    fc4c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    fc50:	2100      	movs	r1, #0
    fc52:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    fc56:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    fc5a:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fc5c:	4b0a      	ldr	r3, [pc, #40]	; (fc88 <do_ecb+0x58>)
    fc5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fc62:	2b00      	cmp	r3, #0
    fc64:	d1e5      	bne.n	fc32 <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fc66:	4b08      	ldr	r3, [pc, #32]	; (fc88 <do_ecb+0x58>)
    fc68:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d1e0      	bne.n	fc32 <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    fc70:	4b05      	ldr	r3, [pc, #20]	; (fc88 <do_ecb+0x58>)
    fc72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fc76:	2b00      	cmp	r3, #0
    fc78:	d1f0      	bne.n	fc5c <do_ecb+0x2c>
    fc7a:	e7da      	b.n	fc32 <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    fc7c:	2200      	movs	r2, #0
    fc7e:	4b02      	ldr	r3, [pc, #8]	; (fc88 <do_ecb+0x58>)
    fc80:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fc84:	4770      	bx	lr
    fc86:	bf00      	nop
    fc88:	4000e000 	.word	0x4000e000

0000fc8c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    fc8c:	b570      	push	{r4, r5, r6, lr}
    fc8e:	b08c      	sub	sp, #48	; 0x30
    fc90:	460e      	mov	r6, r1
    fc92:	4615      	mov	r5, r2
    fc94:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fc96:	2210      	movs	r2, #16
    fc98:	4601      	mov	r1, r0
    fc9a:	4668      	mov	r0, sp
    fc9c:	f7ff ff2e 	bl	fafc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    fca0:	2210      	movs	r2, #16
    fca2:	4631      	mov	r1, r6
    fca4:	eb0d 0002 	add.w	r0, sp, r2
    fca8:	f7ff ff28 	bl	fafc <mem_rcopy>

	do_ecb(&ecb);
    fcac:	4668      	mov	r0, sp
    fcae:	f7ff ffbf 	bl	fc30 <do_ecb>

	if (cipher_text_le) {
    fcb2:	b125      	cbz	r5, fcbe <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    fcb4:	2210      	movs	r2, #16
    fcb6:	a908      	add	r1, sp, #32
    fcb8:	4628      	mov	r0, r5
    fcba:	f7ff ff1f 	bl	fafc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    fcbe:	b124      	cbz	r4, fcca <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    fcc0:	2210      	movs	r2, #16
    fcc2:	a908      	add	r1, sp, #32
    fcc4:	4620      	mov	r0, r4
    fcc6:	f7f0 fafb 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    fcca:	b00c      	add	sp, #48	; 0x30
    fccc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fcd0 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    fcd0:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    fcd2:	4b02      	ldr	r3, [pc, #8]	; (fcdc <isr_radio+0xc>)
    fcd4:	681b      	ldr	r3, [r3, #0]
    fcd6:	b103      	cbz	r3, fcda <isr_radio+0xa>
		sfp_radio_isr();
    fcd8:	4798      	blx	r3
    fcda:	bd08      	pop	{r3, pc}
    fcdc:	20001398 	.word	0x20001398

0000fce0 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    fce0:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    fce2:	4b07      	ldr	r3, [pc, #28]	; (fd00 <radio_isr_set+0x20>)
    fce4:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    fce6:	2210      	movs	r2, #16
    fce8:	4b06      	ldr	r3, [pc, #24]	; (fd04 <radio_isr_set+0x24>)
    fcea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    fcee:	2202      	movs	r2, #2
    fcf0:	4b05      	ldr	r3, [pc, #20]	; (fd08 <radio_isr_set+0x28>)
    fcf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    fcf6:	2001      	movs	r0, #1
    fcf8:	f018 fa3a 	bl	28170 <_arch_irq_enable>
    fcfc:	bd08      	pop	{r3, pc}
    fcfe:	bf00      	nop
    fd00:	20001398 	.word	0x20001398
    fd04:	40001000 	.word	0x40001000
    fd08:	e000e100 	.word	0xe000e100

0000fd0c <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    fd0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fd10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fd14:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    fd18:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    fd1c:	2100      	movs	r1, #0
    fd1e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    fd22:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    fd26:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    fd2a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    fd2e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    fd32:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    fd36:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    fd3a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    fd3e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    fd42:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    fd46:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    fd4a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    fd4e:	4770      	bx	lr

0000fd50 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    fd50:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    fd52:	2001      	movs	r0, #1
    fd54:	f018 fa1a 	bl	2818c <_arch_irq_disable>

	NRF_RADIO->POWER =
    fd58:	4b03      	ldr	r3, [pc, #12]	; (fd68 <radio_reset+0x18>)
    fd5a:	2200      	movs	r2, #0
    fd5c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    fd60:	2201      	movs	r2, #1
    fd62:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    fd66:	bd08      	pop	{r3, pc}
    fd68:	40001000 	.word	0x40001000

0000fd6c <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    fd6c:	2802      	cmp	r0, #2
    fd6e:	d106      	bne.n	fd7e <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    fd70:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    fd72:	f003 030f 	and.w	r3, r3, #15
    fd76:	4a03      	ldr	r2, [pc, #12]	; (fd84 <radio_phy_set+0x18>)
    fd78:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    fd7c:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    fd7e:	2303      	movs	r3, #3
    fd80:	e7f7      	b.n	fd72 <radio_phy_set+0x6>
    fd82:	bf00      	nop
    fd84:	40001000 	.word	0x40001000

0000fd88 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    fd88:	4b01      	ldr	r3, [pc, #4]	; (fd90 <radio_tx_power_set+0x8>)
    fd8a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    fd8e:	4770      	bx	lr
    fd90:	40001000 	.word	0x40001000

0000fd94 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    fd94:	4b01      	ldr	r3, [pc, #4]	; (fd9c <radio_freq_chan_set+0x8>)
    fd96:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    fd9a:	4770      	bx	lr
    fd9c:	40001000 	.word	0x40001000

0000fda0 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    fda0:	4b07      	ldr	r3, [pc, #28]	; (fdc0 <radio_whiten_iv_set+0x20>)
    fda2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    fda6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fdaa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    fdae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    fdb2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fdb6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    fdba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    fdbe:	4770      	bx	lr
    fdc0:	40001000 	.word	0x40001000

0000fdc4 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    fdc4:	4a0a      	ldr	r2, [pc, #40]	; (fdf0 <radio_aa_set+0x2c>)
    fdc6:	2300      	movs	r3, #0
    fdc8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    fdcc:	2301      	movs	r3, #1
    fdce:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    fdd2:	78c3      	ldrb	r3, [r0, #3]
    fdd4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    fdd8:	7881      	ldrb	r1, [r0, #2]
    fdda:	7843      	ldrb	r3, [r0, #1]
    fddc:	041b      	lsls	r3, r3, #16
    fdde:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fde2:	7801      	ldrb	r1, [r0, #0]
    fde4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    fde8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    fdec:	4770      	bx	lr
    fdee:	bf00      	nop
    fdf0:	40001000 	.word	0x40001000

0000fdf4 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    fdf4:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    fdf6:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    fdfa:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    fdfe:	2a02      	cmp	r2, #2
    fe00:	d020      	beq.n	fe44 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fe02:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    fe04:	b10c      	cbz	r4, fe0a <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    fe06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    fe0a:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    fe0e:	f1c0 0008 	rsb	r0, r0, #8
    fe12:	0400      	lsls	r0, r0, #16
    fe14:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    fe18:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    fe1a:	4303      	orrs	r3, r0
    fe1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    fe20:	4a0a      	ldr	r2, [pc, #40]	; (fe4c <radio_pkt_configure+0x58>)
    fe22:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    fe26:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    fe2a:	4b09      	ldr	r3, [pc, #36]	; (fe50 <radio_pkt_configure+0x5c>)
    fe2c:	4003      	ands	r3, r0
    fe2e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    fe32:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    fe36:	4319      	orrs	r1, r3
    fe38:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    fe3c:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    fe40:	bc10      	pop	{r4}
    fe42:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    fe44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fe48:	e7dc      	b.n	fe04 <radio_pkt_configure+0x10>
    fe4a:	bf00      	nop
    fe4c:	40001000 	.word	0x40001000
    fe50:	fef80000 	.word	0xfef80000

0000fe54 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    fe54:	4b01      	ldr	r3, [pc, #4]	; (fe5c <radio_pkt_rx_set+0x8>)
    fe56:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fe5a:	4770      	bx	lr
    fe5c:	40001000 	.word	0x40001000

0000fe60 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    fe60:	4b01      	ldr	r3, [pc, #4]	; (fe68 <radio_pkt_tx_set+0x8>)
    fe62:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fe66:	4770      	bx	lr
    fe68:	40001000 	.word	0x40001000

0000fe6c <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    fe6c:	208c      	movs	r0, #140	; 0x8c
    fe6e:	4770      	bx	lr

0000fe70 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    fe70:	2001      	movs	r0, #1
    fe72:	4770      	bx	lr

0000fe74 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    fe74:	208c      	movs	r0, #140	; 0x8c
    fe76:	4770      	bx	lr

0000fe78 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    fe78:	2802      	cmp	r0, #2
    fe7a:	d101      	bne.n	fe80 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    fe7c:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    fe7e:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    fe80:	200a      	movs	r0, #10
    fe82:	4770      	bx	lr

0000fe84 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    fe84:	2201      	movs	r2, #1
    fe86:	4b01      	ldr	r3, [pc, #4]	; (fe8c <radio_rx_enable+0x8>)
    fe88:	605a      	str	r2, [r3, #4]
    fe8a:	4770      	bx	lr
    fe8c:	40001000 	.word	0x40001000

0000fe90 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    fe90:	2201      	movs	r2, #1
    fe92:	4b01      	ldr	r3, [pc, #4]	; (fe98 <radio_tx_enable+0x8>)
    fe94:	601a      	str	r2, [r3, #0]
    fe96:	4770      	bx	lr
    fe98:	40001000 	.word	0x40001000

0000fe9c <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    fe9c:	4b03      	ldr	r3, [pc, #12]	; (feac <radio_disable+0x10>)
    fe9e:	2200      	movs	r2, #0
    fea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    fea4:	2201      	movs	r2, #1
    fea6:	611a      	str	r2, [r3, #16]
    fea8:	4770      	bx	lr
    feaa:	bf00      	nop
    feac:	40001000 	.word	0x40001000

0000feb0 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    feb0:	4b06      	ldr	r3, [pc, #24]	; (fecc <radio_status_reset+0x1c>)
    feb2:	2200      	movs	r2, #0
    feb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    feb8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    febc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    fec0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    fec4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    fec8:	4770      	bx	lr
    feca:	bf00      	nop
    fecc:	40001000 	.word	0x40001000

0000fed0 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    fed0:	4b03      	ldr	r3, [pc, #12]	; (fee0 <radio_is_ready+0x10>)
    fed2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    fed6:	3000      	adds	r0, #0
    fed8:	bf18      	it	ne
    feda:	2001      	movne	r0, #1
    fedc:	4770      	bx	lr
    fede:	bf00      	nop
    fee0:	40001000 	.word	0x40001000

0000fee4 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    fee4:	4b03      	ldr	r3, [pc, #12]	; (fef4 <radio_is_done+0x10>)
    fee6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    feea:	3000      	adds	r0, #0
    feec:	bf18      	it	ne
    feee:	2001      	movne	r0, #1
    fef0:	4770      	bx	lr
    fef2:	bf00      	nop
    fef4:	40001000 	.word	0x40001000

0000fef8 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    fef8:	4b03      	ldr	r3, [pc, #12]	; (ff08 <radio_is_idle+0x10>)
    fefa:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    fefe:	fab0 f080 	clz	r0, r0
    ff02:	0940      	lsrs	r0, r0, #5
    ff04:	4770      	bx	lr
    ff06:	bf00      	nop
    ff08:	40001000 	.word	0x40001000

0000ff0c <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    ff0c:	4b04      	ldr	r3, [pc, #16]	; (ff20 <radio_crc_configure+0x14>)
    ff0e:	f240 1203 	movw	r2, #259	; 0x103
    ff12:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    ff16:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ff1a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ff1e:	4770      	bx	lr
    ff20:	40001000 	.word	0x40001000

0000ff24 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    ff24:	4b03      	ldr	r3, [pc, #12]	; (ff34 <radio_crc_is_valid+0x10>)
    ff26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ff2a:	3000      	adds	r0, #0
    ff2c:	bf18      	it	ne
    ff2e:	2001      	movne	r0, #1
    ff30:	4770      	bx	lr
    ff32:	bf00      	nop
    ff34:	40001000 	.word	0x40001000

0000ff38 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ff38:	4800      	ldr	r0, [pc, #0]	; (ff3c <radio_pkt_empty_get+0x4>)
    ff3a:	4770      	bx	lr
    ff3c:	2000128c 	.word	0x2000128c

0000ff40 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ff40:	4800      	ldr	r0, [pc, #0]	; (ff44 <radio_pkt_scratch_get+0x4>)
    ff42:	4770      	bx	lr
    ff44:	20001290 	.word	0x20001290

0000ff48 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff48:	220b      	movs	r2, #11
    ff4a:	4b02      	ldr	r3, [pc, #8]	; (ff54 <radio_switch_complete_and_rx+0xc>)
    ff4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ff50:	4770      	bx	lr
    ff52:	bf00      	nop
    ff54:	40001000 	.word	0x40001000

0000ff58 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff58:	2207      	movs	r2, #7
    ff5a:	4b02      	ldr	r3, [pc, #8]	; (ff64 <radio_switch_complete_and_tx+0xc>)
    ff5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	40001000 	.word	0x40001000

0000ff68 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ff68:	2203      	movs	r2, #3
    ff6a:	4b02      	ldr	r3, [pc, #8]	; (ff74 <radio_switch_complete_and_disable+0xc>)
    ff6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ff70:	4770      	bx	lr
    ff72:	bf00      	nop
    ff74:	40001000 	.word	0x40001000

0000ff78 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ff78:	4a03      	ldr	r2, [pc, #12]	; (ff88 <radio_rssi_measure+0x10>)
    ff7a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ff7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ff82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ff86:	4770      	bx	lr
    ff88:	40001000 	.word	0x40001000

0000ff8c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ff8c:	4b01      	ldr	r3, [pc, #4]	; (ff94 <radio_rssi_get+0x8>)
    ff8e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ff92:	4770      	bx	lr
    ff94:	40001000 	.word	0x40001000

0000ff98 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ff98:	2200      	movs	r2, #0
    ff9a:	4b02      	ldr	r3, [pc, #8]	; (ffa4 <radio_rssi_status_reset+0xc>)
    ff9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ffa0:	4770      	bx	lr
    ffa2:	bf00      	nop
    ffa4:	40001000 	.word	0x40001000

0000ffa8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ffa8:	4b03      	ldr	r3, [pc, #12]	; (ffb8 <radio_rssi_is_ready+0x10>)
    ffaa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ffae:	3000      	adds	r0, #0
    ffb0:	bf18      	it	ne
    ffb2:	2001      	movne	r0, #1
    ffb4:	4770      	bx	lr
    ffb6:	bf00      	nop
    ffb8:	40001000 	.word	0x40001000

0000ffbc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ffbc:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    ffbe:	2400      	movs	r4, #0
    ffc0:	e019      	b.n	fff6 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ffc2:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    ffc4:	7893      	ldrb	r3, [r2, #2]
    ffc6:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ffc8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    ffcc:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    ffce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    ffd2:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    ffd4:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ffd6:	4d0c      	ldr	r5, [pc, #48]	; (10008 <__kernel_ram_size+0x8>)
    ffd8:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    ffdc:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ffe0:	7956      	ldrb	r6, [r2, #5]
    ffe2:	7913      	ldrb	r3, [r2, #4]
    ffe4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ffe8:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ffec:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    fff0:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    fff2:	3401      	adds	r4, #1
    fff4:	b2e4      	uxtb	r4, r4
    fff6:	2c07      	cmp	r4, #7
    fff8:	d9e3      	bls.n	ffc2 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    fffa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    fffe:	4b02      	ldr	r3, [pc, #8]	; (10008 <__kernel_ram_size+0x8>)
   10000:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   10004:	bc70      	pop	{r4, r5, r6}
   10006:	4770      	bx	lr
   10008:	40001000 	.word	0x40001000

0001000c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1000c:	4a03      	ldr	r2, [pc, #12]	; (1001c <radio_filter_disable+0x10>)
   1000e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   10012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   10016:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1001a:	4770      	bx	lr
   1001c:	40001000 	.word	0x40001000

00010020 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   10020:	4b03      	ldr	r3, [pc, #12]	; (10030 <radio_filter_status_reset+0x10>)
   10022:	2200      	movs	r2, #0
   10024:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
   10028:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1002c:	4770      	bx	lr
   1002e:	bf00      	nop
   10030:	40001000 	.word	0x40001000

00010034 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   10034:	4b03      	ldr	r3, [pc, #12]	; (10044 <radio_filter_has_match+0x10>)
   10036:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1003a:	3000      	adds	r0, #0
   1003c:	bf18      	it	ne
   1003e:	2001      	movne	r0, #1
   10040:	4770      	bx	lr
   10042:	bf00      	nop
   10044:	40001000 	.word	0x40001000

00010048 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   10048:	4b01      	ldr	r3, [pc, #4]	; (10050 <radio_filter_match_get+0x8>)
   1004a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1004e:	4770      	bx	lr
   10050:	40001000 	.word	0x40001000

00010054 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   10054:	4b04      	ldr	r3, [pc, #16]	; (10068 <radio_bc_configure+0x14>)
   10056:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1005a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1005e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10066:	4770      	bx	lr
   10068:	40001000 	.word	0x40001000

0001006c <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1006c:	2200      	movs	r2, #0
   1006e:	4b02      	ldr	r3, [pc, #8]	; (10078 <radio_bc_status_reset+0xc>)
   10070:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
   10074:	4770      	bx	lr
   10076:	bf00      	nop
   10078:	40001000 	.word	0x40001000

0001007c <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1007c:	4b03      	ldr	r3, [pc, #12]	; (1008c <radio_bc_has_match+0x10>)
   1007e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
   10082:	3000      	adds	r0, #0
   10084:	bf18      	it	ne
   10086:	2001      	movne	r0, #1
   10088:	4770      	bx	lr
   1008a:	bf00      	nop
   1008c:	40001000 	.word	0x40001000

00010090 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   10090:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   10094:	4b04      	ldr	r3, [pc, #16]	; (100a8 <radio_tmr_status_reset+0x18>)
   10096:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
   1009a:	f248 027f 	movw	r2, #32895	; 0x807f
   1009e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   100a2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   100a6:	4770      	bx	lr
   100a8:	4000b000 	.word	0x4000b000

000100ac <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
   100ac:	4b01      	ldr	r3, [pc, #4]	; (100b4 <radio_tmr_tifs_set+0x8>)
   100ae:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   100b2:	4770      	bx	lr
   100b4:	40001000 	.word	0x40001000

000100b8 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   100b8:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   100ba:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   100be:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   100c2:	4c21      	ldr	r4, [pc, #132]	; (10148 <radio_tmr_start+0x90>)
   100c4:	42a3      	cmp	r3, r4
   100c6:	d906      	bls.n	100d6 <radio_tmr_start+0x1e>
		ticks_start--;
   100c8:	3901      	subs	r1, #1
		remainder += 30517578UL;
   100ca:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   100ce:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   100d2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
   100d6:	4b1d      	ldr	r3, [pc, #116]	; (1014c <radio_tmr_start+0x94>)
   100d8:	fba3 3202 	umull	r3, r2, r3, r2
   100dc:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
   100de:	4b1c      	ldr	r3, [pc, #112]	; (10150 <radio_tmr_start+0x98>)
   100e0:	2401      	movs	r4, #1
   100e2:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
   100e4:	2500      	movs	r5, #0
   100e6:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
   100ea:	2404      	movs	r4, #4
   100ec:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
   100f0:	2602      	movs	r6, #2
   100f2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
   100f6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   100fa:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
   100fe:	4c15      	ldr	r4, [pc, #84]	; (10154 <radio_tmr_start+0x9c>)
   10100:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   10104:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   10108:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
   1010c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
   10110:	4911      	ldr	r1, [pc, #68]	; (10158 <radio_tmr_start+0xa0>)
   10112:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   10116:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
   1011a:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
   1011e:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
   10122:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   10126:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
   1012a:	b948      	cbnz	r0, 10140 <radio_tmr_start+0x88>
   1012c:	490b      	ldr	r1, [pc, #44]	; (1015c <radio_tmr_start+0xa4>)
   1012e:	4b0a      	ldr	r3, [pc, #40]	; (10158 <radio_tmr_start+0xa0>)
   10130:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
   10134:	2101      	movs	r1, #1
   10136:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1013a:	4610      	mov	r0, r2
   1013c:	bc70      	pop	{r4, r5, r6}
   1013e:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
   10140:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
   10144:	e7f3      	b.n	1012e <radio_tmr_start+0x76>
   10146:	bf00      	nop
   10148:	7ff0bdbf 	.word	0x7ff0bdbf
   1014c:	431bde83 	.word	0x431bde83
   10150:	40008000 	.word	0x40008000
   10154:	4000b000 	.word	0x4000b000
   10158:	4001f000 	.word	0x4001f000
   1015c:	40001004 	.word	0x40001004

00010160 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
   10160:	4b02      	ldr	r3, [pc, #8]	; (1016c <radio_tmr_stop+0xc>)
   10162:	2201      	movs	r2, #1
   10164:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
   10166:	611a      	str	r2, [r3, #16]
   10168:	4770      	bx	lr
   1016a:	bf00      	nop
   1016c:	40008000 	.word	0x40008000

00010170 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
   10170:	4b0e      	ldr	r3, [pc, #56]	; (101ac <radio_tmr_hcto_configure+0x3c>)
   10172:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
   10176:	2200      	movs	r2, #0
   10178:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   1017c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   10180:	4a0b      	ldr	r2, [pc, #44]	; (101b0 <radio_tmr_hcto_configure+0x40>)
   10182:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
   10186:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1018a:	3240      	adds	r2, #64	; 0x40
   1018c:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
   10190:	f502 7280 	add.w	r2, r2, #256	; 0x100
   10194:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
   10198:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1019c:	3a34      	subs	r2, #52	; 0x34
   1019e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
   101a2:	2218      	movs	r2, #24
   101a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101a8:	4770      	bx	lr
   101aa:	bf00      	nop
   101ac:	40008000 	.word	0x40008000
   101b0:	40001104 	.word	0x40001104

000101b4 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
   101b4:	4b0b      	ldr	r3, [pc, #44]	; (101e4 <radio_tmr_aa_capture+0x30>)
   101b6:	4a0c      	ldr	r2, [pc, #48]	; (101e8 <radio_tmr_aa_capture+0x34>)
   101b8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
   101bc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   101c0:	3240      	adds	r2, #64	; 0x40
   101c2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   101c6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   101ca:	3a3c      	subs	r2, #60	; 0x3c
   101cc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
   101d0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   101d4:	3240      	adds	r2, #64	; 0x40
   101d6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
   101da:	220c      	movs	r2, #12
   101dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101e0:	4770      	bx	lr
   101e2:	bf00      	nop
   101e4:	4001f000 	.word	0x4001f000
   101e8:	40001100 	.word	0x40001100

000101ec <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
   101ec:	4b01      	ldr	r3, [pc, #4]	; (101f4 <radio_tmr_aa_get+0x8>)
   101ee:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   101f2:	4770      	bx	lr
   101f4:	40008000 	.word	0x40008000

000101f8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   101f8:	4b01      	ldr	r3, [pc, #4]	; (10200 <radio_tmr_aa_save+0x8>)
   101fa:	6018      	str	r0, [r3, #0]
   101fc:	4770      	bx	lr
   101fe:	bf00      	nop
   10200:	20001394 	.word	0x20001394

00010204 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   10204:	4b01      	ldr	r3, [pc, #4]	; (1020c <radio_tmr_aa_restore+0x8>)
   10206:	6818      	ldr	r0, [r3, #0]
   10208:	4770      	bx	lr
   1020a:	bf00      	nop
   1020c:	20001394 	.word	0x20001394

00010210 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
   10210:	4b01      	ldr	r3, [pc, #4]	; (10218 <radio_tmr_ready_get+0x8>)
   10212:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   10216:	4770      	bx	lr
   10218:	40008000 	.word	0x40008000

0001021c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
   1021c:	4b06      	ldr	r3, [pc, #24]	; (10238 <radio_tmr_end_capture+0x1c>)
   1021e:	4a07      	ldr	r2, [pc, #28]	; (1023c <radio_tmr_end_capture+0x20>)
   10220:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
   10224:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10228:	323c      	adds	r2, #60	; 0x3c
   1022a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
   1022e:	2220      	movs	r2, #32
   10230:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10234:	4770      	bx	lr
   10236:	bf00      	nop
   10238:	4001f000 	.word	0x4001f000
   1023c:	4000110c 	.word	0x4000110c

00010240 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
   10240:	4b01      	ldr	r3, [pc, #4]	; (10248 <radio_tmr_end_get+0x8>)
   10242:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   10246:	4770      	bx	lr
   10248:	40008000 	.word	0x40008000

0001024c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
   1024c:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1024e:	4b18      	ldr	r3, [pc, #96]	; (102b0 <radio_ccm_rx_pkt_set+0x64>)
   10250:	2400      	movs	r4, #0
   10252:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   10256:	2402      	movs	r4, #2
   10258:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1025c:	42a1      	cmp	r1, r4
   1025e:	d125      	bne.n	102ac <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   10260:	4914      	ldr	r1, [pc, #80]	; (102b4 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
   10262:	4b13      	ldr	r3, [pc, #76]	; (102b0 <radio_ccm_rx_pkt_set+0x64>)
   10264:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   10268:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1026c:	4812      	ldr	r0, [pc, #72]	; (102b8 <radio_ccm_rx_pkt_set+0x6c>)
   1026e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   10272:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   10276:	4a11      	ldr	r2, [pc, #68]	; (102bc <radio_ccm_rx_pkt_set+0x70>)
   10278:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1027c:	2200      	movs	r2, #0
   1027e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   10282:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   10286:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1028a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   1028e:	4a0c      	ldr	r2, [pc, #48]	; (102c0 <radio_ccm_rx_pkt_set+0x74>)
   10290:	490c      	ldr	r1, [pc, #48]	; (102c4 <radio_ccm_rx_pkt_set+0x78>)
   10292:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
   10296:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1029a:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
   1029e:	2140      	movs	r1, #64	; 0x40
   102a0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
   102a4:	2201      	movs	r2, #1
   102a6:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
   102a8:	bc10      	pop	{r4}
   102aa:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   102ac:	4906      	ldr	r1, [pc, #24]	; (102c8 <radio_ccm_rx_pkt_set+0x7c>)
   102ae:	e7d8      	b.n	10262 <radio_ccm_rx_pkt_set+0x16>
   102b0:	4000f000 	.word	0x4000f000
   102b4:	01010001 	.word	0x01010001
   102b8:	20001290 	.word	0x20001290
   102bc:	20001180 	.word	0x20001180
   102c0:	4001f000 	.word	0x4001f000
   102c4:	40001104 	.word	0x40001104
   102c8:	01000001 	.word	0x01000001

000102cc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   102cc:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   102ce:	4b10      	ldr	r3, [pc, #64]	; (10310 <radio_ccm_tx_pkt_set+0x44>)
   102d0:	2200      	movs	r2, #0
   102d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   102d6:	2402      	movs	r4, #2
   102d8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   102dc:	4c0d      	ldr	r4, [pc, #52]	; (10314 <radio_ccm_tx_pkt_set+0x48>)
   102de:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   102e2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   102e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   102ea:	480b      	ldr	r0, [pc, #44]	; (10318 <radio_ccm_tx_pkt_set+0x4c>)
   102ec:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   102f0:	490a      	ldr	r1, [pc, #40]	; (1031c <radio_ccm_tx_pkt_set+0x50>)
   102f2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   102f6:	2101      	movs	r1, #1
   102f8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   102fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   10300:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   10304:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   10308:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
   1030a:	bc10      	pop	{r4}
   1030c:	4770      	bx	lr
   1030e:	bf00      	nop
   10310:	4000f000 	.word	0x4000f000
   10314:	01010000 	.word	0x01010000
   10318:	20001290 	.word	0x20001290
   1031c:	20001180 	.word	0x20001180

00010320 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   10320:	2202      	movs	r2, #2
   10322:	4b0d      	ldr	r3, [pc, #52]	; (10358 <radio_ccm_is_done+0x38>)
   10324:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   10328:	e002      	b.n	10330 <radio_ccm_is_done+0x10>
   1032a:	bf20      	wfe
  __ASM volatile ("sev");
   1032c:	bf40      	sev
  __ASM volatile ("wfe");
   1032e:	bf20      	wfe
   10330:	4b09      	ldr	r3, [pc, #36]	; (10358 <radio_ccm_is_done+0x38>)
   10332:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10336:	2b00      	cmp	r3, #0
   10338:	d0f7      	beq.n	1032a <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1033a:	4b07      	ldr	r3, [pc, #28]	; (10358 <radio_ccm_is_done+0x38>)
   1033c:	2202      	movs	r2, #2
   1033e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   10342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10346:	4a05      	ldr	r2, [pc, #20]	; (1035c <radio_ccm_is_done+0x3c>)
   10348:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1034c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   10350:	fab0 f080 	clz	r0, r0
   10354:	0940      	lsrs	r0, r0, #5
   10356:	4770      	bx	lr
   10358:	4000f000 	.word	0x4000f000
   1035c:	e000e100 	.word	0xe000e100

00010360 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   10360:	4b03      	ldr	r3, [pc, #12]	; (10370 <radio_ccm_mic_is_valid+0x10>)
   10362:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   10366:	3000      	adds	r0, #0
   10368:	bf18      	it	ne
   1036a:	2001      	movne	r0, #1
   1036c:	4770      	bx	lr
   1036e:	bf00      	nop
   10370:	4000f000 	.word	0x4000f000

00010374 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   10374:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   10376:	4c13      	ldr	r4, [pc, #76]	; (103c4 <radio_ar_configure+0x50>)
   10378:	2303      	movs	r3, #3
   1037a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
   1037e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   10382:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10386:	4b10      	ldr	r3, [pc, #64]	; (103c8 <radio_ar_configure+0x54>)
   10388:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   1038c:	3b01      	subs	r3, #1
   1038e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   10392:	4b0e      	ldr	r3, [pc, #56]	; (103cc <radio_ar_configure+0x58>)
   10394:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
   10398:	2300      	movs	r3, #0
   1039a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1039e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   103a2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
   103a6:	2040      	movs	r0, #64	; 0x40
   103a8:	f7ff fe54 	bl	10054 <radio_bc_configure>
	radio_bc_status_reset();
   103ac:	f7ff fe5e 	bl	1006c <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
   103b0:	4b07      	ldr	r3, [pc, #28]	; (103d0 <radio_ar_configure+0x5c>)
   103b2:	4a08      	ldr	r2, [pc, #32]	; (103d4 <radio_ar_configure+0x60>)
   103b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
   103b8:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
   103bc:	2240      	movs	r2, #64	; 0x40
   103be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   103c2:	bd10      	pop	{r4, pc}
   103c4:	4000f000 	.word	0x4000f000
   103c8:	40001000 	.word	0x40001000
   103cc:	2000117c 	.word	0x2000117c
   103d0:	4001f000 	.word	0x4001f000
   103d4:	40001128 	.word	0x40001128

000103d8 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   103d8:	4b01      	ldr	r3, [pc, #4]	; (103e0 <radio_ar_match_get+0x8>)
   103da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   103de:	4770      	bx	lr
   103e0:	4000f000 	.word	0x4000f000

000103e4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   103e4:	b508      	push	{r3, lr}
	radio_bc_status_reset();
   103e6:	f7ff fe41 	bl	1006c <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   103ea:	2200      	movs	r2, #0
   103ec:	4b01      	ldr	r3, [pc, #4]	; (103f4 <radio_ar_status_reset+0x10>)
   103ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   103f2:	bd08      	pop	{r3, pc}
   103f4:	4000f000 	.word	0x4000f000

000103f8 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
   103f8:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
   103fa:	f7ff fe3f 	bl	1007c <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   103fe:	b168      	cbz	r0, 1041c <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
   10400:	4b0a      	ldr	r3, [pc, #40]	; (1042c <radio_ar_has_match+0x34>)
   10402:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   10406:	b15b      	cbz	r3, 10420 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
   10408:	4b08      	ldr	r3, [pc, #32]	; (1042c <radio_ar_has_match+0x34>)
   1040a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1040e:	b14b      	cbz	r3, 10424 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   10410:	4b06      	ldr	r3, [pc, #24]	; (1042c <radio_ar_has_match+0x34>)
   10412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   10416:	b13b      	cbz	r3, 10428 <radio_ar_has_match+0x30>
   10418:	2000      	movs	r0, #0
   1041a:	bd08      	pop	{r3, pc}
   1041c:	2000      	movs	r0, #0
   1041e:	bd08      	pop	{r3, pc}
   10420:	2000      	movs	r0, #0
   10422:	bd08      	pop	{r3, pc}
   10424:	2000      	movs	r0, #0
   10426:	bd08      	pop	{r3, pc}
   10428:	2001      	movs	r0, #1
}
   1042a:	bd08      	pop	{r3, pc}
   1042c:	4000f000 	.word	0x4000f000

00010430 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
   10430:	b1f0      	cbz	r0, 10470 <isr+0x40>
{
   10432:	b430      	push	{r4, r5}
   10434:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
   10436:	78c0      	ldrb	r0, [r0, #3]
   10438:	1c43      	adds	r3, r0, #1
   1043a:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
   1043c:	7815      	ldrb	r5, [r2, #0]
   1043e:	42ab      	cmp	r3, r5
   10440:	d012      	beq.n	10468 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
   10442:	7894      	ldrb	r4, [r2, #2]
   10444:	42a3      	cmp	r3, r4
   10446:	d016      	beq.n	10476 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   10448:	b1c1      	cbz	r1, 1047c <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   1044a:	490f      	ldr	r1, [pc, #60]	; (10488 <isr+0x58>)
   1044c:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   10450:	4410      	add	r0, r2
   10452:	7101      	strb	r1, [r0, #4]
	rng->last = last;
   10454:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
   10456:	3301      	adds	r3, #1
   10458:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
   1045a:	429d      	cmp	r5, r3
   1045c:	d006      	beq.n	1046c <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
   1045e:	42a3      	cmp	r3, r4
   10460:	d10f      	bne.n	10482 <isr+0x52>
		return 0;
   10462:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
   10464:	bc30      	pop	{r4, r5}
   10466:	4770      	bx	lr
		last = 0;
   10468:	2300      	movs	r3, #0
   1046a:	e7ea      	b.n	10442 <isr+0x12>
		last = 0;
   1046c:	2300      	movs	r3, #0
   1046e:	e7f6      	b.n	1045e <isr+0x2e>
		return -ENOBUFS;
   10470:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10474:	4770      	bx	lr
		return -ENOBUFS;
   10476:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1047a:	e7f3      	b.n	10464 <isr+0x34>
		return -EBUSY;
   1047c:	f06f 000f 	mvn.w	r0, #15
   10480:	e7f0      	b.n	10464 <isr+0x34>
	return -EBUSY;
   10482:	f06f 000f 	mvn.w	r0, #15
   10486:	e7ed      	b.n	10464 <isr+0x34>
   10488:	4000d000 	.word	0x4000d000
   1048c:	00000000 	.word	0x00000000

00010490 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
   10490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10494:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
   10496:	f7ff fd25 	bl	fee4 <radio_is_done>
   1049a:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1049c:	b9e4      	cbnz	r4, 104d8 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   1049e:	46a0      	mov	r8, r4
   104a0:	46a1      	mov	r9, r4
   104a2:	4627      	mov	r7, r4
   104a4:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
   104a6:	25ff      	movs	r5, #255	; 0xff
   104a8:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
   104aa:	f7ff fd01 	bl	feb0 <radio_status_reset>
	radio_tmr_status_reset();
   104ae:	f7ff fdef 	bl	10090 <radio_tmr_status_reset>
	radio_filter_status_reset();
   104b2:	f7ff fdb5 	bl	10020 <radio_filter_status_reset>
	radio_ar_status_reset();
   104b6:	f7ff ff95 	bl	103e4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   104ba:	f7ff fd6d 	bl	ff98 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
   104be:	4bb6      	ldr	r3, [pc, #728]	; (10798 <isr+0x308>)
   104c0:	7c1b      	ldrb	r3, [r3, #16]
   104c2:	2b05      	cmp	r3, #5
   104c4:	f200 8456 	bhi.w	10d74 <isr+0x8e4>
   104c8:	e8df f013 	tbh	[pc, r3, lsl #1]
   104cc:	00e801f3 	.word	0x00e801f3
   104d0:	016e001c 	.word	0x016e001c
   104d4:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
   104d8:	f7ff fd24 	bl	ff24 <radio_crc_is_valid>
   104dc:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   104de:	f7ff fda9 	bl	10034 <radio_filter_has_match>
   104e2:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   104e4:	f7ff fdb0 	bl	10048 <radio_filter_match_get>
   104e8:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
   104ec:	f7ff ff84 	bl	103f8 <radio_ar_has_match>
   104f0:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
   104f4:	f7ff ff70 	bl	103d8 <radio_ar_match_get>
   104f8:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   104fa:	f7ff fd55 	bl	ffa8 <radio_rssi_is_ready>
   104fe:	fa5f f880 	uxtb.w	r8, r0
   10502:	e7d2      	b.n	104aa <isr+0x1a>
	_radio.state = STATE_RX;
   10504:	4da4      	ldr	r5, [pc, #656]	; (10798 <isr+0x308>)
   10506:	2301      	movs	r3, #1
   10508:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
   1050a:	f7ff fe99 	bl	10240 <radio_tmr_end_get>
   1050e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
   10512:	2096      	movs	r0, #150	; 0x96
   10514:	f7ff fdca 	bl	100ac <radio_tmr_tifs_set>
	switch (_radio.role) {
   10518:	7beb      	ldrb	r3, [r5, #15]
   1051a:	3b01      	subs	r3, #1
   1051c:	2b03      	cmp	r3, #3
   1051e:	f200 80b7 	bhi.w	10690 <isr+0x200>
   10522:	e8df f003 	tbb	[pc, r3]
   10526:	3202      	.short	0x3202
   10528:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1052a:	2300      	movs	r3, #0
   1052c:	461a      	mov	r2, r3
   1052e:	4619      	mov	r1, r3
   10530:	4618      	mov	r0, r3
   10532:	f7ff fd11 	bl	ff58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   10536:	f7ff fd03 	bl	ff40 <radio_pkt_scratch_get>
   1053a:	f7ff fc8b 	bl	fe54 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1053e:	f7ff fcc7 	bl	fed0 <radio_is_ready>
   10542:	b990      	cbnz	r0, 1056a <isr+0xda>
		if (ctrl_rl_enabled()) {
   10544:	f00a f802 	bl	1a54c <ctrl_rl_enabled>
   10548:	b9a8      	cbnz	r0, 10576 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
   1054a:	2100      	movs	r1, #0
   1054c:	4608      	mov	r0, r1
   1054e:	f7ff fc93 	bl	fe78 <radio_rx_chain_delay_get>
   10552:	4404      	add	r4, r0
		hcto += addr_us_get(0);
   10554:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
   10556:	2100      	movs	r1, #0
   10558:	4608      	mov	r0, r1
   1055a:	f7ff fc89 	bl	fe70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1055e:	1a20      	subs	r0, r4, r0
   10560:	f7ff fe06 	bl	10170 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   10564:	f7ff fe5a 	bl	1021c <radio_tmr_end_capture>
   10568:	e1a3      	b.n	108b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   1056a:	4040      	eors	r0, r0
   1056c:	f380 8811 	msr	BASEPRI, r0
   10570:	f04f 0004 	mov.w	r0, #4
   10574:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
   10576:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1057a:	f009 fd63 	bl	1a044 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1057e:	4601      	mov	r1, r0
   10580:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10584:	f7ff fef6 	bl	10374 <radio_ar_configure>
   10588:	e7df      	b.n	1054a <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1058a:	2300      	movs	r3, #0
   1058c:	461a      	mov	r2, r3
   1058e:	4619      	mov	r1, r3
   10590:	4618      	mov	r0, r3
   10592:	f7ff fce1 	bl	ff58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   10596:	4b80      	ldr	r3, [pc, #512]	; (10798 <isr+0x308>)
   10598:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1059c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   105a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   105a4:	3008      	adds	r0, #8
   105a6:	f7ff fc55 	bl	fe54 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   105aa:	f7ff fc91 	bl	fed0 <radio_is_ready>
   105ae:	b990      	cbnz	r0, 105d6 <isr+0x146>
		if (ctrl_rl_enabled()) {
   105b0:	f009 ffcc 	bl	1a54c <ctrl_rl_enabled>
   105b4:	b9a8      	cbnz	r0, 105e2 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
   105b6:	2100      	movs	r1, #0
   105b8:	4608      	mov	r0, r1
   105ba:	f7ff fc5d 	bl	fe78 <radio_rx_chain_delay_get>
   105be:	4404      	add	r4, r0
		hcto += addr_us_get(0);
   105c0:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
   105c2:	2100      	movs	r1, #0
   105c4:	4608      	mov	r0, r1
   105c6:	f7ff fc53 	bl	fe70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   105ca:	1a20      	subs	r0, r4, r0
   105cc:	f7ff fdd0 	bl	10170 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   105d0:	f7ff fcd2 	bl	ff78 <radio_rssi_measure>
   105d4:	e16d      	b.n	108b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   105d6:	4040      	eors	r0, r0
   105d8:	f380 8811 	msr	BASEPRI, r0
   105dc:	f04f 0004 	mov.w	r0, #4
   105e0:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
   105e2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   105e6:	f009 fd2d 	bl	1a044 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   105ea:	4601      	mov	r1, r0
   105ec:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   105f0:	f7ff fec0 	bl	10374 <radio_ar_configure>
   105f4:	e7df      	b.n	105b6 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   105f6:	4d68      	ldr	r5, [pc, #416]	; (10798 <isr+0x308>)
   105f8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   105fc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
   10600:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   10604:	09d3      	lsrs	r3, r2, #7
   10606:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1060a:	2100      	movs	r1, #0
   1060c:	f000 0007 	and.w	r0, r0, #7
   10610:	f7ff fca2 	bl	ff58 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
   10614:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
   10618:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   1061c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
   10620:	3108      	adds	r1, #8
   10622:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   10626:	f002 fad3 	bl	12bd0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   1062a:	f7ff fc51 	bl	fed0 <radio_is_ready>
   1062e:	bb20      	cbnz	r0, 1067a <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   10630:	4d59      	ldr	r5, [pc, #356]	; (10798 <isr+0x308>)
   10632:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   10636:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   1063a:	2101      	movs	r1, #1
   1063c:	f000 0007 	and.w	r0, r0, #7
   10640:	f7ff fc1a 	bl	fe78 <radio_rx_chain_delay_get>
   10644:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   10646:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1064a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
   1064e:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10652:	2b02      	cmp	r3, #2
   10654:	d01a      	beq.n	1068c <isr+0x1fc>
   10656:	2b04      	cmp	r3, #4
   10658:	d015      	beq.n	10686 <isr+0x1f6>
		return 40;
   1065a:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   1065c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   1065e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
   10662:	09c1      	lsrs	r1, r0, #7
   10664:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   10668:	f7ff fc02 	bl	fe70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1066c:	1a20      	subs	r0, r4, r0
   1066e:	f7ff fd7f 	bl	10170 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   10672:	2001      	movs	r0, #1
   10674:	f002 fb0a 	bl	12c8c <packet_tx_enqueue>
   10678:	e11b      	b.n	108b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   1067a:	4040      	eors	r0, r0
   1067c:	f380 8811 	msr	BASEPRI, r0
   10680:	f04f 0004 	mov.w	r0, #4
   10684:	df02      	svc	2
		return 376;
   10686:	f44f 74bc 	mov.w	r4, #376	; 0x178
   1068a:	e7e7      	b.n	1065c <isr+0x1cc>
		return 24;
   1068c:	2418      	movs	r4, #24
   1068e:	e7e5      	b.n	1065c <isr+0x1cc>
		LL_ASSERT(0);
   10690:	4040      	eors	r0, r0
   10692:	f380 8811 	msr	BASEPRI, r0
   10696:	f04f 0004 	mov.w	r0, #4
   1069a:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   1069c:	b144      	cbz	r4, 106b0 <isr+0x220>
	switch (_radio.role) {
   1069e:	4b3e      	ldr	r3, [pc, #248]	; (10798 <isr+0x308>)
   106a0:	7bdb      	ldrb	r3, [r3, #15]
   106a2:	3b01      	subs	r3, #1
   106a4:	2b03      	cmp	r3, #3
   106a6:	d879      	bhi.n	1079c <isr+0x30c>
   106a8:	e8df f003 	tbb	[pc, r3]
   106ac:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
   106b0:	2203      	movs	r2, #3
   106b2:	4b39      	ldr	r3, [pc, #228]	; (10798 <isr+0x308>)
   106b4:	741a      	strb	r2, [r3, #16]
		radio_disable();
   106b6:	f7ff fbf1 	bl	fe9c <radio_disable>
   106ba:	e0fa      	b.n	108b2 <isr+0x422>
		if (crc_ok) {
   106bc:	b94e      	cbnz	r6, 106d2 <isr+0x242>
			err = 1;
   106be:	2001      	movs	r0, #1
		if (err) {
   106c0:	2800      	cmp	r0, #0
   106c2:	f000 80f6 	beq.w	108b2 <isr+0x422>
			_radio.state = STATE_CLOSE;
   106c6:	2203      	movs	r2, #3
   106c8:	4b33      	ldr	r3, [pc, #204]	; (10798 <isr+0x308>)
   106ca:	741a      	strb	r2, [r3, #16]
			radio_disable();
   106cc:	f7ff fbe6 	bl	fe9c <radio_disable>
   106d0:	e0ef      	b.n	108b2 <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
   106d2:	f8cd 8000 	str.w	r8, [sp]
   106d6:	462b      	mov	r3, r5
   106d8:	464a      	mov	r2, r9
   106da:	4651      	mov	r1, sl
   106dc:	4638      	mov	r0, r7
   106de:	f007 fc37 	bl	17f50 <isr_rx_adv>
   106e2:	e7ed      	b.n	106c0 <isr+0x230>
		rl_idx = devmatch_ok ?
   106e4:	b9a7      	cbnz	r7, 10710 <isr+0x280>
   106e6:	f1b9 0f00 	cmp.w	r9, #0
   106ea:	d11b      	bne.n	10724 <isr+0x294>
   106ec:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
   106ee:	b9f6      	cbnz	r6, 1072e <isr+0x29e>
			err = 1;
   106f0:	2001      	movs	r0, #1
		if (err) {
   106f2:	2800      	cmp	r0, #0
   106f4:	f000 80dd 	beq.w	108b2 <isr+0x422>
			_radio.state = STATE_CLOSE;
   106f8:	4c27      	ldr	r4, [pc, #156]	; (10798 <isr+0x308>)
   106fa:	2303      	movs	r3, #3
   106fc:	7423      	strb	r3, [r4, #16]
			radio_disable();
   106fe:	f7ff fbcd 	bl	fe9c <radio_disable>
			_radio.scanner.state = 0;
   10702:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   10706:	f36f 0341 	bfc	r3, #1, #1
   1070a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   1070e:	e0d0      	b.n	108b2 <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   10710:	4b21      	ldr	r3, [pc, #132]	; (10798 <isr+0x308>)
   10712:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
   10716:	4651      	mov	r1, sl
   10718:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1071c:	f009 fc9c 	bl	1a058 <ctrl_rl_idx>
   10720:	4604      	mov	r4, r0
   10722:	e7e4      	b.n	106ee <isr+0x25e>
   10724:	4628      	mov	r0, r5
   10726:	f009 fccd 	bl	1a0c4 <ctrl_rl_irk_idx>
   1072a:	4604      	mov	r4, r0
   1072c:	e7df      	b.n	106ee <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   1072e:	4b1a      	ldr	r3, [pc, #104]	; (10798 <isr+0x308>)
   10730:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10734:	f013 0f10 	tst.w	r3, #16
   10738:	d109      	bne.n	1074e <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   1073a:	b91f      	cbnz	r7, 10744 <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1073c:	2301      	movs	r3, #1
		if (crc_ok &&
   1073e:	b9db      	cbnz	r3, 10778 <isr+0x2e8>
			err = 1;
   10740:	2001      	movs	r0, #1
   10742:	e7d6      	b.n	106f2 <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10744:	4621      	mov	r1, r4
   10746:	4648      	mov	r0, r9
   10748:	f009 fe1c 	bl	1a384 <ctrl_rl_idx_allowed>
   1074c:	b980      	cbnz	r0, 10770 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   1074e:	4b12      	ldr	r3, [pc, #72]	; (10798 <isr+0x308>)
   10750:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10754:	f013 0f10 	tst.w	r3, #16
   10758:	d00c      	beq.n	10774 <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   1075a:	b10f      	cbz	r7, 10760 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1075c:	2301      	movs	r3, #1
   1075e:	e7ee      	b.n	1073e <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   10760:	4620      	mov	r0, r4
   10762:	f009 fcd9 	bl	1a118 <ctrl_irk_whitelisted>
   10766:	b108      	cbz	r0, 1076c <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10768:	2301      	movs	r3, #1
   1076a:	e7e8      	b.n	1073e <isr+0x2ae>
   1076c:	2300      	movs	r3, #0
   1076e:	e7e6      	b.n	1073e <isr+0x2ae>
   10770:	2301      	movs	r3, #1
   10772:	e7e4      	b.n	1073e <isr+0x2ae>
   10774:	2300      	movs	r3, #0
   10776:	e7e2      	b.n	1073e <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
   10778:	f8cd 8004 	str.w	r8, [sp, #4]
   1077c:	9400      	str	r4, [sp, #0]
   1077e:	462b      	mov	r3, r5
   10780:	464a      	mov	r2, r9
   10782:	4651      	mov	r1, sl
   10784:	4638      	mov	r0, r7
   10786:	f006 ffb7 	bl	176f8 <isr_rx_scan>
   1078a:	e7b2      	b.n	106f2 <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
   1078c:	4642      	mov	r2, r8
   1078e:	4621      	mov	r1, r4
   10790:	4630      	mov	r0, r6
   10792:	f004 fabb 	bl	14d0c <isr_rx_conn>
   10796:	e08c      	b.n	108b2 <isr+0x422>
   10798:	2000144c 	.word	0x2000144c
		LL_ASSERT(0);
   1079c:	4040      	eors	r0, r0
   1079e:	f380 8811 	msr	BASEPRI, r0
   107a2:	f04f 0004 	mov.w	r0, #4
   107a6:	df02      	svc	2
	switch (_radio.role) {
   107a8:	4bb3      	ldr	r3, [pc, #716]	; (10a78 <isr+0x5e8>)
   107aa:	7bdb      	ldrb	r3, [r3, #15]
   107ac:	b2db      	uxtb	r3, r3
   107ae:	2b04      	cmp	r3, #4
   107b0:	f200 82b2 	bhi.w	10d18 <isr+0x888>
   107b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   107b8:	000502a0 	.word	0x000502a0
   107bc:	00b5006f 	.word	0x00b5006f
   107c0:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
   107c2:	4bad      	ldr	r3, [pc, #692]	; (10a78 <isr+0x5e8>)
   107c4:	7c1b      	ldrb	r3, [r3, #16]
   107c6:	2b03      	cmp	r3, #3
   107c8:	d00f      	beq.n	107ea <isr+0x35a>
		radio_filter_disable();
   107ca:	f7ff fc1f 	bl	1000c <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   107ce:	4aaa      	ldr	r2, [pc, #680]	; (10a78 <isr+0x5e8>)
   107d0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
   107d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   107d8:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
   107dc:	3320      	adds	r3, #32
   107de:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
   107e0:	7c12      	ldrb	r2, [r2, #16]
   107e2:	2a03      	cmp	r2, #3
   107e4:	d00f      	beq.n	10806 <isr+0x376>
	u32_t dont_close = 0;
   107e6:	2300      	movs	r3, #0
   107e8:	e060      	b.n	108ac <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
   107ea:	4ba3      	ldr	r3, [pc, #652]	; (10a78 <isr+0x5e8>)
   107ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   107f0:	f013 0f0e 	tst.w	r3, #14
   107f4:	d0e9      	beq.n	107ca <isr+0x33a>
		adv_setup();
   107f6:	f002 fca5 	bl	13144 <adv_setup>
		radio_tx_enable();
   107fa:	f7ff fb49 	bl	fe90 <radio_tx_enable>
		radio_tmr_end_capture();
   107fe:	f7ff fd0d 	bl	1021c <radio_tmr_end_capture>
		dont_close = 1;
   10802:	2301      	movs	r3, #1
   10804:	e052      	b.n	108ac <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   10806:	79db      	ldrb	r3, [r3, #7]
   10808:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
   1080c:	2b01      	cmp	r3, #1
   1080e:	d040      	beq.n	10892 <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
   10810:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   10814:	2001      	movs	r0, #1
   10816:	f000 fb7d 	bl	10f14 <rand_isr_get>
			random_delay %= 10;
   1081a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1081e:	4a97      	ldr	r2, [pc, #604]	; (10a7c <isr+0x5ec>)
   10820:	fba2 1203 	umull	r1, r2, r2, r3
   10824:	08d2      	lsrs	r2, r2, #3
   10826:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1082a:	0051      	lsls	r1, r2, #1
   1082c:	1a5a      	subs	r2, r3, r1
   1082e:	b2d2      	uxtb	r2, r2
			random_delay += 1;
   10830:	3201      	adds	r2, #1
   10832:	b2d2      	uxtb	r2, r2
   10834:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
   10838:	b2d2      	uxtb	r2, r2
   1083a:	4891      	ldr	r0, [pc, #580]	; (10a80 <isr+0x5f0>)
   1083c:	fba2 0100 	umull	r0, r1, r2, r0
   10840:	23e8      	movs	r3, #232	; 0xe8
   10842:	fb03 1102 	mla	r1, r3, r2, r1
   10846:	a38a      	add	r3, pc, #552	; (adr r3, 10a70 <isr+0x5e0>)
   10848:	e9d3 2300 	ldrd	r2, r3, [r3]
   1084c:	f7f0 fc56 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
   10850:	f640 63a2 	movw	r3, #3746	; 0xea2
   10854:	9306      	str	r3, [sp, #24]
   10856:	4b8b      	ldr	r3, [pc, #556]	; (10a84 <isr+0x5f4>)
   10858:	9305      	str	r3, [sp, #20]
   1085a:	2400      	movs	r4, #0
   1085c:	9404      	str	r4, [sp, #16]
   1085e:	9403      	str	r4, [sp, #12]
   10860:	9402      	str	r4, [sp, #8]
   10862:	9401      	str	r4, [sp, #4]
   10864:	9400      	str	r4, [sp, #0]
   10866:	b283      	uxth	r3, r0
   10868:	2205      	movs	r2, #5
   1086a:	4621      	mov	r1, r4
   1086c:	4620      	mov	r0, r4
   1086e:	f000 fe1d 	bl	114ac <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10872:	b130      	cbz	r0, 10882 <isr+0x3f2>
   10874:	2802      	cmp	r0, #2
   10876:	d004      	beq.n	10882 <isr+0x3f2>
   10878:	4b7f      	ldr	r3, [pc, #508]	; (10a78 <isr+0x5e8>)
   1087a:	7b9b      	ldrb	r3, [r3, #14]
   1087c:	b2db      	uxtb	r3, r3
   1087e:	2b05      	cmp	r3, #5
   10880:	d101      	bne.n	10886 <isr+0x3f6>
	u32_t dont_close = 0;
   10882:	2300      	movs	r3, #0
   10884:	e012      	b.n	108ac <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10886:	4040      	eors	r0, r0
   10888:	f380 8811 	msr	BASEPRI, r0
   1088c:	f04f 0004 	mov.w	r0, #4
   10890:	df02      	svc	2
	u32_t dont_close = 0;
   10892:	2300      	movs	r3, #0
   10894:	e00a      	b.n	108ac <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
   10896:	4b78      	ldr	r3, [pc, #480]	; (10a78 <isr+0x5e8>)
   10898:	7c1b      	ldrb	r3, [r3, #16]
   1089a:	2b03      	cmp	r3, #3
   1089c:	d00c      	beq.n	108b8 <isr+0x428>
		radio_filter_disable();
   1089e:	f7ff fbb5 	bl	1000c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   108a2:	4b75      	ldr	r3, [pc, #468]	; (10a78 <isr+0x5e8>)
   108a4:	7c1b      	ldrb	r3, [r3, #16]
   108a6:	2b05      	cmp	r3, #5
   108a8:	d031      	beq.n	1090e <isr+0x47e>
	u32_t dont_close = 0;
   108aa:	2300      	movs	r3, #0
	if (dont_close) {
   108ac:	2b00      	cmp	r3, #0
   108ae:	f000 8249 	beq.w	10d44 <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   108b2:	b00a      	add	sp, #40	; 0x28
   108b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   108b8:	2096      	movs	r0, #150	; 0x96
   108ba:	f7ff fbf7 	bl	100ac <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   108be:	2300      	movs	r3, #0
   108c0:	461a      	mov	r2, r3
   108c2:	4619      	mov	r1, r3
   108c4:	4618      	mov	r0, r3
   108c6:	f7ff fb47 	bl	ff58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   108ca:	4b6b      	ldr	r3, [pc, #428]	; (10a78 <isr+0x5e8>)
   108cc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   108d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   108d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   108d8:	3008      	adds	r0, #8
   108da:	f7ff fabb 	bl	fe54 <radio_pkt_rx_set>
		radio_rssi_measure();
   108de:	f7ff fb4b 	bl	ff78 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   108e2:	f009 fe33 	bl	1a54c <ctrl_rl_enabled>
   108e6:	b940      	cbnz	r0, 108fa <isr+0x46a>
		_radio.state = STATE_RX;
   108e8:	2401      	movs	r4, #1
   108ea:	4b63      	ldr	r3, [pc, #396]	; (10a78 <isr+0x5e8>)
   108ec:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   108ee:	f7ff fac9 	bl	fe84 <radio_rx_enable>
		radio_tmr_end_capture();
   108f2:	f7ff fc93 	bl	1021c <radio_tmr_end_capture>
		dont_close = 1;
   108f6:	4623      	mov	r3, r4
   108f8:	e7d8      	b.n	108ac <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
   108fa:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   108fe:	f009 fba1 	bl	1a044 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10902:	4601      	mov	r1, r0
   10904:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10908:	f7ff fd34 	bl	10374 <radio_ar_configure>
   1090c:	e7ec      	b.n	108e8 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1090e:	2400      	movs	r4, #0
   10910:	9400      	str	r4, [sp, #0]
   10912:	4623      	mov	r3, r4
   10914:	2204      	movs	r2, #4
   10916:	4621      	mov	r1, r4
   10918:	4620      	mov	r0, r4
   1091a:	f000 fe15 	bl	11548 <ticker_stop>
	u32_t dont_close = 0;
   1091e:	4623      	mov	r3, r4
   10920:	e7c4      	b.n	108ac <isr+0x41c>
	if (_radio.conn_curr == 0) {
   10922:	4b55      	ldr	r3, [pc, #340]	; (10a78 <isr+0x5e8>)
   10924:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10928:	2800      	cmp	r0, #0
   1092a:	f000 81fb 	beq.w	10d24 <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1092e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10932:	b141      	cbz	r1, 10946 <isr+0x4b6>
   10934:	7bdb      	ldrb	r3, [r3, #15]
   10936:	b2db      	uxtb	r3, r3
   10938:	2b03      	cmp	r3, #3
   1093a:	d046      	beq.n	109ca <isr+0x53a>
   1093c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10940:	f013 0f01 	tst.w	r3, #1
   10944:	d141      	bne.n	109ca <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
   10946:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   1094a:	f108 0401 	add.w	r4, r8, #1
   1094e:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   10950:	4b49      	ldr	r3, [pc, #292]	; (10a78 <isr+0x5e8>)
   10952:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   10956:	2b00      	cmp	r3, #0
   10958:	f000 80b8 	beq.w	10acc <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
   1095c:	4b46      	ldr	r3, [pc, #280]	; (10a78 <isr+0x5e8>)
   1095e:	7bdb      	ldrb	r3, [r3, #15]
   10960:	b2db      	uxtb	r3, r3
   10962:	2b03      	cmp	r3, #3
   10964:	d03c      	beq.n	109e0 <isr+0x550>
		} else if (reason_peer) {
   10966:	2900      	cmp	r1, #0
   10968:	f000 80ad 	beq.w	10ac6 <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
   1096c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10970:	f043 0301 	orr.w	r3, r3, #1
   10974:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10978:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   1097a:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   1097c:	4b3e      	ldr	r3, [pc, #248]	; (10a78 <isr+0x5e8>)
   1097e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10982:	2200      	movs	r2, #0
   10984:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10986:	4b3c      	ldr	r3, [pc, #240]	; (10a78 <isr+0x5e8>)
   10988:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1098c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10990:	2b00      	cmp	r3, #0
   10992:	f000 80d8 	beq.w	10b46 <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10996:	429c      	cmp	r4, r3
   10998:	f080 80c9 	bcs.w	10b2e <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1099c:	1b1b      	subs	r3, r3, r4
   1099e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   109a2:	4b35      	ldr	r3, [pc, #212]	; (10a78 <isr+0x5e8>)
   109a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   109a8:	2100      	movs	r1, #0
   109aa:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   109ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   109b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   109b4:	2a06      	cmp	r2, #6
   109b6:	f240 8130 	bls.w	10c1a <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
   109ba:	4a2f      	ldr	r2, [pc, #188]	; (10a78 <isr+0x5e8>)
   109bc:	7bd2      	ldrb	r2, [r2, #15]
   109be:	b2d2      	uxtb	r2, r2
   109c0:	2a03      	cmp	r2, #3
   109c2:	f000 80a2 	beq.w	10b0a <isr+0x67a>
	force = 0;
   109c6:	2700      	movs	r7, #0
   109c8:	e0be      	b.n	10b48 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   109ca:	f004 f90b 	bl	14be4 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   109ce:	4c2a      	ldr	r4, [pc, #168]	; (10a78 <isr+0x5e8>)
   109d0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   109d4:	f002 f9b2 	bl	12d3c <connection_release>
		_radio.conn_curr = NULL;
   109d8:	2300      	movs	r3, #0
   109da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   109de:	e765      	b.n	108ac <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   109e0:	f7ff fc10 	bl	10204 <radio_tmr_aa_restore>
   109e4:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   109e6:	f7ff fc13 	bl	10210 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   109ea:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   109ee:	4b22      	ldr	r3, [pc, #136]	; (10a78 <isr+0x5e8>)
   109f0:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   109f4:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   109f8:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   109fc:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10a00:	2b02      	cmp	r3, #2
   10a02:	d031      	beq.n	10a68 <isr+0x5d8>
   10a04:	2b04      	cmp	r3, #4
   10a06:	d02c      	beq.n	10a62 <isr+0x5d2>
		return 40;
   10a08:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   10a0a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10a0c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   10a0e:	45ba      	cmp	sl, r7
   10a10:	d83c      	bhi.n	10a8c <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
   10a12:	4e1d      	ldr	r6, [pc, #116]	; (10a88 <isr+0x5f8>)
   10a14:	a316      	add	r3, pc, #88	; (adr r3, 10a70 <isr+0x5e0>)
   10a16:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a1a:	fba0 0106 	umull	r0, r1, r0, r6
   10a1e:	f7f0 fb6d 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   10a22:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   10a24:	eba7 000a 	sub.w	r0, r7, sl
   10a28:	a311      	add	r3, pc, #68	; (adr r3, 10a70 <isr+0x5e0>)
   10a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a2e:	fba0 0106 	umull	r0, r1, r0, r6
   10a32:	f7f0 fb63 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10a36:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10a38:	2200      	movs	r2, #0
   10a3a:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10a3e:	4b0e      	ldr	r3, [pc, #56]	; (10a78 <isr+0x5e8>)
   10a40:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   10a44:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10a46:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10a4a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   10a4e:	b38a      	cbz	r2, 10ab4 <isr+0x624>
				if (pdu_data_tx->len ||
   10a50:	7952      	ldrb	r2, [r2, #5]
   10a52:	b91a      	cbnz	r2, 10a5c <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
   10a54:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   10a58:	2a00      	cmp	r2, #0
   10a5a:	d08f      	beq.n	1097c <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
   10a5c:	2200      	movs	r2, #0
   10a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
   10a60:	e78c      	b.n	1097c <isr+0x4ec>
		return 376;
   10a62:	f44f 76bc 	mov.w	r6, #376	; 0x178
   10a66:	e7d0      	b.n	10a0a <isr+0x57a>
		return 24;
   10a68:	2618      	movs	r6, #24
   10a6a:	e7ce      	b.n	10a0a <isr+0x57a>
   10a6c:	f3af 8000 	nop.w
   10a70:	1afd498d 	.word	0x1afd498d
   10a74:	00000007 	.word	0x00000007
   10a78:	2000144c 	.word	0x2000144c
   10a7c:	cccccccd 	.word	0xcccccccd
   10a80:	d4a51000 	.word	0xd4a51000
   10a84:	0001248d 	.word	0x0001248d
   10a88:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   10a8c:	4faa      	ldr	r7, [pc, #680]	; (10d38 <isr+0x8a8>)
   10a8e:	a3a8      	add	r3, pc, #672	; (adr r3, 10d30 <isr+0x8a0>)
   10a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a94:	fbaa 0107 	umull	r0, r1, sl, r7
   10a98:	f7f0 fb30 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   10a9c:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   10a9e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   10aa2:	a3a3      	add	r3, pc, #652	; (adr r3, 10d30 <isr+0x8a0>)
   10aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aa8:	fba0 0107 	umull	r0, r1, r0, r7
   10aac:	f7f0 fb26 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10ab0:	b286      	uxth	r6, r0
   10ab2:	e7c1      	b.n	10a38 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   10ab4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10ab8:	f012 0f01 	tst.w	r2, #1
   10abc:	f43f af5e 	beq.w	1097c <isr+0x4ec>
					_radio.conn_curr->latency;
   10ac0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   10ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
   10ac4:	e75a      	b.n	1097c <isr+0x4ec>
	ticks_drift_minus = 0;
   10ac6:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10ac8:	4635      	mov	r5, r6
   10aca:	e757      	b.n	1097c <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
   10acc:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10ace:	b195      	cbz	r5, 10af6 <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10ad0:	42ac      	cmp	r4, r5
   10ad2:	d204      	bcs.n	10ade <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10ad4:	1b2d      	subs	r5, r5, r4
   10ad6:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10ad8:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   10ada:	462e      	mov	r6, r5
   10adc:	e753      	b.n	10986 <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10ade:	213e      	movs	r1, #62	; 0x3e
   10ae0:	f004 f880 	bl	14be4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10ae4:	4c95      	ldr	r4, [pc, #596]	; (10d3c <isr+0x8ac>)
   10ae6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10aea:	f002 f927 	bl	12d3c <connection_release>
			_radio.conn_curr = NULL;
   10aee:	2300      	movs	r3, #0
   10af0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10af4:	e6da      	b.n	108ac <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
   10af6:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   10afa:	b926      	cbnz	r6, 10b06 <isr+0x676>
				_radio.conn_curr->supervision_reload;
   10afc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   10afe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10b02:	4635      	mov	r5, r6
   10b04:	e73f      	b.n	10986 <isr+0x4f6>
	ticks_drift_minus = 0;
   10b06:	462e      	mov	r6, r5
   10b08:	e73d      	b.n	10986 <isr+0x4f6>
				if (latency_event != 0) {
   10b0a:	f1b8 0f00 	cmp.w	r8, #0
   10b0e:	f040 8086 	bne.w	10c1e <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
   10b12:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10b14:	087a      	lsrs	r2, r7, #1
   10b16:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   10b18:	f017 0701 	ands.w	r7, r7, #1
   10b1c:	d014      	beq.n	10b48 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
   10b1e:	4b87      	ldr	r3, [pc, #540]	; (10d3c <isr+0x8ac>)
   10b20:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10b24:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   10b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b2a:	66d3      	str	r3, [r2, #108]	; 0x6c
   10b2c:	e00c      	b.n	10b48 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10b2e:	2108      	movs	r1, #8
   10b30:	f004 f858 	bl	14be4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10b34:	4c81      	ldr	r4, [pc, #516]	; (10d3c <isr+0x8ac>)
   10b36:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10b3a:	f002 f8ff 	bl	12d3c <connection_release>
			_radio.conn_curr = NULL;
   10b3e:	2300      	movs	r3, #0
   10b40:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10b44:	e6b2      	b.n	108ac <isr+0x41c>
	force = 0;
   10b46:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   10b48:	4b7c      	ldr	r3, [pc, #496]	; (10d3c <isr+0x8ac>)
   10b4a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10b4e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10b52:	b123      	cbz	r3, 10b5e <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10b54:	429c      	cmp	r4, r3
   10b56:	d264      	bcs.n	10c22 <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10b58:	1b1b      	subs	r3, r3, r4
   10b5a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10b5e:	4b77      	ldr	r3, [pc, #476]	; (10d3c <isr+0x8ac>)
   10b60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10b64:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10b68:	b123      	cbz	r3, 10b74 <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10b6a:	429c      	cmp	r4, r3
   10b6c:	d265      	bcs.n	10c3a <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10b6e:	1b1b      	subs	r3, r3, r4
   10b70:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10b74:	4b71      	ldr	r3, [pc, #452]	; (10d3c <isr+0x8ac>)
   10b76:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10b7a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10b7e:	b12b      	cbz	r3, 10b8c <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10b80:	429c      	cmp	r4, r3
   10b82:	f080 8090 	bcs.w	10ca6 <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10b86:	1b1b      	subs	r3, r3, r4
   10b88:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10b8c:	4b6b      	ldr	r3, [pc, #428]	; (10d3c <isr+0x8ac>)
   10b8e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10b92:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   10b96:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   10b9a:	4299      	cmp	r1, r3
   10b9c:	d006      	beq.n	10bac <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10b9e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   10ba2:	3b01      	subs	r3, #1
   10ba4:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10ba6:	2b01      	cmp	r3, #1
   10ba8:	f240 809b 	bls.w	10ce2 <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10bac:	b937      	cbnz	r7, 10bbc <isr+0x72c>
   10bae:	4b63      	ldr	r3, [pc, #396]	; (10d3c <isr+0x8ac>)
   10bb0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10bb6:	4598      	cmp	r8, r3
   10bb8:	f000 8096 	beq.w	10ce8 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
   10bbc:	4b5f      	ldr	r3, [pc, #380]	; (10d3c <isr+0x8ac>)
   10bbe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10bc4:	3301      	adds	r3, #1
   10bc6:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10bc8:	b925      	cbnz	r5, 10bd4 <isr+0x744>
   10bca:	b91e      	cbnz	r6, 10bd4 <isr+0x744>
   10bcc:	b913      	cbnz	r3, 10bd4 <isr+0x744>
	    (lazy != 0) || (force != 0)) {
   10bce:	2f00      	cmp	r7, #0
   10bd0:	f000 80aa 	beq.w	10d28 <isr+0x898>
				    _radio.conn_curr->handle;
   10bd4:	4a59      	ldr	r2, [pc, #356]	; (10d3c <isr+0x8ac>)
   10bd6:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10bda:	f892 4020 	ldrb.w	r4, [r2, #32]
   10bde:	3407      	adds	r4, #7
   10be0:	b2e4      	uxtb	r4, r4
		ticker_status =
   10be2:	9406      	str	r4, [sp, #24]
   10be4:	4a56      	ldr	r2, [pc, #344]	; (10d40 <isr+0x8b0>)
   10be6:	9205      	str	r2, [sp, #20]
   10be8:	9704      	str	r7, [sp, #16]
   10bea:	9303      	str	r3, [sp, #12]
   10bec:	2000      	movs	r0, #0
   10bee:	9002      	str	r0, [sp, #8]
   10bf0:	9001      	str	r0, [sp, #4]
   10bf2:	9600      	str	r6, [sp, #0]
   10bf4:	462b      	mov	r3, r5
   10bf6:	4622      	mov	r2, r4
   10bf8:	4601      	mov	r1, r0
   10bfa:	f000 fc57 	bl	114ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10bfe:	4603      	mov	r3, r0
   10c00:	2800      	cmp	r0, #0
   10c02:	f43f ae53 	beq.w	108ac <isr+0x41c>
   10c06:	2802      	cmp	r0, #2
   10c08:	f000 8090 	beq.w	10d2c <isr+0x89c>
   10c0c:	4b4b      	ldr	r3, [pc, #300]	; (10d3c <isr+0x8ac>)
   10c0e:	7b9b      	ldrb	r3, [r3, #14]
   10c10:	b2db      	uxtb	r3, r3
   10c12:	429c      	cmp	r4, r3
   10c14:	d16a      	bne.n	10cec <isr+0x85c>
	u32_t dont_close = 0;
   10c16:	2300      	movs	r3, #0
   10c18:	e648      	b.n	108ac <isr+0x41c>
				force = 1;
   10c1a:	2701      	movs	r7, #1
   10c1c:	e794      	b.n	10b48 <isr+0x6b8>
					force = 1;
   10c1e:	2701      	movs	r7, #1
   10c20:	e792      	b.n	10b48 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10c22:	2122      	movs	r1, #34	; 0x22
   10c24:	f003 ffde 	bl	14be4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10c28:	4c44      	ldr	r4, [pc, #272]	; (10d3c <isr+0x8ac>)
   10c2a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10c2e:	f002 f885 	bl	12d3c <connection_release>
			_radio.conn_curr = NULL;
   10c32:	2300      	movs	r3, #0
   10c34:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10c38:	e638      	b.n	108ac <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
   10c3a:	2300      	movs	r3, #0
   10c3c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   10c40:	4b3e      	ldr	r3, [pc, #248]	; (10d3c <isr+0x8ac>)
   10c42:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   10c46:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10c4a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   10c4c:	429a      	cmp	r2, r3
   10c4e:	d318      	bcc.n	10c82 <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   10c50:	4b3a      	ldr	r3, [pc, #232]	; (10d3c <isr+0x8ac>)
   10c52:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   10c56:	1ad3      	subs	r3, r2, r3
   10c58:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   10c5a:	2b01      	cmp	r3, #1
   10c5c:	d91b      	bls.n	10c96 <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   10c5e:	4b37      	ldr	r3, [pc, #220]	; (10d3c <isr+0x8ac>)
   10c60:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   10c64:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   10c6c:	b1ab      	cbz	r3, 10c9a <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   10c6e:	4a33      	ldr	r2, [pc, #204]	; (10d3c <isr+0x8ac>)
   10c70:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   10c74:	8c12      	ldrh	r2, [r2, #32]
   10c76:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10c78:	220a      	movs	r2, #10
   10c7a:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   10c7c:	f003 ff3e 	bl	14afc <packet_rx_enqueue>
   10c80:	e778      	b.n	10b74 <isr+0x6e4>
		return (_radio.packet_rx_count -
   10c82:	492e      	ldr	r1, [pc, #184]	; (10d3c <isr+0x8ac>)
   10c84:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   10c88:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   10c8c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   10c8e:	fa52 f383 	uxtab	r3, r2, r3
   10c92:	b2db      	uxtb	r3, r3
   10c94:	e7e1      	b.n	10c5a <isr+0x7ca>
		return 0;
   10c96:	2300      	movs	r3, #0
   10c98:	e7e8      	b.n	10c6c <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
   10c9a:	4040      	eors	r0, r0
   10c9c:	f380 8811 	msr	BASEPRI, r0
   10ca0:	f04f 0004 	mov.w	r0, #4
   10ca4:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   10ca6:	2300      	movs	r3, #0
   10ca8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10cac:	4b23      	ldr	r3, [pc, #140]	; (10d3c <isr+0x8ac>)
   10cae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10cb2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   10cb6:	2a00      	cmp	r2, #0
   10cb8:	f47f af68 	bne.w	10b8c <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
   10cbc:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   10cc0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10cc4:	4291      	cmp	r1, r2
   10cc6:	f47f af61 	bne.w	10b8c <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10cca:	2207      	movs	r2, #7
   10ccc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10cd0:	4b1a      	ldr	r3, [pc, #104]	; (10d3c <isr+0x8ac>)
   10cd2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10cd6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10cda:	3b01      	subs	r3, #1
   10cdc:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10ce0:	e754      	b.n	10b8c <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
   10ce2:	2300      	movs	r3, #0
   10ce4:	8553      	strh	r3, [r2, #42]	; 0x2a
   10ce6:	e761      	b.n	10bac <isr+0x71c>
	lazy = 0;
   10ce8:	2300      	movs	r3, #0
   10cea:	e76d      	b.n	10bc8 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10cec:	4040      	eors	r0, r0
   10cee:	f380 8811 	msr	BASEPRI, r0
   10cf2:	f04f 0004 	mov.w	r0, #4
   10cf6:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10cf8:	4b10      	ldr	r3, [pc, #64]	; (10d3c <isr+0x8ac>)
   10cfa:	7c1b      	ldrb	r3, [r3, #16]
   10cfc:	3b04      	subs	r3, #4
   10cfe:	b2db      	uxtb	r3, r3
   10d00:	2b01      	cmp	r3, #1
   10d02:	d803      	bhi.n	10d0c <isr+0x87c>
		_radio.state = STATE_NONE;
   10d04:	2200      	movs	r2, #0
   10d06:	4b0d      	ldr	r3, [pc, #52]	; (10d3c <isr+0x8ac>)
   10d08:	741a      	strb	r2, [r3, #16]
   10d0a:	e5d2      	b.n	108b2 <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10d0c:	4040      	eors	r0, r0
   10d0e:	f380 8811 	msr	BASEPRI, r0
   10d12:	f04f 0004 	mov.w	r0, #4
   10d16:	df02      	svc	2
		LL_ASSERT(0);
   10d18:	4040      	eors	r0, r0
   10d1a:	f380 8811 	msr	BASEPRI, r0
   10d1e:	f04f 0004 	mov.w	r0, #4
   10d22:	df02      	svc	2
	u32_t dont_close = 0;
   10d24:	2300      	movs	r3, #0
   10d26:	e5c1      	b.n	108ac <isr+0x41c>
   10d28:	2300      	movs	r3, #0
   10d2a:	e5bf      	b.n	108ac <isr+0x41c>
   10d2c:	2300      	movs	r3, #0
   10d2e:	e5bd      	b.n	108ac <isr+0x41c>
   10d30:	1afd498d 	.word	0x1afd498d
   10d34:	00000007 	.word	0x00000007
   10d38:	3b9aca00 	.word	0x3b9aca00
   10d3c:	2000144c 	.word	0x2000144c
   10d40:	000124ad 	.word	0x000124ad
	_radio.role = ROLE_NONE;
   10d44:	4d0e      	ldr	r5, [pc, #56]	; (10d80 <isr+0x8f0>)
   10d46:	2400      	movs	r4, #0
   10d48:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   10d4a:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   10d4c:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   10d4e:	f7ff fa07 	bl	10160 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   10d52:	4623      	mov	r3, r4
   10d54:	4622      	mov	r2, r4
   10d56:	4621      	mov	r1, r4
   10d58:	4620      	mov	r0, r4
   10d5a:	f001 fe29 	bl	129b0 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   10d5e:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   10d60:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   10d62:	685b      	ldr	r3, [r3, #4]
   10d64:	4621      	mov	r1, r4
   10d66:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10d68:	2201      	movs	r2, #1
   10d6a:	4611      	mov	r1, r2
   10d6c:	4620      	mov	r0, r4
   10d6e:	f7fe fd01 	bl	f774 <mayfly_enable>
   10d72:	e59e      	b.n	108b2 <isr+0x422>
		LL_ASSERT(0);
   10d74:	4040      	eors	r0, r0
   10d76:	f380 8811 	msr	BASEPRI, r0
   10d7a:	f04f 0004 	mov.w	r0, #4
   10d7e:	df02      	svc	2
   10d80:	2000144c 	.word	0x2000144c

00010d84 <init>:
{
   10d84:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   10d86:	1d1c      	adds	r4, r3, #4
   10d88:	42a2      	cmp	r2, r4
   10d8a:	d90e      	bls.n	10daa <init+0x26>
	*rng = (struct rand *)context;
   10d8c:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   10d8e:	3a04      	subs	r2, #4
   10d90:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   10d92:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   10d94:	2300      	movs	r3, #0
   10d96:	70cb      	strb	r3, [r1, #3]
   10d98:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   10d9a:	4b0c      	ldr	r3, [pc, #48]	; (10dcc <init+0x48>)
   10d9c:	681b      	ldr	r3, [r3, #0]
   10d9e:	b153      	cbz	r3, 10db6 <init+0x32>
   10da0:	4b0b      	ldr	r3, [pc, #44]	; (10dd0 <init+0x4c>)
   10da2:	681b      	ldr	r3, [r3, #0]
   10da4:	b13b      	cbz	r3, 10db6 <init+0x32>
}
   10da6:	bc10      	pop	{r4}
   10da8:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   10daa:	4040      	eors	r0, r0
   10dac:	f380 8811 	msr	BASEPRI, r0
   10db0:	f04f 0004 	mov.w	r0, #4
   10db4:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   10db6:	4b07      	ldr	r3, [pc, #28]	; (10dd4 <init+0x50>)
   10db8:	2201      	movs	r2, #1
   10dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   10dbe:	2100      	movs	r1, #0
   10dc0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10dc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   10dc8:	601a      	str	r2, [r3, #0]
}
   10dca:	e7ec      	b.n	10da6 <init+0x22>
   10dcc:	2000139c 	.word	0x2000139c
   10dd0:	200013a0 	.word	0x200013a0
   10dd4:	4000d000 	.word	0x4000d000

00010dd8 <get>:
	LL_ASSERT(rng);
   10dd8:	b1d0      	cbz	r0, 10e10 <get+0x38>
{
   10dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dde:	4607      	mov	r7, r0
	first = rng->first;
   10de0:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   10de4:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   10de6:	45ae      	cmp	lr, r5
   10de8:	d82e      	bhi.n	10e48 <get+0x70>
		d = &rand[octets];
   10dea:	440a      	add	r2, r1
		s = &rng->rand[first];
   10dec:	eb00 060e 	add.w	r6, r0, lr
   10df0:	3604      	adds	r6, #4
		avail = last - first;
   10df2:	eba5 040e 	sub.w	r4, r5, lr
   10df6:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10df8:	42a1      	cmp	r1, r4
   10dfa:	d20f      	bcs.n	10e1c <get+0x44>
			remaining = avail - octets;
   10dfc:	b2cb      	uxtb	r3, r1
   10dfe:	1ae4      	subs	r4, r4, r3
   10e00:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   10e04:	461c      	mov	r4, r3
		first += avail;
   10e06:	44a6      	add	lr, r4
   10e08:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   10e0c:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10e0e:	e00d      	b.n	10e2c <get+0x54>
	LL_ASSERT(rng);
   10e10:	4040      	eors	r0, r0
   10e12:	f380 8811 	msr	BASEPRI, r0
   10e16:	f04f 0004 	mov.w	r0, #4
   10e1a:	df02      	svc	2
			remaining = 0;
   10e1c:	f04f 0c00 	mov.w	ip, #0
   10e20:	e7f1      	b.n	10e06 <get+0x2e>
			*(--d) = *s++;
   10e22:	7835      	ldrb	r5, [r6, #0]
   10e24:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   10e28:	461c      	mov	r4, r3
			*(--d) = *s++;
   10e2a:	3601      	adds	r6, #1
		while (avail--) {
   10e2c:	1e63      	subs	r3, r4, #1
   10e2e:	b2db      	uxtb	r3, r3
   10e30:	2c00      	cmp	r4, #0
   10e32:	d1f6      	bne.n	10e22 <get+0x4a>
		rng->first = first;
   10e34:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   10e38:	787b      	ldrb	r3, [r7, #1]
   10e3a:	459c      	cmp	ip, r3
   10e3c:	d202      	bcs.n	10e44 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   10e3e:	2201      	movs	r2, #1
   10e40:	4b24      	ldr	r3, [pc, #144]	; (10ed4 <get+0xfc>)
   10e42:	601a      	str	r2, [r3, #0]
}
   10e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   10e48:	440a      	add	r2, r1
		s = &rng->rand[first];
   10e4a:	eb00 080e 	add.w	r8, r0, lr
   10e4e:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   10e52:	7804      	ldrb	r4, [r0, #0]
   10e54:	eba4 040e 	sub.w	r4, r4, lr
   10e58:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10e5a:	42a1      	cmp	r1, r4
   10e5c:	d20d      	bcs.n	10e7a <get+0xa2>
			remaining = avail + last - octets;
   10e5e:	eb05 0c04 	add.w	ip, r5, r4
   10e62:	fa5f fc8c 	uxtb.w	ip, ip
   10e66:	b2cc      	uxtb	r4, r1
   10e68:	ebac 0c04 	sub.w	ip, ip, r4
   10e6c:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   10e70:	44a6      	add	lr, r4
   10e72:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   10e76:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10e78:	e00a      	b.n	10e90 <get+0xb8>
			remaining = last;
   10e7a:	46ac      	mov	ip, r5
			first = 0;
   10e7c:	f04f 0e00 	mov.w	lr, #0
   10e80:	e7f9      	b.n	10e76 <get+0x9e>
			*(--d) = *s++;
   10e82:	f898 6000 	ldrb.w	r6, [r8]
   10e86:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   10e8a:	461c      	mov	r4, r3
			*(--d) = *s++;
   10e8c:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   10e90:	1e63      	subs	r3, r4, #1
   10e92:	b2db      	uxtb	r3, r3
   10e94:	2c00      	cmp	r4, #0
   10e96:	d1f4      	bne.n	10e82 <get+0xaa>
		if (octets && last) {
   10e98:	b1c8      	cbz	r0, 10ece <get+0xf6>
   10e9a:	b1c5      	cbz	r5, 10ece <get+0xf6>
			s = &rng->rand[0];
   10e9c:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   10e9e:	42a8      	cmp	r0, r5
   10ea0:	d206      	bcs.n	10eb0 <get+0xd8>
				remaining = last - octets;
   10ea2:	fa5f fe80 	uxtb.w	lr, r0
   10ea6:	eba5 040e 	sub.w	r4, r5, lr
   10eaa:	fa5f fc84 	uxtb.w	ip, r4
   10eae:	e001      	b.n	10eb4 <get+0xdc>
				remaining = 0;
   10eb0:	46a4      	mov	ip, r4
	last = rng->last;
   10eb2:	46ae      	mov	lr, r5
			octets -= last;
   10eb4:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   10eb8:	4671      	mov	r1, lr
   10eba:	e004      	b.n	10ec6 <get+0xee>
				*(--d) = *s++;
   10ebc:	7831      	ldrb	r1, [r6, #0]
   10ebe:	f802 1d01 	strb.w	r1, [r2, #-1]!
   10ec2:	3601      	adds	r6, #1
			while (last--) {
   10ec4:	4619      	mov	r1, r3
   10ec6:	1e4b      	subs	r3, r1, #1
   10ec8:	b2db      	uxtb	r3, r3
   10eca:	2900      	cmp	r1, #0
   10ecc:	d1f6      	bne.n	10ebc <get+0xe4>
		rng->first = first;
   10ece:	f887 e002 	strb.w	lr, [r7, #2]
   10ed2:	e7b1      	b.n	10e38 <get+0x60>
   10ed4:	4000d000 	.word	0x4000d000

00010ed8 <rand_init>:
{
   10ed8:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   10eda:	4613      	mov	r3, r2
   10edc:	460a      	mov	r2, r1
   10ede:	4601      	mov	r1, r0
   10ee0:	4801      	ldr	r0, [pc, #4]	; (10ee8 <rand_init+0x10>)
   10ee2:	f7ff ff4f 	bl	10d84 <init>
   10ee6:	bd08      	pop	{r3, pc}
   10ee8:	200013a0 	.word	0x200013a0

00010eec <rand_isr_init>:
{
   10eec:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   10eee:	4613      	mov	r3, r2
   10ef0:	460a      	mov	r2, r1
   10ef2:	4601      	mov	r1, r0
   10ef4:	4801      	ldr	r0, [pc, #4]	; (10efc <rand_isr_init+0x10>)
   10ef6:	f7ff ff45 	bl	10d84 <init>
   10efa:	bd08      	pop	{r3, pc}
   10efc:	2000139c 	.word	0x2000139c

00010f00 <rand_get>:
{
   10f00:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   10f02:	460a      	mov	r2, r1
   10f04:	4601      	mov	r1, r0
   10f06:	4b02      	ldr	r3, [pc, #8]	; (10f10 <rand_get+0x10>)
   10f08:	6818      	ldr	r0, [r3, #0]
   10f0a:	f7ff ff65 	bl	10dd8 <get>
}
   10f0e:	bd08      	pop	{r3, pc}
   10f10:	200013a0 	.word	0x200013a0

00010f14 <rand_isr_get>:
{
   10f14:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   10f16:	460a      	mov	r2, r1
   10f18:	4601      	mov	r1, r0
   10f1a:	4b02      	ldr	r3, [pc, #8]	; (10f24 <rand_isr_get+0x10>)
   10f1c:	6818      	ldr	r0, [r3, #0]
   10f1e:	f7ff ff5b 	bl	10dd8 <get>
}
   10f22:	bd08      	pop	{r3, pc}
   10f24:	2000139c 	.word	0x2000139c

00010f28 <isr_rand>:

void isr_rand(void *param)
{
   10f28:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   10f2a:	4b10      	ldr	r3, [pc, #64]	; (10f6c <isr_rand+0x44>)
   10f2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10f30:	b903      	cbnz	r3, 10f34 <isr_rand+0xc>
   10f32:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   10f34:	2101      	movs	r1, #1
   10f36:	4b0e      	ldr	r3, [pc, #56]	; (10f70 <isr_rand+0x48>)
   10f38:	6818      	ldr	r0, [r3, #0]
   10f3a:	f7ff fa79 	bl	10430 <isr>
		if (ret != -EBUSY) {
   10f3e:	f110 0f10 	cmn.w	r0, #16
   10f42:	d008      	beq.n	10f56 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   10f44:	f110 0f69 	cmn.w	r0, #105	; 0x69
   10f48:	bf14      	ite	ne
   10f4a:	2100      	movne	r1, #0
   10f4c:	2101      	moveq	r1, #1
   10f4e:	4b09      	ldr	r3, [pc, #36]	; (10f74 <isr_rand+0x4c>)
   10f50:	6818      	ldr	r0, [r3, #0]
   10f52:	f7ff fa6d 	bl	10430 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   10f56:	2200      	movs	r2, #0
   10f58:	4b04      	ldr	r3, [pc, #16]	; (10f6c <isr_rand+0x44>)
   10f5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   10f5e:	f110 0f10 	cmn.w	r0, #16
   10f62:	d0e6      	beq.n	10f32 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   10f64:	2201      	movs	r2, #1
   10f66:	605a      	str	r2, [r3, #4]
		}
	}
}
   10f68:	e7e3      	b.n	10f32 <isr_rand+0xa>
   10f6a:	bf00      	nop
   10f6c:	4000d000 	.word	0x4000d000
   10f70:	2000139c 	.word	0x2000139c
   10f74:	200013a0 	.word	0x200013a0

00010f78 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   10f78:	29ff      	cmp	r1, #255	; 0xff
   10f7a:	d012      	beq.n	10fa2 <ticker_by_slot_get+0x2a>
{
   10f7c:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   10f7e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   10f82:	00a3      	lsls	r3, r4, #2
   10f84:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10f86:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   10f88:	42aa      	cmp	r2, r5
   10f8a:	d906      	bls.n	10f9a <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   10f8c:	8ae4      	ldrh	r4, [r4, #22]
   10f8e:	b92c      	cbnz	r4, 10f9c <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   10f90:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   10f92:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   10f94:	29ff      	cmp	r1, #255	; 0xff
   10f96:	d1f2      	bne.n	10f7e <ticker_by_slot_get+0x6>
   10f98:	e000      	b.n	10f9c <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   10f9a:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   10f9c:	4608      	mov	r0, r1
   10f9e:	bc30      	pop	{r4, r5}
   10fa0:	4770      	bx	lr
   10fa2:	4608      	mov	r0, r1
   10fa4:	4770      	bx	lr

00010fa6 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   10fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fa8:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   10faa:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   10fac:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   10fb0:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   10fb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   10fb6:	d004      	beq.n	10fc2 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   10fb8:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   10fba:	f8dc 4000 	ldr.w	r4, [ip]
   10fbe:	4294      	cmp	r4, r2
   10fc0:	d005      	beq.n	10fce <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   10fc2:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   10fc4:	6940      	ldr	r0, [r0, #20]
   10fc6:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   10fca:	2600      	movs	r6, #0
   10fcc:	e00a      	b.n	10fe4 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   10fce:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   10fd2:	ea4f 028e 	mov.w	r2, lr, lsl #2
   10fd6:	4696      	mov	lr, r2
   10fd8:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   10fda:	5cbc      	ldrb	r4, [r7, r2]
   10fdc:	e002      	b.n	10fe4 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   10fde:	68a8      	ldr	r0, [r5, #8]
   10fe0:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   10fe2:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   10fe4:	2cff      	cmp	r4, #255	; 0xff
   10fe6:	d006      	beq.n	10ff6 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   10fe8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   10fec:	0082      	lsls	r2, r0, #2
   10fee:	18bd      	adds	r5, r7, r2
   10ff0:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   10ff2:	2800      	cmp	r0, #0
   10ff4:	d0f3      	beq.n	10fde <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   10ff6:	2cff      	cmp	r4, #255	; 0xff
   10ff8:	d001      	beq.n	10ffe <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   10ffa:	68aa      	ldr	r2, [r5, #8]
   10ffc:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   10ffe:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   11000:	601e      	str	r6, [r3, #0]
   11002:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011004 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   11004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11008:	b085      	sub	sp, #20
   1100a:	4681      	mov	r9, r0
   1100c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   1100e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   11010:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   11014:	009b      	lsls	r3, r3, #2
   11016:	9303      	str	r3, [sp, #12]
   11018:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   1101c:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   11020:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   11024:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   11026:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   11028:	23ff      	movs	r3, #255	; 0xff
   1102a:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   1102c:	e004      	b.n	11038 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   1102e:	4297      	cmp	r7, r2
   11030:	d912      	bls.n	11058 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   11032:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   11034:	46a0      	mov	r8, r4
		current = ticker_current->next;
   11036:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   11038:	2cff      	cmp	r4, #255	; 0xff
   1103a:	d00f      	beq.n	1105c <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   1103c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11040:	0093      	lsls	r3, r2, #2
   11042:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   11044:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   11046:	4295      	cmp	r5, r2
   11048:	d908      	bls.n	1105c <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   1104a:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   1104c:	8ac9      	ldrh	r1, [r1, #22]
   1104e:	2900      	cmp	r1, #0
   11050:	d0ed      	beq.n	1102e <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   11052:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   11054:	9401      	str	r4, [sp, #4]
   11056:	e7ed      	b.n	11034 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   11058:	2700      	movs	r7, #0
   1105a:	e7eb      	b.n	11034 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   1105c:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   11060:	eb05 020b 	add.w	r2, r5, fp
   11064:	4621      	mov	r1, r4
   11066:	4630      	mov	r0, r6
   11068:	f7ff ff86 	bl	10f78 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   1106c:	f1bb 0f00 	cmp.w	fp, #0
   11070:	d007      	beq.n	11082 <ticker_enqueue+0x7e>
   11072:	42af      	cmp	r7, r5
   11074:	d801      	bhi.n	1107a <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   11076:	28ff      	cmp	r0, #255	; 0xff
   11078:	d003      	beq.n	11082 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   1107a:	42af      	cmp	r7, r5
   1107c:	d918      	bls.n	110b0 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   1107e:	9801      	ldr	r0, [sp, #4]
   11080:	e016      	b.n	110b0 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   11082:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   11086:	9b03      	ldr	r3, [sp, #12]
   11088:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   1108a:	45a0      	cmp	r8, r4
   1108c:	d013      	beq.n	110b6 <ticker_enqueue+0xb2>
			node[previous].next = id;
   1108e:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   11092:	ea4f 0388 	mov.w	r3, r8, lsl #2
   11096:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1109a:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   1109c:	2cff      	cmp	r4, #255	; 0xff
   1109e:	d00f      	beq.n	110c0 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   110a0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   110a4:	00a3      	lsls	r3, r4, #2
   110a6:	441e      	add	r6, r3
   110a8:	68b3      	ldr	r3, [r6, #8]
   110aa:	1b5d      	subs	r5, r3, r5
   110ac:	60b5      	str	r5, [r6, #8]
   110ae:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   110b0:	b005      	add	sp, #20
   110b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   110b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   110ba:	f889 3018 	strb.w	r3, [r9, #24]
   110be:	e7ed      	b.n	1109c <ticker_enqueue+0x98>
   110c0:	9802      	ldr	r0, [sp, #8]
   110c2:	e7f5      	b.n	110b0 <ticker_enqueue+0xac>

000110c4 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   110c4:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   110c6:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   110c8:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   110ca:	463b      	mov	r3, r7
	total = 0;
   110cc:	2500      	movs	r5, #0
	ticker_current = 0;
   110ce:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   110d0:	2bff      	cmp	r3, #255	; 0xff
   110d2:	d00a      	beq.n	110ea <ticker_dequeue+0x26>

		ticker_current = &node[current];
   110d4:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   110d8:	00a2      	lsls	r2, r4, #2
   110da:	18b4      	adds	r4, r6, r2

		if (current == id) {
   110dc:	428b      	cmp	r3, r1
   110de:	d004      	beq.n	110ea <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   110e0:	68a7      	ldr	r7, [r4, #8]
   110e2:	443d      	add	r5, r7
		previous = current;
   110e4:	461f      	mov	r7, r3
		current = ticker_current->next;
   110e6:	5cb3      	ldrb	r3, [r6, r2]
   110e8:	e7f2      	b.n	110d0 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   110ea:	2bff      	cmp	r3, #255	; 0xff
   110ec:	d017      	beq.n	1111e <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   110ee:	429f      	cmp	r7, r3
   110f0:	d012      	beq.n	11118 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   110f2:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   110f4:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   110f8:	00bb      	lsls	r3, r7, #2
   110fa:	7822      	ldrb	r2, [r4, #0]
   110fc:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   110fe:	7823      	ldrb	r3, [r4, #0]
   11100:	2bff      	cmp	r3, #255	; 0xff
   11102:	d006      	beq.n	11112 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   11104:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11108:	009a      	lsls	r2, r3, #2
   1110a:	4416      	add	r6, r2
   1110c:	68b3      	ldr	r3, [r6, #8]
   1110e:	4403      	add	r3, r0
   11110:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   11112:	4428      	add	r0, r5
}
   11114:	bcf0      	pop	{r4, r5, r6, r7}
   11116:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   11118:	7823      	ldrb	r3, [r4, #0]
   1111a:	7603      	strb	r3, [r0, #24]
   1111c:	e7e9      	b.n	110f2 <ticker_dequeue+0x2e>
		return 0;
   1111e:	2000      	movs	r0, #0
   11120:	e7f8      	b.n	11114 <ticker_dequeue+0x50>
	...

00011124 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   11124:	69c3      	ldr	r3, [r0, #28]
   11126:	6a02      	ldr	r2, [r0, #32]
   11128:	4413      	add	r3, r2
   1112a:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   1112c:	4a05      	ldr	r2, [pc, #20]	; (11144 <ticker_remainder_inc+0x20>)
   1112e:	441a      	add	r2, r3
   11130:	4905      	ldr	r1, [pc, #20]	; (11148 <ticker_remainder_inc+0x24>)
   11132:	428a      	cmp	r2, r1
   11134:	d804      	bhi.n	11140 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   11136:	4a05      	ldr	r2, [pc, #20]	; (1114c <ticker_remainder_inc+0x28>)
   11138:	441a      	add	r2, r3
   1113a:	6202      	str	r2, [r0, #32]
		return 1;
   1113c:	2001      	movs	r0, #1
   1113e:	4770      	bx	lr
	}
	return 0;
   11140:	2000      	movs	r0, #0
}
   11142:	4770      	bx	lr
   11144:	ff172b5a 	.word	0xff172b5a
   11148:	7f172b59 	.word	0x7f172b59
   1114c:	fe2e56b6 	.word	0xfe2e56b6

00011150 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   11150:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   11152:	6a01      	ldr	r1, [r0, #32]
   11154:	4a07      	ldr	r2, [pc, #28]	; (11174 <ticker_remainder_dec+0x24>)
   11156:	440a      	add	r2, r1
   11158:	4807      	ldr	r0, [pc, #28]	; (11178 <ticker_remainder_dec+0x28>)
   1115a:	4282      	cmp	r2, r0
   1115c:	d908      	bls.n	11170 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   1115e:	4a07      	ldr	r2, [pc, #28]	; (1117c <ticker_remainder_dec+0x2c>)
   11160:	440a      	add	r2, r1
   11162:	621a      	str	r2, [r3, #32]
		decrement++;
   11164:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   11166:	69d9      	ldr	r1, [r3, #28]
   11168:	6a1a      	ldr	r2, [r3, #32]
   1116a:	1a52      	subs	r2, r2, r1
   1116c:	621a      	str	r2, [r3, #32]

	return decrement;
}
   1116e:	4770      	bx	lr
	u8_t decrement = 0;
   11170:	2000      	movs	r0, #0
   11172:	e7f8      	b.n	11166 <ticker_remainder_dec+0x16>
   11174:	ff172b5a 	.word	0xff172b5a
   11178:	7f172b59 	.word	0x7f172b59
   1117c:	01d1a94a 	.word	0x01d1a94a

00011180 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   11180:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11182:	2300      	movs	r3, #0
   11184:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   11186:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   11188:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1118a:	b11c      	cbz	r4, 11194 <ticker_job_op_cb+0x14>
   1118c:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1118e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   11190:	4610      	mov	r0, r2
   11192:	47a0      	blx	r4
   11194:	bd10      	pop	{r4, pc}

00011196 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   11196:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   11198:	4601      	mov	r1, r0
   1119a:	2001      	movs	r0, #1
   1119c:	f7fe fd40 	bl	fc20 <cntr_cmp_set>
   111a0:	bd08      	pop	{r3, pc}

000111a2 <ticker_instance0_cmp_set>:
{
   111a2:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   111a4:	4601      	mov	r1, r0
   111a6:	2000      	movs	r0, #0
   111a8:	f7fe fd3a 	bl	fc20 <cntr_cmp_set>
   111ac:	bd08      	pop	{r3, pc}
	...

000111b0 <ticker_instance1_sched>:
{
   111b0:	b508      	push	{r3, lr}
	switch (caller_id) {
   111b2:	2803      	cmp	r0, #3
   111b4:	d841      	bhi.n	1123a <ticker_instance1_sched+0x8a>
   111b6:	e8df f000 	tbb	[pc, r0]
   111ba:	1002      	.short	0x1002
   111bc:	331d      	.short	0x331d
		switch (callee_id) {
   111be:	2901      	cmp	r1, #1
   111c0:	d105      	bne.n	111ce <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   111c2:	4b21      	ldr	r3, [pc, #132]	; (11248 <ticker_instance1_sched+0x98>)
   111c4:	2102      	movs	r1, #2
   111c6:	2000      	movs	r0, #0
   111c8:	f7fe fb12 	bl	f7f0 <mayfly_enqueue>
		break;
   111cc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   111ce:	4040      	eors	r0, r0
   111d0:	f380 8811 	msr	BASEPRI, r0
   111d4:	f04f 0004 	mov.w	r0, #4
   111d8:	df02      	svc	2
		switch (callee_id) {
   111da:	2902      	cmp	r1, #2
   111dc:	d104      	bne.n	111e8 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   111de:	4b1b      	ldr	r3, [pc, #108]	; (1124c <ticker_instance1_sched+0x9c>)
   111e0:	4608      	mov	r0, r1
   111e2:	f7fe fb05 	bl	f7f0 <mayfly_enqueue>
		break;
   111e6:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   111e8:	4040      	eors	r0, r0
   111ea:	f380 8811 	msr	BASEPRI, r0
   111ee:	f04f 0004 	mov.w	r0, #4
   111f2:	df02      	svc	2
		switch (callee_id) {
   111f4:	2901      	cmp	r1, #1
   111f6:	d007      	beq.n	11208 <ticker_instance1_sched+0x58>
   111f8:	2902      	cmp	r1, #2
   111fa:	d00b      	beq.n	11214 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   111fc:	4040      	eors	r0, r0
   111fe:	f380 8811 	msr	BASEPRI, r0
   11202:	f04f 0004 	mov.w	r0, #4
   11206:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   11208:	4b11      	ldr	r3, [pc, #68]	; (11250 <ticker_instance1_sched+0xa0>)
   1120a:	2102      	movs	r1, #2
   1120c:	4608      	mov	r0, r1
   1120e:	f7fe faef 	bl	f7f0 <mayfly_enqueue>
		break;
   11212:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   11214:	4b0f      	ldr	r3, [pc, #60]	; (11254 <ticker_instance1_sched+0xa4>)
   11216:	2102      	movs	r1, #2
   11218:	4608      	mov	r0, r1
   1121a:	f7fe fae9 	bl	f7f0 <mayfly_enqueue>
		break;
   1121e:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   11220:	2902      	cmp	r1, #2
   11222:	d104      	bne.n	1122e <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   11224:	4b0c      	ldr	r3, [pc, #48]	; (11258 <ticker_instance1_sched+0xa8>)
   11226:	2003      	movs	r0, #3
   11228:	f7fe fae2 	bl	f7f0 <mayfly_enqueue>
		break;
   1122c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1122e:	4040      	eors	r0, r0
   11230:	f380 8811 	msr	BASEPRI, r0
   11234:	f04f 0004 	mov.w	r0, #4
   11238:	df02      	svc	2
		LL_ASSERT(0);
   1123a:	4040      	eors	r0, r0
   1123c:	f380 8811 	msr	BASEPRI, r0
   11240:	f04f 0004 	mov.w	r0, #4
   11244:	df02      	svc	2
   11246:	bf00      	nop
   11248:	2000c158 	.word	0x2000c158
   1124c:	2000c168 	.word	0x2000c168
   11250:	2000c178 	.word	0x2000c178
   11254:	2000c188 	.word	0x2000c188
   11258:	2000c198 	.word	0x2000c198

0001125c <ticker_instance1_caller_id_get>:
	switch (user_id) {
   1125c:	1e83      	subs	r3, r0, #2
   1125e:	2b01      	cmp	r3, #1
   11260:	d800      	bhi.n	11264 <ticker_instance1_caller_id_get+0x8>
}
   11262:	4770      	bx	lr
		LL_ASSERT(0);
   11264:	4040      	eors	r0, r0
   11266:	f380 8811 	msr	BASEPRI, r0
   1126a:	f04f 0004 	mov.w	r0, #4
   1126e:	df02      	svc	2

00011270 <ticker_instance0_sched>:
{
   11270:	b508      	push	{r3, lr}
	switch (caller_id) {
   11272:	2803      	cmp	r0, #3
   11274:	d843      	bhi.n	112fe <ticker_instance0_sched+0x8e>
   11276:	e8df f000 	tbb	[pc, r0]
   1127a:	1002      	.short	0x1002
   1127c:	341e      	.short	0x341e
		switch (callee_id) {
   1127e:	2901      	cmp	r1, #1
   11280:	d105      	bne.n	1128e <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   11282:	4b22      	ldr	r3, [pc, #136]	; (1130c <ticker_instance0_sched+0x9c>)
   11284:	2100      	movs	r1, #0
   11286:	4608      	mov	r0, r1
   11288:	f7fe fab2 	bl	f7f0 <mayfly_enqueue>
		break;
   1128c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1128e:	4040      	eors	r0, r0
   11290:	f380 8811 	msr	BASEPRI, r0
   11294:	f04f 0004 	mov.w	r0, #4
   11298:	df02      	svc	2
		switch (callee_id) {
   1129a:	2902      	cmp	r1, #2
   1129c:	d105      	bne.n	112aa <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   1129e:	4b1c      	ldr	r3, [pc, #112]	; (11310 <ticker_instance0_sched+0xa0>)
   112a0:	2101      	movs	r1, #1
   112a2:	2000      	movs	r0, #0
   112a4:	f7fe faa4 	bl	f7f0 <mayfly_enqueue>
		break;
   112a8:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   112aa:	4040      	eors	r0, r0
   112ac:	f380 8811 	msr	BASEPRI, r0
   112b0:	f04f 0004 	mov.w	r0, #4
   112b4:	df02      	svc	2
		switch (callee_id) {
   112b6:	2901      	cmp	r1, #1
   112b8:	d007      	beq.n	112ca <ticker_instance0_sched+0x5a>
   112ba:	2902      	cmp	r1, #2
   112bc:	d00b      	beq.n	112d6 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   112be:	4040      	eors	r0, r0
   112c0:	f380 8811 	msr	BASEPRI, r0
   112c4:	f04f 0004 	mov.w	r0, #4
   112c8:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   112ca:	4b12      	ldr	r3, [pc, #72]	; (11314 <ticker_instance0_sched+0xa4>)
   112cc:	2100      	movs	r1, #0
   112ce:	2001      	movs	r0, #1
   112d0:	f7fe fa8e 	bl	f7f0 <mayfly_enqueue>
		break;
   112d4:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   112d6:	4b10      	ldr	r3, [pc, #64]	; (11318 <ticker_instance0_sched+0xa8>)
   112d8:	2101      	movs	r1, #1
   112da:	4608      	mov	r0, r1
   112dc:	f7fe fa88 	bl	f7f0 <mayfly_enqueue>
		break;
   112e0:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   112e2:	2902      	cmp	r1, #2
   112e4:	d105      	bne.n	112f2 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   112e6:	4b0d      	ldr	r3, [pc, #52]	; (1131c <ticker_instance0_sched+0xac>)
   112e8:	2101      	movs	r1, #1
   112ea:	2003      	movs	r0, #3
   112ec:	f7fe fa80 	bl	f7f0 <mayfly_enqueue>
		break;
   112f0:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   112f2:	4040      	eors	r0, r0
   112f4:	f380 8811 	msr	BASEPRI, r0
   112f8:	f04f 0004 	mov.w	r0, #4
   112fc:	df02      	svc	2
		LL_ASSERT(0);
   112fe:	4040      	eors	r0, r0
   11300:	f380 8811 	msr	BASEPRI, r0
   11304:	f04f 0004 	mov.w	r0, #4
   11308:	df02      	svc	2
   1130a:	bf00      	nop
   1130c:	2000c108 	.word	0x2000c108
   11310:	2000c118 	.word	0x2000c118
   11314:	2000c128 	.word	0x2000c128
   11318:	2000c138 	.word	0x2000c138
   1131c:	2000c148 	.word	0x2000c148

00011320 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   11320:	2801      	cmp	r0, #1
   11322:	d00a      	beq.n	1133a <ticker_instance0_caller_id_get+0x1a>
   11324:	b138      	cbz	r0, 11336 <ticker_instance0_caller_id_get+0x16>
   11326:	2803      	cmp	r0, #3
   11328:	d008      	beq.n	1133c <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   1132a:	4040      	eors	r0, r0
   1132c:	f380 8811 	msr	BASEPRI, r0
   11330:	f04f 0004 	mov.w	r0, #4
   11334:	df02      	svc	2
		return CALL_ID_WORKER;
   11336:	2001      	movs	r0, #1
   11338:	4770      	bx	lr
		return CALL_ID_JOB;
   1133a:	2002      	movs	r0, #2
}
   1133c:	4770      	bx	lr
	...

00011340 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   11340:	b5f0      	push	{r4, r5, r6, r7, lr}
   11342:	9d05      	ldr	r5, [sp, #20]
   11344:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   11348:	4606      	mov	r6, r0
   1134a:	b118      	cbz	r0, 11354 <ticker_init+0x14>
   1134c:	2801      	cmp	r0, #1
   1134e:	d019      	beq.n	11384 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   11350:	2001      	movs	r0, #1
   11352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   11354:	202c      	movs	r0, #44	; 0x2c
   11356:	4f20      	ldr	r7, [pc, #128]	; (113d8 <ticker_init+0x98>)
   11358:	fb00 7006 	mla	r0, r0, r6, r7
   1135c:	4f1f      	ldr	r7, [pc, #124]	; (113dc <ticker_init+0x9c>)
   1135e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   11360:	4f1f      	ldr	r7, [pc, #124]	; (113e0 <ticker_init+0xa0>)
   11362:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   11364:	4f1f      	ldr	r7, [pc, #124]	; (113e4 <ticker_init+0xa4>)
   11366:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   11368:	f8df e06c 	ldr.w	lr, [pc, #108]	; 113d8 <ticker_init+0x98>
   1136c:	202c      	movs	r0, #44	; 0x2c
   1136e:	fb00 f006 	mul.w	r0, r0, r6
   11372:	eb0e 0700 	add.w	r7, lr, r0
   11376:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   11378:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   1137c:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   1137e:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   11380:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   11382:	e015      	b.n	113b0 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   11384:	202c      	movs	r0, #44	; 0x2c
   11386:	4f14      	ldr	r7, [pc, #80]	; (113d8 <ticker_init+0x98>)
   11388:	fb00 7006 	mla	r0, r0, r6, r7
   1138c:	4f16      	ldr	r7, [pc, #88]	; (113e8 <ticker_init+0xa8>)
   1138e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   11390:	4f16      	ldr	r7, [pc, #88]	; (113ec <ticker_init+0xac>)
   11392:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   11394:	4f16      	ldr	r7, [pc, #88]	; (113f0 <ticker_init+0xb0>)
   11396:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   11398:	e7e6      	b.n	11368 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   1139a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   1139e:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   113a0:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   113a4:	202c      	movs	r0, #44	; 0x2c
   113a6:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   113aa:	1ae3      	subs	r3, r4, r3
   113ac:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   113ae:	4613      	mov	r3, r2
   113b0:	1e5a      	subs	r2, r3, #1
   113b2:	b2d2      	uxtb	r2, r2
   113b4:	2b00      	cmp	r3, #0
   113b6:	d1f0      	bne.n	1139a <ticker_init+0x5a>
	}

	if (count_op) {
   113b8:	b964      	cbnz	r4, 113d4 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   113ba:	222c      	movs	r2, #44	; 0x2c
   113bc:	4b06      	ldr	r3, [pc, #24]	; (113d8 <ticker_init+0x98>)
   113be:	fb02 3606 	mla	r6, r2, r6, r3
   113c2:	23ff      	movs	r3, #255	; 0xff
   113c4:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   113c6:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   113c8:	2000      	movs	r0, #0
   113ca:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   113cc:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   113ce:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   113d0:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   113d4:	2001      	movs	r0, #1
}
   113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113d8:	200013a4 	.word	0x200013a4
   113dc:	00011321 	.word	0x00011321
   113e0:	00011271 	.word	0x00011271
   113e4:	000111a3 	.word	0x000111a3
   113e8:	0001125d 	.word	0x0001125d
   113ec:	000111b1 	.word	0x000111b1
   113f0:	00011197 	.word	0x00011197

000113f4 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   113f4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   113f6:	232c      	movs	r3, #44	; 0x2c
   113f8:	4a04      	ldr	r2, [pc, #16]	; (1140c <ticker_trigger+0x18>)
   113fa:	fb03 2000 	mla	r0, r3, r0, r2
   113fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11400:	b11b      	cbz	r3, 1140a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   11402:	2201      	movs	r2, #1
   11404:	4611      	mov	r1, r2
   11406:	2000      	movs	r0, #0
   11408:	4798      	blx	r3
   1140a:	bd08      	pop	{r3, pc}
   1140c:	200013a4 	.word	0x200013a4

00011410 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   11410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   11414:	242c      	movs	r4, #44	; 0x2c
   11416:	4d24      	ldr	r5, [pc, #144]	; (114a8 <ticker_start+0x98>)
   11418:	fb04 5400 	mla	r4, r4, r0, r5
   1141c:	6866      	ldr	r6, [r4, #4]
   1141e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   11422:	f89e 4003 	ldrb.w	r4, [lr, #3]
   11426:	1c65      	adds	r5, r4, #1
   11428:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   1142a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1142e:	42b5      	cmp	r5, r6
   11430:	d300      	bcc.n	11434 <ticker_start+0x24>
		last = 0;
   11432:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   11434:	f89e 6001 	ldrb.w	r6, [lr, #1]
   11438:	42b5      	cmp	r5, r6
   1143a:	d032      	beq.n	114a2 <ticker_start+0x92>
   1143c:	469c      	mov	ip, r3
   1143e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   11440:	f8de 3004 	ldr.w	r3, [lr, #4]
   11444:	f04f 082c 	mov.w	r8, #44	; 0x2c
   11448:	fb08 f604 	mul.w	r6, r8, r4
   1144c:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   1144e:	2003      	movs	r0, #3
   11450:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   11452:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11454:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11458:	9b06      	ldr	r3, [sp, #24]
   1145a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1145c:	9b07      	ldr	r3, [sp, #28]
   1145e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   11460:	9b08      	ldr	r3, [sp, #32]
   11462:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11464:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11468:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   1146a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1146e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   11470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11472:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   11474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11476:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   11478:	2602      	movs	r6, #2
   1147a:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   1147c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1147e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   11480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11482:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   11484:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   11488:	4b07      	ldr	r3, [pc, #28]	; (114a8 <ticker_start+0x98>)
   1148a:	fb08 3307 	mla	r3, r8, r7, r3
   1148e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   11490:	6a1b      	ldr	r3, [r3, #32]
   11492:	4608      	mov	r0, r1
   11494:	4798      	blx	r3
   11496:	2200      	movs	r2, #0
   11498:	4631      	mov	r1, r6
   1149a:	47a8      	blx	r5

	return user_op->status;
   1149c:	6a20      	ldr	r0, [r4, #32]
   1149e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   114a2:	2001      	movs	r0, #1
}
   114a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114a8:	200013a4 	.word	0x200013a4

000114ac <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   114b0:	242c      	movs	r4, #44	; 0x2c
   114b2:	4d24      	ldr	r5, [pc, #144]	; (11544 <ticker_update+0x98>)
   114b4:	fb04 5400 	mla	r4, r4, r0, r5
   114b8:	6866      	ldr	r6, [r4, #4]
   114ba:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   114be:	f89e 4003 	ldrb.w	r4, [lr, #3]
   114c2:	1c65      	adds	r5, r4, #1
   114c4:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   114c6:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   114ca:	42b5      	cmp	r5, r6
   114cc:	d300      	bcc.n	114d0 <ticker_update+0x24>
		last = 0;
   114ce:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   114d0:	f89e 6001 	ldrb.w	r6, [lr, #1]
   114d4:	42b5      	cmp	r5, r6
   114d6:	d031      	beq.n	1153c <ticker_update+0x90>
   114d8:	469c      	mov	ip, r3
   114da:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   114dc:	f8de 3004 	ldr.w	r3, [lr, #4]
   114e0:	f04f 082c 	mov.w	r8, #44	; 0x2c
   114e4:	fb08 f604 	mul.w	r6, r8, r4
   114e8:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   114ea:	2004      	movs	r0, #4
   114ec:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   114ee:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   114f0:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   114f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   114f8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   114fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   114fe:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11500:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   11504:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   11506:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1150a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   1150c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   11510:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   11512:	2602      	movs	r6, #2
   11514:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11518:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   1151a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1151c:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   1151e:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   11522:	4b08      	ldr	r3, [pc, #32]	; (11544 <ticker_update+0x98>)
   11524:	fb08 3307 	mla	r3, r8, r7, r3
   11528:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   1152a:	6a1b      	ldr	r3, [r3, #32]
   1152c:	4608      	mov	r0, r1
   1152e:	4798      	blx	r3
   11530:	2200      	movs	r2, #0
   11532:	4631      	mov	r1, r6
   11534:	47a8      	blx	r5

	return user_op->status;
   11536:	6a20      	ldr	r0, [r4, #32]
   11538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1153c:	2001      	movs	r0, #1
}
   1153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11542:	bf00      	nop
   11544:	200013a4 	.word	0x200013a4

00011548 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   11548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1154c:	242c      	movs	r4, #44	; 0x2c
   1154e:	4d1b      	ldr	r5, [pc, #108]	; (115bc <ticker_stop+0x74>)
   11550:	fb04 5400 	mla	r4, r4, r0, r5
   11554:	6866      	ldr	r6, [r4, #4]
   11556:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1155a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1155e:	1c6c      	adds	r4, r5, #1
   11560:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   11562:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   11566:	42b4      	cmp	r4, r6
   11568:	d300      	bcc.n	1156c <ticker_stop+0x24>
		last = 0;
   1156a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1156c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   11570:	42b4      	cmp	r4, r6
   11572:	d020      	beq.n	115b6 <ticker_stop+0x6e>
   11574:	4698      	mov	r8, r3
   11576:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   11578:	f8de 3004 	ldr.w	r3, [lr, #4]
   1157c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   11580:	fb0c f505 	mul.w	r5, ip, r5
   11584:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11586:	2005      	movs	r0, #5
   11588:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   1158a:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1158c:	2502      	movs	r5, #2
   1158e:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   11590:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   11594:	9b06      	ldr	r3, [sp, #24]
   11596:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   11598:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1159c:	4b07      	ldr	r3, [pc, #28]	; (115bc <ticker_stop+0x74>)
   1159e:	fb0c 3307 	mla	r3, ip, r7, r3
   115a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   115a4:	6a1b      	ldr	r3, [r3, #32]
   115a6:	4608      	mov	r0, r1
   115a8:	4798      	blx	r3
   115aa:	2200      	movs	r2, #0
   115ac:	4629      	mov	r1, r5
   115ae:	47a0      	blx	r4

	return user_op->status;
   115b0:	6a30      	ldr	r0, [r6, #32]
   115b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   115b6:	2001      	movs	r0, #1
}
   115b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115bc:	200013a4 	.word	0x200013a4

000115c0 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   115c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   115c4:	242c      	movs	r4, #44	; 0x2c
   115c6:	4d1f      	ldr	r5, [pc, #124]	; (11644 <ticker_next_slot_get+0x84>)
   115c8:	fb04 5400 	mla	r4, r4, r0, r5
   115cc:	6866      	ldr	r6, [r4, #4]
   115ce:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   115d2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   115d6:	1c6c      	adds	r4, r5, #1
   115d8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   115da:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   115de:	42b4      	cmp	r4, r6
   115e0:	d300      	bcc.n	115e4 <ticker_next_slot_get+0x24>
		last = 0;
   115e2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   115e4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   115e8:	42b4      	cmp	r4, r6
   115ea:	d027      	beq.n	1163c <ticker_next_slot_get+0x7c>
   115ec:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   115ee:	f8de 3004 	ldr.w	r3, [lr, #4]
   115f2:	f04f 092c 	mov.w	r9, #44	; 0x2c
   115f6:	fb09 f605 	mul.w	r6, r9, r5
   115fa:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   115fc:	f04f 0802 	mov.w	r8, #2
   11600:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   11604:	23ff      	movs	r3, #255	; 0xff
   11606:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   11608:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   1160a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   1160e:	9b08      	ldr	r3, [sp, #32]
   11610:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   11612:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   11616:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11618:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   1161a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1161c:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   1161e:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   11622:	4b08      	ldr	r3, [pc, #32]	; (11644 <ticker_next_slot_get+0x84>)
   11624:	fb09 3300 	mla	r3, r9, r0, r3
   11628:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1162a:	6a1b      	ldr	r3, [r3, #32]
   1162c:	4608      	mov	r0, r1
   1162e:	4798      	blx	r3
   11630:	2200      	movs	r2, #0
   11632:	4641      	mov	r1, r8
   11634:	47a0      	blx	r4

	return user_op->status;
   11636:	6a28      	ldr	r0, [r5, #32]
   11638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1163c:	2001      	movs	r0, #1
}
   1163e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11642:	bf00      	nop
   11644:	200013a4 	.word	0x200013a4

00011648 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   11648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1164c:	242c      	movs	r4, #44	; 0x2c
   1164e:	4d1b      	ldr	r5, [pc, #108]	; (116bc <ticker_job_idle_get+0x74>)
   11650:	fb04 5400 	mla	r4, r4, r0, r5
   11654:	6866      	ldr	r6, [r4, #4]
   11656:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1165a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1165e:	1c6c      	adds	r4, r5, #1
   11660:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   11662:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   11666:	42b4      	cmp	r4, r6
   11668:	d300      	bcc.n	1166c <ticker_job_idle_get+0x24>
		last = 0;
   1166a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1166c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   11670:	42b4      	cmp	r4, r6
   11672:	d020      	beq.n	116b6 <ticker_job_idle_get+0x6e>
   11674:	4698      	mov	r8, r3
   11676:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   11678:	f8de 3004 	ldr.w	r3, [lr, #4]
   1167c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   11680:	fb0c f505 	mul.w	r5, ip, r5
   11684:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   11686:	2001      	movs	r0, #1
   11688:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   1168a:	23ff      	movs	r3, #255	; 0xff
   1168c:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1168e:	2502      	movs	r5, #2
   11690:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   11692:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   11694:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   11698:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1169c:	4b07      	ldr	r3, [pc, #28]	; (116bc <ticker_job_idle_get+0x74>)
   1169e:	fb0c 3307 	mla	r3, ip, r7, r3
   116a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   116a4:	6a1b      	ldr	r3, [r3, #32]
   116a6:	4608      	mov	r0, r1
   116a8:	4798      	blx	r3
   116aa:	2200      	movs	r2, #0
   116ac:	4629      	mov	r1, r5
   116ae:	47a0      	blx	r4

	return user_op->status;
   116b0:	6a30      	ldr	r0, [r6, #32]
   116b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   116b6:	2001      	movs	r0, #1
}
   116b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116bc:	200013a4 	.word	0x200013a4

000116c0 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   116c0:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   116c2:	232c      	movs	r3, #44	; 0x2c
   116c4:	4a05      	ldr	r2, [pc, #20]	; (116dc <ticker_job_sched+0x1c>)
   116c6:	fb03 2000 	mla	r0, r3, r0, r2
   116ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
   116cc:	6a03      	ldr	r3, [r0, #32]
   116ce:	4608      	mov	r0, r1
   116d0:	4798      	blx	r3
   116d2:	2200      	movs	r2, #0
   116d4:	2102      	movs	r1, #2
   116d6:	47a0      	blx	r4
   116d8:	bd10      	pop	{r4, pc}
   116da:	bf00      	nop
   116dc:	200013a4 	.word	0x200013a4

000116e0 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   116e0:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   116e2:	f7fe fa97 	bl	fc14 <cntr_cnt_get>
}
   116e6:	bd08      	pop	{r3, pc}

000116e8 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   116e8:	1a40      	subs	r0, r0, r1
}
   116ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   116ee:	4770      	bx	lr

000116f0 <ticker_worker>:
{
   116f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   116f4:	2301      	movs	r3, #1
   116f6:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   116f8:	f890 901c 	ldrb.w	r9, [r0, #28]
   116fc:	f1b9 0f00 	cmp.w	r9, #0
   11700:	d147      	bne.n	11792 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   11702:	7e03      	ldrb	r3, [r0, #24]
   11704:	2bff      	cmp	r3, #255	; 0xff
   11706:	d030      	beq.n	1176a <ticker_worker+0x7a>
   11708:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1170a:	f7fe fa83 	bl	fc14 <cntr_cnt_get>
   1170e:	6979      	ldr	r1, [r7, #20]
   11710:	f7ff ffea 	bl	116e8 <ticker_ticks_diff_get>
   11714:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   11716:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   11718:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   1171c:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   1171e:	2cff      	cmp	r4, #255	; 0xff
   11720:	d027      	beq.n	11772 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   11722:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11726:	00a3      	lsls	r3, r4, #2
   11728:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1172c:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1172e:	4295      	cmp	r5, r2
   11730:	d31f      	bcc.n	11772 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   11732:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   11734:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   11736:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   1173a:	784b      	ldrb	r3, [r1, #1]
   1173c:	788a      	ldrb	r2, [r1, #2]
   1173e:	1a9b      	subs	r3, r3, r2
   11740:	b2db      	uxtb	r3, r3
   11742:	2b01      	cmp	r3, #1
   11744:	d1eb      	bne.n	1171e <ticker_worker+0x2e>
		ticker->ack--;
   11746:	3a01      	subs	r2, #1
   11748:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   1174a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   1174e:	f1ba 0f00 	cmp.w	sl, #0
   11752:	d0e4      	beq.n	1171e <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   11754:	6978      	ldr	r0, [r7, #20]
   11756:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   11758:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   1175a:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   1175c:	690b      	ldr	r3, [r1, #16]
   1175e:	8b4a      	ldrh	r2, [r1, #26]
   11760:	6a09      	ldr	r1, [r1, #32]
   11762:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11766:	47d0      	blx	sl
   11768:	e7d9      	b.n	1171e <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   1176a:	2300      	movs	r3, #0
   1176c:	7743      	strb	r3, [r0, #29]
		return;
   1176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   11772:	7aba      	ldrb	r2, [r7, #10]
   11774:	7afb      	ldrb	r3, [r7, #11]
   11776:	429a      	cmp	r2, r3
   11778:	d00d      	beq.n	11796 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1177a:	7afb      	ldrb	r3, [r7, #11]
   1177c:	3302      	adds	r3, #2
   1177e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   11782:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   11784:	2300      	movs	r3, #0
   11786:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   11788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1178a:	2201      	movs	r2, #1
   1178c:	2102      	movs	r1, #2
   1178e:	4610      	mov	r0, r2
   11790:	4798      	blx	r3
   11792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   11796:	3301      	adds	r3, #1
   11798:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1179a:	2b02      	cmp	r3, #2
   1179c:	d001      	beq.n	117a2 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   1179e:	72fb      	strb	r3, [r7, #11]
   117a0:	e7eb      	b.n	1177a <ticker_worker+0x8a>
			last = 0;
   117a2:	464b      	mov	r3, r9
   117a4:	e7fb      	b.n	1179e <ticker_worker+0xae>

000117a6 <ticks_to_expire_prep>:
{
   117a6:	b570      	push	{r4, r5, r6, lr}
   117a8:	4606      	mov	r6, r0
   117aa:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   117ac:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   117ae:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   117b0:	1a51      	subs	r1, r2, r1
   117b2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   117b6:	d10c      	bne.n	117d2 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   117b8:	4601      	mov	r1, r0
   117ba:	4610      	mov	r0, r2
   117bc:	f7ff ff94 	bl	116e8 <ticker_ticks_diff_get>
   117c0:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   117c2:	42a8      	cmp	r0, r5
   117c4:	d812      	bhi.n	117ec <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   117c6:	1a28      	subs	r0, r5, r0
   117c8:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   117ca:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   117cc:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   117ce:	82b5      	strh	r5, [r6, #20]
   117d0:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   117d2:	4611      	mov	r1, r2
   117d4:	f7ff ff88 	bl	116e8 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   117d8:	4284      	cmp	r4, r0
   117da:	d901      	bls.n	117e0 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   117dc:	1a20      	subs	r0, r4, r0
   117de:	e7f0      	b.n	117c2 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   117e0:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   117e2:	fa15 f080 	uxtah	r0, r5, r0
   117e6:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   117e8:	2000      	movs	r0, #0
   117ea:	e7ea      	b.n	117c2 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   117ec:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   117ee:	2500      	movs	r5, #0
   117f0:	e7ec      	b.n	117cc <ticks_to_expire_prep+0x26>

000117f2 <ticker_job>:
{
   117f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117f6:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   117f8:	7f43      	ldrb	r3, [r0, #29]
   117fa:	9301      	str	r3, [sp, #4]
   117fc:	2b00      	cmp	r3, #0
   117fe:	f040 8254 	bne.w	11caa <ticker_job+0x4b8>
	instance->job_guard = 1;
   11802:	2301      	movs	r3, #1
   11804:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   11806:	6943      	ldr	r3, [r0, #20]
   11808:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1180a:	7a83      	ldrb	r3, [r0, #10]
   1180c:	7ac2      	ldrb	r2, [r0, #11]
   1180e:	4293      	cmp	r3, r2
   11810:	d021      	beq.n	11856 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   11812:	3301      	adds	r3, #1
   11814:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11816:	2b02      	cmp	r3, #2
   11818:	d100      	bne.n	1181c <ticker_job+0x2a>
			first = 0;
   1181a:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   1181c:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   1181e:	3302      	adds	r3, #2
   11820:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11824:	685b      	ldr	r3, [r3, #4]
   11826:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   11828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1182a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   1182c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   11830:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   11832:	2301      	movs	r3, #1
   11834:	9304      	str	r3, [sp, #16]
   11836:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   11838:	7e03      	ldrb	r3, [r0, #24]
   1183a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   1183c:	6803      	ldr	r3, [r0, #0]
   1183e:	4619      	mov	r1, r3
	users = &instance->user[0];
   11840:	6843      	ldr	r3, [r0, #4]
   11842:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   11844:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   11846:	9a01      	ldr	r2, [sp, #4]
   11848:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1184a:	f04f 0bff 	mov.w	fp, #255	; 0xff
   1184e:	f8cd b01c 	str.w	fp, [sp, #28]
   11852:	468b      	mov	fp, r1
   11854:	e0cc      	b.n	119f0 <ticker_job+0x1fe>
		flag_elapsed = 0;
   11856:	9b01      	ldr	r3, [sp, #4]
   11858:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   1185a:	2300      	movs	r3, #0
   1185c:	9303      	str	r3, [sp, #12]
   1185e:	e7ea      	b.n	11836 <ticker_job+0x44>
				middle = 0;
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	e01d      	b.n	118a0 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   11864:	6872      	ldr	r2, [r6, #4]
   11866:	bb82      	cbnz	r2, 118ca <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   11868:	68b2      	ldr	r2, [r6, #8]
   1186a:	bb72      	cbnz	r2, 118ca <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   1186c:	68f2      	ldr	r2, [r6, #12]
   1186e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   11872:	d12a      	bne.n	118ca <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   11874:	2101      	movs	r1, #1
   11876:	4630      	mov	r0, r6
   11878:	f7ff fc82 	bl	11180 <ticker_job_op_cb>
		while (user->middle != user->last) {
   1187c:	f894 a002 	ldrb.w	sl, [r4, #2]
   11880:	78e3      	ldrb	r3, [r4, #3]
   11882:	459a      	cmp	sl, r3
   11884:	f000 80b3 	beq.w	119ee <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   11888:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1188c:	fb09 f90a 	mul.w	r9, r9, sl
   11890:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   11894:	f10a 0301 	add.w	r3, sl, #1
   11898:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1189a:	7822      	ldrb	r2, [r4, #0]
   1189c:	4293      	cmp	r3, r2
   1189e:	d0df      	beq.n	11860 <ticker_job+0x6e>
			user->middle = middle;
   118a0:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   118a2:	7873      	ldrb	r3, [r6, #1]
   118a4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   118a8:	009f      	lsls	r7, r3, #2
   118aa:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   118ae:	f818 2009 	ldrb.w	r2, [r8, r9]
   118b2:	2a03      	cmp	r2, #3
   118b4:	d9e2      	bls.n	1187c <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   118b6:	786b      	ldrb	r3, [r5, #1]
   118b8:	78a9      	ldrb	r1, [r5, #2]
   118ba:	1a5b      	subs	r3, r3, r1
   118bc:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   118be:	2a05      	cmp	r2, #5
   118c0:	d8d8      	bhi.n	11874 <ticker_job+0x82>
   118c2:	2b00      	cmp	r3, #0
   118c4:	d0d6      	beq.n	11874 <ticker_job+0x82>
			    (state == 0) ||
   118c6:	2a04      	cmp	r2, #4
   118c8:	d0cc      	beq.n	11864 <ticker_job+0x72>
			if (state == 1) {
   118ca:	2b01      	cmp	r3, #1
   118cc:	f040 8085 	bne.w	119da <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   118d0:	7871      	ldrb	r1, [r6, #1]
   118d2:	9800      	ldr	r0, [sp, #0]
   118d4:	f7ff fbf6 	bl	110c4 <ticker_dequeue>
   118d8:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   118da:	f818 3009 	ldrb.w	r3, [r8, r9]
   118de:	2b04      	cmp	r3, #4
   118e0:	d00b      	beq.n	118fa <ticker_job+0x108>
		ticker->req = ticker->ack;
   118e2:	78ab      	ldrb	r3, [r5, #2]
   118e4:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   118e6:	9b00      	ldr	r3, [sp, #0]
   118e8:	7e5a      	ldrb	r2, [r3, #25]
   118ea:	7873      	ldrb	r3, [r6, #1]
   118ec:	429a      	cmp	r2, r3
   118ee:	d06e      	beq.n	119ce <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   118f0:	2100      	movs	r1, #0
   118f2:	4630      	mov	r0, r6
   118f4:	f7ff fc44 	bl	11180 <ticker_job_op_cb>
   118f8:	e7c0      	b.n	1187c <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   118fa:	9b00      	ldr	r3, [sp, #0]
   118fc:	695b      	ldr	r3, [r3, #20]
   118fe:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11900:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   11902:	f7fe f987 	bl	fc14 <cntr_cnt_get>
   11906:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11908:	9906      	ldr	r1, [sp, #24]
   1190a:	f7ff feed 	bl	116e8 <ticker_ticks_diff_get>
   1190e:	9b03      	ldr	r3, [sp, #12]
   11910:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   11912:	4581      	cmp	r9, r0
   11914:	d909      	bls.n	1192a <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   11916:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   1191a:	686b      	ldr	r3, [r5, #4]
   1191c:	b37b      	cbz	r3, 1197e <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   1191e:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   11920:	b36b      	cbz	r3, 1197e <ticker_job+0x18c>
		user_op->params.update.lazy--;
   11922:	3b01      	subs	r3, #1
   11924:	81b3      	strh	r3, [r6, #12]
   11926:	46a2      	mov	sl, r4
   11928:	e011      	b.n	1194e <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1192a:	eba0 0909 	sub.w	r9, r0, r9
   1192e:	8aab      	ldrh	r3, [r5, #20]
   11930:	fa13 f389 	uxtah	r3, r3, r9
   11934:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   11936:	f04f 0900 	mov.w	r9, #0
   1193a:	e7ee      	b.n	1191a <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   1193c:	4628      	mov	r0, r5
   1193e:	f7ff fc07 	bl	11150 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   11942:	4420      	add	r0, r4
   11944:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   11948:	8b6b      	ldrh	r3, [r5, #26]
   1194a:	3b01      	subs	r3, #1
   1194c:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1194e:	686c      	ldr	r4, [r5, #4]
   11950:	454c      	cmp	r4, r9
   11952:	d237      	bcs.n	119c4 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   11954:	8b6a      	ldrh	r2, [r5, #26]
   11956:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11958:	429a      	cmp	r2, r3
   1195a:	d8ef      	bhi.n	1193c <ticker_job+0x14a>
   1195c:	4654      	mov	r4, sl
   1195e:	e009      	b.n	11974 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   11960:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   11964:	4628      	mov	r0, r5
   11966:	f7ff fbdd 	bl	11124 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   1196a:	4450      	add	r0, sl
   1196c:	4481      	add	r9, r0
			ticker->lazy_current++;
   1196e:	8b6b      	ldrh	r3, [r5, #26]
   11970:	3301      	adds	r3, #1
   11972:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11974:	8b6a      	ldrh	r2, [r5, #26]
   11976:	89b3      	ldrh	r3, [r6, #12]
   11978:	429a      	cmp	r2, r3
   1197a:	d3f1      	bcc.n	11960 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   1197c:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   1197e:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   11980:	444b      	add	r3, r9
   11982:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   11984:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   11986:	8aaa      	ldrh	r2, [r5, #20]
   11988:	4413      	add	r3, r2
   1198a:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1198c:	9a08      	ldr	r2, [sp, #32]
   1198e:	9906      	ldr	r1, [sp, #24]
   11990:	4628      	mov	r0, r5
   11992:	f7ff ff08 	bl	117a6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11996:	8933      	ldrh	r3, [r6, #8]
   11998:	8aea      	ldrh	r2, [r5, #22]
   1199a:	4413      	add	r3, r2
   1199c:	b29b      	uxth	r3, r3
   1199e:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   119a0:	8972      	ldrh	r2, [r6, #10]
   119a2:	4293      	cmp	r3, r2
   119a4:	d910      	bls.n	119c8 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   119a6:	1a9b      	subs	r3, r3, r2
   119a8:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   119aa:	7bb3      	ldrb	r3, [r6, #14]
   119ac:	b103      	cbz	r3, 119b0 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   119ae:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   119b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   119b4:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   119b8:	7873      	ldrb	r3, [r6, #1]
   119ba:	9307      	str	r3, [sp, #28]
		ticker->req++;
   119bc:	786b      	ldrb	r3, [r5, #1]
   119be:	3301      	adds	r3, #1
   119c0:	706b      	strb	r3, [r5, #1]
   119c2:	e795      	b.n	118f0 <ticker_job+0xfe>
   119c4:	4654      	mov	r4, sl
   119c6:	e7d5      	b.n	11974 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   119c8:	2300      	movs	r3, #0
   119ca:	82eb      	strh	r3, [r5, #22]
   119cc:	e7ed      	b.n	119aa <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   119ce:	23ff      	movs	r3, #255	; 0xff
   119d0:	9900      	ldr	r1, [sp, #0]
   119d2:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   119d4:	2300      	movs	r3, #0
   119d6:	834b      	strh	r3, [r1, #26]
   119d8:	e78a      	b.n	118f0 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   119da:	9b00      	ldr	r3, [sp, #0]
   119dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   119de:	2201      	movs	r2, #1
   119e0:	2102      	movs	r1, #2
   119e2:	4608      	mov	r0, r1
   119e4:	4798      	blx	r3
				user->middle = prev;
   119e6:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   119ea:	2301      	movs	r3, #1
   119ec:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   119ee:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   119f0:	1e5a      	subs	r2, r3, #1
   119f2:	b2d2      	uxtb	r2, r2
   119f4:	9202      	str	r2, [sp, #8]
   119f6:	b133      	cbz	r3, 11a06 <ticker_job+0x214>
		user = &users[count_user];
   119f8:	9b05      	ldr	r3, [sp, #20]
   119fa:	9a02      	ldr	r2, [sp, #8]
   119fc:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   11a00:	f8d4 8004 	ldr.w	r8, [r4, #4]
   11a04:	e73a      	b.n	1187c <ticker_job+0x8a>
   11a06:	9306      	str	r3, [sp, #24]
   11a08:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   11a0c:	9b00      	ldr	r3, [sp, #0]
   11a0e:	7e1b      	ldrb	r3, [r3, #24]
   11a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a12:	429a      	cmp	r2, r3
   11a14:	d00a      	beq.n	11a2c <ticker_job+0x23a>
		flag_compare_update = 1;
   11a16:	2301      	movs	r3, #1
   11a18:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   11a1a:	9b04      	ldr	r3, [sp, #16]
   11a1c:	b94b      	cbnz	r3, 11a32 <ticker_job+0x240>
	node = &instance->node[0];
   11a1e:	9a00      	ldr	r2, [sp, #0]
   11a20:	6813      	ldr	r3, [r2, #0]
   11a22:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   11a24:	6853      	ldr	r3, [r2, #4]
   11a26:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   11a28:	7a53      	ldrb	r3, [r2, #9]
   11a2a:	e117      	b.n	11c5c <ticker_job+0x46a>
	flag_compare_update = 0;
   11a2c:	9b06      	ldr	r3, [sp, #24]
   11a2e:	9308      	str	r3, [sp, #32]
   11a30:	e7f3      	b.n	11a1a <ticker_job+0x228>
	node = &instance->node[0];
   11a32:	9e00      	ldr	r6, [sp, #0]
   11a34:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   11a38:	f04f 0a00 	mov.w	sl, #0
   11a3c:	f8cd b004 	str.w	fp, [sp, #4]
   11a40:	e02f      	b.n	11aa2 <ticker_job+0x2b0>
   11a42:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   11a46:	1a9b      	subs	r3, r3, r2
   11a48:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   11a4a:	9b00      	ldr	r3, [sp, #0]
   11a4c:	7e1b      	ldrb	r3, [r3, #24]
   11a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a50:	429a      	cmp	r2, r3
   11a52:	d0e4      	beq.n	11a1e <ticker_job+0x22c>
			flag_compare_update = 1;
   11a54:	9b04      	ldr	r3, [sp, #16]
   11a56:	9308      	str	r3, [sp, #32]
   11a58:	e7e1      	b.n	11a1e <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11a5a:	23ff      	movs	r3, #255	; 0xff
   11a5c:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   11a5e:	2300      	movs	r3, #0
   11a60:	8373      	strh	r3, [r6, #26]
   11a62:	e036      	b.n	11ad2 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   11a64:	686c      	ldr	r4, [r5, #4]
   11a66:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   11a68:	4628      	mov	r0, r5
   11a6a:	f7ff fb5b 	bl	11124 <ticker_remainder_inc>
   11a6e:	4420      	add	r0, r4
			while (count--) {
   11a70:	463b      	mov	r3, r7
   11a72:	1e5f      	subs	r7, r3, #1
   11a74:	2b00      	cmp	r3, #0
   11a76:	d1f5      	bne.n	11a64 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   11a78:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a7c:	eb03 020a 	add.w	r2, r3, sl
   11a80:	6971      	ldr	r1, [r6, #20]
   11a82:	4628      	mov	r0, r5
   11a84:	f7ff fe8f 	bl	117a6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   11a88:	8b2b      	ldrh	r3, [r5, #24]
   11a8a:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   11a8c:	2300      	movs	r3, #0
   11a8e:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   11a90:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11a94:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   11a98:	786b      	ldrb	r3, [r5, #1]
   11a9a:	3301      	adds	r3, #1
   11a9c:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   11a9e:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   11aa2:	f896 8018 	ldrb.w	r8, [r6, #24]
   11aa6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11aaa:	d026      	beq.n	11afa <ticker_job+0x308>
		ticker = &node[id_expired];
   11aac:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   11ab0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   11ab4:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   11ab8:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11aba:	9a03      	ldr	r2, [sp, #12]
   11abc:	4293      	cmp	r3, r2
   11abe:	d8c0      	bhi.n	11a42 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   11ac0:	9a03      	ldr	r2, [sp, #12]
   11ac2:	1ad2      	subs	r2, r2, r3
   11ac4:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   11ac6:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11ac8:	8b72      	ldrh	r2, [r6, #26]
   11aca:	4293      	cmp	r3, r2
   11acc:	d2c5      	bcs.n	11a5a <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   11ace:	1ad3      	subs	r3, r2, r3
   11ad0:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   11ad2:	8aeb      	ldrh	r3, [r5, #22]
   11ad4:	b11b      	cbz	r3, 11ade <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   11ad6:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11ada:	8aeb      	ldrh	r3, [r5, #22]
   11adc:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   11ade:	2300      	movs	r3, #0
   11ae0:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   11ae2:	f819 300b 	ldrb.w	r3, [r9, fp]
   11ae6:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   11ae8:	686b      	ldr	r3, [r5, #4]
   11aea:	b11b      	cbz	r3, 11af4 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   11aec:	8b2b      	ldrh	r3, [r5, #24]
   11aee:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   11af0:	2000      	movs	r0, #0
   11af2:	e7be      	b.n	11a72 <ticker_job+0x280>
			ticker->req = ticker->ack;
   11af4:	78ab      	ldrb	r3, [r5, #2]
   11af6:	706b      	strb	r3, [r5, #1]
   11af8:	e7d3      	b.n	11aa2 <ticker_job+0x2b0>
   11afa:	f8dd b004 	ldr.w	fp, [sp, #4]
   11afe:	e7a4      	b.n	11a4a <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   11b00:	232c      	movs	r3, #44	; 0x2c
   11b02:	9a03      	ldr	r2, [sp, #12]
   11b04:	fb03 f302 	mul.w	r3, r3, r2
   11b08:	9905      	ldr	r1, [sp, #20]
   11b0a:	4419      	add	r1, r3
   11b0c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   11b0e:	3201      	adds	r2, #1
   11b10:	b2d2      	uxtb	r2, r2
   11b12:	4611      	mov	r1, r2
   11b14:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   11b16:	9a04      	ldr	r2, [sp, #16]
   11b18:	7812      	ldrb	r2, [r2, #0]
   11b1a:	4291      	cmp	r1, r2
   11b1c:	d013      	beq.n	11b46 <ticker_job+0x354>
				id_insert = user_op->id;
   11b1e:	9a01      	ldr	r2, [sp, #4]
   11b20:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   11b22:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   11b26:	0094      	lsls	r4, r2, #2
   11b28:	9a02      	ldr	r2, [sp, #8]
   11b2a:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11b2c:	9a05      	ldr	r2, [sp, #20]
   11b2e:	5cd3      	ldrb	r3, [r2, r3]
   11b30:	2b03      	cmp	r3, #3
   11b32:	d16b      	bne.n	11c0c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   11b34:	7862      	ldrb	r2, [r4, #1]
   11b36:	78a3      	ldrb	r3, [r4, #2]
   11b38:	429a      	cmp	r2, r3
   11b3a:	d007      	beq.n	11b4c <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   11b3c:	2101      	movs	r1, #1
   11b3e:	9801      	ldr	r0, [sp, #4]
   11b40:	f7ff fb1e 	bl	11180 <ticker_job_op_cb>
   11b44:	e062      	b.n	11c0c <ticker_job+0x41a>
					first = 0;
   11b46:	9a06      	ldr	r2, [sp, #24]
   11b48:	9203      	str	r2, [sp, #12]
   11b4a:	e7e8      	b.n	11b1e <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   11b4c:	9b00      	ldr	r3, [sp, #0]
   11b4e:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11b50:	9801      	ldr	r0, [sp, #4]
   11b52:	68c3      	ldr	r3, [r0, #12]
   11b54:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11b56:	6903      	ldr	r3, [r0, #16]
   11b58:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   11b5a:	8a83      	ldrh	r3, [r0, #20]
   11b5c:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   11b5e:	8ac3      	ldrh	r3, [r0, #22]
   11b60:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   11b62:	6983      	ldr	r3, [r0, #24]
   11b64:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   11b66:	69c3      	ldr	r3, [r0, #28]
   11b68:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   11b6a:	6883      	ldr	r3, [r0, #8]
   11b6c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   11b6e:	2500      	movs	r5, #0
   11b70:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11b72:	6842      	ldr	r2, [r0, #4]
   11b74:	4620      	mov	r0, r4
   11b76:	f7ff fe16 	bl	117a6 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   11b7a:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   11b7c:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   11b7e:	2301      	movs	r3, #1
   11b80:	70e3      	strb	r3, [r4, #3]
   11b82:	e054      	b.n	11c2e <ticker_job+0x43c>
		skip = 0;
   11b84:	f04f 0a00 	mov.w	sl, #0
   11b88:	e00e      	b.n	11ba8 <ticker_job+0x3b6>
				skip_collide = 0;
   11b8a:	2300      	movs	r3, #0
   11b8c:	e021      	b.n	11bd2 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   11b8e:	6865      	ldr	r5, [r4, #4]
   11b90:	2d00      	cmp	r5, #0
   11b92:	d05b      	beq.n	11c4c <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   11b94:	4620      	mov	r0, r4
   11b96:	f7ff fac5 	bl	11124 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11b9a:	4428      	add	r0, r5
   11b9c:	68a5      	ldr	r5, [r4, #8]
   11b9e:	4405      	add	r5, r0
   11ba0:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   11ba2:	8b63      	ldrh	r3, [r4, #26]
   11ba4:	3301      	adds	r3, #1
   11ba6:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   11ba8:	4639      	mov	r1, r7
   11baa:	9800      	ldr	r0, [sp, #0]
   11bac:	f7ff fa2a 	bl	11004 <ticker_enqueue>
   11bb0:	4605      	mov	r5, r0
   11bb2:	4287      	cmp	r7, r0
   11bb4:	d021      	beq.n	11bfa <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   11bb6:	2dff      	cmp	r5, #255	; 0xff
   11bb8:	d0e9      	beq.n	11b8e <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   11bba:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   11bbe:	ea4f 0883 	mov.w	r8, r3, lsl #2
   11bc2:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   11bc6:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   11bc8:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   11bca:	4293      	cmp	r3, r2
   11bcc:	d9dd      	bls.n	11b8a <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   11bce:	1a9b      	subs	r3, r3, r2
   11bd0:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   11bd2:	6872      	ldr	r2, [r6, #4]
   11bd4:	2a00      	cmp	r2, #0
   11bd6:	d0da      	beq.n	11b8e <ticker_job+0x39c>
   11bd8:	4553      	cmp	r3, sl
   11bda:	d8d8      	bhi.n	11b8e <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   11bdc:	78f2      	ldrb	r2, [r6, #3]
   11bde:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   11be0:	429a      	cmp	r2, r3
   11be2:	d2d4      	bcs.n	11b8e <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   11be4:	4629      	mov	r1, r5
   11be6:	9800      	ldr	r0, [sp, #0]
   11be8:	f7ff fa6c 	bl	110c4 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   11bec:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   11bee:	78b3      	ldrb	r3, [r6, #2]
   11bf0:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   11bf2:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   11bf6:	46ab      	mov	fp, r5
   11bf8:	e7d6      	b.n	11ba8 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   11bfa:	78a3      	ldrb	r3, [r4, #2]
   11bfc:	3301      	adds	r3, #1
   11bfe:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11c00:	2100      	movs	r1, #0
			if (user_op) {
   11c02:	9b01      	ldr	r3, [sp, #4]
   11c04:	b113      	cbz	r3, 11c0c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   11c06:	4618      	mov	r0, r3
   11c08:	f7ff faba 	bl	11180 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   11c0c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11c10:	d01e      	beq.n	11c50 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   11c12:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11c16:	f43f af73 	beq.w	11b00 <ticker_job+0x30e>
				ticker = &node[id_insert];
   11c1a:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   11c1e:	0093      	lsls	r3, r2, #2
   11c20:	9a02      	ldr	r2, [sp, #8]
   11c22:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   11c24:	465f      	mov	r7, fp
				insert_head = ticker->next;
   11c26:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   11c2a:	2300      	movs	r3, #0
   11c2c:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   11c2e:	9b00      	ldr	r3, [sp, #0]
   11c30:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   11c34:	23ff      	movs	r3, #255	; 0xff
   11c36:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   11c38:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   11c3c:	8b23      	ldrh	r3, [r4, #24]
   11c3e:	459a      	cmp	sl, r3
   11c40:	d9a0      	bls.n	11b84 <ticker_job+0x392>
		skip = ticker->lazy_current -
   11c42:	ebaa 0a03 	sub.w	sl, sl, r3
   11c46:	fa1f fa8a 	uxth.w	sl, sl
   11c4a:	e7ad      	b.n	11ba8 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   11c4c:	2101      	movs	r1, #1
   11c4e:	e7d8      	b.n	11c02 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   11c50:	9b04      	ldr	r3, [sp, #16]
   11c52:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   11c54:	9a03      	ldr	r2, [sp, #12]
   11c56:	429a      	cmp	r2, r3
   11c58:	d1db      	bne.n	11c12 <ticker_job+0x420>
	while (count_user--) {
   11c5a:	9b07      	ldr	r3, [sp, #28]
   11c5c:	1e5a      	subs	r2, r3, #1
   11c5e:	b2d2      	uxtb	r2, r2
   11c60:	9207      	str	r2, [sp, #28]
   11c62:	b153      	cbz	r3, 11c7a <ticker_job+0x488>
		user = &users[count_user];
   11c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c66:	9a07      	ldr	r2, [sp, #28]
   11c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11c6c:	461a      	mov	r2, r3
   11c6e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   11c70:	685b      	ldr	r3, [r3, #4]
   11c72:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   11c74:	7853      	ldrb	r3, [r2, #1]
   11c76:	9303      	str	r3, [sp, #12]
   11c78:	e7c8      	b.n	11c0c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11c7a:	9b00      	ldr	r3, [sp, #0]
   11c7c:	7e1b      	ldrb	r3, [r3, #24]
   11c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11c80:	429a      	cmp	r2, r3
   11c82:	d001      	beq.n	11c88 <ticker_job+0x496>
		flag_compare_update = 1;
   11c84:	2301      	movs	r3, #1
   11c86:	9308      	str	r3, [sp, #32]
	if (!pending) {
   11c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c8a:	b18b      	cbz	r3, 11cb0 <ticker_job+0x4be>
	instance->job_guard = 0;
   11c8c:	2300      	movs	r3, #0
   11c8e:	9a00      	ldr	r2, [sp, #0]
   11c90:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   11c92:	9b08      	ldr	r3, [sp, #32]
   11c94:	2b00      	cmp	r3, #0
   11c96:	d13f      	bne.n	11d18 <ticker_job+0x526>
	if (instance->worker_trigger) {
   11c98:	9b00      	ldr	r3, [sp, #0]
   11c9a:	7f5b      	ldrb	r3, [r3, #29]
   11c9c:	b12b      	cbz	r3, 11caa <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   11c9e:	9b00      	ldr	r3, [sp, #0]
   11ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ca2:	2201      	movs	r2, #1
   11ca4:	4611      	mov	r1, r2
   11ca6:	2002      	movs	r0, #2
   11ca8:	4798      	blx	r3
}
   11caa:	b00d      	add	sp, #52	; 0x34
   11cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   11cb0:	9a00      	ldr	r2, [sp, #0]
   11cb2:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   11cb6:	7a53      	ldrb	r3, [r2, #9]
   11cb8:	e026      	b.n	11d08 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   11cba:	2300      	movs	r3, #0
   11cbc:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   11cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   11cc0:	b113      	cbz	r3, 11cc8 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   11cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11cc4:	6a38      	ldr	r0, [r7, #32]
   11cc6:	4798      	blx	r3
			first = user->first + 1;
   11cc8:	7863      	ldrb	r3, [r4, #1]
   11cca:	3301      	adds	r3, #1
   11ccc:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   11cce:	7822      	ldrb	r2, [r4, #0]
   11cd0:	4293      	cmp	r3, r2
   11cd2:	d016      	beq.n	11d02 <ticker_job+0x510>
			user->first = first;
   11cd4:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11cd6:	7862      	ldrb	r2, [r4, #1]
   11cd8:	78e3      	ldrb	r3, [r4, #3]
   11cda:	429a      	cmp	r2, r3
   11cdc:	d013      	beq.n	11d06 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11cde:	232c      	movs	r3, #44	; 0x2c
   11ce0:	fb03 f302 	mul.w	r3, r3, r2
   11ce4:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   11ce6:	5ceb      	ldrb	r3, [r5, r3]
   11ce8:	2b01      	cmp	r3, #1
   11cea:	d0e6      	beq.n	11cba <ticker_job+0x4c8>
   11cec:	2b02      	cmp	r3, #2
   11cee:	d106      	bne.n	11cfe <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   11cf0:	68fb      	ldr	r3, [r7, #12]
   11cf2:	68ba      	ldr	r2, [r7, #8]
   11cf4:	6879      	ldr	r1, [r7, #4]
   11cf6:	9800      	ldr	r0, [sp, #0]
   11cf8:	f7ff f955 	bl	10fa6 <ticker_by_next_slot_get>
   11cfc:	e7dd      	b.n	11cba <ticker_job+0x4c8>
	fp_op_func = NULL;
   11cfe:	2300      	movs	r3, #0
   11d00:	e7de      	b.n	11cc0 <ticker_job+0x4ce>
				first = 0;
   11d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d04:	e7e6      	b.n	11cd4 <ticker_job+0x4e2>
	while (count_user--) {
   11d06:	4633      	mov	r3, r6
   11d08:	1e5e      	subs	r6, r3, #1
   11d0a:	b2f6      	uxtb	r6, r6
   11d0c:	2b00      	cmp	r3, #0
   11d0e:	d0bd      	beq.n	11c8c <ticker_job+0x49a>
		user = &users[count_user];
   11d10:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   11d14:	6865      	ldr	r5, [r4, #4]
   11d16:	e7de      	b.n	11cd6 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   11d18:	7e13      	ldrb	r3, [r2, #24]
   11d1a:	2bff      	cmp	r3, #255	; 0xff
   11d1c:	d02f      	beq.n	11d7e <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   11d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d20:	2bff      	cmp	r3, #255	; 0xff
   11d22:	d034      	beq.n	11d8e <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   11d24:	9800      	ldr	r0, [sp, #0]
   11d26:	6802      	ldr	r2, [r0, #0]
   11d28:	7e03      	ldrb	r3, [r0, #24]
   11d2a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11d2e:	0099      	lsls	r1, r3, #2
   11d30:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   11d32:	6897      	ldr	r7, [r2, #8]
	i = 10;
   11d34:	250a      	movs	r5, #10
   11d36:	4680      	mov	r8, r0
		LL_ASSERT(i);
   11d38:	b39d      	cbz	r5, 11da2 <ticker_job+0x5b0>
		i--;
   11d3a:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   11d3c:	f7fd ff6a 	bl	fc14 <cntr_cnt_get>
   11d40:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   11d42:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11d46:	4621      	mov	r1, r4
   11d48:	f7ff fcce 	bl	116e8 <ticker_ticks_diff_get>
   11d4c:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   11d4e:	4287      	cmp	r7, r0
   11d50:	bf2c      	ite	cs
   11d52:	19e4      	addcs	r4, r4, r7
   11d54:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   11d56:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   11d5a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   11d5e:	4620      	mov	r0, r4
   11d60:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11d62:	f7fd ff57 	bl	fc14 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11d66:	4631      	mov	r1, r6
   11d68:	f7ff fcbe 	bl	116e8 <ticker_ticks_diff_get>
   11d6c:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   11d70:	4631      	mov	r1, r6
   11d72:	4620      	mov	r0, r4
   11d74:	f7ff fcb8 	bl	116e8 <ticker_ticks_diff_get>
   11d78:	4581      	cmp	r9, r0
   11d7a:	d8dd      	bhi.n	11d38 <ticker_job+0x546>
   11d7c:	e78c      	b.n	11c98 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   11d7e:	f7fd ff2f 	bl	fbe0 <cntr_stop>
   11d82:	2800      	cmp	r0, #0
   11d84:	d188      	bne.n	11c98 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   11d86:	2300      	movs	r3, #0
   11d88:	9a00      	ldr	r2, [sp, #0]
   11d8a:	8353      	strh	r3, [r2, #26]
   11d8c:	e784      	b.n	11c98 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   11d8e:	f7fd ff41 	bl	fc14 <cntr_cnt_get>
   11d92:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11d94:	f7fd ff14 	bl	fbc0 <cntr_start>
   11d98:	2800      	cmp	r0, #0
   11d9a:	d1c3      	bne.n	11d24 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   11d9c:	9b00      	ldr	r3, [sp, #0]
   11d9e:	615c      	str	r4, [r3, #20]
   11da0:	e7c0      	b.n	11d24 <ticker_job+0x532>
		LL_ASSERT(i);
   11da2:	4040      	eors	r0, r0
   11da4:	f380 8811 	msr	BASEPRI, r0
   11da8:	f04f 0004 	mov.w	r0, #4
   11dac:	df02      	svc	2
	...

00011db0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   11db0:	b570      	push	{r4, r5, r6, lr}
   11db2:	4606      	mov	r6, r0
   11db4:	460c      	mov	r4, r1
	while (len) {
   11db6:	b19c      	cbz	r4, 11de0 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   11db8:	4d0a      	ldr	r5, [pc, #40]	; (11de4 <bt_rand+0x34>)
   11dba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11dbe:	4628      	mov	r0, r5
   11dc0:	f016 fe48 	bl	28a54 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   11dc4:	4631      	mov	r1, r6
   11dc6:	4620      	mov	r0, r4
   11dc8:	f7ff f89a 	bl	10f00 <rand_get>
   11dcc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   11dce:	4628      	mov	r0, r5
   11dd0:	f016 feaa 	bl	28b28 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   11dd4:	2c00      	cmp	r4, #0
   11dd6:	d0ee      	beq.n	11db6 <bt_rand+0x6>
   11dd8:	bf20      	wfe
  __ASM volatile ("sev");
   11dda:	bf40      	sev
  __ASM volatile ("wfe");
   11ddc:	bf20      	wfe
   11dde:	e7ea      	b.n	11db6 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   11de0:	2000      	movs	r0, #0
   11de2:	bd70      	pop	{r4, r5, r6, pc}
   11de4:	2000d654 	.word	0x2000d654

00011de8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   11de8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   11dea:	2300      	movs	r3, #0
   11dec:	f7fd ff4e 	bl	fc8c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11df0:	2000      	movs	r0, #0
   11df2:	bd08      	pop	{r3, pc}

00011df4 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   11df4:	6008      	str	r0, [r1, #0]
   11df6:	4770      	bx	lr

00011df8 <mayfly_xtal_start>:
{
   11df8:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   11dfa:	4b03      	ldr	r3, [pc, #12]	; (11e08 <mayfly_xtal_start+0x10>)
   11dfc:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   11dfe:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   11e00:	681b      	ldr	r3, [r3, #0]
   11e02:	2100      	movs	r1, #0
   11e04:	4798      	blx	r3
   11e06:	bd08      	pop	{r3, pc}
   11e08:	2000144c 	.word	0x2000144c

00011e0c <mayfly_xtal_stop>:
{
   11e0c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   11e0e:	4b03      	ldr	r3, [pc, #12]	; (11e1c <mayfly_xtal_stop+0x10>)
   11e10:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   11e12:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   11e14:	685b      	ldr	r3, [r3, #4]
   11e16:	2100      	movs	r1, #0
   11e18:	4798      	blx	r3
   11e1a:	bd08      	pop	{r3, pc}
   11e1c:	2000144c 	.word	0x2000144c

00011e20 <prepare_reduced>:
	if (status == 0) {
   11e20:	b918      	cbnz	r0, 11e2a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   11e22:	680b      	ldr	r3, [r1, #0]
   11e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11e28:	600b      	str	r3, [r1, #0]
   11e2a:	4770      	bx	lr

00011e2c <prepare_normal>:
	if (status == 0) {
   11e2c:	b918      	cbnz	r0, 11e36 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   11e2e:	680b      	ldr	r3, [r1, #0]
   11e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11e34:	600b      	str	r3, [r1, #0]
   11e36:	4770      	bx	lr

00011e38 <chan_sel_remap>:
{
   11e38:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   11e3a:	2405      	movs	r4, #5
	chan_next = 0;
   11e3c:	2200      	movs	r2, #0
	while (byte_count--) {
   11e3e:	e011      	b.n	11e64 <chan_sel_remap+0x2c>
			chan_next++;
   11e40:	3201      	adds	r2, #1
   11e42:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   11e44:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   11e46:	461c      	mov	r4, r3
   11e48:	1e63      	subs	r3, r4, #1
   11e4a:	b2db      	uxtb	r3, r3
   11e4c:	b134      	cbz	r4, 11e5c <chan_sel_remap+0x24>
			if (bite & 0x01) {
   11e4e:	f015 0f01 	tst.w	r5, #1
   11e52:	d0f5      	beq.n	11e40 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   11e54:	b111      	cbz	r1, 11e5c <chan_sel_remap+0x24>
				chan_index--;
   11e56:	3901      	subs	r1, #1
   11e58:	b2c9      	uxtb	r1, r1
   11e5a:	e7f1      	b.n	11e40 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   11e5c:	2b07      	cmp	r3, #7
   11e5e:	d907      	bls.n	11e70 <chan_sel_remap+0x38>
		chan_map++;
   11e60:	3001      	adds	r0, #1
	while (byte_count--) {
   11e62:	4634      	mov	r4, r6
   11e64:	1e63      	subs	r3, r4, #1
   11e66:	b2de      	uxtb	r6, r3
   11e68:	b114      	cbz	r4, 11e70 <chan_sel_remap+0x38>
		bite = *chan_map;
   11e6a:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   11e6c:	2408      	movs	r4, #8
		while (bit_count--) {
   11e6e:	e7eb      	b.n	11e48 <chan_sel_remap+0x10>
}
   11e70:	4610      	mov	r0, r2
   11e72:	bc70      	pop	{r4, r5, r6}
   11e74:	4770      	bx	lr
	...

00011e78 <chan_sel_1>:
{
   11e78:	b570      	push	{r4, r5, r6, lr}
   11e7a:	4605      	mov	r5, r0
   11e7c:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11e80:	7804      	ldrb	r4, [r0, #0]
   11e82:	fb02 1101 	mla	r1, r2, r1, r1
   11e86:	4421      	add	r1, r4
   11e88:	4c0f      	ldr	r4, [pc, #60]	; (11ec8 <chan_sel_1+0x50>)
   11e8a:	fb84 2401 	smull	r2, r4, r4, r1
   11e8e:	1862      	adds	r2, r4, r1
   11e90:	17cc      	asrs	r4, r1, #31
   11e92:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   11e96:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11e9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   11e9e:	1b0c      	subs	r4, r1, r4
   11ea0:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   11ea2:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11ea4:	08c2      	lsrs	r2, r0, #3
   11ea6:	5c9a      	ldrb	r2, [r3, r2]
   11ea8:	f004 0407 	and.w	r4, r4, #7
   11eac:	fa42 f404 	asr.w	r4, r2, r4
   11eb0:	f014 0f01 	tst.w	r4, #1
   11eb4:	d107      	bne.n	11ec6 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   11eb6:	fbb0 f1f6 	udiv	r1, r0, r6
   11eba:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   11ebe:	b2c9      	uxtb	r1, r1
   11ec0:	4618      	mov	r0, r3
   11ec2:	f7ff ffb9 	bl	11e38 <chan_sel_remap>
}
   11ec6:	bd70      	pop	{r4, r5, r6, pc}
   11ec8:	dd67c8a7 	.word	0xdd67c8a7

00011ecc <chan_rev_8>:
	o = 0;
   11ecc:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   11ece:	461a      	mov	r2, r3
   11ed0:	e007      	b.n	11ee2 <chan_rev_8+0x16>
		o <<= 1;
   11ed2:	005b      	lsls	r3, r3, #1
   11ed4:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   11ed6:	f000 0101 	and.w	r1, r0, #1
   11eda:	430b      	orrs	r3, r1
		i >>= 1;
   11edc:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   11ede:	3201      	adds	r2, #1
   11ee0:	b2d2      	uxtb	r2, r2
   11ee2:	2a07      	cmp	r2, #7
   11ee4:	d9f5      	bls.n	11ed2 <chan_rev_8+0x6>
}
   11ee6:	4618      	mov	r0, r3
   11ee8:	4770      	bx	lr

00011eea <chan_perm>:
{
   11eea:	b538      	push	{r3, r4, r5, lr}
   11eec:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11eee:	0a00      	lsrs	r0, r0, #8
   11ef0:	f7ff ffec 	bl	11ecc <chan_rev_8>
   11ef4:	0205      	lsls	r5, r0, #8
   11ef6:	b2e0      	uxtb	r0, r4
   11ef8:	f7ff ffe8 	bl	11ecc <chan_rev_8>
   11efc:	b200      	sxth	r0, r0
   11efe:	4328      	orrs	r0, r5
}
   11f00:	b280      	uxth	r0, r0
   11f02:	bd38      	pop	{r3, r4, r5, pc}

00011f04 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11f04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11f08:	fa11 f080 	uxtah	r0, r1, r0
}
   11f0c:	b280      	uxth	r0, r0
   11f0e:	4770      	bx	lr

00011f10 <chan_prn>:
{
   11f10:	b538      	push	{r3, r4, r5, lr}
   11f12:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   11f14:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   11f16:	2400      	movs	r4, #0
   11f18:	e006      	b.n	11f28 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   11f1a:	f7ff ffe6 	bl	11eea <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   11f1e:	4629      	mov	r1, r5
   11f20:	f7ff fff0 	bl	11f04 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   11f24:	3401      	adds	r4, #1
   11f26:	b2e4      	uxtb	r4, r4
   11f28:	2c02      	cmp	r4, #2
   11f2a:	d9f6      	bls.n	11f1a <chan_prn+0xa>
	prn_e ^= chan_id;
   11f2c:	4068      	eors	r0, r5
}
   11f2e:	b280      	uxth	r0, r0
   11f30:	bd38      	pop	{r3, r4, r5, pc}
	...

00011f34 <chan_sel_2>:
{
   11f34:	b538      	push	{r3, r4, r5, lr}
   11f36:	4615      	mov	r5, r2
   11f38:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   11f3a:	f7ff ffe9 	bl	11f10 <chan_prn>
   11f3e:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   11f40:	4a0e      	ldr	r2, [pc, #56]	; (11f7c <chan_sel_2+0x48>)
   11f42:	fba2 3200 	umull	r3, r2, r2, r0
   11f46:	1a80      	subs	r0, r0, r2
   11f48:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   11f4c:	0952      	lsrs	r2, r2, #5
   11f4e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   11f52:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   11f56:	1a8a      	subs	r2, r1, r2
   11f58:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11f5a:	08c3      	lsrs	r3, r0, #3
   11f5c:	5ceb      	ldrb	r3, [r5, r3]
   11f5e:	f000 0207 	and.w	r2, r0, #7
   11f62:	4113      	asrs	r3, r2
   11f64:	f013 0f01 	tst.w	r3, #1
   11f68:	d106      	bne.n	11f78 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   11f6a:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   11f6e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   11f72:	4628      	mov	r0, r5
   11f74:	f7ff ff60 	bl	11e38 <chan_sel_remap>
}
   11f78:	bd38      	pop	{r3, r4, r5, pc}
   11f7a:	bf00      	nop
   11f7c:	bacf914d 	.word	0xbacf914d

00011f80 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   11f80:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   11f88:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11f8c:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   11f8e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   11f92:	4770      	bx	lr

00011f94 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   11f94:	b538      	push	{r3, r4, r5, lr}
   11f96:	4604      	mov	r4, r0
   11f98:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   11f9a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   11f9e:	f013 0f80 	tst.w	r3, #128	; 0x80
   11fa2:	d11f      	bne.n	11fe4 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   11fa4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   11fa8:	b1e2      	cbz	r2, 11fe4 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   11faa:	f013 0f08 	tst.w	r3, #8
   11fae:	d119      	bne.n	11fe4 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   11fb0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   11fb4:	429a      	cmp	r2, r3
   11fb6:	d007      	beq.n	11fc8 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   11fb8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11fbc:	b143      	cbz	r3, 11fd0 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   11fbe:	4629      	mov	r1, r5
   11fc0:	4620      	mov	r0, r4
   11fc2:	f7ff ffdd 	bl	11f80 <ctrl_tx_last_enqueue>
   11fc6:	e014      	b.n	11ff2 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   11fc8:	681b      	ldr	r3, [r3, #0]
   11fca:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   11fce:	e7f3      	b.n	11fb8 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   11fd0:	6813      	ldr	r3, [r2, #0]
   11fd2:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   11fd4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11fd8:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   11fda:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   11fde:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   11fe2:	e006      	b.n	11ff2 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   11fe4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11fe8:	b133      	cbz	r3, 11ff8 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   11fea:	4629      	mov	r1, r5
   11fec:	4620      	mov	r0, r4
   11fee:	f7ff ffc7 	bl	11f80 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   11ff2:	682b      	ldr	r3, [r5, #0]
   11ff4:	b153      	cbz	r3, 1200c <ctrl_tx_enqueue+0x78>
   11ff6:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   11ff8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11ffc:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   11ffe:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   12002:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   12006:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   1200a:	e7f2      	b.n	11ff2 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   1200c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   12010:	e7f1      	b.n	11ff6 <ctrl_tx_enqueue+0x62>

00012012 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   12012:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   12014:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   12018:	f013 0f08 	tst.w	r3, #8
   1201c:	d010      	beq.n	12040 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   1201e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   12022:	b13b      	cbz	r3, 12034 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   12024:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12028:	681b      	ldr	r3, [r3, #0]
   1202a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1202c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12030:	6019      	str	r1, [r3, #0]
   12032:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   12034:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12038:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   1203a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   1203e:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   12040:	f7ff ffa8 	bl	11f94 <ctrl_tx_enqueue>
   12044:	bd08      	pop	{r3, pc}
	...

00012048 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   12048:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1204c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   12050:	428b      	cmp	r3, r1
   12052:	d001      	beq.n	12058 <conn_update_req+0x10>
		return 1;
   12054:	2001      	movs	r0, #1
   12056:	4770      	bx	lr
{
   12058:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   1205a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1205e:	2b00      	cmp	r3, #0
   12060:	db2a      	blt.n	120b8 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   12062:	2401      	movs	r4, #1
   12064:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   12068:	2200      	movs	r2, #0
   1206a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   1206e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   12070:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   12074:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   12076:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   1207a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   1207c:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   12080:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   12084:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   12088:	4d26      	ldr	r5, [pc, #152]	; (12124 <conn_update_req+0xdc>)
   1208a:	fb85 e503 	smull	lr, r5, r5, r3
   1208e:	17db      	asrs	r3, r3, #31
   12090:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   12094:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12098:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1209c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   120a0:	b2db      	uxtb	r3, r3
   120a2:	f043 0304 	orr.w	r3, r3, #4
   120a6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   120aa:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   120ae:	3901      	subs	r1, #1
   120b0:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   120b4:	4610      	mov	r0, r2
   120b6:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   120b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   120bc:	f013 0f20 	tst.w	r3, #32
   120c0:	d101      	bne.n	120c6 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   120c2:	2002      	movs	r0, #2
   120c4:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   120c6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   120ca:	f013 0f02 	tst.w	r3, #2
   120ce:	d101      	bne.n	120d4 <conn_update_req+0x8c>
	return 2;
   120d0:	2002      	movs	r0, #2
}
   120d2:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   120d4:	2300      	movs	r3, #0
   120d6:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   120da:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   120dc:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   120e0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   120e2:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   120e6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   120e8:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   120ec:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   120f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   120f4:	490b      	ldr	r1, [pc, #44]	; (12124 <conn_update_req+0xdc>)
   120f6:	fb81 4102 	smull	r4, r1, r1, r2
   120fa:	17d2      	asrs	r2, r2, #31
   120fc:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   12100:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   12104:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   12108:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   1210c:	f363 02c3 	bfi	r2, r3, #3, #1
   12110:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   12114:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   12118:	3a01      	subs	r2, #1
   1211a:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   1211e:	4618      	mov	r0, r3
   12120:	bd30      	pop	{r4, r5, pc}
   12122:	bf00      	nop
   12124:	10624dd3 	.word	0x10624dd3

00012128 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   12128:	4a0d      	ldr	r2, [pc, #52]	; (12160 <rx_fc_lock+0x38>)
   1212a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1212e:	b2db      	uxtb	r3, r3
   12130:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   12134:	4293      	cmp	r3, r2
   12136:	d000      	beq.n	1213a <rx_fc_lock+0x12>
   12138:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   1213a:	4a09      	ldr	r2, [pc, #36]	; (12160 <rx_fc_lock+0x38>)
   1213c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   12140:	33b8      	adds	r3, #184	; 0xb8
   12142:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   12146:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   12148:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1214c:	3301      	adds	r3, #1
   1214e:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   12150:	2b03      	cmp	r3, #3
   12152:	d003      	beq.n	1215c <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   12154:	4a02      	ldr	r2, [pc, #8]	; (12160 <rx_fc_lock+0x38>)
   12156:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   1215a:	e7ed      	b.n	12138 <rx_fc_lock+0x10>
			req = 0;
   1215c:	2300      	movs	r3, #0
   1215e:	e7f9      	b.n	12154 <rx_fc_lock+0x2c>
   12160:	2000144c 	.word	0x2000144c

00012164 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12164:	b900      	cbnz	r0, 12168 <ticker_success_assert+0x4>
   12166:	4770      	bx	lr
   12168:	4040      	eors	r0, r0
   1216a:	f380 8811 	msr	BASEPRI, r0
   1216e:	f04f 0004 	mov.w	r0, #4
   12172:	df02      	svc	2

00012174 <start_enc_rsp_send>:
{
   12174:	b510      	push	{r4, lr}
   12176:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   12178:	b171      	cbz	r1, 12198 <start_enc_rsp_send+0x24>
   1217a:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   1217c:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1217e:	781a      	ldrb	r2, [r3, #0]
   12180:	f042 0203 	orr.w	r2, r2, #3
   12184:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   12186:	2201      	movs	r2, #1
   12188:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1218a:	2206      	movs	r2, #6
   1218c:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   1218e:	b111      	cbz	r1, 12196 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   12190:	4620      	mov	r0, r4
   12192:	f7ff feff 	bl	11f94 <ctrl_tx_enqueue>
   12196:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12198:	4806      	ldr	r0, [pc, #24]	; (121b4 <start_enc_rsp_send+0x40>)
   1219a:	f7fd fc6a 	bl	fa72 <mem_acquire>
		LL_ASSERT(node_tx);
   1219e:	4601      	mov	r1, r0
   121a0:	b108      	cbz	r0, 121a6 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   121a2:	1d03      	adds	r3, r0, #4
   121a4:	e7eb      	b.n	1217e <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   121a6:	4040      	eors	r0, r0
   121a8:	f380 8811 	msr	BASEPRI, r0
   121ac:	f04f 0004 	mov.w	r0, #4
   121b0:	df02      	svc	2
   121b2:	bf00      	nop
   121b4:	200015a4 	.word	0x200015a4

000121b8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   121b8:	2801      	cmp	r0, #1
   121ba:	d005      	beq.n	121c8 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   121bc:	4b0d      	ldr	r3, [pc, #52]	; (121f4 <ticker_stop_adv_assert+0x3c>)
   121be:	7b1b      	ldrb	r3, [r3, #12]
   121c0:	b2db      	uxtb	r3, r3
   121c2:	2b05      	cmp	r3, #5
   121c4:	d00f      	beq.n	121e6 <ticker_stop_adv_assert+0x2e>
   121c6:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   121c8:	4b0a      	ldr	r3, [pc, #40]	; (121f4 <ticker_stop_adv_assert+0x3c>)
   121ca:	7b9b      	ldrb	r3, [r3, #14]
   121cc:	b2db      	uxtb	r3, r3
   121ce:	2b05      	cmp	r3, #5
   121d0:	d103      	bne.n	121da <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   121d2:	2200      	movs	r2, #0
   121d4:	4b07      	ldr	r3, [pc, #28]	; (121f4 <ticker_stop_adv_assert+0x3c>)
   121d6:	739a      	strb	r2, [r3, #14]
   121d8:	4770      	bx	lr
			LL_ASSERT(0);
   121da:	4040      	eors	r0, r0
   121dc:	f380 8811 	msr	BASEPRI, r0
   121e0:	f04f 0004 	mov.w	r0, #4
   121e4:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   121e6:	4040      	eors	r0, r0
   121e8:	f380 8811 	msr	BASEPRI, r0
   121ec:	f04f 0004 	mov.w	r0, #4
   121f0:	df02      	svc	2
   121f2:	bf00      	nop
   121f4:	2000144c 	.word	0x2000144c

000121f8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   121f8:	2801      	cmp	r0, #1
   121fa:	d005      	beq.n	12208 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   121fc:	4b0d      	ldr	r3, [pc, #52]	; (12234 <ticker_stop_scan_assert+0x3c>)
   121fe:	7b1b      	ldrb	r3, [r3, #12]
   12200:	b2db      	uxtb	r3, r3
   12202:	2b06      	cmp	r3, #6
   12204:	d00f      	beq.n	12226 <ticker_stop_scan_assert+0x2e>
   12206:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   12208:	4b0a      	ldr	r3, [pc, #40]	; (12234 <ticker_stop_scan_assert+0x3c>)
   1220a:	7b9b      	ldrb	r3, [r3, #14]
   1220c:	b2db      	uxtb	r3, r3
   1220e:	2b06      	cmp	r3, #6
   12210:	d103      	bne.n	1221a <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   12212:	2200      	movs	r2, #0
   12214:	4b07      	ldr	r3, [pc, #28]	; (12234 <ticker_stop_scan_assert+0x3c>)
   12216:	739a      	strb	r2, [r3, #14]
   12218:	4770      	bx	lr
			LL_ASSERT(0);
   1221a:	4040      	eors	r0, r0
   1221c:	f380 8811 	msr	BASEPRI, r0
   12220:	f04f 0004 	mov.w	r0, #4
   12224:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   12226:	4040      	eors	r0, r0
   12228:	f380 8811 	msr	BASEPRI, r0
   1222c:	f04f 0004 	mov.w	r0, #4
   12230:	df02      	svc	2
   12232:	bf00      	nop
   12234:	2000144c 	.word	0x2000144c

00012238 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   12238:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   1223c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1223e:	1a9b      	subs	r3, r3, r2
   12240:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   12242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12246:	da5b      	bge.n	12300 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12248:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1224c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12250:	429a      	cmp	r2, r3
   12252:	d13d      	bne.n	122d0 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   12254:	4b2c      	ldr	r3, [pc, #176]	; (12308 <conn_update+0xd0>)
   12256:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1225a:	2b00      	cmp	r3, #0
   1225c:	d03e      	beq.n	122dc <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   1225e:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   12260:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   12264:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   12268:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1226c:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   12270:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   12274:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   12278:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   1227c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   12280:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   12284:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   12288:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   1228c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   12290:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   12294:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   12298:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1229c:	f36f 0382 	bfc	r3, #2, #1
   122a0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   122a4:	2301      	movs	r3, #1
   122a6:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   122aa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   122ae:	3b01      	subs	r3, #1
   122b0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   122b4:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   122b8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   122bc:	429a      	cmp	r2, r3
   122be:	d021      	beq.n	12304 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   122c0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   122c4:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   122c8:	2b04      	cmp	r3, #4
   122ca:	d015      	beq.n	122f8 <conn_update+0xc0>
	return 0;
   122cc:	2000      	movs	r0, #0
}
   122ce:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   122d0:	4040      	eors	r0, r0
   122d2:	f380 8811 	msr	BASEPRI, r0
   122d6:	f04f 0004 	mov.w	r0, #4
   122da:	df02      	svc	2
		LL_ASSERT(conn->role);
   122dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
   122e0:	2b00      	cmp	r3, #0
   122e2:	da03      	bge.n	122ec <conn_update+0xb4>
		_radio.conn_upd = conn;
   122e4:	4b08      	ldr	r3, [pc, #32]	; (12308 <conn_update+0xd0>)
   122e6:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   122ea:	e7b8      	b.n	1225e <conn_update+0x26>
		LL_ASSERT(conn->role);
   122ec:	4040      	eors	r0, r0
   122ee:	f380 8811 	msr	BASEPRI, r0
   122f2:	f04f 0004 	mov.w	r0, #4
   122f6:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   122f8:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   122fc:	2000      	movs	r0, #0
   122fe:	4770      	bx	lr
		return 1;
   12300:	2001      	movs	r0, #1
   12302:	4770      	bx	lr
	return 0;
   12304:	2000      	movs	r0, #0
   12306:	4770      	bx	lr
   12308:	2000144c 	.word	0x2000144c

0001230c <pause_enc_rsp_send>:
{
   1230c:	b510      	push	{r4, lr}
   1230e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12310:	480b      	ldr	r0, [pc, #44]	; (12340 <pause_enc_rsp_send+0x34>)
   12312:	f7fd fbae 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   12316:	b160      	cbz	r0, 12332 <pause_enc_rsp_send+0x26>
   12318:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1231a:	7903      	ldrb	r3, [r0, #4]
   1231c:	f043 0303 	orr.w	r3, r3, #3
   12320:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   12322:	2301      	movs	r3, #1
   12324:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   12326:	230b      	movs	r3, #11
   12328:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1232a:	4620      	mov	r0, r4
   1232c:	f7ff fe32 	bl	11f94 <ctrl_tx_enqueue>
   12330:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   12332:	4040      	eors	r0, r0
   12334:	f380 8811 	msr	BASEPRI, r0
   12338:	f04f 0004 	mov.w	r0, #4
   1233c:	df02      	svc	2
   1233e:	bf00      	nop
   12340:	200015a4 	.word	0x200015a4

00012344 <ping_resp_send>:
{
   12344:	b510      	push	{r4, lr}
   12346:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12348:	480b      	ldr	r0, [pc, #44]	; (12378 <ping_resp_send+0x34>)
   1234a:	f7fd fb92 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   1234e:	b160      	cbz	r0, 1236a <ping_resp_send+0x26>
   12350:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12352:	7903      	ldrb	r3, [r0, #4]
   12354:	f043 0303 	orr.w	r3, r3, #3
   12358:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   1235a:	2301      	movs	r3, #1
   1235c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1235e:	2313      	movs	r3, #19
   12360:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   12362:	4620      	mov	r0, r4
   12364:	f7ff fe16 	bl	11f94 <ctrl_tx_enqueue>
   12368:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1236a:	4040      	eors	r0, r0
   1236c:	f380 8811 	msr	BASEPRI, r0
   12370:	f04f 0004 	mov.w	r0, #4
   12374:	df02      	svc	2
   12376:	bf00      	nop
   12378:	200015a4 	.word	0x200015a4

0001237c <length_resp_send>:
{
   1237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1237e:	4604      	mov	r4, r0
   12380:	460f      	mov	r7, r1
   12382:	4615      	mov	r5, r2
   12384:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12386:	480e      	ldr	r0, [pc, #56]	; (123c0 <length_resp_send+0x44>)
   12388:	f7fd fb73 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   1238c:	b190      	cbz	r0, 123b4 <length_resp_send+0x38>
   1238e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12390:	7903      	ldrb	r3, [r0, #4]
   12392:	f043 0303 	orr.w	r3, r3, #3
   12396:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   12398:	2309      	movs	r3, #9
   1239a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1239c:	2315      	movs	r3, #21
   1239e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   123a0:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   123a2:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   123a4:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   123a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   123aa:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   123ac:	4620      	mov	r0, r4
   123ae:	f7ff fdf1 	bl	11f94 <ctrl_tx_enqueue>
   123b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   123b4:	4040      	eors	r0, r0
   123b6:	f380 8811 	msr	BASEPRI, r0
   123ba:	f04f 0004 	mov.w	r0, #4
   123be:	df02      	svc	2
   123c0:	200015a4 	.word	0x200015a4

000123c4 <reject_ext_ind_send>:
{
   123c4:	b570      	push	{r4, r5, r6, lr}
   123c6:	4604      	mov	r4, r0
   123c8:	460e      	mov	r6, r1
   123ca:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   123cc:	480c      	ldr	r0, [pc, #48]	; (12400 <reject_ext_ind_send+0x3c>)
   123ce:	f7fd fb50 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   123d2:	b170      	cbz	r0, 123f2 <reject_ext_ind_send+0x2e>
   123d4:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   123d6:	7903      	ldrb	r3, [r0, #4]
   123d8:	f043 0303 	orr.w	r3, r3, #3
   123dc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   123de:	2303      	movs	r3, #3
   123e0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   123e2:	2311      	movs	r3, #17
   123e4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   123e6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   123e8:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   123ea:	4620      	mov	r0, r4
   123ec:	f7ff fdd2 	bl	11f94 <ctrl_tx_enqueue>
   123f0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   123f2:	4040      	eors	r0, r0
   123f4:	f380 8811 	msr	BASEPRI, r0
   123f8:	f04f 0004 	mov.w	r0, #4
   123fc:	df02      	svc	2
   123fe:	bf00      	nop
   12400:	200015a4 	.word	0x200015a4

00012404 <phy_rsp_send>:
{
   12404:	b510      	push	{r4, lr}
   12406:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12408:	4810      	ldr	r0, [pc, #64]	; (1244c <phy_rsp_send+0x48>)
   1240a:	f7fd fb32 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   1240e:	b1b0      	cbz	r0, 1243e <phy_rsp_send+0x3a>
   12410:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12412:	7903      	ldrb	r3, [r0, #4]
   12414:	f043 0303 	orr.w	r3, r3, #3
   12418:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1241a:	2303      	movs	r3, #3
   1241c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1241e:	2317      	movs	r3, #23
   12420:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   12422:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12426:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   1242a:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   1242c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   12430:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   12434:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   12436:	4620      	mov	r0, r4
   12438:	f7ff fdac 	bl	11f94 <ctrl_tx_enqueue>
   1243c:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1243e:	4040      	eors	r0, r0
   12440:	f380 8811 	msr	BASEPRI, r0
   12444:	f04f 0004 	mov.w	r0, #4
   12448:	df02      	svc	2
   1244a:	bf00      	nop
   1244c:	200015a4 	.word	0x200015a4

00012450 <unknown_rsp_send>:
{
   12450:	b538      	push	{r3, r4, r5, lr}
   12452:	4604      	mov	r4, r0
   12454:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12456:	480c      	ldr	r0, [pc, #48]	; (12488 <unknown_rsp_send+0x38>)
   12458:	f7fd fb0b 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   1245c:	b168      	cbz	r0, 1247a <unknown_rsp_send+0x2a>
   1245e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12460:	7903      	ldrb	r3, [r0, #4]
   12462:	f043 0303 	orr.w	r3, r3, #3
   12466:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   12468:	2302      	movs	r3, #2
   1246a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1246c:	2307      	movs	r3, #7
   1246e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   12470:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   12472:	4620      	mov	r0, r4
   12474:	f7ff fd8e 	bl	11f94 <ctrl_tx_enqueue>
   12478:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   1247a:	4040      	eors	r0, r0
   1247c:	f380 8811 	msr	BASEPRI, r0
   12480:	f04f 0004 	mov.w	r0, #4
   12484:	df02      	svc	2
   12486:	bf00      	nop
   12488:	200015a4 	.word	0x200015a4

0001248c <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1248c:	b120      	cbz	r0, 12498 <ticker_update_adv_assert+0xc>
   1248e:	4b06      	ldr	r3, [pc, #24]	; (124a8 <ticker_update_adv_assert+0x1c>)
   12490:	7b9b      	ldrb	r3, [r3, #14]
   12492:	b2db      	uxtb	r3, r3
   12494:	2b05      	cmp	r3, #5
   12496:	d100      	bne.n	1249a <ticker_update_adv_assert+0xe>
   12498:	4770      	bx	lr
   1249a:	4040      	eors	r0, r0
   1249c:	f380 8811 	msr	BASEPRI, r0
   124a0:	f04f 0004 	mov.w	r0, #4
   124a4:	df02      	svc	2
   124a6:	bf00      	nop
   124a8:	2000144c 	.word	0x2000144c

000124ac <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   124ac:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   124ae:	b120      	cbz	r0, 124ba <ticker_update_slave_assert+0xe>
   124b0:	4b05      	ldr	r3, [pc, #20]	; (124c8 <ticker_update_slave_assert+0x1c>)
   124b2:	7b9b      	ldrb	r3, [r3, #14]
   124b4:	b2db      	uxtb	r3, r3
   124b6:	4299      	cmp	r1, r3
   124b8:	d100      	bne.n	124bc <ticker_update_slave_assert+0x10>
   124ba:	4770      	bx	lr
   124bc:	4040      	eors	r0, r0
   124be:	f380 8811 	msr	BASEPRI, r0
   124c2:	f04f 0004 	mov.w	r0, #4
   124c6:	df02      	svc	2
   124c8:	2000144c 	.word	0x2000144c

000124cc <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   124cc:	b930      	cbnz	r0, 124dc <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   124ce:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   124d2:	f36f 0341 	bfc	r3, #1, #1
   124d6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   124da:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   124dc:	4040      	eors	r0, r0
   124de:	f380 8811 	msr	BASEPRI, r0
   124e2:	f04f 0004 	mov.w	r0, #4
   124e6:	df02      	svc	2

000124e8 <packet_rx_allocate>:
{
   124e8:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   124ea:	4b22      	ldr	r3, [pc, #136]	; (12574 <packet_rx_allocate+0x8c>)
   124ec:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   124f0:	4283      	cmp	r3, r0
   124f2:	d300      	bcc.n	124f6 <packet_rx_allocate+0xe>
   124f4:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   124f6:	4a1f      	ldr	r2, [pc, #124]	; (12574 <packet_rx_allocate+0x8c>)
   124f8:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   124fc:	3401      	adds	r4, #1
   124fe:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   12500:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   12504:	4294      	cmp	r4, r2
   12506:	d10d      	bne.n	12524 <packet_rx_allocate+0x3c>
		acquire = 0;
   12508:	2400      	movs	r4, #0
   1250a:	e00b      	b.n	12524 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   1250c:	491a      	ldr	r1, [pc, #104]	; (12578 <packet_rx_allocate+0x90>)
   1250e:	4630      	mov	r0, r6
   12510:	f7fd facb 	bl	faaa <mem_release>
			break;
   12514:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   12516:	4a17      	ldr	r2, [pc, #92]	; (12574 <packet_rx_allocate+0x8c>)
   12518:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   1251c:	3b01      	subs	r3, #1
   1251e:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   12522:	462b      	mov	r3, r5
   12524:	1e5d      	subs	r5, r3, #1
   12526:	b2ed      	uxtb	r5, r5
   12528:	b313      	cbz	r3, 12570 <packet_rx_allocate+0x88>
   1252a:	4b12      	ldr	r3, [pc, #72]	; (12574 <packet_rx_allocate+0x8c>)
   1252c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   12530:	b2db      	uxtb	r3, r3
   12532:	429c      	cmp	r4, r3
   12534:	d01c      	beq.n	12570 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   12536:	4810      	ldr	r0, [pc, #64]	; (12578 <packet_rx_allocate+0x90>)
   12538:	f7fd fa9b 	bl	fa72 <mem_acquire>
		if (!link) {
   1253c:	4606      	mov	r6, r0
   1253e:	b1b8      	cbz	r0, 12570 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   12540:	480e      	ldr	r0, [pc, #56]	; (1257c <packet_rx_allocate+0x94>)
   12542:	f7fd fa96 	bl	fa72 <mem_acquire>
		if (!radio_pdu_node_rx) {
   12546:	4602      	mov	r2, r0
   12548:	2800      	cmp	r0, #0
   1254a:	d0df      	beq.n	1250c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   1254c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   1254e:	4b09      	ldr	r3, [pc, #36]	; (12574 <packet_rx_allocate+0x8c>)
   12550:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   12554:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   12558:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   1255c:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   12560:	3401      	adds	r4, #1
   12562:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   12564:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   12568:	429c      	cmp	r4, r3
   1256a:	d1d4      	bne.n	12516 <packet_rx_allocate+0x2e>
			acquire = 0;
   1256c:	2400      	movs	r4, #0
   1256e:	e7d2      	b.n	12516 <packet_rx_allocate+0x2e>
   12570:	bd70      	pop	{r4, r5, r6, pc}
   12572:	bf00      	nop
   12574:	2000144c 	.word	0x2000144c
   12578:	20001590 	.word	0x20001590
   1257c:	20001578 	.word	0x20001578

00012580 <tx_cmplt_get>:
{
   12580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   12584:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   12586:	4294      	cmp	r4, r2
   12588:	d043      	beq.n	12612 <tx_cmplt_get+0x92>
   1258a:	4690      	mov	r8, r2
   1258c:	4689      	mov	r9, r1
   1258e:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   12590:	4b21      	ldr	r3, [pc, #132]	; (12618 <tx_cmplt_get+0x98>)
   12592:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   12596:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   1259a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   1259c:	2600      	movs	r6, #0
   1259e:	e00f      	b.n	125c0 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   125a0:	2301      	movs	r3, #1
   125a2:	606b      	str	r3, [r5, #4]
			cmplt++;
   125a4:	441e      	add	r6, r3
   125a6:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   125a8:	f030 0303 	bics.w	r3, r0, #3
   125ac:	d126      	bne.n	125fc <tx_cmplt_get+0x7c>
		_first = _first + 1;
   125ae:	3401      	adds	r4, #1
   125b0:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   125b2:	4b19      	ldr	r3, [pc, #100]	; (12618 <tx_cmplt_get+0x98>)
   125b4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   125b8:	429c      	cmp	r4, r3
   125ba:	d023      	beq.n	12604 <tx_cmplt_get+0x84>
	} while (_first != last);
   125bc:	4544      	cmp	r4, r8
   125be:	d023      	beq.n	12608 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   125c0:	883a      	ldrh	r2, [r7, #0]
   125c2:	4b15      	ldr	r3, [pc, #84]	; (12618 <tx_cmplt_get+0x98>)
   125c4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   125c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   125cc:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   125d0:	429a      	cmp	r2, r3
   125d2:	d119      	bne.n	12608 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   125d4:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   125d6:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   125d8:	2801      	cmp	r0, #1
   125da:	d9e1      	bls.n	125a0 <tx_cmplt_get+0x20>
   125dc:	f030 0203 	bics.w	r2, r0, #3
   125e0:	d009      	beq.n	125f6 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   125e2:	b143      	cbz	r3, 125f6 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   125e4:	7943      	ldrb	r3, [r0, #5]
   125e6:	b133      	cbz	r3, 125f6 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   125e8:	7903      	ldrb	r3, [r0, #4]
   125ea:	f003 0303 	and.w	r3, r3, #3
   125ee:	3b01      	subs	r3, #1
   125f0:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   125f2:	2b01      	cmp	r3, #1
   125f4:	d9d4      	bls.n	125a0 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   125f6:	2302      	movs	r3, #2
   125f8:	606b      	str	r3, [r5, #4]
   125fa:	e7d5      	b.n	125a8 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   125fc:	4907      	ldr	r1, [pc, #28]	; (1261c <tx_cmplt_get+0x9c>)
   125fe:	f7fd fa54 	bl	faaa <mem_release>
   12602:	e7d4      	b.n	125ae <tx_cmplt_get+0x2e>
			_first = 0;
   12604:	2400      	movs	r4, #0
   12606:	e7d9      	b.n	125bc <tx_cmplt_get+0x3c>
	*first = _first;
   12608:	f889 4000 	strb.w	r4, [r9]
}
   1260c:	4630      	mov	r0, r6
   1260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   12612:	2600      	movs	r6, #0
   12614:	e7fa      	b.n	1260c <tx_cmplt_get+0x8c>
   12616:	bf00      	nop
   12618:	2000144c 	.word	0x2000144c
   1261c:	200015ac 	.word	0x200015ac

00012620 <ticker_job_disable>:
{
   12620:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   12622:	4b05      	ldr	r3, [pc, #20]	; (12638 <ticker_job_disable+0x18>)
   12624:	7c1b      	ldrb	r3, [r3, #16]
   12626:	b903      	cbnz	r3, 1262a <ticker_job_disable+0xa>
   12628:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1262a:	2200      	movs	r2, #0
   1262c:	2101      	movs	r1, #1
   1262e:	4608      	mov	r0, r1
   12630:	f7fd f8a0 	bl	f774 <mayfly_enable>
}
   12634:	e7f8      	b.n	12628 <ticker_job_disable+0x8>
   12636:	bf00      	nop
   12638:	2000144c 	.word	0x2000144c

0001263c <connection_get>:
	if (handle < _radio.connection_count) {
   1263c:	4b0d      	ldr	r3, [pc, #52]	; (12674 <connection_get+0x38>)
   1263e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   12642:	4283      	cmp	r3, r0
   12644:	d910      	bls.n	12668 <connection_get+0x2c>
{
   12646:	b510      	push	{r4, lr}
   12648:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   1264a:	4602      	mov	r2, r0
   1264c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12650:	4b08      	ldr	r3, [pc, #32]	; (12674 <connection_get+0x38>)
   12652:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12656:	f7fd fa49 	bl	faec <mem_get>
		if ((conn) && (conn->handle == handle)) {
   1265a:	4603      	mov	r3, r0
   1265c:	b110      	cbz	r0, 12664 <connection_get+0x28>
   1265e:	8c02      	ldrh	r2, [r0, #32]
   12660:	4294      	cmp	r4, r2
   12662:	d104      	bne.n	1266e <connection_get+0x32>
}
   12664:	4618      	mov	r0, r3
   12666:	bd10      	pop	{r4, pc}
	return 0;
   12668:	2300      	movs	r3, #0
}
   1266a:	4618      	mov	r0, r3
   1266c:	4770      	bx	lr
	return 0;
   1266e:	2300      	movs	r3, #0
   12670:	e7f8      	b.n	12664 <connection_get+0x28>
   12672:	bf00      	nop
   12674:	2000144c 	.word	0x2000144c

00012678 <role_disable>:
{
   12678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1267a:	b087      	sub	sp, #28
   1267c:	4604      	mov	r4, r0
   1267e:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12680:	2302      	movs	r3, #2
   12682:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   12684:	2805      	cmp	r0, #5
   12686:	d00d      	beq.n	126a4 <role_disable+0x2c>
   12688:	2806      	cmp	r0, #6
   1268a:	d02a      	beq.n	126e2 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1268c:	2806      	cmp	r0, #6
   1268e:	d957      	bls.n	12740 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   12690:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   12692:	b280      	uxth	r0, r0
   12694:	f7ff ffd2 	bl	1263c <connection_get>
			if (!conn) {
   12698:	2800      	cmp	r0, #0
   1269a:	f000 8153 	beq.w	12944 <role_disable+0x2cc>
			ticks_xtal_to_start =
   1269e:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   126a0:	6847      	ldr	r7, [r0, #4]
		break;
   126a2:	e023      	b.n	126ec <role_disable+0x74>
		ticks_xtal_to_start =
   126a4:	4b9f      	ldr	r3, [pc, #636]	; (12924 <role_disable+0x2ac>)
   126a6:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   126a8:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   126aa:	ab05      	add	r3, sp, #20
   126ac:	9300      	str	r3, [sp, #0]
   126ae:	4b9e      	ldr	r3, [pc, #632]	; (12928 <role_disable+0x2b0>)
   126b0:	460a      	mov	r2, r1
   126b2:	2103      	movs	r1, #3
   126b4:	2000      	movs	r0, #0
   126b6:	f7fe ff47 	bl	11548 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   126ba:	2802      	cmp	r0, #2
   126bc:	d00d      	beq.n	126da <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   126be:	9b05      	ldr	r3, [sp, #20]
   126c0:	b1a3      	cbz	r3, 126ec <role_disable+0x74>
   126c2:	9b05      	ldr	r3, [sp, #20]
   126c4:	2b01      	cmp	r3, #1
   126c6:	d011      	beq.n	126ec <role_disable+0x74>
   126c8:	4040      	eors	r0, r0
   126ca:	f380 8811 	msr	BASEPRI, r0
   126ce:	f04f 0004 	mov.w	r0, #4
   126d2:	df02      	svc	2
   126d4:	bf20      	wfe
  __ASM volatile ("sev");
   126d6:	bf40      	sev
  __ASM volatile ("wfe");
   126d8:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   126da:	9b05      	ldr	r3, [sp, #20]
   126dc:	2b02      	cmp	r3, #2
   126de:	d0f9      	beq.n	126d4 <role_disable+0x5c>
   126e0:	e7ed      	b.n	126be <role_disable+0x46>
		ticks_xtal_to_start =
   126e2:	4b90      	ldr	r3, [pc, #576]	; (12924 <role_disable+0x2ac>)
   126e4:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   126e8:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   126ec:	4b8d      	ldr	r3, [pc, #564]	; (12924 <role_disable+0x2ac>)
   126ee:	7b9b      	ldrb	r3, [r3, #14]
   126f0:	2b00      	cmp	r3, #0
   126f2:	d12b      	bne.n	1274c <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   126f4:	4b8b      	ldr	r3, [pc, #556]	; (12924 <role_disable+0x2ac>)
   126f6:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   126f8:	ab06      	add	r3, sp, #24
   126fa:	2202      	movs	r2, #2
   126fc:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12700:	9300      	str	r3, [sp, #0]
   12702:	4b89      	ldr	r3, [pc, #548]	; (12928 <role_disable+0x2b0>)
   12704:	4622      	mov	r2, r4
   12706:	2103      	movs	r1, #3
   12708:	2000      	movs	r0, #0
   1270a:	f7fe ff1d 	bl	11548 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1270e:	2802      	cmp	r0, #2
   12710:	d022      	beq.n	12758 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   12712:	9b05      	ldr	r3, [sp, #20]
   12714:	b973      	cbnz	r3, 12734 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   12716:	4b83      	ldr	r3, [pc, #524]	; (12924 <role_disable+0x2ac>)
   12718:	7b1b      	ldrb	r3, [r3, #12]
   1271a:	b2db      	uxtb	r3, r3
   1271c:	429c      	cmp	r4, r3
   1271e:	d02d      	beq.n	1277c <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   12720:	4b80      	ldr	r3, [pc, #512]	; (12924 <role_disable+0x2ac>)
   12722:	7b5b      	ldrb	r3, [r3, #13]
   12724:	b2db      	uxtb	r3, r3
   12726:	429c      	cmp	r4, r3
   12728:	d028      	beq.n	1277c <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   1272a:	4b7e      	ldr	r3, [pc, #504]	; (12924 <role_disable+0x2ac>)
   1272c:	7b9b      	ldrb	r3, [r3, #14]
   1272e:	b90b      	cbnz	r3, 12734 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   12730:	2301      	movs	r3, #1
   12732:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   12734:	2200      	movs	r2, #0
   12736:	4b7b      	ldr	r3, [pc, #492]	; (12924 <role_disable+0x2ac>)
   12738:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   1273a:	9805      	ldr	r0, [sp, #20]
}
   1273c:	b007      	add	sp, #28
   1273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   12740:	4040      	eors	r0, r0
   12742:	f380 8811 	msr	BASEPRI, r0
   12746:	f04f 0004 	mov.w	r0, #4
   1274a:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   1274c:	4040      	eors	r0, r0
   1274e:	f380 8811 	msr	BASEPRI, r0
   12752:	f04f 0004 	mov.w	r0, #4
   12756:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   12758:	4b72      	ldr	r3, [pc, #456]	; (12924 <role_disable+0x2ac>)
   1275a:	7b5b      	ldrb	r3, [r3, #13]
   1275c:	b2db      	uxtb	r3, r3
   1275e:	429c      	cmp	r4, r3
   12760:	d108      	bne.n	12774 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12762:	2201      	movs	r2, #1
   12764:	4611      	mov	r1, r2
   12766:	2003      	movs	r0, #3
   12768:	f7fd f804 	bl	f774 <mayfly_enable>
   1276c:	e002      	b.n	12774 <role_disable+0xfc>
   1276e:	bf20      	wfe
  __ASM volatile ("sev");
   12770:	bf40      	sev
  __ASM volatile ("wfe");
   12772:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   12774:	9b05      	ldr	r3, [sp, #20]
   12776:	2b02      	cmp	r3, #2
   12778:	d0f9      	beq.n	1276e <role_disable+0xf6>
   1277a:	e7ca      	b.n	12712 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1277c:	ab06      	add	r3, sp, #24
   1277e:	2202      	movs	r2, #2
   12780:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12784:	9300      	str	r3, [sp, #0]
   12786:	4b68      	ldr	r3, [pc, #416]	; (12928 <role_disable+0x2b0>)
   12788:	2200      	movs	r2, #0
   1278a:	2103      	movs	r1, #3
   1278c:	4610      	mov	r0, r2
   1278e:	f7fe fedb 	bl	11548 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12792:	2802      	cmp	r0, #2
   12794:	d029      	beq.n	127ea <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12796:	9b02      	ldr	r3, [sp, #8]
   12798:	2b00      	cmp	r3, #0
   1279a:	d17c      	bne.n	12896 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1279c:	2302      	movs	r3, #2
   1279e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   127a0:	4b60      	ldr	r3, [pc, #384]	; (12924 <role_disable+0x2ac>)
   127a2:	7b1b      	ldrb	r3, [r3, #12]
   127a4:	2b00      	cmp	r3, #0
   127a6:	d02e      	beq.n	12806 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   127a8:	2000      	movs	r0, #0
   127aa:	4b5e      	ldr	r3, [pc, #376]	; (12924 <role_disable+0x2ac>)
   127ac:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   127ae:	ab03      	add	r3, sp, #12
   127b0:	9300      	str	r3, [sp, #0]
   127b2:	4b5d      	ldr	r3, [pc, #372]	; (12928 <role_disable+0x2b0>)
   127b4:	2201      	movs	r2, #1
   127b6:	2103      	movs	r1, #3
   127b8:	f7fe fec6 	bl	11548 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   127bc:	2802      	cmp	r0, #2
   127be:	d028      	beq.n	12812 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   127c0:	9b03      	ldr	r3, [sp, #12]
   127c2:	2b00      	cmp	r3, #0
   127c4:	d142      	bne.n	1284c <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   127c6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   127ca:	42b7      	cmp	r7, r6
   127cc:	d92f      	bls.n	1282e <role_disable+0x1b6>
				retval = mayfly_enqueue(
   127ce:	4b57      	ldr	r3, [pc, #348]	; (1292c <role_disable+0x2b4>)
   127d0:	2200      	movs	r2, #0
   127d2:	4611      	mov	r1, r2
   127d4:	2003      	movs	r0, #3
   127d6:	f7fd f80b 	bl	f7f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   127da:	2800      	cmp	r0, #0
   127dc:	d0a5      	beq.n	1272a <role_disable+0xb2>
   127de:	4040      	eors	r0, r0
   127e0:	f380 8811 	msr	BASEPRI, r0
   127e4:	f04f 0004 	mov.w	r0, #4
   127e8:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   127ea:	2201      	movs	r2, #1
   127ec:	4611      	mov	r1, r2
   127ee:	2003      	movs	r0, #3
   127f0:	f7fc ffc0 	bl	f774 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   127f4:	9b02      	ldr	r3, [sp, #8]
   127f6:	2b02      	cmp	r3, #2
   127f8:	d1cd      	bne.n	12796 <role_disable+0x11e>
   127fa:	4040      	eors	r0, r0
   127fc:	f380 8811 	msr	BASEPRI, r0
   12800:	f04f 0004 	mov.w	r0, #4
   12804:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   12806:	4040      	eors	r0, r0
   12808:	f380 8811 	msr	BASEPRI, r0
   1280c:	f04f 0004 	mov.w	r0, #4
   12810:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12812:	2201      	movs	r2, #1
   12814:	4611      	mov	r1, r2
   12816:	2003      	movs	r0, #3
   12818:	f7fc ffac 	bl	f774 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1281c:	9b03      	ldr	r3, [sp, #12]
   1281e:	2b02      	cmp	r3, #2
   12820:	d1ce      	bne.n	127c0 <role_disable+0x148>
   12822:	4040      	eors	r0, r0
   12824:	f380 8811 	msr	BASEPRI, r0
   12828:	f04f 0004 	mov.w	r0, #4
   1282c:	df02      	svc	2
				retval = mayfly_enqueue(
   1282e:	4b40      	ldr	r3, [pc, #256]	; (12930 <role_disable+0x2b8>)
   12830:	2200      	movs	r2, #0
   12832:	4611      	mov	r1, r2
   12834:	2003      	movs	r0, #3
   12836:	f7fc ffdb 	bl	f7f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   1283a:	2800      	cmp	r0, #0
   1283c:	f43f af75 	beq.w	1272a <role_disable+0xb2>
   12840:	4040      	eors	r0, r0
   12842:	f380 8811 	msr	BASEPRI, r0
   12846:	f04f 0004 	mov.w	r0, #4
   1284a:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1284c:	9b03      	ldr	r3, [sp, #12]
   1284e:	2b01      	cmp	r3, #1
   12850:	d11b      	bne.n	1288a <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12852:	4b36      	ldr	r3, [pc, #216]	; (1292c <role_disable+0x2b4>)
   12854:	2200      	movs	r2, #0
   12856:	4611      	mov	r1, r2
   12858:	2003      	movs	r0, #3
   1285a:	f7fc ffc9 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1285e:	b970      	cbnz	r0, 1287e <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12860:	4b33      	ldr	r3, [pc, #204]	; (12930 <role_disable+0x2b8>)
   12862:	2200      	movs	r2, #0
   12864:	4611      	mov	r1, r2
   12866:	2003      	movs	r0, #3
   12868:	f7fc ffc2 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1286c:	2800      	cmp	r0, #0
   1286e:	f43f af5c 	beq.w	1272a <role_disable+0xb2>
   12872:	4040      	eors	r0, r0
   12874:	f380 8811 	msr	BASEPRI, r0
   12878:	f04f 0004 	mov.w	r0, #4
   1287c:	df02      	svc	2
			LL_ASSERT(!retval);
   1287e:	4040      	eors	r0, r0
   12880:	f380 8811 	msr	BASEPRI, r0
   12884:	f04f 0004 	mov.w	r0, #4
   12888:	df02      	svc	2
			LL_ASSERT(0);
   1288a:	4040      	eors	r0, r0
   1288c:	f380 8811 	msr	BASEPRI, r0
   12890:	f04f 0004 	mov.w	r0, #4
   12894:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12896:	9b02      	ldr	r3, [sp, #8]
   12898:	2b01      	cmp	r3, #1
   1289a:	d14d      	bne.n	12938 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   1289c:	2dff      	cmp	r5, #255	; 0xff
   1289e:	d011      	beq.n	128c4 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   128a0:	ab06      	add	r3, sp, #24
   128a2:	2202      	movs	r2, #2
   128a4:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   128a8:	9300      	str	r3, [sp, #0]
   128aa:	4b1f      	ldr	r3, [pc, #124]	; (12928 <role_disable+0x2b0>)
   128ac:	462a      	mov	r2, r5
   128ae:	2103      	movs	r1, #3
   128b0:	2000      	movs	r0, #0
   128b2:	f7fe fe49 	bl	11548 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   128b6:	2802      	cmp	r0, #2
   128b8:	d018      	beq.n	128ec <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   128ba:	9b04      	ldr	r3, [sp, #16]
   128bc:	b113      	cbz	r3, 128c4 <role_disable+0x24c>
   128be:	9b04      	ldr	r3, [sp, #16]
   128c0:	2b01      	cmp	r3, #1
   128c2:	d121      	bne.n	12908 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   128c4:	4b17      	ldr	r3, [pc, #92]	; (12924 <role_disable+0x2ac>)
   128c6:	7bdb      	ldrb	r3, [r3, #15]
   128c8:	2b00      	cmp	r3, #0
   128ca:	f43f af2e 	beq.w	1272a <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   128ce:	4b19      	ldr	r3, [pc, #100]	; (12934 <role_disable+0x2bc>)
   128d0:	2204      	movs	r2, #4
   128d2:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   128d4:	2200      	movs	r2, #0
   128d6:	4611      	mov	r1, r2
   128d8:	2003      	movs	r0, #3
   128da:	f7fc ff89 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   128de:	b1e0      	cbz	r0, 1291a <role_disable+0x2a2>
   128e0:	4040      	eors	r0, r0
   128e2:	f380 8811 	msr	BASEPRI, r0
   128e6:	f04f 0004 	mov.w	r0, #4
   128ea:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   128ec:	2201      	movs	r2, #1
   128ee:	4611      	mov	r1, r2
   128f0:	2003      	movs	r0, #3
   128f2:	f7fc ff3f 	bl	f774 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   128f6:	9b04      	ldr	r3, [sp, #16]
   128f8:	2b02      	cmp	r3, #2
   128fa:	d1de      	bne.n	128ba <role_disable+0x242>
   128fc:	4040      	eors	r0, r0
   128fe:	f380 8811 	msr	BASEPRI, r0
   12902:	f04f 0004 	mov.w	r0, #4
   12906:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12908:	4040      	eors	r0, r0
   1290a:	f380 8811 	msr	BASEPRI, r0
   1290e:	f04f 0004 	mov.w	r0, #4
   12912:	df02      	svc	2
   12914:	bf20      	wfe
  __ASM volatile ("sev");
   12916:	bf40      	sev
  __ASM volatile ("wfe");
   12918:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   1291a:	4b02      	ldr	r3, [pc, #8]	; (12924 <role_disable+0x2ac>)
   1291c:	7bdb      	ldrb	r3, [r3, #15]
   1291e:	2b00      	cmp	r3, #0
   12920:	d1f8      	bne.n	12914 <role_disable+0x29c>
   12922:	e702      	b.n	1272a <role_disable+0xb2>
   12924:	2000144c 	.word	0x2000144c
   12928:	00011df5 	.word	0x00011df5
   1292c:	2000c1e8 	.word	0x2000c1e8
   12930:	2000c2a8 	.word	0x2000c2a8
   12934:	2000c218 	.word	0x2000c218
		LL_ASSERT(0);
   12938:	4040      	eors	r0, r0
   1293a:	f380 8811 	msr	BASEPRI, r0
   1293e:	f04f 0004 	mov.w	r0, #4
   12942:	df02      	svc	2
				return 1;
   12944:	2001      	movs	r0, #1
   12946:	e6f9      	b.n	1273c <role_disable+0xc4>

00012948 <event_stop>:
{
   12948:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   1294a:	4a08      	ldr	r2, [pc, #32]	; (1296c <event_stop+0x24>)
   1294c:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1294e:	4613      	mov	r3, r2
   12950:	2200      	movs	r2, #0
   12952:	4611      	mov	r1, r2
   12954:	4610      	mov	r0, r2
   12956:	f7fc ff4b 	bl	f7f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1295a:	b900      	cbnz	r0, 1295e <event_stop+0x16>
   1295c:	bd08      	pop	{r3, pc}
   1295e:	4040      	eors	r0, r0
   12960:	f380 8811 	msr	BASEPRI, r0
   12964:	f04f 0004 	mov.w	r0, #4
   12968:	df02      	svc	2
   1296a:	bf00      	nop
   1296c:	2000c1f8 	.word	0x2000c1f8

00012970 <event_adv_stop>:
{
   12970:	b500      	push	{lr}
   12972:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   12974:	2305      	movs	r3, #5
   12976:	2200      	movs	r2, #0
   12978:	4611      	mov	r1, r2
   1297a:	4610      	mov	r0, r2
   1297c:	f7ff ffe4 	bl	12948 <event_stop>
	ticker_status =
   12980:	f241 73e4 	movw	r3, #6116	; 0x17e4
   12984:	9300      	str	r3, [sp, #0]
   12986:	4b09      	ldr	r3, [pc, #36]	; (129ac <event_adv_stop+0x3c>)
   12988:	2205      	movs	r2, #5
   1298a:	2100      	movs	r1, #0
   1298c:	4608      	mov	r0, r1
   1298e:	f7fe fddb 	bl	11548 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12992:	b108      	cbz	r0, 12998 <event_adv_stop+0x28>
   12994:	2802      	cmp	r0, #2
   12996:	d102      	bne.n	1299e <event_adv_stop+0x2e>
}
   12998:	b003      	add	sp, #12
   1299a:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1299e:	4040      	eors	r0, r0
   129a0:	f380 8811 	msr	BASEPRI, r0
   129a4:	f04f 0004 	mov.w	r0, #4
   129a8:	df02      	svc	2
   129aa:	bf00      	nop
   129ac:	00013231 	.word	0x00013231

000129b0 <event_inactive>:
{
   129b0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   129b2:	4b07      	ldr	r3, [pc, #28]	; (129d0 <event_inactive+0x20>)
   129b4:	2200      	movs	r2, #0
   129b6:	4611      	mov	r1, r2
   129b8:	4610      	mov	r0, r2
   129ba:	f7fc ff19 	bl	f7f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   129be:	b900      	cbnz	r0, 129c2 <event_inactive+0x12>
   129c0:	bd08      	pop	{r3, pc}
   129c2:	4040      	eors	r0, r0
   129c4:	f380 8811 	msr	BASEPRI, r0
   129c8:	f04f 0004 	mov.w	r0, #4
   129cc:	df02      	svc	2
   129ce:	bf00      	nop
   129d0:	2000c1c8 	.word	0x2000c1c8

000129d4 <mayfly_xtal_retain>:
{
   129d4:	b508      	push	{r3, lr}
	if (retain) {
   129d6:	b1d1      	cbz	r1, 12a0e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   129d8:	4b1c      	ldr	r3, [pc, #112]	; (12a4c <mayfly_xtal_retain+0x78>)
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	b953      	cbnz	r3, 129f4 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   129de:	2801      	cmp	r0, #1
   129e0:	d109      	bne.n	129f6 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   129e2:	2201      	movs	r2, #1
   129e4:	4b19      	ldr	r3, [pc, #100]	; (12a4c <mayfly_xtal_retain+0x78>)
   129e6:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   129e8:	4b19      	ldr	r3, [pc, #100]	; (12a50 <mayfly_xtal_retain+0x7c>)
   129ea:	2200      	movs	r2, #0
   129ec:	4611      	mov	r1, r2
   129ee:	f7fc feff 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   129f2:	b930      	cbnz	r0, 12a02 <mayfly_xtal_retain+0x2e>
   129f4:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   129f6:	4040      	eors	r0, r0
   129f8:	f380 8811 	msr	BASEPRI, r0
   129fc:	f04f 0004 	mov.w	r0, #4
   12a00:	df02      	svc	2
			LL_ASSERT(!retval);
   12a02:	4040      	eors	r0, r0
   12a04:	f380 8811 	msr	BASEPRI, r0
   12a08:	f04f 0004 	mov.w	r0, #4
   12a0c:	df02      	svc	2
		if (s_xtal_retained) {
   12a0e:	4b0f      	ldr	r3, [pc, #60]	; (12a4c <mayfly_xtal_retain+0x78>)
   12a10:	781b      	ldrb	r3, [r3, #0]
   12a12:	2b00      	cmp	r3, #0
   12a14:	d0ee      	beq.n	129f4 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   12a16:	2200      	movs	r2, #0
   12a18:	4b0c      	ldr	r3, [pc, #48]	; (12a4c <mayfly_xtal_retain+0x78>)
   12a1a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   12a1c:	b138      	cbz	r0, 12a2e <mayfly_xtal_retain+0x5a>
   12a1e:	2801      	cmp	r0, #1
   12a20:	d012      	beq.n	12a48 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   12a22:	4040      	eors	r0, r0
   12a24:	f380 8811 	msr	BASEPRI, r0
   12a28:	f04f 0004 	mov.w	r0, #4
   12a2c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   12a2e:	4b09      	ldr	r3, [pc, #36]	; (12a54 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   12a30:	2200      	movs	r2, #0
   12a32:	4611      	mov	r1, r2
   12a34:	f7fc fedc 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12a38:	2800      	cmp	r0, #0
   12a3a:	d0db      	beq.n	129f4 <mayfly_xtal_retain+0x20>
   12a3c:	4040      	eors	r0, r0
   12a3e:	f380 8811 	msr	BASEPRI, r0
   12a42:	f04f 0004 	mov.w	r0, #4
   12a46:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   12a48:	4b03      	ldr	r3, [pc, #12]	; (12a58 <mayfly_xtal_retain+0x84>)
   12a4a:	e7f1      	b.n	12a30 <mayfly_xtal_retain+0x5c>
   12a4c:	200019c4 	.word	0x200019c4
   12a50:	2000c268 	.word	0x2000c268
   12a54:	2000c278 	.word	0x2000c278
   12a58:	2000c288 	.word	0x2000c288

00012a5c <event_active>:
{
   12a5c:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a5e:	4b07      	ldr	r3, [pc, #28]	; (12a7c <event_active+0x20>)
   12a60:	2200      	movs	r2, #0
   12a62:	4611      	mov	r1, r2
   12a64:	4610      	mov	r0, r2
   12a66:	f7fc fec3 	bl	f7f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12a6a:	b900      	cbnz	r0, 12a6e <event_active+0x12>
   12a6c:	bd08      	pop	{r3, pc}
   12a6e:	4040      	eors	r0, r0
   12a70:	f380 8811 	msr	BASEPRI, r0
   12a74:	f04f 0004 	mov.w	r0, #4
   12a78:	df02      	svc	2
   12a7a:	bf00      	nop
   12a7c:	2000c1b8 	.word	0x2000c1b8

00012a80 <event_xtal>:
{
   12a80:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a82:	4b07      	ldr	r3, [pc, #28]	; (12aa0 <event_xtal+0x20>)
   12a84:	2200      	movs	r2, #0
   12a86:	4611      	mov	r1, r2
   12a88:	4610      	mov	r0, r2
   12a8a:	f7fc feb1 	bl	f7f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12a8e:	b900      	cbnz	r0, 12a92 <event_xtal+0x12>
   12a90:	bd08      	pop	{r3, pc}
   12a92:	4040      	eors	r0, r0
   12a94:	f380 8811 	msr	BASEPRI, r0
   12a98:	f04f 0004 	mov.w	r0, #4
   12a9c:	df02      	svc	2
   12a9e:	bf00      	nop
   12aa0:	2000c258 	.word	0x2000c258

00012aa4 <mayfly_radio_active>:
{
   12aa4:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   12aa6:	b148      	cbz	r0, 12abc <mayfly_radio_active+0x18>
		if (s_active++) {
   12aa8:	4a0e      	ldr	r2, [pc, #56]	; (12ae4 <mayfly_radio_active+0x40>)
   12aaa:	7813      	ldrb	r3, [r2, #0]
   12aac:	1c59      	adds	r1, r3, #1
   12aae:	7011      	strb	r1, [r2, #0]
   12ab0:	b103      	cbz	r3, 12ab4 <mayfly_radio_active+0x10>
   12ab2:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   12ab4:	2001      	movs	r0, #1
   12ab6:	f007 f8a5 	bl	19c04 <radio_active_callback>
   12aba:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   12abc:	4b09      	ldr	r3, [pc, #36]	; (12ae4 <mayfly_radio_active+0x40>)
   12abe:	781b      	ldrb	r3, [r3, #0]
   12ac0:	b14b      	cbz	r3, 12ad6 <mayfly_radio_active+0x32>
		if (--s_active) {
   12ac2:	3b01      	subs	r3, #1
   12ac4:	b2db      	uxtb	r3, r3
   12ac6:	4a07      	ldr	r2, [pc, #28]	; (12ae4 <mayfly_radio_active+0x40>)
   12ac8:	7013      	strb	r3, [r2, #0]
   12aca:	2b00      	cmp	r3, #0
   12acc:	d1f1      	bne.n	12ab2 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   12ace:	2000      	movs	r0, #0
   12ad0:	f007 f898 	bl	19c04 <radio_active_callback>
   12ad4:	e7ed      	b.n	12ab2 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   12ad6:	4040      	eors	r0, r0
   12ad8:	f380 8811 	msr	BASEPRI, r0
   12adc:	f04f 0004 	mov.w	r0, #4
   12ae0:	df02      	svc	2
   12ae2:	bf00      	nop
   12ae4:	20001930 	.word	0x20001930

00012ae8 <mayfly_radio_inactive>:
{
   12ae8:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   12aea:	2000      	movs	r0, #0
   12aec:	f7ff ffda 	bl	12aa4 <mayfly_radio_active>
   12af0:	bd08      	pop	{r3, pc}
	...

00012af4 <mayfly_radio_stop>:
{
   12af4:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   12af6:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12af8:	1f23      	subs	r3, r4, #4
   12afa:	b2db      	uxtb	r3, r3
   12afc:	2b01      	cmp	r3, #1
   12afe:	d808      	bhi.n	12b12 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12b00:	4b10      	ldr	r3, [pc, #64]	; (12b44 <mayfly_radio_stop+0x50>)
   12b02:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   12b04:	b16b      	cbz	r3, 12b22 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12b06:	2b04      	cmp	r3, #4
   12b08:	d014      	beq.n	12b34 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   12b0a:	2b05      	cmp	r3, #5
   12b0c:	d007      	beq.n	12b1e <mayfly_radio_stop+0x2a>
   12b0e:	2301      	movs	r3, #1
   12b10:	e008      	b.n	12b24 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12b12:	4040      	eors	r0, r0
   12b14:	f380 8811 	msr	BASEPRI, r0
   12b18:	f04f 0004 	mov.w	r0, #4
   12b1c:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   12b1e:	2300      	movs	r3, #0
   12b20:	e000      	b.n	12b24 <mayfly_radio_stop+0x30>
   12b22:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   12b24:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   12b26:	b13b      	cbz	r3, 12b38 <mayfly_radio_stop+0x44>
		if (radio_used) {
   12b28:	b10d      	cbz	r5, 12b2e <mayfly_radio_stop+0x3a>
			_radio.state = state;
   12b2a:	4b06      	ldr	r3, [pc, #24]	; (12b44 <mayfly_radio_stop+0x50>)
   12b2c:	741c      	strb	r4, [r3, #16]
		radio_disable();
   12b2e:	f7fd f9b5 	bl	fe9c <radio_disable>
   12b32:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   12b34:	2300      	movs	r3, #0
   12b36:	e7f5      	b.n	12b24 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   12b38:	f7fd f9de 	bl	fef8 <radio_is_idle>
   12b3c:	2800      	cmp	r0, #0
   12b3e:	d0f3      	beq.n	12b28 <mayfly_radio_stop+0x34>
   12b40:	e7f7      	b.n	12b32 <mayfly_radio_stop+0x3e>
   12b42:	bf00      	nop
   12b44:	2000144c 	.word	0x2000144c

00012b48 <adv_scan_conn_configure>:
{
   12b48:	b508      	push	{r3, lr}
	radio_reset();
   12b4a:	f7fd f901 	bl	fd50 <radio_reset>
	radio_tx_power_set(0);
   12b4e:	2000      	movs	r0, #0
   12b50:	f7fd f91a 	bl	fd88 <radio_tx_power_set>
	radio_isr_set(isr);
   12b54:	4801      	ldr	r0, [pc, #4]	; (12b5c <adv_scan_conn_configure+0x14>)
   12b56:	f7fd f8c3 	bl	fce0 <radio_isr_set>
   12b5a:	bd08      	pop	{r3, pc}
   12b5c:	00010491 	.word	0x00010491

00012b60 <adv_scan_configure>:
{
   12b60:	b570      	push	{r4, r5, r6, lr}
   12b62:	b082      	sub	sp, #8
   12b64:	4604      	mov	r4, r0
   12b66:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   12b68:	ad02      	add	r5, sp, #8
   12b6a:	4b0d      	ldr	r3, [pc, #52]	; (12ba0 <adv_scan_configure+0x40>)
   12b6c:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   12b70:	f7ff ffea 	bl	12b48 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   12b74:	4631      	mov	r1, r6
   12b76:	4620      	mov	r0, r4
   12b78:	f7fd f8f8 	bl	fd6c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   12b7c:	4628      	mov	r0, r5
   12b7e:	f7fd f921 	bl	fdc4 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   12b82:	0062      	lsls	r2, r4, #1
   12b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   12b88:	2125      	movs	r1, #37	; 0x25
   12b8a:	2008      	movs	r0, #8
   12b8c:	f7fd f932 	bl	fdf4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12b90:	4904      	ldr	r1, [pc, #16]	; (12ba4 <adv_scan_configure+0x44>)
   12b92:	f240 605b 	movw	r0, #1627	; 0x65b
   12b96:	f7fd f9b9 	bl	ff0c <radio_crc_configure>
}
   12b9a:	b002      	add	sp, #8
   12b9c:	bd70      	pop	{r4, r5, r6, pc}
   12b9e:	bf00      	nop
   12ba0:	8e89bed6 	.word	0x8e89bed6
   12ba4:	00555555 	.word	0x00555555

00012ba8 <connection_configure>:
{
   12ba8:	b510      	push	{r4, lr}
   12baa:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   12bac:	f7ff ffcc 	bl	12b48 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   12bb0:	f104 0010 	add.w	r0, r4, #16
   12bb4:	f7fd f906 	bl	fdc4 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   12bb8:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   12bba:	7d63      	ldrb	r3, [r4, #21]
   12bbc:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   12bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   12bc2:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12bc4:	4319      	orrs	r1, r3
   12bc6:	f240 605b 	movw	r0, #1627	; 0x65b
   12bca:	f7fd f99f 	bl	ff0c <radio_crc_configure>
   12bce:	bd10      	pop	{r4, pc}

00012bd0 <rx_packet_set>:
{
   12bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bd2:	4605      	mov	r5, r0
   12bd4:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   12bd6:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   12bd8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   12bdc:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   12be0:	2100      	movs	r1, #0
   12be2:	4620      	mov	r0, r4
   12be4:	f7fd f8c2 	bl	fd6c <radio_phy_set>
	if (conn->enc_rx) {
   12be8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12bec:	f013 0f10 	tst.w	r3, #16
   12bf0:	d10a      	bne.n	12c08 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12bf2:	0062      	lsls	r2, r4, #1
   12bf4:	f042 0201 	orr.w	r2, r2, #1
   12bf8:	b2f1      	uxtb	r1, r6
   12bfa:	2008      	movs	r0, #8
   12bfc:	f7fd f8fa 	bl	fdf4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12c00:	4638      	mov	r0, r7
   12c02:	f7fd f927 	bl	fe54 <radio_pkt_rx_set>
   12c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12c08:	0062      	lsls	r2, r4, #1
   12c0a:	1d31      	adds	r1, r6, #4
   12c0c:	f042 0201 	orr.w	r2, r2, #1
   12c10:	b2c9      	uxtb	r1, r1
   12c12:	2008      	movs	r0, #8
   12c14:	f7fd f8ee 	bl	fdf4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   12c18:	463a      	mov	r2, r7
   12c1a:	4621      	mov	r1, r4
   12c1c:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   12c20:	f7fd fb14 	bl	1024c <radio_ccm_rx_pkt_set>
   12c24:	f7fd f916 	bl	fe54 <radio_pkt_rx_set>
   12c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012c2a <packet_rx_callback>:
{
   12c2a:	b508      	push	{r3, lr}
	radio_event_callback();
   12c2c:	f006 ffec 	bl	19c08 <radio_event_callback>
   12c30:	bd08      	pop	{r3, pc}
	...

00012c34 <pdu_node_tx_release>:
{
   12c34:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   12c36:	4a14      	ldr	r2, [pc, #80]	; (12c88 <pdu_node_tx_release+0x54>)
   12c38:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   12c3c:	3301      	adds	r3, #1
   12c3e:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   12c40:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   12c44:	4293      	cmp	r3, r2
   12c46:	d017      	beq.n	12c78 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   12c48:	4a0f      	ldr	r2, [pc, #60]	; (12c88 <pdu_node_tx_release+0x54>)
   12c4a:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   12c4e:	4293      	cmp	r3, r2
   12c50:	d014      	beq.n	12c7c <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   12c52:	4a0d      	ldr	r2, [pc, #52]	; (12c88 <pdu_node_tx_release+0x54>)
   12c54:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   12c58:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   12c5c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   12c60:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   12c64:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   12c68:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12c6c:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   12c6e:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   12c72:	f7ff ffda 	bl	12c2a <packet_rx_callback>
   12c76:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   12c78:	2300      	movs	r3, #0
   12c7a:	e7e5      	b.n	12c48 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   12c7c:	4040      	eors	r0, r0
   12c7e:	f380 8811 	msr	BASEPRI, r0
   12c82:	f04f 0004 	mov.w	r0, #4
   12c86:	df02      	svc	2
   12c88:	2000144c 	.word	0x2000144c

00012c8c <packet_tx_enqueue>:
{
   12c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12c8e:	e016      	b.n	12cbe <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   12c90:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   12c94:	2b00      	cmp	r3, #0
   12c96:	d040      	beq.n	12d1a <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   12c98:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   12c9c:	b103      	cbz	r3, 12ca0 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   12c9e:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   12ca0:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   12ca4:	4a24      	ldr	r2, [pc, #144]	; (12d38 <packet_tx_enqueue+0xac>)
   12ca6:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   12caa:	3301      	adds	r3, #1
   12cac:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   12cae:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   12cb2:	4293      	cmp	r3, r2
   12cb4:	d03c      	beq.n	12d30 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   12cb6:	4a20      	ldr	r2, [pc, #128]	; (12d38 <packet_tx_enqueue+0xac>)
   12cb8:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12cbc:	4638      	mov	r0, r7
   12cbe:	1e47      	subs	r7, r0, #1
   12cc0:	b2ff      	uxtb	r7, r7
   12cc2:	2800      	cmp	r0, #0
   12cc4:	d036      	beq.n	12d34 <packet_tx_enqueue+0xa8>
   12cc6:	4a1c      	ldr	r2, [pc, #112]	; (12d38 <packet_tx_enqueue+0xac>)
   12cc8:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   12ccc:	b2db      	uxtb	r3, r3
   12cce:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   12cd2:	4293      	cmp	r3, r2
   12cd4:	d02e      	beq.n	12d34 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12cd6:	4b18      	ldr	r3, [pc, #96]	; (12d38 <packet_tx_enqueue+0xac>)
   12cd8:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   12cdc:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   12ce0:	b2e4      	uxtb	r4, r4
   12ce2:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   12ce6:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   12ce8:	2200      	movs	r2, #0
   12cea:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12cec:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   12cf0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12cf4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12cf8:	f7fc fef8 	bl	faec <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   12cfc:	8c02      	ldrh	r2, [r0, #32]
   12cfe:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   12d02:	429a      	cmp	r2, r3
   12d04:	d0c4      	beq.n	12c90 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12d06:	792b      	ldrb	r3, [r5, #4]
   12d08:	f36f 0301 	bfc	r3, #0, #2
   12d0c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   12d0e:	4629      	mov	r1, r5
   12d10:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   12d14:	f7ff ff8e 	bl	12c34 <pdu_node_tx_release>
   12d18:	e7c4      	b.n	12ca4 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   12d1a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   12d1e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12d22:	2b00      	cmp	r3, #0
   12d24:	d1b8      	bne.n	12c98 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   12d26:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   12d2a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   12d2e:	e7b3      	b.n	12c98 <packet_tx_enqueue+0xc>
			first = 0;
   12d30:	2300      	movs	r3, #0
   12d32:	e7c0      	b.n	12cb6 <packet_tx_enqueue+0x2a>
   12d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d36:	bf00      	nop
   12d38:	2000144c 	.word	0x2000144c

00012d3c <connection_release>:
{
   12d3c:	b510      	push	{r4, lr}
   12d3e:	b082      	sub	sp, #8
   12d40:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12d42:	2201      	movs	r2, #1
   12d44:	4611      	mov	r1, r2
   12d46:	2000      	movs	r0, #0
   12d48:	f7fc fd14 	bl	f774 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   12d4c:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d4e:	3207      	adds	r2, #7
	ticker_status =
   12d50:	f242 2345 	movw	r3, #8773	; 0x2245
   12d54:	9300      	str	r3, [sp, #0]
   12d56:	4b46      	ldr	r3, [pc, #280]	; (12e70 <connection_release+0x134>)
   12d58:	b2d2      	uxtb	r2, r2
   12d5a:	2100      	movs	r1, #0
   12d5c:	4608      	mov	r0, r1
   12d5e:	f7fe fbf3 	bl	11548 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12d62:	b108      	cbz	r0, 12d68 <connection_release+0x2c>
   12d64:	2802      	cmp	r0, #2
   12d66:	d12a      	bne.n	12dbe <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   12d68:	4b42      	ldr	r3, [pc, #264]	; (12e74 <connection_release+0x138>)
   12d6a:	7c1b      	ldrb	r3, [r3, #16]
   12d6c:	2b05      	cmp	r3, #5
   12d6e:	d13e      	bne.n	12dee <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12d70:	4b40      	ldr	r3, [pc, #256]	; (12e74 <connection_release+0x138>)
   12d72:	7b1a      	ldrb	r2, [r3, #12]
   12d74:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   12d76:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12d78:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   12d7a:	429a      	cmp	r2, r3
   12d7c:	d137      	bne.n	12dee <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   12d7e:	2000      	movs	r0, #0
   12d80:	4b3c      	ldr	r3, [pc, #240]	; (12e74 <connection_release+0x138>)
   12d82:	7318      	strb	r0, [r3, #12]
		ticker_status =
   12d84:	f242 2356 	movw	r3, #8790	; 0x2256
   12d88:	9300      	str	r3, [sp, #0]
   12d8a:	4b39      	ldr	r3, [pc, #228]	; (12e70 <connection_release+0x134>)
   12d8c:	2201      	movs	r2, #1
   12d8e:	4601      	mov	r1, r0
   12d90:	f7fe fbda 	bl	11548 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12d94:	b108      	cbz	r0, 12d9a <connection_release+0x5e>
   12d96:	2802      	cmp	r0, #2
   12d98:	d117      	bne.n	12dca <connection_release+0x8e>
		ticker_status =
   12d9a:	f242 235d 	movw	r3, #8797	; 0x225d
   12d9e:	9300      	str	r3, [sp, #0]
   12da0:	4b33      	ldr	r3, [pc, #204]	; (12e70 <connection_release+0x134>)
   12da2:	2200      	movs	r2, #0
   12da4:	4611      	mov	r1, r2
   12da6:	4610      	mov	r0, r2
   12da8:	f7fe fbce 	bl	11548 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12dac:	b1f8      	cbz	r0, 12dee <connection_release+0xb2>
   12dae:	2802      	cmp	r0, #2
   12db0:	d01d      	beq.n	12dee <connection_release+0xb2>
   12db2:	4040      	eors	r0, r0
   12db4:	f380 8811 	msr	BASEPRI, r0
   12db8:	f04f 0004 	mov.w	r0, #4
   12dbc:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12dbe:	4040      	eors	r0, r0
   12dc0:	f380 8811 	msr	BASEPRI, r0
   12dc4:	f04f 0004 	mov.w	r0, #4
   12dc8:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12dca:	4040      	eors	r0, r0
   12dcc:	f380 8811 	msr	BASEPRI, r0
   12dd0:	f04f 0004 	mov.w	r0, #4
   12dd4:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12dd6:	790b      	ldrb	r3, [r1, #4]
   12dd8:	f36f 0301 	bfc	r3, #0, #2
   12ddc:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12dde:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12de2:	681b      	ldr	r3, [r3, #0]
   12de4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12de8:	8c20      	ldrh	r0, [r4, #32]
   12dea:	f7ff ff23 	bl	12c34 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   12dee:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12df2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12df6:	4299      	cmp	r1, r3
   12df8:	d00c      	beq.n	12e14 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12dfa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   12dfe:	4299      	cmp	r1, r3
   12e00:	d1e9      	bne.n	12dd6 <connection_release+0x9a>
   12e02:	e007      	b.n	12e14 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12e04:	6803      	ldr	r3, [r0, #0]
   12e06:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   12e0a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   12e0e:	491a      	ldr	r1, [pc, #104]	; (12e78 <connection_release+0x13c>)
   12e10:	f7fc fe4b 	bl	faaa <mem_release>
	while ((conn->pkt_tx_head) &&
   12e14:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12e18:	b118      	cbz	r0, 12e22 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12e1a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   12e1e:	4298      	cmp	r0, r3
   12e20:	d1f0      	bne.n	12e04 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   12e22:	2300      	movs	r3, #0
   12e24:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   12e28:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   12e2c:	e00d      	b.n	12e4a <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12e2e:	790b      	ldrb	r3, [r1, #4]
   12e30:	f36f 0301 	bfc	r3, #0, #2
   12e34:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12e36:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12e3a:	681b      	ldr	r3, [r3, #0]
   12e3c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   12e40:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   12e44:	8c20      	ldrh	r0, [r4, #32]
   12e46:	f7ff fef5 	bl	12c34 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   12e4a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12e4e:	2900      	cmp	r1, #0
   12e50:	d1ed      	bne.n	12e2e <connection_release+0xf2>
	conn->handle = 0xffff;
   12e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12e56:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   12e58:	4b06      	ldr	r3, [pc, #24]	; (12e74 <connection_release+0x138>)
   12e5a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12e5e:	429c      	cmp	r4, r3
   12e60:	d001      	beq.n	12e66 <connection_release+0x12a>
}
   12e62:	b002      	add	sp, #8
   12e64:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   12e66:	2200      	movs	r2, #0
   12e68:	4b02      	ldr	r3, [pc, #8]	; (12e74 <connection_release+0x138>)
   12e6a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   12e6e:	e7f8      	b.n	12e62 <connection_release+0x126>
   12e70:	00012165 	.word	0x00012165
   12e74:	2000144c 	.word	0x2000144c
   12e78:	200015a4 	.word	0x200015a4

00012e7c <chan_map_update>:
{
   12e7c:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12e7e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   12e82:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   12e84:	1a9b      	subs	r3, r3, r2
   12e86:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12e8c:	da22      	bge.n	12ed4 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12e8e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   12e92:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12e96:	429a      	cmp	r2, r3
   12e98:	d116      	bne.n	12ec8 <chan_map_update+0x4c>
   12e9a:	460d      	mov	r5, r1
   12e9c:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   12e9e:	2205      	movs	r2, #5
   12ea0:	3104      	adds	r1, #4
   12ea2:	3079      	adds	r0, #121	; 0x79
   12ea4:	f7ed fa0c 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   12ea8:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   12eac:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   12eb0:	2000      	movs	r0, #0
   12eb2:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   12eb6:	2302      	movs	r3, #2
   12eb8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   12ebc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   12ec0:	3b01      	subs	r3, #1
   12ec2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   12ec6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12ec8:	4040      	eors	r0, r0
   12eca:	f380 8811 	msr	BASEPRI, r0
   12ece:	f04f 0004 	mov.w	r0, #4
   12ed2:	df02      	svc	2
		return 1;
   12ed4:	2001      	movs	r0, #1
}
   12ed6:	bd38      	pop	{r3, r4, r5, pc}

00012ed8 <feature_rsp_send>:
{
   12ed8:	b538      	push	{r3, r4, r5, lr}
   12eda:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12edc:	4812      	ldr	r0, [pc, #72]	; (12f28 <feature_rsp_send+0x50>)
   12ede:	f7fc fdc8 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   12ee2:	b1d8      	cbz	r0, 12f1c <feature_rsp_send+0x44>
   12ee4:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ee6:	7903      	ldrb	r3, [r0, #4]
   12ee8:	f043 0303 	orr.w	r3, r3, #3
   12eec:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   12eee:	2309      	movs	r3, #9
   12ef0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12ef2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   12ef4:	2208      	movs	r2, #8
   12ef6:	2100      	movs	r1, #0
   12ef8:	4410      	add	r0, r2
   12efa:	f017 fda1 	bl	2aa40 <memset>
		conn->llcp_features & 0xFF;
   12efe:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   12f02:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   12f04:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   12f08:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   12f0a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   12f0c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   12f10:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   12f12:	4621      	mov	r1, r4
   12f14:	4628      	mov	r0, r5
   12f16:	f7ff f87c 	bl	12012 <ctrl_tx_sec_enqueue>
   12f1a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   12f1c:	4040      	eors	r0, r0
   12f1e:	f380 8811 	msr	BASEPRI, r0
   12f22:	f04f 0004 	mov.w	r0, #4
   12f26:	df02      	svc	2
   12f28:	200015a4 	.word	0x200015a4

00012f2c <empty_tx_enqueue>:
{
   12f2c:	b510      	push	{r4, lr}
   12f2e:	4604      	mov	r4, r0
	conn->empty = 1;
   12f30:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   12f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12f38:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   12f3c:	f7fc fffc 	bl	ff38 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f40:	7803      	ldrb	r3, [r0, #0]
   12f42:	2201      	movs	r2, #1
   12f44:	f362 0301 	bfi	r3, r2, #0, #2
   12f48:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   12f4a:	2300      	movs	r3, #0
   12f4c:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   12f4e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12f52:	b123      	cbz	r3, 12f5e <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   12f54:	7803      	ldrb	r3, [r0, #0]
   12f56:	f043 0310 	orr.w	r3, r3, #16
   12f5a:	7003      	strb	r3, [r0, #0]
   12f5c:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   12f5e:	7803      	ldrb	r3, [r0, #0]
   12f60:	f36f 1304 	bfc	r3, #4, #1
   12f64:	7003      	strb	r3, [r0, #0]
}
   12f66:	bd10      	pop	{r4, pc}

00012f68 <prepare_pdu_data_tx>:
{
   12f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f6a:	460c      	mov	r4, r1
	    conn->empty ||
   12f6c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   12f70:	f012 0f80 	tst.w	r2, #128	; 0x80
   12f74:	d109      	bne.n	12f8a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   12f76:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   12f7a:	b133      	cbz	r3, 12f8a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   12f7c:	f012 0f08 	tst.w	r2, #8
   12f80:	d00e      	beq.n	12fa0 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   12f82:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   12f86:	4293      	cmp	r3, r2
   12f88:	d00a      	beq.n	12fa0 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   12f8a:	f7ff ffcf 	bl	12f2c <empty_tx_enqueue>
   12f8e:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   12f90:	7813      	ldrb	r3, [r2, #0]
   12f92:	f36f 1347 	bfc	r3, #5, #3
   12f96:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   12f98:	2300      	movs	r3, #0
   12f9a:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   12f9c:	6022      	str	r2, [r4, #0]
   12f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12fa0:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   12fa2:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12fa6:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   12fa8:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   12fac:	b911      	cbnz	r1, 12fb4 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   12fae:	7851      	ldrb	r1, [r2, #1]
   12fb0:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   12fb4:	b126      	cbz	r6, 12fc0 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12fb6:	5d99      	ldrb	r1, [r3, r6]
   12fb8:	2501      	movs	r5, #1
   12fba:	f365 0101 	bfi	r1, r5, #0, #2
   12fbe:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12fc0:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   12fc4:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12fc8:	1a6d      	subs	r5, r5, r1
   12fca:	b2ed      	uxtb	r5, r5
   12fcc:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   12fce:	5d99      	ldrb	r1, [r3, r6]
   12fd0:	f36f 1104 	bfc	r1, #4, #1
   12fd4:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   12fd6:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   12fda:	f001 0107 	and.w	r1, r1, #7
   12fde:	2902      	cmp	r1, #2
   12fe0:	d02d      	beq.n	1303e <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   12fe2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12fe4:	08c9      	lsrs	r1, r1, #3
   12fe6:	390a      	subs	r1, #10
   12fe8:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   12fea:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   12fee:	f017 0f20 	tst.w	r7, #32
   12ff2:	d001      	beq.n	12ff8 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   12ff4:	3904      	subs	r1, #4
   12ff6:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   12ff8:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   12ffa:	42b9      	cmp	r1, r7
   12ffc:	d800      	bhi.n	13000 <prepare_pdu_data_tx+0x98>
   12ffe:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   13000:	b2ad      	uxth	r5, r5
   13002:	42af      	cmp	r7, r5
   13004:	d204      	bcs.n	13010 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   13006:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   13008:	5d99      	ldrb	r1, [r3, r6]
   1300a:	f041 0110 	orr.w	r1, r1, #16
   1300e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   13010:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   13014:	6809      	ldr	r1, [r1, #0]
   13016:	b119      	cbz	r1, 13020 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   13018:	5d99      	ldrb	r1, [r3, r6]
   1301a:	f041 0110 	orr.w	r1, r1, #16
   1301e:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   13020:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   13024:	2b00      	cmp	r3, #0
   13026:	d1b3      	bne.n	12f90 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   13028:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1302c:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   13030:	428b      	cmp	r3, r1
   13032:	d0ad      	beq.n	12f90 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   13034:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   13038:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   1303c:	e7a8      	b.n	12f90 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   1303e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   13040:	0889      	lsrs	r1, r1, #2
   13042:	390b      	subs	r1, #11
   13044:	b289      	uxth	r1, r1
			break;
   13046:	e7d0      	b.n	12fea <prepare_pdu_data_tx+0x82>

00013048 <version_ind_send>:
{
   13048:	b510      	push	{r4, lr}
   1304a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1304c:	4810      	ldr	r0, [pc, #64]	; (13090 <version_ind_send+0x48>)
   1304e:	f7fc fd10 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   13052:	b1b8      	cbz	r0, 13084 <version_ind_send+0x3c>
   13054:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13056:	7903      	ldrb	r3, [r0, #4]
   13058:	f043 0303 	orr.w	r3, r3, #3
   1305c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1305e:	2306      	movs	r3, #6
   13060:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13062:	230c      	movs	r3, #12
   13064:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   13066:	2309      	movs	r3, #9
   13068:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   1306a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1306e:	7243      	strb	r3, [r0, #9]
   13070:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   13072:	72c3      	strb	r3, [r0, #11]
   13074:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   13076:	4620      	mov	r0, r4
   13078:	f7fe ffcb 	bl	12012 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   1307c:	4620      	mov	r0, r4
   1307e:	f7ff ff55 	bl	12f2c <empty_tx_enqueue>
   13082:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   13084:	4040      	eors	r0, r0
   13086:	f380 8811 	msr	BASEPRI, r0
   1308a:	f04f 0004 	mov.w	r0, #4
   1308e:	df02      	svc	2
   13090:	200015a4 	.word	0x200015a4

00013094 <tx_packet_set>:
{
   13094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13096:	4605      	mov	r5, r0
   13098:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   1309a:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   1309c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   130a0:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   130a4:	09c9      	lsrs	r1, r1, #7
   130a6:	4620      	mov	r0, r4
   130a8:	f7fc fe60 	bl	fd6c <radio_phy_set>
	if (conn->enc_tx) {
   130ac:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   130b0:	f013 0f20 	tst.w	r3, #32
   130b4:	d10a      	bne.n	130cc <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   130b6:	0062      	lsls	r2, r4, #1
   130b8:	f042 0201 	orr.w	r2, r2, #1
   130bc:	b2f1      	uxtb	r1, r6
   130be:	2008      	movs	r0, #8
   130c0:	f7fc fe98 	bl	fdf4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   130c4:	4638      	mov	r0, r7
   130c6:	f7fc fecb 	bl	fe60 <radio_pkt_tx_set>
   130ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   130cc:	0062      	lsls	r2, r4, #1
   130ce:	1d31      	adds	r1, r6, #4
   130d0:	f042 0201 	orr.w	r2, r2, #1
   130d4:	b2c9      	uxtb	r1, r1
   130d6:	2008      	movs	r0, #8
   130d8:	f7fc fe8c 	bl	fdf4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   130dc:	4639      	mov	r1, r7
   130de:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   130e2:	f7fd f8f3 	bl	102cc <radio_ccm_tx_pkt_set>
   130e6:	f7fc febb 	bl	fe60 <radio_pkt_tx_set>
   130ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000130ec <chan_set>:
{
   130ec:	b510      	push	{r4, lr}
   130ee:	4604      	mov	r4, r0
	switch (chan) {
   130f0:	2826      	cmp	r0, #38	; 0x26
   130f2:	d013      	beq.n	1311c <chan_set+0x30>
   130f4:	2827      	cmp	r0, #39	; 0x27
   130f6:	d015      	beq.n	13124 <chan_set+0x38>
   130f8:	2825      	cmp	r0, #37	; 0x25
   130fa:	d008      	beq.n	1310e <chan_set+0x22>
		if (chan < 11) {
   130fc:	280a      	cmp	r0, #10
   130fe:	d915      	bls.n	1312c <chan_set+0x40>
		} else if (chan < 40) {
   13100:	2827      	cmp	r0, #39	; 0x27
   13102:	d818      	bhi.n	13136 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   13104:	3003      	adds	r0, #3
   13106:	0040      	lsls	r0, r0, #1
   13108:	f7fc fe44 	bl	fd94 <radio_freq_chan_set>
   1310c:	e002      	b.n	13114 <chan_set+0x28>
		radio_freq_chan_set(2);
   1310e:	2002      	movs	r0, #2
   13110:	f7fc fe40 	bl	fd94 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   13114:	4620      	mov	r0, r4
   13116:	f7fc fe43 	bl	fda0 <radio_whiten_iv_set>
   1311a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   1311c:	201a      	movs	r0, #26
   1311e:	f7fc fe39 	bl	fd94 <radio_freq_chan_set>
		break;
   13122:	e7f7      	b.n	13114 <chan_set+0x28>
		radio_freq_chan_set(80);
   13124:	2050      	movs	r0, #80	; 0x50
   13126:	f7fc fe35 	bl	fd94 <radio_freq_chan_set>
		break;
   1312a:	e7f3      	b.n	13114 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   1312c:	3002      	adds	r0, #2
   1312e:	0040      	lsls	r0, r0, #1
   13130:	f7fc fe30 	bl	fd94 <radio_freq_chan_set>
   13134:	e7ee      	b.n	13114 <chan_set+0x28>
			LL_ASSERT(0);
   13136:	4040      	eors	r0, r0
   13138:	f380 8811 	msr	BASEPRI, r0
   1313c:	f04f 0004 	mov.w	r0, #4
   13140:	df02      	svc	2
	...

00013144 <adv_setup>:
{
   13144:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   13146:	4a39      	ldr	r2, [pc, #228]	; (1322c <adv_setup+0xe8>)
   13148:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   1314c:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   13150:	4293      	cmp	r3, r2
   13152:	d037      	beq.n	131c4 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   13154:	3301      	adds	r3, #1
   13156:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   13158:	2b02      	cmp	r3, #2
   1315a:	d031      	beq.n	131c0 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   1315c:	4a33      	ldr	r2, [pc, #204]	; (1322c <adv_setup+0xe8>)
   1315e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   13162:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   13164:	4a31      	ldr	r2, [pc, #196]	; (1322c <adv_setup+0xe8>)
   13166:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   1316a:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   1316e:	4293      	cmp	r3, r2
   13170:	d007      	beq.n	13182 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   13172:	3301      	adds	r3, #1
   13174:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   13176:	2b02      	cmp	r3, #2
   13178:	d026      	beq.n	131c8 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   1317a:	4a2c      	ldr	r2, [pc, #176]	; (1322c <adv_setup+0xe8>)
   1317c:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   13180:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   13182:	4c2a      	ldr	r4, [pc, #168]	; (1322c <adv_setup+0xe8>)
   13184:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   13188:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1318c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   13190:	3320      	adds	r3, #32
   13192:	441c      	add	r4, r3
   13194:	1de5      	adds	r5, r4, #7
	if (upd) {
   13196:	b9c9      	cbnz	r1, 131cc <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   13198:	4628      	mov	r0, r5
   1319a:	f7fc fe61 	bl	fe60 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1319e:	79e3      	ldrb	r3, [r4, #7]
   131a0:	f003 030f 	and.w	r3, r3, #15
   131a4:	2b02      	cmp	r3, #2
   131a6:	d020      	beq.n	131ea <adv_setup+0xa6>
   131a8:	2b07      	cmp	r3, #7
   131aa:	d01e      	beq.n	131ea <adv_setup+0xa6>
		_radio.state = STATE_TX;
   131ac:	2202      	movs	r2, #2
   131ae:	4b1f      	ldr	r3, [pc, #124]	; (1322c <adv_setup+0xe8>)
   131b0:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   131b2:	2096      	movs	r0, #150	; 0x96
   131b4:	f7fc ff7a 	bl	100ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   131b8:	2000      	movs	r0, #0
   131ba:	f7fc fec5 	bl	ff48 <radio_switch_complete_and_rx>
   131be:	e019      	b.n	131f4 <adv_setup+0xb0>
			first = 0;
   131c0:	2300      	movs	r3, #0
   131c2:	e7cb      	b.n	1315c <adv_setup+0x18>
	u8_t upd = 0;
   131c4:	2100      	movs	r1, #0
   131c6:	e7cd      	b.n	13164 <adv_setup+0x20>
			first = 0;
   131c8:	2300      	movs	r3, #0
   131ca:	e7d6      	b.n	1317a <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   131cc:	4817      	ldr	r0, [pc, #92]	; (1322c <adv_setup+0xe8>)
   131ce:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   131d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   131d6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   131da:	3370      	adds	r3, #112	; 0x70
   131dc:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   131de:	2206      	movs	r2, #6
   131e0:	1ca9      	adds	r1, r5, #2
   131e2:	3009      	adds	r0, #9
   131e4:	f7ed f86c 	bl	2c0 <memcpy>
   131e8:	e7d6      	b.n	13198 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   131ea:	2203      	movs	r2, #3
   131ec:	4b0f      	ldr	r3, [pc, #60]	; (1322c <adv_setup+0xe8>)
   131ee:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   131f0:	f7fc feba 	bl	ff68 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   131f4:	4b0d      	ldr	r3, [pc, #52]	; (1322c <adv_setup+0xe8>)
   131f6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   131fa:	f3c2 0142 	ubfx	r1, r2, #1, #3
   131fe:	b2ca      	uxtb	r2, r1
   13200:	4613      	mov	r3, r2
	chan = 0;
   13202:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   13204:	e002      	b.n	1320c <adv_setup+0xc8>
		chan++;
   13206:	3001      	adds	r0, #1
   13208:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   1320a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   1320c:	f013 0f01 	tst.w	r3, #1
   13210:	d0f9      	beq.n	13206 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   13212:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   13214:	4b05      	ldr	r3, [pc, #20]	; (1322c <adv_setup+0xe8>)
   13216:	400a      	ands	r2, r1
   13218:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1321c:	f362 0143 	bfi	r1, r2, #1, #3
   13220:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   13224:	3025      	adds	r0, #37	; 0x25
   13226:	f7ff ff61 	bl	130ec <chan_set>
   1322a:	bd38      	pop	{r3, r4, r5, pc}
   1322c:	2000144c 	.word	0x2000144c

00013230 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   13230:	b158      	cbz	r0, 1324a <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   13232:	4b6c      	ldr	r3, [pc, #432]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   13234:	7b9b      	ldrb	r3, [r3, #14]
   13236:	b2db      	uxtb	r3, r3
   13238:	2b05      	cmp	r3, #5
   1323a:	d100      	bne.n	1323e <ticker_stop_adv_stop+0xe>
   1323c:	4770      	bx	lr
   1323e:	4040      	eors	r0, r0
   13240:	f380 8811 	msr	BASEPRI, r0
   13244:	f04f 0004 	mov.w	r0, #4
   13248:	df02      	svc	2
{
   1324a:	b500      	push	{lr}
   1324c:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1324e:	4b65      	ldr	r3, [pc, #404]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   13250:	7b1b      	ldrb	r3, [r3, #12]
   13252:	b2db      	uxtb	r3, r3
   13254:	2b05      	cmp	r3, #5
   13256:	d010      	beq.n	1327a <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   13258:	4b62      	ldr	r3, [pc, #392]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   1325a:	7b5b      	ldrb	r3, [r3, #13]
   1325c:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1325e:	2b05      	cmp	r3, #5
   13260:	d00b      	beq.n	1327a <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13262:	4b61      	ldr	r3, [pc, #388]	; (133e8 <ticker_stop_adv_stop+0x1b8>)
   13264:	2200      	movs	r2, #0
   13266:	4611      	mov	r1, r2
   13268:	2001      	movs	r0, #1
   1326a:	f7fc fac1 	bl	f7f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1326e:	2800      	cmp	r0, #0
   13270:	f040 80b1 	bne.w	133d6 <ticker_stop_adv_stop+0x1a6>
}
   13274:	b005      	add	sp, #20
   13276:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1327a:	ab04      	add	r3, sp, #16
   1327c:	2202      	movs	r2, #2
   1327e:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13282:	9300      	str	r3, [sp, #0]
   13284:	4b59      	ldr	r3, [pc, #356]	; (133ec <ticker_stop_adv_stop+0x1bc>)
   13286:	2200      	movs	r2, #0
   13288:	2101      	movs	r1, #1
   1328a:	4610      	mov	r0, r2
   1328c:	f7fe f95c 	bl	11548 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   13290:	2802      	cmp	r0, #2
   13292:	d02c      	beq.n	132ee <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   13294:	9b02      	ldr	r3, [sp, #8]
   13296:	2b00      	cmp	r3, #0
   13298:	d17e      	bne.n	13398 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1329a:	2302      	movs	r3, #2
   1329c:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   1329e:	4b51      	ldr	r3, [pc, #324]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   132a0:	7b1b      	ldrb	r3, [r3, #12]
   132a2:	2b00      	cmp	r3, #0
   132a4:	d031      	beq.n	1330a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   132a6:	2000      	movs	r0, #0
   132a8:	4b4e      	ldr	r3, [pc, #312]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   132aa:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   132ac:	ab03      	add	r3, sp, #12
   132ae:	9300      	str	r3, [sp, #0]
   132b0:	4b4e      	ldr	r3, [pc, #312]	; (133ec <ticker_stop_adv_stop+0x1bc>)
   132b2:	2201      	movs	r2, #1
   132b4:	4611      	mov	r1, r2
   132b6:	f7fe f947 	bl	11548 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   132ba:	2802      	cmp	r0, #2
   132bc:	d02b      	beq.n	13316 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   132be:	9b03      	ldr	r3, [sp, #12]
   132c0:	2b00      	cmp	r3, #0
   132c2:	d144      	bne.n	1334e <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   132c4:	4b47      	ldr	r3, [pc, #284]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   132c6:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   132c8:	695b      	ldr	r3, [r3, #20]
   132ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   132ce:	429a      	cmp	r2, r3
   132d0:	d92f      	bls.n	13332 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   132d2:	4b47      	ldr	r3, [pc, #284]	; (133f0 <ticker_stop_adv_stop+0x1c0>)
   132d4:	2200      	movs	r2, #0
   132d6:	4611      	mov	r1, r2
   132d8:	2001      	movs	r0, #1
   132da:	f7fc fa89 	bl	f7f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   132de:	2800      	cmp	r0, #0
   132e0:	d0bf      	beq.n	13262 <ticker_stop_adv_stop+0x32>
   132e2:	4040      	eors	r0, r0
   132e4:	f380 8811 	msr	BASEPRI, r0
   132e8:	f04f 0004 	mov.w	r0, #4
   132ec:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   132ee:	2201      	movs	r2, #1
   132f0:	4611      	mov	r1, r2
   132f2:	4610      	mov	r0, r2
   132f4:	f7fc fa3e 	bl	f774 <mayfly_enable>
   132f8:	e003      	b.n	13302 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   132fa:	2101      	movs	r1, #1
   132fc:	2000      	movs	r0, #0
   132fe:	f7fe f9df 	bl	116c0 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   13302:	9b02      	ldr	r3, [sp, #8]
   13304:	2b02      	cmp	r3, #2
   13306:	d0f8      	beq.n	132fa <ticker_stop_adv_stop+0xca>
   13308:	e7c4      	b.n	13294 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   1330a:	4040      	eors	r0, r0
   1330c:	f380 8811 	msr	BASEPRI, r0
   13310:	f04f 0004 	mov.w	r0, #4
   13314:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13316:	2201      	movs	r2, #1
   13318:	4611      	mov	r1, r2
   1331a:	4610      	mov	r0, r2
   1331c:	f7fc fa2a 	bl	f774 <mayfly_enable>
   13320:	e003      	b.n	1332a <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13322:	2101      	movs	r1, #1
   13324:	2000      	movs	r0, #0
   13326:	f7fe f9cb 	bl	116c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1332a:	9b03      	ldr	r3, [sp, #12]
   1332c:	2b02      	cmp	r3, #2
   1332e:	d0f8      	beq.n	13322 <ticker_stop_adv_stop+0xf2>
   13330:	e7c5      	b.n	132be <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   13332:	4b30      	ldr	r3, [pc, #192]	; (133f4 <ticker_stop_adv_stop+0x1c4>)
   13334:	2200      	movs	r2, #0
   13336:	4611      	mov	r1, r2
   13338:	2001      	movs	r0, #1
   1333a:	f7fc fa59 	bl	f7f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   1333e:	2800      	cmp	r0, #0
   13340:	d08f      	beq.n	13262 <ticker_stop_adv_stop+0x32>
   13342:	4040      	eors	r0, r0
   13344:	f380 8811 	msr	BASEPRI, r0
   13348:	f04f 0004 	mov.w	r0, #4
   1334c:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1334e:	9b03      	ldr	r3, [sp, #12]
   13350:	2b01      	cmp	r3, #1
   13352:	d11b      	bne.n	1338c <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13354:	4b26      	ldr	r3, [pc, #152]	; (133f0 <ticker_stop_adv_stop+0x1c0>)
   13356:	2200      	movs	r2, #0
   13358:	4611      	mov	r1, r2
   1335a:	2001      	movs	r0, #1
   1335c:	f7fc fa48 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   13360:	b970      	cbnz	r0, 13380 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13362:	4b24      	ldr	r3, [pc, #144]	; (133f4 <ticker_stop_adv_stop+0x1c4>)
   13364:	2200      	movs	r2, #0
   13366:	4611      	mov	r1, r2
   13368:	2001      	movs	r0, #1
   1336a:	f7fc fa41 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1336e:	2800      	cmp	r0, #0
   13370:	f43f af77 	beq.w	13262 <ticker_stop_adv_stop+0x32>
   13374:	4040      	eors	r0, r0
   13376:	f380 8811 	msr	BASEPRI, r0
   1337a:	f04f 0004 	mov.w	r0, #4
   1337e:	df02      	svc	2
			LL_ASSERT(!retval);
   13380:	4040      	eors	r0, r0
   13382:	f380 8811 	msr	BASEPRI, r0
   13386:	f04f 0004 	mov.w	r0, #4
   1338a:	df02      	svc	2
			LL_ASSERT(0);
   1338c:	4040      	eors	r0, r0
   1338e:	f380 8811 	msr	BASEPRI, r0
   13392:	f04f 0004 	mov.w	r0, #4
   13396:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   13398:	9b02      	ldr	r3, [sp, #8]
   1339a:	2b01      	cmp	r3, #1
   1339c:	d115      	bne.n	133ca <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   1339e:	4b11      	ldr	r3, [pc, #68]	; (133e4 <ticker_stop_adv_stop+0x1b4>)
   133a0:	7bdb      	ldrb	r3, [r3, #15]
   133a2:	2b00      	cmp	r3, #0
   133a4:	f43f af5d 	beq.w	13262 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   133a8:	4b13      	ldr	r3, [pc, #76]	; (133f8 <ticker_stop_adv_stop+0x1c8>)
   133aa:	2204      	movs	r2, #4
   133ac:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   133ae:	2200      	movs	r2, #0
   133b0:	4611      	mov	r1, r2
   133b2:	2001      	movs	r0, #1
   133b4:	f7fc fa1c 	bl	f7f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   133b8:	2800      	cmp	r0, #0
   133ba:	f43f af52 	beq.w	13262 <ticker_stop_adv_stop+0x32>
   133be:	4040      	eors	r0, r0
   133c0:	f380 8811 	msr	BASEPRI, r0
   133c4:	f04f 0004 	mov.w	r0, #4
   133c8:	df02      	svc	2
		LL_ASSERT(0);
   133ca:	4040      	eors	r0, r0
   133cc:	f380 8811 	msr	BASEPRI, r0
   133d0:	f04f 0004 	mov.w	r0, #4
   133d4:	df02      	svc	2
	LL_ASSERT(!retval);
   133d6:	4040      	eors	r0, r0
   133d8:	f380 8811 	msr	BASEPRI, r0
   133dc:	f04f 0004 	mov.w	r0, #4
   133e0:	df02      	svc	2
   133e2:	bf00      	nop
   133e4:	2000144c 	.word	0x2000144c
   133e8:	2000c1a8 	.word	0x2000c1a8
   133ec:	00011df5 	.word	0x00011df5
   133f0:	2000c1d8 	.word	0x2000c1d8
   133f4:	2000c298 	.word	0x2000c298
   133f8:	2000c208 	.word	0x2000c208
   133fc:	00000000 	.word	0x00000000

00013400 <sched_free_win_offset_calc>:
{
   13400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13404:	b091      	sub	sp, #68	; 0x44
   13406:	9009      	str	r0, [sp, #36]	; 0x24
   13408:	910a      	str	r1, [sp, #40]	; 0x28
   1340a:	9207      	str	r2, [sp, #28]
   1340c:	469b      	mov	fp, r3
   1340e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   13410:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13414:	6803      	ldr	r3, [r0, #0]
   13416:	2b00      	cmp	r3, #0
   13418:	db0f      	blt.n	1343a <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   1341a:	2300      	movs	r3, #0
   1341c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   1341e:	27ff      	movs	r7, #255	; 0xff
   13420:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   13424:	2300      	movs	r3, #0
   13426:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1342a:	930f      	str	r3, [sp, #60]	; 0x3c
   1342c:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1342e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   13430:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   13432:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   13434:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   13436:	4698      	mov	r8, r3
   13438:	e06d      	b.n	13516 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   1343a:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   1343c:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   1343e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   13442:	4291      	cmp	r1, r2
   13444:	bf2c      	ite	cs
   13446:	1a5b      	subcs	r3, r3, r1
   13448:	1a9b      	subcc	r3, r3, r2
   1344a:	930b      	str	r3, [sp, #44]	; 0x2c
   1344c:	e7e7      	b.n	1341e <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1344e:	2101      	movs	r1, #1
   13450:	2000      	movs	r0, #0
   13452:	f7fe f935 	bl	116c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   13456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13458:	2b02      	cmp	r3, #2
   1345a:	d0f8      	beq.n	1344e <sched_free_win_offset_calc+0x4e>
   1345c:	e06c      	b.n	13538 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1345e:	4040      	eors	r0, r0
   13460:	f380 8811 	msr	BASEPRI, r0
   13464:	f04f 0004 	mov.w	r0, #4
   13468:	df02      	svc	2
			LL_ASSERT(0);
   1346a:	4040      	eors	r0, r0
   1346c:	f380 8811 	msr	BASEPRI, r0
   13470:	f04f 0004 	mov.w	r0, #4
   13474:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   13476:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   1347a:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   1347e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   13482:	4291      	cmp	r1, r2
   13484:	bf2c      	ite	cs
   13486:	ebc3 0301 	rsbcs	r3, r3, r1
   1348a:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1348e:	9a05      	ldr	r2, [sp, #20]
   13490:	441a      	add	r2, r3
   13492:	9205      	str	r2, [sp, #20]
   13494:	e085      	b.n	135a2 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   13496:	2202      	movs	r2, #2
   13498:	a90d      	add	r1, sp, #52	; 0x34
   1349a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1349e:	f7ec ff0f 	bl	2c0 <memcpy>
					offset_index++;
   134a2:	3401      	adds	r4, #1
   134a4:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   134a6:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   134a8:	782b      	ldrb	r3, [r5, #0]
   134aa:	429c      	cmp	r4, r3
   134ac:	d21f      	bcs.n	134ee <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   134ae:	4639      	mov	r1, r7
   134b0:	9805      	ldr	r0, [sp, #20]
   134b2:	f7fe f919 	bl	116e8 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   134b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   134ba:	4433      	add	r3, r6
   134bc:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   134be:	4298      	cmp	r0, r3
   134c0:	d315      	bcc.n	134ee <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   134c2:	19bb      	adds	r3, r7, r6
   134c4:	485a      	ldr	r0, [pc, #360]	; (13630 <sched_free_win_offset_calc+0x230>)
   134c6:	fba3 0100 	umull	r0, r1, r3, r0
   134ca:	2207      	movs	r2, #7
   134cc:	fb02 1103 	mla	r1, r2, r3, r1
   134d0:	a355      	add	r3, pc, #340	; (adr r3, 13628 <sched_free_win_offset_calc+0x228>)
   134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   134d6:	f7ed fe11 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   134da:	4b56      	ldr	r3, [pc, #344]	; (13634 <sched_free_win_offset_calc+0x234>)
   134dc:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   134e0:	f3c0 208f 	ubfx	r0, r0, #10, #16
   134e4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   134e8:	4558      	cmp	r0, fp
   134ea:	d3d4      	bcc.n	13496 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   134ec:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   134ee:	9b07      	ldr	r3, [sp, #28]
   134f0:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   134f2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   134f6:	459b      	cmp	fp, r3
   134f8:	d95e      	bls.n	135b8 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   134fa:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   134fe:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   13502:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   13506:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   13508:	9b05      	ldr	r3, [sp, #20]
   1350a:	9308      	str	r3, [sp, #32]
   1350c:	e000      	b.n	13510 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   1350e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   13510:	782b      	ldrb	r3, [r5, #0]
   13512:	429c      	cmp	r4, r3
   13514:	d251      	bcs.n	135ba <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13516:	2302      	movs	r3, #2
   13518:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1351a:	ab0c      	add	r3, sp, #48	; 0x30
   1351c:	9302      	str	r3, [sp, #8]
   1351e:	4b46      	ldr	r3, [pc, #280]	; (13638 <sched_free_win_offset_calc+0x238>)
   13520:	9301      	str	r3, [sp, #4]
   13522:	ab0e      	add	r3, sp, #56	; 0x38
   13524:	9300      	str	r3, [sp, #0]
   13526:	ab0f      	add	r3, sp, #60	; 0x3c
   13528:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   1352c:	2101      	movs	r1, #1
   1352e:	2000      	movs	r0, #0
   13530:	f7fe f846 	bl	115c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   13534:	2802      	cmp	r0, #2
   13536:	d08e      	beq.n	13456 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1353a:	2b00      	cmp	r3, #0
   1353c:	d18f      	bne.n	1345e <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   1353e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   13542:	2aff      	cmp	r2, #255	; 0xff
   13544:	d039      	beq.n	135ba <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   13546:	2fff      	cmp	r7, #255	; 0xff
   13548:	d002      	beq.n	13550 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   1354a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   1354c:	4598      	cmp	r8, r3
   1354e:	d18c      	bne.n	1346a <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   13550:	2a05      	cmp	r2, #5
   13552:	d9dd      	bls.n	13510 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   13554:	4b39      	ldr	r3, [pc, #228]	; (1363c <sched_free_win_offset_calc+0x23c>)
   13556:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1355a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   1355c:	429a      	cmp	r2, r3
   1355e:	dad7      	bge.n	13510 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   13560:	2a06      	cmp	r2, #6
   13562:	d9d4      	bls.n	1350e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   13564:	9b06      	ldr	r3, [sp, #24]
   13566:	2bff      	cmp	r3, #255	; 0xff
   13568:	d127      	bne.n	135ba <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1356a:	3a07      	subs	r2, #7
   1356c:	b292      	uxth	r2, r2
   1356e:	f44f 71aa 	mov.w	r1, #340	; 0x154
   13572:	4b32      	ldr	r3, [pc, #200]	; (1363c <sched_free_win_offset_calc+0x23c>)
   13574:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   13578:	f7fc fab8 	bl	faec <mem_get>
   1357c:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   1357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13580:	4283      	cmp	r3, r0
   13582:	d0c5      	beq.n	13510 <sched_free_win_offset_calc+0x110>
   13584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13586:	b91b      	cbnz	r3, 13590 <sched_free_win_offset_calc+0x190>
   13588:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1358c:	2b00      	cmp	r3, #0
   1358e:	dbbf      	blt.n	13510 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   13590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   13592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13594:	18d3      	adds	r3, r2, r3
   13596:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   13598:	f8d9 3000 	ldr.w	r3, [r9]
   1359c:	2b00      	cmp	r3, #0
   1359e:	f6ff af6a 	blt.w	13476 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   135a2:	9b07      	ldr	r3, [sp, #28]
   135a4:	681f      	ldr	r7, [r3, #0]
   135a6:	9b05      	ldr	r3, [sp, #20]
   135a8:	42bb      	cmp	r3, r7
   135aa:	d9a6      	bls.n	134fa <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   135ac:	9a08      	ldr	r2, [sp, #32]
   135ae:	42ba      	cmp	r2, r7
   135b0:	f4ff af7a 	bcc.w	134a8 <sched_free_win_offset_calc+0xa8>
   135b4:	4617      	mov	r7, r2
   135b6:	e777      	b.n	134a8 <sched_free_win_offset_calc+0xa8>
   135b8:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   135ba:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   135be:	2bff      	cmp	r3, #255	; 0xff
   135c0:	d003      	beq.n	135ca <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   135c2:	702c      	strb	r4, [r5, #0]
}
   135c4:	b011      	add	sp, #68	; 0x44
   135c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   135ca:	9b07      	ldr	r3, [sp, #28]
   135cc:	681f      	ldr	r7, [r3, #0]
   135ce:	9a08      	ldr	r2, [sp, #32]
   135d0:	42ba      	cmp	r2, r7
   135d2:	d300      	bcc.n	135d6 <sched_free_win_offset_calc+0x1d6>
   135d4:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   135d6:	782b      	ldrb	r3, [r5, #0]
   135d8:	429c      	cmp	r4, r3
   135da:	d21f      	bcs.n	1361c <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   135dc:	19bb      	adds	r3, r7, r6
   135de:	4814      	ldr	r0, [pc, #80]	; (13630 <sched_free_win_offset_calc+0x230>)
   135e0:	fba3 0100 	umull	r0, r1, r3, r0
   135e4:	2207      	movs	r2, #7
   135e6:	fb02 1103 	mla	r1, r2, r3, r1
   135ea:	a30f      	add	r3, pc, #60	; (adr r3, 13628 <sched_free_win_offset_calc+0x228>)
   135ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   135f0:	f7ed fd84 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   135f4:	4b0f      	ldr	r3, [pc, #60]	; (13634 <sched_free_win_offset_calc+0x234>)
   135f6:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   135fa:	f3c3 238f 	ubfx	r3, r3, #10, #16
   135fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   13602:	459b      	cmp	fp, r3
   13604:	d909      	bls.n	1361a <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   13606:	2202      	movs	r2, #2
   13608:	a90d      	add	r1, sp, #52	; 0x34
   1360a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1360e:	f7ec fe57 	bl	2c0 <memcpy>
			offset_index++;
   13612:	3401      	adds	r4, #1
   13614:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   13616:	3728      	adds	r7, #40	; 0x28
   13618:	e7dd      	b.n	135d6 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   1361a:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1361c:	9b07      	ldr	r3, [sp, #28]
   1361e:	601f      	str	r7, [r3, #0]
   13620:	e7cf      	b.n	135c2 <sched_free_win_offset_calc+0x1c2>
   13622:	bf00      	nop
   13624:	f3af 8000 	nop.w
   13628:	3b9aca00 	.word	0x3b9aca00
   1362c:	00000000 	.word	0x00000000
   13630:	1afd498d 	.word	0x1afd498d
   13634:	d1b71759 	.word	0xd1b71759
   13638:	00011df5 	.word	0x00011df5
   1363c:	2000144c 	.word	0x2000144c

00013640 <mayfly_sched_free_win_offset_calc>:
{
   13640:	b500      	push	{lr}
   13642:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   13644:	2300      	movs	r3, #0
   13646:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   13648:	2306      	movs	r3, #6
   1364a:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   1364e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13652:	2b00      	cmp	r3, #0
   13654:	db0e      	blt.n	13674 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   13656:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   13658:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   1365c:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   13660:	9101      	str	r1, [sp, #4]
   13662:	f10d 010b 	add.w	r1, sp, #11
   13666:	9100      	str	r1, [sp, #0]
   13668:	2100      	movs	r1, #0
   1366a:	f7ff fec9 	bl	13400 <sched_free_win_offset_calc>
}
   1366e:	b005      	add	sp, #20
   13670:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   13674:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   13676:	4602      	mov	r2, r0
   13678:	f842 3fe4 	str.w	r3, [r2, #228]!
   1367c:	e7ec      	b.n	13658 <mayfly_sched_free_win_offset_calc+0x18>
	...

00013680 <mayfly_sched_win_offset_select>:
{
   13680:	b570      	push	{r4, r5, r6, lr}
   13682:	b088      	sub	sp, #32
   13684:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   13686:	ac05      	add	r4, sp, #20
   13688:	2500      	movs	r5, #0
   1368a:	9505      	str	r5, [sp, #20]
   1368c:	9506      	str	r5, [sp, #24]
   1368e:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   13690:	2306      	movs	r3, #6
   13692:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   13696:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   1369a:	4843      	ldr	r0, [pc, #268]	; (137a8 <mayfly_sched_win_offset_select+0x128>)
   1369c:	fba2 0100 	umull	r0, r1, r2, r0
   136a0:	f240 1323 	movw	r3, #291	; 0x123
   136a4:	fb03 1102 	mla	r1, r3, r2, r1
   136a8:	a33d      	add	r3, pc, #244	; (adr r3, 137a0 <mayfly_sched_win_offset_select+0x120>)
   136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   136ae:	f7ed fd25 	bl	10fc <__aeabi_uldivmod>
   136b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   136b6:	aa08      	add	r2, sp, #32
   136b8:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   136bc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   136c0:	9401      	str	r4, [sp, #4]
   136c2:	f10d 0113 	add.w	r1, sp, #19
   136c6:	9100      	str	r1, [sp, #0]
   136c8:	2101      	movs	r1, #1
   136ca:	4630      	mov	r0, r6
   136cc:	f7ff fe98 	bl	13400 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   136d0:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   136d2:	e018      	b.n	13706 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   136d4:	3301      	adds	r3, #1
   136d6:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   136d8:	f89d 1013 	ldrb.w	r1, [sp, #19]
   136dc:	428b      	cmp	r3, r1
   136de:	d20e      	bcs.n	136fe <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   136e0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   136e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   136e8:	4282      	cmp	r2, r0
   136ea:	d0f3      	beq.n	136d4 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   136ec:	a808      	add	r0, sp, #32
   136ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   136f2:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   136f6:	4282      	cmp	r2, r0
   136f8:	d001      	beq.n	136fe <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   136fa:	2401      	movs	r4, #1
   136fc:	e7ea      	b.n	136d4 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   136fe:	428b      	cmp	r3, r1
   13700:	d30e      	bcc.n	13720 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   13702:	3501      	adds	r5, #1
   13704:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   13706:	2d05      	cmp	r5, #5
   13708:	d80a      	bhi.n	13720 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   1370a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   1370e:	2202      	movs	r2, #2
   13710:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   13714:	f10d 000a 	add.w	r0, sp, #10
   13718:	f7ec fdd2 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   1371c:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   1371e:	e7db      	b.n	136d8 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   13720:	2d05      	cmp	r5, #5
   13722:	d91d      	bls.n	13760 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   13724:	b35c      	cbz	r4, 1377e <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   13726:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   1372a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   1372e:	2200      	movs	r2, #0
   13730:	4b1e      	ldr	r3, [pc, #120]	; (137ac <mayfly_sched_win_offset_select+0x12c>)
   13732:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   13736:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1373a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   1373e:	f042 0203 	orr.w	r2, r2, #3
   13742:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   13746:	2203      	movs	r2, #3
   13748:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1374c:	2211      	movs	r2, #17
   1374e:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13752:	220f      	movs	r2, #15
   13754:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   13758:	2220      	movs	r2, #32
   1375a:	701a      	strb	r2, [r3, #0]
}
   1375c:	b008      	add	sp, #32
   1375e:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   13760:	a908      	add	r1, sp, #32
   13762:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   13766:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1376a:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   1376e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13772:	2202      	movs	r2, #2
   13774:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   13778:	f7ec fda2 	bl	2c0 <memcpy>
   1377c:	e7ee      	b.n	1375c <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   1377e:	a908      	add	r1, sp, #32
   13780:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   13784:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13788:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   1378c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13790:	2202      	movs	r2, #2
   13792:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   13796:	f7ec fd93 	bl	2c0 <memcpy>
   1379a:	e7df      	b.n	1375c <mayfly_sched_win_offset_select+0xdc>
   1379c:	f3af 8000 	nop.w
   137a0:	1afd498d 	.word	0x1afd498d
   137a4:	00000007 	.word	0x00000007
   137a8:	09ce5400 	.word	0x09ce5400
   137ac:	2000144c 	.word	0x2000144c

000137b0 <sched_after_mstr_free_slot_get>:
{
   137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b4:	b08b      	sub	sp, #44	; 0x2c
   137b6:	4604      	mov	r4, r0
   137b8:	468b      	mov	fp, r1
   137ba:	4615      	mov	r5, r2
   137bc:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   137be:	f04f 08ff 	mov.w	r8, #255	; 0xff
   137c2:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   137c6:	2300      	movs	r3, #0
   137c8:	f8ca 3000 	str.w	r3, [sl]
   137cc:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   137ce:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   137d0:	9305      	str	r3, [sp, #20]
   137d2:	e01f      	b.n	13814 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   137d4:	4621      	mov	r1, r4
   137d6:	2000      	movs	r0, #0
   137d8:	f7fd ff72 	bl	116c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   137dc:	9b07      	ldr	r3, [sp, #28]
   137de:	2b02      	cmp	r3, #2
   137e0:	d0f8      	beq.n	137d4 <sched_after_mstr_free_slot_get+0x24>
   137e2:	e028      	b.n	13836 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   137e4:	4040      	eors	r0, r0
   137e6:	f380 8811 	msr	BASEPRI, r0
   137ea:	f04f 0004 	mov.w	r0, #4
   137ee:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   137f0:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   137f2:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   137f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   137f8:	4291      	cmp	r1, r2
   137fa:	bf2c      	ite	cs
   137fc:	ebc3 0301 	rsbcs	r3, r3, r1
   13800:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   13804:	4499      	add	r9, r3
   13806:	e03a      	b.n	1387e <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   13808:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   1380c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   1380e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   13810:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13814:	2302      	movs	r3, #2
   13816:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13818:	ab07      	add	r3, sp, #28
   1381a:	9302      	str	r3, [sp, #8]
   1381c:	4b2c      	ldr	r3, [pc, #176]	; (138d0 <sched_after_mstr_free_slot_get+0x120>)
   1381e:	9301      	str	r3, [sp, #4]
   13820:	ab08      	add	r3, sp, #32
   13822:	9300      	str	r3, [sp, #0]
   13824:	462b      	mov	r3, r5
   13826:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1382a:	4621      	mov	r1, r4
   1382c:	2000      	movs	r0, #0
   1382e:	f7fd fec7 	bl	115c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   13832:	2802      	cmp	r0, #2
   13834:	d0d2      	beq.n	137dc <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13836:	9b07      	ldr	r3, [sp, #28]
   13838:	2b00      	cmp	r3, #0
   1383a:	d1d3      	bne.n	137e4 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   1383c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   13840:	2aff      	cmp	r2, #255	; 0xff
   13842:	d028      	beq.n	13896 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   13844:	2a06      	cmp	r2, #6
   13846:	d9e5      	bls.n	13814 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   13848:	4b22      	ldr	r3, [pc, #136]	; (138d4 <sched_after_mstr_free_slot_get+0x124>)
   1384a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1384e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   13850:	429a      	cmp	r2, r3
   13852:	dadf      	bge.n	13814 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13854:	3a07      	subs	r2, #7
   13856:	b292      	uxth	r2, r2
   13858:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1385c:	4b1d      	ldr	r3, [pc, #116]	; (138d4 <sched_after_mstr_free_slot_get+0x124>)
   1385e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   13862:	f7fc f943 	bl	faec <mem_get>
		if (conn && !conn->role) {
   13866:	4606      	mov	r6, r0
   13868:	2800      	cmp	r0, #0
   1386a:	d0d3      	beq.n	13814 <sched_after_mstr_free_slot_get+0x64>
   1386c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13870:	2b00      	cmp	r3, #0
   13872:	dbcf      	blt.n	13814 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   13874:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13878:	6803      	ldr	r3, [r0, #0]
   1387a:	2b00      	cmp	r3, #0
   1387c:	dbb8      	blt.n	137f0 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   1387e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13882:	d0c1      	beq.n	13808 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   13884:	9905      	ldr	r1, [sp, #20]
   13886:	4648      	mov	r0, r9
   13888:	f7fd ff2e 	bl	116e8 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   1388c:	eb07 030b 	add.w	r3, r7, fp
   13890:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   13892:	4298      	cmp	r0, r3
   13894:	d9b8      	bls.n	13808 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   13896:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1389a:	d010      	beq.n	138be <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1389c:	9b05      	ldr	r3, [sp, #20]
   1389e:	443b      	add	r3, r7
   138a0:	461f      	mov	r7, r3
   138a2:	480d      	ldr	r0, [pc, #52]	; (138d8 <sched_after_mstr_free_slot_get+0x128>)
   138a4:	fba3 0100 	umull	r0, r1, r3, r0
   138a8:	2307      	movs	r3, #7
   138aa:	fb03 1107 	mla	r1, r3, r7, r1
   138ae:	a306      	add	r3, pc, #24	; (adr r3, 138c8 <sched_after_mstr_free_slot_get+0x118>)
   138b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   138b4:	f7ed fc22 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   138b8:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   138ba:	f8ca 0000 	str.w	r0, [sl]
}
   138be:	b00b      	add	sp, #44	; 0x2c
   138c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c4:	f3af 8000 	nop.w
   138c8:	3b9aca00 	.word	0x3b9aca00
   138cc:	00000000 	.word	0x00000000
   138d0:	00011df5 	.word	0x00011df5
   138d4:	2000144c 	.word	0x2000144c
   138d8:	1afd498d 	.word	0x1afd498d
   138dc:	00000000 	.word	0x00000000

000138e0 <sched_after_mstr_free_offset_get>:
{
   138e0:	b570      	push	{r4, r5, r6, lr}
   138e2:	b082      	sub	sp, #8
   138e4:	4606      	mov	r6, r0
   138e6:	4615      	mov	r5, r2
   138e8:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   138ea:	aa02      	add	r2, sp, #8
   138ec:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   138f0:	3127      	adds	r1, #39	; 0x27
   138f2:	2001      	movs	r0, #1
   138f4:	f7ff ff5c 	bl	137b0 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   138f8:	9801      	ldr	r0, [sp, #4]
   138fa:	4285      	cmp	r5, r0
   138fc:	d011      	beq.n	13922 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   138fe:	4629      	mov	r1, r5
   13900:	f7fd fef2 	bl	116e8 <ticker_ticks_diff_get>
   13904:	4602      	mov	r2, r0
   13906:	4810      	ldr	r0, [pc, #64]	; (13948 <sched_after_mstr_free_offset_get+0x68>)
   13908:	fba2 0100 	umull	r0, r1, r2, r0
   1390c:	2307      	movs	r3, #7
   1390e:	fb03 1102 	mla	r1, r3, r2, r1
   13912:	a30b      	add	r3, pc, #44	; (adr r3, 13940 <sched_after_mstr_free_offset_get+0x60>)
   13914:	e9d3 2300 	ldrd	r2, r3, [r3]
   13918:	f7ed fbf0 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   1391c:	6823      	ldr	r3, [r4, #0]
   1391e:	4418      	add	r0, r3
   13920:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   13922:	6823      	ldr	r3, [r4, #0]
   13924:	2b00      	cmp	r3, #0
   13926:	db09      	blt.n	1393c <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   13928:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1392c:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   13930:	e001      	b.n	13936 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   13932:	1a1b      	subs	r3, r3, r0
   13934:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   13936:	6823      	ldr	r3, [r4, #0]
   13938:	4298      	cmp	r0, r3
   1393a:	d3fa      	bcc.n	13932 <sched_after_mstr_free_offset_get+0x52>
}
   1393c:	b002      	add	sp, #8
   1393e:	bd70      	pop	{r4, r5, r6, pc}
   13940:	3b9aca00 	.word	0x3b9aca00
   13944:	00000000 	.word	0x00000000
   13948:	1afd498d 	.word	0x1afd498d

0001394c <mayfly_sched_win_offset_use>:
{
   1394c:	b510      	push	{r4, lr}
   1394e:	b082      	sub	sp, #8
   13950:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   13952:	f100 0384 	add.w	r3, r0, #132	; 0x84
   13956:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1395a:	68c1      	ldr	r1, [r0, #12]
   1395c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   1395e:	f7ff ffbf 	bl	138e0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   13962:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   13966:	4a07      	ldr	r2, [pc, #28]	; (13984 <mayfly_sched_win_offset_use+0x38>)
   13968:	fba2 2303 	umull	r2, r3, r2, r3
   1396c:	0a9b      	lsrs	r3, r3, #10
   1396e:	a902      	add	r1, sp, #8
   13970:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   13974:	2202      	movs	r2, #2
   13976:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   1397a:	f7ec fca1 	bl	2c0 <memcpy>
}
   1397e:	b002      	add	sp, #8
   13980:	bd10      	pop	{r4, pc}
   13982:	bf00      	nop
   13984:	d1b71759 	.word	0xd1b71759

00013988 <mayfly_sched_after_mstr_free_offset_get>:
{
   13988:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   1398a:	4c05      	ldr	r4, [pc, #20]	; (139a0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   1398c:	f504 7380 	add.w	r3, r4, #256	; 0x100
   13990:	4602      	mov	r2, r0
   13992:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   13996:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   1399a:	f7ff ffa1 	bl	138e0 <sched_after_mstr_free_offset_get>
   1399e:	bd10      	pop	{r4, pc}
   139a0:	2000144c 	.word	0x2000144c

000139a4 <enc_rsp_send>:
{
   139a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   139aa:	4818      	ldr	r0, [pc, #96]	; (13a0c <enc_rsp_send+0x68>)
   139ac:	f7fc f861 	bl	fa72 <mem_acquire>
	LL_ASSERT(node_tx);
   139b0:	b330      	cbz	r0, 13a00 <enc_rsp_send+0x5c>
   139b2:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139b4:	7903      	ldrb	r3, [r0, #4]
   139b6:	f043 0303 	orr.w	r3, r3, #3
   139ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   139bc:	230d      	movs	r3, #13
   139be:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   139c0:	2604      	movs	r6, #4
   139c2:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   139c4:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   139c8:	4641      	mov	r1, r8
   139ca:	2008      	movs	r0, #8
   139cc:	f7fd faa2 	bl	10f14 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   139d0:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   139d4:	4639      	mov	r1, r7
   139d6:	4630      	mov	r0, r6
   139d8:	f7fd fa9c 	bl	10f14 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   139dc:	2208      	movs	r2, #8
   139de:	4641      	mov	r1, r8
   139e0:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   139e4:	f7ec fc6c 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   139e8:	4632      	mov	r2, r6
   139ea:	4639      	mov	r1, r7
   139ec:	f505 708b 	add.w	r0, r5, #278	; 0x116
   139f0:	f7ec fc66 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   139f4:	4621      	mov	r1, r4
   139f6:	4628      	mov	r0, r5
   139f8:	f7fe facc 	bl	11f94 <ctrl_tx_enqueue>
   139fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   13a00:	4040      	eors	r0, r0
   13a02:	f380 8811 	msr	BASEPRI, r0
   13a06:	f04f 0004 	mov.w	r0, #4
   13a0a:	df02      	svc	2
   13a0c:	200015a4 	.word	0x200015a4

00013a10 <enc_req_reused_send>:
{
   13a10:	b538      	push	{r3, r4, r5, lr}
   13a12:	4605      	mov	r5, r0
   13a14:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a16:	790b      	ldrb	r3, [r1, #4]
   13a18:	f043 0303 	orr.w	r3, r3, #3
   13a1c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   13a1e:	2317      	movs	r3, #23
   13a20:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13a22:	2303      	movs	r3, #3
   13a24:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   13a26:	2208      	movs	r2, #8
   13a28:	f100 0179 	add.w	r1, r0, #121	; 0x79
   13a2c:	18a0      	adds	r0, r4, r2
   13a2e:	f7ec fc47 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   13a32:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   13a36:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   13a38:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   13a3c:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   13a3e:	f104 0112 	add.w	r1, r4, #18
   13a42:	2008      	movs	r0, #8
   13a44:	f7fd fa66 	bl	10f14 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   13a48:	f104 011a 	add.w	r1, r4, #26
   13a4c:	2004      	movs	r0, #4
   13a4e:	f7fd fa61 	bl	10f14 <rand_isr_get>
   13a52:	bd38      	pop	{r3, r4, r5, pc}

00013a54 <isr_rx_conn_pkt_ctrl>:
{
   13a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a58:	b082      	sub	sp, #8
   13a5a:	4604      	mov	r4, r0
   13a5c:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13a5e:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   13a62:	4ba0      	ldr	r3, [pc, #640]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13a64:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   13a68:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13a6c:	2b00      	cmp	r3, #0
   13a6e:	db11      	blt.n	13a94 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13a70:	7ac1      	ldrb	r1, [r0, #11]
   13a72:	2918      	cmp	r1, #24
   13a74:	d82c      	bhi.n	13ad0 <isr_rx_conn_pkt_ctrl+0x7c>
   13a76:	e8df f001 	tbb	[pc, r1]
   13a7a:	2323      	.short	0x2323
   13a7c:	2b2b232b 	.word	0x2b2b232b
   13a80:	2b232b2b 	.word	0x2b232b2b
   13a84:	2b2b2b23 	.word	0x2b2b2b23
   13a88:	2b2b2b2b 	.word	0x2b2b2b2b
   13a8c:	2b2b2b2b 	.word	0x2b2b2b2b
   13a90:	2b2b      	.short	0x2b2b
   13a92:	23          	.byte	0x23
   13a93:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13a94:	7ac1      	ldrb	r1, [r0, #11]
   13a96:	1f0a      	subs	r2, r1, #4
   13a98:	2a15      	cmp	r2, #21
   13a9a:	d819      	bhi.n	13ad0 <isr_rx_conn_pkt_ctrl+0x7c>
   13a9c:	e8df f002 	tbb	[pc, r2]
   13aa0:	18180b0b 	.word	0x18180b0b
   13aa4:	18181818 	.word	0x18181818
   13aa8:	180b1818 	.word	0x180b1818
   13aac:	1818180b 	.word	0x1818180b
   13ab0:	0b181818 	.word	0x0b181818
   13ab4:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   13ab6:	4628      	mov	r0, r5
   13ab8:	f7fe fcca 	bl	12450 <unknown_rsp_send>
			return 0;
   13abc:	2400      	movs	r4, #0
   13abe:	e003      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   13ac0:	4628      	mov	r0, r5
   13ac2:	f7fe fcc5 	bl	12450 <unknown_rsp_send>
			return 0;
   13ac6:	2400      	movs	r4, #0
}
   13ac8:	4620      	mov	r0, r4
   13aca:	b002      	add	sp, #8
   13acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   13ad0:	7ae1      	ldrb	r1, [r4, #11]
   13ad2:	2919      	cmp	r1, #25
   13ad4:	f200 87e6 	bhi.w	14aa4 <isr_rx_conn_pkt_ctrl+0x1050>
   13ad8:	e8df f011 	tbh	[pc, r1, lsl #1]
   13adc:	002e001a 	.word	0x002e001a
   13ae0:	0042003d 	.word	0x0042003d
   13ae4:	00800065 	.word	0x00800065
   13ae8:	04c60099 	.word	0x04c60099
   13aec:	010600de 	.word	0x010600de
   13af0:	014b012d 	.word	0x014b012d
   13af4:	01ad0170 	.word	0x01ad0170
   13af8:	01c400de 	.word	0x01c400de
   13afc:	0395032d 	.word	0x0395032d
   13b00:	04c104bb 	.word	0x04c104bb
   13b04:	05180518 	.word	0x05180518
   13b08:	06de0606 	.word	0x06de0606
   13b0c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   13b10:	4631      	mov	r1, r6
   13b12:	4628      	mov	r0, r5
   13b14:	f7fe fb90 	bl	12238 <conn_update>
   13b18:	b930      	cbnz	r0, 13b28 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   13b1a:	4b72      	ldr	r3, [pc, #456]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13b1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b20:	2400      	movs	r4, #0
   13b22:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   13b26:	e7cf      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13b28:	4b6e      	ldr	r3, [pc, #440]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13b2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b2e:	2228      	movs	r2, #40	; 0x28
   13b30:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   13b34:	2400      	movs	r4, #0
   13b36:	e7c7      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   13b38:	4631      	mov	r1, r6
   13b3a:	4628      	mov	r0, r5
   13b3c:	f7ff f99e 	bl	12e7c <chan_map_update>
   13b40:	2800      	cmp	r0, #0
   13b42:	f000 87b5 	beq.w	14ab0 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13b46:	4b67      	ldr	r3, [pc, #412]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13b48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b4c:	2228      	movs	r2, #40	; 0x28
   13b4e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   13b52:	2400      	movs	r4, #0
   13b54:	e7b8      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   13b56:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   13b58:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   13b5c:	2400      	movs	r4, #0
		break;
   13b5e:	e7b3      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13b60:	2208      	movs	r2, #8
   13b62:	f104 0116 	add.w	r1, r4, #22
   13b66:	f105 0093 	add.w	r0, r5, #147	; 0x93
   13b6a:	f7ec fba9 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13b6e:	4d5d      	ldr	r5, [pc, #372]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13b70:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   13b74:	2204      	movs	r2, #4
   13b76:	f104 011e 	add.w	r1, r4, #30
   13b7a:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13b7e:	f7ec fb9f 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13b82:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   13b86:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13b8a:	f043 0304 	orr.w	r3, r3, #4
   13b8e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13b92:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13b96:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   13b9e:	2301      	movs	r3, #1
   13ba0:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13ba2:	2400      	movs	r4, #0
		break;
   13ba4:	e790      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   13ba6:	2208      	movs	r2, #8
   13ba8:	f104 010c 	add.w	r1, r4, #12
   13bac:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13bb0:	f7ec fb86 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   13bb4:	4d4b      	ldr	r5, [pc, #300]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13bb6:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   13bba:	2204      	movs	r2, #4
   13bbc:	f104 0114 	add.w	r1, r4, #20
   13bc0:	f500 708b 	add.w	r0, r0, #278	; 0x116
   13bc4:	f7ec fb7c 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13bc8:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   13bcc:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13bd0:	f043 0304 	orr.w	r3, r3, #4
   13bd4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   13bd8:	2400      	movs	r4, #0
		break;
   13bda:	e775      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13bdc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13be0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13be4:	429a      	cmp	r2, r3
   13be6:	d10c      	bne.n	13c02 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13be8:	2303      	movs	r3, #3
   13bea:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   13bee:	4b3d      	ldr	r3, [pc, #244]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13bf0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13bf4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13bf8:	3b01      	subs	r3, #1
   13bfa:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   13bfe:	2400      	movs	r4, #0
		break;
   13c00:	e762      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13c02:	4040      	eors	r0, r0
   13c04:	f380 8811 	msr	BASEPRI, r0
   13c08:	f04f 0004 	mov.w	r0, #4
   13c0c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   13c0e:	4b35      	ldr	r3, [pc, #212]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13c10:	7bdb      	ldrb	r3, [r3, #15]
   13c12:	b2db      	uxtb	r3, r3
   13c14:	2b03      	cmp	r3, #3
   13c16:	d027      	beq.n	13c68 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   13c18:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13c1c:	f36f 0382 	bfc	r3, #2, #1
   13c20:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13c24:	4b2f      	ldr	r3, [pc, #188]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13c26:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c2a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13c2e:	f36f 02c3 	bfc	r2, #3, #1
   13c32:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   13c36:	4b2b      	ldr	r3, [pc, #172]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13c38:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c3c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13c40:	f012 0f40 	tst.w	r2, #64	; 0x40
   13c44:	d007      	beq.n	13c56 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   13c46:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13c4a:	f36f 1286 	bfc	r2, #6, #1
   13c4e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13c52:	2309      	movs	r3, #9
   13c54:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   13c56:	2301      	movs	r3, #1
   13c58:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13c5a:	4b22      	ldr	r3, [pc, #136]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13c5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c60:	2400      	movs	r4, #0
   13c62:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13c66:	e72f      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   13c68:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13c6c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13c70:	429a      	cmp	r2, r3
   13c72:	d10b      	bne.n	13c8c <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13c74:	2303      	movs	r3, #3
   13c76:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   13c7a:	4b1a      	ldr	r3, [pc, #104]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13c7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c80:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13c84:	3b01      	subs	r3, #1
   13c86:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   13c8a:	e7d4      	b.n	13c36 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   13c8c:	4040      	eors	r0, r0
   13c8e:	f380 8811 	msr	BASEPRI, r0
   13c92:	f04f 0004 	mov.w	r0, #4
   13c96:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13c98:	7b23      	ldrb	r3, [r4, #12]
   13c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13c9e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13ca2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13ca6:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   13caa:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13cb0:	7ba2      	ldrb	r2, [r4, #14]
   13cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13cb6:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   13cba:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   13cbe:	4013      	ands	r3, r2
   13cc0:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13cc4:	4a07      	ldr	r2, [pc, #28]	; (13ce4 <isr_rx_conn_pkt_ctrl+0x290>)
   13cc6:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13cca:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13cce:	f043 0320 	orr.w	r3, r3, #32
   13cd2:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   13cd6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13cda:	f7ff f8fd 	bl	12ed8 <feature_rsp_send>
	u8_t nack = 0;
   13cde:	2400      	movs	r4, #0
	break;
   13ce0:	e6f2      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   13ce2:	bf00      	nop
   13ce4:	2000144c 	.word	0x2000144c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13ce8:	7b23      	ldrb	r3, [r4, #12]
   13cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13cee:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13cf2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13cf6:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   13cfa:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13d00:	7ba2      	ldrb	r2, [r4, #14]
   13d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13d06:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   13d0a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   13d0e:	4013      	ands	r3, r2
   13d10:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13d14:	4ad2      	ldr	r2, [pc, #840]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13d16:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13d1a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13d1e:	f043 0320 	orr.w	r3, r3, #32
   13d22:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   13d26:	2301      	movs	r3, #1
   13d28:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13d2a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13d2e:	2400      	movs	r4, #0
   13d30:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   13d34:	e6c8      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   13d36:	4628      	mov	r0, r5
   13d38:	f7fe fae8 	bl	1230c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   13d3c:	4bc8      	ldr	r3, [pc, #800]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13d3e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13d42:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13d46:	f042 0204 	orr.w	r2, r2, #4
   13d4a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13d4e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13d52:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13d5a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   13d5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d62:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d66:	f36f 1204 	bfc	r2, #4, #1
   13d6a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   13d6e:	2400      	movs	r4, #0
		break;
   13d70:	e6aa      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   13d72:	4bbb      	ldr	r3, [pc, #748]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13d74:	7bdb      	ldrb	r3, [r3, #15]
   13d76:	b2db      	uxtb	r3, r3
   13d78:	2b04      	cmp	r3, #4
   13d7a:	d00a      	beq.n	13d92 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   13d7c:	4bb8      	ldr	r3, [pc, #736]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13d7e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d82:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d86:	f36f 1245 	bfc	r2, #5, #1
   13d8a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   13d8e:	2400      	movs	r4, #0
		break;
   13d90:	e69a      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   13d92:	4628      	mov	r0, r5
   13d94:	f7fe faba 	bl	1230c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   13d98:	4ab1      	ldr	r2, [pc, #708]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13d9a:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13d9e:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13da2:	f043 0304 	orr.w	r3, r3, #4
   13da6:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   13daa:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13dae:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13db2:	f36f 1204 	bfc	r2, #4, #1
   13db6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   13dba:	e7df      	b.n	13d7c <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   13dbc:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   13dbe:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   13dc2:	4ba7      	ldr	r3, [pc, #668]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13dc4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   13dc8:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   13dcc:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   13dd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   13dd4:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   13dd8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   13ddc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13de0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   13de4:	f003 0303 	and.w	r3, r3, #3
   13de8:	2b01      	cmp	r3, #1
   13dea:	d011      	beq.n	13e10 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   13dec:	4a9c      	ldr	r2, [pc, #624]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13dee:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13df2:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   13df6:	f043 0302 	orr.w	r3, r3, #2
   13dfa:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   13dfe:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13e02:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   13e06:	f012 0f01 	tst.w	r2, #1
   13e0a:	d009      	beq.n	13e20 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   13e0c:	2400      	movs	r4, #0
   13e0e:	e65b      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   13e10:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   13e12:	4b93      	ldr	r3, [pc, #588]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13e14:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e18:	2200      	movs	r2, #0
   13e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   13e1e:	e7e5      	b.n	13dec <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   13e20:	f042 0201 	orr.w	r2, r2, #1
   13e24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   13e28:	4b8d      	ldr	r3, [pc, #564]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13e2a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13e2e:	f7ff f90b 	bl	13048 <version_ind_send>
	u8_t nack = 0;
   13e32:	2400      	movs	r4, #0
   13e34:	e648      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   13e36:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13e3a:	f36f 0382 	bfc	r3, #2, #1
   13e3e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13e42:	4b87      	ldr	r3, [pc, #540]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13e44:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13e48:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13e4c:	f36f 01c3 	bfc	r1, #3, #1
   13e50:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13e54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e58:	2400      	movs	r4, #0
   13e5a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   13e5e:	2301      	movs	r3, #1
   13e60:	703b      	strb	r3, [r7, #0]
		break;
   13e62:	e631      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   13e64:	4a7e      	ldr	r2, [pc, #504]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13e66:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13e6a:	b142      	cbz	r2, 13e7e <isr_rx_conn_pkt_ctrl+0x42a>
   13e6c:	4295      	cmp	r5, r2
   13e6e:	d006      	beq.n	13e7e <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   13e70:	2220      	movs	r2, #32
   13e72:	210f      	movs	r1, #15
   13e74:	4628      	mov	r0, r5
   13e76:	f7fe faa5 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   13e7a:	2400      	movs	r4, #0
			break;
   13e7c:	e624      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   13e7e:	2b00      	cmp	r3, #0
   13e80:	f2c0 80bc 	blt.w	13ffc <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   13e84:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   13e88:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   13e8c:	429a      	cmp	r2, r3
   13e8e:	d008      	beq.n	13ea2 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   13e90:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   13e94:	f013 0307 	ands.w	r3, r3, #7
   13e98:	d016      	beq.n	13ec8 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   13e9a:	2b04      	cmp	r3, #4
   13e9c:	d014      	beq.n	13ec8 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   13e9e:	2b05      	cmp	r3, #5
   13ea0:	d012      	beq.n	13ec8 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13ea2:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13ea6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13eaa:	429a      	cmp	r2, r3
   13eac:	d105      	bne.n	13eba <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   13eae:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   13eb2:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13eb6:	429a      	cmp	r2, r3
   13eb8:	d00d      	beq.n	13ed6 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   13eba:	222a      	movs	r2, #42	; 0x2a
   13ebc:	210f      	movs	r1, #15
   13ebe:	4628      	mov	r0, r5
   13ec0:	f7fe fa80 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   13ec4:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13ec6:	e5ff      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13ec8:	2223      	movs	r2, #35	; 0x23
   13eca:	210f      	movs	r1, #15
   13ecc:	4628      	mov	r0, r5
   13ece:	f7fe fa79 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   13ed2:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13ed4:	e5f8      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   13ed6:	89a0      	ldrh	r0, [r4, #12]
   13ed8:	b282      	uxth	r2, r0
   13eda:	2a05      	cmp	r2, #5
   13edc:	d970      	bls.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13ede:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13ee0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13ee4:	d86c      	bhi.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13ee6:	429a      	cmp	r2, r3
   13ee8:	d86a      	bhi.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   13eea:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   13eec:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13ef0:	d266      	bcs.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13ef2:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   13ef4:	2909      	cmp	r1, #9
   13ef6:	d963      	bls.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13ef8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13efc:	d860      	bhi.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   13efe:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   13f02:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13f06:	da5b      	bge.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   13f08:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   13f0a:	4293      	cmp	r3, r2
   13f0c:	d358      	bcc.n	13fc0 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   13f0e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   13f12:	8a23      	ldrh	r3, [r4, #16]
   13f14:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13f18:	8a62      	ldrh	r2, [r4, #18]
   13f1a:	b293      	uxth	r3, r2
   13f1c:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   13f20:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   13f22:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   13f26:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   13f2a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   13f2e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13f32:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   13f36:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13f3a:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   13f3e:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13f42:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   13f46:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13f4a:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   13f4e:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13f52:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   13f56:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13f5a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   13f5e:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   13f62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   13f64:	4291      	cmp	r1, r2
   13f66:	d10f      	bne.n	13f88 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13f68:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13f6a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13f6e:	fb02 f201 	mul.w	r2, r2, r1
   13f72:	f242 7110 	movw	r1, #10000	; 0x2710
   13f76:	fb01 2303 	mla	r3, r1, r3, r2
   13f7a:	3b01      	subs	r3, #1
   13f7c:	fb93 f3f2 	sdiv	r3, r3, r2
   13f80:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   13f82:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   13f84:	4293      	cmp	r3, r2
   13f86:	d02c      	beq.n	13fe2 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   13f88:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13f8c:	f013 0f08 	tst.w	r3, #8
   13f90:	d01d      	beq.n	13fce <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   13f92:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13f96:	2202      	movs	r2, #2
   13f98:	f362 0302 	bfi	r3, r2, #0, #3
   13f9c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   13fa0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13fa4:	3b01      	subs	r3, #1
   13fa6:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   13faa:	4b2d      	ldr	r3, [pc, #180]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13fac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13fb0:	2b00      	cmp	r3, #0
   13fb2:	f040 8580 	bne.w	14ab6 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   13fb6:	4b2a      	ldr	r3, [pc, #168]	; (14060 <isr_rx_conn_pkt_ctrl+0x60c>)
   13fb8:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   13fbc:	2400      	movs	r4, #0
   13fbe:	e583      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   13fc0:	221e      	movs	r2, #30
   13fc2:	210f      	movs	r1, #15
   13fc4:	4628      	mov	r0, r5
   13fc6:	f7fe f9fd 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   13fca:	2400      	movs	r4, #0
					break;
   13fcc:	e57c      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   13fce:	2301      	movs	r3, #1
   13fd0:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   13fd2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13fd6:	2203      	movs	r2, #3
   13fd8:	f362 0302 	bfi	r3, r2, #0, #3
   13fdc:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13fe0:	e7de      	b.n	13fa0 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   13fe2:	2300      	movs	r3, #0
   13fe4:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   13fe8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   13fec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13ff0:	2201      	movs	r2, #1
   13ff2:	f362 0302 	bfi	r3, r2, #0, #3
   13ff6:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13ffa:	e7d1      	b.n	13fa0 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13ffc:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   14000:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   14004:	429a      	cmp	r2, r3
   14006:	d007      	beq.n	14018 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   14008:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1400c:	f013 0307 	ands.w	r3, r3, #7
   14010:	d002      	beq.n	14018 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   14012:	2b04      	cmp	r3, #4
   14014:	f040 8089 	bne.w	1412a <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   14018:	89a1      	ldrh	r1, [r4, #12]
   1401a:	b28a      	uxth	r2, r1
   1401c:	2a05      	cmp	r2, #5
   1401e:	d917      	bls.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   14020:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   14022:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14026:	d813      	bhi.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   14028:	429a      	cmp	r2, r3
   1402a:	d811      	bhi.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   1402c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   1402e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14032:	d20d      	bcs.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14034:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   14036:	2809      	cmp	r0, #9
   14038:	d90a      	bls.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1403a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1403e:	d807      	bhi.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   14040:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14044:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   14048:	da02      	bge.n	14050 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1404a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1404c:	4293      	cmp	r3, r2
   1404e:	d209      	bcs.n	14064 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   14050:	221e      	movs	r2, #30
   14052:	210f      	movs	r1, #15
   14054:	4628      	mov	r0, r5
   14056:	f7fe f9b5 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   1405a:	2400      	movs	r4, #0
				break;
   1405c:	e534      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   1405e:	bf00      	nop
   14060:	2000144c 	.word	0x2000144c
			conn->llcp_conn_param.interval = cpr->interval_min;
   14064:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   14068:	8a23      	ldrh	r3, [r4, #16]
   1406a:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   1406e:	8a62      	ldrh	r2, [r4, #18]
   14070:	b293      	uxth	r3, r2
   14072:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   14076:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   14078:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   1407c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   14080:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   14084:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   14088:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1408c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   14090:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   14094:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   14098:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1409c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   140a0:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   140a4:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   140a8:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   140ac:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   140b0:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   140b4:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   140b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   140ba:	4291      	cmp	r1, r2
   140bc:	d013      	beq.n	140e6 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   140be:	2301      	movs	r3, #1
   140c0:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   140c2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   140c6:	2203      	movs	r2, #3
   140c8:	f362 0302 	bfi	r3, r2, #0, #3
   140cc:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   140d0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   140d4:	3b01      	subs	r3, #1
   140d6:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   140da:	4bcb      	ldr	r3, [pc, #812]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   140dc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   140e0:	b1f3      	cbz	r3, 14120 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   140e2:	2400      	movs	r4, #0
   140e4:	e4f0      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   140e6:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   140e8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   140ec:	fb02 f201 	mul.w	r2, r2, r1
   140f0:	f242 7110 	movw	r1, #10000	; 0x2710
   140f4:	fb01 2303 	mla	r3, r1, r3, r2
   140f8:	3b01      	subs	r3, #1
   140fa:	fb93 f3f2 	sdiv	r3, r3, r2
   140fe:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   14100:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   14102:	4293      	cmp	r3, r2
   14104:	d1db      	bne.n	140be <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   14106:	2300      	movs	r3, #0
   14108:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   1410c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   14110:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   14114:	2201      	movs	r2, #1
   14116:	f362 0302 	bfi	r3, r2, #0, #3
   1411a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1411e:	e7d7      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   14120:	4bb9      	ldr	r3, [pc, #740]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14122:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   14126:	2400      	movs	r4, #0
   14128:	e4ce      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   1412a:	4040      	eors	r0, r0
   1412c:	f380 8811 	msr	BASEPRI, r0
   14130:	f04f 0004 	mov.w	r0, #4
   14134:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   14136:	2b00      	cmp	r3, #0
   14138:	f2c0 84c0 	blt.w	14abc <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   1413c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   14140:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   14144:	429a      	cmp	r2, r3
   14146:	f000 84bc 	beq.w	14ac2 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   1414a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1414e:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   14152:	2b04      	cmp	r3, #4
   14154:	d001      	beq.n	1415a <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   14156:	2400      	movs	r4, #0
   14158:	e4b6      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   1415a:	89a2      	ldrh	r2, [r4, #12]
   1415c:	2a05      	cmp	r2, #5
   1415e:	d917      	bls.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   14160:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   14162:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14166:	d813      	bhi.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   14168:	429a      	cmp	r2, r3
   1416a:	d811      	bhi.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   1416c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   1416e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14172:	d20d      	bcs.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14174:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   14176:	2909      	cmp	r1, #9
   14178:	d90a      	bls.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1417a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1417e:	d807      	bhi.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   14180:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14184:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   14188:	da02      	bge.n	14190 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1418a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1418c:	4293      	cmp	r3, r2
   1418e:	d206      	bcs.n	1419e <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   14190:	221e      	movs	r2, #30
   14192:	2110      	movs	r1, #16
   14194:	4628      	mov	r0, r5
   14196:	f7fe f915 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   1419a:	2400      	movs	r4, #0
				break;
   1419c:	e494      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   1419e:	2300      	movs	r3, #0
   141a0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   141a4:	89a2      	ldrh	r2, [r4, #12]
   141a6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   141aa:	8a22      	ldrh	r2, [r4, #16]
   141ac:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   141b0:	8a62      	ldrh	r2, [r4, #18]
   141b2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   141b6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   141b8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   141bc:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   141c0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   141c4:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   141c8:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   141cc:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   141d0:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   141d4:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   141d8:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   141dc:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   141e0:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   141e4:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   141e8:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   141ec:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   141f0:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   141f4:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   141f8:	2101      	movs	r1, #1
   141fa:	f361 0202 	bfi	r2, r1, #0, #3
   141fe:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   14202:	461c      	mov	r4, r3
   14204:	e460      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   14206:	4b80      	ldr	r3, [pc, #512]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14208:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1420c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   14210:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   14214:	4291      	cmp	r1, r2
   14216:	d112      	bne.n	1423e <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   14218:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   1421c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   14220:	4291      	cmp	r1, r2
   14222:	d14c      	bne.n	142be <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   14224:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   14228:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1422c:	4291      	cmp	r1, r2
   1422e:	f000 80ef 	beq.w	14410 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   14232:	7b21      	ldrb	r1, [r4, #12]
   14234:	2914      	cmp	r1, #20
   14236:	f000 80cb 	beq.w	143d0 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   1423a:	2400      	movs	r4, #0
   1423c:	e444      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   1423e:	7b23      	ldrb	r3, [r4, #12]
   14240:	2b16      	cmp	r3, #22
   14242:	d001      	beq.n	14248 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   14244:	2400      	movs	r4, #0
   14246:	e43f      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   14248:	7b63      	ldrb	r3, [r4, #13]
   1424a:	2b23      	cmp	r3, #35	; 0x23
   1424c:	d017      	beq.n	1427e <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   1424e:	4b6e      	ldr	r3, [pc, #440]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14250:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   14254:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   14258:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   1425c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   14260:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   14264:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   14268:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   1426c:	f361 0002 	bfi	r0, r1, #0, #3
   14270:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   14274:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14278:	2200      	movs	r2, #0
   1427a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   1427e:	4b62      	ldr	r3, [pc, #392]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14280:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14284:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   14288:	f013 0f02 	tst.w	r3, #2
   1428c:	f000 841c 	beq.w	14ac8 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14290:	230c      	movs	r3, #12
   14292:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   14294:	7b63      	ldrb	r3, [r4, #13]
   14296:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   14298:	4a5b      	ldr	r2, [pc, #364]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1429a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1429e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   142a2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   142a6:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   142a8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   142ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   142b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   142b4:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   142b6:	2301      	movs	r3, #1
   142b8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   142ba:	2400      	movs	r4, #0
   142bc:	e404      	b.n	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   142be:	7b23      	ldrb	r3, [r4, #12]
   142c0:	2b0f      	cmp	r3, #15
   142c2:	d002      	beq.n	142ca <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   142c4:	2400      	movs	r4, #0
   142c6:	f7ff bbff 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   142ca:	4b4f      	ldr	r3, [pc, #316]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   142cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   142d0:	f993 201d 	ldrsb.w	r2, [r3, #29]
   142d4:	2a00      	cmp	r2, #0
   142d6:	db02      	blt.n	142de <isr_rx_conn_pkt_ctrl+0x88a>
   142d8:	7b62      	ldrb	r2, [r4, #13]
   142da:	2a1a      	cmp	r2, #26
   142dc:	d037      	beq.n	1434e <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   142de:	7b62      	ldrb	r2, [r4, #13]
   142e0:	2a23      	cmp	r2, #35	; 0x23
   142e2:	d012      	beq.n	1430a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   142e4:	4a48      	ldr	r2, [pc, #288]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   142e6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   142ea:	4293      	cmp	r3, r2
   142ec:	d166      	bne.n	143bc <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   142ee:	2200      	movs	r2, #0
   142f0:	4945      	ldr	r1, [pc, #276]	; (14408 <isr_rx_conn_pkt_ctrl+0x9b4>)
   142f2:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   142f6:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   142fa:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   142fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   14302:	f993 201d 	ldrsb.w	r2, [r3, #29]
   14306:	2a00      	cmp	r2, #0
   14308:	db5e      	blt.n	143c8 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   1430a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1430e:	f012 0f08 	tst.w	r2, #8
   14312:	f000 83dc 	beq.w	14ace <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14316:	2208      	movs	r2, #8
   14318:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   1431a:	7b62      	ldrb	r2, [r4, #13]
   1431c:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   1431e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   14320:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   14322:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   14324:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   14326:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   14328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   1432a:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   1432e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   14332:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14336:	4a35      	ldr	r2, [pc, #212]	; (1440c <isr_rx_conn_pkt_ctrl+0x9b8>)
   14338:	fb82 1203 	smull	r1, r2, r2, r3
   1433c:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   1433e:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   14342:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   14344:	2301      	movs	r3, #1
   14346:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   14348:	2400      	movs	r4, #0
   1434a:	f7ff bbbd 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1434e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   14352:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   14356:	4282      	cmp	r2, r0
   14358:	d12a      	bne.n	143b0 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1435a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1435e:	2105      	movs	r1, #5
   14360:	f361 0202 	bfi	r2, r1, #0, #3
   14364:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   14368:	2501      	movs	r5, #1
   1436a:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1436e:	2400      	movs	r4, #0
   14370:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   14374:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   14378:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   1437c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   14380:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   14384:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   14388:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1438c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   14390:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   14394:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   14398:	406a      	eors	r2, r5
   1439a:	f362 0182 	bfi	r1, r2, #2, #1
   1439e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   143a2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   143a6:	3801      	subs	r0, #1
   143a8:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   143ac:	f7ff bb8c 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   143b0:	4040      	eors	r0, r0
   143b2:	f380 8811 	msr	BASEPRI, r0
   143b6:	f04f 0004 	mov.w	r0, #4
   143ba:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   143bc:	4040      	eors	r0, r0
   143be:	f380 8811 	msr	BASEPRI, r0
   143c2:	f04f 0004 	mov.w	r0, #4
   143c6:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   143c8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   143cc:	671a      	str	r2, [r3, #112]	; 0x70
   143ce:	e79c      	b.n	1430a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   143d0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   143d4:	2200      	movs	r2, #0
   143d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   143da:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   143de:	f362 01c3 	bfi	r1, r2, #3, #1
   143e2:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   143e6:	2109      	movs	r1, #9
   143e8:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   143ea:	2115      	movs	r1, #21
   143ec:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   143ee:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   143f0:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   143f2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   143f4:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   143f6:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   143f8:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   143fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   143fc:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   143fe:	2301      	movs	r3, #1
   14400:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   14402:	4614      	mov	r4, r2
   14404:	f7ff bb60 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14408:	2000144c 	.word	0x2000144c
   1440c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   14410:	7b22      	ldrb	r2, [r4, #12]
   14412:	2a03      	cmp	r2, #3
   14414:	f040 835e 	bne.w	14ad4 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   14418:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1441c:	f36f 0282 	bfc	r2, #2, #1
   14420:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   14424:	4bcb      	ldr	r3, [pc, #812]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14426:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1442a:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   1442e:	f36f 01c3 	bfc	r1, #3, #1
   14432:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   14436:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1443a:	2300      	movs	r3, #0
   1443c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   14440:	220d      	movs	r2, #13
   14442:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   14444:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   14446:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   14448:	2201      	movs	r2, #1
   1444a:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   1444c:	461c      	mov	r4, r3
   1444e:	f7ff bb3b 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   14452:	4628      	mov	r0, r5
   14454:	f7fd ff76 	bl	12344 <ping_resp_send>
	u8_t nack = 0;
   14458:	2400      	movs	r4, #0
		break;
   1445a:	f7ff bb35 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   1445e:	2400      	movs	r4, #0
   14460:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   14464:	f7ff bb30 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   14468:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   1446c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   14470:	4293      	cmp	r3, r2
   14472:	d014      	beq.n	1449e <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   14474:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   14478:	4bb6      	ldr	r3, [pc, #728]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   1447a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1447e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14482:	f36f 02c3 	bfc	r2, #3, #1
   14486:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   1448a:	2301      	movs	r3, #1
   1448c:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1448e:	4bb1      	ldr	r3, [pc, #708]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14490:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14494:	2400      	movs	r4, #0
   14496:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1449a:	f7ff bb15 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   1449e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   144a2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   144a6:	4293      	cmp	r3, r2
   144a8:	d02a      	beq.n	14500 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   144aa:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   144ae:	49a9      	ldr	r1, [pc, #676]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   144b0:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   144b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   144b8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   144bc:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   144c0:	f362 0002 	bfi	r0, r2, #0, #3
   144c4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   144c8:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   144cc:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   144d0:	f013 0f02 	tst.w	r3, #2
   144d4:	d0db      	beq.n	1448e <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   144d6:	230c      	movs	r3, #12
   144d8:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   144da:	2300      	movs	r3, #0
   144dc:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   144de:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   144e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   144e6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   144ea:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   144ec:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   144f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   144f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   144f8:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   144fa:	2301      	movs	r3, #1
   144fc:	703b      	strb	r3, [r7, #0]
   144fe:	e7c6      	b.n	1448e <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   14500:	7b23      	ldrb	r3, [r4, #12]
   14502:	2b12      	cmp	r3, #18
   14504:	d0c3      	beq.n	1448e <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   14506:	2301      	movs	r3, #1
   14508:	703b      	strb	r3, [r7, #0]
				break;
   1450a:	e7c0      	b.n	1448e <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   1450c:	4b91      	ldr	r3, [pc, #580]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   1450e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14512:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   14514:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   14516:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   1451a:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   1451e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   14522:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   14526:	429a      	cmp	r2, r3
   14528:	d020      	beq.n	1456c <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1452a:	429a      	cmp	r2, r3
   1452c:	d007      	beq.n	1453e <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   1452e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   14532:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   14536:	2b01      	cmp	r3, #1
   14538:	d960      	bls.n	145fc <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1453a:	2b02      	cmp	r3, #2
   1453c:	d062      	beq.n	14604 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   1453e:	78f3      	ldrb	r3, [r6, #3]
   14540:	2b15      	cmp	r3, #21
   14542:	f040 80cb 	bne.w	146dc <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   14546:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   14548:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   1454a:	2b14      	cmp	r3, #20
   1454c:	f47f aabc 	bne.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   14550:	2c00      	cmp	r4, #0
   14552:	f47f aab9 	bne.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   14556:	4b7f      	ldr	r3, [pc, #508]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14558:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1455c:	f8cd 8000 	str.w	r8, [sp]
   14560:	462b      	mov	r3, r5
   14562:	464a      	mov	r2, r9
   14564:	f7fd ff0a 	bl	1237c <length_resp_send>
		break;
   14568:	f7ff baae 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   1456c:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   1456e:	2c14      	cmp	r4, #20
   14570:	d1db      	bne.n	1452a <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   14572:	88b3      	ldrh	r3, [r6, #4]
   14574:	2b1a      	cmp	r3, #26
   14576:	d903      	bls.n	14580 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   14578:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1457a:	429d      	cmp	r5, r3
   1457c:	bf28      	it	cs
   1457e:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   14580:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   14584:	f1ba 0f1a 	cmp.w	sl, #26
   14588:	d942      	bls.n	14610 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   1458a:	f1ba 0f1b 	cmp.w	sl, #27
   1458e:	bf28      	it	cs
   14590:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   14594:	88f3      	ldrh	r3, [r6, #6]
   14596:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1459a:	d304      	bcc.n	145a6 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   1459c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   145a0:	4598      	cmp	r8, r3
   145a2:	bf28      	it	cs
   145a4:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   145a6:	8973      	ldrh	r3, [r6, #10]
   145a8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   145ac:	d305      	bcc.n	145ba <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   145ae:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   145b2:	bf28      	it	cs
   145b4:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   145b8:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   145ba:	4551      	cmp	r1, sl
   145bc:	d066      	beq.n	1468c <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   145be:	4b65      	ldr	r3, [pc, #404]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   145c0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   145c4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   145c8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   145ca:	429a      	cmp	r2, r3
   145cc:	d322      	bcc.n	14614 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   145ce:	4b61      	ldr	r3, [pc, #388]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   145d0:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   145d4:	1b14      	subs	r4, r2, r4
   145d6:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   145d8:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   145da:	4b5e      	ldr	r3, [pc, #376]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   145dc:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   145e0:	f7fb fa7b 	bl	fada <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   145e4:	1823      	adds	r3, r4, r0
   145e6:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   145e8:	2bff      	cmp	r3, #255	; 0xff
   145ea:	d81d      	bhi.n	14628 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   145ec:	4a59      	ldr	r2, [pc, #356]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   145ee:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   145f2:	4293      	cmp	r3, r2
   145f4:	d01e      	beq.n	14634 <isr_rx_conn_pkt_ctrl+0xbe0>
   145f6:	4651      	mov	r1, sl
				nack = 1;
   145f8:	2401      	movs	r4, #1
   145fa:	e7a5      	b.n	14548 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   145fc:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   145fe:	2a14      	cmp	r2, #20
   14600:	d19b      	bne.n	1453a <isr_rx_conn_pkt_ctrl+0xae6>
   14602:	e7b6      	b.n	14572 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   14604:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   14606:	3b14      	subs	r3, #20
   14608:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   1460a:	2b01      	cmp	r3, #1
   1460c:	d897      	bhi.n	1453e <isr_rx_conn_pkt_ctrl+0xaea>
   1460e:	e7b0      	b.n	14572 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   14610:	468a      	mov	sl, r1
   14612:	e7bf      	b.n	14594 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   14614:	4b4f      	ldr	r3, [pc, #316]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14616:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1461a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1461e:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   14620:	fa52 f484 	uxtab	r4, r2, r4
   14624:	b2e4      	uxtb	r4, r4
   14626:	e7d7      	b.n	145d8 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   14628:	4040      	eors	r0, r0
   1462a:	f380 8811 	msr	BASEPRI, r0
   1462e:	f04f 0004 	mov.w	r0, #4
   14632:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   14634:	4b47      	ldr	r3, [pc, #284]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14636:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1463a:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   1463c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14640:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   14644:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14648:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   1464c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14650:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   14654:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14658:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   1465c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14660:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   14664:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   14668:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   1466c:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   1466e:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   14672:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14676:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   1467a:	f042 0203 	orr.w	r2, r2, #3
   1467e:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   14682:	2203      	movs	r2, #3
   14684:	741a      	strb	r2, [r3, #16]
   14686:	4651      	mov	r1, sl
	u8_t nack = 0;
   14688:	2400      	movs	r4, #0
   1468a:	e75d      	b.n	14548 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   1468c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   14690:	f36f 03c3 	bfc	r3, #3, #1
   14694:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   14698:	4b2e      	ldr	r3, [pc, #184]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   1469a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1469e:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   146a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146a4:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   146a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146ac:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   146b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   146b4:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   146b8:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   146bc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   146c0:	2400      	movs	r4, #0
   146c2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   146c6:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   146ca:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   146cc:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   146d0:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   146d4:	2301      	movs	r3, #1
   146d6:	703b      	strb	r3, [r7, #0]
   146d8:	4651      	mov	r1, sl
   146da:	e735      	b.n	14548 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   146dc:	4040      	eors	r0, r0
   146de:	f380 8811 	msr	BASEPRI, r0
   146e2:	f04f 0004 	mov.w	r0, #4
   146e6:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   146e8:	4b1a      	ldr	r3, [pc, #104]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   146ea:	7bdb      	ldrb	r3, [r3, #15]
   146ec:	b2db      	uxtb	r3, r3
   146ee:	2b04      	cmp	r3, #4
   146f0:	d032      	beq.n	14758 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   146f2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   146f6:	2202      	movs	r2, #2
   146f8:	f362 0301 	bfi	r3, r2, #0, #2
   146fc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   14700:	4b14      	ldr	r3, [pc, #80]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14702:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14706:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   1470a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   1470e:	428a      	cmp	r2, r1
   14710:	f000 8099 	beq.w	14846 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14714:	4a0f      	ldr	r2, [pc, #60]	; (14754 <isr_rx_conn_pkt_ctrl+0xd00>)
   14716:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1471a:	7b61      	ldrb	r1, [r4, #13]
   1471c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14720:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14724:	4029      	ands	r1, r5
   14726:	f361 0384 	bfi	r3, r1, #2, #3
   1472a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1472e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14732:	7b21      	ldrb	r1, [r4, #12]
   14734:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14738:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1473c:	f361 1347 	bfi	r3, r1, #5, #3
   14740:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   14744:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14748:	f7fd fe5c 	bl	12404 <phy_rsp_send>
	u8_t nack = 0;
   1474c:	2400      	movs	r4, #0
   1474e:	f7ff b9bb 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14752:	bf00      	nop
   14754:	2000144c 	.word	0x2000144c
			if ((_radio.conn_curr->llcp_phy.ack !=
   14758:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   1475c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   14760:	429a      	cmp	r2, r3
   14762:	d007      	beq.n	14774 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   14764:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   14768:	f003 0303 	and.w	r3, r3, #3
   1476c:	3b01      	subs	r3, #1
   1476e:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   14770:	2b02      	cmp	r3, #2
   14772:	d913      	bls.n	1479c <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   14774:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   14778:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   1477c:	429a      	cmp	r2, r3
   1477e:	d105      	bne.n	1478c <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   14780:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   14784:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   14788:	429a      	cmp	r2, r3
   1478a:	d00f      	beq.n	147ac <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   1478c:	222a      	movs	r2, #42	; 0x2a
   1478e:	2116      	movs	r1, #22
   14790:	4628      	mov	r0, r5
   14792:	f7fd fe17 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   14796:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14798:	f7ff b996 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   1479c:	2223      	movs	r2, #35	; 0x23
   1479e:	2116      	movs	r1, #22
   147a0:	4628      	mov	r0, r5
   147a2:	f7fd fe0f 	bl	123c4 <reject_ext_ind_send>
	u8_t nack = 0;
   147a6:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   147a8:	f7ff b98e 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   147ac:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   147b0:	f043 0303 	orr.w	r3, r3, #3
   147b4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   147b8:	4bce      	ldr	r3, [pc, #824]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   147ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   147be:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   147c2:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   147c6:	428b      	cmp	r3, r1
   147c8:	d01a      	beq.n	14800 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   147ca:	49ca      	ldr	r1, [pc, #808]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   147cc:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   147d0:	7b62      	ldrb	r2, [r4, #13]
   147d2:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   147d6:	f3c3 0582 	ubfx	r5, r3, #2, #3
   147da:	402a      	ands	r2, r5
   147dc:	f362 0384 	bfi	r3, r2, #2, #3
   147e0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   147e4:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   147e8:	7b22      	ldrb	r2, [r4, #12]
   147ea:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   147ee:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   147f2:	f362 1347 	bfi	r3, r2, #5, #3
   147f6:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   147fa:	2400      	movs	r4, #0
   147fc:	f7ff b964 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   14800:	3b01      	subs	r3, #1
   14802:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   14806:	4bbb      	ldr	r3, [pc, #748]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14808:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1480c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   14810:	f36f 0141 	bfc	r1, #1, #1
   14814:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   14818:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   1481c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   14820:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   14824:	f360 0184 	bfi	r1, r0, #2, #3
   14828:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   1482c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   14830:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   14834:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   14838:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   1483c:	f362 1147 	bfi	r1, r2, #5, #3
   14840:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   14844:	e7c1      	b.n	147ca <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   14846:	3a01      	subs	r2, #1
   14848:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   1484c:	4ba9      	ldr	r3, [pc, #676]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1484e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14852:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   14856:	f36f 0141 	bfc	r1, #1, #1
   1485a:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   1485e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   14862:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   14866:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   1486a:	f360 0184 	bfi	r1, r0, #2, #3
   1486e:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   14872:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   14876:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   1487a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   1487e:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   14882:	f361 1047 	bfi	r0, r1, #5, #3
   14886:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   1488a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   1488e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   14892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   14896:	e73d      	b.n	14714 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   14898:	4b96      	ldr	r3, [pc, #600]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1489a:	7bdb      	ldrb	r3, [r3, #15]
   1489c:	b2db      	uxtb	r3, r3
   1489e:	2b04      	cmp	r3, #4
   148a0:	d002      	beq.n	148a8 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   148a2:	2400      	movs	r4, #0
   148a4:	f7ff b910 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   148a8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   148ac:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   148b0:	429a      	cmp	r2, r3
   148b2:	f000 8112 	beq.w	14ada <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   148b6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   148ba:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   148be:	2b02      	cmp	r3, #2
   148c0:	d002      	beq.n	148c8 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   148c2:	2400      	movs	r4, #0
   148c4:	f7ff b900 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   148c8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   148cc:	f043 0303 	orr.w	r3, r3, #3
   148d0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   148d4:	4a87      	ldr	r2, [pc, #540]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   148d6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   148da:	7b61      	ldrb	r1, [r4, #13]
   148dc:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   148e0:	f3c3 0582 	ubfx	r5, r3, #2, #3
   148e4:	4029      	ands	r1, r5
   148e6:	f361 0384 	bfi	r3, r1, #2, #3
   148ea:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   148ee:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   148f2:	7b21      	ldrb	r1, [r4, #12]
   148f4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   148f8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   148fc:	f361 1347 	bfi	r3, r1, #5, #3
   14900:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   14904:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14908:	2400      	movs	r4, #0
   1490a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1490e:	f7ff b8db 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   14912:	4b78      	ldr	r3, [pc, #480]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14914:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   14918:	7b23      	ldrb	r3, [r4, #12]
   1491a:	7b61      	ldrb	r1, [r4, #13]
   1491c:	430b      	orrs	r3, r1
   1491e:	f013 0f07 	tst.w	r3, #7
   14922:	d134      	bne.n	1498e <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14924:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   14928:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1492c:	428b      	cmp	r3, r1
   1492e:	f000 8086 	beq.w	14a3e <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   14932:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14936:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1493a:	2b02      	cmp	r3, #2
   1493c:	d00c      	beq.n	14958 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   1493e:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   14940:	2b00      	cmp	r3, #0
   14942:	f000 80cd 	beq.w	14ae0 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   14946:	4b6b      	ldr	r3, [pc, #428]	; (14af4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14948:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1494c:	2228      	movs	r2, #40	; 0x28
   1494e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   14952:	2400      	movs	r4, #0
   14954:	f7ff b8b8 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14958:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   1495c:	2300      	movs	r3, #0
   1495e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   14962:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   14966:	f013 0f02 	tst.w	r3, #2
   1496a:	d06a      	beq.n	14a42 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1496c:	230c      	movs	r3, #12
   1496e:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   14970:	2300      	movs	r3, #0
   14972:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   14974:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   14978:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1497c:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   1497e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   14982:	f3c2 0202 	ubfx	r2, r2, #0, #3
   14986:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   14988:	2201      	movs	r2, #1
   1498a:	703a      	strb	r2, [r7, #0]
   1498c:	e7d8      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   1498e:	89e3      	ldrh	r3, [r4, #14]
   14990:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   14992:	1a5b      	subs	r3, r3, r1
   14994:	b29b      	uxth	r3, r3
   14996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1499a:	da54      	bge.n	14a46 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1499c:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   149a0:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   149a4:	428b      	cmp	r3, r1
   149a6:	d134      	bne.n	14a12 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   149a8:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   149ac:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   149b0:	4283      	cmp	r3, r0
   149b2:	d005      	beq.n	149c0 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   149b4:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   149b8:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   149bc:	2b02      	cmp	r3, #2
   149be:	d02e      	beq.n	14a1e <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   149c0:	7b60      	ldrb	r0, [r4, #13]
   149c2:	f000 0007 	and.w	r0, r0, #7
   149c6:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   149ca:	f360 0384 	bfi	r3, r0, #2, #3
   149ce:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   149d2:	7b25      	ldrb	r5, [r4, #12]
   149d4:	b2db      	uxtb	r3, r3
   149d6:	f365 1347 	bfi	r3, r5, #5, #3
   149da:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   149de:	89e3      	ldrh	r3, [r4, #14]
   149e0:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   149e4:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   149e8:	f36f 0300 	bfc	r3, #0, #1
   149ec:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   149f0:	2408      	movs	r4, #8
   149f2:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   149f6:	3901      	subs	r1, #1
   149f8:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   149fc:	f003 031c 	and.w	r3, r3, #28
   14a00:	b31b      	cbz	r3, 14a4a <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   14a02:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   14a06:	f360 0302 	bfi	r3, r0, #0, #3
   14a0a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   14a0e:	2300      	movs	r3, #0
   14a10:	e796      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14a12:	4040      	eors	r0, r0
   14a14:	f380 8811 	msr	BASEPRI, r0
   14a18:	f04f 0004 	mov.w	r0, #4
   14a1c:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14a1e:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14a22:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   14a26:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14a2a:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   14a2e:	f363 0041 	bfi	r0, r3, #1, #1
   14a32:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   14a36:	2300      	movs	r3, #0
   14a38:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   14a3c:	e7c0      	b.n	149c0 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   14a3e:	2300      	movs	r3, #0
   14a40:	e77e      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   14a42:	2300      	movs	r3, #0
   14a44:	e77c      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   14a46:	2301      	movs	r3, #1
   14a48:	e77a      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   14a4a:	2300      	movs	r3, #0
   14a4c:	e778      	b.n	14940 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   14a4e:	2b00      	cmp	r3, #0
   14a50:	db49      	blt.n	14ae6 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   14a52:	7b21      	ldrb	r1, [r4, #12]
   14a54:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14a58:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14a5c:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   14a60:	f002 0207 	and.w	r2, r2, #7
   14a64:	4313      	orrs	r3, r2
   14a66:	4219      	tst	r1, r3
   14a68:	d040      	beq.n	14aec <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   14a6a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14a6e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14a72:	429a      	cmp	r2, r3
   14a74:	d002      	beq.n	14a7c <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   14a76:	2400      	movs	r4, #0
   14a78:	f7ff b826 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   14a7c:	2205      	movs	r2, #5
   14a7e:	491e      	ldr	r1, [pc, #120]	; (14af8 <isr_rx_conn_pkt_ctrl+0x10a4>)
   14a80:	f105 0079 	add.w	r0, r5, #121	; 0x79
   14a84:	f7eb fc1c 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   14a88:	2301      	movs	r3, #1
   14a8a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   14a8e:	2302      	movs	r3, #2
   14a90:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   14a94:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14a98:	3b01      	subs	r3, #1
   14a9a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   14a9e:	2400      	movs	r4, #0
   14aa0:	f7ff b812 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   14aa4:	4628      	mov	r0, r5
   14aa6:	f7fd fcd3 	bl	12450 <unknown_rsp_send>
	u8_t nack = 0;
   14aaa:	2400      	movs	r4, #0
		break;
   14aac:	f7ff b80c 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   14ab0:	2400      	movs	r4, #0
   14ab2:	f7ff b809 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ab6:	2400      	movs	r4, #0
   14ab8:	f7ff b806 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14abc:	2400      	movs	r4, #0
   14abe:	f7ff b803 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ac2:	2400      	movs	r4, #0
   14ac4:	f7ff b800 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ac8:	2400      	movs	r4, #0
   14aca:	f7fe bffd 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ace:	2400      	movs	r4, #0
   14ad0:	f7fe bffa 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ad4:	2400      	movs	r4, #0
   14ad6:	f7fe bff7 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ada:	2400      	movs	r4, #0
   14adc:	f7fe bff4 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ae0:	2400      	movs	r4, #0
   14ae2:	f7fe bff1 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14ae6:	2400      	movs	r4, #0
   14ae8:	f7fe bfee 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14aec:	2400      	movs	r4, #0
   14aee:	f7fe bfeb 	b.w	13ac8 <isr_rx_conn_pkt_ctrl+0x74>
   14af2:	bf00      	nop
   14af4:	2000144c 	.word	0x2000144c
   14af8:	20001562 	.word	0x20001562

00014afc <packet_rx_enqueue>:
{
   14afc:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   14afe:	4a1a      	ldr	r2, [pc, #104]	; (14b68 <packet_rx_enqueue+0x6c>)
   14b00:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14b04:	b2db      	uxtb	r3, r3
   14b06:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   14b0a:	4293      	cmp	r3, r2
   14b0c:	d01d      	beq.n	14b4a <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b0e:	4a16      	ldr	r2, [pc, #88]	; (14b68 <packet_rx_enqueue+0x6c>)
   14b10:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   14b14:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   14b18:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   14b1c:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   14b1e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14b22:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   14b24:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14b28:	3301      	adds	r3, #1
   14b2a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   14b2c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   14b30:	4293      	cmp	r3, r2
   14b32:	d010      	beq.n	14b56 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   14b34:	4a0c      	ldr	r2, [pc, #48]	; (14b68 <packet_rx_enqueue+0x6c>)
   14b36:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   14b3a:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14b3e:	f7fb f800 	bl	fb42 <memq_enqueue>
	LL_ASSERT(link);
   14b42:	b150      	cbz	r0, 14b5a <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   14b44:	f7fe f871 	bl	12c2a <packet_rx_callback>
   14b48:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   14b4a:	4040      	eors	r0, r0
   14b4c:	f380 8811 	msr	BASEPRI, r0
   14b50:	f04f 0004 	mov.w	r0, #4
   14b54:	df02      	svc	2
		last = 0;
   14b56:	2300      	movs	r3, #0
   14b58:	e7ec      	b.n	14b34 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   14b5a:	4040      	eors	r0, r0
   14b5c:	f380 8811 	msr	BASEPRI, r0
   14b60:	f04f 0004 	mov.w	r0, #4
   14b64:	df02      	svc	2
   14b66:	bf00      	nop
   14b68:	2000144c 	.word	0x2000144c

00014b6c <mayfly_adv_stop>:
{
   14b6c:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   14b6e:	4b1c      	ldr	r3, [pc, #112]	; (14be0 <mayfly_adv_stop+0x74>)
   14b70:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14b74:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14b78:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14b7a:	429a      	cmp	r2, r3
   14b7c:	d31d      	bcc.n	14bba <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   14b7e:	4b18      	ldr	r3, [pc, #96]	; (14be0 <mayfly_adv_stop+0x74>)
   14b80:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14b84:	1ad3      	subs	r3, r2, r3
   14b86:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14b88:	b30b      	cbz	r3, 14bce <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   14b8a:	4b15      	ldr	r3, [pc, #84]	; (14be0 <mayfly_adv_stop+0x74>)
   14b8c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14b90:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14b94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   14b98:	b1dc      	cbz	r4, 14bd2 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b9e:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14ba0:	2306      	movs	r3, #6
   14ba2:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   14ba4:	221d      	movs	r2, #29
   14ba6:	2100      	movs	r1, #0
   14ba8:	f104 000b 	add.w	r0, r4, #11
   14bac:	f015 ff48 	bl	2aa40 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   14bb0:	233c      	movs	r3, #60	; 0x3c
   14bb2:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   14bb4:	f7ff ffa2 	bl	14afc <packet_rx_enqueue>
   14bb8:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   14bba:	4909      	ldr	r1, [pc, #36]	; (14be0 <mayfly_adv_stop+0x74>)
   14bbc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14bc0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14bc4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14bc6:	fa52 f383 	uxtab	r3, r2, r3
   14bca:	b2db      	uxtb	r3, r3
   14bcc:	e7dc      	b.n	14b88 <mayfly_adv_stop+0x1c>
		return 0;
   14bce:	2400      	movs	r4, #0
   14bd0:	e7e2      	b.n	14b98 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   14bd2:	4040      	eors	r0, r0
   14bd4:	f380 8811 	msr	BASEPRI, r0
   14bd8:	f04f 0004 	mov.w	r0, #4
   14bdc:	df02      	svc	2
   14bde:	bf00      	nop
   14be0:	2000144c 	.word	0x2000144c

00014be4 <terminate_ind_rx_enqueue>:
{
   14be4:	b510      	push	{r4, lr}
   14be6:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14be8:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   14bec:	b1bc      	cbz	r4, 14c1e <terminate_ind_rx_enqueue+0x3a>
   14bee:	30b4      	adds	r0, #180	; 0xb4
   14bf0:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   14bf2:	8c19      	ldrh	r1, [r3, #32]
   14bf4:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14bf8:	2107      	movs	r1, #7
   14bfa:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   14bfe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   14c02:	4a0d      	ldr	r2, [pc, #52]	; (14c38 <terminate_ind_rx_enqueue+0x54>)
   14c04:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14c08:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   14c0c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14c10:	4621      	mov	r1, r4
   14c12:	f7fa ff96 	bl	fb42 <memq_enqueue>
	LL_ASSERT(link);
   14c16:	b140      	cbz	r0, 14c2a <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   14c18:	f7fe f807 	bl	12c2a <packet_rx_callback>
   14c1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14c1e:	4040      	eors	r0, r0
   14c20:	f380 8811 	msr	BASEPRI, r0
   14c24:	f04f 0004 	mov.w	r0, #4
   14c28:	df02      	svc	2
	LL_ASSERT(link);
   14c2a:	4040      	eors	r0, r0
   14c2c:	f380 8811 	msr	BASEPRI, r0
   14c30:	f04f 0004 	mov.w	r0, #4
   14c34:	df02      	svc	2
   14c36:	bf00      	nop
   14c38:	2000144c 	.word	0x2000144c

00014c3c <isr_rx_scan_report>:
{
   14c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   14c40:	4b31      	ldr	r3, [pc, #196]	; (14d08 <isr_rx_scan_report+0xcc>)
   14c42:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14c46:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14c4a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14c4c:	429c      	cmp	r4, r3
   14c4e:	d327      	bcc.n	14ca0 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   14c50:	4b2d      	ldr	r3, [pc, #180]	; (14d08 <isr_rx_scan_report+0xcc>)
   14c52:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14c56:	1ae3      	subs	r3, r4, r3
   14c58:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14c5a:	2b02      	cmp	r3, #2
   14c5c:	d92a      	bls.n	14cb4 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   14c5e:	4b2a      	ldr	r3, [pc, #168]	; (14d08 <isr_rx_scan_report+0xcc>)
   14c60:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   14c64:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14c68:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   14c6c:	2c00      	cmp	r4, #0
   14c6e:	d047      	beq.n	14d00 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c74:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   14c76:	4b24      	ldr	r3, [pc, #144]	; (14d08 <isr_rx_scan_report+0xcc>)
   14c78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14c7c:	f013 0f07 	tst.w	r3, #7
   14c80:	d020      	beq.n	14cc4 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   14c82:	4b21      	ldr	r3, [pc, #132]	; (14d08 <isr_rx_scan_report+0xcc>)
   14c84:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14c88:	f003 0307 	and.w	r3, r3, #7
   14c8c:	2b01      	cmp	r3, #1
   14c8e:	d013      	beq.n	14cb8 <isr_rx_scan_report+0x7c>
   14c90:	2b04      	cmp	r3, #4
   14c92:	d014      	beq.n	14cbe <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   14c94:	4040      	eors	r0, r0
   14c96:	f380 8811 	msr	BASEPRI, r0
   14c9a:	f04f 0004 	mov.w	r0, #4
   14c9e:	df02      	svc	2
		return (_radio.packet_rx_count -
   14ca0:	4d19      	ldr	r5, [pc, #100]	; (14d08 <isr_rx_scan_report+0xcc>)
   14ca2:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   14ca6:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14caa:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   14cac:	fa54 f383 	uxtab	r3, r4, r3
   14cb0:	b2db      	uxtb	r3, r3
   14cb2:	e7d2      	b.n	14c5a <isr_rx_scan_report+0x1e>
		return 0;
   14cb4:	2400      	movs	r4, #0
   14cb6:	e7d9      	b.n	14c6c <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   14cb8:	2303      	movs	r3, #3
   14cba:	7123      	strb	r3, [r4, #4]
			break;
   14cbc:	e004      	b.n	14cc8 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   14cbe:	2304      	movs	r3, #4
   14cc0:	7123      	strb	r3, [r4, #4]
			break;
   14cc2:	e001      	b.n	14cc8 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   14cc4:	2302      	movs	r3, #2
   14cc6:	7123      	strb	r3, [r4, #4]
   14cc8:	4615      	mov	r5, r2
   14cca:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   14ccc:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   14cd0:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14cd4:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   14cd8:	b968      	cbnz	r0, 14cf6 <isr_rx_scan_report+0xba>
   14cda:	207f      	movs	r0, #127	; 0x7f
   14cdc:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   14ce0:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14ce2:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   14ce4:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14ce6:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14ce8:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14cea:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   14cec:	f7ff ff06 	bl	14afc <packet_rx_enqueue>
	return 0;
   14cf0:	2000      	movs	r0, #0
   14cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   14cf6:	f7fb f949 	bl	ff8c <radio_rssi_get>
			     pdu_adv_rx->len] =
   14cfa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   14cfe:	e7ed      	b.n	14cdc <isr_rx_scan_report+0xa0>
		return 1;
   14d00:	2001      	movs	r0, #1
}
   14d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d06:	bf00      	nop
   14d08:	2000144c 	.word	0x2000144c

00014d0c <isr_rx_conn>:
{
   14d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d10:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   14d12:	2300      	movs	r3, #0
   14d14:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   14d18:	4bc1      	ldr	r3, [pc, #772]	; (15020 <isr_rx_conn+0x314>)
   14d1a:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   14d1e:	3201      	adds	r2, #1
   14d20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14d24:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14d28:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14d2c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14d30:	2301      	movs	r3, #1
   14d32:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   14d34:	4607      	mov	r7, r0
   14d36:	2800      	cmp	r0, #0
   14d38:	d143      	bne.n	14dc2 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   14d3a:	4bb9      	ldr	r3, [pc, #740]	; (15020 <isr_rx_conn+0x314>)
   14d3c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   14d40:	b91b      	cbnz	r3, 14d4a <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   14d42:	2202      	movs	r2, #2
   14d44:	4bb6      	ldr	r3, [pc, #728]	; (15020 <isr_rx_conn+0x314>)
   14d46:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   14d4a:	4bb5      	ldr	r3, [pc, #724]	; (15020 <isr_rx_conn+0x314>)
   14d4c:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   14d50:	3c01      	subs	r4, #1
   14d52:	b2e4      	uxtb	r4, r4
   14d54:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   14d58:	fab4 f484 	clz	r4, r4
   14d5c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   14d5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14d62:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   14d66:	2a00      	cmp	r2, #0
   14d68:	f040 8387 	bne.w	1547a <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   14d6c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   14d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   14d72:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   14d74:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 15020 <isr_rx_conn+0x314>
   14d78:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14d7c:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   14d80:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   14d84:	a903      	add	r1, sp, #12
   14d86:	f7fe f8ef 	bl	12f68 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d8a:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   14d8e:	2b03      	cmp	r3, #3
   14d90:	f000 8376 	beq.w	15480 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d94:	2c00      	cmp	r4, #0
   14d96:	f040 8372 	bne.w	1547e <isr_rx_conn+0x772>
   14d9a:	b147      	cbz	r7, 14dae <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14d9c:	7a2b      	ldrb	r3, [r5, #8]
   14d9e:	f013 0f10 	tst.w	r3, #16
   14da2:	d104      	bne.n	14dae <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   14da4:	9b03      	ldr	r3, [sp, #12]
   14da6:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14da8:	2b00      	cmp	r3, #0
   14daa:	f000 83aa 	beq.w	15502 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   14dae:	4b9c      	ldr	r3, [pc, #624]	; (15020 <isr_rx_conn+0x314>)
   14db0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14db4:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   14db8:	2b00      	cmp	r3, #0
   14dba:	f000 83a4 	beq.w	15506 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   14dbe:	2303      	movs	r3, #3
   14dc0:	e35e      	b.n	15480 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   14dc2:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14dc6:	7a2a      	ldrb	r2, [r5, #8]
   14dc8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14dcc:	4b94      	ldr	r3, [pc, #592]	; (15020 <isr_rx_conn+0x314>)
   14dce:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14dd2:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14dd6:	f003 0301 	and.w	r3, r3, #1
   14dda:	429a      	cmp	r2, r3
   14ddc:	f000 81cd 	beq.w	1517a <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   14de0:	f083 0301 	eor.w	r3, r3, #1
   14de4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14de8:	f363 0200 	bfi	r2, r3, #0, #1
   14dec:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14df0:	4b8b      	ldr	r3, [pc, #556]	; (15020 <isr_rx_conn+0x314>)
   14df2:	7bdb      	ldrb	r3, [r3, #15]
   14df4:	b2db      	uxtb	r3, r3
   14df6:	2b03      	cmp	r3, #3
   14df8:	d02c      	beq.n	14e54 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   14dfa:	4b89      	ldr	r3, [pc, #548]	; (15020 <isr_rx_conn+0x314>)
   14dfc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14e00:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14e04:	f012 0f80 	tst.w	r2, #128	; 0x80
   14e08:	f040 81ae 	bne.w	15168 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   14e0c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   14e10:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   14e14:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   14e18:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   14e1c:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   14e20:	2c00      	cmp	r4, #0
   14e22:	f000 8145 	beq.w	150b0 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   14e26:	f012 0f20 	tst.w	r2, #32
   14e2a:	d00a      	beq.n	14e42 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   14e2c:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   14e30:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   14e34:	3001      	adds	r0, #1
   14e36:	f141 0100 	adc.w	r1, r1, #0
   14e3a:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   14e3e:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14e42:	f81c 300e 	ldrb.w	r3, [ip, lr]
   14e46:	f003 0303 	and.w	r3, r3, #3
   14e4a:	2b03      	cmp	r3, #3
   14e4c:	d00c      	beq.n	14e68 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   14e4e:	f04f 0900 	mov.w	r9, #0
   14e52:	e12e      	b.n	150b2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   14e54:	4b72      	ldr	r3, [pc, #456]	; (15020 <isr_rx_conn+0x314>)
   14e56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14e5a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   14e5e:	f043 0301 	orr.w	r3, r3, #1
   14e62:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   14e66:	e7c8      	b.n	14dfa <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   14e68:	f899 3003 	ldrb.w	r3, [r9, #3]
   14e6c:	3b02      	subs	r3, #2
   14e6e:	2b16      	cmp	r3, #22
   14e70:	f200 8118 	bhi.w	150a4 <isr_rx_conn+0x398>
   14e74:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e78:	00330017 	.word	0x00330017
   14e7c:	01160057 	.word	0x01160057
   14e80:	01160116 	.word	0x01160116
   14e84:	01160116 	.word	0x01160116
   14e88:	007d0063 	.word	0x007d0063
   14e8c:	00970116 	.word	0x00970116
   14e90:	01160116 	.word	0x01160116
   14e94:	01160116 	.word	0x01160116
   14e98:	01160116 	.word	0x01160116
   14e9c:	011600af 	.word	0x011600af
   14ea0:	00e000d6 	.word	0x00e000d6
   14ea4:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   14ea6:	2203      	movs	r2, #3
   14ea8:	4b5d      	ldr	r3, [pc, #372]	; (15020 <isr_rx_conn+0x314>)
   14eaa:	741a      	strb	r2, [r3, #16]
		radio_disable();
   14eac:	f7fa fff6 	bl	fe9c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14eb0:	f7fb f80e 	bl	fed0 <radio_is_ready>
   14eb4:	b958      	cbnz	r0, 14ece <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14eb6:	4b5a      	ldr	r3, [pc, #360]	; (15020 <isr_rx_conn+0x314>)
   14eb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   14ebc:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14ec0:	2913      	cmp	r1, #19
   14ec2:	d00a      	beq.n	14eda <isr_rx_conn+0x1ce>
   14ec4:	f7ff fe8e 	bl	14be4 <terminate_ind_rx_enqueue>
		terminate = 1;
   14ec8:	f04f 0901 	mov.w	r9, #1
   14ecc:	e0f1      	b.n	150b2 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   14ece:	4040      	eors	r0, r0
   14ed0:	f380 8811 	msr	BASEPRI, r0
   14ed4:	f04f 0004 	mov.w	r0, #4
   14ed8:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14eda:	2116      	movs	r1, #22
   14edc:	e7f2      	b.n	14ec4 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   14ede:	f8df a140 	ldr.w	sl, [pc, #320]	; 15020 <isr_rx_conn+0x314>
   14ee2:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14ee6:	2208      	movs	r2, #8
   14ee8:	f109 010e 	add.w	r1, r9, #14
   14eec:	3093      	adds	r0, #147	; 0x93
   14eee:	f7eb f9e7 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14ef2:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14ef6:	2204      	movs	r2, #4
   14ef8:	f109 0116 	add.w	r1, r9, #22
   14efc:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14f00:	f7eb f9de 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14f04:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   14f08:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14f0c:	f043 0308 	orr.w	r3, r3, #8
   14f10:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14f14:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14f18:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14f20:	f04f 0900 	mov.w	r9, #0
   14f24:	e0c5      	b.n	150b2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   14f26:	4b3e      	ldr	r3, [pc, #248]	; (15020 <isr_rx_conn+0x314>)
   14f28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14f2c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14f30:	f043 0308 	orr.w	r3, r3, #8
   14f34:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   14f38:	f04f 0900 	mov.w	r9, #0
   14f3c:	e0b9      	b.n	150b2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   14f3e:	4b38      	ldr	r3, [pc, #224]	; (15020 <isr_rx_conn+0x314>)
   14f40:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14f44:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14f48:	f042 0208 	orr.w	r2, r2, #8
   14f4c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14f50:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14f54:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f5c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14f60:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14f64:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14f6c:	f04f 0900 	mov.w	r9, #0
   14f70:	e09f      	b.n	150b2 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   14f72:	4b2b      	ldr	r3, [pc, #172]	; (15020 <isr_rx_conn+0x314>)
   14f74:	7bdb      	ldrb	r3, [r3, #15]
   14f76:	b2db      	uxtb	r3, r3
   14f78:	2b04      	cmp	r3, #4
   14f7a:	d00b      	beq.n	14f94 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   14f7c:	4b28      	ldr	r3, [pc, #160]	; (15020 <isr_rx_conn+0x314>)
   14f7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14f82:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14f86:	f043 0308 	orr.w	r3, r3, #8
   14f8a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   14f8e:	f04f 0900 	mov.w	r9, #0
   14f92:	e08e      	b.n	150b2 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   14f94:	4631      	mov	r1, r6
   14f96:	4b22      	ldr	r3, [pc, #136]	; (15020 <isr_rx_conn+0x314>)
   14f98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14f9c:	f7fe fd38 	bl	13a10 <enc_req_reused_send>
			*node_tx = NULL;
   14fa0:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14fa2:	46b1      	mov	r9, r6
   14fa4:	e085      	b.n	150b2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   14fa6:	4b1e      	ldr	r3, [pc, #120]	; (15020 <isr_rx_conn+0x314>)
   14fa8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14fac:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14fb0:	f36f 0182 	bfc	r1, #2, #1
   14fb4:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14fb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14fbc:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14fc0:	f36f 01c3 	bfc	r1, #3, #1
   14fc4:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14fc8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14fcc:	f04f 0900 	mov.w	r9, #0
   14fd0:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   14fd4:	e06d      	b.n	150b2 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   14fd6:	4b12      	ldr	r3, [pc, #72]	; (15020 <isr_rx_conn+0x314>)
   14fd8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14fdc:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   14fe0:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   14fe4:	4291      	cmp	r1, r2
   14fe6:	d060      	beq.n	150aa <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   14fe8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14fec:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   14ff0:	2a01      	cmp	r2, #1
   14ff2:	d002      	beq.n	14ffa <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   14ff4:	f04f 0900 	mov.w	r9, #0
   14ff8:	e05b      	b.n	150b2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   14ffa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14ffe:	f042 0208 	orr.w	r2, r2, #8
   15002:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   15006:	4b06      	ldr	r3, [pc, #24]	; (15020 <isr_rx_conn+0x314>)
   15008:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1500c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   15010:	2102      	movs	r1, #2
   15012:	f361 0201 	bfi	r2, r1, #0, #2
   15016:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   1501a:	f04f 0900 	mov.w	r9, #0
   1501e:	e048      	b.n	150b2 <isr_rx_conn+0x3a6>
   15020:	2000144c 	.word	0x2000144c
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15024:	4bbe      	ldr	r3, [pc, #760]	; (15320 <isr_rx_conn+0x614>)
   15026:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1502a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   1502e:	2102      	movs	r1, #2
   15030:	f361 0201 	bfi	r2, r1, #0, #2
   15034:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   15038:	4bb9      	ldr	r3, [pc, #740]	; (15320 <isr_rx_conn+0x614>)
   1503a:	7bdb      	ldrb	r3, [r3, #15]
   1503c:	b2db      	uxtb	r3, r3
   1503e:	2b03      	cmp	r3, #3
   15040:	d002      	beq.n	15048 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   15042:	f04f 0900 	mov.w	r9, #0
   15046:	e034      	b.n	150b2 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   15048:	4ab6      	ldr	r2, [pc, #728]	; (15324 <isr_rx_conn+0x618>)
   1504a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1504e:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   15052:	4bb3      	ldr	r3, [pc, #716]	; (15320 <isr_rx_conn+0x614>)
   15054:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   15058:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   1505c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15060:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   15064:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   15068:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   1506a:	a904      	add	r1, sp, #16
   1506c:	440b      	add	r3, r1
   1506e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   15072:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   15076:	f361 0302 	bfi	r3, r1, #0, #3
   1507a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   1507e:	f04f 0900 	mov.w	r9, #0
   15082:	e016      	b.n	150b2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   15084:	4ba6      	ldr	r3, [pc, #664]	; (15320 <isr_rx_conn+0x614>)
   15086:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   1508a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1508e:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   15092:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   15096:	f362 0102 	bfi	r1, r2, #0, #3
   1509a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   1509e:	f04f 0900 	mov.w	r9, #0
   150a2:	e006      	b.n	150b2 <isr_rx_conn+0x3a6>
   150a4:	f04f 0900 	mov.w	r9, #0
   150a8:	e003      	b.n	150b2 <isr_rx_conn+0x3a6>
   150aa:	f04f 0900 	mov.w	r9, #0
   150ae:	e000      	b.n	150b2 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   150b0:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   150b2:	4b9b      	ldr	r3, [pc, #620]	; (15320 <isr_rx_conn+0x614>)
   150b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   150b8:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   150bc:	4414      	add	r4, r2
   150be:	b2e4      	uxtb	r4, r4
   150c0:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   150c4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   150c8:	429c      	cmp	r4, r3
   150ca:	d01c      	beq.n	15106 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   150cc:	2600      	movs	r6, #0
	if (terminate) {
   150ce:	f1b9 0f00 	cmp.w	r9, #0
   150d2:	d155      	bne.n	15180 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   150d4:	7a2a      	ldrb	r2, [r5, #8]
   150d6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   150da:	4b91      	ldr	r3, [pc, #580]	; (15320 <isr_rx_conn+0x614>)
   150dc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   150e0:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   150e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   150e8:	429a      	cmp	r2, r3
   150ea:	d053      	beq.n	15194 <isr_rx_conn+0x488>
	return 0;
   150ec:	2300      	movs	r3, #0
		if (terminate) {
   150ee:	2b00      	cmp	r3, #0
   150f0:	f040 81f5 	bne.w	154de <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   150f4:	4b8a      	ldr	r3, [pc, #552]	; (15320 <isr_rx_conn+0x614>)
   150f6:	2400      	movs	r4, #0
   150f8:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   150fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15100:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   15104:	e636      	b.n	14d74 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   15106:	4b86      	ldr	r3, [pc, #536]	; (15320 <isr_rx_conn+0x614>)
   15108:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   1510c:	2200      	movs	r2, #0
   1510e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   15112:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   15116:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1511a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1511e:	428a      	cmp	r2, r1
   15120:	d007      	beq.n	15132 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   15122:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   15126:	428a      	cmp	r2, r1
   15128:	d01a      	beq.n	15160 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1512a:	6812      	ldr	r2, [r2, #0]
   1512c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15130:	e7cd      	b.n	150ce <isr_rx_conn+0x3c2>
		if (node_tx) {
   15132:	2e00      	cmp	r6, #0
   15134:	d0cb      	beq.n	150ce <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   15136:	6812      	ldr	r2, [r2, #0]
   15138:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   1513c:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   15140:	4281      	cmp	r1, r0
   15142:	d007      	beq.n	15154 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   15144:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   15148:	4977      	ldr	r1, [pc, #476]	; (15328 <isr_rx_conn+0x61c>)
   1514a:	4630      	mov	r0, r6
   1514c:	f7fa fcad 	bl	faaa <mem_release>
	return NULL;
   15150:	2600      	movs	r6, #0
   15152:	e7bc      	b.n	150ce <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   15154:	2200      	movs	r2, #0
   15156:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   1515a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1515e:	e7f3      	b.n	15148 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   15160:	6809      	ldr	r1, [r1, #0]
   15162:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   15166:	e7e0      	b.n	1512a <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   15168:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1516c:	f36f 12c7 	bfc	r2, #7, #1
   15170:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   15174:	2600      	movs	r6, #0
	u8_t terminate = 0;
   15176:	46b1      	mov	r9, r6
   15178:	e7a9      	b.n	150ce <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   1517a:	2600      	movs	r6, #0
	u8_t terminate = 0;
   1517c:	46b1      	mov	r9, r6
   1517e:	e7a6      	b.n	150ce <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   15180:	4c67      	ldr	r4, [pc, #412]	; (15320 <isr_rx_conn+0x614>)
   15182:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   15186:	f7fd fdd9 	bl	12d3c <connection_release>
		_radio.conn_curr = NULL;
   1518a:	2300      	movs	r3, #0
   1518c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   15190:	464b      	mov	r3, r9
   15192:	e7ac      	b.n	150ee <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   15194:	4a62      	ldr	r2, [pc, #392]	; (15320 <isr_rx_conn+0x614>)
   15196:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1519a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   1519e:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   151a0:	4290      	cmp	r0, r2
   151a2:	d347      	bcc.n	15234 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   151a4:	4b5e      	ldr	r3, [pc, #376]	; (15320 <isr_rx_conn+0x614>)
   151a6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   151aa:	1ac3      	subs	r3, r0, r3
   151ac:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   151ae:	2b02      	cmp	r3, #2
   151b0:	d94a      	bls.n	15248 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   151b2:	4b5b      	ldr	r3, [pc, #364]	; (15320 <isr_rx_conn+0x614>)
   151b4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   151b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   151bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   151c0:	2b00      	cmp	r3, #0
   151c2:	f000 814e 	beq.w	15462 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   151c6:	4b56      	ldr	r3, [pc, #344]	; (15320 <isr_rx_conn+0x614>)
   151c8:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   151cc:	2b00      	cmp	r3, #0
   151ce:	d045      	beq.n	1525c <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   151d0:	4b53      	ldr	r3, [pc, #332]	; (15320 <isr_rx_conn+0x614>)
   151d2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   151d6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   151da:	429a      	cmp	r2, r3
   151dc:	d036      	beq.n	1524c <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   151de:	4b50      	ldr	r3, [pc, #320]	; (15320 <isr_rx_conn+0x614>)
   151e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   151e4:	429a      	cmp	r2, r3
   151e6:	f000 813e 	beq.w	15466 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   151ea:	4a4d      	ldr	r2, [pc, #308]	; (15320 <isr_rx_conn+0x614>)
   151ec:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   151f0:	b2db      	uxtb	r3, r3
   151f2:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   151f6:	4293      	cmp	r3, r2
   151f8:	f000 8137 	beq.w	1546a <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   151fc:	4b48      	ldr	r3, [pc, #288]	; (15320 <isr_rx_conn+0x614>)
   151fe:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   15202:	b92b      	cbnz	r3, 15210 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   15204:	4b46      	ldr	r3, [pc, #280]	; (15320 <isr_rx_conn+0x614>)
   15206:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   1520a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   1520c:	429a      	cmp	r2, r3
   1520e:	d025      	beq.n	1525c <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   15210:	4b43      	ldr	r3, [pc, #268]	; (15320 <isr_rx_conn+0x614>)
   15212:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   15216:	2b00      	cmp	r3, #0
   15218:	f000 8129 	beq.w	1546e <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1521c:	4b40      	ldr	r3, [pc, #256]	; (15320 <isr_rx_conn+0x614>)
   1521e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   15222:	32b7      	adds	r2, #183	; 0xb7
   15224:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15228:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   1522a:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   1522c:	429a      	cmp	r2, r3
   1522e:	d015      	beq.n	1525c <isr_rx_conn+0x550>
	return 0;
   15230:	2300      	movs	r3, #0
   15232:	e75c      	b.n	150ee <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   15234:	4a3a      	ldr	r2, [pc, #232]	; (15320 <isr_rx_conn+0x614>)
   15236:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   1523a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1523e:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   15240:	fa50 f383 	uxtab	r3, r0, r3
   15244:	b2db      	uxtb	r3, r3
   15246:	e7b2      	b.n	151ae <isr_rx_conn+0x4a2>
		return 0;
   15248:	2300      	movs	r3, #0
   1524a:	e7b9      	b.n	151c0 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   1524c:	4834      	ldr	r0, [pc, #208]	; (15320 <isr_rx_conn+0x614>)
   1524e:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   15252:	b2db      	uxtb	r3, r3
   15254:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   15258:	4283      	cmp	r3, r0
   1525a:	d1c0      	bne.n	151de <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   1525c:	7a68      	ldrb	r0, [r5, #9]
   1525e:	2800      	cmp	r0, #0
   15260:	f000 80b8 	beq.w	153d4 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   15264:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   15268:	f013 0f10 	tst.w	r3, #16
   1526c:	d133      	bne.n	152d6 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   1526e:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   15270:	4b2b      	ldr	r3, [pc, #172]	; (15320 <isr_rx_conn+0x614>)
   15272:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15276:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   1527a:	f013 0f10 	tst.w	r3, #16
   1527e:	d135      	bne.n	152ec <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   15280:	4b27      	ldr	r3, [pc, #156]	; (15320 <isr_rx_conn+0x614>)
   15282:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15286:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   1528a:	f012 0f04 	tst.w	r2, #4
   1528e:	f000 8082 	beq.w	15396 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   15292:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   15296:	7a2a      	ldrb	r2, [r5, #8]
   15298:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1529c:	2a03      	cmp	r2, #3
   1529e:	d02a      	beq.n	152f6 <isr_rx_conn+0x5ea>
   152a0:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   152a2:	2a00      	cmp	r2, #0
   152a4:	d077      	beq.n	15396 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   152a6:	2203      	movs	r2, #3
   152a8:	4b1d      	ldr	r3, [pc, #116]	; (15320 <isr_rx_conn+0x614>)
   152aa:	741a      	strb	r2, [r3, #16]
				radio_disable();
   152ac:	f7fa fdf6 	bl	fe9c <radio_disable>
				LL_ASSERT(!radio_is_ready());
   152b0:	f7fa fe0e 	bl	fed0 <radio_is_ready>
   152b4:	2800      	cmp	r0, #0
   152b6:	d168      	bne.n	1538a <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   152b8:	4c19      	ldr	r4, [pc, #100]	; (15320 <isr_rx_conn+0x614>)
   152ba:	213d      	movs	r1, #61	; 0x3d
   152bc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   152c0:	f7ff fc90 	bl	14be4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   152c4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   152c8:	f7fd fd38 	bl	12d3c <connection_release>
				_radio.conn_curr = NULL;
   152cc:	2300      	movs	r3, #0
   152ce:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   152d2:	2301      	movs	r3, #1
   152d4:	e70b      	b.n	150ee <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   152d6:	f7fb f823 	bl	10320 <radio_ccm_is_done>
				LL_ASSERT(done);
   152da:	b108      	cbz	r0, 152e0 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   152dc:	2401      	movs	r4, #1
   152de:	e7c7      	b.n	15270 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   152e0:	4040      	eors	r0, r0
   152e2:	f380 8811 	msr	BASEPRI, r0
   152e6:	f04f 0004 	mov.w	r0, #4
   152ea:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   152ec:	f7fb f838 	bl	10360 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   152f0:	2800      	cmp	r0, #0
   152f2:	d0d8      	beq.n	152a6 <isr_rx_conn+0x59a>
   152f4:	e7c4      	b.n	15280 <isr_rx_conn+0x574>
   152f6:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   152fa:	2a00      	cmp	r2, #0
   152fc:	db1d      	blt.n	1533a <isr_rx_conn+0x62e>
		((!conn->refresh &&
   152fe:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   15302:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   15306:	d111      	bne.n	1532c <isr_rx_conn+0x620>
		((!conn->refresh &&
   15308:	2902      	cmp	r1, #2
   1530a:	d00f      	beq.n	1532c <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1530c:	2905      	cmp	r1, #5
   1530e:	d014      	beq.n	1533a <isr_rx_conn+0x62e>
   15310:	2906      	cmp	r1, #6
   15312:	d012      	beq.n	1533a <isr_rx_conn+0x62e>
   15314:	290d      	cmp	r1, #13
   15316:	d010      	beq.n	1533a <isr_rx_conn+0x62e>
   15318:	2911      	cmp	r1, #17
   1531a:	d00e      	beq.n	1533a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1531c:	2201      	movs	r2, #1
   1531e:	e7c0      	b.n	152a2 <isr_rx_conn+0x596>
   15320:	2000144c 	.word	0x2000144c
   15324:	0002ee00 	.word	0x0002ee00
   15328:	200015a4 	.word	0x200015a4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1532c:	b128      	cbz	r0, 1533a <isr_rx_conn+0x62e>
		 (conn->refresh &&
   1532e:	2902      	cmp	r1, #2
   15330:	d003      	beq.n	1533a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15332:	290b      	cmp	r1, #11
   15334:	d001      	beq.n	1533a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15336:	2904      	cmp	r1, #4
   15338:	d1e8      	bne.n	1530c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1533a:	2a00      	cmp	r2, #0
   1533c:	db01      	blt.n	15342 <isr_rx_conn+0x636>
   1533e:	2200      	movs	r2, #0
   15340:	e7af      	b.n	152a2 <isr_rx_conn+0x596>
		((!conn->refresh &&
   15342:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   15346:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1534a:	d109      	bne.n	15360 <isr_rx_conn+0x654>
		((!conn->refresh &&
   1534c:	2902      	cmp	r1, #2
   1534e:	d007      	beq.n	15360 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15350:	2906      	cmp	r1, #6
   15352:	d014      	beq.n	1537e <isr_rx_conn+0x672>
   15354:	290d      	cmp	r1, #13
   15356:	d014      	beq.n	15382 <isr_rx_conn+0x676>
   15358:	2911      	cmp	r1, #17
   1535a:	d114      	bne.n	15386 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1535c:	2200      	movs	r2, #0
   1535e:	e7a0      	b.n	152a2 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15360:	b13a      	cbz	r2, 15372 <isr_rx_conn+0x666>
		 (conn->refresh &&
   15362:	2902      	cmp	r1, #2
   15364:	d007      	beq.n	15376 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15366:	290b      	cmp	r1, #11
   15368:	d007      	beq.n	1537a <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1536a:	2903      	cmp	r1, #3
   1536c:	d1f0      	bne.n	15350 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1536e:	2200      	movs	r2, #0
   15370:	e797      	b.n	152a2 <isr_rx_conn+0x596>
   15372:	2200      	movs	r2, #0
   15374:	e795      	b.n	152a2 <isr_rx_conn+0x596>
   15376:	2200      	movs	r2, #0
   15378:	e793      	b.n	152a2 <isr_rx_conn+0x596>
   1537a:	2200      	movs	r2, #0
   1537c:	e791      	b.n	152a2 <isr_rx_conn+0x596>
   1537e:	2200      	movs	r2, #0
   15380:	e78f      	b.n	152a2 <isr_rx_conn+0x596>
   15382:	2200      	movs	r2, #0
   15384:	e78d      	b.n	152a2 <isr_rx_conn+0x596>
   15386:	2201      	movs	r2, #1
   15388:	e78b      	b.n	152a2 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   1538a:	4040      	eors	r0, r0
   1538c:	f380 8811 	msr	BASEPRI, r0
   15390:	f04f 0004 	mov.w	r0, #4
   15394:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   15396:	2200      	movs	r2, #0
   15398:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   1539c:	4b70      	ldr	r3, [pc, #448]	; (15560 <isr_rx_conn+0x854>)
   1539e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   153a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   153a6:	7a2b      	ldrb	r3, [r5, #8]
   153a8:	f013 0303 	ands.w	r3, r3, #3
   153ac:	d00c      	beq.n	153c8 <isr_rx_conn+0x6bc>
   153ae:	2b02      	cmp	r3, #2
   153b0:	d905      	bls.n	153be <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   153b2:	f10d 010b 	add.w	r1, sp, #11
   153b6:	4628      	mov	r0, r5
   153b8:	f7fe fb4c 	bl	13a54 <isr_rx_conn_pkt_ctrl>
   153bc:	e030      	b.n	15420 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   153be:	2301      	movs	r3, #1
   153c0:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   153c4:	4648      	mov	r0, r9
   153c6:	e02b      	b.n	15420 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   153c8:	4040      	eors	r0, r0
   153ca:	f380 8811 	msr	BASEPRI, r0
   153ce:	f04f 0004 	mov.w	r0, #4
   153d2:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   153d4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   153d8:	f013 0f14 	tst.w	r3, #20
   153dc:	d01f      	beq.n	1541e <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   153de:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   153e2:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   153e4:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   153e6:	42a2      	cmp	r2, r4
   153e8:	dd04      	ble.n	153f4 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   153ea:	1ad3      	subs	r3, r2, r3
   153ec:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   153ee:	3b06      	subs	r3, #6
   153f0:	b29b      	uxth	r3, r3
   153f2:	e000      	b.n	153f6 <isr_rx_conn+0x6ea>
   153f4:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   153f6:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   153fa:	429c      	cmp	r4, r3
   153fc:	d004      	beq.n	15408 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   153fe:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   15402:	2300      	movs	r3, #0
   15404:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   15408:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   1540c:	bb3b      	cbnz	r3, 1545e <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   1540e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   15412:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   15416:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   1541a:	4604      	mov	r4, r0
   1541c:	e000      	b.n	15420 <isr_rx_conn+0x714>
   1541e:	4604      	mov	r4, r0
		if (!nack) {
   15420:	bb38      	cbnz	r0, 15472 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   15422:	4b4f      	ldr	r3, [pc, #316]	; (15560 <isr_rx_conn+0x854>)
   15424:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15428:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1542c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   15430:	f082 0201 	eor.w	r2, r2, #1
   15434:	f362 0341 	bfi	r3, r2, #1, #1
   15438:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   1543c:	b1dc      	cbz	r4, 15476 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   1543e:	4b48      	ldr	r3, [pc, #288]	; (15560 <isr_rx_conn+0x854>)
   15440:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15444:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   15448:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   1544c:	3201      	adds	r2, #1
   1544e:	f143 0300 	adc.w	r3, r3, #0
   15452:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   15456:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   1545a:	2300      	movs	r3, #0
   1545c:	e647      	b.n	150ee <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   1545e:	4604      	mov	r4, r0
   15460:	e7de      	b.n	15420 <isr_rx_conn+0x714>
	return 0;
   15462:	2300      	movs	r3, #0
   15464:	e643      	b.n	150ee <isr_rx_conn+0x3e2>
   15466:	2300      	movs	r3, #0
   15468:	e641      	b.n	150ee <isr_rx_conn+0x3e2>
   1546a:	2300      	movs	r3, #0
   1546c:	e63f      	b.n	150ee <isr_rx_conn+0x3e2>
   1546e:	2300      	movs	r3, #0
   15470:	e63d      	b.n	150ee <isr_rx_conn+0x3e2>
   15472:	2300      	movs	r3, #0
   15474:	e63b      	b.n	150ee <isr_rx_conn+0x3e2>
   15476:	2300      	movs	r3, #0
   15478:	e639      	b.n	150ee <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   1547a:	2600      	movs	r6, #0
   1547c:	e47a      	b.n	14d74 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   1547e:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15480:	4a37      	ldr	r2, [pc, #220]	; (15560 <isr_rx_conn+0x854>)
   15482:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   15484:	2b03      	cmp	r3, #3
   15486:	d040      	beq.n	1550a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   15488:	2096      	movs	r0, #150	; 0x96
   1548a:	f7fa fe0f 	bl	100ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1548e:	4b34      	ldr	r3, [pc, #208]	; (15560 <isr_rx_conn+0x854>)
   15490:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15494:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   15498:	f000 0007 	and.w	r0, r0, #7
   1549c:	f7fa fd54 	bl	ff48 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   154a0:	f7fa febc 	bl	1021c <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   154a4:	9a03      	ldr	r2, [sp, #12]
   154a6:	4b2e      	ldr	r3, [pc, #184]	; (15560 <isr_rx_conn+0x854>)
   154a8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   154ac:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   154b0:	7811      	ldrb	r1, [r2, #0]
   154b2:	f360 01c3 	bfi	r1, r0, #3, #1
   154b6:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   154b8:	9903      	ldr	r1, [sp, #12]
   154ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154be:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   154c2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   154c6:	7808      	ldrb	r0, [r1, #0]
   154c8:	f362 0082 	bfi	r0, r2, #2, #1
   154cc:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   154ce:	9903      	ldr	r1, [sp, #12]
   154d0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   154d4:	f7fd fdde 	bl	13094 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   154d8:	f7fa fcfa 	bl	fed0 <radio_is_ready>
   154dc:	bb38      	cbnz	r0, 1552e <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   154de:	f7fa fe91 	bl	10204 <radio_tmr_aa_restore>
   154e2:	b350      	cbz	r0, 1553a <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   154e4:	4b1e      	ldr	r3, [pc, #120]	; (15560 <isr_rx_conn+0x854>)
   154e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   154ea:	b13b      	cbz	r3, 154fc <isr_rx_conn+0x7f0>
	if (tx_release) {
   154ec:	b11e      	cbz	r6, 154f6 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   154ee:	4631      	mov	r1, r6
   154f0:	8c18      	ldrh	r0, [r3, #32]
   154f2:	f7fd fb9f 	bl	12c34 <pdu_node_tx_release>
	if (rx_enqueue) {
   154f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   154fa:	bb1b      	cbnz	r3, 15544 <isr_rx_conn+0x838>
}
   154fc:	b004      	add	sp, #16
   154fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   15502:	2303      	movs	r3, #3
   15504:	e7bc      	b.n	15480 <isr_rx_conn+0x774>
   15506:	2302      	movs	r3, #2
   15508:	e7ba      	b.n	15480 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   1550a:	7bd3      	ldrb	r3, [r2, #15]
   1550c:	b2db      	uxtb	r3, r3
   1550e:	2b04      	cmp	r3, #4
   15510:	d002      	beq.n	15518 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   15512:	f7fa fd29 	bl	ff68 <radio_switch_complete_and_disable>
   15516:	e7c5      	b.n	154a4 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   15518:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1551c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15520:	f368 12c7 	bfi	r2, r8, #7, #1
   15524:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   15528:	f7fa fcb8 	bl	fe9c <radio_disable>
			goto isr_rx_conn_exit;
   1552c:	e7d7      	b.n	154de <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   1552e:	4040      	eors	r0, r0
   15530:	f380 8811 	msr	BASEPRI, r0
   15534:	f04f 0004 	mov.w	r0, #4
   15538:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   1553a:	f7fa fe57 	bl	101ec <radio_tmr_aa_get>
   1553e:	f7fa fe5b 	bl	101f8 <radio_tmr_aa_save>
   15542:	e7cf      	b.n	154e4 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   15544:	4c06      	ldr	r4, [pc, #24]	; (15560 <isr_rx_conn+0x854>)
   15546:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1554a:	8c18      	ldrh	r0, [r3, #32]
   1554c:	f7fc fdec 	bl	12128 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   15550:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   15554:	8c1b      	ldrh	r3, [r3, #32]
   15556:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   15558:	f7ff fad0 	bl	14afc <packet_rx_enqueue>
	return;
   1555c:	e7ce      	b.n	154fc <isr_rx_conn+0x7f0>
   1555e:	bf00      	nop
   15560:	2000144c 	.word	0x2000144c

00015564 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15564:	6803      	ldr	r3, [r0, #0]
   15566:	2b00      	cmp	r3, #0
   15568:	db00      	blt.n	1556c <prepare_normal_set+0x8>
   1556a:	4770      	bx	lr
{
   1556c:	b530      	push	{r4, r5, lr}
   1556e:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   15570:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   15572:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   15574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   15578:	42a5      	cmp	r5, r4
   1557a:	bf2c      	ite	cs
   1557c:	1b5b      	subcs	r3, r3, r5
   1557e:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   15580:	b29b      	uxth	r3, r3
		ticker_status =
   15582:	9006      	str	r0, [sp, #24]
   15584:	480a      	ldr	r0, [pc, #40]	; (155b0 <prepare_normal_set+0x4c>)
   15586:	9005      	str	r0, [sp, #20]
   15588:	2000      	movs	r0, #0
   1558a:	9004      	str	r0, [sp, #16]
   1558c:	9003      	str	r0, [sp, #12]
   1558e:	9002      	str	r0, [sp, #8]
   15590:	9301      	str	r3, [sp, #4]
   15592:	9300      	str	r3, [sp, #0]
   15594:	4603      	mov	r3, r0
   15596:	f7fb ff89 	bl	114ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1559a:	b108      	cbz	r0, 155a0 <prepare_normal_set+0x3c>
   1559c:	2802      	cmp	r0, #2
   1559e:	d101      	bne.n	155a4 <prepare_normal_set+0x40>
}
   155a0:	b009      	add	sp, #36	; 0x24
   155a2:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   155a4:	4040      	eors	r0, r0
   155a6:	f380 8811 	msr	BASEPRI, r0
   155aa:	f04f 0004 	mov.w	r0, #4
   155ae:	df02      	svc	2
   155b0:	00011e2d 	.word	0x00011e2d

000155b4 <event_common_prepare>:
{
   155b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155b8:	b08a      	sub	sp, #40	; 0x28
   155ba:	4681      	mov	r9, r0
   155bc:	468a      	mov	sl, r1
   155be:	4616      	mov	r6, r2
   155c0:	461f      	mov	r7, r3
   155c2:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   155c6:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   155c8:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   155cc:	2c00      	cmp	r4, #0
   155ce:	db25      	blt.n	1561c <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   155d0:	4544      	cmp	r4, r8
   155d2:	d828      	bhi.n	15626 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   155d4:	4544      	cmp	r4, r8
   155d6:	d251      	bcs.n	1567c <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   155d8:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   155dc:	2300      	movs	r3, #0
   155de:	461a      	mov	r2, r3
   155e0:	4619      	mov	r1, r3
   155e2:	4618      	mov	r0, r3
   155e4:	f7fd fa3a 	bl	12a5c <event_active>
		ticker_status =
   155e8:	f241 43d1 	movw	r3, #5329	; 0x14d1
   155ec:	9308      	str	r3, [sp, #32]
   155ee:	4b5e      	ldr	r3, [pc, #376]	; (15768 <event_common_prepare+0x1b4>)
   155f0:	9307      	str	r3, [sp, #28]
   155f2:	2000      	movs	r0, #0
   155f4:	9006      	str	r0, [sp, #24]
   155f6:	4b5d      	ldr	r3, [pc, #372]	; (1576c <event_common_prepare+0x1b8>)
   155f8:	9305      	str	r3, [sp, #20]
   155fa:	9004      	str	r0, [sp, #16]
   155fc:	9003      	str	r0, [sp, #12]
   155fe:	9002      	str	r0, [sp, #8]
   15600:	9001      	str	r0, [sp, #4]
   15602:	9400      	str	r4, [sp, #0]
   15604:	464b      	mov	r3, r9
   15606:	2201      	movs	r2, #1
   15608:	4601      	mov	r1, r0
   1560a:	f7fb ff01 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1560e:	2800      	cmp	r0, #0
   15610:	f000 8091 	beq.w	15736 <event_common_prepare+0x182>
   15614:	2802      	cmp	r0, #2
   15616:	d12b      	bne.n	15670 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   15618:	4644      	mov	r4, r8
   1561a:	e03b      	b.n	15694 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   1561c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1561e:	4544      	cmp	r4, r8
   15620:	bf38      	it	cc
   15622:	4644      	movcc	r4, r8
   15624:	e7d4      	b.n	155d0 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   15626:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   1562a:	f241 42bc 	movw	r2, #5308	; 0x14bc
   1562e:	9208      	str	r2, [sp, #32]
   15630:	4a4d      	ldr	r2, [pc, #308]	; (15768 <event_common_prepare+0x1b4>)
   15632:	9207      	str	r2, [sp, #28]
   15634:	2000      	movs	r0, #0
   15636:	9006      	str	r0, [sp, #24]
   15638:	4a4d      	ldr	r2, [pc, #308]	; (15770 <event_common_prepare+0x1bc>)
   1563a:	9205      	str	r2, [sp, #20]
   1563c:	9004      	str	r0, [sp, #16]
   1563e:	9003      	str	r0, [sp, #12]
   15640:	9002      	str	r0, [sp, #8]
   15642:	9001      	str	r0, [sp, #4]
   15644:	9300      	str	r3, [sp, #0]
   15646:	464b      	mov	r3, r9
   15648:	2201      	movs	r2, #1
   1564a:	4601      	mov	r1, r0
   1564c:	f7fb fee0 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15650:	b108      	cbz	r0, 15656 <event_common_prepare+0xa2>
   15652:	2802      	cmp	r0, #2
   15654:	d106      	bne.n	15664 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   15656:	2300      	movs	r3, #0
   15658:	461a      	mov	r2, r3
   1565a:	4619      	mov	r1, r3
   1565c:	4618      	mov	r0, r3
   1565e:	f7fd fa0f 	bl	12a80 <event_xtal>
   15662:	e017      	b.n	15694 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15664:	4040      	eors	r0, r0
   15666:	f380 8811 	msr	BASEPRI, r0
   1566a:	f04f 0004 	mov.w	r0, #4
   1566e:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15670:	4040      	eors	r0, r0
   15672:	f380 8811 	msr	BASEPRI, r0
   15676:	f04f 0004 	mov.w	r0, #4
   1567a:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   1567c:	2300      	movs	r3, #0
   1567e:	461a      	mov	r2, r3
   15680:	4619      	mov	r1, r3
   15682:	4618      	mov	r0, r3
   15684:	f7fd f9ea 	bl	12a5c <event_active>
		event_xtal(0, 0, 0, NULL);
   15688:	2300      	movs	r3, #0
   1568a:	461a      	mov	r2, r3
   1568c:	4619      	mov	r1, r3
   1568e:	4618      	mov	r0, r3
   15690:	f7fd f9f6 	bl	12a80 <event_xtal>
	_radio.remainder_anchor = remainder;
   15694:	4b37      	ldr	r3, [pc, #220]	; (15774 <event_common_prepare+0x1c0>)
   15696:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   1569a:	f241 43e9 	movw	r3, #5353	; 0x14e9
   1569e:	9308      	str	r3, [sp, #32]
   156a0:	4b31      	ldr	r3, [pc, #196]	; (15768 <event_common_prepare+0x1b4>)
   156a2:	9307      	str	r3, [sp, #28]
   156a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   156a6:	9306      	str	r3, [sp, #24]
   156a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156aa:	9305      	str	r3, [sp, #20]
   156ac:	2000      	movs	r0, #0
   156ae:	9004      	str	r0, [sp, #16]
   156b0:	9003      	str	r0, [sp, #12]
   156b2:	9002      	str	r0, [sp, #8]
   156b4:	9001      	str	r0, [sp, #4]
   156b6:	9400      	str	r4, [sp, #0]
   156b8:	464b      	mov	r3, r9
   156ba:	4602      	mov	r2, r0
   156bc:	4601      	mov	r1, r0
   156be:	f7fb fea7 	bl	11410 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   156c2:	b108      	cbz	r0, 156c8 <event_common_prepare+0x114>
   156c4:	2802      	cmp	r0, #2
   156c6:	d138      	bne.n	1573a <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   156c8:	2305      	movs	r3, #5
   156ca:	2200      	movs	r2, #0
   156cc:	4611      	mov	r1, r2
   156ce:	4610      	mov	r0, r2
   156d0:	f7fd f93a 	bl	12948 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   156d4:	4b27      	ldr	r3, [pc, #156]	; (15774 <event_common_prepare+0x1c0>)
   156d6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   156da:	4598      	cmp	r8, r3
   156dc:	d01d      	beq.n	1571a <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   156de:	6832      	ldr	r2, [r6, #0]
   156e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   156e4:	429a      	cmp	r2, r3
   156e6:	bf38      	it	cc
   156e8:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   156ea:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   156ec:	6833      	ldr	r3, [r6, #0]
   156ee:	2b00      	cmp	r3, #0
   156f0:	db29      	blt.n	15746 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   156f2:	b2a3      	uxth	r3, r4
   156f4:	b292      	uxth	r2, r2
		ticker_status =
   156f6:	f241 5116 	movw	r1, #5398	; 0x1516
   156fa:	9106      	str	r1, [sp, #24]
   156fc:	491a      	ldr	r1, [pc, #104]	; (15768 <event_common_prepare+0x1b4>)
   156fe:	9105      	str	r1, [sp, #20]
   15700:	2000      	movs	r0, #0
   15702:	9004      	str	r0, [sp, #16]
   15704:	9003      	str	r0, [sp, #12]
   15706:	9302      	str	r3, [sp, #8]
   15708:	9201      	str	r2, [sp, #4]
   1570a:	9200      	str	r2, [sp, #0]
   1570c:	462a      	mov	r2, r5
   1570e:	4601      	mov	r1, r0
   15710:	f7fb fecc 	bl	114ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15714:	b108      	cbz	r0, 1571a <event_common_prepare+0x166>
   15716:	2802      	cmp	r0, #2
   15718:	d119      	bne.n	1574e <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   1571a:	20ff      	movs	r0, #255	; 0xff
   1571c:	f7fd fab6 	bl	12c8c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   15720:	4b15      	ldr	r3, [pc, #84]	; (15778 <event_common_prepare+0x1c4>)
   15722:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15724:	2201      	movs	r2, #1
   15726:	4611      	mov	r1, r2
   15728:	2000      	movs	r0, #0
   1572a:	f7fa f861 	bl	f7f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1572e:	b9a0      	cbnz	r0, 1575a <event_common_prepare+0x1a6>
}
   15730:	b00a      	add	sp, #40	; 0x28
   15732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   15736:	4644      	mov	r4, r8
   15738:	e7ac      	b.n	15694 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1573a:	4040      	eors	r0, r0
   1573c:	f380 8811 	msr	BASEPRI, r0
   15740:	f04f 0004 	mov.w	r0, #4
   15744:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   15746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1574a:	6033      	str	r3, [r6, #0]
   1574c:	e7d1      	b.n	156f2 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1574e:	4040      	eors	r0, r0
   15750:	f380 8811 	msr	BASEPRI, r0
   15754:	f04f 0004 	mov.w	r0, #4
   15758:	df02      	svc	2
		LL_ASSERT(!retval);
   1575a:	4040      	eors	r0, r0
   1575c:	f380 8811 	msr	BASEPRI, r0
   15760:	f04f 0004 	mov.w	r0, #4
   15764:	df02      	svc	2
   15766:	bf00      	nop
   15768:	00012165 	.word	0x00012165
   1576c:	00012a81 	.word	0x00012a81
   15770:	00012a5d 	.word	0x00012a5d
   15774:	2000144c 	.word	0x2000144c
   15778:	2000c2b8 	.word	0x2000c2b8

0001577c <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   1577c:	4b0d      	ldr	r3, [pc, #52]	; (157b4 <radio_event_adv_prepare+0x38>)
   1577e:	7b1b      	ldrb	r3, [r3, #12]
   15780:	b993      	cbnz	r3, 157a8 <radio_event_adv_prepare+0x2c>
{
   15782:	b510      	push	{r4, lr}
   15784:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   15786:	4a0b      	ldr	r2, [pc, #44]	; (157b4 <radio_event_adv_prepare+0x38>)
   15788:	2305      	movs	r3, #5
   1578a:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   1578c:	2400      	movs	r4, #0
   1578e:	9403      	str	r4, [sp, #12]
   15790:	4c09      	ldr	r4, [pc, #36]	; (157b8 <radio_event_adv_prepare+0x3c>)
   15792:	9402      	str	r4, [sp, #8]
   15794:	9301      	str	r3, [sp, #4]
   15796:	69d3      	ldr	r3, [r2, #28]
   15798:	9300      	str	r3, [sp, #0]
   1579a:	f102 0318 	add.w	r3, r2, #24
   1579e:	3214      	adds	r2, #20
   157a0:	f7ff ff08 	bl	155b4 <event_common_prepare>
}
   157a4:	b004      	add	sp, #16
   157a6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   157a8:	4040      	eors	r0, r0
   157aa:	f380 8811 	msr	BASEPRI, r0
   157ae:	f04f 0004 	mov.w	r0, #4
   157b2:	df02      	svc	2
   157b4:	2000144c 	.word	0x2000144c
   157b8:	00017079 	.word	0x00017079
   157bc:	00000000 	.word	0x00000000

000157c0 <event_connection_prepare>:
{
   157c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157c4:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   157c6:	4ccb      	ldr	r4, [pc, #812]	; (15af4 <event_connection_prepare+0x334>)
   157c8:	7b24      	ldrb	r4, [r4, #12]
   157ca:	2c00      	cmp	r4, #0
   157cc:	d135      	bne.n	1583a <event_connection_prepare+0x7a>
				   conn->handle;
   157ce:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   157d0:	3507      	adds	r5, #7
   157d2:	b2ed      	uxtb	r5, r5
   157d4:	4cc7      	ldr	r4, [pc, #796]	; (15af4 <event_connection_prepare+0x334>)
   157d6:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   157d8:	f993 401d 	ldrsb.w	r4, [r3, #29]
   157dc:	2c00      	cmp	r4, #0
   157de:	db32      	blt.n	15846 <event_connection_prepare+0x86>
   157e0:	461c      	mov	r4, r3
   157e2:	910a      	str	r1, [sp, #40]	; 0x28
   157e4:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   157e6:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   157e8:	4415      	add	r5, r2
   157ea:	b2ad      	uxth	r5, r5
   157ec:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   157ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   157f0:	441d      	add	r5, r3
   157f2:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   157f4:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   157f8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   157fc:	429a      	cmp	r2, r3
   157fe:	d02d      	beq.n	1585c <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   15800:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   15804:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15808:	429a      	cmp	r2, r3
   1580a:	f000 861a 	beq.w	16442 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1580e:	2305      	movs	r3, #5
   15810:	2200      	movs	r2, #0
   15812:	4611      	mov	r1, r2
   15814:	4610      	mov	r0, r2
   15816:	f7fd f897 	bl	12948 <event_stop>
		switch (conn->llcp_type) {
   1581a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1581e:	3b01      	subs	r3, #1
   15820:	2b07      	cmp	r3, #7
   15822:	f201 80d6 	bhi.w	169d2 <event_connection_prepare+0x1212>
   15826:	e8df f013 	tbh	[pc, r3, lsl #1]
   1582a:	029f      	.short	0x029f
   1582c:	05b1054e 	.word	0x05b1054e
   15830:	072706ee 	.word	0x072706ee
   15834:	07ac08d4 	.word	0x07ac08d4
   15838:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   1583a:	4040      	eors	r0, r0
   1583c:	f380 8811 	msr	BASEPRI, r0
   15840:	f04f 0004 	mov.w	r0, #4
   15844:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   15846:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   15848:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   1584c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   1584e:	442c      	add	r4, r5
   15850:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   15852:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   15854:	42ac      	cmp	r4, r5
   15856:	d9c3      	bls.n	157e0 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   15858:	65dd      	str	r5, [r3, #92]	; 0x5c
   1585a:	e7c1      	b.n	157e0 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1585c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   15860:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15864:	429a      	cmp	r2, r3
   15866:	d00b      	beq.n	15880 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   15868:	2305      	movs	r3, #5
   1586a:	2200      	movs	r2, #0
   1586c:	4611      	mov	r1, r2
   1586e:	4610      	mov	r0, r2
   15870:	f7fd f86a 	bl	12948 <event_stop>
	conn_upd = _radio.conn_upd;
   15874:	4b9f      	ldr	r3, [pc, #636]	; (15af4 <event_connection_prepare+0x334>)
   15876:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   1587a:	b1fb      	cbz	r3, 158bc <event_connection_prepare+0xfc>
   1587c:	429c      	cmp	r4, r3
   1587e:	d01d      	beq.n	158bc <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15880:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   15884:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15888:	429a      	cmp	r2, r3
   1588a:	d0b9      	beq.n	15800 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   1588c:	2305      	movs	r3, #5
   1588e:	2200      	movs	r2, #0
   15890:	4611      	mov	r1, r2
   15892:	4610      	mov	r0, r2
   15894:	f7fd f858 	bl	12948 <event_stop>
	switch (conn->llcp_phy.state) {
   15898:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1589c:	f003 0303 	and.w	r3, r3, #3
   158a0:	2b03      	cmp	r3, #3
   158a2:	f200 8257 	bhi.w	15d54 <event_connection_prepare+0x594>
   158a6:	a201      	add	r2, pc, #4	; (adr r2, 158ac <event_connection_prepare+0xec>)
   158a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   158ac:	00015ba5 	.word	0x00015ba5
   158b0:	00015801 	.word	0x00015801
   158b4:	00015801 	.word	0x00015801
   158b8:	00015c1f 	.word	0x00015c1f
	switch (conn->llcp_conn_param.state) {
   158bc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   158c0:	f003 0307 	and.w	r3, r3, #7
   158c4:	2b05      	cmp	r3, #5
   158c6:	f200 8167 	bhi.w	15b98 <event_connection_prepare+0x3d8>
   158ca:	a201      	add	r2, pc, #4	; (adr r2, 158d0 <event_connection_prepare+0x110>)
   158cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   158d0:	000158e9 	.word	0x000158e9
   158d4:	000159b3 	.word	0x000159b3
   158d8:	00015b01 	.word	0x00015b01
   158dc:	00015881 	.word	0x00015881
   158e0:	00015881 	.word	0x00015881
   158e4:	00015881 	.word	0x00015881
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   158e8:	4883      	ldr	r0, [pc, #524]	; (15af8 <event_connection_prepare+0x338>)
   158ea:	f7fa f8c2 	bl	fa72 <mem_acquire>
	if (!node_tx) {
   158ee:	4680      	mov	r8, r0
   158f0:	2800      	cmp	r0, #0
   158f2:	d0c5      	beq.n	15880 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   158f4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   158f8:	2204      	movs	r2, #4
   158fa:	f362 0302 	bfi	r3, r2, #0, #3
   158fe:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15902:	7903      	ldrb	r3, [r0, #4]
   15904:	f043 0303 	orr.w	r3, r3, #3
   15908:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1590a:	2318      	movs	r3, #24
   1590c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1590e:	230f      	movs	r3, #15
   15910:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   15912:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15916:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15918:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1591c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1591e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15922:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15924:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15928:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1592a:	2300      	movs	r3, #0
   1592c:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   1592e:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   15932:	74c3      	strb	r3, [r0, #19]
   15934:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   15936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1593a:	7543      	strb	r3, [r0, #21]
   1593c:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   1593e:	75c3      	strb	r3, [r0, #23]
   15940:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   15942:	7643      	strb	r3, [r0, #25]
   15944:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   15946:	76c3      	strb	r3, [r0, #27]
   15948:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   1594a:	7743      	strb	r3, [r0, #29]
   1594c:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   1594e:	4601      	mov	r1, r0
   15950:	4620      	mov	r0, r4
   15952:	f7fc fb1f 	bl	11f94 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   15956:	4b67      	ldr	r3, [pc, #412]	; (15af4 <event_connection_prepare+0x334>)
   15958:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   1595c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15960:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   15964:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15968:	6823      	ldr	r3, [r4, #0]
   1596a:	2b00      	cmp	r3, #0
   1596c:	db13      	blt.n	15996 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   1596e:	f108 0313 	add.w	r3, r8, #19
   15972:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   15976:	4b61      	ldr	r3, [pc, #388]	; (15afc <event_connection_prepare+0x33c>)
   15978:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1597a:	2201      	movs	r2, #1
   1597c:	4611      	mov	r1, r2
   1597e:	2000      	movs	r0, #0
   15980:	f7f9 ff36 	bl	f7f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15984:	2800      	cmp	r0, #0
   15986:	f43f af7b 	beq.w	15880 <event_connection_prepare+0xc0>
   1598a:	4040      	eors	r0, r0
   1598c:	f380 8811 	msr	BASEPRI, r0
   15990:	f04f 0004 	mov.w	r0, #4
   15994:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15996:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15998:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   1599a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1599e:	4291      	cmp	r1, r2
   159a0:	bf2c      	ite	cs
   159a2:	ebc3 0301 	rsbcs	r3, r3, r1
   159a6:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   159aa:	4433      	add	r3, r6
   159ac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   159b0:	e7dd      	b.n	1596e <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   159b2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   159b6:	bbb3      	cbnz	r3, 15a26 <event_connection_prepare+0x266>
	if (!conn->role) {
   159b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   159bc:	2b00      	cmp	r3, #0
   159be:	db52      	blt.n	15a66 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   159c0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   159c4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   159c8:	429a      	cmp	r2, r3
   159ca:	f47f af59 	bne.w	15880 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   159ce:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   159d2:	2105      	movs	r1, #5
   159d4:	f361 0202 	bfi	r2, r1, #0, #3
   159d8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   159dc:	2001      	movs	r0, #1
   159de:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   159e2:	2100      	movs	r1, #0
   159e4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   159e8:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   159ec:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   159f0:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   159f4:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   159f8:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   159fc:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15a00:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   15a04:	f04f 0e02 	mov.w	lr, #2
   15a08:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   15a0c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   15a10:	4042      	eors	r2, r0
   15a12:	f362 0182 	bfi	r1, r2, #2, #1
   15a16:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15a1a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15a1e:	3b01      	subs	r3, #1
   15a20:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15a24:	e72c      	b.n	15880 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15a26:	4834      	ldr	r0, [pc, #208]	; (15af8 <event_connection_prepare+0x338>)
   15a28:	f7fa f823 	bl	fa72 <mem_acquire>
		if (!node_tx) {
   15a2c:	4601      	mov	r1, r0
   15a2e:	2800      	cmp	r0, #0
   15a30:	f43f af26 	beq.w	15880 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15a34:	7903      	ldrb	r3, [r0, #4]
   15a36:	f043 0303 	orr.w	r3, r3, #3
   15a3a:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   15a3c:	2311      	movs	r3, #17
   15a3e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15a40:	2303      	movs	r3, #3
   15a42:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   15a44:	230f      	movs	r3, #15
   15a46:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   15a48:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   15a4c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   15a4e:	4620      	mov	r0, r4
   15a50:	f7fc faa0 	bl	11f94 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15a54:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15a58:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   15a5c:	2200      	movs	r2, #0
   15a5e:	4b25      	ldr	r3, [pc, #148]	; (15af4 <event_connection_prepare+0x334>)
   15a60:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15a64:	e70c      	b.n	15880 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15a66:	4824      	ldr	r0, [pc, #144]	; (15af8 <event_connection_prepare+0x338>)
   15a68:	f7fa f803 	bl	fa72 <mem_acquire>
	if (!node_tx) {
   15a6c:	4601      	mov	r1, r0
   15a6e:	2800      	cmp	r0, #0
   15a70:	f43f af06 	beq.w	15880 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15a74:	7903      	ldrb	r3, [r0, #4]
   15a76:	f043 0303 	orr.w	r3, r3, #3
   15a7a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15a7c:	2318      	movs	r3, #24
   15a7e:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   15a80:	2310      	movs	r3, #16
   15a82:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   15a84:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15a88:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15a8a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15a8e:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   15a90:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15a94:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15a96:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15a9a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   15a9c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   15aa0:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   15aa2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   15aa6:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   15aaa:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   15aae:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   15ab2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15ab6:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   15aba:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   15abe:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   15ac2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15ac6:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   15aca:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   15ace:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   15ad2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   15ad6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   15ada:	4620      	mov	r0, r4
   15adc:	f7fc fa5a 	bl	11f94 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15ae0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15ae4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   15ae8:	2200      	movs	r2, #0
   15aea:	4b02      	ldr	r3, [pc, #8]	; (15af4 <event_connection_prepare+0x334>)
   15aec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15af0:	e6c6      	b.n	15880 <event_connection_prepare+0xc0>
   15af2:	bf00      	nop
   15af4:	2000144c 	.word	0x2000144c
   15af8:	200015a4 	.word	0x200015a4
   15afc:	2000c248 	.word	0x2000c248
	if (conn->pause_tx) {
   15b00:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15b04:	f013 0f08 	tst.w	r3, #8
   15b08:	f47f aeba 	bne.w	15880 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   15b0c:	4b94      	ldr	r3, [pc, #592]	; (15d60 <event_connection_prepare+0x5a0>)
   15b0e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15b12:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15b16:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15b18:	429a      	cmp	r2, r3
   15b1a:	d331      	bcc.n	15b80 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   15b1c:	4b90      	ldr	r3, [pc, #576]	; (15d60 <event_connection_prepare+0x5a0>)
   15b1e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15b22:	1ad3      	subs	r3, r2, r3
   15b24:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15b26:	2b01      	cmp	r3, #1
   15b28:	d934      	bls.n	15b94 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   15b2a:	4b8d      	ldr	r3, [pc, #564]	; (15d60 <event_connection_prepare+0x5a0>)
   15b2c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15b30:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   15b38:	2b00      	cmp	r3, #0
   15b3a:	f43f aea1 	beq.w	15880 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   15b3e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   15b42:	2103      	movs	r1, #3
   15b44:	f361 0202 	bfi	r2, r1, #0, #3
   15b48:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   15b4c:	8c22      	ldrh	r2, [r4, #32]
   15b4e:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15b50:	2201      	movs	r2, #1
   15b52:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b54:	7a1a      	ldrb	r2, [r3, #8]
   15b56:	430a      	orrs	r2, r1
   15b58:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15b5a:	2218      	movs	r2, #24
   15b5c:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   15b5e:	220f      	movs	r2, #15
   15b60:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   15b62:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   15b66:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   15b68:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   15b6c:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   15b6e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   15b72:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   15b74:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   15b78:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   15b7a:	f7fe ffbf 	bl	14afc <packet_rx_enqueue>
   15b7e:	e67f      	b.n	15880 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   15b80:	4977      	ldr	r1, [pc, #476]	; (15d60 <event_connection_prepare+0x5a0>)
   15b82:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15b86:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15b8a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15b8c:	fa52 f383 	uxtab	r3, r2, r3
   15b90:	b2db      	uxtb	r3, r3
   15b92:	e7c8      	b.n	15b26 <event_connection_prepare+0x366>
		return 0;
   15b94:	2300      	movs	r3, #0
   15b96:	e7cf      	b.n	15b38 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   15b98:	4040      	eors	r0, r0
   15b9a:	f380 8811 	msr	BASEPRI, r0
   15b9e:	f04f 0004 	mov.w	r0, #4
   15ba2:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15ba4:	486f      	ldr	r0, [pc, #444]	; (15d64 <event_connection_prepare+0x5a4>)
   15ba6:	f7f9 ff64 	bl	fa72 <mem_acquire>
		if (!node_tx) {
   15baa:	4601      	mov	r1, r0
   15bac:	2800      	cmp	r0, #0
   15bae:	f43f ae27 	beq.w	15800 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   15bb2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15bb6:	2201      	movs	r2, #1
   15bb8:	f362 0301 	bfi	r3, r2, #0, #2
   15bbc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15bc0:	b2db      	uxtb	r3, r3
   15bc2:	f3c3 0082 	ubfx	r0, r3, #2, #3
   15bc6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15bca:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   15bce:	095b      	lsrs	r3, r3, #5
   15bd0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   15bd4:	f363 00c5 	bfi	r0, r3, #3, #3
   15bd8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   15bdc:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   15be0:	4613      	mov	r3, r2
   15be2:	f360 1386 	bfi	r3, r0, #6, #1
   15be6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15bea:	790b      	ldrb	r3, [r1, #4]
   15bec:	f043 0303 	orr.w	r3, r3, #3
   15bf0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15bf2:	2303      	movs	r3, #3
   15bf4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15bf6:	2316      	movs	r3, #22
   15bf8:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   15bfa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15bfe:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15c02:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   15c04:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c08:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15c0c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   15c0e:	4620      	mov	r0, r4
   15c10:	f7fc f9c0 	bl	11f94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15c14:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15c18:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15c1c:	e5f0      	b.n	15800 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15c1e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15c22:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   15c26:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c2a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15c2e:	f013 0f02 	tst.w	r3, #2
   15c32:	d047      	beq.n	15cc4 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   15c34:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c38:	2202      	movs	r2, #2
   15c3a:	f362 0384 	bfi	r3, r2, #2, #3
   15c3e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   15c42:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c46:	095b      	lsrs	r3, r3, #5
   15c48:	f013 0f02 	tst.w	r3, #2
   15c4c:	d057      	beq.n	15cfe <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   15c4e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c52:	2202      	movs	r2, #2
   15c54:	f362 1347 	bfi	r3, r2, #5, #3
   15c58:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   15c5c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c60:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15c64:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15c68:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15c6c:	4293      	cmp	r3, r2
   15c6e:	d063      	beq.n	15d38 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   15c70:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15c74:	f363 0284 	bfi	r2, r3, #2, #3
   15c78:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   15c7c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15c80:	095b      	lsrs	r3, r3, #5
   15c82:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15c86:	f002 0207 	and.w	r2, r2, #7
   15c8a:	4293      	cmp	r3, r2
   15c8c:	d05b      	beq.n	15d46 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   15c8e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15c92:	f363 1247 	bfi	r2, r3, #5, #3
   15c96:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   15c9a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15c9e:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   15ca2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15ca6:	f043 0301 	orr.w	r3, r3, #1
   15caa:	f362 0341 	bfi	r3, r2, #1, #1
   15cae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   15cb2:	2308      	movs	r3, #8
   15cb4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15cb8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15cbc:	3b01      	subs	r3, #1
   15cbe:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15cc2:	e59d      	b.n	15800 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   15cc4:	f013 0f01 	tst.w	r3, #1
   15cc8:	d007      	beq.n	15cda <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   15cca:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15cce:	2201      	movs	r2, #1
   15cd0:	f362 0384 	bfi	r3, r2, #2, #3
   15cd4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15cd8:	e7b3      	b.n	15c42 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   15cda:	f013 0f04 	tst.w	r3, #4
   15cde:	d007      	beq.n	15cf0 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   15ce0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15ce4:	2204      	movs	r2, #4
   15ce6:	f362 0384 	bfi	r3, r2, #2, #3
   15cea:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15cee:	e7a8      	b.n	15c42 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   15cf0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15cf4:	f36f 0384 	bfc	r3, #2, #3
   15cf8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15cfc:	e7a1      	b.n	15c42 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   15cfe:	f013 0f01 	tst.w	r3, #1
   15d02:	d007      	beq.n	15d14 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   15d04:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15d08:	2201      	movs	r2, #1
   15d0a:	f362 1347 	bfi	r3, r2, #5, #3
   15d0e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15d12:	e7a3      	b.n	15c5c <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   15d14:	f013 0f04 	tst.w	r3, #4
   15d18:	d007      	beq.n	15d2a <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   15d1a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15d1e:	2204      	movs	r2, #4
   15d20:	f362 1347 	bfi	r3, r2, #5, #3
   15d24:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15d28:	e798      	b.n	15c5c <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   15d2a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15d2e:	f36f 1347 	bfc	r3, #5, #3
   15d32:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15d36:	e791      	b.n	15c5c <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   15d38:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15d3c:	f36f 0384 	bfc	r3, #2, #3
   15d40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15d44:	e79a      	b.n	15c7c <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   15d46:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15d4a:	f36f 1347 	bfc	r3, #5, #3
   15d4e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15d52:	e7a2      	b.n	15c9a <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   15d54:	4040      	eors	r0, r0
   15d56:	f380 8811 	msr	BASEPRI, r0
   15d5a:	f04f 0004 	mov.w	r0, #4
   15d5e:	df02      	svc	2
   15d60:	2000144c 	.word	0x2000144c
   15d64:	200015a4 	.word	0x200015a4
	conn_upd = _radio.conn_upd;
   15d68:	4bb7      	ldr	r3, [pc, #732]	; (16048 <event_connection_prepare+0x888>)
   15d6a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   15d6e:	2b00      	cmp	r3, #0
   15d70:	f000 814b 	beq.w	1600a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   15d74:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   15d78:	eba5 0808 	sub.w	r8, r5, r8
   15d7c:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   15d80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15d84:	f013 0f03 	tst.w	r3, #3
   15d88:	f040 8143 	bne.w	16012 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   15d8c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   15d90:	f040 8296 	bne.w	162c0 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   15d94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15d98:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15d9c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   15da0:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   15da4:	429a      	cmp	r2, r3
   15da6:	d006      	beq.n	15db6 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   15da8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15dac:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15db0:	2b05      	cmp	r3, #5
   15db2:	f000 81bb 	beq.w	1612c <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   15db6:	4ba4      	ldr	r3, [pc, #656]	; (16048 <event_connection_prepare+0x888>)
   15db8:	2200      	movs	r2, #0
   15dba:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   15dbc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   15dc0:	429c      	cmp	r4, r3
   15dc2:	f000 81b9 	beq.w	16138 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   15dc6:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   15dca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   15dcc:	429a      	cmp	r2, r3
   15dce:	f000 81b7 	beq.w	16140 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   15dd2:	4b9d      	ldr	r3, [pc, #628]	; (16048 <event_connection_prepare+0x888>)
   15dd4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15dd8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15ddc:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15dde:	429a      	cmp	r2, r3
   15de0:	f0c0 81c7 	bcc.w	16172 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   15de4:	4b98      	ldr	r3, [pc, #608]	; (16048 <event_connection_prepare+0x888>)
   15de6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15dea:	1ad3      	subs	r3, r2, r3
   15dec:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15dee:	2b01      	cmp	r3, #1
   15df0:	f240 81c9 	bls.w	16186 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15df4:	4b94      	ldr	r3, [pc, #592]	; (16048 <event_connection_prepare+0x888>)
   15df6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15dfa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   15e02:	2b00      	cmp	r3, #0
   15e04:	f000 81c1 	beq.w	1618a <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   15e08:	8c22      	ldrh	r2, [r4, #32]
   15e0a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15e0c:	2208      	movs	r2, #8
   15e0e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   15e10:	2200      	movs	r2, #0
   15e12:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   15e14:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15e18:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   15e1a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15e1e:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   15e20:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15e24:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   15e26:	f7fe fe69 	bl	14afc <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15e2a:	6823      	ldr	r3, [r4, #0]
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	f2c0 81b2 	blt.w	16196 <event_connection_prepare+0x9d6>
   15e32:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   15e34:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15e36:	fb18 f303 	smulbb	r3, r8, r3
   15e3a:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   15e3c:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   15e40:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   15e44:	fb1a f00b 	smulbb	r0, sl, fp
   15e48:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   15e4a:	4283      	cmp	r3, r0
   15e4c:	f080 81b1 	bcs.w	161b2 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   15e50:	1ac3      	subs	r3, r0, r3
   15e52:	17d9      	asrs	r1, r3, #31
   15e54:	487d      	ldr	r0, [pc, #500]	; (1604c <event_connection_prepare+0x88c>)
   15e56:	f240 1223 	movw	r2, #291	; 0x123
   15e5a:	fb02 f203 	mul.w	r2, r2, r3
   15e5e:	fb00 2201 	mla	r2, r0, r1, r2
   15e62:	fba3 0100 	umull	r0, r1, r3, r0
   15e66:	4411      	add	r1, r2
   15e68:	a375      	add	r3, pc, #468	; (adr r3, 16040 <event_connection_prepare+0x880>)
   15e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e6e:	f7eb f945 	bl	10fc <__aeabi_uldivmod>
   15e72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   15e76:	eb00 0309 	add.w	r3, r0, r9
   15e7a:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   15e7c:	ebab 0308 	sub.w	r3, fp, r8
   15e80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   15e82:	fa12 f383 	uxtah	r3, r2, r3
   15e86:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   15e88:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   15e8a:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   15e8c:	429a      	cmp	r2, r3
   15e8e:	bf38      	it	cc
   15e90:	461a      	movcc	r2, r3
   15e92:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   15e94:	f240 49e2 	movw	r9, #1250	; 0x4e2
   15e98:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   15e9c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	f2c0 819d 	blt.w	161e0 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   15ea6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15eaa:	a365      	add	r3, pc, #404	; (adr r3, 16040 <event_connection_prepare+0x880>)
   15eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eb0:	4967      	ldr	r1, [pc, #412]	; (16050 <event_connection_prepare+0x890>)
   15eb2:	fba0 0101 	umull	r0, r1, r0, r1
   15eb6:	f7eb f921 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15eba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   15ebe:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   15ec2:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   15ec4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   15ec8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15ecc:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   15ece:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15ed2:	f242 7110 	movw	r1, #10000	; 0x2710
   15ed6:	fb01 9303 	mla	r3, r1, r3, r9
   15eda:	3b01      	subs	r3, #1
   15edc:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   15ee0:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15ee2:	4b5c      	ldr	r3, [pc, #368]	; (16054 <event_connection_prepare+0x894>)
   15ee4:	444b      	add	r3, r9
   15ee6:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   15eea:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15eee:	4b5a      	ldr	r3, [pc, #360]	; (16058 <event_connection_prepare+0x898>)
   15ef0:	444b      	add	r3, r9
   15ef2:	fbb3 f9f9 	udiv	r9, r3, r9
   15ef6:	fa1f f989 	uxth.w	r9, r9
   15efa:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15efe:	1d93      	adds	r3, r2, #6
   15f00:	4599      	cmp	r9, r3
   15f02:	dd07      	ble.n	15f14 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   15f04:	eba9 0902 	sub.w	r9, r9, r2
   15f08:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15f0c:	f1a9 0906 	sub.w	r9, r9, #6
   15f10:	fa1f f989 	uxth.w	r9, r9
   15f14:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   15f18:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15f1c:	f013 0f04 	tst.w	r3, #4
   15f20:	d102      	bne.n	15f28 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   15f22:	2300      	movs	r3, #0
   15f24:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   15f28:	2101      	movs	r1, #1
   15f2a:	2000      	movs	r0, #0
   15f2c:	f003 fe2d 	bl	19b8a <mayfly_is_enabled>
   15f30:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15f32:	2200      	movs	r2, #0
   15f34:	2101      	movs	r1, #1
   15f36:	4610      	mov	r0, r2
   15f38:	f7f9 fc1c 	bl	f774 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   15f3c:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   15f3e:	3207      	adds	r2, #7
		ticker_status =
   15f40:	f641 13e3 	movw	r3, #6627	; 0x19e3
   15f44:	9300      	str	r3, [sp, #0]
   15f46:	4b45      	ldr	r3, [pc, #276]	; (1605c <event_connection_prepare+0x89c>)
   15f48:	b2d2      	uxtb	r2, r2
   15f4a:	2100      	movs	r1, #0
   15f4c:	4608      	mov	r0, r1
   15f4e:	f7fb fafb 	bl	11548 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15f52:	b110      	cbz	r0, 15f5a <event_connection_prepare+0x79a>
   15f54:	2802      	cmp	r0, #2
   15f56:	f040 819a 	bne.w	1628e <event_connection_prepare+0xace>
				     conn->handle,
   15f5a:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15f5e:	f10a 0a07 	add.w	sl, sl, #7
   15f62:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   15f66:	4b3a      	ldr	r3, [pc, #232]	; (16050 <event_connection_prepare+0x890>)
   15f68:	fba8 2303 	umull	r2, r3, r8, r3
   15f6c:	4617      	mov	r7, r2
   15f6e:	4698      	mov	r8, r3
   15f70:	a333      	add	r3, pc, #204	; (adr r3, 16040 <event_connection_prepare+0x880>)
   15f72:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f76:	4638      	mov	r0, r7
   15f78:	4641      	mov	r1, r8
   15f7a:	f7eb f8bf 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15f7e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   15f82:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   15f84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15f88:	2100      	movs	r1, #0
   15f8a:	4a35      	ldr	r2, [pc, #212]	; (16060 <event_connection_prepare+0x8a0>)
   15f8c:	2307      	movs	r3, #7
   15f8e:	fb03 f300 	mul.w	r3, r3, r0
   15f92:	fb02 3301 	mla	r3, r2, r1, r3
   15f96:	fba0 0102 	umull	r0, r1, r0, r2
   15f9a:	4419      	add	r1, r3
   15f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15fa0:	2300      	movs	r3, #0
   15fa2:	1a3f      	subs	r7, r7, r0
   15fa4:	eb68 0801 	sbc.w	r8, r8, r1
   15fa8:	4638      	mov	r0, r7
   15faa:	4641      	mov	r1, r8
   15fac:	f7eb f8a6 	bl	10fc <__aeabi_uldivmod>
   15fb0:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   15fb2:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
   15fb6:	440b      	add	r3, r1
   15fb8:	b29b      	uxth	r3, r3
   15fba:	f994 101d 	ldrsb.w	r1, [r4, #29]
   15fbe:	2900      	cmp	r1, #0
   15fc0:	f2c0 816b 	blt.w	1629a <event_connection_prepare+0xada>
   15fc4:	4927      	ldr	r1, [pc, #156]	; (16064 <event_connection_prepare+0x8a4>)
		ticker_status =
   15fc6:	f641 10f3 	movw	r0, #6643	; 0x19f3
   15fca:	9008      	str	r0, [sp, #32]
   15fcc:	4823      	ldr	r0, [pc, #140]	; (1605c <event_connection_prepare+0x89c>)
   15fce:	9007      	str	r0, [sp, #28]
   15fd0:	9406      	str	r4, [sp, #24]
   15fd2:	9105      	str	r1, [sp, #20]
   15fd4:	9304      	str	r3, [sp, #16]
   15fd6:	2000      	movs	r0, #0
   15fd8:	9003      	str	r0, [sp, #12]
   15fda:	9202      	str	r2, [sp, #8]
   15fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15fde:	9301      	str	r3, [sp, #4]
   15fe0:	f8cd b000 	str.w	fp, [sp]
   15fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15fe6:	4652      	mov	r2, sl
   15fe8:	4601      	mov	r1, r0
   15fea:	f7fb fa11 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15fee:	b110      	cbz	r0, 15ff6 <event_connection_prepare+0x836>
   15ff0:	2802      	cmp	r0, #2
   15ff2:	f040 8154 	bne.w	1629e <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   15ff6:	f1b9 0f00 	cmp.w	r9, #0
   15ffa:	f040 8156 	bne.w	162aa <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   15ffe:	f1b9 0f00 	cmp.w	r9, #0
   16002:	f040 821e 	bne.w	16442 <event_connection_prepare+0xc82>
   16006:	f000 be59 	b.w	16cbc <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   1600a:	4b0f      	ldr	r3, [pc, #60]	; (16048 <event_connection_prepare+0x888>)
   1600c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   16010:	e6b0      	b.n	15d74 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16012:	4815      	ldr	r0, [pc, #84]	; (16068 <event_connection_prepare+0x8a8>)
   16014:	f7f9 fd2d 	bl	fa72 <mem_acquire>
		if (!node_tx) {
   16018:	4680      	mov	r8, r0
   1601a:	2800      	cmp	r0, #0
   1601c:	f000 814d 	beq.w	162ba <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   16020:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   16022:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16026:	f002 0203 	and.w	r2, r2, #3
   1602a:	2a01      	cmp	r2, #1
   1602c:	d01e      	beq.n	1606c <event_connection_prepare+0x8ac>
   1602e:	2a02      	cmp	r2, #2
   16030:	d066      	beq.n	16100 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   16032:	4040      	eors	r0, r0
   16034:	f380 8811 	msr	BASEPRI, r0
   16038:	f04f 0004 	mov.w	r0, #4
   1603c:	df02      	svc	2
   1603e:	bf00      	nop
   16040:	1afd498d 	.word	0x1afd498d
   16044:	00000007 	.word	0x00000007
   16048:	2000144c 	.word	0x2000144c
   1604c:	09ce5400 	.word	0x09ce5400
   16050:	3b9aca00 	.word	0x3b9aca00
   16054:	026259ff 	.word	0x026259ff
   16058:	01c9c37f 	.word	0x01c9c37f
   1605c:	00012165 	.word	0x00012165
   16060:	1afd498d 	.word	0x1afd498d
   16064:	00016d25 	.word	0x00016d25
   16068:	200015a4 	.word	0x200015a4
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   1606c:	49bc      	ldr	r1, [pc, #752]	; (16360 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   1606e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16072:	f36f 0201 	bfc	r2, #0, #2
   16076:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   1607a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1607c:	442a      	add	r2, r5
   1607e:	b292      	uxth	r2, r2
   16080:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   16082:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16086:	f898 2004 	ldrb.w	r2, [r8, #4]
   1608a:	f042 0203 	orr.w	r2, r2, #3
   1608e:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16092:	220c      	movs	r2, #12
   16094:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   16096:	2200      	movs	r2, #0
   16098:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   1609a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   1609e:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   160a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   160a4:	48af      	ldr	r0, [pc, #700]	; (16364 <event_connection_prepare+0xba4>)
   160a6:	fba0 0202 	umull	r0, r2, r0, r2
   160aa:	0a92      	lsrs	r2, r2, #10
   160ac:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   160b0:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   160b4:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   160b8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   160bc:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   160c0:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   160c4:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   160c8:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   160cc:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   160d0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   160d4:	6820      	ldr	r0, [r4, #0]
   160d6:	2800      	cmp	r0, #0
   160d8:	db14      	blt.n	16104 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   160da:	3305      	adds	r3, #5
   160dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   160e0:	4ba1      	ldr	r3, [pc, #644]	; (16368 <event_connection_prepare+0xba8>)
   160e2:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   160e4:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   160e6:	2201      	movs	r2, #1
   160e8:	4611      	mov	r1, r2
   160ea:	2000      	movs	r0, #0
   160ec:	f7f9 fb80 	bl	f7f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   160f0:	b9b0      	cbnz	r0, 16120 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   160f2:	4641      	mov	r1, r8
   160f4:	4620      	mov	r0, r4
   160f6:	f7fb ff4d 	bl	11f94 <ctrl_tx_enqueue>
	return 1;
   160fa:	f04f 0901 	mov.w	r9, #1
   160fe:	e77e      	b.n	15ffe <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   16100:	499a      	ldr	r1, [pc, #616]	; (1636c <event_connection_prepare+0xbac>)
   16102:	e7b4      	b.n	1606e <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   16104:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   16106:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   16108:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1610c:	4297      	cmp	r7, r2
   1610e:	bf2c      	ite	cs
   16110:	ebce 0207 	rsbcs	r2, lr, r7
   16114:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   16118:	4432      	add	r2, r6
   1611a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   1611e:	e7dc      	b.n	160da <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   16120:	4040      	eors	r0, r0
   16122:	f380 8811 	msr	BASEPRI, r0
   16126:	f04f 0004 	mov.w	r0, #4
   1612a:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1612c:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   16130:	2300      	movs	r3, #0
   16132:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16136:	e63e      	b.n	15db6 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   16138:	4b8d      	ldr	r3, [pc, #564]	; (16370 <event_connection_prepare+0xbb0>)
   1613a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1613e:	e642      	b.n	15dc6 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   16140:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   16144:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   16146:	4291      	cmp	r1, r2
   16148:	f47f ae43 	bne.w	15dd2 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   1614c:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   16150:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16154:	fb01 f103 	mul.w	r1, r1, r3
   16158:	f242 7310 	movw	r3, #10000	; 0x2710
   1615c:	fb03 1302 	mla	r3, r3, r2, r1
   16160:	3b01      	subs	r3, #1
   16162:	fb93 f3f1 	sdiv	r3, r3, r1
   16166:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   16168:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   1616a:	4293      	cmp	r3, r2
   1616c:	f47f ae31 	bne.w	15dd2 <event_connection_prepare+0x612>
   16170:	e65b      	b.n	15e2a <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   16172:	497f      	ldr	r1, [pc, #508]	; (16370 <event_connection_prepare+0xbb0>)
   16174:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16178:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1617c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1617e:	fa52 f383 	uxtab	r3, r2, r3
   16182:	b2db      	uxtb	r3, r3
   16184:	e633      	b.n	15dee <event_connection_prepare+0x62e>
		return 0;
   16186:	2300      	movs	r3, #0
   16188:	e63b      	b.n	15e02 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   1618a:	4040      	eors	r0, r0
   1618c:	f380 8811 	msr	BASEPRI, r0
   16190:	f04f 0004 	mov.w	r0, #4
   16194:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   16196:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   16198:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1619a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1619e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   161a0:	4291      	cmp	r1, r2
   161a2:	bf2c      	ite	cs
   161a4:	ebc3 0301 	rsbcs	r3, r3, r1
   161a8:	ebc3 0302 	rsbcc	r3, r3, r2
   161ac:	eb06 0903 	add.w	r9, r6, r3
   161b0:	e640      	b.n	15e34 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   161b2:	1a1b      	subs	r3, r3, r0
   161b4:	17d9      	asrs	r1, r3, #31
   161b6:	486f      	ldr	r0, [pc, #444]	; (16374 <event_connection_prepare+0xbb4>)
   161b8:	f240 1223 	movw	r2, #291	; 0x123
   161bc:	fb02 f203 	mul.w	r2, r2, r3
   161c0:	fb00 2201 	mla	r2, r0, r1, r2
   161c4:	fba3 0100 	umull	r0, r1, r3, r0
   161c8:	4411      	add	r1, r2
   161ca:	a363      	add	r3, pc, #396	; (adr r3, 16358 <event_connection_prepare+0xb98>)
   161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   161d0:	f7ea ff94 	bl	10fc <__aeabi_uldivmod>
   161d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   161d8:	eba9 0300 	sub.w	r3, r9, r0
   161dc:	930b      	str	r3, [sp, #44]	; 0x2c
   161de:	e64d      	b.n	15e7c <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   161e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   161e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   161e4:	fb02 3218 	mls	r2, r2, r8, r3
   161e8:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   161ea:	4b61      	ldr	r3, [pc, #388]	; (16370 <event_connection_prepare+0xbb0>)
   161ec:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   161f0:	4861      	ldr	r0, [pc, #388]	; (16378 <event_connection_prepare+0xbb8>)
   161f2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   161f6:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   161fa:	f3c1 0182 	ubfx	r1, r1, #2, #3
   161fe:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   16202:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   16204:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   16208:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1620c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   16210:	495a      	ldr	r1, [pc, #360]	; (1637c <event_connection_prepare+0xbbc>)
   16212:	fba1 1303 	umull	r1, r3, r1, r3
   16216:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   1621a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   1621e:	ea4f 0359 	mov.w	r3, r9, lsr #1
   16222:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   16224:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   16226:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   1622a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1622e:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   16232:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   16234:	2100      	movs	r1, #0
   16236:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   16238:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   1623c:	4402      	add	r2, r0
   1623e:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   16240:	4293      	cmp	r3, r2
   16242:	d200      	bcs.n	16246 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   16244:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   16246:	f8df b140 	ldr.w	fp, [pc, #320]	; 16388 <event_connection_prepare+0xbc8>
   1624a:	a343      	add	r3, pc, #268	; (adr r3, 16358 <event_connection_prepare+0xb98>)
   1624c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16250:	fba0 010b 	umull	r0, r1, r0, fp
   16254:	f7ea ff52 	bl	10fc <__aeabi_uldivmod>
   16258:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   1625c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1625e:	1a1b      	subs	r3, r3, r0
   16260:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   16262:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   16266:	4a3f      	ldr	r2, [pc, #252]	; (16364 <event_connection_prepare+0xba4>)
   16268:	fba2 2303 	umull	r2, r3, r2, r3
   1626c:	0a9b      	lsrs	r3, r3, #10
   1626e:	f240 40e2 	movw	r0, #1250	; 0x4e2
   16272:	fb00 f003 	mul.w	r0, r0, r3
   16276:	a338      	add	r3, pc, #224	; (adr r3, 16358 <event_connection_prepare+0xb98>)
   16278:	e9d3 2300 	ldrd	r2, r3, [r3]
   1627c:	fba0 010b 	umull	r0, r1, r0, fp
   16280:	f7ea ff3c 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   16284:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   16288:	eba9 0808 	sub.w	r8, r9, r8
   1628c:	e61a      	b.n	15ec4 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1628e:	4040      	eors	r0, r0
   16290:	f380 8811 	msr	BASEPRI, r0
   16294:	f04f 0004 	mov.w	r0, #4
   16298:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1629a:	4939      	ldr	r1, [pc, #228]	; (16380 <event_connection_prepare+0xbc0>)
   1629c:	e693      	b.n	15fc6 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1629e:	4040      	eors	r0, r0
   162a0:	f380 8811 	msr	BASEPRI, r0
   162a4:	f04f 0004 	mov.w	r0, #4
   162a8:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   162aa:	2201      	movs	r2, #1
   162ac:	4611      	mov	r1, r2
   162ae:	2000      	movs	r0, #0
   162b0:	f7f9 fa60 	bl	f774 <mayfly_enable>
		return 0;
   162b4:	f04f 0900 	mov.w	r9, #0
   162b8:	e6a1      	b.n	15ffe <event_connection_prepare+0x83e>
			return 1;
   162ba:	f04f 0901 	mov.w	r9, #1
   162be:	e69e      	b.n	15ffe <event_connection_prepare+0x83e>
	return 1;
   162c0:	f04f 0901 	mov.w	r9, #1
   162c4:	e69b      	b.n	15ffe <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   162c6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   162ca:	b9f3      	cbnz	r3, 1630a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   162cc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   162d0:	1aeb      	subs	r3, r5, r3
   162d2:	b29b      	uxth	r3, r3
   162d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   162d8:	f280 80b3 	bge.w	16442 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   162dc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   162e0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   162e4:	f104 0817 	add.w	r8, r4, #23
   162e8:	2205      	movs	r2, #5
   162ea:	f104 0179 	add.w	r1, r4, #121	; 0x79
   162ee:	4640      	mov	r0, r8
   162f0:	f7e9 ffe6 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   162f4:	2105      	movs	r1, #5
   162f6:	4640      	mov	r0, r8
   162f8:	f7f9 fc3f 	bl	fb7a <util_ones_count_get>
		conn->data_chan_count =
   162fc:	7f63      	ldrb	r3, [r4, #29]
   162fe:	f360 0305 	bfi	r3, r0, #0, #6
   16302:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   16304:	2301      	movs	r3, #1
   16306:	7723      	strb	r3, [r4, #28]
   16308:	e09b      	b.n	16442 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1630a:	481e      	ldr	r0, [pc, #120]	; (16384 <event_connection_prepare+0xbc4>)
   1630c:	f7f9 fbb1 	bl	fa72 <mem_acquire>
		if (node_tx) {
   16310:	4680      	mov	r8, r0
   16312:	2800      	cmp	r0, #0
   16314:	f000 8095 	beq.w	16442 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   16318:	2300      	movs	r3, #0
   1631a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   1631e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   16320:	442b      	add	r3, r5
   16322:	b29b      	uxth	r3, r3
   16324:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   16326:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1632a:	7903      	ldrb	r3, [r0, #4]
   1632c:	f043 0303 	orr.w	r3, r3, #3
   16330:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16332:	2308      	movs	r3, #8
   16334:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   16336:	2301      	movs	r3, #1
   16338:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   1633a:	2205      	movs	r2, #5
   1633c:	f104 0179 	add.w	r1, r4, #121	; 0x79
   16340:	3008      	adds	r0, #8
   16342:	f7e9 ffbd 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   16346:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1634a:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   1634e:	4641      	mov	r1, r8
   16350:	4620      	mov	r0, r4
   16352:	f7fb fe1f 	bl	11f94 <ctrl_tx_enqueue>
   16356:	e074      	b.n	16442 <event_connection_prepare+0xc82>
   16358:	1afd498d 	.word	0x1afd498d
   1635c:	00000007 	.word	0x00000007
   16360:	0001394d 	.word	0x0001394d
   16364:	d1b71759 	.word	0xd1b71759
   16368:	2000c238 	.word	0x2000c238
   1636c:	00013681 	.word	0x00013681
   16370:	2000144c 	.word	0x2000144c
   16374:	09ce5400 	.word	0x09ce5400
   16378:	00031e94 	.word	0x00031e94
   1637c:	431bde83 	.word	0x431bde83
   16380:	00016d1d 	.word	0x00016d1d
   16384:	200015a4 	.word	0x200015a4
   16388:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1638c:	48d9      	ldr	r0, [pc, #868]	; (166f4 <event_connection_prepare+0xf34>)
   1638e:	f7f9 fb70 	bl	fa72 <mem_acquire>
	if (node_tx) {
   16392:	4680      	mov	r8, r0
   16394:	2800      	cmp	r0, #0
   16396:	d054      	beq.n	16442 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   16398:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   1639c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   163a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   163a4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   163a8:	2b00      	cmp	r3, #0
   163aa:	f2c0 808c 	blt.w	164c6 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   163ae:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   163b2:	4653      	mov	r3, sl
   163b4:	2200      	movs	r2, #0
   163b6:	f104 0193 	add.w	r1, r4, #147	; 0x93
   163ba:	f104 0083 	add.w	r0, r4, #131	; 0x83
   163be:	f7f9 fc65 	bl	fc8c <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   163c2:	2210      	movs	r2, #16
   163c4:	4651      	mov	r1, sl
   163c6:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   163ca:	f7e9 ff79 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   163ce:	2208      	movs	r2, #8
   163d0:	f504 7189 	add.w	r1, r4, #274	; 0x112
   163d4:	f204 1033 	addw	r0, r4, #307	; 0x133
   163d8:	f7e9 ff72 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   163dc:	2300      	movs	r3, #0
   163de:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   163e2:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   163e6:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   163ea:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   163ee:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   163f2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   163f6:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   163fa:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   163fe:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   16402:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   16406:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   1640a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   1640e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   16412:	f363 0200 	bfi	r2, r3, #0, #1
   16416:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   1641a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1641e:	f043 0301 	orr.w	r3, r3, #1
   16422:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   16426:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   1642a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1642e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   16432:	4649      	mov	r1, r9
   16434:	4620      	mov	r0, r4
   16436:	f7fb fe9d 	bl	12174 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   1643a:	4641      	mov	r1, r8
   1643c:	4620      	mov	r0, r4
   1643e:	f7fb fda9 	bl	11f94 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   16442:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   16446:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1644a:	429a      	cmp	r2, r3
   1644c:	d021      	beq.n	16492 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1644e:	2305      	movs	r3, #5
   16450:	2200      	movs	r2, #0
   16452:	4611      	mov	r1, r2
   16454:	4610      	mov	r0, r2
   16456:	f7fc fa77 	bl	12948 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1645a:	48a6      	ldr	r0, [pc, #664]	; (166f4 <event_connection_prepare+0xf34>)
   1645c:	f7f9 fb09 	bl	fa72 <mem_acquire>
		if (node_tx) {
   16460:	4601      	mov	r1, r0
   16462:	b1b0      	cbz	r0, 16492 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   16464:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   16468:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1646c:	7903      	ldrb	r3, [r0, #4]
   1646e:	f043 0303 	orr.w	r3, r3, #3
   16472:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   16474:	2302      	movs	r3, #2
   16476:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   16478:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   1647a:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   1647e:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   16480:	4620      	mov	r0, r4
   16482:	f7fb fd87 	bl	11f94 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   16486:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   16488:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   1648c:	2b01      	cmp	r3, #1
   1648e:	f240 82a6 	bls.w	169de <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   16492:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   16496:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1649a:	429a      	cmp	r2, r3
   1649c:	f000 83f9 	beq.w	16c92 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   164a0:	2305      	movs	r3, #5
   164a2:	2200      	movs	r2, #0
   164a4:	4611      	mov	r1, r2
   164a6:	4610      	mov	r0, r2
   164a8:	f7fc fa4e 	bl	12948 <event_stop>
	switch (conn->llcp_length.state) {
   164ac:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   164b0:	f003 0303 	and.w	r3, r3, #3
   164b4:	2b03      	cmp	r3, #3
   164b6:	f200 8427 	bhi.w	16d08 <event_connection_prepare+0x1548>
   164ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   164be:	0299      	.short	0x0299
   164c0:	03ea03ea 	.word	0x03ea03ea
   164c4:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   164c6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   164ca:	f003 0348 	and.w	r3, r3, #72	; 0x48
   164ce:	2b08      	cmp	r3, #8
   164d0:	d079      	beq.n	165c6 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   164d2:	7903      	ldrb	r3, [r0, #4]
   164d4:	f043 0303 	orr.w	r3, r3, #3
   164d8:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   164da:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   164de:	b333      	cbz	r3, 1652e <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   164e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   164e4:	f013 0f20 	tst.w	r3, #32
   164e8:	d00e      	beq.n	16508 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   164ea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   164ee:	f013 0f04 	tst.w	r3, #4
   164f2:	d009      	beq.n	16508 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   164f4:	2311      	movs	r3, #17
   164f6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   164f8:	2303      	movs	r3, #3
   164fa:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   164fc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16500:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   16502:	2302      	movs	r3, #2
   16504:	7143      	strb	r3, [r0, #5]
   16506:	e009      	b.n	1651c <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16508:	230d      	movs	r3, #13
   1650a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   1650e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16512:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   16516:	2301      	movs	r3, #1
   16518:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   1651c:	f898 3005 	ldrb.w	r3, [r8, #5]
   16520:	3301      	adds	r3, #1
   16522:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   16526:	2300      	movs	r3, #0
   16528:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1652c:	e785      	b.n	1643a <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   1652e:	4620      	mov	r0, r4
   16530:	f7fd fa38 	bl	139a4 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   16534:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   16538:	464b      	mov	r3, r9
   1653a:	2200      	movs	r2, #0
   1653c:	f104 0193 	add.w	r1, r4, #147	; 0x93
   16540:	f104 0083 	add.w	r0, r4, #131	; 0x83
   16544:	f7f9 fba2 	bl	fc8c <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   16548:	2210      	movs	r2, #16
   1654a:	4649      	mov	r1, r9
   1654c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   16550:	f7e9 feb6 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   16554:	2208      	movs	r2, #8
   16556:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1655a:	f204 1033 	addw	r0, r4, #307	; 0x133
   1655e:	f7e9 feaf 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   16562:	2300      	movs	r3, #0
   16564:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   16568:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   1656c:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   16570:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   16574:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   16578:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   1657c:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   16580:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   16584:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   16588:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   1658c:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   16590:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   16594:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   16598:	f042 0201 	orr.w	r2, r2, #1
   1659c:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   165a0:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   165a4:	f363 0200 	bfi	r2, r3, #0, #1
   165a8:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   165ac:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   165b0:	f043 0310 	orr.w	r3, r3, #16
   165b4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   165b8:	2301      	movs	r3, #1
   165ba:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   165be:	2305      	movs	r3, #5
   165c0:	f888 3007 	strb.w	r3, [r8, #7]
   165c4:	e739      	b.n	1643a <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   165c6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 166fc <event_connection_prepare+0xf3c>
   165ca:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   165ce:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   165d2:	f043 0320 	orr.w	r3, r3, #32
   165d6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   165da:	2100      	movs	r1, #0
   165dc:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   165e0:	f7fb fdc8 	bl	12174 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   165e4:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   165e8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   165ec:	f36f 0282 	bfc	r2, #2, #1
   165f0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   165f4:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   165f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   165fc:	f36f 02c3 	bfc	r2, #3, #1
   16600:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   16604:	e719      	b.n	1643a <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16606:	483b      	ldr	r0, [pc, #236]	; (166f4 <event_connection_prepare+0xf34>)
   16608:	f7f9 fa33 	bl	fa72 <mem_acquire>
	if (node_tx) {
   1660c:	4680      	mov	r8, r0
   1660e:	2800      	cmp	r0, #0
   16610:	f43f af17 	beq.w	16442 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   16614:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16618:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   1661c:	4b36      	ldr	r3, [pc, #216]	; (166f8 <event_connection_prepare+0xf38>)
   1661e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16622:	7903      	ldrb	r3, [r0, #4]
   16624:	f043 0303 	orr.w	r3, r3, #3
   16628:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1662a:	2309      	movs	r3, #9
   1662c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1662e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   16632:	2b00      	cmp	r3, #0
   16634:	db1e      	blt.n	16674 <event_connection_prepare+0xeb4>
   16636:	2308      	movs	r3, #8
   16638:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   1663c:	2208      	movs	r2, #8
   1663e:	2100      	movs	r1, #0
   16640:	eb08 0002 	add.w	r0, r8, r2
   16644:	f014 f9fc 	bl	2aa40 <memset>
			conn->llcp_features & 0xFF;
   16648:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   1664c:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   16650:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   16654:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   16656:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   1665a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   1665e:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   16662:	4641      	mov	r1, r8
   16664:	4620      	mov	r0, r4
   16666:	f7fb fc95 	bl	11f94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1666a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1666e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16672:	e6e6      	b.n	16442 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   16674:	230e      	movs	r3, #14
   16676:	e7df      	b.n	16638 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   16678:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1667c:	f013 0f01 	tst.w	r3, #1
   16680:	d03e      	beq.n	16700 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   16682:	f013 0f02 	tst.w	r3, #2
   16686:	d076      	beq.n	16776 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   16688:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1668c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   16690:	4b1a      	ldr	r3, [pc, #104]	; (166fc <event_connection_prepare+0xf3c>)
   16692:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16696:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1669a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1669c:	429a      	cmp	r2, r3
   1669e:	d358      	bcc.n	16752 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   166a0:	4b16      	ldr	r3, [pc, #88]	; (166fc <event_connection_prepare+0xf3c>)
   166a2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   166a6:	1ad3      	subs	r3, r2, r3
   166a8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   166aa:	2b01      	cmp	r3, #1
   166ac:	d95b      	bls.n	16766 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   166ae:	4b13      	ldr	r3, [pc, #76]	; (166fc <event_connection_prepare+0xf3c>)
   166b0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   166b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   166b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   166bc:	2b00      	cmp	r3, #0
   166be:	d054      	beq.n	1676a <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   166c0:	8c22      	ldrh	r2, [r4, #32]
   166c2:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   166c4:	2201      	movs	r2, #1
   166c6:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   166c8:	7a1a      	ldrb	r2, [r3, #8]
   166ca:	f042 0203 	orr.w	r2, r2, #3
   166ce:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   166d0:	2206      	movs	r2, #6
   166d2:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   166d4:	220c      	movs	r2, #12
   166d6:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   166d8:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   166dc:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   166de:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   166e2:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   166e6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   166ea:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   166ee:	f7fe fa05 	bl	14afc <packet_rx_enqueue>
   166f2:	e6a6      	b.n	16442 <event_connection_prepare+0xc82>
   166f4:	200015a4 	.word	0x200015a4
   166f8:	000141ff 	.word	0x000141ff
   166fc:	2000144c 	.word	0x2000144c
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16700:	48b9      	ldr	r0, [pc, #740]	; (169e8 <event_connection_prepare+0x1228>)
   16702:	f7f9 f9b6 	bl	fa72 <mem_acquire>
		if (node_tx) {
   16706:	4601      	mov	r1, r0
   16708:	2800      	cmp	r0, #0
   1670a:	f43f ae9a 	beq.w	16442 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   1670e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16712:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   16716:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1671a:	f043 0301 	orr.w	r3, r3, #1
   1671e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16722:	7903      	ldrb	r3, [r0, #4]
   16724:	f043 0303 	orr.w	r3, r3, #3
   16728:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1672a:	2306      	movs	r3, #6
   1672c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1672e:	230c      	movs	r3, #12
   16730:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   16732:	2309      	movs	r3, #9
   16734:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   16736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1673a:	7243      	strb	r3, [r0, #9]
   1673c:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1673e:	72c3      	strb	r3, [r0, #11]
   16740:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   16742:	4620      	mov	r0, r4
   16744:	f7fb fc26 	bl	11f94 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   16748:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1674c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16750:	e677      	b.n	16442 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   16752:	49a6      	ldr	r1, [pc, #664]	; (169ec <event_connection_prepare+0x122c>)
   16754:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16758:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1675c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1675e:	fa52 f383 	uxtab	r3, r2, r3
   16762:	b2db      	uxtb	r3, r3
   16764:	e7a1      	b.n	166aa <event_connection_prepare+0xeea>
		return 0;
   16766:	2300      	movs	r3, #0
   16768:	e7a8      	b.n	166bc <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   1676a:	4040      	eors	r0, r0
   1676c:	f380 8811 	msr	BASEPRI, r0
   16770:	f04f 0004 	mov.w	r0, #4
   16774:	df02      	svc	2
		LL_ASSERT(0);
   16776:	4040      	eors	r0, r0
   16778:	f380 8811 	msr	BASEPRI, r0
   1677c:	f04f 0004 	mov.w	r0, #4
   16780:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16782:	4899      	ldr	r0, [pc, #612]	; (169e8 <event_connection_prepare+0x1228>)
   16784:	f7f9 f975 	bl	fa72 <mem_acquire>
	if (node_tx) {
   16788:	4601      	mov	r1, r0
   1678a:	2800      	cmp	r0, #0
   1678c:	f43f ae59 	beq.w	16442 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   16790:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16794:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16798:	7903      	ldrb	r3, [r0, #4]
   1679a:	f043 0303 	orr.w	r3, r3, #3
   1679e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   167a0:	2301      	movs	r3, #1
   167a2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   167a4:	2312      	movs	r3, #18
   167a6:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   167a8:	4620      	mov	r0, r4
   167aa:	f7fb fbf3 	bl	11f94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   167ae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   167b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   167b6:	e644      	b.n	16442 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   167b8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   167bc:	f012 0f01 	tst.w	r2, #1
   167c0:	d16b      	bne.n	1689a <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   167c2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   167c6:	1aeb      	subs	r3, r5, r3
   167c8:	b29b      	uxth	r3, r3
   167ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   167ce:	f6bf ae38 	bge.w	16442 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   167d2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   167d6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   167da:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   167de:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   167e2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   167e6:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   167ea:	f012 0f1c 	tst.w	r2, #28
   167ee:	d009      	beq.n	16804 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   167f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   167f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   167f8:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   167fc:	f363 0ec5 	bfi	lr, r3, #3, #3
   16800:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   16804:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   16808:	d008      	beq.n	1681c <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1680a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1680e:	095b      	lsrs	r3, r3, #5
   16810:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   16814:	f363 0e02 	bfi	lr, r3, #0, #3
   16818:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1681c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16820:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   16824:	f36e 13c7 	bfi	r3, lr, #7, #1
   16828:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1682c:	f012 0f02 	tst.w	r2, #2
   16830:	d105      	bne.n	1683e <event_connection_prepare+0x107e>
   16832:	b2db      	uxtb	r3, r3
   16834:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16838:	4299      	cmp	r1, r3
   1683a:	f000 80b0 	beq.w	1699e <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   1683e:	4b6b      	ldr	r3, [pc, #428]	; (169ec <event_connection_prepare+0x122c>)
   16840:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16844:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16848:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1684a:	429a      	cmp	r2, r3
   1684c:	f0c0 80af 	bcc.w	169ae <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   16850:	4b66      	ldr	r3, [pc, #408]	; (169ec <event_connection_prepare+0x122c>)
   16852:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16856:	1ad3      	subs	r3, r2, r3
   16858:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1685a:	2b01      	cmp	r3, #1
   1685c:	f240 80b1 	bls.w	169c2 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   16860:	4b62      	ldr	r3, [pc, #392]	; (169ec <event_connection_prepare+0x122c>)
   16862:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16866:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   1686e:	2b00      	cmp	r3, #0
   16870:	f000 80a9 	beq.w	169c6 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   16874:	8c22      	ldrh	r2, [r4, #32]
   16876:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16878:	220c      	movs	r2, #12
   1687a:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   1687c:	2200      	movs	r2, #0
   1687e:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   16880:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16884:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16888:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   1688a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1688e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16892:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   16894:	f7fe f932 	bl	14afc <packet_rx_enqueue>
   16898:	e5d3      	b.n	16442 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1689a:	4853      	ldr	r0, [pc, #332]	; (169e8 <event_connection_prepare+0x1228>)
   1689c:	f7f9 f8e9 	bl	fa72 <mem_acquire>
		if (node_tx) {
   168a0:	4680      	mov	r8, r0
   168a2:	2800      	cmp	r0, #0
   168a4:	f43f adcd 	beq.w	16442 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   168a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   168ac:	f36f 0300 	bfc	r3, #0, #1
   168b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   168b4:	b2db      	uxtb	r3, r3
   168b6:	f3c3 0282 	ubfx	r2, r3, #2, #3
   168ba:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   168be:	d147      	bne.n	16950 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   168c0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   168c4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   168c8:	2300      	movs	r3, #0
   168ca:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   168ce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   168d2:	f013 0f02 	tst.w	r3, #2
   168d6:	d041      	beq.n	1695c <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   168d8:	4b44      	ldr	r3, [pc, #272]	; (169ec <event_connection_prepare+0x122c>)
   168da:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   168de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   168e2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   168e4:	429a      	cmp	r2, r3
   168e6:	d321      	bcc.n	1692c <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   168e8:	4b40      	ldr	r3, [pc, #256]	; (169ec <event_connection_prepare+0x122c>)
   168ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   168ee:	1ad3      	subs	r3, r2, r3
   168f0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   168f2:	2b01      	cmp	r3, #1
   168f4:	d924      	bls.n	16940 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   168f6:	4b3d      	ldr	r3, [pc, #244]	; (169ec <event_connection_prepare+0x122c>)
   168f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   168fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   16904:	b1f3      	cbz	r3, 16944 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   16906:	8c22      	ldrh	r2, [r4, #32]
   16908:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1690a:	220c      	movs	r2, #12
   1690c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1690e:	2200      	movs	r2, #0
   16910:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   16912:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16916:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1691a:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   1691c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16920:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16924:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   16926:	f7fe f8e9 	bl	14afc <packet_rx_enqueue>
   1692a:	e017      	b.n	1695c <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   1692c:	492f      	ldr	r1, [pc, #188]	; (169ec <event_connection_prepare+0x122c>)
   1692e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16932:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16936:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16938:	fa52 f383 	uxtab	r3, r2, r3
   1693c:	b2db      	uxtb	r3, r3
   1693e:	e7d8      	b.n	168f2 <event_connection_prepare+0x1132>
		return 0;
   16940:	2300      	movs	r3, #0
   16942:	e7df      	b.n	16904 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   16944:	4040      	eors	r0, r0
   16946:	f380 8811 	msr	BASEPRI, r0
   1694a:	f04f 0004 	mov.w	r0, #4
   1694e:	df02      	svc	2
								 conn->latency +
   16950:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   16952:	442b      	add	r3, r5
   16954:	b29b      	uxth	r3, r3
								 conn->latency +
   16956:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   16958:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1695c:	f898 3004 	ldrb.w	r3, [r8, #4]
   16960:	f043 0303 	orr.w	r3, r3, #3
   16964:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16968:	2305      	movs	r3, #5
   1696a:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1696e:	2318      	movs	r3, #24
   16970:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   16974:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16978:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1697c:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   16980:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16984:	f3c3 1342 	ubfx	r3, r3, #5, #3
   16988:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   1698c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16990:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   16994:	4641      	mov	r1, r8
   16996:	4620      	mov	r0, r4
   16998:	f7fb fafc 	bl	11f94 <ctrl_tx_enqueue>
   1699c:	e551      	b.n	16442 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   1699e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   169a2:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   169a6:	4298      	cmp	r0, r3
   169a8:	f47f af49 	bne.w	1683e <event_connection_prepare+0x107e>
   169ac:	e549      	b.n	16442 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   169ae:	490f      	ldr	r1, [pc, #60]	; (169ec <event_connection_prepare+0x122c>)
   169b0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   169b4:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   169b8:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   169ba:	fa52 f383 	uxtab	r3, r2, r3
   169be:	b2db      	uxtb	r3, r3
   169c0:	e74b      	b.n	1685a <event_connection_prepare+0x109a>
		return 0;
   169c2:	2300      	movs	r3, #0
   169c4:	e753      	b.n	1686e <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   169c6:	4040      	eors	r0, r0
   169c8:	f380 8811 	msr	BASEPRI, r0
   169cc:	f04f 0004 	mov.w	r0, #4
   169d0:	df02      	svc	2
			LL_ASSERT(0);
   169d2:	4040      	eors	r0, r0
   169d4:	f380 8811 	msr	BASEPRI, r0
   169d8:	f04f 0004 	mov.w	r0, #4
   169dc:	df02      	svc	2
				conn->procedure_expire++;
   169de:	3301      	adds	r3, #1
   169e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   169e4:	e555      	b.n	16492 <event_connection_prepare+0xcd2>
   169e6:	bf00      	nop
   169e8:	200015a4 	.word	0x200015a4
   169ec:	2000144c 	.word	0x2000144c
	if (_radio.packet_rx_acquire >=
   169f0:	4bbf      	ldr	r3, [pc, #764]	; (16cf0 <event_connection_prepare+0x1530>)
   169f2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   169f6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   169fa:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   169fc:	429a      	cmp	r2, r3
   169fe:	d346      	bcc.n	16a8e <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   16a00:	4bbb      	ldr	r3, [pc, #748]	; (16cf0 <event_connection_prepare+0x1530>)
   16a02:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16a06:	eba2 0808 	sub.w	r8, r2, r8
   16a0a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16a0e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16a12:	4bb7      	ldr	r3, [pc, #732]	; (16cf0 <event_connection_prepare+0x1530>)
   16a14:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16a18:	f7f9 f85f 	bl	fada <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   16a1c:	4440      	add	r0, r8
   16a1e:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16a20:	28ff      	cmp	r0, #255	; 0xff
   16a22:	d840      	bhi.n	16aa6 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16a24:	4bb2      	ldr	r3, [pc, #712]	; (16cf0 <event_connection_prepare+0x1530>)
   16a26:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   16a2a:	4298      	cmp	r0, r3
   16a2c:	f040 8131 	bne.w	16c92 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16a30:	48b0      	ldr	r0, [pc, #704]	; (16cf4 <event_connection_prepare+0x1534>)
   16a32:	f7f9 f81e 	bl	fa72 <mem_acquire>
		if (!node_tx) {
   16a36:	4601      	mov	r1, r0
   16a38:	2800      	cmp	r0, #0
   16a3a:	f000 812a 	beq.w	16c92 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   16a3e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16a42:	2201      	movs	r2, #1
   16a44:	f362 0301 	bfi	r3, r2, #0, #2
   16a48:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16a4c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   16a50:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   16a52:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   16a56:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16a58:	7903      	ldrb	r3, [r0, #4]
   16a5a:	f043 0303 	orr.w	r3, r3, #3
   16a5e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16a60:	2309      	movs	r3, #9
   16a62:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   16a64:	2314      	movs	r3, #20
   16a66:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   16a68:	231b      	movs	r3, #27
   16a6a:	7203      	strb	r3, [r0, #8]
   16a6c:	2300      	movs	r3, #0
   16a6e:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   16a70:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   16a72:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   16a74:	2348      	movs	r3, #72	; 0x48
   16a76:	7283      	strb	r3, [r0, #10]
   16a78:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   16a7a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16a7c:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   16a7e:	4620      	mov	r0, r4
   16a80:	f7fb fa88 	bl	11f94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   16a84:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16a88:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16a8c:	e101      	b.n	16c92 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   16a8e:	4b98      	ldr	r3, [pc, #608]	; (16cf0 <event_connection_prepare+0x1530>)
   16a90:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16a94:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16a98:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   16a9c:	fa52 f888 	uxtab	r8, r2, r8
   16aa0:	fa5f f888 	uxtb.w	r8, r8
   16aa4:	e7b3      	b.n	16a0e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   16aa6:	4040      	eors	r0, r0
   16aa8:	f380 8811 	msr	BASEPRI, r0
   16aac:	f04f 0004 	mov.w	r0, #4
   16ab0:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   16ab2:	4b8f      	ldr	r3, [pc, #572]	; (16cf0 <event_connection_prepare+0x1530>)
   16ab4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16ab8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16abc:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16abe:	429a      	cmp	r2, r3
   16ac0:	d352      	bcc.n	16b68 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   16ac2:	4b8b      	ldr	r3, [pc, #556]	; (16cf0 <event_connection_prepare+0x1530>)
   16ac4:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16ac8:	eba2 0808 	sub.w	r8, r2, r8
   16acc:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16ad0:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16ad4:	4b86      	ldr	r3, [pc, #536]	; (16cf0 <event_connection_prepare+0x1530>)
   16ad6:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16ada:	f7f8 fffe 	bl	fada <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   16ade:	4440      	add	r0, r8
   16ae0:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16ae2:	28ff      	cmp	r0, #255	; 0xff
   16ae4:	d84c      	bhi.n	16b80 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16ae6:	4b82      	ldr	r3, [pc, #520]	; (16cf0 <event_connection_prepare+0x1530>)
   16ae8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   16aec:	4298      	cmp	r0, r3
   16aee:	d14d      	bne.n	16b8c <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   16af0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16af4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   16af8:	2100      	movs	r1, #0
   16afa:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   16afe:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 16cf0 <event_connection_prepare+0x1530>
   16b02:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   16b06:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   16b0a:	f361 02c3 	bfi	r2, r1, #3, #1
   16b0e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   16b12:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16b16:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   16b18:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   16b1c:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   16b1e:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   16b22:	f7f8 ffda 	bl	fada <mem_free_count_get>
		if (_radio.advertiser.conn) {
   16b26:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   16b2a:	b10b      	cbz	r3, 16b30 <event_connection_prepare+0x1370>
			free_count_conn++;
   16b2c:	3001      	adds	r0, #1
   16b2e:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   16b30:	4b6f      	ldr	r3, [pc, #444]	; (16cf0 <event_connection_prepare+0x1530>)
   16b32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16b36:	b10b      	cbz	r3, 16b3c <event_connection_prepare+0x137c>
			free_count_conn++;
   16b38:	3001      	adds	r0, #1
   16b3a:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   16b3c:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   16b40:	f109 090e 	add.w	r9, r9, #14
   16b44:	fa1f f989 	uxth.w	r9, r9
   16b48:	f029 0903 	bic.w	r9, r9, #3
   16b4c:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16b50:	3001      	adds	r0, #1
   16b52:	4b67      	ldr	r3, [pc, #412]	; (16cf0 <event_connection_prepare+0x1530>)
   16b54:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   16b58:	4298      	cmp	r0, r3
   16b5a:	d038      	beq.n	16bce <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   16b5c:	4b64      	ldr	r3, [pc, #400]	; (16cf0 <event_connection_prepare+0x1530>)
   16b5e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16b62:	4599      	cmp	r9, r3
   16b64:	d833      	bhi.n	16bce <event_connection_prepare+0x140e>
   16b66:	e066      	b.n	16c36 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   16b68:	4b61      	ldr	r3, [pc, #388]	; (16cf0 <event_connection_prepare+0x1530>)
   16b6a:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16b6e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16b72:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   16b76:	fa52 f888 	uxtab	r8, r2, r8
   16b7a:	fa5f f888 	uxtb.w	r8, r8
   16b7e:	e7a7      	b.n	16ad0 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   16b80:	4040      	eors	r0, r0
   16b82:	f380 8811 	msr	BASEPRI, r0
   16b86:	f04f 0004 	mov.w	r0, #4
   16b8a:	df02      	svc	2
			LL_ASSERT(0);
   16b8c:	4040      	eors	r0, r0
   16b8e:	f380 8811 	msr	BASEPRI, r0
   16b92:	f04f 0004 	mov.w	r0, #4
   16b96:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   16b98:	3b01      	subs	r3, #1
   16b9a:	4a55      	ldr	r2, [pc, #340]	; (16cf0 <event_connection_prepare+0x1530>)
   16b9c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16ba0:	4f53      	ldr	r7, [pc, #332]	; (16cf0 <event_connection_prepare+0x1530>)
   16ba2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   16ba6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   16bae:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   16bb2:	6818      	ldr	r0, [r3, #0]
   16bb4:	f7f8 ff79 	bl	faaa <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   16bb8:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   16bbc:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   16bc0:	3a01      	subs	r2, #1
   16bc2:	4293      	cmp	r3, r2
   16bc4:	da14      	bge.n	16bf0 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   16bc6:	3301      	adds	r3, #1
   16bc8:	4a49      	ldr	r2, [pc, #292]	; (16cf0 <event_connection_prepare+0x1530>)
   16bca:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   16bce:	4a48      	ldr	r2, [pc, #288]	; (16cf0 <event_connection_prepare+0x1530>)
   16bd0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   16bd4:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   16bd8:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   16bda:	4293      	cmp	r3, r2
   16bdc:	d00e      	beq.n	16bfc <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   16bde:	2b00      	cmp	r3, #0
   16be0:	d1da      	bne.n	16b98 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   16be2:	4a43      	ldr	r2, [pc, #268]	; (16cf0 <event_connection_prepare+0x1530>)
   16be4:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   16be8:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   16bea:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   16bee:	e7d7      	b.n	16ba0 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   16bf0:	4040      	eors	r0, r0
   16bf2:	f380 8811 	msr	BASEPRI, r0
   16bf6:	f04f 0004 	mov.w	r0, #4
   16bfa:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   16bfc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   16bfe:	2b29      	cmp	r3, #41	; 0x29
   16c00:	d85f      	bhi.n	16cc2 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   16c02:	2234      	movs	r2, #52	; 0x34
   16c04:	4b3a      	ldr	r3, [pc, #232]	; (16cf0 <event_connection_prepare+0x1530>)
   16c06:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   16c0a:	4b39      	ldr	r3, [pc, #228]	; (16cf0 <event_connection_prepare+0x1530>)
   16c0c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   16c10:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   16c14:	fbb2 f2f1 	udiv	r2, r2, r1
   16c18:	b2d2      	uxtb	r2, r2
   16c1a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   16c1e:	2a00      	cmp	r2, #0
   16c20:	d053      	beq.n	16cca <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   16c22:	4833      	ldr	r0, [pc, #204]	; (16cf0 <event_connection_prepare+0x1530>)
   16c24:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   16c28:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   16c2c:	f7f8 fefc 	bl	fa28 <mem_init>
			packet_rx_allocate(4);
   16c30:	2004      	movs	r0, #4
   16c32:	f7fb fc59 	bl	124e8 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   16c36:	4b2e      	ldr	r3, [pc, #184]	; (16cf0 <event_connection_prepare+0x1530>)
   16c38:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16c3c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c40:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16c42:	429a      	cmp	r2, r3
   16c44:	d347      	bcc.n	16cd6 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   16c46:	4b2a      	ldr	r3, [pc, #168]	; (16cf0 <event_connection_prepare+0x1530>)
   16c48:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16c4c:	1ad3      	subs	r3, r2, r3
   16c4e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16c50:	2b01      	cmp	r3, #1
   16c52:	d94a      	bls.n	16cea <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   16c54:	4b26      	ldr	r3, [pc, #152]	; (16cf0 <event_connection_prepare+0x1530>)
   16c56:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16c5a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   16c62:	2b00      	cmp	r3, #0
   16c64:	d04a      	beq.n	16cfc <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   16c66:	8c22      	ldrh	r2, [r4, #32]
   16c68:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16c6a:	2201      	movs	r2, #1
   16c6c:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16c6e:	7a1a      	ldrb	r2, [r3, #8]
   16c70:	f042 0203 	orr.w	r2, r2, #3
   16c74:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   16c76:	2209      	movs	r2, #9
   16c78:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   16c7a:	2215      	movs	r2, #21
   16c7c:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   16c7e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   16c80:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   16c82:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   16c84:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   16c86:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   16c88:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   16c8a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   16c8c:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   16c8e:	f7fd ff35 	bl	14afc <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   16c92:	1d23      	adds	r3, r4, #4
   16c94:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   16c96:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   16c98:	3207      	adds	r2, #7
   16c9a:	b2d2      	uxtb	r2, r2
   16c9c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   16ca0:	2800      	cmp	r0, #0
   16ca2:	db37      	blt.n	16d14 <event_connection_prepare+0x1554>
   16ca4:	4814      	ldr	r0, [pc, #80]	; (16cf8 <event_connection_prepare+0x1538>)
   16ca6:	9403      	str	r4, [sp, #12]
   16ca8:	9002      	str	r0, [sp, #8]
   16caa:	9201      	str	r2, [sp, #4]
   16cac:	9100      	str	r1, [sp, #0]
   16cae:	4622      	mov	r2, r4
   16cb0:	990a      	ldr	r1, [sp, #40]	; 0x28
   16cb2:	4630      	mov	r0, r6
   16cb4:	f7fe fc7e 	bl	155b4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   16cb8:	3501      	adds	r5, #1
   16cba:	8465      	strh	r5, [r4, #34]	; 0x22
}
   16cbc:	b00f      	add	sp, #60	; 0x3c
   16cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   16cc2:	4b0b      	ldr	r3, [pc, #44]	; (16cf0 <event_connection_prepare+0x1530>)
   16cc4:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   16cc8:	e79f      	b.n	16c0a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   16cca:	4040      	eors	r0, r0
   16ccc:	f380 8811 	msr	BASEPRI, r0
   16cd0:	f04f 0004 	mov.w	r0, #4
   16cd4:	df02      	svc	2
		return (_radio.packet_rx_count -
   16cd6:	4906      	ldr	r1, [pc, #24]	; (16cf0 <event_connection_prepare+0x1530>)
   16cd8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16cdc:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16ce0:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16ce2:	fa52 f383 	uxtab	r3, r2, r3
   16ce6:	b2db      	uxtb	r3, r3
   16ce8:	e7b2      	b.n	16c50 <event_connection_prepare+0x1490>
		return 0;
   16cea:	2300      	movs	r3, #0
   16cec:	e7b9      	b.n	16c62 <event_connection_prepare+0x14a2>
   16cee:	bf00      	nop
   16cf0:	2000144c 	.word	0x2000144c
   16cf4:	200015a4 	.word	0x200015a4
   16cf8:	00017171 	.word	0x00017171
		LL_ASSERT(node_rx);
   16cfc:	4040      	eors	r0, r0
   16cfe:	f380 8811 	msr	BASEPRI, r0
   16d02:	f04f 0004 	mov.w	r0, #4
   16d06:	df02      	svc	2
		LL_ASSERT(0);
   16d08:	4040      	eors	r0, r0
   16d0a:	f380 8811 	msr	BASEPRI, r0
   16d0e:	f04f 0004 	mov.w	r0, #4
   16d12:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   16d14:	4800      	ldr	r0, [pc, #0]	; (16d18 <event_connection_prepare+0x1558>)
   16d16:	e7c6      	b.n	16ca6 <event_connection_prepare+0x14e6>
   16d18:	000172ad 	.word	0x000172ad

00016d1c <event_slave_prepare>:
{
   16d1c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16d1e:	f7fe fd4f 	bl	157c0 <event_connection_prepare>
   16d22:	bd08      	pop	{r3, pc}

00016d24 <event_master_prepare>:
{
   16d24:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16d26:	f7fe fd4b 	bl	157c0 <event_connection_prepare>
   16d2a:	bd08      	pop	{r3, pc}

00016d2c <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   16d2c:	4b20      	ldr	r3, [pc, #128]	; (16db0 <event_scan_prepare+0x84>)
   16d2e:	7b1b      	ldrb	r3, [r3, #12]
   16d30:	bb23      	cbnz	r3, 16d7c <event_scan_prepare+0x50>
{
   16d32:	b530      	push	{r4, r5, lr}
   16d34:	b085      	sub	sp, #20
   16d36:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   16d38:	4c1d      	ldr	r4, [pc, #116]	; (16db0 <event_scan_prepare+0x84>)
   16d3a:	2306      	movs	r3, #6
   16d3c:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   16d3e:	2200      	movs	r2, #0
   16d40:	9203      	str	r2, [sp, #12]
   16d42:	4a1c      	ldr	r2, [pc, #112]	; (16db4 <event_scan_prepare+0x88>)
   16d44:	9202      	str	r2, [sp, #8]
   16d46:	9301      	str	r3, [sp, #4]
   16d48:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   16d4c:	9300      	str	r3, [sp, #0]
   16d4e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   16d52:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   16d56:	f7fe fc2d 	bl	155b4 <event_common_prepare>
	if (_radio.scanner.conn) {
   16d5a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   16d5e:	b15b      	cbz	r3, 16d78 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   16d60:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   16d64:	2b00      	cmp	r3, #0
   16d66:	db0f      	blt.n	16d88 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   16d68:	4b13      	ldr	r3, [pc, #76]	; (16db8 <event_scan_prepare+0x8c>)
   16d6a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   16d6c:	2201      	movs	r2, #1
   16d6e:	4611      	mov	r1, r2
   16d70:	2000      	movs	r0, #0
   16d72:	f7f8 fd3d 	bl	f7f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   16d76:	b9a8      	cbnz	r0, 16da4 <event_scan_prepare+0x78>
}
   16d78:	b005      	add	sp, #20
   16d7a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   16d7c:	4040      	eors	r0, r0
   16d7e:	f380 8811 	msr	BASEPRI, r0
   16d82:	f04f 0004 	mov.w	r0, #4
   16d86:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   16d88:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   16d8c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   16d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   16d94:	4291      	cmp	r1, r2
   16d96:	bf2c      	ite	cs
   16d98:	ebc3 0301 	rsbcs	r3, r3, r1
   16d9c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   16da0:	441d      	add	r5, r3
   16da2:	e7e1      	b.n	16d68 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   16da4:	4040      	eors	r0, r0
   16da6:	f380 8811 	msr	BASEPRI, r0
   16daa:	f04f 0004 	mov.w	r0, #4
   16dae:	df02      	svc	2
   16db0:	2000144c 	.word	0x2000144c
   16db4:	00017449 	.word	0x00017449
   16db8:	2000c228 	.word	0x2000c228
   16dbc:	00000000 	.word	0x00000000

00016dc0 <mayfly_xtal_stop_calc>:
{
   16dc0:	b530      	push	{r4, r5, lr}
   16dc2:	b08d      	sub	sp, #52	; 0x34
   16dc4:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16dc6:	2302      	movs	r3, #2
   16dc8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   16dca:	23ff      	movs	r3, #255	; 0xff
   16dcc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   16dd0:	2300      	movs	r3, #0
   16dd2:	930a      	str	r3, [sp, #40]	; 0x28
   16dd4:	e012      	b.n	16dfc <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dd6:	2101      	movs	r1, #1
   16dd8:	2000      	movs	r0, #0
   16dda:	f7fa fc71 	bl	116c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   16dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16de0:	2b02      	cmp	r3, #2
   16de2:	d0f8      	beq.n	16dd6 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16de6:	b9cb      	cbnz	r3, 16e1c <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   16de8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   16dec:	2aff      	cmp	r2, #255	; 0xff
   16dee:	d01b      	beq.n	16e28 <mayfly_xtal_stop_calc+0x68>
   16df0:	4b8b      	ldr	r3, [pc, #556]	; (17020 <mayfly_xtal_stop_calc+0x260>)
   16df2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   16df6:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   16df8:	429a      	cmp	r2, r3
   16dfa:	db15      	blt.n	16e28 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dfc:	ab0b      	add	r3, sp, #44	; 0x2c
   16dfe:	9302      	str	r3, [sp, #8]
   16e00:	4b88      	ldr	r3, [pc, #544]	; (17024 <mayfly_xtal_stop_calc+0x264>)
   16e02:	9301      	str	r3, [sp, #4]
   16e04:	ab0a      	add	r3, sp, #40	; 0x28
   16e06:	9300      	str	r3, [sp, #0]
   16e08:	ab09      	add	r3, sp, #36	; 0x24
   16e0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   16e0e:	2101      	movs	r1, #1
   16e10:	2000      	movs	r0, #0
   16e12:	f7fa fbd5 	bl	115c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   16e16:	2802      	cmp	r0, #2
   16e18:	d1e4      	bne.n	16de4 <mayfly_xtal_stop_calc+0x24>
   16e1a:	e7e0      	b.n	16dde <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16e1c:	4040      	eors	r0, r0
   16e1e:	f380 8811 	msr	BASEPRI, r0
   16e22:	f04f 0004 	mov.w	r0, #4
   16e26:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   16e28:	2aff      	cmp	r2, #255	; 0xff
   16e2a:	d002      	beq.n	16e32 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   16e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   16e2e:	2ba8      	cmp	r3, #168	; 0xa8
   16e30:	d91a      	bls.n	16e68 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   16e32:	2100      	movs	r1, #0
   16e34:	2001      	movs	r0, #1
   16e36:	f7fb fdcd 	bl	129d4 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   16e3a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16e3e:	1f53      	subs	r3, r2, #5
   16e40:	b2db      	uxtb	r3, r3
   16e42:	2bf9      	cmp	r3, #249	; 0xf9
   16e44:	d80e      	bhi.n	16e64 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16e46:	2a06      	cmp	r2, #6
   16e48:	f200 80d1 	bhi.w	16fee <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16e4c:	2a05      	cmp	r2, #5
   16e4e:	f000 80de 	beq.w	1700e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   16e52:	2a06      	cmp	r2, #6
   16e54:	f040 80d5 	bne.w	17002 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   16e58:	4873      	ldr	r0, [pc, #460]	; (17028 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   16e5a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16e5e:	2101      	movs	r1, #1
   16e60:	f7fe fb80 	bl	15564 <prepare_normal_set>
}
   16e64:	b00d      	add	sp, #52	; 0x34
   16e66:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   16e68:	2101      	movs	r1, #1
   16e6a:	4608      	mov	r0, r1
   16e6c:	f7fb fdb2 	bl	129d4 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   16e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   16e74:	2b04      	cmp	r3, #4
   16e76:	d9f5      	bls.n	16e64 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   16e78:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16e7a:	2b06      	cmp	r3, #6
   16e7c:	d82a      	bhi.n	16ed4 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16e7e:	2b05      	cmp	r3, #5
   16e80:	d03a      	beq.n	16ef8 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   16e82:	2b06      	cmp	r3, #6
   16e84:	d132      	bne.n	16eec <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   16e86:	4968      	ldr	r1, [pc, #416]	; (17028 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   16e88:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   16e8a:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   16e8c:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   16e8e:	429a      	cmp	r2, r3
   16e90:	bf38      	it	cc
   16e92:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   16e94:	680b      	ldr	r3, [r1, #0]
   16e96:	2b00      	cmp	r3, #0
   16e98:	db31      	blt.n	16efe <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   16e9a:	429a      	cmp	r2, r3
   16e9c:	d336      	bcc.n	16f0c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16e9e:	2c06      	cmp	r4, #6
   16ea0:	d84e      	bhi.n	16f40 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   16ea2:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   16ea4:	2d00      	cmp	r5, #0
   16ea6:	d0dd      	beq.n	16e64 <mayfly_xtal_stop_calc+0xa4>
   16ea8:	2c00      	cmp	r4, #0
   16eaa:	d0db      	beq.n	16e64 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   16eac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   16eae:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   16eb0:	4293      	cmp	r3, r2
   16eb2:	d1d7      	bne.n	16e64 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   16eb4:	b292      	uxth	r2, r2
   16eb6:	485d      	ldr	r0, [pc, #372]	; (1702c <mayfly_xtal_stop_calc+0x26c>)
   16eb8:	fba2 0100 	umull	r0, r1, r2, r0
   16ebc:	f240 1323 	movw	r3, #291	; 0x123
   16ec0:	fb03 1102 	mla	r1, r3, r2, r1
   16ec4:	a354      	add	r3, pc, #336	; (adr r3, 17018 <mayfly_xtal_stop_calc+0x258>)
   16ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16eca:	f7ea f917 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   16ece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   16ed2:	e050      	b.n	16f76 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   16ed4:	3b07      	subs	r3, #7
   16ed6:	b29a      	uxth	r2, r3
   16ed8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16edc:	4b50      	ldr	r3, [pc, #320]	; (17020 <mayfly_xtal_stop_calc+0x260>)
   16ede:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16ee2:	f7f8 fe03 	bl	faec <mem_get>
   16ee6:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   16ee8:	4601      	mov	r1, r0
   16eea:	e7ce      	b.n	16e8a <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   16eec:	4040      	eors	r0, r0
   16eee:	f380 8811 	msr	BASEPRI, r0
   16ef2:	f04f 0004 	mov.w	r0, #4
   16ef6:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16ef8:	494d      	ldr	r1, [pc, #308]	; (17030 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   16efa:	2500      	movs	r5, #0
   16efc:	e7c5      	b.n	16e8a <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16efe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   16f02:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16f06:	4413      	add	r3, r2
   16f08:	930a      	str	r3, [sp, #40]	; 0x28
   16f0a:	e7c8      	b.n	16e9e <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   16f0c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   16f0e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16f12:	b29b      	uxth	r3, r3
					ticker_status =
   16f14:	9106      	str	r1, [sp, #24]
   16f16:	4947      	ldr	r1, [pc, #284]	; (17034 <mayfly_xtal_stop_calc+0x274>)
   16f18:	9105      	str	r1, [sp, #20]
   16f1a:	2000      	movs	r0, #0
   16f1c:	9004      	str	r0, [sp, #16]
   16f1e:	9003      	str	r0, [sp, #12]
   16f20:	9302      	str	r3, [sp, #8]
   16f22:	9001      	str	r0, [sp, #4]
   16f24:	9000      	str	r0, [sp, #0]
   16f26:	2101      	movs	r1, #1
   16f28:	f7fa fac0 	bl	114ac <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   16f2c:	2800      	cmp	r0, #0
   16f2e:	d0b6      	beq.n	16e9e <mayfly_xtal_stop_calc+0xde>
   16f30:	2802      	cmp	r0, #2
   16f32:	d0b4      	beq.n	16e9e <mayfly_xtal_stop_calc+0xde>
   16f34:	4040      	eors	r0, r0
   16f36:	f380 8811 	msr	BASEPRI, r0
   16f3a:	f04f 0004 	mov.w	r0, #4
   16f3e:	df02      	svc	2
					mem_get(_radio.conn_pool,
   16f40:	3c07      	subs	r4, #7
				conn_curr =
   16f42:	b2a2      	uxth	r2, r4
   16f44:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16f48:	4b35      	ldr	r3, [pc, #212]	; (17020 <mayfly_xtal_stop_calc+0x260>)
   16f4a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16f4e:	f7f8 fdcd 	bl	faec <mem_get>
   16f52:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   16f54:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   16f56:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   16f58:	429a      	cmp	r2, r3
   16f5a:	bf38      	it	cc
   16f5c:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   16f5e:	6803      	ldr	r3, [r0, #0]
   16f60:	2b00      	cmp	r3, #0
   16f62:	da9f      	bge.n	16ea4 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   16f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   16f68:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   16f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16f6c:	4413      	add	r3, r2
   16f6e:	930a      	str	r3, [sp, #40]	; 0x28
   16f70:	e798      	b.n	16ea4 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   16f72:	1a1b      	subs	r3, r3, r0
   16f74:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   16f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f78:	4298      	cmp	r0, r3
   16f7a:	d3fa      	bcc.n	16f72 <mayfly_xtal_stop_calc+0x1b2>
   16f7c:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   16f80:	2900      	cmp	r1, #0
   16f82:	db1c      	blt.n	16fbe <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   16f84:	2900      	cmp	r1, #0
   16f86:	f6ff af6d 	blt.w	16e64 <mayfly_xtal_stop_calc+0xa4>
   16f8a:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16f8e:	2a00      	cmp	r2, #0
   16f90:	f6bf af68 	bge.w	16e64 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   16f94:	68e2      	ldr	r2, [r4, #12]
								625) +
   16f96:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   16f98:	4293      	cmp	r3, r2
   16f9a:	f4bf af63 	bcs.w	16e64 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   16f9e:	4628      	mov	r0, r5
   16fa0:	f7fb f852 	bl	12048 <conn_update_req>
					if ((status == 2) &&
   16fa4:	2802      	cmp	r0, #2
   16fa6:	f47f af5d 	bne.w	16e64 <mayfly_xtal_stop_calc+0xa4>
   16faa:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   16fae:	f013 0f02 	tst.w	r3, #2
   16fb2:	f43f af57 	beq.w	16e64 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   16fb6:	4620      	mov	r0, r4
   16fb8:	f7fb f846 	bl	12048 <conn_update_req>
   16fbc:	e752      	b.n	16e64 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   16fbe:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16fc2:	2a00      	cmp	r2, #0
   16fc4:	dbde      	blt.n	16f84 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   16fc6:	68e2      	ldr	r2, [r4, #12]
							 625) +
   16fc8:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   16fca:	4293      	cmp	r3, r2
   16fcc:	d2da      	bcs.n	16f84 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   16fce:	4620      	mov	r0, r4
   16fd0:	f7fb f83a 	bl	12048 <conn_update_req>
					if ((status == 2) &&
   16fd4:	2802      	cmp	r0, #2
   16fd6:	f47f af45 	bne.w	16e64 <mayfly_xtal_stop_calc+0xa4>
   16fda:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   16fde:	f013 0f02 	tst.w	r3, #2
   16fe2:	f43f af3f 	beq.w	16e64 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   16fe6:	4628      	mov	r0, r5
   16fe8:	f7fb f82e 	bl	12048 <conn_update_req>
   16fec:	e73a      	b.n	16e64 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   16fee:	3a07      	subs	r2, #7
   16ff0:	b292      	uxth	r2, r2
   16ff2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16ff6:	4b0a      	ldr	r3, [pc, #40]	; (17020 <mayfly_xtal_stop_calc+0x260>)
   16ff8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16ffc:	f7f8 fd76 	bl	faec <mem_get>
   17000:	e72b      	b.n	16e5a <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   17002:	4040      	eors	r0, r0
   17004:	f380 8811 	msr	BASEPRI, r0
   17008:	f04f 0004 	mov.w	r0, #4
   1700c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   1700e:	4808      	ldr	r0, [pc, #32]	; (17030 <mayfly_xtal_stop_calc+0x270>)
   17010:	e723      	b.n	16e5a <mayfly_xtal_stop_calc+0x9a>
   17012:	bf00      	nop
   17014:	f3af 8000 	nop.w
   17018:	1afd498d 	.word	0x1afd498d
   1701c:	00000007 	.word	0x00000007
   17020:	2000144c 	.word	0x2000144c
   17024:	00011df5 	.word	0x00011df5
   17028:	20001518 	.word	0x20001518
   1702c:	09ce5400 	.word	0x09ce5400
   17030:	20001460 	.word	0x20001460
   17034:	00011e21 	.word	0x00011e21

00017038 <preempt_calc>:
{
   17038:	b570      	push	{r4, r5, r6, lr}
   1703a:	4605      	mov	r5, r0
   1703c:	460e      	mov	r6, r1
   1703e:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   17040:	f7fa fb4e 	bl	116e0 <ticker_ticks_now_get>
	u32_t diff =
   17044:	4621      	mov	r1, r4
   17046:	f7fa fb4f 	bl	116e8 <ticker_ticks_diff_get>
	diff += 3;
   1704a:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   1704c:	2c09      	cmp	r4, #9
   1704e:	d801      	bhi.n	17054 <preempt_calc+0x1c>
	return 0;
   17050:	2000      	movs	r0, #0
   17052:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   17054:	2100      	movs	r1, #0
   17056:	4608      	mov	r0, r1
   17058:	f7fb fcbc 	bl	129d4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   1705c:	4632      	mov	r2, r6
   1705e:	2100      	movs	r1, #0
   17060:	4628      	mov	r0, r5
   17062:	f7fe fa7f 	bl	15564 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   17066:	68ab      	ldr	r3, [r5, #8]
   17068:	441c      	add	r4, r3
		if (diff <
   1706a:	2c26      	cmp	r4, #38	; 0x26
   1706c:	d802      	bhi.n	17074 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   1706e:	60ac      	str	r4, [r5, #8]
		return 1;
   17070:	2001      	movs	r0, #1
   17072:	bd70      	pop	{r4, r5, r6, pc}
   17074:	2001      	movs	r0, #1
}
   17076:	bd70      	pop	{r4, r5, r6, pc}

00017078 <event_adv>:
{
   17078:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1707a:	4b3b      	ldr	r3, [pc, #236]	; (17168 <event_adv+0xf0>)
   1707c:	7bdb      	ldrb	r3, [r3, #15]
   1707e:	2b00      	cmp	r3, #0
   17080:	d142      	bne.n	17108 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   17082:	4b39      	ldr	r3, [pc, #228]	; (17168 <event_adv+0xf0>)
   17084:	7b1b      	ldrb	r3, [r3, #12]
   17086:	b2db      	uxtb	r3, r3
   17088:	2b05      	cmp	r3, #5
   1708a:	d143      	bne.n	17114 <event_adv+0x9c>
   1708c:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   1708e:	4c36      	ldr	r4, [pc, #216]	; (17168 <event_adv+0xf0>)
   17090:	2101      	movs	r1, #1
   17092:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   17094:	2300      	movs	r3, #0
   17096:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   17098:	2305      	movs	r3, #5
   1709a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   1709c:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   1709e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   170a2:	f000 0007 	and.w	r0, r0, #7
   170a6:	f7fb fd5b 	bl	12b60 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   170aa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   170ae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   170b2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   170b6:	f363 0243 	bfi	r2, r3, #1, #3
   170ba:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   170be:	f7fc f841 	bl	13144 <adv_setup>
	if (ctrl_rl_enabled()) {
   170c2:	f003 fa43 	bl	1a54c <ctrl_rl_enabled>
   170c6:	bb58      	cbnz	r0, 17120 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   170c8:	4b27      	ldr	r3, [pc, #156]	; (17168 <event_adv+0xf0>)
   170ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   170ce:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   170d2:	d134      	bne.n	1713e <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   170d4:	4c24      	ldr	r4, [pc, #144]	; (17168 <event_adv+0xf0>)
   170d6:	68a2      	ldr	r2, [r4, #8]
   170d8:	f105 0109 	add.w	r1, r5, #9
   170dc:	2001      	movs	r0, #1
   170de:	f7f8 ffeb 	bl	100b8 <radio_tmr_start>
	radio_tmr_end_capture();
   170e2:	f7f9 f89b 	bl	1021c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   170e6:	462a      	mov	r2, r5
   170e8:	2105      	movs	r1, #5
   170ea:	f104 0014 	add.w	r0, r4, #20
   170ee:	f7ff ffa3 	bl	17038 <preempt_calc>
   170f2:	bb68      	cbnz	r0, 17150 <event_adv+0xd8>
		ticker_status =
   170f4:	2300      	movs	r3, #0
   170f6:	4a1d      	ldr	r2, [pc, #116]	; (1716c <event_adv+0xf4>)
   170f8:	4619      	mov	r1, r3
   170fa:	4618      	mov	r0, r3
   170fc:	f7fa faa4 	bl	11648 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17100:	b108      	cbz	r0, 17106 <event_adv+0x8e>
   17102:	2802      	cmp	r0, #2
   17104:	d129      	bne.n	1715a <event_adv+0xe2>
   17106:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   17108:	4040      	eors	r0, r0
   1710a:	f380 8811 	msr	BASEPRI, r0
   1710e:	f04f 0004 	mov.w	r0, #4
   17112:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   17114:	4040      	eors	r0, r0
   17116:	f380 8811 	msr	BASEPRI, r0
   1711a:	f04f 0004 	mov.w	r0, #4
   1711e:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   17120:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17124:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   17128:	bf14      	ite	ne
   1712a:	2001      	movne	r0, #1
   1712c:	2000      	moveq	r0, #0
   1712e:	f003 f80f 	bl	1a150 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   17132:	1c82      	adds	r2, r0, #2
   17134:	7841      	ldrb	r1, [r0, #1]
   17136:	7800      	ldrb	r0, [r0, #0]
   17138:	f7f8 ff40 	bl	ffbc <radio_filter_configure>
   1713c:	e7ca      	b.n	170d4 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   1713e:	2001      	movs	r0, #1
   17140:	f003 f806 	bl	1a150 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   17144:	1c82      	adds	r2, r0, #2
   17146:	7841      	ldrb	r1, [r0, #1]
   17148:	7800      	ldrb	r0, [r0, #0]
   1714a:	f7f8 ff37 	bl	ffbc <radio_filter_configure>
   1714e:	e7c1      	b.n	170d4 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   17150:	2204      	movs	r2, #4
   17152:	7422      	strb	r2, [r4, #16]
		radio_disable();
   17154:	f7f8 fea2 	bl	fe9c <radio_disable>
   17158:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1715a:	4040      	eors	r0, r0
   1715c:	f380 8811 	msr	BASEPRI, r0
   17160:	f04f 0004 	mov.w	r0, #4
   17164:	df02      	svc	2
   17166:	bf00      	nop
   17168:	2000144c 	.word	0x2000144c
   1716c:	00012621 	.word	0x00012621

00017170 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   17170:	4a4c      	ldr	r2, [pc, #304]	; (172a4 <event_master+0x134>)
   17172:	7bd2      	ldrb	r2, [r2, #15]
   17174:	2a00      	cmp	r2, #0
   17176:	d174      	bne.n	17262 <event_master+0xf2>
{
   17178:	b530      	push	{r4, r5, lr}
   1717a:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   1717c:	4a49      	ldr	r2, [pc, #292]	; (172a4 <event_master+0x134>)
   1717e:	7b12      	ldrb	r2, [r2, #12]
   17180:	b2d2      	uxtb	r2, r2
   17182:	8c19      	ldrh	r1, [r3, #32]
   17184:	1dcc      	adds	r4, r1, #7
   17186:	42a2      	cmp	r2, r4
   17188:	d171      	bne.n	1726e <event_master+0xfe>
   1718a:	461c      	mov	r4, r3
   1718c:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   1718e:	4b45      	ldr	r3, [pc, #276]	; (172a4 <event_master+0x134>)
   17190:	2204      	movs	r2, #4
   17192:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   17194:	2002      	movs	r0, #2
   17196:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   17198:	2200      	movs	r2, #0
   1719a:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1719c:	3107      	adds	r1, #7
   1719e:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   171a0:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   171a2:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   171a4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   171a8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   171ac:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   171b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   171b2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   171b4:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   171b6:	f7fb fd69 	bl	12c8c <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   171ba:	a903      	add	r1, sp, #12
   171bc:	4620      	mov	r0, r4
   171be:	f7fb fed3 	bl	12f68 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   171c2:	9b03      	ldr	r3, [sp, #12]
   171c4:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   171c8:	781a      	ldrb	r2, [r3, #0]
   171ca:	f361 02c3 	bfi	r2, r1, #3, #1
   171ce:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   171d0:	9a03      	ldr	r2, [sp, #12]
   171d2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   171d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   171da:	7811      	ldrb	r1, [r2, #0]
   171dc:	f363 0182 	bfi	r1, r3, #2, #1
   171e0:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   171e2:	4620      	mov	r0, r4
   171e4:	f7fb fce0 	bl	12ba8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   171e8:	2096      	movs	r0, #150	; 0x96
   171ea:	f7f8 ff5f 	bl	100ac <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   171ee:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   171f2:	f000 0007 	and.w	r0, r0, #7
   171f6:	f7f8 fea7 	bl	ff48 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   171fa:	9903      	ldr	r1, [sp, #12]
   171fc:	4620      	mov	r0, r4
   171fe:	f7fb ff49 	bl	13094 <tx_packet_set>
	if (conn->data_chan_sel) {
   17202:	7f63      	ldrb	r3, [r4, #29]
   17204:	f013 0f40 	tst.w	r3, #64	; 0x40
   17208:	d037      	beq.n	1727a <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1720a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1720c:	3801      	subs	r0, #1
   1720e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17212:	f104 0217 	add.w	r2, r4, #23
   17216:	8be1      	ldrh	r1, [r4, #30]
   17218:	b280      	uxth	r0, r0
   1721a:	f7fa fe8b 	bl	11f34 <chan_sel_2>
	chan_set(data_chan_use);
   1721e:	f7fb ff65 	bl	130ec <chan_set>
		remainder_us = radio_tmr_start(1,
   17222:	4b20      	ldr	r3, [pc, #128]	; (172a4 <event_master+0x134>)
   17224:	689a      	ldr	r2, [r3, #8]
   17226:	f105 0109 	add.w	r1, r5, #9
   1722a:	2001      	movs	r0, #1
   1722c:	f7f8 ff44 	bl	100b8 <radio_tmr_start>
		radio_tmr_end_capture();
   17230:	f7f8 fff4 	bl	1021c <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   17234:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   17236:	3107      	adds	r1, #7
   17238:	462a      	mov	r2, r5
   1723a:	b2c9      	uxtb	r1, r1
   1723c:	4620      	mov	r0, r4
   1723e:	f7ff fefb 	bl	17038 <preempt_calc>
	if (0 !=
   17242:	bb38      	cbnz	r0, 17294 <event_master+0x124>
		ticker_status =
   17244:	2300      	movs	r3, #0
   17246:	4a18      	ldr	r2, [pc, #96]	; (172a8 <event_master+0x138>)
   17248:	4619      	mov	r1, r3
   1724a:	4618      	mov	r0, r3
   1724c:	f7fa f9fc 	bl	11648 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17250:	b328      	cbz	r0, 1729e <event_master+0x12e>
   17252:	2802      	cmp	r0, #2
   17254:	d023      	beq.n	1729e <event_master+0x12e>
   17256:	4040      	eors	r0, r0
   17258:	f380 8811 	msr	BASEPRI, r0
   1725c:	f04f 0004 	mov.w	r0, #4
   17260:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   17262:	4040      	eors	r0, r0
   17264:	f380 8811 	msr	BASEPRI, r0
   17268:	f04f 0004 	mov.w	r0, #4
   1726c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   1726e:	4040      	eors	r0, r0
   17270:	f380 8811 	msr	BASEPRI, r0
   17274:	f04f 0004 	mov.w	r0, #4
   17278:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   1727a:	7fa1      	ldrb	r1, [r4, #30]
   1727c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   1727e:	7f63      	ldrb	r3, [r4, #29]
   17280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   17284:	9300      	str	r3, [sp, #0]
   17286:	f104 0317 	add.w	r3, r4, #23
   1728a:	f104 001f 	add.w	r0, r4, #31
   1728e:	f7fa fdf3 	bl	11e78 <chan_sel_1>
   17292:	e7c4      	b.n	1721e <event_master+0xae>
		_radio.state = STATE_STOP;
   17294:	2204      	movs	r2, #4
   17296:	4b03      	ldr	r3, [pc, #12]	; (172a4 <event_master+0x134>)
   17298:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1729a:	f7f8 fdff 	bl	fe9c <radio_disable>
}
   1729e:	b005      	add	sp, #20
   172a0:	bd30      	pop	{r4, r5, pc}
   172a2:	bf00      	nop
   172a4:	2000144c 	.word	0x2000144c
   172a8:	00012621 	.word	0x00012621

000172ac <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   172ac:	4a64      	ldr	r2, [pc, #400]	; (17440 <event_slave+0x194>)
   172ae:	7bd2      	ldrb	r2, [r2, #15]
   172b0:	2a00      	cmp	r2, #0
   172b2:	f040 809d 	bne.w	173f0 <event_slave+0x144>
{
   172b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   172b8:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   172ba:	4a61      	ldr	r2, [pc, #388]	; (17440 <event_slave+0x194>)
   172bc:	7b11      	ldrb	r1, [r2, #12]
   172be:	b2c9      	uxtb	r1, r1
   172c0:	8c1a      	ldrh	r2, [r3, #32]
   172c2:	1dd4      	adds	r4, r2, #7
   172c4:	42a1      	cmp	r1, r4
   172c6:	f040 8099 	bne.w	173fc <event_slave+0x150>
   172ca:	461c      	mov	r4, r3
   172cc:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   172ce:	4d5c      	ldr	r5, [pc, #368]	; (17440 <event_slave+0x194>)
   172d0:	2303      	movs	r3, #3
   172d2:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   172d4:	2301      	movs	r3, #1
   172d6:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   172d8:	2700      	movs	r7, #0
   172da:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   172dc:	3207      	adds	r2, #7
   172de:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   172e0:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   172e2:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   172e4:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   172e8:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   172ec:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   172f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   172f2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   172f4:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   172f6:	4620      	mov	r0, r4
   172f8:	f7fb fc56 	bl	12ba8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   172fc:	2096      	movs	r0, #150	; 0x96
   172fe:	f7f8 fed5 	bl	100ac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   17302:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   17306:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1730a:	09d3      	lsrs	r3, r2, #7
   1730c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   17310:	4639      	mov	r1, r7
   17312:	f000 0007 	and.w	r0, r0, #7
   17316:	f7f8 fe1f 	bl	ff58 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1731a:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   1731e:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   17322:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   17326:	3108      	adds	r1, #8
   17328:	4620      	mov	r0, r4
   1732a:	f7fb fc51 	bl	12bd0 <rx_packet_set>
	if (conn->data_chan_sel) {
   1732e:	7f63      	ldrb	r3, [r4, #29]
   17330:	f013 0f40 	tst.w	r3, #64	; 0x40
   17334:	d068      	beq.n	17408 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   17336:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   17338:	3801      	subs	r0, #1
   1733a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1733e:	f104 0217 	add.w	r2, r4, #23
   17342:	8be1      	ldrh	r1, [r4, #30]
   17344:	b280      	uxth	r0, r0
   17346:	f7fa fdf5 	bl	11f34 <chan_sel_2>
	chan_set(data_chan_use);
   1734a:	f7fb fecf 	bl	130ec <chan_set>
		conn->slave.window_widening_prepare_us;
   1734e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   17350:	6e22      	ldr	r2, [r4, #96]	; 0x60
   17352:	4413      	add	r3, r2
   17354:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   17356:	2200      	movs	r2, #0
   17358:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   1735a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   1735c:	4293      	cmp	r3, r2
   1735e:	d900      	bls.n	17362 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   17360:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   17362:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   17364:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   17366:	4413      	add	r3, r2
   17368:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   1736a:	2700      	movs	r7, #0
   1736c:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   1736e:	4b34      	ldr	r3, [pc, #208]	; (17440 <event_slave+0x194>)
   17370:	689a      	ldr	r2, [r3, #8]
   17372:	f106 0109 	add.w	r1, r6, #9
   17376:	4638      	mov	r0, r7
   17378:	f7f8 fe9e 	bl	100b8 <radio_tmr_start>
   1737c:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   1737e:	f7f8 ff19 	bl	101b4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   17382:	4638      	mov	r0, r7
   17384:	f7f8 ff38 	bl	101f8 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   17388:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   1738a:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   1738e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   17390:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   17392:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   17394:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   17398:	f000 0007 	and.w	r0, r0, #7
   1739c:	f7f8 fd6a 	bl	fe74 <radio_rx_ready_delay_get>
   173a0:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   173a2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   173a6:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   173aa:	2802      	cmp	r0, #2
   173ac:	d03c      	beq.n	17428 <event_slave+0x17c>
   173ae:	2804      	cmp	r0, #4
   173b0:	d037      	beq.n	17422 <event_slave+0x176>
		return 40;
   173b2:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   173b4:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   173b6:	2101      	movs	r1, #1
   173b8:	f7f8 fd5e 	bl	fe78 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   173bc:	4428      	add	r0, r5
   173be:	f7f8 fed7 	bl	10170 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   173c2:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   173c4:	3107      	adds	r1, #7
   173c6:	4632      	mov	r2, r6
   173c8:	b2c9      	uxtb	r1, r1
   173ca:	4620      	mov	r0, r4
   173cc:	f7ff fe34 	bl	17038 <preempt_calc>
   173d0:	bb60      	cbnz	r0, 1742c <event_slave+0x180>
		ticker_status =
   173d2:	2300      	movs	r3, #0
   173d4:	4a1b      	ldr	r2, [pc, #108]	; (17444 <event_slave+0x198>)
   173d6:	4619      	mov	r1, r3
   173d8:	4618      	mov	r0, r3
   173da:	f7fa f935 	bl	11648 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   173de:	b350      	cbz	r0, 17436 <event_slave+0x18a>
   173e0:	2802      	cmp	r0, #2
   173e2:	d028      	beq.n	17436 <event_slave+0x18a>
   173e4:	4040      	eors	r0, r0
   173e6:	f380 8811 	msr	BASEPRI, r0
   173ea:	f04f 0004 	mov.w	r0, #4
   173ee:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   173f0:	4040      	eors	r0, r0
   173f2:	f380 8811 	msr	BASEPRI, r0
   173f6:	f04f 0004 	mov.w	r0, #4
   173fa:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   173fc:	4040      	eors	r0, r0
   173fe:	f380 8811 	msr	BASEPRI, r0
   17402:	f04f 0004 	mov.w	r0, #4
   17406:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   17408:	7fa1      	ldrb	r1, [r4, #30]
   1740a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   1740c:	7f63      	ldrb	r3, [r4, #29]
   1740e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   17412:	9300      	str	r3, [sp, #0]
   17414:	f104 0317 	add.w	r3, r4, #23
   17418:	f104 001f 	add.w	r0, r4, #31
   1741c:	f7fa fd2c 	bl	11e78 <chan_sel_1>
   17420:	e793      	b.n	1734a <event_slave+0x9e>
		return 376;
   17422:	f44f 73bc 	mov.w	r3, #376	; 0x178
   17426:	e7c5      	b.n	173b4 <event_slave+0x108>
		return 24;
   17428:	2318      	movs	r3, #24
   1742a:	e7c3      	b.n	173b4 <event_slave+0x108>
		_radio.state = STATE_STOP;
   1742c:	2204      	movs	r2, #4
   1742e:	4b04      	ldr	r3, [pc, #16]	; (17440 <event_slave+0x194>)
   17430:	741a      	strb	r2, [r3, #16]
		radio_disable();
   17432:	f7f8 fd33 	bl	fe9c <radio_disable>
	packet_tx_enqueue(2);
   17436:	2002      	movs	r0, #2
   17438:	f7fb fc28 	bl	12c8c <packet_tx_enqueue>
}
   1743c:	b003      	add	sp, #12
   1743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17440:	2000144c 	.word	0x2000144c
   17444:	00012621 	.word	0x00012621

00017448 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   17448:	4b67      	ldr	r3, [pc, #412]	; (175e8 <event_scan+0x1a0>)
   1744a:	7bdb      	ldrb	r3, [r3, #15]
   1744c:	2b00      	cmp	r3, #0
   1744e:	f040 808b 	bne.w	17568 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   17452:	4b65      	ldr	r3, [pc, #404]	; (175e8 <event_scan+0x1a0>)
   17454:	7b1b      	ldrb	r3, [r3, #12]
   17456:	b2db      	uxtb	r3, r3
   17458:	2b06      	cmp	r3, #6
   1745a:	f040 808b 	bne.w	17574 <event_scan+0x12c>
{
   1745e:	b570      	push	{r4, r5, r6, lr}
   17460:	b08c      	sub	sp, #48	; 0x30
   17462:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   17464:	4c60      	ldr	r4, [pc, #384]	; (175e8 <event_scan+0x1a0>)
   17466:	2302      	movs	r3, #2
   17468:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   1746a:	2101      	movs	r1, #1
   1746c:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   1746e:	2200      	movs	r2, #0
   17470:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   17472:	2306      	movs	r3, #6
   17474:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   17476:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   17478:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1747c:	f362 0341 	bfi	r3, r2, #1, #1
   17480:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   17484:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   17488:	f000 0007 	and.w	r0, r0, #7
   1748c:	f7fb fb68 	bl	12b60 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   17490:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17494:	f3c3 0081 	ubfx	r0, r3, #2, #2
   17498:	1c42      	adds	r2, r0, #1
   1749a:	f362 0383 	bfi	r3, r2, #2, #2
   1749e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   174a2:	3025      	adds	r0, #37	; 0x25
   174a4:	f7fb fe22 	bl	130ec <chan_set>
	if (_radio.scanner.chan == 3) {
   174a8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   174ac:	f003 030c 	and.w	r3, r3, #12
   174b0:	2b0c      	cmp	r3, #12
   174b2:	d065      	beq.n	17580 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   174b4:	2096      	movs	r0, #150	; 0x96
   174b6:	f7f8 fdf9 	bl	100ac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   174ba:	2300      	movs	r3, #0
   174bc:	461a      	mov	r2, r3
   174be:	4619      	mov	r1, r3
   174c0:	4618      	mov	r0, r3
   174c2:	f7f8 fd49 	bl	ff58 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   174c6:	4b48      	ldr	r3, [pc, #288]	; (175e8 <event_scan+0x1a0>)
   174c8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   174cc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   174d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   174d4:	3008      	adds	r0, #8
   174d6:	f7f8 fcbd 	bl	fe54 <radio_pkt_rx_set>
	radio_rssi_measure();
   174da:	f7f8 fd4d 	bl	ff78 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   174de:	f003 f835 	bl	1a54c <ctrl_rl_enabled>
   174e2:	2800      	cmp	r0, #0
   174e4:	d153      	bne.n	1758e <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   174e6:	4b40      	ldr	r3, [pc, #256]	; (175e8 <event_scan+0x1a0>)
   174e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   174ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   174f0:	d165      	bne.n	175be <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   174f2:	4c3d      	ldr	r4, [pc, #244]	; (175e8 <event_scan+0x1a0>)
   174f4:	68a2      	ldr	r2, [r4, #8]
   174f6:	f105 0109 	add.w	r1, r5, #9
   174fa:	2000      	movs	r0, #0
   174fc:	f7f8 fddc 	bl	100b8 <radio_tmr_start>
	radio_tmr_end_capture();
   17500:	f7f8 fe8c 	bl	1021c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   17504:	462a      	mov	r2, r5
   17506:	2106      	movs	r1, #6
   17508:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   1750c:	f7ff fd94 	bl	17038 <preempt_calc>
   17510:	2800      	cmp	r0, #0
   17512:	d15d      	bne.n	175d0 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   17514:	4b34      	ldr	r3, [pc, #208]	; (175e8 <event_scan+0x1a0>)
   17516:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1751a:	3309      	adds	r3, #9
		ticker_status =
   1751c:	f641 0287 	movw	r2, #6279	; 0x1887
   17520:	9208      	str	r2, [sp, #32]
   17522:	4a32      	ldr	r2, [pc, #200]	; (175ec <event_scan+0x1a4>)
   17524:	9207      	str	r2, [sp, #28]
   17526:	2204      	movs	r2, #4
   17528:	9206      	str	r2, [sp, #24]
   1752a:	4931      	ldr	r1, [pc, #196]	; (175f0 <event_scan+0x1a8>)
   1752c:	9105      	str	r1, [sp, #20]
   1752e:	2000      	movs	r0, #0
   17530:	9004      	str	r0, [sp, #16]
   17532:	9003      	str	r0, [sp, #12]
   17534:	9002      	str	r0, [sp, #8]
   17536:	9001      	str	r0, [sp, #4]
   17538:	9300      	str	r3, [sp, #0]
   1753a:	462b      	mov	r3, r5
   1753c:	4601      	mov	r1, r0
   1753e:	f7f9 ff67 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17542:	b108      	cbz	r0, 17548 <event_scan+0x100>
   17544:	2802      	cmp	r0, #2
   17546:	d149      	bne.n	175dc <event_scan+0x194>
			ticker_status =
   17548:	2300      	movs	r3, #0
   1754a:	4a2a      	ldr	r2, [pc, #168]	; (175f4 <event_scan+0x1ac>)
   1754c:	4619      	mov	r1, r3
   1754e:	4618      	mov	r0, r3
   17550:	f7fa f87a 	bl	11648 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17554:	2800      	cmp	r0, #0
   17556:	d03f      	beq.n	175d8 <event_scan+0x190>
   17558:	2802      	cmp	r0, #2
   1755a:	d03d      	beq.n	175d8 <event_scan+0x190>
   1755c:	4040      	eors	r0, r0
   1755e:	f380 8811 	msr	BASEPRI, r0
   17562:	f04f 0004 	mov.w	r0, #4
   17566:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   17568:	4040      	eors	r0, r0
   1756a:	f380 8811 	msr	BASEPRI, r0
   1756e:	f04f 0004 	mov.w	r0, #4
   17572:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   17574:	4040      	eors	r0, r0
   17576:	f380 8811 	msr	BASEPRI, r0
   1757a:	f04f 0004 	mov.w	r0, #4
   1757e:	df02      	svc	2
		_radio.scanner.chan = 0;
   17580:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   17584:	f36f 0283 	bfc	r2, #2, #2
   17588:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   1758c:	e792      	b.n	174b4 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   1758e:	4b16      	ldr	r3, [pc, #88]	; (175e8 <event_scan+0x1a0>)
   17590:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   17594:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17598:	f002 fdda 	bl	1a150 <ctrl_filter_get>
   1759c:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   1759e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   175a2:	f002 fd4f 	bl	1a044 <ctrl_irks_get>
   175a6:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   175a8:	1ca2      	adds	r2, r4, #2
   175aa:	7861      	ldrb	r1, [r4, #1]
   175ac:	7820      	ldrb	r0, [r4, #0]
   175ae:	f7f8 fd05 	bl	ffbc <radio_filter_configure>
		radio_ar_configure(count, irks);
   175b2:	4631      	mov	r1, r6
   175b4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   175b8:	f7f8 fedc 	bl	10374 <radio_ar_configure>
   175bc:	e799      	b.n	174f2 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   175be:	2001      	movs	r0, #1
   175c0:	f002 fdc6 	bl	1a150 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   175c4:	1c82      	adds	r2, r0, #2
   175c6:	7841      	ldrb	r1, [r0, #1]
   175c8:	7800      	ldrb	r0, [r0, #0]
   175ca:	f7f8 fcf7 	bl	ffbc <radio_filter_configure>
   175ce:	e790      	b.n	174f2 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   175d0:	2204      	movs	r2, #4
   175d2:	7422      	strb	r2, [r4, #16]
		radio_disable();
   175d4:	f7f8 fc62 	bl	fe9c <radio_disable>
}
   175d8:	b00c      	add	sp, #48	; 0x30
   175da:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   175dc:	4040      	eors	r0, r0
   175de:	f380 8811 	msr	BASEPRI, r0
   175e2:	f04f 0004 	mov.w	r0, #4
   175e6:	df02      	svc	2
   175e8:	2000144c 	.word	0x2000144c
   175ec:	00012165 	.word	0x00012165
   175f0:	00012949 	.word	0x00012949
   175f4:	00012621 	.word	0x00012621

000175f8 <access_addr_get>:
{
   175f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   175fa:	b083      	sub	sp, #12
	retry = 3;
   175fc:	2403      	movs	r4, #3
   175fe:	e059      	b.n	176b4 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   17600:	4040      	eors	r0, r0
   17602:	f380 8811 	msr	BASEPRI, r0
   17606:	f04f 0004 	mov.w	r0, #4
   1760a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1760c:	9900      	ldr	r1, [sp, #0]
   1760e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   17610:	4607      	mov	r7, r0
	bit_idx = 31;
   17612:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   17614:	2501      	movs	r5, #1
	while (bit_idx--) {
   17616:	e010      	b.n	1763a <access_addr_get+0x42>
			consecutive_cnt++;
   17618:	3501      	adds	r5, #1
   1761a:	b2ed      	uxtb	r5, r5
   1761c:	e01c      	b.n	17658 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1761e:	b9ff      	cbnz	r7, 17660 <access_addr_get+0x68>
			if (consecutive_bit) {
   17620:	b319      	cbz	r1, 1766a <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   17622:	2201      	movs	r2, #1
   17624:	409a      	lsls	r2, r3
   17626:	ea26 0602 	bic.w	r6, r6, r2
   1762a:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   1762c:	4601      	mov	r1, r0
			transitions++;
   1762e:	3701      	adds	r7, #1
   17630:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   17632:	2501      	movs	r5, #1
	while (bit_idx--) {
   17634:	461a      	mov	r2, r3
		if (transitions > 24) {
   17636:	2f18      	cmp	r7, #24
   17638:	d81d      	bhi.n	17676 <access_addr_get+0x7e>
	while (bit_idx--) {
   1763a:	1e53      	subs	r3, r2, #1
   1763c:	b2db      	uxtb	r3, r3
   1763e:	b32a      	cbz	r2, 1768c <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   17640:	9e00      	ldr	r6, [sp, #0]
   17642:	469e      	mov	lr, r3
   17644:	fa26 f203 	lsr.w	r2, r6, r3
   17648:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   1764c:	4291      	cmp	r1, r2
   1764e:	d0e3      	beq.n	17618 <access_addr_get+0x20>
			transitions++;
   17650:	3701      	adds	r7, #1
   17652:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   17654:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   17656:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   17658:	2d06      	cmp	r5, #6
   1765a:	d8e1      	bhi.n	17620 <access_addr_get+0x28>
   1765c:	2b1b      	cmp	r3, #27
   1765e:	d9de      	bls.n	1761e <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   17660:	2b1a      	cmp	r3, #26
   17662:	d8e7      	bhi.n	17634 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   17664:	2f01      	cmp	r7, #1
   17666:	d8e5      	bhi.n	17634 <access_addr_get+0x3c>
   17668:	e7da      	b.n	17620 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   1766a:	2101      	movs	r1, #1
   1766c:	fa01 f203 	lsl.w	r2, r1, r3
   17670:	4316      	orrs	r6, r2
   17672:	9600      	str	r6, [sp, #0]
   17674:	e7db      	b.n	1762e <access_addr_get+0x36>
			if (consecutive_bit) {
   17676:	2900      	cmp	r1, #0
   17678:	d02d      	beq.n	176d6 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1767a:	f10e 0e01 	add.w	lr, lr, #1
   1767e:	2301      	movs	r3, #1
   17680:	fa03 f30e 	lsl.w	r3, r3, lr
   17684:	425b      	negs	r3, r3
   17686:	9a00      	ldr	r2, [sp, #0]
   17688:	4013      	ands	r3, r2
   1768a:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1768c:	4b19      	ldr	r3, [pc, #100]	; (176f4 <access_addr_get+0xfc>)
   1768e:	9a00      	ldr	r2, [sp, #0]
   17690:	4053      	eors	r3, r2
   17692:	a802      	add	r0, sp, #8
   17694:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   17698:	2104      	movs	r1, #4
   1769a:	f7f8 fa6e 	bl	fb7a <util_ones_count_get>
   1769e:	2801      	cmp	r0, #1
   176a0:	d908      	bls.n	176b4 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   176a2:	9800      	ldr	r0, [sp, #0]
   176a4:	b283      	uxth	r3, r0
   176a6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   176aa:	d120      	bne.n	176ee <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   176ac:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   176ae:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   176b2:	d11c      	bne.n	176ee <access_addr_get+0xf6>
	LL_ASSERT(retry);
   176b4:	2c00      	cmp	r4, #0
   176b6:	d0a3      	beq.n	17600 <access_addr_get+0x8>
	retry--;
   176b8:	3c01      	subs	r4, #1
   176ba:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   176bc:	2004      	movs	r0, #4
	while (len) {
   176be:	2800      	cmp	r0, #0
   176c0:	d0a4      	beq.n	1760c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   176c2:	4669      	mov	r1, sp
   176c4:	f7f9 fc1c 	bl	10f00 <rand_get>
   176c8:	b2c0      	uxtb	r0, r0
		if (len) {
   176ca:	2800      	cmp	r0, #0
   176cc:	d0f7      	beq.n	176be <access_addr_get+0xc6>
   176ce:	bf20      	wfe
  __ASM volatile ("sev");
   176d0:	bf40      	sev
  __ASM volatile ("wfe");
   176d2:	bf20      	wfe
   176d4:	e7f3      	b.n	176be <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   176d6:	f10e 0e01 	add.w	lr, lr, #1
   176da:	2301      	movs	r3, #1
   176dc:	fa03 fe0e 	lsl.w	lr, r3, lr
   176e0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   176e4:	9b00      	ldr	r3, [sp, #0]
   176e6:	ea43 030e 	orr.w	r3, r3, lr
   176ea:	9300      	str	r3, [sp, #0]
   176ec:	e7ce      	b.n	1768c <access_addr_get+0x94>
}
   176ee:	b003      	add	sp, #12
   176f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   176f2:	bf00      	nop
   176f4:	8e89bed6 	.word	0x8e89bed6

000176f8 <isr_rx_scan>:
{
   176f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176fc:	b08f      	sub	sp, #60	; 0x3c
   176fe:	4617      	mov	r7, r2
   17700:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   17704:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   17708:	4b99      	ldr	r3, [pc, #612]	; (17970 <isr_rx_scan+0x278>)
   1770a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1770e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   17712:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   17716:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1771a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1771e:	b15b      	cbz	r3, 17738 <isr_rx_scan+0x40>
   17720:	4b93      	ldr	r3, [pc, #588]	; (17970 <isr_rx_scan+0x278>)
   17722:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   17726:	b34b      	cbz	r3, 1777c <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   17728:	4a91      	ldr	r2, [pc, #580]	; (17970 <isr_rx_scan+0x278>)
   1772a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1772e:	b2db      	uxtb	r3, r3
   17730:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   17734:	4293      	cmp	r3, r2
   17736:	d021      	beq.n	1777c <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17738:	7a23      	ldrb	r3, [r4, #8]
   1773a:	f013 030f 	ands.w	r3, r3, #15
   1773e:	f000 82e9 	beq.w	17d14 <isr_rx_scan+0x61c>
   17742:	2b06      	cmp	r3, #6
   17744:	f000 82e6 	beq.w	17d14 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17748:	2b00      	cmp	r3, #0
   1774a:	f000 83d9 	beq.w	17f00 <isr_rx_scan+0x808>
   1774e:	2b01      	cmp	r3, #1
   17750:	f000 8355 	beq.w	17dfe <isr_rx_scan+0x706>
	bool dir_report = false;
   17754:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17758:	7a23      	ldrb	r3, [r4, #8]
   1775a:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   1775e:	2b02      	cmp	r3, #2
   17760:	f000 83d0 	beq.w	17f04 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17764:	2b06      	cmp	r3, #6
   17766:	f000 83cd 	beq.w	17f04 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   1776a:	2b07      	cmp	r3, #7
   1776c:	f000 839f 	beq.w	17eae <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   17770:	2b04      	cmp	r3, #4
   17772:	f000 83a3 	beq.w	17ebc <isr_rx_scan+0x7c4>
		return 1;
   17776:	f04f 0a01 	mov.w	sl, #1
   1777a:	e3cb      	b.n	17f14 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1777c:	4b7c      	ldr	r3, [pc, #496]	; (17970 <isr_rx_scan+0x278>)
   1777e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17782:	f013 0f10 	tst.w	r3, #16
   17786:	d072      	beq.n	1786e <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   17788:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1778a:	f013 030f 	ands.w	r3, r3, #15
   1778e:	f000 80da 	beq.w	17946 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   17792:	2b01      	cmp	r3, #1
   17794:	f000 808f 	beq.w	178b6 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17798:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   1779a:	2b00      	cmp	r3, #0
   1779c:	d0cc      	beq.n	17738 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1779e:	f7f8 fd4f 	bl	10240 <radio_tmr_end_get>
   177a2:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   177a6:	4b72      	ldr	r3, [pc, #456]	; (17970 <isr_rx_scan+0x278>)
   177a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   177ac:	4871      	ldr	r0, [pc, #452]	; (17974 <isr_rx_scan+0x27c>)
   177ae:	fba3 0100 	umull	r0, r1, r3, r0
   177b2:	2207      	movs	r2, #7
   177b4:	fb02 1103 	mla	r1, r2, r3, r1
   177b8:	a36b      	add	r3, pc, #428	; (adr r3, 17968 <isr_rx_scan+0x270>)
   177ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   177be:	f7e9 fc9d 	bl	10fc <__aeabi_uldivmod>
   177c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   177c6:	4581      	cmp	r9, r0
   177c8:	d2b6      	bcs.n	17738 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   177ca:	4b69      	ldr	r3, [pc, #420]	; (17970 <isr_rx_scan+0x278>)
   177cc:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   177d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   177d4:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   177d6:	429a      	cmp	r2, r3
   177d8:	f0c0 80b7 	bcc.w	1794a <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   177dc:	4b64      	ldr	r3, [pc, #400]	; (17970 <isr_rx_scan+0x278>)
   177de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   177e2:	1ad3      	subs	r3, r2, r3
   177e4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   177e6:	2b03      	cmp	r3, #3
   177e8:	f240 80b9 	bls.w	1795e <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   177ec:	4b60      	ldr	r3, [pc, #384]	; (17970 <isr_rx_scan+0x278>)
   177ee:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   177f2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   177f6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   177fa:	f1b9 0f00 	cmp.w	r9, #0
   177fe:	f000 839a 	beq.w	17f36 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   17802:	f8df a16c 	ldr.w	sl, [pc, #364]	; 17970 <isr_rx_scan+0x278>
   17806:	2304      	movs	r3, #4
   17808:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   1780c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   17810:	2300      	movs	r3, #0
   17812:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   17816:	f7f8 fb93 	bl	ff40 <radio_pkt_scratch_get>
   1781a:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1781c:	7803      	ldrb	r3, [r0, #0]
   1781e:	2205      	movs	r2, #5
   17820:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   17824:	b2db      	uxtb	r3, r3
   17826:	f043 0320 	orr.w	r3, r3, #32
   1782a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1782c:	7a23      	ldrb	r3, [r4, #8]
   1782e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17832:	7802      	ldrb	r2, [r0, #0]
   17834:	f363 12c7 	bfi	r2, r3, #7, #1
   17838:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   1783a:	2322      	movs	r3, #34	; 0x22
   1783c:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   1783e:	4628      	mov	r0, r5
   17840:	f002 fbde 	bl	1a000 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17844:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   17848:	f013 0f01 	tst.w	r3, #1
   1784c:	f000 8098 	beq.w	17980 <isr_rx_scan+0x288>
   17850:	2800      	cmp	r0, #0
   17852:	f000 8095 	beq.w	17980 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   17856:	7832      	ldrb	r2, [r6, #0]
   17858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1785c:	4633      	mov	r3, r6
   1785e:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   17862:	2206      	movs	r2, #6
   17864:	4601      	mov	r1, r0
   17866:	4618      	mov	r0, r3
   17868:	f7e8 fd2a 	bl	2c0 <memcpy>
   1786c:	e096      	b.n	1799c <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   1786e:	2dff      	cmp	r5, #255	; 0xff
   17870:	d00a      	beq.n	17888 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   17872:	4b3f      	ldr	r3, [pc, #252]	; (17970 <isr_rx_scan+0x278>)
   17874:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   17878:	429d      	cmp	r5, r3
   1787a:	bf14      	ite	ne
   1787c:	2300      	movne	r3, #0
   1787e:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17880:	2b00      	cmp	r3, #0
   17882:	d181      	bne.n	17788 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17884:	2300      	movs	r3, #0
   17886:	e788      	b.n	1779a <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17888:	4b39      	ldr	r3, [pc, #228]	; (17970 <isr_rx_scan+0x278>)
   1788a:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1788e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17892:	7a23      	ldrb	r3, [r4, #8]
   17894:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17898:	429a      	cmp	r2, r3
   1789a:	d001      	beq.n	178a0 <isr_rx_scan+0x1a8>
   1789c:	2300      	movs	r3, #0
   1789e:	e7ef      	b.n	17880 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   178a0:	2206      	movs	r2, #6
   178a2:	f108 0102 	add.w	r1, r8, #2
   178a6:	4834      	ldr	r0, [pc, #208]	; (17978 <isr_rx_scan+0x280>)
   178a8:	f013 f836 	bl	2a918 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   178ac:	b908      	cbnz	r0, 178b2 <isr_rx_scan+0x1ba>
   178ae:	2301      	movs	r3, #1
   178b0:	e7e6      	b.n	17880 <isr_rx_scan+0x188>
   178b2:	2300      	movs	r3, #0
   178b4:	e7e4      	b.n	17880 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   178b6:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   178b8:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   178bc:	462a      	mov	r2, r5
   178be:	4651      	mov	r1, sl
   178c0:	09c0      	lsrs	r0, r0, #7
   178c2:	f002 fe17 	bl	1a4f4 <ctrl_rl_addr_resolve>
   178c6:	4681      	mov	r9, r0
   178c8:	b9d0      	cbnz	r0, 17900 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   178ca:	4b29      	ldr	r3, [pc, #164]	; (17970 <isr_rx_scan+0x278>)
   178cc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   178d0:	f013 0f01 	tst.w	r3, #1
   178d4:	d119      	bne.n	1790a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   178d6:	4b26      	ldr	r3, [pc, #152]	; (17970 <isr_rx_scan+0x278>)
   178d8:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   178dc:	7a23      	ldrb	r3, [r4, #8]
   178de:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   178e0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   178e4:	d017      	beq.n	17916 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   178e6:	4b22      	ldr	r3, [pc, #136]	; (17970 <isr_rx_scan+0x278>)
   178e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   178ec:	f013 0f20 	tst.w	r3, #32
   178f0:	d003      	beq.n	178fa <isr_rx_scan+0x202>
   178f2:	f994 3008 	ldrsb.w	r3, [r4, #8]
   178f6:	2b00      	cmp	r3, #0
   178f8:	db17      	blt.n	1792a <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   178fa:	f1b9 0f00 	cmp.w	r9, #0
   178fe:	d11d      	bne.n	1793c <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17900:	f1b9 0f00 	cmp.w	r9, #0
   17904:	d01d      	beq.n	17942 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17906:	2301      	movs	r3, #1
   17908:	e747      	b.n	1779a <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1790a:	4628      	mov	r0, r5
   1790c:	f002 fb78 	bl	1a000 <ctrl_lrpa_get>
   17910:	2800      	cmp	r0, #0
   17912:	d1f5      	bne.n	17900 <isr_rx_scan+0x208>
   17914:	e7df      	b.n	178d6 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   17916:	2206      	movs	r2, #6
   17918:	4651      	mov	r1, sl
   1791a:	4818      	ldr	r0, [pc, #96]	; (1797c <isr_rx_scan+0x284>)
   1791c:	f012 fffc 	bl	2a918 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17920:	2800      	cmp	r0, #0
   17922:	d1e0      	bne.n	178e6 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   17924:	f04f 0901 	mov.w	r9, #1
   17928:	e7ea      	b.n	17900 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1792a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1792e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17932:	2b40      	cmp	r3, #64	; 0x40
   17934:	d1e1      	bne.n	178fa <isr_rx_scan+0x202>
		return true;
   17936:	f04f 0901 	mov.w	r9, #1
   1793a:	e7de      	b.n	178fa <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   1793c:	f04f 0901 	mov.w	r9, #1
   17940:	e7de      	b.n	17900 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17942:	2300      	movs	r3, #0
   17944:	e729      	b.n	1779a <isr_rx_scan+0xa2>
   17946:	2301      	movs	r3, #1
   17948:	e727      	b.n	1779a <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   1794a:	4909      	ldr	r1, [pc, #36]	; (17970 <isr_rx_scan+0x278>)
   1794c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17950:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17954:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17956:	fa52 f383 	uxtab	r3, r2, r3
   1795a:	b2db      	uxtb	r3, r3
   1795c:	e743      	b.n	177e6 <isr_rx_scan+0xee>
		return 0;
   1795e:	f04f 0900 	mov.w	r9, #0
   17962:	e74a      	b.n	177fa <isr_rx_scan+0x102>
   17964:	f3af 8000 	nop.w
   17968:	3b9aca00 	.word	0x3b9aca00
   1796c:	00000000 	.word	0x00000000
   17970:	2000144c 	.word	0x2000144c
   17974:	1afd498d 	.word	0x1afd498d
   17978:	20001532 	.word	0x20001532
   1797c:	2000152c 	.word	0x2000152c
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17980:	4962      	ldr	r1, [pc, #392]	; (17b0c <isr_rx_scan+0x414>)
   17982:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   17986:	09db      	lsrs	r3, r3, #7
   17988:	7832      	ldrb	r2, [r6, #0]
   1798a:	f363 1286 	bfi	r2, r3, #6, #1
   1798e:	4630      	mov	r0, r6
   17990:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   17994:	2206      	movs	r2, #6
   17996:	31e0      	adds	r1, #224	; 0xe0
   17998:	f7e8 fc92 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   1799c:	f106 0308 	add.w	r3, r6, #8
   179a0:	930b      	str	r3, [sp, #44]	; 0x2c
   179a2:	2206      	movs	r2, #6
   179a4:	f104 010a 	add.w	r1, r4, #10
   179a8:	4618      	mov	r0, r3
   179aa:	f7e8 fc89 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   179ae:	2204      	movs	r2, #4
   179b0:	f108 0110 	add.w	r1, r8, #16
   179b4:	f106 000e 	add.w	r0, r6, #14
   179b8:	f7e8 fc82 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   179bc:	2203      	movs	r2, #3
   179be:	f108 0114 	add.w	r1, r8, #20
   179c2:	f106 0012 	add.w	r0, r6, #18
   179c6:	f7e8 fc7b 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   179ca:	2301      	movs	r3, #1
   179cc:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   179ce:	4b4f      	ldr	r3, [pc, #316]	; (17b0c <isr_rx_scan+0x414>)
   179d0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   179d4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   179d8:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   179dc:	f7f8 fc30 	bl	10240 <radio_tmr_end_get>
   179e0:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   179e4:	4b49      	ldr	r3, [pc, #292]	; (17b0c <isr_rx_scan+0x414>)
   179e6:	689b      	ldr	r3, [r3, #8]
   179e8:	2b00      	cmp	r3, #0
   179ea:	dd75      	ble.n	17ad8 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   179ec:	4b47      	ldr	r3, [pc, #284]	; (17b0c <isr_rx_scan+0x414>)
   179ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   179f2:	2b00      	cmp	r3, #0
   179f4:	d174      	bne.n	17ae0 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   179f6:	75b3      	strb	r3, [r6, #22]
   179f8:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   179fa:	2100      	movs	r1, #0
   179fc:	4608      	mov	r0, r1
   179fe:	f7f8 fa35 	bl	fe6c <radio_tx_ready_delay_get>
   17a02:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17a06:	2100      	movs	r1, #0
   17a08:	4608      	mov	r0, r1
   17a0a:	f7f8 fa31 	bl	fe70 <radio_tx_chain_delay_get>
   17a0e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   17a12:	f10a 031e 	add.w	r3, sl, #30
   17a16:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   17a18:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 17b0c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   17a1c:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   17a20:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   17a22:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   17a26:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   17a28:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   17a2c:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   17a2e:	2205      	movs	r2, #5
   17a30:	f108 0117 	add.w	r1, r8, #23
   17a34:	f106 001e 	add.w	r0, r6, #30
   17a38:	f7e8 fc42 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   17a3c:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   17a40:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17a44:	f362 0304 	bfi	r3, r2, #0, #5
   17a48:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   17a4c:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   17a50:	b2db      	uxtb	r3, r3
   17a52:	f362 1347 	bfi	r3, r2, #5, #3
   17a56:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   17a5a:	f7f8 fa85 	bl	ff68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   17a5e:	4630      	mov	r0, r6
   17a60:	f7f8 f9fe 	bl	fe60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17a64:	f7f8 fa34 	bl	fed0 <radio_is_ready>
   17a68:	4682      	mov	sl, r0
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d148      	bne.n	17b00 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17a6e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17a72:	4b26      	ldr	r3, [pc, #152]	; (17b0c <isr_rx_scan+0x414>)
   17a74:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   17a78:	4640      	mov	r0, r8
   17a7a:	f7f8 f83a 	bl	faf2 <mem_index_get>
   17a7e:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17a82:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17a86:	2206      	movs	r2, #6
   17a88:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   17a8c:	2300      	movs	r3, #0
   17a8e:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   17a92:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17a96:	4631      	mov	r1, r6
   17a98:	f811 3b02 	ldrb.w	r3, [r1], #2
   17a9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17aa0:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17aa4:	f109 001b 	add.w	r0, r9, #27
   17aa8:	f7e8 fc0a 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   17aac:	b397      	cbz	r7, 17b14 <isr_rx_scan+0x41c>
   17aae:	2dff      	cmp	r5, #255	; 0xff
   17ab0:	d030      	beq.n	17b14 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   17ab2:	f109 020e 	add.w	r2, r9, #14
   17ab6:	f109 010d 	add.w	r1, r9, #13
   17aba:	4628      	mov	r0, r5
   17abc:	f002 fc96 	bl	1a3ec <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17ac0:	f899 300d 	ldrb.w	r3, [r9, #13]
   17ac4:	3302      	adds	r3, #2
   17ac6:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17aca:	2206      	movs	r2, #6
   17acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17ace:	f109 0014 	add.w	r0, r9, #20
   17ad2:	f7e8 fbf5 	bl	2c0 <memcpy>
   17ad6:	e02e      	b.n	17b36 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   17ad8:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   17adc:	e786      	b.n	179ec <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   17ade:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17ae0:	2b00      	cmp	r3, #0
   17ae2:	dbfc      	blt.n	17ade <isr_rx_scan+0x3e6>
   17ae4:	459a      	cmp	sl, r3
   17ae6:	d8fa      	bhi.n	17ade <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   17ae8:	eba3 020a 	sub.w	r2, r3, sl
   17aec:	4908      	ldr	r1, [pc, #32]	; (17b10 <isr_rx_scan+0x418>)
   17aee:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   17af2:	0a92      	lsrs	r2, r2, #10
   17af4:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   17af6:	7d72      	ldrb	r2, [r6, #21]
   17af8:	3201      	adds	r2, #1
   17afa:	7572      	strb	r2, [r6, #21]
   17afc:	469a      	mov	sl, r3
   17afe:	e77c      	b.n	179fa <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   17b00:	4040      	eors	r0, r0
   17b02:	f380 8811 	msr	BASEPRI, r0
   17b06:	f04f 0004 	mov.w	r0, #4
   17b0a:	df02      	svc	2
   17b0c:	2000144c 	.word	0x2000144c
   17b10:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17b14:	2206      	movs	r2, #6
   17b16:	2100      	movs	r1, #0
   17b18:	f109 0014 	add.w	r0, r9, #20
   17b1c:	f012 ff90 	bl	2aa40 <memset>
				pdu_adv_tx->rx_addr;
   17b20:	7833      	ldrb	r3, [r6, #0]
   17b22:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   17b26:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17b2a:	2206      	movs	r2, #6
   17b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17b2e:	f109 000e 	add.w	r0, r9, #14
   17b32:	f7e8 fbc5 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   17b36:	4dce      	ldr	r5, [pc, #824]	; (17e70 <isr_rx_scan+0x778>)
   17b38:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   17b3c:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   17b40:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   17b44:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   17b48:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   17b4c:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   17b50:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17b54:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17b58:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17b5c:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   17b60:	f7fa fae2 	bl	12128 <rx_fc_lock>
		packet_rx_enqueue();
   17b64:	f7fc ffca 	bl	14afc <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17b68:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17b6c:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   17b70:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   17b72:	4291      	cmp	r1, r2
   17b74:	f0c0 80b9 	bcc.w	17cea <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   17b78:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17b7c:	1acb      	subs	r3, r1, r3
   17b7e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17b80:	2b02      	cmp	r3, #2
   17b82:	f240 80bc 	bls.w	17cfe <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   17b86:	4bba      	ldr	r3, [pc, #744]	; (17e70 <isr_rx_scan+0x778>)
   17b88:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17b8c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17b94:	2b00      	cmp	r3, #0
   17b96:	f000 80b4 	beq.w	17d02 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17b9a:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   17b9e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17ba0:	220b      	movs	r2, #11
   17ba2:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   17ba4:	7a22      	ldrb	r2, [r4, #8]
   17ba6:	f012 0f20 	tst.w	r2, #32
   17baa:	f000 80b0 	beq.w	17d0e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   17bae:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   17bb2:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   17bb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17bba:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   17bbe:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   17bc2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17bc6:	f898 001d 	ldrb.w	r0, [r8, #29]
   17bca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17bce:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17bd2:	404a      	eors	r2, r1
   17bd4:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17bd8:	2201      	movs	r2, #1
   17bda:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17bdc:	f7fc ff8e 	bl	14afc <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17be0:	4ea3      	ldr	r6, [pc, #652]	; (17e70 <isr_rx_scan+0x778>)
   17be2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   17be6:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17bea:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   17bee:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   17bf2:	2327      	movs	r3, #39	; 0x27
   17bf4:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   17bf8:	2400      	movs	r4, #0
   17bfa:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   17bfe:	429d      	cmp	r5, r3
   17c00:	bf38      	it	cc
   17c02:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c04:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   17c08:	9300      	str	r3, [sp, #0]
   17c0a:	4b9a      	ldr	r3, [pc, #616]	; (17e74 <isr_rx_scan+0x77c>)
   17c0c:	2206      	movs	r2, #6
   17c0e:	4621      	mov	r1, r4
   17c10:	4620      	mov	r0, r4
   17c12:	f7f9 fc99 	bl	11548 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   17c16:	f240 6131 	movw	r1, #1585	; 0x631
   17c1a:	f7fa faed 	bl	121f8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c1e:	9400      	str	r4, [sp, #0]
   17c20:	4623      	mov	r3, r4
   17c22:	2204      	movs	r2, #4
   17c24:	4621      	mov	r1, r4
   17c26:	4620      	mov	r0, r4
   17c28:	f7f9 fc8e 	bl	11548 <ticker_stop>
				     conn->handle,
   17c2c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c30:	3307      	adds	r3, #7
   17c32:	b2db      	uxtb	r3, r3
   17c34:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   17c36:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c38:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   17c3a:	4f8f      	ldr	r7, [pc, #572]	; (17e78 <isr_rx_scan+0x780>)
   17c3c:	a38a      	add	r3, pc, #552	; (adr r3, 17e68 <isr_rx_scan+0x770>)
   17c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c42:	990c      	ldr	r1, [sp, #48]	; 0x30
   17c44:	fba1 0107 	umull	r0, r1, r1, r7
   17c48:	f7e9 fa58 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c4c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   17c50:	fbab 1207 	umull	r1, r2, fp, r7
   17c54:	468b      	mov	fp, r1
   17c56:	4694      	mov	ip, r2
   17c58:	a383      	add	r3, pc, #524	; (adr r3, 17e68 <isr_rx_scan+0x770>)
   17c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c5e:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   17c62:	4658      	mov	r0, fp
   17c64:	4661      	mov	r1, ip
   17c66:	f7e9 fa49 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c6a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   17c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17c72:	2100      	movs	r1, #0
   17c74:	4a81      	ldr	r2, [pc, #516]	; (17e7c <isr_rx_scan+0x784>)
   17c76:	2307      	movs	r3, #7
   17c78:	fb03 f300 	mul.w	r3, r3, r0
   17c7c:	fb02 3301 	mla	r3, r2, r1, r3
   17c80:	fba0 0102 	umull	r0, r1, r0, r2
   17c84:	4419      	add	r1, r3
   17c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c8a:	2300      	movs	r3, #0
   17c8c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   17c90:	ebbb 0b00 	subs.w	fp, fp, r0
   17c94:	eb6c 0c01 	sbc.w	ip, ip, r1
   17c98:	4658      	mov	r0, fp
   17c9a:	4661      	mov	r1, ip
   17c9c:	f7e9 fa2e 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   17ca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17ca4:	442b      	add	r3, r5
   17ca6:	b29b      	uxth	r3, r3
		ticker_status =
   17ca8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   17cac:	9208      	str	r2, [sp, #32]
   17cae:	4a74      	ldr	r2, [pc, #464]	; (17e80 <isr_rx_scan+0x788>)
   17cb0:	9207      	str	r2, [sp, #28]
   17cb2:	f8cd 8018 	str.w	r8, [sp, #24]
   17cb6:	4a73      	ldr	r2, [pc, #460]	; (17e84 <isr_rx_scan+0x78c>)
   17cb8:	9205      	str	r2, [sp, #20]
   17cba:	9304      	str	r3, [sp, #16]
   17cbc:	9403      	str	r4, [sp, #12]
   17cbe:	9002      	str	r0, [sp, #8]
   17cc0:	9701      	str	r7, [sp, #4]
   17cc2:	f8cd 9000 	str.w	r9, [sp]
   17cc6:	4633      	mov	r3, r6
   17cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17cca:	4621      	mov	r1, r4
   17ccc:	4620      	mov	r0, r4
   17cce:	f7f9 fb9f 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17cd2:	2800      	cmp	r0, #0
   17cd4:	f000 8132 	beq.w	17f3c <isr_rx_scan+0x844>
   17cd8:	2802      	cmp	r0, #2
   17cda:	f000 811b 	beq.w	17f14 <isr_rx_scan+0x81c>
   17cde:	4040      	eors	r0, r0
   17ce0:	f380 8811 	msr	BASEPRI, r0
   17ce4:	f04f 0004 	mov.w	r0, #4
   17ce8:	df02      	svc	2
		return (_radio.packet_rx_count -
   17cea:	4a61      	ldr	r2, [pc, #388]	; (17e70 <isr_rx_scan+0x778>)
   17cec:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   17cf0:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17cf4:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   17cf6:	fa51 f383 	uxtab	r3, r1, r3
   17cfa:	b2db      	uxtb	r3, r3
   17cfc:	e740      	b.n	17b80 <isr_rx_scan+0x488>
		return 0;
   17cfe:	2300      	movs	r3, #0
   17d00:	e748      	b.n	17b94 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   17d02:	4040      	eors	r0, r0
   17d04:	f380 8811 	msr	BASEPRI, r0
   17d08:	f04f 0004 	mov.w	r0, #4
   17d0c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17d0e:	2200      	movs	r2, #0
   17d10:	72da      	strb	r2, [r3, #11]
   17d12:	e763      	b.n	17bdc <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   17d14:	4a56      	ldr	r2, [pc, #344]	; (17e70 <isr_rx_scan+0x778>)
   17d16:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   17d1a:	f012 0f08 	tst.w	r2, #8
   17d1e:	f43f ad13 	beq.w	17748 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   17d22:	4a53      	ldr	r2, [pc, #332]	; (17e70 <isr_rx_scan+0x778>)
   17d24:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   17d28:	2a00      	cmp	r2, #0
   17d2a:	f47f ad0d 	bne.w	17748 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   17d2e:	b37f      	cbz	r7, 17d90 <isr_rx_scan+0x698>
   17d30:	4629      	mov	r1, r5
   17d32:	2200      	movs	r2, #0
   17d34:	4630      	mov	r0, r6
   17d36:	f7fc ff81 	bl	14c3c <isr_rx_scan_report>
		if (err) {
   17d3a:	4682      	mov	sl, r0
   17d3c:	2800      	cmp	r0, #0
   17d3e:	f040 80e9 	bne.w	17f14 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   17d42:	f7f8 f8fd 	bl	ff40 <radio_pkt_scratch_get>
   17d46:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   17d48:	7803      	ldrb	r3, [r0, #0]
   17d4a:	2203      	movs	r2, #3
   17d4c:	f362 0303 	bfi	r3, r2, #0, #4
   17d50:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   17d52:	7a23      	ldrb	r3, [r4, #8]
   17d54:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17d58:	7802      	ldrb	r2, [r0, #0]
   17d5a:	f363 12c7 	bfi	r2, r3, #7, #1
   17d5e:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   17d60:	230c      	movs	r3, #12
   17d62:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   17d64:	4628      	mov	r0, r5
   17d66:	f002 f94b 	bl	1a000 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17d6a:	4b41      	ldr	r3, [pc, #260]	; (17e70 <isr_rx_scan+0x778>)
   17d6c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17d70:	f013 0f01 	tst.w	r3, #1
   17d74:	d00e      	beq.n	17d94 <isr_rx_scan+0x69c>
   17d76:	b168      	cbz	r0, 17d94 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   17d78:	7832      	ldrb	r2, [r6, #0]
   17d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17d7e:	4633      	mov	r3, r6
   17d80:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17d84:	2206      	movs	r2, #6
   17d86:	4601      	mov	r1, r0
   17d88:	4618      	mov	r0, r3
   17d8a:	f7e8 fa99 	bl	2c0 <memcpy>
   17d8e:	e00f      	b.n	17db0 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   17d90:	21ff      	movs	r1, #255	; 0xff
   17d92:	e7ce      	b.n	17d32 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17d94:	4936      	ldr	r1, [pc, #216]	; (17e70 <isr_rx_scan+0x778>)
   17d96:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   17d9a:	09db      	lsrs	r3, r3, #7
   17d9c:	7832      	ldrb	r2, [r6, #0]
   17d9e:	f363 1286 	bfi	r2, r3, #6, #1
   17da2:	4630      	mov	r0, r6
   17da4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17da8:	2206      	movs	r2, #6
   17daa:	31e0      	adds	r1, #224	; 0xe0
   17dac:	f7e8 fa88 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   17db0:	2206      	movs	r2, #6
   17db2:	f104 010a 	add.w	r1, r4, #10
   17db6:	f106 0008 	add.w	r0, r6, #8
   17dba:	f7e8 fa81 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   17dbe:	4b2c      	ldr	r3, [pc, #176]	; (17e70 <isr_rx_scan+0x778>)
   17dc0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17dc4:	f042 0202 	orr.w	r2, r2, #2
   17dc8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   17dcc:	2202      	movs	r2, #2
   17dce:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   17dd0:	2096      	movs	r0, #150	; 0x96
   17dd2:	f7f8 f96b 	bl	100ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   17dd6:	2000      	movs	r0, #0
   17dd8:	f7f8 f8b6 	bl	ff48 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   17ddc:	4630      	mov	r0, r6
   17dde:	f7f8 f83f 	bl	fe60 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   17de2:	f7f8 fa1b 	bl	1021c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   17de6:	f7f8 f873 	bl	fed0 <radio_is_ready>
   17dea:	4682      	mov	sl, r0
   17dec:	2800      	cmp	r0, #0
   17dee:	f000 8091 	beq.w	17f14 <isr_rx_scan+0x81c>
   17df2:	4040      	eors	r0, r0
   17df4:	f380 8811 	msr	BASEPRI, r0
   17df8:	f04f 0004 	mov.w	r0, #4
   17dfc:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17dfe:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17e00:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17e04:	462a      	mov	r2, r5
   17e06:	4649      	mov	r1, r9
   17e08:	09c0      	lsrs	r0, r0, #7
   17e0a:	f002 fb73 	bl	1a4f4 <ctrl_rl_addr_resolve>
   17e0e:	4682      	mov	sl, r0
   17e10:	2800      	cmp	r0, #0
   17e12:	d146      	bne.n	17ea2 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17e14:	4b16      	ldr	r3, [pc, #88]	; (17e70 <isr_rx_scan+0x778>)
   17e16:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   17e1a:	7a23      	ldrb	r3, [r4, #8]
   17e1c:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17e1e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17e22:	d00b      	beq.n	17e3c <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17e24:	4b12      	ldr	r3, [pc, #72]	; (17e70 <isr_rx_scan+0x778>)
   17e26:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   17e2a:	f013 0f20 	tst.w	r3, #32
   17e2e:	d02d      	beq.n	17e8c <isr_rx_scan+0x794>
   17e30:	f994 3008 	ldrsb.w	r3, [r4, #8]
   17e34:	2b00      	cmp	r3, #0
   17e36:	db0c      	blt.n	17e52 <isr_rx_scan+0x75a>
	bool dir_report = false;
   17e38:	46d1      	mov	r9, sl
   17e3a:	e028      	b.n	17e8e <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   17e3c:	2206      	movs	r2, #6
   17e3e:	4649      	mov	r1, r9
   17e40:	4811      	ldr	r0, [pc, #68]	; (17e88 <isr_rx_scan+0x790>)
   17e42:	f012 fd69 	bl	2a918 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17e46:	2800      	cmp	r0, #0
   17e48:	d1ec      	bne.n	17e24 <isr_rx_scan+0x72c>
	bool dir_report = false;
   17e4a:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   17e4c:	f04f 0a01 	mov.w	sl, #1
   17e50:	e029      	b.n	17ea6 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   17e52:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   17e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17e5a:	2b40      	cmp	r3, #64	; 0x40
   17e5c:	d01d      	beq.n	17e9a <isr_rx_scan+0x7a2>
	bool dir_report = false;
   17e5e:	46d1      	mov	r9, sl
   17e60:	e015      	b.n	17e8e <isr_rx_scan+0x796>
   17e62:	bf00      	nop
   17e64:	f3af 8000 	nop.w
   17e68:	1afd498d 	.word	0x1afd498d
   17e6c:	00000007 	.word	0x00000007
   17e70:	2000144c 	.word	0x2000144c
   17e74:	000121f9 	.word	0x000121f9
   17e78:	3b9aca00 	.word	0x3b9aca00
   17e7c:	1afd498d 	.word	0x1afd498d
   17e80:	00012165 	.word	0x00012165
   17e84:	00016d25 	.word	0x00016d25
   17e88:	2000152c 	.word	0x2000152c
   17e8c:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   17e8e:	f1ba 0f00 	cmp.w	sl, #0
   17e92:	d008      	beq.n	17ea6 <isr_rx_scan+0x7ae>
   17e94:	f04f 0a01 	mov.w	sl, #1
   17e98:	e005      	b.n	17ea6 <isr_rx_scan+0x7ae>
			*dir_report = true;
   17e9a:	f04f 0901 	mov.w	r9, #1
		return true;
   17e9e:	46ca      	mov	sl, r9
   17ea0:	e7f5      	b.n	17e8e <isr_rx_scan+0x796>
	bool dir_report = false;
   17ea2:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17ea6:	f1ba 0f00 	cmp.w	sl, #0
   17eaa:	d12b      	bne.n	17f04 <isr_rx_scan+0x80c>
   17eac:	e454      	b.n	17758 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   17eae:	4a26      	ldr	r2, [pc, #152]	; (17f48 <isr_rx_scan+0x850>)
   17eb0:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   17eb4:	f012 0f07 	tst.w	r2, #7
   17eb8:	d124      	bne.n	17f04 <isr_rx_scan+0x80c>
   17eba:	e459      	b.n	17770 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   17ebc:	4b22      	ldr	r3, [pc, #136]	; (17f48 <isr_rx_scan+0x850>)
   17ebe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   17ec2:	f013 0f02 	tst.w	r3, #2
   17ec6:	d102      	bne.n	17ece <isr_rx_scan+0x7d6>
		return 1;
   17ec8:	f04f 0a01 	mov.w	sl, #1
   17ecc:	e022      	b.n	17f14 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   17ece:	f7f8 f837 	bl	ff40 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17ed2:	7802      	ldrb	r2, [r0, #0]
   17ed4:	7a23      	ldrb	r3, [r4, #8]
   17ed6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17eda:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17ede:	d004      	beq.n	17eea <isr_rx_scan+0x7f2>
   17ee0:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   17ee2:	b97b      	cbnz	r3, 17f04 <isr_rx_scan+0x80c>
		return 1;
   17ee4:	f04f 0a01 	mov.w	sl, #1
   17ee8:	e014      	b.n	17f14 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   17eea:	2206      	movs	r2, #6
   17eec:	f108 0102 	add.w	r1, r8, #2
   17ef0:	3008      	adds	r0, #8
   17ef2:	f012 fd11 	bl	2a918 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17ef6:	b108      	cbz	r0, 17efc <isr_rx_scan+0x804>
   17ef8:	2300      	movs	r3, #0
   17efa:	e7f2      	b.n	17ee2 <isr_rx_scan+0x7ea>
   17efc:	2301      	movs	r3, #1
   17efe:	e7f0      	b.n	17ee2 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   17f00:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17f04:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   17f06:	b1db      	cbz	r3, 17f40 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17f08:	4b0f      	ldr	r3, [pc, #60]	; (17f48 <isr_rx_scan+0x850>)
   17f0a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   17f0e:	b12b      	cbz	r3, 17f1c <isr_rx_scan+0x824>
		return 1;
   17f10:	f04f 0a01 	mov.w	sl, #1
}
   17f14:	4650      	mov	r0, sl
   17f16:	b00f      	add	sp, #60	; 0x3c
   17f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   17f1c:	b907      	cbnz	r7, 17f20 <isr_rx_scan+0x828>
   17f1e:	25ff      	movs	r5, #255	; 0xff
   17f20:	464a      	mov	r2, r9
   17f22:	4629      	mov	r1, r5
   17f24:	4630      	mov	r0, r6
   17f26:	f7fc fe89 	bl	14c3c <isr_rx_scan_report>
		if (err) {
   17f2a:	4682      	mov	sl, r0
   17f2c:	2800      	cmp	r0, #0
   17f2e:	d1f1      	bne.n	17f14 <isr_rx_scan+0x81c>
	return 1;
   17f30:	f04f 0a01 	mov.w	sl, #1
   17f34:	e7ee      	b.n	17f14 <isr_rx_scan+0x81c>
			return 1;
   17f36:	f04f 0a01 	mov.w	sl, #1
   17f3a:	e7eb      	b.n	17f14 <isr_rx_scan+0x81c>
		return 0;
   17f3c:	4682      	mov	sl, r0
   17f3e:	e7e9      	b.n	17f14 <isr_rx_scan+0x81c>
		return 1;
   17f40:	f04f 0a01 	mov.w	sl, #1
   17f44:	e7e6      	b.n	17f14 <isr_rx_scan+0x81c>
   17f46:	bf00      	nop
   17f48:	2000144c 	.word	0x2000144c
   17f4c:	00000000 	.word	0x00000000

00017f50 <isr_rx_adv>:
{
   17f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f54:	b08f      	sub	sp, #60	; 0x3c
   17f56:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17f58:	b9fa      	cbnz	r2, 17f9a <isr_rx_adv+0x4a>
   17f5a:	20ff      	movs	r0, #255	; 0xff
   17f5c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   17f60:	f7f7 ffee 	bl	ff40 <radio_pkt_scratch_get>
   17f64:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   17f66:	4f9d      	ldr	r7, [pc, #628]	; (181dc <isr_rx_adv+0x28c>)
   17f68:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   17f6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17f70:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17f74:	3320      	adds	r3, #32
   17f76:	441f      	add	r7, r3
   17f78:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17f7a:	7803      	ldrb	r3, [r0, #0]
   17f7c:	f003 030f 	and.w	r3, r3, #15
   17f80:	2b03      	cmp	r3, #3
   17f82:	d00e      	beq.n	17fa2 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17f84:	f898 3000 	ldrb.w	r3, [r8]
   17f88:	f003 030f 	and.w	r3, r3, #15
   17f8c:	2b05      	cmp	r3, #5
   17f8e:	d065      	beq.n	1805c <isr_rx_adv+0x10c>
	return 1;
   17f90:	2301      	movs	r3, #1
}
   17f92:	4618      	mov	r0, r3
   17f94:	b00f      	add	sp, #60	; 0x3c
   17f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17f9a:	4618      	mov	r0, r3
   17f9c:	f002 f892 	bl	1a0c4 <ctrl_rl_irk_idx>
   17fa0:	e7dc      	b.n	17f5c <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   17fa2:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17fa4:	2b0c      	cmp	r3, #12
   17fa6:	d1ed      	bne.n	17f84 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17fa8:	4b8c      	ldr	r3, [pc, #560]	; (181dc <isr_rx_adv+0x28c>)
   17faa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17fae:	f013 0f40 	tst.w	r3, #64	; 0x40
   17fb2:	d030      	beq.n	18016 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17fb4:	4b89      	ldr	r3, [pc, #548]	; (181dc <isr_rx_adv+0x28c>)
   17fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   17fba:	f013 0f40 	tst.w	r3, #64	; 0x40
   17fbe:	d04b      	beq.n	18058 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17fc0:	2c00      	cmp	r4, #0
   17fc2:	d034      	beq.n	1802e <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   17fc4:	79fb      	ldrb	r3, [r7, #7]
   17fc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17fca:	f898 2000 	ldrb.w	r2, [r8]
   17fce:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17fd2:	d034      	beq.n	1803e <isr_rx_adv+0xee>
   17fd4:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17fd6:	2b00      	cmp	r3, #0
   17fd8:	d13c      	bne.n	18054 <isr_rx_adv+0x104>
   17fda:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   17fdc:	2b00      	cmp	r3, #0
   17fde:	d0d1      	beq.n	17f84 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   17fe0:	4c7e      	ldr	r4, [pc, #504]	; (181dc <isr_rx_adv+0x28c>)
   17fe2:	2303      	movs	r3, #3
   17fe4:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   17fe6:	f7f7 ffbf 	bl	ff68 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   17fea:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   17fee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17ff2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17ff6:	3370      	adds	r3, #112	; 0x70
   17ff8:	4423      	add	r3, r4
   17ffa:	1dd8      	adds	r0, r3, #7
   17ffc:	f7f7 ff30 	bl	fe60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   18000:	f7f7 ff66 	bl	fed0 <radio_is_ready>
   18004:	4603      	mov	r3, r0
   18006:	2800      	cmp	r0, #0
   18008:	d0c3      	beq.n	17f92 <isr_rx_adv+0x42>
   1800a:	4040      	eors	r0, r0
   1800c:	f380 8811 	msr	BASEPRI, r0
   18010:	f04f 0004 	mov.w	r0, #4
   18014:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   18016:	4601      	mov	r1, r0
   18018:	f811 0b02 	ldrb.w	r0, [r1], #2
   1801c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18020:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18024:	f002 fa0e 	bl	1a444 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   18028:	2800      	cmp	r0, #0
   1802a:	d1cb      	bne.n	17fc4 <isr_rx_adv+0x74>
   1802c:	e7c2      	b.n	17fb4 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1802e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   18032:	f002 f871 	bl	1a118 <ctrl_irk_whitelisted>
   18036:	2800      	cmp	r0, #0
   18038:	d1c4      	bne.n	17fc4 <isr_rx_adv+0x74>
   1803a:	2300      	movs	r3, #0
   1803c:	e7ce      	b.n	17fdc <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   1803e:	2206      	movs	r2, #6
   18040:	f108 0108 	add.w	r1, r8, #8
   18044:	1ca8      	adds	r0, r5, #2
   18046:	f012 fc67 	bl	2a918 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   1804a:	b908      	cbnz	r0, 18050 <isr_rx_adv+0x100>
   1804c:	2301      	movs	r3, #1
   1804e:	e7c2      	b.n	17fd6 <isr_rx_adv+0x86>
   18050:	2300      	movs	r3, #0
   18052:	e7c0      	b.n	17fd6 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18054:	2301      	movs	r3, #1
   18056:	e7c1      	b.n	17fdc <isr_rx_adv+0x8c>
   18058:	2300      	movs	r3, #0
   1805a:	e7bf      	b.n	17fdc <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   1805c:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18060:	2b22      	cmp	r3, #34	; 0x22
   18062:	d001      	beq.n	18068 <isr_rx_adv+0x118>
	return 1;
   18064:	2301      	movs	r3, #1
   18066:	e794      	b.n	17f92 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18068:	79fb      	ldrb	r3, [r7, #7]
   1806a:	f003 030f 	and.w	r3, r3, #15
   1806e:	2b01      	cmp	r3, #1
   18070:	d01a      	beq.n	180a8 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   18072:	4b5a      	ldr	r3, [pc, #360]	; (181dc <isr_rx_adv+0x28c>)
   18074:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18078:	09db      	lsrs	r3, r3, #7
   1807a:	d06d      	beq.n	18158 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   1807c:	4b57      	ldr	r3, [pc, #348]	; (181dc <isr_rx_adv+0x28c>)
   1807e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   18082:	09db      	lsrs	r3, r3, #7
   18084:	f000 8096 	beq.w	181b4 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   18088:	2c00      	cmp	r4, #0
   1808a:	d071      	beq.n	18170 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   1808c:	79fb      	ldrb	r3, [r7, #7]
   1808e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18092:	f898 2000 	ldrb.w	r2, [r8]
   18096:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1809a:	d071      	beq.n	18180 <isr_rx_adv+0x230>
   1809c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1809e:	2b00      	cmp	r3, #0
   180a0:	f000 809a 	beq.w	181d8 <isr_rx_adv+0x288>
   180a4:	2301      	movs	r3, #1
   180a6:	e086      	b.n	181b6 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   180a8:	4641      	mov	r1, r8
   180aa:	f811 0b02 	ldrb.w	r0, [r1], #2
   180ae:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   180b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   180b6:	f002 f9c5 	bl	1a444 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   180ba:	b908      	cbnz	r0, 180c0 <isr_rx_adv+0x170>
   180bc:	2300      	movs	r3, #0
   180be:	e07a      	b.n	181b6 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   180c0:	79fb      	ldrb	r3, [r7, #7]
   180c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   180c6:	f898 2000 	ldrb.w	r2, [r8]
   180ca:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   180ce:	d003      	beq.n	180d8 <isr_rx_adv+0x188>
   180d0:	2300      	movs	r3, #0
					    rl_idx) &&
   180d2:	b9db      	cbnz	r3, 1810c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   180d4:	2300      	movs	r3, #0
   180d6:	e06e      	b.n	181b6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   180d8:	79fb      	ldrb	r3, [r7, #7]
   180da:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   180de:	2b01      	cmp	r3, #1
   180e0:	d008      	beq.n	180f4 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   180e2:	2206      	movs	r2, #6
   180e4:	f108 0108 	add.w	r1, r8, #8
   180e8:	1ca8      	adds	r0, r5, #2
   180ea:	f012 fc15 	bl	2a918 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   180ee:	b958      	cbnz	r0, 18108 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   180f0:	2301      	movs	r3, #1
   180f2:	e7ee      	b.n	180d2 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   180f4:	2206      	movs	r2, #6
   180f6:	f108 0108 	add.w	r1, r8, #8
   180fa:	1ca8      	adds	r0, r5, #2
   180fc:	f012 fc0c 	bl	2a918 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18100:	2800      	cmp	r0, #0
   18102:	d1ee      	bne.n	180e2 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   18104:	2301      	movs	r3, #1
   18106:	e7e4      	b.n	180d2 <isr_rx_adv+0x182>
   18108:	2300      	movs	r3, #0
   1810a:	e7e2      	b.n	180d2 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   1810c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   18110:	2bff      	cmp	r3, #255	; 0xff
   18112:	d009      	beq.n	18128 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   18114:	4a31      	ldr	r2, [pc, #196]	; (181dc <isr_rx_adv+0x28c>)
   18116:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   1811a:	4293      	cmp	r3, r2
   1811c:	bf14      	ite	ne
   1811e:	2300      	movne	r3, #0
   18120:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   18122:	b9bb      	cbnz	r3, 18154 <isr_rx_adv+0x204>
   18124:	2300      	movs	r3, #0
   18126:	e046      	b.n	181b6 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   18128:	79fa      	ldrb	r2, [r7, #7]
   1812a:	f898 3000 	ldrb.w	r3, [r8]
   1812e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18132:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18136:	d001      	beq.n	1813c <isr_rx_adv+0x1ec>
   18138:	2300      	movs	r3, #0
   1813a:	e7f2      	b.n	18122 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   1813c:	2206      	movs	r2, #6
   1813e:	f108 0102 	add.w	r1, r8, #2
   18142:	f105 0008 	add.w	r0, r5, #8
   18146:	f012 fbe7 	bl	2a918 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1814a:	b908      	cbnz	r0, 18150 <isr_rx_adv+0x200>
   1814c:	2301      	movs	r3, #1
   1814e:	e7e8      	b.n	18122 <isr_rx_adv+0x1d2>
   18150:	2300      	movs	r3, #0
   18152:	e7e6      	b.n	18122 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   18154:	2301      	movs	r3, #1
   18156:	e02e      	b.n	181b6 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   18158:	4641      	mov	r1, r8
   1815a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1815e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18162:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18166:	f002 f96d 	bl	1a444 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1816a:	2800      	cmp	r0, #0
   1816c:	d18e      	bne.n	1808c <isr_rx_adv+0x13c>
   1816e:	e785      	b.n	1807c <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18170:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   18174:	f001 ffd0 	bl	1a118 <ctrl_irk_whitelisted>
   18178:	2800      	cmp	r0, #0
   1817a:	d187      	bne.n	1808c <isr_rx_adv+0x13c>
   1817c:	2300      	movs	r3, #0
   1817e:	e01a      	b.n	181b6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18180:	79fb      	ldrb	r3, [r7, #7]
   18182:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   18186:	2b01      	cmp	r3, #1
   18188:	d008      	beq.n	1819c <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   1818a:	2206      	movs	r2, #6
   1818c:	f108 0108 	add.w	r1, r8, #8
   18190:	1ca8      	adds	r0, r5, #2
   18192:	f012 fbc1 	bl	2a918 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   18196:	b958      	cbnz	r0, 181b0 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   18198:	2301      	movs	r3, #1
   1819a:	e780      	b.n	1809e <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   1819c:	2206      	movs	r2, #6
   1819e:	f108 0108 	add.w	r1, r8, #8
   181a2:	1ca8      	adds	r0, r5, #2
   181a4:	f012 fbb8 	bl	2a918 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   181a8:	2800      	cmp	r0, #0
   181aa:	d1ee      	bne.n	1818a <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   181ac:	2301      	movs	r3, #1
   181ae:	e776      	b.n	1809e <isr_rx_adv+0x14e>
   181b0:	2300      	movs	r3, #0
   181b2:	e774      	b.n	1809e <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   181b4:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   181b6:	2b00      	cmp	r3, #0
   181b8:	f000 8232 	beq.w	18620 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   181bc:	4b07      	ldr	r3, [pc, #28]	; (181dc <isr_rx_adv+0x28c>)
   181be:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   181c2:	b16b      	cbz	r3, 181e0 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   181c4:	4a05      	ldr	r2, [pc, #20]	; (181dc <isr_rx_adv+0x28c>)
   181c6:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   181ca:	b2db      	uxtb	r3, r3
   181cc:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   181d0:	4293      	cmp	r3, r2
   181d2:	d005      	beq.n	181e0 <isr_rx_adv+0x290>
	return 1;
   181d4:	2301      	movs	r3, #1
   181d6:	e6dc      	b.n	17f92 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   181d8:	2300      	movs	r3, #0
   181da:	e7ec      	b.n	181b6 <isr_rx_adv+0x266>
   181dc:	2000144c 	.word	0x2000144c
		   (_radio.advertiser.conn)) {
   181e0:	4bd9      	ldr	r3, [pc, #868]	; (18548 <isr_rx_adv+0x5f8>)
   181e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   181e6:	2b00      	cmp	r3, #0
   181e8:	f000 821c 	beq.w	18624 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   181ec:	4bd6      	ldr	r3, [pc, #856]	; (18548 <isr_rx_adv+0x5f8>)
   181ee:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   181f2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   181f6:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   181f8:	429a      	cmp	r2, r3
   181fa:	f0c0 81cf 	bcc.w	1859c <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   181fe:	4bd2      	ldr	r3, [pc, #840]	; (18548 <isr_rx_adv+0x5f8>)
   18200:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   18204:	1ad3      	subs	r3, r2, r3
   18206:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   18208:	2b03      	cmp	r3, #3
   1820a:	f240 81d1 	bls.w	185b0 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   1820e:	4bce      	ldr	r3, [pc, #824]	; (18548 <isr_rx_adv+0x5f8>)
   18210:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   18214:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   18218:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   1821c:	2d00      	cmp	r5, #0
   1821e:	f000 8203 	beq.w	18628 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   18222:	4ec9      	ldr	r6, [pc, #804]	; (18548 <isr_rx_adv+0x5f8>)
   18224:	f04f 0904 	mov.w	r9, #4
   18228:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   1822c:	f7f7 fe36 	bl	fe9c <radio_disable>
		conn = _radio.advertiser.conn;
   18230:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   18234:	2300      	movs	r3, #0
   18236:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1823a:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1823e:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   18242:	4620      	mov	r0, r4
   18244:	f7f7 fc55 	bl	faf2 <mem_index_get>
   18248:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   1824a:	2203      	movs	r2, #3
   1824c:	f108 0112 	add.w	r1, r8, #18
   18250:	f104 0014 	add.w	r0, r4, #20
   18254:	f7e8 f834 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   18258:	f104 0a10 	add.w	sl, r4, #16
   1825c:	464a      	mov	r2, r9
   1825e:	f108 010e 	add.w	r1, r8, #14
   18262:	4650      	mov	r0, sl
   18264:	f7e8 f82c 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   18268:	f104 0617 	add.w	r6, r4, #23
   1826c:	2205      	movs	r2, #5
   1826e:	f108 011e 	add.w	r1, r8, #30
   18272:	4630      	mov	r0, r6
   18274:	f7e8 f824 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   18278:	2105      	movs	r1, #5
   1827a:	4630      	mov	r0, r6
   1827c:	f7f7 fc7d 	bl	fb7a <util_ones_count_get>
		conn->data_chan_count =
   18280:	7f63      	ldrb	r3, [r4, #29]
   18282:	f360 0305 	bfi	r3, r0, #0, #6
   18286:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   18288:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   1828c:	f3c3 0304 	ubfx	r3, r3, #0, #5
   18290:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   18292:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   18296:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   18298:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   1829c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   182a0:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   182a4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   182a8:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   182aa:	464a      	mov	r2, r9
   182ac:	4651      	mov	r1, sl
   182ae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   182b2:	f7e8 f805 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   182b6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   182ba:	f242 7210 	movw	r2, #10000	; 0x2710
   182be:	fb02 6303 	mla	r3, r2, r3, r6
   182c2:	3b01      	subs	r3, #1
   182c4:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   182c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   182ca:	4ba0      	ldr	r3, [pc, #640]	; (1854c <isr_rx_adv+0x5fc>)
   182cc:	4433      	add	r3, r6
   182ce:	fbb3 f3f6 	udiv	r3, r3, r6
   182d2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   182d6:	4b9e      	ldr	r3, [pc, #632]	; (18550 <isr_rx_adv+0x600>)
   182d8:	4433      	add	r3, r6
   182da:	fbb3 f3f6 	udiv	r3, r3, r6
   182de:	b29b      	uxth	r3, r3
   182e0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   182e4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   182e6:	1d91      	adds	r1, r2, #6
   182e8:	428b      	cmp	r3, r1
   182ea:	dd03      	ble.n	182f4 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   182ec:	1a9b      	subs	r3, r3, r2
   182ee:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   182f0:	3b06      	subs	r3, #6
   182f2:	b29b      	uxth	r3, r3
   182f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   182f8:	8c23      	ldrh	r3, [r4, #32]
   182fa:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   182fc:	2206      	movs	r2, #6
   182fe:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   18300:	2300      	movs	r3, #0
   18302:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   18304:	2301      	movs	r3, #1
   18306:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   18308:	4641      	mov	r1, r8
   1830a:	f811 3b08 	ldrb.w	r3, [r1], #8
   1830e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   18312:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   18314:	f105 001b 	add.w	r0, r5, #27
   18318:	f7e7 ffd2 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   1831c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   18320:	28ff      	cmp	r0, #255	; 0xff
   18322:	f000 8147 	beq.w	185b4 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   18326:	f105 020e 	add.w	r2, r5, #14
   1832a:	f105 010d 	add.w	r1, r5, #13
   1832e:	f002 f85d 	bl	1a3ec <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   18332:	7b6b      	ldrb	r3, [r5, #13]
   18334:	3302      	adds	r3, #2
   18336:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   18338:	2206      	movs	r2, #6
   1833a:	f108 0102 	add.w	r1, r8, #2
   1833e:	f105 0014 	add.w	r0, r5, #20
   18342:	f7e7 ffbd 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   18346:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   1834a:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   1834e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   18352:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   18356:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   1835a:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   1835e:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   18362:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   18366:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1836a:	8c20      	ldrh	r0, [r4, #32]
   1836c:	f7f9 fedc 	bl	12128 <rx_fc_lock>
		packet_rx_enqueue();
   18370:	f7fc fbc4 	bl	14afc <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   18374:	4b74      	ldr	r3, [pc, #464]	; (18548 <isr_rx_adv+0x5f8>)
   18376:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1837a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1837e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   18380:	429a      	cmp	r2, r3
   18382:	f0c0 8129 	bcc.w	185d8 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   18386:	4b70      	ldr	r3, [pc, #448]	; (18548 <isr_rx_adv+0x5f8>)
   18388:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1838c:	1ad3      	subs	r3, r2, r3
   1838e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   18390:	2b02      	cmp	r3, #2
   18392:	f240 812b 	bls.w	185ec <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   18396:	4b6c      	ldr	r3, [pc, #432]	; (18548 <isr_rx_adv+0x5f8>)
   18398:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1839c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   183a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   183a4:	2b00      	cmp	r3, #0
   183a6:	f000 8123 	beq.w	185f0 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   183aa:	8c22      	ldrh	r2, [r4, #32]
   183ac:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   183ae:	220b      	movs	r2, #11
   183b0:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   183b2:	f898 2000 	ldrb.w	r2, [r8]
   183b6:	f012 0f20 	tst.w	r2, #32
   183ba:	f000 811f 	beq.w	185fc <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   183be:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   183c0:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   183c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   183c6:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   183c8:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   183ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   183ce:	7f60      	ldrb	r0, [r4, #29]
   183d0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   183d4:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   183d6:	404a      	eors	r2, r1
   183d8:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   183da:	2201      	movs	r2, #1
   183dc:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   183de:	f7fc fb8d 	bl	14afc <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   183e2:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   183e6:	0952      	lsrs	r2, r2, #5
   183e8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   183ec:	f362 0384 	bfi	r3, r2, #2, #3
   183f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   183f4:	4d54      	ldr	r5, [pc, #336]	; (18548 <isr_rx_adv+0x5f8>)
   183f6:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   183fa:	4956      	ldr	r1, [pc, #344]	; (18554 <isr_rx_adv+0x604>)
   183fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   18400:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   18404:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   18406:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   1840a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1840e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   18412:	4a51      	ldr	r2, [pc, #324]	; (18558 <isr_rx_adv+0x608>)
   18414:	fba2 2303 	umull	r2, r3, r2, r3
   18418:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   1841a:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   1841c:	0873      	lsrs	r3, r6, #1
   1841e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   18420:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   18422:	f898 3015 	ldrb.w	r3, [r8, #21]
   18426:	f240 49e2 	movw	r9, #1250	; 0x4e2
   1842a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   1842e:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   18430:	f04f 0b00 	mov.w	fp, #0
   18434:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   18438:	4658      	mov	r0, fp
   1843a:	f7f7 fd1b 	bl	fe74 <radio_rx_ready_delay_get>
   1843e:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   18440:	f200 4052 	addw	r0, r0, #1106	; 0x452
   18444:	a33e      	add	r3, pc, #248	; (adr r3, 18540 <isr_rx_adv+0x5f0>)
   18446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1844a:	4944      	ldr	r1, [pc, #272]	; (1855c <isr_rx_adv+0x60c>)
   1844c:	fba0 0101 	umull	r0, r1, r0, r1
   18450:	f7e8 fe54 	bl	10fc <__aeabi_uldivmod>
   18454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   18458:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1845a:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   1845e:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   18460:	2327      	movs	r3, #39	; 0x27
   18462:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   18464:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   18468:	429d      	cmp	r5, r3
   1846a:	bf38      	it	cc
   1846c:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   1846e:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   18470:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   18472:	f7f7 fee5 	bl	10240 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   18476:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   1847a:	b292      	uxth	r2, r2
		conn_offset_us +=
   1847c:	fb09 9902 	mla	r9, r9, r2, r9
   18480:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   18482:	4659      	mov	r1, fp
   18484:	4658      	mov	r0, fp
   18486:	f7f7 fcf3 	bl	fe70 <radio_tx_chain_delay_get>
   1848a:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   1848e:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   18492:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18496:	f240 4372 	movw	r3, #1138	; 0x472
   1849a:	9300      	str	r3, [sp, #0]
   1849c:	4b30      	ldr	r3, [pc, #192]	; (18560 <isr_rx_adv+0x610>)
   1849e:	2205      	movs	r2, #5
   184a0:	4659      	mov	r1, fp
   184a2:	4658      	mov	r0, fp
   184a4:	f7f9 f850 	bl	11548 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   184a8:	f240 4173 	movw	r1, #1139	; 0x473
   184ac:	f7f9 fe84 	bl	121b8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   184b0:	79fb      	ldrb	r3, [r7, #7]
   184b2:	f003 030f 	and.w	r3, r3, #15
   184b6:	2b01      	cmp	r3, #1
   184b8:	f000 80a3 	beq.w	18602 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   184bc:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184be:	3307      	adds	r3, #7
   184c0:	b2db      	uxtb	r3, r3
   184c2:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   184c4:	4b20      	ldr	r3, [pc, #128]	; (18548 <isr_rx_adv+0x5f8>)
   184c6:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184c8:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   184cc:	f04f 0800 	mov.w	r8, #0
   184d0:	4f22      	ldr	r7, [pc, #136]	; (1855c <isr_rx_adv+0x60c>)
   184d2:	a31b      	add	r3, pc, #108	; (adr r3, 18540 <isr_rx_adv+0x5f0>)
   184d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   184d8:	fbaa 0107 	umull	r0, r1, sl, r7
   184dc:	f7e8 fe0e 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184e0:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   184e4:	fba6 6707 	umull	r6, r7, r6, r7
   184e8:	a315      	add	r3, pc, #84	; (adr r3, 18540 <isr_rx_adv+0x5f0>)
   184ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   184ee:	4630      	mov	r0, r6
   184f0:	4639      	mov	r1, r7
   184f2:	f7e8 fe03 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184f6:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   184fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   184fe:	2100      	movs	r1, #0
   18500:	4a18      	ldr	r2, [pc, #96]	; (18564 <isr_rx_adv+0x614>)
   18502:	2307      	movs	r3, #7
   18504:	fb03 f300 	mul.w	r3, r3, r0
   18508:	fb02 3301 	mla	r3, r2, r1, r3
   1850c:	fba0 0102 	umull	r0, r1, r0, r2
   18510:	4419      	add	r1, r3
   18512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18516:	2300      	movs	r3, #0
   18518:	1a30      	subs	r0, r6, r0
   1851a:	eb67 0101 	sbc.w	r1, r7, r1
   1851e:	f7e8 fded 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   18522:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18524:	442b      	add	r3, r5
   18526:	b29b      	uxth	r3, r3
   18528:	f240 428a 	movw	r2, #1162	; 0x48a
   1852c:	9208      	str	r2, [sp, #32]
   1852e:	4a0e      	ldr	r2, [pc, #56]	; (18568 <isr_rx_adv+0x618>)
   18530:	9207      	str	r2, [sp, #28]
   18532:	9406      	str	r4, [sp, #24]
   18534:	4a0d      	ldr	r2, [pc, #52]	; (1856c <isr_rx_adv+0x61c>)
   18536:	9205      	str	r2, [sp, #20]
   18538:	e01a      	b.n	18570 <isr_rx_adv+0x620>
   1853a:	bf00      	nop
   1853c:	f3af 8000 	nop.w
   18540:	1afd498d 	.word	0x1afd498d
   18544:	00000007 	.word	0x00000007
   18548:	2000144c 	.word	0x2000144c
   1854c:	026259ff 	.word	0x026259ff
   18550:	01c9c37f 	.word	0x01c9c37f
   18554:	00031e94 	.word	0x00031e94
   18558:	431bde83 	.word	0x431bde83
   1855c:	3b9aca00 	.word	0x3b9aca00
   18560:	000121b9 	.word	0x000121b9
   18564:	1afd498d 	.word	0x1afd498d
   18568:	00012165 	.word	0x00012165
   1856c:	00016d1d 	.word	0x00016d1d
   18570:	9304      	str	r3, [sp, #16]
   18572:	f8cd 800c 	str.w	r8, [sp, #12]
   18576:	9002      	str	r0, [sp, #8]
   18578:	f8cd b004 	str.w	fp, [sp, #4]
   1857c:	f8cd a000 	str.w	sl, [sp]
   18580:	464b      	mov	r3, r9
   18582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18584:	4641      	mov	r1, r8
   18586:	4640      	mov	r0, r8
   18588:	f7f8 ff42 	bl	11410 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1858c:	4603      	mov	r3, r0
   1858e:	2800      	cmp	r0, #0
   18590:	f43f acff 	beq.w	17f92 <isr_rx_adv+0x42>
   18594:	2802      	cmp	r0, #2
   18596:	d13d      	bne.n	18614 <isr_rx_adv+0x6c4>
		return 0;
   18598:	2300      	movs	r3, #0
   1859a:	e4fa      	b.n	17f92 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   1859c:	4923      	ldr	r1, [pc, #140]	; (1862c <isr_rx_adv+0x6dc>)
   1859e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   185a2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   185a6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   185a8:	fa52 f383 	uxtab	r3, r2, r3
   185ac:	b2db      	uxtb	r3, r3
   185ae:	e62b      	b.n	18208 <isr_rx_adv+0x2b8>
		return 0;
   185b0:	2500      	movs	r5, #0
   185b2:	e633      	b.n	1821c <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   185b4:	2206      	movs	r2, #6
   185b6:	2100      	movs	r1, #0
   185b8:	f105 0014 	add.w	r0, r5, #20
   185bc:	f012 fa40 	bl	2aa40 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   185c0:	4641      	mov	r1, r8
   185c2:	f811 3b02 	ldrb.w	r3, [r1], #2
   185c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   185ca:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   185cc:	2206      	movs	r2, #6
   185ce:	f105 000e 	add.w	r0, r5, #14
   185d2:	f7e7 fe75 	bl	2c0 <memcpy>
   185d6:	e6b6      	b.n	18346 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   185d8:	4914      	ldr	r1, [pc, #80]	; (1862c <isr_rx_adv+0x6dc>)
   185da:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   185de:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   185e2:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   185e4:	fa52 f383 	uxtab	r3, r2, r3
   185e8:	b2db      	uxtb	r3, r3
   185ea:	e6d1      	b.n	18390 <isr_rx_adv+0x440>
		return 0;
   185ec:	2300      	movs	r3, #0
   185ee:	e6d9      	b.n	183a4 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   185f0:	4040      	eors	r0, r0
   185f2:	f380 8811 	msr	BASEPRI, r0
   185f6:	f04f 0004 	mov.w	r0, #4
   185fa:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   185fc:	2200      	movs	r2, #0
   185fe:	72da      	strb	r2, [r3, #11]
   18600:	e6ed      	b.n	183de <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18602:	4658      	mov	r0, fp
   18604:	f8cd b000 	str.w	fp, [sp]
   18608:	465b      	mov	r3, fp
   1860a:	2203      	movs	r2, #3
   1860c:	4659      	mov	r1, fp
   1860e:	f7f8 ff9b 	bl	11548 <ticker_stop>
   18612:	e753      	b.n	184bc <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18614:	4040      	eors	r0, r0
   18616:	f380 8811 	msr	BASEPRI, r0
   1861a:	f04f 0004 	mov.w	r0, #4
   1861e:	df02      	svc	2
	return 1;
   18620:	2301      	movs	r3, #1
   18622:	e4b6      	b.n	17f92 <isr_rx_adv+0x42>
   18624:	2301      	movs	r3, #1
   18626:	e4b4      	b.n	17f92 <isr_rx_adv+0x42>
			return 1;
   18628:	2301      	movs	r3, #1
   1862a:	e4b2      	b.n	17f92 <isr_rx_adv+0x42>
   1862c:	2000144c 	.word	0x2000144c

00018630 <radio_init>:
{
   18630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18634:	f89d e018 	ldrb.w	lr, [sp, #24]
   18638:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   1863c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1863e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   18642:	4c3b      	ldr	r4, [pc, #236]	; (18730 <radio_init+0x100>)
   18644:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   18646:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   1864a:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   1864c:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   18650:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   18654:	f44f 71aa 	mov.w	r1, #340	; 0x154
   18658:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   1865c:	f103 0803 	add.w	r8, r3, #3
   18660:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   18664:	f10e 0701 	add.w	r7, lr, #1
   18668:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   1866a:	3304      	adds	r3, #4
   1866c:	b2dd      	uxtb	r5, r3
   1866e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   18672:	f10e 0e02 	add.w	lr, lr, #2
   18676:	fa5f fe8e 	uxtb.w	lr, lr
   1867a:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   1867e:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   18682:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   18686:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   1868a:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1868e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   18692:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   18694:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   18698:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   1869a:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   1869e:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   186a2:	2b2a      	cmp	r3, #42	; 0x2a
   186a4:	d931      	bls.n	1870a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   186a6:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   186aa:	f02c 0c03 	bic.w	ip, ip, #3
   186ae:	fb1c f808 	smulbb	r8, ip, r8
   186b2:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   186b6:	4c1e      	ldr	r4, [pc, #120]	; (18730 <radio_init+0x100>)
   186b8:	2334      	movs	r3, #52	; 0x34
   186ba:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   186be:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   186c2:	4b1c      	ldr	r3, [pc, #112]	; (18734 <radio_init+0x104>)
   186c4:	fba3 c30e 	umull	ip, r3, r3, lr
   186c8:	091b      	lsrs	r3, r3, #4
   186ca:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   186ce:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   186d2:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   186d4:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   186d8:	442a      	add	r2, r5
   186da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   186de:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   186e2:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   186e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   186e8:	330a      	adds	r3, #10
   186ea:	b29b      	uxth	r3, r3
   186ec:	f023 0303 	bic.w	r3, r3, #3
   186f0:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   186f2:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   186f6:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   186fa:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   186fe:	1a3f      	subs	r7, r7, r0
   18700:	d00d      	beq.n	1871e <radio_init+0xee>
		return (retcode + mem_size);
   18702:	4437      	add	r7, r6
}
   18704:	4638      	mov	r0, r7
   18706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1870a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1870e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   18712:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   18716:	4c06      	ldr	r4, [pc, #24]	; (18730 <radio_init+0x100>)
   18718:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   1871c:	e7cb      	b.n	186b6 <radio_init+0x86>
	_radio.fc_ena = 1;
   1871e:	2201      	movs	r2, #1
   18720:	4b03      	ldr	r3, [pc, #12]	; (18730 <radio_init+0x100>)
   18722:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   18726:	f7ec ff23 	bl	5570 <common_init>
	radio_setup();
   1872a:	f7f7 faef 	bl	fd0c <radio_setup>
	return retcode;
   1872e:	e7e9      	b.n	18704 <radio_init+0xd4>
   18730:	2000144c 	.word	0x2000144c
   18734:	4ec4ec4f 	.word	0x4ec4ec4f

00018738 <ll_reset>:
{
   18738:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1873a:	2103      	movs	r1, #3
   1873c:	2005      	movs	r0, #5
   1873e:	f7f9 ff9b 	bl	12678 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   18742:	2104      	movs	r1, #4
   18744:	2006      	movs	r0, #6
   18746:	f7f9 ff97 	bl	12678 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1874a:	2400      	movs	r4, #0
   1874c:	e006      	b.n	1875c <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1874e:	1de0      	adds	r0, r4, #7
   18750:	21ff      	movs	r1, #255	; 0xff
   18752:	b2c0      	uxtb	r0, r0
   18754:	f7f9 ff90 	bl	12678 <role_disable>
	     conn_handle++) {
   18758:	3401      	adds	r4, #1
   1875a:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1875c:	4b1d      	ldr	r3, [pc, #116]	; (187d4 <ll_reset+0x9c>)
   1875e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   18762:	429c      	cmp	r4, r3
   18764:	d3f3      	bcc.n	1874e <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   18766:	4b1b      	ldr	r3, [pc, #108]	; (187d4 <ll_reset+0x9c>)
   18768:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1876c:	f36f 0200 	bfc	r2, #0, #1
   18770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   18774:	2000      	movs	r0, #0
   18776:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   1877a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1877e:	f360 0200 	bfi	r2, r0, #0, #1
   18782:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   18786:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1878a:	2234      	movs	r2, #52	; 0x34
   1878c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18790:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   18794:	4910      	ldr	r1, [pc, #64]	; (187d8 <ll_reset+0xa0>)
   18796:	fba1 1202 	umull	r1, r2, r1, r2
   1879a:	0912      	lsrs	r2, r2, #4
   1879c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   187a0:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   187a4:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   187a8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   187ac:	3a01      	subs	r2, #1
   187ae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   187b2:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   187b6:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   187ba:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   187be:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   187c2:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   187c6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   187ca:	f002 fa69 	bl	1aca0 <ll_filter_reset>
	common_init();
   187ce:	f7ec fecf 	bl	5570 <common_init>
   187d2:	bd10      	pop	{r4, pc}
   187d4:	2000144c 	.word	0x2000144c
   187d8:	4ec4ec4f 	.word	0x4ec4ec4f

000187dc <radio_adv_data_get>:
}
   187dc:	4800      	ldr	r0, [pc, #0]	; (187e0 <radio_adv_data_get+0x4>)
   187de:	4770      	bx	lr
   187e0:	20001473 	.word	0x20001473

000187e4 <radio_scan_data_get>:
}
   187e4:	4800      	ldr	r0, [pc, #0]	; (187e8 <radio_scan_data_get+0x4>)
   187e6:	4770      	bx	lr
   187e8:	200014c3 	.word	0x200014c3

000187ec <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   187ec:	4b02      	ldr	r3, [pc, #8]	; (187f8 <radio_adv_is_enabled+0xc>)
   187ee:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   187f2:	f000 0001 	and.w	r0, r0, #1
   187f6:	4770      	bx	lr
   187f8:	2000144c 	.word	0x2000144c

000187fc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   187fc:	4b06      	ldr	r3, [pc, #24]	; (18818 <radio_adv_filter_pol_get+0x1c>)
   187fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18802:	f013 0f01 	tst.w	r3, #1
   18806:	d004      	beq.n	18812 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   18808:	4b03      	ldr	r3, [pc, #12]	; (18818 <radio_adv_filter_pol_get+0x1c>)
   1880a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1880e:	0980      	lsrs	r0, r0, #6
   18810:	4770      	bx	lr
	return 0;
   18812:	2000      	movs	r0, #0
}
   18814:	4770      	bx	lr
   18816:	bf00      	nop
   18818:	2000144c 	.word	0x2000144c

0001881c <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   1881c:	4b02      	ldr	r3, [pc, #8]	; (18828 <radio_scan_is_enabled+0xc>)
   1881e:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   18822:	f000 0001 	and.w	r0, r0, #1
   18826:	4770      	bx	lr
   18828:	2000144c 	.word	0x2000144c

0001882c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1882c:	4b06      	ldr	r3, [pc, #24]	; (18848 <radio_scan_filter_pol_get+0x1c>)
   1882e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18832:	f013 0f01 	tst.w	r3, #1
   18836:	d005      	beq.n	18844 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   18838:	4b03      	ldr	r3, [pc, #12]	; (18848 <radio_scan_filter_pol_get+0x1c>)
   1883a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   1883e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   18842:	4770      	bx	lr
	return 0;
   18844:	2000      	movs	r0, #0
}
   18846:	4770      	bx	lr
   18848:	2000144c 	.word	0x2000144c
   1884c:	00000000 	.word	0x00000000

00018850 <radio_connect_enable>:
{
   18850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18854:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   18856:	4c94      	ldr	r4, [pc, #592]	; (18aa8 <radio_connect_enable+0x258>)
   18858:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   1885c:	b11c      	cbz	r4, 18866 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1885e:	200c      	movs	r0, #12
}
   18860:	b003      	add	sp, #12
   18862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18866:	461f      	mov	r7, r3
   18868:	4616      	mov	r6, r2
   1886a:	460d      	mov	r5, r1
   1886c:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   1886e:	488f      	ldr	r0, [pc, #572]	; (18aac <radio_connect_enable+0x25c>)
   18870:	f7f7 f8ff 	bl	fa72 <mem_acquire>
	if (!link) {
   18874:	4681      	mov	r9, r0
   18876:	2800      	cmp	r0, #0
   18878:	f000 810f 	beq.w	18a9a <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   1887c:	488c      	ldr	r0, [pc, #560]	; (18ab0 <radio_connect_enable+0x260>)
   1887e:	f7f7 f8f8 	bl	fa72 <mem_acquire>
   18882:	9001      	str	r0, [sp, #4]
	if (!conn) {
   18884:	2800      	cmp	r0, #0
   18886:	f000 8102 	beq.w	18a8e <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1888a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 18aa8 <radio_connect_enable+0x258>
   1888e:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   18892:	f364 1386 	bfi	r3, r4, #6, #1
   18896:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   1889a:	2206      	movs	r2, #6
   1889c:	4629      	mov	r1, r5
   1889e:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   188a2:	f7e7 fd0d 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   188a6:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   188aa:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   188ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   188b2:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   188b6:	2100      	movs	r1, #0
   188b8:	4608      	mov	r0, r1
   188ba:	f7f7 fad7 	bl	fe6c <radio_tx_ready_delay_get>
   188be:	f200 4052 	addw	r0, r0, #1106	; 0x452
   188c2:	2400      	movs	r4, #0
   188c4:	a376      	add	r3, pc, #472	; (adr r3, 18aa0 <radio_connect_enable+0x250>)
   188c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   188ca:	497a      	ldr	r1, [pc, #488]	; (18ab4 <radio_connect_enable+0x264>)
   188cc:	fba0 0101 	umull	r0, r1, r0, r1
   188d0:	f7e8 fc14 	bl	10fc <__aeabi_uldivmod>
   188d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   188d8:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   188dc:	9b01      	ldr	r3, [sp, #4]
   188de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   188e2:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   188e4:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   188e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   188ec:	f7fe fe84 	bl	175f8 <access_addr_get>
   188f0:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   188f2:	2204      	movs	r2, #4
   188f4:	4669      	mov	r1, sp
   188f6:	9801      	ldr	r0, [sp, #4]
   188f8:	3010      	adds	r0, #16
   188fa:	f7e7 fce1 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   188fe:	a902      	add	r1, sp, #8
   18900:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   18904:	2203      	movs	r2, #3
   18906:	3014      	adds	r0, #20
   18908:	f7e7 fcda 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1890c:	2205      	movs	r2, #5
   1890e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   18912:	9801      	ldr	r0, [sp, #4]
   18914:	3017      	adds	r0, #23
   18916:	f7e7 fcd3 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1891a:	9b01      	ldr	r3, [sp, #4]
   1891c:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   18920:	7f5a      	ldrb	r2, [r3, #29]
   18922:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   18926:	f364 1286 	bfi	r2, r4, #6, #1
   1892a:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   1892c:	2506      	movs	r5, #6
   1892e:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   18930:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   18932:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   18934:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   18938:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   1893a:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   1893c:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   1893e:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   18942:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   18944:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   18948:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1894a:	221b      	movs	r2, #27
   1894c:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1894e:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   18950:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   18954:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   18956:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1895a:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1895c:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1895e:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   18962:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18966:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   1896a:	2101      	movs	r1, #1
   1896c:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   18970:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18974:	f364 12c7 	bfi	r2, r4, #7, #1
   18978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1897c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   18980:	f361 0202 	bfi	r2, r1, #0, #3
   18984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   18988:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   1898c:	b2d2      	uxtb	r2, r2
   1898e:	f366 02c5 	bfi	r2, r6, #3, #3
   18992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   18996:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   1899a:	f361 0202 	bfi	r2, r1, #0, #3
   1899e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   189a2:	7f5a      	ldrb	r2, [r3, #29]
   189a4:	f364 12c7 	bfi	r2, r4, #7, #1
   189a8:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   189aa:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   189ac:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   189b0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   189b4:	f364 0200 	bfi	r2, r4, #0, #1
   189b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   189bc:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   189c0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   189c4:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   189c8:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   189cc:	f242 7510 	movw	r5, #10000	; 0x2710
   189d0:	fb05 1202 	mla	r2, r5, r2, r1
   189d4:	3a01      	subs	r2, #1
   189d6:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   189da:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   189dc:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   189e0:	4a35      	ldr	r2, [pc, #212]	; (18ab8 <radio_connect_enable+0x268>)
   189e2:	440a      	add	r2, r1
   189e4:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   189e8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   189ec:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   189f0:	4a32      	ldr	r2, [pc, #200]	; (18abc <radio_connect_enable+0x26c>)
   189f2:	440a      	add	r2, r1
   189f4:	fbb2 f2f1 	udiv	r2, r2, r1
   189f8:	b292      	uxth	r2, r2
   189fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   189fe:	1d81      	adds	r1, r0, #6
   18a00:	428a      	cmp	r2, r1
   18a02:	dd03      	ble.n	18a0c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   18a04:	1a12      	subs	r2, r2, r0
   18a06:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18a08:	3a06      	subs	r2, #6
   18a0a:	b292      	uxth	r2, r2
   18a0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   18a10:	2000      	movs	r0, #0
   18a12:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   18a16:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   18a1a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   18a1e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   18a22:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   18a26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18a2a:	f360 0241 	bfi	r2, r0, #1, #1
   18a2e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   18a32:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   18a36:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   18a3a:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18a3e:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   18a42:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   18a46:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   18a4a:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   18a4e:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   18a52:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   18a56:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   18a5a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   18a5e:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18a62:	f360 12c7 	bfi	r2, r0, #7, #1
   18a66:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   18a6a:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   18a6e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   18a72:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   18a76:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   18a7a:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   18a7e:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   18a82:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   18a86:	4a08      	ldr	r2, [pc, #32]	; (18aa8 <radio_connect_enable+0x258>)
   18a88:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   18a8c:	e6e8      	b.n	18860 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   18a8e:	4907      	ldr	r1, [pc, #28]	; (18aac <radio_connect_enable+0x25c>)
   18a90:	4648      	mov	r0, r9
   18a92:	f7f7 f80a 	bl	faaa <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18a96:	2007      	movs	r0, #7
   18a98:	e6e2      	b.n	18860 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18a9a:	2007      	movs	r0, #7
   18a9c:	e6e0      	b.n	18860 <radio_connect_enable+0x10>
   18a9e:	bf00      	nop
   18aa0:	1afd498d 	.word	0x1afd498d
   18aa4:	00000007 	.word	0x00000007
   18aa8:	2000144c 	.word	0x2000144c
   18aac:	20001590 	.word	0x20001590
   18ab0:	20001554 	.word	0x20001554
   18ab4:	3b9aca00 	.word	0x3b9aca00
   18ab8:	026259ff 	.word	0x026259ff
   18abc:	01c9c37f 	.word	0x01c9c37f

00018ac0 <ll_conn_update>:
{
   18ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ac4:	460c      	mov	r4, r1
   18ac6:	4690      	mov	r8, r2
   18ac8:	461f      	mov	r7, r3
   18aca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18ace:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   18ad2:	f7f9 fdb3 	bl	1263c <connection_get>
	if (!conn) {
   18ad6:	2800      	cmp	r0, #0
   18ad8:	d078      	beq.n	18bcc <ll_conn_update+0x10c>
   18ada:	4603      	mov	r3, r0
	if (!cmd) {
   18adc:	b984      	cbnz	r4, 18b00 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   18ade:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   18ae2:	f012 0f20 	tst.w	r2, #32
   18ae6:	d007      	beq.n	18af8 <ll_conn_update+0x38>
		    (conn->llcp_features &
   18ae8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   18aec:	f012 0f02 	tst.w	r2, #2
   18af0:	d002      	beq.n	18af8 <ll_conn_update+0x38>
			cmd++;
   18af2:	3401      	adds	r4, #1
   18af4:	b2e4      	uxtb	r4, r4
   18af6:	e003      	b.n	18b00 <ll_conn_update+0x40>
		} else if (conn->role) {
   18af8:	f993 201d 	ldrsb.w	r2, [r3, #29]
   18afc:	2a00      	cmp	r2, #0
   18afe:	db68      	blt.n	18bd2 <ll_conn_update+0x112>
	if (!cmd) {
   18b00:	bb1c      	cbnz	r4, 18b4a <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   18b02:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   18b06:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   18b0a:	428a      	cmp	r2, r1
   18b0c:	d002      	beq.n	18b14 <ll_conn_update+0x54>
			return 1;
   18b0e:	2001      	movs	r0, #1
   18b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   18b14:	2401      	movs	r4, #1
   18b16:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   18b1a:	2000      	movs	r0, #0
   18b1c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   18b20:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   18b24:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   18b28:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   18b2c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   18b30:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   18b34:	f360 0182 	bfi	r1, r0, #2, #1
   18b38:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   18b3c:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   18b40:	4422      	add	r2, r4
   18b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   18b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   18b4a:	3c01      	subs	r4, #1
		if (cmd) {
   18b4c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18b50:	d01c      	beq.n	18b8c <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   18b52:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   18b56:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   18b5a:	4291      	cmp	r1, r2
   18b5c:	d03c      	beq.n	18bd8 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   18b5e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   18b62:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   18b66:	2a03      	cmp	r2, #3
   18b68:	d002      	beq.n	18b70 <ll_conn_update+0xb0>
				return 1;
   18b6a:	2001      	movs	r0, #1
   18b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   18b70:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   18b74:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   18b78:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18b7c:	b2d2      	uxtb	r2, r2
   18b7e:	f042 0208 	orr.w	r2, r2, #8
   18b82:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   18b86:	2000      	movs	r0, #0
   18b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   18b8c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   18b90:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   18b94:	428a      	cmp	r2, r1
   18b96:	d002      	beq.n	18b9e <ll_conn_update+0xde>
				return 1;
   18b98:	2001      	movs	r0, #1
}
   18b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   18b9e:	2000      	movs	r0, #0
   18ba0:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   18ba4:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   18ba8:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   18bac:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   18bb0:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   18bb4:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18bb8:	b2c9      	uxtb	r1, r1
   18bba:	f041 0108 	orr.w	r1, r1, #8
   18bbe:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   18bc2:	3201      	adds	r2, #1
   18bc4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   18bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   18bcc:	2001      	movs	r0, #1
   18bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   18bd2:	2001      	movs	r0, #1
   18bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   18bd8:	2001      	movs	r0, #1
   18bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00018be0 <ll_chm_update>:
{
   18be0:	b570      	push	{r4, r5, r6, lr}
   18be2:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   18be4:	4c1c      	ldr	r4, [pc, #112]	; (18c58 <ll_chm_update+0x78>)
   18be6:	f504 758b 	add.w	r5, r4, #278	; 0x116
   18bea:	2205      	movs	r2, #5
   18bec:	4601      	mov	r1, r0
   18bee:	4628      	mov	r0, r5
   18bf0:	f7e7 fb66 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   18bf4:	2105      	movs	r1, #5
   18bf6:	4628      	mov	r0, r5
   18bf8:	f7f6 ffbf 	bl	fb7a <util_ones_count_get>
	_radio.data_chan_count =
   18bfc:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   18c00:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   18c04:	e000      	b.n	18c08 <ll_chm_update+0x28>
{
   18c06:	462b      	mov	r3, r5
	while (instance--) {
   18c08:	1e5d      	subs	r5, r3, #1
   18c0a:	b2ed      	uxtb	r5, r5
   18c0c:	b303      	cbz	r3, 18c50 <ll_chm_update+0x70>
		conn = connection_get(instance);
   18c0e:	4628      	mov	r0, r5
   18c10:	f7f9 fd14 	bl	1263c <connection_get>
		if (!conn || conn->role) {
   18c14:	4604      	mov	r4, r0
   18c16:	2800      	cmp	r0, #0
   18c18:	d0f5      	beq.n	18c06 <ll_chm_update+0x26>
   18c1a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   18c1e:	2b00      	cmp	r3, #0
   18c20:	dbf1      	blt.n	18c06 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   18c22:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18c26:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   18c2a:	429a      	cmp	r2, r3
   18c2c:	d112      	bne.n	18c54 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   18c2e:	2205      	movs	r2, #5
   18c30:	4631      	mov	r1, r6
   18c32:	3079      	adds	r0, #121	; 0x79
   18c34:	f7e7 fb44 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   18c38:	2301      	movs	r3, #1
   18c3a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   18c3e:	2302      	movs	r3, #2
   18c40:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   18c44:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18c48:	3301      	adds	r3, #1
   18c4a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18c4e:	e7da      	b.n	18c06 <ll_chm_update+0x26>
	return 0;
   18c50:	2000      	movs	r0, #0
   18c52:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   18c54:	2001      	movs	r0, #1
}
   18c56:	bd70      	pop	{r4, r5, r6, pc}
   18c58:	2000144c 	.word	0x2000144c

00018c5c <ll_chm_get>:
{
   18c5c:	b538      	push	{r3, r4, r5, lr}
   18c5e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   18c60:	f7f9 fcec 	bl	1263c <connection_get>
	if (!conn) {
   18c64:	4604      	mov	r4, r0
   18c66:	b160      	cbz	r0, 18c82 <ll_chm_get+0x26>
		conn->chm_update = 0;
   18c68:	2300      	movs	r3, #0
   18c6a:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   18c6c:	2205      	movs	r2, #5
   18c6e:	f104 0117 	add.w	r1, r4, #23
   18c72:	4628      	mov	r0, r5
   18c74:	f7e7 fb24 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   18c78:	7f23      	ldrb	r3, [r4, #28]
   18c7a:	2b00      	cmp	r3, #0
   18c7c:	d1f4      	bne.n	18c68 <ll_chm_get+0xc>
	return 0;
   18c7e:	2000      	movs	r0, #0
   18c80:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18c82:	2001      	movs	r0, #1
}
   18c84:	bd38      	pop	{r3, r4, r5, pc}

00018c86 <ll_start_enc_req_send>:
{
   18c86:	b570      	push	{r4, r5, r6, lr}
   18c88:	460d      	mov	r5, r1
   18c8a:	4616      	mov	r6, r2
	conn = connection_get(handle);
   18c8c:	f7f9 fcd6 	bl	1263c <connection_get>
	if (!conn) {
   18c90:	2800      	cmp	r0, #0
   18c92:	d03e      	beq.n	18d12 <ll_start_enc_req_send+0x8c>
   18c94:	4604      	mov	r4, r0
	if (error_code) {
   18c96:	b32d      	cbz	r5, 18ce4 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   18c98:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   18c9c:	f013 0f40 	tst.w	r3, #64	; 0x40
   18ca0:	d111      	bne.n	18cc6 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   18ca2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   18ca6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18caa:	4293      	cmp	r3, r2
   18cac:	d001      	beq.n	18cb2 <ll_start_enc_req_send+0x2c>
				return 1;
   18cae:	2001      	movs	r0, #1
   18cb0:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   18cb2:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   18cb6:	2203      	movs	r2, #3
   18cb8:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   18cbc:	3301      	adds	r3, #1
   18cbe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   18cc2:	2000      	movs	r0, #0
   18cc4:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   18cc6:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   18cca:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   18cce:	429a      	cmp	r2, r3
   18cd0:	d001      	beq.n	18cd6 <ll_start_enc_req_send+0x50>
				return 1;
   18cd2:	2001      	movs	r0, #1
   18cd4:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   18cd6:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   18cda:	3301      	adds	r3, #1
   18cdc:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   18ce0:	2000      	movs	r0, #0
   18ce2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18ce4:	2210      	movs	r2, #16
   18ce6:	4631      	mov	r1, r6
   18ce8:	3083      	adds	r0, #131	; 0x83
   18cea:	f7e7 fae9 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   18cee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18cf2:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   18cf6:	4293      	cmp	r3, r2
   18cf8:	d001      	beq.n	18cfe <ll_start_enc_req_send+0x78>
			return 1;
   18cfa:	2001      	movs	r0, #1
}
   18cfc:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   18cfe:	2000      	movs	r0, #0
   18d00:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   18d04:	2203      	movs	r2, #3
   18d06:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   18d0a:	3301      	adds	r3, #1
   18d0c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18d10:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   18d12:	2001      	movs	r0, #1
   18d14:	bd70      	pop	{r4, r5, r6, pc}

00018d16 <ll_feature_req_send>:
{
   18d16:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18d18:	f7f9 fc90 	bl	1263c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18d1c:	b178      	cbz	r0, 18d3e <ll_feature_req_send+0x28>
   18d1e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18d22:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   18d26:	428a      	cmp	r2, r1
   18d28:	d001      	beq.n	18d2e <ll_feature_req_send+0x18>
		return 1;
   18d2a:	2001      	movs	r0, #1
}
   18d2c:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   18d2e:	2104      	movs	r1, #4
   18d30:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   18d34:	3201      	adds	r2, #1
   18d36:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   18d3a:	2000      	movs	r0, #0
   18d3c:	bd08      	pop	{r3, pc}
		return 1;
   18d3e:	2001      	movs	r0, #1
   18d40:	bd08      	pop	{r3, pc}

00018d42 <ll_version_ind_send>:
{
   18d42:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18d44:	f7f9 fc7a 	bl	1263c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18d48:	b178      	cbz	r0, 18d6a <ll_version_ind_send+0x28>
   18d4a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18d4e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   18d52:	428a      	cmp	r2, r1
   18d54:	d001      	beq.n	18d5a <ll_version_ind_send+0x18>
		return 1;
   18d56:	2001      	movs	r0, #1
}
   18d58:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   18d5a:	2105      	movs	r1, #5
   18d5c:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   18d60:	3201      	adds	r2, #1
   18d62:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   18d66:	2000      	movs	r0, #0
   18d68:	bd08      	pop	{r3, pc}
		return 1;
   18d6a:	2001      	movs	r0, #1
   18d6c:	bd08      	pop	{r3, pc}

00018d6e <ll_terminate_ind_send>:
{
   18d6e:	b510      	push	{r4, lr}
   18d70:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18d72:	f7f9 fc63 	bl	1263c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   18d76:	b170      	cbz	r0, 18d96 <ll_terminate_ind_send+0x28>
   18d78:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   18d7c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   18d80:	4291      	cmp	r1, r2
   18d82:	d001      	beq.n	18d88 <ll_terminate_ind_send+0x1a>
		return 1;
   18d84:	2001      	movs	r0, #1
}
   18d86:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   18d88:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   18d8c:	3201      	adds	r2, #1
   18d8e:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   18d92:	2000      	movs	r0, #0
   18d94:	bd10      	pop	{r4, pc}
		return 1;
   18d96:	2001      	movs	r0, #1
   18d98:	bd10      	pop	{r4, pc}

00018d9a <ll_tx_power_level_get>:
{
   18d9a:	b510      	push	{r4, lr}
   18d9c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18d9e:	f7f9 fc4d 	bl	1263c <connection_get>
	if (!conn) {
   18da2:	b110      	cbz	r0, 18daa <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   18da4:	2000      	movs	r0, #0
   18da6:	7020      	strb	r0, [r4, #0]
	return 0;
   18da8:	bd10      	pop	{r4, pc}
		return 1;
   18daa:	2001      	movs	r0, #1
}
   18dac:	bd10      	pop	{r4, pc}

00018dae <ll_tx_power_get>:
	*min = 0;
   18dae:	2300      	movs	r3, #0
   18db0:	7003      	strb	r3, [r0, #0]
	*max = 0;
   18db2:	700b      	strb	r3, [r1, #0]
   18db4:	4770      	bx	lr
	...

00018db8 <ll_apto_get>:
{
   18db8:	b510      	push	{r4, lr}
   18dba:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18dbc:	f7f9 fc3e 	bl	1263c <connection_get>
	if (!conn) {
   18dc0:	b188      	cbz	r0, 18de6 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   18dc2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   18dc6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   18dc8:	fb03 f301 	mul.w	r3, r3, r1
   18dcc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   18dd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18dd4:	4a05      	ldr	r2, [pc, #20]	; (18dec <ll_apto_get+0x34>)
   18dd6:	fb82 1203 	smull	r1, r2, r2, r3
   18dda:	17db      	asrs	r3, r3, #31
   18ddc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   18de0:	8023      	strh	r3, [r4, #0]
	return 0;
   18de2:	2000      	movs	r0, #0
   18de4:	bd10      	pop	{r4, pc}
		return 1;
   18de6:	2001      	movs	r0, #1
}
   18de8:	bd10      	pop	{r4, pc}
   18dea:	bf00      	nop
   18dec:	10624dd3 	.word	0x10624dd3

00018df0 <ll_apto_set>:
{
   18df0:	b510      	push	{r4, lr}
   18df2:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18df4:	f7f9 fc22 	bl	1263c <connection_get>
	if (!conn) {
   18df8:	b178      	cbz	r0, 18e1a <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   18dfa:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   18dfc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18e00:	fb03 f301 	mul.w	r3, r3, r1
   18e04:	f242 7110 	movw	r1, #10000	; 0x2710
   18e08:	fb01 3404 	mla	r4, r1, r4, r3
   18e0c:	3c01      	subs	r4, #1
   18e0e:	fb94 f4f3 	sdiv	r4, r4, r3
   18e12:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   18e16:	2000      	movs	r0, #0
   18e18:	bd10      	pop	{r4, pc}
		return 1;
   18e1a:	2001      	movs	r0, #1
}
   18e1c:	bd10      	pop	{r4, pc}

00018e1e <ll_length_req_send>:
{
   18e1e:	b538      	push	{r3, r4, r5, lr}
   18e20:	460d      	mov	r5, r1
   18e22:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18e24:	f7f9 fc0a 	bl	1263c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18e28:	b1f0      	cbz	r0, 18e68 <ll_length_req_send+0x4a>
   18e2a:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18e2e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18e32:	4291      	cmp	r1, r2
   18e34:	d001      	beq.n	18e3a <ll_length_req_send+0x1c>
		return 1;
   18e36:	2001      	movs	r0, #1
   18e38:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   18e3a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18e3e:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18e42:	428a      	cmp	r2, r1
   18e44:	d001      	beq.n	18e4a <ll_length_req_send+0x2c>
		return 1;
   18e46:	2001      	movs	r0, #1
}
   18e48:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18e4a:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   18e4e:	f36f 0101 	bfc	r1, #0, #2
   18e52:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   18e56:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   18e5a:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   18e5e:	3201      	adds	r2, #1
   18e60:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   18e64:	2000      	movs	r0, #0
   18e66:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18e68:	2001      	movs	r0, #1
   18e6a:	bd38      	pop	{r3, r4, r5, pc}

00018e6c <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   18e6c:	4b03      	ldr	r3, [pc, #12]	; (18e7c <ll_length_default_get+0x10>)
   18e6e:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   18e72:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   18e74:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   18e78:	800b      	strh	r3, [r1, #0]
   18e7a:	4770      	bx	lr
   18e7c:	2000144c 	.word	0x2000144c

00018e80 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   18e80:	4b03      	ldr	r3, [pc, #12]	; (18e90 <ll_length_default_set+0x10>)
   18e82:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   18e86:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   18e8a:	2000      	movs	r0, #0
   18e8c:	4770      	bx	lr
   18e8e:	bf00      	nop
   18e90:	2000144c 	.word	0x2000144c

00018e94 <ll_length_max_get>:
{
   18e94:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18e96:	241b      	movs	r4, #27
   18e98:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   18e9a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18e9e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18ea0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   18ea2:	8018      	strh	r0, [r3, #0]
}
   18ea4:	bc10      	pop	{r4}
   18ea6:	4770      	bx	lr

00018ea8 <ll_phy_get>:
{
   18ea8:	b538      	push	{r3, r4, r5, lr}
   18eaa:	460d      	mov	r5, r1
   18eac:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18eae:	f7f9 fbc5 	bl	1263c <connection_get>
	if (!conn) {
   18eb2:	b158      	cbz	r0, 18ecc <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   18eb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   18eb8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   18ebc:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   18ebe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18ec2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18ec6:	7023      	strb	r3, [r4, #0]
	return 0;
   18ec8:	2000      	movs	r0, #0
   18eca:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18ecc:	2001      	movs	r0, #1
}
   18ece:	bd38      	pop	{r3, r4, r5, pc}

00018ed0 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   18ed0:	4b03      	ldr	r3, [pc, #12]	; (18ee0 <ll_phy_default_set+0x10>)
   18ed2:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   18ed6:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   18eda:	2000      	movs	r0, #0
   18edc:	4770      	bx	lr
   18ede:	bf00      	nop
   18ee0:	2000144c 	.word	0x2000144c

00018ee4 <ll_phy_req_send>:
{
   18ee4:	b570      	push	{r4, r5, r6, lr}
   18ee6:	460e      	mov	r6, r1
   18ee8:	4615      	mov	r5, r2
   18eea:	461c      	mov	r4, r3
	conn = connection_get(handle);
   18eec:	f7f9 fba6 	bl	1263c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18ef0:	b338      	cbz	r0, 18f42 <ll_phy_req_send+0x5e>
   18ef2:	4603      	mov	r3, r0
   18ef4:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18ef8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18efc:	4291      	cmp	r1, r2
   18efe:	d001      	beq.n	18f04 <ll_phy_req_send+0x20>
		return 1;
   18f00:	2001      	movs	r0, #1
   18f02:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   18f04:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   18f08:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18f0c:	428a      	cmp	r2, r1
   18f0e:	d001      	beq.n	18f14 <ll_phy_req_send+0x30>
		return 1;
   18f10:	2001      	movs	r0, #1
}
   18f12:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18f14:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   18f18:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   18f1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   18f20:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   18f24:	f040 0002 	orr.w	r0, r0, #2
   18f28:	f365 0000 	bfi	r0, r5, #0, #1
   18f2c:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   18f30:	f364 1147 	bfi	r1, r4, #5, #3
   18f34:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   18f38:	3201      	adds	r2, #1
   18f3a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   18f3e:	2000      	movs	r0, #0
   18f40:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   18f42:	2001      	movs	r0, #1
   18f44:	bd70      	pop	{r4, r5, r6, pc}
	...

00018f48 <radio_rx_get>:
{
   18f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f4a:	b083      	sub	sp, #12
   18f4c:	4606      	mov	r6, r0
   18f4e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   18f50:	4b1b      	ldr	r3, [pc, #108]	; (18fc0 <radio_rx_get+0x78>)
   18f52:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   18f56:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18f5a:	429a      	cmp	r2, r3
   18f5c:	d024      	beq.n	18fa8 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   18f5e:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   18f60:	783a      	ldrb	r2, [r7, #0]
   18f62:	4918      	ldr	r1, [pc, #96]	; (18fc4 <radio_rx_get+0x7c>)
   18f64:	f7f9 fb0c 	bl	12580 <tx_cmplt_get>
		if (!cmplt) {
   18f68:	4605      	mov	r5, r0
   18f6a:	b9d0      	cbnz	r0, 18fa2 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   18f6c:	4b14      	ldr	r3, [pc, #80]	; (18fc0 <radio_rx_get+0x78>)
   18f6e:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   18f72:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   18f76:	4604      	mov	r4, r0
   18f78:	e000      	b.n	18f7c <radio_rx_get+0x34>
   18f7a:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   18f7c:	4b10      	ldr	r3, [pc, #64]	; (18fc0 <radio_rx_get+0x78>)
   18f7e:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   18f82:	f10d 0105 	add.w	r1, sp, #5
   18f86:	f10d 0006 	add.w	r0, sp, #6
   18f8a:	f7f9 faf9 	bl	12580 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   18f8e:	2c00      	cmp	r4, #0
   18f90:	d1f3      	bne.n	18f7a <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   18f92:	4284      	cmp	r4, r0
   18f94:	d001      	beq.n	18f9a <radio_rx_get+0x52>
   18f96:	4604      	mov	r4, r0
   18f98:	e7f0      	b.n	18f7c <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   18f9a:	6037      	str	r7, [r6, #0]
}
   18f9c:	4628      	mov	r0, r5
   18f9e:	b003      	add	sp, #12
   18fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   18fa2:	2300      	movs	r3, #0
   18fa4:	6033      	str	r3, [r6, #0]
   18fa6:	e7f9      	b.n	18f9c <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   18fa8:	4905      	ldr	r1, [pc, #20]	; (18fc0 <radio_rx_get+0x78>)
   18faa:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   18fae:	f201 1173 	addw	r1, r1, #371	; 0x173
   18fb2:	f7f9 fae5 	bl	12580 <tx_cmplt_get>
   18fb6:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   18fb8:	2300      	movs	r3, #0
   18fba:	6033      	str	r3, [r6, #0]
   18fbc:	e7ee      	b.n	18f9c <radio_rx_get+0x54>
   18fbe:	bf00      	nop
   18fc0:	2000144c 	.word	0x2000144c
   18fc4:	200015bf 	.word	0x200015bf

00018fc8 <radio_rx_mem_release>:
{
   18fc8:	b570      	push	{r4, r5, r6, lr}
   18fca:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   18fcc:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   18fce:	e003      	b.n	18fd8 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   18fd0:	491e      	ldr	r1, [pc, #120]	; (1904c <radio_rx_mem_release+0x84>)
   18fd2:	f7f6 fd6a 	bl	faaa <mem_release>
{
   18fd6:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   18fd8:	b398      	cbz	r0, 19042 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   18fda:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   18fdc:	7903      	ldrb	r3, [r0, #4]
   18fde:	3b01      	subs	r3, #1
   18fe0:	2b0b      	cmp	r3, #11
   18fe2:	d828      	bhi.n	19036 <radio_rx_mem_release+0x6e>
   18fe4:	a201      	add	r2, pc, #4	; (adr r2, 18fec <radio_rx_mem_release+0x24>)
   18fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18fea:	bf00      	nop
   18fec:	00018fd1 	.word	0x00018fd1
   18ff0:	00018fd1 	.word	0x00018fd1
   18ff4:	00018fd1 	.word	0x00018fd1
   18ff8:	00018fd1 	.word	0x00018fd1
   18ffc:	00018fd1 	.word	0x00018fd1
   19000:	00018fd1 	.word	0x00018fd1
   19004:	0001901d 	.word	0x0001901d
   19008:	00018fd1 	.word	0x00018fd1
   1900c:	00018fd1 	.word	0x00018fd1
   19010:	00018fd1 	.word	0x00018fd1
   19014:	00018fd1 	.word	0x00018fd1
   19018:	00018fd1 	.word	0x00018fd1
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1901c:	4d0c      	ldr	r5, [pc, #48]	; (19050 <radio_rx_mem_release+0x88>)
   1901e:	88c2      	ldrh	r2, [r0, #6]
   19020:	f44f 71aa 	mov.w	r1, #340	; 0x154
   19024:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   19028:	f7f6 fd60 	bl	faec <mem_get>
			mem_release(conn, &_radio.conn_free);
   1902c:	f505 7184 	add.w	r1, r5, #264	; 0x108
   19030:	f7f6 fd3b 	bl	faaa <mem_release>
			break;
   19034:	e7cf      	b.n	18fd6 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   19036:	4040      	eors	r0, r0
   19038:	f380 8811 	msr	BASEPRI, r0
   1903c:	f04f 0004 	mov.w	r0, #4
   19040:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   19042:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   19044:	20ff      	movs	r0, #255	; 0xff
   19046:	f7f9 fa4f 	bl	124e8 <packet_rx_allocate>
   1904a:	bd70      	pop	{r4, r5, r6, pc}
   1904c:	20001578 	.word	0x20001578
   19050:	2000144c 	.word	0x2000144c

00019054 <do_radio_rx_fc_set>:
	if (req == ack) {
   19054:	4291      	cmp	r1, r2
   19056:	d007      	beq.n	19068 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   19058:	bb41      	cbnz	r1, 190ac <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   1905a:	4b1c      	ldr	r3, [pc, #112]	; (190cc <do_radio_rx_fc_set+0x78>)
   1905c:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   19060:	4298      	cmp	r0, r3
   19062:	d023      	beq.n	190ac <do_radio_rx_fc_set+0x58>
		return 1;
   19064:	2001      	movs	r0, #1
   19066:	4770      	bx	lr
{
   19068:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   1906a:	4b18      	ldr	r3, [pc, #96]	; (190cc <do_radio_rx_fc_set+0x78>)
   1906c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   19070:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19074:	429c      	cmp	r4, r3
   19076:	d002      	beq.n	1907e <do_radio_rx_fc_set+0x2a>
			return 1;
   19078:	2001      	movs	r0, #1
}
   1907a:	bc30      	pop	{r4, r5}
   1907c:	4770      	bx	lr
			if (ack1 == 0) {
   1907e:	b19a      	cbz	r2, 190a8 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   19080:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   19082:	3b01      	subs	r3, #1
   19084:	b2db      	uxtb	r3, r3
   19086:	4c11      	ldr	r4, [pc, #68]	; (190cc <do_radio_rx_fc_set+0x78>)
   19088:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   1908c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   19090:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   19092:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   19096:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   1909a:	b2db      	uxtb	r3, r3
   1909c:	4299      	cmp	r1, r3
   1909e:	d00f      	beq.n	190c0 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   190a0:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   190a4:	2001      	movs	r0, #1
   190a6:	e7e8      	b.n	1907a <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   190a8:	2303      	movs	r3, #3
   190aa:	e7ea      	b.n	19082 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   190ac:	b151      	cbz	r1, 190c4 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   190ae:	31b7      	adds	r1, #183	; 0xb7
   190b0:	4b06      	ldr	r3, [pc, #24]	; (190cc <do_radio_rx_fc_set+0x78>)
   190b2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   190b6:	88cb      	ldrh	r3, [r1, #6]
   190b8:	4298      	cmp	r0, r3
   190ba:	d005      	beq.n	190c8 <do_radio_rx_fc_set+0x74>
		return 1;
   190bc:	2001      	movs	r0, #1
   190be:	4770      	bx	lr
	return 0;
   190c0:	2000      	movs	r0, #0
   190c2:	e7da      	b.n	1907a <do_radio_rx_fc_set+0x26>
   190c4:	4608      	mov	r0, r1
   190c6:	4770      	bx	lr
   190c8:	2000      	movs	r0, #0
   190ca:	4770      	bx	lr
   190cc:	2000144c 	.word	0x2000144c

000190d0 <radio_rx_fc_set>:
{
   190d0:	b538      	push	{r3, r4, r5, lr}
   190d2:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   190d4:	4b1b      	ldr	r3, [pc, #108]	; (19144 <radio_rx_fc_set+0x74>)
   190d6:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   190da:	b338      	cbz	r0, 1912c <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   190dc:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   190e0:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   190e2:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   190e6:	b141      	cbz	r1, 190fa <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   190e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   190ec:	429c      	cmp	r4, r3
   190ee:	d023      	beq.n	19138 <radio_rx_fc_set+0x68>
   190f0:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   190f2:	4629      	mov	r1, r5
   190f4:	f7ff ffae 	bl	19054 <do_radio_rx_fc_set>
   190f8:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   190fa:	4b12      	ldr	r3, [pc, #72]	; (19144 <radio_rx_fc_set+0x74>)
   190fc:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   19100:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19104:	4298      	cmp	r0, r3
   19106:	d001      	beq.n	1910c <radio_rx_fc_set+0x3c>
	return 0;
   19108:	4608      	mov	r0, r1
   1910a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1910c:	4295      	cmp	r5, r2
   1910e:	d015      	beq.n	1913c <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   19110:	4b0c      	ldr	r3, [pc, #48]	; (19144 <radio_rx_fc_set+0x74>)
   19112:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19116:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1911a:	4298      	cmp	r0, r3
   1911c:	d010      	beq.n	19140 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   1911e:	4b09      	ldr	r3, [pc, #36]	; (19144 <radio_rx_fc_set+0x74>)
   19120:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   19124:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19126:	429d      	cmp	r5, r3
   19128:	d001      	beq.n	1912e <radio_rx_fc_set+0x5e>
	return 0;
   1912a:	4608      	mov	r0, r1
}
   1912c:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   1912e:	4b05      	ldr	r3, [pc, #20]	; (19144 <radio_rx_fc_set+0x74>)
   19130:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   19134:	4608      	mov	r0, r1
   19136:	bd38      	pop	{r3, r4, r5, pc}
   19138:	2000      	movs	r0, #0
   1913a:	bd38      	pop	{r3, r4, r5, pc}
   1913c:	4608      	mov	r0, r1
   1913e:	bd38      	pop	{r3, r4, r5, pc}
   19140:	4608      	mov	r0, r1
   19142:	bd38      	pop	{r3, r4, r5, pc}
   19144:	2000144c 	.word	0x2000144c

00019148 <radio_tx_mem_acquire>:
{
   19148:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   1914a:	4802      	ldr	r0, [pc, #8]	; (19154 <radio_tx_mem_acquire+0xc>)
   1914c:	f7f6 fc91 	bl	fa72 <mem_acquire>
}
   19150:	bd08      	pop	{r3, pc}
   19152:	bf00      	nop
   19154:	200015ac 	.word	0x200015ac

00019158 <radio_tx_mem_release>:
{
   19158:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   1915a:	4902      	ldr	r1, [pc, #8]	; (19164 <radio_tx_mem_release+0xc>)
   1915c:	f7f6 fca5 	bl	faaa <mem_release>
   19160:	bd08      	pop	{r3, pc}
   19162:	bf00      	nop
   19164:	200015ac 	.word	0x200015ac

00019168 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   19168:	b570      	push	{r4, r5, r6, lr}
   1916a:	b088      	sub	sp, #32
   1916c:	4605      	mov	r5, r0
   1916e:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   19170:	4b36      	ldr	r3, [pc, #216]	; (1924c <radio_tx_mem_enqueue+0xe4>)
   19172:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   19176:	3401      	adds	r4, #1
   19178:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   1917a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1917e:	429c      	cmp	r4, r3
   19180:	d02a      	beq.n	191d8 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   19182:	4628      	mov	r0, r5
   19184:	f7f9 fa5a 	bl	1263c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   19188:	4601      	mov	r1, r0
   1918a:	2800      	cmp	r0, #0
   1918c:	d057      	beq.n	1923e <radio_tx_mem_enqueue+0xd6>
   1918e:	4b2f      	ldr	r3, [pc, #188]	; (1924c <radio_tx_mem_enqueue+0xe4>)
   19190:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   19194:	b2db      	uxtb	r3, r3
   19196:	429c      	cmp	r4, r3
   19198:	d053      	beq.n	19242 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1919a:	7972      	ldrb	r2, [r6, #5]
   1919c:	4b2b      	ldr	r3, [pc, #172]	; (1924c <radio_tx_mem_enqueue+0xe4>)
   1919e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   191a2:	3b07      	subs	r3, #7
   191a4:	429a      	cmp	r2, r3
   191a6:	d819      	bhi.n	191dc <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   191a8:	4b28      	ldr	r3, [pc, #160]	; (1924c <radio_tx_mem_enqueue+0xe4>)
   191aa:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   191ae:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   191b2:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   191b6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   191ba:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   191be:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   191c2:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   191c4:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   191c8:	f991 301d 	ldrsb.w	r3, [r1, #29]
   191cc:	2b00      	cmp	r3, #0
   191ce:	db0b      	blt.n	191e8 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   191d0:	2300      	movs	r3, #0
}
   191d2:	4618      	mov	r0, r3
   191d4:	b008      	add	sp, #32
   191d6:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   191d8:	2400      	movs	r4, #0
   191da:	e7d2      	b.n	19182 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   191dc:	4040      	eors	r0, r0
   191de:	f380 8811 	msr	BASEPRI, r0
   191e2:	f04f 0004 	mov.w	r0, #4
   191e6:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   191e8:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   191ea:	b363      	cbz	r3, 19246 <radio_tx_mem_enqueue+0xde>
   191ec:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   191f0:	f013 0f02 	tst.w	r3, #2
   191f4:	d001      	beq.n	191fa <radio_tx_mem_enqueue+0x92>
	return 0;
   191f6:	2300      	movs	r3, #0
   191f8:	e7eb      	b.n	191d2 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   191fa:	f043 0302 	orr.w	r3, r3, #2
   191fe:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   19202:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   19204:	3207      	adds	r2, #7
   19206:	9106      	str	r1, [sp, #24]
   19208:	4b11      	ldr	r3, [pc, #68]	; (19250 <radio_tx_mem_enqueue+0xe8>)
   1920a:	9305      	str	r3, [sp, #20]
   1920c:	2000      	movs	r0, #0
   1920e:	9004      	str	r0, [sp, #16]
   19210:	2301      	movs	r3, #1
   19212:	9303      	str	r3, [sp, #12]
   19214:	9002      	str	r0, [sp, #8]
   19216:	9001      	str	r0, [sp, #4]
   19218:	9000      	str	r0, [sp, #0]
   1921a:	4603      	mov	r3, r0
   1921c:	b2d2      	uxtb	r2, r2
   1921e:	2103      	movs	r1, #3
   19220:	f7f8 f944 	bl	114ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19224:	4603      	mov	r3, r0
   19226:	2800      	cmp	r0, #0
   19228:	d0d3      	beq.n	191d2 <radio_tx_mem_enqueue+0x6a>
   1922a:	2802      	cmp	r0, #2
   1922c:	d101      	bne.n	19232 <radio_tx_mem_enqueue+0xca>
	return 0;
   1922e:	2300      	movs	r3, #0
   19230:	e7cf      	b.n	191d2 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19232:	4040      	eors	r0, r0
   19234:	f380 8811 	msr	BASEPRI, r0
   19238:	f04f 0004 	mov.w	r0, #4
   1923c:	df02      	svc	2
		return 1;
   1923e:	2301      	movs	r3, #1
   19240:	e7c7      	b.n	191d2 <radio_tx_mem_enqueue+0x6a>
   19242:	2301      	movs	r3, #1
   19244:	e7c5      	b.n	191d2 <radio_tx_mem_enqueue+0x6a>
	return 0;
   19246:	2300      	movs	r3, #0
   19248:	e7c3      	b.n	191d2 <radio_tx_mem_enqueue+0x6a>
   1924a:	bf00      	nop
   1924c:	2000144c 	.word	0x2000144c
   19250:	000124cd 	.word	0x000124cd

00019254 <ll_enc_req_send>:
{
   19254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19258:	4680      	mov	r8, r0
   1925a:	4689      	mov	r9, r1
   1925c:	4616      	mov	r6, r2
   1925e:	461f      	mov	r7, r3
	conn = connection_get(handle);
   19260:	f7f9 f9ec 	bl	1263c <connection_get>
	if (!conn) {
   19264:	2800      	cmp	r0, #0
   19266:	d055      	beq.n	19314 <ll_enc_req_send+0xc0>
   19268:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   1926a:	f7ff ff6d 	bl	19148 <radio_tx_mem_acquire>
	if (node_tx) {
   1926e:	4604      	mov	r4, r0
   19270:	2800      	cmp	r0, #0
   19272:	d051      	beq.n	19318 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   19274:	2210      	movs	r2, #16
   19276:	4639      	mov	r1, r7
   19278:	f105 0083 	add.w	r0, r5, #131	; 0x83
   1927c:	f7e7 f820 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   19280:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   19284:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   19288:	d008      	beq.n	1929c <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   1928a:	2b30      	cmp	r3, #48	; 0x30
   1928c:	d02d      	beq.n	192ea <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   1928e:	4620      	mov	r0, r4
   19290:	f7ff ff62 	bl	19158 <radio_tx_mem_release>
			return 1;
   19294:	2301      	movs	r3, #1
}
   19296:	4618      	mov	r0, r3
   19298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1929c:	7923      	ldrb	r3, [r4, #4]
   1929e:	f043 0303 	orr.w	r3, r3, #3
   192a2:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   192a4:	2317      	movs	r3, #23
   192a6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   192a8:	2303      	movs	r3, #3
   192aa:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   192ac:	2208      	movs	r2, #8
   192ae:	4649      	mov	r1, r9
   192b0:	18a0      	adds	r0, r4, r2
   192b2:	f7e7 f805 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   192b6:	7833      	ldrb	r3, [r6, #0]
   192b8:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   192ba:	7873      	ldrb	r3, [r6, #1]
   192bc:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   192be:	2108      	movs	r1, #8
   192c0:	f104 0012 	add.w	r0, r4, #18
   192c4:	f7f8 fd74 	bl	11db0 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   192c8:	2104      	movs	r1, #4
   192ca:	f104 001a 	add.w	r0, r4, #26
   192ce:	f7f8 fd6f 	bl	11db0 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   192d2:	4621      	mov	r1, r4
   192d4:	4640      	mov	r0, r8
   192d6:	f7ff ff47 	bl	19168 <radio_tx_mem_enqueue>
   192da:	4603      	mov	r3, r0
   192dc:	2800      	cmp	r0, #0
   192de:	d0da      	beq.n	19296 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   192e0:	4620      	mov	r0, r4
   192e2:	f7ff ff39 	bl	19158 <radio_tx_mem_release>
			return 1;
   192e6:	2301      	movs	r3, #1
   192e8:	e7d5      	b.n	19296 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   192ea:	2208      	movs	r2, #8
   192ec:	4649      	mov	r1, r9
   192ee:	f105 0079 	add.w	r0, r5, #121	; 0x79
   192f2:	f7e6 ffe5 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   192f6:	7833      	ldrb	r3, [r6, #0]
   192f8:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   192fc:	7873      	ldrb	r3, [r6, #1]
   192fe:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19302:	7923      	ldrb	r3, [r4, #4]
   19304:	f043 0303 	orr.w	r3, r3, #3
   19308:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1930a:	2301      	movs	r3, #1
   1930c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   1930e:	230a      	movs	r3, #10
   19310:	71e3      	strb	r3, [r4, #7]
   19312:	e7de      	b.n	192d2 <ll_enc_req_send+0x7e>
		return 1;
   19314:	2301      	movs	r3, #1
   19316:	e7be      	b.n	19296 <ll_enc_req_send+0x42>
	return 1;
   19318:	2301      	movs	r3, #1
   1931a:	e7bc      	b.n	19296 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   1931c:	4770      	bx	lr

0001931e <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1931e:	b508      	push	{r3, lr}
	if (bm) {
   19320:	b910      	cbnz	r0, 19328 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   19322:	f000 fe5f 	bl	19fe4 <rpa_refresh_stop>
   19326:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   19328:	f000 fe48 	bl	19fbc <rpa_refresh_start>
   1932c:	bd08      	pop	{r3, pc}
	...

00019330 <radio_adv_enable>:
{
   19330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19334:	b08f      	sub	sp, #60	; 0x3c
   19336:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1933a:	2202      	movs	r2, #2
   1933c:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   1933e:	4aca      	ldr	r2, [pc, #808]	; (19668 <radio_adv_enable+0x338>)
   19340:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   19344:	f012 0f01 	tst.w	r2, #1
   19348:	d003      	beq.n	19352 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1934a:	200c      	movs	r0, #12
}
   1934c:	b00f      	add	sp, #60	; 0x3c
   1934e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19352:	461d      	mov	r5, r3
   19354:	460c      	mov	r4, r1
   19356:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   19358:	4bc3      	ldr	r3, [pc, #780]	; (19668 <radio_adv_enable+0x338>)
   1935a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   1935e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19362:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   19366:	3220      	adds	r2, #32
   19368:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1936c:	f898 3007 	ldrb.w	r3, [r8, #7]
   19370:	f003 030f 	and.w	r3, r3, #15
   19374:	2b01      	cmp	r3, #1
   19376:	d97f      	bls.n	19478 <radio_adv_enable+0x148>
		conn = NULL;
   19378:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   1937a:	4abb      	ldr	r2, [pc, #748]	; (19668 <radio_adv_enable+0x338>)
   1937c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   19380:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   19384:	a80e      	add	r0, sp, #56	; 0x38
   19386:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   1938a:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   1938e:	f365 1387 	bfi	r3, r5, #6, #2
   19392:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   19396:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1939a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   1939e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   193a2:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   193a4:	2327      	movs	r3, #39	; 0x27
   193a6:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   193a8:	2300      	movs	r3, #0
   193aa:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   193ac:	2101      	movs	r1, #1
   193ae:	f7f6 fbe4 	bl	fb7a <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   193b2:	f898 5007 	ldrb.w	r5, [r8, #7]
   193b6:	f005 050f 	and.w	r5, r5, #15
   193ba:	2d01      	cmp	r5, #1
   193bc:	f000 8108 	beq.w	195d0 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   193c0:	2d02      	cmp	r5, #2
   193c2:	f000 8111 	beq.w	195e8 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   193c6:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   193c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   193cc:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   193d0:	0080      	lsls	r0, r0, #2
   193d2:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   193d4:	a3a2      	add	r3, pc, #648	; (adr r3, 19660 <radio_adv_enable+0x330>)
   193d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   193da:	49a4      	ldr	r1, [pc, #656]	; (1966c <radio_adv_enable+0x33c>)
   193dc:	fba0 0101 	umull	r0, r1, r0, r1
   193e0:	f7e7 fe8c 	bl	10fc <__aeabi_uldivmod>
   193e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   193e8:	4a9f      	ldr	r2, [pc, #636]	; (19668 <radio_adv_enable+0x338>)
   193ea:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   193ec:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   193ee:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   193f0:	4299      	cmp	r1, r3
   193f2:	bf38      	it	cc
   193f4:	4619      	movcc	r1, r3
   193f6:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   193f8:	2d01      	cmp	r5, #1
   193fa:	f000 80ff 	beq.w	195fc <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   193fe:	f7f8 f96f 	bl	116e0 <ticker_ticks_now_get>
   19402:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   19404:	b2a4      	uxth	r4, r4
   19406:	489a      	ldr	r0, [pc, #616]	; (19670 <radio_adv_enable+0x340>)
   19408:	fba4 0100 	umull	r0, r1, r4, r0
   1940c:	2391      	movs	r3, #145	; 0x91
   1940e:	fb03 1104 	mla	r1, r3, r4, r1
   19412:	a393      	add	r3, pc, #588	; (adr r3, 19660 <radio_adv_enable+0x330>)
   19414:	e9d3 2300 	ldrd	r2, r3, [r3]
   19418:	f7e7 fe70 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1941c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   19420:	4b91      	ldr	r3, [pc, #580]	; (19668 <radio_adv_enable+0x338>)
   19422:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19424:	4443      	add	r3, r8
   19426:	b29b      	uxth	r3, r3
		ret =
   19428:	a90d      	add	r1, sp, #52	; 0x34
   1942a:	9108      	str	r1, [sp, #32]
   1942c:	4991      	ldr	r1, [pc, #580]	; (19674 <radio_adv_enable+0x344>)
   1942e:	9107      	str	r1, [sp, #28]
   19430:	2000      	movs	r0, #0
   19432:	9006      	str	r0, [sp, #24]
   19434:	4990      	ldr	r1, [pc, #576]	; (19678 <radio_adv_enable+0x348>)
   19436:	9105      	str	r1, [sp, #20]
   19438:	9304      	str	r3, [sp, #16]
   1943a:	9003      	str	r0, [sp, #12]
   1943c:	9002      	str	r0, [sp, #8]
   1943e:	9201      	str	r2, [sp, #4]
   19440:	9000      	str	r0, [sp, #0]
   19442:	463b      	mov	r3, r7
   19444:	2205      	movs	r2, #5
   19446:	2103      	movs	r1, #3
   19448:	f7f7 ffe2 	bl	11410 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1944c:	2802      	cmp	r0, #2
   1944e:	f000 813b 	beq.w	196c8 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   19452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19454:	2b00      	cmp	r3, #0
   19456:	f040 80f2 	bne.w	1963e <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   1945a:	4b83      	ldr	r3, [pc, #524]	; (19668 <radio_adv_enable+0x338>)
   1945c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19460:	f042 0201 	orr.w	r2, r2, #1
   19464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   19468:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1946c:	f013 0f01 	tst.w	r3, #1
   19470:	f000 812e 	beq.w	196d0 <radio_adv_enable+0x3a0>
		return 0;
   19474:	2000      	movs	r0, #0
   19476:	e769      	b.n	1934c <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   19478:	4b7b      	ldr	r3, [pc, #492]	; (19668 <radio_adv_enable+0x338>)
   1947a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1947e:	b10b      	cbz	r3, 19484 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   19480:	200c      	movs	r0, #12
   19482:	e763      	b.n	1934c <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   19484:	487d      	ldr	r0, [pc, #500]	; (1967c <radio_adv_enable+0x34c>)
   19486:	f7f6 faf4 	bl	fa72 <mem_acquire>
		if (!link) {
   1948a:	4681      	mov	r9, r0
   1948c:	2800      	cmp	r0, #0
   1948e:	f000 8124 	beq.w	196da <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   19492:	487b      	ldr	r0, [pc, #492]	; (19680 <radio_adv_enable+0x350>)
   19494:	f7f6 faed 	bl	fa72 <mem_acquire>
		if (!conn) {
   19498:	4606      	mov	r6, r0
   1949a:	2800      	cmp	r0, #0
   1949c:	f000 8092 	beq.w	195c4 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   194a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   194a4:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   194a6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   194aa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   194ae:	7f43      	ldrb	r3, [r0, #29]
   194b0:	f36f 1386 	bfc	r3, #6, #1
   194b4:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   194b6:	2300      	movs	r3, #0
   194b8:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   194ba:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   194bc:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   194be:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   194c0:	4969      	ldr	r1, [pc, #420]	; (19668 <radio_adv_enable+0x338>)
   194c2:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   194c6:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   194c8:	221b      	movs	r2, #27
   194ca:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   194cc:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   194ce:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   194d2:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   194d4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   194d8:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   194da:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   194dc:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   194e0:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   194e4:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   194e8:	2001      	movs	r0, #1
   194ea:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   194ee:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   194f2:	f363 12c7 	bfi	r2, r3, #7, #1
   194f6:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   194fa:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   194fe:	f360 0202 	bfi	r2, r0, #0, #3
   19502:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   19506:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   1950a:	b2d2      	uxtb	r2, r2
   1950c:	f36e 02c5 	bfi	r2, lr, #3, #3
   19510:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   19514:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   19518:	f360 0202 	bfi	r2, r0, #0, #3
   1951c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   19520:	7f72      	ldrb	r2, [r6, #29]
   19522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19526:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   19528:	2206      	movs	r2, #6
   1952a:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   1952c:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   19530:	f002 02de 	and.w	r2, r2, #222	; 0xde
   19534:	f363 0241 	bfi	r2, r3, #1, #1
   19538:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   1953c:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   1953e:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   19540:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   19542:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   19546:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   1954a:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   1954e:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   19552:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   19556:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   1955a:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   1955e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   19562:	f363 0241 	bfi	r2, r3, #1, #1
   19566:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   1956a:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1956e:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   19572:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   19576:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1957a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1957e:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   19582:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   19586:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   1958a:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1958e:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   19592:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   19596:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1959a:	f363 12c7 	bfi	r2, r3, #7, #1
   1959e:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   195a2:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   195a6:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   195aa:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   195ae:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   195b2:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   195b6:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   195ba:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   195be:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   195c2:	e6da      	b.n	1937a <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   195c4:	492d      	ldr	r1, [pc, #180]	; (1967c <radio_adv_enable+0x34c>)
   195c6:	4648      	mov	r0, r9
   195c8:	f7f6 fa6f 	bl	faaa <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   195cc:	2007      	movs	r0, #7
   195ce:	e6bd      	b.n	1934c <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   195d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   195d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   195d8:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   195dc:	0080      	lsls	r0, r0, #2
   195de:	b280      	uxth	r0, r0
   195e0:	f500 709c 	add.w	r0, r0, #312	; 0x138
   195e4:	b280      	uxth	r0, r0
   195e6:	e6f5      	b.n	193d4 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   195e8:	b280      	uxth	r0, r0
   195ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   195ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   195f2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   195f6:	0080      	lsls	r0, r0, #2
   195f8:	b280      	uxth	r0, r0
   195fa:	e6eb      	b.n	193d4 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   195fc:	2c00      	cmp	r4, #0
   195fe:	f47f aefe 	bne.w	193fe <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   19602:	f7f8 f86d 	bl	116e0 <ticker_ticks_now_get>
   19606:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   19608:	4b17      	ldr	r3, [pc, #92]	; (19668 <radio_adv_enable+0x338>)
   1960a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1960c:	eb08 0203 	add.w	r2, r8, r3
   19610:	b293      	uxth	r3, r2
   19612:	a90d      	add	r1, sp, #52	; 0x34
   19614:	9108      	str	r1, [sp, #32]
   19616:	4917      	ldr	r1, [pc, #92]	; (19674 <radio_adv_enable+0x344>)
   19618:	9107      	str	r1, [sp, #28]
   1961a:	2000      	movs	r0, #0
   1961c:	9006      	str	r0, [sp, #24]
   1961e:	4916      	ldr	r1, [pc, #88]	; (19678 <radio_adv_enable+0x348>)
   19620:	9105      	str	r1, [sp, #20]
   19622:	9304      	str	r3, [sp, #16]
   19624:	9003      	str	r0, [sp, #12]
   19626:	9002      	str	r0, [sp, #8]
   19628:	9201      	str	r2, [sp, #4]
   1962a:	9000      	str	r0, [sp, #0]
   1962c:	4623      	mov	r3, r4
   1962e:	2205      	movs	r2, #5
   19630:	2103      	movs	r1, #3
   19632:	f7f7 feed 	bl	11410 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   19636:	2802      	cmp	r0, #2
   19638:	d027      	beq.n	1968a <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1963a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1963c:	b34b      	cbz	r3, 19692 <radio_adv_enable+0x362>
	if (conn) {
   1963e:	2e00      	cmp	r6, #0
   19640:	d04d      	beq.n	196de <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   19642:	4c09      	ldr	r4, [pc, #36]	; (19668 <radio_adv_enable+0x338>)
   19644:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   19648:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1964c:	f7f6 fa2d 	bl	faaa <mem_release>
		mem_release(conn, &_radio.conn_free);
   19650:	f504 7184 	add.w	r1, r4, #264	; 0x108
   19654:	4630      	mov	r0, r6
   19656:	f7f6 fa28 	bl	faaa <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1965a:	200c      	movs	r0, #12
   1965c:	e676      	b.n	1934c <radio_adv_enable+0x1c>
   1965e:	bf00      	nop
   19660:	1afd498d 	.word	0x1afd498d
   19664:	00000007 	.word	0x00000007
   19668:	2000144c 	.word	0x2000144c
   1966c:	3b9aca00 	.word	0x3b9aca00
   19670:	84e72a00 	.word	0x84e72a00
   19674:	00011df5 	.word	0x00011df5
   19678:	0001577d 	.word	0x0001577d
   1967c:	20001590 	.word	0x20001590
   19680:	20001554 	.word	0x20001554
   19684:	bf20      	wfe
  __ASM volatile ("sev");
   19686:	bf40      	sev
  __ASM volatile ("wfe");
   19688:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   1968a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1968c:	2b02      	cmp	r3, #2
   1968e:	d0f9      	beq.n	19684 <radio_adv_enable+0x354>
   19690:	e7d3      	b.n	1963a <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   19692:	ab0e      	add	r3, sp, #56	; 0x38
   19694:	2202      	movs	r2, #2
   19696:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   1969a:	9308      	str	r3, [sp, #32]
   1969c:	4b11      	ldr	r3, [pc, #68]	; (196e4 <radio_adv_enable+0x3b4>)
   1969e:	9307      	str	r3, [sp, #28]
   196a0:	2000      	movs	r0, #0
   196a2:	9006      	str	r0, [sp, #24]
   196a4:	4b10      	ldr	r3, [pc, #64]	; (196e8 <radio_adv_enable+0x3b8>)
   196a6:	9305      	str	r3, [sp, #20]
   196a8:	9004      	str	r0, [sp, #16]
   196aa:	9003      	str	r0, [sp, #12]
   196ac:	9002      	str	r0, [sp, #8]
   196ae:	9001      	str	r0, [sp, #4]
   196b0:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   196b4:	9300      	str	r3, [sp, #0]
   196b6:	4623      	mov	r3, r4
   196b8:	2203      	movs	r2, #3
   196ba:	4611      	mov	r1, r2
   196bc:	f7f7 fea8 	bl	11410 <ticker_start>
	    !interval) {
   196c0:	e6c4      	b.n	1944c <radio_adv_enable+0x11c>
   196c2:	bf20      	wfe
  __ASM volatile ("sev");
   196c4:	bf40      	sev
  __ASM volatile ("wfe");
   196c6:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   196c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   196ca:	2b02      	cmp	r3, #2
   196cc:	d0f9      	beq.n	196c2 <radio_adv_enable+0x392>
   196ce:	e6c0      	b.n	19452 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   196d0:	2001      	movs	r0, #1
   196d2:	f7ff fe24 	bl	1931e <ll_adv_scan_state_cb>
		return 0;
   196d6:	2000      	movs	r0, #0
   196d8:	e638      	b.n	1934c <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   196da:	2007      	movs	r0, #7
   196dc:	e636      	b.n	1934c <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   196de:	200c      	movs	r0, #12
   196e0:	e634      	b.n	1934c <radio_adv_enable+0x1c>
   196e2:	bf00      	nop
   196e4:	00011df5 	.word	0x00011df5
   196e8:	00012971 	.word	0x00012971

000196ec <radio_adv_disable>:
{
   196ec:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   196ee:	2103      	movs	r1, #3
   196f0:	2005      	movs	r0, #5
   196f2:	f7f8 ffc1 	bl	12678 <role_disable>
	if (!status) {
   196f6:	4604      	mov	r4, r0
   196f8:	b9f0      	cbnz	r0, 19738 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   196fa:	4b13      	ldr	r3, [pc, #76]	; (19748 <radio_adv_disable+0x5c>)
   196fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19700:	f36f 0200 	bfc	r2, #0, #1
   19704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   19708:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1970c:	f013 0f01 	tst.w	r3, #1
   19710:	d016      	beq.n	19740 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   19712:	4b0d      	ldr	r3, [pc, #52]	; (19748 <radio_adv_disable+0x5c>)
   19714:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   19718:	b175      	cbz	r5, 19738 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   1971a:	461e      	mov	r6, r3
   1971c:	2300      	movs	r3, #0
   1971e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   19722:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   19726:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1972a:	f7f6 f9be 	bl	faaa <mem_release>
			mem_release(conn, &_radio.conn_free);
   1972e:	f506 7184 	add.w	r1, r6, #264	; 0x108
   19732:	4628      	mov	r0, r5
   19734:	f7f6 f9b9 	bl	faaa <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   19738:	b104      	cbz	r4, 1973c <radio_adv_disable+0x50>
   1973a:	240c      	movs	r4, #12
}
   1973c:	4620      	mov	r0, r4
   1973e:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   19740:	f7ff fded 	bl	1931e <ll_adv_scan_state_cb>
   19744:	e7e5      	b.n	19712 <radio_adv_disable+0x26>
   19746:	bf00      	nop
   19748:	2000144c 	.word	0x2000144c
   1974c:	00000000 	.word	0x00000000

00019750 <radio_scan_enable>:
{
   19750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19754:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   19756:	2402      	movs	r4, #2
   19758:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   1975a:	4c77      	ldr	r4, [pc, #476]	; (19938 <radio_scan_enable+0x1e8>)
   1975c:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   19760:	f014 0f01 	tst.w	r4, #1
   19764:	d003      	beq.n	1976e <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19766:	200c      	movs	r0, #12
}
   19768:	b00f      	add	sp, #60	; 0x3c
   1976a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1976e:	461d      	mov	r5, r3
   19770:	4617      	mov	r7, r2
   19772:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   19774:	4c70      	ldr	r4, [pc, #448]	; (19938 <radio_scan_enable+0x1e8>)
   19776:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1977a:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1977e:	f3c0 0042 	ubfx	r0, r0, #1, #3
   19782:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   19786:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   1978a:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   1978e:	f361 0200 	bfi	r2, r1, #0, #1
   19792:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   19796:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   1979a:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   1979e:	f366 13c7 	bfi	r3, r6, #7, #1
   197a2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   197a6:	2206      	movs	r2, #6
   197a8:	4639      	mov	r1, r7
   197aa:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   197ae:	f7e6 fd87 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   197b2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   197b6:	4e61      	ldr	r6, [pc, #388]	; (1993c <radio_scan_enable+0x1ec>)
   197b8:	f04f 0a91 	mov.w	sl, #145	; 0x91
   197bc:	fba2 0106 	umull	r0, r1, r2, r6
   197c0:	fb0a 1102 	mla	r1, sl, r2, r1
   197c4:	a35a      	add	r3, pc, #360	; (adr r3, 19930 <radio_scan_enable+0x1e0>)
   197c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   197ca:	f7e7 fc97 	bl	10fc <__aeabi_uldivmod>
   197ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   197d2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   197d6:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   197da:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   197de:	f362 1305 	bfi	r3, r2, #4, #2
   197e2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   197e6:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   197ea:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   197ee:	2327      	movs	r3, #39	; 0x27
   197f0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   197f4:	2300      	movs	r3, #0
   197f6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   197fa:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   197fe:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   19802:	b2aa      	uxth	r2, r5
   19804:	fba2 6706 	umull	r6, r7, r2, r6
   19808:	fb0a 7702 	mla	r7, sl, r2, r7
   1980c:	a348      	add	r3, pc, #288	; (adr r3, 19930 <radio_scan_enable+0x1e0>)
   1980e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19812:	4630      	mov	r0, r6
   19814:	4639      	mov	r1, r7
   19816:	f7e7 fc71 	bl	10fc <__aeabi_uldivmod>
   1981a:	4604      	mov	r4, r0
   1981c:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   19820:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   19824:	4598      	cmp	r8, r3
   19826:	d902      	bls.n	1982e <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   19828:	4a43      	ldr	r2, [pc, #268]	; (19938 <radio_scan_enable+0x1e8>)
   1982a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   1982e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   19832:	bf38      	it	cc
   19834:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   19838:	f7f7 ff52 	bl	116e0 <ticker_ticks_now_get>
   1983c:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   1983e:	4b3e      	ldr	r3, [pc, #248]	; (19938 <radio_scan_enable+0x1e8>)
   19840:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   19844:	2b00      	cmp	r3, #0
   19846:	d045      	beq.n	198d4 <radio_scan_enable+0x184>
		us_offset = 0;
   19848:	2300      	movs	r3, #0
   1984a:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   1984c:	f04f 0800 	mov.w	r8, #0
   19850:	a337      	add	r3, pc, #220	; (adr r3, 19930 <radio_scan_enable+0x1e0>)
   19852:	e9d3 2300 	ldrd	r2, r3, [r3]
   19856:	493a      	ldr	r1, [pc, #232]	; (19940 <radio_scan_enable+0x1f0>)
   19858:	980c      	ldr	r0, [sp, #48]	; 0x30
   1985a:	fba0 0101 	umull	r0, r1, r0, r1
   1985e:	f7e7 fc4d 	bl	10fc <__aeabi_uldivmod>
   19862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19866:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   19868:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1986c:	2500      	movs	r5, #0
   1986e:	4835      	ldr	r0, [pc, #212]	; (19944 <radio_scan_enable+0x1f4>)
   19870:	2307      	movs	r3, #7
   19872:	fb03 f304 	mul.w	r3, r3, r4
   19876:	fb00 3305 	mla	r3, r0, r5, r3
   1987a:	fba4 0100 	umull	r0, r1, r4, r0
   1987e:	4419      	add	r1, r3
   19880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19884:	2300      	movs	r3, #0
   19886:	1a30      	subs	r0, r6, r0
   19888:	eb67 0101 	sbc.w	r1, r7, r1
   1988c:	f7e7 fc36 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   19890:	4b29      	ldr	r3, [pc, #164]	; (19938 <radio_scan_enable+0x1e8>)
   19892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19896:	4499      	add	r9, r3
   19898:	fa1f f389 	uxth.w	r3, r9
   1989c:	aa0d      	add	r2, sp, #52	; 0x34
   1989e:	9208      	str	r2, [sp, #32]
   198a0:	4a29      	ldr	r2, [pc, #164]	; (19948 <radio_scan_enable+0x1f8>)
   198a2:	9207      	str	r2, [sp, #28]
   198a4:	f8cd 8018 	str.w	r8, [sp, #24]
   198a8:	4a28      	ldr	r2, [pc, #160]	; (1994c <radio_scan_enable+0x1fc>)
   198aa:	9205      	str	r2, [sp, #20]
   198ac:	9304      	str	r3, [sp, #16]
   198ae:	f8cd 800c 	str.w	r8, [sp, #12]
   198b2:	9002      	str	r0, [sp, #8]
   198b4:	f8cd a004 	str.w	sl, [sp, #4]
   198b8:	f8cd 8000 	str.w	r8, [sp]
   198bc:	465b      	mov	r3, fp
   198be:	2206      	movs	r2, #6
   198c0:	2103      	movs	r1, #3
   198c2:	4640      	mov	r0, r8
   198c4:	f7f7 fda4 	bl	11410 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   198c8:	2802      	cmp	r0, #2
   198ca:	d017      	beq.n	198fc <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   198cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   198ce:	b1cb      	cbz	r3, 19904 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198d0:	200c      	movs	r0, #12
   198d2:	e749      	b.n	19768 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   198d4:	2300      	movs	r3, #0
   198d6:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   198d8:	4b17      	ldr	r3, [pc, #92]	; (19938 <radio_scan_enable+0x1e8>)
   198da:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   198de:	ab0c      	add	r3, sp, #48	; 0x30
   198e0:	aa0b      	add	r2, sp, #44	; 0x2c
   198e2:	4449      	add	r1, r9
   198e4:	2003      	movs	r0, #3
   198e6:	f7f9 ff63 	bl	137b0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   198ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   198ec:	2b00      	cmp	r3, #0
   198ee:	d0ad      	beq.n	1984c <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   198f0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   198f4:	e7aa      	b.n	1984c <radio_scan_enable+0xfc>
   198f6:	bf20      	wfe
  __ASM volatile ("sev");
   198f8:	bf40      	sev
  __ASM volatile ("wfe");
   198fa:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   198fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   198fe:	2b02      	cmp	r3, #2
   19900:	d0f9      	beq.n	198f6 <radio_scan_enable+0x1a6>
   19902:	e7e3      	b.n	198cc <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   19904:	4b0c      	ldr	r3, [pc, #48]	; (19938 <radio_scan_enable+0x1e8>)
   19906:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1990a:	f042 0201 	orr.w	r2, r2, #1
   1990e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   19912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19916:	f013 0f01 	tst.w	r3, #1
   1991a:	d001      	beq.n	19920 <radio_scan_enable+0x1d0>
	return 0;
   1991c:	2000      	movs	r0, #0
   1991e:	e723      	b.n	19768 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   19920:	2002      	movs	r0, #2
   19922:	f7ff fcfc 	bl	1931e <ll_adv_scan_state_cb>
	return 0;
   19926:	2000      	movs	r0, #0
   19928:	e71e      	b.n	19768 <radio_scan_enable+0x18>
   1992a:	bf00      	nop
   1992c:	f3af 8000 	nop.w
   19930:	1afd498d 	.word	0x1afd498d
   19934:	00000007 	.word	0x00000007
   19938:	2000144c 	.word	0x2000144c
   1993c:	84e72a00 	.word	0x84e72a00
   19940:	3b9aca00 	.word	0x3b9aca00
   19944:	1afd498d 	.word	0x1afd498d
   19948:	00011df5 	.word	0x00011df5
   1994c:	00016d2d 	.word	0x00016d2d

00019950 <radio_scan_disable>:
{
   19950:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   19952:	2104      	movs	r1, #4
   19954:	2006      	movs	r0, #6
   19956:	f7f8 fe8f 	bl	12678 <role_disable>
	if (!status) {
   1995a:	4604      	mov	r4, r0
   1995c:	b9f0      	cbnz	r0, 1999c <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   1995e:	4b13      	ldr	r3, [pc, #76]	; (199ac <radio_scan_disable+0x5c>)
   19960:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19964:	f36f 0200 	bfc	r2, #0, #1
   19968:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   1996c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19970:	f013 0f01 	tst.w	r3, #1
   19974:	d016      	beq.n	199a4 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   19976:	4b0d      	ldr	r3, [pc, #52]	; (199ac <radio_scan_disable+0x5c>)
   19978:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   1997c:	b175      	cbz	r5, 1999c <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   1997e:	461e      	mov	r6, r3
   19980:	2300      	movs	r3, #0
   19982:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   19986:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1998a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1998e:	f7f6 f88c 	bl	faaa <mem_release>
			mem_release(conn, &_radio.conn_free);
   19992:	f506 7184 	add.w	r1, r6, #264	; 0x108
   19996:	4628      	mov	r0, r5
   19998:	f7f6 f887 	bl	faaa <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1999c:	b104      	cbz	r4, 199a0 <radio_scan_disable+0x50>
   1999e:	240c      	movs	r4, #12
}
   199a0:	4620      	mov	r0, r4
   199a2:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   199a4:	f7ff fcbb 	bl	1931e <ll_adv_scan_state_cb>
   199a8:	e7e5      	b.n	19976 <radio_scan_disable+0x26>
   199aa:	bf00      	nop
   199ac:	2000144c 	.word	0x2000144c

000199b0 <ll_connect_disable>:
{
   199b0:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   199b2:	4b04      	ldr	r3, [pc, #16]	; (199c4 <ll_connect_disable+0x14>)
   199b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   199b8:	b113      	cbz	r3, 199c0 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   199ba:	f7ff ffc9 	bl	19950 <radio_scan_disable>
	return status;
   199be:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   199c0:	200c      	movs	r0, #12
}
   199c2:	bd08      	pop	{r3, pc}
   199c4:	2000144c 	.word	0x2000144c

000199c8 <radio_rx_dequeue>:
{
   199c8:	b530      	push	{r4, r5, lr}
   199ca:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   199cc:	aa02      	add	r2, sp, #8
   199ce:	2300      	movs	r3, #0
   199d0:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   199d4:	4947      	ldr	r1, [pc, #284]	; (19af4 <radio_rx_dequeue+0x12c>)
   199d6:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   199da:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   199de:	f7f6 f8c0 	bl	fb62 <memq_dequeue>
	LL_ASSERT(link);
   199e2:	b178      	cbz	r0, 19a04 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   199e4:	4944      	ldr	r1, [pc, #272]	; (19af8 <radio_rx_dequeue+0x130>)
   199e6:	f7f6 f860 	bl	faaa <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   199ea:	9a01      	ldr	r2, [sp, #4]
   199ec:	7913      	ldrb	r3, [r2, #4]
   199ee:	3b01      	subs	r3, #1
   199f0:	2b0b      	cmp	r3, #11
   199f2:	d824      	bhi.n	19a3e <radio_rx_dequeue+0x76>
   199f4:	e8df f003 	tbb	[pc, r3]
   199f8:	0c0c0c0c 	.word	0x0c0c0c0c
   199fc:	0c180c0c 	.word	0x0c180c0c
   19a00:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   19a04:	4040      	eors	r0, r0
   19a06:	f380 8811 	msr	BASEPRI, r0
   19a0a:	f04f 0004 	mov.w	r0, #4
   19a0e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   19a10:	4938      	ldr	r1, [pc, #224]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a12:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   19a16:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   19a1a:	3901      	subs	r1, #1
   19a1c:	428b      	cmp	r3, r1
   19a1e:	da08      	bge.n	19a32 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   19a20:	3301      	adds	r3, #1
   19a22:	4934      	ldr	r1, [pc, #208]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a24:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19a28:	7913      	ldrb	r3, [r2, #4]
   19a2a:	2b06      	cmp	r3, #6
   19a2c:	d00d      	beq.n	19a4a <radio_rx_dequeue+0x82>
}
   19a2e:	b003      	add	sp, #12
   19a30:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   19a32:	4040      	eors	r0, r0
   19a34:	f380 8811 	msr	BASEPRI, r0
   19a38:	f04f 0004 	mov.w	r0, #4
   19a3c:	df02      	svc	2
		LL_ASSERT(0);
   19a3e:	4040      	eors	r0, r0
   19a40:	f380 8811 	msr	BASEPRI, r0
   19a44:	f04f 0004 	mov.w	r0, #4
   19a48:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   19a4a:	7ad3      	ldrb	r3, [r2, #11]
   19a4c:	2b3c      	cmp	r3, #60	; 0x3c
   19a4e:	d002      	beq.n	19a56 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   19a50:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   19a52:	2a00      	cmp	r2, #0
   19a54:	d039      	beq.n	19aca <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   19a56:	2b3c      	cmp	r3, #60	; 0x3c
   19a58:	d02a      	beq.n	19ab0 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   19a5a:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   19a5c:	4b25      	ldr	r3, [pc, #148]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19a62:	f013 0f01 	tst.w	r3, #1
   19a66:	d02a      	beq.n	19abe <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   19a68:	4b22      	ldr	r3, [pc, #136]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19a6e:	f36f 0200 	bfc	r2, #0, #1
   19a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   19a76:	b15c      	cbz	r4, 19a90 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   19a78:	4d1e      	ldr	r5, [pc, #120]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a7a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   19a7e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19a82:	f7f6 f812 	bl	faaa <mem_release>
			mem_release(conn, &_radio.conn_free);
   19a86:	f505 7184 	add.w	r1, r5, #264	; 0x108
   19a8a:	4620      	mov	r0, r4
   19a8c:	f7f6 f80d 	bl	faaa <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19a90:	4b18      	ldr	r3, [pc, #96]	; (19af4 <radio_rx_dequeue+0x12c>)
   19a92:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19a96:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   19a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19a9e:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   19aa2:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   19aa6:	d1c2      	bne.n	19a2e <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   19aa8:	2000      	movs	r0, #0
   19aaa:	f7ff fc38 	bl	1931e <ll_adv_scan_state_cb>
}
   19aae:	e7be      	b.n	19a2e <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   19ab0:	4b10      	ldr	r3, [pc, #64]	; (19af4 <radio_rx_dequeue+0x12c>)
   19ab2:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   19ab6:	2200      	movs	r2, #0
   19ab8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   19abc:	e7ce      	b.n	19a5c <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   19abe:	4040      	eors	r0, r0
   19ac0:	f380 8811 	msr	BASEPRI, r0
   19ac4:	f04f 0004 	mov.w	r0, #4
   19ac8:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   19aca:	4b0a      	ldr	r3, [pc, #40]	; (19af4 <radio_rx_dequeue+0x12c>)
   19acc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19ad0:	f013 0f01 	tst.w	r3, #1
   19ad4:	d008      	beq.n	19ae8 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   19ad6:	4b07      	ldr	r3, [pc, #28]	; (19af4 <radio_rx_dequeue+0x12c>)
   19ad8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19adc:	f36f 0200 	bfc	r2, #0, #1
   19ae0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   19ae4:	2400      	movs	r4, #0
   19ae6:	e7c6      	b.n	19a76 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   19ae8:	4040      	eors	r0, r0
   19aea:	f380 8811 	msr	BASEPRI, r0
   19aee:	f04f 0004 	mov.w	r0, #4
   19af2:	df02      	svc	2
   19af4:	2000144c 	.word	0x2000144c
   19af8:	20001590 	.word	0x20001590

00019afc <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19afc:	4668      	mov	r0, sp
   19afe:	f020 0107 	bic.w	r1, r0, #7
   19b02:	468d      	mov	sp, r1
   19b04:	b501      	push	{r0, lr}
{
	isr_radio();
   19b06:	f7f6 f8e3 	bl	fcd0 <isr_radio>

	ISR_DIRECT_PM();
   19b0a:	f00e fb75 	bl	281f8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   19b0e:	f00e f90f 	bl	27d30 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19b12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19b16:	4685      	mov	sp, r0
   19b18:	4770      	bx	lr
	...

00019b1c <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   19b1c:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   19b1e:	4b0c      	ldr	r3, [pc, #48]	; (19b50 <rtc0_nrf5_isr+0x34>)
   19b20:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   19b24:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   19b28:	b922      	cbnz	r2, 19b34 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   19b2a:	b94c      	cbnz	r4, 19b40 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   19b2c:	2000      	movs	r0, #0
   19b2e:	f7f5 fec1 	bl	f8b4 <mayfly_run>
   19b32:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19b34:	2000      	movs	r0, #0
   19b36:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   19b3a:	f7f7 fc5b 	bl	113f4 <ticker_trigger>
   19b3e:	e7f4      	b.n	19b2a <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   19b40:	2200      	movs	r2, #0
   19b42:	4b03      	ldr	r3, [pc, #12]	; (19b50 <rtc0_nrf5_isr+0x34>)
   19b44:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   19b48:	2001      	movs	r0, #1
   19b4a:	f7f7 fc53 	bl	113f4 <ticker_trigger>
   19b4e:	e7ed      	b.n	19b2c <rtc0_nrf5_isr+0x10>
   19b50:	4000b000 	.word	0x4000b000

00019b54 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   19b54:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   19b56:	2001      	movs	r0, #1
   19b58:	f7f5 feac 	bl	f8b4 <mayfly_run>
   19b5c:	bd08      	pop	{r3, pc}

00019b5e <rng_nrf5_isr>:
{
   19b5e:	b508      	push	{r3, lr}
	isr_rand(arg);
   19b60:	f7f7 f9e2 	bl	10f28 <isr_rand>
   19b64:	bd08      	pop	{r3, pc}

00019b66 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   19b66:	2901      	cmp	r1, #1
   19b68:	d105      	bne.n	19b76 <mayfly_enable_cb+0x10>
{
   19b6a:	b508      	push	{r3, lr}
	if (enable) {
   19b6c:	b94a      	cbnz	r2, 19b82 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   19b6e:	2018      	movs	r0, #24
   19b70:	f00e fb0c 	bl	2818c <_arch_irq_disable>
   19b74:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   19b76:	4040      	eors	r0, r0
   19b78:	f380 8811 	msr	BASEPRI, r0
   19b7c:	f04f 0004 	mov.w	r0, #4
   19b80:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   19b82:	2018      	movs	r0, #24
   19b84:	f00e faf4 	bl	28170 <_arch_irq_enable>
   19b88:	bd08      	pop	{r3, pc}

00019b8a <mayfly_is_enabled>:
{
   19b8a:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   19b8c:	b129      	cbz	r1, 19b9a <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   19b8e:	2901      	cmp	r1, #1
   19b90:	d107      	bne.n	19ba2 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   19b92:	2018      	movs	r0, #24
   19b94:	f00e fb08 	bl	281a8 <_arch_irq_is_enabled>
   19b98:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   19b9a:	200b      	movs	r0, #11
   19b9c:	f00e fb04 	bl	281a8 <_arch_irq_is_enabled>
   19ba0:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   19ba2:	4040      	eors	r0, r0
   19ba4:	f380 8811 	msr	BASEPRI, r0
   19ba8:	f04f 0004 	mov.w	r0, #4
   19bac:	df02      	svc	2

00019bae <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19bae:	4288      	cmp	r0, r1
   19bb0:	d009      	beq.n	19bc6 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   19bb2:	b908      	cbnz	r0, 19bb8 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   19bb4:	2901      	cmp	r1, #1
   19bb6:	d008      	beq.n	19bca <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19bb8:	2801      	cmp	r0, #1
   19bba:	d001      	beq.n	19bc0 <mayfly_prio_is_equal+0x12>
   19bbc:	2000      	movs	r0, #0
   19bbe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   19bc0:	b129      	cbz	r1, 19bce <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19bc2:	2000      	movs	r0, #0
   19bc4:	4770      	bx	lr
   19bc6:	2001      	movs	r0, #1
   19bc8:	4770      	bx	lr
   19bca:	2001      	movs	r0, #1
   19bcc:	4770      	bx	lr
   19bce:	2001      	movs	r0, #1
}
   19bd0:	4770      	bx	lr
	...

00019bd4 <mayfly_pend>:
	switch (callee_id) {
   19bd4:	b139      	cbz	r1, 19be6 <mayfly_pend+0x12>
   19bd6:	2901      	cmp	r1, #1
   19bd8:	d00b      	beq.n	19bf2 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   19bda:	4040      	eors	r0, r0
   19bdc:	f380 8811 	msr	BASEPRI, r0
   19be0:	f04f 0004 	mov.w	r0, #4
   19be4:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19bea:	4b05      	ldr	r3, [pc, #20]	; (19c00 <mayfly_pend+0x2c>)
   19bec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19bf0:	4770      	bx	lr
   19bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19bf6:	4b02      	ldr	r3, [pc, #8]	; (19c00 <mayfly_pend+0x2c>)
   19bf8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19bfc:	4770      	bx	lr
   19bfe:	bf00      	nop
   19c00:	e000e100 	.word	0xe000e100

00019c04 <radio_active_callback>:
{
   19c04:	4770      	bx	lr
	...

00019c08 <radio_event_callback>:
{
   19c08:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19c0a:	4b02      	ldr	r3, [pc, #8]	; (19c14 <radio_event_callback+0xc>)
   19c0c:	6818      	ldr	r0, [r3, #0]
   19c0e:	f00f ff44 	bl	29a9a <_impl_k_sem_give>
   19c12:	bd08      	pop	{r3, pc}
   19c14:	20001d70 	.word	0x20001d70

00019c18 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   19c18:	b510      	push	{r4, lr}
   19c1a:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   19c1c:	4b37      	ldr	r3, [pc, #220]	; (19cfc <ll_init+0xe4>)
   19c1e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   19c20:	2204      	movs	r2, #4
   19c22:	2109      	movs	r1, #9
   19c24:	4836      	ldr	r0, [pc, #216]	; (19d00 <ll_init+0xe8>)
   19c26:	f7f7 f957 	bl	10ed8 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   19c2a:	220c      	movs	r2, #12
   19c2c:	2111      	movs	r1, #17
   19c2e:	4835      	ldr	r0, [pc, #212]	; (19d04 <ll_init+0xec>)
   19c30:	f7f7 f95c 	bl	10eec <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   19c34:	4834      	ldr	r0, [pc, #208]	; (19d08 <ll_init+0xf0>)
   19c36:	f00e fc69 	bl	2850c <device_get_binding>
	if (!clk_k32) {
   19c3a:	2800      	cmp	r0, #0
   19c3c:	d054      	beq.n	19ce8 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   19c3e:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   19c40:	6812      	ldr	r2, [r2, #0]
   19c42:	2101      	movs	r1, #1
   19c44:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   19c46:	f7f5 ffad 	bl	fba4 <cntr_init>

	mayfly_init();
   19c4a:	f7f5 fd67 	bl	f71c <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   19c4e:	4b2f      	ldr	r3, [pc, #188]	; (19d0c <ll_init+0xf4>)
   19c50:	2108      	movs	r1, #8
   19c52:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   19c54:	2203      	movs	r2, #3
   19c56:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19c58:	2000      	movs	r0, #0
   19c5a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   19c5c:	2202      	movs	r2, #2
   19c5e:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   19c60:	4a2b      	ldr	r2, [pc, #172]	; (19d10 <ll_init+0xf8>)
   19c62:	9202      	str	r2, [sp, #8]
   19c64:	220d      	movs	r2, #13
   19c66:	9201      	str	r2, [sp, #4]
   19c68:	9300      	str	r3, [sp, #0]
   19c6a:	2304      	movs	r3, #4
   19c6c:	4a29      	ldr	r2, [pc, #164]	; (19d14 <ll_init+0xfc>)
   19c6e:	f7f7 fb67 	bl	11340 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   19c72:	4829      	ldr	r0, [pc, #164]	; (19d18 <ll_init+0x100>)
   19c74:	f00e fc4a 	bl	2850c <device_get_binding>
	if (!clk_m16) {
   19c78:	2800      	cmp	r0, #0
   19c7a:	d038      	beq.n	19cee <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   19c7c:	f44f 7357 	mov.w	r3, #860	; 0x35c
   19c80:	9304      	str	r3, [sp, #16]
   19c82:	4b26      	ldr	r3, [pc, #152]	; (19d1c <ll_init+0x104>)
   19c84:	9303      	str	r3, [sp, #12]
   19c86:	231b      	movs	r3, #27
   19c88:	9302      	str	r3, [sp, #8]
   19c8a:	9301      	str	r3, [sp, #4]
   19c8c:	2302      	movs	r3, #2
   19c8e:	9300      	str	r3, [sp, #0]
   19c90:	2301      	movs	r3, #1
   19c92:	461a      	mov	r2, r3
   19c94:	2107      	movs	r1, #7
   19c96:	f7fe fccb 	bl	18630 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   19c9a:	bb58      	cbnz	r0, 19cf4 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   19c9c:	2001      	movs	r0, #1
   19c9e:	f000 ffff 	bl	1aca0 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19ca2:	2200      	movs	r2, #0
   19ca4:	4611      	mov	r1, r2
   19ca6:	2001      	movs	r0, #1
   19ca8:	f00e fa8c 	bl	281c4 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19cac:	2200      	movs	r2, #0
   19cae:	4611      	mov	r1, r2
   19cb0:	200b      	movs	r0, #11
   19cb2:	f00e fa87 	bl	281c4 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   19cb6:	2200      	movs	r2, #0
   19cb8:	4611      	mov	r1, r2
   19cba:	2018      	movs	r0, #24
   19cbc:	f00e fa82 	bl	281c4 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   19cc0:	2200      	movs	r2, #0
   19cc2:	2101      	movs	r1, #1
   19cc4:	200d      	movs	r0, #13
   19cc6:	f00e fa7d 	bl	281c4 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   19cca:	2001      	movs	r0, #1
   19ccc:	f00e fa50 	bl	28170 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19cd0:	200b      	movs	r0, #11
   19cd2:	f00e fa4d 	bl	28170 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   19cd6:	2018      	movs	r0, #24
   19cd8:	f00e fa4a 	bl	28170 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   19cdc:	200d      	movs	r0, #13
   19cde:	f00e fa47 	bl	28170 <_arch_irq_enable>

	return 0;
   19ce2:	2000      	movs	r0, #0
}
   19ce4:	b006      	add	sp, #24
   19ce6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19ce8:	f06f 0012 	mvn.w	r0, #18
   19cec:	e7fa      	b.n	19ce4 <ll_init+0xcc>
		return -ENODEV;
   19cee:	f06f 0012 	mvn.w	r0, #18
   19cf2:	e7f7      	b.n	19ce4 <ll_init+0xcc>
		return -ENOMEM;
   19cf4:	f06f 000b 	mvn.w	r0, #11
   19cf8:	e7f4      	b.n	19ce4 <ll_init+0xcc>
   19cfa:	bf00      	nop
   19cfc:	20001d70 	.word	0x20001d70
   19d00:	20001d50 	.word	0x20001d50
   19d04:	20001d5c 	.word	0x20001d5c
   19d08:	0002f0c4 	.word	0x0002f0c4
   19d0c:	20001d30 	.word	0x20001d30
   19d10:	20001af4 	.word	0x20001af4
   19d14:	200019d4 	.word	0x200019d4
   19d18:	0002f0d0 	.word	0x0002f0d0
   19d1c:	200015d4 	.word	0x200015d4

00019d20 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   19d20:	2801      	cmp	r0, #1
   19d22:	d814      	bhi.n	19d4e <ll_addr_get+0x2e>
{
   19d24:	b538      	push	{r3, r4, r5, lr}
   19d26:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   19d28:	b140      	cbz	r0, 19d3c <ll_addr_get+0x1c>
		if (bdaddr) {
   19d2a:	b191      	cbz	r1, 19d52 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   19d2c:	4d0b      	ldr	r5, [pc, #44]	; (19d5c <ll_addr_get+0x3c>)
   19d2e:	2206      	movs	r2, #6
   19d30:	4629      	mov	r1, r5
   19d32:	4620      	mov	r0, r4
   19d34:	f7e6 fac4 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   19d38:	4628      	mov	r0, r5
   19d3a:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   19d3c:	b159      	cbz	r1, 19d56 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   19d3e:	4d08      	ldr	r5, [pc, #32]	; (19d60 <ll_addr_get+0x40>)
   19d40:	2206      	movs	r2, #6
   19d42:	4629      	mov	r1, r5
   19d44:	4620      	mov	r0, r4
   19d46:	f7e6 fabb 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   19d4a:	4628      	mov	r0, r5
   19d4c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   19d4e:	2000      	movs	r0, #0
   19d50:	4770      	bx	lr
		return _ll_context.rnd_addr;
   19d52:	4802      	ldr	r0, [pc, #8]	; (19d5c <ll_addr_get+0x3c>)
   19d54:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   19d56:	4802      	ldr	r0, [pc, #8]	; (19d60 <ll_addr_get+0x40>)
}
   19d58:	bd38      	pop	{r3, r4, r5, pc}
   19d5a:	bf00      	nop
   19d5c:	200019ce 	.word	0x200019ce
   19d60:	200019c8 	.word	0x200019c8

00019d64 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   19d64:	b508      	push	{r3, lr}
	if (addr_type) {
   19d66:	b920      	cbnz	r0, 19d72 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   19d68:	2206      	movs	r2, #6
   19d6a:	4804      	ldr	r0, [pc, #16]	; (19d7c <ll_addr_set+0x18>)
   19d6c:	f7e6 faa8 	bl	2c0 <memcpy>
   19d70:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   19d72:	2206      	movs	r2, #6
   19d74:	4802      	ldr	r0, [pc, #8]	; (19d80 <ll_addr_set+0x1c>)
   19d76:	f7e6 faa3 	bl	2c0 <memcpy>
   19d7a:	bd08      	pop	{r3, pc}
   19d7c:	200019c8 	.word	0x200019c8
   19d80:	200019ce 	.word	0x200019ce

00019d84 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   19d84:	2300      	movs	r3, #0
   19d86:	e007      	b.n	19d98 <wl_clear+0x14>
		wl[i].taken = 0;
   19d88:	4a05      	ldr	r2, [pc, #20]	; (19da0 <wl_clear+0x1c>)
   19d8a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19d8e:	f36f 0100 	bfc	r1, #0, #1
   19d92:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19d96:	3301      	adds	r3, #1
   19d98:	2b07      	cmp	r3, #7
   19d9a:	ddf5      	ble.n	19d88 <wl_clear+0x4>
}
   19d9c:	4770      	bx	lr
   19d9e:	bf00      	nop
   19da0:	20001fa8 	.word	0x20001fa8

00019da4 <filter_clear>:
	filter->enable_bitmask = 0;
   19da4:	2300      	movs	r3, #0
   19da6:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   19da8:	7043      	strb	r3, [r0, #1]
   19daa:	4770      	bx	lr

00019dac <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dac:	2300      	movs	r3, #0
   19dae:	e009      	b.n	19dc4 <rl_clear+0x18>
		rl[i].taken = 0;
   19db0:	4907      	ldr	r1, [pc, #28]	; (19dd0 <rl_clear+0x24>)
   19db2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19db6:	00c2      	lsls	r2, r0, #3
   19db8:	5c88      	ldrb	r0, [r1, r2]
   19dba:	f36f 0000 	bfc	r0, #0, #1
   19dbe:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dc0:	3301      	adds	r3, #1
   19dc2:	b2db      	uxtb	r3, r3
   19dc4:	2b07      	cmp	r3, #7
   19dc6:	d9f3      	bls.n	19db0 <rl_clear+0x4>
	peer_irk_count = 0;
   19dc8:	2200      	movs	r2, #0
   19dca:	4b02      	ldr	r3, [pc, #8]	; (19dd4 <rl_clear+0x28>)
   19dcc:	701a      	strb	r2, [r3, #0]
   19dce:	4770      	bx	lr
   19dd0:	20001e30 	.word	0x20001e30
   19dd4:	20001da4 	.word	0x20001da4

00019dd8 <wl_find>:
{
   19dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dda:	4606      	mov	r6, r0
   19ddc:	460f      	mov	r7, r1
	if (free) {
   19dde:	4615      	mov	r5, r2
   19de0:	b10a      	cbz	r2, 19de6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   19de2:	23ff      	movs	r3, #255	; 0xff
   19de4:	7013      	strb	r3, [r2, #0]
{
   19de6:	2400      	movs	r4, #0
   19de8:	e00c      	b.n	19e04 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19dea:	4816      	ldr	r0, [pc, #88]	; (19e44 <wl_find+0x6c>)
   19dec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19df0:	2206      	movs	r2, #6
   19df2:	4639      	mov	r1, r7
   19df4:	3002      	adds	r0, #2
   19df6:	f010 fd8f 	bl	2a918 <memcmp>
   19dfa:	b9a0      	cbnz	r0, 19e26 <wl_find+0x4e>
			return i;
   19dfc:	b2e0      	uxtb	r0, r4
   19dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   19e00:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   19e02:	3401      	adds	r4, #1
   19e04:	2c07      	cmp	r4, #7
   19e06:	dc1a      	bgt.n	19e3e <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19e08:	4b0e      	ldr	r3, [pc, #56]	; (19e44 <wl_find+0x6c>)
   19e0a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19e0e:	f013 0f01 	tst.w	r3, #1
   19e12:	d008      	beq.n	19e26 <wl_find+0x4e>
   19e14:	4b0b      	ldr	r3, [pc, #44]	; (19e44 <wl_find+0x6c>)
   19e16:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19e1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   19e1e:	f006 0201 	and.w	r2, r6, #1
   19e22:	4293      	cmp	r3, r2
   19e24:	d0e1      	beq.n	19dea <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19e26:	2d00      	cmp	r5, #0
   19e28:	d0eb      	beq.n	19e02 <wl_find+0x2a>
   19e2a:	4b06      	ldr	r3, [pc, #24]	; (19e44 <wl_find+0x6c>)
   19e2c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19e30:	f013 0f01 	tst.w	r3, #1
   19e34:	d1e5      	bne.n	19e02 <wl_find+0x2a>
   19e36:	782b      	ldrb	r3, [r5, #0]
   19e38:	2bff      	cmp	r3, #255	; 0xff
   19e3a:	d1e2      	bne.n	19e02 <wl_find+0x2a>
   19e3c:	e7e0      	b.n	19e00 <wl_find+0x28>
	return FILTER_IDX_NONE;
   19e3e:	20ff      	movs	r0, #255	; 0xff
}
   19e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e42:	bf00      	nop
   19e44:	20001fa8 	.word	0x20001fa8

00019e48 <wl_remove>:
{
   19e48:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19e4a:	4601      	mov	r1, r0
   19e4c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19e50:	2200      	movs	r2, #0
   19e52:	f7ff ffc1 	bl	19dd8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19e56:	2807      	cmp	r0, #7
   19e58:	d901      	bls.n	19e5e <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19e5a:	2002      	movs	r0, #2
}
   19e5c:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   19e5e:	4b0b      	ldr	r3, [pc, #44]	; (19e8c <wl_remove+0x44>)
   19e60:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   19e64:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19e66:	2b07      	cmp	r3, #7
   19e68:	d807      	bhi.n	19e7a <wl_remove+0x32>
			rl[j].wl = 0;
   19e6a:	4909      	ldr	r1, [pc, #36]	; (19e90 <wl_remove+0x48>)
   19e6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19e70:	00da      	lsls	r2, r3, #3
   19e72:	5c8b      	ldrb	r3, [r1, r2]
   19e74:	f36f 1345 	bfc	r3, #5, #1
   19e78:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   19e7a:	4b04      	ldr	r3, [pc, #16]	; (19e8c <wl_remove+0x44>)
   19e7c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19e80:	f36f 0200 	bfc	r2, #0, #1
   19e84:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   19e88:	2000      	movs	r0, #0
   19e8a:	bd08      	pop	{r3, pc}
   19e8c:	20001fa8 	.word	0x20001fa8
   19e90:	20001e30 	.word	0x20001e30

00019e94 <filter_insert>:
{
   19e94:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   19e96:	2401      	movs	r4, #1
   19e98:	fa04 f501 	lsl.w	r5, r4, r1
   19e9c:	7804      	ldrb	r4, [r0, #0]
   19e9e:	432c      	orrs	r4, r5
   19ea0:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19ea2:	f002 0201 	and.w	r2, r2, #1
   19ea6:	fa02 f401 	lsl.w	r4, r2, r1
   19eaa:	7842      	ldrb	r2, [r0, #1]
   19eac:	4322      	orrs	r2, r4
   19eae:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19eb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19eb4:	004a      	lsls	r2, r1, #1
   19eb6:	4410      	add	r0, r2
   19eb8:	2206      	movs	r2, #6
   19eba:	4619      	mov	r1, r3
   19ebc:	3002      	adds	r0, #2
   19ebe:	f7e6 f9ff 	bl	2c0 <memcpy>
   19ec2:	bd38      	pop	{r3, r4, r5, pc}

00019ec4 <filter_wl_update>:
{
   19ec4:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   19ec6:	481b      	ldr	r0, [pc, #108]	; (19f34 <filter_wl_update+0x70>)
   19ec8:	f7ff ff6c 	bl	19da4 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   19ecc:	2400      	movs	r4, #0
   19ece:	e00c      	b.n	19eea <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19ed0:	4b19      	ldr	r3, [pc, #100]	; (19f38 <filter_wl_update+0x74>)
   19ed2:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   19ed6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19eda:	3302      	adds	r3, #2
   19edc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   19ee0:	4814      	ldr	r0, [pc, #80]	; (19f34 <filter_wl_update+0x70>)
   19ee2:	f7ff ffd7 	bl	19e94 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   19ee6:	3401      	adds	r4, #1
   19ee8:	b2e4      	uxtb	r4, r4
   19eea:	2c07      	cmp	r4, #7
   19eec:	d820      	bhi.n	19f30 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   19eee:	4621      	mov	r1, r4
   19ef0:	4b11      	ldr	r3, [pc, #68]	; (19f38 <filter_wl_update+0x74>)
   19ef2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19ef6:	f013 0f01 	tst.w	r3, #1
   19efa:	d0f4      	beq.n	19ee6 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   19efc:	4b0e      	ldr	r3, [pc, #56]	; (19f38 <filter_wl_update+0x74>)
   19efe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19f02:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19f04:	4a0d      	ldr	r2, [pc, #52]	; (19f3c <filter_wl_update+0x78>)
   19f06:	7812      	ldrb	r2, [r2, #0]
   19f08:	2a00      	cmp	r2, #0
   19f0a:	d0e1      	beq.n	19ed0 <filter_wl_update+0xc>
   19f0c:	2b07      	cmp	r3, #7
   19f0e:	d8df      	bhi.n	19ed0 <filter_wl_update+0xc>
   19f10:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19f14:	00c2      	lsls	r2, r0, #3
   19f16:	480a      	ldr	r0, [pc, #40]	; (19f40 <filter_wl_update+0x7c>)
   19f18:	5c82      	ldrb	r2, [r0, r2]
   19f1a:	f012 0f04 	tst.w	r2, #4
   19f1e:	d0d7      	beq.n	19ed0 <filter_wl_update+0xc>
		    rl[j].dev) {
   19f20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19f24:	00da      	lsls	r2, r3, #3
   19f26:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19f28:	f013 0f10 	tst.w	r3, #16
   19f2c:	d0db      	beq.n	19ee6 <filter_wl_update+0x22>
   19f2e:	e7cf      	b.n	19ed0 <filter_wl_update+0xc>
}
   19f30:	bd10      	pop	{r4, pc}
   19f32:	bf00      	nop
   19f34:	20001fe8 	.word	0x20001fe8
   19f38:	20001fa8 	.word	0x20001fa8
   19f3c:	20001f70 	.word	0x20001f70
   19f40:	20001e30 	.word	0x20001e30

00019f44 <filter_rl_update>:
{
   19f44:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   19f46:	4810      	ldr	r0, [pc, #64]	; (19f88 <filter_rl_update+0x44>)
   19f48:	f7ff ff2c 	bl	19da4 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19f4c:	2400      	movs	r4, #0
   19f4e:	e001      	b.n	19f54 <filter_rl_update+0x10>
   19f50:	3401      	adds	r4, #1
   19f52:	b2e4      	uxtb	r4, r4
   19f54:	2c07      	cmp	r4, #7
   19f56:	d815      	bhi.n	19f84 <filter_rl_update+0x40>
		if (rl[i].taken) {
   19f58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19f5c:	00d3      	lsls	r3, r2, #3
   19f5e:	4a0b      	ldr	r2, [pc, #44]	; (19f8c <filter_rl_update+0x48>)
   19f60:	5cd3      	ldrb	r3, [r2, r3]
   19f62:	f013 0f01 	tst.w	r3, #1
   19f66:	d0f3      	beq.n	19f50 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19f68:	4611      	mov	r1, r2
   19f6a:	00a3      	lsls	r3, r4, #2
   19f6c:	4423      	add	r3, r4
   19f6e:	00da      	lsls	r2, r3, #3
   19f70:	188b      	adds	r3, r1, r2
   19f72:	5c8a      	ldrb	r2, [r1, r2]
   19f74:	3301      	adds	r3, #1
   19f76:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19f7a:	4621      	mov	r1, r4
   19f7c:	4802      	ldr	r0, [pc, #8]	; (19f88 <filter_rl_update+0x44>)
   19f7e:	f7ff ff89 	bl	19e94 <filter_insert>
   19f82:	e7e5      	b.n	19f50 <filter_rl_update+0xc>
}
   19f84:	bd10      	pop	{r4, pc}
   19f86:	bf00      	nop
   19f88:	20001f74 	.word	0x20001f74
   19f8c:	20001e30 	.word	0x20001e30

00019f90 <rl_access_check>:
{
   19f90:	b508      	push	{r3, lr}
	if (check_ar) {
   19f92:	b110      	cbz	r0, 19f9a <rl_access_check+0xa>
		if (!rl_enable) {
   19f94:	4b08      	ldr	r3, [pc, #32]	; (19fb8 <rl_access_check+0x28>)
   19f96:	781b      	ldrb	r3, [r3, #0]
   19f98:	b15b      	cbz	r3, 19fb2 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   19f9a:	f7fe fc27 	bl	187ec <radio_adv_is_enabled>
   19f9e:	b108      	cbz	r0, 19fa4 <rl_access_check+0x14>
   19fa0:	2000      	movs	r0, #0
   19fa2:	bd08      	pop	{r3, pc}
   19fa4:	f7fe fc3a 	bl	1881c <radio_scan_is_enabled>
   19fa8:	b108      	cbz	r0, 19fae <rl_access_check+0x1e>
   19faa:	2000      	movs	r0, #0
}
   19fac:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   19fae:	2001      	movs	r0, #1
   19fb0:	bd08      	pop	{r3, pc}
			return -1;
   19fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fb6:	bd08      	pop	{r3, pc}
   19fb8:	20001f70 	.word	0x20001f70

00019fbc <rpa_refresh_start>:
{
   19fbc:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19fbe:	4b05      	ldr	r3, [pc, #20]	; (19fd4 <rpa_refresh_start+0x18>)
   19fc0:	781b      	ldrb	r3, [r3, #0]
   19fc2:	b903      	cbnz	r3, 19fc6 <rpa_refresh_start+0xa>
   19fc4:	bd08      	pop	{r3, pc}
   19fc6:	4b04      	ldr	r3, [pc, #16]	; (19fd8 <rpa_refresh_start+0x1c>)
   19fc8:	681a      	ldr	r2, [r3, #0]
   19fca:	4904      	ldr	r1, [pc, #16]	; (19fdc <rpa_refresh_start+0x20>)
   19fcc:	4804      	ldr	r0, [pc, #16]	; (19fe0 <rpa_refresh_start+0x24>)
   19fce:	f010 fbad 	bl	2a72c <k_delayed_work_submit_to_queue>
   19fd2:	e7f7      	b.n	19fc4 <rpa_refresh_start+0x8>
   19fd4:	20001f70 	.word	0x20001f70
   19fd8:	200030dc 	.word	0x200030dc
   19fdc:	20002fa8 	.word	0x20002fa8
   19fe0:	200030f0 	.word	0x200030f0

00019fe4 <rpa_refresh_stop>:
{
   19fe4:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19fe6:	4b04      	ldr	r3, [pc, #16]	; (19ff8 <rpa_refresh_stop+0x14>)
   19fe8:	781b      	ldrb	r3, [r3, #0]
   19fea:	b903      	cbnz	r3, 19fee <rpa_refresh_stop+0xa>
   19fec:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   19fee:	4803      	ldr	r0, [pc, #12]	; (19ffc <rpa_refresh_stop+0x18>)
   19ff0:	f010 fb42 	bl	2a678 <k_delayed_work_cancel>
   19ff4:	e7fa      	b.n	19fec <rpa_refresh_stop+0x8>
   19ff6:	bf00      	nop
   19ff8:	20001f70 	.word	0x20001f70
   19ffc:	20002fa8 	.word	0x20002fa8

0001a000 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1a000:	2807      	cmp	r0, #7
   1a002:	d816      	bhi.n	1a032 <ctrl_lrpa_get+0x32>
   1a004:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a008:	00d3      	lsls	r3, r2, #3
   1a00a:	4a0d      	ldr	r2, [pc, #52]	; (1a040 <ctrl_lrpa_get+0x40>)
   1a00c:	5cd3      	ldrb	r3, [r2, r3]
   1a00e:	f013 0f08 	tst.w	r3, #8
   1a012:	d010      	beq.n	1a036 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   1a014:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a018:	00d3      	lsls	r3, r2, #3
   1a01a:	4a09      	ldr	r2, [pc, #36]	; (1a040 <ctrl_lrpa_get+0x40>)
   1a01c:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1a01e:	f013 0f02 	tst.w	r3, #2
   1a022:	d00a      	beq.n	1a03a <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   1a024:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a028:	00c2      	lsls	r2, r0, #3
   1a02a:	4b05      	ldr	r3, [pc, #20]	; (1a040 <ctrl_lrpa_get+0x40>)
   1a02c:	4413      	add	r3, r2
   1a02e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1a030:	4770      	bx	lr
		return NULL;
   1a032:	2000      	movs	r0, #0
   1a034:	4770      	bx	lr
   1a036:	2000      	movs	r0, #0
   1a038:	4770      	bx	lr
   1a03a:	2000      	movs	r0, #0
}
   1a03c:	4770      	bx	lr
   1a03e:	bf00      	nop
   1a040:	20001e30 	.word	0x20001e30

0001a044 <ctrl_irks_get>:
	*count = peer_irk_count;
   1a044:	4b02      	ldr	r3, [pc, #8]	; (1a050 <ctrl_irks_get+0xc>)
   1a046:	781b      	ldrb	r3, [r3, #0]
   1a048:	7003      	strb	r3, [r0, #0]
}
   1a04a:	4802      	ldr	r0, [pc, #8]	; (1a054 <ctrl_irks_get+0x10>)
   1a04c:	4770      	bx	lr
   1a04e:	bf00      	nop
   1a050:	20001da4 	.word	0x20001da4
   1a054:	20001db0 	.word	0x20001db0

0001a058 <ctrl_rl_idx>:
	if (whitelist) {
   1a058:	b1c8      	cbz	r0, 1a08e <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1a05a:	2907      	cmp	r1, #7
   1a05c:	d80b      	bhi.n	1a076 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   1a05e:	4b17      	ldr	r3, [pc, #92]	; (1a0bc <ctrl_rl_idx+0x64>)
   1a060:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   1a064:	f013 0f01 	tst.w	r3, #1
   1a068:	d00b      	beq.n	1a082 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   1a06a:	4b14      	ldr	r3, [pc, #80]	; (1a0bc <ctrl_rl_idx+0x64>)
   1a06c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a070:	7849      	ldrb	r1, [r1, #1]
}
   1a072:	4608      	mov	r0, r1
   1a074:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1a076:	4040      	eors	r0, r0
   1a078:	f380 8811 	msr	BASEPRI, r0
   1a07c:	f04f 0004 	mov.w	r0, #4
   1a080:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1a082:	4040      	eors	r0, r0
   1a084:	f380 8811 	msr	BASEPRI, r0
   1a088:	f04f 0004 	mov.w	r0, #4
   1a08c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1a08e:	2907      	cmp	r1, #7
   1a090:	d80d      	bhi.n	1a0ae <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   1a092:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1a096:	00d3      	lsls	r3, r2, #3
   1a098:	4a09      	ldr	r2, [pc, #36]	; (1a0c0 <ctrl_rl_idx+0x68>)
   1a09a:	5cd3      	ldrb	r3, [r2, r3]
   1a09c:	f013 0f01 	tst.w	r3, #1
   1a0a0:	d1e7      	bne.n	1a072 <ctrl_rl_idx+0x1a>
   1a0a2:	4040      	eors	r0, r0
   1a0a4:	f380 8811 	msr	BASEPRI, r0
   1a0a8:	f04f 0004 	mov.w	r0, #4
   1a0ac:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1a0ae:	4040      	eors	r0, r0
   1a0b0:	f380 8811 	msr	BASEPRI, r0
   1a0b4:	f04f 0004 	mov.w	r0, #4
   1a0b8:	df02      	svc	2
   1a0ba:	bf00      	nop
   1a0bc:	20001fa8 	.word	0x20001fa8
   1a0c0:	20001e30 	.word	0x20001e30

0001a0c4 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a0c4:	4b11      	ldr	r3, [pc, #68]	; (1a10c <ctrl_rl_irk_idx+0x48>)
   1a0c6:	781b      	ldrb	r3, [r3, #0]
   1a0c8:	4283      	cmp	r3, r0
   1a0ca:	d90c      	bls.n	1a0e6 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   1a0cc:	4b10      	ldr	r3, [pc, #64]	; (1a110 <ctrl_rl_irk_idx+0x4c>)
   1a0ce:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a0d0:	2807      	cmp	r0, #7
   1a0d2:	d80e      	bhi.n	1a0f2 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   1a0d4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a0d8:	00d3      	lsls	r3, r2, #3
   1a0da:	4a0e      	ldr	r2, [pc, #56]	; (1a114 <ctrl_rl_irk_idx+0x50>)
   1a0dc:	5cd3      	ldrb	r3, [r2, r3]
   1a0de:	f013 0f01 	tst.w	r3, #1
   1a0e2:	d00c      	beq.n	1a0fe <ctrl_rl_irk_idx+0x3a>
}
   1a0e4:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a0e6:	4040      	eors	r0, r0
   1a0e8:	f380 8811 	msr	BASEPRI, r0
   1a0ec:	f04f 0004 	mov.w	r0, #4
   1a0f0:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a0f2:	4040      	eors	r0, r0
   1a0f4:	f380 8811 	msr	BASEPRI, r0
   1a0f8:	f04f 0004 	mov.w	r0, #4
   1a0fc:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1a0fe:	4040      	eors	r0, r0
   1a100:	f380 8811 	msr	BASEPRI, r0
   1a104:	f04f 0004 	mov.w	r0, #4
   1a108:	df02      	svc	2
   1a10a:	bf00      	nop
   1a10c:	20001da4 	.word	0x20001da4
   1a110:	20001da8 	.word	0x20001da8
   1a114:	20001e30 	.word	0x20001e30

0001a118 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1a118:	2807      	cmp	r0, #7
   1a11a:	d815      	bhi.n	1a148 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   1a11c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a120:	00d3      	lsls	r3, r2, #3
   1a122:	4a0a      	ldr	r2, [pc, #40]	; (1a14c <ctrl_irk_whitelisted+0x34>)
   1a124:	5cd3      	ldrb	r3, [r2, r3]
   1a126:	f013 0f01 	tst.w	r3, #1
   1a12a:	d007      	beq.n	1a13c <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   1a12c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a130:	00c3      	lsls	r3, r0, #3
   1a132:	4a06      	ldr	r2, [pc, #24]	; (1a14c <ctrl_irk_whitelisted+0x34>)
   1a134:	5cd0      	ldrb	r0, [r2, r3]
   1a136:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a13a:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1a13c:	4040      	eors	r0, r0
   1a13e:	f380 8811 	msr	BASEPRI, r0
   1a142:	f04f 0004 	mov.w	r0, #4
   1a146:	df02      	svc	2
		return false;
   1a148:	2000      	movs	r0, #0
}
   1a14a:	4770      	bx	lr
   1a14c:	20001e30 	.word	0x20001e30

0001a150 <ctrl_filter_get>:
	if (whitelist) {
   1a150:	b908      	cbnz	r0, 1a156 <ctrl_filter_get+0x6>
	return &rl_filter;
   1a152:	4802      	ldr	r0, [pc, #8]	; (1a15c <ctrl_filter_get+0xc>)
}
   1a154:	4770      	bx	lr
		return &wl_filter;
   1a156:	4802      	ldr	r0, [pc, #8]	; (1a160 <ctrl_filter_get+0x10>)
   1a158:	4770      	bx	lr
   1a15a:	bf00      	nop
   1a15c:	20001f74 	.word	0x20001f74
   1a160:	20001fe8 	.word	0x20001fe8

0001a164 <ll_wl_size_get>:
}
   1a164:	2008      	movs	r0, #8
   1a166:	4770      	bx	lr

0001a168 <ll_wl_clear>:
{
   1a168:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a16a:	f7fe fb47 	bl	187fc <radio_adv_filter_pol_get>
   1a16e:	b110      	cbz	r0, 1a176 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a170:	240c      	movs	r4, #12
}
   1a172:	4620      	mov	r0, r4
   1a174:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a176:	f7fe fb59 	bl	1882c <radio_scan_filter_pol_get>
   1a17a:	f010 0401 	ands.w	r4, r0, #1
   1a17e:	d001      	beq.n	1a184 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a180:	240c      	movs	r4, #12
   1a182:	e7f6      	b.n	1a172 <ll_wl_clear+0xa>
	wl_clear();
   1a184:	f7ff fdfe 	bl	19d84 <wl_clear>
	wl_anon = 0;
   1a188:	2200      	movs	r2, #0
   1a18a:	4b01      	ldr	r3, [pc, #4]	; (1a190 <ll_wl_clear+0x28>)
   1a18c:	701a      	strb	r2, [r3, #0]
	return 0;
   1a18e:	e7f0      	b.n	1a172 <ll_wl_clear+0xa>
   1a190:	20002f38 	.word	0x20002f38

0001a194 <ll_wl_remove>:
{
   1a194:	b510      	push	{r4, lr}
   1a196:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a198:	f7fe fb30 	bl	187fc <radio_adv_filter_pol_get>
   1a19c:	b108      	cbz	r0, 1a1a2 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a19e:	200c      	movs	r0, #12
   1a1a0:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a1a2:	f7fe fb43 	bl	1882c <radio_scan_filter_pol_get>
   1a1a6:	f010 0001 	ands.w	r0, r0, #1
   1a1aa:	d001      	beq.n	1a1b0 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1ac:	200c      	movs	r0, #12
}
   1a1ae:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   1a1b0:	7823      	ldrb	r3, [r4, #0]
   1a1b2:	2bff      	cmp	r3, #255	; 0xff
   1a1b4:	d003      	beq.n	1a1be <ll_wl_remove+0x2a>
	return wl_remove(addr);
   1a1b6:	4620      	mov	r0, r4
   1a1b8:	f7ff fe46 	bl	19e48 <wl_remove>
   1a1bc:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   1a1be:	2200      	movs	r2, #0
   1a1c0:	4b01      	ldr	r3, [pc, #4]	; (1a1c8 <ll_wl_remove+0x34>)
   1a1c2:	701a      	strb	r2, [r3, #0]
		return 0;
   1a1c4:	bd10      	pop	{r4, pc}
   1a1c6:	bf00      	nop
   1a1c8:	20002f38 	.word	0x20002f38

0001a1cc <ll_filters_adv_update>:
{
   1a1cc:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1a1ce:	b918      	cbnz	r0, 1a1d8 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   1a1d0:	4b09      	ldr	r3, [pc, #36]	; (1a1f8 <ll_filters_adv_update+0x2c>)
   1a1d2:	781b      	ldrb	r3, [r3, #0]
   1a1d4:	b943      	cbnz	r3, 1a1e8 <ll_filters_adv_update+0x1c>
   1a1d6:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1a1d8:	f7fe fb28 	bl	1882c <radio_scan_filter_pol_get>
   1a1dc:	f010 0f01 	tst.w	r0, #1
   1a1e0:	d1f6      	bne.n	1a1d0 <ll_filters_adv_update+0x4>
		filter_wl_update();
   1a1e2:	f7ff fe6f 	bl	19ec4 <filter_wl_update>
   1a1e6:	e7f3      	b.n	1a1d0 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   1a1e8:	f7fe fb18 	bl	1881c <radio_scan_is_enabled>
   1a1ec:	2800      	cmp	r0, #0
   1a1ee:	d1f2      	bne.n	1a1d6 <ll_filters_adv_update+0xa>
		filter_rl_update();
   1a1f0:	f7ff fea8 	bl	19f44 <filter_rl_update>
}
   1a1f4:	e7ef      	b.n	1a1d6 <ll_filters_adv_update+0xa>
   1a1f6:	bf00      	nop
   1a1f8:	20001f70 	.word	0x20001f70

0001a1fc <ll_filters_scan_update>:
{
   1a1fc:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1a1fe:	f010 0f01 	tst.w	r0, #1
   1a202:	d103      	bne.n	1a20c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   1a204:	4b08      	ldr	r3, [pc, #32]	; (1a228 <ll_filters_scan_update+0x2c>)
   1a206:	781b      	ldrb	r3, [r3, #0]
   1a208:	b93b      	cbnz	r3, 1a21a <ll_filters_scan_update+0x1e>
   1a20a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1a20c:	f7fe faf6 	bl	187fc <radio_adv_filter_pol_get>
   1a210:	2800      	cmp	r0, #0
   1a212:	d1f7      	bne.n	1a204 <ll_filters_scan_update+0x8>
		filter_wl_update();
   1a214:	f7ff fe56 	bl	19ec4 <filter_wl_update>
   1a218:	e7f4      	b.n	1a204 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   1a21a:	f7fe fae7 	bl	187ec <radio_adv_is_enabled>
   1a21e:	2800      	cmp	r0, #0
   1a220:	d1f3      	bne.n	1a20a <ll_filters_scan_update+0xe>
		filter_rl_update();
   1a222:	f7ff fe8f 	bl	19f44 <filter_rl_update>
}
   1a226:	e7f0      	b.n	1a20a <ll_filters_scan_update+0xe>
   1a228:	20001f70 	.word	0x20001f70

0001a22c <ll_rl_find>:
{
   1a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a230:	4607      	mov	r7, r0
   1a232:	4688      	mov	r8, r1
	if (free) {
   1a234:	4616      	mov	r6, r2
   1a236:	b10a      	cbz	r2, 1a23c <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   1a238:	23ff      	movs	r3, #255	; 0xff
   1a23a:	7013      	strb	r3, [r2, #0]
{
   1a23c:	2400      	movs	r4, #0
   1a23e:	e00e      	b.n	1a25e <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a240:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a244:	00d3      	lsls	r3, r2, #3
   1a246:	481a      	ldr	r0, [pc, #104]	; (1a2b0 <ll_rl_find+0x84>)
   1a248:	4418      	add	r0, r3
   1a24a:	2206      	movs	r2, #6
   1a24c:	4641      	mov	r1, r8
   1a24e:	3001      	adds	r0, #1
   1a250:	f010 fb62 	bl	2a918 <memcmp>
   1a254:	b9c8      	cbnz	r0, 1a28a <ll_rl_find+0x5e>
   1a256:	e027      	b.n	1a2a8 <ll_rl_find+0x7c>
			*free = i;
   1a258:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a25a:	3401      	adds	r4, #1
   1a25c:	b2e4      	uxtb	r4, r4
   1a25e:	2c07      	cmp	r4, #7
   1a260:	d821      	bhi.n	1a2a6 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a262:	4625      	mov	r5, r4
   1a264:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a268:	00d3      	lsls	r3, r2, #3
   1a26a:	4a11      	ldr	r2, [pc, #68]	; (1a2b0 <ll_rl_find+0x84>)
   1a26c:	5cd3      	ldrb	r3, [r2, r3]
   1a26e:	f013 0f01 	tst.w	r3, #1
   1a272:	d00a      	beq.n	1a28a <ll_rl_find+0x5e>
   1a274:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a278:	00d3      	lsls	r3, r2, #3
   1a27a:	4a0d      	ldr	r2, [pc, #52]	; (1a2b0 <ll_rl_find+0x84>)
   1a27c:	5cd3      	ldrb	r3, [r2, r3]
   1a27e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a282:	f007 0201 	and.w	r2, r7, #1
   1a286:	4293      	cmp	r3, r2
   1a288:	d0da      	beq.n	1a240 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a28a:	2e00      	cmp	r6, #0
   1a28c:	d0e5      	beq.n	1a25a <ll_rl_find+0x2e>
   1a28e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a292:	00eb      	lsls	r3, r5, #3
   1a294:	4a06      	ldr	r2, [pc, #24]	; (1a2b0 <ll_rl_find+0x84>)
   1a296:	5cd3      	ldrb	r3, [r2, r3]
   1a298:	f013 0f01 	tst.w	r3, #1
   1a29c:	d1dd      	bne.n	1a25a <ll_rl_find+0x2e>
   1a29e:	7833      	ldrb	r3, [r6, #0]
   1a2a0:	2bff      	cmp	r3, #255	; 0xff
   1a2a2:	d1da      	bne.n	1a25a <ll_rl_find+0x2e>
   1a2a4:	e7d8      	b.n	1a258 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   1a2a6:	24ff      	movs	r4, #255	; 0xff
}
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2ae:	bf00      	nop
   1a2b0:	20001e30 	.word	0x20001e30

0001a2b4 <wl_add>:
{
   1a2b4:	b570      	push	{r4, r5, r6, lr}
   1a2b6:	b082      	sub	sp, #8
   1a2b8:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1a2ba:	4604      	mov	r4, r0
   1a2bc:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a2c0:	f10d 0207 	add.w	r2, sp, #7
   1a2c4:	4621      	mov	r1, r4
   1a2c6:	f7ff fd87 	bl	19dd8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1a2ca:	2807      	cmp	r0, #7
   1a2cc:	d802      	bhi.n	1a2d4 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   1a2ce:	2012      	movs	r0, #18
}
   1a2d0:	b002      	add	sp, #8
   1a2d2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   1a2d4:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1a2d8:	2e07      	cmp	r6, #7
   1a2da:	d901      	bls.n	1a2e0 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a2dc:	2007      	movs	r0, #7
   1a2de:	e7f7      	b.n	1a2d0 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1a2e0:	4629      	mov	r1, r5
   1a2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a2e6:	4817      	ldr	r0, [pc, #92]	; (1a344 <wl_add+0x90>)
   1a2e8:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   1a2ec:	f362 0341 	bfi	r3, r2, #1, #1
   1a2f0:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1a2f4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   1a2f8:	2206      	movs	r2, #6
   1a2fa:	3002      	adds	r0, #2
   1a2fc:	f7e5 ffe0 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a300:	2200      	movs	r2, #0
   1a302:	4621      	mov	r1, r4
   1a304:	7828      	ldrb	r0, [r5, #0]
   1a306:	f7ff ff91 	bl	1a22c <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1a30a:	2807      	cmp	r0, #7
   1a30c:	d814      	bhi.n	1a338 <wl_add+0x84>
		wl[i].rl_idx = j;
   1a30e:	4b0d      	ldr	r3, [pc, #52]	; (1a344 <wl_add+0x90>)
   1a310:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1a314:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1a316:	490c      	ldr	r1, [pc, #48]	; (1a348 <wl_add+0x94>)
   1a318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a31c:	00c3      	lsls	r3, r0, #3
   1a31e:	5cca      	ldrb	r2, [r1, r3]
   1a320:	f042 0220 	orr.w	r2, r2, #32
   1a324:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   1a326:	4a07      	ldr	r2, [pc, #28]	; (1a344 <wl_add+0x90>)
   1a328:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   1a32c:	f043 0301 	orr.w	r3, r3, #1
   1a330:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   1a334:	2000      	movs	r0, #0
   1a336:	e7cb      	b.n	1a2d0 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1a338:	4b02      	ldr	r3, [pc, #8]	; (1a344 <wl_add+0x90>)
   1a33a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1a33e:	22ff      	movs	r2, #255	; 0xff
   1a340:	705a      	strb	r2, [r3, #1]
   1a342:	e7f0      	b.n	1a326 <wl_add+0x72>
   1a344:	20001fa8 	.word	0x20001fa8
   1a348:	20001e30 	.word	0x20001e30

0001a34c <ll_wl_add>:
{
   1a34c:	b510      	push	{r4, lr}
   1a34e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a350:	f7fe fa54 	bl	187fc <radio_adv_filter_pol_get>
   1a354:	b108      	cbz	r0, 1a35a <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a356:	200c      	movs	r0, #12
   1a358:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1a35a:	f7fe fa67 	bl	1882c <radio_scan_filter_pol_get>
   1a35e:	f010 0001 	ands.w	r0, r0, #1
   1a362:	d001      	beq.n	1a368 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a364:	200c      	movs	r0, #12
}
   1a366:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   1a368:	7823      	ldrb	r3, [r4, #0]
   1a36a:	2bff      	cmp	r3, #255	; 0xff
   1a36c:	d003      	beq.n	1a376 <ll_wl_add+0x2a>
	return wl_add(addr);
   1a36e:	4620      	mov	r0, r4
   1a370:	f7ff ffa0 	bl	1a2b4 <wl_add>
   1a374:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   1a376:	2201      	movs	r2, #1
   1a378:	4b01      	ldr	r3, [pc, #4]	; (1a380 <ll_wl_add+0x34>)
   1a37a:	701a      	strb	r2, [r3, #0]
		return 0;
   1a37c:	bd10      	pop	{r4, pc}
   1a37e:	bf00      	nop
   1a380:	20002f38 	.word	0x20002f38

0001a384 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1a384:	4b17      	ldr	r3, [pc, #92]	; (1a3e4 <ctrl_rl_idx_allowed+0x60>)
   1a386:	781b      	ldrb	r3, [r3, #0]
   1a388:	b32b      	cbz	r3, 1a3d6 <ctrl_rl_idx_allowed+0x52>
   1a38a:	2907      	cmp	r1, #7
   1a38c:	d825      	bhi.n	1a3da <ctrl_rl_idx_allowed+0x56>
   1a38e:	bb30      	cbnz	r0, 1a3de <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   1a390:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1a394:	00d3      	lsls	r3, r2, #3
   1a396:	4a14      	ldr	r2, [pc, #80]	; (1a3e8 <ctrl_rl_idx_allowed+0x64>)
   1a398:	5cd3      	ldrb	r3, [r2, r3]
   1a39a:	f013 0f01 	tst.w	r3, #1
   1a39e:	d010      	beq.n	1a3c2 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1a3a0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1a3a4:	00d3      	lsls	r3, r2, #3
   1a3a6:	4a10      	ldr	r2, [pc, #64]	; (1a3e8 <ctrl_rl_idx_allowed+0x64>)
   1a3a8:	5cd3      	ldrb	r3, [r2, r3]
   1a3aa:	f013 0f04 	tst.w	r3, #4
   1a3ae:	d00e      	beq.n	1a3ce <ctrl_rl_idx_allowed+0x4a>
   1a3b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1a3b4:	00cb      	lsls	r3, r1, #3
   1a3b6:	5cd3      	ldrb	r3, [r2, r3]
   1a3b8:	f013 0f10 	tst.w	r3, #16
   1a3bc:	d009      	beq.n	1a3d2 <ctrl_rl_idx_allowed+0x4e>
   1a3be:	2001      	movs	r0, #1
   1a3c0:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1a3c2:	4040      	eors	r0, r0
   1a3c4:	f380 8811 	msr	BASEPRI, r0
   1a3c8:	f04f 0004 	mov.w	r0, #4
   1a3cc:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1a3ce:	2001      	movs	r0, #1
   1a3d0:	4770      	bx	lr
   1a3d2:	2000      	movs	r0, #0
   1a3d4:	4770      	bx	lr
		return true;
   1a3d6:	2001      	movs	r0, #1
   1a3d8:	4770      	bx	lr
   1a3da:	2001      	movs	r0, #1
   1a3dc:	4770      	bx	lr
   1a3de:	2001      	movs	r0, #1
}
   1a3e0:	4770      	bx	lr
   1a3e2:	bf00      	nop
   1a3e4:	20001f70 	.word	0x20001f70
   1a3e8:	20001e30 	.word	0x20001e30

0001a3ec <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1a3ec:	2807      	cmp	r0, #7
   1a3ee:	d81a      	bhi.n	1a426 <ll_rl_id_addr_get+0x3a>
{
   1a3f0:	b570      	push	{r4, r5, r6, lr}
   1a3f2:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   1a3f4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   1a3f8:	00ec      	lsls	r4, r5, #3
   1a3fa:	4811      	ldr	r0, [pc, #68]	; (1a440 <ll_rl_id_addr_get+0x54>)
   1a3fc:	5d00      	ldrb	r0, [r0, r4]
   1a3fe:	f010 0f01 	tst.w	r0, #1
   1a402:	d016      	beq.n	1a432 <ll_rl_id_addr_get+0x46>
   1a404:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   1a406:	4d0e      	ldr	r5, [pc, #56]	; (1a440 <ll_rl_id_addr_get+0x54>)
   1a408:	009c      	lsls	r4, r3, #2
   1a40a:	18e6      	adds	r6, r4, r3
   1a40c:	00f2      	lsls	r2, r6, #3
   1a40e:	4616      	mov	r6, r2
   1a410:	5caa      	ldrb	r2, [r5, r2]
   1a412:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1a416:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1a418:	4631      	mov	r1, r6
   1a41a:	4429      	add	r1, r5
   1a41c:	2206      	movs	r2, #6
   1a41e:	3101      	adds	r1, #1
   1a420:	f7e5 ff4e 	bl	2c0 <memcpy>
   1a424:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1a426:	4040      	eors	r0, r0
   1a428:	f380 8811 	msr	BASEPRI, r0
   1a42c:	f04f 0004 	mov.w	r0, #4
   1a430:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   1a432:	4040      	eors	r0, r0
   1a434:	f380 8811 	msr	BASEPRI, r0
   1a438:	f04f 0004 	mov.w	r0, #4
   1a43c:	df02      	svc	2
   1a43e:	bf00      	nop
   1a440:	20001e30 	.word	0x20001e30

0001a444 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a444:	4b29      	ldr	r3, [pc, #164]	; (1a4ec <ctrl_rl_addr_allowed+0xa8>)
   1a446:	781b      	ldrb	r3, [r3, #0]
   1a448:	2b00      	cmp	r3, #0
   1a44a:	d04a      	beq.n	1a4e2 <ctrl_rl_addr_allowed+0x9e>
   1a44c:	7813      	ldrb	r3, [r2, #0]
   1a44e:	2bff      	cmp	r3, #255	; 0xff
   1a450:	d001      	beq.n	1a456 <ctrl_rl_addr_allowed+0x12>
		return true;
   1a452:	2001      	movs	r0, #1
   1a454:	4770      	bx	lr
   1a456:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a458:	2b07      	cmp	r3, #7
   1a45a:	d844      	bhi.n	1a4e6 <ctrl_rl_addr_allowed+0xa2>
{
   1a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a45e:	e005      	b.n	1a46c <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   1a460:	2c06      	cmp	r4, #6
   1a462:	d026      	beq.n	1a4b2 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a464:	3301      	adds	r3, #1
   1a466:	b2db      	uxtb	r3, r3
   1a468:	2b07      	cmp	r3, #7
   1a46a:	d838      	bhi.n	1a4de <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a46c:	461e      	mov	r6, r3
   1a46e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1a472:	00ec      	lsls	r4, r5, #3
   1a474:	4d1e      	ldr	r5, [pc, #120]	; (1a4f0 <ctrl_rl_addr_allowed+0xac>)
   1a476:	5d2c      	ldrb	r4, [r5, r4]
   1a478:	f014 0f01 	tst.w	r4, #1
   1a47c:	d0f2      	beq.n	1a464 <ctrl_rl_addr_allowed+0x20>
   1a47e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1a482:	00ec      	lsls	r4, r5, #3
   1a484:	4d1a      	ldr	r5, [pc, #104]	; (1a4f0 <ctrl_rl_addr_allowed+0xac>)
   1a486:	5d2c      	ldrb	r4, [r5, r4]
   1a488:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1a48c:	4284      	cmp	r4, r0
   1a48e:	d1e9      	bne.n	1a464 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   1a490:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1a494:	00ec      	lsls	r4, r5, #3
   1a496:	4d16      	ldr	r5, [pc, #88]	; (1a4f0 <ctrl_rl_addr_allowed+0xac>)
   1a498:	4425      	add	r5, r4
   1a49a:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   1a49c:	2400      	movs	r4, #0
   1a49e:	2c05      	cmp	r4, #5
   1a4a0:	d8de      	bhi.n	1a460 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   1a4a2:	f815 e004 	ldrb.w	lr, [r5, r4]
   1a4a6:	5d0f      	ldrb	r7, [r1, r4]
   1a4a8:	45be      	cmp	lr, r7
   1a4aa:	d1d9      	bne.n	1a460 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1a4ac:	3401      	adds	r4, #1
   1a4ae:	b2e4      	uxtb	r4, r4
   1a4b0:	e7f5      	b.n	1a49e <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   1a4b2:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1a4b4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   1a4b8:	00d3      	lsls	r3, r2, #3
   1a4ba:	4a0d      	ldr	r2, [pc, #52]	; (1a4f0 <ctrl_rl_addr_allowed+0xac>)
   1a4bc:	5cd3      	ldrb	r3, [r2, r3]
   1a4be:	f013 0f04 	tst.w	r3, #4
   1a4c2:	d00a      	beq.n	1a4da <ctrl_rl_addr_allowed+0x96>
   1a4c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1a4c8:	00f3      	lsls	r3, r6, #3
   1a4ca:	5cd3      	ldrb	r3, [r2, r3]
   1a4cc:	f013 0f10 	tst.w	r3, #16
   1a4d0:	d101      	bne.n	1a4d6 <ctrl_rl_addr_allowed+0x92>
   1a4d2:	2000      	movs	r0, #0
   1a4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4d6:	2001      	movs	r0, #1
   1a4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4da:	2001      	movs	r0, #1
   1a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   1a4de:	2001      	movs	r0, #1
   1a4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   1a4e2:	2001      	movs	r0, #1
   1a4e4:	4770      	bx	lr
	return true;
   1a4e6:	2001      	movs	r0, #1
}
   1a4e8:	4770      	bx	lr
   1a4ea:	bf00      	nop
   1a4ec:	20001f70 	.word	0x20001f70
   1a4f0:	20001e30 	.word	0x20001e30

0001a4f4 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1a4f4:	4b13      	ldr	r3, [pc, #76]	; (1a544 <ctrl_rl_addr_resolve+0x50>)
   1a4f6:	781b      	ldrb	r3, [r3, #0]
   1a4f8:	b1db      	cbz	r3, 1a532 <ctrl_rl_addr_resolve+0x3e>
   1a4fa:	2a07      	cmp	r2, #7
   1a4fc:	d81b      	bhi.n	1a536 <ctrl_rl_addr_resolve+0x42>
{
   1a4fe:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1a500:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a504:	00e3      	lsls	r3, r4, #3
   1a506:	4c10      	ldr	r4, [pc, #64]	; (1a548 <ctrl_rl_addr_resolve+0x54>)
   1a508:	5ce3      	ldrb	r3, [r4, r3]
   1a50a:	f013 0f08 	tst.w	r3, #8
   1a50e:	d014      	beq.n	1a53a <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1a510:	b1a8      	cbz	r0, 1a53e <ctrl_rl_addr_resolve+0x4a>
   1a512:	794b      	ldrb	r3, [r1, #5]
   1a514:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a518:	2b40      	cmp	r3, #64	; 0x40
   1a51a:	d001      	beq.n	1a520 <ctrl_rl_addr_resolve+0x2c>
	return false;
   1a51c:	2000      	movs	r0, #0
}
   1a51e:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1a520:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a524:	00d3      	lsls	r3, r2, #3
   1a526:	4620      	mov	r0, r4
   1a528:	4418      	add	r0, r3
   1a52a:	3007      	adds	r0, #7
   1a52c:	f7ea fbc7 	bl	4cbe <bt_rpa_irk_matches>
   1a530:	bd10      	pop	{r4, pc}
		return false;
   1a532:	2000      	movs	r0, #0
   1a534:	4770      	bx	lr
   1a536:	2000      	movs	r0, #0
   1a538:	4770      	bx	lr
   1a53a:	2000      	movs	r0, #0
   1a53c:	bd10      	pop	{r4, pc}
	return false;
   1a53e:	2000      	movs	r0, #0
   1a540:	bd10      	pop	{r4, pc}
   1a542:	bf00      	nop
   1a544:	20001f70 	.word	0x20001f70
   1a548:	20001e30 	.word	0x20001e30

0001a54c <ctrl_rl_enabled>:
	return rl_enable;
   1a54c:	4b02      	ldr	r3, [pc, #8]	; (1a558 <ctrl_rl_enabled+0xc>)
   1a54e:	7818      	ldrb	r0, [r3, #0]
}
   1a550:	3000      	adds	r0, #0
   1a552:	bf18      	it	ne
   1a554:	2001      	movne	r0, #1
   1a556:	4770      	bx	lr
   1a558:	20001f70 	.word	0x20001f70

0001a55c <ll_rl_pdu_adv_update>:
{
   1a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a55e:	4605      	mov	r5, r0
   1a560:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   1a562:	780b      	ldrb	r3, [r1, #0]
   1a564:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   1a568:	2b04      	cmp	r3, #4
   1a56a:	d024      	beq.n	1a5b6 <ll_rl_pdu_adv_update+0x5a>
   1a56c:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1a56e:	f000 fbc5 	bl	1acfc <ll_adv_set_get>
   1a572:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1a574:	2d07      	cmp	r5, #7
   1a576:	d826      	bhi.n	1a5c6 <ll_rl_pdu_adv_update+0x6a>
   1a578:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a57c:	00d3      	lsls	r3, r2, #3
   1a57e:	4a30      	ldr	r2, [pc, #192]	; (1a640 <ll_rl_pdu_adv_update+0xe4>)
   1a580:	5cd3      	ldrb	r3, [r2, r3]
   1a582:	f013 0f08 	tst.w	r3, #8
   1a586:	d01e      	beq.n	1a5c6 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   1a588:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a58c:	00d3      	lsls	r3, r2, #3
   1a58e:	4a2c      	ldr	r2, [pc, #176]	; (1a640 <ll_rl_pdu_adv_update+0xe4>)
   1a590:	5cd3      	ldrb	r3, [r2, r3]
   1a592:	f013 0f02 	tst.w	r3, #2
   1a596:	d010      	beq.n	1a5ba <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   1a598:	7823      	ldrb	r3, [r4, #0]
   1a59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a59e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1a5a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a5a4:	00da      	lsls	r2, r3, #3
   1a5a6:	4b26      	ldr	r3, [pc, #152]	; (1a640 <ll_rl_pdu_adv_update+0xe4>)
   1a5a8:	4413      	add	r3, r2
   1a5aa:	2206      	movs	r2, #6
   1a5ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a5ae:	4638      	mov	r0, r7
   1a5b0:	f7e5 fe86 	bl	2c0 <memcpy>
   1a5b4:	e014      	b.n	1a5e0 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   1a5b6:	1c8f      	adds	r7, r1, #2
   1a5b8:	e7d9      	b.n	1a56e <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   1a5ba:	4040      	eors	r0, r0
   1a5bc:	f380 8811 	msr	BASEPRI, r0
   1a5c0:	f04f 0004 	mov.w	r0, #4
   1a5c4:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1a5c6:	7833      	ldrb	r3, [r6, #0]
   1a5c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
   1a5cc:	7822      	ldrb	r2, [r4, #0]
   1a5ce:	f363 1286 	bfi	r2, r3, #6, #1
   1a5d2:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1a5d4:	7830      	ldrb	r0, [r6, #0]
   1a5d6:	4639      	mov	r1, r7
   1a5d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a5dc:	f7ff fba0 	bl	19d20 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a5e0:	7823      	ldrb	r3, [r4, #0]
   1a5e2:	f003 030f 	and.w	r3, r3, #15
   1a5e6:	2b01      	cmp	r3, #1
   1a5e8:	d000      	beq.n	1a5ec <ll_rl_pdu_adv_update+0x90>
   1a5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1a5ec:	2d07      	cmp	r5, #7
   1a5ee:	d807      	bhi.n	1a600 <ll_rl_pdu_adv_update+0xa4>
   1a5f0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a5f4:	00d3      	lsls	r3, r2, #3
   1a5f6:	4a12      	ldr	r2, [pc, #72]	; (1a640 <ll_rl_pdu_adv_update+0xe4>)
   1a5f8:	5cd3      	ldrb	r3, [r2, r3]
   1a5fa:	f013 0f04 	tst.w	r3, #4
   1a5fe:	d10d      	bne.n	1a61c <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   1a600:	4631      	mov	r1, r6
   1a602:	f811 3b02 	ldrb.w	r3, [r1], #2
   1a606:	09db      	lsrs	r3, r3, #7
   1a608:	7822      	ldrb	r2, [r4, #0]
   1a60a:	f363 12c7 	bfi	r2, r3, #7, #1
   1a60e:	4620      	mov	r0, r4
   1a610:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1a614:	2206      	movs	r2, #6
   1a616:	f7e5 fe53 	bl	2c0 <memcpy>
}
   1a61a:	e7e6      	b.n	1a5ea <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   1a61c:	7823      	ldrb	r3, [r4, #0]
   1a61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a622:	4620      	mov	r0, r4
   1a624:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   1a628:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a62c:	00eb      	lsls	r3, r5, #3
   1a62e:	3318      	adds	r3, #24
   1a630:	4611      	mov	r1, r2
   1a632:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1a634:	2206      	movs	r2, #6
   1a636:	4411      	add	r1, r2
   1a638:	f7e5 fe42 	bl	2c0 <memcpy>
   1a63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a63e:	bf00      	nop
   1a640:	20001e30 	.word	0x20001e30

0001a644 <rpa_adv_refresh>:
{
   1a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   1a648:	f000 fb58 	bl	1acfc <ll_adv_set_get>
   1a64c:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1a64e:	7803      	ldrb	r3, [r0, #0]
   1a650:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a654:	2b40      	cmp	r3, #64	; 0x40
   1a656:	d003      	beq.n	1a660 <rpa_adv_refresh+0x1c>
   1a658:	2b60      	cmp	r3, #96	; 0x60
   1a65a:	d001      	beq.n	1a660 <rpa_adv_refresh+0x1c>
   1a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1a660:	f7fe f8bc 	bl	187dc <radio_adv_data_get>
   1a664:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a666:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a66a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a66e:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a672:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1a674:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a678:	429d      	cmp	r5, r3
   1a67a:	d02d      	beq.n	1a6d8 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a67c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a680:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a684:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a688:	5ca0      	ldrb	r0, [r4, r2]
   1a68a:	5ce1      	ldrb	r1, [r4, r3]
   1a68c:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   1a690:	f36f 1104 	bfc	r1, #4, #1
   1a694:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   1a696:	5ca2      	ldrb	r2, [r4, r2]
   1a698:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1a69c:	b2c9      	uxtb	r1, r1
   1a69e:	f362 1145 	bfi	r1, r2, #5, #1
   1a6a2:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1a6a4:	4631      	mov	r1, r6
   1a6a6:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a6aa:	2200      	movs	r2, #0
   1a6ac:	09c0      	lsrs	r0, r0, #7
   1a6ae:	f7ff fdbd 	bl	1a22c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1a6b2:	2807      	cmp	r0, #7
   1a6b4:	d816      	bhi.n	1a6e4 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   1a6b6:	4641      	mov	r1, r8
   1a6b8:	f7ff ff50 	bl	1a55c <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1a6bc:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   1a6be:	3a06      	subs	r2, #6
   1a6c0:	f107 0108 	add.w	r1, r7, #8
   1a6c4:	f108 0008 	add.w	r0, r8, #8
   1a6c8:	f7e5 fdfa 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   1a6cc:	787b      	ldrb	r3, [r7, #1]
   1a6ce:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1a6d2:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a6d6:	e7c1      	b.n	1a65c <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   1a6d8:	3501      	adds	r5, #1
   1a6da:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a6dc:	2d02      	cmp	r5, #2
   1a6de:	d1cd      	bne.n	1a67c <rpa_adv_refresh+0x38>
			last = 0;
   1a6e0:	2500      	movs	r5, #0
   1a6e2:	e7cb      	b.n	1a67c <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1a6e4:	4040      	eors	r0, r0
   1a6e6:	f380 8811 	msr	BASEPRI, r0
   1a6ea:	f04f 0004 	mov.w	r0, #4
   1a6ee:	df02      	svc	2

0001a6f0 <ll_rl_rpa_update>:
{
   1a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6f4:	b085      	sub	sp, #20
   1a6f6:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1a6f8:	f00f fa44 	bl	29b84 <_impl_k_uptime_get>
   1a6fc:	4606      	mov	r6, r0
   1a6fe:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   1a700:	f1b9 0f00 	cmp.w	r9, #0
   1a704:	d115      	bne.n	1a732 <ll_rl_rpa_update+0x42>
   1a706:	4b57      	ldr	r3, [pc, #348]	; (1a864 <ll_rl_rpa_update+0x174>)
   1a708:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a70c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a710:	bf08      	it	eq
   1a712:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1a716:	d010      	beq.n	1a73a <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a718:	1a30      	subs	r0, r6, r0
   1a71a:	eb67 0101 	sbc.w	r1, r7, r1
   1a71e:	4b52      	ldr	r3, [pc, #328]	; (1a868 <ll_rl_rpa_update+0x178>)
   1a720:	681a      	ldr	r2, [r3, #0]
   1a722:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1a724:	4290      	cmp	r0, r2
   1a726:	eb71 0303 	sbcs.w	r3, r1, r3
   1a72a:	db09      	blt.n	1a740 <ll_rl_rpa_update+0x50>
   1a72c:	f04f 0801 	mov.w	r8, #1
   1a730:	e001      	b.n	1a736 <ll_rl_rpa_update+0x46>
   1a732:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a736:	2400      	movs	r4, #0
   1a738:	e02a      	b.n	1a790 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a73a:	f04f 0801 	mov.w	r8, #1
   1a73e:	e7fa      	b.n	1a736 <ll_rl_rpa_update+0x46>
   1a740:	f04f 0800 	mov.w	r8, #0
   1a744:	e7f7      	b.n	1a736 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a746:	7818      	ldrb	r0, [r3, #0]
   1a748:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1a74a:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a74c:	3b01      	subs	r3, #1
   1a74e:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1a750:	2a00      	cmp	r2, #0
   1a752:	d1f8      	bne.n	1a746 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a754:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a758:	00d3      	lsls	r3, r2, #3
   1a75a:	3318      	adds	r3, #24
   1a75c:	4943      	ldr	r1, [pc, #268]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a75e:	4419      	add	r1, r3
   1a760:	3106      	adds	r1, #6
   1a762:	4668      	mov	r0, sp
   1a764:	f7ea fabf 	bl	4ce6 <bt_rpa_create>
				LL_ASSERT(!err);
   1a768:	2800      	cmp	r0, #0
   1a76a:	d13c      	bne.n	1a7e6 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1a76c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a770:	00d3      	lsls	r3, r2, #3
   1a772:	4a3e      	ldr	r2, [pc, #248]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a774:	5cd3      	ldrb	r3, [r2, r3]
   1a776:	f013 0f08 	tst.w	r3, #8
   1a77a:	d13a      	bne.n	1a7f2 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1a77c:	493b      	ldr	r1, [pc, #236]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a77e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a782:	00eb      	lsls	r3, r5, #3
   1a784:	5cca      	ldrb	r2, [r1, r3]
   1a786:	f042 0202 	orr.w	r2, r2, #2
   1a78a:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a78c:	3401      	adds	r4, #1
   1a78e:	b2e4      	uxtb	r4, r4
   1a790:	2c07      	cmp	r4, #7
   1a792:	d854      	bhi.n	1a83e <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a794:	4625      	mov	r5, r4
   1a796:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a79a:	00d3      	lsls	r3, r2, #3
   1a79c:	4a33      	ldr	r2, [pc, #204]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a79e:	5cd3      	ldrb	r3, [r2, r3]
   1a7a0:	f013 0f01 	tst.w	r3, #1
   1a7a4:	d0f2      	beq.n	1a78c <ll_rl_rpa_update+0x9c>
   1a7a6:	f1b8 0f00 	cmp.w	r8, #0
   1a7aa:	d107      	bne.n	1a7bc <ll_rl_rpa_update+0xcc>
   1a7ac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a7b0:	00d3      	lsls	r3, r2, #3
   1a7b2:	4a2e      	ldr	r2, [pc, #184]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a7b4:	5cd3      	ldrb	r3, [r2, r3]
   1a7b6:	f013 0f02 	tst.w	r3, #2
   1a7ba:	d1e7      	bne.n	1a78c <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   1a7bc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a7c0:	00d3      	lsls	r3, r2, #3
   1a7c2:	4a2a      	ldr	r2, [pc, #168]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a7c4:	5cd3      	ldrb	r3, [r2, r3]
   1a7c6:	f013 0f04 	tst.w	r3, #4
   1a7ca:	d0cf      	beq.n	1a76c <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1a7cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a7d0:	00da      	lsls	r2, r3, #3
   1a7d2:	4b26      	ldr	r3, [pc, #152]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a7d4:	4413      	add	r3, r2
   1a7d6:	7dda      	ldrb	r2, [r3, #23]
   1a7d8:	4b25      	ldr	r3, [pc, #148]	; (1a870 <ll_rl_rpa_update+0x180>)
   1a7da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   1a7de:	330f      	adds	r3, #15
   1a7e0:	2210      	movs	r2, #16
   1a7e2:	4669      	mov	r1, sp
   1a7e4:	e7b4      	b.n	1a750 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1a7e6:	4040      	eors	r0, r0
   1a7e8:	f380 8811 	msr	BASEPRI, r0
   1a7ec:	f04f 0004 	mov.w	r0, #4
   1a7f0:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a7f2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a7f6:	00d3      	lsls	r3, r2, #3
   1a7f8:	481c      	ldr	r0, [pc, #112]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a7fa:	4418      	add	r0, r3
   1a7fc:	4669      	mov	r1, sp
   1a7fe:	3007      	adds	r0, #7
   1a800:	f7ea fa71 	bl	4ce6 <bt_rpa_create>
				LL_ASSERT(!err);
   1a804:	b9a8      	cbnz	r0, 1a832 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1a806:	00ab      	lsls	r3, r5, #2
   1a808:	442b      	add	r3, r5
   1a80a:	00da      	lsls	r2, r3, #3
   1a80c:	4b17      	ldr	r3, [pc, #92]	; (1a86c <ll_rl_rpa_update+0x17c>)
   1a80e:	eb03 0a02 	add.w	sl, r3, r2
   1a812:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1a816:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1a81a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1a81e:	4b15      	ldr	r3, [pc, #84]	; (1a874 <ll_rl_rpa_update+0x184>)
   1a820:	449b      	add	fp, r3
   1a822:	2206      	movs	r2, #6
   1a824:	4669      	mov	r1, sp
   1a826:	4658      	mov	r0, fp
   1a828:	f7e5 fd4a 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a82c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   1a830:	e7a4      	b.n	1a77c <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1a832:	4040      	eors	r0, r0
   1a834:	f380 8811 	msr	BASEPRI, r0
   1a838:	f04f 0004 	mov.w	r0, #4
   1a83c:	df02      	svc	2
	if (all) {
   1a83e:	f1b8 0f00 	cmp.w	r8, #0
   1a842:	d002      	beq.n	1a84a <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1a844:	4b07      	ldr	r3, [pc, #28]	; (1a864 <ll_rl_rpa_update+0x174>)
   1a846:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1a84a:	f1b9 0f00 	cmp.w	r9, #0
   1a84e:	d102      	bne.n	1a856 <ll_rl_rpa_update+0x166>
}
   1a850:	b005      	add	sp, #20
   1a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1a856:	f7fd ffc9 	bl	187ec <radio_adv_is_enabled>
   1a85a:	2800      	cmp	r0, #0
   1a85c:	d0f8      	beq.n	1a850 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1a85e:	f7ff fef1 	bl	1a644 <rpa_adv_refresh>
}
   1a862:	e7f5      	b.n	1a850 <ll_rl_rpa_update+0x160>
   1a864:	20002f30 	.word	0x20002f30
   1a868:	200030dc 	.word	0x200030dc
   1a86c:	20001e30 	.word	0x20001e30
   1a870:	20001db0 	.word	0x20001db0
   1a874:	20001d74 	.word	0x20001d74

0001a878 <rpa_timeout>:
{
   1a878:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1a87a:	2001      	movs	r0, #1
   1a87c:	f7ff ff38 	bl	1a6f0 <ll_rl_rpa_update>
   1a880:	4b03      	ldr	r3, [pc, #12]	; (1a890 <rpa_timeout+0x18>)
   1a882:	681a      	ldr	r2, [r3, #0]
   1a884:	4903      	ldr	r1, [pc, #12]	; (1a894 <rpa_timeout+0x1c>)
   1a886:	4804      	ldr	r0, [pc, #16]	; (1a898 <rpa_timeout+0x20>)
   1a888:	f00f ff50 	bl	2a72c <k_delayed_work_submit_to_queue>
   1a88c:	bd08      	pop	{r3, pc}
   1a88e:	bf00      	nop
   1a890:	200030dc 	.word	0x200030dc
   1a894:	20002fa8 	.word	0x20002fa8
   1a898:	200030f0 	.word	0x200030f0

0001a89c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1a89c:	2008      	movs	r0, #8
   1a89e:	4770      	bx	lr

0001a8a0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1a8a0:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1a8a2:	2000      	movs	r0, #0
   1a8a4:	f7ff fb74 	bl	19f90 <rl_access_check>
   1a8a8:	b908      	cbnz	r0, 1a8ae <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a8aa:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1a8ac:	bd08      	pop	{r3, pc}
	rl_clear();
   1a8ae:	f7ff fa7d 	bl	19dac <rl_clear>
	return 0;
   1a8b2:	2000      	movs	r0, #0
   1a8b4:	bd08      	pop	{r3, pc}
	...

0001a8b8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a8bc:	b082      	sub	sp, #8
   1a8be:	4605      	mov	r5, r0
   1a8c0:	460c      	mov	r4, r1
   1a8c2:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a8c4:	2000      	movs	r0, #0
   1a8c6:	f7ff fb63 	bl	19f90 <rl_access_check>
   1a8ca:	b918      	cbnz	r0, 1a8d4 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a8cc:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a8ce:	b002      	add	sp, #8
   1a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a8d4:	462f      	mov	r7, r5
   1a8d6:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a8da:	f10d 0207 	add.w	r2, sp, #7
   1a8de:	4639      	mov	r1, r7
   1a8e0:	f7ff fca4 	bl	1a22c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a8e4:	2807      	cmp	r0, #7
   1a8e6:	d801      	bhi.n	1a8ec <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a8e8:	2012      	movs	r0, #18
   1a8ea:	e7f0      	b.n	1a8ce <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a8ec:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a8f0:	f1b8 0f07 	cmp.w	r8, #7
   1a8f4:	d901      	bls.n	1a8fa <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a8f6:	2007      	movs	r0, #7
   1a8f8:	e7e9      	b.n	1a8ce <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a8fa:	f8df a130 	ldr.w	sl, [pc, #304]	; 1aa2c <ll_rl_add+0x174>
   1a8fe:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a902:	4443      	add	r3, r8
   1a904:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a908:	eb0a 0009 	add.w	r0, sl, r9
   1a90c:	2206      	movs	r2, #6
   1a90e:	4639      	mov	r1, r7
   1a910:	3001      	adds	r0, #1
   1a912:	f7e5 fcd5 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a916:	782a      	ldrb	r2, [r5, #0]
   1a918:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a91c:	f362 1386 	bfi	r3, r2, #6, #1
   1a920:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a924:	2110      	movs	r1, #16
   1a926:	4620      	mov	r0, r4
   1a928:	f7f5 f8f4 	bl	fb14 <mem_nz>
   1a92c:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a930:	f360 0382 	bfi	r3, r0, #2, #1
   1a934:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a938:	2110      	movs	r1, #16
   1a93a:	4630      	mov	r0, r6
   1a93c:	f7f5 f8ea 	bl	fb14 <mem_nz>
   1a940:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a944:	f360 03c3 	bfi	r3, r0, #3, #1
   1a948:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a94c:	f013 0f04 	tst.w	r3, #4
   1a950:	d016      	beq.n	1a980 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a952:	4933      	ldr	r1, [pc, #204]	; (1aa20 <ll_rl_add+0x168>)
   1a954:	780a      	ldrb	r2, [r1, #0]
   1a956:	4653      	mov	r3, sl
   1a958:	444b      	add	r3, r9
   1a95a:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a95c:	4b31      	ldr	r3, [pc, #196]	; (1aa24 <ll_rl_add+0x16c>)
   1a95e:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a962:	1c53      	adds	r3, r2, #1
   1a964:	700b      	strb	r3, [r1, #0]
   1a966:	340f      	adds	r4, #15
   1a968:	4b2f      	ldr	r3, [pc, #188]	; (1aa28 <ll_rl_add+0x170>)
   1a96a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a96e:	2210      	movs	r2, #16
   1a970:	e004      	b.n	1a97c <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a972:	7821      	ldrb	r1, [r4, #0]
   1a974:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a976:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a978:	3c01      	subs	r4, #1
   1a97a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a97c:	2a00      	cmp	r2, #0
   1a97e:	d1f8      	bne.n	1a972 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a980:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a984:	00d3      	lsls	r3, r2, #3
   1a986:	4a29      	ldr	r2, [pc, #164]	; (1aa2c <ll_rl_add+0x174>)
   1a988:	5cd3      	ldrb	r3, [r2, r3]
   1a98a:	f013 0f08 	tst.w	r3, #8
   1a98e:	d12f      	bne.n	1a9f0 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a990:	4e26      	ldr	r6, [pc, #152]	; (1aa2c <ll_rl_add+0x174>)
   1a992:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a996:	eb04 0208 	add.w	r2, r4, r8
   1a99a:	00d3      	lsls	r3, r2, #3
   1a99c:	3318      	adds	r3, #24
   1a99e:	2206      	movs	r2, #6
   1a9a0:	2100      	movs	r1, #0
   1a9a2:	18f0      	adds	r0, r6, r3
   1a9a4:	f010 f84c 	bl	2aa40 <memset>
	rl[i].rpas_ready = 0;
   1a9a8:	4444      	add	r4, r8
   1a9aa:	00e2      	lsls	r2, r4, #3
   1a9ac:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a9ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a9b2:	f36f 1304 	bfc	r3, #4, #1
   1a9b6:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a9b8:	2200      	movs	r2, #0
   1a9ba:	4639      	mov	r1, r7
   1a9bc:	7828      	ldrb	r0, [r5, #0]
   1a9be:	f7ff fa0b 	bl	19dd8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a9c2:	2807      	cmp	r0, #7
   1a9c4:	d822      	bhi.n	1aa0c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a9c6:	4b1a      	ldr	r3, [pc, #104]	; (1aa30 <ll_rl_add+0x178>)
   1a9c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a9cc:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a9d0:	00e3      	lsls	r3, r4, #3
   1a9d2:	5cf2      	ldrb	r2, [r6, r3]
   1a9d4:	f042 0220 	orr.w	r2, r2, #32
   1a9d8:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a9da:	4914      	ldr	r1, [pc, #80]	; (1aa2c <ll_rl_add+0x174>)
   1a9dc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a9e0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a9e4:	5cca      	ldrb	r2, [r1, r3]
   1a9e6:	f042 0201 	orr.w	r2, r2, #1
   1a9ea:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a9ec:	2000      	movs	r0, #0
   1a9ee:	e76e      	b.n	1a8ce <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a9f0:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a9f4:	4443      	add	r3, r8
   1a9f6:	00da      	lsls	r2, r3, #3
   1a9f8:	4c0c      	ldr	r4, [pc, #48]	; (1aa2c <ll_rl_add+0x174>)
   1a9fa:	4414      	add	r4, r2
   1a9fc:	2210      	movs	r2, #16
   1a9fe:	4631      	mov	r1, r6
   1aa00:	1de0      	adds	r0, r4, #7
   1aa02:	f7e5 fc5d 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1aa06:	2300      	movs	r3, #0
   1aa08:	6263      	str	r3, [r4, #36]	; 0x24
   1aa0a:	e7c1      	b.n	1a990 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1aa0c:	4a07      	ldr	r2, [pc, #28]	; (1aa2c <ll_rl_add+0x174>)
   1aa0e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1aa12:	00cb      	lsls	r3, r1, #3
   1aa14:	5cd1      	ldrb	r1, [r2, r3]
   1aa16:	f36f 1145 	bfc	r1, #5, #1
   1aa1a:	54d1      	strb	r1, [r2, r3]
   1aa1c:	e7dd      	b.n	1a9da <ll_rl_add+0x122>
   1aa1e:	bf00      	nop
   1aa20:	20001da4 	.word	0x20001da4
   1aa24:	20001da8 	.word	0x20001da8
   1aa28:	20001db0 	.word	0x20001db0
   1aa2c:	20001e30 	.word	0x20001e30
   1aa30:	20001fa8 	.word	0x20001fa8

0001aa34 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa38:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1aa3a:	2000      	movs	r0, #0
   1aa3c:	f7ff faa8 	bl	19f90 <rl_access_check>
   1aa40:	b910      	cbnz	r0, 1aa48 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aa42:	200c      	movs	r0, #12
   1aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1aa48:	4626      	mov	r6, r4
   1aa4a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1aa4e:	2200      	movs	r2, #0
   1aa50:	4631      	mov	r1, r6
   1aa52:	f7ff fbeb 	bl	1a22c <ll_rl_find>
   1aa56:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1aa58:	2807      	cmp	r0, #7
   1aa5a:	d902      	bls.n	1aa62 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aa5c:	2002      	movs	r0, #2
}
   1aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1aa62:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1aa66:	00d3      	lsls	r3, r2, #3
   1aa68:	4a2d      	ldr	r2, [pc, #180]	; (1ab20 <ll_rl_remove+0xec>)
   1aa6a:	5cd3      	ldrb	r3, [r2, r3]
   1aa6c:	f013 0f04 	tst.w	r3, #4
   1aa70:	d03e      	beq.n	1aaf0 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1aa72:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1aa76:	00da      	lsls	r2, r3, #3
   1aa78:	4b29      	ldr	r3, [pc, #164]	; (1ab20 <ll_rl_remove+0xec>)
   1aa7a:	4413      	add	r3, r2
   1aa7c:	7ddf      	ldrb	r7, [r3, #23]
   1aa7e:	4b29      	ldr	r3, [pc, #164]	; (1ab24 <ll_rl_remove+0xf0>)
   1aa80:	781b      	ldrb	r3, [r3, #0]
   1aa82:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1aa84:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1aa88:	d02e      	beq.n	1aae8 <ll_rl_remove+0xb4>
   1aa8a:	4547      	cmp	r7, r8
   1aa8c:	d02c      	beq.n	1aae8 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1aa8e:	4826      	ldr	r0, [pc, #152]	; (1ab28 <ll_rl_remove+0xf4>)
   1aa90:	2210      	movs	r2, #16
   1aa92:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1aa96:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1aa9a:	f7e5 fc11 	bl	2c0 <memcpy>
				for (k = 0;
   1aa9e:	2300      	movs	r3, #0
   1aaa0:	e001      	b.n	1aaa6 <ll_rl_remove+0x72>
				     k++) {
   1aaa2:	3301      	adds	r3, #1
   1aaa4:	b2db      	uxtb	r3, r3
				for (k = 0;
   1aaa6:	2b07      	cmp	r3, #7
   1aaa8:	d81e      	bhi.n	1aae8 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1aaaa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1aaae:	00ca      	lsls	r2, r1, #3
   1aab0:	491b      	ldr	r1, [pc, #108]	; (1ab20 <ll_rl_remove+0xec>)
   1aab2:	5c8a      	ldrb	r2, [r1, r2]
   1aab4:	f012 0f01 	tst.w	r2, #1
   1aab8:	d0f3      	beq.n	1aaa2 <ll_rl_remove+0x6e>
   1aaba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1aabe:	00ca      	lsls	r2, r1, #3
   1aac0:	4917      	ldr	r1, [pc, #92]	; (1ab20 <ll_rl_remove+0xec>)
   1aac2:	5c8a      	ldrb	r2, [r1, r2]
   1aac4:	f012 0f04 	tst.w	r2, #4
   1aac8:	d0eb      	beq.n	1aaa2 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1aaca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1aace:	00d1      	lsls	r1, r2, #3
   1aad0:	4a13      	ldr	r2, [pc, #76]	; (1ab20 <ll_rl_remove+0xec>)
   1aad2:	440a      	add	r2, r1
   1aad4:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1aad6:	4590      	cmp	r8, r2
   1aad8:	d1e3      	bne.n	1aaa2 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1aada:	2128      	movs	r1, #40	; 0x28
   1aadc:	4a10      	ldr	r2, [pc, #64]	; (1ab20 <ll_rl_remove+0xec>)
   1aade:	fb01 2003 	mla	r0, r1, r3, r2
   1aae2:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1aae4:	4a11      	ldr	r2, [pc, #68]	; (1ab2c <ll_rl_remove+0xf8>)
   1aae6:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1aae8:	4a0e      	ldr	r2, [pc, #56]	; (1ab24 <ll_rl_remove+0xf0>)
   1aaea:	7813      	ldrb	r3, [r2, #0]
   1aaec:	3b01      	subs	r3, #1
   1aaee:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1aaf0:	2200      	movs	r2, #0
   1aaf2:	4631      	mov	r1, r6
   1aaf4:	7820      	ldrb	r0, [r4, #0]
   1aaf6:	f7ff f96f 	bl	19dd8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1aafa:	2807      	cmp	r0, #7
   1aafc:	d804      	bhi.n	1ab08 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1aafe:	4b0c      	ldr	r3, [pc, #48]	; (1ab30 <ll_rl_remove+0xfc>)
   1ab00:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1ab04:	23ff      	movs	r3, #255	; 0xff
   1ab06:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1ab08:	4a05      	ldr	r2, [pc, #20]	; (1ab20 <ll_rl_remove+0xec>)
   1ab0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1ab0e:	00eb      	lsls	r3, r5, #3
   1ab10:	5cd1      	ldrb	r1, [r2, r3]
   1ab12:	f36f 0100 	bfc	r1, #0, #1
   1ab16:	54d1      	strb	r1, [r2, r3]
		return 0;
   1ab18:	2000      	movs	r0, #0
   1ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab1e:	bf00      	nop
   1ab20:	20001e30 	.word	0x20001e30
   1ab24:	20001da4 	.word	0x20001da4
   1ab28:	20001db0 	.word	0x20001db0
   1ab2c:	20001da8 	.word	0x20001da8
   1ab30:	20001fa8 	.word	0x20001fa8

0001ab34 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1ab34:	b510      	push	{r4, lr}
   1ab36:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1ab38:	795b      	ldrb	r3, [r3, #5]
   1ab3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ab3e:	2b40      	cmp	r3, #64	; 0x40
   1ab40:	d000      	beq.n	1ab44 <ll_rl_crpa_set+0x10>
   1ab42:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1ab44:	b119      	cbz	r1, 1ab4e <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1ab46:	2200      	movs	r2, #0
   1ab48:	f7ff fb70 	bl	1a22c <ll_rl_find>
   1ab4c:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1ab4e:	2a07      	cmp	r2, #7
   1ab50:	d8f7      	bhi.n	1ab42 <ll_rl_crpa_set+0xe>
   1ab52:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1ab56:	00cb      	lsls	r3, r1, #3
   1ab58:	4907      	ldr	r1, [pc, #28]	; (1ab78 <ll_rl_crpa_set+0x44>)
   1ab5a:	5ccb      	ldrb	r3, [r1, r3]
   1ab5c:	f013 0f01 	tst.w	r3, #1
   1ab60:	d0ef      	beq.n	1ab42 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1ab62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1ab66:	00d0      	lsls	r0, r2, #3
   1ab68:	3018      	adds	r0, #24
   1ab6a:	2206      	movs	r2, #6
   1ab6c:	4621      	mov	r1, r4
   1ab6e:	4b02      	ldr	r3, [pc, #8]	; (1ab78 <ll_rl_crpa_set+0x44>)
   1ab70:	4418      	add	r0, r3
   1ab72:	f7e5 fba5 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1ab76:	e7e4      	b.n	1ab42 <ll_rl_crpa_set+0xe>
   1ab78:	20001e30 	.word	0x20001e30

0001ab7c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1ab7c:	b538      	push	{r3, r4, r5, lr}
   1ab7e:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ab80:	4601      	mov	r1, r0
   1ab82:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ab86:	2200      	movs	r2, #0
   1ab88:	f7ff fb50 	bl	1a22c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1ab8c:	2807      	cmp	r0, #7
   1ab8e:	d901      	bls.n	1ab94 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab90:	2002      	movs	r0, #2
   1ab92:	bd38      	pop	{r3, r4, r5, pc}
   1ab94:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1ab96:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1ab9a:	00d8      	lsls	r0, r3, #3
   1ab9c:	3018      	adds	r0, #24
   1ab9e:	2106      	movs	r1, #6
   1aba0:	4b09      	ldr	r3, [pc, #36]	; (1abc8 <ll_rl_crpa_get+0x4c>)
   1aba2:	4418      	add	r0, r3
   1aba4:	f7f4 ffb6 	bl	fb14 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1aba8:	b908      	cbnz	r0, 1abae <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1abaa:	2002      	movs	r0, #2
}
   1abac:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1abae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1abb2:	00e1      	lsls	r1, r4, #3
   1abb4:	3118      	adds	r1, #24
   1abb6:	2206      	movs	r2, #6
   1abb8:	4b03      	ldr	r3, [pc, #12]	; (1abc8 <ll_rl_crpa_get+0x4c>)
   1abba:	4419      	add	r1, r3
   1abbc:	4628      	mov	r0, r5
   1abbe:	f7e5 fb7f 	bl	2c0 <memcpy>
			return 0;
   1abc2:	2000      	movs	r0, #0
   1abc4:	bd38      	pop	{r3, r4, r5, pc}
   1abc6:	bf00      	nop
   1abc8:	20001e30 	.word	0x20001e30

0001abcc <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1abcc:	b510      	push	{r4, lr}
   1abce:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1abd0:	4601      	mov	r1, r0
   1abd2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1abd6:	2200      	movs	r2, #0
   1abd8:	f7ff fb28 	bl	1a22c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1abdc:	2807      	cmp	r0, #7
   1abde:	d901      	bls.n	1abe4 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1abe0:	2002      	movs	r0, #2
}
   1abe2:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1abe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1abe8:	00c2      	lsls	r2, r0, #3
   1abea:	4b04      	ldr	r3, [pc, #16]	; (1abfc <ll_rl_lrpa_get+0x30>)
   1abec:	4413      	add	r3, r2
   1abee:	2206      	movs	r2, #6
   1abf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1abf2:	4620      	mov	r0, r4
   1abf4:	f7e5 fb64 	bl	2c0 <memcpy>
		return 0;
   1abf8:	2000      	movs	r0, #0
   1abfa:	bd10      	pop	{r4, pc}
   1abfc:	20001e30 	.word	0x20001e30

0001ac00 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1ac00:	b510      	push	{r4, lr}
   1ac02:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1ac04:	2000      	movs	r0, #0
   1ac06:	f7ff f9c3 	bl	19f90 <rl_access_check>
   1ac0a:	b908      	cbnz	r0, 1ac10 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac0c:	200c      	movs	r0, #12
   1ac0e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1ac10:	b11c      	cbz	r4, 1ac1a <ll_rl_enable+0x1a>
   1ac12:	2c01      	cmp	r4, #1
   1ac14:	d005      	beq.n	1ac22 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1ac16:	2012      	movs	r0, #18
	}

	return 0;
}
   1ac18:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1ac1a:	2000      	movs	r0, #0
   1ac1c:	4b03      	ldr	r3, [pc, #12]	; (1ac2c <ll_rl_enable+0x2c>)
   1ac1e:	7018      	strb	r0, [r3, #0]
		break;
   1ac20:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1ac22:	2201      	movs	r2, #1
   1ac24:	4b01      	ldr	r3, [pc, #4]	; (1ac2c <ll_rl_enable+0x2c>)
   1ac26:	701a      	strb	r2, [r3, #0]
	return 0;
   1ac28:	2000      	movs	r0, #0
		break;
   1ac2a:	bd10      	pop	{r4, pc}
   1ac2c:	20001f70 	.word	0x20001f70

0001ac30 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1ac30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ac34:	fb03 f000 	mul.w	r0, r3, r0
   1ac38:	4b01      	ldr	r3, [pc, #4]	; (1ac40 <ll_rl_timeout_set+0x10>)
   1ac3a:	6018      	str	r0, [r3, #0]
   1ac3c:	4770      	bx	lr
   1ac3e:	bf00      	nop
   1ac40:	200030dc 	.word	0x200030dc

0001ac44 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1ac44:	b538      	push	{r3, r4, r5, lr}
   1ac46:	4604      	mov	r4, r0
   1ac48:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	f7ff f9a0 	bl	19f90 <rl_access_check>
   1ac50:	b908      	cbnz	r0, 1ac56 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac52:	200c      	movs	r0, #12
   1ac54:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ac56:	4621      	mov	r1, r4
   1ac58:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ac5c:	2200      	movs	r2, #0
   1ac5e:	f7ff fae5 	bl	1a22c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1ac62:	2807      	cmp	r0, #7
   1ac64:	d901      	bls.n	1ac6a <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ac66:	2002      	movs	r0, #2
   1ac68:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1ac6a:	b11d      	cbz	r5, 1ac74 <ll_priv_mode_set+0x30>
   1ac6c:	2d01      	cmp	r5, #1
   1ac6e:	d00b      	beq.n	1ac88 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1ac70:	2012      	movs	r0, #18
	}

	return 0;
}
   1ac72:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1ac74:	4a09      	ldr	r2, [pc, #36]	; (1ac9c <ll_priv_mode_set+0x58>)
   1ac76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ac7a:	00c3      	lsls	r3, r0, #3
   1ac7c:	5cd1      	ldrb	r1, [r2, r3]
   1ac7e:	f36f 1104 	bfc	r1, #4, #1
   1ac82:	54d1      	strb	r1, [r2, r3]
	return 0;
   1ac84:	2000      	movs	r0, #0
			break;
   1ac86:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1ac88:	4904      	ldr	r1, [pc, #16]	; (1ac9c <ll_priv_mode_set+0x58>)
   1ac8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ac8e:	00c3      	lsls	r3, r0, #3
   1ac90:	5cca      	ldrb	r2, [r1, r3]
   1ac92:	f042 0210 	orr.w	r2, r2, #16
   1ac96:	54ca      	strb	r2, [r1, r3]
	return 0;
   1ac98:	2000      	movs	r0, #0
			break;
   1ac9a:	bd38      	pop	{r3, r4, r5, pc}
   1ac9c:	20001e30 	.word	0x20001e30

0001aca0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1aca0:	b538      	push	{r3, r4, r5, lr}
   1aca2:	4605      	mov	r5, r0
	wl_anon = 0;
   1aca4:	2400      	movs	r4, #0
   1aca6:	4b0e      	ldr	r3, [pc, #56]	; (1ace0 <ll_filter_reset+0x40>)
   1aca8:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1acaa:	f7ff f86b 	bl	19d84 <wl_clear>

	rl_enable = 0;
   1acae:	4b0d      	ldr	r3, [pc, #52]	; (1ace4 <ll_filter_reset+0x44>)
   1acb0:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1acb2:	4a0d      	ldr	r2, [pc, #52]	; (1ace8 <ll_filter_reset+0x48>)
   1acb4:	4b0d      	ldr	r3, [pc, #52]	; (1acec <ll_filter_reset+0x4c>)
   1acb6:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1acb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1acbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1acc0:	4b0b      	ldr	r3, [pc, #44]	; (1acf0 <ll_filter_reset+0x50>)
   1acc2:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1acc6:	f7ff f871 	bl	19dac <rl_clear>
	if (init) {
   1acca:	b91d      	cbnz	r5, 1acd4 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1accc:	4809      	ldr	r0, [pc, #36]	; (1acf4 <ll_filter_reset+0x54>)
   1acce:	f00f fcd3 	bl	2a678 <k_delayed_work_cancel>
   1acd2:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1acd4:	4908      	ldr	r1, [pc, #32]	; (1acf8 <ll_filter_reset+0x58>)
   1acd6:	4807      	ldr	r0, [pc, #28]	; (1acf4 <ll_filter_reset+0x54>)
   1acd8:	f00f fcb0 	bl	2a63c <k_delayed_work_init>
   1acdc:	bd38      	pop	{r3, r4, r5, pc}
   1acde:	bf00      	nop
   1ace0:	20002f38 	.word	0x20002f38
   1ace4:	20001f70 	.word	0x20001f70
   1ace8:	000dbba0 	.word	0x000dbba0
   1acec:	200030dc 	.word	0x200030dc
   1acf0:	20002f30 	.word	0x20002f30
   1acf4:	20002fa8 	.word	0x20002fa8
   1acf8:	0001a879 	.word	0x0001a879

0001acfc <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1acfc:	4800      	ldr	r0, [pc, #0]	; (1ad00 <ll_adv_set_get+0x4>)
   1acfe:	4770      	bx	lr
   1ad00:	2000201c 	.word	0x2000201c

0001ad04 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad08:	b087      	sub	sp, #28
   1ad0a:	4689      	mov	r9, r1
   1ad0c:	4614      	mov	r4, r2
   1ad0e:	461e      	mov	r6, r3
   1ad10:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1ad14:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1ad18:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1ad1c:	4b89      	ldr	r3, [pc, #548]	; (1af44 <ll_adv_params_set+0x240>)
   1ad1e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1ad22:	9004      	str	r0, [sp, #16]
   1ad24:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1ad28:	f7fd fd60 	bl	187ec <radio_adv_is_enabled>
   1ad2c:	9001      	str	r0, [sp, #4]
   1ad2e:	b128      	cbz	r0, 1ad3c <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ad30:	230c      	movs	r3, #12
   1ad32:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1ad34:	9801      	ldr	r0, [sp, #4]
   1ad36:	b007      	add	sp, #28
   1ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1ad3c:	4b82      	ldr	r3, [pc, #520]	; (1af48 <ll_adv_params_set+0x244>)
   1ad3e:	7a1a      	ldrb	r2, [r3, #8]
   1ad40:	2101      	movs	r1, #1
   1ad42:	f361 0202 	bfi	r2, r1, #0, #3
   1ad46:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1ad48:	2e04      	cmp	r6, #4
   1ad4a:	d90f      	bls.n	1ad6c <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1ad4c:	f019 0f10 	tst.w	r9, #16
   1ad50:	d071      	beq.n	1ae36 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1ad52:	4b7c      	ldr	r3, [pc, #496]	; (1af44 <ll_adv_params_set+0x240>)
   1ad54:	689b      	ldr	r3, [r3, #8]
   1ad56:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1ad58:	f009 0303 	and.w	r3, r9, #3
   1ad5c:	aa06      	add	r2, sp, #24
   1ad5e:	4413      	add	r3, r2
   1ad60:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1ad64:	f019 0f08 	tst.w	r9, #8
   1ad68:	d000      	beq.n	1ad6c <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1ad6a:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1ad6c:	2e01      	cmp	r6, #1
   1ad6e:	d071      	beq.n	1ae54 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1ad70:	4b75      	ldr	r3, [pc, #468]	; (1af48 <ll_adv_params_set+0x244>)
   1ad72:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1ad74:	4a74      	ldr	r2, [pc, #464]	; (1af48 <ll_adv_params_set+0x244>)
   1ad76:	7813      	ldrb	r3, [r2, #0]
   1ad78:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1ad7c:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1ad80:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1ad84:	f361 03c4 	bfi	r3, r1, #3, #2
   1ad88:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1ad8a:	f7fd fd27 	bl	187dc <radio_adv_data_get>
   1ad8e:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1ad90:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1ad94:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ad98:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1ad9c:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1ada0:	ab06      	add	r3, sp, #24
   1ada2:	441e      	add	r6, r3
   1ada4:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1ada8:	5d03      	ldrb	r3, [r0, r4]
   1adaa:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1adae:	f36f 1304 	bfc	r3, #4, #1
   1adb2:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1adb4:	f003 030f 	and.w	r3, r3, #15
   1adb8:	2b01      	cmp	r3, #1
   1adba:	d94f      	bls.n	1ae5c <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1adbc:	5d03      	ldrb	r3, [r0, r4]
   1adbe:	f36f 1345 	bfc	r3, #5, #1
   1adc2:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1adc4:	4a60      	ldr	r2, [pc, #384]	; (1af48 <ll_adv_params_set+0x244>)
   1adc6:	7813      	ldrb	r3, [r2, #0]
   1adc8:	f368 1346 	bfi	r3, r8, #5, #2
   1adcc:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1adce:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1add2:	2b40      	cmp	r3, #64	; 0x40
   1add4:	d047      	beq.n	1ae66 <ll_adv_params_set+0x162>
   1add6:	2b60      	cmp	r3, #96	; 0x60
   1add8:	d045      	beq.n	1ae66 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1adda:	f008 0801 	and.w	r8, r8, #1
   1adde:	5d3b      	ldrb	r3, [r7, r4]
   1ade0:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1ade4:	f36f 13c7 	bfc	r3, #7, #1
   1ade8:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1adea:	f003 030f 	and.w	r3, r3, #15
   1adee:	2b01      	cmp	r3, #1
   1adf0:	d044      	beq.n	1ae7c <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1adf2:	2b07      	cmp	r3, #7
   1adf4:	d050      	beq.n	1ae98 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1adf6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1adfa:	b913      	cbnz	r3, 1ae02 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1adfc:	2306      	movs	r3, #6
   1adfe:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1ae02:	f7fd fcef 	bl	187e4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1ae06:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1ae0a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1ae0e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1ae12:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ae14:	5c83      	ldrb	r3, [r0, r2]
   1ae16:	2404      	movs	r4, #4
   1ae18:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1ae1c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1ae20:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1ae24:	f36f 13c7 	bfc	r3, #7, #1
   1ae28:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1ae2a:	784b      	ldrb	r3, [r1, #1]
   1ae2c:	2b00      	cmp	r3, #0
   1ae2e:	d181      	bne.n	1ad34 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1ae30:	2306      	movs	r3, #6
   1ae32:	704b      	strb	r3, [r1, #1]
   1ae34:	e77e      	b.n	1ad34 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1ae36:	f009 0303 	and.w	r3, r9, #3
   1ae3a:	2b03      	cmp	r3, #3
   1ae3c:	d07c      	beq.n	1af38 <ll_adv_params_set+0x234>
   1ae3e:	f009 030c 	and.w	r3, r9, #12
   1ae42:	2b0c      	cmp	r3, #12
   1ae44:	d07b      	beq.n	1af3e <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1ae46:	4b40      	ldr	r3, [pc, #256]	; (1af48 <ll_adv_params_set+0x244>)
   1ae48:	7a1a      	ldrb	r2, [r3, #8]
   1ae4a:	f365 0202 	bfi	r2, r5, #0, #3
   1ae4e:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1ae50:	2605      	movs	r6, #5
   1ae52:	e78b      	b.n	1ad6c <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1ae54:	2200      	movs	r2, #0
   1ae56:	4b3c      	ldr	r3, [pc, #240]	; (1af48 <ll_adv_params_set+0x244>)
   1ae58:	60da      	str	r2, [r3, #12]
   1ae5a:	e78b      	b.n	1ad74 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1ae5c:	5d03      	ldrb	r3, [r0, r4]
   1ae5e:	f043 0320 	orr.w	r3, r3, #32
   1ae62:	5503      	strb	r3, [r0, r4]
   1ae64:	e7ae      	b.n	1adc4 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1ae66:	4838      	ldr	r0, [pc, #224]	; (1af48 <ll_adv_params_set+0x244>)
   1ae68:	7803      	ldrb	r3, [r0, #0]
   1ae6a:	f36b 13c7 	bfi	r3, fp, #7, #1
   1ae6e:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1ae72:	2206      	movs	r2, #6
   1ae74:	9912      	ldr	r1, [sp, #72]	; 0x48
   1ae76:	f7e5 fa23 	bl	2c0 <memcpy>
   1ae7a:	e7ae      	b.n	1adda <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1ae7c:	5d3b      	ldrb	r3, [r7, r4]
   1ae7e:	f36b 13c7 	bfi	r3, fp, #7, #1
   1ae82:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1ae84:	2206      	movs	r2, #6
   1ae86:	9912      	ldr	r1, [sp, #72]	; 0x48
   1ae88:	f10a 0008 	add.w	r0, sl, #8
   1ae8c:	f7e5 fa18 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1ae90:	230c      	movs	r3, #12
   1ae92:	f88a 3001 	strb.w	r3, [sl, #1]
   1ae96:	e7b4      	b.n	1ae02 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1ae98:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1ae9c:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1aea0:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1aea4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1aea8:	f369 1287 	bfi	r2, r9, #6, #2
   1aeac:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1aeb0:	2200      	movs	r2, #0
   1aeb2:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1aeb6:	f019 0f20 	tst.w	r9, #32
   1aeba:	d10e      	bne.n	1aeda <ll_adv_params_set+0x1d6>
   1aebc:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1aec0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1aec4:	d109      	bne.n	1aeda <ll_adv_params_set+0x1d6>
   1aec6:	2d04      	cmp	r5, #4
   1aec8:	d007      	beq.n	1aeda <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1aeca:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1aece:	f042 0201 	orr.w	r2, r2, #1
   1aed2:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1aed6:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1aeda:	f019 0f40 	tst.w	r9, #64	; 0x40
   1aede:	d006      	beq.n	1aeee <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1aee0:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1aee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1aee8:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1aeec:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1aeee:	1acb      	subs	r3, r1, r3
   1aef0:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1aef2:	2b02      	cmp	r3, #2
   1aef4:	d916      	bls.n	1af24 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1aef6:	1e58      	subs	r0, r3, #1
   1aef8:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1aefc:	f360 0205 	bfi	r2, r0, #0, #6
   1af00:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1af04:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1af08:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1af0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1af10:	f43f af77 	beq.w	1ae02 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1af14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1af16:	b16b      	cbz	r3, 1af34 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1af18:	781b      	ldrb	r3, [r3, #0]
   1af1a:	2b7f      	cmp	r3, #127	; 0x7f
   1af1c:	d006      	beq.n	1af2c <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1af1e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1af22:	e76e      	b.n	1ae02 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1af24:	2301      	movs	r3, #1
   1af26:	f88a 3001 	strb.w	r3, [sl, #1]
   1af2a:	e7ed      	b.n	1af08 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1af2c:	2300      	movs	r3, #0
   1af2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1af30:	7013      	strb	r3, [r2, #0]
   1af32:	e7f4      	b.n	1af1e <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1af34:	2300      	movs	r3, #0
   1af36:	e7f2      	b.n	1af1e <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1af38:	2312      	movs	r3, #18
   1af3a:	9301      	str	r3, [sp, #4]
   1af3c:	e6fa      	b.n	1ad34 <ll_adv_params_set+0x30>
   1af3e:	2312      	movs	r3, #18
   1af40:	9301      	str	r3, [sp, #4]
   1af42:	e6f7      	b.n	1ad34 <ll_adv_params_set+0x30>
   1af44:	0002ee08 	.word	0x0002ee08
   1af48:	2000201c 	.word	0x2000201c

0001af4c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af50:	4606      	mov	r6, r0
   1af52:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1af54:	f7fd fc42 	bl	187dc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1af58:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1af5c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1af60:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1af64:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1af66:	5c83      	ldrb	r3, [r0, r2]
   1af68:	f003 030f 	and.w	r3, r3, #15
   1af6c:	2b01      	cmp	r3, #1
   1af6e:	d03e      	beq.n	1afee <ll_adv_data_set+0xa2>
   1af70:	4604      	mov	r4, r0
   1af72:	2b07      	cmp	r3, #7
   1af74:	d03b      	beq.n	1afee <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1af76:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1af7a:	429d      	cmp	r5, r3
   1af7c:	d039      	beq.n	1aff2 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1af7e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1af82:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1af86:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1af8a:	f814 e002 	ldrb.w	lr, [r4, r2]
   1af8e:	5ce0      	ldrb	r0, [r4, r3]
   1af90:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1af94:	f36f 1004 	bfc	r0, #4, #1
   1af98:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1af9a:	5ca0      	ldrb	r0, [r4, r2]
   1af9c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1afa0:	f814 e003 	ldrb.w	lr, [r4, r3]
   1afa4:	f360 1e45 	bfi	lr, r0, #5, #1
   1afa8:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1afac:	5ca0      	ldrb	r0, [r4, r2]
   1afae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1afb2:	fa5f fe8e 	uxtb.w	lr, lr
   1afb6:	f360 1e86 	bfi	lr, r0, #6, #1
   1afba:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1afbe:	5ca2      	ldrb	r2, [r4, r2]
   1afc0:	09d2      	lsrs	r2, r2, #7
   1afc2:	fa5f f08e 	uxtb.w	r0, lr
   1afc6:	f362 10c7 	bfi	r0, r2, #7, #1
   1afca:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1afcc:	2206      	movs	r2, #6
   1afce:	3102      	adds	r1, #2
   1afd0:	f108 0002 	add.w	r0, r8, #2
   1afd4:	f7e5 f974 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1afd8:	4632      	mov	r2, r6
   1afda:	4639      	mov	r1, r7
   1afdc:	f108 0008 	add.w	r0, r8, #8
   1afe0:	f7e5 f96e 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1afe4:	3606      	adds	r6, #6
   1afe6:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1afea:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1aff2:	3501      	adds	r5, #1
   1aff4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1aff6:	2d02      	cmp	r5, #2
   1aff8:	d1c1      	bne.n	1af7e <ll_adv_data_set+0x32>
			last = 0;
   1affa:	2500      	movs	r5, #0
   1affc:	e7bf      	b.n	1af7e <ll_adv_data_set+0x32>

0001affe <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1affe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b002:	4606      	mov	r6, r0
   1b004:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1b006:	f7fd fbed 	bl	187e4 <radio_scan_data_get>
   1b00a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1b00c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1b010:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1b014:	429a      	cmp	r2, r3
   1b016:	d031      	beq.n	1b07c <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1b018:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1b01a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b01e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1b022:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1b024:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b028:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1b02c:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1b030:	5ca0      	ldrb	r0, [r4, r2]
   1b032:	f04f 0e04 	mov.w	lr, #4
   1b036:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1b03a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1b03e:	f36f 1045 	bfc	r0, #5, #1
   1b042:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1b044:	5ce0      	ldrb	r0, [r4, r3]
   1b046:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b04a:	5ca3      	ldrb	r3, [r4, r2]
   1b04c:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1b050:	f36f 13c7 	bfc	r3, #7, #1
   1b054:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1b056:	1db3      	adds	r3, r6, #6
   1b058:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1b05c:	2206      	movs	r2, #6
   1b05e:	3102      	adds	r1, #2
   1b060:	f108 0002 	add.w	r0, r8, #2
   1b064:	f7e5 f92c 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1b068:	4632      	mov	r2, r6
   1b06a:	4639      	mov	r1, r7
   1b06c:	f108 0008 	add.w	r0, r8, #8
   1b070:	f7e5 f926 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1b074:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1b07c:	1c5d      	adds	r5, r3, #1
   1b07e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1b080:	2d02      	cmp	r5, #2
   1b082:	d1ca      	bne.n	1b01a <ll_scan_data_set+0x1c>
			last = 0;
   1b084:	2500      	movs	r5, #0
   1b086:	e7c8      	b.n	1b01a <ll_scan_data_set+0x1c>

0001b088 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b08c:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1b08e:	b120      	cbz	r0, 1b09a <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1b090:	f7fd fbac 	bl	187ec <radio_adv_is_enabled>
   1b094:	b130      	cbz	r0, 1b0a4 <ll_adv_enable+0x1c>
		return 0;
   1b096:	2000      	movs	r0, #0
   1b098:	e001      	b.n	1b09e <ll_adv_enable+0x16>
		return radio_adv_disable();
   1b09a:	f7fe fb27 	bl	196ec <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1b09e:	b002      	add	sp, #8
   1b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1b0a4:	f7fd fb9a 	bl	187dc <radio_adv_data_get>
   1b0a8:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1b0aa:	f7fd fb9b 	bl	187e4 <radio_scan_data_get>
			[radio_adv_data->last][0];
   1b0ae:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1b0b2:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1b0b6:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1b0ba:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1b0bc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1b0c0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b0c4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1b0c8:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1b0ca:	5d2b      	ldrb	r3, [r5, r4]
   1b0cc:	f003 030f 	and.w	r3, r3, #15
   1b0d0:	2b07      	cmp	r3, #7
   1b0d2:	d023      	beq.n	1b11c <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1b0d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1b1a8 <ll_adv_enable+0x120>
   1b0d8:	f898 0000 	ldrb.w	r0, [r8]
   1b0dc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1b0e0:	f7ff f874 	bl	1a1cc <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1b0e4:	f898 3000 	ldrb.w	r3, [r8]
   1b0e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1b0ec:	2b40      	cmp	r3, #64	; 0x40
   1b0ee:	d02b      	beq.n	1b148 <ll_adv_enable+0xc0>
   1b0f0:	2b60      	cmp	r3, #96	; 0x60
   1b0f2:	d029      	beq.n	1b148 <ll_adv_enable+0xc0>
		bool priv = false;
   1b0f4:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1b0f6:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1b0fa:	2b00      	cmp	r3, #0
   1b0fc:	d03b      	beq.n	1b176 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1b0fe:	4b2a      	ldr	r3, [pc, #168]	; (1b1a8 <ll_adv_enable+0x120>)
   1b100:	7a18      	ldrb	r0, [r3, #8]
   1b102:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1b104:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1b106:	f8cd 8000 	str.w	r8, [sp]
   1b10a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1b10e:	f002 0207 	and.w	r2, r2, #7
   1b112:	f000 0007 	and.w	r0, r0, #7
   1b116:	f7fe f90b 	bl	19330 <radio_adv_enable>
	return status;
   1b11a:	e7c0      	b.n	1b09e <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1b11c:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1b11e:	78f3      	ldrb	r3, [r6, #3]
   1b120:	f013 0f01 	tst.w	r3, #1
   1b124:	d102      	bne.n	1b12c <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1b126:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1b12a:	e7e8      	b.n	1b0fe <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1b12c:	5d28      	ldrb	r0, [r5, r4]
   1b12e:	2100      	movs	r1, #0
   1b130:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b134:	f7fe fdf4 	bl	19d20 <ll_addr_get>
   1b138:	2206      	movs	r2, #6
   1b13a:	4601      	mov	r1, r0
   1b13c:	4638      	mov	r0, r7
   1b13e:	f7e5 f8bf 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1b142:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1b146:	e7da      	b.n	1b0fe <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1b148:	4917      	ldr	r1, [pc, #92]	; (1b1a8 <ll_adv_enable+0x120>)
   1b14a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b14e:	2200      	movs	r2, #0
   1b150:	09c0      	lsrs	r0, r0, #7
   1b152:	f7ff f86b 	bl	1a22c <ll_rl_find>
   1b156:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1b158:	28ff      	cmp	r0, #255	; 0xff
   1b15a:	d002      	beq.n	1b162 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1b15c:	2000      	movs	r0, #0
   1b15e:	f7ff fac7 	bl	1a6f0 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1b162:	4631      	mov	r1, r6
   1b164:	4640      	mov	r0, r8
   1b166:	f7ff f9f9 	bl	1a55c <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1b16a:	4639      	mov	r1, r7
   1b16c:	4640      	mov	r0, r8
   1b16e:	f7ff f9f5 	bl	1a55c <ll_rl_pdu_adv_update>
			priv = true;
   1b172:	2301      	movs	r3, #1
   1b174:	e7c1      	b.n	1b0fa <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1b176:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1b178:	5d28      	ldrb	r0, [r5, r4]
   1b17a:	2100      	movs	r1, #0
   1b17c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b180:	f7fe fdce 	bl	19d20 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1b184:	2206      	movs	r2, #6
   1b186:	4601      	mov	r1, r0
   1b188:	4630      	mov	r0, r6
   1b18a:	f7e5 f899 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1b18e:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1b190:	5d28      	ldrb	r0, [r5, r4]
   1b192:	2100      	movs	r1, #0
   1b194:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b198:	f7fe fdc2 	bl	19d20 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1b19c:	2206      	movs	r2, #6
   1b19e:	4601      	mov	r1, r0
   1b1a0:	4638      	mov	r0, r7
   1b1a2:	f7e5 f88d 	bl	2c0 <memcpy>
   1b1a6:	e7aa      	b.n	1b0fe <ll_adv_enable+0x76>
   1b1a8:	2000201c 	.word	0x2000201c

0001b1ac <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1ae:	4607      	mov	r7, r0
   1b1b0:	460e      	mov	r6, r1
   1b1b2:	4615      	mov	r5, r2
   1b1b4:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1b1b6:	f7fd fb31 	bl	1881c <radio_scan_is_enabled>
   1b1ba:	b110      	cbz	r0, 1b1c2 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b1bc:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1b1be:	4610      	mov	r0, r2
   1b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1c2:	4602      	mov	r2, r0
	ll_scan.type = type;
   1b1c4:	4906      	ldr	r1, [pc, #24]	; (1b1e0 <ll_scan_params_set+0x34>)
   1b1c6:	790b      	ldrb	r3, [r1, #4]
   1b1c8:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1b1cc:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1b1ce:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1b1d0:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1b1d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1b1d8:	f360 1387 	bfi	r3, r0, #6, #2
   1b1dc:	710b      	strb	r3, [r1, #4]
	return 0;
   1b1de:	e7ee      	b.n	1b1be <ll_scan_params_set+0x12>
   1b1e0:	2000202c 	.word	0x2000202c

0001b1e4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1b1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1e6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1b1e8:	b120      	cbz	r0, 1b1f4 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1b1ea:	f7fd fb17 	bl	1881c <radio_scan_is_enabled>
   1b1ee:	b128      	cbz	r0, 1b1fc <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1b1f0:	2000      	movs	r0, #0
   1b1f2:	e001      	b.n	1b1f8 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1b1f4:	f7fe fbac 	bl	19950 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1b1f8:	b005      	add	sp, #20
   1b1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1b1fc:	4c18      	ldr	r4, [pc, #96]	; (1b260 <ll_scan_enable+0x7c>)
   1b1fe:	7920      	ldrb	r0, [r4, #4]
   1b200:	0980      	lsrs	r0, r0, #6
   1b202:	f7fe fffb 	bl	1a1fc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1b206:	7923      	ldrb	r3, [r4, #4]
   1b208:	f013 0f01 	tst.w	r3, #1
   1b20c:	d00d      	beq.n	1b22a <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1b20e:	7923      	ldrb	r3, [r4, #4]
   1b210:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1b214:	2b20      	cmp	r3, #32
   1b216:	d003      	beq.n	1b220 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1b218:	2b30      	cmp	r3, #48	; 0x30
   1b21a:	d001      	beq.n	1b220 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1b21c:	2700      	movs	r7, #0
   1b21e:	e005      	b.n	1b22c <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1b220:	2000      	movs	r0, #0
   1b222:	f7ff fa65 	bl	1a6f0 <ll_rl_rpa_update>
		rpa_gen = 1;
   1b226:	2701      	movs	r7, #1
   1b228:	e000      	b.n	1b22c <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1b22a:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1b22c:	4d0c      	ldr	r5, [pc, #48]	; (1b260 <ll_scan_enable+0x7c>)
   1b22e:	792c      	ldrb	r4, [r5, #4]
   1b230:	f004 060f 	and.w	r6, r4, #15
   1b234:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1b238:	2100      	movs	r1, #0
   1b23a:	4620      	mov	r0, r4
   1b23c:	f7fe fd70 	bl	19d20 <ll_addr_get>
   1b240:	882b      	ldrh	r3, [r5, #0]
   1b242:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1b244:	792a      	ldrb	r2, [r5, #4]
   1b246:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1b248:	25ff      	movs	r5, #255	; 0xff
   1b24a:	9503      	str	r5, [sp, #12]
   1b24c:	9702      	str	r7, [sp, #8]
   1b24e:	9201      	str	r2, [sp, #4]
   1b250:	9100      	str	r1, [sp, #0]
   1b252:	4602      	mov	r2, r0
   1b254:	4621      	mov	r1, r4
   1b256:	4630      	mov	r0, r6
   1b258:	f7fe fa7a 	bl	19750 <radio_scan_enable>
	return status;
   1b25c:	e7cc      	b.n	1b1f8 <ll_scan_enable+0x14>
   1b25e:	bf00      	nop
   1b260:	2000202c 	.word	0x2000202c

0001b264 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1b264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b268:	b085      	sub	sp, #20
   1b26a:	4607      	mov	r7, r0
   1b26c:	4688      	mov	r8, r1
   1b26e:	4615      	mov	r5, r2
   1b270:	461e      	mov	r6, r3
   1b272:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1b276:	f7fd fad1 	bl	1881c <radio_scan_is_enabled>
   1b27a:	b120      	cbz	r0, 1b286 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b27c:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1b27e:	4618      	mov	r0, r3
   1b280:	b005      	add	sp, #20
   1b282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1b286:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1b28a:	9300      	str	r3, [sp, #0]
   1b28c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1b290:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1b294:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b296:	4630      	mov	r0, r6
   1b298:	f7fd fada 	bl	18850 <radio_connect_enable>
	if (status) {
   1b29c:	4603      	mov	r3, r0
   1b29e:	2800      	cmp	r0, #0
   1b2a0:	d1ed      	bne.n	1b27e <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1b2a2:	4628      	mov	r0, r5
   1b2a4:	f7fe ffaa 	bl	1a1fc <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1b2a8:	b1c5      	cbz	r5, 1b2dc <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1b2aa:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1b2ae:	1ea3      	subs	r3, r4, #2
   1b2b0:	b2db      	uxtb	r3, r3
   1b2b2:	2b01      	cmp	r3, #1
   1b2b4:	d91f      	bls.n	1b2f6 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1b2b6:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1b2b8:	2100      	movs	r1, #0
   1b2ba:	4620      	mov	r0, r4
   1b2bc:	f7fe fd30 	bl	19d20 <ll_addr_get>
   1b2c0:	f8cd 900c 	str.w	r9, [sp, #12]
   1b2c4:	9602      	str	r6, [sp, #8]
   1b2c6:	9501      	str	r5, [sp, #4]
   1b2c8:	f8cd 8000 	str.w	r8, [sp]
   1b2cc:	463b      	mov	r3, r7
   1b2ce:	4602      	mov	r2, r0
   1b2d0:	4621      	mov	r1, r4
   1b2d2:	2000      	movs	r0, #0
   1b2d4:	f7fe fa3c 	bl	19750 <radio_scan_enable>
   1b2d8:	4603      	mov	r3, r0
   1b2da:	e7d0      	b.n	1b27e <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1b2dc:	f7ff f936 	bl	1a54c <ctrl_rl_enabled>
   1b2e0:	b910      	cbnz	r0, 1b2e8 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1b2e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1b2e6:	e7e2      	b.n	1b2ae <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1b2e8:	2200      	movs	r2, #0
   1b2ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b2ec:	4630      	mov	r0, r6
   1b2ee:	f7fe ff9d 	bl	1a22c <ll_rl_find>
   1b2f2:	4681      	mov	r9, r0
   1b2f4:	e7db      	b.n	1b2ae <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1b2f6:	2000      	movs	r0, #0
   1b2f8:	f7ff f9fa 	bl	1a6f0 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1b2fc:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1b300:	2601      	movs	r6, #1
   1b302:	e7d9      	b.n	1b2b8 <ll_create_connection+0x54>

0001b304 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1b304:	4b01      	ldr	r3, [pc, #4]	; (1b30c <pool_id+0x8>)
   1b306:	1ac0      	subs	r0, r0, r3
}
   1b308:	1140      	asrs	r0, r0, #5
   1b30a:	4770      	bx	lr
   1b30c:	2000d68c 	.word	0x2000d68c

0001b310 <net_buf_pool_get>:
}
   1b310:	4b01      	ldr	r3, [pc, #4]	; (1b318 <net_buf_pool_get+0x8>)
   1b312:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1b316:	4770      	bx	lr
   1b318:	2000d68c 	.word	0x2000d68c

0001b31c <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1b31c:	2300      	movs	r3, #0
   1b31e:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1b320:	f100 0310 	add.w	r3, r0, #16
   1b324:	6083      	str	r3, [r0, #8]
   1b326:	4770      	bx	lr

0001b328 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1b328:	b570      	push	{r4, r5, r6, lr}
   1b32a:	4605      	mov	r5, r0
	__asm__ volatile(
   1b32c:	f04f 0320 	mov.w	r3, #32
   1b330:	f3ef 8611 	mrs	r6, BASEPRI
   1b334:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1b338:	8a43      	ldrh	r3, [r0, #18]
   1b33a:	b373      	cbz	r3, 1b39a <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1b33c:	8a02      	ldrh	r2, [r0, #16]
   1b33e:	4293      	cmp	r3, r2
   1b340:	d207      	bcs.n	1b352 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1b342:	2100      	movs	r1, #0
   1b344:	f00e f83a 	bl	293bc <k_queue_get>
			if (buf) {
   1b348:	4604      	mov	r4, r0
   1b34a:	b110      	cbz	r0, 1b352 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1b34c:	f386 8811 	msr	BASEPRI, r6
   1b350:	e019      	b.n	1b386 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1b352:	8a6b      	ldrh	r3, [r5, #18]
   1b354:	1e5a      	subs	r2, r3, #1
   1b356:	826a      	strh	r2, [r5, #18]
   1b358:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1b35c:	69ea      	ldr	r2, [r5, #28]
   1b35e:	8a2c      	ldrh	r4, [r5, #16]
   1b360:	1ae4      	subs	r4, r4, r3
   1b362:	8aab      	ldrh	r3, [r5, #20]
   1b364:	3303      	adds	r3, #3
   1b366:	f023 0303 	bic.w	r3, r3, #3
   1b36a:	8ae9      	ldrh	r1, [r5, #22]
   1b36c:	3103      	adds	r1, #3
   1b36e:	f021 0103 	bic.w	r1, r1, #3
   1b372:	440b      	add	r3, r1
   1b374:	3310      	adds	r3, #16
   1b376:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1b37a:	4628      	mov	r0, r5
   1b37c:	f7ff ffc2 	bl	1b304 <pool_id>
   1b380:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1b382:	8aab      	ldrh	r3, [r5, #20]
   1b384:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1b386:	2301      	movs	r3, #1
   1b388:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1b38a:	2300      	movs	r3, #0
   1b38c:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1b38e:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1b390:	4620      	mov	r0, r4
   1b392:	f7ff ffc3 	bl	1b31c <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1b396:	4620      	mov	r0, r4
   1b398:	bd70      	pop	{r4, r5, r6, pc}
   1b39a:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1b39e:	f00e f80d 	bl	293bc <k_queue_get>
	if (!buf) {
   1b3a2:	4604      	mov	r4, r0
   1b3a4:	2800      	cmp	r0, #0
   1b3a6:	d1ee      	bne.n	1b386 <net_buf_alloc+0x5e>
   1b3a8:	e7f5      	b.n	1b396 <net_buf_alloc+0x6e>

0001b3aa <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1b3aa:	b570      	push	{r4, r5, r6, lr}
   1b3ac:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1b3ae:	f00e f805 	bl	293bc <k_queue_get>
	if (!buf) {
   1b3b2:	4606      	mov	r6, r0
   1b3b4:	b188      	cbz	r0, 1b3da <net_buf_get+0x30>
   1b3b6:	4604      	mov	r4, r0
   1b3b8:	e009      	b.n	1b3ce <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b3ba:	2100      	movs	r1, #0
   1b3bc:	4628      	mov	r0, r5
   1b3be:	f00d fffd 	bl	293bc <k_queue_get>
   1b3c2:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1b3c4:	7963      	ldrb	r3, [r4, #5]
   1b3c6:	f023 0301 	bic.w	r3, r3, #1
   1b3ca:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b3cc:	4604      	mov	r4, r0
   1b3ce:	7963      	ldrb	r3, [r4, #5]
   1b3d0:	f013 0f01 	tst.w	r3, #1
   1b3d4:	d1f1      	bne.n	1b3ba <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1b3d6:	2300      	movs	r3, #0
   1b3d8:	6023      	str	r3, [r4, #0]

	return buf;
}
   1b3da:	4630      	mov	r0, r6
   1b3dc:	bd70      	pop	{r4, r5, r6, pc}

0001b3de <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b3de:	f100 0310 	add.w	r3, r0, #16
   1b3e2:	4419      	add	r1, r3
   1b3e4:	6081      	str	r1, [r0, #8]
   1b3e6:	4770      	bx	lr

0001b3e8 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b3e8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1b3ea:	460a      	mov	r2, r1
   1b3ec:	e004      	b.n	1b3f8 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1b3ee:	7953      	ldrb	r3, [r2, #5]
   1b3f0:	f043 0301 	orr.w	r3, r3, #1
   1b3f4:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b3f6:	4622      	mov	r2, r4
   1b3f8:	6814      	ldr	r4, [r2, #0]
   1b3fa:	2c00      	cmp	r4, #0
   1b3fc:	d1f7      	bne.n	1b3ee <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1b3fe:	f00d ffc1 	bl	29384 <k_queue_append_list>
   1b402:	bd10      	pop	{r4, pc}

0001b404 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b404:	b538      	push	{r3, r4, r5, lr}
   1b406:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1b408:	e006      	b.n	1b418 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b40a:	79a0      	ldrb	r0, [r4, #6]
   1b40c:	f7ff ff80 	bl	1b310 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1b410:	4621      	mov	r1, r4
   1b412:	f00d ffb1 	bl	29378 <k_queue_prepend>
{
   1b416:	462c      	mov	r4, r5
	while (buf) {
   1b418:	b17c      	cbz	r4, 1b43a <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1b41a:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1b41c:	7923      	ldrb	r3, [r4, #4]
   1b41e:	3b01      	subs	r3, #1
   1b420:	b2db      	uxtb	r3, r3
   1b422:	7123      	strb	r3, [r4, #4]
   1b424:	b94b      	cbnz	r3, 1b43a <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1b426:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1b428:	79a0      	ldrb	r0, [r4, #6]
   1b42a:	f7ff ff71 	bl	1b310 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b42e:	6983      	ldr	r3, [r0, #24]
   1b430:	2b00      	cmp	r3, #0
   1b432:	d0ea      	beq.n	1b40a <net_buf_unref+0x6>
			pool->destroy(buf);
   1b434:	4620      	mov	r0, r4
   1b436:	4798      	blx	r3
   1b438:	e7ed      	b.n	1b416 <net_buf_unref+0x12>
   1b43a:	bd38      	pop	{r3, r4, r5, pc}

0001b43c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b43c:	7903      	ldrb	r3, [r0, #4]
   1b43e:	3301      	adds	r3, #1
   1b440:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1b442:	4770      	bx	lr

0001b444 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1b444:	e000      	b.n	1b448 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1b446:	4618      	mov	r0, r3
	while (buf->frags) {
   1b448:	6803      	ldr	r3, [r0, #0]
   1b44a:	2b00      	cmp	r3, #0
   1b44c:	d1fb      	bne.n	1b446 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1b44e:	4770      	bx	lr

0001b450 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b450:	b570      	push	{r4, r5, r6, lr}
   1b452:	4604      	mov	r4, r0
   1b454:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1b456:	6806      	ldr	r6, [r0, #0]
   1b458:	b11e      	cbz	r6, 1b462 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b45a:	4608      	mov	r0, r1
   1b45c:	f7ff fff2 	bl	1b444 <net_buf_frag_last>
   1b460:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b462:	6025      	str	r5, [r4, #0]
   1b464:	bd70      	pop	{r4, r5, r6, pc}

0001b466 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b466:	b538      	push	{r3, r4, r5, lr}
   1b468:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1b46a:	b138      	cbz	r0, 1b47c <net_buf_frag_add+0x16>
   1b46c:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b46e:	f7ff ffe9 	bl	1b444 <net_buf_frag_last>
   1b472:	4629      	mov	r1, r5
   1b474:	f7ff ffec 	bl	1b450 <net_buf_frag_insert>

	return head;
   1b478:	4620      	mov	r0, r4
}
   1b47a:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1b47c:	4608      	mov	r0, r1
   1b47e:	f7ff ffdd 	bl	1b43c <net_buf_ref>
   1b482:	bd38      	pop	{r3, r4, r5, pc}

0001b484 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1b484:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1b486:	b108      	cbz	r0, 1b48c <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1b488:	680a      	ldr	r2, [r1, #0]
   1b48a:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1b48c:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1b48e:	2300      	movs	r3, #0
   1b490:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1b492:	4608      	mov	r0, r1
   1b494:	f7ff ffb6 	bl	1b404 <net_buf_unref>
#endif

	return next_frag;
}
   1b498:	4620      	mov	r0, r4
   1b49a:	bd10      	pop	{r4, pc}

0001b49c <net_buf_simple_add>:
	return buf->data + buf->len;
   1b49c:	6802      	ldr	r2, [r0, #0]
   1b49e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1b4a0:	4419      	add	r1, r3
   1b4a2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1b4a4:	18d0      	adds	r0, r2, r3
   1b4a6:	4770      	bx	lr

0001b4a8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1b4a8:	b538      	push	{r3, r4, r5, lr}
   1b4aa:	460d      	mov	r5, r1
   1b4ac:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1b4ae:	4611      	mov	r1, r2
   1b4b0:	f7ff fff4 	bl	1b49c <net_buf_simple_add>
   1b4b4:	4622      	mov	r2, r4
   1b4b6:	4629      	mov	r1, r5
   1b4b8:	f7e4 ff02 	bl	2c0 <memcpy>
}
   1b4bc:	bd38      	pop	{r3, r4, r5, pc}

0001b4be <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1b4be:	b510      	push	{r4, lr}
   1b4c0:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1b4c2:	2101      	movs	r1, #1
   1b4c4:	f7ff ffea 	bl	1b49c <net_buf_simple_add>
	*u8 = val;
   1b4c8:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1b4ca:	bd10      	pop	{r4, pc}

0001b4cc <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1b4cc:	b510      	push	{r4, lr}
   1b4ce:	b082      	sub	sp, #8
   1b4d0:	ac02      	add	r4, sp, #8
   1b4d2:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1b4d6:	2102      	movs	r1, #2
   1b4d8:	f7ff ffe0 	bl	1b49c <net_buf_simple_add>
   1b4dc:	2202      	movs	r2, #2
   1b4de:	4621      	mov	r1, r4
   1b4e0:	f7e4 feee 	bl	2c0 <memcpy>
}
   1b4e4:	b002      	add	sp, #8
   1b4e6:	bd10      	pop	{r4, pc}

0001b4e8 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1b4e8:	b510      	push	{r4, lr}
   1b4ea:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1b4ec:	0a0b      	lsrs	r3, r1, #8
   1b4ee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1b4f2:	ac02      	add	r4, sp, #8
   1b4f4:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1b4f8:	2102      	movs	r1, #2
   1b4fa:	f7ff ffcf 	bl	1b49c <net_buf_simple_add>
   1b4fe:	2202      	movs	r2, #2
   1b500:	4621      	mov	r1, r4
   1b502:	f7e4 fedd 	bl	2c0 <memcpy>
}
   1b506:	b002      	add	sp, #8
   1b508:	bd10      	pop	{r4, pc}

0001b50a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1b50a:	6803      	ldr	r3, [r0, #0]
   1b50c:	1a5b      	subs	r3, r3, r1
   1b50e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1b510:	8882      	ldrh	r2, [r0, #4]
   1b512:	4411      	add	r1, r2
   1b514:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1b516:	4618      	mov	r0, r3
   1b518:	4770      	bx	lr

0001b51a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1b51a:	b510      	push	{r4, lr}
   1b51c:	b082      	sub	sp, #8
   1b51e:	ac02      	add	r4, sp, #8
   1b520:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1b524:	2102      	movs	r1, #2
   1b526:	f7ff fff0 	bl	1b50a <net_buf_simple_push>
   1b52a:	2202      	movs	r2, #2
   1b52c:	4621      	mov	r1, r4
   1b52e:	f7e4 fec7 	bl	2c0 <memcpy>
}
   1b532:	b002      	add	sp, #8
   1b534:	bd10      	pop	{r4, pc}

0001b536 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1b536:	8883      	ldrh	r3, [r0, #4]
   1b538:	1a5b      	subs	r3, r3, r1
   1b53a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1b53c:	6803      	ldr	r3, [r0, #0]
   1b53e:	4419      	add	r1, r3
   1b540:	6001      	str	r1, [r0, #0]
}
   1b542:	4608      	mov	r0, r1
   1b544:	4770      	bx	lr

0001b546 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1b546:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1b548:	6803      	ldr	r3, [r0, #0]
   1b54a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1b54c:	2101      	movs	r1, #1
   1b54e:	f7ff fff2 	bl	1b536 <net_buf_simple_pull>

	return val;
}
   1b552:	4620      	mov	r0, r4
   1b554:	bd10      	pop	{r4, pc}

0001b556 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1b556:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1b558:	6803      	ldr	r3, [r0, #0]
   1b55a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1b55c:	2102      	movs	r1, #2
   1b55e:	f7ff ffea 	bl	1b536 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1b562:	4620      	mov	r0, r4
   1b564:	bd10      	pop	{r4, pc}

0001b566 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b566:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1b56a:	1a18      	subs	r0, r3, r0
   1b56c:	4770      	bx	lr

0001b56e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1b56e:	b538      	push	{r3, r4, r5, lr}
   1b570:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1b572:	88c4      	ldrh	r4, [r0, #6]
   1b574:	f7ff fff7 	bl	1b566 <net_buf_simple_headroom>
   1b578:	1a20      	subs	r0, r4, r0
   1b57a:	88ab      	ldrh	r3, [r5, #4]
}
   1b57c:	1ac0      	subs	r0, r0, r3
   1b57e:	bd38      	pop	{r3, r4, r5, pc}

0001b580 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1b580:	b510      	push	{r4, lr}
   1b582:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1b584:	6883      	ldr	r3, [r0, #8]
   1b586:	b18b      	cbz	r3, 1b5ac <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1b588:	b1b1      	cbz	r1, 1b5b8 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1b58a:	68a3      	ldr	r3, [r4, #8]
   1b58c:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1b58e:	781b      	ldrb	r3, [r3, #0]
   1b590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b594:	2b60      	cmp	r3, #96	; 0x60
   1b596:	d01d      	beq.n	1b5d4 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1b598:	4b18      	ldr	r3, [pc, #96]	; (1b5fc <processing_data+0x7c>)
   1b59a:	6a1a      	ldr	r2, [r3, #32]
   1b59c:	3201      	adds	r2, #1
   1b59e:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1b5a0:	68da      	ldr	r2, [r3, #12]
   1b5a2:	3201      	adds	r2, #1
   1b5a4:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1b5a6:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1b5a8:	bb18      	cbnz	r0, 1b5f2 <processing_data+0x72>
   1b5aa:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1b5ac:	4a13      	ldr	r2, [pc, #76]	; (1b5fc <processing_data+0x7c>)
   1b5ae:	6813      	ldr	r3, [r2, #0]
   1b5b0:	3301      	adds	r3, #1
   1b5b2:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1b5b4:	2002      	movs	r0, #2
   1b5b6:	e7f7      	b.n	1b5a8 <processing_data+0x28>
	return pkt->iface;
   1b5b8:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1b5ba:	6843      	ldr	r3, [r0, #4]
   1b5bc:	681b      	ldr	r3, [r3, #0]
   1b5be:	4621      	mov	r1, r4
   1b5c0:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1b5c2:	2801      	cmp	r0, #1
   1b5c4:	d0e1      	beq.n	1b58a <processing_data+0xa>
			if (ret == NET_DROP) {
   1b5c6:	2802      	cmp	r0, #2
   1b5c8:	d1ee      	bne.n	1b5a8 <processing_data+0x28>
   1b5ca:	4a0c      	ldr	r2, [pc, #48]	; (1b5fc <processing_data+0x7c>)
   1b5cc:	6813      	ldr	r3, [r2, #0]
   1b5ce:	3301      	adds	r3, #1
   1b5d0:	6013      	str	r3, [r2, #0]
   1b5d2:	e7e9      	b.n	1b5a8 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1b5d4:	4a09      	ldr	r2, [pc, #36]	; (1b5fc <processing_data+0x7c>)
   1b5d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1b5d8:	3301      	adds	r3, #1
   1b5da:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1b5dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b5e0:	220a      	movs	r2, #10
   1b5e2:	f362 03c6 	bfi	r3, r2, #3, #4
   1b5e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1b5ea:	4620      	mov	r0, r4
   1b5ec:	f006 fd1e 	bl	2202c <net_ipv6_process_pkt>
   1b5f0:	e7da      	b.n	1b5a8 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f002 fc75 	bl	1dee2 <net_pkt_unref>
		break;
	}
}
   1b5f8:	e7d7      	b.n	1b5aa <processing_data+0x2a>
   1b5fa:	bf00      	nop
   1b5fc:	20002fd0 	.word	0x20002fd0

0001b600 <net_rx_thread>:

static void net_rx_thread(void)
{
   1b600:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1b602:	4c16      	ldr	r4, [pc, #88]	; (1b65c <net_rx_thread+0x5c>)
   1b604:	4620      	mov	r0, r4
   1b606:	f001 faaf 	bl	1cb68 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1b60a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b60e:	4620      	mov	r0, r4
   1b610:	f00e fa56 	bl	29ac0 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1b614:	f001 faee 	bl	1cbf4 <net_if_post_init>
   1b618:	e010      	b.n	1b63c <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1b61a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b61c:	2200      	movs	r2, #0
   1b61e:	e002      	b.n	1b626 <net_rx_thread+0x26>
		bytes += buf->len;
   1b620:	8999      	ldrh	r1, [r3, #12]
   1b622:	440a      	add	r2, r1
		buf = buf->frags;
   1b624:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b626:	2b00      	cmp	r3, #0
   1b628:	d1fa      	bne.n	1b620 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1b62a:	490d      	ldr	r1, [pc, #52]	; (1b660 <net_rx_thread+0x60>)
   1b62c:	688b      	ldr	r3, [r1, #8]
   1b62e:	441a      	add	r2, r3
   1b630:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1b632:	2100      	movs	r1, #0
   1b634:	f7ff ffa4 	bl	1b580 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b638:	f00e f8d6 	bl	297e8 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1b63c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b640:	4808      	ldr	r0, [pc, #32]	; (1b664 <net_rx_thread+0x64>)
   1b642:	f00d febb 	bl	293bc <k_queue_get>
	for (i = 0; i < size; i++) {
   1b646:	2300      	movs	r3, #0
   1b648:	f240 52db 	movw	r2, #1499	; 0x5db
   1b64c:	4293      	cmp	r3, r2
   1b64e:	d8e4      	bhi.n	1b61a <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1b650:	4a05      	ldr	r2, [pc, #20]	; (1b668 <net_rx_thread+0x68>)
   1b652:	5cd2      	ldrb	r2, [r2, r3]
   1b654:	2aaa      	cmp	r2, #170	; 0xaa
   1b656:	d1e0      	bne.n	1b61a <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1b658:	3301      	adds	r3, #1
   1b65a:	e7f5      	b.n	1b648 <net_rx_thread+0x48>
   1b65c:	2000d624 	.word	0x2000d624
   1b660:	20002fd0 	.word	0x20002fd0
   1b664:	20002034 	.word	0x20002034
   1b668:	20004cd8 	.word	0x20004cd8

0001b66c <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1b66c:	b500      	push	{lr}
   1b66e:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1b670:	480b      	ldr	r0, [pc, #44]	; (1b6a0 <init_rx_queue+0x34>)
   1b672:	f00d fe48 	bl	29306 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1b676:	2300      	movs	r3, #0
   1b678:	9305      	str	r3, [sp, #20]
   1b67a:	2201      	movs	r2, #1
   1b67c:	9204      	str	r2, [sp, #16]
   1b67e:	f06f 0207 	mvn.w	r2, #7
   1b682:	9203      	str	r2, [sp, #12]
   1b684:	9302      	str	r3, [sp, #8]
   1b686:	9301      	str	r3, [sp, #4]
   1b688:	9300      	str	r3, [sp, #0]
   1b68a:	4b06      	ldr	r3, [pc, #24]	; (1b6a4 <init_rx_queue+0x38>)
   1b68c:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1b690:	4905      	ldr	r1, [pc, #20]	; (1b6a8 <init_rx_queue+0x3c>)
   1b692:	4806      	ldr	r0, [pc, #24]	; (1b6ac <init_rx_queue+0x40>)
   1b694:	f00e fc80 	bl	29f98 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1b698:	b007      	add	sp, #28
   1b69a:	f85d fb04 	ldr.w	pc, [sp], #4
   1b69e:	bf00      	nop
   1b6a0:	20002034 	.word	0x20002034
   1b6a4:	0001b601 	.word	0x0001b601
   1b6a8:	20004cd8 	.word	0x20004cd8
   1b6ac:	20002044 	.word	0x20002044

0001b6b0 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1b6b0:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1b6b2:	f002 ffb2 	bl	1e61a <net_pkt_init>

	net_context_init();
   1b6b6:	f002 faf1 	bl	1dc9c <net_context_init>
	net_icmpv6_init();
   1b6ba:	f004 fa0b 	bl	1fad4 <net_icmpv6_init>
	net_ipv6_init();
   1b6be:	f006 fe89 	bl	223d4 <net_ipv6_init>
	net_conn_init();
   1b6c2:	f00a fb55 	bl	25d70 <net_conn_init>
	net_udp_init();
   1b6c6:	f008 fa6b 	bl	23ba0 <net_udp_init>
	net_tcp_init();
   1b6ca:	f008 fc4f 	bl	23f6c <net_tcp_init>
	net_route_init();
   1b6ce:	f007 ffca 	bl	23666 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1b6d2:	f008 f8b3 	bl	2383c <net_mgmt_event_init>

	init_rx_queue();
   1b6d6:	f7ff ffc9 	bl	1b66c <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1b6da:	2000      	movs	r0, #0
   1b6dc:	bd08      	pop	{r3, pc}
	...

0001b6e0 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1b6e0:	2800      	cmp	r0, #0
   1b6e2:	f000 80bc 	beq.w	1b85e <net_send_data+0x17e>
{
   1b6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6e8:	b091      	sub	sp, #68	; 0x44
   1b6ea:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1b6ec:	6883      	ldr	r3, [r0, #8]
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	f000 80b8 	beq.w	1b864 <net_send_data+0x184>
	return pkt->iface;
   1b6f4:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1b6f6:	2b00      	cmp	r3, #0
   1b6f8:	f000 80b7 	beq.w	1b86a <net_send_data+0x18a>
	return pkt->family;
   1b6fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1b700:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1b704:	2b0a      	cmp	r3, #10
   1b706:	d103      	bne.n	1b710 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1b708:	4a59      	ldr	r2, [pc, #356]	; (1b870 <net_send_data+0x190>)
   1b70a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b70c:	3301      	adds	r3, #1
   1b70e:	6293      	str	r3, [r2, #40]	; 0x28
   1b710:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b714:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b718:	2b0a      	cmp	r3, #10
   1b71a:	d00b      	beq.n	1b734 <net_send_data+0x54>
	return 0;
   1b71c:	2000      	movs	r0, #0
	if (status < 0) {
   1b71e:	2800      	cmp	r0, #0
   1b720:	db06      	blt.n	1b730 <net_send_data+0x50>
	} else if (status > 0) {
   1b722:	f340 8091 	ble.w	1b848 <net_send_data+0x168>
		processing_data(pkt, true);
   1b726:	2101      	movs	r1, #1
   1b728:	4620      	mov	r0, r4
   1b72a:	f7ff ff29 	bl	1b580 <processing_data>
		return 0;
   1b72e:	2000      	movs	r0, #0
}
   1b730:	b011      	add	sp, #68	; 0x44
   1b732:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1b734:	68a3      	ldr	r3, [r4, #8]
   1b736:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1b738:	3518      	adds	r5, #24
   1b73a:	f004 fd93 	bl	20264 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b73e:	2210      	movs	r2, #16
   1b740:	4601      	mov	r1, r0
   1b742:	4628      	mov	r0, r5
   1b744:	f00f f8e8 	bl	2a918 <memcmp>
   1b748:	2800      	cmp	r0, #0
   1b74a:	d07a      	beq.n	1b842 <net_send_data+0x162>
   1b74c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b74e:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b750:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b754:	b9ab      	cbnz	r3, 1b782 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b756:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b758:	2b00      	cmp	r3, #0
   1b75a:	d141      	bne.n	1b7e0 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b75c:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b75e:	2b00      	cmp	r3, #0
   1b760:	d140      	bne.n	1b7e4 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b762:	68c2      	ldr	r2, [r0, #12]
   1b764:	0a13      	lsrs	r3, r2, #8
   1b766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b76a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b76e:	0211      	lsls	r1, r2, #8
   1b770:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b774:	430b      	orrs	r3, r1
   1b776:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b77a:	2b01      	cmp	r3, #1
   1b77c:	d034      	beq.n	1b7e8 <net_send_data+0x108>
   1b77e:	2300      	movs	r3, #0
   1b780:	e000      	b.n	1b784 <net_send_data+0xa4>
   1b782:	2300      	movs	r3, #0
   1b784:	b393      	cbz	r3, 1b7ec <net_send_data+0x10c>
   1b786:	68a3      	ldr	r3, [r4, #8]
   1b788:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1b78c:	ae0c      	add	r6, sp, #48	; 0x30
   1b78e:	4675      	mov	r5, lr
   1b790:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1b794:	6869      	ldr	r1, [r5, #4]
   1b796:	68aa      	ldr	r2, [r5, #8]
   1b798:	68eb      	ldr	r3, [r5, #12]
   1b79a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b79c:	ab10      	add	r3, sp, #64	; 0x40
   1b79e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b7a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b7a6:	af08      	add	r7, sp, #32
   1b7a8:	4673      	mov	r3, lr
   1b7aa:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1b7ae:	6859      	ldr	r1, [r3, #4]
   1b7b0:	689a      	ldr	r2, [r3, #8]
   1b7b2:	68db      	ldr	r3, [r3, #12]
   1b7b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1b7b6:	af08      	add	r7, sp, #32
   1b7b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1b7ba:	f8ce 0008 	str.w	r0, [lr, #8]
   1b7be:	6069      	str	r1, [r5, #4]
   1b7c0:	60aa      	str	r2, [r5, #8]
   1b7c2:	60eb      	str	r3, [r5, #12]
   1b7c4:	68a3      	ldr	r3, [r4, #8]
   1b7c6:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b7c8:	ad04      	add	r5, sp, #16
   1b7ca:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1b7ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b7d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b7d4:	61b8      	str	r0, [r7, #24]
   1b7d6:	61f9      	str	r1, [r7, #28]
   1b7d8:	623a      	str	r2, [r7, #32]
   1b7da:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1b7dc:	2001      	movs	r0, #1
   1b7de:	e79e      	b.n	1b71e <net_send_data+0x3e>
   1b7e0:	2300      	movs	r3, #0
   1b7e2:	e7cf      	b.n	1b784 <net_send_data+0xa4>
   1b7e4:	2300      	movs	r3, #0
   1b7e6:	e7cd      	b.n	1b784 <net_send_data+0xa4>
   1b7e8:	2301      	movs	r3, #1
   1b7ea:	e7cb      	b.n	1b784 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1b7ec:	2100      	movs	r1, #0
   1b7ee:	f000 f9c5 	bl	1bb7c <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b7f2:	2800      	cmp	r0, #0
   1b7f4:	d1c7      	bne.n	1b786 <net_send_data+0xa6>
   1b7f6:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1b7f8:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b7fa:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b7fe:	b99a      	cbnz	r2, 1b828 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b800:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b802:	b9aa      	cbnz	r2, 1b830 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b804:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b806:	b9aa      	cbnz	r2, 1b834 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b808:	68da      	ldr	r2, [r3, #12]
   1b80a:	0a13      	lsrs	r3, r2, #8
   1b80c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b814:	0211      	lsls	r1, r2, #8
   1b816:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b81a:	430b      	orrs	r3, r1
   1b81c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b820:	2b01      	cmp	r3, #1
   1b822:	d009      	beq.n	1b838 <net_send_data+0x158>
   1b824:	2300      	movs	r3, #0
   1b826:	e000      	b.n	1b82a <net_send_data+0x14a>
   1b828:	2300      	movs	r3, #0
   1b82a:	b93b      	cbnz	r3, 1b83c <net_send_data+0x15c>
	return 0;
   1b82c:	2000      	movs	r0, #0
   1b82e:	e776      	b.n	1b71e <net_send_data+0x3e>
   1b830:	2300      	movs	r3, #0
   1b832:	e7fa      	b.n	1b82a <net_send_data+0x14a>
   1b834:	2300      	movs	r3, #0
   1b836:	e7f8      	b.n	1b82a <net_send_data+0x14a>
   1b838:	2301      	movs	r3, #1
   1b83a:	e7f6      	b.n	1b82a <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1b83c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b840:	e76d      	b.n	1b71e <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1b842:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b846:	e76a      	b.n	1b71e <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1b848:	4621      	mov	r1, r4
   1b84a:	6960      	ldr	r0, [r4, #20]
   1b84c:	f000 ffe0 	bl	1c810 <net_if_send_data>
   1b850:	2802      	cmp	r0, #2
   1b852:	d001      	beq.n	1b858 <net_send_data+0x178>
	return 0;
   1b854:	2000      	movs	r0, #0
   1b856:	e76b      	b.n	1b730 <net_send_data+0x50>
		return -EIO;
   1b858:	f06f 0004 	mvn.w	r0, #4
   1b85c:	e768      	b.n	1b730 <net_send_data+0x50>
		return -ENODATA;
   1b85e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b862:	4770      	bx	lr
   1b864:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b868:	e762      	b.n	1b730 <net_send_data+0x50>
		return -EINVAL;
   1b86a:	f06f 0015 	mvn.w	r0, #21
   1b86e:	e75f      	b.n	1b730 <net_send_data+0x50>
   1b870:	20002fd0 	.word	0x20002fd0

0001b874 <net_recv_data>:
{
   1b874:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1b876:	688b      	ldr	r3, [r1, #8]
   1b878:	b19b      	cbz	r3, 1b8a2 <net_recv_data+0x2e>
   1b87a:	f3bf 8f5b 	dmb	ish
   1b87e:	68c3      	ldr	r3, [r0, #12]
   1b880:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b884:	f013 0f01 	tst.w	r3, #1
   1b888:	d00e      	beq.n	1b8a8 <net_recv_data+0x34>
	pkt->iface = iface;
   1b88a:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b88c:	7d43      	ldrb	r3, [r0, #21]
   1b88e:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b892:	7d43      	ldrb	r3, [r0, #21]
   1b894:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1b898:	4805      	ldr	r0, [pc, #20]	; (1b8b0 <net_recv_data+0x3c>)
   1b89a:	f00d fd67 	bl	2936c <k_queue_append>
	return 0;
   1b89e:	2000      	movs	r0, #0
   1b8a0:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1b8a2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b8a6:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1b8a8:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1b8ac:	bd08      	pop	{r3, pc}
   1b8ae:	bf00      	nop
   1b8b0:	20002034 	.word	0x20002034

0001b8b4 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1b8b4:	2302      	movs	r3, #2
   1b8b6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1b8ba:	4770      	bx	lr

0001b8bc <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1b8bc:	2300      	movs	r3, #0
   1b8be:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b8c2:	4770      	bx	lr

0001b8c4 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b8c4:	2300      	movs	r3, #0
   1b8c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b8ca:	4770      	bx	lr

0001b8cc <ipv6_addr_find>:
{
   1b8cc:	b570      	push	{r4, r5, r6, lr}
   1b8ce:	4605      	mov	r5, r0
   1b8d0:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b8d2:	2400      	movs	r4, #0
   1b8d4:	e000      	b.n	1b8d8 <ipv6_addr_find+0xc>
   1b8d6:	3401      	adds	r4, #1
   1b8d8:	2c02      	cmp	r4, #2
   1b8da:	dc19      	bgt.n	1b910 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b8dc:	236c      	movs	r3, #108	; 0x6c
   1b8de:	fb03 5304 	mla	r3, r3, r4, r5
   1b8e2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b8e6:	2b00      	cmp	r3, #0
   1b8e8:	d0f5      	beq.n	1b8d6 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b8ea:	216c      	movs	r1, #108	; 0x6c
   1b8ec:	fb01 f104 	mul.w	r1, r1, r4
   1b8f0:	3120      	adds	r1, #32
   1b8f2:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b8f4:	2210      	movs	r2, #16
   1b8f6:	4411      	add	r1, r2
   1b8f8:	4630      	mov	r0, r6
   1b8fa:	f00f f80d 	bl	2a918 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b8fe:	2800      	cmp	r0, #0
   1b900:	d1e9      	bne.n	1b8d6 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b902:	206c      	movs	r0, #108	; 0x6c
   1b904:	fb00 f004 	mul.w	r0, r0, r4
   1b908:	3020      	adds	r0, #32
   1b90a:	4428      	add	r0, r5
   1b90c:	300c      	adds	r0, #12
   1b90e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b910:	2000      	movs	r0, #0
}
   1b912:	bd70      	pop	{r4, r5, r6, pc}

0001b914 <ipv6_prefix_find>:
{
   1b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b916:	4605      	mov	r5, r0
   1b918:	460e      	mov	r6, r1
   1b91a:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b91c:	2400      	movs	r4, #0
   1b91e:	e000      	b.n	1b922 <ipv6_prefix_find+0xe>
   1b920:	3401      	adds	r4, #1
   1b922:	2c01      	cmp	r4, #1
   1b924:	dc21      	bgt.n	1b96a <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b926:	236c      	movs	r3, #108	; 0x6c
   1b928:	fb03 5304 	mla	r3, r3, r4, r5
   1b92c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b930:	2b00      	cmp	r3, #0
   1b932:	d0f5      	beq.n	1b920 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b934:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b938:	0099      	lsls	r1, r3, #2
   1b93a:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b93e:	4429      	add	r1, r5
   1b940:	2210      	movs	r2, #16
   1b942:	4411      	add	r1, r2
   1b944:	4630      	mov	r0, r6
   1b946:	f00e ffe7 	bl	2a918 <memcmp>
   1b94a:	2800      	cmp	r0, #0
   1b94c:	d1e8      	bne.n	1b920 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b94e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b952:	0093      	lsls	r3, r2, #2
   1b954:	461a      	mov	r2, r3
   1b956:	442b      	add	r3, r5
   1b958:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b95c:	42bb      	cmp	r3, r7
   1b95e:	d1df      	bne.n	1b920 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b960:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b964:	4428      	add	r0, r5
   1b966:	3010      	adds	r0, #16
   1b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b96a:	2000      	movs	r0, #0
}
   1b96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b970 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b970:	2300      	movs	r3, #0
   1b972:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b976:	f3bf 8f5b 	dmb	ish
   1b97a:	68c3      	ldr	r3, [r0, #12]
   1b97c:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b980:	f013 0f01 	tst.w	r3, #1
   1b984:	d100      	bne.n	1b988 <net_if_ipv6_start_dad+0x18>
   1b986:	4770      	bx	lr
{
   1b988:	b510      	push	{r4, lr}
   1b98a:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b98c:	2301      	movs	r3, #1
   1b98e:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b992:	f006 f969 	bl	21c68 <net_ipv6_start_dad>
   1b996:	b100      	cbz	r0, 1b99a <net_if_ipv6_start_dad+0x2a>
   1b998:	bd10      	pop	{r4, pc}
   1b99a:	2264      	movs	r2, #100	; 0x64
   1b99c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b9a0:	4801      	ldr	r0, [pc, #4]	; (1b9a8 <net_if_ipv6_start_dad+0x38>)
   1b9a2:	f00e fec3 	bl	2a72c <k_delayed_work_submit_to_queue>
}
   1b9a6:	e7f7      	b.n	1b998 <net_if_ipv6_start_dad+0x28>
   1b9a8:	200030f0 	.word	0x200030f0

0001b9ac <net_if_ipv6_prefix_init>:
{
   1b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9ae:	b085      	sub	sp, #20
   1b9b0:	4605      	mov	r5, r0
   1b9b2:	460e      	mov	r6, r1
   1b9b4:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b9b6:	2301      	movs	r3, #1
   1b9b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b9bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b9c0:	466c      	mov	r4, sp
   1b9c2:	6808      	ldr	r0, [r1, #0]
   1b9c4:	6849      	ldr	r1, [r1, #4]
   1b9c6:	68b2      	ldr	r2, [r6, #8]
   1b9c8:	68f3      	ldr	r3, [r6, #12]
   1b9ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b9cc:	466c      	mov	r4, sp
   1b9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b9d0:	62a8      	str	r0, [r5, #40]	; 0x28
   1b9d2:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b9d4:	632a      	str	r2, [r5, #48]	; 0x30
   1b9d6:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b9d8:	4907      	ldr	r1, [pc, #28]	; (1b9f8 <net_if_ipv6_prefix_init+0x4c>)
   1b9da:	4628      	mov	r0, r5
   1b9dc:	f00e fe2e 	bl	2a63c <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b9e0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b9e4:	d004      	beq.n	1b9f0 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b9e6:	2300      	movs	r3, #0
   1b9e8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b9ec:	b005      	add	sp, #20
   1b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b9f0:	2301      	movs	r3, #1
   1b9f2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b9f6:	e7f9      	b.n	1b9ec <net_if_ipv6_prefix_init+0x40>
   1b9f8:	0001b8bd 	.word	0x0001b8bd

0001b9fc <join_mcast_allnodes>:
{
   1b9fc:	b500      	push	{lr}
   1b9fe:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1ba00:	f240 23ff 	movw	r3, #767	; 0x2ff
   1ba04:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1ba08:	2300      	movs	r3, #0
   1ba0a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1ba0e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1ba12:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1ba16:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1ba1a:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1ba1e:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1ba22:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ba26:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1ba2a:	4669      	mov	r1, sp
   1ba2c:	f006 faa4 	bl	21f78 <net_ipv6_mld_join>
}
   1ba30:	b005      	add	sp, #20
   1ba32:	f85d fb04 	ldr.w	pc, [sp], #4

0001ba36 <join_mcast_solicit_node>:
{
   1ba36:	b500      	push	{lr}
   1ba38:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1ba3a:	22ff      	movs	r2, #255	; 0xff
   1ba3c:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1ba40:	2302      	movs	r3, #2
   1ba42:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1ba46:	2300      	movs	r3, #0
   1ba48:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1ba4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1ba50:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1ba54:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1ba58:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1ba5c:	2301      	movs	r3, #1
   1ba5e:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1ba62:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1ba66:	7b4b      	ldrb	r3, [r1, #13]
   1ba68:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ba6c:	89cb      	ldrh	r3, [r1, #14]
   1ba6e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1ba72:	4669      	mov	r1, sp
   1ba74:	f006 fa80 	bl	21f78 <net_ipv6_mld_join>
}
   1ba78:	b005      	add	sp, #20
   1ba7a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ba7e <leave_mcast_all>:
{
   1ba7e:	b538      	push	{r3, r4, r5, lr}
   1ba80:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ba82:	2400      	movs	r4, #0
   1ba84:	e000      	b.n	1ba88 <leave_mcast_all+0xa>
   1ba86:	3401      	adds	r4, #1
   1ba88:	2c04      	cmp	r4, #4
   1ba8a:	dc1a      	bgt.n	1bac2 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1ba8c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ba90:	00d3      	lsls	r3, r2, #3
   1ba92:	442b      	add	r3, r5
   1ba94:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ba98:	f013 0f01 	tst.w	r3, #1
   1ba9c:	d0f3      	beq.n	1ba86 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1ba9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1baa2:	00d3      	lsls	r3, r2, #3
   1baa4:	461a      	mov	r2, r3
   1baa6:	442b      	add	r3, r5
   1baa8:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1baac:	f013 0f02 	tst.w	r3, #2
   1bab0:	d0e9      	beq.n	1ba86 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1bab2:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1bab6:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1bab8:	3118      	adds	r1, #24
   1baba:	4628      	mov	r0, r5
   1babc:	f006 fa96 	bl	21fec <net_ipv6_mld_leave>
   1bac0:	e7e1      	b.n	1ba86 <leave_mcast_all+0x8>
}
   1bac2:	bd38      	pop	{r3, r4, r5, pc}

0001bac4 <net_if_prepare_events>:
{
   1bac4:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1bac6:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bac8:	4d0a      	ldr	r5, [pc, #40]	; (1baf4 <net_if_prepare_events+0x30>)
   1baca:	e00d      	b.n	1bae8 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1bacc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bad0:	0098      	lsls	r0, r3, #2
   1bad2:	f105 0318 	add.w	r3, r5, #24
   1bad6:	2200      	movs	r2, #0
   1bad8:	2104      	movs	r1, #4
   1bada:	4e07      	ldr	r6, [pc, #28]	; (1baf8 <net_if_prepare_events+0x34>)
   1badc:	4430      	add	r0, r6
   1bade:	f00d f927 	bl	28d30 <k_poll_event_init>
		ev_count++;
   1bae2:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bae4:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1bae8:	4b04      	ldr	r3, [pc, #16]	; (1bafc <net_if_prepare_events+0x38>)
   1baea:	429d      	cmp	r5, r3
   1baec:	d1ee      	bne.n	1bacc <net_if_prepare_events+0x8>
}
   1baee:	4620      	mov	r0, r4
   1baf0:	bd70      	pop	{r4, r5, r6, pc}
   1baf2:	bf00      	nop
   1baf4:	2000d760 	.word	0x2000d760
   1baf8:	2000da00 	.word	0x2000da00
   1bafc:	2000da00 	.word	0x2000da00

0001bb00 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bb00:	4b06      	ldr	r3, [pc, #24]	; (1bb1c <net_if_lookup_by_dev+0x1c>)
   1bb02:	4a07      	ldr	r2, [pc, #28]	; (1bb20 <net_if_lookup_by_dev+0x20>)
   1bb04:	4293      	cmp	r3, r2
   1bb06:	d005      	beq.n	1bb14 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1bb08:	681a      	ldr	r2, [r3, #0]
   1bb0a:	4282      	cmp	r2, r0
   1bb0c:	d003      	beq.n	1bb16 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bb0e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1bb12:	e7f6      	b.n	1bb02 <net_if_lookup_by_dev+0x2>
	return NULL;
   1bb14:	2300      	movs	r3, #0
}
   1bb16:	4618      	mov	r0, r3
   1bb18:	4770      	bx	lr
   1bb1a:	bf00      	nop
   1bb1c:	2000d760 	.word	0x2000d760
   1bb20:	2000da00 	.word	0x2000da00

0001bb24 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1bb24:	4b03      	ldr	r3, [pc, #12]	; (1bb34 <net_if_get_default+0x10>)
   1bb26:	4a04      	ldr	r2, [pc, #16]	; (1bb38 <net_if_get_default+0x14>)
   1bb28:	429a      	cmp	r2, r3
   1bb2a:	d001      	beq.n	1bb30 <net_if_get_default+0xc>
	return __net_if_start;
   1bb2c:	4802      	ldr	r0, [pc, #8]	; (1bb38 <net_if_get_default+0x14>)
}
   1bb2e:	4770      	bx	lr
		return NULL;
   1bb30:	2000      	movs	r0, #0
   1bb32:	4770      	bx	lr
   1bb34:	2000da00 	.word	0x2000da00
   1bb38:	2000d760 	.word	0x2000d760

0001bb3c <net_if_start_rs>:
{
   1bb3c:	b510      	push	{r4, lr}
   1bb3e:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1bb40:	f006 fa16 	bl	21f70 <net_ipv6_start_rs>
   1bb44:	b100      	cbz	r0, 1bb48 <net_if_start_rs+0xc>
   1bb46:	bd10      	pop	{r4, pc}
   1bb48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb4c:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1bb50:	4801      	ldr	r0, [pc, #4]	; (1bb58 <net_if_start_rs+0x1c>)
   1bb52:	f00e fdeb 	bl	2a72c <k_delayed_work_submit_to_queue>
}
   1bb56:	e7f6      	b.n	1bb46 <net_if_start_rs+0xa>
   1bb58:	200030f0 	.word	0x200030f0

0001bb5c <rs_timeout>:
{
   1bb5c:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1bb5e:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1bb62:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1bb66:	3301      	adds	r3, #1
   1bb68:	b2db      	uxtb	r3, r3
   1bb6a:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1bb6e:	2b02      	cmp	r3, #2
   1bb70:	d900      	bls.n	1bb74 <rs_timeout+0x18>
   1bb72:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1bb74:	f7ff ffe2 	bl	1bb3c <net_if_start_rs>
}
   1bb78:	e7fb      	b.n	1bb72 <rs_timeout+0x16>
	...

0001bb7c <net_if_ipv6_addr_lookup>:
{
   1bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb80:	4607      	mov	r7, r0
   1bb82:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bb84:	4d1b      	ldr	r5, [pc, #108]	; (1bbf4 <net_if_ipv6_addr_lookup+0x78>)
   1bb86:	e02d      	b.n	1bbe4 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1bb88:	b9ee      	cbnz	r6, 1bbc6 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bb8a:	3401      	adds	r4, #1
   1bb8c:	2c02      	cmp	r4, #2
   1bb8e:	dc27      	bgt.n	1bbe0 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1bb90:	236c      	movs	r3, #108	; 0x6c
   1bb92:	fb03 5304 	mla	r3, r3, r4, r5
   1bb96:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1bb9a:	2e00      	cmp	r6, #0
   1bb9c:	d0f5      	beq.n	1bb8a <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1bb9e:	236c      	movs	r3, #108	; 0x6c
   1bba0:	fb03 5304 	mla	r3, r3, r4, r5
   1bba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1bba6:	2b0a      	cmp	r3, #10
   1bba8:	d1ef      	bne.n	1bb8a <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1bbaa:	216c      	movs	r1, #108	; 0x6c
   1bbac:	fb01 f104 	mul.w	r1, r1, r4
   1bbb0:	3120      	adds	r1, #32
   1bbb2:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1bbb4:	2210      	movs	r2, #16
   1bbb6:	4411      	add	r1, r2
   1bbb8:	4638      	mov	r0, r7
   1bbba:	f00e fead 	bl	2a918 <memcmp>
   1bbbe:	2800      	cmp	r0, #0
   1bbc0:	d0e2      	beq.n	1bb88 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1bbc2:	2600      	movs	r6, #0
   1bbc4:	e7e0      	b.n	1bb88 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1bbc6:	f1b8 0f00 	cmp.w	r8, #0
   1bbca:	d001      	beq.n	1bbd0 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1bbcc:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1bbd0:	206c      	movs	r0, #108	; 0x6c
   1bbd2:	fb00 f004 	mul.w	r0, r0, r4
   1bbd6:	3020      	adds	r0, #32
   1bbd8:	4428      	add	r0, r5
   1bbda:	300c      	adds	r0, #12
   1bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bbe0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1bbe4:	4b04      	ldr	r3, [pc, #16]	; (1bbf8 <net_if_ipv6_addr_lookup+0x7c>)
   1bbe6:	429d      	cmp	r5, r3
   1bbe8:	d001      	beq.n	1bbee <net_if_ipv6_addr_lookup+0x72>
   1bbea:	2400      	movs	r4, #0
   1bbec:	e7ce      	b.n	1bb8c <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1bbee:	2000      	movs	r0, #0
}
   1bbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbf4:	2000d760 	.word	0x2000d760
   1bbf8:	2000da00 	.word	0x2000da00

0001bbfc <dad_timeout>:
{
   1bbfc:	b530      	push	{r4, r5, lr}
   1bbfe:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1bc00:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1bc04:	a902      	add	r1, sp, #8
   1bc06:	2300      	movs	r3, #0
   1bc08:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1bc0c:	2301      	movs	r3, #1
   1bc0e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1bc12:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1bc16:	4620      	mov	r0, r4
   1bc18:	f7ff ffb0 	bl	1bb7c <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1bc1c:	4285      	cmp	r5, r0
   1bc1e:	d001      	beq.n	1bc24 <dad_timeout+0x28>
}
   1bc20:	b003      	add	sp, #12
   1bc22:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1bc24:	2300      	movs	r3, #0
   1bc26:	461a      	mov	r2, r3
   1bc28:	9901      	ldr	r1, [sp, #4]
   1bc2a:	4807      	ldr	r0, [pc, #28]	; (1bc48 <dad_timeout+0x4c>)
   1bc2c:	f007 fdcc 	bl	237c8 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1bc30:	4621      	mov	r1, r4
   1bc32:	9801      	ldr	r0, [sp, #4]
   1bc34:	f004 faf6 	bl	20224 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1bc38:	9801      	ldr	r0, [sp, #4]
   1bc3a:	f7ff fedf 	bl	1b9fc <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1bc3e:	4621      	mov	r1, r4
   1bc40:	9801      	ldr	r0, [sp, #4]
   1bc42:	f7ff fef8 	bl	1ba36 <join_mcast_solicit_node>
}
   1bc46:	e7eb      	b.n	1bc20 <dad_timeout+0x24>
   1bc48:	f060000d 	.word	0xf060000d

0001bc4c <net_if_ipv6_addr_update_lifetime>:
{
   1bc4c:	b508      	push	{r3, lr}
   1bc4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc52:	fb02 f201 	mul.w	r2, r2, r1
   1bc56:	f100 0114 	add.w	r1, r0, #20
   1bc5a:	4802      	ldr	r0, [pc, #8]	; (1bc64 <net_if_ipv6_addr_update_lifetime+0x18>)
   1bc5c:	f00e fd66 	bl	2a72c <k_delayed_work_submit_to_queue>
   1bc60:	bd08      	pop	{r3, pc}
   1bc62:	bf00      	nop
   1bc64:	200030f0 	.word	0x200030f0

0001bc68 <net_if_ipv6_addr_add>:
{
   1bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc6c:	b084      	sub	sp, #16
   1bc6e:	4605      	mov	r5, r0
   1bc70:	460e      	mov	r6, r1
   1bc72:	4690      	mov	r8, r2
   1bc74:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1bc76:	f7ff fe29 	bl	1b8cc <ipv6_addr_find>
	if (ifaddr) {
   1bc7a:	4604      	mov	r4, r0
   1bc7c:	b118      	cbz	r0, 1bc86 <net_if_ipv6_addr_add+0x1e>
}
   1bc7e:	4620      	mov	r0, r4
   1bc80:	b004      	add	sp, #16
   1bc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc86:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bc88:	2b02      	cmp	r3, #2
   1bc8a:	dcf8      	bgt.n	1bc7e <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1bc8c:	226c      	movs	r2, #108	; 0x6c
   1bc8e:	fb02 5203 	mla	r2, r2, r3, r5
   1bc92:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1bc96:	b10a      	cbz	r2, 1bc9c <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bc98:	3301      	adds	r3, #1
   1bc9a:	e7f5      	b.n	1bc88 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1bc9c:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1bca0:	fb0e fe03 	mul.w	lr, lr, r3
   1bca4:	f10e 0e20 	add.w	lr, lr, #32
   1bca8:	44ae      	add	lr, r5
   1bcaa:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1bcae:	2301      	movs	r3, #1
   1bcb0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1bcb4:	230a      	movs	r3, #10
   1bcb6:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1bcba:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1bcbe:	46ec      	mov	ip, sp
   1bcc0:	6830      	ldr	r0, [r6, #0]
   1bcc2:	6871      	ldr	r1, [r6, #4]
   1bcc4:	68b2      	ldr	r2, [r6, #8]
   1bcc6:	68f3      	ldr	r3, [r6, #12]
   1bcc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bccc:	466e      	mov	r6, sp
   1bcce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1bcd0:	f8ce 0010 	str.w	r0, [lr, #16]
   1bcd4:	f8ce 1014 	str.w	r1, [lr, #20]
   1bcd8:	f8ce 2018 	str.w	r2, [lr, #24]
   1bcdc:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1bce0:	4910      	ldr	r1, [pc, #64]	; (1bd24 <net_if_ipv6_addr_add+0xbc>)
   1bce2:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1bce6:	f00e fca9 	bl	2a63c <k_delayed_work_init>
	if (vlifetime) {
   1bcea:	b96f      	cbnz	r7, 1bd08 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1bcec:	2301      	movs	r3, #1
   1bcee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1bcf2:	4621      	mov	r1, r4
   1bcf4:	4628      	mov	r0, r5
   1bcf6:	f7ff fe3b 	bl	1b970 <net_if_ipv6_start_dad>
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	461a      	mov	r2, r3
   1bcfe:	4629      	mov	r1, r5
   1bd00:	4809      	ldr	r0, [pc, #36]	; (1bd28 <net_if_ipv6_addr_add+0xc0>)
   1bd02:	f007 fd61 	bl	237c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1bd06:	e7ba      	b.n	1bc7e <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1bd08:	2300      	movs	r3, #0
   1bd0a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1bd0e:	4907      	ldr	r1, [pc, #28]	; (1bd2c <net_if_ipv6_addr_add+0xc4>)
   1bd10:	f104 0014 	add.w	r0, r4, #20
   1bd14:	f00e fc92 	bl	2a63c <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1bd18:	4639      	mov	r1, r7
   1bd1a:	4620      	mov	r0, r4
   1bd1c:	f7ff ff96 	bl	1bc4c <net_if_ipv6_addr_update_lifetime>
   1bd20:	e7e7      	b.n	1bcf2 <net_if_ipv6_addr_add+0x8a>
   1bd22:	bf00      	nop
   1bd24:	0001bbfd 	.word	0x0001bbfd
   1bd28:	f0600001 	.word	0xf0600001
   1bd2c:	0001b8b5 	.word	0x0001b8b5

0001bd30 <net_if_start_dad>:
{
   1bd30:	b570      	push	{r4, r5, r6, lr}
   1bd32:	b084      	sub	sp, #16
   1bd34:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1bd36:	2300      	movs	r3, #0
   1bd38:	9302      	str	r3, [sp, #8]
   1bd3a:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1bd3c:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1bd40:	22fe      	movs	r2, #254	; 0xfe
   1bd42:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1bd46:	2280      	movs	r2, #128	; 0x80
   1bd48:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1bd4c:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1bd50:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1bd52:	7922      	ldrb	r2, [r4, #4]
   1bd54:	2a06      	cmp	r2, #6
   1bd56:	d020      	beq.n	1bd9a <net_if_start_dad+0x6a>
   1bd58:	2a08      	cmp	r2, #8
   1bd5a:	d044      	beq.n	1bde6 <net_if_start_dad+0xb6>
   1bd5c:	2a02      	cmp	r2, #2
   1bd5e:	d008      	beq.n	1bd72 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1bd60:	2300      	movs	r3, #0
   1bd62:	2201      	movs	r2, #1
   1bd64:	4669      	mov	r1, sp
   1bd66:	4628      	mov	r0, r5
   1bd68:	f7ff ff7e 	bl	1bc68 <net_if_ipv6_addr_add>
   1bd6c:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bd6e:	2400      	movs	r4, #0
   1bd70:	e045      	b.n	1bdfe <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1bd72:	7963      	ldrb	r3, [r4, #5]
   1bd74:	2b01      	cmp	r3, #1
   1bd76:	d1f3      	bne.n	1bd60 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1bd78:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1bd7a:	22ff      	movs	r2, #255	; 0xff
   1bd7c:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1bd80:	22fe      	movs	r2, #254	; 0xfe
   1bd82:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1bd86:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1bd8a:	6903      	ldr	r3, [r0, #16]
   1bd8c:	781a      	ldrb	r2, [r3, #0]
   1bd8e:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1bd92:	785b      	ldrb	r3, [r3, #1]
   1bd94:	f88d 300f 	strb.w	r3, [sp, #15]
   1bd98:	e7e2      	b.n	1bd60 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1bd9a:	2203      	movs	r2, #3
   1bd9c:	6901      	ldr	r1, [r0, #16]
   1bd9e:	a802      	add	r0, sp, #8
   1bda0:	f7e4 fa8e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1bda4:	23ff      	movs	r3, #255	; 0xff
   1bda6:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1bdaa:	23fe      	movs	r3, #254	; 0xfe
   1bdac:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1bdb0:	6929      	ldr	r1, [r5, #16]
   1bdb2:	2203      	movs	r2, #3
   1bdb4:	4411      	add	r1, r2
   1bdb6:	f10d 000d 	add.w	r0, sp, #13
   1bdba:	f7e4 fa81 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1bdbe:	7963      	ldrb	r3, [r4, #5]
   1bdc0:	2b02      	cmp	r3, #2
   1bdc2:	d009      	beq.n	1bdd8 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1bdc4:	7963      	ldrb	r3, [r4, #5]
   1bdc6:	2b03      	cmp	r3, #3
   1bdc8:	d1ca      	bne.n	1bd60 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1bdca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1bdce:	f083 0302 	eor.w	r3, r3, #2
   1bdd2:	f88d 3008 	strb.w	r3, [sp, #8]
   1bdd6:	e7c3      	b.n	1bd60 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1bdd8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1bddc:	f083 0302 	eor.w	r3, r3, #2
   1bde0:	f88d 3008 	strb.w	r3, [sp, #8]
   1bde4:	e7ee      	b.n	1bdc4 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1bde6:	6901      	ldr	r1, [r0, #16]
   1bde8:	a802      	add	r0, sp, #8
   1bdea:	f7e4 fa69 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1bdee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1bdf2:	f083 0302 	eor.w	r3, r3, #2
   1bdf6:	f88d 3008 	strb.w	r3, [sp, #8]
   1bdfa:	e7b1      	b.n	1bd60 <net_if_start_dad+0x30>
   1bdfc:	3401      	adds	r4, #1
   1bdfe:	2c02      	cmp	r4, #2
   1be00:	dc18      	bgt.n	1be34 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1be02:	236c      	movs	r3, #108	; 0x6c
   1be04:	fb03 5304 	mla	r3, r3, r4, r5
   1be08:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1be0c:	2b00      	cmp	r3, #0
   1be0e:	d0f5      	beq.n	1bdfc <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1be10:	236c      	movs	r3, #108	; 0x6c
   1be12:	fb03 5304 	mla	r3, r3, r4, r5
   1be16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1be18:	2b0a      	cmp	r3, #10
   1be1a:	d1ef      	bne.n	1bdfc <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1be1c:	216c      	movs	r1, #108	; 0x6c
   1be1e:	fb01 f104 	mul.w	r1, r1, r4
   1be22:	3120      	adds	r1, #32
   1be24:	4429      	add	r1, r5
   1be26:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1be28:	428e      	cmp	r6, r1
   1be2a:	d0e7      	beq.n	1bdfc <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1be2c:	4628      	mov	r0, r5
   1be2e:	f7ff fd9f 	bl	1b970 <net_if_ipv6_start_dad>
   1be32:	e7e3      	b.n	1bdfc <net_if_start_dad+0xcc>
}
   1be34:	b004      	add	sp, #16
   1be36:	bd70      	pop	{r4, r5, r6, pc}

0001be38 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1be38:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1be3a:	2bff      	cmp	r3, #255	; 0xff
   1be3c:	d134      	bne.n	1bea8 <net_if_ipv6_maddr_add+0x70>
{
   1be3e:	b570      	push	{r4, r5, r6, lr}
   1be40:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1be42:	2c04      	cmp	r4, #4
   1be44:	dc2e      	bgt.n	1bea4 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1be46:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1be4a:	00d3      	lsls	r3, r2, #3
   1be4c:	4403      	add	r3, r0
   1be4e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1be52:	f013 0f01 	tst.w	r3, #1
   1be56:	d001      	beq.n	1be5c <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1be58:	3401      	adds	r4, #1
   1be5a:	e7f2      	b.n	1be42 <net_if_ipv6_maddr_add+0xa>
   1be5c:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1be5e:	0066      	lsls	r6, r4, #1
   1be60:	1932      	adds	r2, r6, r4
   1be62:	00d3      	lsls	r3, r2, #3
   1be64:	4403      	add	r3, r0
   1be66:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1be6a:	f042 0201 	orr.w	r2, r2, #1
   1be6e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1be72:	220a      	movs	r2, #10
   1be74:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1be78:	1933      	adds	r3, r6, r4
   1be7a:	00d8      	lsls	r0, r3, #3
   1be7c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1be80:	4428      	add	r0, r5
   1be82:	2210      	movs	r2, #16
   1be84:	3018      	adds	r0, #24
   1be86:	f7e4 fa1b 	bl	2c0 <memcpy>
   1be8a:	2300      	movs	r3, #0
   1be8c:	461a      	mov	r2, r3
   1be8e:	4629      	mov	r1, r5
   1be90:	4806      	ldr	r0, [pc, #24]	; (1beac <net_if_ipv6_maddr_add+0x74>)
   1be92:	f007 fc99 	bl	237c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1be96:	4434      	add	r4, r6
   1be98:	00e0      	lsls	r0, r4, #3
   1be9a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1be9e:	4428      	add	r0, r5
   1bea0:	3010      	adds	r0, #16
   1bea2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1bea4:	2000      	movs	r0, #0
   1bea6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1bea8:	2000      	movs	r0, #0
   1beaa:	4770      	bx	lr
   1beac:	f0600003 	.word	0xf0600003

0001beb0 <net_if_ipv6_maddr_rm>:
{
   1beb0:	b570      	push	{r4, r5, r6, lr}
   1beb2:	4605      	mov	r5, r0
   1beb4:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1beb6:	2400      	movs	r4, #0
   1beb8:	e000      	b.n	1bebc <net_if_ipv6_maddr_rm+0xc>
   1beba:	3401      	adds	r4, #1
   1bebc:	2c04      	cmp	r4, #4
   1bebe:	dc25      	bgt.n	1bf0c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1bec0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1bec4:	00d3      	lsls	r3, r2, #3
   1bec6:	461a      	mov	r2, r3
   1bec8:	442b      	add	r3, r5
   1beca:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1bece:	f013 0f01 	tst.w	r3, #1
   1bed2:	d0f2      	beq.n	1beba <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1bed4:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1bed8:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1beda:	2210      	movs	r2, #16
   1bedc:	4631      	mov	r1, r6
   1bede:	3018      	adds	r0, #24
   1bee0:	f00e fd1a 	bl	2a918 <memcmp>
		if (!net_ipv6_addr_cmp(
   1bee4:	2800      	cmp	r0, #0
   1bee6:	d1e8      	bne.n	1beba <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1bee8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1beec:	00e3      	lsls	r3, r4, #3
   1beee:	442b      	add	r3, r5
   1bef0:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1bef4:	f36f 0200 	bfc	r2, #0, #1
   1bef8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1befc:	2300      	movs	r3, #0
   1befe:	461a      	mov	r2, r3
   1bf00:	4629      	mov	r1, r5
   1bf02:	4803      	ldr	r0, [pc, #12]	; (1bf10 <net_if_ipv6_maddr_rm+0x60>)
   1bf04:	f007 fc60 	bl	237c8 <net_mgmt_event_notify_with_info>
		return true;
   1bf08:	2001      	movs	r0, #1
   1bf0a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1bf0c:	2000      	movs	r0, #0
}
   1bf0e:	bd70      	pop	{r4, r5, r6, pc}
   1bf10:	f0600004 	.word	0xf0600004

0001bf14 <net_if_ipv6_addr_rm>:
{
   1bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf18:	b084      	sub	sp, #16
   1bf1a:	4606      	mov	r6, r0
   1bf1c:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf1e:	2400      	movs	r4, #0
   1bf20:	e009      	b.n	1bf36 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1bf22:	206c      	movs	r0, #108	; 0x6c
   1bf24:	fb00 f004 	mul.w	r0, r0, r4
   1bf28:	3030      	adds	r0, #48	; 0x30
   1bf2a:	4430      	add	r0, r6
   1bf2c:	3010      	adds	r0, #16
   1bf2e:	f00e fba3 	bl	2a678 <k_delayed_work_cancel>
   1bf32:	e01c      	b.n	1bf6e <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf34:	3401      	adds	r4, #1
   1bf36:	2c02      	cmp	r4, #2
   1bf38:	dc46      	bgt.n	1bfc8 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1bf3a:	236c      	movs	r3, #108	; 0x6c
   1bf3c:	fb03 6304 	mla	r3, r3, r4, r6
   1bf40:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1bf44:	2d00      	cmp	r5, #0
   1bf46:	d0f5      	beq.n	1bf34 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1bf48:	206c      	movs	r0, #108	; 0x6c
   1bf4a:	fb00 f004 	mul.w	r0, r0, r4
   1bf4e:	3020      	adds	r0, #32
   1bf50:	4430      	add	r0, r6
   1bf52:	2210      	movs	r2, #16
   1bf54:	4639      	mov	r1, r7
   1bf56:	4410      	add	r0, r2
   1bf58:	f00e fcde 	bl	2a918 <memcmp>
		if (!net_ipv6_addr_cmp(
   1bf5c:	2800      	cmp	r0, #0
   1bf5e:	d1e9      	bne.n	1bf34 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1bf60:	236c      	movs	r3, #108	; 0x6c
   1bf62:	fb03 6304 	mla	r3, r3, r4, r6
   1bf66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d0d9      	beq.n	1bf22 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1bf6e:	236c      	movs	r3, #108	; 0x6c
   1bf70:	fb03 6404 	mla	r4, r3, r4, r6
   1bf74:	f04f 0800 	mov.w	r8, #0
   1bf78:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1bf7c:	23ff      	movs	r3, #255	; 0xff
   1bf7e:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1bf82:	2202      	movs	r2, #2
   1bf84:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1bf88:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1bf8c:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1bf90:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1bf94:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1bf98:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1bf9c:	2201      	movs	r2, #1
   1bf9e:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1bfa2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1bfa6:	7b7b      	ldrb	r3, [r7, #13]
   1bfa8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1bfac:	89fb      	ldrh	r3, [r7, #14]
   1bfae:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1bfb2:	4669      	mov	r1, sp
   1bfb4:	4630      	mov	r0, r6
   1bfb6:	f7ff ff7b 	bl	1beb0 <net_if_ipv6_maddr_rm>
   1bfba:	4643      	mov	r3, r8
   1bfbc:	4642      	mov	r2, r8
   1bfbe:	4631      	mov	r1, r6
   1bfc0:	4804      	ldr	r0, [pc, #16]	; (1bfd4 <net_if_ipv6_addr_rm+0xc0>)
   1bfc2:	f007 fc01 	bl	237c8 <net_mgmt_event_notify_with_info>
   1bfc6:	e000      	b.n	1bfca <net_if_ipv6_addr_rm+0xb6>
	return false;
   1bfc8:	2500      	movs	r5, #0
}
   1bfca:	4628      	mov	r0, r5
   1bfcc:	b004      	add	sp, #16
   1bfce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bfd2:	bf00      	nop
   1bfd4:	f0600002 	.word	0xf0600002

0001bfd8 <net_if_ipv6_dad_failed>:
{
   1bfd8:	b510      	push	{r4, lr}
   1bfda:	b082      	sub	sp, #8
   1bfdc:	ab02      	add	r3, sp, #8
   1bfde:	f843 0d04 	str.w	r0, [r3, #-4]!
   1bfe2:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1bfe4:	4619      	mov	r1, r3
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	f7ff fdc8 	bl	1bb7c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1bfec:	b160      	cbz	r0, 1c008 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1bfee:	303c      	adds	r0, #60	; 0x3c
   1bff0:	f00e fb42 	bl	2a678 <k_delayed_work_cancel>
   1bff4:	2300      	movs	r3, #0
   1bff6:	461a      	mov	r2, r3
   1bff8:	9901      	ldr	r1, [sp, #4]
   1bffa:	4804      	ldr	r0, [pc, #16]	; (1c00c <net_if_ipv6_dad_failed+0x34>)
   1bffc:	f007 fbe4 	bl	237c8 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1c000:	4621      	mov	r1, r4
   1c002:	9801      	ldr	r0, [sp, #4]
   1c004:	f7ff ff86 	bl	1bf14 <net_if_ipv6_addr_rm>
}
   1c008:	b002      	add	sp, #8
   1c00a:	bd10      	pop	{r4, pc}
   1c00c:	f060000e 	.word	0xf060000e

0001c010 <net_if_ipv6_maddr_lookup>:
{
   1c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c012:	4607      	mov	r7, r0
   1c014:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c016:	4d22      	ldr	r5, [pc, #136]	; (1c0a0 <net_if_ipv6_maddr_lookup+0x90>)
   1c018:	e034      	b.n	1c084 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1c01a:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1c01c:	bb13      	cbnz	r3, 1c064 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1c01e:	3401      	adds	r4, #1
   1c020:	2c04      	cmp	r4, #4
   1c022:	dc2d      	bgt.n	1c080 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1c024:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c028:	00d3      	lsls	r3, r2, #3
   1c02a:	442b      	add	r3, r5
   1c02c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1c030:	f013 0f01 	tst.w	r3, #1
   1c034:	d0f3      	beq.n	1c01e <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1c036:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c03a:	00d3      	lsls	r3, r2, #3
   1c03c:	442b      	add	r3, r5
   1c03e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1c042:	2b0a      	cmp	r3, #10
   1c044:	d1eb      	bne.n	1c01e <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1c046:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c04a:	00d3      	lsls	r3, r2, #3
   1c04c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1c050:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1c052:	2210      	movs	r2, #16
   1c054:	3118      	adds	r1, #24
   1c056:	4638      	mov	r0, r7
   1c058:	f00e fc5e 	bl	2a918 <memcmp>
   1c05c:	2800      	cmp	r0, #0
   1c05e:	d1dc      	bne.n	1c01a <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1c060:	2301      	movs	r3, #1
   1c062:	e7db      	b.n	1c01c <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1c064:	b106      	cbz	r6, 1c068 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1c066:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1c068:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c06c:	00e3      	lsls	r3, r4, #3
   1c06e:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1c072:	4428      	add	r0, r5
   1c074:	3010      	adds	r0, #16
   1c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c078:	2400      	movs	r4, #0
   1c07a:	e7d1      	b.n	1c020 <net_if_ipv6_maddr_lookup+0x10>
   1c07c:	2400      	movs	r4, #0
   1c07e:	e7cf      	b.n	1c020 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c080:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1c084:	4b07      	ldr	r3, [pc, #28]	; (1c0a4 <net_if_ipv6_maddr_lookup+0x94>)
   1c086:	429d      	cmp	r5, r3
   1c088:	d008      	beq.n	1c09c <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1c08a:	2e00      	cmp	r6, #0
   1c08c:	d0f4      	beq.n	1c078 <net_if_ipv6_maddr_lookup+0x68>
   1c08e:	6833      	ldr	r3, [r6, #0]
   1c090:	2b00      	cmp	r3, #0
   1c092:	d0f3      	beq.n	1c07c <net_if_ipv6_maddr_lookup+0x6c>
   1c094:	429d      	cmp	r5, r3
   1c096:	d1f3      	bne.n	1c080 <net_if_ipv6_maddr_lookup+0x70>
   1c098:	2400      	movs	r4, #0
   1c09a:	e7c1      	b.n	1c020 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1c09c:	2000      	movs	r0, #0
}
   1c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c0a0:	2000d760 	.word	0x2000d760
   1c0a4:	2000da00 	.word	0x2000da00

0001c0a8 <net_if_mcast_monitor>:
{
   1c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0aa:	4605      	mov	r5, r0
   1c0ac:	460e      	mov	r6, r1
   1c0ae:	4617      	mov	r7, r2
	return list->head;
   1c0b0:	4b13      	ldr	r3, [pc, #76]	; (1c100 <net_if_mcast_monitor+0x58>)
   1c0b2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1c0b4:	b11b      	cbz	r3, 1c0be <net_if_mcast_monitor+0x16>
   1c0b6:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0b8:	b173      	cbz	r3, 1c0d8 <net_if_mcast_monitor+0x30>
	return node->next;
   1c0ba:	681c      	ldr	r4, [r3, #0]
   1c0bc:	e00c      	b.n	1c0d8 <net_if_mcast_monitor+0x30>
   1c0be:	461c      	mov	r4, r3
   1c0c0:	e00a      	b.n	1c0d8 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1c0c2:	689b      	ldr	r3, [r3, #8]
   1c0c4:	463a      	mov	r2, r7
   1c0c6:	4631      	mov	r1, r6
   1c0c8:	4628      	mov	r0, r5
   1c0ca:	4798      	blx	r3
   1c0cc:	e008      	b.n	1c0e0 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0ce:	4623      	mov	r3, r4
   1c0d0:	e00c      	b.n	1c0ec <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1c0d2:	4622      	mov	r2, r4
   1c0d4:	4623      	mov	r3, r4
   1c0d6:	4614      	mov	r4, r2
   1c0d8:	b183      	cbz	r3, 1c0fc <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1c0da:	685a      	ldr	r2, [r3, #4]
   1c0dc:	42aa      	cmp	r2, r5
   1c0de:	d0f0      	beq.n	1c0c2 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1c0e0:	2c00      	cmp	r4, #0
   1c0e2:	d0f6      	beq.n	1c0d2 <net_if_mcast_monitor+0x2a>
   1c0e4:	4622      	mov	r2, r4
   1c0e6:	2c00      	cmp	r4, #0
   1c0e8:	d0f1      	beq.n	1c0ce <net_if_mcast_monitor+0x26>
	return node->next;
   1c0ea:	6823      	ldr	r3, [r4, #0]
   1c0ec:	b113      	cbz	r3, 1c0f4 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0ee:	b11a      	cbz	r2, 1c0f8 <net_if_mcast_monitor+0x50>
	return node->next;
   1c0f0:	6822      	ldr	r2, [r4, #0]
   1c0f2:	e7ef      	b.n	1c0d4 <net_if_mcast_monitor+0x2c>
   1c0f4:	2200      	movs	r2, #0
   1c0f6:	e7ed      	b.n	1c0d4 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0f8:	2200      	movs	r2, #0
   1c0fa:	e7eb      	b.n	1c0d4 <net_if_mcast_monitor+0x2c>
}
   1c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c0fe:	bf00      	nop
   1c100:	200020b4 	.word	0x200020b4

0001c104 <net_if_ipv6_prefix_add>:
{
   1c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c108:	4605      	mov	r5, r0
   1c10a:	460e      	mov	r6, r1
   1c10c:	4617      	mov	r7, r2
   1c10e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1c110:	f7ff fc00 	bl	1b914 <ipv6_prefix_find>
	if (if_prefix) {
   1c114:	4604      	mov	r4, r0
   1c116:	b110      	cbz	r0, 1c11e <net_if_ipv6_prefix_add+0x1a>
}
   1c118:	4620      	mov	r0, r4
   1c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c11e:	2300      	movs	r3, #0
   1c120:	e000      	b.n	1c124 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c122:	3301      	adds	r3, #1
   1c124:	2b01      	cmp	r3, #1
   1c126:	dcf7      	bgt.n	1c118 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1c128:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1c12c:	008a      	lsls	r2, r1, #2
   1c12e:	442a      	add	r2, r5
   1c130:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1c134:	2a00      	cmp	r2, #0
   1c136:	d1f4      	bne.n	1c122 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1c138:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c13c:	009a      	lsls	r2, r3, #2
   1c13e:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1c142:	442c      	add	r4, r5
   1c144:	3410      	adds	r4, #16
   1c146:	4643      	mov	r3, r8
   1c148:	463a      	mov	r2, r7
   1c14a:	4631      	mov	r1, r6
   1c14c:	4620      	mov	r0, r4
   1c14e:	f7ff fc2d 	bl	1b9ac <net_if_ipv6_prefix_init>
   1c152:	2300      	movs	r3, #0
   1c154:	461a      	mov	r2, r3
   1c156:	4629      	mov	r1, r5
   1c158:	4801      	ldr	r0, [pc, #4]	; (1c160 <net_if_ipv6_prefix_add+0x5c>)
   1c15a:	f007 fb35 	bl	237c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1c15e:	e7db      	b.n	1c118 <net_if_ipv6_prefix_add+0x14>
   1c160:	f0600005 	.word	0xf0600005

0001c164 <net_if_ipv6_prefix_lookup>:
{
   1c164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c168:	4605      	mov	r5, r0
   1c16a:	4688      	mov	r8, r1
   1c16c:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c16e:	2400      	movs	r4, #0
   1c170:	e01d      	b.n	1c1ae <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1c172:	4652      	mov	r2, sl
   1c174:	4641      	mov	r1, r8
   1c176:	4648      	mov	r0, r9
   1c178:	f00e fbce 	bl	2a918 <memcmp>
   1c17c:	b9a0      	cbnz	r0, 1c1a8 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1c17e:	f1bb 0f00 	cmp.w	fp, #0
   1c182:	d012      	beq.n	1c1aa <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1c184:	f1cb 0208 	rsb	r2, fp, #8
   1c188:	23ff      	movs	r3, #255	; 0xff
   1c18a:	4093      	lsls	r3, r2
   1c18c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1c190:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1c194:	f819 200a 	ldrb.w	r2, [r9, sl]
   1c198:	f818 100a 	ldrb.w	r1, [r8, sl]
   1c19c:	404a      	eors	r2, r1
   1c19e:	4213      	tst	r3, r2
   1c1a0:	bf0c      	ite	eq
   1c1a2:	2601      	moveq	r6, #1
   1c1a4:	2600      	movne	r6, #0
   1c1a6:	e000      	b.n	1c1aa <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1c1a8:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1c1aa:	b9e6      	cbnz	r6, 1c1e6 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c1ac:	3401      	adds	r4, #1
   1c1ae:	2c01      	cmp	r4, #1
   1c1b0:	dc22      	bgt.n	1c1f8 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1c1b2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c1b6:	0093      	lsls	r3, r2, #2
   1c1b8:	442b      	add	r3, r5
   1c1ba:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1c1be:	2e00      	cmp	r6, #0
   1c1c0:	d0f4      	beq.n	1c1ac <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1c1c2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c1c6:	0093      	lsls	r3, r2, #2
   1c1c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1c1cc:	442b      	add	r3, r5
   1c1ce:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1c1d2:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1c1d6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1c1da:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1c1de:	2f80      	cmp	r7, #128	; 0x80
   1c1e0:	d9c7      	bls.n	1c172 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1c1e2:	2600      	movs	r6, #0
   1c1e4:	e7e1      	b.n	1c1aa <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1c1e6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1c1ea:	00a3      	lsls	r3, r4, #2
   1c1ec:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1c1f0:	4428      	add	r0, r5
   1c1f2:	3010      	adds	r0, #16
   1c1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1c1f8:	2000      	movs	r0, #0
}
   1c1fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001c200 <net_if_ipv6_addr_onlink>:
{
   1c200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c204:	4606      	mov	r6, r0
   1c206:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1c208:	4d2d      	ldr	r5, [pc, #180]	; (1c2c0 <net_if_ipv6_addr_onlink+0xc0>)
   1c20a:	e048      	b.n	1c29e <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1c20c:	465a      	mov	r2, fp
   1c20e:	4641      	mov	r1, r8
   1c210:	4648      	mov	r0, r9
   1c212:	f00e fb81 	bl	2a918 <memcmp>
   1c216:	b9a8      	cbnz	r0, 1c244 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1c218:	f1ba 0f00 	cmp.w	sl, #0
   1c21c:	d013      	beq.n	1c246 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1c21e:	f1ca 0208 	rsb	r2, sl, #8
   1c222:	23ff      	movs	r3, #255	; 0xff
   1c224:	4093      	lsls	r3, r2
   1c226:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1c22a:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1c22e:	f819 300b 	ldrb.w	r3, [r9, fp]
   1c232:	f818 200b 	ldrb.w	r2, [r8, fp]
   1c236:	4053      	eors	r3, r2
   1c238:	ea1a 0f03 	tst.w	sl, r3
   1c23c:	bf0c      	ite	eq
   1c23e:	2701      	moveq	r7, #1
   1c240:	2700      	movne	r7, #0
   1c242:	e000      	b.n	1c246 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1c244:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1c246:	bb0f      	cbnz	r7, 1c28c <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c248:	3401      	adds	r4, #1
   1c24a:	2c01      	cmp	r4, #1
   1c24c:	dc25      	bgt.n	1c29a <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1c24e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c252:	0093      	lsls	r3, r2, #2
   1c254:	442b      	add	r3, r5
   1c256:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1c25a:	2f00      	cmp	r7, #0
   1c25c:	d0f4      	beq.n	1c248 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1c25e:	0122      	lsls	r2, r4, #4
   1c260:	1b11      	subs	r1, r2, r4
   1c262:	008b      	lsls	r3, r1, #2
   1c264:	4619      	mov	r1, r3
   1c266:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1c26a:	442b      	add	r3, r5
   1c26c:	f103 0910 	add.w	r9, r3, #16
   1c270:	460a      	mov	r2, r1
   1c272:	442a      	add	r2, r5
   1c274:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1c278:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1c27c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1c280:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1c284:	2b80      	cmp	r3, #128	; 0x80
   1c286:	d9c1      	bls.n	1c20c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1c288:	2700      	movs	r7, #0
   1c28a:	e7dc      	b.n	1c246 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1c28c:	b1a6      	cbz	r6, 1c2b8 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1c28e:	6035      	str	r5, [r6, #0]
   1c290:	e012      	b.n	1c2b8 <net_if_ipv6_addr_onlink+0xb8>
   1c292:	2400      	movs	r4, #0
   1c294:	e7d9      	b.n	1c24a <net_if_ipv6_addr_onlink+0x4a>
   1c296:	2400      	movs	r4, #0
   1c298:	e7d7      	b.n	1c24a <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1c29a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1c29e:	4b09      	ldr	r3, [pc, #36]	; (1c2c4 <net_if_ipv6_addr_onlink+0xc4>)
   1c2a0:	429d      	cmp	r5, r3
   1c2a2:	d008      	beq.n	1c2b6 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1c2a4:	2e00      	cmp	r6, #0
   1c2a6:	d0f4      	beq.n	1c292 <net_if_ipv6_addr_onlink+0x92>
   1c2a8:	6833      	ldr	r3, [r6, #0]
   1c2aa:	2b00      	cmp	r3, #0
   1c2ac:	d0f3      	beq.n	1c296 <net_if_ipv6_addr_onlink+0x96>
   1c2ae:	429d      	cmp	r5, r3
   1c2b0:	d1f3      	bne.n	1c29a <net_if_ipv6_addr_onlink+0x9a>
   1c2b2:	2400      	movs	r4, #0
   1c2b4:	e7c9      	b.n	1c24a <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1c2b6:	2700      	movs	r7, #0
}
   1c2b8:	4638      	mov	r0, r7
   1c2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2be:	bf00      	nop
   1c2c0:	2000d760 	.word	0x2000d760
   1c2c4:	2000da00 	.word	0x2000da00

0001c2c8 <net_if_ipv6_prefix_set_timer>:
{
   1c2c8:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1c2ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2ce:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1c2d2:	4b05      	ldr	r3, [pc, #20]	; (1c2e8 <net_if_ipv6_prefix_set_timer+0x20>)
   1c2d4:	4299      	cmp	r1, r3
   1c2d6:	d901      	bls.n	1c2dc <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1c2d8:	f06f 0201 	mvn.w	r2, #1
   1c2dc:	4601      	mov	r1, r0
   1c2de:	4803      	ldr	r0, [pc, #12]	; (1c2ec <net_if_ipv6_prefix_set_timer+0x24>)
   1c2e0:	f00e fa24 	bl	2a72c <k_delayed_work_submit_to_queue>
   1c2e4:	bd08      	pop	{r3, pc}
   1c2e6:	bf00      	nop
   1c2e8:	00418937 	.word	0x00418937
   1c2ec:	200030f0 	.word	0x200030f0

0001c2f0 <net_if_ipv6_prefix_unset_timer>:
{
   1c2f0:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1c2f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1c2f6:	b903      	cbnz	r3, 1c2fa <net_if_ipv6_prefix_unset_timer+0xa>
   1c2f8:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1c2fa:	f00e f9bd 	bl	2a678 <k_delayed_work_cancel>
   1c2fe:	e7fb      	b.n	1c2f8 <net_if_ipv6_prefix_unset_timer+0x8>

0001c300 <net_if_ipv6_prefix_rm>:
{
   1c300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c304:	4606      	mov	r6, r0
   1c306:	460f      	mov	r7, r1
   1c308:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c30a:	2400      	movs	r4, #0
   1c30c:	e000      	b.n	1c310 <net_if_ipv6_prefix_rm+0x10>
   1c30e:	3401      	adds	r4, #1
   1c310:	2c01      	cmp	r4, #1
   1c312:	dc2f      	bgt.n	1c374 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1c314:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c318:	0093      	lsls	r3, r2, #2
   1c31a:	461a      	mov	r2, r3
   1c31c:	4433      	add	r3, r6
   1c31e:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1c322:	2d00      	cmp	r5, #0
   1c324:	d0f3      	beq.n	1c30e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1c326:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1c32a:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c32c:	2210      	movs	r2, #16
   1c32e:	4639      	mov	r1, r7
   1c330:	4410      	add	r0, r2
   1c332:	f00e faf1 	bl	2a918 <memcmp>
   1c336:	2800      	cmp	r0, #0
   1c338:	d1e9      	bne.n	1c30e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1c33a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c33e:	0093      	lsls	r3, r2, #2
   1c340:	4433      	add	r3, r6
   1c342:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1c346:	4543      	cmp	r3, r8
   1c348:	d1e1      	bne.n	1c30e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1c34a:	0127      	lsls	r7, r4, #4
   1c34c:	1b3a      	subs	r2, r7, r4
   1c34e:	0093      	lsls	r3, r2, #2
   1c350:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1c354:	18f0      	adds	r0, r6, r3
   1c356:	3010      	adds	r0, #16
   1c358:	f7ff ffca 	bl	1c2f0 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1c35c:	1b3c      	subs	r4, r7, r4
   1c35e:	00a3      	lsls	r3, r4, #2
   1c360:	4433      	add	r3, r6
   1c362:	2200      	movs	r2, #0
   1c364:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1c368:	4613      	mov	r3, r2
   1c36a:	4631      	mov	r1, r6
   1c36c:	4803      	ldr	r0, [pc, #12]	; (1c37c <net_if_ipv6_prefix_rm+0x7c>)
   1c36e:	f007 fa2b 	bl	237c8 <net_mgmt_event_notify_with_info>
		return true;
   1c372:	e000      	b.n	1c376 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1c374:	2500      	movs	r5, #0
}
   1c376:	4628      	mov	r0, r5
   1c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c37c:	f0600006 	.word	0xf0600006

0001c380 <net_if_ipv6_router_lookup>:
{
   1c380:	b570      	push	{r4, r5, r6, lr}
   1c382:	4605      	mov	r5, r0
   1c384:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c386:	2400      	movs	r4, #0
   1c388:	2c00      	cmp	r4, #0
   1c38a:	dd01      	ble.n	1c390 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1c38c:	2000      	movs	r0, #0
}
   1c38e:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1c390:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1c394:	009a      	lsls	r2, r3, #2
   1c396:	4b11      	ldr	r3, [pc, #68]	; (1c3dc <net_if_ipv6_router_lookup+0x5c>)
   1c398:	4413      	add	r3, r2
   1c39a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1c39e:	b123      	cbz	r3, 1c3aa <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1c3a0:	4b0e      	ldr	r3, [pc, #56]	; (1c3dc <net_if_ipv6_router_lookup+0x5c>)
   1c3a2:	4413      	add	r3, r2
   1c3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1c3a6:	2b0a      	cmp	r3, #10
   1c3a8:	d001      	beq.n	1c3ae <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c3aa:	3401      	adds	r4, #1
   1c3ac:	e7ec      	b.n	1c388 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1c3ae:	4b0b      	ldr	r3, [pc, #44]	; (1c3dc <net_if_ipv6_router_lookup+0x5c>)
   1c3b0:	4413      	add	r3, r2
   1c3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1c3b4:	42ab      	cmp	r3, r5
   1c3b6:	d1f8      	bne.n	1c3aa <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1c3b8:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1c3bc:	0093      	lsls	r3, r2, #2
   1c3be:	3328      	adds	r3, #40	; 0x28
   1c3c0:	4a06      	ldr	r2, [pc, #24]	; (1c3dc <net_if_ipv6_router_lookup+0x5c>)
   1c3c2:	4413      	add	r3, r2
   1c3c4:	2210      	movs	r2, #16
   1c3c6:	4631      	mov	r1, r6
   1c3c8:	1d18      	adds	r0, r3, #4
   1c3ca:	f00e faa5 	bl	2a918 <memcmp>
   1c3ce:	2800      	cmp	r0, #0
   1c3d0:	d1eb      	bne.n	1c3aa <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1c3d2:	2344      	movs	r3, #68	; 0x44
   1c3d4:	4801      	ldr	r0, [pc, #4]	; (1c3dc <net_if_ipv6_router_lookup+0x5c>)
   1c3d6:	fb03 0004 	mla	r0, r3, r4, r0
   1c3da:	bd70      	pop	{r4, r5, r6, pc}
   1c3dc:	200020bc 	.word	0x200020bc

0001c3e0 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c3e0:	2300      	movs	r3, #0
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	dd01      	ble.n	1c3ea <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1c3e6:	2000      	movs	r0, #0
}
   1c3e8:	4770      	bx	lr
		if (!routers[i].is_used ||
   1c3ea:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1c3ee:	0091      	lsls	r1, r2, #2
   1c3f0:	4a0e      	ldr	r2, [pc, #56]	; (1c42c <net_if_ipv6_router_find_default+0x4c>)
   1c3f2:	440a      	add	r2, r1
   1c3f4:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1c3f8:	b14a      	cbz	r2, 1c40e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1c3fa:	4a0c      	ldr	r2, [pc, #48]	; (1c42c <net_if_ipv6_router_find_default+0x4c>)
   1c3fc:	440a      	add	r2, r1
   1c3fe:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1c402:	b122      	cbz	r2, 1c40e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1c404:	4a09      	ldr	r2, [pc, #36]	; (1c42c <net_if_ipv6_router_find_default+0x4c>)
   1c406:	440a      	add	r2, r1
   1c408:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1c40a:	2a0a      	cmp	r2, #10
   1c40c:	d001      	beq.n	1c412 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c40e:	3301      	adds	r3, #1
   1c410:	e7e7      	b.n	1c3e2 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1c412:	b120      	cbz	r0, 1c41e <net_if_ipv6_router_find_default+0x3e>
   1c414:	4a05      	ldr	r2, [pc, #20]	; (1c42c <net_if_ipv6_router_find_default+0x4c>)
   1c416:	440a      	add	r2, r1
   1c418:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1c41a:	4290      	cmp	r0, r2
   1c41c:	d1f7      	bne.n	1c40e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1c41e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1c422:	009a      	lsls	r2, r3, #2
   1c424:	4801      	ldr	r0, [pc, #4]	; (1c42c <net_if_ipv6_router_find_default+0x4c>)
   1c426:	4410      	add	r0, r2
   1c428:	4770      	bx	lr
   1c42a:	bf00      	nop
   1c42c:	200020bc 	.word	0x200020bc

0001c430 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1c430:	b508      	push	{r3, lr}
   1c432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c436:	fb02 f201 	mul.w	r2, r2, r1
   1c43a:	4601      	mov	r1, r0
   1c43c:	4801      	ldr	r0, [pc, #4]	; (1c444 <net_if_ipv6_router_update_lifetime+0x14>)
   1c43e:	f00e f975 	bl	2a72c <k_delayed_work_submit_to_queue>
   1c442:	bd08      	pop	{r3, pc}
   1c444:	200030f0 	.word	0x200030f0

0001c448 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c44c:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c44e:	2300      	movs	r3, #0
   1c450:	2b00      	cmp	r3, #0
   1c452:	dd04      	ble.n	1c45e <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1c454:	2400      	movs	r4, #0
}
   1c456:	4620      	mov	r0, r4
   1c458:	b004      	add	sp, #16
   1c45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1c45e:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1c462:	00a5      	lsls	r5, r4, #2
   1c464:	4c20      	ldr	r4, [pc, #128]	; (1c4e8 <net_if_ipv6_router_add+0xa0>)
   1c466:	442c      	add	r4, r5
   1c468:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1c46c:	b10c      	cbz	r4, 1c472 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c46e:	3301      	adds	r3, #1
   1c470:	e7ee      	b.n	1c450 <net_if_ipv6_router_add+0x8>
   1c472:	4616      	mov	r6, r2
   1c474:	460f      	mov	r7, r1
   1c476:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1c478:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1c47c:	009a      	lsls	r2, r3, #2
   1c47e:	4c1a      	ldr	r4, [pc, #104]	; (1c4e8 <net_if_ipv6_router_add+0xa0>)
   1c480:	4414      	add	r4, r2
	router->is_used = true;
   1c482:	2301      	movs	r3, #1
   1c484:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1c488:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1c48a:	230a      	movs	r3, #10
   1c48c:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1c48e:	466d      	mov	r5, sp
   1c490:	6808      	ldr	r0, [r1, #0]
   1c492:	6849      	ldr	r1, [r1, #4]
   1c494:	68ba      	ldr	r2, [r7, #8]
   1c496:	68fb      	ldr	r3, [r7, #12]
   1c498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c49a:	466d      	mov	r5, sp
   1c49c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c49e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1c4a0:	6321      	str	r1, [r4, #48]	; 0x30
   1c4a2:	6362      	str	r2, [r4, #52]	; 0x34
   1c4a4:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1c4a6:	b966      	cbnz	r6, 1c4c2 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1c4a8:	2300      	movs	r3, #0
   1c4aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1c4ae:	2301      	movs	r3, #1
   1c4b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1c4b4:	2300      	movs	r3, #0
   1c4b6:	461a      	mov	r2, r3
   1c4b8:	4641      	mov	r1, r8
   1c4ba:	480c      	ldr	r0, [pc, #48]	; (1c4ec <net_if_ipv6_router_add+0xa4>)
   1c4bc:	f007 f984 	bl	237c8 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1c4c0:	e7c9      	b.n	1c456 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1c4c2:	2301      	movs	r3, #1
   1c4c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1c4c8:	2300      	movs	r3, #0
   1c4ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1c4ce:	4908      	ldr	r1, [pc, #32]	; (1c4f0 <net_if_ipv6_router_add+0xa8>)
   1c4d0:	4620      	mov	r0, r4
   1c4d2:	f00e f8b3 	bl	2a63c <k_delayed_work_init>
   1c4d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c4da:	fb02 f206 	mul.w	r2, r2, r6
   1c4de:	4621      	mov	r1, r4
   1c4e0:	4804      	ldr	r0, [pc, #16]	; (1c4f4 <net_if_ipv6_router_add+0xac>)
   1c4e2:	f00e f923 	bl	2a72c <k_delayed_work_submit_to_queue>
   1c4e6:	e7e5      	b.n	1c4b4 <net_if_ipv6_router_add+0x6c>
   1c4e8:	200020bc 	.word	0x200020bc
   1c4ec:	f0600009 	.word	0xf0600009
   1c4f0:	0001b8c5 	.word	0x0001b8c5
   1c4f4:	200030f0 	.word	0x200030f0

0001c4f8 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c4fc:	2400      	movs	r4, #0
   1c4fe:	2c00      	cmp	r4, #0
   1c500:	dd03      	ble.n	1c50a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1c502:	2500      	movs	r5, #0
}
   1c504:	4628      	mov	r0, r5
   1c506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1c50a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1c50e:	009a      	lsls	r2, r3, #2
   1c510:	4b0d      	ldr	r3, [pc, #52]	; (1c548 <net_if_ipv6_router_rm+0x50>)
   1c512:	4413      	add	r3, r2
   1c514:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1c518:	b11d      	cbz	r5, 1c522 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1c51a:	4b0b      	ldr	r3, [pc, #44]	; (1c548 <net_if_ipv6_router_rm+0x50>)
   1c51c:	4413      	add	r3, r2
   1c51e:	4283      	cmp	r3, r0
   1c520:	d001      	beq.n	1c526 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1c522:	3401      	adds	r4, #1
   1c524:	e7eb      	b.n	1c4fe <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1c526:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1c548 <net_if_ipv6_router_rm+0x50>
   1c52a:	4617      	mov	r7, r2
   1c52c:	4447      	add	r7, r8
   1c52e:	4638      	mov	r0, r7
   1c530:	f00e f8a2 	bl	2a678 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1c534:	2200      	movs	r2, #0
   1c536:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1c53a:	4613      	mov	r3, r2
   1c53c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c53e:	4803      	ldr	r0, [pc, #12]	; (1c54c <net_if_ipv6_router_rm+0x54>)
   1c540:	f007 f942 	bl	237c8 <net_mgmt_event_notify_with_info>
		return true;
   1c544:	e7de      	b.n	1c504 <net_if_ipv6_router_rm+0xc>
   1c546:	bf00      	nop
   1c548:	200020bc 	.word	0x200020bc
   1c54c:	f060000a 	.word	0xf060000a

0001c550 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1c550:	b430      	push	{r4, r5}
   1c552:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c554:	2300      	movs	r3, #0
   1c556:	e006      	b.n	1c566 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1c558:	226c      	movs	r2, #108	; 0x6c
   1c55a:	fb02 4203 	mla	r2, r2, r3, r4
   1c55e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1c560:	2a0a      	cmp	r2, #10
   1c562:	d014      	beq.n	1c58e <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c564:	3301      	adds	r3, #1
   1c566:	2b02      	cmp	r3, #2
   1c568:	dc1d      	bgt.n	1c5a6 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1c56a:	226c      	movs	r2, #108	; 0x6c
   1c56c:	fb02 4203 	mla	r2, r2, r3, r4
   1c570:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1c574:	2a00      	cmp	r2, #0
   1c576:	d0f5      	beq.n	1c564 <net_if_ipv6_get_ll+0x14>
   1c578:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1c57c:	d0ec      	beq.n	1c558 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1c57e:	226c      	movs	r2, #108	; 0x6c
   1c580:	fb02 4203 	mla	r2, r2, r3, r4
   1c584:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1c588:	4291      	cmp	r1, r2
   1c58a:	d1eb      	bne.n	1c564 <net_if_ipv6_get_ll+0x14>
   1c58c:	e7e4      	b.n	1c558 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1c58e:	206c      	movs	r0, #108	; 0x6c
   1c590:	fb00 f003 	mul.w	r0, r0, r3
   1c594:	3020      	adds	r0, #32
   1c596:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1c598:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1c59c:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1c5a0:	4295      	cmp	r5, r2
   1c5a2:	d1df      	bne.n	1c564 <net_if_ipv6_get_ll+0x14>
   1c5a4:	e000      	b.n	1c5a8 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1c5a6:	2000      	movs	r0, #0
}
   1c5a8:	bc30      	pop	{r4, r5}
   1c5aa:	4770      	bx	lr

0001c5ac <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1c5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c5b0:	4607      	mov	r7, r0
   1c5b2:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1c5b4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c5b8:	429a      	cmp	r2, r3
   1c5ba:	f000 80d7 	beq.w	1c76c <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1c5be:	780b      	ldrb	r3, [r1, #0]
   1c5c0:	2bff      	cmp	r3, #255	; 0xff
   1c5c2:	d004      	beq.n	1c5ce <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1c5c4:	f04f 0900 	mov.w	r9, #0
   1c5c8:	4e74      	ldr	r6, [pc, #464]	; (1c79c <net_if_ipv6_select_src_addr+0x1f0>)
   1c5ca:	46c8      	mov	r8, r9
   1c5cc:	e05b      	b.n	1c686 <net_if_ipv6_select_src_addr+0xda>
   1c5ce:	4c73      	ldr	r4, [pc, #460]	; (1c79c <net_if_ipv6_select_src_addr+0x1f0>)
   1c5d0:	e0c0      	b.n	1c754 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1c5d2:	246c      	movs	r4, #108	; 0x6c
   1c5d4:	fb04 640e 	mla	r4, r4, lr, r6
   1c5d8:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c5da:	2c0a      	cmp	r4, #10
   1c5dc:	d01e      	beq.n	1c61c <net_if_ipv6_select_src_addr+0x70>
	return false;
   1c5de:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c5e0:	bb8b      	cbnz	r3, 1c646 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c5e2:	f10e 0e01 	add.w	lr, lr, #1
   1c5e6:	fa5f fe8e 	uxtb.w	lr, lr
   1c5ea:	f1be 0f02 	cmp.w	lr, #2
   1c5ee:	d846      	bhi.n	1c67e <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c5f0:	46f4      	mov	ip, lr
   1c5f2:	236c      	movs	r3, #108	; 0x6c
   1c5f4:	fb03 f30e 	mul.w	r3, r3, lr
   1c5f8:	f103 0220 	add.w	r2, r3, #32
   1c5fc:	4432      	add	r2, r6
   1c5fe:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c600:	4433      	add	r3, r6
   1c602:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c606:	2b00      	cmp	r3, #0
   1c608:	d0ea      	beq.n	1c5e0 <net_if_ipv6_select_src_addr+0x34>
   1c60a:	246c      	movs	r4, #108	; 0x6c
   1c60c:	fb04 640e 	mla	r4, r4, lr, r6
   1c610:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1c614:	2c01      	cmp	r4, #1
   1c616:	d0dc      	beq.n	1c5d2 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1c618:	2300      	movs	r3, #0
   1c61a:	e7e1      	b.n	1c5e0 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1c61c:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1c61e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1c622:	4294      	cmp	r4, r2
   1c624:	d1dc      	bne.n	1c5e0 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1c626:	2300      	movs	r3, #0
   1c628:	e7da      	b.n	1c5e0 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1c62a:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1c62c:	2300      	movs	r3, #0
   1c62e:	2b07      	cmp	r3, #7
   1c630:	d81b      	bhi.n	1c66a <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1c632:	f015 0f80 	tst.w	r5, #128	; 0x80
   1c636:	d118      	bne.n	1c66a <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1c638:	3401      	adds	r4, #1
   1c63a:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1c63c:	006d      	lsls	r5, r5, #1
   1c63e:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1c640:	3301      	adds	r3, #1
   1c642:	b2db      	uxtb	r3, r3
   1c644:	e7f3      	b.n	1c62e <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c646:	2400      	movs	r4, #0
   1c648:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1c64a:	2b0f      	cmp	r3, #15
   1c64c:	d80d      	bhi.n	1c66a <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1c64e:	5ccd      	ldrb	r5, [r1, r3]
   1c650:	226c      	movs	r2, #108	; 0x6c
   1c652:	fb02 620c 	mla	r2, r2, ip, r6
   1c656:	441a      	add	r2, r3
   1c658:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1c65c:	4295      	cmp	r5, r2
   1c65e:	d1e4      	bne.n	1c62a <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1c660:	3408      	adds	r4, #8
   1c662:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1c664:	3301      	adds	r3, #1
   1c666:	b2db      	uxtb	r3, r3
   1c668:	e7ef      	b.n	1c64a <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1c66a:	454c      	cmp	r4, r9
   1c66c:	d3b9      	bcc.n	1c5e2 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1c66e:	206c      	movs	r0, #108	; 0x6c
   1c670:	fb00 f00c 	mul.w	r0, r0, ip
   1c674:	3020      	adds	r0, #32
   1c676:	4430      	add	r0, r6
   1c678:	3010      	adds	r0, #16
			*best_so_far = len;
   1c67a:	46a1      	mov	r9, r4
   1c67c:	e7b1      	b.n	1c5e2 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1c67e:	b150      	cbz	r0, 1c696 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1c680:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1c684:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1c686:	b947      	cbnz	r7, 1c69a <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1c688:	4b45      	ldr	r3, [pc, #276]	; (1c7a0 <net_if_ipv6_select_src_addr+0x1f4>)
   1c68a:	429e      	cmp	r6, r3
   1c68c:	d005      	beq.n	1c69a <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c68e:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1c692:	4670      	mov	r0, lr
   1c694:	e7a9      	b.n	1c5ea <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1c696:	4640      	mov	r0, r8
   1c698:	e7f2      	b.n	1c680 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1c69a:	2f00      	cmp	r7, #0
   1c69c:	d073      	beq.n	1c786 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c69e:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1c6a0:	46a8      	mov	r8, r5
   1c6a2:	e009      	b.n	1c6b8 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1c6a4:	206c      	movs	r0, #108	; 0x6c
   1c6a6:	fb00 7005 	mla	r0, r0, r5, r7
   1c6aa:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c6ac:	280a      	cmp	r0, #10
   1c6ae:	d01b      	beq.n	1c6e8 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1c6b0:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c6b2:	bb73      	cbnz	r3, 1c712 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c6b4:	3501      	adds	r5, #1
   1c6b6:	b2ed      	uxtb	r5, r5
   1c6b8:	2d02      	cmp	r5, #2
   1c6ba:	d864      	bhi.n	1c786 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c6bc:	462e      	mov	r6, r5
   1c6be:	236c      	movs	r3, #108	; 0x6c
   1c6c0:	fb03 f305 	mul.w	r3, r3, r5
   1c6c4:	f103 0220 	add.w	r2, r3, #32
   1c6c8:	443a      	add	r2, r7
   1c6ca:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c6cc:	443b      	add	r3, r7
   1c6ce:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c6d2:	2b00      	cmp	r3, #0
   1c6d4:	d0ed      	beq.n	1c6b2 <net_if_ipv6_select_src_addr+0x106>
   1c6d6:	206c      	movs	r0, #108	; 0x6c
   1c6d8:	fb00 7005 	mla	r0, r0, r5, r7
   1c6dc:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1c6e0:	2801      	cmp	r0, #1
   1c6e2:	d0df      	beq.n	1c6a4 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1c6e4:	2300      	movs	r3, #0
   1c6e6:	e7e4      	b.n	1c6b2 <net_if_ipv6_select_src_addr+0x106>
   1c6e8:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1c6ea:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1c6ee:	4290      	cmp	r0, r2
   1c6f0:	d1df      	bne.n	1c6b2 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1c6f2:	2300      	movs	r3, #0
   1c6f4:	e7dd      	b.n	1c6b2 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1c6f6:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	2b07      	cmp	r3, #7
   1c6fc:	d81b      	bhi.n	1c736 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1c6fe:	f014 0f80 	tst.w	r4, #128	; 0x80
   1c702:	d118      	bne.n	1c736 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1c704:	3001      	adds	r0, #1
   1c706:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1c708:	0064      	lsls	r4, r4, #1
   1c70a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1c70c:	3301      	adds	r3, #1
   1c70e:	b2db      	uxtb	r3, r3
   1c710:	e7f3      	b.n	1c6fa <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c712:	2000      	movs	r0, #0
   1c714:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1c716:	2b0f      	cmp	r3, #15
   1c718:	d80d      	bhi.n	1c736 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1c71a:	5ccc      	ldrb	r4, [r1, r3]
   1c71c:	226c      	movs	r2, #108	; 0x6c
   1c71e:	fb02 7206 	mla	r2, r2, r6, r7
   1c722:	441a      	add	r2, r3
   1c724:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1c728:	4294      	cmp	r4, r2
   1c72a:	d1e4      	bne.n	1c6f6 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1c72c:	3008      	adds	r0, #8
   1c72e:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1c730:	3301      	adds	r3, #1
   1c732:	b2db      	uxtb	r3, r3
   1c734:	e7ef      	b.n	1c716 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1c736:	4548      	cmp	r0, r9
   1c738:	d3bc      	bcc.n	1c6b4 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1c73a:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1c73e:	fb08 f806 	mul.w	r8, r8, r6
   1c742:	f108 0820 	add.w	r8, r8, #32
   1c746:	44b8      	add	r8, r7
   1c748:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1c74c:	4681      	mov	r9, r0
   1c74e:	e7b1      	b.n	1c6b4 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1c750:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1c754:	b97f      	cbnz	r7, 1c776 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1c756:	4b12      	ldr	r3, [pc, #72]	; (1c7a0 <net_if_ipv6_select_src_addr+0x1f4>)
   1c758:	429c      	cmp	r4, r3
   1c75a:	d009      	beq.n	1c770 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1c75c:	2101      	movs	r1, #1
   1c75e:	4620      	mov	r0, r4
   1c760:	f7ff fef6 	bl	1c550 <net_if_ipv6_get_ll>
			if (addr) {
   1c764:	4680      	mov	r8, r0
   1c766:	2800      	cmp	r0, #0
   1c768:	d0f2      	beq.n	1c750 <net_if_ipv6_select_src_addr+0x1a4>
   1c76a:	e006      	b.n	1c77a <net_if_ipv6_select_src_addr+0x1ce>
   1c76c:	4c0b      	ldr	r4, [pc, #44]	; (1c79c <net_if_ipv6_select_src_addr+0x1f0>)
   1c76e:	e7f1      	b.n	1c754 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1c770:	f04f 0800 	mov.w	r8, #0
   1c774:	e001      	b.n	1c77a <net_if_ipv6_select_src_addr+0x1ce>
   1c776:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1c77a:	b127      	cbz	r7, 1c786 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c77c:	2101      	movs	r1, #1
   1c77e:	4638      	mov	r0, r7
   1c780:	f7ff fee6 	bl	1c550 <net_if_ipv6_get_ll>
   1c784:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1c786:	f1b8 0f00 	cmp.w	r8, #0
   1c78a:	d002      	beq.n	1c792 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1c78c:	4640      	mov	r0, r8
}
   1c78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1c792:	f003 fd67 	bl	20264 <net_ipv6_unspecified_address>
   1c796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c79a:	bf00      	nop
   1c79c:	2000d760 	.word	0x2000d760
   1c7a0:	2000da00 	.word	0x2000da00

0001c7a4 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1c7a4:	b510      	push	{r4, lr}
   1c7a6:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1c7a8:	f7e5 fcc4 	bl	2134 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1c7ac:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1c7b0:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1c7b4:	fb03 0012 	mls	r0, r3, r2, r0
   1c7b8:	bd10      	pop	{r4, pc}
	...

0001c7bc <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7be:	4605      	mov	r5, r0
   1c7c0:	460e      	mov	r6, r1
   1c7c2:	4617      	mov	r7, r2
	return list->head;
   1c7c4:	4b11      	ldr	r3, [pc, #68]	; (1c80c <net_if_call_link_cb+0x50>)
   1c7c6:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c7c8:	b11b      	cbz	r3, 1c7d2 <net_if_call_link_cb+0x16>
   1c7ca:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c7cc:	b143      	cbz	r3, 1c7e0 <net_if_call_link_cb+0x24>
	return node->next;
   1c7ce:	681c      	ldr	r4, [r3, #0]
   1c7d0:	e006      	b.n	1c7e0 <net_if_call_link_cb+0x24>
   1c7d2:	461c      	mov	r4, r3
   1c7d4:	e004      	b.n	1c7e0 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c7d6:	4623      	mov	r3, r4
   1c7d8:	e00e      	b.n	1c7f8 <net_if_call_link_cb+0x3c>
   1c7da:	4622      	mov	r2, r4
   1c7dc:	4623      	mov	r3, r4
   1c7de:	4614      	mov	r4, r2
   1c7e0:	b193      	cbz	r3, 1c808 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1c7e2:	685b      	ldr	r3, [r3, #4]
   1c7e4:	463a      	mov	r2, r7
   1c7e6:	4631      	mov	r1, r6
   1c7e8:	4628      	mov	r0, r5
   1c7ea:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c7ec:	2c00      	cmp	r4, #0
   1c7ee:	d0f4      	beq.n	1c7da <net_if_call_link_cb+0x1e>
   1c7f0:	4622      	mov	r2, r4
   1c7f2:	2c00      	cmp	r4, #0
   1c7f4:	d0ef      	beq.n	1c7d6 <net_if_call_link_cb+0x1a>
	return node->next;
   1c7f6:	6823      	ldr	r3, [r4, #0]
   1c7f8:	b113      	cbz	r3, 1c800 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c7fa:	b11a      	cbz	r2, 1c804 <net_if_call_link_cb+0x48>
	return node->next;
   1c7fc:	6822      	ldr	r2, [r4, #0]
   1c7fe:	e7ed      	b.n	1c7dc <net_if_call_link_cb+0x20>
   1c800:	2200      	movs	r2, #0
   1c802:	e7eb      	b.n	1c7dc <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c804:	2200      	movs	r2, #0
   1c806:	e7e9      	b.n	1c7dc <net_if_call_link_cb+0x20>
	}
}
   1c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c80a:	bf00      	nop
   1c80c:	200020ac 	.word	0x200020ac

0001c810 <net_if_send_data>:
{
   1c810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c814:	4606      	mov	r6, r0
   1c816:	460c      	mov	r4, r1
	return pkt->context;
   1c818:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1c81a:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1c81e:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1c822:	f3bf 8f5b 	dmb	ish
   1c826:	68c3      	ldr	r3, [r0, #12]
   1c828:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c82c:	f013 0f01 	tst.w	r3, #1
   1c830:	d10a      	bne.n	1c848 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1c832:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1c836:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1c838:	b10f      	cbz	r7, 1c83e <net_if_send_data+0x2e>
   1c83a:	2d02      	cmp	r5, #2
   1c83c:	d02e      	beq.n	1c89c <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1c83e:	2d02      	cmp	r5, #2
   1c840:	d050      	beq.n	1c8e4 <net_if_send_data+0xd4>
}
   1c842:	4628      	mov	r0, r5
   1c844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c848:	f3bf 8f5b 	dmb	ish
   1c84c:	68c3      	ldr	r3, [r0, #12]
   1c84e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c852:	f013 0f02 	tst.w	r3, #2
   1c856:	d101      	bne.n	1c85c <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1c858:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c85a:	b173      	cbz	r3, 1c87a <net_if_send_data+0x6a>
	return pkt->family;
   1c85c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c860:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c864:	2b0a      	cmp	r3, #10
   1c866:	d00f      	beq.n	1c888 <net_if_send_data+0x78>
   1c868:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1c86a:	6873      	ldr	r3, [r6, #4]
   1c86c:	685b      	ldr	r3, [r3, #4]
   1c86e:	4630      	mov	r0, r6
   1c870:	4798      	blx	r3
   1c872:	4605      	mov	r5, r0
	int status = -EIO;
   1c874:	f06f 0804 	mvn.w	r8, #4
   1c878:	e7de      	b.n	1c838 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1c87a:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1c87c:	691a      	ldr	r2, [r3, #16]
   1c87e:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1c880:	7d1b      	ldrb	r3, [r3, #20]
   1c882:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1c886:	e7e9      	b.n	1c85c <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1c888:	4620      	mov	r0, r4
   1c88a:	f005 f9fb 	bl	21c84 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1c88e:	4601      	mov	r1, r0
   1c890:	2800      	cmp	r0, #0
   1c892:	d1ea      	bne.n	1c86a <net_if_send_data+0x5a>
	int status = -EIO;
   1c894:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1c898:	2501      	movs	r5, #1
   1c89a:	e7cd      	b.n	1c838 <net_if_send_data+0x28>
	if (!context) {
   1c89c:	2f00      	cmp	r7, #0
   1c89e:	d0ce      	beq.n	1c83e <net_if_send_data+0x2e>
	if (context->send_cb) {
   1c8a0:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1c8a4:	f1bb 0f00 	cmp.w	fp, #0
   1c8a8:	d004      	beq.n	1c8b4 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1c8aa:	683b      	ldr	r3, [r7, #0]
   1c8ac:	4652      	mov	r2, sl
   1c8ae:	4641      	mov	r1, r8
   1c8b0:	4638      	mov	r0, r7
   1c8b2:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1c8b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c8b8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c8bc:	d009      	beq.n	1c8d2 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1c8be:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c8c0:	2b11      	cmp	r3, #17
   1c8c2:	d008      	beq.n	1c8d6 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c8c4:	2b06      	cmp	r3, #6
   1c8c6:	d1ba      	bne.n	1c83e <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c8c8:	4a0b      	ldr	r2, [pc, #44]	; (1c8f8 <net_if_send_data+0xe8>)
   1c8ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c8cc:	3301      	adds	r3, #1
   1c8ce:	6593      	str	r3, [r2, #88]	; 0x58
   1c8d0:	e7b5      	b.n	1c83e <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c8d2:	2311      	movs	r3, #17
   1c8d4:	e7f4      	b.n	1c8c0 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c8d6:	4a08      	ldr	r2, [pc, #32]	; (1c8f8 <net_if_send_data+0xe8>)
   1c8d8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c8dc:	3301      	adds	r3, #1
   1c8de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c8e2:	e7ac      	b.n	1c83e <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c8e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c8e6:	2b00      	cmp	r3, #0
   1c8e8:	d0ab      	beq.n	1c842 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c8ea:	4642      	mov	r2, r8
   1c8ec:	4649      	mov	r1, r9
   1c8ee:	4630      	mov	r0, r6
   1c8f0:	f7ff ff64 	bl	1c7bc <net_if_call_link_cb>
   1c8f4:	e7a5      	b.n	1c842 <net_if_send_data+0x32>
   1c8f6:	bf00      	nop
   1c8f8:	20002fd0 	.word	0x20002fd0

0001c8fc <net_if_tx>:
{
   1c8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c900:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c902:	f850 3b18 	ldr.w	r3, [r0], #24
   1c906:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c90a:	2100      	movs	r1, #0
   1c90c:	f00c fd56 	bl	293bc <k_queue_get>
	if (!pkt) {
   1c910:	2800      	cmp	r0, #0
   1c912:	d062      	beq.n	1c9da <net_if_tx+0xde>
   1c914:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c916:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c91a:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c91c:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c920:	f3bf 8f5b 	dmb	ish
   1c924:	68f3      	ldr	r3, [r6, #12]
   1c926:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c92a:	f013 0f01 	tst.w	r3, #1
   1c92e:	d039      	beq.n	1c9a4 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c930:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c932:	2400      	movs	r4, #0
   1c934:	e002      	b.n	1c93c <net_if_tx+0x40>
		bytes += buf->len;
   1c936:	899a      	ldrh	r2, [r3, #12]
   1c938:	4414      	add	r4, r2
		buf = buf->frags;
   1c93a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c93c:	2b00      	cmp	r3, #0
   1c93e:	d1fa      	bne.n	1c936 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c940:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c944:	f043 0301 	orr.w	r3, r3, #1
   1c948:	f36f 0341 	bfc	r3, #1, #1
   1c94c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c950:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c954:	4629      	mov	r1, r5
   1c956:	4630      	mov	r0, r6
   1c958:	4798      	blx	r3
   1c95a:	4681      	mov	r9, r0
	if (status < 0) {
   1c95c:	f1b9 0f00 	cmp.w	r9, #0
   1c960:	db23      	blt.n	1c9aa <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c962:	4a21      	ldr	r2, [pc, #132]	; (1c9e8 <net_if_tx+0xec>)
   1c964:	6853      	ldr	r3, [r2, #4]
   1c966:	441c      	add	r4, r3
   1c968:	6054      	str	r4, [r2, #4]
	if (context) {
   1c96a:	b18f      	cbz	r7, 1c990 <net_if_tx+0x94>
	if (!context) {
   1c96c:	b187      	cbz	r7, 1c990 <net_if_tx+0x94>
	if (context->send_cb) {
   1c96e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c970:	b124      	cbz	r4, 1c97c <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c972:	683b      	ldr	r3, [r7, #0]
   1c974:	4652      	mov	r2, sl
   1c976:	4649      	mov	r1, r9
   1c978:	4638      	mov	r0, r7
   1c97a:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c97c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c980:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c984:	d01b      	beq.n	1c9be <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c986:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c988:	2b11      	cmp	r3, #17
   1c98a:	d01a      	beq.n	1c9c2 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c98c:	2b06      	cmp	r3, #6
   1c98e:	d01f      	beq.n	1c9d0 <net_if_tx+0xd4>
	if (dst->addr) {
   1c990:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c992:	b32b      	cbz	r3, 1c9e0 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c994:	464a      	mov	r2, r9
   1c996:	4641      	mov	r1, r8
   1c998:	4630      	mov	r0, r6
   1c99a:	f7ff ff0f 	bl	1c7bc <net_if_call_link_cb>
	return true;
   1c99e:	2001      	movs	r0, #1
   1c9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c9a4:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c9a8:	e7d8      	b.n	1c95c <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c9aa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c9ae:	f36f 0300 	bfc	r3, #0, #1
   1c9b2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c9b6:	4628      	mov	r0, r5
   1c9b8:	f001 fa93 	bl	1dee2 <net_pkt_unref>
   1c9bc:	e7d5      	b.n	1c96a <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c9be:	2311      	movs	r3, #17
   1c9c0:	e7e2      	b.n	1c988 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c9c2:	4a09      	ldr	r2, [pc, #36]	; (1c9e8 <net_if_tx+0xec>)
   1c9c4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c9c8:	3301      	adds	r3, #1
   1c9ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c9ce:	e7df      	b.n	1c990 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c9d0:	4a05      	ldr	r2, [pc, #20]	; (1c9e8 <net_if_tx+0xec>)
   1c9d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c9d4:	3301      	adds	r3, #1
   1c9d6:	6593      	str	r3, [r2, #88]	; 0x58
   1c9d8:	e7da      	b.n	1c990 <net_if_tx+0x94>
		return false;
   1c9da:	2000      	movs	r0, #0
   1c9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c9e0:	2001      	movs	r0, #1
}
   1c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9e6:	bf00      	nop
   1c9e8:	20002fd0 	.word	0x20002fd0

0001c9ec <net_if_flush_tx>:
	return (!list->head);
   1c9ec:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c9ee:	b14b      	cbz	r3, 1ca04 <net_if_flush_tx+0x18>
{
   1c9f0:	b510      	push	{r4, lr}
   1c9f2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c9f4:	f00c fef8 	bl	297e8 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c9f8:	4620      	mov	r0, r4
   1c9fa:	f7ff ff7f 	bl	1c8fc <net_if_tx>
   1c9fe:	2800      	cmp	r0, #0
   1ca00:	d1fa      	bne.n	1c9f8 <net_if_flush_tx+0xc>
   1ca02:	bd10      	pop	{r4, pc}
   1ca04:	4770      	bx	lr

0001ca06 <net_if_process_events>:
{
   1ca06:	b538      	push	{r3, r4, r5, lr}
   1ca08:	4604      	mov	r4, r0
   1ca0a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1ca0c:	e001      	b.n	1ca12 <net_if_process_events+0xc>
   1ca0e:	3414      	adds	r4, #20
   1ca10:	3d01      	subs	r5, #1
   1ca12:	b145      	cbz	r5, 1ca26 <net_if_process_events+0x20>
		switch (event->state) {
   1ca14:	7b63      	ldrb	r3, [r4, #13]
   1ca16:	091b      	lsrs	r3, r3, #4
   1ca18:	2b04      	cmp	r3, #4
   1ca1a:	d1f8      	bne.n	1ca0e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1ca1c:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1ca1e:	3818      	subs	r0, #24
   1ca20:	f7ff ff6c 	bl	1c8fc <net_if_tx>
			break;
   1ca24:	e7f3      	b.n	1ca0e <net_if_process_events+0x8>
}
   1ca26:	bd38      	pop	{r3, r4, r5, pc}

0001ca28 <net_if_tx_thread>:
{
   1ca28:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1ca2a:	f00d f836 	bl	29a9a <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1ca2e:	f7ff f849 	bl	1bac4 <net_if_prepare_events>
   1ca32:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1ca34:	4c06      	ldr	r4, [pc, #24]	; (1ca50 <net_if_tx_thread+0x28>)
   1ca36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ca3a:	4601      	mov	r1, r0
   1ca3c:	4620      	mov	r0, r4
   1ca3e:	f00c f98b 	bl	28d58 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1ca42:	4629      	mov	r1, r5
   1ca44:	4620      	mov	r0, r4
   1ca46:	f7ff ffde 	bl	1ca06 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1ca4a:	f00c fecd 	bl	297e8 <_impl_k_yield>
   1ca4e:	e7ee      	b.n	1ca2e <net_if_tx_thread+0x6>
   1ca50:	2000da00 	.word	0x2000da00

0001ca54 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1ca54:	4a05      	ldr	r2, [pc, #20]	; (1ca6c <net_if_get_by_index+0x18>)
   1ca56:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1ca5a:	fb03 2000 	mla	r0, r3, r0, r2
   1ca5e:	4b04      	ldr	r3, [pc, #16]	; (1ca70 <net_if_get_by_index+0x1c>)
   1ca60:	4298      	cmp	r0, r3
   1ca62:	d200      	bcs.n	1ca66 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1ca64:	4770      	bx	lr
		return NULL;
   1ca66:	2000      	movs	r0, #0
   1ca68:	e7fc      	b.n	1ca64 <net_if_get_by_index+0x10>
   1ca6a:	bf00      	nop
   1ca6c:	2000d760 	.word	0x2000d760
   1ca70:	2000da00 	.word	0x2000da00

0001ca74 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1ca74:	4b03      	ldr	r3, [pc, #12]	; (1ca84 <net_if_get_by_iface+0x10>)
   1ca76:	1ac0      	subs	r0, r0, r3
   1ca78:	1140      	asrs	r0, r0, #5
   1ca7a:	4b03      	ldr	r3, [pc, #12]	; (1ca88 <net_if_get_by_iface+0x14>)
   1ca7c:	fb03 f000 	mul.w	r0, r3, r0
}
   1ca80:	b2c0      	uxtb	r0, r0
   1ca82:	4770      	bx	lr
   1ca84:	2000d760 	.word	0x2000d760
   1ca88:	3cf3cf3d 	.word	0x3cf3cf3d

0001ca8c <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1ca8c:	b570      	push	{r4, r5, r6, lr}
   1ca8e:	4606      	mov	r6, r0
   1ca90:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ca92:	4c05      	ldr	r4, [pc, #20]	; (1caa8 <net_if_foreach+0x1c>)
   1ca94:	e004      	b.n	1caa0 <net_if_foreach+0x14>
		cb(iface, user_data);
   1ca96:	4629      	mov	r1, r5
   1ca98:	4620      	mov	r0, r4
   1ca9a:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ca9c:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1caa0:	4b02      	ldr	r3, [pc, #8]	; (1caac <net_if_foreach+0x20>)
   1caa2:	429c      	cmp	r4, r3
   1caa4:	d1f7      	bne.n	1ca96 <net_if_foreach+0xa>
	}
}
   1caa6:	bd70      	pop	{r4, r5, r6, pc}
   1caa8:	2000d760 	.word	0x2000d760
   1caac:	2000da00 	.word	0x2000da00

0001cab0 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1cab0:	b570      	push	{r4, r5, r6, lr}
   1cab2:	f3bf 8f5b 	dmb	ish
   1cab6:	68c5      	ldr	r5, [r0, #12]
   1cab8:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1cabc:	f015 0501 	ands.w	r5, r5, #1
   1cac0:	d123      	bne.n	1cb0a <net_if_up+0x5a>
   1cac2:	f100 060c 	add.w	r6, r0, #12
   1cac6:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1cac8:	6843      	ldr	r3, [r0, #4]
   1caca:	68db      	ldr	r3, [r3, #12]
   1cacc:	b11b      	cbz	r3, 1cad6 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1cace:	2101      	movs	r1, #1
   1cad0:	4798      	blx	r3
	if (status < 0) {
   1cad2:	2800      	cmp	r0, #0
   1cad4:	db1b      	blt.n	1cb0e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cad6:	f3bf 8f5b 	dmb	ish
   1cada:	e856 3f00 	ldrex	r3, [r6]
   1cade:	f043 0301 	orr.w	r3, r3, #1
   1cae2:	e846 3200 	strex	r2, r3, [r6]
   1cae6:	2a00      	cmp	r2, #0
   1cae8:	d1f7      	bne.n	1cada <net_if_up+0x2a>
   1caea:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1caee:	4620      	mov	r0, r4
   1caf0:	f7ff f91e 	bl	1bd30 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1caf4:	4620      	mov	r0, r4
   1caf6:	f7ff f821 	bl	1bb3c <net_if_start_rs>
   1cafa:	2300      	movs	r3, #0
   1cafc:	461a      	mov	r2, r3
   1cafe:	4621      	mov	r1, r4
   1cb00:	4804      	ldr	r0, [pc, #16]	; (1cb14 <net_if_up+0x64>)
   1cb02:	f006 fe61 	bl	237c8 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1cb06:	4628      	mov	r0, r5
   1cb08:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1cb0a:	2500      	movs	r5, #0
   1cb0c:	e7fb      	b.n	1cb06 <net_if_up+0x56>
		return status;
   1cb0e:	4605      	mov	r5, r0
   1cb10:	e7f9      	b.n	1cb06 <net_if_up+0x56>
   1cb12:	bf00      	nop
   1cb14:	d0010002 	.word	0xd0010002

0001cb18 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1cb18:	b510      	push	{r4, lr}
   1cb1a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1cb1c:	f7fe ffaf 	bl	1ba7e <leave_mcast_all>

	net_if_flush_tx(iface);
   1cb20:	4620      	mov	r0, r4
   1cb22:	f7ff ff63 	bl	1c9ec <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1cb26:	6863      	ldr	r3, [r4, #4]
   1cb28:	68db      	ldr	r3, [r3, #12]
   1cb2a:	b123      	cbz	r3, 1cb36 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1cb2c:	2100      	movs	r1, #0
   1cb2e:	4620      	mov	r0, r4
   1cb30:	4798      	blx	r3
	if (status < 0) {
   1cb32:	2800      	cmp	r0, #0
   1cb34:	db14      	blt.n	1cb60 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1cb36:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cb3a:	f3bf 8f5b 	dmb	ish
   1cb3e:	e853 2f00 	ldrex	r2, [r3]
   1cb42:	f022 0201 	bic.w	r2, r2, #1
   1cb46:	e843 2100 	strex	r1, r2, [r3]
   1cb4a:	2900      	cmp	r1, #0
   1cb4c:	d1f7      	bne.n	1cb3e <net_if_down+0x26>
   1cb4e:	f3bf 8f5b 	dmb	ish
   1cb52:	2300      	movs	r3, #0
   1cb54:	461a      	mov	r2, r3
   1cb56:	4621      	mov	r1, r4
   1cb58:	4802      	ldr	r0, [pc, #8]	; (1cb64 <net_if_down+0x4c>)
   1cb5a:	f006 fe35 	bl	237c8 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1cb5e:	2000      	movs	r0, #0
}
   1cb60:	bd10      	pop	{r4, pc}
   1cb62:	bf00      	nop
   1cb64:	d0010001 	.word	0xd0010001

0001cb68 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1cb68:	b570      	push	{r4, r5, r6, lr}
   1cb6a:	b086      	sub	sp, #24
   1cb6c:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cb6e:	4c1b      	ldr	r4, [pc, #108]	; (1cbdc <net_if_init+0x74>)
   1cb70:	e01b      	b.n	1cbaa <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1cb72:	4620      	mov	r0, r4
   1cb74:	f850 3b18 	ldr.w	r3, [r0], #24
   1cb78:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1cb7a:	f00c fbc4 	bl	29306 <k_queue_init>
	api->init(iface);
   1cb7e:	682b      	ldr	r3, [r5, #0]
   1cb80:	4620      	mov	r0, r4
   1cb82:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1cb84:	2340      	movs	r3, #64	; 0x40
   1cb86:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1cb8a:	f247 5330 	movw	r3, #30000	; 0x7530
   1cb8e:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1cb92:	4620      	mov	r0, r4
   1cb94:	f7ff fe06 	bl	1c7a4 <net_if_ipv6_calc_reachable_time>
   1cb98:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1cb9c:	4910      	ldr	r1, [pc, #64]	; (1cbe0 <net_if_init+0x78>)
   1cb9e:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1cba2:	f00d fd4b 	bl	2a63c <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cba6:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1cbaa:	4b0e      	ldr	r3, [pc, #56]	; (1cbe4 <net_if_init+0x7c>)
   1cbac:	429c      	cmp	r4, r3
   1cbae:	d1e0      	bne.n	1cb72 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1cbb0:	4b0a      	ldr	r3, [pc, #40]	; (1cbdc <net_if_init+0x74>)
   1cbb2:	429c      	cmp	r4, r3
   1cbb4:	d010      	beq.n	1cbd8 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1cbb6:	2300      	movs	r3, #0
   1cbb8:	9305      	str	r3, [sp, #20]
   1cbba:	2201      	movs	r2, #1
   1cbbc:	9204      	str	r2, [sp, #16]
   1cbbe:	f06f 0208 	mvn.w	r2, #8
   1cbc2:	9203      	str	r2, [sp, #12]
   1cbc4:	9302      	str	r3, [sp, #8]
   1cbc6:	9301      	str	r3, [sp, #4]
   1cbc8:	9600      	str	r6, [sp, #0]
   1cbca:	4b07      	ldr	r3, [pc, #28]	; (1cbe8 <net_if_init+0x80>)
   1cbcc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1cbd0:	4906      	ldr	r1, [pc, #24]	; (1cbec <net_if_init+0x84>)
   1cbd2:	4807      	ldr	r0, [pc, #28]	; (1cbf0 <net_if_init+0x88>)
   1cbd4:	f00d f9e0 	bl	29f98 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1cbd8:	b006      	add	sp, #24
   1cbda:	bd70      	pop	{r4, r5, r6, pc}
   1cbdc:	2000d760 	.word	0x2000d760
   1cbe0:	0001bb5d 	.word	0x0001bb5d
   1cbe4:	2000da00 	.word	0x2000da00
   1cbe8:	0001ca29 	.word	0x0001ca29
   1cbec:	200052b8 	.word	0x200052b8
   1cbf0:	200008ec 	.word	0x200008ec

0001cbf4 <net_if_post_init>:

void net_if_post_init(void)
{
   1cbf4:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cbf6:	4c05      	ldr	r4, [pc, #20]	; (1cc0c <net_if_post_init+0x18>)
   1cbf8:	e004      	b.n	1cc04 <net_if_post_init+0x10>
		net_if_up(iface);
   1cbfa:	4620      	mov	r0, r4
   1cbfc:	f7ff ff58 	bl	1cab0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cc00:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1cc04:	4b02      	ldr	r3, [pc, #8]	; (1cc10 <net_if_post_init+0x1c>)
   1cc06:	429c      	cmp	r4, r3
   1cc08:	d1f7      	bne.n	1cbfa <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1cc0a:	bd10      	pop	{r4, pc}
   1cc0c:	2000d760 	.word	0x2000d760
   1cc10:	2000da00 	.word	0x2000da00

0001cc14 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc16:	4605      	mov	r5, r0
   1cc18:	460e      	mov	r6, r1
   1cc1a:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1cc1c:	2400      	movs	r4, #0
   1cc1e:	e003      	b.n	1cc28 <check_used_port+0x14>
   1cc20:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1cc22:	42ab      	cmp	r3, r5
   1cc24:	d010      	beq.n	1cc48 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1cc26:	3401      	adds	r4, #1
   1cc28:	2c05      	cmp	r4, #5
   1cc2a:	dc2b      	bgt.n	1cc84 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1cc2c:	2368      	movs	r3, #104	; 0x68
   1cc2e:	4a16      	ldr	r2, [pc, #88]	; (1cc88 <check_used_port+0x74>)
   1cc30:	fb03 2304 	mla	r3, r3, r4, r2
   1cc34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1cc38:	f013 0f01 	tst.w	r3, #1
   1cc3c:	d0f3      	beq.n	1cc26 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cc3e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1cc42:	d0ed      	beq.n	1cc20 <check_used_port+0xc>
		return IPPROTO_TCP;
   1cc44:	2306      	movs	r3, #6
   1cc46:	e7ec      	b.n	1cc22 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1cc48:	2368      	movs	r3, #104	; 0x68
   1cc4a:	fb03 f304 	mul.w	r3, r3, r4
   1cc4e:	3308      	adds	r3, #8
   1cc50:	4a0d      	ldr	r2, [pc, #52]	; (1cc88 <check_used_port+0x74>)
   1cc52:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1cc54:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1cc56:	42b2      	cmp	r2, r6
   1cc58:	d1e5      	bne.n	1cc26 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1cc5a:	883a      	ldrh	r2, [r7, #0]
   1cc5c:	2a0a      	cmp	r2, #10
   1cc5e:	d007      	beq.n	1cc70 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1cc60:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1cc62:	681a      	ldr	r2, [r3, #0]
   1cc64:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1cc66:	429a      	cmp	r2, r3
   1cc68:	d1dd      	bne.n	1cc26 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1cc6a:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1cc70:	2210      	movs	r2, #16
   1cc72:	1d39      	adds	r1, r7, #4
   1cc74:	6858      	ldr	r0, [r3, #4]
   1cc76:	f00d fe4f 	bl	2a918 <memcmp>
			if (net_ipv6_addr_cmp(
   1cc7a:	2800      	cmp	r0, #0
   1cc7c:	d1d3      	bne.n	1cc26 <check_used_port+0x12>
				return -EEXIST;
   1cc7e:	f06f 0010 	mvn.w	r0, #16
   1cc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1cc84:	2000      	movs	r0, #0
   1cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc88:	20002100 	.word	0x20002100

0001cc8c <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1cc8c:	b570      	push	{r4, r5, r6, lr}
   1cc8e:	4606      	mov	r6, r0
   1cc90:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1cc92:	884c      	ldrh	r4, [r1, #2]
   1cc94:	b16c      	cbz	r4, 1ccb2 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1cc96:	4620      	mov	r0, r4
   1cc98:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1cc9a:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1cc9c:	0a1c      	lsrs	r4, r3, #8
   1cc9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1cca2:	b29c      	uxth	r4, r3
   1cca4:	462a      	mov	r2, r5
   1cca6:	4621      	mov	r1, r4
   1cca8:	f7ff ffb4 	bl	1cc14 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1ccac:	f110 0f11 	cmn.w	r0, #17
   1ccb0:	d1f1      	bne.n	1cc96 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1ccb2:	f7e5 fa3f 	bl	2134 <sys_rand32_get>
   1ccb6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1ccba:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1ccbe:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1ccc0:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1ccc4:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ccc8:	d0e7      	beq.n	1cc9a <find_available_port+0xe>
		return IPPROTO_TCP;
   1ccca:	2006      	movs	r0, #6
   1cccc:	e7e6      	b.n	1cc9c <find_available_port+0x10>

0001ccce <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1ccce:	b500      	push	{lr}
   1ccd0:	b087      	sub	sp, #28
   1ccd2:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1ccd4:	2200      	movs	r2, #0
   1ccd6:	a906      	add	r1, sp, #24
   1ccd8:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1ccdc:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1ccde:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1cce0:	9102      	str	r1, [sp, #8]
   1cce2:	9301      	str	r3, [sp, #4]
   1cce4:	9200      	str	r2, [sp, #0]
   1cce6:	4613      	mov	r3, r2
   1cce8:	2101      	movs	r1, #1
   1ccea:	f007 f9dd 	bl	240a8 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1ccee:	b928      	cbnz	r0, 1ccfc <queue_fin+0x2e>
   1ccf0:	9805      	ldr	r0, [sp, #20]
   1ccf2:	b118      	cbz	r0, 1ccfc <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1ccf4:	f007 fcdc 	bl	246b0 <net_tcp_send_pkt>
	if (ret < 0) {
   1ccf8:	2800      	cmp	r0, #0
   1ccfa:	db02      	blt.n	1cd02 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1ccfc:	b007      	add	sp, #28
   1ccfe:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1cd02:	9805      	ldr	r0, [sp, #20]
   1cd04:	f001 f8ed 	bl	1dee2 <net_pkt_unref>
   1cd08:	e7f8      	b.n	1ccfc <queue_fin+0x2e>

0001cd0a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1cd0a:	b500      	push	{lr}
   1cd0c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1cd0e:	a901      	add	r1, sp, #4
   1cd10:	f007 fb1c 	bl	2434c <net_tcp_get_hdr>
	if (tcp_hdr) {
   1cd14:	b128      	cbz	r0, 1cd22 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1cd16:	7b00      	ldrb	r0, [r0, #12]
   1cd18:	0900      	lsrs	r0, r0, #4
   1cd1a:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1cd1c:	b007      	add	sp, #28
   1cd1e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1cd22:	2000      	movs	r0, #0
   1cd24:	e7fa      	b.n	1cd1c <tcp_hdr_len+0x12>

0001cd26 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1cd26:	b570      	push	{r4, r5, r6, lr}
   1cd28:	b082      	sub	sp, #8
   1cd2a:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1cd2c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1cd2e:	2400      	movs	r4, #0
   1cd30:	e002      	b.n	1cd38 <set_appdata_values+0x12>
		bytes += buf->len;
   1cd32:	899a      	ldrh	r2, [r3, #12]
   1cd34:	4414      	add	r4, r2
		buf = buf->frags;
   1cd36:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1cd38:	2b00      	cmp	r3, #0
   1cd3a:	d1fa      	bne.n	1cd32 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1cd3c:	2911      	cmp	r1, #17
   1cd3e:	d020      	beq.n	1cd82 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1cd40:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1cd42:	2906      	cmp	r1, #6
   1cd44:	d01f      	beq.n	1cd86 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1cd46:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1cd4a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1cd4e:	4419      	add	r1, r3
   1cd50:	4431      	add	r1, r6
   1cd52:	f10d 0206 	add.w	r2, sp, #6
   1cd56:	b289      	uxth	r1, r1
   1cd58:	4628      	mov	r0, r5
   1cd5a:	f001 fb91 	bl	1e480 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1cd5e:	b120      	cbz	r0, 1cd6a <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1cd60:	6883      	ldr	r3, [r0, #8]
   1cd62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1cd66:	4413      	add	r3, r2
	pkt->appdata = data;
   1cd68:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1cd6a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1cd6e:	1ae3      	subs	r3, r4, r3
   1cd70:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1cd72:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1cd76:	1b1b      	subs	r3, r3, r4
   1cd78:	b29b      	uxth	r3, r3
   1cd7a:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1cd7c:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1cd7e:	b002      	add	sp, #8
   1cd80:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1cd82:	2608      	movs	r6, #8
   1cd84:	e7dd      	b.n	1cd42 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1cd86:	4628      	mov	r0, r5
   1cd88:	f7ff ffbf 	bl	1cd0a <tcp_hdr_len>
   1cd8c:	b286      	uxth	r6, r0
   1cd8e:	e7da      	b.n	1cd46 <set_appdata_values+0x20>

0001cd90 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd92:	460d      	mov	r5, r1
   1cd94:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1cd96:	2300      	movs	r3, #0
   1cd98:	e000      	b.n	1cd9c <packet_received+0xc>
   1cd9a:	3301      	adds	r3, #1
   1cd9c:	2b05      	cmp	r3, #5
   1cd9e:	dc12      	bgt.n	1cdc6 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1cda0:	2268      	movs	r2, #104	; 0x68
   1cda2:	4926      	ldr	r1, [pc, #152]	; (1ce3c <packet_received+0xac>)
   1cda4:	fb02 1203 	mla	r2, r2, r3, r1
   1cda8:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1cdac:	f012 0f01 	tst.w	r2, #1
   1cdb0:	d0f3      	beq.n	1cd9a <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1cdb2:	2268      	movs	r2, #104	; 0x68
   1cdb4:	fb02 1203 	mla	r2, r2, r3, r1
   1cdb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1cdba:	4290      	cmp	r0, r2
   1cdbc:	d1ed      	bne.n	1cd9a <packet_received+0xa>
			return &contexts[i];
   1cdbe:	2268      	movs	r2, #104	; 0x68
   1cdc0:	fb02 1403 	mla	r4, r2, r3, r1
   1cdc4:	e000      	b.n	1cdc8 <packet_received+0x38>
	return NULL;
   1cdc6:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1cdc8:	6968      	ldr	r0, [r5, #20]
   1cdca:	f7ff fe53 	bl	1ca74 <net_if_get_by_iface>
   1cdce:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1cdd2:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1cdd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cdd6:	b373      	cbz	r3, 1ce36 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cdd8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1cddc:	f013 0f40 	tst.w	r3, #64	; 0x40
   1cde0:	d017      	beq.n	1ce12 <packet_received+0x82>
		return IPPROTO_TCP;
   1cde2:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1cde4:	2a06      	cmp	r2, #6
   1cde6:	d016      	beq.n	1ce16 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1cde8:	2111      	movs	r1, #17
   1cdea:	4628      	mov	r0, r5
   1cdec:	f7ff ff9b 	bl	1cd26 <set_appdata_values>
	return pkt->appdatalen;
   1cdf0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1cdf2:	4a13      	ldr	r2, [pc, #76]	; (1ce40 <packet_received+0xb0>)
   1cdf4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1cdf6:	440b      	add	r3, r1
   1cdf8:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1cdfa:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1cdfc:	4633      	mov	r3, r6
   1cdfe:	2200      	movs	r2, #0
   1ce00:	4629      	mov	r1, r5
   1ce02:	4620      	mov	r0, r4
   1ce04:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1ce06:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1ce0a:	f00c fe46 	bl	29a9a <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1ce0e:	2000      	movs	r0, #0
   1ce10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1ce12:	2211      	movs	r2, #17
   1ce14:	e7e6      	b.n	1cde4 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1ce16:	f013 0f20 	tst.w	r3, #32
   1ce1a:	d00a      	beq.n	1ce32 <packet_received+0xa2>
		return SOCK_STREAM;
   1ce1c:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1ce1e:	2b01      	cmp	r3, #1
   1ce20:	d1e6      	bne.n	1cdf0 <packet_received+0x60>
   1ce22:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1ce24:	2b00      	cmp	r3, #0
   1ce26:	d1e3      	bne.n	1cdf0 <packet_received+0x60>
			net_pkt_unref(pkt);
   1ce28:	4628      	mov	r0, r5
   1ce2a:	f001 f85a 	bl	1dee2 <net_pkt_unref>
			return NET_OK;
   1ce2e:	2000      	movs	r0, #0
   1ce30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1ce32:	2302      	movs	r3, #2
   1ce34:	e7f3      	b.n	1ce1e <packet_received+0x8e>
		return NET_DROP;
   1ce36:	2002      	movs	r0, #2
}
   1ce38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ce3a:	bf00      	nop
   1ce3c:	20002100 	.word	0x20002100
   1ce40:	20002fd0 	.word	0x20002fd0

0001ce44 <send_reset>:
{
   1ce44:	b510      	push	{r4, lr}
   1ce46:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1ce48:	aa02      	add	r2, sp, #8
   1ce4a:	2300      	movs	r3, #0
   1ce4c:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1ce50:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1ce52:	f007 f85a 	bl	23f0a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1ce56:	4604      	mov	r4, r0
   1ce58:	b928      	cbnz	r0, 1ce66 <send_reset+0x22>
   1ce5a:	9801      	ldr	r0, [sp, #4]
   1ce5c:	b118      	cbz	r0, 1ce66 <send_reset+0x22>
	ret = net_send_data(pkt);
   1ce5e:	f7fe fc3f 	bl	1b6e0 <net_send_data>
	if (ret < 0) {
   1ce62:	1e04      	subs	r4, r0, #0
   1ce64:	db02      	blt.n	1ce6c <send_reset+0x28>
}
   1ce66:	4620      	mov	r0, r4
   1ce68:	b002      	add	sp, #8
   1ce6a:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1ce6c:	9801      	ldr	r0, [sp, #4]
   1ce6e:	f001 f838 	bl	1dee2 <net_pkt_unref>
   1ce72:	e7f8      	b.n	1ce66 <send_reset+0x22>

0001ce74 <send_ack>:
{
   1ce74:	b510      	push	{r4, lr}
   1ce76:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1ce78:	2300      	movs	r3, #0
   1ce7a:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1ce7c:	b932      	cbnz	r2, 1ce8c <send_ack+0x18>
   1ce7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1ce80:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1ce84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1ce88:	429a      	cmp	r2, r3
   1ce8a:	d011      	beq.n	1ceb0 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1ce8c:	aa01      	add	r2, sp, #4
   1ce8e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1ce90:	f007 f99c 	bl	241cc <net_tcp_prepare_ack>
	if (ret) {
   1ce94:	4604      	mov	r4, r0
   1ce96:	b110      	cbz	r0, 1ce9e <send_ack+0x2a>
}
   1ce98:	4620      	mov	r0, r4
   1ce9a:	b002      	add	sp, #8
   1ce9c:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1ce9e:	9801      	ldr	r0, [sp, #4]
   1cea0:	f007 fc06 	bl	246b0 <net_tcp_send_pkt>
	if (ret < 0) {
   1cea4:	1e04      	subs	r4, r0, #0
   1cea6:	daf7      	bge.n	1ce98 <send_ack+0x24>
		net_pkt_unref(pkt);
   1cea8:	9801      	ldr	r0, [sp, #4]
   1ceaa:	f001 f81a 	bl	1dee2 <net_pkt_unref>
   1ceae:	e7f3      	b.n	1ce98 <send_ack+0x24>
		return 0;
   1ceb0:	2400      	movs	r4, #0
   1ceb2:	e7f1      	b.n	1ce98 <send_ack+0x24>

0001ceb4 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1ceb4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1ceb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1ceba:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cebe:	2b02      	cmp	r3, #2
   1cec0:	d001      	beq.n	1cec6 <_tcp_synack_received+0x12>
}
   1cec2:	2002      	movs	r0, #2
   1cec4:	4770      	bx	lr
{
   1cec6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cec8:	b09f      	sub	sp, #124	; 0x7c
   1ceca:	4615      	mov	r5, r2
   1cecc:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1cece:	6948      	ldr	r0, [r1, #20]
   1ced0:	f7ff fdd0 	bl	1ca74 <net_if_get_by_iface>
   1ced4:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1ced8:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1ceda:	a911      	add	r1, sp, #68	; 0x44
   1cedc:	4620      	mov	r0, r4
   1cede:	f007 fa35 	bl	2434c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1cee2:	4606      	mov	r6, r0
   1cee4:	b1f8      	cbz	r0, 1cf26 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1cee6:	7b43      	ldrb	r3, [r0, #13]
   1cee8:	f013 0f04 	tst.w	r3, #4
   1ceec:	d11e      	bne.n	1cf2c <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1ceee:	f013 0f02 	tst.w	r3, #2
   1cef2:	d013      	beq.n	1cf1c <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1cef4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1cef6:	7901      	ldrb	r1, [r0, #4]
   1cef8:	7943      	ldrb	r3, [r0, #5]
   1cefa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1cefe:	7980      	ldrb	r0, [r0, #6]
   1cf00:	79f3      	ldrb	r3, [r6, #7]
   1cf02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cf06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1cf0a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1cf0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1cf10:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1cf12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1cf16:	3301      	adds	r3, #1
   1cf18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1cf1c:	7b73      	ldrb	r3, [r6, #13]
   1cf1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1cf22:	2b12      	cmp	r3, #18
   1cf24:	d019      	beq.n	1cf5a <_tcp_synack_received+0xa6>
}
   1cf26:	2002      	movs	r0, #2
   1cf28:	b01f      	add	sp, #124	; 0x7c
   1cf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cf2c:	4621      	mov	r1, r4
   1cf2e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cf30:	f007 fa87 	bl	24442 <net_tcp_validate_seq>
   1cf34:	b160      	cbz	r0, 1cf50 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1cf36:	4a40      	ldr	r2, [pc, #256]	; (1d038 <_tcp_synack_received+0x184>)
   1cf38:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cf3a:	3301      	adds	r3, #1
   1cf3c:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1cf3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1cf40:	2b00      	cmp	r3, #0
   1cf42:	d0f0      	beq.n	1cf26 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1cf44:	682a      	ldr	r2, [r5, #0]
   1cf46:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1cf4a:	4628      	mov	r0, r5
   1cf4c:	4798      	blx	r3
   1cf4e:	e7ea      	b.n	1cf26 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1cf50:	4a39      	ldr	r2, [pc, #228]	; (1d038 <_tcp_synack_received+0x184>)
   1cf52:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cf54:	3301      	adds	r3, #1
   1cf56:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1cf58:	e7e5      	b.n	1cf26 <_tcp_synack_received+0x72>
	return pkt->family;
   1cf5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1cf5e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1cf62:	2b0a      	cmp	r3, #10
   1cf64:	d1df      	bne.n	1cf26 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1cf66:	f04f 0e0a 	mov.w	lr, #10
   1cf6a:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1cf6e:	8833      	ldrh	r3, [r6, #0]
   1cf70:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1cf74:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1cf76:	ac16      	add	r4, sp, #88	; 0x58
   1cf78:	68bb      	ldr	r3, [r7, #8]
   1cf7a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1cf7e:	6859      	ldr	r1, [r3, #4]
   1cf80:	689a      	ldr	r2, [r3, #8]
   1cf82:	68db      	ldr	r3, [r3, #12]
   1cf84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cf86:	ac06      	add	r4, sp, #24
   1cf88:	ab16      	add	r3, sp, #88	; 0x58
   1cf8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1cf8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1cf90:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1cf94:	8872      	ldrh	r2, [r6, #2]
   1cf96:	0a13      	lsrs	r3, r2, #8
   1cf98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf9c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1cfa0:	ac1a      	add	r4, sp, #104	; 0x68
   1cfa2:	68bb      	ldr	r3, [r7, #8]
   1cfa4:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1cfa8:	6859      	ldr	r1, [r3, #4]
   1cfaa:	689a      	ldr	r2, [r3, #8]
   1cfac:	68db      	ldr	r3, [r3, #12]
   1cfae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cfb0:	ac0c      	add	r4, sp, #48	; 0x30
   1cfb2:	ab1e      	add	r3, sp, #120	; 0x78
   1cfb4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1cfb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1cfbc:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1cfbe:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1cfc2:	f008 fcdb 	bl	2597c <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1cfc6:	8832      	ldrh	r2, [r6, #0]
   1cfc8:	0a13      	lsrs	r3, r2, #8
   1cfca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1cfce:	8871      	ldrh	r1, [r6, #2]
   1cfd0:	0a0a      	lsrs	r2, r1, #8
   1cfd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1cfd6:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1cfd8:	9403      	str	r4, [sp, #12]
   1cfda:	9502      	str	r5, [sp, #8]
   1cfdc:	4917      	ldr	r1, [pc, #92]	; (1d03c <_tcp_synack_received+0x188>)
   1cfde:	9101      	str	r1, [sp, #4]
   1cfe0:	9200      	str	r2, [sp, #0]
   1cfe2:	b29b      	uxth	r3, r3
   1cfe4:	aa0b      	add	r2, sp, #44	; 0x2c
   1cfe6:	a905      	add	r1, sp, #20
   1cfe8:	2006      	movs	r0, #6
   1cfea:	f008 fce5 	bl	259b8 <net_conn_register>
		if (ret < 0) {
   1cfee:	2800      	cmp	r0, #0
   1cff0:	db1c      	blt.n	1d02c <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1cff2:	2104      	movs	r1, #4
   1cff4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cff6:	f006 ffba 	bl	23f6e <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1cffa:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1cffe:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d002:	f043 0304 	orr.w	r3, r3, #4
   1d006:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1d00a:	2200      	movs	r2, #0
   1d00c:	a905      	add	r1, sp, #20
   1d00e:	4628      	mov	r0, r5
   1d010:	f7ff ff30 	bl	1ce74 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1d014:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d016:	30ac      	adds	r0, #172	; 0xac
   1d018:	f00c fd3f 	bl	29a9a <_impl_k_sem_give>
		if (context->connect_cb) {
   1d01c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d01e:	2b00      	cmp	r3, #0
   1d020:	d081      	beq.n	1cf26 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1d022:	682a      	ldr	r2, [r5, #0]
   1d024:	2100      	movs	r1, #0
   1d026:	4628      	mov	r0, r5
   1d028:	4798      	blx	r3
   1d02a:	e77c      	b.n	1cf26 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1d02c:	a905      	add	r1, sp, #20
   1d02e:	4628      	mov	r0, r5
   1d030:	f7ff ff08 	bl	1ce44 <send_reset>
			return NET_DROP;
   1d034:	e777      	b.n	1cf26 <_tcp_synack_received+0x72>
   1d036:	bf00      	nop
   1d038:	20002fd0 	.word	0x20002fd0
   1d03c:	0001d595 	.word	0x0001d595

0001d040 <create_udp_packet>:
{
   1d040:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1d042:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1d046:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d04a:	2c0a      	cmp	r4, #10
   1d04c:	d118      	bne.n	1d080 <create_udp_packet+0x40>
   1d04e:	461e      	mov	r6, r3
   1d050:	4615      	mov	r5, r2
   1d052:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1d054:	1d13      	adds	r3, r2, #4
   1d056:	2200      	movs	r2, #0
   1d058:	f003 f9a4 	bl	203a4 <net_ipv6_create>
   1d05c:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1d05e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1d062:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1d066:	886b      	ldrh	r3, [r5, #2]
   1d068:	4402      	add	r2, r0
   1d06a:	4620      	mov	r0, r4
   1d06c:	f006 fd90 	bl	23b90 <net_udp_insert>
		if (!tmp) {
   1d070:	4605      	mov	r5, r0
   1d072:	b140      	cbz	r0, 1d086 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1d074:	4601      	mov	r1, r0
   1d076:	4620      	mov	r0, r4
   1d078:	f003 fbf0 	bl	2085c <net_ipv6_finalize>
	*out_pkt = pkt;
   1d07c:	6035      	str	r5, [r6, #0]
	return r;
   1d07e:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1d080:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1d084:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1d086:	f06f 000b 	mvn.w	r0, #11
}
   1d08a:	bd70      	pop	{r4, r5, r6, pc}

0001d08c <send_data>:
{
   1d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d090:	4604      	mov	r4, r0
   1d092:	4615      	mov	r5, r2
   1d094:	9e06      	ldr	r6, [sp, #24]
   1d096:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1d098:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1d09a:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1d09c:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d09e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d0a2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d0a6:	d011      	beq.n	1d0cc <send_data+0x40>
		return IPPROTO_TCP;
   1d0a8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d0aa:	2b11      	cmp	r3, #17
   1d0ac:	d010      	beq.n	1d0d0 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d0ae:	2b06      	cmp	r3, #6
   1d0b0:	d113      	bne.n	1d0da <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1d0b2:	4620      	mov	r0, r4
   1d0b4:	f007 fbf8 	bl	248a8 <net_tcp_send_data>
   1d0b8:	4680      	mov	r8, r0
		if (cb) {
   1d0ba:	b125      	cbz	r5, 1d0c6 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1d0bc:	463b      	mov	r3, r7
   1d0be:	4632      	mov	r2, r6
   1d0c0:	4601      	mov	r1, r0
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	47a8      	blx	r5
}
   1d0c6:	4640      	mov	r0, r8
   1d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1d0cc:	2311      	movs	r3, #17
   1d0ce:	e7ec      	b.n	1d0aa <send_data+0x1e>
		return net_send_data(pkt);
   1d0d0:	4608      	mov	r0, r1
   1d0d2:	f7fe fb05 	bl	1b6e0 <net_send_data>
   1d0d6:	4680      	mov	r8, r0
   1d0d8:	e7f5      	b.n	1d0c6 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1d0da:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1d0de:	e7f2      	b.n	1d0c6 <send_data+0x3a>

0001d0e0 <net_context_get>:
{
   1d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1d0e4:	2802      	cmp	r0, #2
   1d0e6:	f000 80e9 	beq.w	1d2bc <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1d0ea:	280a      	cmp	r0, #10
   1d0ec:	f040 80e9 	bne.w	1d2c2 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1d0f0:	1e4c      	subs	r4, r1, #1
   1d0f2:	b2e4      	uxtb	r4, r4
   1d0f4:	2c01      	cmp	r4, #1
   1d0f6:	f200 80e7 	bhi.w	1d2c8 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1d0fa:	2a11      	cmp	r2, #17
   1d0fc:	d002      	beq.n	1d104 <net_context_get+0x24>
   1d0fe:	2a06      	cmp	r2, #6
   1d100:	f040 80e5 	bne.w	1d2ce <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1d104:	2901      	cmp	r1, #1
   1d106:	d01c      	beq.n	1d142 <net_context_get+0x62>
   1d108:	2902      	cmp	r1, #2
   1d10a:	d01f      	beq.n	1d14c <net_context_get+0x6c>
	if (!context) {
   1d10c:	2b00      	cmp	r3, #0
   1d10e:	f000 80e1 	beq.w	1d2d4 <net_context_get+0x1f4>
   1d112:	461f      	mov	r7, r3
   1d114:	4690      	mov	r8, r2
   1d116:	460e      	mov	r6, r1
   1d118:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d11a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d11e:	4870      	ldr	r0, [pc, #448]	; (1d2e0 <net_context_get+0x200>)
   1d120:	f00c fcce 	bl	29ac0 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d124:	2400      	movs	r4, #0
   1d126:	2c05      	cmp	r4, #5
   1d128:	f300 80c5 	bgt.w	1d2b6 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1d12c:	2568      	movs	r5, #104	; 0x68
   1d12e:	4b6d      	ldr	r3, [pc, #436]	; (1d2e4 <net_context_get+0x204>)
   1d130:	fb05 3504 	mla	r5, r5, r4, r3
   1d134:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1d138:	f013 0f01 	tst.w	r3, #1
   1d13c:	d00b      	beq.n	1d156 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d13e:	3401      	adds	r4, #1
   1d140:	e7f1      	b.n	1d126 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1d142:	2a11      	cmp	r2, #17
   1d144:	d1e0      	bne.n	1d108 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1d146:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1d14a:	e076      	b.n	1d23a <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1d14c:	2a06      	cmp	r2, #6
   1d14e:	d1dd      	bne.n	1d10c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1d150:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1d154:	e071      	b.n	1d23a <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1d156:	f1b8 0f06 	cmp.w	r8, #6
   1d15a:	d071      	beq.n	1d240 <net_context_get+0x160>
		contexts[i].flags = 0;
   1d15c:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1d160:	4b60      	ldr	r3, [pc, #384]	; (1d2e4 <net_context_get+0x204>)
   1d162:	fb0a 3a04 	mla	sl, sl, r4, r3
   1d166:	2300      	movs	r3, #0
   1d168:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1d16c:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d170:	2201      	movs	r2, #1
   1d172:	f3bf 8f5b 	dmb	ish
   1d176:	e853 1f00 	ldrex	r1, [r3]
   1d17a:	e843 2000 	strex	r0, r2, [r3]
   1d17e:	2800      	cmp	r0, #0
   1d180:	d1f9      	bne.n	1d176 <net_context_get+0x96>
   1d182:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1d186:	f1b9 0f0a 	cmp.w	r9, #10
   1d18a:	d06d      	beq.n	1d268 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1d18c:	2368      	movs	r3, #104	; 0x68
   1d18e:	4a55      	ldr	r2, [pc, #340]	; (1d2e4 <net_context_get+0x204>)
   1d190:	fb03 2304 	mla	r3, r3, r4, r2
   1d194:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d198:	f022 0210 	bic.w	r2, r2, #16
   1d19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1d1a0:	2e01      	cmp	r6, #1
   1d1a2:	d068      	beq.n	1d276 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1d1a4:	2368      	movs	r3, #104	; 0x68
   1d1a6:	4a4f      	ldr	r2, [pc, #316]	; (1d2e4 <net_context_get+0x204>)
   1d1a8:	fb03 2304 	mla	r3, r3, r4, r2
   1d1ac:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d1b0:	f022 0220 	bic.w	r2, r2, #32
   1d1b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1d1b8:	f1b8 0f06 	cmp.w	r8, #6
   1d1bc:	d066      	beq.n	1d28c <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1d1be:	2368      	movs	r3, #104	; 0x68
   1d1c0:	4a48      	ldr	r2, [pc, #288]	; (1d2e4 <net_context_get+0x204>)
   1d1c2:	fb03 2304 	mla	r3, r3, r4, r2
   1d1c6:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1d1ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1d1d2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1d2e4 <net_context_get+0x204>
   1d1d6:	2568      	movs	r5, #104	; 0x68
   1d1d8:	fb05 f504 	mul.w	r5, r5, r4
   1d1dc:	eb08 0305 	add.w	r3, r8, r5
   1d1e0:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d1e4:	f042 0201 	orr.w	r2, r2, #1
   1d1e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1d1ec:	2600      	movs	r6, #0
   1d1ee:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1d1f2:	f105 0010 	add.w	r0, r5, #16
   1d1f6:	4440      	add	r0, r8
   1d1f8:	2218      	movs	r2, #24
   1d1fa:	4631      	mov	r1, r6
   1d1fc:	3004      	adds	r0, #4
   1d1fe:	f00d fc1f 	bl	2aa40 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1d202:	3508      	adds	r5, #8
   1d204:	4445      	add	r5, r8
   1d206:	220c      	movs	r2, #12
   1d208:	4631      	mov	r1, r6
   1d20a:	4628      	mov	r0, r5
   1d20c:	f00d fc18 	bl	2aa40 <memset>
		if (family == AF_INET6) {
   1d210:	f1b9 0f0a 	cmp.w	r9, #10
   1d214:	d045      	beq.n	1d2a2 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1d216:	2068      	movs	r0, #104	; 0x68
   1d218:	fb00 f404 	mul.w	r4, r0, r4
   1d21c:	3440      	adds	r4, #64	; 0x40
   1d21e:	4831      	ldr	r0, [pc, #196]	; (1d2e4 <net_context_get+0x204>)
   1d220:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d226:	2101      	movs	r1, #1
   1d228:	3004      	adds	r0, #4
   1d22a:	f00c fc2d 	bl	29a88 <_impl_k_sem_init>
		*context = &contexts[i];
   1d22e:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1d232:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d234:	482a      	ldr	r0, [pc, #168]	; (1d2e0 <net_context_get+0x200>)
   1d236:	f00c fc30 	bl	29a9a <_impl_k_sem_give>
}
   1d23a:	4620      	mov	r0, r4
   1d23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1d240:	2568      	movs	r5, #104	; 0x68
   1d242:	4b28      	ldr	r3, [pc, #160]	; (1d2e4 <net_context_get+0x204>)
   1d244:	fb05 3504 	mla	r5, r5, r4, r3
   1d248:	4628      	mov	r0, r5
   1d24a:	f006 fdab 	bl	23da4 <net_tcp_alloc>
   1d24e:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1d250:	2800      	cmp	r0, #0
   1d252:	d042      	beq.n	1d2da <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1d254:	4924      	ldr	r1, [pc, #144]	; (1d2e8 <net_context_get+0x208>)
   1d256:	3008      	adds	r0, #8
   1d258:	f00d f9f0 	bl	2a63c <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1d25c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d25e:	4923      	ldr	r1, [pc, #140]	; (1d2ec <net_context_get+0x20c>)
   1d260:	3030      	adds	r0, #48	; 0x30
   1d262:	f00d f9eb 	bl	2a63c <k_delayed_work_init>
   1d266:	e779      	b.n	1d15c <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1d268:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1d26c:	f042 0210 	orr.w	r2, r2, #16
   1d270:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1d274:	e794      	b.n	1d1a0 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1d276:	2368      	movs	r3, #104	; 0x68
   1d278:	4a1a      	ldr	r2, [pc, #104]	; (1d2e4 <net_context_get+0x204>)
   1d27a:	fb03 2304 	mla	r3, r3, r4, r2
   1d27e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d282:	f042 0220 	orr.w	r2, r2, #32
   1d286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1d28a:	e795      	b.n	1d1b8 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1d28c:	2368      	movs	r3, #104	; 0x68
   1d28e:	4a15      	ldr	r2, [pc, #84]	; (1d2e4 <net_context_get+0x204>)
   1d290:	fb03 2304 	mla	r3, r3, r4, r2
   1d294:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1d298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1d29c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1d2a0:	e797      	b.n	1d1d2 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1d2a2:	4629      	mov	r1, r5
   1d2a4:	4650      	mov	r0, sl
   1d2a6:	f7ff fcf1 	bl	1cc8c <find_available_port>
   1d2aa:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1d2ac:	2800      	cmp	r0, #0
   1d2ae:	d1b2      	bne.n	1d216 <net_context_get+0x136>
				return -EADDRINUSE;
   1d2b0:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1d2b4:	e7c1      	b.n	1d23a <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1d2b6:	f06f 0401 	mvn.w	r4, #1
   1d2ba:	e7bb      	b.n	1d234 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1d2bc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1d2c0:	e7bb      	b.n	1d23a <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1d2c2:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1d2c6:	e7b8      	b.n	1d23a <net_context_get+0x15a>
		return -EPROTOTYPE;
   1d2c8:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1d2cc:	e7b5      	b.n	1d23a <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1d2ce:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1d2d2:	e7b2      	b.n	1d23a <net_context_get+0x15a>
		return -EINVAL;
   1d2d4:	f06f 0415 	mvn.w	r4, #21
   1d2d8:	e7af      	b.n	1d23a <net_context_get+0x15a>
				return -ENOBUFS;
   1d2da:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1d2de:	e7ac      	b.n	1d23a <net_context_get+0x15a>
   1d2e0:	20002370 	.word	0x20002370
   1d2e4:	20002100 	.word	0x20002100
   1d2e8:	0001d3b9 	.word	0x0001d3b9
   1d2ec:	0001d3ad 	.word	0x0001d3ad

0001d2f0 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1d2f0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d2f2:	f3bf 8f5b 	dmb	ish
   1d2f6:	e853 0f00 	ldrex	r0, [r3]
   1d2fa:	1c42      	adds	r2, r0, #1
   1d2fc:	e843 2100 	strex	r1, r2, [r3]
   1d300:	2900      	cmp	r1, #0
   1d302:	d1f8      	bne.n	1d2f6 <net_context_ref+0x6>
   1d304:	f3bf 8f5b 	dmb	ish
}
   1d308:	3001      	adds	r0, #1
   1d30a:	4770      	bx	lr

0001d30c <net_context_unref>:
{
   1d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1d30e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d310:	f3bf 8f5b 	dmb	ish
   1d314:	e852 3f00 	ldrex	r3, [r2]
   1d318:	1e59      	subs	r1, r3, #1
   1d31a:	e842 1400 	strex	r4, r1, [r2]
   1d31e:	2c00      	cmp	r4, #0
   1d320:	d1f8      	bne.n	1d314 <net_context_unref+0x8>
   1d322:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1d326:	2b01      	cmp	r3, #1
   1d328:	d001      	beq.n	1d32e <net_context_unref+0x22>
		return old_rc - 1;
   1d32a:	1e58      	subs	r0, r3, #1
   1d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d32e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d334:	481b      	ldr	r0, [pc, #108]	; (1d3a4 <net_context_unref+0x98>)
   1d336:	f00c fbc3 	bl	29ac0 <_impl_k_sem_take>
	if (context->tcp) {
   1d33a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d33c:	b13b      	cbz	r3, 1d34e <net_context_unref+0x42>
   1d33e:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1d340:	2d00      	cmp	r5, #0
   1d342:	dd15      	ble.n	1d370 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1d344:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d346:	f006 fe3d 	bl	23fc4 <net_tcp_release>
		context->tcp = NULL;
   1d34a:	2300      	movs	r3, #0
   1d34c:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1d34e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d350:	b118      	cbz	r0, 1d35a <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1d352:	f008 fb13 	bl	2597c <net_conn_unregister>
		context->conn_handler = NULL;
   1d356:	2300      	movs	r3, #0
   1d358:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d35a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1d35e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1d362:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d366:	480f      	ldr	r0, [pc, #60]	; (1d3a4 <net_context_unref+0x98>)
   1d368:	f00c fb97 	bl	29a9a <_impl_k_sem_give>
	return 0;
   1d36c:	2000      	movs	r0, #0
}
   1d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1d370:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1d374:	0113      	lsls	r3, r2, #4
   1d376:	4a0c      	ldr	r2, [pc, #48]	; (1d3a8 <net_context_unref+0x9c>)
   1d378:	58d2      	ldr	r2, [r2, r3]
   1d37a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d37c:	429a      	cmp	r2, r3
   1d37e:	d001      	beq.n	1d384 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1d380:	3501      	adds	r5, #1
   1d382:	e7dd      	b.n	1d340 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1d384:	4f08      	ldr	r7, [pc, #32]	; (1d3a8 <net_context_unref+0x9c>)
   1d386:	00ae      	lsls	r6, r5, #2
   1d388:	1972      	adds	r2, r6, r5
   1d38a:	0113      	lsls	r3, r2, #4
   1d38c:	3328      	adds	r3, #40	; 0x28
   1d38e:	18f8      	adds	r0, r7, r3
   1d390:	f00d f972 	bl	2a678 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1d394:	442e      	add	r6, r5
   1d396:	0130      	lsls	r0, r6, #4
   1d398:	2250      	movs	r2, #80	; 0x50
   1d39a:	2100      	movs	r1, #0
   1d39c:	4438      	add	r0, r7
   1d39e:	f00d fb4f 	bl	2aa40 <memset>
   1d3a2:	e7ed      	b.n	1d380 <net_context_unref+0x74>
   1d3a4:	20002370 	.word	0x20002370
   1d3a8:	20002388 	.word	0x20002388

0001d3ac <handle_fin_timeout>:
{
   1d3ac:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1d3ae:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1d3b2:	f7ff ffab 	bl	1d30c <net_context_unref>
   1d3b6:	bd08      	pop	{r3, pc}

0001d3b8 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1d3b8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1d3bc:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1d3c0:	2b06      	cmp	r3, #6
   1d3c2:	d000      	beq.n	1d3c6 <handle_ack_timeout+0xe>
   1d3c4:	4770      	bx	lr
{
   1d3c6:	b510      	push	{r4, lr}
   1d3c8:	f1a0 0208 	sub.w	r2, r0, #8
   1d3cc:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	4610      	mov	r0, r2
   1d3d2:	f006 fdcc 	bl	23f6e <net_tcp_change_state>
		net_context_unref(tcp->context);
   1d3d6:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1d3da:	f7ff ff97 	bl	1d30c <net_context_unref>
   1d3de:	bd10      	pop	{r4, pc}

0001d3e0 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1d3e0:	b570      	push	{r4, r5, r6, lr}
   1d3e2:	4605      	mov	r5, r0
   1d3e4:	460e      	mov	r6, r1
   1d3e6:	4614      	mov	r4, r2
   1d3e8:	4610      	mov	r0, r2
   1d3ea:	f7ff ff81 	bl	1d2f0 <net_context_ref>
   1d3ee:	4622      	mov	r2, r4
   1d3f0:	4631      	mov	r1, r6
   1d3f2:	4628      	mov	r0, r5
   1d3f4:	f7ff fd5e 	bl	1ceb4 <_tcp_synack_received>
   1d3f8:	4605      	mov	r5, r0
   1d3fa:	4620      	mov	r0, r4
   1d3fc:	f7ff ff86 	bl	1d30c <net_context_unref>
   1d400:	4628      	mov	r0, r5
   1d402:	bd70      	pop	{r4, r5, r6, pc}

0001d404 <_tcp_established>:
{
   1d404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d408:	b087      	sub	sp, #28
   1d40a:	4607      	mov	r7, r0
   1d40c:	460e      	mov	r6, r1
   1d40e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1d410:	a901      	add	r1, sp, #4
   1d412:	4630      	mov	r0, r6
   1d414:	f006 ff9a 	bl	2434c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1d418:	2800      	cmp	r0, #0
   1d41a:	f000 80b5 	beq.w	1d588 <_tcp_established+0x184>
   1d41e:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1d420:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1d426:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1d42a:	2b03      	cmp	r3, #3
   1d42c:	d804      	bhi.n	1d438 <_tcp_established+0x34>
		return NET_DROP;
   1d42e:	2502      	movs	r5, #2
}
   1d430:	4628      	mov	r0, r5
   1d432:	b007      	add	sp, #28
   1d434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1d438:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1d43c:	f018 0f10 	tst.w	r8, #16
   1d440:	d116      	bne.n	1d470 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1d442:	f018 0f04 	tst.w	r8, #4
   1d446:	d121      	bne.n	1d48c <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1d448:	792a      	ldrb	r2, [r5, #4]
   1d44a:	796b      	ldrb	r3, [r5, #5]
   1d44c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1d450:	79a9      	ldrb	r1, [r5, #6]
   1d452:	79eb      	ldrb	r3, [r5, #7]
   1d454:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1d458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1d45c:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1d45e:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1d462:	1a99      	subs	r1, r3, r2
   1d464:	2900      	cmp	r1, #0
   1d466:	db2e      	blt.n	1d4c6 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1d468:	429a      	cmp	r2, r3
   1d46a:	d033      	beq.n	1d4d4 <_tcp_established+0xd0>
		return NET_DROP;
   1d46c:	2502      	movs	r5, #2
   1d46e:	e7df      	b.n	1d430 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1d470:	7a03      	ldrb	r3, [r0, #8]
   1d472:	7a41      	ldrb	r1, [r0, #9]
   1d474:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1d478:	7a82      	ldrb	r2, [r0, #10]
   1d47a:	7ac3      	ldrb	r3, [r0, #11]
   1d47c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1d480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1d484:	4620      	mov	r0, r4
   1d486:	f007 fa49 	bl	2491c <net_tcp_ack_received>
   1d48a:	e7da      	b.n	1d442 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1d48c:	4631      	mov	r1, r6
   1d48e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d490:	f006 ffd7 	bl	24442 <net_tcp_validate_seq>
   1d494:	b928      	cbnz	r0, 1d4a2 <_tcp_established+0x9e>
   1d496:	4a3d      	ldr	r2, [pc, #244]	; (1d58c <_tcp_established+0x188>)
   1d498:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1d49a:	3301      	adds	r3, #1
   1d49c:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1d49e:	2502      	movs	r5, #2
   1d4a0:	e7c6      	b.n	1d430 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1d4a2:	4a3a      	ldr	r2, [pc, #232]	; (1d58c <_tcp_established+0x188>)
   1d4a4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1d4a6:	3301      	adds	r3, #1
   1d4a8:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1d4aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1d4ac:	b135      	cbz	r5, 1d4bc <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1d4ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1d4b0:	685b      	ldr	r3, [r3, #4]
   1d4b2:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1d4b6:	2100      	movs	r1, #0
   1d4b8:	4620      	mov	r0, r4
   1d4ba:	47a8      	blx	r5
		net_context_unref(context);
   1d4bc:	4620      	mov	r0, r4
   1d4be:	f7ff ff25 	bl	1d30c <net_context_unref>
		return NET_DROP;
   1d4c2:	2502      	movs	r5, #2
   1d4c4:	e7b4      	b.n	1d430 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1d4c6:	2201      	movs	r2, #1
   1d4c8:	4639      	mov	r1, r7
   1d4ca:	4620      	mov	r0, r4
   1d4cc:	f7ff fcd2 	bl	1ce74 <send_ack>
		return NET_DROP;
   1d4d0:	2502      	movs	r5, #2
   1d4d2:	e7ad      	b.n	1d430 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1d4d4:	2106      	movs	r1, #6
   1d4d6:	4630      	mov	r0, r6
   1d4d8:	f7ff fc25 	bl	1cd26 <set_appdata_values>
	return pkt->appdatalen;
   1d4dc:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1d4e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d4e2:	f006 fcc5 	bl	23e70 <net_tcp_get_recv_wnd>
   1d4e6:	4581      	cmp	r9, r0
   1d4e8:	d901      	bls.n	1d4ee <_tcp_established+0xea>
		return NET_DROP;
   1d4ea:	2502      	movs	r5, #2
   1d4ec:	e7a0      	b.n	1d430 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1d4ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d4f0:	685a      	ldr	r2, [r3, #4]
   1d4f2:	4631      	mov	r1, r6
   1d4f4:	4638      	mov	r0, r7
   1d4f6:	f7ff fc4b 	bl	1cd90 <packet_received>
   1d4fa:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1d4fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1d4fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1d502:	444b      	add	r3, r9
   1d504:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1d508:	f018 0f01 	tst.w	r8, #1
   1d50c:	d022      	beq.n	1d554 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1d50e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1d510:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1d514:	f043 0304 	orr.w	r3, r3, #4
   1d518:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1d51c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d51e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1d522:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1d526:	2b04      	cmp	r3, #4
   1d528:	d02a      	beq.n	1d580 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1d52a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1d52c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1d530:	3301      	adds	r3, #1
   1d532:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1d536:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1d538:	b12e      	cbz	r6, 1d546 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1d53a:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1d53c:	685b      	ldr	r3, [r3, #4]
   1d53e:	2200      	movs	r2, #0
   1d540:	4611      	mov	r1, r2
   1d542:	4620      	mov	r0, r4
   1d544:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1d546:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1d548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d54c:	3108      	adds	r1, #8
   1d54e:	4810      	ldr	r0, [pc, #64]	; (1d590 <_tcp_established+0x18c>)
   1d550:	f00d f8ec 	bl	2a72c <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1d554:	2200      	movs	r2, #0
   1d556:	4639      	mov	r1, r7
   1d558:	4620      	mov	r0, r4
   1d55a:	f7ff fc8b 	bl	1ce74 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1d55e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1d564:	2a00      	cmp	r2, #0
   1d566:	f47f af63 	bne.w	1d430 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1d56a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1d56e:	f003 0306 	and.w	r3, r3, #6
   1d572:	2b06      	cmp	r3, #6
   1d574:	f47f af5c 	bne.w	1d430 <_tcp_established+0x2c>
		net_context_unref(context);
   1d578:	4620      	mov	r0, r4
   1d57a:	f7ff fec7 	bl	1d30c <net_context_unref>
   1d57e:	e757      	b.n	1d430 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1d580:	2105      	movs	r1, #5
   1d582:	f006 fcf4 	bl	23f6e <net_tcp_change_state>
   1d586:	e7d0      	b.n	1d52a <_tcp_established+0x126>
		return NET_DROP;
   1d588:	2502      	movs	r5, #2
   1d58a:	e751      	b.n	1d430 <_tcp_established+0x2c>
   1d58c:	20002fd0 	.word	0x20002fd0
   1d590:	200030f0 	.word	0x200030f0

0001d594 <tcp_established>:
NET_CONN_CB(tcp_established)
   1d594:	b570      	push	{r4, r5, r6, lr}
   1d596:	4605      	mov	r5, r0
   1d598:	460e      	mov	r6, r1
   1d59a:	4614      	mov	r4, r2
   1d59c:	4610      	mov	r0, r2
   1d59e:	f7ff fea7 	bl	1d2f0 <net_context_ref>
   1d5a2:	4622      	mov	r2, r4
   1d5a4:	4631      	mov	r1, r6
   1d5a6:	4628      	mov	r0, r5
   1d5a8:	f7ff ff2c 	bl	1d404 <_tcp_established>
   1d5ac:	4605      	mov	r5, r0
   1d5ae:	4620      	mov	r0, r4
   1d5b0:	f7ff feac 	bl	1d30c <net_context_unref>
   1d5b4:	4628      	mov	r0, r5
   1d5b6:	bd70      	pop	{r4, r5, r6, pc}

0001d5b8 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1d5b8:	b390      	cbz	r0, 1d620 <net_context_put+0x68>
{
   1d5ba:	b510      	push	{r4, lr}
   1d5bc:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1d5be:	4a1d      	ldr	r2, [pc, #116]	; (1d634 <net_context_put+0x7c>)
   1d5c0:	4290      	cmp	r0, r2
   1d5c2:	d330      	bcc.n	1d626 <net_context_put+0x6e>
   1d5c4:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1d5c8:	4290      	cmp	r0, r2
   1d5ca:	d22f      	bcs.n	1d62c <net_context_put+0x74>
	context->connect_cb = NULL;
   1d5cc:	2200      	movs	r2, #0
   1d5ce:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1d5d0:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1d5d2:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1d5d4:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1d5d8:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d5dc:	d007      	beq.n	1d5ee <net_context_put+0x36>
		return IPPROTO_TCP;
   1d5de:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d5e0:	2906      	cmp	r1, #6
   1d5e2:	d006      	beq.n	1d5f2 <net_context_put+0x3a>
	net_context_unref(context);
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	f7ff fe91 	bl	1d30c <net_context_unref>
	return 0;
   1d5ea:	2000      	movs	r0, #0
   1d5ec:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d5ee:	2111      	movs	r1, #17
   1d5f0:	e7f6      	b.n	1d5e0 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d5f2:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1d5f6:	2a02      	cmp	r2, #2
   1d5f8:	d001      	beq.n	1d5fe <net_context_put+0x46>
   1d5fa:	2a03      	cmp	r2, #3
   1d5fc:	d1f2      	bne.n	1d5e4 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1d5fe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1d600:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1d604:	f013 0f04 	tst.w	r3, #4
   1d608:	d1ec      	bne.n	1d5e4 <net_context_put+0x2c>
   1d60a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d60e:	3130      	adds	r1, #48	; 0x30
   1d610:	4809      	ldr	r0, [pc, #36]	; (1d638 <net_context_put+0x80>)
   1d612:	f00d f88b 	bl	2a72c <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1d616:	4620      	mov	r0, r4
   1d618:	f7ff fb59 	bl	1ccce <queue_fin>
			return 0;
   1d61c:	2000      	movs	r0, #0
   1d61e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d620:	f06f 0015 	mvn.w	r0, #21
   1d624:	4770      	bx	lr
   1d626:	f06f 0015 	mvn.w	r0, #21
   1d62a:	bd10      	pop	{r4, pc}
   1d62c:	f06f 0015 	mvn.w	r0, #21
}
   1d630:	bd10      	pop	{r4, pc}
   1d632:	bf00      	nop
   1d634:	20002100 	.word	0x20002100
   1d638:	200030f0 	.word	0x200030f0

0001d63c <net_context_bind>:
	if (context->conn_handler) {
   1d63c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1d63e:	2b00      	cmp	r3, #0
   1d640:	d15c      	bne.n	1d6fc <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1d642:	880b      	ldrh	r3, [r1, #0]
   1d644:	2b0a      	cmp	r3, #10
   1d646:	d15d      	bne.n	1d704 <net_context_bind+0xc8>
{
   1d648:	b570      	push	{r4, r5, r6, lr}
   1d64a:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1d64c:	2300      	movs	r3, #0
   1d64e:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d650:	2a17      	cmp	r2, #23
   1d652:	d945      	bls.n	1d6e0 <net_context_bind+0xa4>
   1d654:	460d      	mov	r5, r1
   1d656:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1d658:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d65a:	2bff      	cmp	r3, #255	; 0xff
   1d65c:	d009      	beq.n	1d672 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d65e:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d660:	b983      	cbnz	r3, 1d684 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d662:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d664:	bb2b      	cbnz	r3, 1d6b2 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d666:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d668:	bb2b      	cbnz	r3, 1d6b6 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d66a:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d66c:	b32b      	cbz	r3, 1d6ba <net_context_bind+0x7e>
   1d66e:	2300      	movs	r3, #0
   1d670:	e009      	b.n	1d686 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1d672:	a901      	add	r1, sp, #4
   1d674:	1d28      	adds	r0, r5, #4
   1d676:	f7fe fccb 	bl	1c010 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1d67a:	4606      	mov	r6, r0
   1d67c:	2800      	cmp	r0, #0
   1d67e:	d034      	beq.n	1d6ea <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1d680:	3608      	adds	r6, #8
   1d682:	e007      	b.n	1d694 <net_context_bind+0x58>
   1d684:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d686:	b1d3      	cbz	r3, 1d6be <net_context_bind+0x82>
			iface = net_if_get_default();
   1d688:	f7fe fa4c 	bl	1bb24 <net_if_get_default>
   1d68c:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1d68e:	f002 fde9 	bl	20264 <net_ipv6_unspecified_address>
   1d692:	4606      	mov	r6, r0
		if (!iface) {
   1d694:	9801      	ldr	r0, [sp, #4]
   1d696:	b370      	cbz	r0, 1d6f6 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1d698:	f7ff f9ec 	bl	1ca74 <net_if_get_by_iface>
   1d69c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d6a0:	230a      	movs	r3, #10
   1d6a2:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1d6a4:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1d6a6:	8869      	ldrh	r1, [r5, #2]
   1d6a8:	b989      	cbnz	r1, 1d6ce <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1d6aa:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1d6ac:	806b      	strh	r3, [r5, #2]
		return 0;
   1d6ae:	2300      	movs	r3, #0
   1d6b0:	e018      	b.n	1d6e4 <net_context_bind+0xa8>
   1d6b2:	2300      	movs	r3, #0
   1d6b4:	e7e7      	b.n	1d686 <net_context_bind+0x4a>
   1d6b6:	2300      	movs	r3, #0
   1d6b8:	e7e5      	b.n	1d686 <net_context_bind+0x4a>
   1d6ba:	2301      	movs	r3, #1
   1d6bc:	e7e3      	b.n	1d686 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1d6be:	a901      	add	r1, sp, #4
   1d6c0:	1d28      	adds	r0, r5, #4
   1d6c2:	f7fe fa5b 	bl	1bb7c <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1d6c6:	4606      	mov	r6, r0
   1d6c8:	b190      	cbz	r0, 1d6f0 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1d6ca:	3604      	adds	r6, #4
   1d6cc:	e7e2      	b.n	1d694 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1d6ce:	462a      	mov	r2, r5
   1d6d0:	4618      	mov	r0, r3
   1d6d2:	f7ff fa9f 	bl	1cc14 <check_used_port>
			if (!ret) {
   1d6d6:	4603      	mov	r3, r0
   1d6d8:	b920      	cbnz	r0, 1d6e4 <net_context_bind+0xa8>
					addr6->sin6_port;
   1d6da:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1d6dc:	8162      	strh	r2, [r4, #10]
   1d6de:	e001      	b.n	1d6e4 <net_context_bind+0xa8>
			return -EINVAL;
   1d6e0:	f06f 0315 	mvn.w	r3, #21
}
   1d6e4:	4618      	mov	r0, r3
   1d6e6:	b002      	add	sp, #8
   1d6e8:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1d6ea:	f06f 0301 	mvn.w	r3, #1
   1d6ee:	e7f9      	b.n	1d6e4 <net_context_bind+0xa8>
				return -ENOENT;
   1d6f0:	f06f 0301 	mvn.w	r3, #1
   1d6f4:	e7f6      	b.n	1d6e4 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1d6f6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1d6fa:	e7f3      	b.n	1d6e4 <net_context_bind+0xa8>
		return -EISCONN;
   1d6fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1d700:	4618      	mov	r0, r3
   1d702:	4770      	bx	lr
	return -EINVAL;
   1d704:	f06f 0315 	mvn.w	r3, #21
   1d708:	e7fa      	b.n	1d700 <net_context_bind+0xc4>

0001d70a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d70a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d70e:	f013 0f10 	tst.w	r3, #16
   1d712:	d006      	beq.n	1d722 <bind_default+0x18>
		return AF_INET6;
   1d714:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1d716:	2b0a      	cmp	r3, #10
   1d718:	d120      	bne.n	1d75c <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d71a:	68c3      	ldr	r3, [r0, #12]
   1d71c:	b11b      	cbz	r3, 1d726 <bind_default+0x1c>
			return 0;
   1d71e:	2000      	movs	r0, #0
   1d720:	4770      	bx	lr
	return AF_INET;
   1d722:	2302      	movs	r3, #2
   1d724:	e7f7      	b.n	1d716 <bind_default+0xc>
{
   1d726:	b530      	push	{r4, r5, lr}
   1d728:	b087      	sub	sp, #28
   1d72a:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1d72c:	ad06      	add	r5, sp, #24
   1d72e:	230a      	movs	r3, #10
   1d730:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1d734:	f002 fd96 	bl	20264 <net_ipv6_unspecified_address>
   1d738:	2210      	movs	r2, #16
   1d73a:	4601      	mov	r1, r0
   1d73c:	a801      	add	r0, sp, #4
   1d73e:	f7e2 fdbf 	bl	2c0 <memcpy>
			find_available_port(context,
   1d742:	4629      	mov	r1, r5
   1d744:	4620      	mov	r0, r4
   1d746:	f7ff faa1 	bl	1cc8c <find_available_port>
		addr6.sin6_port =
   1d74a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1d74e:	2218      	movs	r2, #24
   1d750:	4629      	mov	r1, r5
   1d752:	4620      	mov	r0, r4
   1d754:	f7ff ff72 	bl	1d63c <net_context_bind>
}
   1d758:	b007      	add	sp, #28
   1d75a:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1d75c:	f06f 0015 	mvn.w	r0, #21
   1d760:	4770      	bx	lr

0001d762 <sendto>:
{
   1d762:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d764:	b085      	sub	sp, #20
   1d766:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1d768:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1d76a:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d76e:	f010 0f01 	tst.w	r0, #1
   1d772:	d072      	beq.n	1d85a <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d774:	f010 0f40 	tst.w	r0, #64	; 0x40
   1d778:	d01f      	beq.n	1d7ba <sendto+0x58>
		return IPPROTO_TCP;
   1d77a:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d77e:	f1be 0f06 	cmp.w	lr, #6
   1d782:	d01d      	beq.n	1d7c0 <sendto+0x5e>
   1d784:	461f      	mov	r7, r3
   1d786:	4616      	mov	r6, r2
   1d788:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d78a:	f1be 0f11 	cmp.w	lr, #17
   1d78e:	d024      	beq.n	1d7da <sendto+0x78>
	if (!dst_addr) {
   1d790:	2c00      	cmp	r4, #0
   1d792:	d068      	beq.n	1d866 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1d794:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1d796:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1d79a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1d79e:	2b0a      	cmp	r3, #10
   1d7a0:	d164      	bne.n	1d86c <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d7a2:	2e17      	cmp	r6, #23
   1d7a4:	d965      	bls.n	1d872 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d7a6:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d7a8:	b9f3      	cbnz	r3, 1d7e8 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d7aa:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d7ac:	bb63      	cbnz	r3, 1d808 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d7ae:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d7b0:	bb63      	cbnz	r3, 1d80c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d7b2:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d7b4:	b363      	cbz	r3, 1d810 <sendto+0xae>
   1d7b6:	2300      	movs	r3, #0
   1d7b8:	e017      	b.n	1d7ea <sendto+0x88>
	return IPPROTO_UDP;
   1d7ba:	f04f 0e11 	mov.w	lr, #17
   1d7be:	e7de      	b.n	1d77e <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d7c0:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1d7c4:	2802      	cmp	r0, #2
   1d7c6:	d14b      	bne.n	1d860 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d7c8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d7ca:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1d7ce:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d7d2:	d0d7      	beq.n	1d784 <sendto+0x22>
			return -ESHUTDOWN;
   1d7d4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1d7d8:	e03c      	b.n	1d854 <sendto+0xf2>
		ret = bind_default(context);
   1d7da:	4628      	mov	r0, r5
   1d7dc:	f7ff ff95 	bl	1d70a <bind_default>
		if (ret) {
   1d7e0:	4603      	mov	r3, r0
   1d7e2:	2800      	cmp	r0, #0
   1d7e4:	d0d4      	beq.n	1d790 <sendto+0x2e>
   1d7e6:	e035      	b.n	1d854 <sendto+0xf2>
   1d7e8:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d7ea:	2b00      	cmp	r3, #0
   1d7ec:	d144      	bne.n	1d878 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d7ee:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1d7f2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d7f6:	d00d      	beq.n	1d814 <sendto+0xb2>
		return IPPROTO_TCP;
   1d7f8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d7fa:	2b11      	cmp	r3, #17
   1d7fc:	d00c      	beq.n	1d818 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d7fe:	2b06      	cmp	r3, #6
   1d800:	d13d      	bne.n	1d87e <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1d802:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1d804:	2000      	movs	r0, #0
   1d806:	e011      	b.n	1d82c <sendto+0xca>
   1d808:	2300      	movs	r3, #0
   1d80a:	e7ee      	b.n	1d7ea <sendto+0x88>
   1d80c:	2300      	movs	r3, #0
   1d80e:	e7ec      	b.n	1d7ea <sendto+0x88>
   1d810:	2301      	movs	r3, #1
   1d812:	e7ea      	b.n	1d7ea <sendto+0x88>
	return IPPROTO_UDP;
   1d814:	2311      	movs	r3, #17
   1d816:	e7f0      	b.n	1d7fa <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1d818:	ab03      	add	r3, sp, #12
   1d81a:	4622      	mov	r2, r4
   1d81c:	4628      	mov	r0, r5
   1d81e:	f7ff fc0f 	bl	1d040 <create_udp_packet>
   1d822:	4603      	mov	r3, r0
   1d824:	e009      	b.n	1d83a <sendto+0xd8>
		bytes += buf->len;
   1d826:	8994      	ldrh	r4, [r2, #12]
   1d828:	4420      	add	r0, r4
		buf = buf->frags;
   1d82a:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1d82c:	2a00      	cmp	r2, #0
   1d82e:	d1fa      	bne.n	1d826 <sendto+0xc4>
	pkt->appdatalen = len;
   1d830:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1d832:	4628      	mov	r0, r5
   1d834:	f006 fd08 	bl	24248 <net_tcp_queue_data>
   1d838:	4603      	mov	r3, r0
	if (ret < 0) {
   1d83a:	2b00      	cmp	r3, #0
   1d83c:	db0a      	blt.n	1d854 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1d83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d840:	9301      	str	r3, [sp, #4]
   1d842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d844:	9300      	str	r3, [sp, #0]
   1d846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d848:	463a      	mov	r2, r7
   1d84a:	9903      	ldr	r1, [sp, #12]
   1d84c:	4628      	mov	r0, r5
   1d84e:	f7ff fc1d 	bl	1d08c <send_data>
   1d852:	4603      	mov	r3, r0
}
   1d854:	4618      	mov	r0, r3
   1d856:	b005      	add	sp, #20
   1d858:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1d85a:	f06f 0308 	mvn.w	r3, #8
   1d85e:	e7f9      	b.n	1d854 <sendto+0xf2>
			return -ENOTCONN;
   1d860:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d864:	e7f6      	b.n	1d854 <sendto+0xf2>
		return -EDESTADDRREQ;
   1d866:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d86a:	e7f3      	b.n	1d854 <sendto+0xf2>
		return -EINVAL;
   1d86c:	f06f 0315 	mvn.w	r3, #21
   1d870:	e7f0      	b.n	1d854 <sendto+0xf2>
			return -EINVAL;
   1d872:	f06f 0315 	mvn.w	r3, #21
   1d876:	e7ed      	b.n	1d854 <sendto+0xf2>
			return -EDESTADDRREQ;
   1d878:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d87c:	e7ea      	b.n	1d854 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1d87e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1d882:	e7e7      	b.n	1d854 <sendto+0xf2>

0001d884 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1d884:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d886:	b08f      	sub	sp, #60	; 0x3c
   1d888:	4604      	mov	r4, r0
   1d88a:	460d      	mov	r5, r1
   1d88c:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1d88e:	2300      	movs	r3, #0
   1d890:	9304      	str	r3, [sp, #16]
   1d892:	9305      	str	r3, [sp, #20]
   1d894:	9306      	str	r3, [sp, #24]
   1d896:	9307      	str	r3, [sp, #28]
   1d898:	9308      	str	r3, [sp, #32]
   1d89a:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d89c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d8a0:	f013 0f10 	tst.w	r3, #16
   1d8a4:	d037      	beq.n	1d916 <recv_udp+0x92>
		return AF_INET6;
   1d8a6:	230a      	movs	r3, #10
   1d8a8:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1d8ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d8ae:	b118      	cbz	r0, 1d8b8 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1d8b0:	f008 f864 	bl	2597c <net_conn_unregister>
		context->conn_handler = NULL;
   1d8b4:	2300      	movs	r3, #0
   1d8b6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1d8b8:	4620      	mov	r0, r4
   1d8ba:	f7ff ff26 	bl	1d70a <bind_default>
	if (ret) {
   1d8be:	4603      	mov	r3, r0
   1d8c0:	bb30      	cbnz	r0, 1d910 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d8c2:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d8c6:	f017 0f10 	tst.w	r7, #16
   1d8ca:	d026      	beq.n	1d91a <recv_udp+0x96>
		return AF_INET6;
   1d8cc:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d8ce:	2b0a      	cmp	r3, #10
   1d8d0:	d025      	beq.n	1d91e <recv_udp+0x9a>
	u16_t lport = 0;
   1d8d2:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d8d6:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d8d8:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d8da:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d8de:	d037      	beq.n	1d950 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d8e0:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d8e2:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d8e6:	d135      	bne.n	1d954 <recv_udp+0xd0>
   1d8e8:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d8ea:	8ae5      	ldrh	r5, [r4, #22]
   1d8ec:	022b      	lsls	r3, r5, #8
   1d8ee:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d8f2:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d8f6:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d8fa:	b2ad      	uxth	r5, r5
   1d8fc:	342c      	adds	r4, #44	; 0x2c
   1d8fe:	9403      	str	r4, [sp, #12]
   1d900:	9602      	str	r6, [sp, #8]
   1d902:	4c16      	ldr	r4, [pc, #88]	; (1d95c <recv_udp+0xd8>)
   1d904:	9401      	str	r4, [sp, #4]
   1d906:	9500      	str	r5, [sp, #0]
   1d908:	b29b      	uxth	r3, r3
   1d90a:	f008 f855 	bl	259b8 <net_conn_register>
   1d90e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d910:	4618      	mov	r0, r3
   1d912:	b00f      	add	sp, #60	; 0x3c
   1d914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d916:	2302      	movs	r3, #2
   1d918:	e7c6      	b.n	1d8a8 <recv_udp+0x24>
   1d91a:	2302      	movs	r3, #2
   1d91c:	e7d7      	b.n	1d8ce <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d91e:	68e3      	ldr	r3, [r4, #12]
   1d920:	b1a3      	cbz	r3, 1d94c <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d922:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d926:	6818      	ldr	r0, [r3, #0]
   1d928:	6859      	ldr	r1, [r3, #4]
   1d92a:	689a      	ldr	r2, [r3, #8]
   1d92c:	68db      	ldr	r3, [r3, #12]
   1d92e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d932:	f10d 0e14 	add.w	lr, sp, #20
   1d936:	ab0e      	add	r3, sp, #56	; 0x38
   1d938:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d93c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d940:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d942:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d946:	f8ad e012 	strh.w	lr, [sp, #18]
   1d94a:	e7c5      	b.n	1d8d8 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d94c:	2200      	movs	r2, #0
   1d94e:	e7f8      	b.n	1d942 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d950:	2011      	movs	r0, #17
   1d952:	e7c6      	b.n	1d8e2 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d954:	f104 0114 	add.w	r1, r4, #20
   1d958:	e7c7      	b.n	1d8ea <recv_udp+0x66>
   1d95a:	bf00      	nop
   1d95c:	0001cd91 	.word	0x0001cd91

0001d960 <net_context_connect>:
{
   1d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d964:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d966:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d96a:	f014 0f01 	tst.w	r4, #1
   1d96e:	f000 80c9 	beq.w	1db04 <net_context_connect+0x1a4>
   1d972:	461f      	mov	r7, r3
   1d974:	4615      	mov	r5, r2
   1d976:	460e      	mov	r6, r1
   1d978:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d97a:	f7ff fec6 	bl	1d70a <bind_default>
	if (ret) {
   1d97e:	4680      	mov	r8, r0
   1d980:	2800      	cmp	r0, #0
   1d982:	f040 80c1 	bne.w	1db08 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d986:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d988:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d98c:	f013 0f10 	tst.w	r3, #16
   1d990:	d02b      	beq.n	1d9ea <net_context_connect+0x8a>
		return AF_INET6;
   1d992:	220a      	movs	r2, #10
   1d994:	4291      	cmp	r1, r2
   1d996:	f040 80bb 	bne.w	1db10 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d99a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d99e:	2b03      	cmp	r3, #3
   1d9a0:	f000 80b9 	beq.w	1db16 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d9a4:	2a0a      	cmp	r2, #10
   1d9a6:	f040 80b9 	bne.w	1db1c <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d9aa:	2d17      	cmp	r5, #23
   1d9ac:	f240 80b9 	bls.w	1db22 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d9b0:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d9b2:	2bff      	cmp	r3, #255	; 0xff
   1d9b4:	f000 80b8 	beq.w	1db28 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d9b8:	2210      	movs	r2, #16
   1d9ba:	1d31      	adds	r1, r6, #4
   1d9bc:	f104 0018 	add.w	r0, r4, #24
   1d9c0:	f7e2 fc7e 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d9c4:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d9c8:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d9cc:	230a      	movs	r3, #10
   1d9ce:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d9d0:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d9d2:	b963      	cbnz	r3, 1d9ee <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d9d4:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d9d6:	2b00      	cmp	r3, #0
   1d9d8:	d174      	bne.n	1dac4 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d9da:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d173      	bne.n	1dac8 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d9e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d9e2:	2b00      	cmp	r3, #0
   1d9e4:	d072      	beq.n	1dacc <net_context_connect+0x16c>
   1d9e6:	4643      	mov	r3, r8
   1d9e8:	e002      	b.n	1d9f0 <net_context_connect+0x90>
	return AF_INET;
   1d9ea:	2202      	movs	r2, #2
   1d9ec:	e7d2      	b.n	1d994 <net_context_connect+0x34>
   1d9ee:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d9f0:	f013 0f01 	tst.w	r3, #1
   1d9f4:	d16c      	bne.n	1dad0 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d9f6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d9fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d9fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1da02:	230a      	movs	r3, #10
   1da04:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1da06:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1da0a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1da0e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1da12:	68e3      	ldr	r3, [r4, #12]
   1da14:	2b00      	cmp	r3, #0
   1da16:	d062      	beq.n	1dade <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1da18:	ad0c      	add	r5, sp, #48	; 0x30
   1da1a:	6818      	ldr	r0, [r3, #0]
   1da1c:	6859      	ldr	r1, [r3, #4]
   1da1e:	689a      	ldr	r2, [r3, #8]
   1da20:	68db      	ldr	r3, [r3, #12]
   1da22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1da24:	ad07      	add	r5, sp, #28
   1da26:	ab10      	add	r3, sp, #64	; 0x40
   1da28:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1da2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1da30:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1da32:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1da36:	f013 0f20 	tst.w	r3, #32
   1da3a:	d052      	beq.n	1dae2 <net_context_connect+0x182>
		return SOCK_STREAM;
   1da3c:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1da3e:	2b02      	cmp	r3, #2
   1da40:	d051      	beq.n	1dae6 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1da42:	2b01      	cmp	r3, #1
   1da44:	d173      	bne.n	1db2e <net_context_connect+0x1ce>
			       ntohs(rport),
   1da46:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1da4a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1da4e:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1da52:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1da56:	b289      	uxth	r1, r1
   1da58:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1da5c:	9003      	str	r0, [sp, #12]
   1da5e:	9402      	str	r4, [sp, #8]
   1da60:	4835      	ldr	r0, [pc, #212]	; (1db38 <net_context_connect+0x1d8>)
   1da62:	9001      	str	r0, [sp, #4]
   1da64:	9100      	str	r1, [sp, #0]
   1da66:	b29b      	uxth	r3, r3
   1da68:	4631      	mov	r1, r6
   1da6a:	2006      	movs	r0, #6
   1da6c:	f007 ffa4 	bl	259b8 <net_conn_register>
	if (ret < 0) {
   1da70:	2800      	cmp	r0, #0
   1da72:	db5f      	blt.n	1db34 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1da74:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1da76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1da78:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1da7a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1da7e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1da82:	f043 0302 	orr.w	r3, r3, #2
   1da86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1da8a:	2102      	movs	r1, #2
   1da8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1da8e:	f006 fa6e 	bl	23f6e <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1da92:	2200      	movs	r2, #0
   1da94:	ab10      	add	r3, sp, #64	; 0x40
   1da96:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1da9a:	9302      	str	r3, [sp, #8]
   1da9c:	9601      	str	r6, [sp, #4]
   1da9e:	9200      	str	r2, [sp, #0]
   1daa0:	4613      	mov	r3, r2
   1daa2:	2102      	movs	r1, #2
   1daa4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1daa6:	f006 faff 	bl	240a8 <net_tcp_prepare_segment>
	if (ret) {
   1daaa:	b310      	cbz	r0, 1daf2 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1daac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1daae:	b35b      	cbz	r3, 1db08 <net_context_connect+0x1a8>
   1dab0:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1dab2:	4619      	mov	r1, r3
   1dab4:	30ac      	adds	r0, #172	; 0xac
   1dab6:	f00c f803 	bl	29ac0 <_impl_k_sem_take>
   1daba:	4680      	mov	r8, r0
   1dabc:	b320      	cbz	r0, 1db08 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1dabe:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1dac2:	e021      	b.n	1db08 <net_context_connect+0x1a8>
   1dac4:	4643      	mov	r3, r8
   1dac6:	e793      	b.n	1d9f0 <net_context_connect+0x90>
   1dac8:	4643      	mov	r3, r8
   1daca:	e791      	b.n	1d9f0 <net_context_connect+0x90>
   1dacc:	2301      	movs	r3, #1
   1dace:	e78f      	b.n	1d9f0 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1dad0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1dad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dad8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1dadc:	e791      	b.n	1da02 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1dade:	2200      	movs	r2, #0
   1dae0:	e7a7      	b.n	1da32 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1dae2:	2302      	movs	r3, #2
   1dae4:	e7ab      	b.n	1da3e <net_context_connect+0xde>
		if (cb) {
   1dae6:	b17f      	cbz	r7, 1db08 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1dae8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1daea:	2100      	movs	r1, #0
   1daec:	4620      	mov	r0, r4
   1daee:	47b8      	blx	r7
   1daf0:	e00a      	b.n	1db08 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1daf2:	9805      	ldr	r0, [sp, #20]
   1daf4:	f7fd fdf4 	bl	1b6e0 <net_send_data>
	if (ret < 0) {
   1daf8:	2800      	cmp	r0, #0
   1dafa:	dad7      	bge.n	1daac <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1dafc:	9805      	ldr	r0, [sp, #20]
   1dafe:	f000 f9f0 	bl	1dee2 <net_pkt_unref>
   1db02:	e7d3      	b.n	1daac <net_context_connect+0x14c>
		return -EBADF;
   1db04:	f06f 0808 	mvn.w	r8, #8
}
   1db08:	4640      	mov	r0, r8
   1db0a:	b010      	add	sp, #64	; 0x40
   1db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1db10:	f06f 0815 	mvn.w	r8, #21
   1db14:	e7f8      	b.n	1db08 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1db16:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1db1a:	e7f5      	b.n	1db08 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1db1c:	f06f 0815 	mvn.w	r8, #21
   1db20:	e7f2      	b.n	1db08 <net_context_connect+0x1a8>
			return -EINVAL;
   1db22:	f06f 0815 	mvn.w	r8, #21
   1db26:	e7ef      	b.n	1db08 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1db28:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1db2c:	e7ec      	b.n	1db08 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1db2e:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1db32:	e7e9      	b.n	1db08 <net_context_connect+0x1a8>
		return ret;
   1db34:	4680      	mov	r8, r0
   1db36:	e7e7      	b.n	1db08 <net_context_connect+0x1a8>
   1db38:	0001d3e1 	.word	0x0001d3e1

0001db3c <net_context_send>:
{
   1db3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db3e:	b085      	sub	sp, #20
	return pkt->context;
   1db40:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1db42:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1db46:	2d00      	cmp	r5, #0
   1db48:	da17      	bge.n	1db7a <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1db4a:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1db4c:	b1c5      	cbz	r5, 1db80 <net_context_send+0x44>
	return pkt->family;
   1db4e:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1db52:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1db56:	2d0a      	cmp	r5, #10
   1db58:	d00d      	beq.n	1db76 <net_context_send+0x3a>
		addrlen = 0;
   1db5a:	2700      	movs	r7, #0
   1db5c:	461e      	mov	r6, r3
   1db5e:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1db60:	990a      	ldr	r1, [sp, #40]	; 0x28
   1db62:	9102      	str	r1, [sp, #8]
   1db64:	9601      	str	r6, [sp, #4]
   1db66:	9200      	str	r2, [sp, #0]
   1db68:	463a      	mov	r2, r7
   1db6a:	f104 0114 	add.w	r1, r4, #20
   1db6e:	f7ff fdf8 	bl	1d762 <sendto>
}
   1db72:	b005      	add	sp, #20
   1db74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1db76:	2718      	movs	r7, #24
   1db78:	e7f0      	b.n	1db5c <net_context_send+0x20>
		return -EDESTADDRREQ;
   1db7a:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1db7e:	e7f8      	b.n	1db72 <net_context_send+0x36>
   1db80:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1db84:	e7f5      	b.n	1db72 <net_context_send+0x36>

0001db86 <net_context_sendto>:
{
   1db86:	b510      	push	{r4, lr}
   1db88:	b084      	sub	sp, #16
   1db8a:	461c      	mov	r4, r3
	return pkt->context;
   1db8c:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1db8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1db92:	f013 0f40 	tst.w	r3, #64	; 0x40
   1db96:	d00d      	beq.n	1dbb4 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1db98:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1db9a:	2b06      	cmp	r3, #6
   1db9c:	d00c      	beq.n	1dbb8 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1db9e:	9b08      	ldr	r3, [sp, #32]
   1dba0:	9302      	str	r3, [sp, #8]
   1dba2:	9b07      	ldr	r3, [sp, #28]
   1dba4:	9301      	str	r3, [sp, #4]
   1dba6:	9b06      	ldr	r3, [sp, #24]
   1dba8:	9300      	str	r3, [sp, #0]
   1dbaa:	4623      	mov	r3, r4
   1dbac:	f7ff fdd9 	bl	1d762 <sendto>
}
   1dbb0:	b004      	add	sp, #16
   1dbb2:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1dbb4:	2311      	movs	r3, #17
   1dbb6:	e7f0      	b.n	1db9a <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1dbb8:	9b08      	ldr	r3, [sp, #32]
   1dbba:	9300      	str	r3, [sp, #0]
   1dbbc:	9b07      	ldr	r3, [sp, #28]
   1dbbe:	9a06      	ldr	r2, [sp, #24]
   1dbc0:	4621      	mov	r1, r4
   1dbc2:	f7ff ffbb 	bl	1db3c <net_context_send>
   1dbc6:	e7f3      	b.n	1dbb0 <net_context_sendto+0x2a>

0001dbc8 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1dbca:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1dbce:	f014 0f01 	tst.w	r4, #1
   1dbd2:	d030      	beq.n	1dc36 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1dbd4:	f014 0f40 	tst.w	r4, #64	; 0x40
   1dbd8:	d023      	beq.n	1dc22 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1dbda:	2606      	movs	r6, #6
   1dbdc:	4617      	mov	r7, r2
   1dbde:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1dbe0:	2e11      	cmp	r6, #17
   1dbe2:	d020      	beq.n	1dc26 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1dbe4:	2e06      	cmp	r6, #6
   1dbe6:	d129      	bne.n	1dc3c <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1dbe8:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1dbea:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1dbee:	f410 7f80 	tst.w	r0, #256	; 0x100
   1dbf2:	d126      	bne.n	1dc42 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1dbf4:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1dbf8:	2c02      	cmp	r4, #2
   1dbfa:	d125      	bne.n	1dc48 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1dbfc:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1dbfe:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1dc00:	b32f      	cbz	r7, 1dc4e <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1dc02:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1dc06:	2100      	movs	r1, #0
   1dc08:	4620      	mov	r0, r4
   1dc0a:	f00b ff59 	bl	29ac0 <_impl_k_sem_take>
   1dc0e:	4606      	mov	r6, r0
   1dc10:	2800      	cmp	r0, #0
   1dc12:	d1f6      	bne.n	1dc02 <net_context_recv+0x3a>
   1dc14:	4639      	mov	r1, r7
   1dc16:	4620      	mov	r0, r4
   1dc18:	f00b ff52 	bl	29ac0 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1dc1c:	b140      	cbz	r0, 1dc30 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1dc1e:	4630      	mov	r0, r6
   1dc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1dc22:	2611      	movs	r6, #17
   1dc24:	e7da      	b.n	1dbdc <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1dc26:	f7ff fe2d 	bl	1d884 <recv_udp>
		if (ret < 0) {
   1dc2a:	1e06      	subs	r6, r0, #0
   1dc2c:	dae8      	bge.n	1dc00 <net_context_recv+0x38>
   1dc2e:	e7f6      	b.n	1dc1e <net_context_recv+0x56>
			return -ETIMEDOUT;
   1dc30:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1dc34:	e7f3      	b.n	1dc1e <net_context_recv+0x56>
		return -EBADF;
   1dc36:	f06f 0608 	mvn.w	r6, #8
   1dc3a:	e7f0      	b.n	1dc1e <net_context_recv+0x56>
		return -EPROTOTYPE;
   1dc3c:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1dc40:	e7ed      	b.n	1dc1e <net_context_recv+0x56>
			return -ESHUTDOWN;
   1dc42:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1dc46:	e7ea      	b.n	1dc1e <net_context_recv+0x56>
			return -ENOTCONN;
   1dc48:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1dc4c:	e7e7      	b.n	1dc1e <net_context_recv+0x56>
	return 0;
   1dc4e:	2600      	movs	r6, #0
   1dc50:	e7e5      	b.n	1dc1e <net_context_recv+0x56>
	...

0001dc54 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1dc54:	b570      	push	{r4, r5, r6, lr}
   1dc56:	4606      	mov	r6, r0
   1dc58:	460d      	mov	r5, r1
   1dc5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc5e:	480d      	ldr	r0, [pc, #52]	; (1dc94 <net_context_foreach+0x40>)
   1dc60:	f00b ff2e 	bl	29ac0 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1dc64:	2400      	movs	r4, #0
   1dc66:	e000      	b.n	1dc6a <net_context_foreach+0x16>
   1dc68:	3401      	adds	r4, #1
   1dc6a:	2c05      	cmp	r4, #5
   1dc6c:	dc0e      	bgt.n	1dc8c <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1dc6e:	2368      	movs	r3, #104	; 0x68
   1dc70:	4a09      	ldr	r2, [pc, #36]	; (1dc98 <net_context_foreach+0x44>)
   1dc72:	fb03 2304 	mla	r3, r3, r4, r2
   1dc76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1dc7a:	f013 0f01 	tst.w	r3, #1
   1dc7e:	d0f3      	beq.n	1dc68 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1dc80:	4629      	mov	r1, r5
   1dc82:	2068      	movs	r0, #104	; 0x68
   1dc84:	fb00 2004 	mla	r0, r0, r4, r2
   1dc88:	47b0      	blx	r6
   1dc8a:	e7ed      	b.n	1dc68 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1dc8c:	4801      	ldr	r0, [pc, #4]	; (1dc94 <net_context_foreach+0x40>)
   1dc8e:	f00b ff04 	bl	29a9a <_impl_k_sem_give>
   1dc92:	bd70      	pop	{r4, r5, r6, pc}
   1dc94:	20002370 	.word	0x20002370
   1dc98:	20002100 	.word	0x20002100

0001dc9c <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1dc9c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1dc9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dca2:	2101      	movs	r1, #1
   1dca4:	4801      	ldr	r0, [pc, #4]	; (1dcac <net_context_init+0x10>)
   1dca6:	f00b feef 	bl	29a88 <_impl_k_sem_init>
   1dcaa:	bd08      	pop	{r3, pc}
   1dcac:	20002370 	.word	0x20002370

0001dcb0 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1dcb0:	b570      	push	{r4, r5, r6, lr}
   1dcb2:	b082      	sub	sp, #8
   1dcb4:	4604      	mov	r4, r0
   1dcb6:	460d      	mov	r5, r1
   1dcb8:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1dcba:	f00c f863 	bl	29d84 <k_is_in_isr>
   1dcbe:	b198      	cbz	r0, 1dce8 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1dcc0:	2200      	movs	r2, #0
   1dcc2:	a901      	add	r1, sp, #4
   1dcc4:	4620      	mov	r0, r4
   1dcc6:	f00a fde9 	bl	2889c <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1dcca:	b998      	cbnz	r0, 1dcf4 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1dccc:	2244      	movs	r2, #68	; 0x44
   1dcce:	2100      	movs	r1, #0
   1dcd0:	9801      	ldr	r0, [sp, #4]
   1dcd2:	f00c feb5 	bl	2aa40 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1dcd6:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1dcd8:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1dcdc:	2301      	movs	r3, #1
   1dcde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1dce2:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1dce4:	b002      	add	sp, #8
   1dce6:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1dce8:	4632      	mov	r2, r6
   1dcea:	a901      	add	r1, sp, #4
   1dcec:	4620      	mov	r0, r4
   1dcee:	f00a fdd5 	bl	2889c <k_mem_slab_alloc>
   1dcf2:	e7ea      	b.n	1dcca <net_pkt_get_reserve+0x1a>
		return NULL;
   1dcf4:	2000      	movs	r0, #0
   1dcf6:	e7f5      	b.n	1dce4 <net_pkt_get_reserve+0x34>

0001dcf8 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1dcfa:	2900      	cmp	r1, #0
   1dcfc:	d038      	beq.n	1dd70 <net_pkt_get+0x78>
   1dcfe:	460c      	mov	r4, r1
   1dd00:	4617      	mov	r7, r2
   1dd02:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1dd04:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1dd08:	f7fe fea4 	bl	1ca54 <net_if_get_by_index>
   1dd0c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1dd0e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1dd12:	f013 0f10 	tst.w	r3, #16
   1dd16:	d024      	beq.n	1dd62 <net_pkt_get+0x6a>
		return AF_INET6;
   1dd18:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1dd1a:	2b0a      	cmp	r3, #10
   1dd1c:	d023      	beq.n	1dd66 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1dd1e:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1dd20:	686b      	ldr	r3, [r5, #4]
   1dd22:	689b      	ldr	r3, [r3, #8]
   1dd24:	4628      	mov	r0, r5
   1dd26:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1dd28:	463a      	mov	r2, r7
   1dd2a:	4601      	mov	r1, r0
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	f7ff ffbf 	bl	1dcb0 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1dd32:	4603      	mov	r3, r0
   1dd34:	b198      	cbz	r0, 1dd5e <net_pkt_get+0x66>
	pkt->context = ctx;
   1dd36:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1dd38:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1dd3a:	7d6a      	ldrb	r2, [r5, #21]
   1dd3c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1dd40:	7d6a      	ldrb	r2, [r5, #21]
   1dd42:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1dd46:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1dd4a:	f012 0f10 	tst.w	r2, #16
   1dd4e:	d00d      	beq.n	1dd6c <net_pkt_get+0x74>
		return AF_INET6;
   1dd50:	210a      	movs	r1, #10
	pkt->family = family;
   1dd52:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1dd56:	f361 02c6 	bfi	r2, r1, #3, #4
   1dd5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1dd5e:	4618      	mov	r0, r3
   1dd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1dd62:	2302      	movs	r3, #2
   1dd64:	e7d9      	b.n	1dd1a <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1dd66:	f104 0118 	add.w	r1, r4, #24
   1dd6a:	e7d9      	b.n	1dd20 <net_pkt_get+0x28>
   1dd6c:	2102      	movs	r1, #2
   1dd6e:	e7f0      	b.n	1dd52 <net_pkt_get+0x5a>
		return NULL;
   1dd70:	2300      	movs	r3, #0
   1dd72:	e7f4      	b.n	1dd5e <net_pkt_get+0x66>

0001dd74 <net_pkt_get_reserve_data>:
{
   1dd74:	b570      	push	{r4, r5, r6, lr}
   1dd76:	4604      	mov	r4, r0
   1dd78:	460d      	mov	r5, r1
   1dd7a:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1dd7c:	f00c f802 	bl	29d84 <k_is_in_isr>
   1dd80:	b158      	cbz	r0, 1dd9a <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1dd82:	2100      	movs	r1, #0
   1dd84:	4620      	mov	r0, r4
   1dd86:	f7fd facf 	bl	1b328 <net_buf_alloc>
   1dd8a:	4604      	mov	r4, r0
	if (!frag) {
   1dd8c:	b11c      	cbz	r4, 1dd96 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1dd8e:	4629      	mov	r1, r5
   1dd90:	4620      	mov	r0, r4
   1dd92:	f7fd fb24 	bl	1b3de <net_buf_reserve>
}
   1dd96:	4620      	mov	r0, r4
   1dd98:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1dd9a:	4631      	mov	r1, r6
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	f7fd fac3 	bl	1b328 <net_buf_alloc>
   1dda2:	4604      	mov	r4, r0
   1dda4:	e7f2      	b.n	1dd8c <net_pkt_get_reserve_data+0x18>

0001dda6 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1dda6:	b1f1      	cbz	r1, 1dde6 <_pkt_get_data+0x40>
{
   1dda8:	b570      	push	{r4, r5, r6, lr}
   1ddaa:	460c      	mov	r4, r1
   1ddac:	4616      	mov	r6, r2
   1ddae:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1ddb0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1ddb4:	f7fe fe4e 	bl	1ca54 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ddb8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ddbc:	f013 0f10 	tst.w	r3, #16
   1ddc0:	d00c      	beq.n	1dddc <_pkt_get_data+0x36>
		return AF_INET6;
   1ddc2:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1ddc4:	2b0a      	cmp	r3, #10
   1ddc6:	d00b      	beq.n	1dde0 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1ddc8:	2100      	movs	r1, #0
   1ddca:	6843      	ldr	r3, [r0, #4]
   1ddcc:	689b      	ldr	r3, [r3, #8]
   1ddce:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1ddd0:	4632      	mov	r2, r6
   1ddd2:	4601      	mov	r1, r0
   1ddd4:	4628      	mov	r0, r5
   1ddd6:	f7ff ffcd 	bl	1dd74 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1ddda:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1dddc:	2302      	movs	r3, #2
   1ddde:	e7f1      	b.n	1ddc4 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1dde0:	f104 0118 	add.w	r1, r4, #24
   1dde4:	e7f1      	b.n	1ddca <_pkt_get_data+0x24>
		return NULL;
   1dde6:	2000      	movs	r0, #0
   1dde8:	4770      	bx	lr
	...

0001ddec <net_pkt_get_reserve_rx>:
{
   1ddec:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1ddee:	460a      	mov	r2, r1
   1ddf0:	4601      	mov	r1, r0
   1ddf2:	4802      	ldr	r0, [pc, #8]	; (1ddfc <net_pkt_get_reserve_rx+0x10>)
   1ddf4:	f7ff ff5c 	bl	1dcb0 <net_pkt_get_reserve>
}
   1ddf8:	bd08      	pop	{r3, pc}
   1ddfa:	bf00      	nop
   1ddfc:	2000d58c 	.word	0x2000d58c

0001de00 <net_pkt_get_reserve_tx>:
{
   1de00:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1de02:	460a      	mov	r2, r1
   1de04:	4601      	mov	r1, r0
   1de06:	4802      	ldr	r0, [pc, #8]	; (1de10 <net_pkt_get_reserve_tx+0x10>)
   1de08:	f7ff ff52 	bl	1dcb0 <net_pkt_get_reserve>
}
   1de0c:	bd08      	pop	{r3, pc}
   1de0e:	bf00      	nop
   1de10:	2000d5a8 	.word	0x2000d5a8

0001de14 <net_pkt_get_reserve_rx_data>:
{
   1de14:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1de16:	460a      	mov	r2, r1
   1de18:	4601      	mov	r1, r0
   1de1a:	4802      	ldr	r0, [pc, #8]	; (1de24 <net_pkt_get_reserve_rx_data+0x10>)
   1de1c:	f7ff ffaa 	bl	1dd74 <net_pkt_get_reserve_data>
}
   1de20:	bd08      	pop	{r3, pc}
   1de22:	bf00      	nop
   1de24:	2000d70c 	.word	0x2000d70c

0001de28 <net_pkt_get_reserve_tx_data>:
{
   1de28:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1de2a:	460a      	mov	r2, r1
   1de2c:	4601      	mov	r1, r0
   1de2e:	4802      	ldr	r0, [pc, #8]	; (1de38 <net_pkt_get_reserve_tx_data+0x10>)
   1de30:	f7ff ffa0 	bl	1dd74 <net_pkt_get_reserve_data>
}
   1de34:	bd08      	pop	{r3, pc}
   1de36:	bf00      	nop
   1de38:	2000d72c 	.word	0x2000d72c

0001de3c <net_pkt_get_frag>:
{
   1de3c:	b538      	push	{r3, r4, r5, lr}
   1de3e:	4604      	mov	r4, r0
   1de40:	460d      	mov	r5, r1
	return pkt->context;
   1de42:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1de44:	b143      	cbz	r3, 1de58 <net_pkt_get_frag+0x1c>
   1de46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de48:	b133      	cbz	r3, 1de58 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1de4a:	4798      	blx	r3
   1de4c:	462a      	mov	r2, r5
   1de4e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1de52:	f7ff ff8f 	bl	1dd74 <net_pkt_get_reserve_data>
   1de56:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1de58:	6862      	ldr	r2, [r4, #4]
   1de5a:	4b07      	ldr	r3, [pc, #28]	; (1de78 <net_pkt_get_frag+0x3c>)
   1de5c:	429a      	cmp	r2, r3
   1de5e:	d005      	beq.n	1de6c <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1de60:	4629      	mov	r1, r5
   1de62:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1de66:	f7ff ffdf 	bl	1de28 <net_pkt_get_reserve_tx_data>
}
   1de6a:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1de6c:	4629      	mov	r1, r5
   1de6e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1de72:	f7ff ffcf 	bl	1de14 <net_pkt_get_reserve_rx_data>
   1de76:	bd38      	pop	{r3, r4, r5, pc}
   1de78:	2000d58c 	.word	0x2000d58c

0001de7c <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1de7c:	b538      	push	{r3, r4, r5, lr}
   1de7e:	4604      	mov	r4, r0
   1de80:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1de82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1de84:	b133      	cbz	r3, 1de94 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1de86:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1de88:	b130      	cbz	r0, 1de98 <net_pkt_get_tx+0x1c>
   1de8a:	462a      	mov	r2, r5
   1de8c:	4621      	mov	r1, r4
   1de8e:	f7ff ff33 	bl	1dcf8 <net_pkt_get>
}
   1de92:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1de94:	2000      	movs	r0, #0
   1de96:	e7f7      	b.n	1de88 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1de98:	4800      	ldr	r0, [pc, #0]	; (1de9c <net_pkt_get_tx+0x20>)
   1de9a:	e7f6      	b.n	1de8a <net_pkt_get_tx+0xe>
   1de9c:	2000d5a8 	.word	0x2000d5a8

0001dea0 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1dea0:	b538      	push	{r3, r4, r5, lr}
   1dea2:	4604      	mov	r4, r0
   1dea4:	460d      	mov	r5, r1
	if (context->data_pool) {
   1dea6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1dea8:	b133      	cbz	r3, 1deb8 <net_pkt_get_data+0x18>
		return context->data_pool();
   1deaa:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1deac:	b130      	cbz	r0, 1debc <net_pkt_get_data+0x1c>
   1deae:	462a      	mov	r2, r5
   1deb0:	4621      	mov	r1, r4
   1deb2:	f7ff ff78 	bl	1dda6 <_pkt_get_data>
}
   1deb6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1deb8:	2000      	movs	r0, #0
   1deba:	e7f7      	b.n	1deac <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1debc:	4800      	ldr	r0, [pc, #0]	; (1dec0 <net_pkt_get_data+0x20>)
   1debe:	e7f6      	b.n	1deae <net_pkt_get_data+0xe>
   1dec0:	2000d72c 	.word	0x2000d72c

0001dec4 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1dec4:	4603      	mov	r3, r0
   1dec6:	b120      	cbz	r0, 1ded2 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1dec8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1decc:	3201      	adds	r2, #1
   1dece:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1ded2:	4618      	mov	r0, r3
   1ded4:	4770      	bx	lr

0001ded6 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1ded6:	b118      	cbz	r0, 1dee0 <net_pkt_frag_unref+0xa>
{
   1ded8:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1deda:	f7fd fa93 	bl	1b404 <net_buf_unref>
   1dede:	bd08      	pop	{r3, pc}
   1dee0:	4770      	bx	lr

0001dee2 <net_pkt_unref>:
{
   1dee2:	b500      	push	{lr}
   1dee4:	b083      	sub	sp, #12
   1dee6:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1dee8:	b188      	cbz	r0, 1df0e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1deea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1deee:	b173      	cbz	r3, 1df0e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1def0:	3b01      	subs	r3, #1
   1def2:	b2db      	uxtb	r3, r3
   1def4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1def8:	b94b      	cbnz	r3, 1df0e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1defa:	6880      	ldr	r0, [r0, #8]
   1defc:	b108      	cbz	r0, 1df02 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1defe:	f7ff ffea 	bl	1ded6 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1df02:	a902      	add	r1, sp, #8
   1df04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1df08:	6858      	ldr	r0, [r3, #4]
   1df0a:	f00a fcf5 	bl	288f8 <k_mem_slab_free>
}
   1df0e:	b003      	add	sp, #12
   1df10:	f85d fb04 	ldr.w	pc, [sp], #4

0001df14 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1df14:	b510      	push	{r4, lr}
   1df16:	4604      	mov	r4, r0
   1df18:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1df1a:	68a3      	ldr	r3, [r4, #8]
   1df1c:	4293      	cmp	r3, r2
   1df1e:	d003      	beq.n	1df28 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1df20:	4611      	mov	r1, r2
   1df22:	f7fd faaf 	bl	1b484 <net_buf_frag_del>
}
   1df26:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1df28:	2900      	cmp	r1, #0
   1df2a:	d1f9      	bne.n	1df20 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1df2c:	4611      	mov	r1, r2
   1df2e:	f7fd faa9 	bl	1b484 <net_buf_frag_del>
		pkt->frags = tmp;
   1df32:	60a0      	str	r0, [r4, #8]
		return tmp;
   1df34:	bd10      	pop	{r4, pc}

0001df36 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1df36:	6883      	ldr	r3, [r0, #8]
   1df38:	b143      	cbz	r3, 1df4c <net_pkt_frag_add+0x16>
{
   1df3a:	b510      	push	{r4, lr}
   1df3c:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1df3e:	4618      	mov	r0, r3
   1df40:	f7fd fa80 	bl	1b444 <net_buf_frag_last>
   1df44:	4621      	mov	r1, r4
   1df46:	f7fd fa83 	bl	1b450 <net_buf_frag_insert>
   1df4a:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1df4c:	6081      	str	r1, [r0, #8]
		return;
   1df4e:	4770      	bx	lr

0001df50 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1df50:	b538      	push	{r3, r4, r5, lr}
   1df52:	4604      	mov	r4, r0
   1df54:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1df56:	4608      	mov	r0, r1
   1df58:	f7fd fa74 	bl	1b444 <net_buf_frag_last>
   1df5c:	68a3      	ldr	r3, [r4, #8]
   1df5e:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1df60:	60a5      	str	r5, [r4, #8]
   1df62:	bd38      	pop	{r3, r4, r5, pc}

0001df64 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df68:	b085      	sub	sp, #20
   1df6a:	9002      	str	r0, [sp, #8]
   1df6c:	460d      	mov	r5, r1
   1df6e:	4614      	mov	r4, r2
   1df70:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1df72:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1df76:	4619      	mov	r1, r3
   1df78:	f7ff ff60 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   1df7c:	9001      	str	r0, [sp, #4]
   1df7e:	b1b8      	cbz	r0, 1dfb0 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1df80:	f100 0608 	add.w	r6, r0, #8
   1df84:	4630      	mov	r0, r6
   1df86:	f7fd faf2 	bl	1b56e <net_buf_simple_tailroom>
   1df8a:	42a0      	cmp	r0, r4
   1df8c:	d30b      	bcc.n	1dfa6 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1df8e:	4621      	mov	r1, r4
   1df90:	4630      	mov	r0, r6
   1df92:	f7fd fa83 	bl	1b49c <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1df96:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1df9a:	b14f      	cbz	r7, 1dfb0 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1df9c:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1dfa0:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1dfa4:	e01c      	b.n	1dfe0 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1dfa6:	9801      	ldr	r0, [sp, #4]
   1dfa8:	f7ff ff95 	bl	1ded6 <net_pkt_frag_unref>
		return NULL;
   1dfac:	2300      	movs	r3, #0
   1dfae:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1dfb0:	9801      	ldr	r0, [sp, #4]
   1dfb2:	b005      	add	sp, #20
   1dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1dfb8:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1dfba:	eba8 0304 	sub.w	r3, r8, r4
   1dfbe:	2b00      	cmp	r3, #0
   1dfc0:	db2e      	blt.n	1e020 <net_pkt_copy+0xbc>
			amount -= left_len;
   1dfc2:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1dfc4:	4621      	mov	r1, r4
   1dfc6:	4630      	mov	r0, r6
   1dfc8:	f7fd fa68 	bl	1b49c <net_buf_simple_add>
   1dfcc:	4622      	mov	r2, r4
   1dfce:	4649      	mov	r1, r9
   1dfd0:	f7e2 f976 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1dfd4:	4630      	mov	r0, r6
   1dfd6:	f7fd faca 	bl	1b56e <net_buf_simple_tailroom>
   1dfda:	b180      	cbz	r0, 1dffe <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1dfdc:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1dfde:	44a1      	add	r9, r4
	while (orig && amount) {
   1dfe0:	f1ba 0f00 	cmp.w	sl, #0
   1dfe4:	d0e4      	beq.n	1dfb0 <net_pkt_copy+0x4c>
   1dfe6:	2d00      	cmp	r5, #0
   1dfe8:	d0e2      	beq.n	1dfb0 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1dfea:	f10b 0608 	add.w	r6, fp, #8
   1dfee:	4630      	mov	r0, r6
   1dff0:	f7fd fabd 	bl	1b56e <net_buf_simple_tailroom>
   1dff4:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1dff6:	42bd      	cmp	r5, r7
   1dff8:	d9de      	bls.n	1dfb8 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1dffa:	46b8      	mov	r8, r7
   1dffc:	e7dd      	b.n	1dfba <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1dffe:	9903      	ldr	r1, [sp, #12]
   1e000:	9802      	ldr	r0, [sp, #8]
   1e002:	f7ff ff1b 	bl	1de3c <net_pkt_get_frag>
				if (!new_frag) {
   1e006:	4606      	mov	r6, r0
   1e008:	b128      	cbz	r0, 1e016 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1e00a:	4601      	mov	r1, r0
   1e00c:	4658      	mov	r0, fp
   1e00e:	f7fd fa2a 	bl	1b466 <net_buf_frag_add>
				frag = new_frag;
   1e012:	46b3      	mov	fp, r6
   1e014:	e7e2      	b.n	1dfdc <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1e016:	9801      	ldr	r0, [sp, #4]
   1e018:	f7ff ff5d 	bl	1ded6 <net_pkt_frag_unref>
					return NULL;
   1e01c:	9601      	str	r6, [sp, #4]
   1e01e:	e7c7      	b.n	1dfb0 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1e020:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1e024:	4641      	mov	r1, r8
   1e026:	4630      	mov	r0, r6
   1e028:	f7fd fa38 	bl	1b49c <net_buf_simple_add>
   1e02c:	4642      	mov	r2, r8
   1e02e:	4649      	mov	r1, r9
   1e030:	f7e2 f946 	bl	2c0 <memcpy>
		orig = orig->frags;
   1e034:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1e038:	f1ba 0f00 	cmp.w	sl, #0
   1e03c:	d0d0      	beq.n	1dfe0 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1e03e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1e042:	f8da 9008 	ldr.w	r9, [sl, #8]
   1e046:	e7cb      	b.n	1dfe0 <net_pkt_copy+0x7c>

0001e048 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e04c:	4680      	mov	r8, r0
   1e04e:	460e      	mov	r6, r1
   1e050:	4615      	mov	r5, r2
   1e052:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1e054:	89c3      	ldrh	r3, [r0, #14]
   1e056:	454b      	cmp	r3, r9
   1e058:	d206      	bcs.n	1e068 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1e05a:	f06f 000b 	mvn.w	r0, #11
   1e05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1e062:	1a6d      	subs	r5, r5, r1
   1e064:	b2ad      	uxth	r5, r5
		src = src->frags;
   1e066:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1e068:	b336      	cbz	r6, 1e0b8 <net_frag_linear_copy+0x70>
   1e06a:	89b1      	ldrh	r1, [r6, #12]
   1e06c:	428d      	cmp	r5, r1
   1e06e:	d2f8      	bcs.n	1e062 <net_frag_linear_copy+0x1a>
   1e070:	2700      	movs	r7, #0
   1e072:	e015      	b.n	1e0a0 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1e074:	89b4      	ldrh	r4, [r6, #12]
   1e076:	1b64      	subs	r4, r4, r5
   1e078:	454c      	cmp	r4, r9
   1e07a:	bfa8      	it	ge
   1e07c:	464c      	movge	r4, r9
   1e07e:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1e080:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1e084:	68b1      	ldr	r1, [r6, #8]
   1e086:	4622      	mov	r2, r4
   1e088:	4429      	add	r1, r5
   1e08a:	4438      	add	r0, r7
   1e08c:	f7e2 f918 	bl	2c0 <memcpy>

		copied += to_copy;
   1e090:	4427      	add	r7, r4
   1e092:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1e094:	eba9 0404 	sub.w	r4, r9, r4
   1e098:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1e09c:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1e09e:	2500      	movs	r5, #0
	while (src && len > 0) {
   1e0a0:	b116      	cbz	r6, 1e0a8 <net_frag_linear_copy+0x60>
   1e0a2:	f1b9 0f00 	cmp.w	r9, #0
   1e0a6:	d1e5      	bne.n	1e074 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1e0a8:	f1b9 0f00 	cmp.w	r9, #0
   1e0ac:	d106      	bne.n	1e0bc <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1e0ae:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1e0b2:	2000      	movs	r0, #0
   1e0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e0b8:	2700      	movs	r7, #0
   1e0ba:	e7f1      	b.n	1e0a0 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1e0bc:	f06f 000b 	mvn.w	r0, #11
}
   1e0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e0c4 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0c8:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1e0ca:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1e0cc:	2700      	movs	r7, #0

	while (frag) {
   1e0ce:	e009      	b.n	1e0e4 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1e0d0:	4630      	mov	r0, r6
   1e0d2:	f7fd fa4c 	bl	1b56e <net_buf_simple_tailroom>
   1e0d6:	4605      	mov	r5, r0
   1e0d8:	e011      	b.n	1e0fe <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1e0da:	89a3      	ldrh	r3, [r4, #12]
   1e0dc:	2b00      	cmp	r3, #0
   1e0de:	d030      	beq.n	1e142 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1e0e0:	4627      	mov	r7, r4
		frag = frag->frags;
   1e0e2:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1e0e4:	2c00      	cmp	r4, #0
   1e0e6:	d031      	beq.n	1e14c <net_pkt_compact+0x88>
		if (frag->frags) {
   1e0e8:	6823      	ldr	r3, [r4, #0]
   1e0ea:	2b00      	cmp	r3, #0
   1e0ec:	d0f5      	beq.n	1e0da <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1e0ee:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1e0f0:	f104 0608 	add.w	r6, r4, #8
   1e0f4:	4630      	mov	r0, r6
   1e0f6:	f7fd fa3a 	bl	1b56e <net_buf_simple_tailroom>
   1e0fa:	4285      	cmp	r5, r0
   1e0fc:	d8e8      	bhi.n	1e0d0 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1e0fe:	68a0      	ldr	r0, [r4, #8]
   1e100:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1e102:	6821      	ldr	r1, [r4, #0]
   1e104:	462a      	mov	r2, r5
   1e106:	6889      	ldr	r1, [r1, #8]
   1e108:	4418      	add	r0, r3
   1e10a:	f7e2 f8d9 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1e10e:	4629      	mov	r1, r5
   1e110:	4630      	mov	r0, r6
   1e112:	f7fd f9c3 	bl	1b49c <net_buf_simple_add>
			memmove(frag->frags->data,
   1e116:	6823      	ldr	r3, [r4, #0]
   1e118:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1e11a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1e11c:	1b52      	subs	r2, r2, r5
   1e11e:	1941      	adds	r1, r0, r5
   1e120:	f00c fc2a 	bl	2a978 <memmove>
			frag->frags->len -= copy_len;
   1e124:	6822      	ldr	r2, [r4, #0]
   1e126:	8993      	ldrh	r3, [r2, #12]
   1e128:	1b5d      	subs	r5, r3, r5
   1e12a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1e12c:	4630      	mov	r0, r6
   1e12e:	f7fd fa1e 	bl	1b56e <net_buf_simple_tailroom>
   1e132:	2800      	cmp	r0, #0
   1e134:	d0d4      	beq.n	1e0e0 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1e136:	6822      	ldr	r2, [r4, #0]
   1e138:	4621      	mov	r1, r4
   1e13a:	4640      	mov	r0, r8
   1e13c:	f7ff feea 	bl	1df14 <net_pkt_frag_del>
				continue;
   1e140:	e7d0      	b.n	1e0e4 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1e142:	4622      	mov	r2, r4
   1e144:	4639      	mov	r1, r7
   1e146:	4640      	mov	r0, r8
   1e148:	f7ff fee4 	bl	1df14 <net_pkt_frag_del>
	}

	return true;
}
   1e14c:	2001      	movs	r0, #1
   1e14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e152 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1e152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1e156:	b3d0      	cbz	r0, 1e1ce <net_pkt_append+0x7c>
   1e158:	460c      	mov	r4, r1
   1e15a:	4690      	mov	r8, r2
   1e15c:	469a      	mov	sl, r3
   1e15e:	4681      	mov	r9, r0
   1e160:	b3ca      	cbz	r2, 1e1d6 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1e162:	6883      	ldr	r3, [r0, #8]
   1e164:	b133      	cbz	r3, 1e174 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1e166:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1e16a:	f7fd f96b 	bl	1b444 <net_buf_frag_last>
   1e16e:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1e170:	2700      	movs	r7, #0
   1e172:	e024      	b.n	1e1be <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1e174:	4651      	mov	r1, sl
   1e176:	f7ff fe61 	bl	1de3c <net_pkt_get_frag>
		if (!frag) {
   1e17a:	4601      	mov	r1, r0
   1e17c:	b368      	cbz	r0, 1e1da <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1e17e:	4648      	mov	r0, r9
   1e180:	f7ff fed9 	bl	1df36 <net_pkt_frag_add>
   1e184:	e7ef      	b.n	1e166 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1e186:	4628      	mov	r0, r5
   1e188:	f7fd f9f1 	bl	1b56e <net_buf_simple_tailroom>
   1e18c:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1e18e:	4631      	mov	r1, r6
   1e190:	4628      	mov	r0, r5
   1e192:	f7fd f983 	bl	1b49c <net_buf_simple_add>
		memcpy(data, value, count);
   1e196:	4632      	mov	r2, r6
   1e198:	4641      	mov	r1, r8
   1e19a:	f7e2 f891 	bl	2c0 <memcpy>
		len -= count;
   1e19e:	1ba4      	subs	r4, r4, r6
   1e1a0:	b2a4      	uxth	r4, r4
		added_len += count;
   1e1a2:	4437      	add	r7, r6
   1e1a4:	b2bf      	uxth	r7, r7
		value += count;
   1e1a6:	44b0      	add	r8, r6
		if (len == 0) {
   1e1a8:	b194      	cbz	r4, 1e1d0 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1e1aa:	4651      	mov	r1, sl
   1e1ac:	4648      	mov	r0, r9
   1e1ae:	f7ff fe45 	bl	1de3c <net_pkt_get_frag>
		if (!frag) {
   1e1b2:	4605      	mov	r5, r0
   1e1b4:	b160      	cbz	r0, 1e1d0 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1e1b6:	4601      	mov	r1, r0
   1e1b8:	4648      	mov	r0, r9
   1e1ba:	f7ff febc 	bl	1df36 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1e1be:	3508      	adds	r5, #8
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	f7fd f9d4 	bl	1b56e <net_buf_simple_tailroom>
   1e1c6:	4284      	cmp	r4, r0
   1e1c8:	d2dd      	bcs.n	1e186 <net_pkt_append+0x34>
   1e1ca:	4626      	mov	r6, r4
   1e1cc:	e7df      	b.n	1e18e <net_pkt_append+0x3c>
		return 0;
   1e1ce:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1e1d0:	4638      	mov	r0, r7
   1e1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1e1d6:	2700      	movs	r7, #0
   1e1d8:	e7fa      	b.n	1e1d0 <net_pkt_append+0x7e>
			return 0;
   1e1da:	2700      	movs	r7, #0
   1e1dc:	e7f8      	b.n	1e1d0 <net_pkt_append+0x7e>

0001e1de <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1e1de:	b4f0      	push	{r4, r5, r6, r7}
   1e1e0:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1e1e2:	4604      	mov	r4, r0
   1e1e4:	b188      	cbz	r0, 1e20a <net_frag_read+0x2c>
	while (frag) {
   1e1e6:	b17c      	cbz	r4, 1e208 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1e1e8:	89a0      	ldrh	r0, [r4, #12]
   1e1ea:	4288      	cmp	r0, r1
   1e1ec:	d005      	beq.n	1e1fa <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1e1ee:	4288      	cmp	r0, r1
   1e1f0:	d807      	bhi.n	1e202 <net_frag_read+0x24>
		offset -= frag->len;
   1e1f2:	1a09      	subs	r1, r1, r0
   1e1f4:	b289      	uxth	r1, r1
		frag = frag->frags;
   1e1f6:	6824      	ldr	r4, [r4, #0]
   1e1f8:	e7f5      	b.n	1e1e6 <net_frag_read+0x8>
			*pos = 0;
   1e1fa:	2100      	movs	r1, #0
   1e1fc:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1e1fe:	6820      	ldr	r0, [r4, #0]
   1e200:	e003      	b.n	1e20a <net_frag_read+0x2c>
			*pos = offset;
   1e202:	8011      	strh	r1, [r2, #0]
			return frag;
   1e204:	4620      	mov	r0, r4
   1e206:	e000      	b.n	1e20a <net_frag_read+0x2c>
	return NULL;
   1e208:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1e20a:	b350      	cbz	r0, 1e262 <net_frag_read+0x84>
   1e20c:	2500      	movs	r5, #0
   1e20e:	e00d      	b.n	1e22c <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1e210:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1e212:	3301      	adds	r3, #1
   1e214:	b29b      	uxth	r3, r3
   1e216:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1e218:	8984      	ldrh	r4, [r0, #12]
   1e21a:	42a3      	cmp	r3, r4
   1e21c:	d304      	bcc.n	1e228 <net_frag_read+0x4a>
		*pos = 0;
   1e21e:	2300      	movs	r3, #0
   1e220:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1e222:	6800      	ldr	r0, [r0, #0]
   1e224:	e000      	b.n	1e228 <net_frag_read+0x4a>
						  pos, data + copy++);
   1e226:	4625      	mov	r5, r4
   1e228:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1e22a:	b1c0      	cbz	r0, 1e25e <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1e22c:	1e59      	subs	r1, r3, #1
   1e22e:	b289      	uxth	r1, r1
   1e230:	b1db      	cbz	r3, 1e26a <net_frag_read+0x8c>
   1e232:	b1d0      	cbz	r0, 1e26a <net_frag_read+0x8c>
		if (data) {
   1e234:	2e00      	cmp	r6, #0
   1e236:	d0eb      	beq.n	1e210 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1e238:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1e23a:	1c6c      	adds	r4, r5, #1
   1e23c:	b2a4      	uxth	r4, r4
	if (data) {
   1e23e:	42ee      	cmn	r6, r5
   1e240:	d002      	beq.n	1e248 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1e242:	6887      	ldr	r7, [r0, #8]
   1e244:	5cff      	ldrb	r7, [r7, r3]
   1e246:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1e248:	3301      	adds	r3, #1
   1e24a:	b29b      	uxth	r3, r3
   1e24c:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1e24e:	8985      	ldrh	r5, [r0, #12]
   1e250:	42ab      	cmp	r3, r5
   1e252:	d3e8      	bcc.n	1e226 <net_frag_read+0x48>
		*pos = 0;
   1e254:	2300      	movs	r3, #0
   1e256:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1e258:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1e25a:	4625      	mov	r5, r4
   1e25c:	e7e4      	b.n	1e228 <net_frag_read+0x4a>
		if (!frag && len) {
   1e25e:	2900      	cmp	r1, #0
   1e260:	d0e4      	beq.n	1e22c <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1e262:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e266:	8013      	strh	r3, [r2, #0]

	return NULL;
   1e268:	2000      	movs	r0, #0
}
   1e26a:	bcf0      	pop	{r4, r5, r6, r7}
   1e26c:	4770      	bx	lr

0001e26e <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1e26e:	b510      	push	{r4, lr}
   1e270:	b084      	sub	sp, #16
   1e272:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1e274:	ab03      	add	r3, sp, #12
   1e276:	9300      	str	r3, [sp, #0]
   1e278:	2302      	movs	r3, #2
   1e27a:	f7ff ffb0 	bl	1e1de <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1e27e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e282:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e28a:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1e28c:	b004      	add	sp, #16
   1e28e:	bd10      	pop	{r4, pc}

0001e290 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1e290:	b510      	push	{r4, lr}
   1e292:	b084      	sub	sp, #16
   1e294:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1e296:	ab03      	add	r3, sp, #12
   1e298:	9300      	str	r3, [sp, #0]
   1e29a:	2304      	movs	r3, #4
   1e29c:	f7ff ff9f 	bl	1e1de <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1e2a0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e2a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e2a8:	041b      	lsls	r3, r3, #16
   1e2aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1e2ae:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1e2b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e2b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e2ba:	4313      	orrs	r3, r2
   1e2bc:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1e2be:	b004      	add	sp, #16
   1e2c0:	bd10      	pop	{r4, pc}

0001e2c2 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1e2c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2c6:	b083      	sub	sp, #12
   1e2c8:	9201      	str	r2, [sp, #4]
   1e2ca:	469b      	mov	fp, r3
   1e2cc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1e2d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1e2d2:	2800      	cmp	r0, #0
   1e2d4:	d06d      	beq.n	1e3b2 <net_pkt_write+0xf0>
   1e2d6:	460c      	mov	r4, r1
   1e2d8:	4682      	mov	sl, r0
   1e2da:	4615      	mov	r5, r2
	if (data) {
   1e2dc:	b364      	cbz	r4, 1e338 <net_pkt_write+0x76>
		if (!frag) {
   1e2de:	2c00      	cmp	r4, #0
   1e2e0:	d065      	beq.n	1e3ae <net_pkt_write+0xec>
		if (offset < frag->len) {
   1e2e2:	89a3      	ldrh	r3, [r4, #12]
   1e2e4:	42ab      	cmp	r3, r5
   1e2e6:	d863      	bhi.n	1e3b0 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1e2e8:	d032      	beq.n	1e350 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1e2ea:	42ab      	cmp	r3, r5
   1e2ec:	d2f6      	bcs.n	1e2dc <net_pkt_write+0x1a>
			offset -= frag->len;
   1e2ee:	1aed      	subs	r5, r5, r3
   1e2f0:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1e2f2:	f104 0908 	add.w	r9, r4, #8
   1e2f6:	4648      	mov	r0, r9
   1e2f8:	f7fd f939 	bl	1b56e <net_buf_simple_tailroom>
   1e2fc:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1e300:	4545      	cmp	r5, r8
   1e302:	d33a      	bcc.n	1e37a <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1e304:	4545      	cmp	r5, r8
   1e306:	d03e      	beq.n	1e386 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1e308:	4545      	cmp	r5, r8
   1e30a:	d9e7      	bls.n	1e2dc <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1e30c:	b281      	uxth	r1, r0
   1e30e:	4648      	mov	r0, r9
   1e310:	f7fd f8c4 	bl	1b49c <net_buf_simple_add>
				offset -= tailroom;
   1e314:	eba5 0508 	sub.w	r5, r5, r8
   1e318:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1e31a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1e31c:	2c00      	cmp	r4, #0
   1e31e:	d1dd      	bne.n	1e2dc <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1e320:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e322:	4650      	mov	r0, sl
   1e324:	f7ff fd8a 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   1e328:	4604      	mov	r4, r0
   1e32a:	2800      	cmp	r0, #0
   1e32c:	d0d6      	beq.n	1e2dc <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1e32e:	4601      	mov	r1, r0
   1e330:	4650      	mov	r0, sl
   1e332:	f7ff fe00 	bl	1df36 <net_pkt_frag_add>
   1e336:	e7d1      	b.n	1e2dc <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1e338:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e33a:	4650      	mov	r0, sl
   1e33c:	f7ff fd7e 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   1e340:	4604      	mov	r4, r0
   1e342:	2800      	cmp	r0, #0
   1e344:	d0cb      	beq.n	1e2de <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1e346:	4601      	mov	r1, r0
   1e348:	4650      	mov	r0, sl
   1e34a:	f7ff fdf4 	bl	1df36 <net_pkt_frag_add>
   1e34e:	e7c6      	b.n	1e2de <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1e350:	f104 0008 	add.w	r0, r4, #8
   1e354:	f7fd f90b 	bl	1b56e <net_buf_simple_tailroom>
   1e358:	bb50      	cbnz	r0, 1e3b0 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1e35a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1e35c:	b10c      	cbz	r4, 1e362 <net_pkt_write+0xa0>
			*pos = 0;
   1e35e:	2500      	movs	r5, #0
   1e360:	e026      	b.n	1e3b0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1e362:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e364:	4650      	mov	r0, sl
   1e366:	f7ff fd69 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   1e36a:	4604      	mov	r4, r0
   1e36c:	2800      	cmp	r0, #0
   1e36e:	d0f6      	beq.n	1e35e <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1e370:	4601      	mov	r1, r0
   1e372:	4650      	mov	r0, sl
   1e374:	f7ff fddf 	bl	1df36 <net_pkt_frag_add>
   1e378:	e7f1      	b.n	1e35e <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1e37a:	4629      	mov	r1, r5
   1e37c:	4648      	mov	r0, r9
   1e37e:	f7fd f88d 	bl	1b49c <net_buf_simple_add>
				*pos = frag->len;
   1e382:	89a5      	ldrh	r5, [r4, #12]
   1e384:	e014      	b.n	1e3b0 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1e386:	b281      	uxth	r1, r0
   1e388:	4648      	mov	r0, r9
   1e38a:	f7fd f887 	bl	1b49c <net_buf_simple_add>
				return check_and_create_data(pkt,
   1e38e:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1e390:	b10c      	cbz	r4, 1e396 <net_pkt_write+0xd4>
				*pos = 0;
   1e392:	2500      	movs	r5, #0
   1e394:	e00c      	b.n	1e3b0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1e396:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e398:	4650      	mov	r0, sl
   1e39a:	f7ff fd4f 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   1e39e:	4604      	mov	r4, r0
   1e3a0:	2800      	cmp	r0, #0
   1e3a2:	d0f6      	beq.n	1e392 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1e3a4:	4601      	mov	r1, r0
   1e3a6:	4650      	mov	r0, sl
   1e3a8:	f7ff fdc5 	bl	1df36 <net_pkt_frag_add>
   1e3ac:	e7f1      	b.n	1e392 <net_pkt_write+0xd0>
		if (!frag) {
   1e3ae:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1e3b0:	b96c      	cbnz	r4, 1e3ce <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1e3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e3b6:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1e3ba:	2000      	movs	r0, #0
   1e3bc:	e02d      	b.n	1e41a <net_pkt_write+0x158>
		len -= count;
   1e3be:	eba6 0608 	sub.w	r6, r6, r8
   1e3c2:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1e3c4:	b32e      	cbz	r6, 1e412 <net_pkt_write+0x150>
		data += count;
   1e3c6:	4447      	add	r7, r8
		frag = frag->frags;
   1e3c8:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1e3ca:	b34c      	cbz	r4, 1e420 <net_pkt_write+0x15e>
		offset = 0;
   1e3cc:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1e3ce:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1e3d2:	f104 0908 	add.w	r9, r4, #8
   1e3d6:	4648      	mov	r0, r9
   1e3d8:	f7fd f8c5 	bl	1b566 <net_buf_simple_headroom>
   1e3dc:	eba8 0800 	sub.w	r8, r8, r0
   1e3e0:	fa1f f888 	uxth.w	r8, r8
   1e3e4:	eba8 0805 	sub.w	r8, r8, r5
   1e3e8:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1e3ec:	45b0      	cmp	r8, r6
   1e3ee:	bf28      	it	cs
   1e3f0:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1e3f2:	68a0      	ldr	r0, [r4, #8]
   1e3f4:	4642      	mov	r2, r8
   1e3f6:	4639      	mov	r1, r7
   1e3f8:	4428      	add	r0, r5
   1e3fa:	f7e1 ff61 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1e3fe:	eb05 0108 	add.w	r1, r5, r8
   1e402:	89a3      	ldrh	r3, [r4, #12]
   1e404:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1e406:	2900      	cmp	r1, #0
   1e408:	ddd9      	ble.n	1e3be <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1e40a:	4648      	mov	r0, r9
   1e40c:	f7fd f846 	bl	1b49c <net_buf_simple_add>
   1e410:	e7d5      	b.n	1e3be <net_pkt_write+0xfc>
			*pos = offset + count;
   1e412:	4445      	add	r5, r8
   1e414:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1e418:	4620      	mov	r0, r4
}
   1e41a:	b003      	add	sp, #12
   1e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1e420:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e422:	4650      	mov	r0, sl
   1e424:	f7ff fd0a 	bl	1de3c <net_pkt_get_frag>
			if (!frag) {
   1e428:	4604      	mov	r4, r0
   1e42a:	2800      	cmp	r0, #0
   1e42c:	d0c1      	beq.n	1e3b2 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1e42e:	4601      	mov	r1, r0
   1e430:	4650      	mov	r0, sl
   1e432:	f7ff fd80 	bl	1df36 <net_pkt_frag_add>
   1e436:	e7c9      	b.n	1e3cc <net_pkt_write+0x10a>

0001e438 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1e438:	b170      	cbz	r0, 1e458 <net_pkt_get_info+0x20>
{
   1e43a:	b410      	push	{r4}
   1e43c:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1e43e:	480c      	ldr	r0, [pc, #48]	; (1e470 <net_pkt_get_info+0x38>)
   1e440:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1e442:	b109      	cbz	r1, 1e448 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1e444:	480b      	ldr	r0, [pc, #44]	; (1e474 <net_pkt_get_info+0x3c>)
   1e446:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1e448:	b10a      	cbz	r2, 1e44e <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1e44a:	490b      	ldr	r1, [pc, #44]	; (1e478 <net_pkt_get_info+0x40>)
   1e44c:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1e44e:	b10b      	cbz	r3, 1e454 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1e450:	4a0a      	ldr	r2, [pc, #40]	; (1e47c <net_pkt_get_info+0x44>)
   1e452:	601a      	str	r2, [r3, #0]
	}
}
   1e454:	bc10      	pop	{r4}
   1e456:	4770      	bx	lr
	if (tx) {
   1e458:	b109      	cbz	r1, 1e45e <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1e45a:	4806      	ldr	r0, [pc, #24]	; (1e474 <net_pkt_get_info+0x3c>)
   1e45c:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1e45e:	b10a      	cbz	r2, 1e464 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1e460:	4905      	ldr	r1, [pc, #20]	; (1e478 <net_pkt_get_info+0x40>)
   1e462:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1e464:	2b00      	cmp	r3, #0
   1e466:	d0f6      	beq.n	1e456 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1e468:	4a04      	ldr	r2, [pc, #16]	; (1e47c <net_pkt_get_info+0x44>)
   1e46a:	601a      	str	r2, [r3, #0]
   1e46c:	4770      	bx	lr
   1e46e:	bf00      	nop
   1e470:	2000d58c 	.word	0x2000d58c
   1e474:	2000d5a8 	.word	0x2000d5a8
   1e478:	2000d70c 	.word	0x2000d70c
   1e47c:	2000d72c 	.word	0x2000d72c

0001e480 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1e480:	b500      	push	{lr}
   1e482:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1e484:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1e486:	2300      	movs	r3, #0
   1e488:	9300      	str	r3, [sp, #0]
   1e48a:	f7ff fea8 	bl	1e1de <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1e48e:	b003      	add	sp, #12
   1e490:	f85d fb04 	ldr.w	pc, [sp], #4

0001e494 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1e494:	b500      	push	{lr}
   1e496:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1e498:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1e49c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1e4a0:	f10d 0206 	add.w	r2, sp, #6
   1e4a4:	4419      	add	r1, r3
   1e4a6:	f7ff ffeb 	bl	1e480 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1e4aa:	b130      	cbz	r0, 1e4ba <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1e4ac:	6880      	ldr	r0, [r0, #8]
   1e4ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e4b2:	4418      	add	r0, r3
}
   1e4b4:	b003      	add	sp, #12
   1e4b6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1e4ba:	2000      	movs	r0, #0
   1e4bc:	e7fa      	b.n	1e4b4 <net_pkt_icmp_data+0x20>

0001e4be <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1e4be:	b500      	push	{lr}
   1e4c0:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1e4c2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1e4c6:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1e4ca:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1e4cc:	4419      	add	r1, r3
   1e4ce:	f10d 0206 	add.w	r2, sp, #6
   1e4d2:	b289      	uxth	r1, r1
   1e4d4:	f7ff ffd4 	bl	1e480 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1e4d8:	b130      	cbz	r0, 1e4e8 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1e4da:	6880      	ldr	r0, [r0, #8]
   1e4dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e4e0:	4418      	add	r0, r3
}
   1e4e2:	b003      	add	sp, #12
   1e4e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1e4e8:	2000      	movs	r0, #0
   1e4ea:	e7fa      	b.n	1e4e2 <net_pkt_icmp_opt_data+0x24>

0001e4ec <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1e4ec:	b500      	push	{lr}
   1e4ee:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1e4f0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1e4f4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1e4f8:	f10d 0206 	add.w	r2, sp, #6
   1e4fc:	4419      	add	r1, r3
   1e4fe:	f7ff ffbf 	bl	1e480 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1e502:	b130      	cbz	r0, 1e512 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1e504:	6880      	ldr	r0, [r0, #8]
   1e506:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e50a:	4418      	add	r0, r3
}
   1e50c:	b003      	add	sp, #12
   1e50e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1e512:	2000      	movs	r0, #0
   1e514:	e7fa      	b.n	1e50c <net_pkt_udp_data+0x20>

0001e516 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1e516:	b500      	push	{lr}
   1e518:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1e51a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1e51e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1e522:	f10d 0206 	add.w	r2, sp, #6
   1e526:	4419      	add	r1, r3
   1e528:	f7ff ffaa 	bl	1e480 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1e52c:	b130      	cbz	r0, 1e53c <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1e52e:	6880      	ldr	r0, [r0, #8]
   1e530:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e534:	4418      	add	r0, r3
}
   1e536:	b003      	add	sp, #12
   1e538:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1e53c:	2000      	movs	r0, #0
   1e53e:	e7fa      	b.n	1e536 <net_pkt_tcp_data+0x20>

0001e540 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1e540:	b570      	push	{r4, r5, r6, lr}
   1e542:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1e544:	4605      	mov	r5, r0
   1e546:	2800      	cmp	r0, #0
   1e548:	d065      	beq.n	1e616 <net_pkt_clone+0xd6>
   1e54a:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1e54c:	460a      	mov	r2, r1
   1e54e:	2100      	movs	r1, #0
   1e550:	6840      	ldr	r0, [r0, #4]
   1e552:	f7ff fbad 	bl	1dcb0 <net_pkt_get_reserve>
	if (!clone) {
   1e556:	4604      	mov	r4, r0
   1e558:	2800      	cmp	r0, #0
   1e55a:	d054      	beq.n	1e606 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1e55c:	2300      	movs	r3, #0
   1e55e:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1e560:	68ab      	ldr	r3, [r5, #8]
   1e562:	b173      	cbz	r3, 1e582 <net_pkt_clone+0x42>
   1e564:	2100      	movs	r1, #0
   1e566:	e002      	b.n	1e56e <net_pkt_clone+0x2e>
		bytes += buf->len;
   1e568:	899a      	ldrh	r2, [r3, #12]
   1e56a:	4411      	add	r1, r2
		buf = buf->frags;
   1e56c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1e56e:	2b00      	cmp	r3, #0
   1e570:	d1fa      	bne.n	1e568 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1e572:	4633      	mov	r3, r6
   1e574:	2200      	movs	r2, #0
   1e576:	4628      	mov	r0, r5
   1e578:	f7ff fcf4 	bl	1df64 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1e57c:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1e57e:	2800      	cmp	r0, #0
   1e580:	d044      	beq.n	1e60c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1e582:	68eb      	ldr	r3, [r5, #12]
   1e584:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1e586:	692b      	ldr	r3, [r5, #16]
   1e588:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1e58a:	696b      	ldr	r3, [r5, #20]
   1e58c:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1e58e:	68a3      	ldr	r3, [r4, #8]
   1e590:	b1db      	cbz	r3, 1e5ca <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1e592:	f10d 0206 	add.w	r2, sp, #6
   1e596:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1e59a:	4620      	mov	r0, r4
   1e59c:	f7ff ff70 	bl	1e480 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1e5a0:	6883      	ldr	r3, [r0, #8]
   1e5a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e5a6:	4413      	add	r3, r2
	pkt->appdata = data;
   1e5a8:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1e5aa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1e5ac:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1e5ae:	2208      	movs	r2, #8
   1e5b0:	f105 0120 	add.w	r1, r5, #32
   1e5b4:	f104 0020 	add.w	r0, r4, #32
   1e5b8:	f7e1 fe82 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1e5bc:	2208      	movs	r2, #8
   1e5be:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1e5c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e5c6:	f7e1 fe7b 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1e5ca:	2300      	movs	r3, #0
   1e5cc:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1e5ce:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1e5d2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1e5d6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1e5da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1e5de:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1e5e2:	f363 02c6 	bfi	r2, r3, #3, #4
   1e5e6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1e5ea:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1e5ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1e5f2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1e5f6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1e5fa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1e5fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1e602:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1e604:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1e606:	4620      	mov	r0, r4
   1e608:	b002      	add	sp, #8
   1e60a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1e60c:	4620      	mov	r0, r4
   1e60e:	f7ff fc68 	bl	1dee2 <net_pkt_unref>
			return NULL;
   1e612:	2400      	movs	r4, #0
   1e614:	e7f7      	b.n	1e606 <net_pkt_clone+0xc6>
		return NULL;
   1e616:	4604      	mov	r4, r0
   1e618:	e7f5      	b.n	1e606 <net_pkt_clone+0xc6>

0001e61a <net_pkt_init>:

void net_pkt_init(void)
{
   1e61a:	4770      	bx	lr

0001e61c <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1e61c:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1e61e:	2a00      	cmp	r2, #0
   1e620:	db03      	blt.n	1e62a <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1e622:	4606      	mov	r6, r0
   1e624:	2409      	movs	r4, #9
   1e626:	4b0e      	ldr	r3, [pc, #56]	; (1e660 <net_value_to_udec+0x44>)
   1e628:	e00a      	b.n	1e640 <net_value_to_udec+0x24>
		precision = 1;
   1e62a:	2201      	movs	r2, #1
   1e62c:	e7f9      	b.n	1e622 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1e62e:	3530      	adds	r5, #48	; 0x30
   1e630:	7035      	strb	r5, [r6, #0]
			precision = i;
   1e632:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1e634:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1e636:	3c01      	subs	r4, #1
   1e638:	4d0a      	ldr	r5, [pc, #40]	; (1e664 <net_value_to_udec+0x48>)
   1e63a:	fba5 5303 	umull	r5, r3, r5, r3
   1e63e:	08db      	lsrs	r3, r3, #3
   1e640:	2c00      	cmp	r4, #0
   1e642:	db08      	blt.n	1e656 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1e644:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1e648:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1e64c:	42a2      	cmp	r2, r4
   1e64e:	dcee      	bgt.n	1e62e <net_value_to_udec+0x12>
   1e650:	2d00      	cmp	r5, #0
   1e652:	d0f0      	beq.n	1e636 <net_value_to_udec+0x1a>
   1e654:	e7eb      	b.n	1e62e <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1e656:	2300      	movs	r3, #0
   1e658:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1e65a:	1a30      	subs	r0, r6, r0
   1e65c:	bc70      	pop	{r4, r5, r6}
   1e65e:	4770      	bx	lr
   1e660:	3b9aca00 	.word	0x3b9aca00
   1e664:	cccccccd 	.word	0xcccccccd

0001e668 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1e668:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1e66a:	3a01      	subs	r2, #1
   1e66c:	440a      	add	r2, r1

	while (ptr < end) {
   1e66e:	e000      	b.n	1e672 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1e670:	3102      	adds	r1, #2
	while (ptr < end) {
   1e672:	4291      	cmp	r1, r2
   1e674:	d20b      	bcs.n	1e68e <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1e676:	780c      	ldrb	r4, [r1, #0]
   1e678:	784b      	ldrb	r3, [r1, #1]
   1e67a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1e67e:	b29b      	uxth	r3, r3
		sum += tmp;
   1e680:	4418      	add	r0, r3
   1e682:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1e684:	4283      	cmp	r3, r0
   1e686:	d9f3      	bls.n	1e670 <calc_chksum+0x8>
			sum++;
   1e688:	3001      	adds	r0, #1
   1e68a:	b280      	uxth	r0, r0
   1e68c:	e7f0      	b.n	1e670 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1e68e:	d001      	beq.n	1e694 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1e690:	bc10      	pop	{r4}
   1e692:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1e694:	780b      	ldrb	r3, [r1, #0]
   1e696:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1e698:	4418      	add	r0, r3
   1e69a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1e69c:	4283      	cmp	r3, r0
   1e69e:	d9f7      	bls.n	1e690 <calc_chksum+0x28>
			sum++;
   1e6a0:	3001      	adds	r0, #1
   1e6a2:	b280      	uxth	r0, r0
   1e6a4:	e7f4      	b.n	1e690 <calc_chksum+0x28>

0001e6a6 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1e6a6:	b530      	push	{r4, r5, lr}
   1e6a8:	b083      	sub	sp, #12
   1e6aa:	4604      	mov	r4, r0
   1e6ac:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1e6ae:	220a      	movs	r2, #10
   1e6b0:	a901      	add	r1, sp, #4
   1e6b2:	f00c ff99 	bl	2b5e8 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1e6b6:	9b01      	ldr	r3, [sp, #4]
   1e6b8:	429c      	cmp	r4, r3
   1e6ba:	d008      	beq.n	1e6ce <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1e6bc:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1e6be:	b16a      	cbz	r2, 1e6dc <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1e6c0:	781b      	ldrb	r3, [r3, #0]
   1e6c2:	b973      	cbnz	r3, 1e6e2 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1e6c4:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1e6c6:	4298      	cmp	r0, r3
   1e6c8:	d005      	beq.n	1e6d6 <convert_port+0x30>
		return false;
   1e6ca:	2000      	movs	r0, #0
   1e6cc:	e007      	b.n	1e6de <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1e6ce:	2800      	cmp	r0, #0
   1e6d0:	d1f4      	bne.n	1e6bc <convert_port+0x16>
		return false;
   1e6d2:	2000      	movs	r0, #0
   1e6d4:	e003      	b.n	1e6de <convert_port+0x38>
	}

	*port = tmp;
   1e6d6:	802b      	strh	r3, [r5, #0]

	return true;
   1e6d8:	2001      	movs	r0, #1
   1e6da:	e000      	b.n	1e6de <convert_port+0x38>
		return false;
   1e6dc:	2000      	movs	r0, #0
}
   1e6de:	b003      	add	sp, #12
   1e6e0:	bd30      	pop	{r4, r5, pc}
		return false;
   1e6e2:	2000      	movs	r0, #0
   1e6e4:	e7fb      	b.n	1e6de <convert_port+0x38>

0001e6e6 <net_byte_to_hex>:
{
   1e6e6:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e6e8:	090c      	lsrs	r4, r1, #4
   1e6ea:	2500      	movs	r5, #0
   1e6ec:	e00a      	b.n	1e704 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1e6ee:	b96b      	cbnz	r3, 1e70c <net_byte_to_hex+0x26>
   1e6f0:	b12c      	cbz	r4, 1e6fe <net_byte_to_hex+0x18>
   1e6f2:	e00b      	b.n	1e70c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1e6f4:	4414      	add	r4, r2
   1e6f6:	b2e4      	uxtb	r4, r4
   1e6f8:	3c0a      	subs	r4, #10
   1e6fa:	7004      	strb	r4, [r0, #0]
   1e6fc:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e6fe:	3501      	adds	r5, #1
   1e700:	f001 040f 	and.w	r4, r1, #15
   1e704:	2d01      	cmp	r5, #1
   1e706:	dc07      	bgt.n	1e718 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1e708:	2d00      	cmp	r5, #0
   1e70a:	d0f0      	beq.n	1e6ee <net_byte_to_hex+0x8>
		if (val < 10) {
   1e70c:	2c09      	cmp	r4, #9
   1e70e:	dcf1      	bgt.n	1e6f4 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1e710:	3430      	adds	r4, #48	; 0x30
   1e712:	7004      	strb	r4, [r0, #0]
   1e714:	3001      	adds	r0, #1
   1e716:	e7f2      	b.n	1e6fe <net_byte_to_hex+0x18>
	*ptr = '\0';
   1e718:	2300      	movs	r3, #0
   1e71a:	7003      	strb	r3, [r0, #0]
}
   1e71c:	bc30      	pop	{r4, r5}
   1e71e:	4770      	bx	lr

0001e720 <net_sprint_ll_addr_buf>:
{
   1e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e724:	4607      	mov	r7, r0
   1e726:	460e      	mov	r6, r1
   1e728:	4690      	mov	r8, r2
	switch (ll_len) {
   1e72a:	2906      	cmp	r1, #6
   1e72c:	d002      	beq.n	1e734 <net_sprint_ll_addr_buf+0x14>
   1e72e:	2908      	cmp	r1, #8
   1e730:	d000      	beq.n	1e734 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1e732:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e734:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1e736:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e738:	2400      	movs	r4, #0
   1e73a:	e00c      	b.n	1e756 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1e73c:	2301      	movs	r3, #1
   1e73e:	2241      	movs	r2, #65	; 0x41
   1e740:	5d39      	ldrb	r1, [r7, r4]
   1e742:	f7ff ffd0 	bl	1e6e6 <net_byte_to_hex>
   1e746:	4602      	mov	r2, r0
		*ptr++ = ':';
   1e748:	3001      	adds	r0, #1
   1e74a:	233a      	movs	r3, #58	; 0x3a
   1e74c:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1e74e:	3d03      	subs	r5, #3
   1e750:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e752:	3401      	adds	r4, #1
   1e754:	b2e4      	uxtb	r4, r4
   1e756:	42b4      	cmp	r4, r6
   1e758:	d201      	bcs.n	1e75e <net_sprint_ll_addr_buf+0x3e>
   1e75a:	2d00      	cmp	r5, #0
   1e75c:	d1ee      	bne.n	1e73c <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1e75e:	4540      	cmp	r0, r8
   1e760:	d005      	beq.n	1e76e <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1e762:	2300      	movs	r3, #0
   1e764:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1e768:	4640      	mov	r0, r8
   1e76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1e76e:	2000      	movs	r0, #0
}
   1e770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e774 <net_addr_ntop>:
{
   1e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e778:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1e77a:	2300      	movs	r3, #0
   1e77c:	9304      	str	r3, [sp, #16]
   1e77e:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1e780:	280a      	cmp	r0, #10
   1e782:	d011      	beq.n	1e7a8 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1e784:	2802      	cmp	r0, #2
   1e786:	f040 80c8 	bne.w	1e91a <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1e78a:	9101      	str	r1, [sp, #4]
		len = 4;
   1e78c:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1e790:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1e794:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1e798:	f04f 0a01 	mov.w	sl, #1
   1e79c:	9202      	str	r2, [sp, #8]
   1e79e:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1e7a0:	4616      	mov	r6, r2
	bool needcolon = false;
   1e7a2:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1e7a4:	462c      	mov	r4, r5
   1e7a6:	e072      	b.n	1e88e <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1e7a8:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1e7aa:	461d      	mov	r5, r3
   1e7ac:	e001      	b.n	1e7b2 <net_addr_ntop+0x3e>
   1e7ae:	3501      	adds	r5, #1
   1e7b0:	b2ed      	uxtb	r5, r5
   1e7b2:	2d07      	cmp	r5, #7
   1e7b4:	d810      	bhi.n	1e7d8 <net_addr_ntop+0x64>
   1e7b6:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1e7b8:	2b07      	cmp	r3, #7
   1e7ba:	d8f8      	bhi.n	1e7ae <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1e7bc:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1e7c0:	2900      	cmp	r1, #0
   1e7c2:	d1f4      	bne.n	1e7ae <net_addr_ntop+0x3a>
				zeros[i]++;
   1e7c4:	a906      	add	r1, sp, #24
   1e7c6:	194c      	adds	r4, r1, r5
   1e7c8:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e7cc:	3101      	adds	r1, #1
   1e7ce:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1e7d2:	3301      	adds	r3, #1
   1e7d4:	b2db      	uxtb	r3, r3
   1e7d6:	e7ef      	b.n	1e7b8 <net_addr_ntop+0x44>
   1e7d8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e7dc:	f04f 0a01 	mov.w	sl, #1
   1e7e0:	2300      	movs	r3, #0
   1e7e2:	e001      	b.n	1e7e8 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1e7e4:	3301      	adds	r3, #1
   1e7e6:	b2db      	uxtb	r3, r3
   1e7e8:	2b07      	cmp	r3, #7
   1e7ea:	d809      	bhi.n	1e800 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1e7ec:	a906      	add	r1, sp, #24
   1e7ee:	4419      	add	r1, r3
   1e7f0:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1e7f4:	458a      	cmp	sl, r1
   1e7f6:	d2f5      	bcs.n	1e7e4 <net_addr_ntop+0x70>
				pos = i;
   1e7f8:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1e7fc:	468a      	mov	sl, r1
   1e7fe:	e7f1      	b.n	1e7e4 <net_addr_ntop+0x70>
		if (longest == 1) {
   1e800:	f1ba 0f01 	cmp.w	sl, #1
   1e804:	d004      	beq.n	1e810 <net_addr_ntop+0x9c>
		len = 8;
   1e806:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e80a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1e80e:	e7c5      	b.n	1e79c <net_addr_ntop+0x28>
		len = 8;
   1e810:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e814:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1e818:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e81c:	e7be      	b.n	1e79c <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1e81e:	9a01      	ldr	r2, [sp, #4]
   1e820:	5cd1      	ldrb	r1, [r2, r3]
   1e822:	b28b      	uxth	r3, r1
			if (value == 0) {
   1e824:	b93b      	cbnz	r3, 1e836 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1e826:	4633      	mov	r3, r6
   1e828:	2230      	movs	r2, #48	; 0x30
   1e82a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1e82e:	f886 b001 	strb.w	fp, [r6, #1]
   1e832:	461e      	mov	r6, r3
				continue;
   1e834:	e029      	b.n	1e88a <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1e836:	2200      	movs	r2, #0
   1e838:	4630      	mov	r0, r6
   1e83a:	f7ff feef 	bl	1e61c <net_value_to_udec>
			ptr += l;
   1e83e:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1e842:	1c46      	adds	r6, r0, #1
   1e844:	f880 b000 	strb.w	fp, [r0]
			continue;
   1e848:	e01f      	b.n	1e88a <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1e84a:	b905      	cbnz	r5, 1e84e <net_addr_ntop+0xda>
   1e84c:	b95c      	cbnz	r4, 1e866 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1e84e:	1c73      	adds	r3, r6, #1
   1e850:	223a      	movs	r2, #58	; 0x3a
   1e852:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1e854:	1c5e      	adds	r6, r3, #1
   1e856:	223a      	movs	r2, #58	; 0x3a
   1e858:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1e85a:	4454      	add	r4, sl
   1e85c:	b2e4      	uxtb	r4, r4
   1e85e:	3c01      	subs	r4, #1
   1e860:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1e862:	2500      	movs	r5, #0
			continue;
   1e864:	e011      	b.n	1e88a <net_addr_ntop+0x116>
   1e866:	4633      	mov	r3, r6
   1e868:	e7f4      	b.n	1e854 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1e86a:	2300      	movs	r3, #0
   1e86c:	2261      	movs	r2, #97	; 0x61
   1e86e:	4630      	mov	r0, r6
   1e870:	f7ff ff39 	bl	1e6e6 <net_byte_to_hex>
   1e874:	e002      	b.n	1e87c <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1e876:	1c70      	adds	r0, r6, #1
   1e878:	3157      	adds	r1, #87	; 0x57
   1e87a:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e87c:	2301      	movs	r3, #1
   1e87e:	2261      	movs	r2, #97	; 0x61
   1e880:	4629      	mov	r1, r5
   1e882:	f7ff ff30 	bl	1e6e6 <net_byte_to_hex>
   1e886:	4606      	mov	r6, r0
		needcolon = true;
   1e888:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1e88a:	3401      	adds	r4, #1
   1e88c:	b2e4      	uxtb	r4, r4
   1e88e:	4623      	mov	r3, r4
   1e890:	45a0      	cmp	r8, r4
   1e892:	dd31      	ble.n	1e8f8 <net_addr_ntop+0x184>
		if (len == 4) {
   1e894:	f1b8 0f04 	cmp.w	r8, #4
   1e898:	d0c1      	beq.n	1e81e <net_addr_ntop+0xaa>
		if (i == pos) {
   1e89a:	454b      	cmp	r3, r9
   1e89c:	d0d5      	beq.n	1e84a <net_addr_ntop+0xd6>
		if (needcolon) {
   1e89e:	b115      	cbz	r5, 1e8a6 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1e8a0:	233a      	movs	r3, #58	; 0x3a
   1e8a2:	7033      	strb	r3, [r6, #0]
   1e8a4:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e8a6:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1e8aa:	021d      	lsls	r5, r3, #8
   1e8ac:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e8b0:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1e8b2:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1e8b6:	b2ed      	uxtb	r5, r5
		if (bh) {
   1e8b8:	b139      	cbz	r1, 1e8ca <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1e8ba:	290f      	cmp	r1, #15
   1e8bc:	d8d5      	bhi.n	1e86a <net_addr_ntop+0xf6>
				if (bh < 10) {
   1e8be:	2909      	cmp	r1, #9
   1e8c0:	d8d9      	bhi.n	1e876 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e8c2:	1c70      	adds	r0, r6, #1
   1e8c4:	3130      	adds	r1, #48	; 0x30
   1e8c6:	7031      	strb	r1, [r6, #0]
   1e8c8:	e7d8      	b.n	1e87c <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e8ca:	2d0f      	cmp	r5, #15
   1e8cc:	d806      	bhi.n	1e8dc <net_addr_ntop+0x168>
			if (bl < 10) {
   1e8ce:	2d09      	cmp	r5, #9
   1e8d0:	d80d      	bhi.n	1e8ee <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e8d2:	3530      	adds	r5, #48	; 0x30
   1e8d4:	7035      	strb	r5, [r6, #0]
   1e8d6:	3601      	adds	r6, #1
		needcolon = true;
   1e8d8:	2501      	movs	r5, #1
   1e8da:	e7d6      	b.n	1e88a <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e8dc:	2300      	movs	r3, #0
   1e8de:	2261      	movs	r2, #97	; 0x61
   1e8e0:	4629      	mov	r1, r5
   1e8e2:	4630      	mov	r0, r6
   1e8e4:	f7ff feff 	bl	1e6e6 <net_byte_to_hex>
   1e8e8:	4606      	mov	r6, r0
		needcolon = true;
   1e8ea:	2501      	movs	r5, #1
   1e8ec:	e7cd      	b.n	1e88a <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e8ee:	3557      	adds	r5, #87	; 0x57
   1e8f0:	7035      	strb	r5, [r6, #0]
   1e8f2:	3601      	adds	r6, #1
		needcolon = true;
   1e8f4:	2501      	movs	r5, #1
   1e8f6:	e7c8      	b.n	1e88a <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e8f8:	9b02      	ldr	r3, [sp, #8]
   1e8fa:	429e      	cmp	r6, r3
   1e8fc:	d00f      	beq.n	1e91e <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e8fe:	9b03      	ldr	r3, [sp, #12]
   1e900:	2b02      	cmp	r3, #2
   1e902:	d005      	beq.n	1e910 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e904:	2300      	movs	r3, #0
   1e906:	7033      	strb	r3, [r6, #0]
	return dst;
   1e908:	9802      	ldr	r0, [sp, #8]
}
   1e90a:	b007      	add	sp, #28
   1e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e910:	2300      	movs	r3, #0
   1e912:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e916:	9802      	ldr	r0, [sp, #8]
   1e918:	e7f7      	b.n	1e90a <net_addr_ntop+0x196>
		return NULL;
   1e91a:	2000      	movs	r0, #0
   1e91c:	e7f5      	b.n	1e90a <net_addr_ntop+0x196>
		return NULL;
   1e91e:	2000      	movs	r0, #0
   1e920:	e7f3      	b.n	1e90a <net_addr_ntop+0x196>

0001e922 <net_addr_pton>:
{
   1e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e926:	b082      	sub	sp, #8
   1e928:	460d      	mov	r5, r1
   1e92a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e92c:	2802      	cmp	r0, #2
   1e92e:	d010      	beq.n	1e952 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e930:	280a      	cmp	r0, #10
   1e932:	f040 80c6 	bne.w	1eac2 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e936:	212e      	movs	r1, #46	; 0x2e
   1e938:	4628      	mov	r0, r5
   1e93a:	f00c f93b 	bl	2abb4 <strchr>
   1e93e:	b378      	cbz	r0, 1e9a0 <net_addr_pton+0x7e>
   1e940:	2706      	movs	r7, #6
		if (*src == ':') {
   1e942:	782b      	ldrb	r3, [r5, #0]
   1e944:	2b3a      	cmp	r3, #58	; 0x3a
   1e946:	d02d      	beq.n	1e9a4 <net_addr_pton+0x82>
		len = strlen(src);
   1e948:	4628      	mov	r0, r5
   1e94a:	f7e1 fed9 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e94e:	2300      	movs	r3, #0
   1e950:	e02b      	b.n	1e9aa <net_addr_pton+0x88>
		len = strlen(src);
   1e952:	4608      	mov	r0, r1
   1e954:	f7e1 fed4 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e958:	2300      	movs	r3, #0
   1e95a:	e000      	b.n	1e95e <net_addr_pton+0x3c>
   1e95c:	3301      	adds	r3, #1
   1e95e:	4283      	cmp	r3, r0
   1e960:	d20a      	bcs.n	1e978 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e962:	5ce9      	ldrb	r1, [r5, r3]
   1e964:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e968:	b2d2      	uxtb	r2, r2
   1e96a:	2a09      	cmp	r2, #9
   1e96c:	d9f6      	bls.n	1e95c <net_addr_pton+0x3a>
   1e96e:	292e      	cmp	r1, #46	; 0x2e
   1e970:	d0f4      	beq.n	1e95c <net_addr_pton+0x3a>
				return -EINVAL;
   1e972:	f06f 0015 	mvn.w	r0, #21
   1e976:	e0a9      	b.n	1eacc <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e978:	2204      	movs	r2, #4
   1e97a:	2100      	movs	r1, #0
   1e97c:	4630      	mov	r0, r6
   1e97e:	f00c f85f 	bl	2aa40 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e982:	2400      	movs	r4, #0
   1e984:	e008      	b.n	1e998 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e986:	220a      	movs	r2, #10
   1e988:	a901      	add	r1, sp, #4
   1e98a:	4628      	mov	r0, r5
   1e98c:	f00c fd72 	bl	2b474 <strtol>
   1e990:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e992:	3401      	adds	r4, #1
			src = ++endptr;
   1e994:	9d01      	ldr	r5, [sp, #4]
   1e996:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e998:	2c03      	cmp	r4, #3
   1e99a:	d9f4      	bls.n	1e986 <net_addr_pton+0x64>
	return 0;
   1e99c:	2000      	movs	r0, #0
   1e99e:	e095      	b.n	1eacc <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e9a0:	2708      	movs	r7, #8
   1e9a2:	e7ce      	b.n	1e942 <net_addr_pton+0x20>
			src++;
   1e9a4:	3501      	adds	r5, #1
   1e9a6:	e7cf      	b.n	1e948 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e9a8:	3301      	adds	r3, #1
   1e9aa:	4283      	cmp	r3, r0
   1e9ac:	da16      	bge.n	1e9dc <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e9ae:	5ce9      	ldrb	r1, [r5, r3]
   1e9b0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e9b4:	b2d2      	uxtb	r2, r2
   1e9b6:	2a09      	cmp	r2, #9
   1e9b8:	d9f6      	bls.n	1e9a8 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e9ba:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e9be:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e9c0:	2a05      	cmp	r2, #5
   1e9c2:	d9f1      	bls.n	1e9a8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e9c4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e9c8:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e9ca:	2a05      	cmp	r2, #5
   1e9cc:	d9ec      	bls.n	1e9a8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e9ce:	292e      	cmp	r1, #46	; 0x2e
   1e9d0:	d0ea      	beq.n	1e9a8 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e9d2:	293a      	cmp	r1, #58	; 0x3a
   1e9d4:	d0e8      	beq.n	1e9a8 <net_addr_pton+0x86>
				return -EINVAL;
   1e9d6:	f06f 0015 	mvn.w	r0, #21
   1e9da:	e077      	b.n	1eacc <net_addr_pton+0x1aa>
   1e9dc:	2400      	movs	r4, #0
   1e9de:	e001      	b.n	1e9e4 <net_addr_pton+0xc2>
				src++;
   1e9e0:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e9e2:	3401      	adds	r4, #1
   1e9e4:	42bc      	cmp	r4, r7
   1e9e6:	da3c      	bge.n	1ea62 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e9e8:	2d00      	cmp	r5, #0
   1e9ea:	d06d      	beq.n	1eac8 <net_addr_pton+0x1a6>
   1e9ec:	782b      	ldrb	r3, [r5, #0]
   1e9ee:	2b00      	cmp	r3, #0
   1e9f0:	d06f      	beq.n	1ead2 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e9f2:	2b3a      	cmp	r3, #58	; 0x3a
   1e9f4:	d023      	beq.n	1ea3e <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e9f6:	2210      	movs	r2, #16
   1e9f8:	2100      	movs	r1, #0
   1e9fa:	4628      	mov	r0, r5
   1e9fc:	f00c fd3a 	bl	2b474 <strtol>
   1ea00:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1ea04:	2210      	movs	r2, #16
   1ea06:	2100      	movs	r1, #0
   1ea08:	4628      	mov	r0, r5
   1ea0a:	f00c fd33 	bl	2b474 <strtol>
   1ea0e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1ea12:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1ea16:	213a      	movs	r1, #58	; 0x3a
   1ea18:	4628      	mov	r0, r5
   1ea1a:	f00c f8cb 	bl	2abb4 <strchr>
				if (!src && i < expected_groups - 1) {
   1ea1e:	4605      	mov	r5, r0
   1ea20:	2800      	cmp	r0, #0
   1ea22:	d1dd      	bne.n	1e9e0 <net_addr_pton+0xbe>
   1ea24:	1e7b      	subs	r3, r7, #1
   1ea26:	429c      	cmp	r4, r3
   1ea28:	dada      	bge.n	1e9e0 <net_addr_pton+0xbe>
					return -EINVAL;
   1ea2a:	f06f 0015 	mvn.w	r0, #21
   1ea2e:	e04d      	b.n	1eacc <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1ea30:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1ea34:	2300      	movs	r3, #0
   1ea36:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1ea3a:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1ea3c:	3401      	adds	r4, #1
   1ea3e:	42bc      	cmp	r4, r7
   1ea40:	dbf6      	blt.n	1ea30 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1ea42:	213a      	movs	r1, #58	; 0x3a
   1ea44:	4628      	mov	r0, r5
   1ea46:	f00c fa0b 	bl	2ae60 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1ea4a:	4285      	cmp	r5, r0
   1ea4c:	d003      	beq.n	1ea56 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1ea4e:	2f06      	cmp	r7, #6
   1ea50:	d00b      	beq.n	1ea6a <net_addr_pton+0x148>
			i = expected_groups - 1;
   1ea52:	1e7c      	subs	r4, r7, #1
   1ea54:	e00f      	b.n	1ea76 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1ea56:	2f06      	cmp	r7, #6
   1ea58:	d002      	beq.n	1ea60 <net_addr_pton+0x13e>
   1ea5a:	786b      	ldrb	r3, [r5, #1]
   1ea5c:	2b00      	cmp	r3, #0
   1ea5e:	d1f6      	bne.n	1ea4e <net_addr_pton+0x12c>
				src++;
   1ea60:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1ea62:	2f06      	cmp	r7, #6
   1ea64:	d029      	beq.n	1eaba <net_addr_pton+0x198>
	return 0;
   1ea66:	2000      	movs	r0, #0
   1ea68:	e030      	b.n	1eacc <net_addr_pton+0x1aa>
				tmp--;
   1ea6a:	3801      	subs	r0, #1
   1ea6c:	e7f1      	b.n	1ea52 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1ea6e:	1e43      	subs	r3, r0, #1
   1ea70:	4285      	cmp	r5, r0
   1ea72:	d005      	beq.n	1ea80 <net_addr_pton+0x15e>
   1ea74:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1ea76:	7803      	ldrb	r3, [r0, #0]
   1ea78:	2b3a      	cmp	r3, #58	; 0x3a
   1ea7a:	d1f8      	bne.n	1ea6e <net_addr_pton+0x14c>
					i--;
   1ea7c:	3c01      	subs	r4, #1
   1ea7e:	e7f6      	b.n	1ea6e <net_addr_pton+0x14c>
			src++;
   1ea80:	3501      	adds	r5, #1
   1ea82:	e7ae      	b.n	1e9e2 <net_addr_pton+0xc0>
				src++;
   1ea84:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1ea86:	3401      	adds	r4, #1
   1ea88:	2c03      	cmp	r4, #3
   1ea8a:	dc18      	bgt.n	1eabe <net_addr_pton+0x19c>
				if (!src || !*src) {
   1ea8c:	b325      	cbz	r5, 1ead8 <net_addr_pton+0x1b6>
   1ea8e:	782b      	ldrb	r3, [r5, #0]
   1ea90:	b32b      	cbz	r3, 1eade <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1ea92:	f104 070c 	add.w	r7, r4, #12
   1ea96:	220a      	movs	r2, #10
   1ea98:	2100      	movs	r1, #0
   1ea9a:	4628      	mov	r0, r5
   1ea9c:	f00c fcea 	bl	2b474 <strtol>
   1eaa0:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1eaa2:	212e      	movs	r1, #46	; 0x2e
   1eaa4:	4628      	mov	r0, r5
   1eaa6:	f00c f885 	bl	2abb4 <strchr>
				if (!src && i < 3) {
   1eaaa:	4605      	mov	r5, r0
   1eaac:	2800      	cmp	r0, #0
   1eaae:	d1e9      	bne.n	1ea84 <net_addr_pton+0x162>
   1eab0:	2c02      	cmp	r4, #2
   1eab2:	dce7      	bgt.n	1ea84 <net_addr_pton+0x162>
					return -EINVAL;
   1eab4:	f06f 0015 	mvn.w	r0, #21
   1eab8:	e008      	b.n	1eacc <net_addr_pton+0x1aa>
   1eaba:	2400      	movs	r4, #0
   1eabc:	e7e4      	b.n	1ea88 <net_addr_pton+0x166>
	return 0;
   1eabe:	2000      	movs	r0, #0
   1eac0:	e004      	b.n	1eacc <net_addr_pton+0x1aa>
		return -EINVAL;
   1eac2:	f06f 0015 	mvn.w	r0, #21
   1eac6:	e001      	b.n	1eacc <net_addr_pton+0x1aa>
				return -EINVAL;
   1eac8:	f06f 0015 	mvn.w	r0, #21
}
   1eacc:	b002      	add	sp, #8
   1eace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1ead2:	f06f 0015 	mvn.w	r0, #21
   1ead6:	e7f9      	b.n	1eacc <net_addr_pton+0x1aa>
					return -EINVAL;
   1ead8:	f06f 0015 	mvn.w	r0, #21
   1eadc:	e7f6      	b.n	1eacc <net_addr_pton+0x1aa>
   1eade:	f06f 0015 	mvn.w	r0, #21
   1eae2:	e7f3      	b.n	1eacc <net_addr_pton+0x1aa>

0001eae4 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1eae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eae8:	b08f      	sub	sp, #60	; 0x3c
   1eaea:	4605      	mov	r5, r0
   1eaec:	4688      	mov	r8, r1
   1eaee:	4617      	mov	r7, r2
   1eaf0:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1eaf2:	460c      	mov	r4, r1
   1eaf4:	292e      	cmp	r1, #46	; 0x2e
   1eaf6:	bf28      	it	cs
   1eaf8:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1eafa:	2300      	movs	r3, #0
   1eafc:	42a3      	cmp	r3, r4
   1eafe:	da04      	bge.n	1eb0a <parse_ipv6+0x26>
		if (!str[i]) {
   1eb00:	5cea      	ldrb	r2, [r5, r3]
   1eb02:	b10a      	cbz	r2, 1eb08 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1eb04:	3301      	adds	r3, #1
   1eb06:	e7f9      	b.n	1eafc <parse_ipv6+0x18>
			len = i;
   1eb08:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1eb0a:	b18e      	cbz	r6, 1eb30 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1eb0c:	4622      	mov	r2, r4
   1eb0e:	215d      	movs	r1, #93	; 0x5d
   1eb10:	4628      	mov	r0, r5
   1eb12:	f7e1 fb85 	bl	220 <memchr>
		if (!ptr) {
   1eb16:	4681      	mov	r9, r0
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d043      	beq.n	1eba4 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1eb1c:	1c69      	adds	r1, r5, #1
   1eb1e:	1a43      	subs	r3, r0, r1
   1eb20:	429c      	cmp	r4, r3
   1eb22:	bfa8      	it	ge
   1eb24:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1eb26:	4622      	mov	r2, r4
   1eb28:	a802      	add	r0, sp, #8
   1eb2a:	f7e1 fbc9 	bl	2c0 <memcpy>
   1eb2e:	e006      	b.n	1eb3e <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1eb30:	4622      	mov	r2, r4
   1eb32:	4629      	mov	r1, r5
   1eb34:	a802      	add	r0, sp, #8
   1eb36:	f7e1 fbc3 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1eb3a:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1eb3e:	2200      	movs	r2, #0
   1eb40:	ab0e      	add	r3, sp, #56	; 0x38
   1eb42:	4423      	add	r3, r4
   1eb44:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1eb48:	1d3a      	adds	r2, r7, #4
   1eb4a:	a902      	add	r1, sp, #8
   1eb4c:	200a      	movs	r0, #10
   1eb4e:	f7ff fee8 	bl	1e922 <net_addr_pton>
	if (ret < 0) {
   1eb52:	2800      	cmp	r0, #0
   1eb54:	db28      	blt.n	1eba8 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1eb56:	230a      	movs	r3, #10
   1eb58:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1eb5a:	b33e      	cbz	r6, 1ebac <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1eb5c:	f109 0301 	add.w	r3, r9, #1
   1eb60:	4445      	add	r5, r8
   1eb62:	42ab      	cmp	r3, r5
   1eb64:	d223      	bcs.n	1ebae <parse_ipv6+0xca>
   1eb66:	f899 3001 	ldrb.w	r3, [r9, #1]
   1eb6a:	2b3a      	cmp	r3, #58	; 0x3a
   1eb6c:	d11f      	bne.n	1ebae <parse_ipv6+0xca>
		len = str_len - end;
   1eb6e:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1eb72:	4622      	mov	r2, r4
   1eb74:	f109 0102 	add.w	r1, r9, #2
   1eb78:	a802      	add	r0, sp, #8
   1eb7a:	f7e1 fba1 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1eb7e:	ab0e      	add	r3, sp, #56	; 0x38
   1eb80:	441c      	add	r4, r3
   1eb82:	2300      	movs	r3, #0
   1eb84:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1eb88:	f10d 0106 	add.w	r1, sp, #6
   1eb8c:	a802      	add	r0, sp, #8
   1eb8e:	f7ff fd8a 	bl	1e6a6 <convert_port>
		if (!ret) {
   1eb92:	4606      	mov	r6, r0
   1eb94:	b158      	cbz	r0, 1ebae <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1eb96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1eb9a:	0a13      	lsrs	r3, r2, #8
   1eb9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1eba0:	807b      	strh	r3, [r7, #2]
   1eba2:	e004      	b.n	1ebae <parse_ipv6+0xca>
			return false;
   1eba4:	2600      	movs	r6, #0
   1eba6:	e002      	b.n	1ebae <parse_ipv6+0xca>
		return false;
   1eba8:	2600      	movs	r6, #0
   1ebaa:	e000      	b.n	1ebae <parse_ipv6+0xca>
		return true;
   1ebac:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1ebae:	4630      	mov	r0, r6
   1ebb0:	b00f      	add	sp, #60	; 0x3c
   1ebb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001ebb6 <net_calc_chksum>:
	return pkt->family;
   1ebb6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1ebba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1ebbe:	2b0a      	cmp	r3, #10
   1ebc0:	d001      	beq.n	1ebc6 <net_calc_chksum+0x10>
		return 0;
   1ebc2:	2000      	movs	r0, #0
   1ebc4:	4770      	bx	lr
{
   1ebc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebc8:	b085      	sub	sp, #20
   1ebca:	4604      	mov	r4, r0
	return pkt->frags->data;
   1ebcc:	6885      	ldr	r5, [r0, #8]
   1ebce:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1ebd0:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1ebd2:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1ebd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1ebd8:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1ebda:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1ebde:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1ebe0:	fa11 f383 	uxtah	r3, r1, r3
   1ebe4:	2220      	movs	r2, #32
   1ebe6:	f100 0108 	add.w	r1, r0, #8
   1ebea:	b298      	uxth	r0, r3
   1ebec:	f7ff fd3c 	bl	1e668 <calc_chksum>
   1ebf0:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1ebf2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	9300      	str	r3, [sp, #0]
   1ebfa:	f10d 020e 	add.w	r2, sp, #14
   1ebfe:	4439      	add	r1, r7
   1ec00:	4628      	mov	r0, r5
   1ec02:	f7ff faec 	bl	1e1de <net_frag_read>
	if (!frag) {
   1ec06:	4605      	mov	r5, r0
   1ec08:	b318      	cbz	r0, 1ec52 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1ec0a:	6881      	ldr	r1, [r0, #8]
   1ec0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ec10:	4419      	add	r1, r3
	len = frag->len - offset;
   1ec12:	8984      	ldrh	r4, [r0, #12]
   1ec14:	1ae4      	subs	r4, r4, r3
   1ec16:	b224      	sxth	r4, r4
   1ec18:	e003      	b.n	1ec22 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1ec1a:	89ac      	ldrh	r4, [r5, #12]
   1ec1c:	3c01      	subs	r4, #1
   1ec1e:	b224      	sxth	r4, r4
			ptr++;
   1ec20:	3101      	adds	r1, #1
	while (frag) {
   1ec22:	b1bd      	cbz	r5, 1ec54 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1ec24:	b2a4      	uxth	r4, r4
   1ec26:	4622      	mov	r2, r4
   1ec28:	4630      	mov	r0, r6
   1ec2a:	f7ff fd1d 	bl	1e668 <calc_chksum>
   1ec2e:	4606      	mov	r6, r0
		frag = frag->frags;
   1ec30:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1ec32:	b17d      	cbz	r5, 1ec54 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1ec34:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1ec36:	f014 0f01 	tst.w	r4, #1
   1ec3a:	d007      	beq.n	1ec4c <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1ec3c:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1ec3e:	441e      	add	r6, r3
   1ec40:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1ec42:	42b3      	cmp	r3, r6
   1ec44:	d9e9      	bls.n	1ec1a <net_calc_chksum+0x64>
				sum++;
   1ec46:	3601      	adds	r6, #1
   1ec48:	b2b6      	uxth	r6, r6
   1ec4a:	e7e6      	b.n	1ec1a <net_calc_chksum+0x64>
			len = frag->len;
   1ec4c:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1ec50:	e7e7      	b.n	1ec22 <net_calc_chksum+0x6c>
		return 0;
   1ec52:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1ec54:	b91e      	cbnz	r6, 1ec5e <net_calc_chksum+0xa8>
   1ec56:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1ec5a:	b005      	add	sp, #20
   1ec5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1ec5e:	0a30      	lsrs	r0, r6, #8
   1ec60:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1ec64:	b280      	uxth	r0, r0
   1ec66:	e7f8      	b.n	1ec5a <net_calc_chksum+0xa4>

0001ec68 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1ec68:	460b      	mov	r3, r1
   1ec6a:	b151      	cbz	r1, 1ec82 <net_header_fits+0x1a>
   1ec6c:	6880      	ldr	r0, [r0, #8]
   1ec6e:	6881      	ldr	r1, [r0, #8]
   1ec70:	428b      	cmp	r3, r1
   1ec72:	d908      	bls.n	1ec86 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1ec74:	4413      	add	r3, r2
   1ec76:	8982      	ldrh	r2, [r0, #12]
   1ec78:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1ec7a:	428b      	cmp	r3, r1
   1ec7c:	d905      	bls.n	1ec8a <net_header_fits+0x22>
	return false;
   1ec7e:	2000      	movs	r0, #0
   1ec80:	4770      	bx	lr
   1ec82:	2000      	movs	r0, #0
   1ec84:	4770      	bx	lr
   1ec86:	2000      	movs	r0, #0
   1ec88:	4770      	bx	lr
		return true;
   1ec8a:	2001      	movs	r0, #1
}
   1ec8c:	4770      	bx	lr

0001ec8e <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1ec8e:	b1d8      	cbz	r0, 1ecc8 <net_ipaddr_parse+0x3a>
{
   1ec90:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1ec92:	b1d9      	cbz	r1, 1eccc <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1ec94:	7804      	ldrb	r4, [r0, #0]
   1ec96:	b1dc      	cbz	r4, 1ecd0 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1ec98:	2c5b      	cmp	r4, #91	; 0x5b
   1ec9a:	d002      	beq.n	1eca2 <net_ipaddr_parse+0x14>
   1ec9c:	2500      	movs	r5, #0
   1ec9e:	462b      	mov	r3, r5
   1eca0:	e004      	b.n	1ecac <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1eca2:	2301      	movs	r3, #1
   1eca4:	f7ff ff1e 	bl	1eae4 <parse_ipv6>
   1eca8:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1ecaa:	3301      	adds	r3, #1
   1ecac:	5cc4      	ldrb	r4, [r0, r3]
   1ecae:	b12c      	cbz	r4, 1ecbc <net_ipaddr_parse+0x2e>
   1ecb0:	4299      	cmp	r1, r3
   1ecb2:	d903      	bls.n	1ecbc <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1ecb4:	2c3a      	cmp	r4, #58	; 0x3a
   1ecb6:	d1f8      	bne.n	1ecaa <net_ipaddr_parse+0x1c>
			count++;
   1ecb8:	3501      	adds	r5, #1
   1ecba:	e7f6      	b.n	1ecaa <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1ecbc:	2d01      	cmp	r5, #1
   1ecbe:	d009      	beq.n	1ecd4 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1ecc0:	2300      	movs	r3, #0
   1ecc2:	f7ff ff0f 	bl	1eae4 <parse_ipv6>
   1ecc6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1ecc8:	2000      	movs	r0, #0
   1ecca:	4770      	bx	lr
   1eccc:	2000      	movs	r0, #0
   1ecce:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1ecd0:	2000      	movs	r0, #0
   1ecd2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1ecd4:	2000      	movs	r0, #0
#endif
}
   1ecd6:	bd38      	pop	{r3, r4, r5, pc}

0001ecd8 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1ecd8:	2000      	movs	r0, #0
   1ecda:	4770      	bx	lr

0001ecdc <net_bt_enable>:
	return iface->dev;
   1ecdc:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ecde:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1ece0:	b129      	cbz	r1, 1ecee <net_bt_enable+0x12>
   1ece2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1ece6:	2b03      	cmp	r3, #3
   1ece8:	d103      	bne.n	1ecf2 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1ecea:	2000      	movs	r0, #0
   1ecec:	4770      	bx	lr
   1ecee:	2000      	movs	r0, #0
   1ecf0:	4770      	bx	lr
		return -ENETDOWN;
   1ecf2:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1ecf6:	4770      	bx	lr

0001ecf8 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1ecf8:	4b04      	ldr	r3, [pc, #16]	; (1ed0c <ipsp_accept+0x14>)
   1ecfa:	685b      	ldr	r3, [r3, #4]
   1ecfc:	b91b      	cbnz	r3, 1ed06 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1ecfe:	4b04      	ldr	r3, [pc, #16]	; (1ed10 <ipsp_accept+0x18>)
   1ed00:	600b      	str	r3, [r1, #0]

	return 0;
   1ed02:	2000      	movs	r0, #0
   1ed04:	4770      	bx	lr
		return -ENOMEM;
   1ed06:	f06f 000b 	mvn.w	r0, #11
}
   1ed0a:	4770      	bx	lr
   1ed0c:	2000c2c8 	.word	0x2000c2c8
   1ed10:	2000c2cc 	.word	0x2000c2cc

0001ed14 <net_bt_send>:
{
   1ed14:	b538      	push	{r3, r4, r5, lr}
   1ed16:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ed18:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1ed1a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1ed1e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1ed22:	2b0a      	cmp	r3, #10
   1ed24:	d001      	beq.n	1ed2a <net_bt_send+0x16>
		return NET_DROP;
   1ed26:	2002      	movs	r0, #2
   1ed28:	bd38      	pop	{r3, r4, r5, pc}
   1ed2a:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1ed2c:	2200      	movs	r2, #0
   1ed2e:	2101      	movs	r1, #1
   1ed30:	4620      	mov	r0, r4
   1ed32:	f003 fe95 	bl	22a60 <net_6lo_compress>
   1ed36:	b908      	cbnz	r0, 1ed3c <net_bt_send+0x28>
		return NET_DROP;
   1ed38:	2002      	movs	r0, #2
}
   1ed3a:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1ed3c:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1ed3e:	4621      	mov	r1, r4
   1ed40:	3018      	adds	r0, #24
   1ed42:	f00a fb13 	bl	2936c <k_queue_append>
	return NET_OK;
   1ed46:	2000      	movs	r0, #0
   1ed48:	bd38      	pop	{r3, r4, r5, pc}

0001ed4a <net_bt_recv>:
{
   1ed4a:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1ed4c:	4608      	mov	r0, r1
   1ed4e:	f004 fad4 	bl	232fa <net_6lo_uncompress>
   1ed52:	b908      	cbnz	r0, 1ed58 <net_bt_recv+0xe>
		return NET_DROP;
   1ed54:	2002      	movs	r0, #2
   1ed56:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1ed58:	2001      	movs	r0, #1
}
   1ed5a:	bd08      	pop	{r3, pc}

0001ed5c <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1ed5c:	b951      	cbnz	r1, 1ed74 <connected+0x18>
{
   1ed5e:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1ed60:	4b05      	ldr	r3, [pc, #20]	; (1ed78 <connected+0x1c>)
   1ed62:	681b      	ldr	r3, [r3, #0]
   1ed64:	4283      	cmp	r3, r0
   1ed66:	d000      	beq.n	1ed6a <connected+0xe>
   1ed68:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1ed6a:	2223      	movs	r2, #35	; 0x23
   1ed6c:	4903      	ldr	r1, [pc, #12]	; (1ed7c <connected+0x20>)
   1ed6e:	f7ea f907 	bl	8f80 <bt_l2cap_chan_connect>
   1ed72:	e7f9      	b.n	1ed68 <connected+0xc>
   1ed74:	4770      	bx	lr
   1ed76:	bf00      	nop
   1ed78:	200023d8 	.word	0x200023d8
   1ed7c:	2000c2cc 	.word	0x2000c2cc

0001ed80 <ipsp_recv>:
{
   1ed80:	b570      	push	{r4, r5, r6, lr}
   1ed82:	4605      	mov	r5, r0
   1ed84:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1ed86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed8a:	2000      	movs	r0, #0
   1ed8c:	f7ff f82e 	bl	1ddec <net_pkt_get_reserve_rx>
   1ed90:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1ed92:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1ed96:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1ed98:	2206      	movs	r2, #6
   1ed9a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1ed9e:	2302      	movs	r3, #2
   1eda0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1eda4:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1eda8:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1edaa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1edae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1edb2:	4630      	mov	r0, r6
   1edb4:	f7fc fb42 	bl	1b43c <net_buf_ref>
   1edb8:	4601      	mov	r1, r0
   1edba:	4620      	mov	r0, r4
   1edbc:	f7ff f8bb 	bl	1df36 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1edc0:	4621      	mov	r1, r4
   1edc2:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1edc6:	f7fc fd55 	bl	1b874 <net_recv_data>
   1edca:	2800      	cmp	r0, #0
   1edcc:	db00      	blt.n	1edd0 <ipsp_recv+0x50>
   1edce:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1edd0:	4620      	mov	r0, r4
   1edd2:	f7ff f886 	bl	1dee2 <net_pkt_unref>
}
   1edd6:	e7fa      	b.n	1edce <ipsp_recv+0x4e>

0001edd8 <ipsp_alloc_buf>:
{
   1edd8:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1edda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1edde:	2000      	movs	r0, #0
   1ede0:	f7ff f818 	bl	1de14 <net_pkt_get_reserve_rx_data>
}
   1ede4:	bd08      	pop	{r3, pc}
	...

0001ede8 <ipsp_disconnected>:
{
   1ede8:	b510      	push	{r4, lr}
   1edea:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1edec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1edf0:	f7fd fe92 	bl	1cb18 <net_if_down>
	if (chan->conn != default_conn) {
   1edf4:	6823      	ldr	r3, [r4, #0]
   1edf6:	4a05      	ldr	r2, [pc, #20]	; (1ee0c <ipsp_disconnected+0x24>)
   1edf8:	6810      	ldr	r0, [r2, #0]
   1edfa:	4283      	cmp	r3, r0
   1edfc:	d000      	beq.n	1ee00 <ipsp_disconnected+0x18>
   1edfe:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1ee00:	f7e8 fe2a 	bl	7a58 <bt_conn_unref>
	default_conn = NULL;
   1ee04:	2200      	movs	r2, #0
   1ee06:	4b01      	ldr	r3, [pc, #4]	; (1ee0c <ipsp_disconnected+0x24>)
   1ee08:	601a      	str	r2, [r3, #0]
   1ee0a:	e7f8      	b.n	1edfe <ipsp_disconnected+0x16>
   1ee0c:	200023d8 	.word	0x200023d8

0001ee10 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1ee10:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1ee12:	4b06      	ldr	r3, [pc, #24]	; (1ee2c <disconnected+0x1c>)
   1ee14:	681b      	ldr	r3, [r3, #0]
   1ee16:	4283      	cmp	r3, r0
   1ee18:	d000      	beq.n	1ee1c <disconnected+0xc>
   1ee1a:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1ee1c:	4618      	mov	r0, r3
   1ee1e:	f7e8 fe1b 	bl	7a58 <bt_conn_unref>
	default_conn = NULL;
   1ee22:	2200      	movs	r2, #0
   1ee24:	4b01      	ldr	r3, [pc, #4]	; (1ee2c <disconnected+0x1c>)
   1ee26:	601a      	str	r2, [r3, #0]
   1ee28:	e7f7      	b.n	1ee1a <disconnected+0xa>
   1ee2a:	bf00      	nop
   1ee2c:	200023d8 	.word	0x200023d8

0001ee30 <ipsp_connected>:
{
   1ee30:	b570      	push	{r4, r5, r6, lr}
   1ee32:	b08e      	sub	sp, #56	; 0x38
   1ee34:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1ee36:	a909      	add	r1, sp, #36	; 0x24
   1ee38:	6800      	ldr	r0, [r0, #0]
   1ee3a:	f7e8 ff43 	bl	7cc4 <bt_conn_get_info>
   1ee3e:	2800      	cmp	r0, #0
   1ee40:	db06      	blt.n	1ee50 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1ee42:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1ee46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1ee48:	3306      	adds	r3, #6
   1ee4a:	4631      	mov	r1, r6
   1ee4c:	2206      	movs	r2, #6
   1ee4e:	e008      	b.n	1ee62 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1ee50:	4620      	mov	r0, r4
   1ee52:	f7ea f8b4 	bl	8fbe <bt_l2cap_chan_disconnect>
   1ee56:	e05a      	b.n	1ef0e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ee58:	7818      	ldrb	r0, [r3, #0]
   1ee5a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1ee5c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ee5e:	3b01      	subs	r3, #1
   1ee60:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1ee62:	2a00      	cmp	r2, #0
   1ee64:	d1f8      	bne.n	1ee58 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1ee66:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1ee6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1ee6c:	3306      	adds	r3, #6
   1ee6e:	4608      	mov	r0, r1
   1ee70:	2206      	movs	r2, #6
   1ee72:	e004      	b.n	1ee7e <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ee74:	781d      	ldrb	r5, [r3, #0]
   1ee76:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1ee78:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ee7a:	3b01      	subs	r3, #1
   1ee7c:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1ee7e:	2a00      	cmp	r2, #0
   1ee80:	d1f8      	bne.n	1ee74 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1ee82:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ee86:	f3bf 8f5b 	dmb	ish
   1ee8a:	68da      	ldr	r2, [r3, #12]
   1ee8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1ee90:	f012 0f01 	tst.w	r2, #1
   1ee94:	d104      	bne.n	1eea0 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1ee96:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1ee98:	2206      	movs	r2, #6
   1ee9a:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1ee9c:	2202      	movs	r2, #2
   1ee9e:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1eea0:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1eea2:	2306      	movs	r3, #6
   1eea4:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1eea8:	2302      	movs	r3, #2
   1eeaa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1eeae:	23fe      	movs	r3, #254	; 0xfe
   1eeb0:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1eeb4:	2380      	movs	r3, #128	; 0x80
   1eeb6:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1eeba:	2300      	movs	r3, #0
   1eebc:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1eec0:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1eec2:	2203      	movs	r2, #3
   1eec4:	a805      	add	r0, sp, #20
   1eec6:	f7e1 f9fb 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1eeca:	23ff      	movs	r3, #255	; 0xff
   1eecc:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1eed0:	23fe      	movs	r3, #254	; 0xfe
   1eed2:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1eed6:	2203      	movs	r2, #3
   1eed8:	9907      	ldr	r1, [sp, #28]
   1eeda:	4411      	add	r1, r2
   1eedc:	f10d 0019 	add.w	r0, sp, #25
   1eee0:	f7e1 f9ee 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1eee4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1eee8:	2b02      	cmp	r3, #2
   1eeea:	d012      	beq.n	1ef12 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1eeec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1eef0:	2b03      	cmp	r3, #3
   1eef2:	d015      	beq.n	1ef20 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1eef4:	2305      	movs	r3, #5
   1eef6:	9300      	str	r3, [sp, #0]
   1eef8:	2300      	movs	r3, #0
   1eefa:	aa07      	add	r2, sp, #28
   1eefc:	a903      	add	r1, sp, #12
   1eefe:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1ef02:	f002 f903 	bl	2110c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1ef06:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1ef0a:	f7fd fdd1 	bl	1cab0 <net_if_up>
}
   1ef0e:	b00e      	add	sp, #56	; 0x38
   1ef10:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1ef12:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ef16:	f083 0302 	eor.w	r3, r3, #2
   1ef1a:	f88d 3014 	strb.w	r3, [sp, #20]
   1ef1e:	e7e5      	b.n	1eeec <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1ef20:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ef24:	f083 0302 	eor.w	r3, r3, #2
   1ef28:	f88d 3014 	strb.w	r3, [sp, #20]
   1ef2c:	e7e2      	b.n	1eef4 <ipsp_connected+0xc4>
	...

0001ef30 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1ef30:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1ef32:	4804      	ldr	r0, [pc, #16]	; (1ef44 <net_bt_init+0x14>)
   1ef34:	f7e8 fbb8 	bl	76a8 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1ef38:	4803      	ldr	r0, [pc, #12]	; (1ef48 <net_bt_init+0x18>)
   1ef3a:	f7e9 ffc7 	bl	8ecc <bt_l2cap_server_register>

	return 0;
}
   1ef3e:	2000      	movs	r0, #0
   1ef40:	bd08      	pop	{r3, pc}
   1ef42:	bf00      	nop
   1ef44:	2000c37c 	.word	0x2000c37c
   1ef48:	2000c3ac 	.word	0x2000c3ac

0001ef4c <bt_iface_send>:
{
   1ef4c:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1ef4e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ef50:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1ef52:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1ef54:	2300      	movs	r3, #0
   1ef56:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1ef58:	4608      	mov	r0, r1
   1ef5a:	f7fe ffc2 	bl	1dee2 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1ef5e:	4629      	mov	r1, r5
   1ef60:	1d20      	adds	r0, r4, #4
   1ef62:	f7ea f9bd 	bl	92e0 <bt_l2cap_chan_send>
}
   1ef66:	bd38      	pop	{r3, r4, r5, pc}

0001ef68 <bt_iface_init>:
   1ef68:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ef6a:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1ef6c:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1ef6e:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ef70:	f3bf 8f5b 	dmb	ish
   1ef74:	e850 3f00 	ldrex	r3, [r0]
   1ef78:	f043 0302 	orr.w	r3, r3, #2
   1ef7c:	e840 3200 	strex	r2, r3, [r0]
   1ef80:	2a00      	cmp	r2, #0
   1ef82:	d1f7      	bne.n	1ef74 <bt_iface_init+0xc>
   1ef84:	f3bf 8f5b 	dmb	ish
   1ef88:	4770      	bx	lr
	...

0001ef8c <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1ef8c:	b510      	push	{r4, lr}
   1ef8e:	b086      	sub	sp, #24
   1ef90:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1ef92:	4913      	ldr	r1, [pc, #76]	; (1efe0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1ef94:	4610      	mov	r0, r2
   1ef96:	f7e1 fa37 	bl	408 <strcmp>
   1ef9a:	b140      	cbz	r0, 1efae <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1ef9c:	4911      	ldr	r1, [pc, #68]	; (1efe4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1ef9e:	4620      	mov	r0, r4
   1efa0:	f7e1 fa32 	bl	408 <strcmp>
   1efa4:	b9c0      	cbnz	r0, 1efd8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1efa6:	f7e8 f87b 	bl	70a0 <bt_le_adv_stop>
}
   1efaa:	b006      	add	sp, #24
   1efac:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1efae:	2300      	movs	r3, #0
   1efb0:	9303      	str	r3, [sp, #12]
   1efb2:	9304      	str	r3, [sp, #16]
   1efb4:	9305      	str	r3, [sp, #20]
   1efb6:	2301      	movs	r3, #1
   1efb8:	f88d 300c 	strb.w	r3, [sp, #12]
   1efbc:	22a0      	movs	r2, #160	; 0xa0
   1efbe:	f8ad 200e 	strh.w	r2, [sp, #14]
   1efc2:	22f0      	movs	r2, #240	; 0xf0
   1efc4:	f8ad 2010 	strh.w	r2, [sp, #16]
   1efc8:	9300      	str	r3, [sp, #0]
   1efca:	4b07      	ldr	r3, [pc, #28]	; (1efe8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1efcc:	2202      	movs	r2, #2
   1efce:	4907      	ldr	r1, [pc, #28]	; (1efec <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1efd0:	a803      	add	r0, sp, #12
   1efd2:	f7e7 ffbb 	bl	6f4c <bt_le_adv_start>
   1efd6:	e7e8      	b.n	1efaa <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1efd8:	f06f 0015 	mvn.w	r0, #21
   1efdc:	e7e5      	b.n	1efaa <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1efde:	bf00      	nop
   1efe0:	00031eb4 	.word	0x00031eb4
   1efe4:	00031eb8 	.word	0x00031eb8
   1efe8:	00031ebc 	.word	0x00031ebc
   1efec:	00031ea4 	.word	0x00031ea4

0001eff0 <net_icmpv6_register_handler>:
	node->next = list->head;
   1eff0:	4b04      	ldr	r3, [pc, #16]	; (1f004 <net_icmpv6_register_handler+0x14>)
   1eff2:	681a      	ldr	r2, [r3, #0]
   1eff4:	6002      	str	r2, [r0, #0]
	list->head = node;
   1eff6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1eff8:	685b      	ldr	r3, [r3, #4]
   1effa:	b103      	cbz	r3, 1effe <net_icmpv6_register_handler+0xe>
   1effc:	4770      	bx	lr
		list->tail = list->head;
   1effe:	4b01      	ldr	r3, [pc, #4]	; (1f004 <net_icmpv6_register_handler+0x14>)
   1f000:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1f002:	e7fb      	b.n	1effc <net_icmpv6_register_handler+0xc>
   1f004:	200023dc 	.word	0x200023dc

0001f008 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1f008:	4601      	mov	r1, r0
	return list->head;
   1f00a:	4b10      	ldr	r3, [pc, #64]	; (1f04c <net_icmpv6_unregister_handler+0x44>)
   1f00c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1f00e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f010:	b1d3      	cbz	r3, 1f048 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1f012:	4299      	cmp	r1, r3
   1f014:	d002      	beq.n	1f01c <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1f016:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f018:	681b      	ldr	r3, [r3, #0]
   1f01a:	e7f9      	b.n	1f010 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1f01c:	b142      	cbz	r2, 1f030 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1f01e:	6803      	ldr	r3, [r0, #0]
   1f020:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1f022:	4b0a      	ldr	r3, [pc, #40]	; (1f04c <net_icmpv6_unregister_handler+0x44>)
   1f024:	685b      	ldr	r3, [r3, #4]
   1f026:	4298      	cmp	r0, r3
   1f028:	d00b      	beq.n	1f042 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1f02a:	2300      	movs	r3, #0
   1f02c:	6003      	str	r3, [r0, #0]
   1f02e:	4770      	bx	lr
		list->head = node->next;
   1f030:	6802      	ldr	r2, [r0, #0]
   1f032:	4b06      	ldr	r3, [pc, #24]	; (1f04c <net_icmpv6_unregister_handler+0x44>)
   1f034:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1f036:	685b      	ldr	r3, [r3, #4]
   1f038:	4298      	cmp	r0, r3
   1f03a:	d1f6      	bne.n	1f02a <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1f03c:	4b03      	ldr	r3, [pc, #12]	; (1f04c <net_icmpv6_unregister_handler+0x44>)
   1f03e:	605a      	str	r2, [r3, #4]
   1f040:	e7f3      	b.n	1f02a <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1f042:	4b02      	ldr	r3, [pc, #8]	; (1f04c <net_icmpv6_unregister_handler+0x44>)
   1f044:	605a      	str	r2, [r3, #4]
   1f046:	e7f0      	b.n	1f02a <net_icmpv6_unregister_handler+0x22>
   1f048:	4770      	bx	lr
   1f04a:	bf00      	nop
   1f04c:	200023dc 	.word	0x200023dc

0001f050 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f054:	b086      	sub	sp, #24
   1f056:	4606      	mov	r6, r0
   1f058:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1f05a:	2300      	movs	r3, #0
   1f05c:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1f060:	f7ff fa18 	bl	1e494 <net_pkt_icmp_data>
   1f064:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1f066:	2204      	movs	r2, #4
   1f068:	4601      	mov	r1, r0
   1f06a:	4630      	mov	r0, r6
   1f06c:	f7ff fdfc 	bl	1ec68 <net_header_fits>
   1f070:	b170      	cbz	r0, 1f090 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1f072:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1f074:	b173      	cbz	r3, 1f094 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1f076:	2300      	movs	r3, #0
   1f078:	70a3      	strb	r3, [r4, #2]
   1f07a:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f07c:	213a      	movs	r1, #58	; 0x3a
   1f07e:	4630      	mov	r0, r6
   1f080:	f7ff fd99 	bl	1ebb6 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1f084:	43c0      	mvns	r0, r0
   1f086:	8060      	strh	r0, [r4, #2]

		return frag;
   1f088:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1f08a:	b006      	add	sp, #24
   1f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1f090:	2300      	movs	r3, #0
   1f092:	e7ef      	b.n	1f074 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1f094:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1f098:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1f09c:	441a      	add	r2, r3
   1f09e:	3202      	adds	r2, #2
   1f0a0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1f0a4:	f8cd 8008 	str.w	r8, [sp, #8]
   1f0a8:	f10d 0416 	add.w	r4, sp, #22
   1f0ac:	9401      	str	r4, [sp, #4]
   1f0ae:	2702      	movs	r7, #2
   1f0b0:	9700      	str	r7, [sp, #0]
   1f0b2:	ab05      	add	r3, sp, #20
   1f0b4:	b292      	uxth	r2, r2
   1f0b6:	4629      	mov	r1, r5
   1f0b8:	4630      	mov	r0, r6
   1f0ba:	f7ff f902 	bl	1e2c2 <net_pkt_write>
   1f0be:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f0c0:	213a      	movs	r1, #58	; 0x3a
   1f0c2:	4630      	mov	r0, r6
   1f0c4:	f7ff fd77 	bl	1ebb6 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1f0c8:	43c0      	mvns	r0, r0
   1f0ca:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1f0ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f0d2:	3a02      	subs	r2, #2
   1f0d4:	f8cd 8008 	str.w	r8, [sp, #8]
   1f0d8:	9401      	str	r4, [sp, #4]
   1f0da:	9700      	str	r7, [sp, #0]
   1f0dc:	ab05      	add	r3, sp, #20
   1f0de:	b292      	uxth	r2, r2
   1f0e0:	4629      	mov	r1, r5
   1f0e2:	4630      	mov	r0, r6
   1f0e4:	f7ff f8ed 	bl	1e2c2 <net_pkt_write>
	return frag;
   1f0e8:	e7cf      	b.n	1f08a <net_icmpv6_set_chksum+0x3a>

0001f0ea <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1f0ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0ec:	b085      	sub	sp, #20
   1f0ee:	4605      	mov	r5, r0
   1f0f0:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1f0f2:	f7ff f9cf 	bl	1e494 <net_pkt_icmp_data>
   1f0f6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1f0f8:	2204      	movs	r2, #4
   1f0fa:	4601      	mov	r1, r0
   1f0fc:	4628      	mov	r0, r5
   1f0fe:	f7ff fdb3 	bl	1ec68 <net_header_fits>
   1f102:	b120      	cbz	r0, 1f10e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1f104:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1f106:	b126      	cbz	r6, 1f112 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1f108:	4620      	mov	r0, r4
   1f10a:	b005      	add	sp, #20
   1f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1f10e:	2600      	movs	r6, #0
   1f110:	e7f9      	b.n	1f106 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f112:	68a8      	ldr	r0, [r5, #8]
   1f114:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1f118:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1f11c:	9700      	str	r7, [sp, #0]
   1f11e:	2301      	movs	r3, #1
   1f120:	f10d 020e 	add.w	r2, sp, #14
   1f124:	4421      	add	r1, r4
   1f126:	f7ff f85a 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1f12a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1f12e:	1c7b      	adds	r3, r7, #1
   1f130:	9300      	str	r3, [sp, #0]
   1f132:	2301      	movs	r3, #1
   1f134:	f10d 020e 	add.w	r2, sp, #14
   1f138:	f7ff f851 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1f13c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1f140:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1f142:	9300      	str	r3, [sp, #0]
   1f144:	2302      	movs	r3, #2
   1f146:	f10d 020e 	add.w	r2, sp, #14
   1f14a:	f7ff f848 	bl	1e1de <net_frag_read>
	if (!frag) {
   1f14e:	b108      	cbz	r0, 1f154 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1f150:	463c      	mov	r4, r7
   1f152:	e7d9      	b.n	1f108 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1f154:	4634      	mov	r4, r6
   1f156:	e7d7      	b.n	1f108 <net_icmpv6_get_hdr+0x1e>

0001f158 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f15c:	b086      	sub	sp, #24
   1f15e:	4606      	mov	r6, r0
   1f160:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1f162:	2204      	movs	r2, #4
   1f164:	f7ff fd80 	bl	1ec68 <net_header_fits>
   1f168:	b128      	cbz	r0, 1f176 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1f16a:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1f16c:	b12d      	cbz	r5, 1f17a <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1f16e:	4620      	mov	r0, r4
   1f170:	b006      	add	sp, #24
   1f172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1f176:	2500      	movs	r5, #0
   1f178:	e7f8      	b.n	1f16c <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f17a:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1f17e:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f182:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1f186:	9702      	str	r7, [sp, #8]
   1f188:	9401      	str	r4, [sp, #4]
   1f18a:	f04f 0801 	mov.w	r8, #1
   1f18e:	f8cd 8000 	str.w	r8, [sp]
   1f192:	f10d 0316 	add.w	r3, sp, #22
   1f196:	440a      	add	r2, r1
   1f198:	68b1      	ldr	r1, [r6, #8]
   1f19a:	4630      	mov	r0, r6
   1f19c:	f7ff f891 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1f1a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f1a4:	eb04 0308 	add.w	r3, r4, r8
   1f1a8:	9702      	str	r7, [sp, #8]
   1f1aa:	9301      	str	r3, [sp, #4]
   1f1ac:	f8cd 8000 	str.w	r8, [sp]
   1f1b0:	f10d 0316 	add.w	r3, sp, #22
   1f1b4:	4601      	mov	r1, r0
   1f1b6:	4630      	mov	r0, r6
   1f1b8:	f7ff f883 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1f1bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1f1c0:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1f1c2:	9702      	str	r7, [sp, #8]
   1f1c4:	9301      	str	r3, [sp, #4]
   1f1c6:	2302      	movs	r3, #2
   1f1c8:	9300      	str	r3, [sp, #0]
   1f1ca:	f10d 0316 	add.w	r3, sp, #22
   1f1ce:	4601      	mov	r1, r0
   1f1d0:	4630      	mov	r0, r6
   1f1d2:	f7ff f876 	bl	1e2c2 <net_pkt_write>
	if (!frag) {
   1f1d6:	2800      	cmp	r0, #0
   1f1d8:	d1c9      	bne.n	1f16e <net_icmpv6_set_hdr+0x16>
		return NULL;
   1f1da:	462c      	mov	r4, r5
   1f1dc:	e7c7      	b.n	1f16e <net_icmpv6_set_hdr+0x16>
	...

0001f1e0 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1f1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1e4:	b09a      	sub	sp, #104	; 0x68
   1f1e6:	4606      	mov	r6, r0
	return pkt->iface;
   1f1e8:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1f1ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1f1ee:	2000      	movs	r0, #0
   1f1f0:	f7fe fe06 	bl	1de00 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1f1f4:	2800      	cmp	r0, #0
   1f1f6:	f000 80a1 	beq.w	1f33c <handle_echo_request+0x15c>
   1f1fa:	4604      	mov	r4, r0
	return pkt->frags->data;
   1f1fc:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1f1fe:	2100      	movs	r1, #0
   1f200:	e002      	b.n	1f208 <handle_echo_request+0x28>
		bytes += buf->len;
   1f202:	899a      	ldrh	r2, [r3, #12]
   1f204:	4411      	add	r1, r2
		buf = buf->frags;
   1f206:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f208:	2b00      	cmp	r3, #0
   1f20a:	d1fa      	bne.n	1f202 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1f20c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f210:	2200      	movs	r2, #0
   1f212:	4630      	mov	r0, r6
   1f214:	f7fe fea6 	bl	1df64 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1f218:	4607      	mov	r7, r0
   1f21a:	2800      	cmp	r0, #0
   1f21c:	f000 808b 	beq.w	1f336 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1f220:	4601      	mov	r1, r0
   1f222:	4620      	mov	r0, r4
   1f224:	f7fe fe87 	bl	1df36 <net_pkt_frag_add>
	pkt->family = family;
   1f228:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f22c:	220a      	movs	r2, #10
   1f22e:	f362 03c6 	bfi	r3, r2, #3, #4
   1f232:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1f236:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f238:	7d6b      	ldrb	r3, [r5, #21]
   1f23a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f23e:	7d6b      	ldrb	r3, [r5, #21]
   1f240:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1f244:	f107 0008 	add.w	r0, r7, #8
   1f248:	f7fc f98d 	bl	1b566 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1f24c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1f250:	2328      	movs	r3, #40	; 0x28
   1f252:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1f256:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1f25a:	2b00      	cmp	r3, #0
   1f25c:	d076      	beq.n	1f34c <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1f25e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1f262:	68a3      	ldr	r3, [r4, #8]
   1f264:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f266:	2260      	movs	r2, #96	; 0x60
   1f268:	701a      	strb	r2, [r3, #0]
   1f26a:	68a3      	ldr	r3, [r4, #8]
   1f26c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f26e:	2300      	movs	r3, #0
   1f270:	7053      	strb	r3, [r2, #1]
   1f272:	68a2      	ldr	r2, [r4, #8]
   1f274:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f276:	7093      	strb	r3, [r2, #2]
   1f278:	70d3      	strb	r3, [r2, #3]
   1f27a:	68a3      	ldr	r3, [r4, #8]
   1f27c:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1f27e:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1f282:	71da      	strb	r2, [r3, #7]
   1f284:	68a3      	ldr	r3, [r4, #8]
   1f286:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1f28a:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1f28e:	2bff      	cmp	r3, #255	; 0xff
   1f290:	d060      	beq.n	1f354 <handle_echo_request+0x174>
   1f292:	68b3      	ldr	r3, [r6, #8]
   1f294:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1f296:	af0e      	add	r7, sp, #56	; 0x38
   1f298:	462b      	mov	r3, r5
   1f29a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f29e:	6859      	ldr	r1, [r3, #4]
   1f2a0:	689a      	ldr	r2, [r3, #8]
   1f2a2:	68db      	ldr	r3, [r3, #12]
   1f2a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f2a6:	af01      	add	r7, sp, #4
   1f2a8:	ab0e      	add	r3, sp, #56	; 0x38
   1f2aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f2ac:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f2b0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1f2b4:	462b      	mov	r3, r5
   1f2b6:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1f2ba:	6859      	ldr	r1, [r3, #4]
   1f2bc:	689a      	ldr	r2, [r3, #8]
   1f2be:	68db      	ldr	r3, [r3, #12]
   1f2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f2c4:	ad12      	add	r5, sp, #72	; 0x48
   1f2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2c8:	f8cc 0008 	str.w	r0, [ip, #8]
   1f2cc:	f8cc 100c 	str.w	r1, [ip, #12]
   1f2d0:	f8cc 2010 	str.w	r2, [ip, #16]
   1f2d4:	f8cc 3014 	str.w	r3, [ip, #20]
   1f2d8:	68a3      	ldr	r3, [r4, #8]
   1f2da:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f2de:	ad16      	add	r5, sp, #88	; 0x58
   1f2e0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1f2e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1f2e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2ea:	f8ce 0018 	str.w	r0, [lr, #24]
   1f2ee:	f8ce 101c 	str.w	r1, [lr, #28]
   1f2f2:	f8ce 2020 	str.w	r2, [lr, #32]
   1f2f6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1f2fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1f2fc:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1f2fe:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1f302:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1f306:	2500      	movs	r5, #0
   1f308:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f30a:	a905      	add	r1, sp, #20
   1f30c:	4620      	mov	r0, r4
   1f30e:	f7ff feec 	bl	1f0ea <net_icmpv6_get_hdr>
   1f312:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1f314:	2381      	movs	r3, #129	; 0x81
   1f316:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1f318:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1f31a:	7085      	strb	r5, [r0, #2]
   1f31c:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1f31e:	4620      	mov	r0, r4
   1f320:	f7ff ff1a 	bl	1f158 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f324:	68a1      	ldr	r1, [r4, #8]
   1f326:	4620      	mov	r0, r4
   1f328:	f7ff fe92 	bl	1f050 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1f32c:	4620      	mov	r0, r4
   1f32e:	f7fc f9d7 	bl	1b6e0 <net_send_data>
   1f332:	42a8      	cmp	r0, r5
   1f334:	da3c      	bge.n	1f3b0 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1f336:	4620      	mov	r0, r4
   1f338:	f7fe fdd3 	bl	1dee2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f33c:	4a21      	ldr	r2, [pc, #132]	; (1f3c4 <handle_echo_request+0x1e4>)
   1f33e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f340:	3301      	adds	r3, #1
   1f342:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1f344:	2002      	movs	r0, #2
}
   1f346:	b01a      	add	sp, #104	; 0x68
   1f348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1f34c:	2300      	movs	r3, #0
   1f34e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1f352:	e786      	b.n	1f262 <handle_echo_request+0x82>
	return pkt->frags->data;
   1f354:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f356:	af06      	add	r7, sp, #24
   1f358:	689b      	ldr	r3, [r3, #8]
   1f35a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f35e:	6859      	ldr	r1, [r3, #4]
   1f360:	689a      	ldr	r2, [r3, #8]
   1f362:	68db      	ldr	r3, [r3, #12]
   1f364:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f366:	af06      	add	r7, sp, #24
   1f368:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1f36a:	f8cc 0018 	str.w	r0, [ip, #24]
   1f36e:	f8cc 101c 	str.w	r1, [ip, #28]
   1f372:	f8cc 2020 	str.w	r2, [ip, #32]
   1f376:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f37a:	68a3      	ldr	r3, [r4, #8]
   1f37c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f380:	68b3      	ldr	r3, [r6, #8]
   1f382:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f384:	3118      	adds	r1, #24
   1f386:	4628      	mov	r0, r5
   1f388:	f7fd f910 	bl	1c5ac <net_if_ipv6_select_src_addr>
   1f38c:	4603      	mov	r3, r0
   1f38e:	ad0a      	add	r5, sp, #40	; 0x28
   1f390:	6800      	ldr	r0, [r0, #0]
   1f392:	6859      	ldr	r1, [r3, #4]
   1f394:	689a      	ldr	r2, [r3, #8]
   1f396:	68db      	ldr	r3, [r3, #12]
   1f398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f39a:	ad0a      	add	r5, sp, #40	; 0x28
   1f39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f39e:	f8c8 0008 	str.w	r0, [r8, #8]
   1f3a2:	f8c8 100c 	str.w	r1, [r8, #12]
   1f3a6:	f8c8 2010 	str.w	r2, [r8, #16]
   1f3aa:	f8c8 3014 	str.w	r3, [r8, #20]
   1f3ae:	e7a4      	b.n	1f2fa <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1f3b0:	4630      	mov	r0, r6
   1f3b2:	f7fe fd96 	bl	1dee2 <net_pkt_unref>
	net_stats.icmp.sent++;
   1f3b6:	4a03      	ldr	r2, [pc, #12]	; (1f3c4 <handle_echo_request+0x1e4>)
   1f3b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f3ba:	3301      	adds	r3, #1
   1f3bc:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1f3be:	4628      	mov	r0, r5
   1f3c0:	e7c1      	b.n	1f346 <handle_echo_request+0x166>
   1f3c2:	bf00      	nop
   1f3c4:	20002fd0 	.word	0x20002fd0

0001f3c8 <net_icmpv6_get_ns_hdr>:
{
   1f3c8:	b570      	push	{r4, r5, r6, lr}
   1f3ca:	b084      	sub	sp, #16
   1f3cc:	4605      	mov	r5, r0
   1f3ce:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1f3d0:	2104      	movs	r1, #4
   1f3d2:	f7ff f874 	bl	1e4be <net_pkt_icmp_opt_data>
   1f3d6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f3d8:	2214      	movs	r2, #20
   1f3da:	4601      	mov	r1, r0
   1f3dc:	4628      	mov	r0, r5
   1f3de:	f7ff fc43 	bl	1ec68 <net_header_fits>
   1f3e2:	b110      	cbz	r0, 1f3ea <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1f3e4:	4620      	mov	r0, r4
}
   1f3e6:	b004      	add	sp, #16
   1f3e8:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1f3ea:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1f3ec:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1f3f0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1f3f4:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1f3f6:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1f3f8:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1f3fa:	9300      	str	r3, [sp, #0]
   1f3fc:	2310      	movs	r3, #16
   1f3fe:	f10d 020e 	add.w	r2, sp, #14
   1f402:	b289      	uxth	r1, r1
   1f404:	f7fe feeb 	bl	1e1de <net_frag_read>
	if (!frag) {
   1f408:	2800      	cmp	r0, #0
   1f40a:	d0ec      	beq.n	1f3e6 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1f40c:	4630      	mov	r0, r6
   1f40e:	e7ea      	b.n	1f3e6 <net_icmpv6_get_ns_hdr+0x1e>

0001f410 <net_icmpv6_set_ns_hdr>:
{
   1f410:	b570      	push	{r4, r5, r6, lr}
   1f412:	b086      	sub	sp, #24
   1f414:	4605      	mov	r5, r0
   1f416:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1f418:	2300      	movs	r3, #0
   1f41a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1f41c:	2104      	movs	r1, #4
   1f41e:	f7ff f84e 	bl	1e4be <net_pkt_icmp_opt_data>
   1f422:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f424:	2214      	movs	r2, #20
   1f426:	4601      	mov	r1, r0
   1f428:	4628      	mov	r0, r5
   1f42a:	f7ff fc1d 	bl	1ec68 <net_header_fits>
   1f42e:	b110      	cbz	r0, 1f436 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1f430:	4620      	mov	r0, r4
}
   1f432:	b006      	add	sp, #24
   1f434:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f436:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1f43a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f43e:	441a      	add	r2, r3
   1f440:	3204      	adds	r2, #4
   1f442:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1f446:	9402      	str	r4, [sp, #8]
   1f448:	ab05      	add	r3, sp, #20
   1f44a:	9301      	str	r3, [sp, #4]
   1f44c:	2304      	movs	r3, #4
   1f44e:	9300      	str	r3, [sp, #0]
   1f450:	f10d 0312 	add.w	r3, sp, #18
   1f454:	b292      	uxth	r2, r2
   1f456:	68a9      	ldr	r1, [r5, #8]
   1f458:	4628      	mov	r0, r5
   1f45a:	f7fe ff32 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1f45e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1f462:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1f464:	9402      	str	r4, [sp, #8]
   1f466:	9301      	str	r3, [sp, #4]
   1f468:	2310      	movs	r3, #16
   1f46a:	9300      	str	r3, [sp, #0]
   1f46c:	f10d 0312 	add.w	r3, sp, #18
   1f470:	4601      	mov	r1, r0
   1f472:	4628      	mov	r0, r5
   1f474:	f7fe ff25 	bl	1e2c2 <net_pkt_write>
	if (!frag) {
   1f478:	2800      	cmp	r0, #0
   1f47a:	d0da      	beq.n	1f432 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1f47c:	4630      	mov	r0, r6
   1f47e:	e7d8      	b.n	1f432 <net_icmpv6_set_ns_hdr+0x22>

0001f480 <net_icmpv6_get_nd_opt_hdr>:
{
   1f480:	b570      	push	{r4, r5, r6, lr}
   1f482:	b084      	sub	sp, #16
   1f484:	4605      	mov	r5, r0
   1f486:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1f488:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1f48c:	3104      	adds	r1, #4
   1f48e:	f7ff f816 	bl	1e4be <net_pkt_icmp_opt_data>
   1f492:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f494:	2202      	movs	r2, #2
   1f496:	4601      	mov	r1, r0
   1f498:	4628      	mov	r0, r5
   1f49a:	f7ff fbe5 	bl	1ec68 <net_header_fits>
   1f49e:	b110      	cbz	r0, 1f4a6 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1f4a0:	4620      	mov	r0, r4
}
   1f4a2:	b004      	add	sp, #16
   1f4a4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1f4a6:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1f4a8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f4ac:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f4b0:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1f4b2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1f4b6:	4419      	add	r1, r3
   1f4b8:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1f4ba:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1f4bc:	9600      	str	r6, [sp, #0]
   1f4be:	2301      	movs	r3, #1
   1f4c0:	f10d 020e 	add.w	r2, sp, #14
   1f4c4:	b289      	uxth	r1, r1
   1f4c6:	f7fe fe8a 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1f4ca:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1f4ce:	1c73      	adds	r3, r6, #1
   1f4d0:	9300      	str	r3, [sp, #0]
   1f4d2:	2301      	movs	r3, #1
   1f4d4:	f10d 020e 	add.w	r2, sp, #14
   1f4d8:	f7fe fe81 	bl	1e1de <net_frag_read>
	if (!frag) {
   1f4dc:	2800      	cmp	r0, #0
   1f4de:	d0e0      	beq.n	1f4a2 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1f4e0:	4630      	mov	r0, r6
   1f4e2:	e7de      	b.n	1f4a2 <net_icmpv6_get_nd_opt_hdr+0x22>

0001f4e4 <net_icmpv6_get_na_hdr>:
{
   1f4e4:	b570      	push	{r4, r5, r6, lr}
   1f4e6:	b084      	sub	sp, #16
   1f4e8:	4605      	mov	r5, r0
   1f4ea:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1f4ec:	2104      	movs	r1, #4
   1f4ee:	f7fe ffe6 	bl	1e4be <net_pkt_icmp_opt_data>
   1f4f2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f4f4:	2214      	movs	r2, #20
   1f4f6:	4601      	mov	r1, r0
   1f4f8:	4628      	mov	r0, r5
   1f4fa:	f7ff fbb5 	bl	1ec68 <net_header_fits>
   1f4fe:	b110      	cbz	r0, 1f506 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1f500:	4620      	mov	r0, r4
}
   1f502:	b004      	add	sp, #16
   1f504:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f506:	68a8      	ldr	r0, [r5, #8]
   1f508:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f50c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f510:	4419      	add	r1, r3
   1f512:	3104      	adds	r1, #4
   1f514:	9600      	str	r6, [sp, #0]
   1f516:	2301      	movs	r3, #1
   1f518:	f10d 020e 	add.w	r2, sp, #14
   1f51c:	b289      	uxth	r1, r1
   1f51e:	f7fe fe5e 	bl	1e1de <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1f522:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1f526:	2300      	movs	r3, #0
   1f528:	9300      	str	r3, [sp, #0]
   1f52a:	2303      	movs	r3, #3
   1f52c:	f10d 020e 	add.w	r2, sp, #14
   1f530:	f7fe fe55 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1f534:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1f538:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1f53a:	9300      	str	r3, [sp, #0]
   1f53c:	2310      	movs	r3, #16
   1f53e:	f10d 020e 	add.w	r2, sp, #14
   1f542:	f7fe fe4c 	bl	1e1de <net_frag_read>
	if (!frag) {
   1f546:	2800      	cmp	r0, #0
   1f548:	d0db      	beq.n	1f502 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1f54a:	4630      	mov	r0, r6
   1f54c:	e7d9      	b.n	1f502 <net_icmpv6_get_na_hdr+0x1e>

0001f54e <net_icmpv6_set_na_hdr>:
{
   1f54e:	b570      	push	{r4, r5, r6, lr}
   1f550:	b086      	sub	sp, #24
   1f552:	4605      	mov	r5, r0
   1f554:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1f556:	2300      	movs	r3, #0
   1f558:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f55c:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1f560:	2104      	movs	r1, #4
   1f562:	f7fe ffac 	bl	1e4be <net_pkt_icmp_opt_data>
   1f566:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f568:	2214      	movs	r2, #20
   1f56a:	4601      	mov	r1, r0
   1f56c:	4628      	mov	r0, r5
   1f56e:	f7ff fb7b 	bl	1ec68 <net_header_fits>
   1f572:	b110      	cbz	r0, 1f57a <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1f574:	4620      	mov	r0, r4
}
   1f576:	b006      	add	sp, #24
   1f578:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1f57a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1f57e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1f582:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1f584:	3204      	adds	r2, #4
   1f586:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1f58a:	9402      	str	r4, [sp, #8]
   1f58c:	9601      	str	r6, [sp, #4]
   1f58e:	2301      	movs	r3, #1
   1f590:	9300      	str	r3, [sp, #0]
   1f592:	f10d 0312 	add.w	r3, sp, #18
   1f596:	b292      	uxth	r2, r2
   1f598:	68a9      	ldr	r1, [r5, #8]
   1f59a:	4628      	mov	r0, r5
   1f59c:	f7fe fe91 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1f5a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1f5a4:	9402      	str	r4, [sp, #8]
   1f5a6:	ab05      	add	r3, sp, #20
   1f5a8:	9301      	str	r3, [sp, #4]
   1f5aa:	2303      	movs	r3, #3
   1f5ac:	9300      	str	r3, [sp, #0]
   1f5ae:	f10d 0312 	add.w	r3, sp, #18
   1f5b2:	4601      	mov	r1, r0
   1f5b4:	4628      	mov	r0, r5
   1f5b6:	f7fe fe84 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1f5ba:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1f5be:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1f5c0:	9402      	str	r4, [sp, #8]
   1f5c2:	9301      	str	r3, [sp, #4]
   1f5c4:	2310      	movs	r3, #16
   1f5c6:	9300      	str	r3, [sp, #0]
   1f5c8:	f10d 0312 	add.w	r3, sp, #18
   1f5cc:	4601      	mov	r1, r0
   1f5ce:	4628      	mov	r0, r5
   1f5d0:	f7fe fe77 	bl	1e2c2 <net_pkt_write>
	if (!frag) {
   1f5d4:	2800      	cmp	r0, #0
   1f5d6:	d0ce      	beq.n	1f576 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1f5d8:	4630      	mov	r0, r6
   1f5da:	e7cc      	b.n	1f576 <net_icmpv6_set_na_hdr+0x28>

0001f5dc <net_icmpv6_get_ra_hdr>:
{
   1f5dc:	b570      	push	{r4, r5, r6, lr}
   1f5de:	b084      	sub	sp, #16
   1f5e0:	4606      	mov	r6, r0
   1f5e2:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1f5e4:	2104      	movs	r1, #4
   1f5e6:	f7fe ff6a 	bl	1e4be <net_pkt_icmp_opt_data>
   1f5ea:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1f5ec:	220c      	movs	r2, #12
   1f5ee:	4601      	mov	r1, r0
   1f5f0:	4630      	mov	r0, r6
   1f5f2:	f7ff fb39 	bl	1ec68 <net_header_fits>
   1f5f6:	b110      	cbz	r0, 1f5fe <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1f5f8:	4620      	mov	r0, r4
}
   1f5fa:	b004      	add	sp, #16
   1f5fc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f5fe:	68b0      	ldr	r0, [r6, #8]
   1f600:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f604:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1f608:	4419      	add	r1, r3
   1f60a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1f60c:	9500      	str	r5, [sp, #0]
   1f60e:	2301      	movs	r3, #1
   1f610:	f10d 020e 	add.w	r2, sp, #14
   1f614:	b289      	uxth	r1, r1
   1f616:	f7fe fde2 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1f61a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1f61e:	1c6b      	adds	r3, r5, #1
   1f620:	9300      	str	r3, [sp, #0]
   1f622:	2301      	movs	r3, #1
   1f624:	f10d 020e 	add.w	r2, sp, #14
   1f628:	f7fe fdd9 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1f62c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1f630:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1f632:	9300      	str	r3, [sp, #0]
   1f634:	2302      	movs	r3, #2
   1f636:	f10d 020e 	add.w	r2, sp, #14
   1f63a:	f7fe fdd0 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1f63e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1f642:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1f644:	9300      	str	r3, [sp, #0]
   1f646:	2304      	movs	r3, #4
   1f648:	f10d 020e 	add.w	r2, sp, #14
   1f64c:	f7fe fdc7 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1f650:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1f654:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1f658:	9300      	str	r3, [sp, #0]
   1f65a:	2304      	movs	r3, #4
   1f65c:	f10d 020e 	add.w	r2, sp, #14
   1f660:	f7fe fdbd 	bl	1e1de <net_frag_read>
	if (!frag) {
   1f664:	2800      	cmp	r0, #0
   1f666:	d0c8      	beq.n	1f5fa <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1f668:	4628      	mov	r0, r5
   1f66a:	e7c6      	b.n	1f5fa <net_icmpv6_get_ra_hdr+0x1e>

0001f66c <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f670:	b09f      	sub	sp, #124	; 0x7c
   1f672:	4605      	mov	r5, r0
   1f674:	4688      	mov	r8, r1
   1f676:	4692      	mov	sl, r2
   1f678:	4699      	mov	r9, r3
	return pkt->frags->data;
   1f67a:	6883      	ldr	r3, [r0, #8]
   1f67c:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1f67e:	799b      	ldrb	r3, [r3, #6]
   1f680:	2b3a      	cmp	r3, #58	; 0x3a
   1f682:	d01d      	beq.n	1f6c0 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1f684:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1f686:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1f68a:	2000      	movs	r0, #0
   1f68c:	f7fe fbb8 	bl	1de00 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1f690:	4604      	mov	r4, r0
   1f692:	2800      	cmp	r0, #0
   1f694:	f000 8141 	beq.w	1f91a <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1f698:	68ab      	ldr	r3, [r5, #8]
   1f69a:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1f69c:	798b      	ldrb	r3, [r1, #6]
   1f69e:	2b11      	cmp	r3, #17
   1f6a0:	d019      	beq.n	1f6d6 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1f6a2:	2b06      	cmp	r3, #6
   1f6a4:	d019      	beq.n	1f6da <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f6a6:	687b      	ldr	r3, [r7, #4]
   1f6a8:	689b      	ldr	r3, [r3, #8]
   1f6aa:	3118      	adds	r1, #24
   1f6ac:	4638      	mov	r0, r7
   1f6ae:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1f6b0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1f6b4:	282f      	cmp	r0, #47	; 0x2f
   1f6b6:	f240 80de 	bls.w	1f876 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1f6ba:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1f6be:	e00d      	b.n	1f6dc <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1f6c0:	a906      	add	r1, sp, #24
   1f6c2:	f7ff fd12 	bl	1f0ea <net_icmpv6_get_hdr>
   1f6c6:	b118      	cbz	r0, 1f6d0 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1f6c8:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1f6cc:	2b00      	cmp	r3, #0
   1f6ce:	dbd9      	blt.n	1f684 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1f6d0:	f06f 0515 	mvn.w	r5, #21
   1f6d4:	e119      	b.n	1f90a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1f6d6:	2630      	movs	r6, #48	; 0x30
   1f6d8:	e000      	b.n	1f6dc <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1f6da:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1f6dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f6e0:	2230      	movs	r2, #48	; 0x30
   1f6e2:	4631      	mov	r1, r6
   1f6e4:	4628      	mov	r0, r5
   1f6e6:	f7fe fc3d 	bl	1df64 <net_pkt_copy>
	if (!frag) {
   1f6ea:	4683      	mov	fp, r0
   1f6ec:	2800      	cmp	r0, #0
   1f6ee:	f000 8104 	beq.w	1f8fa <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1f6f2:	4601      	mov	r1, r0
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f7fe fc1e 	bl	1df36 <net_pkt_frag_add>
	pkt->family = family;
   1f6fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f6fe:	220a      	movs	r2, #10
   1f700:	f362 03c6 	bfi	r3, r2, #3, #4
   1f704:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1f708:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f70a:	7d7b      	ldrb	r3, [r7, #21]
   1f70c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f710:	7d7b      	ldrb	r3, [r7, #21]
   1f712:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1f716:	f10b 0008 	add.w	r0, fp, #8
   1f71a:	f7fb ff24 	bl	1b566 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1f71e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1f722:	2000      	movs	r0, #0
   1f724:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1f728:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1f72a:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1f72e:	f88d 8014 	strb.w	r8, [sp, #20]
   1f732:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1f736:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1f738:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1f73a:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f73c:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1f740:	f882 e000 	strb.w	lr, [r2]
   1f744:	68a2      	ldr	r2, [r4, #8]
   1f746:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f748:	7050      	strb	r0, [r2, #1]
   1f74a:	68a2      	ldr	r2, [r4, #8]
   1f74c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f74e:	7090      	strb	r0, [r2, #2]
   1f750:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1f752:	3608      	adds	r6, #8
   1f754:	b2b6      	uxth	r6, r6
   1f756:	68a2      	ldr	r2, [r4, #8]
   1f758:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1f75a:	0a30      	lsrs	r0, r6, #8
   1f75c:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1f75e:	7156      	strb	r6, [r2, #5]
   1f760:	68a2      	ldr	r2, [r4, #8]
   1f762:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f764:	203a      	movs	r0, #58	; 0x3a
   1f766:	7190      	strb	r0, [r2, #6]
   1f768:	68a2      	ldr	r2, [r4, #8]
   1f76a:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1f76c:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1f76e:	2228      	movs	r2, #40	; 0x28
   1f770:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1f774:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1f778:	9602      	str	r6, [sp, #8]
   1f77a:	ab05      	add	r3, sp, #20
   1f77c:	9301      	str	r3, [sp, #4]
   1f77e:	f04f 0a01 	mov.w	sl, #1
   1f782:	f8cd a000 	str.w	sl, [sp]
   1f786:	f10d 0316 	add.w	r3, sp, #22
   1f78a:	4620      	mov	r0, r4
   1f78c:	f7fe fd99 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1f790:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f794:	9602      	str	r6, [sp, #8]
   1f796:	f10d 0315 	add.w	r3, sp, #21
   1f79a:	9301      	str	r3, [sp, #4]
   1f79c:	f8cd a000 	str.w	sl, [sp]
   1f7a0:	f10d 0316 	add.w	r3, sp, #22
   1f7a4:	4601      	mov	r1, r0
   1f7a6:	4620      	mov	r0, r4
   1f7a8:	f7fe fd8b 	bl	1e2c2 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1f7ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f7b0:	9602      	str	r6, [sp, #8]
   1f7b2:	ab06      	add	r3, sp, #24
   1f7b4:	9301      	str	r3, [sp, #4]
   1f7b6:	2304      	movs	r3, #4
   1f7b8:	9300      	str	r3, [sp, #0]
   1f7ba:	f10d 0316 	add.w	r3, sp, #22
   1f7be:	4601      	mov	r1, r0
   1f7c0:	4620      	mov	r0, r4
   1f7c2:	f7fe fd7e 	bl	1e2c2 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1f7c6:	f1b8 0f04 	cmp.w	r8, #4
   1f7ca:	d056      	beq.n	1f87a <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1f7cc:	68ab      	ldr	r3, [r5, #8]
   1f7ce:	689e      	ldr	r6, [r3, #8]
   1f7d0:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1f7d2:	2bff      	cmp	r3, #255	; 0xff
   1f7d4:	d05f      	beq.n	1f896 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1f7d6:	af12      	add	r7, sp, #72	; 0x48
   1f7d8:	4633      	mov	r3, r6
   1f7da:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f7de:	6859      	ldr	r1, [r3, #4]
   1f7e0:	689a      	ldr	r2, [r3, #8]
   1f7e2:	68db      	ldr	r3, [r3, #12]
   1f7e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f7e6:	af06      	add	r7, sp, #24
   1f7e8:	ab12      	add	r3, sp, #72	; 0x48
   1f7ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f7ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1f7f0:	68a3      	ldr	r3, [r4, #8]
   1f7f2:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f7f6:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1f7fa:	4633      	mov	r3, r6
   1f7fc:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1f800:	6859      	ldr	r1, [r3, #4]
   1f802:	689a      	ldr	r2, [r3, #8]
   1f804:	68db      	ldr	r3, [r3, #12]
   1f806:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f80a:	ae16      	add	r6, sp, #88	; 0x58
   1f80c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f80e:	f8cc 0008 	str.w	r0, [ip, #8]
   1f812:	f8cc 100c 	str.w	r1, [ip, #12]
   1f816:	f8cc 2010 	str.w	r2, [ip, #16]
   1f81a:	f8cc 3014 	str.w	r3, [ip, #20]
   1f81e:	68a3      	ldr	r3, [r4, #8]
   1f820:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f824:	ae1a      	add	r6, sp, #104	; 0x68
   1f826:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1f82a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1f82e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f830:	f8ce 0018 	str.w	r0, [lr, #24]
   1f834:	f8ce 101c 	str.w	r1, [lr, #28]
   1f838:	f8ce 2020 	str.w	r2, [lr, #32]
   1f83c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1f840:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f842:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1f844:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1f848:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1f84c:	6a2b      	ldr	r3, [r5, #32]
   1f84e:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1f850:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1f854:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1f858:	68a1      	ldr	r1, [r4, #8]
   1f85a:	4620      	mov	r0, r4
   1f85c:	f7ff fbf8 	bl	1f050 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f860:	4620      	mov	r0, r4
   1f862:	f7fb ff3d 	bl	1b6e0 <net_send_data>
   1f866:	2800      	cmp	r0, #0
   1f868:	db4a      	blt.n	1f900 <net_icmpv6_send_error+0x294>
   1f86a:	4a2d      	ldr	r2, [pc, #180]	; (1f920 <net_icmpv6_send_error+0x2b4>)
   1f86c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f86e:	3301      	adds	r3, #1
   1f870:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f872:	2500      	movs	r5, #0
   1f874:	e04d      	b.n	1f912 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1f876:	2600      	movs	r6, #0
   1f878:	e730      	b.n	1f6dc <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1f87a:	4620      	mov	r0, r4
   1f87c:	f7fe fe0a 	bl	1e494 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1f880:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1f884:	0a1a      	lsrs	r2, r3, #8
   1f886:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1f888:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1f88a:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1f88e:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1f890:	f880 9007 	strb.w	r9, [r0, #7]
   1f894:	e79a      	b.n	1f7cc <net_icmpv6_send_error+0x160>
   1f896:	68a3      	ldr	r3, [r4, #8]
   1f898:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f89c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1f8a0:	4633      	mov	r3, r6
   1f8a2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f8a6:	6859      	ldr	r1, [r3, #4]
   1f8a8:	689a      	ldr	r2, [r3, #8]
   1f8aa:	68db      	ldr	r3, [r3, #12]
   1f8ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f8b0:	ae0a      	add	r6, sp, #40	; 0x28
   1f8b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f8b4:	f8cc 0018 	str.w	r0, [ip, #24]
   1f8b8:	f8cc 101c 	str.w	r1, [ip, #28]
   1f8bc:	f8cc 2020 	str.w	r2, [ip, #32]
   1f8c0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f8c4:	68a3      	ldr	r3, [r4, #8]
   1f8c6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f8ca:	68ab      	ldr	r3, [r5, #8]
   1f8cc:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f8ce:	3118      	adds	r1, #24
   1f8d0:	4638      	mov	r0, r7
   1f8d2:	f7fc fe6b 	bl	1c5ac <net_if_ipv6_select_src_addr>
   1f8d6:	4603      	mov	r3, r0
   1f8d8:	ae0e      	add	r6, sp, #56	; 0x38
   1f8da:	6800      	ldr	r0, [r0, #0]
   1f8dc:	6859      	ldr	r1, [r3, #4]
   1f8de:	689a      	ldr	r2, [r3, #8]
   1f8e0:	68db      	ldr	r3, [r3, #12]
   1f8e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f8e4:	ae0e      	add	r6, sp, #56	; 0x38
   1f8e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f8e8:	f8c8 0008 	str.w	r0, [r8, #8]
   1f8ec:	f8c8 100c 	str.w	r1, [r8, #12]
   1f8f0:	f8c8 2010 	str.w	r2, [r8, #16]
   1f8f4:	f8c8 3014 	str.w	r3, [r8, #20]
   1f8f8:	e7a2      	b.n	1f840 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f8fa:	f06f 050b 	mvn.w	r5, #11
   1f8fe:	e001      	b.n	1f904 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f900:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f904:	4620      	mov	r0, r4
   1f906:	f7fe faec 	bl	1dee2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f90a:	4a05      	ldr	r2, [pc, #20]	; (1f920 <net_icmpv6_send_error+0x2b4>)
   1f90c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f90e:	3301      	adds	r3, #1
   1f910:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f912:	4628      	mov	r0, r5
   1f914:	b01f      	add	sp, #124	; 0x7c
   1f916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f91a:	f06f 050b 	mvn.w	r5, #11
   1f91e:	e7f4      	b.n	1f90a <net_icmpv6_send_error+0x29e>
   1f920:	20002fd0 	.word	0x20002fd0

0001f924 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f928:	b08d      	sub	sp, #52	; 0x34
   1f92a:	4605      	mov	r5, r0
   1f92c:	460e      	mov	r6, r1
   1f92e:	4692      	mov	sl, r2
   1f930:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f932:	f7fc fe3b 	bl	1c5ac <net_if_ipv6_select_src_addr>
   1f936:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f938:	686b      	ldr	r3, [r5, #4]
   1f93a:	689b      	ldr	r3, [r3, #8]
   1f93c:	4631      	mov	r1, r6
   1f93e:	4628      	mov	r0, r5
   1f940:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f946:	f7fe fa5b 	bl	1de00 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f94a:	273a      	movs	r7, #58	; 0x3a
   1f94c:	9700      	str	r7, [sp, #0]
   1f94e:	462b      	mov	r3, r5
   1f950:	4632      	mov	r2, r6
   1f952:	4641      	mov	r1, r8
   1f954:	f000 fcc1 	bl	202da <net_ipv6_create_raw>
   1f958:	4604      	mov	r4, r0
	pkt->family = family;
   1f95a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f95e:	220a      	movs	r2, #10
   1f960:	f362 03c6 	bfi	r3, r2, #3, #4
   1f964:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f968:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f96a:	7d6b      	ldrb	r3, [r5, #21]
   1f96c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f970:	7d6b      	ldrb	r3, [r5, #21]
   1f972:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f976:	aa0c      	add	r2, sp, #48	; 0x30
   1f978:	2380      	movs	r3, #128	; 0x80
   1f97a:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f982:	2101      	movs	r1, #1
   1f984:	f7fe fbe5 	bl	1e152 <net_pkt_append>
   1f988:	f04f 0b00 	mov.w	fp, #0
   1f98c:	aa0c      	add	r2, sp, #48	; 0x30
   1f98e:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f996:	2101      	movs	r1, #1
   1f998:	4620      	mov	r0, r4
   1f99a:	f7fe fbda 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f99e:	ad0c      	add	r5, sp, #48	; 0x30
   1f9a0:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9a8:	462a      	mov	r2, r5
   1f9aa:	2102      	movs	r1, #2
   1f9ac:	4620      	mov	r0, r4
   1f9ae:	f7fe fbd0 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f9b2:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f9b6:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f9ba:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9c2:	462a      	mov	r2, r5
   1f9c4:	2102      	movs	r1, #2
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f7fe fbc3 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f9cc:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f9d0:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f9d4:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f9d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9dc:	462a      	mov	r2, r5
   1f9de:	2102      	movs	r1, #2
   1f9e0:	4620      	mov	r0, r4
   1f9e2:	f7fe fbb6 	bl	1e152 <net_pkt_append>
	return pkt->frags->data;
   1f9e6:	68a3      	ldr	r3, [r4, #8]
   1f9e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f9ec:	ad04      	add	r5, sp, #16
   1f9ee:	f8d8 0000 	ldr.w	r0, [r8]
   1f9f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f9f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f9fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fa00:	ad04      	add	r5, sp, #16
   1fa02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fa04:	f8cc 0008 	str.w	r0, [ip, #8]
   1fa08:	f8cc 100c 	str.w	r1, [ip, #12]
   1fa0c:	f8cc 2010 	str.w	r2, [ip, #16]
   1fa10:	f8cc 3014 	str.w	r3, [ip, #20]
   1fa14:	68a3      	ldr	r3, [r4, #8]
   1fa16:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fa1a:	ad08      	add	r5, sp, #32
   1fa1c:	6830      	ldr	r0, [r6, #0]
   1fa1e:	6871      	ldr	r1, [r6, #4]
   1fa20:	68b2      	ldr	r2, [r6, #8]
   1fa22:	68f3      	ldr	r3, [r6, #12]
   1fa24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fa26:	ad08      	add	r5, sp, #32
   1fa28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fa2a:	f8ce 0018 	str.w	r0, [lr, #24]
   1fa2e:	f8ce 101c 	str.w	r1, [lr, #28]
   1fa32:	f8ce 2020 	str.w	r2, [lr, #32]
   1fa36:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1fa3a:	68a1      	ldr	r1, [r4, #8]
   1fa3c:	4620      	mov	r0, r4
   1fa3e:	f7ff fb07 	bl	1f050 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1fa42:	4639      	mov	r1, r7
   1fa44:	4620      	mov	r0, r4
   1fa46:	f000 fce6 	bl	20416 <net_ipv6_finalize_raw>
   1fa4a:	4558      	cmp	r0, fp
   1fa4c:	db0c      	blt.n	1fa68 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1fa4e:	4620      	mov	r0, r4
   1fa50:	f7fb fe46 	bl	1b6e0 <net_send_data>
   1fa54:	4558      	cmp	r0, fp
   1fa56:	db07      	blt.n	1fa68 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1fa58:	4a08      	ldr	r2, [pc, #32]	; (1fa7c <net_icmpv6_send_echo_request+0x158>)
   1fa5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1fa5c:	3301      	adds	r3, #1
   1fa5e:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1fa60:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1fa62:	b00d      	add	sp, #52	; 0x34
   1fa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1fa68:	4620      	mov	r0, r4
   1fa6a:	f7fe fa3a 	bl	1dee2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1fa6e:	4a03      	ldr	r2, [pc, #12]	; (1fa7c <net_icmpv6_send_echo_request+0x158>)
   1fa70:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1fa72:	3301      	adds	r3, #1
   1fa74:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1fa76:	f06f 0004 	mvn.w	r0, #4
   1fa7a:	e7f2      	b.n	1fa62 <net_icmpv6_send_echo_request+0x13e>
   1fa7c:	20002fd0 	.word	0x20002fd0

0001fa80 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1fa80:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1fa82:	4c12      	ldr	r4, [pc, #72]	; (1facc <net_icmpv6_input+0x4c>)
   1fa84:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fa86:	3301      	adds	r3, #1
   1fa88:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1fa8a:	4b11      	ldr	r3, [pc, #68]	; (1fad0 <net_icmpv6_input+0x50>)
   1fa8c:	681b      	ldr	r3, [r3, #0]
   1fa8e:	e005      	b.n	1fa9c <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1fa90:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1fa92:	b17b      	cbz	r3, 1fab4 <net_icmpv6_input+0x34>
	return node->next;
   1fa94:	681c      	ldr	r4, [r3, #0]
   1fa96:	b18c      	cbz	r4, 1fabc <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1fa98:	b175      	cbz	r5, 1fab8 <net_icmpv6_input+0x38>
	return node->next;
   1fa9a:	681b      	ldr	r3, [r3, #0]
   1fa9c:	b183      	cbz	r3, 1fac0 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1fa9e:	791c      	ldrb	r4, [r3, #4]
   1faa0:	428c      	cmp	r4, r1
   1faa2:	d1f5      	bne.n	1fa90 <net_icmpv6_input+0x10>
   1faa4:	795c      	ldrb	r4, [r3, #5]
   1faa6:	4294      	cmp	r4, r2
   1faa8:	d001      	beq.n	1faae <net_icmpv6_input+0x2e>
   1faaa:	2c00      	cmp	r4, #0
   1faac:	d1f0      	bne.n	1fa90 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1faae:	689b      	ldr	r3, [r3, #8]
   1fab0:	4798      	blx	r3
   1fab2:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1fab4:	461c      	mov	r4, r3
   1fab6:	e7ee      	b.n	1fa96 <net_icmpv6_input+0x16>
   1fab8:	2300      	movs	r3, #0
   1faba:	e7ef      	b.n	1fa9c <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1fabc:	2300      	movs	r3, #0
   1fabe:	e7ed      	b.n	1fa9c <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1fac0:	4a02      	ldr	r2, [pc, #8]	; (1facc <net_icmpv6_input+0x4c>)
   1fac2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1fac4:	3301      	adds	r3, #1
   1fac6:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1fac8:	2002      	movs	r0, #2
}
   1faca:	bd38      	pop	{r3, r4, r5, pc}
   1facc:	20002fd0 	.word	0x20002fd0
   1fad0:	200023dc 	.word	0x200023dc

0001fad4 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1fad4:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1fad6:	4802      	ldr	r0, [pc, #8]	; (1fae0 <net_icmpv6_init+0xc>)
   1fad8:	f7ff fa8a 	bl	1eff0 <net_icmpv6_register_handler>
   1fadc:	bd08      	pop	{r3, pc}
   1fade:	bf00      	nop
   1fae0:	2000c3b8 	.word	0x2000c3b8

0001fae4 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1fae4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1fae6:	7803      	ldrb	r3, [r0, #0]
   1fae8:	3b01      	subs	r3, #1
   1faea:	b2db      	uxtb	r3, r3
   1faec:	7003      	strb	r3, [r0, #0]
   1faee:	b913      	cbnz	r3, 1faf6 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1faf0:	6903      	ldr	r3, [r0, #16]
   1faf2:	b103      	cbz	r3, 1faf6 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1faf4:	4798      	blx	r3
   1faf6:	bd08      	pop	{r3, pc}

0001faf8 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1faf8:	7803      	ldrb	r3, [r0, #0]
   1fafa:	3301      	adds	r3, #1
   1fafc:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1fafe:	4770      	bx	lr

0001fb00 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1fb00:	2100      	movs	r1, #0
   1fb02:	8903      	ldrh	r3, [r0, #8]
   1fb04:	4299      	cmp	r1, r3
   1fb06:	da17      	bge.n	1fb38 <net_nbr_get+0x38>
{
   1fb08:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1fb0a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1fb0c:	8853      	ldrh	r3, [r2, #2]
   1fb0e:	8894      	ldrh	r4, [r2, #4]
   1fb10:	4423      	add	r3, r4
   1fb12:	3314      	adds	r3, #20
   1fb14:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1fb18:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1fb1a:	5cd3      	ldrb	r3, [r2, r3]
   1fb1c:	b12b      	cbz	r3, 1fb2a <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1fb1e:	3101      	adds	r1, #1
   1fb20:	8903      	ldrh	r3, [r0, #8]
   1fb22:	4299      	cmp	r1, r3
   1fb24:	dbf1      	blt.n	1fb0a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1fb26:	2000      	movs	r0, #0
}
   1fb28:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1fb2a:	f104 0314 	add.w	r3, r4, #20
   1fb2e:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1fb30:	4620      	mov	r0, r4
   1fb32:	f7ff ffe1 	bl	1faf8 <net_nbr_ref>
   1fb36:	bd10      	pop	{r4, pc}
	return NULL;
   1fb38:	2000      	movs	r0, #0
   1fb3a:	4770      	bx	lr

0001fb3c <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1fb3c:	7843      	ldrb	r3, [r0, #1]
   1fb3e:	2bff      	cmp	r3, #255	; 0xff
   1fb40:	d158      	bne.n	1fbf4 <net_nbr_link+0xb8>
{
   1fb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb46:	4690      	mov	r8, r2
   1fb48:	460f      	mov	r7, r1
   1fb4a:	4606      	mov	r6, r0
   1fb4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1fb50:	2400      	movs	r4, #0
   1fb52:	e008      	b.n	1fb66 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1fb54:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1fb58:	4b2a      	ldr	r3, [pc, #168]	; (1fc04 <net_nbr_link+0xc8>)
   1fb5a:	4413      	add	r3, r2
   1fb5c:	7a1b      	ldrb	r3, [r3, #8]
   1fb5e:	b933      	cbnz	r3, 1fb6e <net_nbr_link+0x32>
			avail = i;
   1fb60:	4625      	mov	r5, r4
   1fb62:	e004      	b.n	1fb6e <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1fb64:	3401      	adds	r4, #1
   1fb66:	2c07      	cmp	r4, #7
   1fb68:	dc1e      	bgt.n	1fba8 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1fb6a:	2d00      	cmp	r5, #0
   1fb6c:	dbf2      	blt.n	1fb54 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1fb6e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1fb72:	4b24      	ldr	r3, [pc, #144]	; (1fc04 <net_nbr_link+0xc8>)
   1fb74:	4413      	add	r3, r2
   1fb76:	7a1b      	ldrb	r3, [r3, #8]
   1fb78:	2b00      	cmp	r3, #0
   1fb7a:	d0f3      	beq.n	1fb64 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1fb7c:	4921      	ldr	r1, [pc, #132]	; (1fc04 <net_nbr_link+0xc8>)
   1fb7e:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1fb80:	f898 2004 	ldrb.w	r2, [r8, #4]
   1fb84:	3102      	adds	r1, #2
   1fb86:	f8d8 0000 	ldr.w	r0, [r8]
   1fb8a:	f00a fec5 	bl	2a918 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1fb8e:	4603      	mov	r3, r0
   1fb90:	2800      	cmp	r0, #0
   1fb92:	d1e7      	bne.n	1fb64 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1fb94:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1fb98:	4a1a      	ldr	r2, [pc, #104]	; (1fc04 <net_nbr_link+0xc8>)
   1fb9a:	440a      	add	r2, r1
   1fb9c:	7a11      	ldrb	r1, [r2, #8]
   1fb9e:	3101      	adds	r1, #1
   1fba0:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1fba2:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1fba4:	60b7      	str	r7, [r6, #8]

			return 0;
   1fba6:	e019      	b.n	1fbdc <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1fba8:	2d00      	cmp	r5, #0
   1fbaa:	db27      	blt.n	1fbfc <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1fbac:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1fbb0:	4b14      	ldr	r3, [pc, #80]	; (1fc04 <net_nbr_link+0xc8>)
   1fbb2:	4413      	add	r3, r2
   1fbb4:	7a1a      	ldrb	r2, [r3, #8]
   1fbb6:	3201      	adds	r2, #1
   1fbb8:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1fbba:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1fbbc:	f8d8 1000 	ldr.w	r1, [r8]
   1fbc0:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1fbc4:	b109      	cbz	r1, 1fbca <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fbc6:	2a06      	cmp	r2, #6
   1fbc8:	d90b      	bls.n	1fbe2 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1fbca:	f898 2004 	ldrb.w	r2, [r8, #4]
   1fbce:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1fbd2:	4b0c      	ldr	r3, [pc, #48]	; (1fc04 <net_nbr_link+0xc8>)
   1fbd4:	441d      	add	r5, r3
   1fbd6:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1fbd8:	60b7      	str	r7, [r6, #8]

	return 0;
   1fbda:	2300      	movs	r3, #0
}
   1fbdc:	4618      	mov	r0, r3
   1fbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1fbe2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1fbe6:	4807      	ldr	r0, [pc, #28]	; (1fc04 <net_nbr_link+0xc8>)
   1fbe8:	4418      	add	r0, r3
   1fbea:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fbec:	3002      	adds	r0, #2
   1fbee:	f7e0 fb67 	bl	2c0 <memcpy>
   1fbf2:	e7ea      	b.n	1fbca <net_nbr_link+0x8e>
		return -EALREADY;
   1fbf4:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1fbf8:	4618      	mov	r0, r3
   1fbfa:	4770      	bx	lr
		return -ENOENT;
   1fbfc:	f06f 0301 	mvn.w	r3, #1
   1fc00:	e7ec      	b.n	1fbdc <net_nbr_link+0xa0>
   1fc02:	bf00      	nop
   1fc04:	200023e4 	.word	0x200023e4

0001fc08 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1fc08:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1fc0c:	4b01      	ldr	r3, [pc, #4]	; (1fc14 <net_nbr_get_lladdr+0xc>)
   1fc0e:	4418      	add	r0, r3
   1fc10:	4770      	bx	lr
   1fc12:	bf00      	nop
   1fc14:	200023e4 	.word	0x200023e4

0001fc18 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1fc18:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1fc1a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1fc1e:	428b      	cmp	r3, r1
   1fc20:	d003      	beq.n	1fc2a <ipv6_nbr_set_state+0x12>
   1fc22:	2b05      	cmp	r3, #5
   1fc24:	d001      	beq.n	1fc2a <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1fc26:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1fc2a:	4770      	bx	lr

0001fc2c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1fc2c:	b570      	push	{r4, r5, r6, lr}
   1fc2e:	4605      	mov	r5, r0
   1fc30:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1fc32:	2400      	movs	r4, #0
   1fc34:	e000      	b.n	1fc38 <iface_cb+0xc>
   1fc36:	3401      	adds	r4, #1
   1fc38:	2c07      	cmp	r4, #7
   1fc3a:	dc0c      	bgt.n	1fc56 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1fc3c:	4a06      	ldr	r2, [pc, #24]	; (1fc58 <iface_cb+0x2c>)
   1fc3e:	01e3      	lsls	r3, r4, #7
   1fc40:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1fc42:	5cd3      	ldrb	r3, [r2, r3]
   1fc44:	2b00      	cmp	r3, #0
   1fc46:	d0f6      	beq.n	1fc36 <iface_cb+0xa>
   1fc48:	6883      	ldr	r3, [r0, #8]
   1fc4a:	42ab      	cmp	r3, r5
   1fc4c:	d1f3      	bne.n	1fc36 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1fc4e:	6833      	ldr	r3, [r6, #0]
   1fc50:	6871      	ldr	r1, [r6, #4]
   1fc52:	4798      	blx	r3
   1fc54:	e7ef      	b.n	1fc36 <iface_cb+0xa>
	}
}
   1fc56:	bd70      	pop	{r4, r5, r6, pc}
   1fc58:	2000c3e8 	.word	0x2000c3e8

0001fc5c <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc5e:	b085      	sub	sp, #20
   1fc60:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1fc62:	a903      	add	r1, sp, #12
   1fc64:	f004 ff0a 	bl	24a7c <iface2str>
   1fc68:	4602      	mov	r2, r0
   1fc6a:	4629      	mov	r1, r5
   1fc6c:	4885      	ldr	r0, [pc, #532]	; (1fe84 <iface_cb+0x228>)
   1fc6e:	f7e3 f9fb 	bl	3068 <printk>
	printk("=======================%s\n", extra);
   1fc72:	9903      	ldr	r1, [sp, #12]
   1fc74:	4884      	ldr	r0, [pc, #528]	; (1fe88 <iface_cb+0x22c>)
   1fc76:	f7e3 f9f7 	bl	3068 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc7a:	f3bf 8f5b 	dmb	ish
   1fc7e:	68eb      	ldr	r3, [r5, #12]
   1fc80:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1fc84:	f013 0f01 	tst.w	r3, #1
   1fc88:	d014      	beq.n	1fcb4 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1fc8a:	2318      	movs	r3, #24
   1fc8c:	4a7f      	ldr	r2, [pc, #508]	; (1fe8c <iface_cb+0x230>)
   1fc8e:	7d29      	ldrb	r1, [r5, #20]
   1fc90:	6928      	ldr	r0, [r5, #16]
   1fc92:	f7fe fd45 	bl	1e720 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1fc96:	4601      	mov	r1, r0
   1fc98:	487d      	ldr	r0, [pc, #500]	; (1fe90 <iface_cb+0x234>)
   1fc9a:	f7e3 f9e5 	bl	3068 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1fc9e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1fca0:	487c      	ldr	r0, [pc, #496]	; (1fe94 <iface_cb+0x238>)
   1fca2:	f7e3 f9e1 	bl	3068 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1fca6:	2103      	movs	r1, #3
   1fca8:	487b      	ldr	r0, [pc, #492]	; (1fe98 <iface_cb+0x23c>)
   1fcaa:	f7e3 f9dd 	bl	3068 <printk>
	count = 0;
   1fcae:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fcb0:	463c      	mov	r4, r7
   1fcb2:	e02e      	b.n	1fd12 <iface_cb+0xb6>
		printk("Interface is down.\n");
   1fcb4:	4879      	ldr	r0, [pc, #484]	; (1fe9c <iface_cb+0x240>)
   1fcb6:	f7e3 f9d7 	bl	3068 <printk>
   1fcba:	e0db      	b.n	1fe74 <iface_cb+0x218>
		return "<unknown type>";
   1fcbc:	4a78      	ldr	r2, [pc, #480]	; (1fea0 <iface_cb+0x244>)
   1fcbe:	e006      	b.n	1fcce <iface_cb+0x72>
		return "DHCP";
   1fcc0:	4a78      	ldr	r2, [pc, #480]	; (1fea4 <iface_cb+0x248>)
   1fcc2:	e004      	b.n	1fcce <iface_cb+0x72>
		return "manual";
   1fcc4:	4a78      	ldr	r2, [pc, #480]	; (1fea8 <iface_cb+0x24c>)
   1fcc6:	e002      	b.n	1fcce <iface_cb+0x72>
	return "<invalid type>";
   1fcc8:	4a78      	ldr	r2, [pc, #480]	; (1feac <iface_cb+0x250>)
   1fcca:	e000      	b.n	1fcce <iface_cb+0x72>
		return "autoconf";
   1fccc:	4a78      	ldr	r2, [pc, #480]	; (1feb0 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1fcce:	236c      	movs	r3, #108	; 0x6c
   1fcd0:	fb03 5304 	mla	r3, r3, r4, r5
   1fcd4:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1fcd8:	3301      	adds	r3, #1
   1fcda:	2b03      	cmp	r3, #3
   1fcdc:	d809      	bhi.n	1fcf2 <iface_cb+0x96>
   1fcde:	e8df f003 	tbb	[pc, r3]
   1fce2:	0a02      	.short	0x0a02
   1fce4:	0604      	.short	0x0604
		return "<unknown state>";
   1fce6:	4b73      	ldr	r3, [pc, #460]	; (1feb4 <iface_cb+0x258>)
   1fce8:	e006      	b.n	1fcf8 <iface_cb+0x9c>
		return "preferred";
   1fcea:	4b73      	ldr	r3, [pc, #460]	; (1feb8 <iface_cb+0x25c>)
   1fcec:	e004      	b.n	1fcf8 <iface_cb+0x9c>
		return "deprecated";
   1fcee:	4b73      	ldr	r3, [pc, #460]	; (1febc <iface_cb+0x260>)
   1fcf0:	e002      	b.n	1fcf8 <iface_cb+0x9c>
	return "<invalid state>";
   1fcf2:	4b73      	ldr	r3, [pc, #460]	; (1fec0 <iface_cb+0x264>)
   1fcf4:	e000      	b.n	1fcf8 <iface_cb+0x9c>
		return "tentative";
   1fcf6:	4b73      	ldr	r3, [pc, #460]	; (1fec4 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1fcf8:	266c      	movs	r6, #108	; 0x6c
   1fcfa:	fb06 5604 	mla	r6, r6, r4, r5
   1fcfe:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1fd02:	b368      	cbz	r0, 1fd60 <iface_cb+0x104>
   1fd04:	4870      	ldr	r0, [pc, #448]	; (1fec8 <iface_cb+0x26c>)
   1fd06:	9000      	str	r0, [sp, #0]
   1fd08:	4870      	ldr	r0, [pc, #448]	; (1fecc <iface_cb+0x270>)
   1fd0a:	f7e3 f9ad 	bl	3068 <printk>
		count++;
   1fd0e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fd10:	3401      	adds	r4, #1
   1fd12:	2c02      	cmp	r4, #2
   1fd14:	dc26      	bgt.n	1fd64 <iface_cb+0x108>
		if (!unicast->is_used) {
   1fd16:	236c      	movs	r3, #108	; 0x6c
   1fd18:	fb03 5304 	mla	r3, r3, r4, r5
   1fd1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1fd20:	2b00      	cmp	r3, #0
   1fd22:	d0f5      	beq.n	1fd10 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1fd24:	266c      	movs	r6, #108	; 0x6c
   1fd26:	fb06 f604 	mul.w	r6, r6, r4
   1fd2a:	f106 0120 	add.w	r1, r6, #32
   1fd2e:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1fd30:	2328      	movs	r3, #40	; 0x28
   1fd32:	4a67      	ldr	r2, [pc, #412]	; (1fed0 <iface_cb+0x274>)
   1fd34:	3110      	adds	r1, #16
   1fd36:	200a      	movs	r0, #10
   1fd38:	f7fe fd1c 	bl	1e774 <net_addr_ntop>
   1fd3c:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1fd3e:	442e      	add	r6, r5
   1fd40:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1fd44:	2b03      	cmp	r3, #3
   1fd46:	d8bf      	bhi.n	1fcc8 <iface_cb+0x6c>
   1fd48:	a201      	add	r2, pc, #4	; (adr r2, 1fd50 <iface_cb+0xf4>)
   1fd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fd4e:	bf00      	nop
   1fd50:	0001fcbd 	.word	0x0001fcbd
   1fd54:	0001fccd 	.word	0x0001fccd
   1fd58:	0001fcc1 	.word	0x0001fcc1
   1fd5c:	0001fcc5 	.word	0x0001fcc5
		printk("\t%s %s %s%s\n",
   1fd60:	485c      	ldr	r0, [pc, #368]	; (1fed4 <iface_cb+0x278>)
   1fd62:	e7d0      	b.n	1fd06 <iface_cb+0xaa>
	}

	if (count == 0) {
   1fd64:	b137      	cbz	r7, 1fd74 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1fd66:	2105      	movs	r1, #5
   1fd68:	485b      	ldr	r0, [pc, #364]	; (1fed8 <iface_cb+0x27c>)
   1fd6a:	f7e3 f97d 	bl	3068 <printk>
	count = 0;
   1fd6e:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1fd70:	4634      	mov	r4, r6
   1fd72:	e004      	b.n	1fd7e <iface_cb+0x122>
		printk("\t<none>\n");
   1fd74:	4859      	ldr	r0, [pc, #356]	; (1fedc <iface_cb+0x280>)
   1fd76:	f7e3 f977 	bl	3068 <printk>
   1fd7a:	e7f4      	b.n	1fd66 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1fd7c:	3401      	adds	r4, #1
   1fd7e:	2c04      	cmp	r4, #4
   1fd80:	dc18      	bgt.n	1fdb4 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1fd82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1fd86:	00d3      	lsls	r3, r2, #3
   1fd88:	461a      	mov	r2, r3
   1fd8a:	442b      	add	r3, r5
   1fd8c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1fd90:	f013 0f01 	tst.w	r3, #1
   1fd94:	d0f2      	beq.n	1fd7c <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1fd96:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1fd9a:	4429      	add	r1, r5
   1fd9c:	2328      	movs	r3, #40	; 0x28
   1fd9e:	4a4c      	ldr	r2, [pc, #304]	; (1fed0 <iface_cb+0x274>)
   1fda0:	3118      	adds	r1, #24
   1fda2:	200a      	movs	r0, #10
   1fda4:	f7fe fce6 	bl	1e774 <net_addr_ntop>
		printk("\t%s\n",
   1fda8:	4601      	mov	r1, r0
   1fdaa:	484d      	ldr	r0, [pc, #308]	; (1fee0 <iface_cb+0x284>)
   1fdac:	f7e3 f95c 	bl	3068 <printk>

		count++;
   1fdb0:	3601      	adds	r6, #1
   1fdb2:	e7e3      	b.n	1fd7c <iface_cb+0x120>
	}

	if (count == 0) {
   1fdb4:	b136      	cbz	r6, 1fdc4 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1fdb6:	2102      	movs	r1, #2
   1fdb8:	484a      	ldr	r0, [pc, #296]	; (1fee4 <iface_cb+0x288>)
   1fdba:	f7e3 f955 	bl	3068 <printk>
	count = 0;
   1fdbe:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1fdc0:	4634      	mov	r4, r6
   1fdc2:	e009      	b.n	1fdd8 <iface_cb+0x17c>
		printk("\t<none>\n");
   1fdc4:	4845      	ldr	r0, [pc, #276]	; (1fedc <iface_cb+0x280>)
   1fdc6:	f7e3 f94f 	bl	3068 <printk>
   1fdca:	e7f4      	b.n	1fdb6 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1fdcc:	4b41      	ldr	r3, [pc, #260]	; (1fed4 <iface_cb+0x278>)
   1fdce:	4846      	ldr	r0, [pc, #280]	; (1fee8 <iface_cb+0x28c>)
   1fdd0:	f7e3 f94a 	bl	3068 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1fdd4:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1fdd6:	3401      	adds	r4, #1
   1fdd8:	2c01      	cmp	r4, #1
   1fdda:	dc1e      	bgt.n	1fe1a <iface_cb+0x1be>
		if (!prefix->is_used) {
   1fddc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1fde0:	0093      	lsls	r3, r2, #2
   1fde2:	461a      	mov	r2, r3
   1fde4:	442b      	add	r3, r5
   1fde6:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1fdea:	2b00      	cmp	r3, #0
   1fdec:	d0f3      	beq.n	1fdd6 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1fdee:	0127      	lsls	r7, r4, #4
   1fdf0:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1fdf4:	4429      	add	r1, r5
   1fdf6:	2328      	movs	r3, #40	; 0x28
   1fdf8:	4a35      	ldr	r2, [pc, #212]	; (1fed0 <iface_cb+0x274>)
   1fdfa:	3110      	adds	r1, #16
   1fdfc:	200a      	movs	r0, #10
   1fdfe:	f7fe fcb9 	bl	1e774 <net_addr_ntop>
   1fe02:	4601      	mov	r1, r0
		       prefix->len,
   1fe04:	1b3f      	subs	r7, r7, r4
   1fe06:	00bb      	lsls	r3, r7, #2
   1fe08:	442b      	add	r3, r5
   1fe0a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1fe0e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1fe12:	2b00      	cmp	r3, #0
   1fe14:	d0da      	beq.n	1fdcc <iface_cb+0x170>
   1fe16:	4b2c      	ldr	r3, [pc, #176]	; (1fec8 <iface_cb+0x26c>)
   1fe18:	e7d9      	b.n	1fdce <iface_cb+0x172>
	}

	if (count == 0) {
   1fe1a:	b36e      	cbz	r6, 1fe78 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1fe1c:	2100      	movs	r1, #0
   1fe1e:	4628      	mov	r0, r5
   1fe20:	f7fc fade 	bl	1c3e0 <net_if_ipv6_router_find_default>
	if (router) {
   1fe24:	4604      	mov	r4, r0
   1fe26:	b188      	cbz	r0, 1fe4c <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1fe28:	4830      	ldr	r0, [pc, #192]	; (1feec <iface_cb+0x290>)
   1fe2a:	f7e3 f91d 	bl	3068 <printk>
   1fe2e:	2328      	movs	r3, #40	; 0x28
   1fe30:	4a27      	ldr	r2, [pc, #156]	; (1fed0 <iface_cb+0x274>)
   1fe32:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1fe36:	200a      	movs	r0, #10
   1fe38:	f7fe fc9c 	bl	1e774 <net_addr_ntop>
   1fe3c:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1fe3e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1fe42:	b1eb      	cbz	r3, 1fe80 <iface_cb+0x224>
   1fe44:	4a20      	ldr	r2, [pc, #128]	; (1fec8 <iface_cb+0x26c>)
   1fe46:	482a      	ldr	r0, [pc, #168]	; (1fef0 <iface_cb+0x294>)
   1fe48:	f7e3 f90e 	bl	3068 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1fe4c:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1fe50:	4828      	ldr	r0, [pc, #160]	; (1fef4 <iface_cb+0x298>)
   1fe52:	f7e3 f909 	bl	3068 <printk>
	printk("IPv6 base reachable time : %d\n",
   1fe56:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1fe5a:	4827      	ldr	r0, [pc, #156]	; (1fef8 <iface_cb+0x29c>)
   1fe5c:	f7e3 f904 	bl	3068 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1fe60:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1fe64:	4825      	ldr	r0, [pc, #148]	; (1fefc <iface_cb+0x2a0>)
   1fe66:	f7e3 f8ff 	bl	3068 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1fe6a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1fe6e:	4824      	ldr	r0, [pc, #144]	; (1ff00 <iface_cb+0x2a4>)
   1fe70:	f7e3 f8fa 	bl	3068 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1fe74:	b005      	add	sp, #20
   1fe76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1fe78:	4818      	ldr	r0, [pc, #96]	; (1fedc <iface_cb+0x280>)
   1fe7a:	f7e3 f8f5 	bl	3068 <printk>
   1fe7e:	e7cd      	b.n	1fe1c <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1fe80:	4a14      	ldr	r2, [pc, #80]	; (1fed4 <iface_cb+0x278>)
   1fe82:	e7e0      	b.n	1fe46 <iface_cb+0x1ea>
   1fe84:	00032058 	.word	0x00032058
   1fe88:	00032208 	.word	0x00032208
   1fe8c:	20002970 	.word	0x20002970
   1fe90:	00032080 	.word	0x00032080
   1fe94:	00032090 	.word	0x00032090
   1fe98:	000320a0 	.word	0x000320a0
   1fe9c:	0003206c 	.word	0x0003206c
   1fea0:	00031fc0 	.word	0x00031fc0
   1fea4:	00031ff8 	.word	0x00031ff8
   1fea8:	00032000 	.word	0x00032000
   1feac:	00032008 	.word	0x00032008
   1feb0:	00031fec 	.word	0x00031fec
   1feb4:	00032018 	.word	0x00032018
   1feb8:	00032034 	.word	0x00032034
   1febc:	00032040 	.word	0x00032040
   1fec0:	00031f0c 	.word	0x00031f0c
   1fec4:	00032028 	.word	0x00032028
   1fec8:	0003204c 	.word	0x0003204c
   1fecc:	000320c4 	.word	0x000320c4
   1fed0:	20002988 	.word	0x20002988
   1fed4:	0002f3ac 	.word	0x0002f3ac
   1fed8:	000320e0 	.word	0x000320e0
   1fedc:	000320d4 	.word	0x000320d4
   1fee0:	00032104 	.word	0x00032104
   1fee4:	0003210c 	.word	0x0003210c
   1fee8:	00032128 	.word	0x00032128
   1feec:	00032134 	.word	0x00032134
   1fef0:	0003214c 	.word	0x0003214c
   1fef4:	00032154 	.word	0x00032154
   1fef8:	00032174 	.word	0x00032174
   1fefc:	00032194 	.word	0x00032194
   1ff00:	000321b4 	.word	0x000321b4

0001ff04 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1ff04:	4770      	bx	lr

0001ff06 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1ff06:	4770      	bx	lr

0001ff08 <nbr_lookup>:
{
   1ff08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff0a:	460e      	mov	r6, r1
   1ff0c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ff0e:	2400      	movs	r4, #0
   1ff10:	e000      	b.n	1ff14 <nbr_lookup+0xc>
   1ff12:	3401      	adds	r4, #1
   1ff14:	2c07      	cmp	r4, #7
   1ff16:	dc11      	bgt.n	1ff3c <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1ff18:	4a0a      	ldr	r2, [pc, #40]	; (1ff44 <nbr_lookup+0x3c>)
   1ff1a:	01e3      	lsls	r3, r4, #7
   1ff1c:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1ff1e:	5cd3      	ldrb	r3, [r2, r3]
   1ff20:	2b00      	cmp	r3, #0
   1ff22:	d0f6      	beq.n	1ff12 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1ff24:	68ab      	ldr	r3, [r5, #8]
   1ff26:	42b3      	cmp	r3, r6
   1ff28:	d1f3      	bne.n	1ff12 <nbr_lookup+0xa>
   1ff2a:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ff2c:	2210      	movs	r2, #16
   1ff2e:	4639      	mov	r1, r7
   1ff30:	3004      	adds	r0, #4
   1ff32:	f00a fcf1 	bl	2a918 <memcmp>
   1ff36:	2800      	cmp	r0, #0
   1ff38:	d1eb      	bne.n	1ff12 <nbr_lookup+0xa>
   1ff3a:	e000      	b.n	1ff3e <nbr_lookup+0x36>
	return NULL;
   1ff3c:	2500      	movs	r5, #0
}
   1ff3e:	4628      	mov	r0, r5
   1ff40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff42:	bf00      	nop
   1ff44:	2000c3e8 	.word	0x2000c3e8

0001ff48 <nbr_clear_ns_pending>:
{
   1ff48:	b510      	push	{r4, lr}
   1ff4a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1ff4c:	303c      	adds	r0, #60	; 0x3c
   1ff4e:	f00a fb93 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   1ff52:	6820      	ldr	r0, [r4, #0]
   1ff54:	b118      	cbz	r0, 1ff5e <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1ff56:	f7fd ffc4 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   1ff5a:	2300      	movs	r3, #0
   1ff5c:	6023      	str	r3, [r4, #0]
   1ff5e:	bd10      	pop	{r4, pc}

0001ff60 <ns_reply_timeout>:
{
   1ff60:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1ff62:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ff66:	2300      	movs	r3, #0
   1ff68:	2b07      	cmp	r3, #7
   1ff6a:	dc07      	bgt.n	1ff7c <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1ff6c:	4c0d      	ldr	r4, [pc, #52]	; (1ffa4 <ns_reply_timeout+0x44>)
   1ff6e:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1ff72:	68e2      	ldr	r2, [r4, #12]
   1ff74:	4291      	cmp	r1, r2
   1ff76:	d002      	beq.n	1ff7e <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ff78:	3301      	adds	r3, #1
   1ff7a:	e7f5      	b.n	1ff68 <ns_reply_timeout+0x8>
	return NULL;
   1ff7c:	2400      	movs	r4, #0
	if (!nbr) {
   1ff7e:	b184      	cbz	r4, 1ffa2 <ns_reply_timeout+0x42>
	if (!data->pending) {
   1ff80:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1ff84:	b16b      	cbz	r3, 1ffa2 <ns_reply_timeout+0x42>
   1ff86:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1ff88:	4618      	mov	r0, r3
   1ff8a:	f7fd ffaa 	bl	1dee2 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1ff8e:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1ff92:	f7fd ffa6 	bl	1dee2 <net_pkt_unref>
	data->pending = NULL;
   1ff96:	2300      	movs	r3, #0
   1ff98:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1ff9c:	4620      	mov	r0, r4
   1ff9e:	f7ff fda1 	bl	1fae4 <net_nbr_unref>
   1ffa2:	bd38      	pop	{r3, r4, r5, pc}
   1ffa4:	2000c3e8 	.word	0x2000c3e8

0001ffa8 <nbr_init>:
{
   1ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffac:	b084      	sub	sp, #16
   1ffae:	4604      	mov	r4, r0
   1ffb0:	4616      	mov	r6, r2
   1ffb2:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ffb4:	23ff      	movs	r3, #255	; 0xff
   1ffb6:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1ffb8:	6081      	str	r1, [r0, #8]
   1ffba:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1ffbc:	466d      	mov	r5, sp
   1ffbe:	6810      	ldr	r0, [r2, #0]
   1ffc0:	6851      	ldr	r1, [r2, #4]
   1ffc2:	6892      	ldr	r2, [r2, #8]
   1ffc4:	68f3      	ldr	r3, [r6, #12]
   1ffc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ffc8:	466d      	mov	r5, sp
   1ffca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ffcc:	6078      	str	r0, [r7, #4]
   1ffce:	60b9      	str	r1, [r7, #8]
   1ffd0:	60fa      	str	r2, [r7, #12]
   1ffd2:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1ffd4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1ffd8:	4620      	mov	r0, r4
   1ffda:	f7ff fe1d 	bl	1fc18 <ipv6_nbr_set_state>
   1ffde:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1ffe0:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1ffe4:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1ffe6:	2200      	movs	r2, #0
   1ffe8:	601a      	str	r2, [r3, #0]
   1ffea:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1ffec:	4905      	ldr	r1, [pc, #20]	; (20004 <nbr_init+0x5c>)
   1ffee:	3014      	adds	r0, #20
   1fff0:	f00a fb24 	bl	2a63c <k_delayed_work_init>
   1fff4:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1fff6:	4904      	ldr	r1, [pc, #16]	; (20008 <nbr_init+0x60>)
   1fff8:	303c      	adds	r0, #60	; 0x3c
   1fffa:	f00a fb1f 	bl	2a63c <k_delayed_work_init>
}
   1fffe:	b004      	add	sp, #16
   20000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20004:	00021b35 	.word	0x00021b35
   20008:	0001ff61 	.word	0x0001ff61

0002000c <nbr_new>:
{
   2000c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2000e:	b083      	sub	sp, #12
   20010:	4605      	mov	r5, r0
   20012:	460e      	mov	r6, r1
   20014:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   20016:	4807      	ldr	r0, [pc, #28]	; (20034 <nbr_new+0x28>)
   20018:	f7ff fd72 	bl	1fb00 <net_nbr_get>
	if (!nbr) {
   2001c:	4604      	mov	r4, r0
   2001e:	b128      	cbz	r0, 2002c <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   20020:	9700      	str	r7, [sp, #0]
   20022:	2301      	movs	r3, #1
   20024:	4632      	mov	r2, r6
   20026:	4629      	mov	r1, r5
   20028:	f7ff ffbe 	bl	1ffa8 <nbr_init>
}
   2002c:	4620      	mov	r0, r4
   2002e:	b003      	add	sp, #12
   20030:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20032:	bf00      	nop
   20034:	2000c3dc 	.word	0x2000c3dc

00020038 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   20038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2003c:	b084      	sub	sp, #16
   2003e:	4604      	mov	r4, r0
   20040:	460e      	mov	r6, r1
   20042:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   20044:	480c      	ldr	r0, [pc, #48]	; (20078 <nbr_new+0x40>)
   20046:	f7ff fd5b 	bl	1fb00 <net_nbr_get>

	if (!nbr) {
   2004a:	4605      	mov	r5, r0
   2004c:	b180      	cbz	r0, 20070 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   2004e:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   20050:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   20052:	466c      	mov	r4, sp
   20054:	6830      	ldr	r0, [r6, #0]
   20056:	6871      	ldr	r1, [r6, #4]
   20058:	68b2      	ldr	r2, [r6, #8]
   2005a:	68f3      	ldr	r3, [r6, #12]
   2005c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2005e:	466c      	mov	r4, sp
   20060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20062:	6138      	str	r0, [r7, #16]
   20064:	6179      	str	r1, [r7, #20]
   20066:	61ba      	str	r2, [r7, #24]
   20068:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   2006a:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   2006c:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   20070:	4628      	mov	r0, r5
   20072:	b004      	add	sp, #16
   20074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20078:	2000c800 	.word	0x2000c800

0002007c <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   2007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20080:	4682      	mov	sl, r0
	return pkt->forwarding;
   20082:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   20086:	f013 0f04 	tst.w	r3, #4
   2008a:	d002      	beq.n	20092 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   2008c:	4650      	mov	r0, sl
   2008e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   20092:	6940      	ldr	r0, [r0, #20]
   20094:	6843      	ldr	r3, [r0, #4]
   20096:	689b      	ldr	r3, [r3, #8]
   20098:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   2009a:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   2009e:	4283      	cmp	r3, r0
   200a0:	d0f4      	beq.n	2008c <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   200a2:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   200a6:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   200aa:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   200ac:	2400      	movs	r4, #0
   200ae:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   200b2:	46a1      	mov	r9, r4
	pos = 0;
   200b4:	46a0      	mov	r8, r4
	while (orig_frag) {
   200b6:	e020      	b.n	200fa <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   200b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   200bc:	4650      	mov	r0, sl
   200be:	f7fd febd 	bl	1de3c <net_pkt_get_frag>
   200c2:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   200c4:	4601      	mov	r1, r0
   200c6:	4650      	mov	r0, sl
   200c8:	f7fd ff35 	bl	1df36 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   200cc:	f109 0008 	add.w	r0, r9, #8
   200d0:	f7fb fa4d 	bl	1b56e <net_buf_simple_tailroom>
   200d4:	b284      	uxth	r4, r0
   200d6:	e014      	b.n	20102 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   200d8:	4621      	mov	r1, r4
   200da:	f109 0008 	add.w	r0, r9, #8
   200de:	f7fb f9dd 	bl	1b49c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   200e2:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   200e4:	4622      	mov	r2, r4
   200e6:	4441      	add	r1, r8
   200e8:	f7e0 f8ea 	bl	2c0 <memcpy>
			copy_len -= room_len;
   200ec:	1b36      	subs	r6, r6, r4
   200ee:	b2b6      	uxth	r6, r6
			pos += room_len;
   200f0:	4444      	add	r4, r8
   200f2:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   200f6:	2400      	movs	r4, #0
		if (!copy_len) {
   200f8:	b19e      	cbz	r6, 20122 <update_ll_reserve+0xa6>
	while (orig_frag) {
   200fa:	2f00      	cmp	r7, #0
   200fc:	d0c6      	beq.n	2008c <update_ll_reserve+0x10>
		if (!room_len) {
   200fe:	2c00      	cmp	r4, #0
   20100:	d0da      	beq.n	200b8 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   20102:	42b4      	cmp	r4, r6
   20104:	d3e8      	bcc.n	200d8 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   20106:	4631      	mov	r1, r6
   20108:	f109 0008 	add.w	r0, r9, #8
   2010c:	f7fb f9c6 	bl	1b49c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   20110:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   20112:	4632      	mov	r2, r6
   20114:	4441      	add	r1, r8
   20116:	f7e0 f8d3 	bl	2c0 <memcpy>
			room_len -= copy_len;
   2011a:	1ba4      	subs	r4, r4, r6
   2011c:	b2a4      	uxth	r4, r4
			copy_len = 0;
   2011e:	2600      	movs	r6, #0
   20120:	e7ea      	b.n	200f8 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   20122:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   20124:	2300      	movs	r3, #0
   20126:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   20128:	4638      	mov	r0, r7
   2012a:	f7fd fed4 	bl	1ded6 <net_pkt_frag_unref>
			if (!orig_frag) {
   2012e:	2d00      	cmp	r5, #0
   20130:	d0ac      	beq.n	2008c <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   20132:	462f      	mov	r7, r5
			pos = 0;
   20134:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   20136:	89ae      	ldrh	r6, [r5, #12]
   20138:	e7df      	b.n	200fa <update_ll_reserve+0x7e>

0002013a <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   2013a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2013c:	4604      	mov	r4, r0
   2013e:	460e      	mov	r6, r1
   20140:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   20142:	6880      	ldr	r0, [r0, #8]
   20144:	212c      	movs	r1, #44	; 0x2c
   20146:	3008      	adds	r0, #8
   20148:	f7fb f9a8 	bl	1b49c <net_buf_simple_add>
	return pkt->frags->data;
   2014c:	68a3      	ldr	r3, [r4, #8]
   2014e:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   20150:	2260      	movs	r2, #96	; 0x60
   20152:	701a      	strb	r2, [r3, #0]
   20154:	68a3      	ldr	r3, [r4, #8]
   20156:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   20158:	2500      	movs	r5, #0
   2015a:	705d      	strb	r5, [r3, #1]
   2015c:	68a3      	ldr	r3, [r4, #8]
   2015e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   20160:	709d      	strb	r5, [r3, #2]
   20162:	70dd      	strb	r5, [r3, #3]
   20164:	68a3      	ldr	r3, [r4, #8]
   20166:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   20168:	711d      	strb	r5, [r3, #4]
   2016a:	68a3      	ldr	r3, [r4, #8]
   2016c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   2016e:	3604      	adds	r6, #4
   20170:	715e      	strb	r6, [r3, #5]
   20172:	68a3      	ldr	r3, [r4, #8]
   20174:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   20176:	223a      	movs	r2, #58	; 0x3a
   20178:	719a      	strb	r2, [r3, #6]
   2017a:	68a3      	ldr	r3, [r4, #8]
   2017c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   2017e:	22ff      	movs	r2, #255	; 0xff
   20180:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   20182:	4620      	mov	r0, r4
   20184:	f7fe f986 	bl	1e494 <net_pkt_icmp_data>
   20188:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   2018a:	4620      	mov	r0, r4
   2018c:	f7fe f982 	bl	1e494 <net_pkt_icmp_data>
   20190:	7045      	strb	r5, [r0, #1]
   20192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020194 <nbr_free>:
{
   20194:	b538      	push	{r3, r4, r5, lr}
   20196:	4604      	mov	r4, r0
   20198:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   2019a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2019e:	f00a fa6b 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   201a2:	6828      	ldr	r0, [r5, #0]
   201a4:	b118      	cbz	r0, 201ae <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   201a6:	f7fd fe9c 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   201aa:	2300      	movs	r3, #0
   201ac:	602b      	str	r3, [r5, #0]
   201ae:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   201b0:	3014      	adds	r0, #20
   201b2:	f00a fa61 	bl	2a678 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   201b6:	4620      	mov	r0, r4
   201b8:	f7ff fc94 	bl	1fae4 <net_nbr_unref>
   201bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000201c0 <net_ipv6_nbr_state2str>:
	switch (state) {
   201c0:	2805      	cmp	r0, #5
   201c2:	d80e      	bhi.n	201e2 <net_ipv6_nbr_state2str+0x22>
   201c4:	e8df f000 	tbb	[pc, r0]
   201c8:	07050f03 	.word	0x07050f03
   201cc:	0b09      	.short	0x0b09
		return "incomplete";
   201ce:	4807      	ldr	r0, [pc, #28]	; (201ec <net_ipv6_nbr_state2str+0x2c>)
   201d0:	4770      	bx	lr
		return "stale";
   201d2:	4807      	ldr	r0, [pc, #28]	; (201f0 <net_ipv6_nbr_state2str+0x30>)
   201d4:	4770      	bx	lr
		return "delay";
   201d6:	4807      	ldr	r0, [pc, #28]	; (201f4 <net_ipv6_nbr_state2str+0x34>)
   201d8:	4770      	bx	lr
		return "probe";
   201da:	4807      	ldr	r0, [pc, #28]	; (201f8 <net_ipv6_nbr_state2str+0x38>)
   201dc:	4770      	bx	lr
		return "static";
   201de:	4807      	ldr	r0, [pc, #28]	; (201fc <net_ipv6_nbr_state2str+0x3c>)
   201e0:	4770      	bx	lr
	return "<invalid state>";
   201e2:	4807      	ldr	r0, [pc, #28]	; (20200 <net_ipv6_nbr_state2str+0x40>)
   201e4:	4770      	bx	lr
		return "reachable";
   201e6:	4807      	ldr	r0, [pc, #28]	; (20204 <net_ipv6_nbr_state2str+0x44>)
}
   201e8:	4770      	bx	lr
   201ea:	bf00      	nop
   201ec:	00031ed4 	.word	0x00031ed4
   201f0:	00031eec 	.word	0x00031eec
   201f4:	00031ef4 	.word	0x00031ef4
   201f8:	00031efc 	.word	0x00031efc
   201fc:	00031f04 	.word	0x00031f04
   20200:	00031f0c 	.word	0x00031f0c
   20204:	00031ee0 	.word	0x00031ee0

00020208 <net_ipv6_nbr_foreach>:
{
   20208:	b500      	push	{lr}
   2020a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   2020c:	9000      	str	r0, [sp, #0]
   2020e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   20210:	4669      	mov	r1, sp
   20212:	4803      	ldr	r0, [pc, #12]	; (20220 <net_ipv6_nbr_foreach+0x18>)
   20214:	f7fc fc3a 	bl	1ca8c <net_if_foreach>
}
   20218:	b003      	add	sp, #12
   2021a:	f85d fb04 	ldr.w	pc, [sp], #4
   2021e:	bf00      	nop
   20220:	0001fc2d 	.word	0x0001fc2d

00020224 <net_ipv6_nbr_rm>:
{
   20224:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   20226:	460a      	mov	r2, r1
   20228:	4601      	mov	r1, r0
   2022a:	480d      	ldr	r0, [pc, #52]	; (20260 <net_ipv6_nbr_rm+0x3c>)
   2022c:	f7ff fe6c 	bl	1ff08 <nbr_lookup>
	if (!nbr) {
   20230:	b1a0      	cbz	r0, 2025c <net_ipv6_nbr_rm+0x38>
   20232:	4604      	mov	r4, r0
   20234:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   20236:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2023a:	f00a fa1d 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   2023e:	6828      	ldr	r0, [r5, #0]
   20240:	b118      	cbz	r0, 2024a <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   20242:	f7fd fe4e 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   20246:	2300      	movs	r3, #0
   20248:	602b      	str	r3, [r5, #0]
   2024a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2024c:	3014      	adds	r0, #20
   2024e:	f00a fa13 	bl	2a678 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20252:	4620      	mov	r0, r4
   20254:	f7ff fc46 	bl	1fae4 <net_nbr_unref>
	return true;
   20258:	2001      	movs	r0, #1
   2025a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2025c:	2000      	movs	r0, #0
}
   2025e:	bd38      	pop	{r3, r4, r5, pc}
   20260:	2000c3dc 	.word	0x2000c3dc

00020264 <net_ipv6_unspecified_address>:
}
   20264:	4800      	ldr	r0, [pc, #0]	; (20268 <net_ipv6_unspecified_address+0x4>)
   20266:	4770      	bx	lr
   20268:	00031ec4 	.word	0x00031ec4

0002026c <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   2026c:	b570      	push	{r4, r5, r6, lr}
   2026e:	b082      	sub	sp, #8
   20270:	4604      	mov	r4, r0
   20272:	460e      	mov	r6, r1
   20274:	461d      	mov	r5, r3
   20276:	a902      	add	r1, sp, #8
   20278:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   2027c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20280:	460a      	mov	r2, r1
   20282:	2101      	movs	r1, #1
   20284:	f7fd ff65 	bl	1e152 <net_pkt_append>
   20288:	aa02      	add	r2, sp, #8
   2028a:	2300      	movs	r3, #0
   2028c:	f802 3d04 	strb.w	r3, [r2, #-4]!
   20290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20294:	2101      	movs	r1, #1
   20296:	4620      	mov	r0, r4
   20298:	f7fd ff5b 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   2029c:	022b      	lsls	r3, r5, #8
   2029e:	aa02      	add	r2, sp, #8
   202a0:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   202a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202a8:	2102      	movs	r1, #2
   202aa:	4620      	mov	r0, r4
   202ac:	f7fd ff51 	bl	1e152 <net_pkt_append>
   202b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202b4:	4632      	mov	r2, r6
   202b6:	2110      	movs	r1, #16
   202b8:	4620      	mov	r0, r4
   202ba:	f7fd ff4a 	bl	1e152 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   202be:	b915      	cbnz	r5, 202c6 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   202c0:	4620      	mov	r0, r4
   202c2:	b002      	add	sp, #8
   202c4:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   202c6:	f7ff ffcd 	bl	20264 <net_ipv6_unspecified_address>
   202ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202ce:	4602      	mov	r2, r0
   202d0:	2110      	movs	r1, #16
   202d2:	4620      	mov	r0, r4
   202d4:	f7fd ff3d 	bl	1e152 <net_pkt_append>
   202d8:	e7f2      	b.n	202c0 <create_mldv2+0x54>

000202da <net_ipv6_create_raw>:
{
   202da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202de:	b088      	sub	sp, #32
   202e0:	4604      	mov	r4, r0
   202e2:	460e      	mov	r6, r1
   202e4:	4617      	mov	r7, r2
   202e6:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   202e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   202ec:	f7fd fda6 	bl	1de3c <net_pkt_get_frag>
   202f0:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   202f2:	4601      	mov	r1, r0
   202f4:	4620      	mov	r0, r4
   202f6:	f7fd fe2b 	bl	1df50 <net_pkt_frag_insert>
	return pkt->frags->data;
   202fa:	68a3      	ldr	r3, [r4, #8]
   202fc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   202fe:	2260      	movs	r2, #96	; 0x60
   20300:	701a      	strb	r2, [r3, #0]
   20302:	68a3      	ldr	r3, [r4, #8]
   20304:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   20306:	2300      	movs	r3, #0
   20308:	7053      	strb	r3, [r2, #1]
   2030a:	68a2      	ldr	r2, [r4, #8]
   2030c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   2030e:	7093      	strb	r3, [r2, #2]
   20310:	70d3      	strb	r3, [r2, #3]
   20312:	68a2      	ldr	r2, [r4, #8]
   20314:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   20316:	7193      	strb	r3, [r2, #6]
   20318:	68a3      	ldr	r3, [r4, #8]
   2031a:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   2031c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   20320:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   20322:	68a3      	ldr	r3, [r4, #8]
   20324:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   20326:	79da      	ldrb	r2, [r3, #7]
   20328:	b912      	cbnz	r2, 20330 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   2032a:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   2032e:	71da      	strb	r2, [r3, #7]
   20330:	68a3      	ldr	r3, [r4, #8]
   20332:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20336:	466d      	mov	r5, sp
   20338:	6838      	ldr	r0, [r7, #0]
   2033a:	6879      	ldr	r1, [r7, #4]
   2033c:	68ba      	ldr	r2, [r7, #8]
   2033e:	68fb      	ldr	r3, [r7, #12]
   20340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20342:	466d      	mov	r5, sp
   20344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20346:	f8ce 0018 	str.w	r0, [lr, #24]
   2034a:	f8ce 101c 	str.w	r1, [lr, #28]
   2034e:	f8ce 2020 	str.w	r2, [lr, #32]
   20352:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   20356:	68a3      	ldr	r3, [r4, #8]
   20358:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2035a:	6830      	ldr	r0, [r6, #0]
   2035c:	6871      	ldr	r1, [r6, #4]
   2035e:	68b2      	ldr	r2, [r6, #8]
   20360:	68f3      	ldr	r3, [r6, #12]
   20362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20364:	ad04      	add	r5, sp, #16
   20366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20368:	60b8      	str	r0, [r7, #8]
   2036a:	60f9      	str	r1, [r7, #12]
   2036c:	613a      	str	r2, [r7, #16]
   2036e:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   20370:	2300      	movs	r3, #0
   20372:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   20376:	68a3      	ldr	r3, [r4, #8]
   20378:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   2037a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   2037e:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   20380:	2128      	movs	r1, #40	; 0x28
   20382:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   20386:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2038a:	220a      	movs	r2, #10
   2038c:	f362 03c6 	bfi	r3, r2, #3, #4
   20390:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   20394:	f108 0008 	add.w	r0, r8, #8
   20398:	f7fb f880 	bl	1b49c <net_buf_simple_add>
}
   2039c:	4620      	mov	r0, r4
   2039e:	b008      	add	sp, #32
   203a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000203a4 <net_ipv6_create>:
{
   203a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   203a6:	b083      	sub	sp, #12
   203a8:	4605      	mov	r5, r0
   203aa:	460e      	mov	r6, r1
   203ac:	461f      	mov	r7, r3
	if (!src) {
   203ae:	4614      	mov	r4, r2
   203b0:	b14a      	cbz	r2, 203c6 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   203b2:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   203b4:	b94b      	cbnz	r3, 203ca <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   203b6:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   203b8:	b9fb      	cbnz	r3, 203fa <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   203ba:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   203bc:	b9fb      	cbnz	r3, 203fe <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   203be:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   203c0:	b1fb      	cbz	r3, 20402 <net_ipv6_create+0x5e>
   203c2:	2300      	movs	r3, #0
   203c4:	e002      	b.n	203cc <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   203c6:	68c4      	ldr	r4, [r0, #12]
   203c8:	e7f3      	b.n	203b2 <net_ipv6_create+0xe>
   203ca:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   203cc:	b9db      	cbnz	r3, 20406 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   203ce:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   203d0:	2bff      	cmp	r3, #255	; 0xff
   203d2:	d018      	beq.n	20406 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   203d4:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   203d8:	f7fc fb3c 	bl	1ca54 <net_if_get_by_index>
   203dc:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   203de:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   203e2:	f012 0f40 	tst.w	r2, #64	; 0x40
   203e6:	d114      	bne.n	20412 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   203e8:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   203ea:	9200      	str	r2, [sp, #0]
   203ec:	463a      	mov	r2, r7
   203ee:	4621      	mov	r1, r4
   203f0:	4630      	mov	r0, r6
   203f2:	f7ff ff72 	bl	202da <net_ipv6_create_raw>
}
   203f6:	b003      	add	sp, #12
   203f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   203fa:	2300      	movs	r3, #0
   203fc:	e7e6      	b.n	203cc <net_ipv6_create+0x28>
   203fe:	2300      	movs	r3, #0
   20400:	e7e4      	b.n	203cc <net_ipv6_create+0x28>
   20402:	2301      	movs	r3, #1
   20404:	e7e2      	b.n	203cc <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   20406:	4639      	mov	r1, r7
   20408:	6970      	ldr	r0, [r6, #20]
   2040a:	f7fc f8cf 	bl	1c5ac <net_if_ipv6_select_src_addr>
   2040e:	4604      	mov	r4, r0
   20410:	e7e0      	b.n	203d4 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   20412:	2206      	movs	r2, #6
   20414:	e7e9      	b.n	203ea <net_ipv6_create+0x46>

00020416 <net_ipv6_finalize_raw>:
{
   20416:	b538      	push	{r3, r4, r5, lr}
   20418:	4605      	mov	r5, r0
   2041a:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   2041c:	f7fd fe52 	bl	1e0c4 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   20420:	68a8      	ldr	r0, [r5, #8]
   20422:	4603      	mov	r3, r0
	size_t bytes = 0;
   20424:	2200      	movs	r2, #0
   20426:	e002      	b.n	2042e <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   20428:	8999      	ldrh	r1, [r3, #12]
   2042a:	440a      	add	r2, r1
		buf = buf->frags;
   2042c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2042e:	2b00      	cmp	r3, #0
   20430:	d1fa      	bne.n	20428 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   20432:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   20434:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   20436:	0a11      	lsrs	r1, r2, #8
   20438:	7119      	strb	r1, [r3, #4]
   2043a:	68ab      	ldr	r3, [r5, #8]
   2043c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   2043e:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   20440:	2c11      	cmp	r4, #17
   20442:	d005      	beq.n	20450 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   20444:	2c06      	cmp	r4, #6
   20446:	d008      	beq.n	2045a <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   20448:	2c3a      	cmp	r4, #58	; 0x3a
   2044a:	d00b      	beq.n	20464 <net_ipv6_finalize_raw+0x4e>
}
   2044c:	2000      	movs	r0, #0
   2044e:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   20450:	68a9      	ldr	r1, [r5, #8]
   20452:	4628      	mov	r0, r5
   20454:	f003 fa9b 	bl	2398e <net_udp_set_chksum>
   20458:	e7f8      	b.n	2044c <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   2045a:	68a9      	ldr	r1, [r5, #8]
   2045c:	4628      	mov	r0, r5
   2045e:	f004 f8da 	bl	24616 <net_tcp_set_chksum>
   20462:	e7f3      	b.n	2044c <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   20464:	68a9      	ldr	r1, [r5, #8]
   20466:	4628      	mov	r0, r5
   20468:	f7fe fdf2 	bl	1f050 <net_icmpv6_set_chksum>
   2046c:	e7ee      	b.n	2044c <net_ipv6_finalize_raw+0x36>
	...

00020470 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   20470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20474:	b08d      	sub	sp, #52	; 0x34
   20476:	4680      	mov	r8, r0
   20478:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   2047a:	f240 23ff 	movw	r3, #767	; 0x2ff
   2047e:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20482:	2500      	movs	r5, #0
   20484:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20488:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2048c:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20490:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20494:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20498:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2049c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   204a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   204a4:	6843      	ldr	r3, [r0, #4]
   204a6:	689b      	ldr	r3, [r3, #8]
   204a8:	a908      	add	r1, sp, #32
   204aa:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   204ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   204b0:	f7fd fca6 	bl	1de00 <net_pkt_get_reserve_tx>
   204b4:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   204b6:	a908      	add	r1, sp, #32
   204b8:	4640      	mov	r0, r8
   204ba:	f7fc f877 	bl	1c5ac <net_if_ipv6_select_src_addr>
   204be:	9500      	str	r5, [sp, #0]
   204c0:	4643      	mov	r3, r8
   204c2:	aa08      	add	r2, sp, #32
   204c4:	4601      	mov	r1, r0
   204c6:	4620      	mov	r0, r4
   204c8:	f7ff ff07 	bl	202da <net_ipv6_create_raw>
   204cc:	4604      	mov	r4, r0
   204ce:	6883      	ldr	r3, [r0, #8]
   204d0:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   204d2:	2601      	movs	r6, #1
   204d4:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   204d6:	6883      	ldr	r3, [r0, #8]
   204d8:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   204da:	87c3      	strh	r3, [r0, #62]	; 0x3e
   204dc:	aa0c      	add	r2, sp, #48	; 0x30
   204de:	233a      	movs	r3, #58	; 0x3a
   204e0:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   204e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   204e8:	4631      	mov	r1, r6
   204ea:	f7fd fe32 	bl	1e152 <net_pkt_append>
   204ee:	aa0c      	add	r2, sp, #48	; 0x30
   204f0:	f802 5d16 	strb.w	r5, [r2, #-22]!
   204f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   204f8:	4631      	mov	r1, r6
   204fa:	4620      	mov	r0, r4
   204fc:	f7fd fe29 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   20500:	af0c      	add	r7, sp, #48	; 0x30
   20502:	f240 2305 	movw	r3, #517	; 0x205
   20506:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   2050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2050e:	463a      	mov	r2, r7
   20510:	2102      	movs	r1, #2
   20512:	4620      	mov	r0, r4
   20514:	f7fd fe1d 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   20518:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2051c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20520:	463a      	mov	r2, r7
   20522:	2102      	movs	r1, #2
   20524:	4620      	mov	r0, r4
   20526:	f7fd fe14 	bl	1e152 <net_pkt_append>
   2052a:	aa0c      	add	r2, sp, #48	; 0x30
   2052c:	f802 5d17 	strb.w	r5, [r2, #-23]!
   20530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20534:	4631      	mov	r1, r6
   20536:	4620      	mov	r0, r4
   20538:	f7fd fe0b 	bl	1e152 <net_pkt_append>
   2053c:	aa0c      	add	r2, sp, #48	; 0x30
   2053e:	f802 5d18 	strb.w	r5, [r2, #-24]!
   20542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20546:	4631      	mov	r1, r6
   20548:	4620      	mov	r0, r4
   2054a:	f7fd fe02 	bl	1e152 <net_pkt_append>
   2054e:	aa0c      	add	r2, sp, #48	; 0x30
   20550:	238f      	movs	r3, #143	; 0x8f
   20552:	f802 3d19 	strb.w	r3, [r2, #-25]!
   20556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2055a:	4631      	mov	r1, r6
   2055c:	4620      	mov	r0, r4
   2055e:	f7fd fdf8 	bl	1e152 <net_pkt_append>
   20562:	aa0c      	add	r2, sp, #48	; 0x30
   20564:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   20568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2056c:	4631      	mov	r1, r6
   2056e:	4620      	mov	r0, r4
   20570:	f7fd fdef 	bl	1e152 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   20574:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   20578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2057c:	463a      	mov	r2, r7
   2057e:	2102      	movs	r1, #2
   20580:	4620      	mov	r0, r4
   20582:	f7fd fde6 	bl	1e152 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   20586:	68a3      	ldr	r3, [r4, #8]
   20588:	2234      	movs	r2, #52	; 0x34
   2058a:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   2058c:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20590:	f898 3015 	ldrb.w	r3, [r8, #21]
   20594:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20598:	f898 3015 	ldrb.w	r3, [r8, #21]
   2059c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   205a0:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   205a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205a8:	463a      	mov	r2, r7
   205aa:	2102      	movs	r1, #2
   205ac:	4620      	mov	r0, r4
   205ae:	f7fd fdd0 	bl	1e152 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   205b2:	4649      	mov	r1, r9
   205b4:	4620      	mov	r0, r4
   205b6:	f7fd fcbe 	bl	1df36 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   205ba:	4629      	mov	r1, r5
   205bc:	4620      	mov	r0, r4
   205be:	f7ff ff2a 	bl	20416 <net_ipv6_finalize_raw>
	if (ret < 0) {
   205c2:	1e05      	subs	r5, r0, #0
   205c4:	db35      	blt.n	20632 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   205c6:	2308      	movs	r3, #8
   205c8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   205cc:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   205ce:	213a      	movs	r1, #58	; 0x3a
   205d0:	4620      	mov	r0, r4
   205d2:	f7fe faf0 	bl	1ebb6 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   205d6:	ea6f 2020 	mvn.w	r0, r0, asr #8
   205da:	b2c5      	uxtb	r5, r0
   205dc:	213a      	movs	r1, #58	; 0x3a
   205de:	4620      	mov	r0, r4
   205e0:	f7fe fae9 	bl	1ebb6 <net_calc_chksum>
   205e4:	43c0      	mvns	r0, r0
   205e6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   205ea:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   205ec:	0a03      	lsrs	r3, r0, #8
   205ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   205f2:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   205f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205fa:	9302      	str	r3, [sp, #8]
   205fc:	ab07      	add	r3, sp, #28
   205fe:	9301      	str	r3, [sp, #4]
   20600:	2302      	movs	r3, #2
   20602:	9300      	str	r3, [sp, #0]
   20604:	f10d 031e 	add.w	r3, sp, #30
   20608:	2232      	movs	r2, #50	; 0x32
   2060a:	4631      	mov	r1, r6
   2060c:	4620      	mov	r0, r4
   2060e:	f7fd fe58 	bl	1e2c2 <net_pkt_write>

	ret = net_send_data(pkt);
   20612:	4620      	mov	r0, r4
   20614:	f7fb f864 	bl	1b6e0 <net_send_data>
	if (ret < 0) {
   20618:	1e05      	subs	r5, r0, #0
   2061a:	db0a      	blt.n	20632 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   2061c:	4b0d      	ldr	r3, [pc, #52]	; (20654 <send_mldv2_raw+0x1e4>)
   2061e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20620:	3201      	adds	r2, #1
   20622:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   20624:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   20628:	3201      	adds	r2, #1
   2062a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   2062e:	2500      	movs	r5, #0
   20630:	e00b      	b.n	2064a <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   20632:	4620      	mov	r0, r4
   20634:	f7fd fc55 	bl	1dee2 <net_pkt_unref>
	net_stats.icmp.drop++;
   20638:	4b06      	ldr	r3, [pc, #24]	; (20654 <send_mldv2_raw+0x1e4>)
   2063a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2063c:	3201      	adds	r2, #1
   2063e:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   20640:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   20644:	3201      	adds	r2, #1
   20646:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   2064a:	4628      	mov	r0, r5
   2064c:	b00d      	add	sp, #52	; 0x34
   2064e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20652:	bf00      	nop
   20654:	20002fd0 	.word	0x20002fd0

00020658 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   20658:	b5f0      	push	{r4, r5, r6, r7, lr}
   2065a:	b083      	sub	sp, #12
   2065c:	4605      	mov	r5, r0
   2065e:	460e      	mov	r6, r1
   20660:	4617      	mov	r7, r2
   20662:	6843      	ldr	r3, [r0, #4]
   20664:	689b      	ldr	r3, [r3, #8]
   20666:	2100      	movs	r1, #0
   20668:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2066a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2066e:	f7fd fbc7 	bl	1de00 <net_pkt_get_reserve_tx>
   20672:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   20674:	aa02      	add	r2, sp, #8
   20676:	f44f 7380 	mov.w	r3, #256	; 0x100
   2067a:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   2067e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20682:	2102      	movs	r1, #2
   20684:	f7fd fd65 	bl	1e152 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   20688:	2301      	movs	r3, #1
   2068a:	463a      	mov	r2, r7
   2068c:	4631      	mov	r1, r6
   2068e:	4620      	mov	r0, r4
   20690:	f7ff fdec 	bl	2026c <create_mldv2>
   20694:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   20696:	6881      	ldr	r1, [r0, #8]
   20698:	4628      	mov	r0, r5
   2069a:	f7ff fee9 	bl	20470 <send_mldv2_raw>
   2069e:	4605      	mov	r5, r0

	pkt->frags = NULL;
   206a0:	2300      	movs	r3, #0
   206a2:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   206a4:	4620      	mov	r0, r4
   206a6:	f7fd fc1c 	bl	1dee2 <net_pkt_unref>

	return ret;
}
   206aa:	4628      	mov	r0, r5
   206ac:	b003      	add	sp, #12
   206ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000206b0 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   206b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   206b2:	b087      	sub	sp, #28
   206b4:	4605      	mov	r5, r0
   206b6:	6843      	ldr	r3, [r0, #4]
   206b8:	689b      	ldr	r3, [r3, #8]
   206ba:	2100      	movs	r1, #0
   206bc:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   206be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   206c2:	f7fd fb9d 	bl	1de00 <net_pkt_get_reserve_tx>
   206c6:	4606      	mov	r6, r0
   206c8:	2400      	movs	r4, #0
   206ca:	aa06      	add	r2, sp, #24
   206cc:	f802 4d04 	strb.w	r4, [r2, #-4]!
   206d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   206d4:	2101      	movs	r1, #1
   206d6:	f7fd fd3c 	bl	1e152 <net_pkt_append>
	int i, count = 0;
   206da:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   206dc:	e000      	b.n	206e0 <send_mld_report+0x30>
   206de:	3401      	adds	r4, #1
   206e0:	2c04      	cmp	r4, #4
   206e2:	dc1e      	bgt.n	20722 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   206e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   206e8:	00d3      	lsls	r3, r2, #3
   206ea:	442b      	add	r3, r5
   206ec:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   206f0:	f013 0f01 	tst.w	r3, #1
   206f4:	d0f3      	beq.n	206de <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   206f6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   206fa:	00d3      	lsls	r3, r2, #3
   206fc:	461a      	mov	r2, r3
   206fe:	442b      	add	r3, r5
   20700:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   20704:	f013 0f02 	tst.w	r3, #2
   20708:	d0e9      	beq.n	206de <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   2070a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   2070e:	4429      	add	r1, r5
   20710:	2300      	movs	r3, #0
   20712:	2202      	movs	r2, #2
   20714:	3118      	adds	r1, #24
   20716:	4630      	mov	r0, r6
   20718:	f7ff fda8 	bl	2026c <create_mldv2>
   2071c:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   2071e:	3701      	adds	r7, #1
   20720:	e7dd      	b.n	206de <send_mld_report+0x2e>
	}

	if (count > 0) {
   20722:	2f00      	cmp	r7, #0
   20724:	dd16      	ble.n	20754 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   20726:	68b1      	ldr	r1, [r6, #8]
   20728:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   2072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20730:	9302      	str	r3, [sp, #8]
   20732:	f10d 0315 	add.w	r3, sp, #21
   20736:	9301      	str	r3, [sp, #4]
   20738:	2301      	movs	r3, #1
   2073a:	9300      	str	r3, [sp, #0]
   2073c:	f10d 0316 	add.w	r3, sp, #22
   20740:	2200      	movs	r2, #0
   20742:	4630      	mov	r0, r6
   20744:	f7fd fdbd 	bl	1e2c2 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   20748:	68b1      	ldr	r1, [r6, #8]
   2074a:	4628      	mov	r0, r5
   2074c:	f7ff fe90 	bl	20470 <send_mldv2_raw>

		pkt->frags = NULL;
   20750:	2300      	movs	r3, #0
   20752:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   20754:	4630      	mov	r0, r6
   20756:	f7fd fbc4 	bl	1dee2 <net_pkt_unref>
}
   2075a:	b007      	add	sp, #28
   2075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020760 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   20760:	b570      	push	{r4, r5, r6, lr}
   20762:	b08a      	sub	sp, #40	; 0x28
   20764:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   20766:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20768:	2200      	movs	r2, #0
   2076a:	e002      	b.n	20772 <handle_mld_query+0x12>
		bytes += buf->len;
   2076c:	8999      	ldrh	r1, [r3, #12]
   2076e:	440a      	add	r2, r1
		buf = buf->frags;
   20770:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20772:	2b00      	cmp	r3, #0
   20774:	d1fa      	bne.n	2076c <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   20776:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   20778:	4a37      	ldr	r2, [pc, #220]	; (20858 <handle_mld_query+0xf8>)
   2077a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   2077e:	3301      	adds	r3, #1
   20780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   20784:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   20788:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   2078c:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   2078e:	3104      	adds	r1, #4
   20790:	f10d 0212 	add.w	r2, sp, #18
   20794:	b289      	uxth	r1, r1
   20796:	4628      	mov	r0, r5
   20798:	f7fd fe72 	bl	1e480 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   2079c:	f10d 0316 	add.w	r3, sp, #22
   207a0:	aa04      	add	r2, sp, #16
   207a2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   207a6:	f7fd fd62 	bl	1e26e <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   207aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   207ae:	2600      	movs	r6, #0
   207b0:	9600      	str	r6, [sp, #0]
   207b2:	2302      	movs	r3, #2
   207b4:	aa04      	add	r2, sp, #16
   207b6:	f7fd fd12 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   207ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   207be:	ab06      	add	r3, sp, #24
   207c0:	9300      	str	r3, [sp, #0]
   207c2:	2310      	movs	r3, #16
   207c4:	eb0d 0203 	add.w	r2, sp, r3
   207c8:	f7fd fd09 	bl	1e1de <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   207cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   207d0:	9600      	str	r6, [sp, #0]
   207d2:	2302      	movs	r3, #2
   207d4:	aa04      	add	r2, sp, #16
   207d6:	f7fd fd02 	bl	1e1de <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   207da:	ab05      	add	r3, sp, #20
   207dc:	aa04      	add	r2, sp, #16
   207de:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   207e2:	68a8      	ldr	r0, [r5, #8]
   207e4:	f7fd fd43 	bl	1e26e <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   207e8:	b358      	cbz	r0, 20842 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   207ea:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   207ee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   207f2:	0112      	lsls	r2, r2, #4
   207f4:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   207f6:	4413      	add	r3, r2
   207f8:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   207fa:	3344      	adds	r3, #68	; 0x44
   207fc:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   207fe:	429c      	cmp	r4, r3
   20800:	d307      	bcc.n	20812 <handle_mld_query+0xb2>
   20802:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   20806:	d804      	bhi.n	20812 <handle_mld_query+0xb2>
	return pkt->frags->data;
   20808:	68ab      	ldr	r3, [r5, #8]
   2080a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   2080c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2080e:	2b01      	cmp	r3, #1
   20810:	d006      	beq.n	20820 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20812:	a903      	add	r1, sp, #12
   20814:	4628      	mov	r0, r5
   20816:	f7fe fc68 	bl	1f0ea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   2081a:	b148      	cbz	r0, 20830 <handle_mld_query+0xd0>
   2081c:	7843      	ldrb	r3, [r0, #1]
   2081e:	b93b      	cbnz	r3, 20830 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   20820:	f7ff fd20 	bl	20264 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20824:	2210      	movs	r2, #16
   20826:	4601      	mov	r1, r0
   20828:	a806      	add	r0, sp, #24
   2082a:	f00a f875 	bl	2a918 <memcmp>
   2082e:	b178      	cbz	r0, 20850 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   20830:	4a09      	ldr	r2, [pc, #36]	; (20858 <handle_mld_query+0xf8>)
   20832:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   20836:	3301      	adds	r3, #1
   20838:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   2083c:	2002      	movs	r0, #2
   2083e:	b00a      	add	sp, #40	; 0x28
   20840:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   20842:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   20846:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2084a:	429a      	cmp	r2, r3
   2084c:	d1cd      	bne.n	207ea <handle_mld_query+0x8a>
   2084e:	e7ef      	b.n	20830 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   20850:	6968      	ldr	r0, [r5, #20]
   20852:	f7ff ff2d 	bl	206b0 <send_mld_report>
   20856:	e7eb      	b.n	20830 <handle_mld_query+0xd0>
   20858:	20002fd0 	.word	0x20002fd0

0002085c <net_ipv6_finalize>:
{
   2085c:	b508      	push	{r3, lr}
   2085e:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   20860:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   20864:	f012 0f40 	tst.w	r2, #64	; 0x40
   20868:	d104      	bne.n	20874 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   2086a:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   2086c:	4618      	mov	r0, r3
   2086e:	f7ff fdd2 	bl	20416 <net_ipv6_finalize_raw>
}
   20872:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   20874:	2106      	movs	r1, #6
   20876:	e7f9      	b.n	2086c <net_ipv6_finalize+0x10>

00020878 <net_ipv6_nbr_lookup>:
{
   20878:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   2087a:	460a      	mov	r2, r1
   2087c:	4601      	mov	r1, r0
   2087e:	4802      	ldr	r0, [pc, #8]	; (20888 <net_ipv6_nbr_lookup+0x10>)
   20880:	f7ff fb42 	bl	1ff08 <nbr_lookup>
}
   20884:	bd08      	pop	{r3, pc}
   20886:	bf00      	nop
   20888:	2000c3dc 	.word	0x2000c3dc

0002088c <net_ipv6_send_na>:
{
   2088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20890:	b093      	sub	sp, #76	; 0x4c
   20892:	4605      	mov	r5, r0
   20894:	468b      	mov	fp, r1
   20896:	4692      	mov	sl, r2
   20898:	4699      	mov	r9, r3
   2089a:	6843      	ldr	r3, [r0, #4]
   2089c:	689b      	ldr	r3, [r3, #8]
   2089e:	4611      	mov	r1, r2
   208a0:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   208a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   208a6:	f7fd faab 	bl	1de00 <net_pkt_get_reserve_tx>
   208aa:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   208ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   208b0:	f7fd fac4 	bl	1de3c <net_pkt_get_frag>
   208b4:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   208b6:	4601      	mov	r1, r0
   208b8:	4620      	mov	r0, r4
   208ba:	f7fd fb3c 	bl	1df36 <net_pkt_frag_add>
	pkt->iface = iface;
   208be:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   208c0:	7d6b      	ldrb	r3, [r5, #21]
   208c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   208c6:	7d6b      	ldrb	r3, [r5, #21]
   208c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   208cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   208d0:	220a      	movs	r2, #10
   208d2:	f362 03c6 	bfi	r3, r2, #3, #4
   208d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   208da:	2328      	movs	r3, #40	; 0x28
   208dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   208e0:	68a3      	ldr	r3, [r4, #8]
   208e2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   208e4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   208e8:	461a      	mov	r2, r3
   208ea:	2100      	movs	r1, #0
   208ec:	1ac0      	subs	r0, r0, r3
   208ee:	f00a f8a7 	bl	2aa40 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   208f2:	2300      	movs	r3, #0
   208f4:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   208f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   208fa:	7d2b      	ldrb	r3, [r5, #20]
   208fc:	2b06      	cmp	r3, #6
   208fe:	f000 8092 	beq.w	20a26 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   20902:	2b08      	cmp	r3, #8
   20904:	f000 808d 	beq.w	20a22 <net_ipv6_send_na+0x196>
	return 0;
   20908:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   2090a:	f04f 0800 	mov.w	r8, #0
   2090e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   20912:	f106 0514 	add.w	r5, r6, #20
   20916:	2288      	movs	r2, #136	; 0x88
   20918:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   2091c:	4620      	mov	r0, r4
   2091e:	f7ff fc0c 	bl	2013a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   20922:	4629      	mov	r1, r5
   20924:	f107 0008 	add.w	r0, r7, #8
   20928:	f7fa fdb8 	bl	1b49c <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2092c:	a901      	add	r1, sp, #4
   2092e:	4620      	mov	r0, r4
   20930:	f7fe fdd8 	bl	1f4e4 <net_icmpv6_get_na_hdr>
   20934:	4607      	mov	r7, r0
	return pkt->frags->data;
   20936:	68a3      	ldr	r3, [r4, #8]
   20938:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2093c:	ad06      	add	r5, sp, #24
   2093e:	f8db 0000 	ldr.w	r0, [fp]
   20942:	f8db 1004 	ldr.w	r1, [fp, #4]
   20946:	f8db 2008 	ldr.w	r2, [fp, #8]
   2094a:	f8db 300c 	ldr.w	r3, [fp, #12]
   2094e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20950:	ad06      	add	r5, sp, #24
   20952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20954:	f8ce 0008 	str.w	r0, [lr, #8]
   20958:	f8ce 100c 	str.w	r1, [lr, #12]
   2095c:	f8ce 2010 	str.w	r2, [lr, #16]
   20960:	f8ce 3014 	str.w	r3, [lr, #20]
   20964:	68a3      	ldr	r3, [r4, #8]
   20966:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   2096a:	ad0a      	add	r5, sp, #40	; 0x28
   2096c:	f8da 0000 	ldr.w	r0, [sl]
   20970:	f8da 1004 	ldr.w	r1, [sl, #4]
   20974:	f8da 2008 	ldr.w	r2, [sl, #8]
   20978:	f8da 300c 	ldr.w	r3, [sl, #12]
   2097c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2097e:	ad0a      	add	r5, sp, #40	; 0x28
   20980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20982:	f8cc 0018 	str.w	r0, [ip, #24]
   20986:	f8cc 101c 	str.w	r1, [ip, #28]
   2098a:	f8cc 2020 	str.w	r2, [ip, #32]
   2098e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   20992:	ad0e      	add	r5, sp, #56	; 0x38
   20994:	f8d9 0000 	ldr.w	r0, [r9]
   20998:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2099c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   209a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   209a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   209a6:	ad0e      	add	r5, sp, #56	; 0x38
   209a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   209aa:	6078      	str	r0, [r7, #4]
   209ac:	60b9      	str	r1, [r7, #8]
   209ae:	60fa      	str	r2, [r7, #12]
   209b0:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   209b2:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   209b6:	4620      	mov	r0, r4
   209b8:	f7fd fd6c 	bl	1e494 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   209bc:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   209c0:	2302      	movs	r3, #2
   209c2:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   209c4:	08f3      	lsrs	r3, r6, #3
   209c6:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   209c8:	f89a 2014 	ldrb.w	r2, [sl, #20]
   209cc:	f8da 1010 	ldr.w	r1, [sl, #16]
   209d0:	301a      	adds	r0, #26
   209d2:	f7df fc75 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   209d6:	f89a 2014 	ldrb.w	r2, [sl, #20]
   209da:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   209dc:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   209de:	3a02      	subs	r2, #2
   209e0:	4641      	mov	r1, r8
   209e2:	4428      	add	r0, r5
   209e4:	f00a f82c 	bl	2aa40 <memset>
	na_hdr->flags = flags;
   209e8:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   209ec:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   209ee:	4639      	mov	r1, r7
   209f0:	4620      	mov	r0, r4
   209f2:	f7fe fdac 	bl	1f54e <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   209f6:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   209f8:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   209fa:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   209fc:	68a1      	ldr	r1, [r4, #8]
   209fe:	4620      	mov	r0, r4
   20a00:	f7fe fb26 	bl	1f050 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20a04:	4620      	mov	r0, r4
   20a06:	f7fa fe6b 	bl	1b6e0 <net_send_data>
   20a0a:	4540      	cmp	r0, r8
   20a0c:	db0d      	blt.n	20a2a <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   20a0e:	4a0d      	ldr	r2, [pc, #52]	; (20a44 <net_ipv6_send_na+0x1b8>)
   20a10:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20a14:	3301      	adds	r3, #1
   20a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20a1a:	4640      	mov	r0, r8
}
   20a1c:	b013      	add	sp, #76	; 0x4c
   20a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20a22:	2610      	movs	r6, #16
   20a24:	e771      	b.n	2090a <net_ipv6_send_na+0x7e>
		return 8;
   20a26:	2608      	movs	r6, #8
   20a28:	e76f      	b.n	2090a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   20a2a:	4620      	mov	r0, r4
   20a2c:	f7fd fa59 	bl	1dee2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20a30:	4a04      	ldr	r2, [pc, #16]	; (20a44 <net_ipv6_send_na+0x1b8>)
   20a32:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20a36:	3301      	adds	r3, #1
   20a38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20a3c:	f06f 0015 	mvn.w	r0, #21
   20a40:	e7ec      	b.n	20a1c <net_ipv6_send_na+0x190>
   20a42:	bf00      	nop
   20a44:	20002fd0 	.word	0x20002fd0

00020a48 <net_ipv6_nbr_set_reachable_timer>:
{
   20a48:	b508      	push	{r3, lr}
   20a4a:	68c9      	ldr	r1, [r1, #12]
   20a4c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   20a50:	3114      	adds	r1, #20
   20a52:	4802      	ldr	r0, [pc, #8]	; (20a5c <net_ipv6_nbr_set_reachable_timer+0x14>)
   20a54:	f009 fe6a 	bl	2a72c <k_delayed_work_submit_to_queue>
   20a58:	bd08      	pop	{r3, pc}
   20a5a:	bf00      	nop
   20a5c:	200030f0 	.word	0x200030f0

00020a60 <handle_na_input>:
{
   20a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a64:	b090      	sub	sp, #64	; 0x40
   20a66:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20a68:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20a6a:	2200      	movs	r2, #0
   20a6c:	e002      	b.n	20a74 <handle_na_input+0x14>
		bytes += buf->len;
   20a6e:	8999      	ldrh	r1, [r3, #12]
   20a70:	440a      	add	r2, r1
		buf = buf->frags;
   20a72:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20a74:	2b00      	cmp	r3, #0
   20a76:	d1fa      	bne.n	20a6e <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20a78:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   20a7a:	a90a      	add	r1, sp, #40	; 0x28
   20a7c:	4620      	mov	r0, r4
   20a7e:	f7fe fd31 	bl	1f4e4 <net_icmpv6_get_na_hdr>
   20a82:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   20a84:	4aaf      	ldr	r2, [pc, #700]	; (20d44 <handle_na_input+0x2e4>)
   20a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20a8a:	3301      	adds	r3, #1
   20a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20a90:	2d41      	cmp	r5, #65	; 0x41
   20a92:	d904      	bls.n	20a9e <handle_na_input+0x3e>
	return pkt->frags->data;
   20a94:	68a3      	ldr	r3, [r4, #8]
   20a96:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20a98:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20a9a:	2bff      	cmp	r3, #255	; 0xff
   20a9c:	d010      	beq.n	20ac0 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20a9e:	a905      	add	r1, sp, #20
   20aa0:	4620      	mov	r0, r4
   20aa2:	f7fe fb22 	bl	1f0ea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20aa6:	b108      	cbz	r0, 20aac <handle_na_input+0x4c>
   20aa8:	7843      	ldrb	r3, [r0, #1]
   20aaa:	b1cb      	cbz	r3, 20ae0 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   20aac:	4aa5      	ldr	r2, [pc, #660]	; (20d44 <handle_na_input+0x2e4>)
   20aae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20ab2:	3301      	adds	r3, #1
   20ab4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20ab8:	2002      	movs	r0, #2
}
   20aba:	b010      	add	sp, #64	; 0x40
   20abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   20ac0:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20ac2:	2bff      	cmp	r3, #255	; 0xff
   20ac4:	d0eb      	beq.n	20a9e <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20ac6:	a905      	add	r1, sp, #20
   20ac8:	4620      	mov	r0, r4
   20aca:	f7fe fd0b 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20ace:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   20ad0:	f013 0f40 	tst.w	r3, #64	; 0x40
   20ad4:	d004      	beq.n	20ae0 <handle_na_input+0x80>
   20ad6:	68a3      	ldr	r3, [r4, #8]
   20ad8:	689b      	ldr	r3, [r3, #8]
   20ada:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   20adc:	2bff      	cmp	r3, #255	; 0xff
   20ade:	d0de      	beq.n	20a9e <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   20ae0:	2314      	movs	r3, #20
   20ae2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20ae6:	a90f      	add	r1, sp, #60	; 0x3c
   20ae8:	4620      	mov	r0, r4
   20aea:	f7fe fcc9 	bl	1f480 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   20aee:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20af0:	2600      	movs	r6, #0
	while (buf) {
   20af2:	b11b      	cbz	r3, 20afc <handle_na_input+0x9c>
		bytes += buf->len;
   20af4:	899a      	ldrh	r2, [r3, #12]
   20af6:	4416      	add	r6, r2
		buf = buf->frags;
   20af8:	681b      	ldr	r3, [r3, #0]
   20afa:	e7fa      	b.n	20af2 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20afc:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   20afe:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20b00:	e00b      	b.n	20b1a <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   20b02:	00db      	lsls	r3, r3, #3
   20b04:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20b06:	4413      	add	r3, r2
   20b08:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20b0e:	4293      	cmp	r3, r2
   20b10:	d9cc      	bls.n	20aac <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20b12:	a90f      	add	r1, sp, #60	; 0x3c
   20b14:	4620      	mov	r0, r4
   20b16:	f7fe fcb3 	bl	1f480 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20b1a:	b190      	cbz	r0, 20b42 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   20b1c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20b20:	4296      	cmp	r6, r2
   20b22:	d90e      	bls.n	20b42 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   20b24:	7843      	ldrb	r3, [r0, #1]
   20b26:	b163      	cbz	r3, 20b42 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   20b28:	7801      	ldrb	r1, [r0, #0]
   20b2a:	2902      	cmp	r1, #2
   20b2c:	d1e9      	bne.n	20b02 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20b2e:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   20b32:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20b36:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   20b38:	4415      	add	r5, r2
   20b3a:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20b3c:	3506      	adds	r5, #6
   20b3e:	b2ad      	uxth	r5, r5
			break;
   20b40:	e7df      	b.n	20b02 <handle_na_input+0xa2>
	return pkt->iface;
   20b42:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20b46:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20b4a:	2600      	movs	r6, #0
   20b4c:	e003      	b.n	20b56 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20b4e:	f1ba 0f00 	cmp.w	sl, #0
   20b52:	d11f      	bne.n	20b94 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20b54:	3601      	adds	r6, #1
   20b56:	2e02      	cmp	r6, #2
   20b58:	dc23      	bgt.n	20ba2 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   20b5a:	236c      	movs	r3, #108	; 0x6c
   20b5c:	fb03 8306 	mla	r3, r3, r6, r8
   20b60:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   20b64:	f1ba 0f00 	cmp.w	sl, #0
   20b68:	d0f4      	beq.n	20b54 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20b6a:	236c      	movs	r3, #108	; 0x6c
   20b6c:	fb03 8306 	mla	r3, r3, r6, r8
   20b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   20b72:	2b0a      	cmp	r3, #10
   20b74:	d1ee      	bne.n	20b54 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   20b76:	216c      	movs	r1, #108	; 0x6c
   20b78:	fb01 f106 	mul.w	r1, r1, r6
   20b7c:	3120      	adds	r1, #32
   20b7e:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20b80:	2210      	movs	r2, #16
   20b82:	4411      	add	r1, r2
   20b84:	4648      	mov	r0, r9
   20b86:	f009 fec7 	bl	2a918 <memcmp>
   20b8a:	2800      	cmp	r0, #0
   20b8c:	d0df      	beq.n	20b4e <handle_na_input+0xee>
		return false;
   20b8e:	f04f 0a00 	mov.w	sl, #0
   20b92:	e7dc      	b.n	20b4e <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   20b94:	236c      	movs	r3, #108	; 0x6c
   20b96:	fb03 f306 	mul.w	r3, r3, r6
   20b9a:	3320      	adds	r3, #32
   20b9c:	4443      	add	r3, r8
   20b9e:	330c      	adds	r3, #12
   20ba0:	e000      	b.n	20ba4 <handle_na_input+0x144>
	return NULL;
   20ba2:	2300      	movs	r3, #0
	if (ifaddr) {
   20ba4:	b17b      	cbz	r3, 20bc6 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   20ba6:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   20baa:	2b00      	cmp	r3, #0
   20bac:	f47f af7e 	bne.w	20aac <handle_na_input+0x4c>
   20bb0:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20bb2:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   20bb4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20bb8:	429a      	cmp	r2, r3
   20bba:	f43f af77 	beq.w	20aac <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   20bbe:	4649      	mov	r1, r9
   20bc0:	f7fb fa0a 	bl	1bfd8 <net_if_ipv6_dad_failed>
   20bc4:	e772      	b.n	20aac <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   20bc6:	2300      	movs	r3, #0
   20bc8:	9303      	str	r3, [sp, #12]
   20bca:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   20bcc:	1d3a      	adds	r2, r7, #4
   20bce:	6961      	ldr	r1, [r4, #20]
   20bd0:	485d      	ldr	r0, [pc, #372]	; (20d48 <handle_na_input+0x2e8>)
   20bd2:	f7ff f999 	bl	1ff08 <nbr_lookup>
	if (!nbr) {
   20bd6:	4606      	mov	r6, r0
   20bd8:	2800      	cmp	r0, #0
   20bda:	f000 8107 	beq.w	20dec <handle_na_input+0x38c>
	if (tllao_offset) {
   20bde:	b995      	cbnz	r5, 20c06 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   20be0:	7873      	ldrb	r3, [r6, #1]
   20be2:	2bff      	cmp	r3, #255	; 0xff
   20be4:	d135      	bne.n	20c52 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   20be6:	bb2d      	cbnz	r5, 20c34 <handle_na_input+0x1d4>
			return false;
   20be8:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   20bea:	2b00      	cmp	r3, #0
   20bec:	f43f af5e 	beq.w	20aac <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   20bf0:	4620      	mov	r0, r4
   20bf2:	f7fd f976 	bl	1dee2 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   20bf6:	4a53      	ldr	r2, [pc, #332]	; (20d44 <handle_na_input+0x2e4>)
   20bf8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20bfc:	3301      	adds	r3, #1
   20bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   20c02:	2000      	movs	r0, #0
   20c04:	e759      	b.n	20aba <handle_na_input+0x5a>
   20c06:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   20c08:	7d1b      	ldrb	r3, [r3, #20]
   20c0a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   20c0e:	f10d 020e 	add.w	r2, sp, #14
   20c12:	9200      	str	r2, [sp, #0]
   20c14:	f10d 020a 	add.w	r2, sp, #10
   20c18:	4629      	mov	r1, r5
   20c1a:	68a0      	ldr	r0, [r4, #8]
   20c1c:	f7fd fadf 	bl	1e1de <net_frag_read>
		if (!frag && pos == 0xffff) {
   20c20:	2800      	cmp	r0, #0
   20c22:	d1dd      	bne.n	20be0 <handle_na_input+0x180>
   20c24:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   20c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20c2c:	429a      	cmp	r2, r3
   20c2e:	d1d7      	bne.n	20be0 <handle_na_input+0x180>
			return false;
   20c30:	2300      	movs	r3, #0
   20c32:	e7da      	b.n	20bea <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   20c34:	f89d 300d 	ldrb.w	r3, [sp, #13]
   20c38:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   20c3c:	aa10      	add	r2, sp, #64	; 0x40
   20c3e:	f10d 030e 	add.w	r3, sp, #14
   20c42:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   20c46:	6961      	ldr	r1, [r4, #20]
   20c48:	4630      	mov	r0, r6
   20c4a:	f7fe ff77 	bl	1fb3c <net_nbr_link>
   20c4e:	2800      	cmp	r0, #0
   20c50:	d14a      	bne.n	20ce8 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   20c52:	7870      	ldrb	r0, [r6, #1]
   20c54:	f7fe ffd8 	bl	1fc08 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   20c58:	4680      	mov	r8, r0
   20c5a:	2800      	cmp	r0, #0
   20c5c:	f000 80c8 	beq.w	20df0 <handle_na_input+0x390>
	if (tllao_offset) {
   20c60:	2d00      	cmp	r5, #0
   20c62:	d145      	bne.n	20cf0 <handle_na_input+0x290>
	bool lladdr_changed = false;
   20c64:	2700      	movs	r7, #0
   20c66:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20c68:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20c6c:	2b00      	cmp	r3, #0
   20c6e:	d155      	bne.n	20d1c <handle_na_input+0x2bc>
		if (!tllao_offset) {
   20c70:	2d00      	cmp	r5, #0
   20c72:	f000 80bf 	beq.w	20df4 <handle_na_input+0x394>
		if (lladdr_changed) {
   20c76:	b11f      	cbz	r7, 20c80 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20c78:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20c7c:	2a06      	cmp	r2, #6
   20c7e:	d941      	bls.n	20d04 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20c80:	a905      	add	r1, sp, #20
   20c82:	4620      	mov	r0, r4
   20c84:	f7fe fc2e 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20c88:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   20c8a:	f013 0f40 	tst.w	r3, #64	; 0x40
   20c8e:	d040      	beq.n	20d12 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20c90:	2101      	movs	r1, #1
   20c92:	4630      	mov	r0, r6
   20c94:	f7fe ffc0 	bl	1fc18 <ipv6_nbr_set_state>
   20c98:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   20c9a:	2200      	movs	r2, #0
   20c9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   20ca0:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   20ca2:	3014      	adds	r0, #20
   20ca4:	f009 fce8 	bl	2a678 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20ca8:	4631      	mov	r1, r6
   20caa:	6960      	ldr	r0, [r4, #20]
   20cac:	f7ff fecc 	bl	20a48 <net_ipv6_nbr_set_reachable_timer>
   20cb0:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20cb2:	a905      	add	r1, sp, #20
   20cb4:	4620      	mov	r0, r4
   20cb6:	f7fe fc15 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   20cba:	7803      	ldrb	r3, [r0, #0]
   20cbc:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   20cbe:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20cc2:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   20cc4:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   20cc6:	2d00      	cmp	r5, #0
   20cc8:	f000 8098 	beq.w	20dfc <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   20ccc:	4628      	mov	r0, r5
   20cce:	f7fa fd07 	bl	1b6e0 <net_send_data>
   20cd2:	2800      	cmp	r0, #0
   20cd4:	f2c0 8086 	blt.w	20de4 <handle_na_input+0x384>
   20cd8:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   20cda:	2200      	movs	r2, #0
   20cdc:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   20cde:	4628      	mov	r0, r5
   20ce0:	f7fd f8ff 	bl	1dee2 <net_pkt_unref>
	return true;
   20ce4:	2301      	movs	r3, #1
   20ce6:	e780      	b.n	20bea <handle_na_input+0x18a>
			nbr_free(nbr);
   20ce8:	4630      	mov	r0, r6
   20cea:	f7ff fa53 	bl	20194 <nbr_free>
   20cee:	e77b      	b.n	20be8 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   20cf0:	7842      	ldrb	r2, [r0, #1]
   20cf2:	1c81      	adds	r1, r0, #2
   20cf4:	f10d 000e 	add.w	r0, sp, #14
   20cf8:	f009 fe0e 	bl	2a918 <memcmp>
   20cfc:	1c07      	adds	r7, r0, #0
   20cfe:	bf18      	it	ne
   20d00:	2701      	movne	r7, #1
   20d02:	e7b0      	b.n	20c66 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   20d04:	f10d 010e 	add.w	r1, sp, #14
   20d08:	f108 0002 	add.w	r0, r8, #2
   20d0c:	f7df fad8 	bl	2c0 <memcpy>
   20d10:	e7b6      	b.n	20c80 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20d12:	2102      	movs	r1, #2
   20d14:	4630      	mov	r0, r6
   20d16:	f7fe ff7f 	bl	1fc18 <ipv6_nbr_set_state>
   20d1a:	e7c9      	b.n	20cb0 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20d1c:	a905      	add	r1, sp, #20
   20d1e:	4620      	mov	r0, r4
   20d20:	f7fe fbe0 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20d24:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   20d26:	f013 0f20 	tst.w	r3, #32
   20d2a:	d10f      	bne.n	20d4c <handle_na_input+0x2ec>
   20d2c:	b177      	cbz	r7, 20d4c <handle_na_input+0x2ec>
   20d2e:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   20d30:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20d34:	2b01      	cmp	r3, #1
   20d36:	d15f      	bne.n	20df8 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20d38:	2102      	movs	r1, #2
   20d3a:	4630      	mov	r0, r6
   20d3c:	f7fe ff6c 	bl	1fc18 <ipv6_nbr_set_state>
		return false;
   20d40:	2300      	movs	r3, #0
   20d42:	e752      	b.n	20bea <handle_na_input+0x18a>
   20d44:	20002fd0 	.word	0x20002fd0
   20d48:	2000c3dc 	.word	0x2000c3dc
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20d4c:	a905      	add	r1, sp, #20
   20d4e:	4620      	mov	r0, r4
   20d50:	f7fe fbc8 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20d54:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20d56:	f013 0f20 	tst.w	r3, #32
   20d5a:	d018      	beq.n	20d8e <handle_na_input+0x32e>
		if (lladdr_changed) {
   20d5c:	b14f      	cbz	r7, 20d72 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20d5e:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20d62:	2a06      	cmp	r2, #6
   20d64:	d805      	bhi.n	20d72 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   20d66:	f10d 010e 	add.w	r1, sp, #14
   20d6a:	f108 0002 	add.w	r0, r8, #2
   20d6e:	f7df faa7 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20d72:	a905      	add	r1, sp, #20
   20d74:	4620      	mov	r0, r4
   20d76:	f7fe fbb5 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20d7a:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   20d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
   20d80:	d11e      	bne.n	20dc0 <handle_na_input+0x360>
			if (lladdr_changed) {
   20d82:	b17f      	cbz	r7, 20da4 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   20d84:	2102      	movs	r1, #2
   20d86:	4630      	mov	r0, r6
   20d88:	f7fe ff46 	bl	1fc18 <ipv6_nbr_set_state>
   20d8c:	e00a      	b.n	20da4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20d8e:	a905      	add	r1, sp, #20
   20d90:	4620      	mov	r0, r4
   20d92:	f7fe fba7 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20d96:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20d98:	f013 0f20 	tst.w	r3, #32
   20d9c:	d102      	bne.n	20da4 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   20d9e:	b10d      	cbz	r5, 20da4 <handle_na_input+0x344>
   20da0:	2f00      	cmp	r7, #0
   20da2:	d0db      	beq.n	20d5c <handle_na_input+0x2fc>
   20da4:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   20da6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   20daa:	b9b3      	cbnz	r3, 20dda <handle_na_input+0x37a>
   20dac:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20dae:	a905      	add	r1, sp, #20
   20db0:	4620      	mov	r0, r4
   20db2:	f7fe fb97 	bl	1f4e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   20db6:	7803      	ldrb	r3, [r0, #0]
   20db8:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   20dba:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20dbe:	e780      	b.n	20cc2 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20dc0:	2101      	movs	r1, #1
   20dc2:	4630      	mov	r0, r6
   20dc4:	f7fe ff28 	bl	1fc18 <ipv6_nbr_set_state>
   20dc8:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   20dca:	3014      	adds	r0, #20
   20dcc:	f009 fc54 	bl	2a678 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20dd0:	4631      	mov	r1, r6
   20dd2:	6960      	ldr	r0, [r4, #20]
   20dd4:	f7ff fe38 	bl	20a48 <net_ipv6_nbr_set_reachable_timer>
   20dd8:	e7e4      	b.n	20da4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20dda:	a905      	add	r1, sp, #20
   20ddc:	4620      	mov	r0, r4
   20dde:	f7fe fb81 	bl	1f4e4 <net_icmpv6_get_na_hdr>
   20de2:	e7e3      	b.n	20dac <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   20de4:	68f0      	ldr	r0, [r6, #12]
   20de6:	f7ff f8af 	bl	1ff48 <nbr_clear_ns_pending>
   20dea:	e778      	b.n	20cde <handle_na_input+0x27e>
		return false;
   20dec:	2300      	movs	r3, #0
   20dee:	e6fc      	b.n	20bea <handle_na_input+0x18a>
		return false;
   20df0:	2300      	movs	r3, #0
   20df2:	e6fa      	b.n	20bea <handle_na_input+0x18a>
			return false;
   20df4:	2300      	movs	r3, #0
   20df6:	e6f8      	b.n	20bea <handle_na_input+0x18a>
		return false;
   20df8:	2300      	movs	r3, #0
   20dfa:	e6f6      	b.n	20bea <handle_na_input+0x18a>
	return true;
   20dfc:	2301      	movs	r3, #1
   20dfe:	e6f4      	b.n	20bea <handle_na_input+0x18a>

00020e00 <net_ipv6_send_ns>:
{
   20e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e04:	b09d      	sub	sp, #116	; 0x74
   20e06:	4605      	mov	r5, r0
   20e08:	9101      	str	r1, [sp, #4]
   20e0a:	4691      	mov	r9, r2
   20e0c:	461e      	mov	r6, r3
   20e0e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   20e10:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20e14:	6843      	ldr	r3, [r0, #4]
   20e16:	689b      	ldr	r3, [r3, #8]
   20e18:	4631      	mov	r1, r6
   20e1a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   20e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e20:	f7fc ffee 	bl	1de00 <net_pkt_get_reserve_tx>
   20e24:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e2a:	f7fd f807 	bl	1de3c <net_pkt_get_frag>
   20e2e:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   20e30:	4601      	mov	r1, r0
   20e32:	4620      	mov	r0, r4
   20e34:	f7fd f87f 	bl	1df36 <net_pkt_frag_add>
	pkt->iface = iface;
   20e38:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20e3a:	7d6b      	ldrb	r3, [r5, #21]
   20e3c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20e40:	7d6b      	ldrb	r3, [r5, #21]
   20e42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20e46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20e4a:	220a      	movs	r2, #10
   20e4c:	f362 03c6 	bfi	r3, r2, #3, #4
   20e50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20e54:	2328      	movs	r3, #40	; 0x28
   20e56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   20e5a:	2500      	movs	r5, #0
   20e5c:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   20e60:	68a3      	ldr	r3, [r4, #8]
   20e62:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20e64:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20e68:	461a      	mov	r2, r3
   20e6a:	4629      	mov	r1, r5
   20e6c:	1ac0      	subs	r0, r0, r3
   20e6e:	f009 fde7 	bl	2aa40 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20e72:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20e74:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   20e78:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20e7a:	7d1b      	ldrb	r3, [r3, #20]
   20e7c:	2b06      	cmp	r3, #6
   20e7e:	f000 808b 	beq.w	20f98 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   20e82:	2b08      	cmp	r3, #8
   20e84:	f000 8085 	beq.w	20f92 <net_ipv6_send_ns+0x192>
	return 0;
   20e88:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   20e8c:	2287      	movs	r2, #135	; 0x87
   20e8e:	f108 0114 	add.w	r1, r8, #20
   20e92:	4620      	mov	r0, r4
   20e94:	f7ff f951 	bl	2013a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   20e98:	f10a 0a08 	add.w	sl, sl, #8
   20e9c:	2114      	movs	r1, #20
   20e9e:	4650      	mov	r0, sl
   20ea0:	f7fa fafc 	bl	1b49c <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   20ea4:	a903      	add	r1, sp, #12
   20ea6:	4620      	mov	r0, r4
   20ea8:	f7fe fa8e 	bl	1f3c8 <net_icmpv6_get_ns_hdr>
   20eac:	4605      	mov	r5, r0
	if (!dst) {
   20eae:	2e00      	cmp	r6, #0
   20eb0:	d075      	beq.n	20f9e <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   20eb2:	68a3      	ldr	r3, [r4, #8]
   20eb4:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20eb8:	f10d 0c20 	add.w	ip, sp, #32
   20ebc:	6830      	ldr	r0, [r6, #0]
   20ebe:	6871      	ldr	r1, [r6, #4]
   20ec0:	68b2      	ldr	r2, [r6, #8]
   20ec2:	68f3      	ldr	r3, [r6, #12]
   20ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20ec8:	ae08      	add	r6, sp, #32
   20eca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20ecc:	f8ce 0018 	str.w	r0, [lr, #24]
   20ed0:	f8ce 101c 	str.w	r1, [lr, #28]
   20ed4:	f8ce 2020 	str.w	r2, [lr, #32]
   20ed8:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   20edc:	ae0c      	add	r6, sp, #48	; 0x30
   20ede:	6838      	ldr	r0, [r7, #0]
   20ee0:	6879      	ldr	r1, [r7, #4]
   20ee2:	68ba      	ldr	r2, [r7, #8]
   20ee4:	68fb      	ldr	r3, [r7, #12]
   20ee6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20ee8:	1d2f      	adds	r7, r5, #4
   20eea:	ae0c      	add	r6, sp, #48	; 0x30
   20eec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20eee:	6068      	str	r0, [r5, #4]
   20ef0:	6079      	str	r1, [r7, #4]
   20ef2:	60ba      	str	r2, [r7, #8]
   20ef4:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   20ef6:	4629      	mov	r1, r5
   20ef8:	4620      	mov	r0, r4
   20efa:	f7fe fa89 	bl	1f410 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   20efe:	f1bb 0f00 	cmp.w	fp, #0
   20f02:	d06a      	beq.n	20fda <net_ipv6_send_ns+0x1da>
   20f04:	68a3      	ldr	r3, [r4, #8]
   20f06:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20f08:	f7ff f9ac 	bl	20264 <net_ipv6_unspecified_address>
   20f0c:	4603      	mov	r3, r0
   20f0e:	ae10      	add	r6, sp, #64	; 0x40
   20f10:	6800      	ldr	r0, [r0, #0]
   20f12:	6859      	ldr	r1, [r3, #4]
   20f14:	689a      	ldr	r2, [r3, #8]
   20f16:	68db      	ldr	r3, [r3, #12]
   20f18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20f1a:	ae10      	add	r6, sp, #64	; 0x40
   20f1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20f1e:	60b8      	str	r0, [r7, #8]
   20f20:	60f9      	str	r1, [r7, #12]
   20f22:	613a      	str	r2, [r7, #16]
   20f24:	617b      	str	r3, [r7, #20]
   20f26:	68a3      	ldr	r3, [r4, #8]
   20f28:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   20f2a:	795a      	ldrb	r2, [r3, #5]
   20f2c:	eba2 0808 	sub.w	r8, r2, r8
   20f30:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20f34:	68a1      	ldr	r1, [r4, #8]
   20f36:	4620      	mov	r0, r4
   20f38:	f7fe f88a 	bl	1f050 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   20f3c:	3504      	adds	r5, #4
   20f3e:	462a      	mov	r2, r5
   20f40:	6961      	ldr	r1, [r4, #20]
   20f42:	486f      	ldr	r0, [pc, #444]	; (21100 <net_ipv6_send_ns+0x300>)
   20f44:	f7fe ffe0 	bl	1ff08 <nbr_lookup>
	if (!nbr) {
   20f48:	4606      	mov	r6, r0
   20f4a:	2800      	cmp	r0, #0
   20f4c:	f000 80ad 	beq.w	210aa <net_ipv6_send_ns+0x2aa>
	if (pending) {
   20f50:	9801      	ldr	r0, [sp, #4]
   20f52:	b170      	cbz	r0, 20f72 <net_ipv6_send_ns+0x172>
   20f54:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   20f56:	682b      	ldr	r3, [r5, #0]
   20f58:	2b00      	cmp	r3, #0
   20f5a:	f040 80b1 	bne.w	210c0 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   20f5e:	f7fc ffb1 	bl	1dec4 <net_pkt_ref>
   20f62:	6028      	str	r0, [r5, #0]
   20f64:	68f1      	ldr	r1, [r6, #12]
   20f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20f6a:	313c      	adds	r1, #60	; 0x3c
   20f6c:	4865      	ldr	r0, [pc, #404]	; (21104 <net_ipv6_send_ns+0x304>)
   20f6e:	f009 fbdd 	bl	2a72c <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   20f72:	4620      	mov	r0, r4
   20f74:	f7fa fbb4 	bl	1b6e0 <net_send_data>
   20f78:	2800      	cmp	r0, #0
   20f7a:	f2c0 80b0 	blt.w	210de <net_ipv6_send_ns+0x2de>
   20f7e:	4a62      	ldr	r2, [pc, #392]	; (21108 <net_ipv6_send_ns+0x308>)
   20f80:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20f84:	3301      	adds	r3, #1
   20f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20f8a:	2000      	movs	r0, #0
}
   20f8c:	b01d      	add	sp, #116	; 0x74
   20f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20f92:	f04f 0810 	mov.w	r8, #16
   20f96:	e779      	b.n	20e8c <net_ipv6_send_ns+0x8c>
		return 8;
   20f98:	f04f 0808 	mov.w	r8, #8
   20f9c:	e776      	b.n	20e8c <net_ipv6_send_ns+0x8c>
   20f9e:	68a3      	ldr	r3, [r4, #8]
   20fa0:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   20fa2:	21ff      	movs	r1, #255	; 0xff
   20fa4:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   20fa6:	2202      	movs	r2, #2
   20fa8:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   20faa:	2200      	movs	r2, #0
   20fac:	769a      	strb	r2, [r3, #26]
   20fae:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   20fb0:	771a      	strb	r2, [r3, #28]
   20fb2:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   20fb4:	779a      	strb	r2, [r3, #30]
   20fb6:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   20fb8:	f883 2020 	strb.w	r2, [r3, #32]
   20fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   20fc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   20fc4:	2201      	movs	r2, #1
   20fc6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   20fca:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   20fce:	7b7a      	ldrb	r2, [r7, #13]
   20fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   20fd4:	89fa      	ldrh	r2, [r7, #14]
   20fd6:	84da      	strh	r2, [r3, #38]	; 0x26
   20fd8:	e780      	b.n	20edc <net_ipv6_send_ns+0xdc>
		if (src) {
   20fda:	f1b9 0f00 	cmp.w	r9, #0
   20fde:	d025      	beq.n	2102c <net_ipv6_send_ns+0x22c>
   20fe0:	68a3      	ldr	r3, [r4, #8]
   20fe2:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   20fe6:	ae14      	add	r6, sp, #80	; 0x50
   20fe8:	f8d9 0000 	ldr.w	r0, [r9]
   20fec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20ff0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20ff4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20ff8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20ffa:	ae14      	add	r6, sp, #80	; 0x50
   20ffc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20ffe:	f8ce 0008 	str.w	r0, [lr, #8]
   21002:	f8ce 100c 	str.w	r1, [lr, #12]
   21006:	f8ce 2010 	str.w	r2, [lr, #16]
   2100a:	f8ce 3014 	str.w	r3, [lr, #20]
   2100e:	68a3      	ldr	r3, [r4, #8]
   21010:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21012:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21014:	b9fa      	cbnz	r2, 21056 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21016:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21018:	2a00      	cmp	r2, #0
   2101a:	d140      	bne.n	2109e <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2101c:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2101e:	2a00      	cmp	r2, #0
   21020:	d13f      	bne.n	210a2 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21022:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21024:	2b00      	cmp	r3, #0
   21026:	d03e      	beq.n	210a6 <net_ipv6_send_ns+0x2a6>
   21028:	2300      	movs	r3, #0
   2102a:	e015      	b.n	21058 <net_ipv6_send_ns+0x258>
   2102c:	68a3      	ldr	r3, [r4, #8]
   2102e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21030:	f107 0118 	add.w	r1, r7, #24
   21034:	6960      	ldr	r0, [r4, #20]
   21036:	f7fb fab9 	bl	1c5ac <net_if_ipv6_select_src_addr>
   2103a:	4603      	mov	r3, r0
   2103c:	ae18      	add	r6, sp, #96	; 0x60
   2103e:	6800      	ldr	r0, [r0, #0]
   21040:	6859      	ldr	r1, [r3, #4]
   21042:	689a      	ldr	r2, [r3, #8]
   21044:	68db      	ldr	r3, [r3, #12]
   21046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21048:	ae18      	add	r6, sp, #96	; 0x60
   2104a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2104c:	60b8      	str	r0, [r7, #8]
   2104e:	60f9      	str	r1, [r7, #12]
   21050:	613a      	str	r2, [r7, #16]
   21052:	617b      	str	r3, [r7, #20]
   21054:	e7db      	b.n	2100e <net_ipv6_send_ns+0x20e>
   21056:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21058:	bbab      	cbnz	r3, 210c6 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   2105a:	4641      	mov	r1, r8
   2105c:	4650      	mov	r0, sl
   2105e:	f7fa fa1d 	bl	1b49c <net_buf_simple_add>
	return pkt->iface;
   21062:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   21066:	4620      	mov	r0, r4
   21068:	f7fd fa14 	bl	1e494 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   2106c:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21070:	2301      	movs	r3, #1
   21072:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   21074:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   21078:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   2107a:	f899 2014 	ldrb.w	r2, [r9, #20]
   2107e:	f8d9 1010 	ldr.w	r1, [r9, #16]
   21082:	301a      	adds	r0, #26
   21084:	f7df f91c 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21088:	f899 2014 	ldrb.w	r2, [r9, #20]
   2108c:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2108e:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21092:	3a02      	subs	r2, #2
   21094:	2100      	movs	r1, #0
   21096:	4430      	add	r0, r6
   21098:	f009 fcd2 	bl	2aa40 <memset>
   2109c:	e74a      	b.n	20f34 <net_ipv6_send_ns+0x134>
   2109e:	2300      	movs	r3, #0
   210a0:	e7da      	b.n	21058 <net_ipv6_send_ns+0x258>
   210a2:	2300      	movs	r3, #0
   210a4:	e7d8      	b.n	21058 <net_ipv6_send_ns+0x258>
   210a6:	2301      	movs	r3, #1
   210a8:	e7d6      	b.n	21058 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   210aa:	2300      	movs	r3, #0
   210ac:	461a      	mov	r2, r3
   210ae:	4629      	mov	r1, r5
   210b0:	6960      	ldr	r0, [r4, #20]
   210b2:	f7fe ffab 	bl	2000c <nbr_new>
		if (!nbr) {
   210b6:	4606      	mov	r6, r0
   210b8:	2800      	cmp	r0, #0
   210ba:	f47f af49 	bne.w	20f50 <net_ipv6_send_ns+0x150>
   210be:	e002      	b.n	210c6 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   210c0:	9801      	ldr	r0, [sp, #4]
   210c2:	f7fc ff0e 	bl	1dee2 <net_pkt_unref>
	net_pkt_unref(pkt);
   210c6:	4620      	mov	r0, r4
   210c8:	f7fc ff0b 	bl	1dee2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   210cc:	4a0e      	ldr	r2, [pc, #56]	; (21108 <net_ipv6_send_ns+0x308>)
   210ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   210d2:	3301      	adds	r3, #1
   210d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   210d8:	f06f 0015 	mvn.w	r0, #21
   210dc:	e756      	b.n	20f8c <net_ipv6_send_ns+0x18c>
		if (pending) {
   210de:	9b01      	ldr	r3, [sp, #4]
   210e0:	2b00      	cmp	r3, #0
   210e2:	d0f0      	beq.n	210c6 <net_ipv6_send_ns+0x2c6>
   210e4:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   210e6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   210ea:	f009 fac5 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   210ee:	6828      	ldr	r0, [r5, #0]
   210f0:	2800      	cmp	r0, #0
   210f2:	d0e8      	beq.n	210c6 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   210f4:	f7fc fef5 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   210f8:	2300      	movs	r3, #0
   210fa:	602b      	str	r3, [r5, #0]
   210fc:	e7e3      	b.n	210c6 <net_ipv6_send_ns+0x2c6>
   210fe:	bf00      	nop
   21100:	2000c3dc 	.word	0x2000c3dc
   21104:	200030f0 	.word	0x200030f0
   21108:	20002fd0 	.word	0x20002fd0

0002110c <net_ipv6_nbr_add>:
{
   2110c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21110:	b083      	sub	sp, #12
   21112:	4605      	mov	r5, r0
   21114:	460e      	mov	r6, r1
   21116:	4617      	mov	r7, r2
   21118:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   2111a:	460a      	mov	r2, r1
   2111c:	4601      	mov	r1, r0
   2111e:	482c      	ldr	r0, [pc, #176]	; (211d0 <net_ipv6_nbr_add+0xc4>)
   21120:	f7fe fef2 	bl	1ff08 <nbr_lookup>
	if (!nbr) {
   21124:	4604      	mov	r4, r0
   21126:	b180      	cbz	r0, 2114a <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   21128:	463a      	mov	r2, r7
   2112a:	4629      	mov	r1, r5
   2112c:	4620      	mov	r0, r4
   2112e:	f7fe fd05 	bl	1fb3c <net_nbr_link>
   21132:	f110 0f78 	cmn.w	r0, #120	; 0x78
   21136:	d013      	beq.n	21160 <net_ipv6_nbr_add+0x54>
   21138:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   2113a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2113e:	2b00      	cmp	r3, #0
   21140:	d03c      	beq.n	211bc <net_ipv6_nbr_add+0xb0>
}
   21142:	4620      	mov	r0, r4
   21144:	b003      	add	sp, #12
   21146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   2114a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   2114e:	4642      	mov	r2, r8
   21150:	4631      	mov	r1, r6
   21152:	4628      	mov	r0, r5
   21154:	f7fe ff5a 	bl	2000c <nbr_new>
		if (!nbr) {
   21158:	4604      	mov	r4, r0
   2115a:	2800      	cmp	r0, #0
   2115c:	d1e4      	bne.n	21128 <net_ipv6_nbr_add+0x1c>
   2115e:	e7f0      	b.n	21142 <net_ipv6_nbr_add+0x36>
   21160:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   21162:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   21166:	2b05      	cmp	r3, #5
   21168:	d0e6      	beq.n	21138 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   2116a:	7860      	ldrb	r0, [r4, #1]
   2116c:	f7fe fd4c 	bl	1fc08 <net_nbr_get_lladdr>
   21170:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   21172:	f100 0902 	add.w	r9, r0, #2
   21176:	793a      	ldrb	r2, [r7, #4]
   21178:	6839      	ldr	r1, [r7, #0]
   2117a:	4648      	mov	r0, r9
   2117c:	f009 fbcc 	bl	2a918 <memcmp>
   21180:	b190      	cbz	r0, 211a8 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   21182:	6839      	ldr	r1, [r7, #0]
   21184:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   21186:	f1b8 0f00 	cmp.w	r8, #0
   2118a:	d002      	beq.n	21192 <net_ipv6_nbr_add+0x86>
   2118c:	b109      	cbz	r1, 21192 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   2118e:	2a06      	cmp	r2, #6
   21190:	d904      	bls.n	2119c <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   21192:	2102      	movs	r1, #2
   21194:	4620      	mov	r0, r4
   21196:	f7fe fd3f 	bl	1fc18 <ipv6_nbr_set_state>
   2119a:	e7cd      	b.n	21138 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   2119c:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   211a0:	4648      	mov	r0, r9
   211a2:	f7df f88d 	bl	2c0 <memcpy>
   211a6:	e7f4      	b.n	21192 <net_ipv6_nbr_add+0x86>
   211a8:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   211aa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   211ae:	2b00      	cmp	r3, #0
   211b0:	d1c2      	bne.n	21138 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   211b2:	2102      	movs	r1, #2
   211b4:	4620      	mov	r0, r4
   211b6:	f7fe fd2f 	bl	1fc18 <ipv6_nbr_set_state>
   211ba:	e7bd      	b.n	21138 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   211bc:	2100      	movs	r1, #0
   211be:	9101      	str	r1, [sp, #4]
   211c0:	9600      	str	r6, [sp, #0]
   211c2:	460b      	mov	r3, r1
   211c4:	460a      	mov	r2, r1
   211c6:	4628      	mov	r0, r5
   211c8:	f7ff fe1a 	bl	20e00 <net_ipv6_send_ns>
   211cc:	e7b9      	b.n	21142 <net_ipv6_nbr_add+0x36>
   211ce:	bf00      	nop
   211d0:	2000c3dc 	.word	0x2000c3dc

000211d4 <handle_ra_input>:
{
   211d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211d8:	b098      	sub	sp, #96	; 0x60
   211da:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   211dc:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   211de:	2200      	movs	r2, #0
   211e0:	e002      	b.n	211e8 <handle_ra_input+0x14>
		bytes += buf->len;
   211e2:	8999      	ldrh	r1, [r3, #12]
   211e4:	440a      	add	r2, r1
		buf = buf->frags;
   211e6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   211e8:	2b00      	cmp	r3, #0
   211ea:	d1fa      	bne.n	211e2 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   211ec:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   211ee:	49b7      	ldr	r1, [pc, #732]	; (214cc <handle_ra_input+0x2f8>)
   211f0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   211f4:	3301      	adds	r3, #1
   211f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   211fa:	2a39      	cmp	r2, #57	; 0x39
   211fc:	d904      	bls.n	21208 <handle_ra_input+0x34>
	return pkt->frags->data;
   211fe:	68b3      	ldr	r3, [r6, #8]
   21200:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   21202:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   21204:	2aff      	cmp	r2, #255	; 0xff
   21206:	d010      	beq.n	2122a <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   21208:	a907      	add	r1, sp, #28
   2120a:	4630      	mov	r0, r6
   2120c:	f7fd ff6d 	bl	1f0ea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   21210:	b108      	cbz	r0, 21216 <handle_ra_input+0x42>
   21212:	7843      	ldrb	r3, [r0, #1]
   21214:	b173      	cbz	r3, 21234 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   21216:	4aad      	ldr	r2, [pc, #692]	; (214cc <handle_ra_input+0x2f8>)
   21218:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2121c:	3301      	adds	r3, #1
   2121e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   21222:	2002      	movs	r0, #2
}
   21224:	b018      	add	sp, #96	; 0x60
   21226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2122a:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2122c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21230:	429a      	cmp	r2, r3
   21232:	d1e9      	bne.n	21208 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   21234:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   21238:	312c      	adds	r1, #44	; 0x2c
   2123a:	ac18      	add	r4, sp, #96	; 0x60
   2123c:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   21240:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   21244:	9300      	str	r3, [sp, #0]
   21246:	2301      	movs	r3, #1
   21248:	4622      	mov	r2, r4
   2124a:	68b0      	ldr	r0, [r6, #8]
   2124c:	f7fc ffc7 	bl	1e1de <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   21250:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   21254:	2300      	movs	r3, #0
   21256:	9300      	str	r3, [sp, #0]
   21258:	2301      	movs	r3, #1
   2125a:	4622      	mov	r2, r4
   2125c:	f7fc ffbf 	bl	1e1de <net_frag_read>
	if (!frag) {
   21260:	4604      	mov	r4, r0
   21262:	2800      	cmp	r0, #0
   21264:	d0d7      	beq.n	21216 <handle_ra_input+0x42>
	if (hop_limit) {
   21266:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   2126a:	b113      	cbz	r3, 21272 <handle_ra_input+0x9e>
	return pkt->iface;
   2126c:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   2126e:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   21272:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   21276:	aa11      	add	r2, sp, #68	; 0x44
   21278:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2127c:	4620      	mov	r0, r4
   2127e:	f7fc fff6 	bl	1e26e <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   21282:	ab13      	add	r3, sp, #76	; 0x4c
   21284:	aa11      	add	r2, sp, #68	; 0x44
   21286:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2128a:	f7fd f801 	bl	1e290 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   2128e:	ab12      	add	r3, sp, #72	; 0x48
   21290:	aa11      	add	r2, sp, #68	; 0x44
   21292:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   21296:	f7fc fffb 	bl	1e290 <net_frag_read_be32>
	if (!frag) {
   2129a:	4605      	mov	r5, r0
   2129c:	2800      	cmp	r0, #0
   2129e:	d0ba      	beq.n	21216 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   212a0:	a915      	add	r1, sp, #84	; 0x54
   212a2:	4630      	mov	r0, r6
   212a4:	f7fe f99a 	bl	1f5dc <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   212a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   212aa:	b16b      	cbz	r3, 212c8 <handle_ra_input+0xf4>
   212ac:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   212ae:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   212b2:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   212b4:	428c      	cmp	r4, r1
   212b6:	d007      	beq.n	212c8 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   212b8:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   212bc:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   212be:	4620      	mov	r0, r4
   212c0:	f7fb fa70 	bl	1c7a4 <net_if_ipv6_calc_reachable_time>
   212c4:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   212c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   212ca:	b113      	cbz	r3, 212d2 <handle_ra_input+0xfe>
   212cc:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   212ce:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   212d2:	2700      	movs	r7, #0
   212d4:	e060      	b.n	21398 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   212d6:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   212da:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   212de:	2306      	movs	r3, #6
   212e0:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   212e4:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   212e8:	f10d 031e 	add.w	r3, sp, #30
   212ec:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   212ee:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   212f2:	2b05      	cmp	r3, #5
   212f4:	d801      	bhi.n	212fa <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   212f6:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   212fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
   212fe:	f10d 021e 	add.w	r2, sp, #30
   21302:	9200      	str	r2, [sp, #0]
   21304:	aa11      	add	r2, sp, #68	; 0x44
   21306:	4641      	mov	r1, r8
   21308:	4628      	mov	r0, r5
   2130a:	f7fc ff68 	bl	1e1de <net_frag_read>
	if (!frag && offset) {
   2130e:	4605      	mov	r5, r0
   21310:	b318      	cbz	r0, 2135a <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   21312:	00e3      	lsls	r3, r4, #3
   21314:	b2db      	uxtb	r3, r3
   21316:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2131a:	1a9b      	subs	r3, r3, r2
   2131c:	b2db      	uxtb	r3, r3
   2131e:	3b02      	subs	r3, #2
	if (padding) {
   21320:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   21324:	d009      	beq.n	2133a <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   21326:	aa18      	add	r2, sp, #96	; 0x60
   21328:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   2132c:	2000      	movs	r0, #0
   2132e:	9000      	str	r0, [sp, #0]
   21330:	4628      	mov	r0, r5
   21332:	f7fc ff54 	bl	1e1de <net_frag_read>
		if (!frag && *pos) {
   21336:	4605      	mov	r5, r0
   21338:	b198      	cbz	r0, 21362 <handle_ra_input+0x18e>
	return pkt->frags->data;
   2133a:	68b3      	ldr	r3, [r6, #8]
   2133c:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   2133e:	2302      	movs	r3, #2
   21340:	9300      	str	r3, [sp, #0]
   21342:	2301      	movs	r3, #1
   21344:	aa03      	add	r2, sp, #12
   21346:	3108      	adds	r1, #8
   21348:	6970      	ldr	r0, [r6, #20]
   2134a:	f7ff fedf 	bl	2110c <net_ipv6_nbr_add>
   2134e:	4607      	mov	r7, r0
			if (!frag && offset) {
   21350:	bb15      	cbnz	r5, 21398 <handle_ra_input+0x1c4>
   21352:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   21356:	b1fb      	cbz	r3, 21398 <handle_ra_input+0x1c4>
   21358:	e75d      	b.n	21216 <handle_ra_input+0x42>
	if (!frag && offset) {
   2135a:	f1b8 0f00 	cmp.w	r8, #0
   2135e:	d0d8      	beq.n	21312 <handle_ra_input+0x13e>
   21360:	e7f6      	b.n	21350 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   21362:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   21366:	2b00      	cmp	r3, #0
   21368:	d0e7      	beq.n	2133a <handle_ra_input+0x166>
   2136a:	e7f1      	b.n	21350 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   2136c:	ac18      	add	r4, sp, #96	; 0x60
   2136e:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   21372:	2300      	movs	r3, #0
   21374:	9300      	str	r3, [sp, #0]
   21376:	2302      	movs	r3, #2
   21378:	4622      	mov	r2, r4
   2137a:	f7fc ff30 	bl	1e1de <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   2137e:	ab0f      	add	r3, sp, #60	; 0x3c
   21380:	4622      	mov	r2, r4
   21382:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   21386:	f7fc ff83 	bl	1e290 <net_frag_read_be32>
			if (!frag && offset) {
   2138a:	4605      	mov	r5, r0
   2138c:	2800      	cmp	r0, #0
   2138e:	d03b      	beq.n	21408 <handle_ra_input+0x234>
	return pkt->iface;
   21390:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   21392:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   21396:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   21398:	2d00      	cmp	r5, #0
   2139a:	f000 8170 	beq.w	2167e <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   2139e:	ac18      	add	r4, sp, #96	; 0x60
   213a0:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   213a4:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   213a8:	9300      	str	r3, [sp, #0]
   213aa:	2301      	movs	r3, #1
   213ac:	4622      	mov	r2, r4
   213ae:	4628      	mov	r0, r5
   213b0:	f7fc ff15 	bl	1e1de <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   213b4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   213b8:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   213bc:	9300      	str	r3, [sp, #0]
   213be:	2301      	movs	r3, #1
   213c0:	4622      	mov	r2, r4
   213c2:	f7fc ff0c 	bl	1e1de <net_frag_read>
		if (!frag) {
   213c6:	4605      	mov	r5, r0
   213c8:	2800      	cmp	r0, #0
   213ca:	f43f af24 	beq.w	21216 <handle_ra_input+0x42>
		switch (type) {
   213ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   213d2:	2b03      	cmp	r3, #3
   213d4:	d01d      	beq.n	21412 <handle_ra_input+0x23e>
   213d6:	2b05      	cmp	r3, #5
   213d8:	d0c8      	beq.n	2136c <handle_ra_input+0x198>
   213da:	2b01      	cmp	r3, #1
   213dc:	f43f af7b 	beq.w	212d6 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   213e0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   213e4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   213e8:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   213ea:	3b02      	subs	r3, #2
   213ec:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   213ee:	2200      	movs	r2, #0
   213f0:	9200      	str	r2, [sp, #0]
   213f2:	aa11      	add	r2, sp, #68	; 0x44
   213f4:	f7fc fef3 	bl	1e1de <net_frag_read>
			if (!frag && offset) {
   213f8:	4605      	mov	r5, r0
   213fa:	2800      	cmp	r0, #0
   213fc:	d1cc      	bne.n	21398 <handle_ra_input+0x1c4>
   213fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   21402:	2b00      	cmp	r3, #0
   21404:	d0c8      	beq.n	21398 <handle_ra_input+0x1c4>
   21406:	e706      	b.n	21216 <handle_ra_input+0x42>
			if (!frag && offset) {
   21408:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2140c:	2b00      	cmp	r3, #0
   2140e:	d0bf      	beq.n	21390 <handle_ra_input+0x1bc>
   21410:	e701      	b.n	21216 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   21412:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   21416:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   2141a:	2203      	movs	r2, #3
   2141c:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   21420:	4093      	lsls	r3, r2
   21422:	b2db      	uxtb	r3, r3
   21424:	3b02      	subs	r3, #2
   21426:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   2142a:	f10d 031e 	add.w	r3, sp, #30
   2142e:	9300      	str	r3, [sp, #0]
   21430:	2301      	movs	r3, #1
   21432:	aa11      	add	r2, sp, #68	; 0x44
   21434:	f7fc fed3 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   21438:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2143c:	f10d 031f 	add.w	r3, sp, #31
   21440:	9300      	str	r3, [sp, #0]
   21442:	2301      	movs	r3, #1
   21444:	aa11      	add	r2, sp, #68	; 0x44
   21446:	f7fc feca 	bl	1e1de <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   2144a:	ab08      	add	r3, sp, #32
   2144c:	aa11      	add	r2, sp, #68	; 0x44
   2144e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   21452:	f7fc ff1d 	bl	1e290 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   21456:	ab09      	add	r3, sp, #36	; 0x24
   21458:	aa11      	add	r2, sp, #68	; 0x44
   2145a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2145e:	f7fc ff17 	bl	1e290 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   21462:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   21466:	2300      	movs	r3, #0
   21468:	9300      	str	r3, [sp, #0]
   2146a:	2304      	movs	r3, #4
   2146c:	aa11      	add	r2, sp, #68	; 0x44
   2146e:	f7fc feb6 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   21472:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   21476:	ab0b      	add	r3, sp, #44	; 0x2c
   21478:	9300      	str	r3, [sp, #0]
   2147a:	2310      	movs	r3, #16
   2147c:	aa11      	add	r2, sp, #68	; 0x44
   2147e:	f7fc feae 	bl	1e1de <net_frag_read>
	if (!frag && *pos) {
   21482:	4605      	mov	r5, r0
   21484:	b320      	cbz	r0, 214d0 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   21486:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21488:	9a08      	ldr	r2, [sp, #32]
   2148a:	429a      	cmp	r2, r3
   2148c:	d314      	bcc.n	214b8 <handle_ra_input+0x2e4>
   2148e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   21492:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21496:	429a      	cmp	r2, r3
   21498:	d00e      	beq.n	214b8 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   2149a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   2149e:	2b00      	cmp	r3, #0
   214a0:	db1b      	blt.n	214da <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   214a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   214a6:	f013 0f40 	tst.w	r3, #64	; 0x40
   214aa:	d005      	beq.n	214b8 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   214ac:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   214ae:	b11b      	cbz	r3, 214b8 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   214b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   214b4:	2b40      	cmp	r3, #64	; 0x40
   214b6:	d03e      	beq.n	21536 <handle_ra_input+0x362>
			if (!frag && offset) {
   214b8:	2d00      	cmp	r5, #0
   214ba:	f47f af6d 	bne.w	21398 <handle_ra_input+0x1c4>
   214be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   214c2:	2b00      	cmp	r3, #0
   214c4:	f43f af68 	beq.w	21398 <handle_ra_input+0x1c4>
   214c8:	e6a5      	b.n	21216 <handle_ra_input+0x42>
   214ca:	bf00      	nop
   214cc:	20002fd0 	.word	0x20002fd0
	if (!frag && *pos) {
   214d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   214d4:	2b00      	cmp	r3, #0
   214d6:	d0d6      	beq.n	21486 <handle_ra_input+0x2b2>
   214d8:	e7ee      	b.n	214b8 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   214da:	f89d 201e 	ldrb.w	r2, [sp, #30]
   214de:	a90b      	add	r1, sp, #44	; 0x2c
   214e0:	6970      	ldr	r0, [r6, #20]
   214e2:	f7fa fe3f 	bl	1c164 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   214e6:	4603      	mov	r3, r0
   214e8:	b160      	cbz	r0, 21504 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   214ea:	9a08      	ldr	r2, [sp, #32]
   214ec:	b1ba      	cbz	r2, 2151e <handle_ra_input+0x34a>
   214ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   214f2:	d01c      	beq.n	2152e <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   214f4:	2200      	movs	r2, #0
   214f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   214fa:	9908      	ldr	r1, [sp, #32]
   214fc:	4618      	mov	r0, r3
   214fe:	f7fa fee3 	bl	1c2c8 <net_if_ipv6_prefix_set_timer>
   21502:	e7ce      	b.n	214a2 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   21504:	9b08      	ldr	r3, [sp, #32]
   21506:	2b00      	cmp	r3, #0
   21508:	d0cb      	beq.n	214a2 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   2150a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2150e:	a90b      	add	r1, sp, #44	; 0x2c
   21510:	6970      	ldr	r0, [r6, #20]
   21512:	f7fa fdf7 	bl	1c104 <net_if_ipv6_prefix_add>
		if (prefix) {
   21516:	4603      	mov	r3, r0
   21518:	2800      	cmp	r0, #0
   2151a:	d1e6      	bne.n	214ea <handle_ra_input+0x316>
   2151c:	e7c1      	b.n	214a2 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   2151e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   21522:	f103 0128 	add.w	r1, r3, #40	; 0x28
   21526:	6970      	ldr	r0, [r6, #20]
   21528:	f7fa feea 	bl	1c300 <net_if_ipv6_prefix_rm>
   2152c:	e7b9      	b.n	214a2 <handle_ra_input+0x2ce>
   2152e:	2201      	movs	r2, #1
   21530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   21534:	e7b5      	b.n	214a2 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   21536:	2300      	movs	r3, #0
   21538:	9305      	str	r3, [sp, #20]
   2153a:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   2153c:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   2153e:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   21542:	22fe      	movs	r2, #254	; 0xfe
   21544:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   21548:	2280      	movs	r2, #128	; 0x80
   2154a:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2154e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21552:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   21554:	f898 2004 	ldrb.w	r2, [r8, #4]
   21558:	2a06      	cmp	r2, #6
   2155a:	d032      	beq.n	215c2 <handle_ra_input+0x3ee>
   2155c:	2a08      	cmp	r2, #8
   2155e:	d058      	beq.n	21612 <handle_ra_input+0x43e>
   21560:	2a02      	cmp	r2, #2
   21562:	d018      	beq.n	21596 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   21564:	2208      	movs	r2, #8
   21566:	a90b      	add	r1, sp, #44	; 0x2c
   21568:	a803      	add	r0, sp, #12
   2156a:	f7de fea9 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   2156e:	2100      	movs	r1, #0
   21570:	a803      	add	r0, sp, #12
   21572:	f7fa fb03 	bl	1bb7c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   21576:	4604      	mov	r4, r0
   21578:	b118      	cbz	r0, 21582 <handle_ra_input+0x3ae>
   2157a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   2157e:	2b01      	cmp	r3, #1
   21580:	d052      	beq.n	21628 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   21582:	9b08      	ldr	r3, [sp, #32]
   21584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21588:	d072      	beq.n	21670 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   2158a:	2201      	movs	r2, #1
   2158c:	a903      	add	r1, sp, #12
   2158e:	6970      	ldr	r0, [r6, #20]
   21590:	f7fa fb6a 	bl	1bc68 <net_if_ipv6_addr_add>
   21594:	e790      	b.n	214b8 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21596:	f898 3005 	ldrb.w	r3, [r8, #5]
   2159a:	2b01      	cmp	r3, #1
   2159c:	d1e2      	bne.n	21564 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2159e:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   215a0:	22ff      	movs	r2, #255	; 0xff
   215a2:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   215a6:	22fe      	movs	r2, #254	; 0xfe
   215a8:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   215ac:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   215b0:	6923      	ldr	r3, [r4, #16]
   215b2:	781b      	ldrb	r3, [r3, #0]
   215b4:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   215b8:	6923      	ldr	r3, [r4, #16]
   215ba:	785b      	ldrb	r3, [r3, #1]
   215bc:	f88d 301b 	strb.w	r3, [sp, #27]
   215c0:	e7d0      	b.n	21564 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   215c2:	2203      	movs	r2, #3
   215c4:	6921      	ldr	r1, [r4, #16]
   215c6:	a805      	add	r0, sp, #20
   215c8:	f7de fe7a 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   215cc:	23ff      	movs	r3, #255	; 0xff
   215ce:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   215d2:	23fe      	movs	r3, #254	; 0xfe
   215d4:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   215d8:	6921      	ldr	r1, [r4, #16]
   215da:	2203      	movs	r2, #3
   215dc:	4411      	add	r1, r2
   215de:	f10d 0019 	add.w	r0, sp, #25
   215e2:	f7de fe6d 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   215e6:	f898 3005 	ldrb.w	r3, [r8, #5]
   215ea:	2b02      	cmp	r3, #2
   215ec:	d00a      	beq.n	21604 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   215ee:	f898 3005 	ldrb.w	r3, [r8, #5]
   215f2:	2b03      	cmp	r3, #3
   215f4:	d1b6      	bne.n	21564 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   215f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   215fa:	f083 0302 	eor.w	r3, r3, #2
   215fe:	f88d 3014 	strb.w	r3, [sp, #20]
   21602:	e7af      	b.n	21564 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   21604:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21608:	f083 0302 	eor.w	r3, r3, #2
   2160c:	f88d 3014 	strb.w	r3, [sp, #20]
   21610:	e7ed      	b.n	215ee <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21612:	6921      	ldr	r1, [r4, #16]
   21614:	a805      	add	r0, sp, #20
   21616:	f7de fe53 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2161a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2161e:	f083 0302 	eor.w	r3, r3, #2
   21622:	f88d 3014 	strb.w	r3, [sp, #20]
   21626:	e79d      	b.n	21564 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   21628:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2162c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   21630:	d015      	beq.n	2165e <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   21632:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   21636:	d80a      	bhi.n	2164e <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   21638:	3020      	adds	r0, #32
   2163a:	f008 ff79 	bl	2a530 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   2163e:	4a30      	ldr	r2, [pc, #192]	; (21700 <handle_ra_input+0x52c>)
   21640:	fb82 3200 	smull	r3, r2, r2, r0
   21644:	17c3      	asrs	r3, r0, #31
   21646:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   2164a:	4598      	cmp	r8, r3
   2164c:	d90a      	bls.n	21664 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   2164e:	9908      	ldr	r1, [sp, #32]
   21650:	4620      	mov	r0, r4
   21652:	f7fa fafb 	bl	1bc4c <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   21656:	2300      	movs	r3, #0
   21658:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   2165c:	e72c      	b.n	214b8 <handle_ra_input+0x2e4>
   2165e:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   21662:	e729      	b.n	214b8 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   21664:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   21668:	4620      	mov	r0, r4
   2166a:	f7fa faef 	bl	1bc4c <net_if_ipv6_addr_update_lifetime>
   2166e:	e7f2      	b.n	21656 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   21670:	2300      	movs	r3, #0
   21672:	2201      	movs	r2, #1
   21674:	a903      	add	r1, sp, #12
   21676:	6970      	ldr	r0, [r6, #20]
   21678:	f7fa faf6 	bl	1bc68 <net_if_ipv6_addr_add>
   2167c:	e71c      	b.n	214b8 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   2167e:	68b3      	ldr	r3, [r6, #8]
   21680:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   21682:	3108      	adds	r1, #8
   21684:	6970      	ldr	r0, [r6, #20]
   21686:	f7fa fe7b 	bl	1c380 <net_if_ipv6_router_lookup>
	if (router) {
   2168a:	4603      	mov	r3, r0
   2168c:	b350      	cbz	r0, 216e4 <handle_ra_input+0x510>
		if (!router_lifetime) {
   2168e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   21692:	b321      	cbz	r1, 216de <handle_ra_input+0x50a>
			if (nbr) {
   21694:	b11f      	cbz	r7, 2169e <handle_ra_input+0x4ca>
   21696:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   21698:	2001      	movs	r0, #1
   2169a:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   2169e:	4618      	mov	r0, r3
   216a0:	f7fa fec6 	bl	1c430 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   216a4:	b18f      	cbz	r7, 216ca <handle_ra_input+0x4f6>
   216a6:	68fb      	ldr	r3, [r7, #12]
   216a8:	6818      	ldr	r0, [r3, #0]
   216aa:	b170      	cbz	r0, 216ca <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   216ac:	f7fa f818 	bl	1b6e0 <net_send_data>
   216b0:	2800      	cmp	r0, #0
   216b2:	db20      	blt.n	216f6 <handle_ra_input+0x522>
   216b4:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   216b6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   216ba:	f008 ffdd 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   216be:	6820      	ldr	r0, [r4, #0]
   216c0:	b118      	cbz	r0, 216ca <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   216c2:	f7fc fc0e 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   216c6:	2300      	movs	r3, #0
   216c8:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   216ca:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   216cc:	f500 7018 	add.w	r0, r0, #608	; 0x260
   216d0:	f008 ffd2 	bl	2a678 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   216d4:	4630      	mov	r0, r6
   216d6:	f7fc fc04 	bl	1dee2 <net_pkt_unref>
	return NET_OK;
   216da:	2000      	movs	r0, #0
   216dc:	e5a2      	b.n	21224 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   216de:	f7fa ff0b 	bl	1c4f8 <net_if_ipv6_router_rm>
   216e2:	e7df      	b.n	216a4 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   216e4:	68b3      	ldr	r3, [r6, #8]
   216e6:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   216e8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   216ec:	3108      	adds	r1, #8
   216ee:	6970      	ldr	r0, [r6, #20]
   216f0:	f7fa feaa 	bl	1c448 <net_if_ipv6_router_add>
   216f4:	e7d6      	b.n	216a4 <handle_ra_input+0x4d0>
   216f6:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   216f8:	6818      	ldr	r0, [r3, #0]
   216fa:	f7fc fbf2 	bl	1dee2 <net_pkt_unref>
   216fe:	e7d9      	b.n	216b4 <handle_ra_input+0x4e0>
   21700:	10624dd3 	.word	0x10624dd3

00021704 <handle_ns_input>:
{
   21704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21708:	b0a5      	sub	sp, #148	; 0x94
   2170a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   2170c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2170e:	2200      	movs	r2, #0
   21710:	e002      	b.n	21718 <handle_ns_input+0x14>
		bytes += buf->len;
   21712:	8999      	ldrh	r1, [r3, #12]
   21714:	440a      	add	r2, r1
		buf = buf->frags;
   21716:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21718:	2b00      	cmp	r3, #0
   2171a:	d1fa      	bne.n	21712 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2171c:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   2171e:	a90a      	add	r1, sp, #40	; 0x28
   21720:	4620      	mov	r0, r4
   21722:	f7fd fe51 	bl	1f3c8 <net_icmpv6_get_ns_hdr>
   21726:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   21728:	4aa6      	ldr	r2, [pc, #664]	; (219c4 <handle_ns_input+0x2c0>)
   2172a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2172e:	3301      	adds	r3, #1
   21730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   21734:	2d3f      	cmp	r5, #63	; 0x3f
   21736:	d904      	bls.n	21742 <handle_ns_input+0x3e>
	return pkt->frags->data;
   21738:	68a3      	ldr	r3, [r4, #8]
   2173a:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   2173c:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   2173e:	2bff      	cmp	r3, #255	; 0xff
   21740:	d002      	beq.n	21748 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   21742:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   21744:	2bff      	cmp	r3, #255	; 0xff
   21746:	d00a      	beq.n	2175e <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   21748:	2314      	movs	r3, #20
   2174a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   2174e:	a90f      	add	r1, sp, #60	; 0x3c
   21750:	4620      	mov	r0, r4
   21752:	f7fd fe95 	bl	1f480 <net_icmpv6_get_nd_opt_hdr>
   21756:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   21758:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2175a:	2500      	movs	r5, #0
   2175c:	e00e      	b.n	2177c <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2175e:	a908      	add	r1, sp, #32
   21760:	4620      	mov	r0, r4
   21762:	f7fd fcc2 	bl	1f0ea <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   21766:	2800      	cmp	r0, #0
   21768:	f000 80b7 	beq.w	218da <handle_ns_input+0x1d6>
   2176c:	7843      	ldrb	r3, [r0, #1]
   2176e:	2b00      	cmp	r3, #0
   21770:	f040 80b3 	bne.w	218da <handle_ns_input+0x1d6>
   21774:	e7e8      	b.n	21748 <handle_ns_input+0x44>
		bytes += buf->len;
   21776:	899a      	ldrh	r2, [r3, #12]
   21778:	4415      	add	r5, r2
		buf = buf->frags;
   2177a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2177c:	2b00      	cmp	r3, #0
   2177e:	d1fa      	bne.n	21776 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   21780:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   21782:	e042      	b.n	2180a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21784:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   21786:	2900      	cmp	r1, #0
   21788:	f040 80a7 	bne.w	218da <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   2178c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   21790:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   21794:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   21796:	4411      	add	r1, r2
   21798:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   2179a:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   2179c:	00db      	lsls	r3, r3, #3
   2179e:	b2db      	uxtb	r3, r3
   217a0:	3b02      	subs	r3, #2
   217a2:	b2db      	uxtb	r3, r3
   217a4:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   217a8:	f10d 021a 	add.w	r2, sp, #26
   217ac:	9200      	str	r2, [sp, #0]
   217ae:	f10d 0216 	add.w	r2, sp, #22
   217b2:	b289      	uxth	r1, r1
   217b4:	68a0      	ldr	r0, [r4, #8]
   217b6:	f7fc fd12 	bl	1e1de <net_frag_read>
	if (!frag && pos == 0xffff) {
   217ba:	2800      	cmp	r0, #0
   217bc:	d042      	beq.n	21844 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   217be:	f89d 3019 	ldrb.w	r3, [sp, #25]
   217c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   217c6:	f10d 021a 	add.w	r2, sp, #26
   217ca:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   217cc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   217d0:	4293      	cmp	r3, r2
   217d2:	d901      	bls.n	217d8 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   217d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   217d8:	68a3      	ldr	r3, [r4, #8]
   217da:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   217dc:	2300      	movs	r3, #0
   217de:	9300      	str	r3, [sp, #0]
   217e0:	aa08      	add	r2, sp, #32
   217e2:	3108      	adds	r1, #8
   217e4:	6960      	ldr	r0, [r4, #20]
   217e6:	f7ff fc91 	bl	2110c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   217ea:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   217ee:	787b      	ldrb	r3, [r7, #1]
   217f0:	00db      	lsls	r3, r3, #3
   217f2:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   217f4:	4413      	add	r3, r2
   217f6:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   217f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   217fc:	429a      	cmp	r2, r3
   217fe:	d26c      	bcs.n	218da <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21800:	a90f      	add	r1, sp, #60	; 0x3c
   21802:	4620      	mov	r0, r4
   21804:	f7fd fe3c 	bl	1f480 <net_icmpv6_get_nd_opt_hdr>
   21808:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2180a:	b317      	cbz	r7, 21852 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   2180c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   21810:	4295      	cmp	r5, r2
   21812:	d91e      	bls.n	21852 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   21814:	787b      	ldrb	r3, [r7, #1]
   21816:	b1e3      	cbz	r3, 21852 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   21818:	7839      	ldrb	r1, [r7, #0]
   2181a:	2901      	cmp	r1, #1
   2181c:	d1e5      	bne.n	217ea <handle_ns_input+0xe6>
	return pkt->frags->data;
   2181e:	68a1      	ldr	r1, [r4, #8]
   21820:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21822:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21824:	2800      	cmp	r0, #0
   21826:	d1ad      	bne.n	21784 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21828:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2182a:	b928      	cbnz	r0, 21838 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2182c:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2182e:	b928      	cbnz	r0, 2183c <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21830:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21832:	b129      	cbz	r1, 21840 <handle_ns_input+0x13c>
   21834:	2100      	movs	r1, #0
   21836:	e7a6      	b.n	21786 <handle_ns_input+0x82>
   21838:	2100      	movs	r1, #0
   2183a:	e7a4      	b.n	21786 <handle_ns_input+0x82>
   2183c:	2100      	movs	r1, #0
   2183e:	e7a2      	b.n	21786 <handle_ns_input+0x82>
   21840:	2101      	movs	r1, #1
   21842:	e7a0      	b.n	21786 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   21844:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   21848:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2184c:	429a      	cmp	r2, r3
   2184e:	d1b6      	bne.n	217be <handle_ns_input+0xba>
   21850:	e7cb      	b.n	217ea <handle_ns_input+0xe6>
	return pkt->iface;
   21852:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   21856:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2185a:	2500      	movs	r5, #0
   2185c:	e001      	b.n	21862 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2185e:	b9ef      	cbnz	r7, 2189c <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21860:	3501      	adds	r5, #1
   21862:	2d02      	cmp	r5, #2
   21864:	dc21      	bgt.n	218aa <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   21866:	236c      	movs	r3, #108	; 0x6c
   21868:	fb03 8305 	mla	r3, r3, r5, r8
   2186c:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   21870:	2f00      	cmp	r7, #0
   21872:	d0f5      	beq.n	21860 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21874:	236c      	movs	r3, #108	; 0x6c
   21876:	fb03 8305 	mla	r3, r3, r5, r8
   2187a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   2187c:	2b0a      	cmp	r3, #10
   2187e:	d1ef      	bne.n	21860 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21880:	216c      	movs	r1, #108	; 0x6c
   21882:	fb01 f105 	mul.w	r1, r1, r5
   21886:	3120      	adds	r1, #32
   21888:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   2188a:	2210      	movs	r2, #16
   2188c:	4411      	add	r1, r2
   2188e:	4648      	mov	r0, r9
   21890:	f009 f842 	bl	2a918 <memcmp>
   21894:	2800      	cmp	r0, #0
   21896:	d0e2      	beq.n	2185e <handle_ns_input+0x15a>
		return false;
   21898:	2700      	movs	r7, #0
   2189a:	e7e0      	b.n	2185e <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   2189c:	236c      	movs	r3, #108	; 0x6c
   2189e:	fb03 f505 	mul.w	r5, r3, r5
   218a2:	3520      	adds	r5, #32
   218a4:	4445      	add	r5, r8
   218a6:	350c      	adds	r5, #12
   218a8:	e000      	b.n	218ac <handle_ns_input+0x1a8>
	return NULL;
   218aa:	2500      	movs	r5, #0
	if (!ifaddr) {
   218ac:	b1ad      	cbz	r5, 218da <handle_ns_input+0x1d6>
	return pkt->frags->data;
   218ae:	68a3      	ldr	r3, [r4, #8]
   218b0:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218b2:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218b4:	b93b      	cbnz	r3, 218c6 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218b6:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218b8:	b9cb      	cbnz	r3, 218ee <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218ba:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218bc:	b9cb      	cbnz	r3, 218f2 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   218be:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218c0:	b1cb      	cbz	r3, 218f6 <handle_ns_input+0x1f2>
   218c2:	2300      	movs	r3, #0
   218c4:	e000      	b.n	218c8 <handle_ns_input+0x1c4>
   218c6:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   218c8:	2b00      	cmp	r3, #0
   218ca:	d07d      	beq.n	219c8 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   218cc:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   218ce:	f240 23ff 	movw	r3, #767	; 0x2ff
   218d2:	429a      	cmp	r2, r3
   218d4:	d011      	beq.n	218fa <handle_ns_input+0x1f6>
   218d6:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   218d8:	bb0b      	cbnz	r3, 2191e <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   218da:	4a3a      	ldr	r2, [pc, #232]	; (219c4 <handle_ns_input+0x2c0>)
   218dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   218e0:	3301      	adds	r3, #1
   218e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   218e6:	2002      	movs	r0, #2
}
   218e8:	b025      	add	sp, #148	; 0x94
   218ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218ee:	2300      	movs	r3, #0
   218f0:	e7ea      	b.n	218c8 <handle_ns_input+0x1c4>
   218f2:	2300      	movs	r3, #0
   218f4:	e7e8      	b.n	218c8 <handle_ns_input+0x1c4>
   218f6:	2301      	movs	r3, #1
   218f8:	e7e6      	b.n	218c8 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   218fa:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   218fc:	b95b      	cbnz	r3, 21916 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   218fe:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21904:	d001      	beq.n	2190a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21906:	2300      	movs	r3, #0
   21908:	e7e6      	b.n	218d8 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2190a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2190c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2190e:	2bff      	cmp	r3, #255	; 0xff
   21910:	d003      	beq.n	2191a <handle_ns_input+0x216>
   21912:	2300      	movs	r3, #0
   21914:	e7e0      	b.n	218d8 <handle_ns_input+0x1d4>
   21916:	2300      	movs	r3, #0
   21918:	e7de      	b.n	218d8 <handle_ns_input+0x1d4>
   2191a:	2301      	movs	r3, #1
   2191c:	e7dc      	b.n	218d8 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2191e:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   21922:	b94b      	cbnz	r3, 21938 <handle_ns_input+0x234>
	return pkt->iface;
   21924:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   21926:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21928:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2192a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2192e:	429a      	cmp	r2, r3
   21930:	d0d3      	beq.n	218da <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   21932:	f7fa fb51 	bl	1bfd8 <net_if_ipv6_dad_failed>
   21936:	e7d0      	b.n	218da <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2193c:	7603      	strb	r3, [r0, #24]
   2193e:	2300      	movs	r3, #0
   21940:	2202      	movs	r2, #2
   21942:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   21944:	7683      	strb	r3, [r0, #26]
   21946:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21948:	7703      	strb	r3, [r0, #28]
   2194a:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2194c:	7783      	strb	r3, [r0, #30]
   2194e:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21950:	f880 3020 	strb.w	r3, [r0, #32]
   21954:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21958:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   2195c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21960:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   21964:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21968:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   2196c:	2301      	movs	r3, #1
   2196e:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   21972:	68a3      	ldr	r3, [r4, #8]
   21974:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21978:	f108 0118 	add.w	r1, r8, #24
   2197c:	6960      	ldr	r0, [r4, #20]
   2197e:	f7fa fe15 	bl	1c5ac <net_if_ipv6_select_src_addr>
   21982:	4603      	mov	r3, r0
   21984:	ae10      	add	r6, sp, #64	; 0x40
   21986:	6800      	ldr	r0, [r0, #0]
   21988:	6859      	ldr	r1, [r3, #4]
   2198a:	689a      	ldr	r2, [r3, #8]
   2198c:	68db      	ldr	r3, [r3, #12]
   2198e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21990:	ae10      	add	r6, sp, #64	; 0x40
   21992:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21994:	f8c8 0008 	str.w	r0, [r8, #8]
   21998:	f8c8 100c 	str.w	r1, [r8, #12]
   2199c:	f8c8 2010 	str.w	r2, [r8, #16]
   219a0:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   219a4:	2320      	movs	r3, #32
   219a6:	68a2      	ldr	r2, [r4, #8]
   219a8:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   219aa:	9300      	str	r3, [sp, #0]
   219ac:	1d2b      	adds	r3, r5, #4
   219ae:	f101 0218 	add.w	r2, r1, #24
   219b2:	3108      	adds	r1, #8
   219b4:	6960      	ldr	r0, [r4, #20]
   219b6:	f7fe ff69 	bl	2088c <net_ipv6_send_na>
	if (!ret) {
   219ba:	2800      	cmp	r0, #0
   219bc:	f000 80b5 	beq.w	21b2a <handle_ns_input+0x426>
	return NET_DROP;
   219c0:	2002      	movs	r0, #2
   219c2:	e791      	b.n	218e8 <handle_ns_input+0x1e4>
   219c4:	20002fd0 	.word	0x20002fd0
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   219c8:	2100      	movs	r1, #0
   219ca:	3008      	adds	r0, #8
   219cc:	f7fa f8d6 	bl	1bb7c <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   219d0:	4607      	mov	r7, r0
   219d2:	2800      	cmp	r0, #0
   219d4:	d181      	bne.n	218da <handle_ns_input+0x1d6>
   219d6:	68a3      	ldr	r3, [r4, #8]
   219d8:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   219dc:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   219e0:	f240 23ff 	movw	r3, #767	; 0x2ff
   219e4:	429a      	cmp	r2, r3
   219e6:	d02b      	beq.n	21a40 <handle_ns_input+0x33c>
   219e8:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   219ea:	9303      	str	r3, [sp, #12]
   219ec:	2b00      	cmp	r3, #0
   219ee:	d03c      	beq.n	21a6a <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   219f0:	af14      	add	r7, sp, #80	; 0x50
   219f2:	4643      	mov	r3, r8
   219f4:	f853 0f08 	ldr.w	r0, [r3, #8]!
   219f8:	6859      	ldr	r1, [r3, #4]
   219fa:	689a      	ldr	r2, [r3, #8]
   219fc:	68db      	ldr	r3, [r3, #12]
   219fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21a00:	af14      	add	r7, sp, #80	; 0x50
   21a02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21a04:	f8c8 0018 	str.w	r0, [r8, #24]
   21a08:	f8c8 101c 	str.w	r1, [r8, #28]
   21a0c:	f8c8 2020 	str.w	r2, [r8, #32]
   21a10:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   21a14:	68a3      	ldr	r3, [r4, #8]
   21a16:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21a1a:	af18      	add	r7, sp, #96	; 0x60
   21a1c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21a20:	6871      	ldr	r1, [r6, #4]
   21a22:	68b2      	ldr	r2, [r6, #8]
   21a24:	68f3      	ldr	r3, [r6, #12]
   21a26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21a28:	ae18      	add	r6, sp, #96	; 0x60
   21a2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21a2c:	f8ce 0008 	str.w	r0, [lr, #8]
   21a30:	f8ce 100c 	str.w	r1, [lr, #12]
   21a34:	f8ce 2010 	str.w	r2, [lr, #16]
   21a38:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   21a3c:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21a3e:	e7b2      	b.n	219a6 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21a40:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   21a44:	b96b      	cbnz	r3, 21a62 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21a46:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21a4e:	d001      	beq.n	21a54 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21a50:	2300      	movs	r3, #0
   21a52:	e7ca      	b.n	219ea <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   21a54:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   21a58:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21a5a:	2bff      	cmp	r3, #255	; 0xff
   21a5c:	d003      	beq.n	21a66 <handle_ns_input+0x362>
   21a5e:	2300      	movs	r3, #0
   21a60:	e7c3      	b.n	219ea <handle_ns_input+0x2e6>
   21a62:	2300      	movs	r3, #0
   21a64:	e7c1      	b.n	219ea <handle_ns_input+0x2e6>
   21a66:	2301      	movs	r3, #1
   21a68:	e7bf      	b.n	219ea <handle_ns_input+0x2e6>
	return pkt->iface;
   21a6a:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   21a6e:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21a72:	f04f 0900 	mov.w	r9, #0
   21a76:	e004      	b.n	21a82 <handle_ns_input+0x37e>
		return false;
   21a78:	f8dd b00c 	ldr.w	fp, [sp, #12]
   21a7c:	e01e      	b.n	21abc <handle_ns_input+0x3b8>
   21a7e:	f109 0901 	add.w	r9, r9, #1
   21a82:	f1b9 0f02 	cmp.w	r9, #2
   21a86:	dc22      	bgt.n	21ace <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   21a88:	236c      	movs	r3, #108	; 0x6c
   21a8a:	fb03 a309 	mla	r3, r3, r9, sl
   21a8e:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   21a92:	f1bb 0f00 	cmp.w	fp, #0
   21a96:	d0f2      	beq.n	21a7e <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21a98:	236c      	movs	r3, #108	; 0x6c
   21a9a:	fb03 a309 	mla	r3, r3, r9, sl
   21a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21aa0:	2b0a      	cmp	r3, #10
   21aa2:	d1ec      	bne.n	21a7e <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21aa4:	216c      	movs	r1, #108	; 0x6c
   21aa6:	fb01 f109 	mul.w	r1, r1, r9
   21aaa:	3120      	adds	r1, #32
   21aac:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   21aae:	2210      	movs	r2, #16
   21ab0:	4411      	add	r1, r2
   21ab2:	4640      	mov	r0, r8
   21ab4:	f008 ff30 	bl	2a918 <memcmp>
   21ab8:	2800      	cmp	r0, #0
   21aba:	d1dd      	bne.n	21a78 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   21abc:	f1bb 0f00 	cmp.w	fp, #0
   21ac0:	d0dd      	beq.n	21a7e <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   21ac2:	276c      	movs	r7, #108	; 0x6c
   21ac4:	fb07 f709 	mul.w	r7, r7, r9
   21ac8:	3720      	adds	r7, #32
   21aca:	4457      	add	r7, sl
   21acc:	370c      	adds	r7, #12
   21ace:	2f00      	cmp	r7, #0
   21ad0:	f43f af03 	beq.w	218da <handle_ns_input+0x1d6>
	return pkt->frags->data;
   21ad4:	68a3      	ldr	r3, [r4, #8]
   21ad6:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21ada:	af1c      	add	r7, sp, #112	; 0x70
   21adc:	4663      	mov	r3, ip
   21ade:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21ae2:	6859      	ldr	r1, [r3, #4]
   21ae4:	689a      	ldr	r2, [r3, #8]
   21ae6:	68db      	ldr	r3, [r3, #12]
   21ae8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21aea:	af1c      	add	r7, sp, #112	; 0x70
   21aec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21aee:	f8cc 0018 	str.w	r0, [ip, #24]
   21af2:	f8cc 101c 	str.w	r1, [ip, #28]
   21af6:	f8cc 2020 	str.w	r2, [ip, #32]
   21afa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   21afe:	68a3      	ldr	r3, [r4, #8]
   21b00:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21b04:	af20      	add	r7, sp, #128	; 0x80
   21b06:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21b0a:	6871      	ldr	r1, [r6, #4]
   21b0c:	68b2      	ldr	r2, [r6, #8]
   21b0e:	68f3      	ldr	r3, [r6, #12]
   21b10:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21b12:	ae20      	add	r6, sp, #128	; 0x80
   21b14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21b16:	f8ce 0008 	str.w	r0, [lr, #8]
   21b1a:	f8ce 100c 	str.w	r1, [lr, #12]
   21b1e:	f8ce 2010 	str.w	r2, [lr, #16]
   21b22:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   21b26:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21b28:	e73d      	b.n	219a6 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   21b2a:	4620      	mov	r0, r4
   21b2c:	f7fc f9d9 	bl	1dee2 <net_pkt_unref>
		return NET_OK;
   21b30:	2000      	movs	r0, #0
   21b32:	e6d9      	b.n	218e8 <handle_ns_input+0x1e4>

00021b34 <nd_reachable_timeout>:
{
   21b34:	b530      	push	{r4, r5, lr}
   21b36:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   21b38:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   21b3c:	2300      	movs	r3, #0
   21b3e:	2b07      	cmp	r3, #7
   21b40:	dc07      	bgt.n	21b52 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   21b42:	4c47      	ldr	r4, [pc, #284]	; (21c60 <nd_reachable_timeout+0x12c>)
   21b44:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   21b48:	68e2      	ldr	r2, [r4, #12]
   21b4a:	4295      	cmp	r5, r2
   21b4c:	d002      	beq.n	21b54 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   21b4e:	3301      	adds	r3, #1
   21b50:	e7f5      	b.n	21b3e <nd_reachable_timeout+0xa>
	return NULL;
   21b52:	2400      	movs	r4, #0
	if (!data || !nbr) {
   21b54:	b38d      	cbz	r5, 21bba <nd_reachable_timeout+0x86>
   21b56:	b384      	cbz	r4, 21bba <nd_reachable_timeout+0x86>
   21b58:	4603      	mov	r3, r0
	switch (data->state) {
   21b5a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   21b5e:	2a04      	cmp	r2, #4
   21b60:	d82b      	bhi.n	21bba <nd_reachable_timeout+0x86>
   21b62:	e8df f002 	tbb	[pc, r2]
   21b66:	2703      	.short	0x2703
   21b68:	3f2c      	.short	0x3f2c
   21b6a:	45          	.byte	0x45
   21b6b:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   21b6c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   21b70:	2a02      	cmp	r2, #2
   21b72:	d912      	bls.n	21b9a <nd_reachable_timeout+0x66>
   21b74:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21b76:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21b7a:	f008 fd7d 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   21b7e:	6828      	ldr	r0, [r5, #0]
   21b80:	b118      	cbz	r0, 21b8a <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   21b82:	f7fc f9ae 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   21b86:	2300      	movs	r3, #0
   21b88:	602b      	str	r3, [r5, #0]
   21b8a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21b8c:	3014      	adds	r0, #20
   21b8e:	f008 fd73 	bl	2a678 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21b92:	4620      	mov	r0, r4
   21b94:	f7fd ffa6 	bl	1fae4 <net_nbr_unref>
   21b98:	e00f      	b.n	21bba <nd_reachable_timeout+0x86>
			data->ns_count++;
   21b9a:	3201      	adds	r2, #1
   21b9c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21ba0:	68a0      	ldr	r0, [r4, #8]
   21ba2:	2100      	movs	r1, #0
   21ba4:	9101      	str	r1, [sp, #4]
   21ba6:	3b10      	subs	r3, #16
   21ba8:	9300      	str	r3, [sp, #0]
   21baa:	460b      	mov	r3, r1
   21bac:	460a      	mov	r2, r1
   21bae:	f7ff f927 	bl	20e00 <net_ipv6_send_ns>
   21bb2:	e002      	b.n	21bba <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   21bb4:	2202      	movs	r2, #2
   21bb6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   21bba:	b003      	add	sp, #12
   21bbc:	bd30      	pop	{r4, r5, pc}
   21bbe:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21bc0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21bc4:	f008 fd58 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   21bc8:	6828      	ldr	r0, [r5, #0]
   21bca:	b118      	cbz	r0, 21bd4 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   21bcc:	f7fc f989 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   21bd0:	2300      	movs	r3, #0
   21bd2:	602b      	str	r3, [r5, #0]
   21bd4:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21bd6:	3014      	adds	r0, #20
   21bd8:	f008 fd4e 	bl	2a678 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21bdc:	4620      	mov	r0, r4
   21bde:	f7fd ff81 	bl	1fae4 <net_nbr_unref>
   21be2:	e7ea      	b.n	21bba <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   21be4:	2204      	movs	r2, #4
   21be6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   21bea:	2200      	movs	r2, #0
   21bec:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   21bf0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   21bf4:	2a02      	cmp	r2, #2
   21bf6:	d91f      	bls.n	21c38 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   21bf8:	f1a3 0110 	sub.w	r1, r3, #16
   21bfc:	68a0      	ldr	r0, [r4, #8]
   21bfe:	f7fa fbbf 	bl	1c380 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   21c02:	2800      	cmp	r0, #0
   21c04:	d0d9      	beq.n	21bba <nd_reachable_timeout+0x86>
   21c06:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   21c0a:	2a00      	cmp	r2, #0
   21c0c:	d1d5      	bne.n	21bba <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   21c0e:	f7fa fc73 	bl	1c4f8 <net_if_ipv6_router_rm>
   21c12:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21c14:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21c18:	f008 fd2e 	bl	2a678 <k_delayed_work_cancel>
	if (data->pending) {
   21c1c:	6828      	ldr	r0, [r5, #0]
   21c1e:	b118      	cbz	r0, 21c28 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   21c20:	f7fc f95f 	bl	1dee2 <net_pkt_unref>
		data->pending = NULL;
   21c24:	2300      	movs	r3, #0
   21c26:	602b      	str	r3, [r5, #0]
   21c28:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21c2a:	3014      	adds	r0, #20
   21c2c:	f008 fd24 	bl	2a678 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21c30:	4620      	mov	r0, r4
   21c32:	f7fd ff57 	bl	1fae4 <net_nbr_unref>
   21c36:	e7c0      	b.n	21bba <nd_reachable_timeout+0x86>
			data->ns_count++;
   21c38:	3201      	adds	r2, #1
   21c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21c3e:	68a0      	ldr	r0, [r4, #8]
   21c40:	2100      	movs	r1, #0
   21c42:	9101      	str	r1, [sp, #4]
   21c44:	3b10      	subs	r3, #16
   21c46:	9300      	str	r3, [sp, #0]
   21c48:	460b      	mov	r3, r1
   21c4a:	460a      	mov	r2, r1
   21c4c:	f7ff f8d8 	bl	20e00 <net_ipv6_send_ns>
   21c50:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   21c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21c56:	3114      	adds	r1, #20
   21c58:	4802      	ldr	r0, [pc, #8]	; (21c64 <nd_reachable_timeout+0x130>)
   21c5a:	f008 fd67 	bl	2a72c <k_delayed_work_submit_to_queue>
   21c5e:	e7ac      	b.n	21bba <nd_reachable_timeout+0x86>
   21c60:	2000c3e8 	.word	0x2000c3e8
   21c64:	200030f0 	.word	0x200030f0

00021c68 <net_ipv6_start_dad>:
{
   21c68:	b500      	push	{lr}
   21c6a:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   21c6c:	2301      	movs	r3, #1
   21c6e:	9301      	str	r3, [sp, #4]
   21c70:	3104      	adds	r1, #4
   21c72:	9100      	str	r1, [sp, #0]
   21c74:	2300      	movs	r3, #0
   21c76:	461a      	mov	r2, r3
   21c78:	4619      	mov	r1, r3
   21c7a:	f7ff f8c1 	bl	20e00 <net_ipv6_send_ns>
}
   21c7e:	b003      	add	sp, #12
   21c80:	f85d fb04 	ldr.w	pc, [sp], #4

00021c84 <net_ipv6_prepare_for_send>:
{
   21c84:	b570      	push	{r4, r5, r6, lr}
   21c86:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   21c88:	2300      	movs	r3, #0
   21c8a:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   21c8c:	6943      	ldr	r3, [r0, #20]
   21c8e:	f3bf 8f5b 	dmb	ish
   21c92:	68db      	ldr	r3, [r3, #12]
   21c94:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   21c98:	f013 0f02 	tst.w	r3, #2
   21c9c:	d108      	bne.n	21cb0 <net_ipv6_prepare_for_send+0x2c>
   21c9e:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   21ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21ca2:	b13b      	cbz	r3, 21cb4 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   21ca4:	68a3      	ldr	r3, [r4, #8]
   21ca6:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   21ca8:	3118      	adds	r1, #24
   21caa:	4620      	mov	r0, r4
   21cac:	f7fe f9e6 	bl	2007c <update_ll_reserve>
}
   21cb0:	b004      	add	sp, #16
   21cb2:	bd70      	pop	{r4, r5, r6, pc}
   21cb4:	6883      	ldr	r3, [r0, #8]
   21cb6:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21cb8:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   21cba:	2bff      	cmp	r3, #255	; 0xff
   21cbc:	d0f2      	beq.n	21ca4 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   21cbe:	3118      	adds	r1, #24
   21cc0:	a803      	add	r0, sp, #12
   21cc2:	f7fa fa9d 	bl	1c200 <net_if_ipv6_addr_onlink>
   21cc6:	b348      	cbz	r0, 21d1c <net_ipv6_prepare_for_send+0x98>
   21cc8:	68a3      	ldr	r3, [r4, #8]
   21cca:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   21ccc:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   21cce:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21cd0:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21cd2:	7d5a      	ldrb	r2, [r3, #21]
   21cd4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21cd8:	7d5b      	ldrb	r3, [r3, #21]
   21cda:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   21cde:	9b03      	ldr	r3, [sp, #12]
   21ce0:	2b00      	cmp	r3, #0
   21ce2:	d03e      	beq.n	21d62 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   21ce4:	462a      	mov	r2, r5
   21ce6:	6961      	ldr	r1, [r4, #20]
   21ce8:	4832      	ldr	r0, [pc, #200]	; (21db4 <net_ipv6_prepare_for_send+0x130>)
   21cea:	f7fe f90d 	bl	1ff08 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   21cee:	4606      	mov	r6, r0
   21cf0:	2800      	cmp	r0, #0
   21cf2:	d051      	beq.n	21d98 <net_ipv6_prepare_for_send+0x114>
   21cf4:	7840      	ldrb	r0, [r0, #1]
   21cf6:	28ff      	cmp	r0, #255	; 0xff
   21cf8:	d04e      	beq.n	21d98 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   21cfa:	f7fd ff85 	bl	1fc08 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   21cfe:	1c83      	adds	r3, r0, #2
   21d00:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   21d02:	7843      	ldrb	r3, [r0, #1]
   21d04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   21d08:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   21d0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   21d0e:	2b02      	cmp	r3, #2
   21d10:	d036      	beq.n	21d80 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   21d12:	4629      	mov	r1, r5
   21d14:	4620      	mov	r0, r4
   21d16:	f7fe f9b1 	bl	2007c <update_ll_reserve>
   21d1a:	e7c9      	b.n	21cb0 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   21d1c:	68a3      	ldr	r3, [r4, #8]
   21d1e:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   21d20:	3118      	adds	r1, #24
   21d22:	2000      	movs	r0, #0
   21d24:	f001 fb26 	bl	23374 <net_route_lookup>
		if (route) {
   21d28:	4606      	mov	r6, r0
   21d2a:	b160      	cbz	r0, 21d46 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   21d2c:	f001 fc06 	bl	2353c <net_route_get_nexthop>
			if (!nexthop) {
   21d30:	4605      	mov	r5, r0
   21d32:	2800      	cmp	r0, #0
   21d34:	d1d3      	bne.n	21cde <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   21d36:	4630      	mov	r0, r6
   21d38:	f001 fbac 	bl	23494 <net_route_del>
				net_pkt_unref(pkt);
   21d3c:	4620      	mov	r0, r4
   21d3e:	f7fc f8d0 	bl	1dee2 <net_pkt_unref>
				return NULL;
   21d42:	2000      	movs	r0, #0
   21d44:	e7b4      	b.n	21cb0 <net_ipv6_prepare_for_send+0x2c>
   21d46:	68a3      	ldr	r3, [r4, #8]
   21d48:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   21d4a:	3118      	adds	r1, #24
   21d4c:	2000      	movs	r0, #0
   21d4e:	f7fa fb47 	bl	1c3e0 <net_if_ipv6_router_find_default>
			if (!router) {
   21d52:	4605      	mov	r5, r0
   21d54:	b108      	cbz	r0, 21d5a <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   21d56:	352c      	adds	r5, #44	; 0x2c
   21d58:	e7c1      	b.n	21cde <net_ipv6_prepare_for_send+0x5a>
   21d5a:	68a3      	ldr	r3, [r4, #8]
   21d5c:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   21d5e:	3518      	adds	r5, #24
				goto try_send;
   21d60:	e7c0      	b.n	21ce4 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   21d62:	4629      	mov	r1, r5
   21d64:	a803      	add	r0, sp, #12
   21d66:	f7fa fa4b 	bl	1c200 <net_if_ipv6_addr_onlink>
   21d6a:	2800      	cmp	r0, #0
   21d6c:	d0ba      	beq.n	21ce4 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   21d6e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21d70:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21d72:	7d5a      	ldrb	r2, [r3, #21]
   21d74:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21d78:	7d5b      	ldrb	r3, [r3, #21]
   21d7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   21d7e:	e7b1      	b.n	21ce4 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   21d80:	2103      	movs	r1, #3
   21d82:	4630      	mov	r0, r6
   21d84:	f7fd ff48 	bl	1fc18 <ipv6_nbr_set_state>
   21d88:	68f1      	ldr	r1, [r6, #12]
   21d8a:	f241 3288 	movw	r2, #5000	; 0x1388
   21d8e:	3114      	adds	r1, #20
   21d90:	4809      	ldr	r0, [pc, #36]	; (21db8 <net_ipv6_prepare_for_send+0x134>)
   21d92:	f008 fccb 	bl	2a72c <k_delayed_work_submit_to_queue>
   21d96:	e7bc      	b.n	21d12 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   21d98:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   21d9a:	68a3      	ldr	r3, [r4, #8]
   21d9c:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   21d9e:	2600      	movs	r6, #0
   21da0:	9601      	str	r6, [sp, #4]
   21da2:	9500      	str	r5, [sp, #0]
   21da4:	4633      	mov	r3, r6
   21da6:	3208      	adds	r2, #8
   21da8:	4621      	mov	r1, r4
   21daa:	f7ff f829 	bl	20e00 <net_ipv6_send_ns>
		return NULL;
   21dae:	4630      	mov	r0, r6
   21db0:	e77e      	b.n	21cb0 <net_ipv6_prepare_for_send+0x2c>
   21db2:	bf00      	nop
   21db4:	2000c3dc 	.word	0x2000c3dc
   21db8:	200030f0 	.word	0x200030f0

00021dbc <net_ipv6_send_rs>:
{
   21dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dc0:	b084      	sub	sp, #16
   21dc2:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21dc4:	6843      	ldr	r3, [r0, #4]
   21dc6:	689b      	ldr	r3, [r3, #8]
   21dc8:	2100      	movs	r1, #0
   21dca:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   21dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21dd0:	f7fc f816 	bl	1de00 <net_pkt_get_reserve_tx>
   21dd4:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21dd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21dda:	f7fc f82f 	bl	1de3c <net_pkt_get_frag>
   21dde:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   21de0:	4601      	mov	r1, r0
   21de2:	4620      	mov	r0, r4
   21de4:	f7fc f8a7 	bl	1df36 <net_pkt_frag_add>
	pkt->iface = iface;
   21de8:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21dea:	7d6b      	ldrb	r3, [r5, #21]
   21dec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21df0:	7d6b      	ldrb	r3, [r5, #21]
   21df2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   21df6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   21dfa:	220a      	movs	r2, #10
   21dfc:	f362 03c6 	bfi	r3, r2, #3, #4
   21e00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   21e04:	2328      	movs	r3, #40	; 0x28
   21e06:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   21e0a:	68a3      	ldr	r3, [r4, #8]
   21e0c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   21e0e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   21e12:	461a      	mov	r2, r3
   21e14:	2100      	movs	r1, #0
   21e16:	1ac0      	subs	r0, r0, r3
   21e18:	f008 fe12 	bl	2aa40 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   21e1c:	2200      	movs	r2, #0
   21e1e:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21e20:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   21e24:	68a3      	ldr	r3, [r4, #8]
   21e26:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21e2c:	7619      	strb	r1, [r3, #24]
   21e2e:	2102      	movs	r1, #2
   21e30:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   21e32:	769a      	strb	r2, [r3, #26]
   21e34:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21e36:	771a      	strb	r2, [r3, #28]
   21e38:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   21e3a:	779a      	strb	r2, [r3, #30]
   21e3c:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21e3e:	f883 2020 	strb.w	r2, [r3, #32]
   21e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21e46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   21e4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   21e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21e56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   21e5a:	2201      	movs	r2, #1
   21e5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   21e60:	68a3      	ldr	r3, [r4, #8]
   21e62:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21e66:	f108 0118 	add.w	r1, r8, #24
   21e6a:	4628      	mov	r0, r5
   21e6c:	f7fa fb9e 	bl	1c5ac <net_if_ipv6_select_src_addr>
   21e70:	4603      	mov	r3, r0
   21e72:	466d      	mov	r5, sp
   21e74:	6800      	ldr	r0, [r0, #0]
   21e76:	6859      	ldr	r1, [r3, #4]
   21e78:	689a      	ldr	r2, [r3, #8]
   21e7a:	68db      	ldr	r3, [r3, #12]
   21e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21e7e:	466d      	mov	r5, sp
   21e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21e82:	f8c8 0008 	str.w	r0, [r8, #8]
   21e86:	f8c8 100c 	str.w	r1, [r8, #12]
   21e8a:	f8c8 2010 	str.w	r2, [r8, #16]
   21e8e:	f8c8 3014 	str.w	r3, [r8, #20]
   21e92:	68a3      	ldr	r3, [r4, #8]
   21e94:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21e96:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21e98:	b93a      	cbnz	r2, 21eaa <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21e9a:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21e9c:	b982      	cbnz	r2, 21ec0 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21e9e:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21ea0:	b982      	cbnz	r2, 21ec4 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21ea2:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21ea4:	b183      	cbz	r3, 21ec8 <net_ipv6_send_rs+0x10c>
   21ea6:	2300      	movs	r3, #0
   21ea8:	e000      	b.n	21eac <net_ipv6_send_rs+0xf0>
   21eaa:	2300      	movs	r3, #0
	if (!unspec_src) {
   21eac:	461f      	mov	r7, r3
   21eae:	b97b      	cbnz	r3, 21ed0 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   21eb0:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   21eb2:	7d1b      	ldrb	r3, [r3, #20]
   21eb4:	2b06      	cmp	r3, #6
   21eb6:	d02a      	beq.n	21f0e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   21eb8:	2b08      	cmp	r3, #8
   21eba:	d007      	beq.n	21ecc <net_ipv6_send_rs+0x110>
	return 0;
   21ebc:	2500      	movs	r5, #0
   21ebe:	e008      	b.n	21ed2 <net_ipv6_send_rs+0x116>
   21ec0:	2300      	movs	r3, #0
   21ec2:	e7f3      	b.n	21eac <net_ipv6_send_rs+0xf0>
   21ec4:	2300      	movs	r3, #0
   21ec6:	e7f1      	b.n	21eac <net_ipv6_send_rs+0xf0>
   21ec8:	2301      	movs	r3, #1
   21eca:	e7ef      	b.n	21eac <net_ipv6_send_rs+0xf0>
		return 16;
   21ecc:	2510      	movs	r5, #16
   21ece:	e000      	b.n	21ed2 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   21ed0:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   21ed2:	2285      	movs	r2, #133	; 0x85
   21ed4:	1d29      	adds	r1, r5, #4
   21ed6:	4620      	mov	r0, r4
   21ed8:	f7fe f92f 	bl	2013a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   21edc:	3608      	adds	r6, #8
   21ede:	2104      	movs	r1, #4
   21ee0:	4630      	mov	r0, r6
   21ee2:	f7f9 fadb 	bl	1b49c <net_buf_simple_add>
	if (!unspec_src) {
   21ee6:	b1a7      	cbz	r7, 21f12 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21ee8:	68a1      	ldr	r1, [r4, #8]
   21eea:	4620      	mov	r0, r4
   21eec:	f7fd f8b0 	bl	1f050 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21ef0:	4620      	mov	r0, r4
   21ef2:	f7f9 fbf5 	bl	1b6e0 <net_send_data>
   21ef6:	2800      	cmp	r0, #0
   21ef8:	db2b      	blt.n	21f52 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   21efa:	4a1c      	ldr	r2, [pc, #112]	; (21f6c <net_ipv6_send_rs+0x1b0>)
   21efc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21f00:	3301      	adds	r3, #1
   21f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   21f06:	2000      	movs	r0, #0
}
   21f08:	b004      	add	sp, #16
   21f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   21f0e:	2508      	movs	r5, #8
   21f10:	e7df      	b.n	21ed2 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   21f12:	4629      	mov	r1, r5
   21f14:	4630      	mov	r0, r6
   21f16:	f7f9 fac1 	bl	1b49c <net_buf_simple_add>
   21f1a:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   21f1e:	4620      	mov	r0, r4
   21f20:	f7fc fab8 	bl	1e494 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   21f24:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21f28:	2301      	movs	r3, #1
   21f2a:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   21f2c:	08eb      	lsrs	r3, r5, #3
   21f2e:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   21f30:	f898 2014 	ldrb.w	r2, [r8, #20]
   21f34:	f8d8 1010 	ldr.w	r1, [r8, #16]
   21f38:	300a      	adds	r0, #10
   21f3a:	f7de f9c1 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21f3e:	f898 2014 	ldrb.w	r2, [r8, #20]
   21f42:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   21f44:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21f46:	3a02      	subs	r2, #2
   21f48:	2100      	movs	r1, #0
   21f4a:	4430      	add	r0, r6
   21f4c:	f008 fd78 	bl	2aa40 <memset>
   21f50:	e7ca      	b.n	21ee8 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   21f52:	4620      	mov	r0, r4
   21f54:	f7fb ffc5 	bl	1dee2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   21f58:	4a04      	ldr	r2, [pc, #16]	; (21f6c <net_ipv6_send_rs+0x1b0>)
   21f5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21f5e:	3301      	adds	r3, #1
   21f60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   21f64:	f06f 0015 	mvn.w	r0, #21
   21f68:	e7ce      	b.n	21f08 <net_ipv6_send_rs+0x14c>
   21f6a:	bf00      	nop
   21f6c:	20002fd0 	.word	0x20002fd0

00021f70 <net_ipv6_start_rs>:
{
   21f70:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   21f72:	f7ff ff23 	bl	21dbc <net_ipv6_send_rs>
}
   21f76:	bd08      	pop	{r3, pc}

00021f78 <net_ipv6_mld_join>:
{
   21f78:	b570      	push	{r4, r5, r6, lr}
   21f7a:	b082      	sub	sp, #8
   21f7c:	ab02      	add	r3, sp, #8
   21f7e:	f843 0d04 	str.w	r0, [r3, #-4]!
   21f82:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   21f84:	4619      	mov	r1, r3
   21f86:	4628      	mov	r0, r5
   21f88:	f7fa f842 	bl	1c010 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   21f8c:	4604      	mov	r4, r0
   21f8e:	b118      	cbz	r0, 21f98 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   21f90:	7803      	ldrb	r3, [r0, #0]
   21f92:	f013 0f02 	tst.w	r3, #2
   21f96:	d123      	bne.n	21fe0 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   21f98:	b1c4      	cbz	r4, 21fcc <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   21f9a:	2202      	movs	r2, #2
   21f9c:	4629      	mov	r1, r5
   21f9e:	9801      	ldr	r0, [sp, #4]
   21fa0:	f7fe fb5a 	bl	20658 <send_mldv2>
	if (ret < 0) {
   21fa4:	1e06      	subs	r6, r0, #0
   21fa6:	db0e      	blt.n	21fc6 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   21fa8:	7823      	ldrb	r3, [r4, #0]
   21faa:	f043 0302 	orr.w	r3, r3, #2
   21fae:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   21fb0:	2201      	movs	r2, #1
   21fb2:	4629      	mov	r1, r5
   21fb4:	9801      	ldr	r0, [sp, #4]
   21fb6:	f7fa f877 	bl	1c0a8 <net_if_mcast_monitor>
   21fba:	2300      	movs	r3, #0
   21fbc:	461a      	mov	r2, r3
   21fbe:	9901      	ldr	r1, [sp, #4]
   21fc0:	4809      	ldr	r0, [pc, #36]	; (21fe8 <net_ipv6_mld_join+0x70>)
   21fc2:	f001 fc01 	bl	237c8 <net_mgmt_event_notify_with_info>
}
   21fc6:	4630      	mov	r0, r6
   21fc8:	b002      	add	sp, #8
   21fca:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   21fcc:	4629      	mov	r1, r5
   21fce:	9801      	ldr	r0, [sp, #4]
   21fd0:	f7f9 ff32 	bl	1be38 <net_if_ipv6_maddr_add>
		if (!maddr) {
   21fd4:	4604      	mov	r4, r0
   21fd6:	2800      	cmp	r0, #0
   21fd8:	d1df      	bne.n	21f9a <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   21fda:	f06f 060b 	mvn.w	r6, #11
   21fde:	e7f2      	b.n	21fc6 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   21fe0:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21fe4:	e7ef      	b.n	21fc6 <net_ipv6_mld_join+0x4e>
   21fe6:	bf00      	nop
   21fe8:	f0600007 	.word	0xf0600007

00021fec <net_ipv6_mld_leave>:
{
   21fec:	b570      	push	{r4, r5, r6, lr}
   21fee:	4604      	mov	r4, r0
   21ff0:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   21ff2:	f7f9 ff5d 	bl	1beb0 <net_if_ipv6_maddr_rm>
   21ff6:	b198      	cbz	r0, 22020 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   21ff8:	2201      	movs	r2, #1
   21ffa:	4629      	mov	r1, r5
   21ffc:	4620      	mov	r0, r4
   21ffe:	f7fe fb2b 	bl	20658 <send_mldv2>
	if (ret < 0) {
   22002:	1e06      	subs	r6, r0, #0
   22004:	db0a      	blt.n	2201c <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   22006:	2200      	movs	r2, #0
   22008:	4629      	mov	r1, r5
   2200a:	4620      	mov	r0, r4
   2200c:	f7fa f84c 	bl	1c0a8 <net_if_mcast_monitor>
   22010:	2300      	movs	r3, #0
   22012:	461a      	mov	r2, r3
   22014:	4621      	mov	r1, r4
   22016:	4804      	ldr	r0, [pc, #16]	; (22028 <net_ipv6_mld_leave+0x3c>)
   22018:	f001 fbd6 	bl	237c8 <net_mgmt_event_notify_with_info>
}
   2201c:	4630      	mov	r0, r6
   2201e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22020:	f06f 0615 	mvn.w	r6, #21
   22024:	e7fa      	b.n	2201c <net_ipv6_mld_leave+0x30>
   22026:	bf00      	nop
   22028:	f0600008 	.word	0xf0600008

0002202c <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   2202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22030:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   22032:	6884      	ldr	r4, [r0, #8]
   22034:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   22036:	2300      	movs	r3, #0
   22038:	e002      	b.n	22040 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   2203a:	89a2      	ldrh	r2, [r4, #12]
   2203c:	4413      	add	r3, r2
		buf = buf->frags;
   2203e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   22040:	2c00      	cmp	r4, #0
   22042:	d1fa      	bne.n	2203a <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   22044:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   22046:	7939      	ldrb	r1, [r7, #4]
   22048:	797a      	ldrb	r2, [r7, #5]
   2204a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   2204e:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   22050:	4293      	cmp	r3, r2
   22052:	d007      	beq.n	22064 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   22054:	4abd      	ldr	r2, [pc, #756]	; (2234c <net_ipv6_process_pkt+0x320>)
   22056:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22058:	3301      	adds	r3, #1
   2205a:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   2205c:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   2205e:	b009      	add	sp, #36	; 0x24
   22060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   22064:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   22066:	2bff      	cmp	r3, #255	; 0xff
   22068:	d105      	bne.n	22076 <net_ipv6_process_pkt+0x4a>
   2206a:	4ab8      	ldr	r2, [pc, #736]	; (2234c <net_ipv6_process_pkt+0x320>)
   2206c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2206e:	3301      	adds	r3, #1
   22070:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   22072:	2002      	movs	r0, #2
   22074:	e7f3      	b.n	2205e <net_ipv6_process_pkt+0x32>
   22076:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   22078:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   2207c:	2100      	movs	r1, #0
   2207e:	4640      	mov	r0, r8
   22080:	f7f9 fd7c 	bl	1bb7c <net_if_ipv6_addr_lookup>
   22084:	2800      	cmp	r0, #0
   22086:	d06f      	beq.n	22168 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   22088:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   2208a:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   2208c:	2300      	movs	r3, #0
   2208e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   22092:	2328      	movs	r3, #40	; 0x28
   22094:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   22098:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   2209c:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   220a0:	f000 80b0 	beq.w	22204 <net_ipv6_process_pkt+0x1d8>
   220a4:	f1b9 0f11 	cmp.w	r9, #17
   220a8:	f000 80ae 	beq.w	22208 <net_ipv6_process_pkt+0x1dc>
   220ac:	f1b9 0f06 	cmp.w	r9, #6
   220b0:	f000 80a6 	beq.w	22200 <net_ipv6_process_pkt+0x1d4>
   220b4:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   220b6:	2b00      	cmp	r3, #0
   220b8:	f040 8166 	bne.w	22388 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   220bc:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   220c0:	2328      	movs	r3, #40	; 0x28
   220c2:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   220c6:	464f      	mov	r7, r9
	ext_bitmap = 0;
   220c8:	2300      	movs	r3, #0
   220ca:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   220cc:	9302      	str	r3, [sp, #8]
   220ce:	46a3      	mov	fp, r4
   220d0:	4654      	mov	r4, sl
	while (frag) {
   220d2:	2c00      	cmp	r4, #0
   220d4:	f000 8156 	beq.w	22384 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   220d8:	2f3a      	cmp	r7, #58	; 0x3a
   220da:	f000 8099 	beq.w	22210 <net_ipv6_process_pkt+0x1e4>
   220de:	2f11      	cmp	r7, #17
   220e0:	f000 8098 	beq.w	22214 <net_ipv6_process_pkt+0x1e8>
   220e4:	2f06      	cmp	r7, #6
   220e6:	f000 8091 	beq.w	2220c <net_ipv6_process_pkt+0x1e0>
   220ea:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   220ec:	2b00      	cmp	r3, #0
   220ee:	f040 8093 	bne.w	22218 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   220f2:	f10d 0820 	add.w	r8, sp, #32
   220f6:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   220fa:	f10d 031f 	add.w	r3, sp, #31
   220fe:	9300      	str	r3, [sp, #0]
   22100:	2301      	movs	r3, #1
   22102:	4642      	mov	r2, r8
   22104:	4620      	mov	r0, r4
   22106:	f7fc f86a 	bl	1e1de <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   2210a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2210e:	f10d 031e 	add.w	r3, sp, #30
   22112:	9300      	str	r3, [sp, #0]
   22114:	2301      	movs	r3, #1
   22116:	4642      	mov	r2, r8
   22118:	f7fc f861 	bl	1e1de <net_frag_read>
		if (!frag && offset == 0xffff) {
   2211c:	4604      	mov	r4, r0
   2211e:	2800      	cmp	r0, #0
   22120:	f000 8081 	beq.w	22226 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   22124:	f89d 801e 	ldrb.w	r8, [sp, #30]
   22128:	f108 0801 	add.w	r8, r8, #1
   2212c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   22130:	fa5f f888 	uxtb.w	r8, r8
   22134:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   22138:	fa1f f888 	uxth.w	r8, r8
   2213c:	9b02      	ldr	r3, [sp, #8]
   2213e:	4443      	add	r3, r8
   22140:	b29b      	uxth	r3, r3
   22142:	9302      	str	r3, [sp, #8]
		switch (next) {
   22144:	2f00      	cmp	r7, #0
   22146:	d077      	beq.n	22238 <net_ipv6_process_pkt+0x20c>
   22148:	2f3b      	cmp	r7, #59	; 0x3b
   2214a:	d073      	beq.n	22234 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   2214c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   22150:	3b01      	subs	r3, #1
   22152:	2201      	movs	r2, #1
   22154:	2104      	movs	r1, #4
   22156:	4628      	mov	r0, r5
   22158:	f7fd fa88 	bl	1f66c <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   2215c:	4a7b      	ldr	r2, [pc, #492]	; (2234c <net_ipv6_process_pkt+0x320>)
   2215e:	6a13      	ldr	r3, [r2, #32]
   22160:	3301      	adds	r3, #1
   22162:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   22164:	2002      	movs	r0, #2
   22166:	e77a      	b.n	2205e <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   22168:	2100      	movs	r1, #0
   2216a:	4640      	mov	r0, r8
   2216c:	f7f9 ff50 	bl	1c010 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   22170:	2800      	cmp	r0, #0
   22172:	d189      	bne.n	22088 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   22174:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   22176:	2bff      	cmp	r3, #255	; 0xff
   22178:	d086      	beq.n	22088 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2217a:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2217e:	bb8b      	cbnz	r3, 221e4 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22180:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22184:	bb83      	cbnz	r3, 221e8 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22186:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2218a:	bb7b      	cbnz	r3, 221ec <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   2218c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   22190:	0a13      	lsrs	r3, r2, #8
   22192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   22196:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2219a:	0211      	lsls	r1, r2, #8
   2219c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   221a0:	430b      	orrs	r3, r1
   221a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   221a6:	2b01      	cmp	r3, #1
   221a8:	d022      	beq.n	221f0 <net_ipv6_process_pkt+0x1c4>
   221aa:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   221ac:	2b00      	cmp	r3, #0
   221ae:	f47f af6b 	bne.w	22088 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   221b2:	ab06      	add	r3, sp, #24
   221b4:	aa05      	add	r2, sp, #20
   221b6:	4641      	mov	r1, r8
   221b8:	6968      	ldr	r0, [r5, #20]
   221ba:	f001 f9f5 	bl	235a8 <net_route_get_info>
   221be:	b1c8      	cbz	r0, 221f4 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   221c0:	9b05      	ldr	r3, [sp, #20]
   221c2:	b13b      	cbz	r3, 221d4 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   221c4:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   221c6:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   221c8:	7d5a      	ldrb	r2, [r3, #21]
   221ca:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   221ce:	7d5b      	ldrb	r3, [r3, #21]
   221d0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   221d4:	9906      	ldr	r1, [sp, #24]
   221d6:	4628      	mov	r0, r5
   221d8:	f001 fa0c 	bl	235f4 <net_route_packet>
			if (ret < 0) {
   221dc:	2800      	cmp	r0, #0
   221de:	db09      	blt.n	221f4 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   221e0:	2000      	movs	r0, #0
   221e2:	e73c      	b.n	2205e <net_ipv6_process_pkt+0x32>
   221e4:	2300      	movs	r3, #0
   221e6:	e7e1      	b.n	221ac <net_ipv6_process_pkt+0x180>
   221e8:	2300      	movs	r3, #0
   221ea:	e7df      	b.n	221ac <net_ipv6_process_pkt+0x180>
   221ec:	2300      	movs	r3, #0
   221ee:	e7dd      	b.n	221ac <net_ipv6_process_pkt+0x180>
   221f0:	2301      	movs	r3, #1
   221f2:	e7db      	b.n	221ac <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   221f4:	4a55      	ldr	r2, [pc, #340]	; (2234c <net_ipv6_process_pkt+0x320>)
   221f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   221f8:	3301      	adds	r3, #1
   221fa:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   221fc:	2002      	movs	r0, #2
   221fe:	e72e      	b.n	2205e <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   22200:	2301      	movs	r3, #1
   22202:	e758      	b.n	220b6 <net_ipv6_process_pkt+0x8a>
   22204:	2301      	movs	r3, #1
   22206:	e756      	b.n	220b6 <net_ipv6_process_pkt+0x8a>
   22208:	2301      	movs	r3, #1
   2220a:	e754      	b.n	220b6 <net_ipv6_process_pkt+0x8a>
   2220c:	2301      	movs	r3, #1
   2220e:	e76d      	b.n	220ec <net_ipv6_process_pkt+0xc0>
   22210:	2301      	movs	r3, #1
   22212:	e76b      	b.n	220ec <net_ipv6_process_pkt+0xc0>
   22214:	2301      	movs	r3, #1
   22216:	e769      	b.n	220ec <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   22218:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2221c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   2221e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   22222:	46b9      	mov	r9, r7
   22224:	e0b2      	b.n	2238c <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   22226:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2222a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2222e:	429a      	cmp	r2, r3
   22230:	f47f af78 	bne.w	22124 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   22234:	2002      	movs	r0, #2
   22236:	e712      	b.n	2205e <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   22238:	f1b9 0f00 	cmp.w	r9, #0
   2223c:	d186      	bne.n	2214c <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   2223e:	9a03      	ldr	r2, [sp, #12]
   22240:	f012 0f01 	tst.w	r2, #1
   22244:	d182      	bne.n	2214c <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   22246:	f042 0301 	orr.w	r3, r2, #1
   2224a:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   2224c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   22250:	4546      	cmp	r6, r8
   22252:	f2c0 8094 	blt.w	2237e <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   22256:	f10d 0313 	add.w	r3, sp, #19
   2225a:	9300      	str	r3, [sp, #0]
   2225c:	2301      	movs	r3, #1
   2225e:	aa06      	add	r2, sp, #24
   22260:	4620      	mov	r0, r4
   22262:	f7fb ffbc 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   22266:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   2226a:	ab05      	add	r3, sp, #20
   2226c:	9300      	str	r3, [sp, #0]
   2226e:	2301      	movs	r3, #1
   22270:	aa06      	add	r2, sp, #24
   22272:	f7fb ffb4 	bl	1e1de <net_frag_read>
	if (!frag && loc == 0xffff) {
   22276:	4604      	mov	r4, r0
   22278:	b108      	cbz	r0, 2227e <net_ipv6_process_pkt+0x252>
   2227a:	2702      	movs	r7, #2
   2227c:	e027      	b.n	222ce <net_ipv6_process_pkt+0x2a2>
   2227e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   22282:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22286:	429a      	cmp	r2, r3
   22288:	d068      	beq.n	2235c <net_ipv6_process_pkt+0x330>
   2228a:	2702      	movs	r7, #2
   2228c:	e01f      	b.n	222ce <net_ipv6_process_pkt+0x2a2>
			length++;
   2228e:	3701      	adds	r7, #1
   22290:	b2bf      	uxth	r7, r7
			loc--;
   22292:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   22296:	3b01      	subs	r3, #1
   22298:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   2229c:	45b8      	cmp	r8, r7
   2229e:	d960      	bls.n	22362 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   222a0:	f10d 0a20 	add.w	sl, sp, #32
   222a4:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   222a8:	f10d 0313 	add.w	r3, sp, #19
   222ac:	9300      	str	r3, [sp, #0]
   222ae:	2301      	movs	r3, #1
   222b0:	4652      	mov	r2, sl
   222b2:	4620      	mov	r0, r4
   222b4:	f7fb ff93 	bl	1e1de <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   222b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   222bc:	ab05      	add	r3, sp, #20
   222be:	9300      	str	r3, [sp, #0]
   222c0:	2301      	movs	r3, #1
   222c2:	4652      	mov	r2, sl
   222c4:	f7fb ff8b 	bl	1e1de <net_frag_read>
		if (!frag && loc == 0xffff) {
   222c8:	4604      	mov	r4, r0
   222ca:	2800      	cmp	r0, #0
   222cc:	d040      	beq.n	22350 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   222ce:	2c00      	cmp	r4, #0
   222d0:	d047      	beq.n	22362 <net_ipv6_process_pkt+0x336>
   222d2:	45b8      	cmp	r8, r7
   222d4:	d945      	bls.n	22362 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   222d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   222da:	2b00      	cmp	r3, #0
   222dc:	d0d7      	beq.n	2228e <net_ipv6_process_pkt+0x262>
   222de:	2b01      	cmp	r3, #1
   222e0:	d009      	beq.n	222f6 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   222e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   222e6:	2b80      	cmp	r3, #128	; 0x80
   222e8:	d019      	beq.n	2231e <net_ipv6_process_pkt+0x2f2>
   222ea:	2bc0      	cmp	r3, #192	; 0xc0
   222ec:	d012      	beq.n	22314 <net_ipv6_process_pkt+0x2e8>
   222ee:	2b40      	cmp	r3, #64	; 0x40
   222f0:	d00e      	beq.n	22310 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   222f2:	462b      	mov	r3, r5
   222f4:	e01a      	b.n	2232c <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   222f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   222fa:	441f      	add	r7, r3
   222fc:	b2bf      	uxth	r7, r7
   222fe:	3702      	adds	r7, #2
   22300:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   22302:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   22306:	4413      	add	r3, r2
   22308:	3302      	adds	r3, #2
   2230a:	f8ad 3018 	strh.w	r3, [sp, #24]
   2230e:	e7c5      	b.n	2229c <net_ipv6_process_pkt+0x270>
		return NULL;
   22310:	2300      	movs	r3, #0
   22312:	e00b      	b.n	2232c <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   22314:	68ab      	ldr	r3, [r5, #8]
   22316:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   22318:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   2231a:	2bff      	cmp	r3, #255	; 0xff
   2231c:	d013      	beq.n	22346 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   2231e:	463b      	mov	r3, r7
   22320:	2202      	movs	r2, #2
   22322:	2104      	movs	r1, #4
   22324:	4628      	mov	r0, r5
   22326:	f7fd f9a1 	bl	1f66c <net_icmpv6_send_error>
		return NULL;
   2232a:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   2232c:	b1b3      	cbz	r3, 2235c <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   2232e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   22332:	441f      	add	r7, r3
   22334:	b2bf      	uxth	r7, r7
   22336:	3702      	adds	r7, #2
   22338:	b2bf      	uxth	r7, r7
			loc += opt_len;
   2233a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2233e:	4413      	add	r3, r2
   22340:	f8ad 3018 	strh.w	r3, [sp, #24]
   22344:	e7aa      	b.n	2229c <net_ipv6_process_pkt+0x270>
			return NULL;
   22346:	2300      	movs	r3, #0
   22348:	e7f0      	b.n	2232c <net_ipv6_process_pkt+0x300>
   2234a:	bf00      	nop
   2234c:	20002fd0 	.word	0x20002fd0
		if (!frag && loc == 0xffff) {
   22350:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   22354:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22358:	429a      	cmp	r2, r3
   2235a:	d1b8      	bne.n	222ce <net_ipv6_process_pkt+0x2a2>
	return NULL;
   2235c:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   2235e:	2302      	movs	r3, #2
   22360:	e007      	b.n	22372 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   22362:	45b8      	cmp	r8, r7
   22364:	d1fa      	bne.n	2235c <net_ipv6_process_pkt+0x330>
	*pos += length;
   22366:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2236a:	441f      	add	r7, r3
   2236c:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   22370:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   22372:	2b02      	cmp	r3, #2
   22374:	f43f af5e 	beq.w	22234 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   22378:	f89d 701f 	ldrb.w	r7, [sp, #31]
   2237c:	e6a9      	b.n	220d2 <net_ipv6_process_pkt+0xa6>
		return NULL;
   2237e:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   22380:	2302      	movs	r3, #2
   22382:	e7f6      	b.n	22372 <net_ipv6_process_pkt+0x346>
   22384:	46b9      	mov	r9, r7
   22386:	e001      	b.n	2238c <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   22388:	2300      	movs	r3, #0
   2238a:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   2238c:	9b02      	ldr	r3, [sp, #8]
   2238e:	b10b      	cbz	r3, 22394 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   22390:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   22394:	f1b9 0f11 	cmp.w	r9, #17
   22398:	d011      	beq.n	223be <net_ipv6_process_pkt+0x392>
   2239a:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   2239e:	d004      	beq.n	223aa <net_ipv6_process_pkt+0x37e>
   223a0:	f1b9 0f06 	cmp.w	r9, #6
   223a4:	d010      	beq.n	223c8 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   223a6:	2002      	movs	r0, #2
   223a8:	e659      	b.n	2205e <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   223aa:	a906      	add	r1, sp, #24
   223ac:	4628      	mov	r0, r5
   223ae:	f7fc fe9c 	bl	1f0ea <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   223b2:	7842      	ldrb	r2, [r0, #1]
   223b4:	7801      	ldrb	r1, [r0, #0]
   223b6:	4628      	mov	r0, r5
   223b8:	f7fd fb62 	bl	1fa80 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   223bc:	e64f      	b.n	2205e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   223be:	4629      	mov	r1, r5
   223c0:	2011      	movs	r0, #17
   223c2:	f003 fbd3 	bl	25b6c <net_conn_input>
   223c6:	e64a      	b.n	2205e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   223c8:	4629      	mov	r1, r5
   223ca:	2006      	movs	r0, #6
   223cc:	f003 fbce 	bl	25b6c <net_conn_input>
   223d0:	e645      	b.n	2205e <net_ipv6_process_pkt+0x32>
   223d2:	bf00      	nop

000223d4 <net_ipv6_init>:

void net_ipv6_init(void)
{
   223d4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   223d6:	4806      	ldr	r0, [pc, #24]	; (223f0 <net_ipv6_init+0x1c>)
   223d8:	f7fc fe0a 	bl	1eff0 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   223dc:	4805      	ldr	r0, [pc, #20]	; (223f4 <net_ipv6_init+0x20>)
   223de:	f7fc fe07 	bl	1eff0 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   223e2:	4805      	ldr	r0, [pc, #20]	; (223f8 <net_ipv6_init+0x24>)
   223e4:	f7fc fe04 	bl	1eff0 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   223e8:	4804      	ldr	r0, [pc, #16]	; (223fc <net_ipv6_init+0x28>)
   223ea:	f7fc fe01 	bl	1eff0 <net_icmpv6_register_handler>
   223ee:	bd08      	pop	{r3, pc}
   223f0:	2000c7e8 	.word	0x2000c7e8
   223f4:	2000c3d0 	.word	0x2000c3d0
   223f8:	2000c7f4 	.word	0x2000c7f4
   223fc:	2000c3c4 	.word	0x2000c3c4

00022400 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   22400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   22404:	6883      	ldr	r3, [r0, #8]
   22406:	689b      	ldr	r3, [r3, #8]
   22408:	f993 3001 	ldrsb.w	r3, [r3, #1]
   2240c:	2b00      	cmp	r3, #0
   2240e:	f2c0 831e 	blt.w	22a4e <uncompress_IPHC_header+0x64e>
   22412:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   22414:	2164      	movs	r1, #100	; 0x64
   22416:	f7fb fd11 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   2241a:	4607      	mov	r7, r0
   2241c:	2800      	cmp	r0, #0
   2241e:	f000 8319 	beq.w	22a54 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   22422:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   22424:	2360      	movs	r3, #96	; 0x60
   22426:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   22428:	2328      	movs	r3, #40	; 0x28
   2242a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2242e:	68a3      	ldr	r3, [r4, #8]
   22430:	689a      	ldr	r2, [r3, #8]
   22432:	7813      	ldrb	r3, [r2, #0]
   22434:	f003 0318 	and.w	r3, r3, #24
   22438:	2b18      	cmp	r3, #24
   2243a:	d863      	bhi.n	22504 <uncompress_IPHC_header+0x104>
   2243c:	e8df f003 	tbb	[pc, r3]
   22440:	6262620d 	.word	0x6262620d
   22444:	62626262 	.word	0x62626262
   22448:	6262623c 	.word	0x6262623c
   2244c:	62626262 	.word	0x62626262
   22450:	6262624c 	.word	0x6262624c
   22454:	62626262 	.word	0x62626262
   22458:	5c          	.byte	0x5c
   22459:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   2245a:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   2245c:	0993      	lsrs	r3, r2, #6
   2245e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   22462:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22464:	7832      	ldrb	r2, [r6, #0]
   22466:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   2246a:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   2246c:	68a2      	ldr	r2, [r4, #8]
   2246e:	6892      	ldr	r2, [r2, #8]
   22470:	f992 2003 	ldrsb.w	r2, [r2, #3]
   22474:	f002 020f 	and.w	r2, r2, #15
   22478:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   2247c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   2247e:	68a3      	ldr	r3, [r4, #8]
   22480:	6899      	ldr	r1, [r3, #8]
   22482:	2202      	movs	r2, #2
   22484:	3104      	adds	r1, #4
   22486:	18b0      	adds	r0, r6, r2
   22488:	f7dd ff1a 	bl	2c0 <memcpy>
		offset += 2;
   2248c:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   2248e:	68a3      	ldr	r3, [r4, #8]
   22490:	689b      	ldr	r3, [r3, #8]
   22492:	781a      	ldrb	r2, [r3, #0]
   22494:	f012 0f04 	tst.w	r2, #4
   22498:	d103      	bne.n	224a2 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   2249a:	5d5b      	ldrb	r3, [r3, r5]
   2249c:	71b3      	strb	r3, [r6, #6]
		offset++;
   2249e:	3501      	adds	r5, #1
   224a0:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   224a2:	68a3      	ldr	r3, [r4, #8]
   224a4:	689a      	ldr	r2, [r3, #8]
   224a6:	7813      	ldrb	r3, [r2, #0]
   224a8:	f003 0303 	and.w	r3, r3, #3
   224ac:	2b03      	cmp	r3, #3
   224ae:	d82f      	bhi.n	22510 <uncompress_IPHC_header+0x110>
   224b0:	e8df f003 	tbb	[pc, r3]
   224b4:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   224b8:	7893      	ldrb	r3, [r2, #2]
   224ba:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   224bc:	f003 030f 	and.w	r3, r3, #15
   224c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   224c4:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   224c6:	68a3      	ldr	r3, [r4, #8]
   224c8:	6899      	ldr	r1, [r3, #8]
   224ca:	2202      	movs	r2, #2
   224cc:	3103      	adds	r1, #3
   224ce:	18b0      	adds	r0, r6, r2
   224d0:	f7dd fef6 	bl	2c0 <memcpy>
		offset += 2;
   224d4:	2505      	movs	r5, #5
   224d6:	e7da      	b.n	2248e <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   224d8:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   224da:	0993      	lsrs	r3, r2, #6
   224dc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   224e0:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   224e2:	7832      	ldrb	r2, [r6, #0]
   224e4:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   224e8:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   224ea:	011b      	lsls	r3, r3, #4
   224ec:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   224ee:	2300      	movs	r3, #0
   224f0:	70b3      	strb	r3, [r6, #2]
   224f2:	70f3      	strb	r3, [r6, #3]
		offset++;
   224f4:	2503      	movs	r5, #3
   224f6:	e7ca      	b.n	2248e <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   224f8:	2300      	movs	r3, #0
   224fa:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   224fc:	70b3      	strb	r3, [r6, #2]
   224fe:	70f3      	strb	r3, [r6, #3]
   22500:	2502      	movs	r5, #2
   22502:	e7c4      	b.n	2248e <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   22504:	2502      	movs	r5, #2
   22506:	e7c2      	b.n	2248e <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   22508:	1c6b      	adds	r3, r5, #1
   2250a:	5d52      	ldrb	r2, [r2, r5]
   2250c:	71f2      	strb	r2, [r6, #7]
   2250e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   22510:	2210      	movs	r2, #16
   22512:	2100      	movs	r1, #0
   22514:	f106 0008 	add.w	r0, r6, #8
   22518:	f008 fa92 	bl	2aa40 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   2251c:	2210      	movs	r2, #16
   2251e:	2100      	movs	r1, #0
   22520:	f106 0018 	add.w	r0, r6, #24
   22524:	f008 fa8c 	bl	2aa40 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   22528:	68a3      	ldr	r3, [r4, #8]
   2252a:	689b      	ldr	r3, [r3, #8]
   2252c:	785b      	ldrb	r3, [r3, #1]
   2252e:	f013 0f40 	tst.w	r3, #64	; 0x40
   22532:	d011      	beq.n	22558 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   22534:	f013 0f30 	tst.w	r3, #48	; 0x30
   22538:	d05e      	beq.n	225f8 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   2253a:	4638      	mov	r0, r7
   2253c:	f7fb fccb 	bl	1ded6 <net_pkt_frag_unref>
	return false;
   22540:	2000      	movs	r0, #0
   22542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   22546:	2301      	movs	r3, #1
   22548:	71f3      	strb	r3, [r6, #7]
   2254a:	e7e1      	b.n	22510 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   2254c:	2340      	movs	r3, #64	; 0x40
   2254e:	71f3      	strb	r3, [r6, #7]
   22550:	e7de      	b.n	22510 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   22552:	23ff      	movs	r3, #255	; 0xff
   22554:	71f3      	strb	r3, [r6, #7]
   22556:	e7db      	b.n	22510 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   22558:	68a3      	ldr	r3, [r4, #8]
   2255a:	6899      	ldr	r1, [r3, #8]
   2255c:	784b      	ldrb	r3, [r1, #1]
   2255e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   22562:	2b10      	cmp	r3, #16
   22564:	d059      	beq.n	2261a <uncompress_IPHC_header+0x21a>
   22566:	d93e      	bls.n	225e6 <uncompress_IPHC_header+0x1e6>
   22568:	2b20      	cmp	r3, #32
   2256a:	d065      	beq.n	22638 <uncompress_IPHC_header+0x238>
   2256c:	2b30      	cmp	r3, #48	; 0x30
   2256e:	d143      	bne.n	225f8 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   22570:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   22574:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   22578:	23fe      	movs	r3, #254	; 0xfe
   2257a:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   2257c:	2380      	movs	r3, #128	; 0x80
   2257e:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   22582:	2300      	movs	r3, #0
   22584:	f888 3002 	strb.w	r3, [r8, #2]
   22588:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   2258c:	f888 3004 	strb.w	r3, [r8, #4]
   22590:	f888 3005 	strb.w	r3, [r8, #5]
   22594:	f888 3006 	strb.w	r3, [r8, #6]
   22598:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   2259c:	f899 2004 	ldrb.w	r2, [r9, #4]
   225a0:	2a06      	cmp	r2, #6
   225a2:	d05b      	beq.n	2265c <uncompress_IPHC_header+0x25c>
   225a4:	2a08      	cmp	r2, #8
   225a6:	f000 8082 	beq.w	226ae <uncompress_IPHC_header+0x2ae>
   225aa:	2a02      	cmp	r2, #2
   225ac:	d124      	bne.n	225f8 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   225ae:	f899 3005 	ldrb.w	r3, [r9, #5]
   225b2:	2b01      	cmp	r3, #1
   225b4:	d120      	bne.n	225f8 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   225b6:	2300      	movs	r3, #0
   225b8:	f888 3008 	strb.w	r3, [r8, #8]
   225bc:	f888 3009 	strb.w	r3, [r8, #9]
   225c0:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   225c4:	22ff      	movs	r2, #255	; 0xff
   225c6:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   225ca:	22fe      	movs	r2, #254	; 0xfe
   225cc:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   225d0:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   225d4:	6a23      	ldr	r3, [r4, #32]
   225d6:	781b      	ldrb	r3, [r3, #0]
   225d8:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   225dc:	6a23      	ldr	r3, [r4, #32]
   225de:	785b      	ldrb	r3, [r3, #1]
   225e0:	f888 300f 	strb.w	r3, [r8, #15]
   225e4:	e008      	b.n	225f8 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   225e6:	b93b      	cbnz	r3, 225f8 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   225e8:	2210      	movs	r2, #16
   225ea:	4429      	add	r1, r5
   225ec:	f106 0008 	add.w	r0, r6, #8
   225f0:	f7dd fe66 	bl	2c0 <memcpy>
		offset += 16;
   225f4:	3510      	adds	r5, #16
   225f6:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   225f8:	68a3      	ldr	r3, [r4, #8]
   225fa:	6899      	ldr	r1, [r3, #8]
   225fc:	784b      	ldrb	r3, [r1, #1]
   225fe:	f013 0f08 	tst.w	r3, #8
   22602:	d160      	bne.n	226c6 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   22604:	f003 0303 	and.w	r3, r3, #3
   22608:	2b03      	cmp	r3, #3
   2260a:	f200 80ad 	bhi.w	22768 <uncompress_IPHC_header+0x368>
   2260e:	e8df f013 	tbh	[pc, r3, lsl #1]
   22612:	00a3      	.short	0x00a3
   22614:	00e500d6 	.word	0x00e500d6
   22618:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   2261a:	23fe      	movs	r3, #254	; 0xfe
   2261c:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   2261e:	2380      	movs	r3, #128	; 0x80
   22620:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   22622:	68a3      	ldr	r3, [r4, #8]
   22624:	6899      	ldr	r1, [r3, #8]
   22626:	2208      	movs	r2, #8
   22628:	4429      	add	r1, r5
   2262a:	f106 0010 	add.w	r0, r6, #16
   2262e:	f7dd fe47 	bl	2c0 <memcpy>
		offset += 8;
   22632:	3508      	adds	r5, #8
   22634:	b2ed      	uxtb	r5, r5
   22636:	e7df      	b.n	225f8 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   22638:	23fe      	movs	r3, #254	; 0xfe
   2263a:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   2263c:	2280      	movs	r2, #128	; 0x80
   2263e:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   22640:	22ff      	movs	r2, #255	; 0xff
   22642:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   22644:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   22646:	68a3      	ldr	r3, [r4, #8]
   22648:	6899      	ldr	r1, [r3, #8]
   2264a:	2202      	movs	r2, #2
   2264c:	4429      	add	r1, r5
   2264e:	f106 0016 	add.w	r0, r6, #22
   22652:	f7dd fe35 	bl	2c0 <memcpy>
		offset += 2;
   22656:	3502      	adds	r5, #2
   22658:	b2ed      	uxtb	r5, r5
   2265a:	e7cd      	b.n	225f8 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2265c:	2203      	movs	r2, #3
   2265e:	6a21      	ldr	r1, [r4, #32]
   22660:	f108 0008 	add.w	r0, r8, #8
   22664:	f7dd fe2c 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   22668:	23ff      	movs	r3, #255	; 0xff
   2266a:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   2266e:	23fe      	movs	r3, #254	; 0xfe
   22670:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22674:	6a21      	ldr	r1, [r4, #32]
   22676:	2203      	movs	r2, #3
   22678:	4411      	add	r1, r2
   2267a:	f108 000d 	add.w	r0, r8, #13
   2267e:	f7dd fe1f 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   22682:	f899 3005 	ldrb.w	r3, [r9, #5]
   22686:	2b02      	cmp	r3, #2
   22688:	d00a      	beq.n	226a0 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2268a:	f899 3005 	ldrb.w	r3, [r9, #5]
   2268e:	2b03      	cmp	r3, #3
   22690:	d1b2      	bne.n	225f8 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   22692:	f898 3008 	ldrb.w	r3, [r8, #8]
   22696:	f083 0302 	eor.w	r3, r3, #2
   2269a:	f888 3008 	strb.w	r3, [r8, #8]
   2269e:	e7ab      	b.n	225f8 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   226a0:	f898 3008 	ldrb.w	r3, [r8, #8]
   226a4:	f083 0302 	eor.w	r3, r3, #2
   226a8:	f888 3008 	strb.w	r3, [r8, #8]
   226ac:	e7ed      	b.n	2268a <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   226ae:	6a21      	ldr	r1, [r4, #32]
   226b0:	f108 0008 	add.w	r0, r8, #8
   226b4:	f7dd fe04 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   226b8:	f898 3008 	ldrb.w	r3, [r8, #8]
   226bc:	f083 0302 	eor.w	r3, r3, #2
   226c0:	f888 3008 	strb.w	r3, [r8, #8]
   226c4:	e798      	b.n	225f8 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   226c6:	784b      	ldrb	r3, [r1, #1]
   226c8:	f013 0f04 	tst.w	r3, #4
   226cc:	d142      	bne.n	22754 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   226ce:	f003 0303 	and.w	r3, r3, #3
   226d2:	2b03      	cmp	r3, #3
   226d4:	d848      	bhi.n	22768 <uncompress_IPHC_header+0x368>
   226d6:	e8df f003 	tbb	[pc, r3]
   226da:	0b02      	.short	0x0b02
   226dc:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   226de:	2210      	movs	r2, #16
   226e0:	4429      	add	r1, r5
   226e2:	f106 0018 	add.w	r0, r6, #24
   226e6:	f7dd fdeb 	bl	2c0 <memcpy>
		offset += 16;
   226ea:	3510      	adds	r5, #16
   226ec:	b2ed      	uxtb	r5, r5
   226ee:	e03b      	b.n	22768 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   226f0:	23ff      	movs	r3, #255	; 0xff
   226f2:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   226f4:	68a3      	ldr	r3, [r4, #8]
   226f6:	689b      	ldr	r3, [r3, #8]
   226f8:	1c69      	adds	r1, r5, #1
   226fa:	5d5b      	ldrb	r3, [r3, r5]
   226fc:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   226fe:	68a3      	ldr	r3, [r4, #8]
   22700:	689b      	ldr	r3, [r3, #8]
   22702:	2205      	movs	r2, #5
   22704:	fa53 f181 	uxtab	r1, r3, r1
   22708:	f106 0023 	add.w	r0, r6, #35	; 0x23
   2270c:	f7dd fdd8 	bl	2c0 <memcpy>
		offset += 5;
   22710:	3506      	adds	r5, #6
   22712:	b2ed      	uxtb	r5, r5
   22714:	e028      	b.n	22768 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   22716:	23ff      	movs	r3, #255	; 0xff
   22718:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2271a:	68a3      	ldr	r3, [r4, #8]
   2271c:	689b      	ldr	r3, [r3, #8]
   2271e:	1c69      	adds	r1, r5, #1
   22720:	5d5b      	ldrb	r3, [r3, r5]
   22722:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   22724:	68a3      	ldr	r3, [r4, #8]
   22726:	689b      	ldr	r3, [r3, #8]
   22728:	2203      	movs	r2, #3
   2272a:	fa53 f181 	uxtab	r1, r3, r1
   2272e:	f106 0025 	add.w	r0, r6, #37	; 0x25
   22732:	f7dd fdc5 	bl	2c0 <memcpy>
		offset += 3;
   22736:	3504      	adds	r5, #4
   22738:	b2ed      	uxtb	r5, r5
   2273a:	e015      	b.n	22768 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   2273c:	23ff      	movs	r3, #255	; 0xff
   2273e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   22740:	2302      	movs	r3, #2
   22742:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   22744:	68a3      	ldr	r3, [r4, #8]
   22746:	689a      	ldr	r2, [r3, #8]
   22748:	1c6b      	adds	r3, r5, #1
   2274a:	5d52      	ldrb	r2, [r2, r5]
   2274c:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   22750:	b2dd      	uxtb	r5, r3
   22752:	e009      	b.n	22768 <uncompress_IPHC_header+0x368>
		return 0;
   22754:	2500      	movs	r5, #0
   22756:	e007      	b.n	22768 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   22758:	2210      	movs	r2, #16
   2275a:	4429      	add	r1, r5
   2275c:	f106 0018 	add.w	r0, r6, #24
   22760:	f7dd fdae 	bl	2c0 <memcpy>
		offset += 16;
   22764:	3510      	adds	r5, #16
   22766:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   22768:	f107 0a08 	add.w	sl, r7, #8
   2276c:	2128      	movs	r1, #40	; 0x28
   2276e:	4650      	mov	r0, sl
   22770:	f7f8 fe94 	bl	1b49c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   22774:	68a3      	ldr	r3, [r4, #8]
   22776:	689b      	ldr	r3, [r3, #8]
   22778:	781a      	ldrb	r2, [r3, #0]
   2277a:	f012 0f04 	tst.w	r2, #4
   2277e:	f000 8114 	beq.w	229aa <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   22782:	5d5b      	ldrb	r3, [r3, r5]
   22784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   22788:	2bf0      	cmp	r3, #240	; 0xf0
   2278a:	f47f aed6 	bne.w	2253a <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   2278e:	2311      	movs	r3, #17
   22790:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   22792:	f8d7 b008 	ldr.w	fp, [r7, #8]
   22796:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   2279a:	68a3      	ldr	r3, [r4, #8]
   2279c:	6898      	ldr	r0, [r3, #8]
   2279e:	f810 8005 	ldrb.w	r8, [r0, r5]
   227a2:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   227a6:	1c69      	adds	r1, r5, #1
   227a8:	b2c9      	uxtb	r1, r1
   227aa:	5d43      	ldrb	r3, [r0, r5]
   227ac:	f003 0303 	and.w	r3, r3, #3
   227b0:	2b03      	cmp	r3, #3
   227b2:	f200 80ed 	bhi.w	22990 <uncompress_IPHC_header+0x590>
   227b6:	e8df f003 	tbb	[pc, r3]
   227ba:	ae95      	.short	0xae95
   227bc:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   227be:	23fe      	movs	r3, #254	; 0xfe
   227c0:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   227c2:	2380      	movs	r3, #128	; 0x80
   227c4:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   227c6:	68a3      	ldr	r3, [r4, #8]
   227c8:	6899      	ldr	r1, [r3, #8]
   227ca:	2208      	movs	r2, #8
   227cc:	4429      	add	r1, r5
   227ce:	f106 0020 	add.w	r0, r6, #32
   227d2:	f7dd fd75 	bl	2c0 <memcpy>
		offset += 8;
   227d6:	3508      	adds	r5, #8
   227d8:	b2ed      	uxtb	r5, r5
   227da:	e7c5      	b.n	22768 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   227dc:	23fe      	movs	r3, #254	; 0xfe
   227de:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   227e0:	2280      	movs	r2, #128	; 0x80
   227e2:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   227e4:	22ff      	movs	r2, #255	; 0xff
   227e6:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   227ea:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   227ee:	68a3      	ldr	r3, [r4, #8]
   227f0:	6899      	ldr	r1, [r3, #8]
   227f2:	2202      	movs	r2, #2
   227f4:	4429      	add	r1, r5
   227f6:	f106 0026 	add.w	r0, r6, #38	; 0x26
   227fa:	f7dd fd61 	bl	2c0 <memcpy>
		offset += 2;
   227fe:	3502      	adds	r5, #2
   22800:	b2ed      	uxtb	r5, r5
   22802:	e7b1      	b.n	22768 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   22804:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   22808:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   2280c:	23fe      	movs	r3, #254	; 0xfe
   2280e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   22810:	2380      	movs	r3, #128	; 0x80
   22812:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   22816:	2300      	movs	r3, #0
   22818:	f888 3002 	strb.w	r3, [r8, #2]
   2281c:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   22820:	f888 3004 	strb.w	r3, [r8, #4]
   22824:	f888 3005 	strb.w	r3, [r8, #5]
   22828:	f888 3006 	strb.w	r3, [r8, #6]
   2282c:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   22830:	f899 2004 	ldrb.w	r2, [r9, #4]
   22834:	2a06      	cmp	r2, #6
   22836:	d01f      	beq.n	22878 <uncompress_IPHC_header+0x478>
   22838:	2a08      	cmp	r2, #8
   2283a:	d047      	beq.n	228cc <uncompress_IPHC_header+0x4cc>
   2283c:	2a02      	cmp	r2, #2
   2283e:	d193      	bne.n	22768 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   22840:	f899 3005 	ldrb.w	r3, [r9, #5]
   22844:	2b01      	cmp	r3, #1
   22846:	d18f      	bne.n	22768 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   22848:	2300      	movs	r3, #0
   2284a:	f888 3008 	strb.w	r3, [r8, #8]
   2284e:	f888 3009 	strb.w	r3, [r8, #9]
   22852:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   22856:	22ff      	movs	r2, #255	; 0xff
   22858:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   2285c:	22fe      	movs	r2, #254	; 0xfe
   2285e:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   22862:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   22866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22868:	781b      	ldrb	r3, [r3, #0]
   2286a:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   2286e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22870:	785b      	ldrb	r3, [r3, #1]
   22872:	f888 300f 	strb.w	r3, [r8, #15]
   22876:	e777      	b.n	22768 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22878:	2203      	movs	r2, #3
   2287a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2287c:	f108 0008 	add.w	r0, r8, #8
   22880:	f7dd fd1e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   22884:	23ff      	movs	r3, #255	; 0xff
   22886:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   2288a:	23fe      	movs	r3, #254	; 0xfe
   2288c:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22890:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22892:	2203      	movs	r2, #3
   22894:	4411      	add	r1, r2
   22896:	f108 000d 	add.w	r0, r8, #13
   2289a:	f7dd fd11 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2289e:	f899 3005 	ldrb.w	r3, [r9, #5]
   228a2:	2b02      	cmp	r3, #2
   228a4:	d00b      	beq.n	228be <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   228a6:	f899 3005 	ldrb.w	r3, [r9, #5]
   228aa:	2b03      	cmp	r3, #3
   228ac:	f47f af5c 	bne.w	22768 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   228b0:	f898 3008 	ldrb.w	r3, [r8, #8]
   228b4:	f083 0302 	eor.w	r3, r3, #2
   228b8:	f888 3008 	strb.w	r3, [r8, #8]
   228bc:	e754      	b.n	22768 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   228be:	f898 3008 	ldrb.w	r3, [r8, #8]
   228c2:	f083 0302 	eor.w	r3, r3, #2
   228c6:	f888 3008 	strb.w	r3, [r8, #8]
   228ca:	e7ec      	b.n	228a6 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   228cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   228ce:	f108 0008 	add.w	r0, r8, #8
   228d2:	f7dd fcf5 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   228d6:	f898 3008 	ldrb.w	r3, [r8, #8]
   228da:	f083 0302 	eor.w	r3, r3, #2
   228de:	f888 3008 	strb.w	r3, [r8, #8]
   228e2:	e741      	b.n	22768 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   228e4:	2202      	movs	r2, #2
   228e6:	4401      	add	r1, r0
   228e8:	4648      	mov	r0, r9
   228ea:	f7dd fce9 	bl	2c0 <memcpy>
		offset += 2;
   228ee:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   228f0:	68a3      	ldr	r3, [r4, #8]
   228f2:	689b      	ldr	r3, [r3, #8]
   228f4:	2202      	movs	r2, #2
   228f6:	fa53 f181 	uxtab	r1, r3, r1
   228fa:	eb09 0002 	add.w	r0, r9, r2
   228fe:	f7dd fcdf 	bl	2c0 <memcpy>
		offset += 2;
   22902:	3505      	adds	r5, #5
   22904:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   22906:	f1b8 0f00 	cmp.w	r8, #0
   2290a:	d043      	beq.n	22994 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2290c:	2108      	movs	r1, #8
   2290e:	4650      	mov	r0, sl
   22910:	f7f8 fdc4 	bl	1b49c <net_buf_simple_add>
   22914:	e04c      	b.n	229b0 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22916:	2202      	movs	r2, #2
   22918:	4401      	add	r1, r0
   2291a:	4648      	mov	r0, r9
   2291c:	f7dd fcd0 	bl	2c0 <memcpy>
		offset += 2;
   22920:	1ceb      	adds	r3, r5, #3
   22922:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22924:	68a2      	ldr	r2, [r4, #8]
   22926:	6892      	ldr	r2, [r2, #8]
   22928:	5cd3      	ldrb	r3, [r2, r3]
   2292a:	021b      	lsls	r3, r3, #8
   2292c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22930:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   22934:	3504      	adds	r5, #4
   22936:	b2ed      	uxtb	r5, r5
   22938:	e7e5      	b.n	22906 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2293a:	5c43      	ldrb	r3, [r0, r1]
   2293c:	021b      	lsls	r3, r3, #8
   2293e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22942:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   22946:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22948:	68a3      	ldr	r3, [r4, #8]
   2294a:	689b      	ldr	r3, [r3, #8]
   2294c:	2202      	movs	r2, #2
   2294e:	fa53 f181 	uxtab	r1, r3, r1
   22952:	eb09 0002 	add.w	r0, r9, r2
   22956:	f7dd fcb3 	bl	2c0 <memcpy>
		offset += 2;
   2295a:	3504      	adds	r5, #4
   2295c:	b2ed      	uxtb	r5, r5
   2295e:	e7d2      	b.n	22906 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22960:	5c43      	ldrb	r3, [r0, r1]
   22962:	091b      	lsrs	r3, r3, #4
   22964:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   22968:	021b      	lsls	r3, r3, #8
   2296a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2296e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22972:	68a3      	ldr	r3, [r4, #8]
   22974:	689b      	ldr	r3, [r3, #8]
   22976:	5c5b      	ldrb	r3, [r3, r1]
   22978:	021b      	lsls	r3, r3, #8
   2297a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   2297e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   22982:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22986:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2298a:	3502      	adds	r5, #2
   2298c:	b2ed      	uxtb	r5, r5
   2298e:	e7ba      	b.n	22906 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22990:	460d      	mov	r5, r1
   22992:	e7b8      	b.n	22906 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   22994:	68a3      	ldr	r3, [r4, #8]
   22996:	6899      	ldr	r1, [r3, #8]
   22998:	2202      	movs	r2, #2
   2299a:	4429      	add	r1, r5
   2299c:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   229a0:	f7dd fc8e 	bl	2c0 <memcpy>
		offset += 2;
   229a4:	3502      	adds	r5, #2
   229a6:	b2ed      	uxtb	r5, r5
   229a8:	e7b0      	b.n	2290c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   229aa:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   229ae:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   229b0:	68a3      	ldr	r3, [r4, #8]
   229b2:	899a      	ldrh	r2, [r3, #12]
   229b4:	fa1f fa85 	uxth.w	sl, r5
   229b8:	4552      	cmp	r2, sl
   229ba:	f4ff adbe 	bcc.w	2253a <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   229be:	6898      	ldr	r0, [r3, #8]
   229c0:	1b52      	subs	r2, r2, r5
   229c2:	1941      	adds	r1, r0, r5
   229c4:	f007 ffd8 	bl	2a978 <memmove>
	pkt->frags->len -= offset;
   229c8:	68a2      	ldr	r2, [r4, #8]
   229ca:	8993      	ldrh	r3, [r2, #12]
   229cc:	eba3 0a0a 	sub.w	sl, r3, sl
   229d0:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   229d4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   229d8:	b94a      	cbnz	r2, 229ee <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   229da:	4639      	mov	r1, r7
   229dc:	4620      	mov	r0, r4
   229de:	f7fb fab7 	bl	1df50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   229e2:	4620      	mov	r0, r4
   229e4:	f7fb fb6e 	bl	1e0c4 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   229e8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   229ea:	2200      	movs	r2, #0
   229ec:	e00b      	b.n	22a06 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   229ee:	68bb      	ldr	r3, [r7, #8]
   229f0:	4250      	negs	r0, r2
	return pkt->frags->data;
   229f2:	68a1      	ldr	r1, [r4, #8]
   229f4:	6889      	ldr	r1, [r1, #8]
   229f6:	4401      	add	r1, r0
   229f8:	4418      	add	r0, r3
   229fa:	f7dd fc61 	bl	2c0 <memcpy>
   229fe:	e7ec      	b.n	229da <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   22a00:	8999      	ldrh	r1, [r3, #12]
   22a02:	440a      	add	r2, r1
		buf = buf->frags;
   22a04:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22a06:	2b00      	cmp	r3, #0
   22a08:	d1fa      	bne.n	22a00 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   22a0a:	b293      	uxth	r3, r2
   22a0c:	3b28      	subs	r3, #40	; 0x28
   22a0e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   22a10:	0a1a      	lsrs	r2, r3, #8
   22a12:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   22a14:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22a16:	79b1      	ldrb	r1, [r6, #6]
   22a18:	2911      	cmp	r1, #17
   22a1a:	d002      	beq.n	22a22 <uncompress_IPHC_header+0x622>
	return true;
   22a1c:	2001      	movs	r0, #1
   22a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22a22:	f1b9 0f00 	cmp.w	r9, #0
   22a26:	d018      	beq.n	22a5a <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   22a28:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   22a2c:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   22a30:	f1b8 0f00 	cmp.w	r8, #0
   22a34:	d102      	bne.n	22a3c <uncompress_IPHC_header+0x63c>
	return true;
   22a36:	2001      	movs	r0, #1
}
   22a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22a3c:	4620      	mov	r0, r4
   22a3e:	f7fc f8ba 	bl	1ebb6 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   22a42:	43c0      	mvns	r0, r0
   22a44:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   22a48:	2001      	movs	r0, #1
   22a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   22a4e:	2000      	movs	r0, #0
   22a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   22a54:	2000      	movs	r0, #0
   22a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   22a5a:	2001      	movs	r0, #1
   22a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022a60 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   22a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a64:	b085      	sub	sp, #20
   22a66:	4604      	mov	r4, r0
   22a68:	4617      	mov	r7, r2
	if (iphc) {
   22a6a:	460d      	mov	r5, r1
   22a6c:	b9f9      	cbnz	r1, 22aae <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a72:	f7fb f9e3 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   22a76:	4606      	mov	r6, r0
   22a78:	2800      	cmp	r0, #0
   22a7a:	f000 8438 	beq.w	232ee <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   22a7e:	f850 3f08 	ldr.w	r3, [r0, #8]!
   22a82:	2241      	movs	r2, #65	; 0x41
   22a84:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   22a86:	2101      	movs	r1, #1
   22a88:	f7f8 fd08 	bl	1b49c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   22a8c:	4631      	mov	r1, r6
   22a8e:	4620      	mov	r0, r4
   22a90:	f7fb fa5e 	bl	1df50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22a94:	4620      	mov	r0, r4
   22a96:	f7fb fb15 	bl	1e0c4 <net_pkt_compact>
	if (fragment) {
   22a9a:	2f00      	cmp	r7, #0
   22a9c:	f000 842a 	beq.w	232f4 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   22aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22aa4:	4620      	mov	r0, r4
   22aa6:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   22aa8:	b005      	add	sp, #20
   22aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22aae:	6883      	ldr	r3, [r0, #8]
   22ab0:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   22ab2:	899b      	ldrh	r3, [r3, #12]
   22ab4:	2b27      	cmp	r3, #39	; 0x27
   22ab6:	f240 8411 	bls.w	232dc <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22aba:	79b2      	ldrb	r2, [r6, #6]
   22abc:	2a11      	cmp	r2, #17
   22abe:	d02f      	beq.n	22b20 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ac4:	4620      	mov	r0, r4
   22ac6:	f7fb f9b9 	bl	1de3c <net_pkt_get_frag>
	if (!frag) {
   22aca:	4680      	mov	r8, r0
   22acc:	2800      	cmp	r0, #0
   22ace:	f000 8408 	beq.w	232e2 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   22ad2:	6883      	ldr	r3, [r0, #8]
   22ad4:	2260      	movs	r2, #96	; 0x60
   22ad6:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22ad8:	6883      	ldr	r3, [r0, #8]
   22ada:	2200      	movs	r2, #0
   22adc:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   22ade:	7830      	ldrb	r0, [r6, #0]
   22ae0:	7871      	ldrb	r1, [r6, #1]
   22ae2:	090b      	lsrs	r3, r1, #4
   22ae4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   22ae8:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   22aea:	089a      	lsrs	r2, r3, #2
   22aec:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   22af0:	b25b      	sxtb	r3, r3
   22af2:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   22af4:	f011 0f0f 	tst.w	r1, #15
   22af8:	d121      	bne.n	22b3e <net_6lo_compress+0xde>
   22afa:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   22afe:	f1be 0f00 	cmp.w	lr, #0
   22b02:	d11c      	bne.n	22b3e <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   22b04:	f010 0f0f 	tst.w	r0, #15
   22b08:	d10e      	bne.n	22b28 <net_6lo_compress+0xc8>
   22b0a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   22b0e:	d10b      	bne.n	22b28 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   22b10:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b14:	7813      	ldrb	r3, [r2, #0]
   22b16:	f043 0318 	orr.w	r3, r3, #24
   22b1a:	7013      	strb	r3, [r2, #0]
   22b1c:	2202      	movs	r2, #2
   22b1e:	e025      	b.n	22b6c <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22b20:	2b2f      	cmp	r3, #47	; 0x2f
   22b22:	d8cd      	bhi.n	22ac0 <net_6lo_compress+0x60>
		return false;
   22b24:	2000      	movs	r0, #0
   22b26:	e7bf      	b.n	22aa8 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   22b28:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22b2c:	780b      	ldrb	r3, [r1, #0]
   22b2e:	f043 0310 	orr.w	r3, r3, #16
   22b32:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   22b34:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b38:	709a      	strb	r2, [r3, #2]
   22b3a:	2203      	movs	r2, #3
   22b3c:	e016      	b.n	22b6c <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   22b3e:	f010 0f0f 	tst.w	r0, #15
   22b42:	d102      	bne.n	22b4a <net_6lo_compress+0xea>
   22b44:	f011 0f30 	tst.w	r1, #48	; 0x30
   22b48:	d128      	bne.n	22b9c <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   22b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   22b4e:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   22b50:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b54:	7873      	ldrb	r3, [r6, #1]
   22b56:	f003 030f 	and.w	r3, r3, #15
   22b5a:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   22b5c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22b60:	2202      	movs	r2, #2
   22b62:	18b1      	adds	r1, r6, r2
   22b64:	3004      	adds	r0, #4
   22b66:	f7dd fbab 	bl	2c0 <memcpy>
			offset += 2;
   22b6a:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   22b6c:	79b3      	ldrb	r3, [r6, #6]
   22b6e:	2b11      	cmp	r3, #17
   22b70:	d02d      	beq.n	22bce <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   22b72:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22b76:	f102 0901 	add.w	r9, r2, #1
   22b7a:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   22b7c:	79f3      	ldrb	r3, [r6, #7]
   22b7e:	2b40      	cmp	r3, #64	; 0x40
   22b80:	d040      	beq.n	22c04 <net_6lo_compress+0x1a4>
   22b82:	2bff      	cmp	r3, #255	; 0xff
   22b84:	d045      	beq.n	22c12 <net_6lo_compress+0x1b2>
   22b86:	2b01      	cmp	r3, #1
   22b88:	d029      	beq.n	22bde <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   22b8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22b8e:	f109 0201 	add.w	r2, r9, #1
   22b92:	f801 3009 	strb.w	r3, [r1, r9]
   22b96:	fa5f f982 	uxtb.w	r9, r2
   22b9a:	e026      	b.n	22bea <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   22b9c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22ba0:	780a      	ldrb	r2, [r1, #0]
   22ba2:	f042 0208 	orr.w	r2, r2, #8
   22ba6:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   22ba8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22bb0:	f996 1001 	ldrsb.w	r1, [r6, #1]
   22bb4:	f001 010f 	and.w	r1, r1, #15
   22bb8:	430b      	orrs	r3, r1
   22bba:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   22bbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22bc0:	2202      	movs	r2, #2
   22bc2:	18b1      	adds	r1, r6, r2
   22bc4:	3003      	adds	r0, #3
   22bc6:	f7dd fb7b 	bl	2c0 <memcpy>
			offset += 2;
   22bca:	2205      	movs	r2, #5
   22bcc:	e7ce      	b.n	22b6c <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   22bce:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22bd2:	780b      	ldrb	r3, [r1, #0]
   22bd4:	f043 0304 	orr.w	r3, r3, #4
   22bd8:	700b      	strb	r3, [r1, #0]
   22bda:	4691      	mov	r9, r2
   22bdc:	e7ce      	b.n	22b7c <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   22bde:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22be2:	7813      	ldrb	r3, [r2, #0]
   22be4:	f043 0301 	orr.w	r3, r3, #1
   22be8:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22bea:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22bec:	b9c3      	cbnz	r3, 22c20 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22bee:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22bf0:	2b00      	cmp	r3, #0
   22bf2:	d176      	bne.n	22ce2 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22bf4:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22bf6:	2b00      	cmp	r3, #0
   22bf8:	d175      	bne.n	22ce6 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   22bfa:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22bfc:	2b00      	cmp	r3, #0
   22bfe:	d074      	beq.n	22cea <net_6lo_compress+0x28a>
   22c00:	2300      	movs	r3, #0
   22c02:	e00e      	b.n	22c22 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   22c04:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22c08:	7813      	ldrb	r3, [r2, #0]
   22c0a:	f043 0302 	orr.w	r3, r3, #2
   22c0e:	7013      	strb	r3, [r2, #0]
   22c10:	e7eb      	b.n	22bea <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   22c12:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22c16:	7813      	ldrb	r3, [r2, #0]
   22c18:	f043 0303 	orr.w	r3, r3, #3
   22c1c:	7013      	strb	r3, [r2, #0]
   22c1e:	e7e4      	b.n	22bea <net_6lo_compress+0x18a>
   22c20:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   22c22:	2b00      	cmp	r3, #0
   22c24:	d163      	bne.n	22cee <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22c26:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22c28:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22c2c:	429a      	cmp	r2, r3
   22c2e:	d065      	beq.n	22cfc <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   22c30:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   22c34:	2210      	movs	r2, #16
   22c36:	f106 0108 	add.w	r1, r6, #8
   22c3a:	4448      	add	r0, r9
   22c3c:	f7dd fb40 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   22c40:	f109 0910 	add.w	r9, r9, #16
   22c44:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22c48:	f1b9 0f00 	cmp.w	r9, #0
   22c4c:	f000 812d 	beq.w	22eaa <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   22c50:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   22c52:	2bff      	cmp	r3, #255	; 0xff
   22c54:	f000 812e 	beq.w	22eb4 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22c58:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22c5a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22c5e:	429a      	cmp	r2, r3
   22c60:	f000 81bf 	beq.w	22fe2 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   22c64:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22c68:	2210      	movs	r2, #16
   22c6a:	f106 0118 	add.w	r1, r6, #24
   22c6e:	4448      	add	r0, r9
   22c70:	f7dd fb26 	bl	2c0 <memcpy>
		offset += 16;
   22c74:	f109 0910 	add.w	r9, r9, #16
   22c78:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22c7c:	f1b9 0f00 	cmp.w	r9, #0
   22c80:	f000 8287 	beq.w	23192 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   22c84:	79b3      	ldrb	r3, [r6, #6]
   22c86:	2b11      	cmp	r3, #17
   22c88:	f000 8288 	beq.w	2319c <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   22c8c:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   22c8e:	f108 0a08 	add.w	sl, r8, #8
   22c92:	4649      	mov	r1, r9
   22c94:	4650      	mov	r0, sl
   22c96:	f7f8 fc01 	bl	1b49c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22c9a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22c9e:	68a3      	ldr	r3, [r4, #8]
   22ca0:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   22ca2:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22ca4:	1b92      	subs	r2, r2, r6
   22ca6:	4431      	add	r1, r6
   22ca8:	4448      	add	r0, r9
   22caa:	f7dd fb09 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   22cae:	68a3      	ldr	r3, [r4, #8]
   22cb0:	8999      	ldrh	r1, [r3, #12]
   22cb2:	1b89      	subs	r1, r1, r6
   22cb4:	4650      	mov	r0, sl
   22cb6:	f7f8 fbf1 	bl	1b49c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   22cba:	68a2      	ldr	r2, [r4, #8]
   22cbc:	2100      	movs	r1, #0
   22cbe:	4620      	mov	r0, r4
   22cc0:	f7fb f928 	bl	1df14 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   22cc4:	4641      	mov	r1, r8
   22cc6:	4620      	mov	r0, r4
   22cc8:	f7fb f942 	bl	1df50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22ccc:	4620      	mov	r0, r4
   22cce:	f7fb f9f9 	bl	1e0c4 <net_pkt_compact>
	if (fragment) {
   22cd2:	2f00      	cmp	r7, #0
   22cd4:	f000 8308 	beq.w	232e8 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   22cd8:	eba6 0109 	sub.w	r1, r6, r9
   22cdc:	4620      	mov	r0, r4
   22cde:	47b8      	blx	r7
   22ce0:	e6e2      	b.n	22aa8 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22ce2:	2300      	movs	r3, #0
   22ce4:	e79d      	b.n	22c22 <net_6lo_compress+0x1c2>
   22ce6:	2300      	movs	r3, #0
   22ce8:	e79b      	b.n	22c22 <net_6lo_compress+0x1c2>
   22cea:	2301      	movs	r3, #1
   22cec:	e799      	b.n	22c22 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   22cee:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22cf2:	7853      	ldrb	r3, [r2, #1]
   22cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22cf8:	7053      	strb	r3, [r2, #1]
   22cfa:	e7a5      	b.n	22c48 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22cfc:	8973      	ldrh	r3, [r6, #10]
   22cfe:	b91b      	cbnz	r3, 22d08 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22d00:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22d02:	b33b      	cbz	r3, 22d54 <net_6lo_compress+0x2f4>
   22d04:	2300      	movs	r3, #0
   22d06:	e000      	b.n	22d0a <net_6lo_compress+0x2aa>
   22d08:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22d0a:	9301      	str	r3, [sp, #4]
   22d0c:	2b00      	cmp	r3, #0
   22d0e:	d08f      	beq.n	22c30 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22d10:	6933      	ldr	r3, [r6, #16]
   22d12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22d16:	d01f      	beq.n	22d58 <net_6lo_compress+0x2f8>
   22d18:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   22d1a:	469a      	mov	sl, r3
   22d1c:	bb1b      	cbnz	r3, 22d66 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   22d1e:	f114 0320 	adds.w	r3, r4, #32
   22d22:	f000 80bf 	beq.w	22ea4 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   22d26:	f116 0b08 	adds.w	fp, r6, #8
   22d2a:	d008      	beq.n	22d3e <net_6lo_compress+0x2de>
   22d2c:	b13b      	cbz	r3, 22d3e <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   22d2e:	791a      	ldrb	r2, [r3, #4]
   22d30:	2a06      	cmp	r2, #6
   22d32:	d03e      	beq.n	22db2 <net_6lo_compress+0x352>
   22d34:	2a08      	cmp	r2, #8
   22d36:	f000 808c 	beq.w	22e52 <net_6lo_compress+0x3f2>
   22d3a:	2a02      	cmp	r2, #2
   22d3c:	d026      	beq.n	22d8c <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   22d3e:	f1ba 0f00 	cmp.w	sl, #0
   22d42:	f000 809c 	beq.w	22e7e <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   22d46:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22d4a:	7853      	ldrb	r3, [r2, #1]
   22d4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   22d50:	7053      	strb	r3, [r2, #1]
   22d52:	e779      	b.n	22c48 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22d54:	2301      	movs	r3, #1
   22d56:	e7d8      	b.n	22d0a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22d58:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22d5a:	2bfe      	cmp	r3, #254	; 0xfe
   22d5c:	d001      	beq.n	22d62 <net_6lo_compress+0x302>
   22d5e:	2300      	movs	r3, #0
   22d60:	e7db      	b.n	22d1a <net_6lo_compress+0x2ba>
   22d62:	2301      	movs	r3, #1
   22d64:	e7d9      	b.n	22d1a <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   22d66:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22d6a:	7853      	ldrb	r3, [r2, #1]
   22d6c:	f043 0320 	orr.w	r3, r3, #32
   22d70:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   22d72:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22d76:	2202      	movs	r2, #2
   22d78:	f106 0116 	add.w	r1, r6, #22
   22d7c:	4448      	add	r0, r9
   22d7e:	f7dd fa9f 	bl	2c0 <memcpy>
			offset += 2;
   22d82:	f109 0902 	add.w	r9, r9, #2
   22d86:	fa5f f989 	uxtb.w	r9, r9
   22d8a:	e75d      	b.n	22c48 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   22d8c:	6a21      	ldr	r1, [r4, #32]
   22d8e:	f10b 000e 	add.w	r0, fp, #14
   22d92:	f007 fdc1 	bl	2a918 <memcmp>
   22d96:	2800      	cmp	r0, #0
   22d98:	d1d1      	bne.n	22d3e <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   22d9a:	f8db 3008 	ldr.w	r3, [fp, #8]
   22d9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22da2:	d1cc      	bne.n	22d3e <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   22da4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22da8:	2bfe      	cmp	r3, #254	; 0xfe
   22daa:	d1c8      	bne.n	22d3e <net_6lo_compress+0x2de>
			return true;
   22dac:	f8dd a004 	ldr.w	sl, [sp, #4]
   22db0:	e7c5      	b.n	22d3e <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22db2:	795b      	ldrb	r3, [r3, #5]
   22db4:	2b03      	cmp	r3, #3
   22db6:	d026      	beq.n	22e06 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22db8:	2b02      	cmp	r3, #2
   22dba:	d1c0      	bne.n	22d3e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22dbc:	6a21      	ldr	r1, [r4, #32]
   22dbe:	2202      	movs	r2, #2
   22dc0:	3101      	adds	r1, #1
   22dc2:	f10b 0009 	add.w	r0, fp, #9
   22dc6:	f007 fda7 	bl	2a918 <memcmp>
   22dca:	2800      	cmp	r0, #0
   22dcc:	d1b7      	bne.n	22d3e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22dce:	6a21      	ldr	r1, [r4, #32]
   22dd0:	2203      	movs	r2, #3
   22dd2:	4411      	add	r1, r2
   22dd4:	f10b 000d 	add.w	r0, fp, #13
   22dd8:	f007 fd9e 	bl	2a918 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22ddc:	2800      	cmp	r0, #0
   22dde:	d1ae      	bne.n	22d3e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22de0:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22de4:	2bff      	cmp	r3, #255	; 0xff
   22de6:	d1aa      	bne.n	22d3e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   22de8:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22dec:	2bfe      	cmp	r3, #254	; 0xfe
   22dee:	d1a6      	bne.n	22d3e <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22df0:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22df4:	f083 0302 	eor.w	r3, r3, #2
   22df8:	6a22      	ldr	r2, [r4, #32]
   22dfa:	7812      	ldrb	r2, [r2, #0]
   22dfc:	4293      	cmp	r3, r2
   22dfe:	d19e      	bne.n	22d3e <net_6lo_compress+0x2de>
				return true;
   22e00:	f8dd a004 	ldr.w	sl, [sp, #4]
   22e04:	e79b      	b.n	22d3e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22e06:	6a21      	ldr	r1, [r4, #32]
   22e08:	2202      	movs	r2, #2
   22e0a:	3101      	adds	r1, #1
   22e0c:	f10b 0009 	add.w	r0, fp, #9
   22e10:	f007 fd82 	bl	2a918 <memcmp>
   22e14:	2800      	cmp	r0, #0
   22e16:	d192      	bne.n	22d3e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22e18:	6a21      	ldr	r1, [r4, #32]
   22e1a:	2203      	movs	r2, #3
   22e1c:	4411      	add	r1, r2
   22e1e:	f10b 000d 	add.w	r0, fp, #13
   22e22:	f007 fd79 	bl	2a918 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22e26:	2800      	cmp	r0, #0
   22e28:	d189      	bne.n	22d3e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22e2a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22e2e:	2bff      	cmp	r3, #255	; 0xff
   22e30:	d185      	bne.n	22d3e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   22e32:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22e36:	2bfe      	cmp	r3, #254	; 0xfe
   22e38:	d181      	bne.n	22d3e <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22e3a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22e3e:	f083 0302 	eor.w	r3, r3, #2
   22e42:	6a22      	ldr	r2, [r4, #32]
   22e44:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   22e46:	4293      	cmp	r3, r2
   22e48:	f47f af79 	bne.w	22d3e <net_6lo_compress+0x2de>
				return true;
   22e4c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22e50:	e775      	b.n	22d3e <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   22e52:	6a21      	ldr	r1, [r4, #32]
   22e54:	3a01      	subs	r2, #1
   22e56:	3101      	adds	r1, #1
   22e58:	f10b 0009 	add.w	r0, fp, #9
   22e5c:	f007 fd5c 	bl	2a918 <memcmp>
   22e60:	2800      	cmp	r0, #0
   22e62:	f47f af6c 	bne.w	22d3e <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22e66:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22e6a:	f083 0302 	eor.w	r3, r3, #2
   22e6e:	6a22      	ldr	r2, [r4, #32]
   22e70:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   22e72:	4293      	cmp	r3, r2
   22e74:	f47f af63 	bne.w	22d3e <net_6lo_compress+0x2de>
			return true;
   22e78:	f8dd a004 	ldr.w	sl, [sp, #4]
   22e7c:	e75f      	b.n	22d3e <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   22e7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22e82:	7853      	ldrb	r3, [r2, #1]
   22e84:	f043 0310 	orr.w	r3, r3, #16
   22e88:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   22e8a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22e8e:	2208      	movs	r2, #8
   22e90:	f106 0110 	add.w	r1, r6, #16
   22e94:	4448      	add	r0, r9
   22e96:	f7dd fa13 	bl	2c0 <memcpy>
				offset += 8;
   22e9a:	f109 0908 	add.w	r9, r9, #8
   22e9e:	fa5f f989 	uxtb.w	r9, r9
   22ea2:	e6d1      	b.n	22c48 <net_6lo_compress+0x1e8>
				return 0;
   22ea4:	f04f 0900 	mov.w	r9, #0
   22ea8:	e6ce      	b.n	22c48 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   22eaa:	4640      	mov	r0, r8
   22eac:	f7fb f813 	bl	1ded6 <net_pkt_frag_unref>
		return false;
   22eb0:	2000      	movs	r0, #0
   22eb2:	e5f9      	b.n	22aa8 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   22eb4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22eb8:	7853      	ldrb	r3, [r2, #1]
   22eba:	f043 0308 	orr.w	r3, r3, #8
   22ebe:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   22ec0:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22ec2:	2b02      	cmp	r3, #2
   22ec4:	d00a      	beq.n	22edc <net_6lo_compress+0x47c>
   22ec6:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   22ec8:	b9db      	cbnz	r3, 22f02 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22eca:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22ecc:	bb63      	cbnz	r3, 22f28 <net_6lo_compress+0x4c8>
   22ece:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22ed0:	bba2      	cbnz	r2, 22f3c <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   22ed2:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22ed6:	b39a      	cbz	r2, 22f40 <net_6lo_compress+0x4e0>
   22ed8:	2200      	movs	r2, #0
   22eda:	e026      	b.n	22f2a <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22edc:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   22ede:	b943      	cbnz	r3, 22ef2 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22ee0:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22ee2:	b943      	cbnz	r3, 22ef6 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22ee4:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22ee6:	b943      	cbnz	r3, 22efa <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   22ee8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22eec:	b13b      	cbz	r3, 22efe <net_6lo_compress+0x49e>
   22eee:	2300      	movs	r3, #0
   22ef0:	e7ea      	b.n	22ec8 <net_6lo_compress+0x468>
   22ef2:	2300      	movs	r3, #0
   22ef4:	e7e8      	b.n	22ec8 <net_6lo_compress+0x468>
   22ef6:	2300      	movs	r3, #0
   22ef8:	e7e6      	b.n	22ec8 <net_6lo_compress+0x468>
   22efa:	2300      	movs	r3, #0
   22efc:	e7e4      	b.n	22ec8 <net_6lo_compress+0x468>
   22efe:	2301      	movs	r3, #1
   22f00:	e7e2      	b.n	22ec8 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22f02:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22f06:	7853      	ldrb	r3, [r2, #1]
   22f08:	f043 0303 	orr.w	r3, r3, #3
   22f0c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   22f0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22f12:	2201      	movs	r2, #1
   22f14:	f106 0127 	add.w	r1, r6, #39	; 0x27
   22f18:	4448      	add	r0, r9
   22f1a:	f7dd f9d1 	bl	2c0 <memcpy>
		offset++;
   22f1e:	f109 0901 	add.w	r9, r9, #1
   22f22:	fa5f f989 	uxtb.w	r9, r9
   22f26:	e6a9      	b.n	22c7c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22f28:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   22f2a:	b95a      	cbnz	r2, 22f44 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22f2c:	bb43      	cbnz	r3, 22f80 <net_6lo_compress+0x520>
   22f2e:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22f30:	bbab      	cbnz	r3, 22f9e <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   22f32:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22f36:	b3a3      	cbz	r3, 22fa2 <net_6lo_compress+0x542>
   22f38:	2300      	movs	r3, #0
   22f3a:	e022      	b.n	22f82 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22f3c:	2200      	movs	r2, #0
   22f3e:	e7f4      	b.n	22f2a <net_6lo_compress+0x4ca>
   22f40:	2201      	movs	r2, #1
   22f42:	e7f2      	b.n	22f2a <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22f44:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22f48:	7853      	ldrb	r3, [r2, #1]
   22f4a:	f043 0302 	orr.w	r3, r3, #2
   22f4e:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22f50:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22f54:	2201      	movs	r2, #1
   22f56:	f106 0119 	add.w	r1, r6, #25
   22f5a:	4448      	add	r0, r9
   22f5c:	f7dd f9b0 	bl	2c0 <memcpy>
		offset++;
   22f60:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   22f64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22f68:	2203      	movs	r2, #3
   22f6a:	f106 0125 	add.w	r1, r6, #37	; 0x25
   22f6e:	fa53 f080 	uxtab	r0, r3, r0
   22f72:	f7dd f9a5 	bl	2c0 <memcpy>
		offset += 3;
   22f76:	f109 0904 	add.w	r9, r9, #4
   22f7a:	fa5f f989 	uxtb.w	r9, r9
   22f7e:	e67d      	b.n	22c7c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22f80:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   22f82:	b983      	cbnz	r3, 22fa6 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22f84:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22f88:	2210      	movs	r2, #16
   22f8a:	f106 0118 	add.w	r1, r6, #24
   22f8e:	4448      	add	r0, r9
   22f90:	f7dd f996 	bl	2c0 <memcpy>
		offset += 16;
   22f94:	f109 0910 	add.w	r9, r9, #16
   22f98:	fa5f f989 	uxtb.w	r9, r9
   22f9c:	e66e      	b.n	22c7c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22f9e:	2300      	movs	r3, #0
   22fa0:	e7ef      	b.n	22f82 <net_6lo_compress+0x522>
   22fa2:	2301      	movs	r3, #1
   22fa4:	e7ed      	b.n	22f82 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22fa6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22faa:	7853      	ldrb	r3, [r2, #1]
   22fac:	f043 0301 	orr.w	r3, r3, #1
   22fb0:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22fb2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22fb6:	2201      	movs	r2, #1
   22fb8:	f106 0119 	add.w	r1, r6, #25
   22fbc:	4448      	add	r0, r9
   22fbe:	f7dd f97f 	bl	2c0 <memcpy>
		offset++;
   22fc2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22fca:	2205      	movs	r2, #5
   22fcc:	f106 0123 	add.w	r1, r6, #35	; 0x23
   22fd0:	fa53 f080 	uxtab	r0, r3, r0
   22fd4:	f7dd f974 	bl	2c0 <memcpy>
		offset += 5;
   22fd8:	f109 0906 	add.w	r9, r9, #6
   22fdc:	fa5f f989 	uxtb.w	r9, r9
   22fe0:	e64c      	b.n	22c7c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22fe2:	8b73      	ldrh	r3, [r6, #26]
   22fe4:	b91b      	cbnz	r3, 22fee <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22fe6:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22fe8:	b343      	cbz	r3, 2303c <net_6lo_compress+0x5dc>
   22fea:	2300      	movs	r3, #0
   22fec:	e000      	b.n	22ff0 <net_6lo_compress+0x590>
   22fee:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22ff0:	9301      	str	r3, [sp, #4]
   22ff2:	2b00      	cmp	r3, #0
   22ff4:	f43f ae36 	beq.w	22c64 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22ff8:	6a33      	ldr	r3, [r6, #32]
   22ffa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22ffe:	d01f      	beq.n	23040 <net_6lo_compress+0x5e0>
   23000:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   23002:	469a      	mov	sl, r3
   23004:	bb1b      	cbnz	r3, 2304e <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   23006:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   2300a:	f000 80bf 	beq.w	2318c <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   2300e:	f116 0b18 	adds.w	fp, r6, #24
   23012:	d008      	beq.n	23026 <net_6lo_compress+0x5c6>
   23014:	b13b      	cbz	r3, 23026 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   23016:	791a      	ldrb	r2, [r3, #4]
   23018:	2a06      	cmp	r2, #6
   2301a:	d03e      	beq.n	2309a <net_6lo_compress+0x63a>
   2301c:	2a08      	cmp	r2, #8
   2301e:	f000 808c 	beq.w	2313a <net_6lo_compress+0x6da>
   23022:	2a02      	cmp	r2, #2
   23024:	d026      	beq.n	23074 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   23026:	f1ba 0f00 	cmp.w	sl, #0
   2302a:	f000 809c 	beq.w	23166 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   2302e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23032:	7853      	ldrb	r3, [r2, #1]
   23034:	f043 0303 	orr.w	r3, r3, #3
   23038:	7053      	strb	r3, [r2, #1]
   2303a:	e61f      	b.n	22c7c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2303c:	2301      	movs	r3, #1
   2303e:	e7d7      	b.n	22ff0 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   23040:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   23042:	2bfe      	cmp	r3, #254	; 0xfe
   23044:	d001      	beq.n	2304a <net_6lo_compress+0x5ea>
   23046:	2300      	movs	r3, #0
   23048:	e7db      	b.n	23002 <net_6lo_compress+0x5a2>
   2304a:	2301      	movs	r3, #1
   2304c:	e7d9      	b.n	23002 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   2304e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23052:	7853      	ldrb	r3, [r2, #1]
   23054:	f043 0302 	orr.w	r3, r3, #2
   23058:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   2305a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2305e:	2202      	movs	r2, #2
   23060:	f106 0126 	add.w	r1, r6, #38	; 0x26
   23064:	4448      	add	r0, r9
   23066:	f7dd f92b 	bl	2c0 <memcpy>
			offset += 2;
   2306a:	f109 0902 	add.w	r9, r9, #2
   2306e:	fa5f f989 	uxtb.w	r9, r9
   23072:	e603      	b.n	22c7c <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   23074:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23076:	f10b 000e 	add.w	r0, fp, #14
   2307a:	f007 fc4d 	bl	2a918 <memcmp>
   2307e:	2800      	cmp	r0, #0
   23080:	d1d1      	bne.n	23026 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   23082:	f8db 3008 	ldr.w	r3, [fp, #8]
   23086:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2308a:	d1cc      	bne.n	23026 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   2308c:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   23090:	2bfe      	cmp	r3, #254	; 0xfe
   23092:	d1c8      	bne.n	23026 <net_6lo_compress+0x5c6>
			return true;
   23094:	f8dd a004 	ldr.w	sl, [sp, #4]
   23098:	e7c5      	b.n	23026 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2309a:	795b      	ldrb	r3, [r3, #5]
   2309c:	2b03      	cmp	r3, #3
   2309e:	d026      	beq.n	230ee <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   230a0:	2b02      	cmp	r3, #2
   230a2:	d1c0      	bne.n	23026 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   230a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   230a6:	2202      	movs	r2, #2
   230a8:	3101      	adds	r1, #1
   230aa:	f10b 0009 	add.w	r0, fp, #9
   230ae:	f007 fc33 	bl	2a918 <memcmp>
   230b2:	2800      	cmp	r0, #0
   230b4:	d1b7      	bne.n	23026 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   230b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   230b8:	2203      	movs	r2, #3
   230ba:	4411      	add	r1, r2
   230bc:	f10b 000d 	add.w	r0, fp, #13
   230c0:	f007 fc2a 	bl	2a918 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   230c4:	2800      	cmp	r0, #0
   230c6:	d1ae      	bne.n	23026 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   230c8:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   230cc:	2bff      	cmp	r3, #255	; 0xff
   230ce:	d1aa      	bne.n	23026 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   230d0:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   230d4:	2bfe      	cmp	r3, #254	; 0xfe
   230d6:	d1a6      	bne.n	23026 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   230d8:	f89b 3008 	ldrb.w	r3, [fp, #8]
   230dc:	f083 0302 	eor.w	r3, r3, #2
   230e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   230e2:	7812      	ldrb	r2, [r2, #0]
   230e4:	4293      	cmp	r3, r2
   230e6:	d19e      	bne.n	23026 <net_6lo_compress+0x5c6>
				return true;
   230e8:	f8dd a004 	ldr.w	sl, [sp, #4]
   230ec:	e79b      	b.n	23026 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   230ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   230f0:	2202      	movs	r2, #2
   230f2:	3101      	adds	r1, #1
   230f4:	f10b 0009 	add.w	r0, fp, #9
   230f8:	f007 fc0e 	bl	2a918 <memcmp>
   230fc:	2800      	cmp	r0, #0
   230fe:	d192      	bne.n	23026 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23100:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23102:	2203      	movs	r2, #3
   23104:	4411      	add	r1, r2
   23106:	f10b 000d 	add.w	r0, fp, #13
   2310a:	f007 fc05 	bl	2a918 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2310e:	2800      	cmp	r0, #0
   23110:	d189      	bne.n	23026 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   23112:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23116:	2bff      	cmp	r3, #255	; 0xff
   23118:	d185      	bne.n	23026 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   2311a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2311e:	2bfe      	cmp	r3, #254	; 0xfe
   23120:	d181      	bne.n	23026 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23122:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23126:	f083 0302 	eor.w	r3, r3, #2
   2312a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2312c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   2312e:	4293      	cmp	r3, r2
   23130:	f47f af79 	bne.w	23026 <net_6lo_compress+0x5c6>
				return true;
   23134:	f8dd a004 	ldr.w	sl, [sp, #4]
   23138:	e775      	b.n	23026 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   2313a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2313c:	3a01      	subs	r2, #1
   2313e:	3101      	adds	r1, #1
   23140:	f10b 0009 	add.w	r0, fp, #9
   23144:	f007 fbe8 	bl	2a918 <memcmp>
   23148:	2800      	cmp	r0, #0
   2314a:	f47f af6c 	bne.w	23026 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2314e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23152:	f083 0302 	eor.w	r3, r3, #2
   23156:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23158:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   2315a:	4293      	cmp	r3, r2
   2315c:	f47f af63 	bne.w	23026 <net_6lo_compress+0x5c6>
			return true;
   23160:	f8dd a004 	ldr.w	sl, [sp, #4]
   23164:	e75f      	b.n	23026 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   23166:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2316a:	7853      	ldrb	r3, [r2, #1]
   2316c:	f043 0301 	orr.w	r3, r3, #1
   23170:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   23172:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23176:	2208      	movs	r2, #8
   23178:	f106 0120 	add.w	r1, r6, #32
   2317c:	4448      	add	r0, r9
   2317e:	f7dd f89f 	bl	2c0 <memcpy>
				offset += 8;
   23182:	f109 0908 	add.w	r9, r9, #8
   23186:	fa5f f989 	uxtb.w	r9, r9
   2318a:	e577      	b.n	22c7c <net_6lo_compress+0x21c>
				return 0;
   2318c:	f04f 0900 	mov.w	r9, #0
   23190:	e574      	b.n	22c7c <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   23192:	4640      	mov	r0, r8
   23194:	f7fa fe9f 	bl	1ded6 <net_pkt_frag_unref>
		return false;
   23198:	2000      	movs	r0, #0
   2319a:	e485      	b.n	22aa8 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   2319c:	a902      	add	r1, sp, #8
   2319e:	4620      	mov	r0, r4
   231a0:	f000 fc68 	bl	23a74 <net_udp_get_hdr>
   231a4:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   231a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   231aa:	22f0      	movs	r2, #240	; 0xf0
   231ac:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   231b0:	8802      	ldrh	r2, [r0, #0]
   231b2:	0a13      	lsrs	r3, r2, #8
   231b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   231b8:	b29b      	uxth	r3, r3
   231ba:	f640 720b 	movw	r2, #3851	; 0xf0b
   231be:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   231c2:	d025      	beq.n	23210 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   231c4:	8872      	ldrh	r2, [r6, #2]
   231c6:	b2d2      	uxtb	r2, r2
   231c8:	2af0      	cmp	r2, #240	; 0xf0
   231ca:	d046      	beq.n	2325a <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   231cc:	0a1b      	lsrs	r3, r3, #8
   231ce:	2bf0      	cmp	r3, #240	; 0xf0
   231d0:	d062      	beq.n	23298 <net_6lo_compress+0x838>
		offset++;
   231d2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   231d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   231da:	2204      	movs	r2, #4
   231dc:	4631      	mov	r1, r6
   231de:	fa53 f080 	uxtab	r0, r3, r0
   231e2:	f7dd f86d 	bl	2c0 <memcpy>
		offset += 4;
   231e6:	f109 0905 	add.w	r9, r9, #5
   231ea:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   231ee:	f8d8 0008 	ldr.w	r0, [r8, #8]
   231f2:	2202      	movs	r2, #2
   231f4:	1db1      	adds	r1, r6, #6
   231f6:	4448      	add	r0, r9
   231f8:	f7dd f862 	bl	2c0 <memcpy>
	offset += 2;
   231fc:	f109 0902 	add.w	r9, r9, #2
   23200:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   23204:	4631      	mov	r1, r6
   23206:	4620      	mov	r0, r4
   23208:	f000 fc74 	bl	23af4 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   2320c:	2630      	movs	r6, #48	; 0x30
   2320e:	e53e      	b.n	22c8e <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   23210:	8841      	ldrh	r1, [r0, #2]
   23212:	0a0a      	lsrs	r2, r1, #8
   23214:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   23218:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   2321c:	f640 710b 	movw	r1, #3851	; 0xf0b
   23220:	428a      	cmp	r2, r1
   23222:	d1cf      	bne.n	231c4 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   23224:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23228:	f812 3009 	ldrb.w	r3, [r2, r9]
   2322c:	f043 0303 	orr.w	r3, r3, #3
   23230:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   23234:	f109 0101 	add.w	r1, r9, #1
   23238:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   2323a:	8803      	ldrh	r3, [r0, #0]
   2323c:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   2323e:	011b      	lsls	r3, r3, #4
   23240:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   23242:	8842      	ldrh	r2, [r0, #2]
   23244:	f3c2 2203 	ubfx	r2, r2, #8, #4
   23248:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   2324a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2324e:	f109 0902 	add.w	r9, r9, #2
   23252:	fa5f f989 	uxtb.w	r9, r9
   23256:	5453      	strb	r3, [r2, r1]
   23258:	e7c9      	b.n	231ee <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   2325a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2325e:	f812 3009 	ldrb.w	r3, [r2, r9]
   23262:	f043 0301 	orr.w	r3, r3, #1
   23266:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   2326a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   2326e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23272:	2202      	movs	r2, #2
   23274:	4631      	mov	r1, r6
   23276:	fa53 f080 	uxtab	r0, r3, r0
   2327a:	f7dd f821 	bl	2c0 <memcpy>
		offset += 2;
   2327e:	f109 0303 	add.w	r3, r9, #3
   23282:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   23284:	f8d8 1008 	ldr.w	r1, [r8, #8]
   23288:	f109 0904 	add.w	r9, r9, #4
   2328c:	fa5f f989 	uxtb.w	r9, r9
   23290:	8872      	ldrh	r2, [r6, #2]
   23292:	0a12      	lsrs	r2, r2, #8
   23294:	54ca      	strb	r2, [r1, r3]
   23296:	e7aa      	b.n	231ee <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   23298:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2329c:	f812 3009 	ldrb.w	r3, [r2, r9]
   232a0:	f043 0302 	orr.w	r3, r3, #2
   232a4:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   232a8:	f109 0301 	add.w	r3, r9, #1
   232ac:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   232b0:	f109 0002 	add.w	r0, r9, #2
   232b4:	4631      	mov	r1, r6
   232b6:	f831 2b02 	ldrh.w	r2, [r1], #2
   232ba:	0a12      	lsrs	r2, r2, #8
   232bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   232c0:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   232c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   232c8:	2202      	movs	r2, #2
   232ca:	fa53 f080 	uxtab	r0, r3, r0
   232ce:	f7dc fff7 	bl	2c0 <memcpy>
		offset += 2;
   232d2:	f109 0904 	add.w	r9, r9, #4
   232d6:	fa5f f989 	uxtb.w	r9, r9
   232da:	e788      	b.n	231ee <net_6lo_compress+0x78e>
		return false;
   232dc:	2000      	movs	r0, #0
   232de:	f7ff bbe3 	b.w	22aa8 <net_6lo_compress+0x48>
		return false;
   232e2:	2000      	movs	r0, #0
   232e4:	f7ff bbe0 	b.w	22aa8 <net_6lo_compress+0x48>
	return true;
   232e8:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   232ea:	f7ff bbdd 	b.w	22aa8 <net_6lo_compress+0x48>
		return false;
   232ee:	4628      	mov	r0, r5
   232f0:	f7ff bbda 	b.w	22aa8 <net_6lo_compress+0x48>
	return true;
   232f4:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   232f6:	f7ff bbd7 	b.w	22aa8 <net_6lo_compress+0x48>

000232fa <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   232fa:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   232fc:	6883      	ldr	r3, [r0, #8]
   232fe:	689b      	ldr	r3, [r3, #8]
   23300:	781b      	ldrb	r3, [r3, #0]
   23302:	f003 0260 	and.w	r2, r3, #96	; 0x60
   23306:	2a60      	cmp	r2, #96	; 0x60
   23308:	d005      	beq.n	23316 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   2330a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   2330e:	2b41      	cmp	r3, #65	; 0x41
   23310:	d004      	beq.n	2331c <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   23312:	2001      	movs	r0, #1
}
   23314:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   23316:	f7ff f873 	bl	22400 <uncompress_IPHC_header>
   2331a:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   2331c:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   2331e:	68a0      	ldr	r0, [r4, #8]
   23320:	89a2      	ldrh	r2, [r4, #12]
   23322:	3a01      	subs	r2, #1
   23324:	1c41      	adds	r1, r0, #1
   23326:	f007 fb27 	bl	2a978 <memmove>
	frag->len -= 1;
   2332a:	89a3      	ldrh	r3, [r4, #12]
   2332c:	3b01      	subs	r3, #1
   2332e:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   23330:	2001      	movs	r0, #1
   23332:	bd10      	pop	{r4, pc}

00023334 <net_route_entry_remove>:
{
   23334:	4770      	bx	lr

00023336 <net_route_entries_table_clear>:
{
   23336:	4770      	bx	lr

00023338 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   23338:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   2333a:	f7fc fbd3 	bl	1fae4 <net_nbr_unref>

	return 0;
}
   2333e:	2000      	movs	r0, #0
   23340:	bd08      	pop	{r3, pc}
	...

00023344 <net_route_get_nbr>:
{
   23344:	b430      	push	{r4, r5}
   23346:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   23348:	2300      	movs	r3, #0
   2334a:	e000      	b.n	2334e <net_route_get_nbr+0xa>
   2334c:	3301      	adds	r3, #1
   2334e:	2b07      	cmp	r3, #7
   23350:	dc0b      	bgt.n	2336a <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   23352:	4c07      	ldr	r4, [pc, #28]	; (23370 <net_route_get_nbr+0x2c>)
   23354:	00da      	lsls	r2, r3, #3
   23356:	1ad2      	subs	r2, r2, r3
   23358:	00d1      	lsls	r1, r2, #3
   2335a:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   2335c:	5c62      	ldrb	r2, [r4, r1]
   2335e:	2a00      	cmp	r2, #0
   23360:	d0f4      	beq.n	2334c <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   23362:	68c2      	ldr	r2, [r0, #12]
   23364:	42aa      	cmp	r2, r5
   23366:	d1f1      	bne.n	2334c <net_route_get_nbr+0x8>
   23368:	e000      	b.n	2336c <net_route_get_nbr+0x28>
	return NULL;
   2336a:	2000      	movs	r0, #0
}
   2336c:	bc30      	pop	{r4, r5}
   2336e:	4770      	bx	lr
   23370:	2000c80c 	.word	0x2000c80c

00023374 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   23374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23378:	b083      	sub	sp, #12
   2337a:	4606      	mov	r6, r0
   2337c:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2337e:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   23380:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   23382:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   23384:	e00b      	b.n	2339e <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   23386:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2338a:	00da      	lsls	r2, r3, #3
   2338c:	4b3f      	ldr	r3, [pc, #252]	; (2348c <net_route_lookup+0x118>)
   2338e:	4413      	add	r3, r2
   23390:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   23394:	f898 3020 	ldrb.w	r3, [r8, #32]
   23398:	429d      	cmp	r5, r3
   2339a:	d917      	bls.n	233cc <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2339c:	3401      	adds	r4, #1
   2339e:	2c07      	cmp	r4, #7
   233a0:	dc46      	bgt.n	23430 <net_route_lookup+0xbc>
   233a2:	f015 0f80 	tst.w	r5, #128	; 0x80
   233a6:	d143      	bne.n	23430 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   233a8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   233ac:	00d3      	lsls	r3, r2, #3
   233ae:	4a37      	ldr	r2, [pc, #220]	; (2348c <net_route_lookup+0x118>)
   233b0:	5cd3      	ldrb	r3, [r2, r3]
   233b2:	2b00      	cmp	r3, #0
   233b4:	d0f2      	beq.n	2339c <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   233b6:	2e00      	cmp	r6, #0
   233b8:	d0e5      	beq.n	23386 <net_route_lookup+0x12>
   233ba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   233be:	00da      	lsls	r2, r3, #3
   233c0:	4b32      	ldr	r3, [pc, #200]	; (2348c <net_route_lookup+0x118>)
   233c2:	4413      	add	r3, r2
   233c4:	689b      	ldr	r3, [r3, #8]
   233c6:	429e      	cmp	r6, r3
   233c8:	d1e8      	bne.n	2339c <net_route_lookup+0x28>
   233ca:	e7dc      	b.n	23386 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   233cc:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   233d0:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   233d4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   233d8:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   233dc:	2b80      	cmp	r3, #128	; 0x80
   233de:	d906      	bls.n	233ee <net_route_lookup+0x7a>
		return false;
   233e0:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   233e2:	2b00      	cmp	r3, #0
   233e4:	d0da      	beq.n	2339c <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   233e6:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   233ea:	4647      	mov	r7, r8
   233ec:	e7d6      	b.n	2339c <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   233ee:	465a      	mov	r2, fp
   233f0:	4649      	mov	r1, r9
   233f2:	9801      	ldr	r0, [sp, #4]
   233f4:	f007 fa90 	bl	2a918 <memcmp>
   233f8:	b9b0      	cbnz	r0, 23428 <net_route_lookup+0xb4>
	if (!remain) {
   233fa:	f1ba 0f00 	cmp.w	sl, #0
   233fe:	d015      	beq.n	2342c <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   23400:	f1ca 0208 	rsb	r2, sl, #8
   23404:	23ff      	movs	r3, #255	; 0xff
   23406:	4093      	lsls	r3, r2
   23408:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   2340c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   23410:	9b01      	ldr	r3, [sp, #4]
   23412:	f813 300b 	ldrb.w	r3, [r3, fp]
   23416:	f819 200b 	ldrb.w	r2, [r9, fp]
   2341a:	4053      	eors	r3, r2
   2341c:	ea1a 0f03 	tst.w	sl, r3
   23420:	bf0c      	ite	eq
   23422:	2301      	moveq	r3, #1
   23424:	2300      	movne	r3, #0
   23426:	e7dc      	b.n	233e2 <net_route_lookup+0x6e>
		return false;
   23428:	2300      	movs	r3, #0
   2342a:	e7da      	b.n	233e2 <net_route_lookup+0x6e>
		return true;
   2342c:	2301      	movs	r3, #1
   2342e:	e7d8      	b.n	233e2 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   23430:	b1c7      	cbz	r7, 23464 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   23432:	463a      	mov	r2, r7
	return list->head;
   23434:	4b16      	ldr	r3, [pc, #88]	; (23490 <net_route_lookup+0x11c>)
   23436:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   23438:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2343a:	b16b      	cbz	r3, 23458 <net_route_lookup+0xe4>
		if (test == node) {
   2343c:	429a      	cmp	r2, r3
   2343e:	d002      	beq.n	23446 <net_route_lookup+0xd2>
		prev = test;
   23440:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   23442:	681b      	ldr	r3, [r3, #0]
   23444:	e7f9      	b.n	2343a <net_route_lookup+0xc6>
	if (!prev_node) {
   23446:	b189      	cbz	r1, 2346c <net_route_lookup+0xf8>
		prev_node->next = node->next;
   23448:	683b      	ldr	r3, [r7, #0]
   2344a:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   2344c:	4b10      	ldr	r3, [pc, #64]	; (23490 <net_route_lookup+0x11c>)
   2344e:	685b      	ldr	r3, [r3, #4]
   23450:	429a      	cmp	r2, r3
   23452:	d014      	beq.n	2347e <net_route_lookup+0x10a>
	node->next = NULL;
   23454:	2300      	movs	r3, #0
   23456:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   23458:	4b0d      	ldr	r3, [pc, #52]	; (23490 <net_route_lookup+0x11c>)
   2345a:	6819      	ldr	r1, [r3, #0]
   2345c:	6039      	str	r1, [r7, #0]
	list->head = node;
   2345e:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   23460:	685b      	ldr	r3, [r3, #4]
   23462:	b17b      	cbz	r3, 23484 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   23464:	4638      	mov	r0, r7
   23466:	b003      	add	sp, #12
   23468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   2346c:	6839      	ldr	r1, [r7, #0]
   2346e:	4b08      	ldr	r3, [pc, #32]	; (23490 <net_route_lookup+0x11c>)
   23470:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   23472:	685b      	ldr	r3, [r3, #4]
   23474:	429a      	cmp	r2, r3
   23476:	d1ed      	bne.n	23454 <net_route_lookup+0xe0>
			list->tail = list->head;
   23478:	4b05      	ldr	r3, [pc, #20]	; (23490 <net_route_lookup+0x11c>)
   2347a:	6059      	str	r1, [r3, #4]
   2347c:	e7ea      	b.n	23454 <net_route_lookup+0xe0>
			list->tail = prev_node;
   2347e:	4b04      	ldr	r3, [pc, #16]	; (23490 <net_route_lookup+0x11c>)
   23480:	6059      	str	r1, [r3, #4]
   23482:	e7e7      	b.n	23454 <net_route_lookup+0xe0>
		list->tail = list->head;
   23484:	4b02      	ldr	r3, [pc, #8]	; (23490 <net_route_lookup+0x11c>)
   23486:	605a      	str	r2, [r3, #4]
	return found;
   23488:	e7ec      	b.n	23464 <net_route_lookup+0xf0>
   2348a:	bf00      	nop
   2348c:	2000c80c 	.word	0x2000c80c
   23490:	2000242c 	.word	0x2000242c

00023494 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   23494:	2800      	cmp	r0, #0
   23496:	d046      	beq.n	23526 <net_route_del+0x92>
{
   23498:	b538      	push	{r3, r4, r5, lr}
   2349a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   2349c:	4601      	mov	r1, r0
	return list->head;
   2349e:	4b25      	ldr	r3, [pc, #148]	; (23534 <net_route_del+0xa0>)
   234a0:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   234a2:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   234a4:	b16b      	cbz	r3, 234c2 <net_route_del+0x2e>
		if (test == node) {
   234a6:	4299      	cmp	r1, r3
   234a8:	d002      	beq.n	234b0 <net_route_del+0x1c>
		prev = test;
   234aa:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   234ac:	681b      	ldr	r3, [r3, #0]
   234ae:	e7f9      	b.n	234a4 <net_route_del+0x10>
	if (!prev_node) {
   234b0:	b1aa      	cbz	r2, 234de <net_route_del+0x4a>
		prev_node->next = node->next;
   234b2:	6823      	ldr	r3, [r4, #0]
   234b4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   234b6:	4b1f      	ldr	r3, [pc, #124]	; (23534 <net_route_del+0xa0>)
   234b8:	685b      	ldr	r3, [r3, #4]
   234ba:	429c      	cmp	r4, r3
   234bc:	d018      	beq.n	234f0 <net_route_del+0x5c>
	node->next = NULL;
   234be:	2300      	movs	r3, #0
   234c0:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   234c2:	4620      	mov	r0, r4
   234c4:	f7ff ff3e 	bl	23344 <net_route_get_nbr>
	if (!nbr) {
   234c8:	4605      	mov	r5, r0
   234ca:	2800      	cmp	r0, #0
   234cc:	d02e      	beq.n	2352c <net_route_del+0x98>
   234ce:	2300      	movs	r3, #0
   234d0:	461a      	mov	r2, r3
   234d2:	6881      	ldr	r1, [r0, #8]
   234d4:	4818      	ldr	r0, [pc, #96]	; (23538 <net_route_del+0xa4>)
   234d6:	f000 f977 	bl	237c8 <net_mgmt_event_notify_with_info>
	return list->head;
   234da:	6864      	ldr	r4, [r4, #4]
   234dc:	e011      	b.n	23502 <net_route_del+0x6e>
		list->head = node->next;
   234de:	6822      	ldr	r2, [r4, #0]
   234e0:	4b14      	ldr	r3, [pc, #80]	; (23534 <net_route_del+0xa0>)
   234e2:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   234e4:	685b      	ldr	r3, [r3, #4]
   234e6:	429c      	cmp	r4, r3
   234e8:	d1e9      	bne.n	234be <net_route_del+0x2a>
			list->tail = list->head;
   234ea:	4b12      	ldr	r3, [pc, #72]	; (23534 <net_route_del+0xa0>)
   234ec:	605a      	str	r2, [r3, #4]
   234ee:	e7e6      	b.n	234be <net_route_del+0x2a>
			list->tail = prev_node;
   234f0:	4b10      	ldr	r3, [pc, #64]	; (23534 <net_route_del+0xa0>)
   234f2:	605a      	str	r2, [r3, #4]
   234f4:	e7e3      	b.n	234be <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   234f6:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   234f8:	b154      	cbz	r4, 23510 <net_route_del+0x7c>
	return node->next;
   234fa:	6823      	ldr	r3, [r4, #0]
   234fc:	b153      	cbz	r3, 23514 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   234fe:	b15a      	cbz	r2, 23518 <net_route_del+0x84>
	return node->next;
   23500:	6824      	ldr	r4, [r4, #0]
   23502:	b15c      	cbz	r4, 2351c <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   23504:	6860      	ldr	r0, [r4, #4]
   23506:	2800      	cmp	r0, #0
   23508:	d0f5      	beq.n	234f6 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   2350a:	f7ff ff15 	bl	23338 <nbr_nexthop_put>
   2350e:	e7f2      	b.n	234f6 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23510:	4623      	mov	r3, r4
   23512:	e7f3      	b.n	234fc <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   23514:	2400      	movs	r4, #0
   23516:	e7f4      	b.n	23502 <net_route_del+0x6e>
   23518:	2400      	movs	r4, #0
   2351a:	e7f2      	b.n	23502 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   2351c:	4628      	mov	r0, r5
   2351e:	f7fc fae1 	bl	1fae4 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   23522:	2000      	movs	r0, #0
   23524:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23526:	f06f 0015 	mvn.w	r0, #21
   2352a:	4770      	bx	lr
		return -ENOENT;
   2352c:	f06f 0001 	mvn.w	r0, #1
}
   23530:	bd38      	pop	{r3, r4, r5, pc}
   23532:	bf00      	nop
   23534:	2000242c 	.word	0x2000242c
   23538:	f060000c 	.word	0xf060000c

0002353c <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   2353c:	b1b8      	cbz	r0, 2356e <net_route_get_nexthop+0x32>
	return list->head;
   2353e:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   23540:	b19b      	cbz	r3, 2356a <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23542:	685a      	ldr	r2, [r3, #4]
   23544:	7851      	ldrb	r1, [r2, #1]
   23546:	29ff      	cmp	r1, #255	; 0xff
   23548:	d002      	beq.n	23550 <net_route_get_nexthop+0x14>
   2354a:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   2354c:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   2354e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   23550:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23552:	b123      	cbz	r3, 2355e <net_route_get_nexthop+0x22>
	return node->next;
   23554:	681a      	ldr	r2, [r3, #0]
   23556:	b132      	cbz	r2, 23566 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23558:	b119      	cbz	r1, 23562 <net_route_get_nexthop+0x26>
	return node->next;
   2355a:	681b      	ldr	r3, [r3, #0]
   2355c:	e7f0      	b.n	23540 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2355e:	461a      	mov	r2, r3
   23560:	e7f9      	b.n	23556 <net_route_get_nexthop+0x1a>
   23562:	2300      	movs	r3, #0
   23564:	e7ec      	b.n	23540 <net_route_get_nexthop+0x4>
   23566:	2300      	movs	r3, #0
   23568:	e7ea      	b.n	23540 <net_route_get_nexthop+0x4>
	}

	return NULL;
   2356a:	2000      	movs	r0, #0
   2356c:	4770      	bx	lr
		return NULL;
   2356e:	2000      	movs	r0, #0
}
   23570:	4770      	bx	lr
	...

00023574 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   23574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23576:	4607      	mov	r7, r0
   23578:	460e      	mov	r6, r1
	int i, ret = 0;
   2357a:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   2357c:	462c      	mov	r4, r5
   2357e:	e000      	b.n	23582 <net_route_foreach+0xe>
   23580:	3401      	adds	r4, #1
   23582:	2c07      	cmp	r4, #7
   23584:	dc0b      	bgt.n	2359e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   23586:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2358a:	00da      	lsls	r2, r3, #3
   2358c:	4b05      	ldr	r3, [pc, #20]	; (235a4 <net_route_foreach+0x30>)
   2358e:	4413      	add	r3, r2
   23590:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   23592:	2800      	cmp	r0, #0
   23594:	d0f4      	beq.n	23580 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   23596:	4631      	mov	r1, r6
   23598:	47b8      	blx	r7

		ret++;
   2359a:	3501      	adds	r5, #1
   2359c:	e7f0      	b.n	23580 <net_route_foreach+0xc>
	}

	return ret;
}
   2359e:	4628      	mov	r0, r5
   235a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235a2:	bf00      	nop
   235a4:	2000c80c 	.word	0x2000c80c

000235a8 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   235a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235aa:	4607      	mov	r7, r0
   235ac:	460c      	mov	r4, r1
   235ae:	4615      	mov	r5, r2
   235b0:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   235b2:	f7fd f961 	bl	20878 <net_ipv6_nbr_lookup>
   235b6:	b120      	cbz	r0, 235c2 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   235b8:	2300      	movs	r3, #0
   235ba:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   235bc:	6034      	str	r4, [r6, #0]

		return true;
   235be:	2001      	movs	r0, #1
   235c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   235c2:	4621      	mov	r1, r4
   235c4:	4638      	mov	r0, r7
   235c6:	f7ff fed5 	bl	23374 <net_route_lookup>
   235ca:	6028      	str	r0, [r5, #0]
	if (*route) {
   235cc:	b130      	cbz	r0, 235dc <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   235ce:	f7ff ffb5 	bl	2353c <net_route_get_nexthop>
   235d2:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   235d4:	b108      	cbz	r0, 235da <net_route_get_info+0x32>
			return false;
		}

		return true;
   235d6:	2001      	movs	r0, #1
   235d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   235dc:	4621      	mov	r1, r4
   235de:	2000      	movs	r0, #0
   235e0:	f7f8 fefe 	bl	1c3e0 <net_if_ipv6_router_find_default>
		if (!router) {
   235e4:	4603      	mov	r3, r0
   235e6:	b118      	cbz	r0, 235f0 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   235e8:	332c      	adds	r3, #44	; 0x2c
   235ea:	6033      	str	r3, [r6, #0]

		return true;
   235ec:	2001      	movs	r0, #1
   235ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   235f0:	2000      	movs	r0, #0
	}

	return false;
}
   235f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000235f4 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   235f4:	b570      	push	{r4, r5, r6, lr}
   235f6:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   235f8:	6940      	ldr	r0, [r0, #20]
   235fa:	f7fd f93d 	bl	20878 <net_ipv6_nbr_lookup>
	if (!nbr) {
   235fe:	b330      	cbz	r0, 2364e <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   23600:	7840      	ldrb	r0, [r0, #1]
   23602:	f7fc fb01 	bl	1fc08 <net_nbr_get_lladdr>
	if (!lladdr) {
   23606:	4605      	mov	r5, r0
   23608:	b320      	cbz	r0, 23654 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   2360a:	6a20      	ldr	r0, [r4, #32]
   2360c:	b328      	cbz	r0, 2365a <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   2360e:	1cae      	adds	r6, r5, #2
   23610:	786a      	ldrb	r2, [r5, #1]
   23612:	4631      	mov	r1, r6
   23614:	f007 f980 	bl	2a918 <memcmp>
   23618:	b310      	cbz	r0, 23660 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   2361a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2361e:	f043 0304 	orr.w	r3, r3, #4
   23622:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   23626:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   23628:	691a      	ldr	r2, [r3, #16]
   2362a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   2362c:	7d5a      	ldrb	r2, [r3, #21]
   2362e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   23632:	7d1b      	ldrb	r3, [r3, #20]
   23634:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   23638:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   2363a:	782b      	ldrb	r3, [r5, #0]
   2363c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   23640:	786b      	ldrb	r3, [r5, #1]
   23642:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   23646:	4620      	mov	r0, r4
   23648:	f7f8 f84a 	bl	1b6e0 <net_send_data>
   2364c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   2364e:	f06f 0001 	mvn.w	r0, #1
   23652:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   23654:	f06f 0002 	mvn.w	r0, #2
   23658:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2365a:	f06f 0015 	mvn.w	r0, #21
   2365e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   23660:	f06f 0015 	mvn.w	r0, #21
}
   23664:	bd70      	pop	{r4, r5, r6, pc}

00023666 <net_route_init>:

void net_route_init(void)
{
   23666:	4770      	bx	lr

00023668 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   23668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2366a:	e079      	b.n	23760 <mgmt_thread+0xf8>
		out_event = 0;
   2366c:	2100      	movs	r1, #0
   2366e:	4a48      	ldr	r2, [pc, #288]	; (23790 <mgmt_thread+0x128>)
   23670:	8011      	strh	r1, [r2, #0]
   23672:	e089      	b.n	23788 <mgmt_thread+0x120>
		return NULL;
   23674:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   23676:	b13e      	cbz	r6, 23688 <mgmt_thread+0x20>
	return list->head;
   23678:	4b46      	ldr	r3, [pc, #280]	; (23794 <mgmt_thread+0x12c>)
   2367a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2367c:	b15d      	cbz	r5, 23696 <mgmt_thread+0x2e>
   2367e:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23680:	b105      	cbz	r5, 23684 <mgmt_thread+0x1c>
	return node->next;
   23682:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23684:	2700      	movs	r7, #0
   23686:	e01f      	b.n	236c8 <mgmt_thread+0x60>
   23688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2368c:	2100      	movs	r1, #0
   2368e:	4842      	ldr	r0, [pc, #264]	; (23798 <mgmt_thread+0x130>)
   23690:	f006 f9fa 	bl	29a88 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   23694:	e064      	b.n	23760 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   23696:	462c      	mov	r4, r5
   23698:	e7f4      	b.n	23684 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   2369a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   2369e:	d04c      	beq.n	2373a <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   236a0:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   236a2:	6993      	ldr	r3, [r2, #24]
   236a4:	2b00      	cmp	r3, #0
   236a6:	d02c      	beq.n	23702 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   236a8:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   236aa:	4283      	cmp	r3, r0
   236ac:	d029      	beq.n	23702 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   236ae:	2c00      	cmp	r4, #0
   236b0:	d04b      	beq.n	2374a <mgmt_thread+0xe2>
   236b2:	4622      	mov	r2, r4
   236b4:	2c00      	cmp	r4, #0
   236b6:	d046      	beq.n	23746 <mgmt_thread+0xde>
	return node->next;
   236b8:	6823      	ldr	r3, [r4, #0]
   236ba:	2b00      	cmp	r3, #0
   236bc:	d047      	beq.n	2374e <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236be:	2a00      	cmp	r2, #0
   236c0:	d047      	beq.n	23752 <mgmt_thread+0xea>
	return node->next;
   236c2:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236c4:	4625      	mov	r5, r4
   236c6:	461c      	mov	r4, r3
   236c8:	2d00      	cmp	r5, #0
   236ca:	d044      	beq.n	23756 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   236cc:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   236ce:	68aa      	ldr	r2, [r5, #8]
   236d0:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   236d2:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   236d6:	f013 0f03 	tst.w	r3, #3
   236da:	d0e8      	beq.n	236ae <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   236dc:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   236de:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   236e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   236e6:	2b00      	cmp	r3, #0
   236e8:	d0e1      	beq.n	236ae <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   236ea:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   236ec:	2b00      	cmp	r3, #0
   236ee:	d0d4      	beq.n	2369a <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   236f0:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   236f2:	2b00      	cmp	r3, #0
   236f4:	d0d1      	beq.n	2369a <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   236f6:	ea01 0302 	and.w	r3, r1, r2
   236fa:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   236fc:	2b00      	cmp	r3, #0
   236fe:	d0d6      	beq.n	236ae <mgmt_thread+0x46>
   23700:	e7cb      	b.n	2369a <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   23702:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   23704:	6873      	ldr	r3, [r6, #4]
   23706:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   23708:	b15f      	cbz	r7, 23722 <mgmt_thread+0xba>
		prev_node->next = node->next;
   2370a:	682b      	ldr	r3, [r5, #0]
   2370c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   2370e:	4b21      	ldr	r3, [pc, #132]	; (23794 <mgmt_thread+0x12c>)
   23710:	685b      	ldr	r3, [r3, #4]
   23712:	429d      	cmp	r5, r3
   23714:	d00e      	beq.n	23734 <mgmt_thread+0xcc>
	node->next = NULL;
   23716:	2300      	movs	r3, #0
   23718:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2371a:	6868      	ldr	r0, [r5, #4]
   2371c:	f006 f9bd 	bl	29a9a <_impl_k_sem_give>
   23720:	e7c5      	b.n	236ae <mgmt_thread+0x46>
		list->head = node->next;
   23722:	682a      	ldr	r2, [r5, #0]
   23724:	4b1b      	ldr	r3, [pc, #108]	; (23794 <mgmt_thread+0x12c>)
   23726:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   23728:	685b      	ldr	r3, [r3, #4]
   2372a:	429d      	cmp	r5, r3
   2372c:	d1f3      	bne.n	23716 <mgmt_thread+0xae>
			list->tail = list->head;
   2372e:	4b19      	ldr	r3, [pc, #100]	; (23794 <mgmt_thread+0x12c>)
   23730:	605a      	str	r2, [r3, #4]
   23732:	e7f0      	b.n	23716 <mgmt_thread+0xae>
			list->tail = prev_node;
   23734:	4b17      	ldr	r3, [pc, #92]	; (23794 <mgmt_thread+0x12c>)
   23736:	605f      	str	r7, [r3, #4]
   23738:	e7ed      	b.n	23716 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   2373a:	686b      	ldr	r3, [r5, #4]
   2373c:	6872      	ldr	r2, [r6, #4]
   2373e:	4628      	mov	r0, r5
   23740:	4798      	blx	r3
			prev = &cb->node;
   23742:	462f      	mov	r7, r5
   23744:	e7b3      	b.n	236ae <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23746:	4623      	mov	r3, r4
   23748:	e7b7      	b.n	236ba <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2374a:	4623      	mov	r3, r4
   2374c:	e7ba      	b.n	236c4 <mgmt_thread+0x5c>
   2374e:	2300      	movs	r3, #0
   23750:	e7b8      	b.n	236c4 <mgmt_thread+0x5c>
   23752:	2300      	movs	r3, #0
   23754:	e7b6      	b.n	236c4 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   23756:	2300      	movs	r3, #0
   23758:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   2375a:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2375c:	f006 f844 	bl	297e8 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   23760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23764:	480c      	ldr	r0, [pc, #48]	; (23798 <mgmt_thread+0x130>)
   23766:	f006 f9ab 	bl	29ac0 <_impl_k_sem_take>
	if (!events[out_event].event) {
   2376a:	4b09      	ldr	r3, [pc, #36]	; (23790 <mgmt_thread+0x128>)
   2376c:	881b      	ldrh	r3, [r3, #0]
   2376e:	4a0b      	ldr	r2, [pc, #44]	; (2379c <mgmt_thread+0x134>)
   23770:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23774:	2a00      	cmp	r2, #0
   23776:	f43f af7d 	beq.w	23674 <mgmt_thread+0xc>
	out_event++;
   2377a:	1c5a      	adds	r2, r3, #1
   2377c:	b292      	uxth	r2, r2
   2377e:	4904      	ldr	r1, [pc, #16]	; (23790 <mgmt_thread+0x128>)
   23780:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   23782:	2a02      	cmp	r2, #2
   23784:	f43f af72 	beq.w	2366c <mgmt_thread+0x4>
	return &events[o_idx];
   23788:	4e04      	ldr	r6, [pc, #16]	; (2379c <mgmt_thread+0x134>)
   2378a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   2378e:	e772      	b.n	23676 <mgmt_thread+0xe>
   23790:	200024bc 	.word	0x200024bc
   23794:	20002434 	.word	0x20002434
   23798:	2000d5c4 	.word	0x2000d5c4
   2379c:	2000243c 	.word	0x2000243c

000237a0 <net_mgmt_add_event_callback>:
	node->next = list->head;
   237a0:	4b07      	ldr	r3, [pc, #28]	; (237c0 <net_mgmt_add_event_callback+0x20>)
   237a2:	681a      	ldr	r2, [r3, #0]
   237a4:	6002      	str	r2, [r0, #0]
	list->head = node;
   237a6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   237a8:	685b      	ldr	r3, [r3, #4]
   237aa:	b12b      	cbz	r3, 237b8 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   237ac:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   237ae:	4a05      	ldr	r2, [pc, #20]	; (237c4 <net_mgmt_add_event_callback+0x24>)
   237b0:	6813      	ldr	r3, [r2, #0]
   237b2:	430b      	orrs	r3, r1
   237b4:	6013      	str	r3, [r2, #0]
   237b6:	4770      	bx	lr
		list->tail = list->head;
   237b8:	4b01      	ldr	r3, [pc, #4]	; (237c0 <net_mgmt_add_event_callback+0x20>)
   237ba:	6058      	str	r0, [r3, #4]
   237bc:	e7f6      	b.n	237ac <net_mgmt_add_event_callback+0xc>
   237be:	bf00      	nop
   237c0:	20002434 	.word	0x20002434
   237c4:	2000244c 	.word	0x2000244c

000237c8 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   237c8:	4b17      	ldr	r3, [pc, #92]	; (23828 <net_mgmt_event_notify_with_info+0x60>)
   237ca:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   237cc:	ea30 0303 	bics.w	r3, r0, r3
   237d0:	d000      	beq.n	237d4 <net_mgmt_event_notify_with_info+0xc>
   237d2:	4770      	bx	lr
{
   237d4:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   237d6:	4c15      	ldr	r4, [pc, #84]	; (2382c <net_mgmt_event_notify_with_info+0x64>)
   237d8:	8823      	ldrh	r3, [r4, #0]
   237da:	4a15      	ldr	r2, [pc, #84]	; (23830 <net_mgmt_event_notify_with_info+0x68>)
   237dc:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   237e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   237e4:	6051      	str	r1, [r2, #4]
	in_event++;
   237e6:	3301      	adds	r3, #1
   237e8:	b29b      	uxth	r3, r3
   237ea:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   237ec:	2b02      	cmp	r3, #2
   237ee:	d009      	beq.n	23804 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   237f0:	4b0e      	ldr	r3, [pc, #56]	; (2382c <net_mgmt_event_notify_with_info+0x64>)
   237f2:	881a      	ldrh	r2, [r3, #0]
   237f4:	4b0f      	ldr	r3, [pc, #60]	; (23834 <net_mgmt_event_notify_with_info+0x6c>)
   237f6:	881b      	ldrh	r3, [r3, #0]
   237f8:	429a      	cmp	r2, r3
   237fa:	d006      	beq.n	2380a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   237fc:	480e      	ldr	r0, [pc, #56]	; (23838 <net_mgmt_event_notify_with_info+0x70>)
   237fe:	f006 f94c 	bl	29a9a <_impl_k_sem_give>
   23802:	bd10      	pop	{r4, pc}
		in_event = 0;
   23804:	2200      	movs	r2, #0
   23806:	8022      	strh	r2, [r4, #0]
   23808:	e7f2      	b.n	237f0 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   2380a:	3301      	adds	r3, #1
   2380c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2380e:	2b02      	cmp	r3, #2
   23810:	d007      	beq.n	23822 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   23812:	4a07      	ldr	r2, [pc, #28]	; (23830 <net_mgmt_event_notify_with_info+0x68>)
   23814:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23818:	2a00      	cmp	r2, #0
   2381a:	d0ef      	beq.n	237fc <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   2381c:	4a05      	ldr	r2, [pc, #20]	; (23834 <net_mgmt_event_notify_with_info+0x6c>)
   2381e:	8013      	strh	r3, [r2, #0]
   23820:	e7ec      	b.n	237fc <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   23822:	2300      	movs	r3, #0
   23824:	e7f5      	b.n	23812 <net_mgmt_event_notify_with_info+0x4a>
   23826:	bf00      	nop
   23828:	2000244c 	.word	0x2000244c
   2382c:	20002450 	.word	0x20002450
   23830:	2000243c 	.word	0x2000243c
   23834:	200024bc 	.word	0x200024bc
   23838:	2000d5c4 	.word	0x2000d5c4

0002383c <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   2383c:	b510      	push	{r4, lr}
   2383e:	b086      	sub	sp, #24
	list->head = NULL;
   23840:	4b0f      	ldr	r3, [pc, #60]	; (23880 <net_mgmt_event_init+0x44>)
   23842:	2400      	movs	r4, #0
   23844:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   23846:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   23848:	4b0e      	ldr	r3, [pc, #56]	; (23884 <net_mgmt_event_init+0x48>)
   2384a:	601c      	str	r4, [r3, #0]

	in_event = 0;
   2384c:	4b0e      	ldr	r3, [pc, #56]	; (23888 <net_mgmt_event_init+0x4c>)
   2384e:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   23850:	4b0e      	ldr	r3, [pc, #56]	; (2388c <net_mgmt_event_init+0x50>)
   23852:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   23854:	2210      	movs	r2, #16
   23856:	4621      	mov	r1, r4
   23858:	480d      	ldr	r0, [pc, #52]	; (23890 <net_mgmt_event_init+0x54>)
   2385a:	f007 f8f1 	bl	2aa40 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   2385e:	9405      	str	r4, [sp, #20]
   23860:	9404      	str	r4, [sp, #16]
   23862:	f06f 0308 	mvn.w	r3, #8
   23866:	9303      	str	r3, [sp, #12]
   23868:	9402      	str	r4, [sp, #8]
   2386a:	9401      	str	r4, [sp, #4]
   2386c:	9400      	str	r4, [sp, #0]
   2386e:	4b09      	ldr	r3, [pc, #36]	; (23894 <net_mgmt_event_init+0x58>)
   23870:	f44f 7200 	mov.w	r2, #512	; 0x200
   23874:	4908      	ldr	r1, [pc, #32]	; (23898 <net_mgmt_event_init+0x5c>)
   23876:	4809      	ldr	r0, [pc, #36]	; (2389c <net_mgmt_event_init+0x60>)
   23878:	f006 fb8e 	bl	29f98 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   2387c:	b006      	add	sp, #24
   2387e:	bd10      	pop	{r4, pc}
   23880:	20002434 	.word	0x20002434
   23884:	2000244c 	.word	0x2000244c
   23888:	20002450 	.word	0x20002450
   2388c:	200024bc 	.word	0x200024bc
   23890:	2000243c 	.word	0x2000243c
   23894:	00023669 	.word	0x00023669
   23898:	20009e40 	.word	0x20009e40
   2389c:	20002454 	.word	0x20002454

000238a0 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   238a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   238a2:	b085      	sub	sp, #20
   238a4:	4605      	mov	r5, r0
   238a6:	f8ad 2006 	strh.w	r2, [sp, #6]
   238aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   238ae:	f10d 020e 	add.w	r2, sp, #14
   238b2:	f7fa fde5 	bl	1e480 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   238b6:	4602      	mov	r2, r0
   238b8:	b168      	cbz	r0, 238d6 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   238ba:	b11a      	cbz	r2, 238c4 <net_udp_insert_raw+0x24>
   238bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   238c0:	2b00      	cmp	r3, #0
   238c2:	d15c      	bne.n	2397e <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   238c4:	68ab      	ldr	r3, [r5, #8]
   238c6:	429a      	cmp	r2, r3
   238c8:	d00d      	beq.n	238e6 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   238ca:	681c      	ldr	r4, [r3, #0]
   238cc:	b174      	cbz	r4, 238ec <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   238ce:	42a2      	cmp	r2, r4
   238d0:	d00b      	beq.n	238ea <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   238d2:	4623      	mov	r3, r4
   238d4:	e7f9      	b.n	238ca <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   238d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   238da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   238de:	4299      	cmp	r1, r3
   238e0:	d1eb      	bne.n	238ba <net_udp_insert_raw+0x1a>
		return NULL;
   238e2:	2000      	movs	r0, #0
   238e4:	e049      	b.n	2397a <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   238e6:	461c      	mov	r4, r3
   238e8:	e000      	b.n	238ec <net_udp_insert_raw+0x4c>
				prev = tmp;
   238ea:	461c      	mov	r4, r3
	}

	if (!prev) {
   238ec:	2c00      	cmp	r4, #0
   238ee:	d048      	beq.n	23982 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   238f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   238f4:	4628      	mov	r0, r5
   238f6:	f7fa faa1 	bl	1de3c <net_pkt_get_frag>
	if (!udp) {
   238fa:	4607      	mov	r7, r0
   238fc:	2800      	cmp	r0, #0
   238fe:	d042      	beq.n	23986 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   23900:	f100 0608 	add.w	r6, r0, #8
   23904:	2202      	movs	r2, #2
   23906:	f10d 0106 	add.w	r1, sp, #6
   2390a:	4630      	mov	r0, r6
   2390c:	f7f7 fdcc 	bl	1b4a8 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   23910:	2202      	movs	r2, #2
   23912:	a901      	add	r1, sp, #4
   23914:	4630      	mov	r0, r6
   23916:	f7f7 fdc7 	bl	1b4a8 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   2391a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2391c:	2200      	movs	r2, #0
   2391e:	e002      	b.n	23926 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   23920:	8999      	ldrh	r1, [r3, #12]
   23922:	440a      	add	r2, r1
		buf = buf->frags;
   23924:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23926:	2b00      	cmp	r3, #0
   23928:	d1fa      	bne.n	23920 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2392a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   2392e:	1a51      	subs	r1, r2, r1
   23930:	b289      	uxth	r1, r1
   23932:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   23936:	1a89      	subs	r1, r1, r2
   23938:	b289      	uxth	r1, r1
   2393a:	3108      	adds	r1, #8
   2393c:	b289      	uxth	r1, r1
   2393e:	4630      	mov	r0, r6
   23940:	f7f7 fdd2 	bl	1b4e8 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   23944:	2100      	movs	r1, #0
   23946:	4630      	mov	r0, r6
   23948:	f7f7 fdce 	bl	1b4e8 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   2394c:	4639      	mov	r1, r7
   2394e:	4620      	mov	r0, r4
   23950:	f7f7 fd7e 	bl	1b450 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   23954:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   23958:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2395c:	4419      	add	r1, r3
   2395e:	3108      	adds	r1, #8
   23960:	f10d 020e 	add.w	r2, sp, #14
   23964:	b289      	uxth	r1, r1
   23966:	4628      	mov	r0, r5
   23968:	f7fa fd8a 	bl	1e480 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   2396c:	b168      	cbz	r0, 2398a <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   2396e:	6883      	ldr	r3, [r0, #8]
   23970:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23974:	4413      	add	r3, r2
	pkt->appdata = data;
   23976:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   23978:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   2397a:	b005      	add	sp, #20
   2397c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   2397e:	2000      	movs	r0, #0
   23980:	e7fb      	b.n	2397a <net_udp_insert_raw+0xda>
	return NULL;
   23982:	2000      	movs	r0, #0
   23984:	e7f9      	b.n	2397a <net_udp_insert_raw+0xda>
   23986:	2000      	movs	r0, #0
   23988:	e7f7      	b.n	2397a <net_udp_insert_raw+0xda>
	return pkt;
   2398a:	4628      	mov	r0, r5
   2398c:	e7f5      	b.n	2397a <net_udp_insert_raw+0xda>

0002398e <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23992:	b086      	sub	sp, #24
   23994:	4606      	mov	r6, r0
   23996:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   23998:	2300      	movs	r3, #0
   2399a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2399e:	f7fa fda5 	bl	1e4ec <net_pkt_udp_data>
   239a2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   239a4:	2208      	movs	r2, #8
   239a6:	4601      	mov	r1, r0
   239a8:	4630      	mov	r0, r6
   239aa:	f7fb f95d 	bl	1ec68 <net_header_fits>
   239ae:	b170      	cbz	r0, 239ce <net_udp_set_chksum+0x40>
		return hdr;
   239b0:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   239b2:	b173      	cbz	r3, 239d2 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   239b4:	2300      	movs	r3, #0
   239b6:	71a3      	strb	r3, [r4, #6]
   239b8:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   239ba:	2111      	movs	r1, #17
   239bc:	4630      	mov	r0, r6
   239be:	f7fb f8fa 	bl	1ebb6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   239c2:	43c0      	mvns	r0, r0
   239c4:	80e0      	strh	r0, [r4, #6]

		return frag;
   239c6:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   239c8:	b006      	add	sp, #24
   239ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   239ce:	2300      	movs	r3, #0
   239d0:	e7ef      	b.n	239b2 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   239d2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   239d6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   239da:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   239dc:	3206      	adds	r2, #6
   239de:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   239e2:	f8cd 8008 	str.w	r8, [sp, #8]
   239e6:	f10d 0416 	add.w	r4, sp, #22
   239ea:	9401      	str	r4, [sp, #4]
   239ec:	2702      	movs	r7, #2
   239ee:	9700      	str	r7, [sp, #0]
   239f0:	ab05      	add	r3, sp, #20
   239f2:	b292      	uxth	r2, r2
   239f4:	4629      	mov	r1, r5
   239f6:	4630      	mov	r0, r6
   239f8:	f7fa fc63 	bl	1e2c2 <net_pkt_write>
   239fc:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   239fe:	2111      	movs	r1, #17
   23a00:	4630      	mov	r0, r6
   23a02:	f7fb f8d8 	bl	1ebb6 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   23a06:	43c0      	mvns	r0, r0
   23a08:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23a0c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23a10:	3a02      	subs	r2, #2
   23a12:	f8cd 8008 	str.w	r8, [sp, #8]
   23a16:	9401      	str	r4, [sp, #4]
   23a18:	9700      	str	r7, [sp, #0]
   23a1a:	ab05      	add	r3, sp, #20
   23a1c:	b292      	uxth	r2, r2
   23a1e:	4629      	mov	r1, r5
   23a20:	4630      	mov	r0, r6
   23a22:	f7fa fc4e 	bl	1e2c2 <net_pkt_write>
	return frag;
   23a26:	e7cf      	b.n	239c8 <net_udp_set_chksum+0x3a>

00023a28 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23a28:	b570      	push	{r4, r5, r6, lr}
   23a2a:	b084      	sub	sp, #16
   23a2c:	4605      	mov	r5, r0
   23a2e:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   23a30:	f7fa fd5c 	bl	1e4ec <net_pkt_udp_data>
   23a34:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23a36:	2208      	movs	r2, #8
   23a38:	4601      	mov	r1, r0
   23a3a:	4628      	mov	r0, r5
   23a3c:	f7fb f914 	bl	1ec68 <net_header_fits>
   23a40:	b120      	cbz	r0, 23a4c <net_udp_get_chksum+0x24>
		return hdr;
   23a42:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   23a44:	b123      	cbz	r3, 23a50 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   23a46:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23a48:	b004      	add	sp, #16
   23a4a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23a4c:	2300      	movs	r3, #0
   23a4e:	e7f9      	b.n	23a44 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23a50:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23a54:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23a58:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23a5a:	3106      	adds	r1, #6
   23a5c:	f10d 030e 	add.w	r3, sp, #14
   23a60:	9300      	str	r3, [sp, #0]
   23a62:	2302      	movs	r3, #2
   23a64:	aa03      	add	r2, sp, #12
   23a66:	b289      	uxth	r1, r1
   23a68:	4630      	mov	r0, r6
   23a6a:	f7fa fbb8 	bl	1e1de <net_frag_read>
	return chksum;
   23a6e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23a72:	e7e9      	b.n	23a48 <net_udp_get_chksum+0x20>

00023a74 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a76:	b085      	sub	sp, #20
   23a78:	4605      	mov	r5, r0
   23a7a:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   23a7c:	f7fa fd36 	bl	1e4ec <net_pkt_udp_data>
   23a80:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23a82:	2208      	movs	r2, #8
   23a84:	4601      	mov	r1, r0
   23a86:	4628      	mov	r0, r5
   23a88:	f7fb f8ee 	bl	1ec68 <net_header_fits>
   23a8c:	b120      	cbz	r0, 23a98 <net_udp_get_hdr+0x24>
		return hdr;
   23a8e:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   23a90:	b126      	cbz	r6, 23a9c <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23a92:	4620      	mov	r0, r4
   23a94:	b005      	add	sp, #20
   23a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23a98:	2600      	movs	r6, #0
   23a9a:	e7f9      	b.n	23a90 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23a9c:	68a8      	ldr	r0, [r5, #8]
   23a9e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23aa2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23aa6:	9700      	str	r7, [sp, #0]
   23aa8:	2302      	movs	r3, #2
   23aaa:	f10d 020e 	add.w	r2, sp, #14
   23aae:	4421      	add	r1, r4
   23ab0:	f7fa fb95 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23ab4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23ab8:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23aba:	9300      	str	r3, [sp, #0]
   23abc:	2302      	movs	r3, #2
   23abe:	f10d 020e 	add.w	r2, sp, #14
   23ac2:	f7fa fb8c 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23ac6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   23aca:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23acc:	9300      	str	r3, [sp, #0]
   23ace:	2302      	movs	r3, #2
   23ad0:	f10d 020e 	add.w	r2, sp, #14
   23ad4:	f7fa fb83 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23ad8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23adc:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23ade:	9300      	str	r3, [sp, #0]
   23ae0:	2302      	movs	r3, #2
   23ae2:	f10d 020e 	add.w	r2, sp, #14
   23ae6:	f7fa fb7a 	bl	1e1de <net_frag_read>
	if (!frag) {
   23aea:	b108      	cbz	r0, 23af0 <net_udp_get_hdr+0x7c>
	return hdr;
   23aec:	463c      	mov	r4, r7
   23aee:	e7d0      	b.n	23a92 <net_udp_get_hdr+0x1e>
		return NULL;
   23af0:	4634      	mov	r4, r6
   23af2:	e7ce      	b.n	23a92 <net_udp_get_hdr+0x1e>

00023af4 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23af8:	b086      	sub	sp, #24
   23afa:	4606      	mov	r6, r0
   23afc:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23afe:	2208      	movs	r2, #8
   23b00:	f7fb f8b2 	bl	1ec68 <net_header_fits>
   23b04:	b128      	cbz	r0, 23b12 <net_udp_set_hdr+0x1e>
		return hdr;
   23b06:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   23b08:	b12d      	cbz	r5, 23b16 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23b0a:	4620      	mov	r0, r4
   23b0c:	b006      	add	sp, #24
   23b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23b12:	2500      	movs	r5, #0
   23b14:	e7f8      	b.n	23b08 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23b16:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23b1a:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23b1e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23b22:	f8cd 8008 	str.w	r8, [sp, #8]
   23b26:	9401      	str	r4, [sp, #4]
   23b28:	2702      	movs	r7, #2
   23b2a:	9700      	str	r7, [sp, #0]
   23b2c:	f10d 0316 	add.w	r3, sp, #22
   23b30:	440a      	add	r2, r1
   23b32:	68b1      	ldr	r1, [r6, #8]
   23b34:	4630      	mov	r0, r6
   23b36:	f7fa fbc4 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23b3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   23b3e:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23b40:	f8cd 8008 	str.w	r8, [sp, #8]
   23b44:	9301      	str	r3, [sp, #4]
   23b46:	9700      	str	r7, [sp, #0]
   23b48:	f10d 0316 	add.w	r3, sp, #22
   23b4c:	4601      	mov	r1, r0
   23b4e:	4630      	mov	r0, r6
   23b50:	f7fa fbb7 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   23b54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   23b58:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   23b5a:	f8cd 8008 	str.w	r8, [sp, #8]
   23b5e:	9301      	str	r3, [sp, #4]
   23b60:	9700      	str	r7, [sp, #0]
   23b62:	f10d 0316 	add.w	r3, sp, #22
   23b66:	4601      	mov	r1, r0
   23b68:	4630      	mov	r0, r6
   23b6a:	f7fa fbaa 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23b6e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   23b72:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23b74:	f8cd 8008 	str.w	r8, [sp, #8]
   23b78:	9301      	str	r3, [sp, #4]
   23b7a:	9700      	str	r7, [sp, #0]
   23b7c:	f10d 0316 	add.w	r3, sp, #22
   23b80:	4601      	mov	r1, r0
   23b82:	4630      	mov	r0, r6
   23b84:	f7fa fb9d 	bl	1e2c2 <net_pkt_write>
	if (!frag) {
   23b88:	2800      	cmp	r0, #0
   23b8a:	d1be      	bne.n	23b0a <net_udp_set_hdr+0x16>
		return NULL;
   23b8c:	462c      	mov	r4, r5
   23b8e:	e7bc      	b.n	23b0a <net_udp_set_hdr+0x16>

00023b90 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   23b90:	b510      	push	{r4, lr}
   23b92:	460c      	mov	r4, r1
   23b94:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   23b96:	8942      	ldrh	r2, [r0, #10]
   23b98:	4620      	mov	r0, r4
   23b9a:	f7ff fe81 	bl	238a0 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   23b9e:	bd10      	pop	{r4, pc}

00023ba0 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   23ba0:	4770      	bx	lr

00023ba2 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   23ba2:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   23ba4:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   23ba6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   23ba8:	b12d      	cbz	r5, 23bb6 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   23baa:	6843      	ldr	r3, [r0, #4]
   23bac:	f06f 0267 	mvn.w	r2, #103	; 0x67
   23bb0:	2100      	movs	r1, #0
   23bb2:	4620      	mov	r0, r4
   23bb4:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   23bb6:	4620      	mov	r0, r4
   23bb8:	f7f9 fba8 	bl	1d30c <net_context_unref>
   23bbc:	bd38      	pop	{r3, r4, r5, pc}

00023bbe <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   23bbe:	b510      	push	{r4, lr}
   23bc0:	4604      	mov	r4, r0
	return (!list->head);
   23bc2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23bc6:	b17b      	cbz	r3, 23be8 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   23bc8:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23bd0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   23bd4:	f36f 0304 	bfc	r3, #0, #5
   23bd8:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23bdc:	2200      	movs	r2, #0
   23bde:	21c8      	movs	r1, #200	; 0xc8
   23be0:	3058      	adds	r0, #88	; 0x58
   23be2:	f006 fb63 	bl	2a2ac <_impl_k_timer_start>
   23be6:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23be8:	3058      	adds	r0, #88	; 0x58
   23bea:	f006 fc17 	bl	2a41c <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   23bee:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23bf2:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23bf6:	f022 0210 	bic.w	r2, r2, #16
   23bfa:	f362 134c 	bfi	r3, r2, #5, #8
   23bfe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   23c02:	bd10      	pop	{r4, pc}

00023c04 <ack_timer_cancel>:
{
   23c04:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   23c06:	3008      	adds	r0, #8
   23c08:	f006 fd36 	bl	2a678 <k_delayed_work_cancel>
   23c0c:	bd08      	pop	{r3, pc}

00023c0e <fin_timer_cancel>:
{
   23c0e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   23c10:	3030      	adds	r0, #48	; 0x30
   23c12:	f006 fd31 	bl	2a678 <k_delayed_work_cancel>
   23c16:	bd08      	pop	{r3, pc}

00023c18 <finalize_segment>:
{
   23c18:	b508      	push	{r3, lr}
	return pkt->family;
   23c1a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   23c1e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   23c22:	2b0a      	cmp	r3, #10
   23c24:	d001      	beq.n	23c2a <finalize_segment+0x12>
	return 0;
   23c26:	2000      	movs	r0, #0
}
   23c28:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   23c2a:	f7fc fe17 	bl	2085c <net_ipv6_finalize>
   23c2e:	bd08      	pop	{r3, pc}

00023c30 <prepare_segment>:
{
   23c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c34:	b085      	sub	sp, #20
   23c36:	4606      	mov	r6, r0
   23c38:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   23c3a:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   23c3c:	b192      	cbz	r2, 23c64 <prepare_segment+0x34>
   23c3e:	4614      	mov	r4, r2
		tail = pkt->frags;
   23c40:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   23c44:	2300      	movs	r3, #0
   23c46:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   23c48:	469a      	mov	sl, r3
   23c4a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23c4e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   23c52:	2b0a      	cmp	r3, #10
   23c54:	d013      	beq.n	23c7e <prepare_segment+0x4e>
		if (pkt_allocated) {
   23c56:	f1ba 0f00 	cmp.w	sl, #0
   23c5a:	d174      	bne.n	23d46 <prepare_segment+0x116>
		return NULL;
   23c5c:	2000      	movs	r0, #0
}
   23c5e:	b005      	add	sp, #20
   23c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   23c64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23c68:	4638      	mov	r0, r7
   23c6a:	f7fa f907 	bl	1de7c <net_pkt_get_tx>
		if (!pkt) {
   23c6e:	4604      	mov	r4, r0
   23c70:	2800      	cmp	r0, #0
   23c72:	d0f4      	beq.n	23c5e <prepare_segment+0x2e>
		pkt_allocated = true;
   23c74:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   23c78:	f04f 0800 	mov.w	r8, #0
   23c7c:	e7e5      	b.n	23c4a <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   23c7e:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   23c80:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   23c82:	3304      	adds	r3, #4
   23c84:	6852      	ldr	r2, [r2, #4]
   23c86:	4621      	mov	r1, r4
   23c88:	6830      	ldr	r0, [r6, #0]
   23c8a:	f7fc fb8b 	bl	203a4 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   23c8e:	696b      	ldr	r3, [r5, #20]
   23c90:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   23c94:	897b      	ldrh	r3, [r7, #10]
   23c96:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   23c98:	68a3      	ldr	r3, [r4, #8]
   23c9a:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   23c9c:	2206      	movs	r2, #6
   23c9e:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   23ca0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23ca4:	4638      	mov	r0, r7
   23ca6:	f7fa f8fb 	bl	1dea0 <net_pkt_get_data>
	if (!header) {
   23caa:	9001      	str	r0, [sp, #4]
   23cac:	2800      	cmp	r0, #0
   23cae:	d04f      	beq.n	23d50 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   23cb0:	9e01      	ldr	r6, [sp, #4]
   23cb2:	4631      	mov	r1, r6
   23cb4:	4620      	mov	r0, r4
   23cb6:	f7fa f93e 	bl	1df36 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   23cba:	2114      	movs	r1, #20
   23cbc:	f106 0008 	add.w	r0, r6, #8
   23cc0:	f7f7 fbec 	bl	1b49c <net_buf_simple_add>
   23cc4:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   23cc6:	68eb      	ldr	r3, [r5, #12]
   23cc8:	9303      	str	r3, [sp, #12]
   23cca:	2b00      	cmp	r3, #0
   23ccc:	d05d      	beq.n	23d8a <prepare_segment+0x15a>
   23cce:	f895 900b 	ldrb.w	r9, [r5, #11]
   23cd2:	f1b9 0f00 	cmp.w	r9, #0
   23cd6:	d145      	bne.n	23d64 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   23cd8:	f109 0914 	add.w	r9, r9, #20
   23cdc:	fa5f f989 	uxtb.w	r9, r9
   23ce0:	ea4f 0989 	mov.w	r9, r9, lsl #2
   23ce4:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   23ce8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   23cec:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   23cee:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   23cf2:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   23cf4:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23cf6:	0a11      	lsrs	r1, r2, #8
   23cf8:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   23cfa:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   23cfc:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23d00:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   23d02:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   23d04:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   23d06:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23d08:	0a11      	lsrs	r1, r2, #8
   23d0a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   23d0c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   23d0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23d12:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   23d14:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   23d16:	7aab      	ldrb	r3, [r5, #10]
   23d18:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   23d1a:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   23d1c:	0a1a      	lsrs	r2, r3, #8
   23d1e:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   23d20:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   23d22:	2300      	movs	r3, #0
   23d24:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   23d26:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   23d28:	f1b8 0f00 	cmp.w	r8, #0
   23d2c:	d003      	beq.n	23d36 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   23d2e:	4641      	mov	r1, r8
   23d30:	4620      	mov	r0, r4
   23d32:	f7fa f900 	bl	1df36 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   23d36:	4621      	mov	r1, r4
   23d38:	4638      	mov	r0, r7
   23d3a:	f7ff ff6d 	bl	23c18 <finalize_segment>
   23d3e:	2800      	cmp	r0, #0
   23d40:	db26      	blt.n	23d90 <prepare_segment+0x160>
	return pkt;
   23d42:	4620      	mov	r0, r4
   23d44:	e78b      	b.n	23c5e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23d46:	4620      	mov	r0, r4
   23d48:	f7fa f8cb 	bl	1dee2 <net_pkt_unref>
		return NULL;
   23d4c:	2000      	movs	r0, #0
   23d4e:	e786      	b.n	23c5e <prepare_segment+0x2e>
		if (pkt_allocated) {
   23d50:	f1ba 0f00 	cmp.w	sl, #0
   23d54:	d101      	bne.n	23d5a <prepare_segment+0x12a>
		return NULL;
   23d56:	2000      	movs	r0, #0
   23d58:	e781      	b.n	23c5e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23d5a:	4620      	mov	r0, r4
   23d5c:	f7fa f8c1 	bl	1dee2 <net_pkt_unref>
		return NULL;
   23d60:	2000      	movs	r0, #0
   23d62:	e77c      	b.n	23c5e <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   23d64:	4649      	mov	r1, r9
   23d66:	9801      	ldr	r0, [sp, #4]
   23d68:	3008      	adds	r0, #8
   23d6a:	f7f7 fb97 	bl	1b49c <net_buf_simple_add>
   23d6e:	464a      	mov	r2, r9
   23d70:	9903      	ldr	r1, [sp, #12]
   23d72:	f7dc faa5 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   23d76:	f019 0f03 	tst.w	r9, #3
   23d7a:	d0ad      	beq.n	23cd8 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   23d7c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   23d80:	f109 0904 	add.w	r9, r9, #4
   23d84:	fa5f f989 	uxtb.w	r9, r9
   23d88:	e7a6      	b.n	23cd8 <prepare_segment+0xa8>
	u8_t optlen = 0;
   23d8a:	f04f 0900 	mov.w	r9, #0
   23d8e:	e7a3      	b.n	23cd8 <prepare_segment+0xa8>
		if (pkt_allocated) {
   23d90:	f1ba 0f00 	cmp.w	sl, #0
   23d94:	d101      	bne.n	23d9a <prepare_segment+0x16a>
		return NULL;
   23d96:	2000      	movs	r0, #0
   23d98:	e761      	b.n	23c5e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23d9a:	4620      	mov	r0, r4
   23d9c:	f7fa f8a1 	bl	1dee2 <net_pkt_unref>
		return NULL;
   23da0:	2000      	movs	r0, #0
   23da2:	e75c      	b.n	23c5e <prepare_segment+0x2e>

00023da4 <net_tcp_alloc>:
{
   23da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23da6:	f04f 0320 	mov.w	r3, #32
   23daa:	f3ef 8411 	mrs	r4, BASEPRI
   23dae:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23db2:	2300      	movs	r3, #0
   23db4:	2b05      	cmp	r3, #5
   23db6:	dc18      	bgt.n	23dea <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   23db8:	22c8      	movs	r2, #200	; 0xc8
   23dba:	492b      	ldr	r1, [pc, #172]	; (23e68 <net_tcp_alloc+0xc4>)
   23dbc:	fb02 1203 	mla	r2, r2, r3, r1
   23dc0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   23dc4:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   23dc8:	f012 0f01 	tst.w	r2, #1
   23dcc:	d001      	beq.n	23dd2 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23dce:	3301      	adds	r3, #1
   23dd0:	e7f0      	b.n	23db4 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   23dd2:	21c8      	movs	r1, #200	; 0xc8
   23dd4:	4d24      	ldr	r5, [pc, #144]	; (23e68 <net_tcp_alloc+0xc4>)
   23dd6:	fb01 5103 	mla	r1, r1, r3, r5
   23dda:	f042 0201 	orr.w	r2, r2, #1
   23dde:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   23de2:	f362 154c 	bfi	r5, r2, #5, #8
   23de6:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23dea:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   23dee:	2b05      	cmp	r3, #5
   23df0:	dc37      	bgt.n	23e62 <net_tcp_alloc+0xbe>
   23df2:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   23df4:	4e1c      	ldr	r6, [pc, #112]	; (23e68 <net_tcp_alloc+0xc4>)
   23df6:	22c8      	movs	r2, #200	; 0xc8
   23df8:	fb02 f403 	mul.w	r4, r2, r3
   23dfc:	1935      	adds	r5, r6, r4
   23dfe:	2100      	movs	r1, #0
   23e00:	4628      	mov	r0, r5
   23e02:	f006 fe1d 	bl	2aa40 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   23e06:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   23e0a:	2101      	movs	r1, #1
   23e0c:	f361 124c 	bfi	r2, r1, #5, #8
   23e10:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   23e14:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   23e18:	f36f 3250 	bfc	r2, #13, #4
   23e1c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   23e20:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   23e22:	f7de f987 	bl	2134 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   23e26:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   23e2a:	3001      	adds	r0, #1
   23e2c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   23e30:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   23e34:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   23e38:	2700      	movs	r7, #0
   23e3a:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   23e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23e42:	463a      	mov	r2, r7
   23e44:	4909      	ldr	r1, [pc, #36]	; (23e6c <net_tcp_alloc+0xc8>)
   23e46:	4430      	add	r0, r6
   23e48:	f006 fa1c 	bl	2a284 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   23e4c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   23e50:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   23e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23e56:	4639      	mov	r1, r7
   23e58:	3004      	adds	r0, #4
   23e5a:	f005 fe15 	bl	29a88 <_impl_k_sem_init>
}
   23e5e:	4628      	mov	r0, r5
   23e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   23e62:	2500      	movs	r5, #0
   23e64:	e7fb      	b.n	23e5e <net_tcp_alloc+0xba>
   23e66:	bf00      	nop
   23e68:	200024c0 	.word	0x200024c0
   23e6c:	000247e1 	.word	0x000247e1

00023e70 <net_tcp_get_recv_wnd>:
}
   23e70:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   23e74:	4770      	bx	lr

00023e76 <net_tcp_get_recv_mss>:
{
   23e76:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   23e78:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   23e7a:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   23e7e:	f013 0f10 	tst.w	r3, #16
   23e82:	d006      	beq.n	23e92 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   23e84:	230a      	movs	r3, #10
	if (family == AF_INET) {
   23e86:	2b02      	cmp	r3, #2
   23e88:	d019      	beq.n	23ebe <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   23e8a:	2b0a      	cmp	r3, #10
   23e8c:	d003      	beq.n	23e96 <net_tcp_get_recv_mss+0x20>
	return 0;
   23e8e:	2000      	movs	r0, #0
}
   23e90:	bd08      	pop	{r3, pc}
	return AF_INET;
   23e92:	2302      	movs	r3, #2
   23e94:	e7f7      	b.n	23e86 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   23e96:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   23e9a:	f7f8 fddb 	bl	1ca54 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   23e9e:	b120      	cbz	r0, 23eaa <net_tcp_get_recv_mss+0x34>
   23ea0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   23ea2:	283b      	cmp	r0, #59	; 0x3b
   23ea4:	d903      	bls.n	23eae <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   23ea6:	383c      	subs	r0, #60	; 0x3c
   23ea8:	e002      	b.n	23eb0 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   23eaa:	2000      	movs	r0, #0
   23eac:	e000      	b.n	23eb0 <net_tcp_get_recv_mss+0x3a>
   23eae:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   23eb0:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   23eb4:	da01      	bge.n	23eba <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   23eb6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   23eba:	b280      	uxth	r0, r0
   23ebc:	bd08      	pop	{r3, pc}
		return 0;
   23ebe:	2000      	movs	r0, #0
   23ec0:	bd08      	pop	{r3, pc}

00023ec2 <net_tcp_set_syn_opt>:
{
   23ec2:	b570      	push	{r4, r5, r6, lr}
   23ec4:	460e      	mov	r6, r1
   23ec6:	4614      	mov	r4, r2
	*optionlen = 0;
   23ec8:	2300      	movs	r3, #0
   23eca:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   23ecc:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23ed0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   23ed4:	d00f      	beq.n	23ef6 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   23ed6:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   23ed8:	7822      	ldrb	r2, [r4, #0]
   23eda:	0203      	lsls	r3, r0, #8
   23edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23ee0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   23ee4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23ee8:	f040 0002 	orr.w	r0, r0, #2
   23eec:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   23eee:	7823      	ldrb	r3, [r4, #0]
   23ef0:	3304      	adds	r3, #4
   23ef2:	7023      	strb	r3, [r4, #0]
   23ef4:	bd70      	pop	{r4, r5, r6, pc}
   23ef6:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   23ef8:	f7ff ffbd 	bl	23e76 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   23efc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23f04:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   23f08:	e7e6      	b.n	23ed8 <net_tcp_set_syn_opt+0x16>

00023f0a <net_tcp_prepare_reset>:
{
   23f0a:	b510      	push	{r4, lr}
   23f0c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   23f0e:	2300      	movs	r3, #0
   23f10:	9300      	str	r3, [sp, #0]
   23f12:	9301      	str	r3, [sp, #4]
   23f14:	9302      	str	r3, [sp, #8]
   23f16:	9303      	str	r3, [sp, #12]
   23f18:	9304      	str	r3, [sp, #16]
   23f1a:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   23f1c:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   23f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   23f22:	f013 0f06 	tst.w	r3, #6
   23f26:	d01a      	beq.n	23f5e <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   23f28:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23f2c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   23f30:	2b02      	cmp	r3, #2
   23f32:	d014      	beq.n	23f5e <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   23f34:	2b09      	cmp	r3, #9
   23f36:	d012      	beq.n	23f5e <net_tcp_prepare_reset+0x54>
   23f38:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   23f3a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   23f3e:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   23f40:	2314      	movs	r3, #20
   23f42:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   23f46:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23f4a:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   23f4c:	6803      	ldr	r3, [r0, #0]
   23f4e:	3308      	adds	r3, #8
   23f50:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   23f52:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   23f54:	2200      	movs	r2, #0
   23f56:	4669      	mov	r1, sp
   23f58:	f7ff fe6a 	bl	23c30 <prepare_segment>
   23f5c:	6020      	str	r0, [r4, #0]
}
   23f5e:	2000      	movs	r0, #0
   23f60:	b006      	add	sp, #24
   23f62:	bd10      	pop	{r4, pc}

00023f64 <net_tcp_state_str>:
}
   23f64:	4800      	ldr	r0, [pc, #0]	; (23f68 <net_tcp_state_str+0x4>)
   23f66:	4770      	bx	lr
   23f68:	0002f3ac 	.word	0x0002f3ac

00023f6c <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   23f6c:	4770      	bx	lr

00023f6e <net_tcp_change_state>:
   23f6e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23f72:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   23f76:	428b      	cmp	r3, r1
   23f78:	d022      	beq.n	23fc0 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   23f7a:	f001 010f 	and.w	r1, r1, #15
   23f7e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23f82:	f361 3350 	bfi	r3, r1, #13, #4
   23f86:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   23f8a:	b9c9      	cbnz	r1, 23fc0 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   23f8c:	6803      	ldr	r3, [r0, #0]
   23f8e:	b1bb      	cbz	r3, 23fc0 <net_tcp_change_state+0x52>
{
   23f90:	b530      	push	{r4, r5, lr}
   23f92:	b083      	sub	sp, #12
   23f94:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   23f96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   23f98:	b120      	cbz	r0, 23fa4 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   23f9a:	f001 fcef 	bl	2597c <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   23f9e:	6823      	ldr	r3, [r4, #0]
   23fa0:	2200      	movs	r2, #0
   23fa2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   23fa4:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   23fa8:	b145      	cbz	r5, 23fbc <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   23faa:	6820      	ldr	r0, [r4, #0]
   23fac:	6803      	ldr	r3, [r0, #0]
   23fae:	9300      	str	r3, [sp, #0]
   23fb0:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   23fb4:	2218      	movs	r2, #24
   23fb6:	f100 0114 	add.w	r1, r0, #20
   23fba:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   23fbc:	b003      	add	sp, #12
   23fbe:	bd30      	pop	{r4, r5, pc}
   23fc0:	4770      	bx	lr
	...

00023fc4 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23fc4:	2800      	cmp	r0, #0
   23fc6:	d064      	beq.n	24092 <net_tcp_release+0xce>
{
   23fc8:	b538      	push	{r3, r4, r5, lr}
   23fca:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23fcc:	4b35      	ldr	r3, [pc, #212]	; (240a4 <net_tcp_release+0xe0>)
   23fce:	4298      	cmp	r0, r3
   23fd0:	d362      	bcc.n	24098 <net_tcp_release+0xd4>
   23fd2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   23fd6:	4298      	cmp	r0, r3
   23fd8:	d261      	bcs.n	2409e <net_tcp_release+0xda>
	return list->head;
   23fda:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   23fde:	b140      	cbz	r0, 23ff2 <net_tcp_release+0x2e>
   23fe0:	3834      	subs	r0, #52	; 0x34
   23fe2:	b140      	cbz	r0, 23ff6 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23fe4:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   23fe8:	d000      	beq.n	23fec <net_tcp_release+0x28>
	return node->next;
   23fea:	6b44      	ldr	r4, [r0, #52]	; 0x34
   23fec:	b12c      	cbz	r4, 23ffa <net_tcp_release+0x36>
   23fee:	3c34      	subs	r4, #52	; 0x34
   23ff0:	e00d      	b.n	2400e <net_tcp_release+0x4a>
   23ff2:	2000      	movs	r0, #0
   23ff4:	e7f5      	b.n	23fe2 <net_tcp_release+0x1e>
   23ff6:	4604      	mov	r4, r0
   23ff8:	e009      	b.n	2400e <net_tcp_release+0x4a>
   23ffa:	2400      	movs	r4, #0
   23ffc:	e007      	b.n	2400e <net_tcp_release+0x4a>
			list->tail = list->head;
   23ffe:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   24002:	e00e      	b.n	24022 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24004:	461a      	mov	r2, r3
   24006:	e015      	b.n	24034 <net_tcp_release+0x70>
   24008:	3b34      	subs	r3, #52	; 0x34
   2400a:	4620      	mov	r0, r4
   2400c:	461c      	mov	r4, r3
   2400e:	b1d0      	cbz	r0, 24046 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   24010:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   24014:	6b42      	ldr	r2, [r0, #52]	; 0x34
   24016:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2401a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   2401e:	428b      	cmp	r3, r1
   24020:	d0ed      	beq.n	23ffe <net_tcp_release+0x3a>
	node->next = NULL;
   24022:	2300      	movs	r3, #0
   24024:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   24026:	f7f9 ff5c 	bl	1dee2 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2402a:	b144      	cbz	r4, 2403e <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2402c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24030:	d0e8      	beq.n	24004 <net_tcp_release+0x40>
	return node->next;
   24032:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24034:	b12a      	cbz	r2, 24042 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24036:	2b00      	cmp	r3, #0
   24038:	d0e6      	beq.n	24008 <net_tcp_release+0x44>
	return node->next;
   2403a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2403c:	e7e4      	b.n	24008 <net_tcp_release+0x44>
   2403e:	4623      	mov	r3, r4
   24040:	e7e3      	b.n	2400a <net_tcp_release+0x46>
   24042:	2300      	movs	r3, #0
   24044:	e7e1      	b.n	2400a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   24046:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2404a:	f006 f9e7 	bl	2a41c <_impl_k_timer_stop>
	sem->count = 0;
   2404e:	2400      	movs	r4, #0
   24050:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   24054:	4628      	mov	r0, r5
   24056:	f7ff fdd5 	bl	23c04 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   2405a:	4628      	mov	r0, r5
   2405c:	f7ff fdd7 	bl	23c0e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   24060:	4621      	mov	r1, r4
   24062:	4628      	mov	r0, r5
   24064:	f7ff ff83 	bl	23f6e <net_tcp_change_state>
	tcp->context = NULL;
   24068:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   2406a:	f04f 0320 	mov.w	r3, #32
   2406e:	f3ef 8111 	mrs	r1, BASEPRI
   24072:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   24076:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   2407a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2407e:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   24082:	f362 134c 	bfi	r3, r2, #5, #8
   24086:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2408a:	f381 8811 	msr	BASEPRI, r1
	return 0;
   2408e:	4620      	mov	r0, r4
   24090:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24092:	f06f 0015 	mvn.w	r0, #21
   24096:	4770      	bx	lr
   24098:	f06f 0015 	mvn.w	r0, #21
   2409c:	bd38      	pop	{r3, r4, r5, pc}
   2409e:	f06f 0015 	mvn.w	r0, #21
}
   240a2:	bd38      	pop	{r3, r4, r5, pc}
   240a4:	200024c0 	.word	0x200024c0

000240a8 <net_tcp_prepare_segment>:
{
   240a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240ac:	b086      	sub	sp, #24
   240ae:	4604      	mov	r4, r0
   240b0:	460d      	mov	r5, r1
   240b2:	4692      	mov	sl, r2
   240b4:	4699      	mov	r9, r3
   240b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   240b8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   240bc:	2300      	movs	r3, #0
   240be:	9300      	str	r3, [sp, #0]
   240c0:	9301      	str	r3, [sp, #4]
   240c2:	9302      	str	r3, [sp, #8]
   240c4:	9303      	str	r3, [sp, #12]
   240c6:	9304      	str	r3, [sp, #16]
   240c8:	9305      	str	r3, [sp, #20]
	if (!local) {
   240ca:	2f00      	cmp	r7, #0
   240cc:	d050      	beq.n	24170 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   240ce:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   240d2:	f015 0f10 	tst.w	r5, #16
   240d6:	d009      	beq.n	240ec <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   240d8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   240dc:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   240e0:	2b07      	cmp	r3, #7
   240e2:	d048      	beq.n	24176 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   240e4:	2b08      	cmp	r3, #8
   240e6:	d055      	beq.n	24194 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   240e8:	2b05      	cmp	r3, #5
   240ea:	d058      	beq.n	2419e <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   240ec:	f015 0f01 	tst.w	r5, #1
   240f0:	d010      	beq.n	24114 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   240f2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   240f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   240fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   240fe:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   24102:	3602      	adds	r6, #2
   24104:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24108:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   2410c:	2b04      	cmp	r3, #4
   2410e:	d053      	beq.n	241b8 <net_tcp_prepare_segment+0x110>
   24110:	2b03      	cmp	r3, #3
   24112:	d051      	beq.n	241b8 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   24114:	f015 0f02 	tst.w	r5, #2
   24118:	d000      	beq.n	2411c <net_tcp_prepare_segment+0x74>
		seq++;
   2411a:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   2411c:	4620      	mov	r0, r4
   2411e:	f7ff fea7 	bl	23e70 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   24122:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   24124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24126:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   24128:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2412c:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   2412e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   24132:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   24134:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   24138:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   2413c:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   24140:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   24144:	f8d8 2000 	ldr.w	r2, [r8]
   24148:	4669      	mov	r1, sp
   2414a:	4620      	mov	r0, r4
   2414c:	f7ff fd70 	bl	23c30 <prepare_segment>
   24150:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   24154:	b3a8      	cbz	r0, 241c2 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   24156:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   2415a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   2415e:	1af3      	subs	r3, r6, r3
   24160:	2b00      	cmp	r3, #0
   24162:	dd31      	ble.n	241c8 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   24164:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   24168:	2000      	movs	r0, #0
}
   2416a:	b006      	add	sp, #24
   2416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   24170:	6807      	ldr	r7, [r0, #0]
   24172:	3708      	adds	r7, #8
   24174:	e7ab      	b.n	240ce <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   24176:	f015 0f01 	tst.w	r5, #1
   2417a:	d006      	beq.n	2418a <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   2417c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24180:	2109      	movs	r1, #9
   24182:	4620      	mov	r0, r4
   24184:	f7ff fef3 	bl	23f6e <net_tcp_change_state>
   24188:	e7b0      	b.n	240ec <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   2418a:	210a      	movs	r1, #10
   2418c:	4620      	mov	r0, r4
   2418e:	f7ff feee 	bl	23f6e <net_tcp_change_state>
   24192:	e7ab      	b.n	240ec <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24194:	2109      	movs	r1, #9
   24196:	4620      	mov	r0, r4
   24198:	f7ff fee9 	bl	23f6e <net_tcp_change_state>
   2419c:	e7a6      	b.n	240ec <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   2419e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   241a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   241a6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   241aa:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   241ae:	2106      	movs	r1, #6
   241b0:	4620      	mov	r0, r4
   241b2:	f7ff fedc 	bl	23f6e <net_tcp_change_state>
   241b6:	e799      	b.n	240ec <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   241b8:	2107      	movs	r1, #7
   241ba:	4620      	mov	r0, r4
   241bc:	f7ff fed7 	bl	23f6e <net_tcp_change_state>
   241c0:	e7a8      	b.n	24114 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   241c2:	f06f 0015 	mvn.w	r0, #21
   241c6:	e7d0      	b.n	2416a <net_tcp_prepare_segment+0xc2>
	return 0;
   241c8:	2000      	movs	r0, #0
   241ca:	e7ce      	b.n	2416a <net_tcp_prepare_segment+0xc2>

000241cc <net_tcp_prepare_ack>:
{
   241cc:	b570      	push	{r4, r5, r6, lr}
   241ce:	b088      	sub	sp, #32
   241d0:	4604      	mov	r4, r0
   241d2:	460d      	mov	r5, r1
   241d4:	4616      	mov	r6, r2
   241d6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   241da:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   241de:	2b03      	cmp	r3, #3
   241e0:	d011      	beq.n	24206 <net_tcp_prepare_ack+0x3a>
   241e2:	d327      	bcc.n	24234 <net_tcp_prepare_ack+0x68>
   241e4:	3b06      	subs	r3, #6
   241e6:	2b01      	cmp	r3, #1
   241e8:	d824      	bhi.n	24234 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   241ea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   241ee:	3b01      	subs	r3, #1
   241f0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   241f4:	9202      	str	r2, [sp, #8]
   241f6:	9101      	str	r1, [sp, #4]
   241f8:	2200      	movs	r2, #0
   241fa:	9200      	str	r2, [sp, #0]
   241fc:	4613      	mov	r3, r2
   241fe:	2111      	movs	r1, #17
   24200:	f7ff ff52 	bl	240a8 <net_tcp_prepare_segment>
   24204:	e014      	b.n	24230 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   24206:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2420a:	3b01      	subs	r3, #1
   2420c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   24210:	f10d 0217 	add.w	r2, sp, #23
   24214:	a906      	add	r1, sp, #24
   24216:	f7ff fe54 	bl	23ec2 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2421a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2421e:	9602      	str	r6, [sp, #8]
   24220:	9501      	str	r5, [sp, #4]
   24222:	2200      	movs	r2, #0
   24224:	9200      	str	r2, [sp, #0]
   24226:	aa06      	add	r2, sp, #24
   24228:	2112      	movs	r1, #18
   2422a:	4620      	mov	r0, r4
   2422c:	f7ff ff3c 	bl	240a8 <net_tcp_prepare_segment>
}
   24230:	b008      	add	sp, #32
   24232:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   24234:	9602      	str	r6, [sp, #8]
   24236:	9501      	str	r5, [sp, #4]
   24238:	2200      	movs	r2, #0
   2423a:	9200      	str	r2, [sp, #0]
   2423c:	4613      	mov	r3, r2
   2423e:	2110      	movs	r1, #16
   24240:	4620      	mov	r0, r4
   24242:	f7ff ff31 	bl	240a8 <net_tcp_prepare_segment>
   24246:	e7f3      	b.n	24230 <net_tcp_prepare_ack+0x64>

00024248 <net_tcp_queue_data>:
{
   24248:	b570      	push	{r4, r5, r6, lr}
   2424a:	b086      	sub	sp, #24
   2424c:	4605      	mov	r5, r0
   2424e:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   24250:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   24252:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   24254:	2400      	movs	r4, #0
   24256:	e002      	b.n	2425e <net_tcp_queue_data+0x16>
		bytes += buf->len;
   24258:	899a      	ldrh	r2, [r3, #12]
   2425a:	4414      	add	r4, r2
		buf = buf->frags;
   2425c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2425e:	2b00      	cmp	r3, #0
   24260:	d1fa      	bne.n	24258 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   24262:	ab05      	add	r3, sp, #20
   24264:	9302      	str	r3, [sp, #8]
   24266:	9001      	str	r0, [sp, #4]
   24268:	2200      	movs	r2, #0
   2426a:	9200      	str	r2, [sp, #0]
   2426c:	4613      	mov	r3, r2
   2426e:	2118      	movs	r1, #24
   24270:	6e28      	ldr	r0, [r5, #96]	; 0x60
   24272:	f7ff ff19 	bl	240a8 <net_tcp_prepare_segment>
	if (ret) {
   24276:	4606      	mov	r6, r0
   24278:	bb10      	cbnz	r0, 242c0 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   2427a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   2427c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   24280:	4423      	add	r3, r4
   24282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   24286:	4a1b      	ldr	r2, [pc, #108]	; (242f4 <net_tcp_queue_data+0xac>)
   24288:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2428a:	441c      	add	r4, r3
   2428c:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   2428e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   24290:	9905      	ldr	r1, [sp, #20]
   24292:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   24296:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   24298:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   2429c:	b199      	cbz	r1, 242c6 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   2429e:	600a      	str	r2, [r1, #0]
		list->tail = node;
   242a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   242a4:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   242a6:	3058      	adds	r0, #88	; 0x58
   242a8:	f006 f942 	bl	2a530 <_timeout_remaining_get>
   242ac:	b180      	cbz	r0, 242d0 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   242ae:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   242b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   242b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   242b8:	2b0a      	cmp	r3, #10
   242ba:	d015      	beq.n	242e8 <net_tcp_queue_data+0xa0>
   242bc:	f7f9 fe02 	bl	1dec4 <net_pkt_ref>
}
   242c0:	4630      	mov	r0, r6
   242c2:	b006      	add	sp, #24
   242c4:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   242c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   242ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   242ce:	e7e9      	b.n	242a4 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   242d0:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   242d2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   242d6:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   242da:	2200      	movs	r2, #0
   242dc:	21c8      	movs	r1, #200	; 0xc8
   242de:	4099      	lsls	r1, r3
   242e0:	3058      	adds	r0, #88	; 0x58
   242e2:	f005 ffe3 	bl	2a2ac <_impl_k_timer_start>
   242e6:	e7e2      	b.n	242ae <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   242e8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   242ec:	2b02      	cmp	r3, #2
   242ee:	d1e5      	bne.n	242bc <net_tcp_queue_data+0x74>
   242f0:	e7e6      	b.n	242c0 <net_tcp_queue_data+0x78>
   242f2:	bf00      	nop
   242f4:	20002fd0 	.word	0x20002fd0

000242f8 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   242f8:	b570      	push	{r4, r5, r6, lr}
   242fa:	4606      	mov	r6, r0
   242fc:	460d      	mov	r5, r1
	__asm__ volatile(
   242fe:	f04f 0320 	mov.w	r3, #32
   24302:	f3ef 8111 	mrs	r1, BASEPRI
   24306:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2430a:	2400      	movs	r4, #0
   2430c:	e000      	b.n	24310 <net_tcp_foreach+0x18>
   2430e:	3401      	adds	r4, #1
   24310:	2c05      	cmp	r4, #5
   24312:	dc16      	bgt.n	24342 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   24314:	23c8      	movs	r3, #200	; 0xc8
   24316:	4a0c      	ldr	r2, [pc, #48]	; (24348 <net_tcp_foreach+0x50>)
   24318:	fb03 2304 	mla	r3, r3, r4, r2
   2431c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   24320:	f013 0f20 	tst.w	r3, #32
   24324:	d0f3      	beq.n	2430e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   24326:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   2432a:	4629      	mov	r1, r5
   2432c:	20c8      	movs	r0, #200	; 0xc8
   2432e:	fb00 2004 	mla	r0, r0, r4, r2
   24332:	47b0      	blx	r6
	__asm__ volatile(
   24334:	f04f 0320 	mov.w	r3, #32
   24338:	f3ef 8111 	mrs	r1, BASEPRI
   2433c:	f383 8811 	msr	BASEPRI, r3
   24340:	e7e5      	b.n	2430e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   24342:	f381 8811 	msr	BASEPRI, r1
   24346:	bd70      	pop	{r4, r5, r6, pc}
   24348:	200024c0 	.word	0x200024c0

0002434c <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   2434c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2434e:	b085      	sub	sp, #20
   24350:	4605      	mov	r5, r0
   24352:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   24354:	f7fa f8df 	bl	1e516 <net_pkt_tcp_data>
   24358:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2435a:	2214      	movs	r2, #20
   2435c:	4601      	mov	r1, r0
   2435e:	4628      	mov	r0, r5
   24360:	f7fa fc82 	bl	1ec68 <net_header_fits>
   24364:	b120      	cbz	r0, 24370 <net_tcp_get_hdr+0x24>
		return hdr;
   24366:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   24368:	b127      	cbz	r7, 24374 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   2436a:	4620      	mov	r0, r4
   2436c:	b005      	add	sp, #20
   2436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   24370:	2700      	movs	r7, #0
   24372:	e7f9      	b.n	24368 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24374:	68a8      	ldr	r0, [r5, #8]
   24376:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2437a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2437e:	9600      	str	r6, [sp, #0]
   24380:	2302      	movs	r3, #2
   24382:	f10d 020e 	add.w	r2, sp, #14
   24386:	4421      	add	r1, r4
   24388:	f7f9 ff29 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2438c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   24390:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   24392:	9300      	str	r3, [sp, #0]
   24394:	2302      	movs	r3, #2
   24396:	f10d 020e 	add.w	r2, sp, #14
   2439a:	f7f9 ff20 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   2439e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   243a2:	1d33      	adds	r3, r6, #4
   243a4:	9300      	str	r3, [sp, #0]
   243a6:	2304      	movs	r3, #4
   243a8:	f10d 020e 	add.w	r2, sp, #14
   243ac:	f7f9 ff17 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   243b0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   243b4:	f106 0308 	add.w	r3, r6, #8
   243b8:	9300      	str	r3, [sp, #0]
   243ba:	2304      	movs	r3, #4
   243bc:	f10d 020e 	add.w	r2, sp, #14
   243c0:	f7f9 ff0d 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   243c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   243c8:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   243cc:	9300      	str	r3, [sp, #0]
   243ce:	2301      	movs	r3, #1
   243d0:	f10d 020e 	add.w	r2, sp, #14
   243d4:	f7f9 ff03 	bl	1e1de <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   243d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   243dc:	f106 030d 	add.w	r3, r6, #13
   243e0:	9300      	str	r3, [sp, #0]
   243e2:	2301      	movs	r3, #1
   243e4:	f10d 020e 	add.w	r2, sp, #14
   243e8:	f7f9 fef9 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   243ec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   243f0:	f106 030e 	add.w	r3, r6, #14
   243f4:	9300      	str	r3, [sp, #0]
   243f6:	2302      	movs	r3, #2
   243f8:	f10d 020e 	add.w	r2, sp, #14
   243fc:	f7f9 feef 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   24400:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   24404:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   24408:	9300      	str	r3, [sp, #0]
   2440a:	2302      	movs	r3, #2
   2440c:	f10d 020e 	add.w	r2, sp, #14
   24410:	f7f9 fee5 	bl	1e1de <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   24414:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   24418:	f106 0312 	add.w	r3, r6, #18
   2441c:	9300      	str	r3, [sp, #0]
   2441e:	2302      	movs	r3, #2
   24420:	f10d 020e 	add.w	r2, sp, #14
   24424:	f7f9 fedb 	bl	1e1de <net_frag_read>
	if (!frag && pos == 0xffff) {
   24428:	b108      	cbz	r0, 2442e <net_tcp_get_hdr+0xe2>
	return hdr;
   2442a:	4634      	mov	r4, r6
   2442c:	e79d      	b.n	2436a <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   2442e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24432:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24436:	429a      	cmp	r2, r3
   24438:	d001      	beq.n	2443e <net_tcp_get_hdr+0xf2>
	return hdr;
   2443a:	4634      	mov	r4, r6
   2443c:	e795      	b.n	2436a <net_tcp_get_hdr+0x1e>
		return NULL;
   2443e:	463c      	mov	r4, r7
   24440:	e793      	b.n	2436a <net_tcp_get_hdr+0x1e>

00024442 <net_tcp_validate_seq>:
{
   24442:	b570      	push	{r4, r5, r6, lr}
   24444:	b086      	sub	sp, #24
   24446:	4606      	mov	r6, r0
   24448:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2444a:	a901      	add	r1, sp, #4
   2444c:	f7ff ff7e 	bl	2434c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   24450:	b1e8      	cbz	r0, 2448e <net_tcp_validate_seq+0x4c>
   24452:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   24454:	7900      	ldrb	r0, [r0, #4]
   24456:	795c      	ldrb	r4, [r3, #5]
   24458:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   2445c:	799a      	ldrb	r2, [r3, #6]
   2445e:	79dc      	ldrb	r4, [r3, #7]
   24460:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   24464:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   24468:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   2446c:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   2446e:	2b00      	cmp	r3, #0
   24470:	db0b      	blt.n	2448a <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   24472:	4630      	mov	r0, r6
   24474:	f7ff fcfc 	bl	23e70 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   24478:	4428      	add	r0, r5
   2447a:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   2447c:	2c00      	cmp	r4, #0
   2447e:	db02      	blt.n	24486 <net_tcp_validate_seq+0x44>
   24480:	2000      	movs	r0, #0
}
   24482:	b006      	add	sp, #24
   24484:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   24486:	2001      	movs	r0, #1
   24488:	e7fb      	b.n	24482 <net_tcp_validate_seq+0x40>
   2448a:	2000      	movs	r0, #0
   2448c:	e7f9      	b.n	24482 <net_tcp_validate_seq+0x40>
		return false;
   2448e:	2000      	movs	r0, #0
   24490:	e7f7      	b.n	24482 <net_tcp_validate_seq+0x40>

00024492 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   24492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24496:	b087      	sub	sp, #28
   24498:	4605      	mov	r5, r0
   2449a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2449c:	2214      	movs	r2, #20
   2449e:	f7fa fbe3 	bl	1ec68 <net_header_fits>
   244a2:	b128      	cbz	r0, 244b0 <net_tcp_set_hdr+0x1e>
		return hdr;
   244a4:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   244a6:	b12e      	cbz	r6, 244b4 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   244a8:	4620      	mov	r0, r4
   244aa:	b007      	add	sp, #28
   244ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   244b0:	2600      	movs	r6, #0
   244b2:	e7f8      	b.n	244a6 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   244b4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   244b8:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   244bc:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   244c0:	9702      	str	r7, [sp, #8]
   244c2:	9401      	str	r4, [sp, #4]
   244c4:	f04f 0802 	mov.w	r8, #2
   244c8:	f8cd 8000 	str.w	r8, [sp]
   244cc:	f10d 0316 	add.w	r3, sp, #22
   244d0:	440a      	add	r2, r1
   244d2:	68a9      	ldr	r1, [r5, #8]
   244d4:	4628      	mov	r0, r5
   244d6:	f7f9 fef4 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   244da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   244de:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   244e2:	9702      	str	r7, [sp, #8]
   244e4:	9301      	str	r3, [sp, #4]
   244e6:	f8cd 8000 	str.w	r8, [sp]
   244ea:	f10d 0316 	add.w	r3, sp, #22
   244ee:	4601      	mov	r1, r0
   244f0:	4628      	mov	r0, r5
   244f2:	f7f9 fee6 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   244f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   244fa:	1d23      	adds	r3, r4, #4
   244fc:	9702      	str	r7, [sp, #8]
   244fe:	9301      	str	r3, [sp, #4]
   24500:	f04f 0904 	mov.w	r9, #4
   24504:	f8cd 9000 	str.w	r9, [sp]
   24508:	f10d 0316 	add.w	r3, sp, #22
   2450c:	4601      	mov	r1, r0
   2450e:	4628      	mov	r0, r5
   24510:	f7f9 fed7 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   24514:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24518:	f104 0308 	add.w	r3, r4, #8
   2451c:	9702      	str	r7, [sp, #8]
   2451e:	9301      	str	r3, [sp, #4]
   24520:	f8cd 9000 	str.w	r9, [sp]
   24524:	f10d 0316 	add.w	r3, sp, #22
   24528:	4601      	mov	r1, r0
   2452a:	4628      	mov	r0, r5
   2452c:	f7f9 fec9 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   24530:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24534:	f104 030c 	add.w	r3, r4, #12
   24538:	9702      	str	r7, [sp, #8]
   2453a:	9301      	str	r3, [sp, #4]
   2453c:	f04f 0901 	mov.w	r9, #1
   24540:	f8cd 9000 	str.w	r9, [sp]
   24544:	f10d 0316 	add.w	r3, sp, #22
   24548:	4601      	mov	r1, r0
   2454a:	4628      	mov	r0, r5
   2454c:	f7f9 feb9 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   24550:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24554:	f104 030d 	add.w	r3, r4, #13
   24558:	9702      	str	r7, [sp, #8]
   2455a:	9301      	str	r3, [sp, #4]
   2455c:	f8cd 9000 	str.w	r9, [sp]
   24560:	f10d 0316 	add.w	r3, sp, #22
   24564:	4601      	mov	r1, r0
   24566:	4628      	mov	r0, r5
   24568:	f7f9 feab 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   2456c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24570:	f104 030e 	add.w	r3, r4, #14
   24574:	9702      	str	r7, [sp, #8]
   24576:	9301      	str	r3, [sp, #4]
   24578:	f8cd 8000 	str.w	r8, [sp]
   2457c:	f10d 0316 	add.w	r3, sp, #22
   24580:	4601      	mov	r1, r0
   24582:	4628      	mov	r0, r5
   24584:	f7f9 fe9d 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   24588:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   2458c:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   24590:	9702      	str	r7, [sp, #8]
   24592:	9301      	str	r3, [sp, #4]
   24594:	f8cd 8000 	str.w	r8, [sp]
   24598:	f10d 0316 	add.w	r3, sp, #22
   2459c:	4601      	mov	r1, r0
   2459e:	4628      	mov	r0, r5
   245a0:	f7f9 fe8f 	bl	1e2c2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   245a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   245a8:	f104 0312 	add.w	r3, r4, #18
   245ac:	9702      	str	r7, [sp, #8]
   245ae:	9301      	str	r3, [sp, #4]
   245b0:	f8cd 8000 	str.w	r8, [sp]
   245b4:	f10d 0316 	add.w	r3, sp, #22
   245b8:	4601      	mov	r1, r0
   245ba:	4628      	mov	r0, r5
   245bc:	f7f9 fe81 	bl	1e2c2 <net_pkt_write>
	if (!frag) {
   245c0:	2800      	cmp	r0, #0
   245c2:	f47f af71 	bne.w	244a8 <net_tcp_set_hdr+0x16>
		return NULL;
   245c6:	4634      	mov	r4, r6
   245c8:	e76e      	b.n	244a8 <net_tcp_set_hdr+0x16>

000245ca <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   245ca:	b570      	push	{r4, r5, r6, lr}
   245cc:	b084      	sub	sp, #16
   245ce:	4605      	mov	r5, r0
   245d0:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   245d2:	f7f9 ffa0 	bl	1e516 <net_pkt_tcp_data>
   245d6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   245d8:	2214      	movs	r2, #20
   245da:	4601      	mov	r1, r0
   245dc:	4628      	mov	r0, r5
   245de:	f7fa fb43 	bl	1ec68 <net_header_fits>
   245e2:	b120      	cbz	r0, 245ee <net_tcp_get_chksum+0x24>
		return hdr;
   245e4:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   245e6:	b123      	cbz	r3, 245f2 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   245e8:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   245ea:	b004      	add	sp, #16
   245ec:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   245ee:	2300      	movs	r3, #0
   245f0:	e7f9      	b.n	245e6 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   245f2:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   245f6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   245fa:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   245fc:	3110      	adds	r1, #16
   245fe:	f10d 030e 	add.w	r3, sp, #14
   24602:	9300      	str	r3, [sp, #0]
   24604:	2302      	movs	r3, #2
   24606:	aa03      	add	r2, sp, #12
   24608:	b289      	uxth	r1, r1
   2460a:	4630      	mov	r0, r6
   2460c:	f7f9 fde7 	bl	1e1de <net_frag_read>
	return chksum;
   24610:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   24614:	e7e9      	b.n	245ea <net_tcp_get_chksum+0x20>

00024616 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   24616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2461a:	b086      	sub	sp, #24
   2461c:	4606      	mov	r6, r0
   2461e:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   24620:	2300      	movs	r3, #0
   24622:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   24626:	f7f9 ff76 	bl	1e516 <net_pkt_tcp_data>
   2462a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2462c:	2214      	movs	r2, #20
   2462e:	4601      	mov	r1, r0
   24630:	4630      	mov	r0, r6
   24632:	f7fa fb19 	bl	1ec68 <net_header_fits>
   24636:	b170      	cbz	r0, 24656 <net_tcp_set_chksum+0x40>
		return hdr;
   24638:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   2463a:	b173      	cbz	r3, 2465a <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   2463c:	2300      	movs	r3, #0
   2463e:	7423      	strb	r3, [r4, #16]
   24640:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   24642:	2106      	movs	r1, #6
   24644:	4630      	mov	r0, r6
   24646:	f7fa fab6 	bl	1ebb6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   2464a:	43c0      	mvns	r0, r0
   2464c:	8220      	strh	r0, [r4, #16]

		return frag;
   2464e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   24650:	b006      	add	sp, #24
   24652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   24656:	2300      	movs	r3, #0
   24658:	e7ef      	b.n	2463a <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2465a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2465e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   24662:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   24664:	3210      	adds	r2, #16
   24666:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   2466a:	f8cd 8008 	str.w	r8, [sp, #8]
   2466e:	f10d 0416 	add.w	r4, sp, #22
   24672:	9401      	str	r4, [sp, #4]
   24674:	2702      	movs	r7, #2
   24676:	9700      	str	r7, [sp, #0]
   24678:	ab05      	add	r3, sp, #20
   2467a:	b292      	uxth	r2, r2
   2467c:	4629      	mov	r1, r5
   2467e:	4630      	mov	r0, r6
   24680:	f7f9 fe1f 	bl	1e2c2 <net_pkt_write>
   24684:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   24686:	2106      	movs	r1, #6
   24688:	4630      	mov	r0, r6
   2468a:	f7fa fa94 	bl	1ebb6 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   2468e:	43c0      	mvns	r0, r0
   24690:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   24694:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   24698:	3a02      	subs	r2, #2
   2469a:	f8cd 8008 	str.w	r8, [sp, #8]
   2469e:	9401      	str	r4, [sp, #4]
   246a0:	9700      	str	r7, [sp, #0]
   246a2:	ab05      	add	r3, sp, #20
   246a4:	b292      	uxth	r2, r2
   246a6:	4629      	mov	r1, r5
   246a8:	4630      	mov	r0, r6
   246aa:	f7f9 fe0a 	bl	1e2c2 <net_pkt_write>
	return frag;
   246ae:	e7cf      	b.n	24650 <net_tcp_set_chksum+0x3a>

000246b0 <net_tcp_send_pkt>:
{
   246b0:	b570      	push	{r4, r5, r6, lr}
   246b2:	b086      	sub	sp, #24
   246b4:	4605      	mov	r5, r0
	return pkt->context;
   246b6:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   246b8:	a901      	add	r1, sp, #4
   246ba:	f7ff fe47 	bl	2434c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   246be:	2800      	cmp	r0, #0
   246c0:	f000 8086 	beq.w	247d0 <net_tcp_send_pkt+0x120>
   246c4:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   246c6:	7a02      	ldrb	r2, [r0, #8]
   246c8:	7a43      	ldrb	r3, [r0, #9]
   246ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   246ce:	7a81      	ldrb	r1, [r0, #10]
   246d0:	7ac3      	ldrb	r3, [r0, #11]
   246d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   246d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   246da:	6e32      	ldr	r2, [r6, #96]	; 0x60
   246dc:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   246e0:	429a      	cmp	r2, r3
   246e2:	d039      	beq.n	24758 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   246e4:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   246e6:	0a19      	lsrs	r1, r3, #8
   246e8:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   246ea:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   246ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
   246f0:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   246f2:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   246f4:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   246f6:	6e33      	ldr	r3, [r6, #96]	; 0x60
   246f8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   246fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   24700:	4299      	cmp	r1, r3
   24702:	d007      	beq.n	24714 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   24704:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   24706:	f013 0f10 	tst.w	r3, #16
   2470a:	d103      	bne.n	24714 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   2470c:	f043 0310 	orr.w	r3, r3, #16
   24710:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   24712:	2201      	movs	r2, #1
	if (calc_chksum) {
   24714:	bb12      	cbnz	r2, 2475c <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   24716:	7b63      	ldrb	r3, [r4, #13]
   24718:	f013 0f01 	tst.w	r3, #1
   2471c:	d006      	beq.n	2472c <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   2471e:	6e32      	ldr	r2, [r6, #96]	; 0x60
   24720:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   24724:	f043 0302 	orr.w	r3, r3, #2
   24728:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   2472c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2472e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   24732:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   24736:	4621      	mov	r1, r4
   24738:	4628      	mov	r0, r5
   2473a:	f7ff feaa 	bl	24492 <net_tcp_set_hdr>
	return pkt->family;
   2473e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   24742:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   24746:	2b0a      	cmp	r3, #10
   24748:	d00d      	beq.n	24766 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   2474a:	4628      	mov	r0, r5
   2474c:	f7f6 ffc8 	bl	1b6e0 <net_send_data>
   24750:	4604      	mov	r4, r0
}
   24752:	4620      	mov	r0, r4
   24754:	b006      	add	sp, #24
   24756:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   24758:	2200      	movs	r2, #0
   2475a:	e7cc      	b.n	246f6 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   2475c:	68a9      	ldr	r1, [r5, #8]
   2475e:	4628      	mov	r0, r5
   24760:	f7ff ff59 	bl	24616 <net_tcp_set_chksum>
   24764:	e7d7      	b.n	24716 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   24766:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   2476a:	2b02      	cmp	r3, #2
   2476c:	d1ed      	bne.n	2474a <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2476e:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   24770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   24774:	b10b      	cbz	r3, 2477a <net_tcp_send_pkt+0xca>
   24776:	3b34      	subs	r3, #52	; 0x34
   24778:	e006      	b.n	24788 <net_tcp_send_pkt+0xd8>
   2477a:	2300      	movs	r3, #0
   2477c:	e004      	b.n	24788 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2477e:	4611      	mov	r1, r2
   24780:	e009      	b.n	24796 <net_tcp_send_pkt+0xe6>
	return node->next;
   24782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   24784:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   24788:	b163      	cbz	r3, 247a4 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   2478a:	42ab      	cmp	r3, r5
   2478c:	d009      	beq.n	247a2 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2478e:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   24792:	d0f4      	beq.n	2477e <net_tcp_send_pkt+0xce>
	return node->next;
   24794:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   24796:	b111      	cbz	r1, 2479e <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24798:	2a00      	cmp	r2, #0
   2479a:	d1f2      	bne.n	24782 <net_tcp_send_pkt+0xd2>
   2479c:	e7f2      	b.n	24784 <net_tcp_send_pkt+0xd4>
   2479e:	2300      	movs	r3, #0
   247a0:	e7f2      	b.n	24788 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   247a2:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   247a4:	2b00      	cmp	r3, #0
   247a6:	d0d0      	beq.n	2474a <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   247a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   247ac:	4628      	mov	r0, r5
   247ae:	f7f9 fec7 	bl	1e540 <net_pkt_clone>
			if (!new_pkt) {
   247b2:	4605      	mov	r5, r0
   247b4:	b178      	cbz	r0, 247d6 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   247b6:	f7f6 ff93 	bl	1b6e0 <net_send_data>
			if (ret < 0) {
   247ba:	1e04      	subs	r4, r0, #0
   247bc:	db04      	blt.n	247c8 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   247be:	4a07      	ldr	r2, [pc, #28]	; (247dc <net_tcp_send_pkt+0x12c>)
   247c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   247c2:	3301      	adds	r3, #1
   247c4:	6713      	str	r3, [r2, #112]	; 0x70
   247c6:	e7c4      	b.n	24752 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   247c8:	4628      	mov	r0, r5
   247ca:	f7f9 fb8a 	bl	1dee2 <net_pkt_unref>
   247ce:	e7c0      	b.n	24752 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   247d0:	f06f 0479 	mvn.w	r4, #121	; 0x79
   247d4:	e7bd      	b.n	24752 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   247d6:	f06f 040b 	mvn.w	r4, #11
   247da:	e7ba      	b.n	24752 <net_tcp_send_pkt+0xa2>
   247dc:	20002fd0 	.word	0x20002fd0

000247e0 <tcp_retry_expired>:
	return (!list->head);
   247e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   247e2:	2b00      	cmp	r3, #0
   247e4:	d05c      	beq.n	248a0 <tcp_retry_expired+0xc0>
{
   247e6:	b510      	push	{r4, lr}
   247e8:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   247ec:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   247ee:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   247f2:	f002 031f 	and.w	r3, r2, #31
   247f6:	3301      	adds	r3, #1
   247f8:	f003 031f 	and.w	r3, r3, #31
   247fc:	f363 0204 	bfi	r2, r3, #0, #5
   24800:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   24804:	2b09      	cmp	r3, #9
   24806:	dc2f      	bgt.n	24868 <tcp_retry_expired+0x88>
   24808:	2200      	movs	r2, #0
   2480a:	21c8      	movs	r1, #200	; 0xc8
   2480c:	4099      	lsls	r1, r3
   2480e:	f005 fd4d 	bl	2a2ac <_impl_k_timer_start>
	return list->head;
   24812:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   24814:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   24818:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   2481a:	f012 0f01 	tst.w	r2, #1
   2481e:	d00d      	beq.n	2483c <tcp_retry_expired+0x5c>
	return pkt->family;
   24820:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   24824:	2a0a      	cmp	r2, #10
   24826:	d023      	beq.n	24870 <tcp_retry_expired+0x90>
   24828:	4620      	mov	r0, r4
   2482a:	f7f9 fb4b 	bl	1dec4 <net_pkt_ref>
   2482e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   24830:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24834:	f36f 0300 	bfc	r3, #0, #1
   24838:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   2483c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24840:	f043 0302 	orr.w	r3, r3, #2
   24844:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   24848:	4620      	mov	r0, r4
   2484a:	f7ff ff31 	bl	246b0 <net_tcp_send_pkt>
   2484e:	2800      	cmp	r0, #0
   24850:	db13      	blt.n	2487a <tcp_retry_expired+0x9a>
	return pkt->family;
   24852:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24856:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2485a:	2b0a      	cmp	r3, #10
   2485c:	d01b      	beq.n	24896 <tcp_retry_expired+0xb6>
   2485e:	4a11      	ldr	r2, [pc, #68]	; (248a4 <tcp_retry_expired+0xc4>)
   24860:	6f13      	ldr	r3, [r2, #112]	; 0x70
   24862:	3301      	adds	r3, #1
   24864:	6713      	str	r3, [r2, #112]	; 0x70
   24866:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   24868:	4608      	mov	r0, r1
   2486a:	f7ff f99a 	bl	23ba2 <abort_connection>
			return;
   2486e:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   24870:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   24874:	2b02      	cmp	r3, #2
   24876:	d1d7      	bne.n	24828 <tcp_retry_expired+0x48>
   24878:	e7da      	b.n	24830 <tcp_retry_expired+0x50>
   2487a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2487e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   24882:	2b0a      	cmp	r3, #10
   24884:	d103      	bne.n	2488e <tcp_retry_expired+0xae>
   24886:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2488a:	2b02      	cmp	r3, #2
   2488c:	d0e1      	beq.n	24852 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   2488e:	4620      	mov	r0, r4
   24890:	f7f9 fb27 	bl	1dee2 <net_pkt_unref>
   24894:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   24896:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2489a:	2b02      	cmp	r3, #2
   2489c:	d1df      	bne.n	2485e <tcp_retry_expired+0x7e>
   2489e:	e7e2      	b.n	24866 <tcp_retry_expired+0x86>
   248a0:	4770      	bx	lr
   248a2:	bf00      	nop
   248a4:	20002fd0 	.word	0x20002fd0

000248a8 <net_tcp_send_data>:
{
   248a8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   248aa:	6e03      	ldr	r3, [r0, #96]	; 0x60
   248ac:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   248b0:	b10c      	cbz	r4, 248b6 <net_tcp_send_data+0xe>
   248b2:	3c34      	subs	r4, #52	; 0x34
   248b4:	e013      	b.n	248de <net_tcp_send_data+0x36>
   248b6:	2400      	movs	r4, #0
   248b8:	e011      	b.n	248de <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   248ba:	4620      	mov	r0, r4
   248bc:	f7f9 fb11 	bl	1dee2 <net_pkt_unref>
	pkt->pkt_queued = send;
   248c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   248c4:	f043 0302 	orr.w	r3, r3, #2
   248c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   248cc:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   248d0:	d01e      	beq.n	24910 <net_tcp_send_data+0x68>
	return node->next;
   248d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   248d4:	b1f2      	cbz	r2, 24914 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   248d6:	b103      	cbz	r3, 248da <net_tcp_send_data+0x32>
	return node->next;
   248d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   248da:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   248de:	b1dc      	cbz	r4, 24918 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   248e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   248e4:	f013 0f02 	tst.w	r3, #2
   248e8:	d1f0      	bne.n	248cc <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   248ea:	f013 0f01 	tst.w	r3, #1
   248ee:	d1ed      	bne.n	248cc <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   248f0:	4620      	mov	r0, r4
   248f2:	f7ff fedd 	bl	246b0 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   248f6:	2800      	cmp	r0, #0
   248f8:	dae2      	bge.n	248c0 <net_tcp_send_data+0x18>
	return pkt->family;
   248fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   248fe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   24902:	2b0a      	cmp	r3, #10
   24904:	d1d9      	bne.n	248ba <net_tcp_send_data+0x12>
   24906:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2490a:	2b02      	cmp	r3, #2
   2490c:	d1d5      	bne.n	248ba <net_tcp_send_data+0x12>
   2490e:	e7d7      	b.n	248c0 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24910:	461a      	mov	r2, r3
   24912:	e7df      	b.n	248d4 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24914:	2400      	movs	r4, #0
   24916:	e7e2      	b.n	248de <net_tcp_send_data+0x36>
}
   24918:	2000      	movs	r0, #0
   2491a:	bd10      	pop	{r4, pc}

0002491c <net_tcp_ack_received>:
{
   2491c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24920:	b087      	sub	sp, #28
   24922:	4681      	mov	r9, r0
   24924:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   24926:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   24928:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2492c:	b10b      	cbz	r3, 24932 <net_tcp_ack_received+0x16>
		valid_ack = true;
   2492e:	2700      	movs	r7, #0
   24930:	e033      	b.n	2499a <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   24932:	4a51      	ldr	r2, [pc, #324]	; (24a78 <net_tcp_ack_received+0x15c>)
   24934:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24936:	3301      	adds	r3, #1
   24938:	6653      	str	r3, [r2, #100]	; 0x64
   2493a:	e7f8      	b.n	2492e <net_tcp_ack_received+0x12>
		list->head = node->next;
   2493c:	6823      	ldr	r3, [r4, #0]
   2493e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   24942:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   24946:	42a2      	cmp	r2, r4
   24948:	d005      	beq.n	24956 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   2494a:	2300      	movs	r3, #0
   2494c:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   2494e:	4630      	mov	r0, r6
   24950:	f7f9 fac7 	bl	1dee2 <net_pkt_unref>
   24954:	e021      	b.n	2499a <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   24956:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2495a:	e7f6      	b.n	2494a <net_tcp_ack_received+0x2e>
   2495c:	4a46      	ldr	r2, [pc, #280]	; (24a78 <net_tcp_ack_received+0x15c>)
   2495e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24960:	3301      	adds	r3, #1
   24962:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   24964:	b12f      	cbz	r7, 24972 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   24966:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2496a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2496e:	2b04      	cmp	r3, #4
   24970:	d046      	beq.n	24a00 <net_tcp_ack_received+0xe4>
}
   24972:	b007      	add	sp, #28
   24974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   24978:	2108      	movs	r1, #8
   2497a:	4628      	mov	r0, r5
   2497c:	f7ff faf7 	bl	23f6e <net_tcp_change_state>
		list->head = node->next;
   24980:	6823      	ldr	r3, [r4, #0]
   24982:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   24986:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2498a:	42a2      	cmp	r2, r4
   2498c:	d035      	beq.n	249fa <net_tcp_ack_received+0xde>
	node->next = NULL;
   2498e:	2300      	movs	r3, #0
   24990:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   24992:	4630      	mov	r0, r6
   24994:	f7f9 faa5 	bl	1dee2 <net_pkt_unref>
		valid_ack = true;
   24998:	2701      	movs	r7, #1
	return (!list->head);
   2499a:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   2499e:	2c00      	cmp	r4, #0
   249a0:	d0e0      	beq.n	24964 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   249a2:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   249a6:	a901      	add	r1, sp, #4
   249a8:	4630      	mov	r0, r6
   249aa:	f7ff fccf 	bl	2434c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   249ae:	4602      	mov	r2, r0
   249b0:	2800      	cmp	r0, #0
   249b2:	d0c3      	beq.n	2493c <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   249b4:	7903      	ldrb	r3, [r0, #4]
   249b6:	7941      	ldrb	r1, [r0, #5]
   249b8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   249bc:	7980      	ldrb	r0, [r0, #6]
   249be:	79d3      	ldrb	r3, [r2, #7]
   249c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   249c4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   249c8:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   249cc:	440b      	add	r3, r1
   249ce:	3b01      	subs	r3, #1
   249d0:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   249d4:	2b00      	cmp	r3, #0
   249d6:	ddc1      	ble.n	2495c <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   249d8:	7b53      	ldrb	r3, [r2, #13]
   249da:	f013 0f01 	tst.w	r3, #1
   249de:	d0cf      	beq.n	24980 <net_tcp_ack_received+0x64>
   249e0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   249e4:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   249e8:	2b07      	cmp	r3, #7
   249ea:	d0c5      	beq.n	24978 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   249ec:	2b0a      	cmp	r3, #10
   249ee:	d1c7      	bne.n	24980 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   249f0:	2109      	movs	r1, #9
   249f2:	4628      	mov	r0, r5
   249f4:	f7ff fabb 	bl	23f6e <net_tcp_change_state>
   249f8:	e7c2      	b.n	24980 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   249fa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   249fe:	e7c6      	b.n	2498e <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   24a00:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   24a04:	f7ff f8db 	bl	23bbe <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   24a08:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   24a0c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   24a10:	f412 7f00 	tst.w	r2, #512	; 0x200
   24a14:	d0ad      	beq.n	24972 <net_tcp_ack_received+0x56>
	return list->head;
   24a16:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24a1a:	b108      	cbz	r0, 24a20 <net_tcp_ack_received+0x104>
   24a1c:	3834      	subs	r0, #52	; 0x34
   24a1e:	e013      	b.n	24a48 <net_tcp_ack_received+0x12c>
   24a20:	2000      	movs	r0, #0
   24a22:	e011      	b.n	24a48 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   24a24:	f7f9 fa4e 	bl	1dec4 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   24a28:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   24a2c:	f36f 0300 	bfc	r3, #0, #1
   24a30:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24a34:	b140      	cbz	r0, 24a48 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24a36:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   24a3a:	d014      	beq.n	24a66 <net_tcp_ack_received+0x14a>
	return node->next;
   24a3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   24a3e:	b1a2      	cbz	r2, 24a6a <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24a40:	b103      	cbz	r3, 24a44 <net_tcp_ack_received+0x128>
	return node->next;
   24a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24a44:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   24a48:	b188      	cbz	r0, 24a6e <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   24a4a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   24a4e:	f013 0f01 	tst.w	r3, #1
   24a52:	d0ef      	beq.n	24a34 <net_tcp_ack_received+0x118>
	return pkt->family;
   24a54:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   24a58:	2b0a      	cmp	r3, #10
   24a5a:	d1e3      	bne.n	24a24 <net_tcp_ack_received+0x108>
   24a5c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   24a60:	2b02      	cmp	r3, #2
   24a62:	d1df      	bne.n	24a24 <net_tcp_ack_received+0x108>
   24a64:	e7e0      	b.n	24a28 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24a66:	461a      	mov	r2, r3
   24a68:	e7e9      	b.n	24a3e <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24a6a:	2000      	movs	r0, #0
   24a6c:	e7ec      	b.n	24a48 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   24a6e:	4648      	mov	r0, r9
   24a70:	f7ff ff1a 	bl	248a8 <net_tcp_send_data>
}
   24a74:	e77d      	b.n	24972 <net_tcp_ack_received+0x56>
   24a76:	bf00      	nop
   24a78:	20002fd0 	.word	0x20002fd0

00024a7c <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   24a7c:	6842      	ldr	r2, [r0, #4]
   24a7e:	4b08      	ldr	r3, [pc, #32]	; (24aa0 <iface2str+0x24>)
   24a80:	429a      	cmp	r2, r3
   24a82:	d004      	beq.n	24a8e <iface2str+0x12>
	if (extra) {
   24a84:	b151      	cbz	r1, 24a9c <iface2str+0x20>
		*extra = "==============";
   24a86:	4b07      	ldr	r3, [pc, #28]	; (24aa4 <iface2str+0x28>)
   24a88:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   24a8a:	4807      	ldr	r0, [pc, #28]	; (24aa8 <iface2str+0x2c>)
   24a8c:	4770      	bx	lr
		if (extra) {
   24a8e:	b119      	cbz	r1, 24a98 <iface2str+0x1c>
			*extra = "=========";
   24a90:	4b06      	ldr	r3, [pc, #24]	; (24aac <iface2str+0x30>)
   24a92:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   24a94:	4806      	ldr	r0, [pc, #24]	; (24ab0 <iface2str+0x34>)
   24a96:	4770      	bx	lr
   24a98:	4805      	ldr	r0, [pc, #20]	; (24ab0 <iface2str+0x34>)
   24a9a:	4770      	bx	lr
	return "<unknown type>";
   24a9c:	4802      	ldr	r0, [pc, #8]	; (24aa8 <iface2str+0x2c>)
}
   24a9e:	4770      	bx	lr
   24aa0:	0002ed9c 	.word	0x0002ed9c
   24aa4:	00031fdc 	.word	0x00031fdc
   24aa8:	00031fc0 	.word	0x00031fc0
   24aac:	00031fd0 	.word	0x00031fd0
   24ab0:	00031fb4 	.word	0x00031fb4

00024ab4 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   24ab4:	2300      	movs	r3, #0
   24ab6:	2b05      	cmp	r3, #5
   24ab8:	dc18      	bgt.n	24aec <slab_pool_found_already+0x38>
{
   24aba:	b410      	push	{r4}
   24abc:	e008      	b.n	24ad0 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   24abe:	f103 0408 	add.w	r4, r3, #8
   24ac2:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24ac6:	4294      	cmp	r4, r2
   24ac8:	d00e      	beq.n	24ae8 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   24aca:	3301      	adds	r3, #1
   24acc:	2b05      	cmp	r3, #5
   24ace:	dc08      	bgt.n	24ae2 <slab_pool_found_already+0x2e>
		if (slab) {
   24ad0:	2900      	cmp	r1, #0
   24ad2:	d0f4      	beq.n	24abe <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   24ad4:	1c9c      	adds	r4, r3, #2
   24ad6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24ada:	42a1      	cmp	r1, r4
   24adc:	d1f5      	bne.n	24aca <slab_pool_found_already+0x16>
				return true;
   24ade:	2001      	movs	r0, #1
   24ae0:	e000      	b.n	24ae4 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   24ae2:	2000      	movs	r0, #0
}
   24ae4:	bc10      	pop	{r4}
   24ae6:	4770      	bx	lr
				return true;
   24ae8:	2001      	movs	r0, #1
   24aea:	e7fb      	b.n	24ae4 <slab_pool_found_already+0x30>
	return false;
   24aec:	2000      	movs	r0, #0
}
   24aee:	4770      	bx	lr

00024af0 <net_shell_cmd_allocs>:
{
   24af0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   24af2:	4802      	ldr	r0, [pc, #8]	; (24afc <net_shell_cmd_allocs+0xc>)
   24af4:	f7de fab8 	bl	3068 <printk>
}
   24af8:	2000      	movs	r0, #0
   24afa:	bd08      	pop	{r3, pc}
   24afc:	000322b8 	.word	0x000322b8

00024b00 <net_shell_cmd_app>:
{
   24b00:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   24b02:	4802      	ldr	r0, [pc, #8]	; (24b0c <net_shell_cmd_app+0xc>)
   24b04:	f7de fab0 	bl	3068 <printk>
}
   24b08:	2000      	movs	r0, #0
   24b0a:	bd08      	pop	{r3, pc}
   24b0c:	000322f0 	.word	0x000322f0

00024b10 <net_shell_cmd_arp>:
{
   24b10:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   24b12:	4802      	ldr	r0, [pc, #8]	; (24b1c <net_shell_cmd_arp+0xc>)
   24b14:	f7de faa8 	bl	3068 <printk>
}
   24b18:	2000      	movs	r0, #0
   24b1a:	bd08      	pop	{r3, pc}
   24b1c:	00032374 	.word	0x00032374

00024b20 <net_shell_cmd_dns>:
{
   24b20:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   24b22:	4802      	ldr	r0, [pc, #8]	; (24b2c <net_shell_cmd_dns+0xc>)
   24b24:	f7de faa0 	bl	3068 <printk>
}
   24b28:	2000      	movs	r0, #0
   24b2a:	bd08      	pop	{r3, pc}
   24b2c:	00032474 	.word	0x00032474

00024b30 <net_shell_cmd_http>:
{
   24b30:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   24b32:	4802      	ldr	r0, [pc, #8]	; (24b3c <net_shell_cmd_http+0xc>)
   24b34:	f7de fa98 	bl	3068 <printk>
}
   24b38:	2000      	movs	r0, #0
   24b3a:	bd08      	pop	{r3, pc}
   24b3c:	00032494 	.word	0x00032494

00024b40 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   24b40:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   24b44:	f013 0f01 	tst.w	r3, #1
   24b48:	d032      	beq.n	24bb0 <context_info+0x70>
{
   24b4a:	b570      	push	{r4, r5, r6, lr}
   24b4c:	460d      	mov	r5, r1
   24b4e:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   24b50:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   24b52:	b19b      	cbz	r3, 24b7c <context_info+0x3c>
		slab = context->tx_slab();
   24b54:	4798      	blx	r3
   24b56:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   24b58:	2200      	movs	r2, #0
   24b5a:	4601      	mov	r1, r0
   24b5c:	4628      	mov	r0, r5
   24b5e:	f7ff ffa9 	bl	24ab4 <slab_pool_found_already>
   24b62:	b100      	cbz	r0, 24b66 <context_info+0x26>
   24b64:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   24b66:	68b2      	ldr	r2, [r6, #8]
   24b68:	4631      	mov	r1, r6
   24b6a:	4812      	ldr	r0, [pc, #72]	; (24bb4 <context_info+0x74>)
   24b6c:	f7de fa7c 	bl	3068 <printk>
#endif
		info->are_external_pools = true;
   24b70:	2301      	movs	r3, #1
   24b72:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   24b74:	682b      	ldr	r3, [r5, #0]
   24b76:	3302      	adds	r3, #2
   24b78:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   24b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24b7e:	b19b      	cbz	r3, 24ba8 <context_info+0x68>
		pool = context->data_pool();
   24b80:	4798      	blx	r3
   24b82:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   24b84:	4602      	mov	r2, r0
   24b86:	2100      	movs	r1, #0
   24b88:	4628      	mov	r0, r5
   24b8a:	f7ff ff93 	bl	24ab4 <slab_pool_found_already>
   24b8e:	2800      	cmp	r0, #0
   24b90:	d1e8      	bne.n	24b64 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   24b92:	8a22      	ldrh	r2, [r4, #16]
   24b94:	4621      	mov	r1, r4
   24b96:	4808      	ldr	r0, [pc, #32]	; (24bb8 <context_info+0x78>)
   24b98:	f7de fa66 	bl	3068 <printk>
#endif
		info->are_external_pools = true;
   24b9c:	2301      	movs	r3, #1
   24b9e:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   24ba0:	682b      	ldr	r3, [r5, #0]
   24ba2:	3308      	adds	r3, #8
   24ba4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   24ba8:	682b      	ldr	r3, [r5, #0]
   24baa:	3301      	adds	r3, #1
   24bac:	602b      	str	r3, [r5, #0]
   24bae:	e7d9      	b.n	24b64 <context_info+0x24>
   24bb0:	4770      	bx	lr
   24bb2:	bf00      	nop
   24bb4:	00031f78 	.word	0x00031f78
   24bb8:	00031f84 	.word	0x00031f84

00024bbc <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   24bbc:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   24bbe:	4802      	ldr	r0, [pc, #8]	; (24bc8 <net_shell_cmd_rpl+0xc>)
   24bc0:	f7de fa52 	bl	3068 <printk>
#endif

	return 0;
}
   24bc4:	2000      	movs	r0, #0
   24bc6:	bd08      	pop	{r3, pc}
   24bc8:	000326a4 	.word	0x000326a4

00024bcc <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   24bcc:	b530      	push	{r4, r5, lr}
   24bce:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24bd0:	4d3f      	ldr	r5, [pc, #252]	; (24cd0 <net_shell_cmd_stacks+0x104>)
   24bd2:	e011      	b.n	24bf8 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   24bd4:	1a81      	subs	r1, r0, r2
   24bd6:	2364      	movs	r3, #100	; 0x64
   24bd8:	fb03 f301 	mul.w	r3, r3, r1
   24bdc:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   24be0:	9304      	str	r3, [sp, #16]
   24be2:	9003      	str	r0, [sp, #12]
   24be4:	9102      	str	r1, [sp, #8]
   24be6:	9201      	str	r2, [sp, #4]
   24be8:	9000      	str	r0, [sp, #0]
   24bea:	68eb      	ldr	r3, [r5, #12]
   24bec:	68aa      	ldr	r2, [r5, #8]
   24bee:	6869      	ldr	r1, [r5, #4]
   24bf0:	4838      	ldr	r0, [pc, #224]	; (24cd4 <net_shell_cmd_stacks+0x108>)
   24bf2:	f7de fa39 	bl	3068 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24bf6:	3514      	adds	r5, #20
   24bf8:	4b37      	ldr	r3, [pc, #220]	; (24cd8 <net_shell_cmd_stacks+0x10c>)
   24bfa:	429d      	cmp	r5, r3
   24bfc:	d00b      	beq.n	24c16 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   24bfe:	682c      	ldr	r4, [r5, #0]
   24c00:	6928      	ldr	r0, [r5, #16]
   24c02:	2300      	movs	r3, #0
	size_t unused = 0;
   24c04:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24c06:	4298      	cmp	r0, r3
   24c08:	d9e4      	bls.n	24bd4 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   24c0a:	5ce1      	ldrb	r1, [r4, r3]
   24c0c:	29aa      	cmp	r1, #170	; 0xaa
   24c0e:	d1e1      	bne.n	24bd4 <net_shell_cmd_stacks+0x8>
			unused++;
   24c10:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24c12:	3301      	adds	r3, #1
   24c14:	e7f7      	b.n	24c06 <net_shell_cmd_stacks+0x3a>
   24c16:	2300      	movs	r3, #0
   24c18:	461a      	mov	r2, r3
   24c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24c1e:	d206      	bcs.n	24c2e <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   24c20:	492e      	ldr	r1, [pc, #184]	; (24cdc <net_shell_cmd_stacks+0x110>)
   24c22:	5cc9      	ldrb	r1, [r1, r3]
   24c24:	29aa      	cmp	r1, #170	; 0xaa
   24c26:	d102      	bne.n	24c2e <net_shell_cmd_stacks+0x62>
			unused++;
   24c28:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24c2a:	3301      	adds	r3, #1
   24c2c:	e7f5      	b.n	24c1a <net_shell_cmd_stacks+0x4e>
   24c2e:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   24c32:	2364      	movs	r3, #100	; 0x64
   24c34:	fb03 f301 	mul.w	r3, r3, r1
   24c38:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24c3a:	9304      	str	r3, [sp, #16]
   24c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24c40:	9303      	str	r3, [sp, #12]
   24c42:	9102      	str	r1, [sp, #8]
   24c44:	9201      	str	r2, [sp, #4]
   24c46:	9300      	str	r3, [sp, #0]
   24c48:	4a25      	ldr	r2, [pc, #148]	; (24ce0 <net_shell_cmd_stacks+0x114>)
   24c4a:	4926      	ldr	r1, [pc, #152]	; (24ce4 <net_shell_cmd_stacks+0x118>)
   24c4c:	4826      	ldr	r0, [pc, #152]	; (24ce8 <net_shell_cmd_stacks+0x11c>)
   24c4e:	f7de fa0b 	bl	3068 <printk>
   24c52:	2300      	movs	r3, #0
	size_t unused = 0;
   24c54:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24c5a:	d206      	bcs.n	24c6a <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   24c5c:	4923      	ldr	r1, [pc, #140]	; (24cec <net_shell_cmd_stacks+0x120>)
   24c5e:	5cc9      	ldrb	r1, [r1, r3]
   24c60:	29aa      	cmp	r1, #170	; 0xaa
   24c62:	d102      	bne.n	24c6a <net_shell_cmd_stacks+0x9e>
			unused++;
   24c64:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24c66:	3301      	adds	r3, #1
   24c68:	e7f5      	b.n	24c56 <net_shell_cmd_stacks+0x8a>
   24c6a:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   24c6e:	2364      	movs	r3, #100	; 0x64
   24c70:	fb03 f301 	mul.w	r3, r3, r1
   24c74:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24c76:	9304      	str	r3, [sp, #16]
   24c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24c7c:	9303      	str	r3, [sp, #12]
   24c7e:	9102      	str	r1, [sp, #8]
   24c80:	9201      	str	r2, [sp, #4]
   24c82:	9300      	str	r3, [sp, #0]
   24c84:	4a1a      	ldr	r2, [pc, #104]	; (24cf0 <net_shell_cmd_stacks+0x124>)
   24c86:	491b      	ldr	r1, [pc, #108]	; (24cf4 <net_shell_cmd_stacks+0x128>)
   24c88:	4817      	ldr	r0, [pc, #92]	; (24ce8 <net_shell_cmd_stacks+0x11c>)
   24c8a:	f7de f9ed 	bl	3068 <printk>
   24c8e:	2300      	movs	r3, #0
	size_t unused = 0;
   24c90:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24c96:	d206      	bcs.n	24ca6 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   24c98:	4917      	ldr	r1, [pc, #92]	; (24cf8 <net_shell_cmd_stacks+0x12c>)
   24c9a:	5cc9      	ldrb	r1, [r1, r3]
   24c9c:	29aa      	cmp	r1, #170	; 0xaa
   24c9e:	d102      	bne.n	24ca6 <net_shell_cmd_stacks+0xda>
			unused++;
   24ca0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24ca2:	3301      	adds	r3, #1
   24ca4:	e7f5      	b.n	24c92 <net_shell_cmd_stacks+0xc6>
   24ca6:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   24caa:	2364      	movs	r3, #100	; 0x64
   24cac:	fb03 f301 	mul.w	r3, r3, r1
   24cb0:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24cb2:	9304      	str	r3, [sp, #16]
   24cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24cb8:	9303      	str	r3, [sp, #12]
   24cba:	9102      	str	r1, [sp, #8]
   24cbc:	9201      	str	r2, [sp, #4]
   24cbe:	9300      	str	r3, [sp, #0]
   24cc0:	4a0e      	ldr	r2, [pc, #56]	; (24cfc <net_shell_cmd_stacks+0x130>)
   24cc2:	490f      	ldr	r1, [pc, #60]	; (24d00 <net_shell_cmd_stacks+0x134>)
   24cc4:	4808      	ldr	r0, [pc, #32]	; (24ce8 <net_shell_cmd_stacks+0x11c>)
   24cc6:	f7de f9cf 	bl	3068 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   24cca:	2000      	movs	r0, #0
   24ccc:	b007      	add	sp, #28
   24cce:	bd30      	pop	{r4, r5, pc}
   24cd0:	2000da14 	.word	0x2000da14
   24cd4:	000326d8 	.word	0x000326d8
   24cd8:	2000da50 	.word	0x2000da50
   24cdc:	2000a8a0 	.word	0x2000a8a0
   24ce0:	0003271c 	.word	0x0003271c
   24ce4:	00032728 	.word	0x00032728
   24ce8:	00032730 	.word	0x00032730
   24cec:	2000b1e0 	.word	0x2000b1e0
   24cf0:	00032770 	.word	0x00032770
   24cf4:	00032784 	.word	0x00032784
   24cf8:	2000b9e0 	.word	0x2000b9e0
   24cfc:	00032788 	.word	0x00032788
   24d00:	0003279c 	.word	0x0003279c

00024d04 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   24d04:	b510      	push	{r4, lr}
   24d06:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   24d08:	4c34      	ldr	r4, [pc, #208]	; (24ddc <net_shell_cmd_stats+0xd8>)
   24d0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24d0c:	9300      	str	r3, [sp, #0]
   24d0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24d10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   24d12:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24d14:	4832      	ldr	r0, [pc, #200]	; (24de0 <net_shell_cmd_stats+0xdc>)
   24d16:	f7de f9a7 	bl	3068 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   24d1a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   24d1e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24d22:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   24d26:	482f      	ldr	r0, [pc, #188]	; (24de4 <net_shell_cmd_stats+0xe0>)
   24d28:	f7de f99e 	bl	3068 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   24d2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24d30:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   24d34:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   24d38:	482b      	ldr	r0, [pc, #172]	; (24de8 <net_shell_cmd_stats+0xe4>)
   24d3a:	f7de f995 	bl	3068 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   24d3e:	6963      	ldr	r3, [r4, #20]
   24d40:	6922      	ldr	r2, [r4, #16]
   24d42:	68e1      	ldr	r1, [r4, #12]
   24d44:	4829      	ldr	r0, [pc, #164]	; (24dec <net_shell_cmd_stats+0xe8>)
   24d46:	f7de f98f 	bl	3068 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   24d4a:	6a23      	ldr	r3, [r4, #32]
   24d4c:	69e2      	ldr	r2, [r4, #28]
   24d4e:	69a1      	ldr	r1, [r4, #24]
   24d50:	4827      	ldr	r0, [pc, #156]	; (24df0 <net_shell_cmd_stats+0xec>)
   24d52:	f7de f989 	bl	3068 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   24d56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24d5c:	4825      	ldr	r0, [pc, #148]	; (24df4 <net_shell_cmd_stats+0xf0>)
   24d5e:	f7de f983 	bl	3068 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   24d62:	6c62      	ldr	r2, [r4, #68]	; 0x44
   24d64:	6c21      	ldr	r1, [r4, #64]	; 0x40
   24d66:	4824      	ldr	r0, [pc, #144]	; (24df8 <net_shell_cmd_stats+0xf4>)
   24d68:	f7de f97e 	bl	3068 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   24d6c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   24d6e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   24d72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   24d76:	4821      	ldr	r0, [pc, #132]	; (24dfc <net_shell_cmd_stats+0xf8>)
   24d78:	f7de f976 	bl	3068 <printk>
	printk("UDP chkerr     %d\n",
   24d7c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   24d80:	481f      	ldr	r0, [pc, #124]	; (24e00 <net_shell_cmd_stats+0xfc>)
   24d82:	f7de f971 	bl	3068 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   24d86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24d88:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   24d8a:	481e      	ldr	r0, [pc, #120]	; (24e04 <net_shell_cmd_stats+0x100>)
   24d8c:	f7de f96c 	bl	3068 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   24d90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24d92:	6da2      	ldr	r2, [r4, #88]	; 0x58
   24d94:	6d61      	ldr	r1, [r4, #84]	; 0x54
   24d96:	481c      	ldr	r0, [pc, #112]	; (24e08 <net_shell_cmd_stats+0x104>)
   24d98:	f7de f966 	bl	3068 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   24d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24d9e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   24da0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   24da2:	481a      	ldr	r0, [pc, #104]	; (24e0c <net_shell_cmd_stats+0x108>)
   24da4:	f7de f960 	bl	3068 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   24da8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   24daa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   24dac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   24dae:	4818      	ldr	r0, [pc, #96]	; (24e10 <net_shell_cmd_stats+0x10c>)
   24db0:	f7de f95a 	bl	3068 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   24db4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   24db6:	6f61      	ldr	r1, [r4, #116]	; 0x74
   24db8:	4816      	ldr	r0, [pc, #88]	; (24e14 <net_shell_cmd_stats+0x110>)
   24dba:	f7de f955 	bl	3068 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   24dbe:	68a1      	ldr	r1, [r4, #8]
   24dc0:	4815      	ldr	r0, [pc, #84]	; (24e18 <net_shell_cmd_stats+0x114>)
   24dc2:	f7de f951 	bl	3068 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   24dc6:	6861      	ldr	r1, [r4, #4]
   24dc8:	4814      	ldr	r0, [pc, #80]	; (24e1c <net_shell_cmd_stats+0x118>)
   24dca:	f7de f94d 	bl	3068 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   24dce:	6821      	ldr	r1, [r4, #0]
   24dd0:	4813      	ldr	r0, [pc, #76]	; (24e20 <net_shell_cmd_stats+0x11c>)
   24dd2:	f7de f949 	bl	3068 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   24dd6:	2000      	movs	r0, #0
   24dd8:	b002      	add	sp, #8
   24dda:	bd10      	pop	{r4, pc}
   24ddc:	20002fd0 	.word	0x20002fd0
   24de0:	000327a4 	.word	0x000327a4
   24de4:	000327d4 	.word	0x000327d4
   24de8:	000327f8 	.word	0x000327f8
   24dec:	0003281c 	.word	0x0003281c
   24df0:	00032848 	.word	0x00032848
   24df4:	00032870 	.word	0x00032870
   24df8:	00032894 	.word	0x00032894
   24dfc:	000328b4 	.word	0x000328b4
   24e00:	000328d8 	.word	0x000328d8
   24e04:	000328ec 	.word	0x000328ec
   24e08:	00032908 	.word	0x00032908
   24e0c:	0003292c 	.word	0x0003292c
   24e10:	00032954 	.word	0x00032954
   24e14:	0003297c 	.word	0x0003297c
   24e18:	0003299c 	.word	0x0003299c
   24e1c:	000329b0 	.word	0x000329b0
   24e20:	000329c4 	.word	0x000329c4

00024e24 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   24e24:	b508      	push	{r3, lr}
	printk("Message sent\n");
   24e26:	4802      	ldr	r0, [pc, #8]	; (24e30 <tcp_sent_cb+0xc>)
   24e28:	f7de f91e 	bl	3068 <printk>
   24e2c:	bd08      	pop	{r3, pc}
   24e2e:	bf00      	nop
   24e30:	00032c84 	.word	0x00032c84

00024e34 <net_shell_cmd_conn>:
{
   24e34:	b510      	push	{r4, lr}
   24e36:	b082      	sub	sp, #8
	int count = 0;
   24e38:	ac02      	add	r4, sp, #8
   24e3a:	2300      	movs	r3, #0
   24e3c:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   24e40:	4810      	ldr	r0, [pc, #64]	; (24e84 <net_shell_cmd_conn+0x50>)
   24e42:	f7de f911 	bl	3068 <printk>
	net_context_foreach(context_cb, &count);
   24e46:	4621      	mov	r1, r4
   24e48:	480f      	ldr	r0, [pc, #60]	; (24e88 <net_shell_cmd_conn+0x54>)
   24e4a:	f7f8 ff03 	bl	1dc54 <net_context_foreach>
	if (count == 0) {
   24e4e:	9b01      	ldr	r3, [sp, #4]
   24e50:	b17b      	cbz	r3, 24e72 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   24e52:	490e      	ldr	r1, [pc, #56]	; (24e8c <net_shell_cmd_conn+0x58>)
   24e54:	480e      	ldr	r0, [pc, #56]	; (24e90 <net_shell_cmd_conn+0x5c>)
   24e56:	f7de f907 	bl	3068 <printk>
	count = 0;
   24e5a:	a902      	add	r1, sp, #8
   24e5c:	2300      	movs	r3, #0
   24e5e:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   24e62:	480c      	ldr	r0, [pc, #48]	; (24e94 <net_shell_cmd_conn+0x60>)
   24e64:	f7ff fa48 	bl	242f8 <net_tcp_foreach>
	if (count == 0) {
   24e68:	9b01      	ldr	r3, [sp, #4]
   24e6a:	b133      	cbz	r3, 24e7a <net_shell_cmd_conn+0x46>
}
   24e6c:	2000      	movs	r0, #0
   24e6e:	b002      	add	sp, #8
   24e70:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   24e72:	4809      	ldr	r0, [pc, #36]	; (24e98 <net_shell_cmd_conn+0x64>)
   24e74:	f7de f8f8 	bl	3068 <printk>
   24e78:	e7eb      	b.n	24e52 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   24e7a:	4808      	ldr	r0, [pc, #32]	; (24e9c <net_shell_cmd_conn+0x68>)
   24e7c:	f7de f8f4 	bl	3068 <printk>
   24e80:	e7f4      	b.n	24e6c <net_shell_cmd_conn+0x38>
   24e82:	bf00      	nop
   24e84:	000323d0 	.word	0x000323d0
   24e88:	00025011 	.word	0x00025011
   24e8c:	0002f3ac 	.word	0x0002f3ac
   24e90:	00032420 	.word	0x00032420
   24e94:	00024ea1 	.word	0x00024ea1
   24e98:	00032410 	.word	0x00032410
   24e9c:	00032460 	.word	0x00032460

00024ea0 <tcp_cb>:
{
   24ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ea4:	b084      	sub	sp, #16
   24ea6:	4604      	mov	r4, r0
   24ea8:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   24eaa:	f7fe ffe4 	bl	23e76 <net_tcp_get_recv_mss>
   24eae:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   24eb0:	6823      	ldr	r3, [r4, #0]
   24eb2:	895a      	ldrh	r2, [r3, #10]
   24eb4:	0215      	lsls	r5, r2, #8
   24eb6:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   24eba:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   24ebc:	8adb      	ldrh	r3, [r3, #22]
   24ebe:	021e      	lsls	r6, r3, #8
   24ec0:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   24ec4:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   24ec6:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   24eca:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   24ece:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   24ed2:	f3c0 3043 	ubfx	r0, r0, #13, #4
   24ed6:	f7ff f845 	bl	23f64 <net_tcp_state_str>
   24eda:	9003      	str	r0, [sp, #12]
   24edc:	f8cd 8008 	str.w	r8, [sp, #8]
   24ee0:	f8cd a004 	str.w	sl, [sp, #4]
   24ee4:	f8cd 9000 	str.w	r9, [sp]
   24ee8:	4633      	mov	r3, r6
   24eea:	462a      	mov	r2, r5
   24eec:	4621      	mov	r1, r4
   24eee:	4804      	ldr	r0, [pc, #16]	; (24f00 <tcp_cb+0x60>)
   24ef0:	f7de f8ba 	bl	3068 <printk>
	(*count)++;
   24ef4:	683b      	ldr	r3, [r7, #0]
   24ef6:	3301      	adds	r3, #1
   24ef8:	603b      	str	r3, [r7, #0]
}
   24efa:	b004      	add	sp, #16
   24efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24f00:	00032be0 	.word	0x00032be0

00024f04 <get_addresses>:
{
   24f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f08:	b083      	sub	sp, #12
   24f0a:	460d      	mov	r5, r1
   24f0c:	4616      	mov	r6, r2
   24f0e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   24f10:	8903      	ldrh	r3, [r0, #8]
   24f12:	2b0a      	cmp	r3, #10
   24f14:	d008      	beq.n	24f28 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   24f16:	b393      	cbz	r3, 24f7e <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   24f18:	4a1c      	ldr	r2, [pc, #112]	; (24f8c <get_addresses+0x88>)
   24f1a:	4631      	mov	r1, r6
   24f1c:	4628      	mov	r0, r5
   24f1e:	f7de f8b1 	bl	3084 <snprintk>
}
   24f22:	b003      	add	sp, #12
   24f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24f28:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24f2a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 24f94 <get_addresses+0x90>
   24f2e:	2328      	movs	r3, #40	; 0x28
   24f30:	464a      	mov	r2, r9
   24f32:	68c1      	ldr	r1, [r0, #12]
   24f34:	200a      	movs	r0, #10
   24f36:	f7f9 fc1d 	bl	1e774 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   24f3a:	8962      	ldrh	r2, [r4, #10]
   24f3c:	0213      	lsls	r3, r2, #8
   24f3e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   24f42:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   24f44:	f8df 8050 	ldr.w	r8, [pc, #80]	; 24f98 <get_addresses+0x94>
   24f48:	9300      	str	r3, [sp, #0]
   24f4a:	4603      	mov	r3, r0
   24f4c:	4642      	mov	r2, r8
   24f4e:	4631      	mov	r1, r6
   24f50:	4628      	mov	r0, r5
   24f52:	f7de f897 	bl	3084 <snprintk>
   24f56:	2328      	movs	r3, #40	; 0x28
   24f58:	464a      	mov	r2, r9
   24f5a:	f104 0118 	add.w	r1, r4, #24
   24f5e:	200a      	movs	r0, #10
   24f60:	f7f9 fc08 	bl	1e774 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   24f64:	8ae2      	ldrh	r2, [r4, #22]
   24f66:	0213      	lsls	r3, r2, #8
   24f68:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   24f6c:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   24f6e:	9300      	str	r3, [sp, #0]
   24f70:	4603      	mov	r3, r0
   24f72:	4642      	mov	r2, r8
   24f74:	990a      	ldr	r1, [sp, #40]	; 0x28
   24f76:	4638      	mov	r0, r7
   24f78:	f7de f884 	bl	3084 <snprintk>
   24f7c:	e7d1      	b.n	24f22 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   24f7e:	4a04      	ldr	r2, [pc, #16]	; (24f90 <get_addresses+0x8c>)
   24f80:	4631      	mov	r1, r6
   24f82:	4628      	mov	r0, r5
   24f84:	f7de f87e 	bl	3084 <snprintk>
   24f88:	e7cb      	b.n	24f22 <get_addresses+0x1e>
   24f8a:	bf00      	nop
   24f8c:	00031fa8 	.word	0x00031fa8
   24f90:	00031f9c 	.word	0x00031f9c
   24f94:	20002988 	.word	0x20002988
   24f98:	00031f94 	.word	0x00031f94

00024f9c <print_connect_info>:
{
   24f9c:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   24f9e:	2802      	cmp	r0, #2
   24fa0:	d008      	beq.n	24fb4 <print_connect_info+0x18>
   24fa2:	460d      	mov	r5, r1
   24fa4:	4614      	mov	r4, r2
   24fa6:	280a      	cmp	r0, #10
   24fa8:	d008      	beq.n	24fbc <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   24faa:	4601      	mov	r1, r0
   24fac:	4813      	ldr	r0, [pc, #76]	; (24ffc <print_connect_info+0x60>)
   24fae:	f7de f85b 	bl	3068 <printk>
   24fb2:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   24fb4:	4812      	ldr	r0, [pc, #72]	; (25000 <print_connect_info+0x64>)
   24fb6:	f7de f857 	bl	3068 <printk>
		break;
   24fba:	bd70      	pop	{r4, r5, r6, pc}
   24fbc:	4e11      	ldr	r6, [pc, #68]	; (25004 <print_connect_info+0x68>)
   24fbe:	2328      	movs	r3, #40	; 0x28
   24fc0:	4632      	mov	r2, r6
   24fc2:	3104      	adds	r1, #4
   24fc4:	200a      	movs	r0, #10
   24fc6:	f7f9 fbd5 	bl	1e774 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   24fca:	886b      	ldrh	r3, [r5, #2]
   24fcc:	021a      	lsls	r2, r3, #8
   24fce:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   24fd2:	b292      	uxth	r2, r2
   24fd4:	4601      	mov	r1, r0
   24fd6:	480c      	ldr	r0, [pc, #48]	; (25008 <print_connect_info+0x6c>)
   24fd8:	f7de f846 	bl	3068 <printk>
   24fdc:	2328      	movs	r3, #40	; 0x28
   24fde:	4632      	mov	r2, r6
   24fe0:	1d21      	adds	r1, r4, #4
   24fe2:	200a      	movs	r0, #10
   24fe4:	f7f9 fbc6 	bl	1e774 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   24fe8:	8863      	ldrh	r3, [r4, #2]
   24fea:	021a      	lsls	r2, r3, #8
   24fec:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   24ff0:	b292      	uxth	r2, r2
   24ff2:	4601      	mov	r1, r0
   24ff4:	4805      	ldr	r0, [pc, #20]	; (2500c <print_connect_info+0x70>)
   24ff6:	f7de f837 	bl	3068 <printk>
		break;
   24ffa:	bd70      	pop	{r4, r5, r6, pc}
   24ffc:	00032b78 	.word	0x00032b78
   25000:	00032b3c 	.word	0x00032b3c
   25004:	20002988 	.word	0x20002988
   25008:	00032b50 	.word	0x00032b50
   2500c:	00032b6c 	.word	0x00032b6c

00025010 <context_cb>:
{
   25010:	b5f0      	push	{r4, r5, r6, r7, lr}
   25012:	b09f      	sub	sp, #124	; 0x7c
   25014:	4604      	mov	r4, r0
   25016:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   25018:	2100      	movs	r1, #0
   2501a:	9106      	str	r1, [sp, #24]
   2501c:	222b      	movs	r2, #43	; 0x2b
   2501e:	a807      	add	r0, sp, #28
   25020:	f005 fd0e 	bl	2aa40 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   25024:	222f      	movs	r2, #47	; 0x2f
   25026:	9200      	str	r2, [sp, #0]
   25028:	ab06      	add	r3, sp, #24
   2502a:	a912      	add	r1, sp, #72	; 0x48
   2502c:	4620      	mov	r0, r4
   2502e:	f7ff ff69 	bl	24f04 <get_addresses>
	       (*count) + 1, context,
   25032:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   25034:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   25036:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   2503a:	f7f7 fd0b 	bl	1ca54 <net_if_get_by_index>
   2503e:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   25040:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   25044:	f012 0f10 	tst.w	r2, #16
   25048:	d022      	beq.n	25090 <context_cb+0x80>
		return AF_INET6;
   2504a:	210a      	movs	r1, #10
   2504c:	290a      	cmp	r1, #10
   2504e:	d021      	beq.n	25094 <context_cb+0x84>
   25050:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   25052:	f012 0f20 	tst.w	r2, #32
   25056:	d01f      	beq.n	25098 <context_cb+0x88>
		return SOCK_STREAM;
   25058:	2001      	movs	r0, #1
   2505a:	2802      	cmp	r0, #2
   2505c:	d01e      	beq.n	2509c <context_cb+0x8c>
   2505e:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   25060:	f012 0f40 	tst.w	r2, #64	; 0x40
   25064:	d01c      	beq.n	250a0 <context_cb+0x90>
		return IPPROTO_TCP;
   25066:	2206      	movs	r2, #6
   25068:	2a11      	cmp	r2, #17
   2506a:	d01b      	beq.n	250a4 <context_cb+0x94>
   2506c:	2754      	movs	r7, #84	; 0x54
   2506e:	aa06      	add	r2, sp, #24
   25070:	9204      	str	r2, [sp, #16]
   25072:	aa12      	add	r2, sp, #72	; 0x48
   25074:	9203      	str	r2, [sp, #12]
   25076:	9702      	str	r7, [sp, #8]
   25078:	9001      	str	r0, [sp, #4]
   2507a:	9100      	str	r1, [sp, #0]
   2507c:	4622      	mov	r2, r4
   2507e:	4631      	mov	r1, r6
   25080:	4809      	ldr	r0, [pc, #36]	; (250a8 <context_cb+0x98>)
   25082:	f7dd fff1 	bl	3068 <printk>
	(*count)++;
   25086:	682b      	ldr	r3, [r5, #0]
   25088:	3301      	adds	r3, #1
   2508a:	602b      	str	r3, [r5, #0]
}
   2508c:	b01f      	add	sp, #124	; 0x7c
   2508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   25090:	2102      	movs	r1, #2
   25092:	e7db      	b.n	2504c <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   25094:	2136      	movs	r1, #54	; 0x36
   25096:	e7dc      	b.n	25052 <context_cb+0x42>
	return SOCK_DGRAM;
   25098:	2002      	movs	r0, #2
   2509a:	e7de      	b.n	2505a <context_cb+0x4a>
   2509c:	2044      	movs	r0, #68	; 0x44
   2509e:	e7df      	b.n	25060 <context_cb+0x50>
	return IPPROTO_UDP;
   250a0:	2211      	movs	r2, #17
   250a2:	e7e1      	b.n	25068 <context_cb+0x58>
   250a4:	2755      	movs	r7, #85	; 0x55
   250a6:	e7e2      	b.n	2506e <context_cb+0x5e>
   250a8:	00031f54 	.word	0x00031f54

000250ac <net_shell_cmd_iface>:
{
   250ac:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   250ae:	2100      	movs	r1, #0
   250b0:	4802      	ldr	r0, [pc, #8]	; (250bc <net_shell_cmd_iface+0x10>)
   250b2:	f7f7 fceb 	bl	1ca8c <net_if_foreach>
}
   250b6:	2000      	movs	r0, #0
   250b8:	bd08      	pop	{r3, pc}
   250ba:	bf00      	nop
   250bc:	0001fc5d 	.word	0x0001fc5d

000250c0 <net_shell_cmd_route>:
{
   250c0:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   250c2:	2100      	movs	r1, #0
   250c4:	4802      	ldr	r0, [pc, #8]	; (250d0 <net_shell_cmd_route+0x10>)
   250c6:	f7f7 fce1 	bl	1ca8c <net_if_foreach>
}
   250ca:	2000      	movs	r0, #0
   250cc:	bd08      	pop	{r3, pc}
   250ce:	bf00      	nop
   250d0:	000254fd 	.word	0x000254fd

000250d4 <net_shell_cmd_mem>:
{
   250d4:	b500      	push	{lr}
   250d6:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   250d8:	ab0e      	add	r3, sp, #56	; 0x38
   250da:	aa0f      	add	r2, sp, #60	; 0x3c
   250dc:	a910      	add	r1, sp, #64	; 0x40
   250de:	a811      	add	r0, sp, #68	; 0x44
   250e0:	f7f9 f9aa 	bl	1e438 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   250e4:	f44f 7100 	mov.w	r1, #512	; 0x200
   250e8:	4819      	ldr	r0, [pc, #100]	; (25150 <net_shell_cmd_mem+0x7c>)
   250ea:	f7dd ffbd 	bl	3068 <printk>
	printk("Network buffer pools:\n");
   250ee:	4819      	ldr	r0, [pc, #100]	; (25154 <net_shell_cmd_mem+0x80>)
   250f0:	f7dd ffba 	bl	3068 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   250f4:	4818      	ldr	r0, [pc, #96]	; (25158 <net_shell_cmd_mem+0x84>)
   250f6:	f7dd ffb7 	bl	3068 <printk>
	printk("Address\t\tTotal\tName\n");
   250fa:	4818      	ldr	r0, [pc, #96]	; (2515c <net_shell_cmd_mem+0x88>)
   250fc:	f7dd ffb4 	bl	3068 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   25100:	9911      	ldr	r1, [sp, #68]	; 0x44
   25102:	688a      	ldr	r2, [r1, #8]
   25104:	4816      	ldr	r0, [pc, #88]	; (25160 <net_shell_cmd_mem+0x8c>)
   25106:	f7dd ffaf 	bl	3068 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   2510a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2510c:	688a      	ldr	r2, [r1, #8]
   2510e:	4815      	ldr	r0, [pc, #84]	; (25164 <net_shell_cmd_mem+0x90>)
   25110:	f7dd ffaa 	bl	3068 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   25114:	990f      	ldr	r1, [sp, #60]	; 0x3c
   25116:	8a0a      	ldrh	r2, [r1, #16]
   25118:	4813      	ldr	r0, [pc, #76]	; (25168 <net_shell_cmd_mem+0x94>)
   2511a:	f7dd ffa5 	bl	3068 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   2511e:	990e      	ldr	r1, [sp, #56]	; 0x38
   25120:	8a0a      	ldrh	r2, [r1, #16]
   25122:	4812      	ldr	r0, [pc, #72]	; (2516c <net_shell_cmd_mem+0x98>)
   25124:	f7dd ffa0 	bl	3068 <printk>
		memset(&info, 0, sizeof(info));
   25128:	2238      	movs	r2, #56	; 0x38
   2512a:	2100      	movs	r1, #0
   2512c:	4668      	mov	r0, sp
   2512e:	f005 fc87 	bl	2aa40 <memset>
		net_context_foreach(context_info, &info);
   25132:	4669      	mov	r1, sp
   25134:	480e      	ldr	r0, [pc, #56]	; (25170 <net_shell_cmd_mem+0x9c>)
   25136:	f7f8 fd8d 	bl	1dc54 <net_context_foreach>
		if (!info.are_external_pools) {
   2513a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2513e:	b11b      	cbz	r3, 25148 <net_shell_cmd_mem+0x74>
}
   25140:	2000      	movs	r0, #0
   25142:	b013      	add	sp, #76	; 0x4c
   25144:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   25148:	480a      	ldr	r0, [pc, #40]	; (25174 <net_shell_cmd_mem+0xa0>)
   2514a:	f7dd ff8d 	bl	3068 <printk>
   2514e:	e7f7      	b.n	25140 <net_shell_cmd_mem+0x6c>
   25150:	000324f8 	.word	0x000324f8
   25154:	00032514 	.word	0x00032514
   25158:	0003252c 	.word	0x0003252c
   2515c:	00032558 	.word	0x00032558
   25160:	00032570 	.word	0x00032570
   25164:	0003257c 	.word	0x0003257c
   25168:	00032588 	.word	0x00032588
   2516c:	00032598 	.word	0x00032598
   25170:	00024b41 	.word	0x00024b41
   25174:	000325a8 	.word	0x000325a8

00025178 <net_shell_cmd_nbr>:
{
   25178:	b510      	push	{r4, lr}
   2517a:	b086      	sub	sp, #24
	int count = 0;
   2517c:	2300      	movs	r3, #0
   2517e:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   25180:	6848      	ldr	r0, [r1, #4]
   25182:	b1d8      	cbz	r0, 251bc <net_shell_cmd_nbr+0x44>
   25184:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   25186:	4920      	ldr	r1, [pc, #128]	; (25208 <net_shell_cmd_nbr+0x90>)
   25188:	f7db f93e 	bl	408 <strcmp>
   2518c:	b9f8      	cbnz	r0, 251ce <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   2518e:	68a1      	ldr	r1, [r4, #8]
   25190:	b311      	cbz	r1, 251d8 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   25192:	aa01      	add	r2, sp, #4
   25194:	200a      	movs	r0, #10
   25196:	f7f9 fbc4 	bl	1e922 <net_addr_pton>
		if (ret < 0) {
   2519a:	2800      	cmp	r0, #0
   2519c:	db20      	blt.n	251e0 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   2519e:	a901      	add	r1, sp, #4
   251a0:	2000      	movs	r0, #0
   251a2:	f7fb f83f 	bl	20224 <net_ipv6_nbr_rm>
   251a6:	bb00      	cbnz	r0, 251ea <net_shell_cmd_nbr+0x72>
   251a8:	2328      	movs	r3, #40	; 0x28
   251aa:	4a18      	ldr	r2, [pc, #96]	; (2520c <net_shell_cmd_nbr+0x94>)
   251ac:	a901      	add	r1, sp, #4
   251ae:	200a      	movs	r0, #10
   251b0:	f7f9 fae0 	bl	1e774 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   251b4:	4601      	mov	r1, r0
   251b6:	4816      	ldr	r0, [pc, #88]	; (25210 <net_shell_cmd_nbr+0x98>)
   251b8:	f7dd ff56 	bl	3068 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   251bc:	a905      	add	r1, sp, #20
   251be:	4815      	ldr	r0, [pc, #84]	; (25214 <net_shell_cmd_nbr+0x9c>)
   251c0:	f7fb f822 	bl	20208 <net_ipv6_nbr_foreach>
	if (count == 0) {
   251c4:	9b05      	ldr	r3, [sp, #20]
   251c6:	b1db      	cbz	r3, 25200 <net_shell_cmd_nbr+0x88>
}
   251c8:	2000      	movs	r0, #0
   251ca:	b006      	add	sp, #24
   251cc:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   251ce:	6861      	ldr	r1, [r4, #4]
   251d0:	4811      	ldr	r0, [pc, #68]	; (25218 <net_shell_cmd_nbr+0xa0>)
   251d2:	f7dd ff49 	bl	3068 <printk>
			return 0;
   251d6:	e7f7      	b.n	251c8 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   251d8:	4810      	ldr	r0, [pc, #64]	; (2521c <net_shell_cmd_nbr+0xa4>)
   251da:	f7dd ff45 	bl	3068 <printk>
			return 0;
   251de:	e7f3      	b.n	251c8 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   251e0:	68a1      	ldr	r1, [r4, #8]
   251e2:	480f      	ldr	r0, [pc, #60]	; (25220 <net_shell_cmd_nbr+0xa8>)
   251e4:	f7dd ff40 	bl	3068 <printk>
			return 0;
   251e8:	e7ee      	b.n	251c8 <net_shell_cmd_nbr+0x50>
   251ea:	2328      	movs	r3, #40	; 0x28
   251ec:	4a07      	ldr	r2, [pc, #28]	; (2520c <net_shell_cmd_nbr+0x94>)
   251ee:	a901      	add	r1, sp, #4
   251f0:	200a      	movs	r0, #10
   251f2:	f7f9 fabf 	bl	1e774 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   251f6:	4601      	mov	r1, r0
   251f8:	480a      	ldr	r0, [pc, #40]	; (25224 <net_shell_cmd_nbr+0xac>)
   251fa:	f7dd ff35 	bl	3068 <printk>
   251fe:	e7dd      	b.n	251bc <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   25200:	4809      	ldr	r0, [pc, #36]	; (25228 <net_shell_cmd_nbr+0xb0>)
   25202:	f7dd ff31 	bl	3068 <printk>
   25206:	e7df      	b.n	251c8 <net_shell_cmd_nbr+0x50>
   25208:	000325cc 	.word	0x000325cc
   2520c:	20002988 	.word	0x20002988
   25210:	0003261c 	.word	0x0003261c
   25214:	000252d1 	.word	0x000252d1
   25218:	000325d0 	.word	0x000325d0
   2521c:	000325e8 	.word	0x000325e8
   25220:	00032608 	.word	0x00032608
   25224:	00032638 	.word	0x00032638
   25228:	00032650 	.word	0x00032650

0002522c <route_cb>:
{
   2522c:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   2522e:	68c3      	ldr	r3, [r0, #12]
   25230:	428b      	cmp	r3, r1
   25232:	d000      	beq.n	25236 <route_cb+0xa>
   25234:	bd38      	pop	{r3, r4, r5, pc}
   25236:	4604      	mov	r4, r0
   25238:	2328      	movs	r3, #40	; 0x28
   2523a:	4a1e      	ldr	r2, [pc, #120]	; (252b4 <route_cb+0x88>)
   2523c:	f100 0110 	add.w	r1, r0, #16
   25240:	200a      	movs	r0, #10
   25242:	f7f9 fa97 	bl	1e774 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   25246:	f894 2020 	ldrb.w	r2, [r4, #32]
   2524a:	4601      	mov	r1, r0
   2524c:	481a      	ldr	r0, [pc, #104]	; (252b8 <route_cb+0x8c>)
   2524e:	f7dd ff0b 	bl	3068 <printk>
	return list->head;
   25252:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   25254:	2500      	movs	r5, #0
   25256:	e009      	b.n	2526c <route_cb+0x40>
			printk("addr : <unknown>\n");
   25258:	4818      	ldr	r0, [pc, #96]	; (252bc <route_cb+0x90>)
   2525a:	f7dd ff05 	bl	3068 <printk>
		count++;
   2525e:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   25260:	4622      	mov	r2, r4
   25262:	b1dc      	cbz	r4, 2529c <route_cb+0x70>
	return node->next;
   25264:	6823      	ldr	r3, [r4, #0]
   25266:	b1db      	cbz	r3, 252a0 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   25268:	b1e2      	cbz	r2, 252a4 <route_cb+0x78>
	return node->next;
   2526a:	6824      	ldr	r4, [r4, #0]
   2526c:	b1e4      	cbz	r4, 252a8 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   2526e:	6861      	ldr	r1, [r4, #4]
   25270:	2900      	cmp	r1, #0
   25272:	d0f5      	beq.n	25260 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   25274:	4812      	ldr	r0, [pc, #72]	; (252c0 <route_cb+0x94>)
   25276:	f7dd fef7 	bl	3068 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   2527a:	6863      	ldr	r3, [r4, #4]
   2527c:	7858      	ldrb	r0, [r3, #1]
   2527e:	28ff      	cmp	r0, #255	; 0xff
   25280:	d0ea      	beq.n	25258 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   25282:	f7fa fcc1 	bl	1fc08 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   25286:	2318      	movs	r3, #24
   25288:	4a0e      	ldr	r2, [pc, #56]	; (252c4 <route_cb+0x98>)
   2528a:	7841      	ldrb	r1, [r0, #1]
   2528c:	3002      	adds	r0, #2
   2528e:	f7f9 fa47 	bl	1e720 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   25292:	4601      	mov	r1, r0
   25294:	480c      	ldr	r0, [pc, #48]	; (252c8 <route_cb+0x9c>)
   25296:	f7dd fee7 	bl	3068 <printk>
   2529a:	e7e0      	b.n	2525e <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2529c:	4623      	mov	r3, r4
   2529e:	e7e2      	b.n	25266 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   252a0:	2400      	movs	r4, #0
   252a2:	e7e3      	b.n	2526c <route_cb+0x40>
   252a4:	2400      	movs	r4, #0
   252a6:	e7e1      	b.n	2526c <route_cb+0x40>
	if (count == 0) {
   252a8:	2d00      	cmp	r5, #0
   252aa:	d1c3      	bne.n	25234 <route_cb+0x8>
		printk("\t<none>\n");
   252ac:	4807      	ldr	r0, [pc, #28]	; (252cc <route_cb+0xa0>)
   252ae:	f7dd fedb 	bl	3068 <printk>
   252b2:	e7bf      	b.n	25234 <route_cb+0x8>
   252b4:	20002988 	.word	0x20002988
   252b8:	00032b98 	.word	0x00032b98
   252bc:	00032bc0 	.word	0x00032bc0
   252c0:	00032bb0 	.word	0x00032bb0
   252c4:	20002970 	.word	0x20002970
   252c8:	00032bd4 	.word	0x00032bd4
   252cc:	000320d4 	.word	0x000320d4

000252d0 <nbr_cb>:
{
   252d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252d4:	b08f      	sub	sp, #60	; 0x3c
   252d6:	4604      	mov	r4, r0
   252d8:	460d      	mov	r5, r1
	if (*count == 0) {
   252da:	680b      	ldr	r3, [r1, #0]
   252dc:	2b00      	cmp	r3, #0
   252de:	d052      	beq.n	25386 <nbr_cb+0xb6>
	(*count)++;
   252e0:	682b      	ldr	r3, [r5, #0]
   252e2:	3301      	adds	r3, #1
   252e4:	602b      	str	r3, [r5, #0]
   252e6:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   252e8:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   252ec:	f7fa ff68 	bl	201c0 <net_ipv6_nbr_state2str>
   252f0:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   252f2:	f7db fa05 	bl	700 <strlen>
   252f6:	2805      	cmp	r0, #5
   252f8:	d04a      	beq.n	25390 <nbr_cb+0xc0>
	char *state_pad = "";
   252fa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 253a4 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   252fe:	682b      	ldr	r3, [r5, #0]
   25300:	930c      	str	r3, [sp, #48]	; 0x30
   25302:	68a3      	ldr	r3, [r4, #8]
   25304:	930d      	str	r3, [sp, #52]	; 0x34
   25306:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   25308:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   2530c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   2530e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   25312:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   25316:	3020      	adds	r0, #32
   25318:	f005 f90a 	bl	2a530 <_timeout_remaining_get>
   2531c:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   2531e:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   25320:	28ff      	cmp	r0, #255	; 0xff
   25322:	d038      	beq.n	25396 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   25324:	f7fa fc70 	bl	1fc08 <net_nbr_get_lladdr>
   25328:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   2532c:	7860      	ldrb	r0, [r4, #1]
   2532e:	f7fa fc6b 	bl	1fc08 <net_nbr_get_lladdr>
   25332:	2318      	movs	r3, #24
   25334:	4a19      	ldr	r2, [pc, #100]	; (2539c <nbr_cb+0xcc>)
   25336:	7841      	ldrb	r1, [r0, #1]
   25338:	4658      	mov	r0, fp
   2533a:	f7f9 f9f1 	bl	1e720 <net_sprint_ll_addr_buf>
   2533e:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   25340:	7860      	ldrb	r0, [r4, #1]
   25342:	f7fa fc61 	bl	1fc08 <net_nbr_get_lladdr>
   25346:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   25348:	2328      	movs	r3, #40	; 0x28
   2534a:	4a15      	ldr	r2, [pc, #84]	; (253a0 <nbr_cb+0xd0>)
   2534c:	3104      	adds	r1, #4
   2534e:	200a      	movs	r0, #10
   25350:	f7f9 fa10 	bl	1e774 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   25354:	9009      	str	r0, [sp, #36]	; 0x24
   25356:	4b13      	ldr	r3, [pc, #76]	; (253a4 <nbr_cb+0xd4>)
   25358:	9308      	str	r3, [sp, #32]
   2535a:	f8cd b01c 	str.w	fp, [sp, #28]
   2535e:	f8cd a018 	str.w	sl, [sp, #24]
   25362:	f8cd 9014 	str.w	r9, [sp, #20]
   25366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25368:	9304      	str	r3, [sp, #16]
   2536a:	f8cd 800c 	str.w	r8, [sp, #12]
   2536e:	9702      	str	r7, [sp, #8]
   25370:	9601      	str	r6, [sp, #4]
   25372:	9500      	str	r5, [sp, #0]
   25374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25376:	4622      	mov	r2, r4
   25378:	990c      	ldr	r1, [sp, #48]	; 0x30
   2537a:	480b      	ldr	r0, [pc, #44]	; (253a8 <nbr_cb+0xd8>)
   2537c:	f7dd fe74 	bl	3068 <printk>
}
   25380:	b00f      	add	sp, #60	; 0x3c
   25382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   25386:	4907      	ldr	r1, [pc, #28]	; (253a4 <nbr_cb+0xd4>)
   25388:	4808      	ldr	r0, [pc, #32]	; (253ac <nbr_cb+0xdc>)
   2538a:	f7dd fe6d 	bl	3068 <printk>
   2538e:	e7a7      	b.n	252e0 <nbr_cb+0x10>
		state_pad = "    ";
   25390:	f8df 901c 	ldr.w	r9, [pc, #28]	; 253b0 <nbr_cb+0xe0>
   25394:	e7b3      	b.n	252fe <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   25396:	f8df b01c 	ldr.w	fp, [pc, #28]	; 253b4 <nbr_cb+0xe4>
   2539a:	e7d1      	b.n	25340 <nbr_cb+0x70>
   2539c:	20002970 	.word	0x20002970
   253a0:	20002988 	.word	0x20002988
   253a4:	0002f3ac 	.word	0x0002f3ac
   253a8:	00032288 	.word	0x00032288
   253ac:	00032230 	.word	0x00032230
   253b0:	00032224 	.word	0x00032224
   253b4:	0003222c 	.word	0x0003222c

000253b8 <_ping_ipv6>:
{
   253b8:	b570      	push	{r4, r5, r6, lr}
   253ba:	b084      	sub	sp, #16
   253bc:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   253be:	f7f6 fbb1 	bl	1bb24 <net_if_get_default>
   253c2:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   253c4:	466a      	mov	r2, sp
   253c6:	4629      	mov	r1, r5
   253c8:	200a      	movs	r0, #10
   253ca:	f7f9 faaa 	bl	1e922 <net_addr_pton>
   253ce:	2800      	cmp	r0, #0
   253d0:	db26      	blt.n	25420 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   253d2:	4815      	ldr	r0, [pc, #84]	; (25428 <_ping_ipv6+0x70>)
   253d4:	f7f9 fe0c 	bl	1eff0 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   253d8:	4669      	mov	r1, sp
   253da:	2000      	movs	r0, #0
   253dc:	f7fb fa4c 	bl	20878 <net_ipv6_nbr_lookup>
	if (nbr) {
   253e0:	b100      	cbz	r0, 253e4 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   253e2:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   253e4:	4669      	mov	r1, sp
   253e6:	2000      	movs	r0, #0
   253e8:	f7fd ffc4 	bl	23374 <net_route_lookup>
	if (route) {
   253ec:	b100      	cbz	r0, 253f0 <_ping_ipv6+0x38>
		iface = route->iface;
   253ee:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   253f0:	f7dc fea0 	bl	2134 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   253f4:	b286      	uxth	r6, r0
					   sys_rand32_get());
   253f6:	f7dc fe9d 	bl	2134 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   253fa:	b283      	uxth	r3, r0
   253fc:	4632      	mov	r2, r6
   253fe:	4669      	mov	r1, sp
   25400:	4620      	mov	r0, r4
   25402:	f7fa fa8f 	bl	1f924 <net_icmpv6_send_echo_request>
	if (ret) {
   25406:	4604      	mov	r4, r0
   25408:	b930      	cbnz	r0, 25418 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   2540a:	4629      	mov	r1, r5
   2540c:	4807      	ldr	r0, [pc, #28]	; (2542c <_ping_ipv6+0x74>)
   2540e:	f7dd fe2b 	bl	3068 <printk>
}
   25412:	4620      	mov	r0, r4
   25414:	b004      	add	sp, #16
   25416:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   25418:	4803      	ldr	r0, [pc, #12]	; (25428 <_ping_ipv6+0x70>)
   2541a:	f7f9 fdf5 	bl	1f008 <net_icmpv6_unregister_handler>
   2541e:	e7f8      	b.n	25412 <_ping_ipv6+0x5a>
		return -EINVAL;
   25420:	f06f 0415 	mvn.w	r4, #21
   25424:	e7f5      	b.n	25412 <_ping_ipv6+0x5a>
   25426:	bf00      	nop
   25428:	2000ca8c 	.word	0x2000ca8c
   2542c:	00031f40 	.word	0x00031f40

00025430 <net_shell_cmd_ping>:
{
   25430:	b510      	push	{r4, lr}
   25432:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   25434:	4912      	ldr	r1, [pc, #72]	; (25480 <net_shell_cmd_ping+0x50>)
   25436:	6820      	ldr	r0, [r4, #0]
   25438:	f7da ffe6 	bl	408 <strcmp>
   2543c:	b958      	cbnz	r0, 25456 <net_shell_cmd_ping+0x26>
		host = argv[1];
   2543e:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   25440:	f7ff ffba 	bl	253b8 <_ping_ipv6>
	if (!ret) {
   25444:	b168      	cbz	r0, 25462 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   25446:	f110 0f05 	cmn.w	r0, #5
   2544a:	d006      	beq.n	2545a <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   2544c:	480d      	ldr	r0, [pc, #52]	; (25484 <net_shell_cmd_ping+0x54>)
   2544e:	f7dd fe0b 	bl	3068 <printk>
}
   25452:	2000      	movs	r0, #0
   25454:	bd10      	pop	{r4, pc}
		host = argv[2];
   25456:	68a0      	ldr	r0, [r4, #8]
   25458:	e7f2      	b.n	25440 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   2545a:	480b      	ldr	r0, [pc, #44]	; (25488 <net_shell_cmd_ping+0x58>)
   2545c:	f7dd fe04 	bl	3068 <printk>
		return 0;
   25460:	e7f7      	b.n	25452 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   25462:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   25466:	4809      	ldr	r0, [pc, #36]	; (2548c <net_shell_cmd_ping+0x5c>)
   25468:	f004 fb2a 	bl	29ac0 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   2546c:	f110 0f0b 	cmn.w	r0, #11
   25470:	d1ef      	bne.n	25452 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   25472:	4807      	ldr	r0, [pc, #28]	; (25490 <net_shell_cmd_ping+0x60>)
   25474:	f7dd fdf8 	bl	3068 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   25478:	4806      	ldr	r0, [pc, #24]	; (25494 <net_shell_cmd_ping+0x64>)
   2547a:	f7f9 fdc5 	bl	1f008 <net_icmpv6_unregister_handler>
   2547e:	e7e8      	b.n	25452 <net_shell_cmd_ping+0x22>
   25480:	00032660 	.word	0x00032660
   25484:	00032680 	.word	0x00032680
   25488:	00032668 	.word	0x00032668
   2548c:	2000d5dc 	.word	0x2000d5dc
   25490:	00032694 	.word	0x00032694
   25494:	2000ca8c 	.word	0x2000ca8c

00025498 <_handle_ipv6_echo_reply>:
{
   25498:	b530      	push	{r4, r5, lr}
   2549a:	b08b      	sub	sp, #44	; 0x2c
   2549c:	4605      	mov	r5, r0
	return pkt->frags->data;
   2549e:	6883      	ldr	r3, [r0, #8]
   254a0:	6899      	ldr	r1, [r3, #8]
   254a2:	4c11      	ldr	r4, [pc, #68]	; (254e8 <_handle_ipv6_echo_reply+0x50>)
   254a4:	2328      	movs	r3, #40	; 0x28
   254a6:	4622      	mov	r2, r4
   254a8:	3118      	adds	r1, #24
   254aa:	200a      	movs	r0, #10
   254ac:	f7f9 f962 	bl	1e774 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   254b0:	4603      	mov	r3, r0
   254b2:	4a0e      	ldr	r2, [pc, #56]	; (254ec <_handle_ipv6_echo_reply+0x54>)
   254b4:	2128      	movs	r1, #40	; 0x28
   254b6:	4668      	mov	r0, sp
   254b8:	f7dd fde4 	bl	3084 <snprintk>
   254bc:	68ab      	ldr	r3, [r5, #8]
   254be:	6899      	ldr	r1, [r3, #8]
   254c0:	2328      	movs	r3, #40	; 0x28
   254c2:	4622      	mov	r2, r4
   254c4:	3108      	adds	r1, #8
   254c6:	200a      	movs	r0, #10
   254c8:	f7f9 f954 	bl	1e774 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   254cc:	466a      	mov	r2, sp
   254ce:	4601      	mov	r1, r0
   254d0:	4807      	ldr	r0, [pc, #28]	; (254f0 <_handle_ipv6_echo_reply+0x58>)
   254d2:	f7dd fdc9 	bl	3068 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   254d6:	4807      	ldr	r0, [pc, #28]	; (254f4 <_handle_ipv6_echo_reply+0x5c>)
   254d8:	f004 fadf 	bl	29a9a <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   254dc:	4806      	ldr	r0, [pc, #24]	; (254f8 <_handle_ipv6_echo_reply+0x60>)
   254de:	f7f9 fd93 	bl	1f008 <net_icmpv6_unregister_handler>
}
   254e2:	2000      	movs	r0, #0
   254e4:	b00b      	add	sp, #44	; 0x2c
   254e6:	bd30      	pop	{r4, r5, pc}
   254e8:	20002988 	.word	0x20002988
   254ec:	0002ee8c 	.word	0x0002ee8c
   254f0:	00031f1c 	.word	0x00031f1c
   254f4:	2000d5dc 	.word	0x2000d5dc
   254f8:	2000ca8c 	.word	0x2000ca8c

000254fc <iface_per_route_cb>:
{
   254fc:	b510      	push	{r4, lr}
   254fe:	b082      	sub	sp, #8
   25500:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   25502:	a901      	add	r1, sp, #4
   25504:	f7ff faba 	bl	24a7c <iface2str>
   25508:	4602      	mov	r2, r0
   2550a:	4621      	mov	r1, r4
   2550c:	4806      	ldr	r0, [pc, #24]	; (25528 <iface_per_route_cb+0x2c>)
   2550e:	f7dd fdab 	bl	3068 <printk>
	printk("=======================================%s\n", extra);
   25512:	9901      	ldr	r1, [sp, #4]
   25514:	4805      	ldr	r0, [pc, #20]	; (2552c <iface_per_route_cb+0x30>)
   25516:	f7dd fda7 	bl	3068 <printk>
	net_route_foreach(route_cb, iface);
   2551a:	4621      	mov	r1, r4
   2551c:	4804      	ldr	r0, [pc, #16]	; (25530 <iface_per_route_cb+0x34>)
   2551e:	f7fe f829 	bl	23574 <net_route_foreach>
}
   25522:	b002      	add	sp, #8
   25524:	bd10      	pop	{r4, pc}
   25526:	bf00      	nop
   25528:	000321d4 	.word	0x000321d4
   2552c:	000321f8 	.word	0x000321f8
   25530:	0002522d 	.word	0x0002522d

00025534 <tcp_connected>:
{
   25534:	b510      	push	{r4, lr}
	if (status < 0) {
   25536:	2900      	cmp	r1, #0
   25538:	db03      	blt.n	25542 <tcp_connected+0xe>
		printk("TCP connected\n");
   2553a:	4807      	ldr	r0, [pc, #28]	; (25558 <tcp_connected+0x24>)
   2553c:	f7dd fd94 	bl	3068 <printk>
   25540:	bd10      	pop	{r4, pc}
   25542:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   25544:	4805      	ldr	r0, [pc, #20]	; (2555c <tcp_connected+0x28>)
   25546:	f7dd fd8f 	bl	3068 <printk>
		net_context_put(context);
   2554a:	4620      	mov	r0, r4
   2554c:	f7f8 f834 	bl	1d5b8 <net_context_put>
		tcp_ctx = NULL;
   25550:	2200      	movs	r2, #0
   25552:	4b03      	ldr	r3, [pc, #12]	; (25560 <tcp_connected+0x2c>)
   25554:	601a      	str	r2, [r3, #0]
   25556:	bd10      	pop	{r4, pc}
   25558:	00032c74 	.word	0x00032c74
   2555c:	00032c58 	.word	0x00032c58
   25560:	200029b0 	.word	0x200029b0

00025564 <get_my_ipv6_addr>:
{
   25564:	b538      	push	{r3, r4, r5, lr}
   25566:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   25568:	1d0d      	adds	r5, r1, #4
   2556a:	4629      	mov	r1, r5
   2556c:	f7f7 f81e 	bl	1c5ac <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   25570:	2210      	movs	r2, #16
   25572:	4601      	mov	r1, r0
   25574:	4628      	mov	r0, r5
   25576:	f7da fea3 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   2557a:	2300      	movs	r3, #0
   2557c:	8063      	strh	r3, [r4, #2]
   2557e:	bd38      	pop	{r3, r4, r5, pc}

00025580 <tcp_connect>:
{
   25580:	b5f0      	push	{r4, r5, r6, r7, lr}
   25582:	b08f      	sub	sp, #60	; 0x3c
   25584:	4607      	mov	r7, r0
   25586:	460c      	mov	r4, r1
   25588:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   2558a:	f7f6 facb 	bl	1bb24 <net_if_get_default>
   2558e:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   25590:	aa09      	add	r2, sp, #36	; 0x24
   25592:	4639      	mov	r1, r7
   25594:	200a      	movs	r0, #10
   25596:	f7f9 f9c4 	bl	1e922 <net_addr_pton>
	if (ret < 0) {
   2559a:	2800      	cmp	r0, #0
   2559c:	db34      	blt.n	25608 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   2559e:	0a21      	lsrs	r1, r4, #8
   255a0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   255a4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   255a8:	a909      	add	r1, sp, #36	; 0x24
   255aa:	2000      	movs	r0, #0
   255ac:	f7fb f964 	bl	20878 <net_ipv6_nbr_lookup>
	if (nbr) {
   255b0:	b100      	cbz	r0, 255b4 <tcp_connect+0x34>
		iface = nbr->iface;
   255b2:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   255b4:	a902      	add	r1, sp, #8
   255b6:	4630      	mov	r0, r6
   255b8:	f7ff ffd4 	bl	25564 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   255bc:	240a      	movs	r4, #10
   255be:	f8ad 4008 	strh.w	r4, [sp, #8]
   255c2:	aa0e      	add	r2, sp, #56	; 0x38
   255c4:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   255c8:	a902      	add	r1, sp, #8
   255ca:	4620      	mov	r0, r4
   255cc:	f7ff fce6 	bl	24f9c <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   255d0:	462b      	mov	r3, r5
   255d2:	2206      	movs	r2, #6
   255d4:	2101      	movs	r1, #1
   255d6:	4620      	mov	r0, r4
   255d8:	f7f7 fd82 	bl	1d0e0 <net_context_get>
	if (ret < 0) {
   255dc:	1e04      	subs	r4, r0, #0
   255de:	db18      	blt.n	25612 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   255e0:	2218      	movs	r2, #24
   255e2:	a902      	add	r1, sp, #8
   255e4:	6828      	ldr	r0, [r5, #0]
   255e6:	f7f8 f829 	bl	1d63c <net_context_bind>
	if (ret < 0) {
   255ea:	1e04      	subs	r4, r0, #0
   255ec:	db16      	blt.n	2561c <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   255ee:	6828      	ldr	r0, [r5, #0]
   255f0:	2300      	movs	r3, #0
   255f2:	9301      	str	r3, [sp, #4]
   255f4:	9300      	str	r3, [sp, #0]
   255f6:	4b0c      	ldr	r3, [pc, #48]	; (25628 <tcp_connect+0xa8>)
   255f8:	2218      	movs	r2, #24
   255fa:	a908      	add	r1, sp, #32
   255fc:	f7f8 f9b0 	bl	1d960 <net_context_connect>
   25600:	4604      	mov	r4, r0
}
   25602:	4620      	mov	r0, r4
   25604:	b00f      	add	sp, #60	; 0x3c
   25606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   25608:	4808      	ldr	r0, [pc, #32]	; (2562c <tcp_connect+0xac>)
   2560a:	f7dd fd2d 	bl	3068 <printk>
		return 0;
   2560e:	2400      	movs	r4, #0
   25610:	e7f7      	b.n	25602 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   25612:	4621      	mov	r1, r4
   25614:	4806      	ldr	r0, [pc, #24]	; (25630 <tcp_connect+0xb0>)
   25616:	f7dd fd27 	bl	3068 <printk>
		return ret;
   2561a:	e7f2      	b.n	25602 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   2561c:	4621      	mov	r1, r4
   2561e:	4805      	ldr	r0, [pc, #20]	; (25634 <tcp_connect+0xb4>)
   25620:	f7dd fd22 	bl	3068 <printk>
		return ret;
   25624:	e7ed      	b.n	25602 <tcp_connect+0x82>
   25626:	bf00      	nop
   25628:	00025535 	.word	0x00025535
   2562c:	00032c08 	.word	0x00032c08
   25630:	00032c20 	.word	0x00032c20
   25634:	00032c40 	.word	0x00032c40

00025638 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   25638:	b5f0      	push	{r4, r5, r6, r7, lr}
   2563a:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   2563c:	6848      	ldr	r0, [r1, #4]
   2563e:	2800      	cmp	r0, #0
   25640:	f000 8099 	beq.w	25776 <net_shell_cmd_tcp+0x13e>
   25644:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   25646:	4954      	ldr	r1, [pc, #336]	; (25798 <net_shell_cmd_tcp+0x160>)
   25648:	f7da fede 	bl	408 <strcmp>
   2564c:	4605      	mov	r5, r0
   2564e:	bb20      	cbnz	r0, 2569a <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   25650:	4b52      	ldr	r3, [pc, #328]	; (2579c <net_shell_cmd_tcp+0x164>)
   25652:	681b      	ldr	r3, [r3, #0]
   25654:	b123      	cbz	r3, 25660 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   25656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   2565a:	f013 0f01 	tst.w	r3, #1
   2565e:	d110      	bne.n	25682 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   25660:	68a6      	ldr	r6, [r4, #8]
   25662:	b196      	cbz	r6, 2568a <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   25664:	68e0      	ldr	r0, [r4, #12]
   25666:	b1a0      	cbz	r0, 25692 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   25668:	220a      	movs	r2, #10
   2566a:	2100      	movs	r1, #0
   2566c:	f005 ff02 	bl	2b474 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   25670:	4a4a      	ldr	r2, [pc, #296]	; (2579c <net_shell_cmd_tcp+0x164>)
   25672:	b281      	uxth	r1, r0
   25674:	4630      	mov	r0, r6
   25676:	f7ff ff83 	bl	25580 <tcp_connect>
   2567a:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   2567c:	4628      	mov	r0, r5
   2567e:	b003      	add	sp, #12
   25680:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   25682:	4847      	ldr	r0, [pc, #284]	; (257a0 <net_shell_cmd_tcp+0x168>)
   25684:	f7dd fcf0 	bl	3068 <printk>
				return 0;
   25688:	e7f8      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   2568a:	4846      	ldr	r0, [pc, #280]	; (257a4 <net_shell_cmd_tcp+0x16c>)
   2568c:	f7dd fcec 	bl	3068 <printk>
				return 0;
   25690:	e7f4      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   25692:	4845      	ldr	r0, [pc, #276]	; (257a8 <net_shell_cmd_tcp+0x170>)
   25694:	f7dd fce8 	bl	3068 <printk>
				return 0;
   25698:	e7f0      	b.n	2567c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   2569a:	4944      	ldr	r1, [pc, #272]	; (257ac <net_shell_cmd_tcp+0x174>)
   2569c:	6860      	ldr	r0, [r4, #4]
   2569e:	f7da feb3 	bl	408 <strcmp>
   256a2:	4605      	mov	r5, r0
   256a4:	2800      	cmp	r0, #0
   256a6:	d140      	bne.n	2572a <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   256a8:	4b3c      	ldr	r3, [pc, #240]	; (2579c <net_shell_cmd_tcp+0x164>)
   256aa:	6818      	ldr	r0, [r3, #0]
   256ac:	b300      	cbz	r0, 256f0 <net_shell_cmd_tcp+0xb8>
   256ae:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   256b2:	f013 0f01 	tst.w	r3, #1
   256b6:	d01b      	beq.n	256f0 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   256b8:	68a3      	ldr	r3, [r4, #8]
   256ba:	b1eb      	cbz	r3, 256f8 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   256bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   256c0:	f7f8 fbdc 	bl	1de7c <net_pkt_get_tx>
			if (!pkt) {
   256c4:	4606      	mov	r6, r0
   256c6:	b1d8      	cbz	r0, 25700 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   256c8:	68a0      	ldr	r0, [r4, #8]
   256ca:	f7db f819 	bl	700 <strlen>
   256ce:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   256d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   256d4:	68a2      	ldr	r2, [r4, #8]
   256d6:	4639      	mov	r1, r7
   256d8:	4630      	mov	r0, r6
   256da:	f7f8 fd3a 	bl	1e152 <net_pkt_append>
			if (!ret) {
   256de:	4287      	cmp	r7, r0
   256e0:	d012      	beq.n	25708 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   256e2:	4833      	ldr	r0, [pc, #204]	; (257b0 <net_shell_cmd_tcp+0x178>)
   256e4:	f7dd fcc0 	bl	3068 <printk>
				net_pkt_unref(pkt);
   256e8:	4630      	mov	r0, r6
   256ea:	f7f8 fbfa 	bl	1dee2 <net_pkt_unref>
				return 0;
   256ee:	e7c5      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   256f0:	4830      	ldr	r0, [pc, #192]	; (257b4 <net_shell_cmd_tcp+0x17c>)
   256f2:	f7dd fcb9 	bl	3068 <printk>
				return 0;
   256f6:	e7c1      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   256f8:	482f      	ldr	r0, [pc, #188]	; (257b8 <net_shell_cmd_tcp+0x180>)
   256fa:	f7dd fcb5 	bl	3068 <printk>
				return 0;
   256fe:	e7bd      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   25700:	482e      	ldr	r0, [pc, #184]	; (257bc <net_shell_cmd_tcp+0x184>)
   25702:	f7dd fcb1 	bl	3068 <printk>
				return 0;
   25706:	e7b9      	b.n	2567c <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   25708:	2300      	movs	r3, #0
   2570a:	9300      	str	r3, [sp, #0]
   2570c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   25710:	492b      	ldr	r1, [pc, #172]	; (257c0 <net_shell_cmd_tcp+0x188>)
   25712:	4630      	mov	r0, r6
   25714:	f7f8 fa12 	bl	1db3c <net_context_send>
			if (ret < 0) {
   25718:	1e01      	subs	r1, r0, #0
   2571a:	daaf      	bge.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   2571c:	4829      	ldr	r0, [pc, #164]	; (257c4 <net_shell_cmd_tcp+0x18c>)
   2571e:	f7dd fca3 	bl	3068 <printk>
				net_pkt_unref(pkt);
   25722:	4630      	mov	r0, r6
   25724:	f7f8 fbdd 	bl	1dee2 <net_pkt_unref>
				return 0;
   25728:	e7a8      	b.n	2567c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   2572a:	4927      	ldr	r1, [pc, #156]	; (257c8 <net_shell_cmd_tcp+0x190>)
   2572c:	6860      	ldr	r0, [r4, #4]
   2572e:	f7da fe6b 	bl	408 <strcmp>
   25732:	4605      	mov	r5, r0
   25734:	b9d0      	cbnz	r0, 2576c <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   25736:	4b19      	ldr	r3, [pc, #100]	; (2579c <net_shell_cmd_tcp+0x164>)
   25738:	6818      	ldr	r0, [r3, #0]
   2573a:	b120      	cbz	r0, 25746 <net_shell_cmd_tcp+0x10e>
   2573c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   25740:	f013 0f01 	tst.w	r3, #1
   25744:	d103      	bne.n	2574e <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   25746:	481b      	ldr	r0, [pc, #108]	; (257b4 <net_shell_cmd_tcp+0x17c>)
   25748:	f7dd fc8e 	bl	3068 <printk>
				return 0;
   2574c:	e796      	b.n	2567c <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   2574e:	f7f7 ff33 	bl	1d5b8 <net_context_put>
			if (ret < 0) {
   25752:	1e01      	subs	r1, r0, #0
   25754:	db06      	blt.n	25764 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   25756:	481d      	ldr	r0, [pc, #116]	; (257cc <net_shell_cmd_tcp+0x194>)
   25758:	f7dd fc86 	bl	3068 <printk>
			tcp_ctx = NULL;
   2575c:	2200      	movs	r2, #0
   2575e:	4b0f      	ldr	r3, [pc, #60]	; (2579c <net_shell_cmd_tcp+0x164>)
   25760:	601a      	str	r2, [r3, #0]
			return 0;
   25762:	e78b      	b.n	2567c <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   25764:	481a      	ldr	r0, [pc, #104]	; (257d0 <net_shell_cmd_tcp+0x198>)
   25766:	f7dd fc7f 	bl	3068 <printk>
				return 0;
   2576a:	e787      	b.n	2567c <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   2576c:	6861      	ldr	r1, [r4, #4]
   2576e:	4819      	ldr	r0, [pc, #100]	; (257d4 <net_shell_cmd_tcp+0x19c>)
   25770:	f7dd fc7a 	bl	3068 <printk>
		goto usage;
   25774:	e002      	b.n	2577c <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   25776:	4818      	ldr	r0, [pc, #96]	; (257d8 <net_shell_cmd_tcp+0x1a0>)
   25778:	f7dd fc76 	bl	3068 <printk>
		printk("Usage:\n");
   2577c:	4817      	ldr	r0, [pc, #92]	; (257dc <net_shell_cmd_tcp+0x1a4>)
   2577e:	f7dd fc73 	bl	3068 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   25782:	4817      	ldr	r0, [pc, #92]	; (257e0 <net_shell_cmd_tcp+0x1a8>)
   25784:	f7dd fc70 	bl	3068 <printk>
		printk("\ttcp send <data>\n");
   25788:	4816      	ldr	r0, [pc, #88]	; (257e4 <net_shell_cmd_tcp+0x1ac>)
   2578a:	f7dd fc6d 	bl	3068 <printk>
		printk("\ttcp close\n");
   2578e:	4816      	ldr	r0, [pc, #88]	; (257e8 <net_shell_cmd_tcp+0x1b0>)
   25790:	f7dd fc6a 	bl	3068 <printk>
	return 0;
   25794:	2500      	movs	r5, #0
   25796:	e771      	b.n	2567c <net_shell_cmd_tcp+0x44>
   25798:	0002efdc 	.word	0x0002efdc
   2579c:	200029b0 	.word	0x200029b0
   257a0:	000329d8 	.word	0x000329d8
   257a4:	000329ec 	.word	0x000329ec
   257a8:	00032a08 	.word	0x00032a08
   257ac:	00032a1c 	.word	0x00032a1c
   257b0:	00032a6c 	.word	0x00032a6c
   257b4:	00032a24 	.word	0x00032a24
   257b8:	00032a34 	.word	0x00032a34
   257bc:	00032a48 	.word	0x00032a48
   257c0:	00024e25 	.word	0x00024e25
   257c4:	00032a8c 	.word	0x00032a8c
   257c8:	00032aa4 	.word	0x00032aa4
   257cc:	00032ad0 	.word	0x00032ad0
   257d0:	00032aac 	.word	0x00032aac
   257d4:	000325d0 	.word	0x000325d0
   257d8:	00032ae4 	.word	0x00032ae4
   257dc:	00032af8 	.word	0x00032af8
   257e0:	00032b00 	.word	0x00032b00
   257e4:	00032b1c 	.word	0x00032b1c
   257e8:	00032b30 	.word	0x00032b30

000257ec <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   257ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   257f0:	4605      	mov	r5, r0
   257f2:	460e      	mov	r6, r1
   257f4:	4617      	mov	r7, r2
   257f6:	4699      	mov	r9, r3
   257f8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   257fc:	2400      	movs	r4, #0
   257fe:	e012      	b.n	25826 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25800:	f013 0f02 	tst.w	r3, #2
   25804:	d10e      	bne.n	25824 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   25806:	2f00      	cmp	r7, #0
   25808:	d051      	beq.n	258ae <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   2580a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2580e:	009a      	lsls	r2, r3, #2
   25810:	4b3c      	ldr	r3, [pc, #240]	; (25904 <find_conn_handler+0x118>)
   25812:	4413      	add	r3, r2
   25814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25818:	f013 0f04 	tst.w	r3, #4
   2581c:	d002      	beq.n	25824 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   2581e:	883b      	ldrh	r3, [r7, #0]
   25820:	2b0a      	cmp	r3, #10
   25822:	d030      	beq.n	25886 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25824:	3401      	adds	r4, #1
   25826:	2c03      	cmp	r4, #3
   25828:	dc67      	bgt.n	258fa <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2582a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2582e:	009a      	lsls	r2, r3, #2
   25830:	4b34      	ldr	r3, [pc, #208]	; (25904 <find_conn_handler+0x118>)
   25832:	4413      	add	r3, r2
   25834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25838:	f013 0f01 	tst.w	r3, #1
   2583c:	d0f2      	beq.n	25824 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   2583e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25842:	0091      	lsls	r1, r2, #2
   25844:	4a2f      	ldr	r2, [pc, #188]	; (25904 <find_conn_handler+0x118>)
   25846:	440a      	add	r2, r1
   25848:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   2584c:	42aa      	cmp	r2, r5
   2584e:	d1e9      	bne.n	25824 <find_conn_handler+0x38>
		if (remote_addr) {
   25850:	2e00      	cmp	r6, #0
   25852:	d0d5      	beq.n	25800 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   25854:	f013 0f02 	tst.w	r3, #2
   25858:	d0e4      	beq.n	25824 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   2585a:	8833      	ldrh	r3, [r6, #0]
   2585c:	2b0a      	cmp	r3, #10
   2585e:	d1e1      	bne.n	25824 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   25860:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   25864:	008a      	lsls	r2, r1, #2
   25866:	4927      	ldr	r1, [pc, #156]	; (25904 <find_conn_handler+0x118>)
   25868:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   2586a:	4293      	cmp	r3, r2
   2586c:	d1da      	bne.n	25824 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   2586e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25872:	0093      	lsls	r3, r2, #2
   25874:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   25876:	2210      	movs	r2, #16
   25878:	3104      	adds	r1, #4
   2587a:	1d30      	adds	r0, r6, #4
   2587c:	f005 f84c 	bl	2a918 <memcmp>
				if (!net_ipv6_addr_cmp(
   25880:	2800      	cmp	r0, #0
   25882:	d1cf      	bne.n	25824 <find_conn_handler+0x38>
   25884:	e7bf      	b.n	25806 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   25886:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2588a:	0091      	lsls	r1, r2, #2
   2588c:	4a1d      	ldr	r2, [pc, #116]	; (25904 <find_conn_handler+0x118>)
   2588e:	440a      	add	r2, r1
   25890:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   25892:	4293      	cmp	r3, r2
   25894:	d1c6      	bne.n	25824 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   25896:	460b      	mov	r3, r1
   25898:	3318      	adds	r3, #24
   2589a:	4a1a      	ldr	r2, [pc, #104]	; (25904 <find_conn_handler+0x118>)
   2589c:	4413      	add	r3, r2
   2589e:	2210      	movs	r2, #16
   258a0:	1d19      	adds	r1, r3, #4
   258a2:	1d38      	adds	r0, r7, #4
   258a4:	f005 f838 	bl	2a918 <memcmp>
				if (!net_ipv6_addr_cmp(
   258a8:	2800      	cmp	r0, #0
   258aa:	d1bb      	bne.n	25824 <find_conn_handler+0x38>
   258ac:	e009      	b.n	258c2 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   258ae:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   258b2:	009a      	lsls	r2, r3, #2
   258b4:	4b13      	ldr	r3, [pc, #76]	; (25904 <find_conn_handler+0x118>)
   258b6:	4413      	add	r3, r2
   258b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   258bc:	f013 0f04 	tst.w	r3, #4
   258c0:	d1b0      	bne.n	25824 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   258c2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   258c6:	009a      	lsls	r2, r3, #2
   258c8:	4b0e      	ldr	r3, [pc, #56]	; (25904 <find_conn_handler+0x118>)
   258ca:	4413      	add	r3, r2
   258cc:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   258ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
   258d2:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   258d6:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   258d8:	429a      	cmp	r2, r3
   258da:	d1a3      	bne.n	25824 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   258dc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   258e0:	0093      	lsls	r3, r2, #2
   258e2:	3318      	adds	r3, #24
   258e4:	4a07      	ldr	r2, [pc, #28]	; (25904 <find_conn_handler+0x118>)
   258e6:	4413      	add	r3, r2
   258e8:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   258ea:	ea4f 2318 	mov.w	r3, r8, lsr #8
   258ee:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   258f2:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   258f4:	429a      	cmp	r2, r3
   258f6:	d195      	bne.n	25824 <find_conn_handler+0x38>
   258f8:	e001      	b.n	258fe <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   258fa:	f06f 0401 	mvn.w	r4, #1
}
   258fe:	4620      	mov	r0, r4
   25900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25904:	20000a04 	.word	0x20000a04

00025908 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   25908:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2590a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2590c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25910:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25914:	b29d      	uxth	r5, r3
   25916:	42ac      	cmp	r4, r5
   25918:	d002      	beq.n	25920 <check_addr+0x18>
		return false;
   2591a:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2591c:	4620      	mov	r0, r4
   2591e:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25920:	2b0a      	cmp	r3, #10
   25922:	d001      	beq.n	25928 <check_addr+0x20>
	return true;
   25924:	2401      	movs	r4, #1
   25926:	e7f9      	b.n	2591c <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25928:	2c0a      	cmp	r4, #10
   2592a:	d001      	beq.n	25930 <check_addr+0x28>
	return true;
   2592c:	2401      	movs	r4, #1
   2592e:	e7f5      	b.n	2591c <check_addr+0x14>
		if (is_remote) {
   25930:	b162      	cbz	r2, 2594c <check_addr+0x44>
	return pkt->frags->data;
   25932:	6883      	ldr	r3, [r0, #8]
   25934:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   25936:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25938:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2593a:	b95a      	cbnz	r2, 25954 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2593c:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2593e:	b9ba      	cbnz	r2, 25970 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25940:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25942:	b9ba      	cbnz	r2, 25974 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25944:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25946:	b1ba      	cbz	r2, 25978 <check_addr+0x70>
   25948:	2200      	movs	r2, #0
   2594a:	e004      	b.n	25956 <check_addr+0x4e>
   2594c:	6883      	ldr	r3, [r0, #8]
   2594e:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   25950:	3318      	adds	r3, #24
   25952:	e7f1      	b.n	25938 <check_addr+0x30>
   25954:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   25956:	4614      	mov	r4, r2
   25958:	2a00      	cmp	r2, #0
   2595a:	d1df      	bne.n	2591c <check_addr+0x14>
   2595c:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2595e:	2210      	movs	r2, #16
   25960:	4619      	mov	r1, r3
   25962:	3004      	adds	r0, #4
   25964:	f004 ffd8 	bl	2a918 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   25968:	2800      	cmp	r0, #0
   2596a:	d1d7      	bne.n	2591c <check_addr+0x14>
		return true;
   2596c:	2401      	movs	r4, #1
   2596e:	e7d5      	b.n	2591c <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25970:	2200      	movs	r2, #0
   25972:	e7f0      	b.n	25956 <check_addr+0x4e>
   25974:	2200      	movs	r2, #0
   25976:	e7ee      	b.n	25956 <check_addr+0x4e>
   25978:	2201      	movs	r2, #1
   2597a:	e7ec      	b.n	25956 <check_addr+0x4e>

0002597c <net_conn_unregister>:
{
   2597c:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   2597e:	4b0d      	ldr	r3, [pc, #52]	; (259b4 <net_conn_unregister+0x38>)
   25980:	4298      	cmp	r0, r3
   25982:	d30d      	bcc.n	259a0 <net_conn_unregister+0x24>
   25984:	33f0      	adds	r3, #240	; 0xf0
   25986:	4298      	cmp	r0, r3
   25988:	d80d      	bhi.n	259a6 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   2598a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2598e:	f013 0f01 	tst.w	r3, #1
   25992:	d00b      	beq.n	259ac <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   25994:	223c      	movs	r2, #60	; 0x3c
   25996:	2100      	movs	r1, #0
   25998:	f005 f852 	bl	2aa40 <memset>
	return 0;
   2599c:	2000      	movs	r0, #0
   2599e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   259a0:	f06f 0015 	mvn.w	r0, #21
   259a4:	bd08      	pop	{r3, pc}
   259a6:	f06f 0015 	mvn.w	r0, #21
   259aa:	bd08      	pop	{r3, pc}
		return -ENOENT;
   259ac:	f06f 0001 	mvn.w	r0, #1
}
   259b0:	bd08      	pop	{r3, pc}
   259b2:	bf00      	nop
   259b4:	20000a04 	.word	0x20000a04

000259b8 <net_conn_register>:
{
   259b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   259bc:	b082      	sub	sp, #8
   259be:	4681      	mov	r9, r0
   259c0:	460d      	mov	r5, r1
   259c2:	4616      	mov	r6, r2
   259c4:	4698      	mov	r8, r3
   259c6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   259ca:	9700      	str	r7, [sp, #0]
   259cc:	f7ff ff0e 	bl	257ec <find_conn_handler>
	if (i != -ENOENT) {
   259d0:	f110 0f02 	cmn.w	r0, #2
   259d4:	f040 80ba 	bne.w	25b4c <net_conn_register+0x194>
   259d8:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   259da:	2c03      	cmp	r4, #3
   259dc:	f300 80aa 	bgt.w	25b34 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   259e0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   259e4:	009a      	lsls	r2, r3, #2
   259e6:	4b60      	ldr	r3, [pc, #384]	; (25b68 <net_conn_register+0x1b0>)
   259e8:	4413      	add	r3, r2
   259ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   259ee:	f013 0f01 	tst.w	r3, #1
   259f2:	d001      	beq.n	259f8 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   259f4:	3401      	adds	r4, #1
   259f6:	e7f0      	b.n	259da <net_conn_register+0x22>
		if (remote_addr) {
   259f8:	2d00      	cmp	r5, #0
   259fa:	d04b      	beq.n	25a94 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   259fc:	882b      	ldrh	r3, [r5, #0]
   259fe:	2b0a      	cmp	r3, #10
   25a00:	f040 80a7 	bne.w	25b52 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   25a04:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25a08:	0093      	lsls	r3, r2, #2
   25a0a:	2218      	movs	r2, #24
   25a0c:	4629      	mov	r1, r5
   25a0e:	4856      	ldr	r0, [pc, #344]	; (25b68 <net_conn_register+0x1b0>)
   25a10:	4418      	add	r0, r3
   25a12:	f7da fc55 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25a16:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a18:	b93b      	cbnz	r3, 25a2a <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25a1a:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25a1c:	bb8b      	cbnz	r3, 25a82 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a1e:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25a20:	bb8b      	cbnz	r3, 25a86 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25a22:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a24:	b38b      	cbz	r3, 25a8a <net_conn_register+0xd2>
   25a26:	2300      	movs	r3, #0
   25a28:	e000      	b.n	25a2c <net_conn_register+0x74>
   25a2a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   25a2c:	b37b      	cbz	r3, 25a8e <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   25a2e:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   25a32:	0122      	lsls	r2, r4, #4
   25a34:	1b12      	subs	r2, r2, r4
   25a36:	0091      	lsls	r1, r2, #2
   25a38:	4b4b      	ldr	r3, [pc, #300]	; (25b68 <net_conn_register+0x1b0>)
   25a3a:	440b      	add	r3, r1
   25a3c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25a40:	f042 0202 	orr.w	r2, r2, #2
   25a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   25a48:	2e00      	cmp	r6, #0
   25a4a:	d036      	beq.n	25aba <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   25a4c:	8833      	ldrh	r3, [r6, #0]
   25a4e:	2b0a      	cmp	r3, #10
   25a50:	f040 8082 	bne.w	25b58 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   25a54:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25a58:	0098      	lsls	r0, r3, #2
   25a5a:	3018      	adds	r0, #24
   25a5c:	2218      	movs	r2, #24
   25a5e:	4631      	mov	r1, r6
   25a60:	4b41      	ldr	r3, [pc, #260]	; (25b68 <net_conn_register+0x1b0>)
   25a62:	4418      	add	r0, r3
   25a64:	f7da fc2c 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25a68:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a6a:	b9b3      	cbnz	r3, 25a9a <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25a6c:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25a6e:	2b00      	cmp	r3, #0
   25a70:	d163      	bne.n	25b3a <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a72:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25a74:	2b00      	cmp	r3, #0
   25a76:	d162      	bne.n	25b3e <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25a78:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25a7a:	2b00      	cmp	r3, #0
   25a7c:	d061      	beq.n	25b42 <net_conn_register+0x18a>
   25a7e:	2300      	movs	r3, #0
   25a80:	e00c      	b.n	25a9c <net_conn_register+0xe4>
   25a82:	2300      	movs	r3, #0
   25a84:	e7d2      	b.n	25a2c <net_conn_register+0x74>
   25a86:	2300      	movs	r3, #0
   25a88:	e7d0      	b.n	25a2c <net_conn_register+0x74>
   25a8a:	2301      	movs	r3, #1
   25a8c:	e7ce      	b.n	25a2c <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   25a8e:	f04f 0a20 	mov.w	sl, #32
   25a92:	e7ce      	b.n	25a32 <net_conn_register+0x7a>
	u8_t rank = 0;
   25a94:	f04f 0a00 	mov.w	sl, #0
   25a98:	e7d6      	b.n	25a48 <net_conn_register+0x90>
   25a9a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   25a9c:	2b00      	cmp	r3, #0
   25a9e:	d052      	beq.n	25b46 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   25aa0:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   25aa4:	0122      	lsls	r2, r4, #4
   25aa6:	1b12      	subs	r2, r2, r4
   25aa8:	0091      	lsls	r1, r2, #2
   25aaa:	4b2f      	ldr	r3, [pc, #188]	; (25b68 <net_conn_register+0x1b0>)
   25aac:	440b      	add	r3, r1
   25aae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25ab2:	f042 0204 	orr.w	r2, r2, #4
   25ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   25aba:	b125      	cbz	r5, 25ac6 <net_conn_register+0x10e>
   25abc:	b11e      	cbz	r6, 25ac6 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   25abe:	882a      	ldrh	r2, [r5, #0]
   25ac0:	8833      	ldrh	r3, [r6, #0]
   25ac2:	429a      	cmp	r2, r3
   25ac4:	d14b      	bne.n	25b5e <net_conn_register+0x1a6>
		if (remote_port) {
   25ac6:	f1b8 0f00 	cmp.w	r8, #0
   25aca:	d00c      	beq.n	25ae6 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   25acc:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   25ad0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25ad4:	009a      	lsls	r2, r3, #2
   25ad6:	4b24      	ldr	r3, [pc, #144]	; (25b68 <net_conn_register+0x1b0>)
   25ad8:	4413      	add	r3, r2
				htons(remote_port);
   25ada:	ea4f 2218 	mov.w	r2, r8, lsr #8
   25ade:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   25ae2:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   25ae6:	b15f      	cbz	r7, 25b00 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   25ae8:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   25aec:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25af0:	0093      	lsls	r3, r2, #2
   25af2:	3318      	adds	r3, #24
   25af4:	4a1c      	ldr	r2, [pc, #112]	; (25b68 <net_conn_register+0x1b0>)
   25af6:	4413      	add	r3, r2
				htons(local_port);
   25af8:	0a3a      	lsrs	r2, r7, #8
   25afa:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   25afe:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   25b00:	0122      	lsls	r2, r4, #4
   25b02:	1b12      	subs	r2, r2, r4
   25b04:	0091      	lsls	r1, r2, #2
   25b06:	4b18      	ldr	r3, [pc, #96]	; (25b68 <net_conn_register+0x1b0>)
   25b08:	440b      	add	r3, r1
   25b0a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25b0e:	f042 0201 	orr.w	r2, r2, #1
   25b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   25b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25b18:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   25b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25b1c:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   25b1e:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   25b22:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   25b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25b28:	b1e3      	cbz	r3, 25b64 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   25b2a:	4b0f      	ldr	r3, [pc, #60]	; (25b68 <net_conn_register+0x1b0>)
   25b2c:	440b      	add	r3, r1
   25b2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25b30:	6013      	str	r3, [r2, #0]
		return 0;
   25b32:	2000      	movs	r0, #0
}
   25b34:	b002      	add	sp, #8
   25b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25b3a:	2300      	movs	r3, #0
   25b3c:	e7ae      	b.n	25a9c <net_conn_register+0xe4>
   25b3e:	2300      	movs	r3, #0
   25b40:	e7ac      	b.n	25a9c <net_conn_register+0xe4>
   25b42:	2301      	movs	r3, #1
   25b44:	e7aa      	b.n	25a9c <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   25b46:	f04a 0a10 	orr.w	sl, sl, #16
   25b4a:	e7ab      	b.n	25aa4 <net_conn_register+0xec>
		return -EALREADY;
   25b4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25b50:	e7f0      	b.n	25b34 <net_conn_register+0x17c>
				return -EINVAL;
   25b52:	f06f 0015 	mvn.w	r0, #21
   25b56:	e7ed      	b.n	25b34 <net_conn_register+0x17c>
				return -EINVAL;
   25b58:	f06f 0015 	mvn.w	r0, #21
   25b5c:	e7ea      	b.n	25b34 <net_conn_register+0x17c>
				return -EINVAL;
   25b5e:	f06f 0015 	mvn.w	r0, #21
   25b62:	e7e7      	b.n	25b34 <net_conn_register+0x17c>
		return 0;
   25b64:	2000      	movs	r0, #0
   25b66:	e7e5      	b.n	25b34 <net_conn_register+0x17c>
   25b68:	20000a04 	.word	0x20000a04

00025b6c <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   25b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b70:	b089      	sub	sp, #36	; 0x24
   25b72:	4605      	mov	r5, r0
   25b74:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25b76:	2811      	cmp	r0, #17
   25b78:	d005      	beq.n	25b86 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25b7a:	2806      	cmp	r0, #6
   25b7c:	d015      	beq.n	25baa <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   25b7e:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   25b80:	b009      	add	sp, #36	; 0x24
   25b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   25b86:	a903      	add	r1, sp, #12
   25b88:	4630      	mov	r0, r6
   25b8a:	f7fd ff73 	bl	23a74 <net_udp_get_hdr>
		if (!udp_hdr) {
   25b8e:	b150      	cbz	r0, 25ba6 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   25b90:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   25b94:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   25b98:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   25b9c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   25ba0:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25ba2:	2400      	movs	r4, #0
   25ba4:	e01b      	b.n	25bde <net_conn_input+0x72>
			return NET_DROP;
   25ba6:	2002      	movs	r0, #2
   25ba8:	e7ea      	b.n	25b80 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   25baa:	a903      	add	r1, sp, #12
   25bac:	4630      	mov	r0, r6
   25bae:	f7fe fbcd 	bl	2434c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   25bb2:	b130      	cbz	r0, 25bc2 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   25bb4:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   25bb8:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   25bbc:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   25bc0:	e7ec      	b.n	25b9c <net_conn_input+0x30>
			return NET_DROP;
   25bc2:	2002      	movs	r0, #2
   25bc4:	e7dc      	b.n	25b80 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   25bc6:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   25bca:	0082      	lsls	r2, r0, #2
   25bcc:	3218      	adds	r2, #24
   25bce:	4866      	ldr	r0, [pc, #408]	; (25d68 <net_conn_input+0x1fc>)
   25bd0:	1882      	adds	r2, r0, r2
   25bd2:	9201      	str	r2, [sp, #4]
   25bd4:	8852      	ldrh	r2, [r2, #2]
   25bd6:	b1fa      	cbz	r2, 25c18 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   25bd8:	4593      	cmp	fp, r2
   25bda:	d01d      	beq.n	25c18 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25bdc:	3401      	adds	r4, #1
   25bde:	2c03      	cmp	r4, #3
   25be0:	dc4d      	bgt.n	25c7e <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   25be2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25be6:	009a      	lsls	r2, r3, #2
   25be8:	4b5f      	ldr	r3, [pc, #380]	; (25d68 <net_conn_input+0x1fc>)
   25bea:	4413      	add	r3, r2
   25bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25bf0:	f013 0f01 	tst.w	r3, #1
   25bf4:	d0f2      	beq.n	25bdc <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   25bf6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25bfa:	0091      	lsls	r1, r2, #2
   25bfc:	4a5a      	ldr	r2, [pc, #360]	; (25d68 <net_conn_input+0x1fc>)
   25bfe:	440a      	add	r2, r1
   25c00:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25c04:	4295      	cmp	r5, r2
   25c06:	d1e9      	bne.n	25bdc <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   25c08:	4a57      	ldr	r2, [pc, #348]	; (25d68 <net_conn_input+0x1fc>)
   25c0a:	4411      	add	r1, r2
   25c0c:	884a      	ldrh	r2, [r1, #2]
   25c0e:	2a00      	cmp	r2, #0
   25c10:	d0d9      	beq.n	25bc6 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   25c12:	4591      	cmp	r9, r2
   25c14:	d1e2      	bne.n	25bdc <net_conn_input+0x70>
   25c16:	e7d6      	b.n	25bc6 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25c18:	f013 0f02 	tst.w	r3, #2
   25c1c:	d120      	bne.n	25c60 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   25c1e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25c22:	009a      	lsls	r2, r3, #2
   25c24:	4b50      	ldr	r3, [pc, #320]	; (25d68 <net_conn_input+0x1fc>)
   25c26:	4413      	add	r3, r2
   25c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25c2c:	f013 0f04 	tst.w	r3, #4
   25c30:	d11d      	bne.n	25c6e <net_conn_input+0x102>
		if (best_match >= 0 &&
   25c32:	2f00      	cmp	r7, #0
   25c34:	db07      	blt.n	25c46 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   25c36:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   25c3a:	009a      	lsls	r2, r3, #2
   25c3c:	4b4a      	ldr	r3, [pc, #296]	; (25d68 <net_conn_input+0x1fc>)
   25c3e:	4413      	add	r3, r2
   25c40:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   25c42:	2b00      	cmp	r3, #0
   25c44:	d1ca      	bne.n	25bdc <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   25c46:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25c4a:	009a      	lsls	r2, r3, #2
   25c4c:	4b46      	ldr	r3, [pc, #280]	; (25d68 <net_conn_input+0x1fc>)
   25c4e:	4413      	add	r3, r2
   25c50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   25c54:	4598      	cmp	r8, r3
   25c56:	dac1      	bge.n	25bdc <net_conn_input+0x70>
			best_rank = conns[i].rank;
   25c58:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   25c5c:	4627      	mov	r7, r4
   25c5e:	e7bd      	b.n	25bdc <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   25c60:	2201      	movs	r2, #1
   25c62:	4630      	mov	r0, r6
   25c64:	f7ff fe50 	bl	25908 <check_addr>
   25c68:	2800      	cmp	r0, #0
   25c6a:	d0b7      	beq.n	25bdc <net_conn_input+0x70>
   25c6c:	e7d7      	b.n	25c1e <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   25c6e:	2200      	movs	r2, #0
   25c70:	9901      	ldr	r1, [sp, #4]
   25c72:	4630      	mov	r0, r6
   25c74:	f7ff fe48 	bl	25908 <check_addr>
   25c78:	2800      	cmp	r0, #0
   25c7a:	d0af      	beq.n	25bdc <net_conn_input+0x70>
   25c7c:	e7d9      	b.n	25c32 <net_conn_input+0xc6>
	if (best_match >= 0) {
   25c7e:	2f00      	cmp	r7, #0
   25c80:	db44      	blt.n	25d0c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   25c82:	2d11      	cmp	r5, #17
   25c84:	d014      	beq.n	25cb0 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   25c86:	2d06      	cmp	r5, #6
   25c88:	d023      	beq.n	25cd2 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   25c8a:	4c37      	ldr	r4, [pc, #220]	; (25d68 <net_conn_input+0x1fc>)
   25c8c:	013a      	lsls	r2, r7, #4
   25c8e:	1bd1      	subs	r1, r2, r7
   25c90:	008b      	lsls	r3, r1, #2
   25c92:	4423      	add	r3, r4
   25c94:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   25c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   25c9a:	4631      	mov	r1, r6
   25c9c:	4618      	mov	r0, r3
   25c9e:	47c0      	blx	r8
   25ca0:	2802      	cmp	r0, #2
   25ca2:	d03d      	beq.n	25d20 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25ca4:	2d11      	cmp	r5, #17
   25ca6:	d023      	beq.n	25cf0 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25ca8:	2d06      	cmp	r5, #6
   25caa:	d029      	beq.n	25d00 <net_conn_input+0x194>
		return NET_OK;
   25cac:	2000      	movs	r0, #0
   25cae:	e767      	b.n	25b80 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   25cb0:	68b1      	ldr	r1, [r6, #8]
   25cb2:	4630      	mov	r0, r6
   25cb4:	f7fd fe6b 	bl	2398e <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   25cb8:	68b1      	ldr	r1, [r6, #8]
   25cba:	4630      	mov	r0, r6
   25cbc:	f7fd feb4 	bl	23a28 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   25cc0:	4582      	cmp	sl, r0
   25cc2:	d0e2      	beq.n	25c8a <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   25cc4:	4a29      	ldr	r2, [pc, #164]	; (25d6c <net_conn_input+0x200>)
   25cc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   25cca:	3301      	adds	r3, #1
   25ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   25cd0:	e026      	b.n	25d20 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   25cd2:	68b1      	ldr	r1, [r6, #8]
   25cd4:	4630      	mov	r0, r6
   25cd6:	f7fe fc9e 	bl	24616 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   25cda:	68b1      	ldr	r1, [r6, #8]
   25cdc:	4630      	mov	r0, r6
   25cde:	f7fe fc74 	bl	245ca <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   25ce2:	4582      	cmp	sl, r0
   25ce4:	d0d1      	beq.n	25c8a <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   25ce6:	4a21      	ldr	r2, [pc, #132]	; (25d6c <net_conn_input+0x200>)
   25ce8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   25cea:	3301      	adds	r3, #1
   25cec:	6613      	str	r3, [r2, #96]	; 0x60
   25cee:	e017      	b.n	25d20 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   25cf0:	4a1e      	ldr	r2, [pc, #120]	; (25d6c <net_conn_input+0x200>)
   25cf2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   25cf6:	3301      	adds	r3, #1
   25cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   25cfc:	2000      	movs	r0, #0
   25cfe:	e73f      	b.n	25b80 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   25d00:	4a1a      	ldr	r2, [pc, #104]	; (25d6c <net_conn_input+0x200>)
   25d02:	6d53      	ldr	r3, [r2, #84]	; 0x54
   25d04:	3301      	adds	r3, #1
   25d06:	6553      	str	r3, [r2, #84]	; 0x54
   25d08:	2000      	movs	r0, #0
   25d0a:	e739      	b.n	25b80 <net_conn_input+0x14>
	return pkt->family;
   25d0c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   25d10:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   25d14:	2b0a      	cmp	r3, #10
   25d16:	d009      	beq.n	25d2c <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   25d18:	2b0a      	cmp	r3, #10
   25d1a:	d00d      	beq.n	25d38 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25d1c:	2d06      	cmp	r5, #6
   25d1e:	d012      	beq.n	25d46 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25d20:	2d11      	cmp	r5, #17
   25d22:	d015      	beq.n	25d50 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25d24:	2d06      	cmp	r5, #6
   25d26:	d019      	beq.n	25d5c <net_conn_input+0x1f0>
	return NET_DROP;
   25d28:	2002      	movs	r0, #2
   25d2a:	e729      	b.n	25b80 <net_conn_input+0x14>
	return pkt->frags->data;
   25d2c:	68b2      	ldr	r2, [r6, #8]
   25d2e:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   25d30:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   25d32:	2aff      	cmp	r2, #255	; 0xff
   25d34:	d1f0      	bne.n	25d18 <net_conn_input+0x1ac>
   25d36:	e7f3      	b.n	25d20 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   25d38:	2300      	movs	r3, #0
   25d3a:	2204      	movs	r2, #4
   25d3c:	2101      	movs	r1, #1
   25d3e:	4630      	mov	r0, r6
   25d40:	f7f9 fc94 	bl	1f66c <net_icmpv6_send_error>
   25d44:	e7ea      	b.n	25d1c <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   25d46:	4a09      	ldr	r2, [pc, #36]	; (25d6c <net_conn_input+0x200>)
   25d48:	6f93      	ldr	r3, [r2, #120]	; 0x78
   25d4a:	3301      	adds	r3, #1
   25d4c:	6793      	str	r3, [r2, #120]	; 0x78
   25d4e:	e7e7      	b.n	25d20 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   25d50:	4a06      	ldr	r2, [pc, #24]	; (25d6c <net_conn_input+0x200>)
   25d52:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   25d54:	3301      	adds	r3, #1
   25d56:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   25d58:	2002      	movs	r0, #2
   25d5a:	e711      	b.n	25b80 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   25d5c:	4a03      	ldr	r2, [pc, #12]	; (25d6c <net_conn_input+0x200>)
   25d5e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   25d60:	3301      	adds	r3, #1
   25d62:	65d3      	str	r3, [r2, #92]	; 0x5c
   25d64:	2002      	movs	r0, #2
   25d66:	e70b      	b.n	25b80 <net_conn_input+0x14>
   25d68:	20000a04 	.word	0x20000a04
   25d6c:	20002fd0 	.word	0x20002fd0

00025d70 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   25d70:	4770      	bx	lr

00025d72 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   25d72:	297f      	cmp	r1, #127	; 0x7f
   25d74:	d912      	bls.n	25d9c <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   25d76:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   25d7a:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   25d7e:	d311      	bcc.n	25da4 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   25d80:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   25d84:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   25d88:	d310      	bcc.n	25dac <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   25d8a:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   25d8e:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   25d92:	d20f      	bcs.n	25db4 <compute_rlen_size+0x42>
		*size = 4;
   25d94:	2304      	movs	r3, #4
   25d96:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   25d98:	2000      	movs	r0, #0
   25d9a:	4770      	bx	lr
		*size = 1;
   25d9c:	2301      	movs	r3, #1
   25d9e:	8003      	strh	r3, [r0, #0]
	return 0;
   25da0:	2000      	movs	r0, #0
   25da2:	4770      	bx	lr
		*size = 2;
   25da4:	2302      	movs	r3, #2
   25da6:	8003      	strh	r3, [r0, #0]
	return 0;
   25da8:	2000      	movs	r0, #0
   25daa:	4770      	bx	lr
		*size = 3;
   25dac:	2303      	movs	r3, #3
   25dae:	8003      	strh	r3, [r0, #0]
	return 0;
   25db0:	2000      	movs	r0, #0
   25db2:	4770      	bx	lr
		return -EINVAL;
   25db4:	f06f 0015 	mvn.w	r0, #21
}
   25db8:	4770      	bx	lr

00025dba <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   25dba:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   25dbc:	2200      	movs	r2, #0
   25dbe:	e004      	b.n	25dca <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   25dc0:	1c53      	adds	r3, r2, #1
   25dc2:	b2db      	uxtb	r3, r3
   25dc4:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   25dc6:	b139      	cbz	r1, 25dd8 <rlen_encode+0x1e>
		buf[i++] = encoded;
   25dc8:	461a      	mov	r2, r3
		encoded = len % 128;
   25dca:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   25dce:	09c9      	lsrs	r1, r1, #7
   25dd0:	d0f6      	beq.n	25dc0 <rlen_encode+0x6>
			encoded = encoded | 128;
   25dd2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   25dd6:	e7f3      	b.n	25dc0 <rlen_encode+0x6>

	return 0;
}
   25dd8:	2000      	movs	r0, #0
   25dda:	bc10      	pop	{r4}
   25ddc:	4770      	bx	lr

00025dde <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   25dde:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   25de0:	2400      	movs	r4, #0
	u32_t mult = 1;
   25de2:	2601      	movs	r6, #1
	u32_t value = 0;
   25de4:	4627      	mov	r7, r4
   25de6:	e000      	b.n	25dea <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   25de8:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   25dea:	2c03      	cmp	r4, #3
   25dec:	d810      	bhi.n	25e10 <rlen_decode+0x32>
   25dee:	429c      	cmp	r4, r3
   25df0:	d211      	bcs.n	25e16 <rlen_decode+0x38>
		encoded = buf[i++];
   25df2:	1c65      	adds	r5, r4, #1
   25df4:	b2ad      	uxth	r5, r5
   25df6:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   25df8:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   25dfc:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   25e00:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   25e02:	f014 0f80 	tst.w	r4, #128	; 0x80
   25e06:	d1ef      	bne.n	25de8 <rlen_decode+0xa>

	*rlen = value;
   25e08:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   25e0a:	800d      	strh	r5, [r1, #0]

	return 0;
   25e0c:	2000      	movs	r0, #0
   25e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   25e10:	f06f 000b 	mvn.w	r0, #11
   25e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e16:	f06f 000b 	mvn.w	r0, #11
}
   25e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025e1c <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   25e1c:	b410      	push	{r4}
   25e1e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   25e22:	2a03      	cmp	r2, #3
   25e24:	d912      	bls.n	25e4c <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   25e26:	011b      	lsls	r3, r3, #4
   25e28:	b2db      	uxtb	r3, r3
   25e2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   25e2e:	f002 020f 	and.w	r2, r2, #15
   25e32:	4413      	add	r3, r2
   25e34:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   25e36:	2302      	movs	r3, #2
   25e38:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   25e3a:	0a23      	lsrs	r3, r4, #8
   25e3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   25e40:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   25e42:	2304      	movs	r3, #4
   25e44:	800b      	strh	r3, [r1, #0]

	return 0;
   25e46:	2000      	movs	r0, #0
}
   25e48:	bc10      	pop	{r4}
   25e4a:	4770      	bx	lr
		return -ENOMEM;
   25e4c:	f06f 000b 	mvn.w	r0, #11
   25e50:	e7fa      	b.n	25e48 <pack_pkt_id+0x2c>

00025e52 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   25e52:	2a01      	cmp	r2, #1
   25e54:	d90d      	bls.n	25e72 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   25e56:	011b      	lsls	r3, r3, #4
   25e58:	b2db      	uxtb	r3, r3
   25e5a:	f89d 2000 	ldrb.w	r2, [sp]
   25e5e:	f002 020f 	and.w	r2, r2, #15
   25e62:	4413      	add	r3, r2
   25e64:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   25e66:	2300      	movs	r3, #0
   25e68:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   25e6a:	2202      	movs	r2, #2
   25e6c:	800a      	strh	r2, [r1, #0]

	return 0;
   25e6e:	4618      	mov	r0, r3
   25e70:	4770      	bx	lr
		return -ENOMEM;
   25e72:	f06f 000b 	mvn.w	r0, #11
}
   25e76:	4770      	bx	lr

00025e78 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   25e78:	2903      	cmp	r1, #3
   25e7a:	d911      	bls.n	25ea0 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   25e7c:	7841      	ldrb	r1, [r0, #1]
   25e7e:	2902      	cmp	r1, #2
   25e80:	d111      	bne.n	25ea6 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   25e82:	7801      	ldrb	r1, [r0, #0]
   25e84:	0909      	lsrs	r1, r1, #4
   25e86:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25e88:	7802      	ldrb	r2, [r0, #0]
   25e8a:	f002 020f 	and.w	r2, r2, #15
   25e8e:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   25e90:	8842      	ldrh	r2, [r0, #2]
   25e92:	0a13      	lsrs	r3, r2, #8
   25e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25e98:	9a00      	ldr	r2, [sp, #0]
   25e9a:	8013      	strh	r3, [r2, #0]

	return 0;
   25e9c:	2000      	movs	r0, #0
   25e9e:	4770      	bx	lr
		return -EINVAL;
   25ea0:	f06f 0015 	mvn.w	r0, #21
   25ea4:	4770      	bx	lr
		return -EINVAL;
   25ea6:	f06f 0015 	mvn.w	r0, #21
}
   25eaa:	4770      	bx	lr

00025eac <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   25eac:	b510      	push	{r4, lr}
   25eae:	b084      	sub	sp, #16
   25eb0:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   25eb2:	9200      	str	r2, [sp, #0]
   25eb4:	f10d 030e 	add.w	r3, sp, #14
   25eb8:	f10d 020f 	add.w	r2, sp, #15
   25ebc:	f7ff ffdc 	bl	25e78 <unpack_pktid>
	if (rc != 0) {
   25ec0:	4603      	mov	r3, r0
   25ec2:	b948      	cbnz	r0, 25ed8 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   25ec4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25ec8:	42a2      	cmp	r2, r4
   25eca:	d10b      	bne.n	25ee4 <unpack_pktid_validate+0x38>
   25ecc:	f89d 100e 	ldrb.w	r1, [sp, #14]
   25ed0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   25ed4:	4291      	cmp	r1, r2
   25ed6:	d102      	bne.n	25ede <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   25ed8:	4618      	mov	r0, r3
   25eda:	b004      	add	sp, #16
   25edc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25ede:	f06f 0315 	mvn.w	r3, #21
   25ee2:	e7f9      	b.n	25ed8 <unpack_pktid_validate+0x2c>
   25ee4:	f06f 0315 	mvn.w	r3, #21
   25ee8:	e7f6      	b.n	25ed8 <unpack_pktid_validate+0x2c>

00025eea <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   25eea:	2901      	cmp	r1, #1
   25eec:	d90d      	bls.n	25f0a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   25eee:	7801      	ldrb	r1, [r0, #0]
   25ef0:	0909      	lsrs	r1, r1, #4
   25ef2:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25ef4:	7802      	ldrb	r2, [r0, #0]
   25ef6:	f002 020f 	and.w	r2, r2, #15
   25efa:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   25efc:	7843      	ldrb	r3, [r0, #1]
   25efe:	b90b      	cbnz	r3, 25f04 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   25f00:	2000      	movs	r0, #0
}
   25f02:	4770      	bx	lr
		return -EINVAL;
   25f04:	f06f 0015 	mvn.w	r0, #21
   25f08:	4770      	bx	lr
		return -EINVAL;
   25f0a:	f06f 0015 	mvn.w	r0, #21
   25f0e:	4770      	bx	lr

00025f10 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   25f10:	b530      	push	{r4, r5, lr}
   25f12:	b083      	sub	sp, #12
   25f14:	4614      	mov	r4, r2
   25f16:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   25f18:	f10d 0306 	add.w	r3, sp, #6
   25f1c:	f10d 0207 	add.w	r2, sp, #7
   25f20:	f7ff ffe3 	bl	25eea <unpack_zerolen>
	if (rc != 0) {
   25f24:	4603      	mov	r3, r0
   25f26:	b938      	cbnz	r0, 25f38 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   25f28:	f89d 2007 	ldrb.w	r2, [sp, #7]
   25f2c:	42a2      	cmp	r2, r4
   25f2e:	d109      	bne.n	25f44 <unpack_zerolen_validate+0x34>
   25f30:	f89d 2006 	ldrb.w	r2, [sp, #6]
   25f34:	42aa      	cmp	r2, r5
   25f36:	d102      	bne.n	25f3e <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   25f38:	4618      	mov	r0, r3
   25f3a:	b003      	add	sp, #12
   25f3c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25f3e:	f06f 0315 	mvn.w	r3, #21
   25f42:	e7f9      	b.n	25f38 <unpack_zerolen_validate+0x28>
   25f44:	f06f 0315 	mvn.w	r3, #21
   25f48:	e7f6      	b.n	25f38 <unpack_zerolen_validate+0x28>

00025f4a <mqtt_pack_puback>:
{
   25f4a:	b500      	push	{lr}
   25f4c:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   25f4e:	9301      	str	r3, [sp, #4]
   25f50:	2300      	movs	r3, #0
   25f52:	9300      	str	r3, [sp, #0]
   25f54:	2304      	movs	r3, #4
   25f56:	f7ff ff61 	bl	25e1c <pack_pkt_id>
}
   25f5a:	b003      	add	sp, #12
   25f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00025f60 <mqtt_pack_pubrec>:
{
   25f60:	b500      	push	{lr}
   25f62:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   25f64:	9301      	str	r3, [sp, #4]
   25f66:	2300      	movs	r3, #0
   25f68:	9300      	str	r3, [sp, #0]
   25f6a:	2305      	movs	r3, #5
   25f6c:	f7ff ff56 	bl	25e1c <pack_pkt_id>
}
   25f70:	b003      	add	sp, #12
   25f72:	f85d fb04 	ldr.w	pc, [sp], #4

00025f76 <mqtt_pack_pubrel>:
{
   25f76:	b500      	push	{lr}
   25f78:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   25f7a:	9301      	str	r3, [sp, #4]
   25f7c:	2302      	movs	r3, #2
   25f7e:	9300      	str	r3, [sp, #0]
   25f80:	2306      	movs	r3, #6
   25f82:	f7ff ff4b 	bl	25e1c <pack_pkt_id>
}
   25f86:	b003      	add	sp, #12
   25f88:	f85d fb04 	ldr.w	pc, [sp], #4

00025f8c <mqtt_pack_pubcomp>:
{
   25f8c:	b500      	push	{lr}
   25f8e:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   25f90:	9301      	str	r3, [sp, #4]
   25f92:	2300      	movs	r3, #0
   25f94:	9300      	str	r3, [sp, #0]
   25f96:	2307      	movs	r3, #7
   25f98:	f7ff ff40 	bl	25e1c <pack_pkt_id>
}
   25f9c:	b003      	add	sp, #12
   25f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00025fa2 <mqtt_pack_connect>:
{
   25fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25fa6:	b082      	sub	sp, #8
   25fa8:	4605      	mov	r5, r0
   25faa:	460e      	mov	r6, r1
   25fac:	4617      	mov	r7, r2
   25fae:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   25fb0:	891b      	ldrh	r3, [r3, #8]
   25fb2:	1c99      	adds	r1, r3, #2
   25fb4:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   25fb6:	7aa2      	ldrb	r2, [r4, #10]
   25fb8:	f012 0f01 	tst.w	r2, #1
   25fbc:	d009      	beq.n	25fd2 <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   25fbe:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   25fc0:	8aa3      	ldrh	r3, [r4, #20]
   25fc2:	fa13 f181 	uxtah	r1, r3, r1
   25fc6:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   25fc8:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   25fca:	8ba3      	ldrh	r3, [r4, #28]
   25fcc:	fa13 f181 	uxtah	r1, r3, r1
   25fd0:	b289      	uxth	r1, r1
	if (msg->user_name) {
   25fd2:	6a23      	ldr	r3, [r4, #32]
   25fd4:	b123      	cbz	r3, 25fe0 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   25fd6:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   25fd8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   25fda:	fa13 f181 	uxtah	r1, r3, r1
   25fde:	b289      	uxth	r1, r1
	if (msg->password) {
   25fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25fe2:	b123      	cbz	r3, 25fee <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   25fe4:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   25fe6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   25fe8:	fa13 f181 	uxtah	r1, r3, r1
   25fec:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   25fee:	310a      	adds	r1, #10
   25ff0:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   25ff4:	4651      	mov	r1, sl
   25ff6:	f10d 0006 	add.w	r0, sp, #6
   25ffa:	f7ff feba 	bl	25d72 <compute_rlen_size>
	if (rc != 0) {
   25ffe:	4681      	mov	r9, r0
   26000:	2800      	cmp	r0, #0
   26002:	f040 80b6 	bne.w	26172 <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   26006:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   2600a:	44d0      	add	r8, sl
   2600c:	fa1f f888 	uxth.w	r8, r8
   26010:	f108 0801 	add.w	r8, r8, #1
   26014:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   26018:	45b8      	cmp	r8, r7
   2601a:	f200 80ad 	bhi.w	26178 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   2601e:	4628      	mov	r0, r5
   26020:	2310      	movs	r3, #16
   26022:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   26026:	4651      	mov	r1, sl
   26028:	f7ff fec7 	bl	25dba <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2602c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   26030:	1c43      	adds	r3, r0, #1
   26032:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   26034:	2200      	movs	r2, #0
   26036:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   26038:	1c59      	adds	r1, r3, #1
   2603a:	2204      	movs	r2, #4
   2603c:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   2603e:	1c99      	adds	r1, r3, #2
   26040:	274d      	movs	r7, #77	; 0x4d
   26042:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   26044:	1cd9      	adds	r1, r3, #3
   26046:	2751      	movs	r7, #81	; 0x51
   26048:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   2604a:	189f      	adds	r7, r3, r2
   2604c:	2154      	movs	r1, #84	; 0x54
   2604e:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   26050:	1d5f      	adds	r7, r3, #5
   26052:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   26054:	1d99      	adds	r1, r3, #6
   26056:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   26058:	1ddf      	adds	r7, r3, #7
   2605a:	6a22      	ldr	r2, [r4, #32]
   2605c:	2a00      	cmp	r2, #0
   2605e:	d05f      	beq.n	26120 <mqtt_pack_connect+0x17e>
   26060:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   26064:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   26066:	2a00      	cmp	r2, #0
   26068:	d05c      	beq.n	26124 <mqtt_pack_connect+0x182>
   2606a:	2240      	movs	r2, #64	; 0x40
   2606c:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   2606e:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   26070:	f012 0f01 	tst.w	r2, #1
   26074:	d058      	beq.n	26128 <mqtt_pack_connect+0x186>
   26076:	2220      	movs	r2, #32
   26078:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   2607a:	7ae2      	ldrb	r2, [r4, #11]
   2607c:	00d2      	lsls	r2, r2, #3
   2607e:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   26082:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   26084:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   26086:	f011 0f01 	tst.w	r1, #1
   2608a:	d04f      	beq.n	2612c <mqtt_pack_connect+0x18a>
   2608c:	2104      	movs	r1, #4
   2608e:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   26090:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   26092:	f012 0f01 	tst.w	r2, #1
   26096:	d04b      	beq.n	26130 <mqtt_pack_connect+0x18e>
   26098:	2202      	movs	r2, #2
   2609a:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2609c:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   2609e:	3308      	adds	r3, #8
   260a0:	8be1      	ldrh	r1, [r4, #30]
   260a2:	0a0a      	lsrs	r2, r1, #8
   260a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   260a8:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   260aa:	f100 030b 	add.w	r3, r0, #11
   260ae:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   260b0:	8921      	ldrh	r1, [r4, #8]
   260b2:	0a0a      	lsrs	r2, r1, #8
   260b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   260b8:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   260ba:	300d      	adds	r0, #13
   260bc:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   260be:	8922      	ldrh	r2, [r4, #8]
   260c0:	6861      	ldr	r1, [r4, #4]
   260c2:	19e8      	adds	r0, r5, r7
   260c4:	f7da f8fc 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   260c8:	8920      	ldrh	r0, [r4, #8]
   260ca:	4438      	add	r0, r7
   260cc:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   260ce:	7aa3      	ldrb	r3, [r4, #10]
   260d0:	f013 0f01 	tst.w	r3, #1
   260d4:	d12e      	bne.n	26134 <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   260d6:	6a23      	ldr	r3, [r4, #32]
   260d8:	b173      	cbz	r3, 260f8 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   260da:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   260dc:	0a13      	lsrs	r3, r2, #8
   260de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   260e2:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   260e4:	3002      	adds	r0, #2
   260e6:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   260e8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   260ea:	6a21      	ldr	r1, [r4, #32]
   260ec:	19e8      	adds	r0, r5, r7
   260ee:	f7da f8e7 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   260f2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   260f4:	4438      	add	r0, r7
   260f6:	b280      	uxth	r0, r0
	if (msg->password) {
   260f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   260fa:	b15b      	cbz	r3, 26114 <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   260fc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   260fe:	0a13      	lsrs	r3, r2, #8
   26100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26104:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   26106:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   26108:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2610a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2610c:	fa15 f080 	uxtah	r0, r5, r0
   26110:	f7da f8d6 	bl	2c0 <memcpy>
	*length = total_buf_size;
   26114:	f8a6 8000 	strh.w	r8, [r6]
}
   26118:	4648      	mov	r0, r9
   2611a:	b002      	add	sp, #8
   2611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   26120:	2100      	movs	r1, #0
   26122:	e79f      	b.n	26064 <mqtt_pack_connect+0xc2>
   26124:	2200      	movs	r2, #0
   26126:	e7a1      	b.n	2606c <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   26128:	2200      	movs	r2, #0
   2612a:	e7a5      	b.n	26078 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   2612c:	2100      	movs	r1, #0
   2612e:	e7ae      	b.n	2608e <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   26130:	2200      	movs	r2, #0
   26132:	e7b2      	b.n	2609a <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   26134:	8aa2      	ldrh	r2, [r4, #20]
   26136:	0a13      	lsrs	r3, r2, #8
   26138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2613c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2613e:	3002      	adds	r0, #2
   26140:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   26142:	8aa2      	ldrh	r2, [r4, #20]
   26144:	6921      	ldr	r1, [r4, #16]
   26146:	19e8      	adds	r0, r5, r7
   26148:	f7da f8ba 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   2614c:	8aa0      	ldrh	r0, [r4, #20]
   2614e:	4407      	add	r7, r0
   26150:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   26152:	8ba2      	ldrh	r2, [r4, #28]
   26154:	0a13      	lsrs	r3, r2, #8
   26156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2615a:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   2615c:	3702      	adds	r7, #2
   2615e:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   26160:	8ba2      	ldrh	r2, [r4, #28]
   26162:	69a1      	ldr	r1, [r4, #24]
   26164:	19e8      	adds	r0, r5, r7
   26166:	f7da f8ab 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   2616a:	8ba0      	ldrh	r0, [r4, #28]
   2616c:	4438      	add	r0, r7
   2616e:	b280      	uxth	r0, r0
   26170:	e7b1      	b.n	260d6 <mqtt_pack_connect+0x134>
		return -EINVAL;
   26172:	f06f 0915 	mvn.w	r9, #21
   26176:	e7cf      	b.n	26118 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   26178:	f06f 090b 	mvn.w	r9, #11
   2617c:	e7cc      	b.n	26118 <mqtt_pack_connect+0x176>
	...

00026180 <mqtt_unpack_suback>:
{
   26180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26184:	b087      	sub	sp, #28
   26186:	461d      	mov	r5, r3
   26188:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   2618c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   2618e:	2300      	movs	r3, #0
   26190:	8013      	strh	r3, [r2, #0]
	*items = 0;
   26192:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   26194:	2f00      	cmp	r7, #0
   26196:	d037      	beq.n	26208 <mqtt_unpack_suback+0x88>
   26198:	4604      	mov	r4, r0
   2619a:	4689      	mov	r9, r1
   2619c:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   2619e:	7803      	ldrb	r3, [r0, #0]
   261a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   261a4:	2a90      	cmp	r2, #144	; 0x90
   261a6:	d138      	bne.n	2621a <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   261a8:	1e4b      	subs	r3, r1, #1
   261aa:	b29b      	uxth	r3, r3
   261ac:	1c42      	adds	r2, r0, #1
   261ae:	f10d 0116 	add.w	r1, sp, #22
   261b2:	a804      	add	r0, sp, #16
   261b4:	f7ff fe13 	bl	25dde <rlen_decode>
	if (rc != 0) {
   261b8:	4603      	mov	r3, r0
   261ba:	2800      	cmp	r0, #0
   261bc:	d136      	bne.n	2622c <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   261be:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   261c2:	9804      	ldr	r0, [sp, #16]
   261c4:	180a      	adds	r2, r1, r0
   261c6:	3201      	adds	r2, #1
   261c8:	454a      	cmp	r2, r9
   261ca:	d838      	bhi.n	2623e <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   261cc:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   261ce:	fa14 f282 	uxtah	r2, r4, r2
   261d2:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   261d4:	0a02      	lsrs	r2, r0, #8
   261d6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   261da:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   261de:	3103      	adds	r1, #3
   261e0:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   261e2:	9a04      	ldr	r2, [sp, #16]
   261e4:	3a02      	subs	r2, #2
   261e6:	b2d2      	uxtb	r2, r2
   261e8:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   261ea:	4297      	cmp	r7, r2
   261ec:	d335      	bcc.n	2625a <mqtt_unpack_suback+0xda>
   261ee:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   261f0:	7828      	ldrb	r0, [r5, #0]
   261f2:	4282      	cmp	r2, r0
   261f4:	d242      	bcs.n	2627c <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   261f6:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   261f8:	2802      	cmp	r0, #2
   261fa:	d837      	bhi.n	2626c <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   261fc:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   261fe:	3101      	adds	r1, #1
   26200:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   26202:	3201      	adds	r2, #1
   26204:	b2d2      	uxtb	r2, r2
   26206:	e7f3      	b.n	261f0 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   26208:	f240 321a 	movw	r2, #794	; 0x31a
   2620c:	491d      	ldr	r1, [pc, #116]	; (26284 <mqtt_unpack_suback+0x104>)
   2620e:	481e      	ldr	r0, [pc, #120]	; (26288 <mqtt_unpack_suback+0x108>)
   26210:	f7dc ff2a 	bl	3068 <printk>
		return -EINVAL;
   26214:	f06f 0315 	mvn.w	r3, #21
   26218:	e030      	b.n	2627c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   2621a:	f240 321f 	movw	r2, #799	; 0x31f
   2621e:	4919      	ldr	r1, [pc, #100]	; (26284 <mqtt_unpack_suback+0x104>)
   26220:	481a      	ldr	r0, [pc, #104]	; (2628c <mqtt_unpack_suback+0x10c>)
   26222:	f7dc ff21 	bl	3068 <printk>
		return -EINVAL;
   26226:	f06f 0315 	mvn.w	r3, #21
   2622a:	e027      	b.n	2627c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   2622c:	f240 3226 	movw	r2, #806	; 0x326
   26230:	4914      	ldr	r1, [pc, #80]	; (26284 <mqtt_unpack_suback+0x104>)
   26232:	4817      	ldr	r0, [pc, #92]	; (26290 <mqtt_unpack_suback+0x110>)
   26234:	f7dc ff18 	bl	3068 <printk>
		return -EINVAL;
   26238:	f06f 0315 	mvn.w	r3, #21
   2623c:	e01e      	b.n	2627c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   2623e:	f8cd 9008 	str.w	r9, [sp, #8]
   26242:	9101      	str	r1, [sp, #4]
   26244:	9000      	str	r0, [sp, #0]
   26246:	2301      	movs	r3, #1
   26248:	f240 322d 	movw	r2, #813	; 0x32d
   2624c:	490d      	ldr	r1, [pc, #52]	; (26284 <mqtt_unpack_suback+0x104>)
   2624e:	4811      	ldr	r0, [pc, #68]	; (26294 <mqtt_unpack_suback+0x114>)
   26250:	f7dc ff0a 	bl	3068 <printk>
		return -EINVAL;
   26254:	f06f 0315 	mvn.w	r3, #21
   26258:	e010      	b.n	2627c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   2625a:	f240 323b 	movw	r2, #827	; 0x33b
   2625e:	4909      	ldr	r1, [pc, #36]	; (26284 <mqtt_unpack_suback+0x104>)
   26260:	480d      	ldr	r0, [pc, #52]	; (26298 <mqtt_unpack_suback+0x118>)
   26262:	f7dc ff01 	bl	3068 <printk>
		return -EINVAL;
   26266:	f06f 0315 	mvn.w	r3, #21
   2626a:	e007      	b.n	2627c <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   2626c:	f240 3242 	movw	r2, #834	; 0x342
   26270:	4904      	ldr	r1, [pc, #16]	; (26284 <mqtt_unpack_suback+0x104>)
   26272:	480a      	ldr	r0, [pc, #40]	; (2629c <mqtt_unpack_suback+0x11c>)
   26274:	f7dc fef8 	bl	3068 <printk>
			return -EINVAL;
   26278:	f06f 0315 	mvn.w	r3, #21
}
   2627c:	4618      	mov	r0, r3
   2627e:	b007      	add	sp, #28
   26280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26284:	00032c94 	.word	0x00032c94
   26288:	00032ca8 	.word	0x00032ca8
   2628c:	00032cc0 	.word	0x00032cc0
   26290:	00032ce8 	.word	0x00032ce8
   26294:	00032d0c 	.word	0x00032d0c
   26298:	00032d54 	.word	0x00032d54
   2629c:	00032d80 	.word	0x00032d80

000262a0 <mqtt_pack_publish>:
{
   262a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   262a4:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   262a6:	785c      	ldrb	r4, [r3, #1]
   262a8:	2c02      	cmp	r4, #2
   262aa:	d860      	bhi.n	2636e <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   262ac:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   262b0:	2c00      	cmp	r4, #0
   262b2:	d057      	beq.n	26364 <mqtt_pack_publish+0xc4>
   262b4:	f04f 0e02 	mov.w	lr, #2
   262b8:	461c      	mov	r4, r3
   262ba:	4615      	mov	r5, r2
   262bc:	460f      	mov	r7, r1
   262be:	4606      	mov	r6, r0
   262c0:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   262c4:	8aa2      	ldrh	r2, [r4, #20]
   262c6:	fa12 f383 	uxtah	r3, r2, r3
   262ca:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   262cc:	3302      	adds	r3, #2
   262ce:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   262d2:	4649      	mov	r1, r9
   262d4:	f10d 0006 	add.w	r0, sp, #6
   262d8:	f7ff fd4b 	bl	25d72 <compute_rlen_size>
	if (rc != 0) {
   262dc:	4680      	mov	r8, r0
   262de:	2800      	cmp	r0, #0
   262e0:	d148      	bne.n	26374 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   262e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   262e6:	3301      	adds	r3, #1
   262e8:	444b      	add	r3, r9
   262ea:	42ab      	cmp	r3, r5
   262ec:	dc45      	bgt.n	2637a <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   262ee:	7823      	ldrb	r3, [r4, #0]
   262f0:	2b00      	cmp	r3, #0
   262f2:	d03a      	beq.n	2636a <mqtt_pack_publish+0xca>
   262f4:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   262f6:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   262f8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   262fc:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   262fe:	78a2      	ldrb	r2, [r4, #2]
   26300:	2a00      	cmp	r2, #0
   26302:	bf18      	it	ne
   26304:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   26308:	4630      	mov	r0, r6
   2630a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2630e:	4649      	mov	r1, r9
   26310:	f7ff fd53 	bl	25dba <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   26314:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   26318:	1c6b      	adds	r3, r5, #1
   2631a:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   2631c:	89a1      	ldrh	r1, [r4, #12]
   2631e:	0a0a      	lsrs	r2, r1, #8
   26320:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26324:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   26326:	3503      	adds	r5, #3
   26328:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   2632a:	89a2      	ldrh	r2, [r4, #12]
   2632c:	68a1      	ldr	r1, [r4, #8]
   2632e:	1970      	adds	r0, r6, r5
   26330:	f7d9 ffc6 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   26334:	89a3      	ldrh	r3, [r4, #12]
   26336:	441d      	add	r5, r3
   26338:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   2633a:	7863      	ldrb	r3, [r4, #1]
   2633c:	b133      	cbz	r3, 2634c <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   2633e:	88a2      	ldrh	r2, [r4, #4]
   26340:	0a13      	lsrs	r3, r2, #8
   26342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26346:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   26348:	3502      	adds	r5, #2
   2634a:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   2634c:	8aa2      	ldrh	r2, [r4, #20]
   2634e:	6921      	ldr	r1, [r4, #16]
   26350:	1970      	adds	r0, r6, r5
   26352:	f7d9 ffb5 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   26356:	8aa3      	ldrh	r3, [r4, #20]
   26358:	441d      	add	r5, r3
	*length = offset;
   2635a:	803d      	strh	r5, [r7, #0]
}
   2635c:	4640      	mov	r0, r8
   2635e:	b003      	add	sp, #12
   26360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   26364:	f04f 0e00 	mov.w	lr, #0
   26368:	e7a6      	b.n	262b8 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2636a:	2330      	movs	r3, #48	; 0x30
   2636c:	e7c3      	b.n	262f6 <mqtt_pack_publish+0x56>
		return -EINVAL;
   2636e:	f06f 0815 	mvn.w	r8, #21
   26372:	e7f3      	b.n	2635c <mqtt_pack_publish+0xbc>
		return -EINVAL;
   26374:	f06f 0815 	mvn.w	r8, #21
   26378:	e7f0      	b.n	2635c <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   2637a:	f06f 080b 	mvn.w	r8, #11
   2637e:	e7ed      	b.n	2635c <mqtt_pack_publish+0xbc>

00026380 <mqtt_unpack_publish>:
{
   26380:	b5f0      	push	{r4, r5, r6, r7, lr}
   26382:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   26384:	7807      	ldrb	r7, [r0, #0]
   26386:	093b      	lsrs	r3, r7, #4
   26388:	2b03      	cmp	r3, #3
   2638a:	d148      	bne.n	2641e <mqtt_unpack_publish+0x9e>
   2638c:	4615      	mov	r5, r2
   2638e:	460e      	mov	r6, r1
   26390:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   26392:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   26396:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   26398:	7803      	ldrb	r3, [r0, #0]
   2639a:	f3c3 0341 	ubfx	r3, r3, #1, #2
   2639e:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   263a0:	4602      	mov	r2, r0
   263a2:	f812 3b01 	ldrb.w	r3, [r2], #1
   263a6:	f003 0301 	and.w	r3, r3, #1
   263aa:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   263ac:	1e4b      	subs	r3, r1, #1
   263ae:	b29b      	uxth	r3, r3
   263b0:	f10d 0106 	add.w	r1, sp, #6
   263b4:	4668      	mov	r0, sp
   263b6:	f7ff fd12 	bl	25dde <rlen_decode>
	if (rc != 0) {
   263ba:	4607      	mov	r7, r0
   263bc:	2800      	cmp	r0, #0
   263be:	d131      	bne.n	26424 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   263c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   263c4:	9b00      	ldr	r3, [sp, #0]
   263c6:	4413      	add	r3, r2
   263c8:	3301      	adds	r3, #1
   263ca:	42b3      	cmp	r3, r6
   263cc:	d82d      	bhi.n	2642a <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   263ce:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   263d0:	fa14 f383 	uxtah	r3, r4, r3
   263d4:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   263d6:	0a0b      	lsrs	r3, r1, #8
   263d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   263dc:	b29b      	uxth	r3, r3
   263de:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   263e0:	3203      	adds	r2, #3
   263e2:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   263e4:	18d1      	adds	r1, r2, r3
   263e6:	42b1      	cmp	r1, r6
   263e8:	dc22      	bgt.n	26430 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   263ea:	18a1      	adds	r1, r4, r2
   263ec:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   263ee:	4413      	add	r3, r2
   263f0:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   263f2:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   263f4:	786a      	ldrb	r2, [r5, #1]
   263f6:	3a01      	subs	r2, #1
   263f8:	b2d2      	uxtb	r2, r2
   263fa:	2a01      	cmp	r2, #1
   263fc:	d908      	bls.n	26410 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   263fe:	2200      	movs	r2, #0
   26400:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   26402:	1af6      	subs	r6, r6, r3
   26404:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   26406:	4423      	add	r3, r4
   26408:	612b      	str	r3, [r5, #16]
}
   2640a:	4638      	mov	r0, r7
   2640c:	b003      	add	sp, #12
   2640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   26410:	0a0a      	lsrs	r2, r1, #8
   26412:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   26416:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   26418:	3302      	adds	r3, #2
   2641a:	b29b      	uxth	r3, r3
   2641c:	e7f1      	b.n	26402 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   2641e:	f06f 0715 	mvn.w	r7, #21
   26422:	e7f2      	b.n	2640a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   26424:	f06f 0715 	mvn.w	r7, #21
   26428:	e7ef      	b.n	2640a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   2642a:	f06f 0715 	mvn.w	r7, #21
   2642e:	e7ec      	b.n	2640a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   26430:	f06f 0715 	mvn.w	r7, #21
   26434:	e7e9      	b.n	2640a <mqtt_unpack_publish+0x8a>

00026436 <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   26436:	2903      	cmp	r1, #3
   26438:	d90d      	bls.n	26456 <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   2643a:	7801      	ldrb	r1, [r0, #0]
   2643c:	2920      	cmp	r1, #32
   2643e:	d10d      	bne.n	2645c <mqtt_unpack_connack+0x26>
   26440:	7841      	ldrb	r1, [r0, #1]
   26442:	2902      	cmp	r1, #2
   26444:	d10d      	bne.n	26462 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   26446:	7881      	ldrb	r1, [r0, #2]
   26448:	2901      	cmp	r1, #1
   2644a:	d80d      	bhi.n	26468 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   2644c:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   2644e:	78c2      	ldrb	r2, [r0, #3]
   26450:	701a      	strb	r2, [r3, #0]
	return 0;
   26452:	2000      	movs	r0, #0
   26454:	4770      	bx	lr
		return -EINVAL;
   26456:	f06f 0015 	mvn.w	r0, #21
   2645a:	4770      	bx	lr
		return -EINVAL;
   2645c:	f06f 0015 	mvn.w	r0, #21
   26460:	4770      	bx	lr
   26462:	f06f 0015 	mvn.w	r0, #21
   26466:	4770      	bx	lr
		return -EINVAL;
   26468:	f06f 0015 	mvn.w	r0, #21
}
   2646c:	4770      	bx	lr

0002646e <mqtt_pack_disconnect>:
{
   2646e:	b500      	push	{lr}
   26470:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   26472:	2300      	movs	r3, #0
   26474:	9300      	str	r3, [sp, #0]
   26476:	230e      	movs	r3, #14
   26478:	f7ff fceb 	bl	25e52 <pack_zerolen>
}
   2647c:	b003      	add	sp, #12
   2647e:	f85d fb04 	ldr.w	pc, [sp], #4

00026482 <mqtt_unpack_puback>:
{
   26482:	b500      	push	{lr}
   26484:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   26486:	2300      	movs	r3, #0
   26488:	9300      	str	r3, [sp, #0]
   2648a:	2304      	movs	r3, #4
   2648c:	f7ff fd0e 	bl	25eac <unpack_pktid_validate>
}
   26490:	b003      	add	sp, #12
   26492:	f85d fb04 	ldr.w	pc, [sp], #4

00026496 <mqtt_unpack_pubrec>:
{
   26496:	b500      	push	{lr}
   26498:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   2649a:	2300      	movs	r3, #0
   2649c:	9300      	str	r3, [sp, #0]
   2649e:	2305      	movs	r3, #5
   264a0:	f7ff fd04 	bl	25eac <unpack_pktid_validate>
}
   264a4:	b003      	add	sp, #12
   264a6:	f85d fb04 	ldr.w	pc, [sp], #4

000264aa <mqtt_unpack_pubrel>:
{
   264aa:	b500      	push	{lr}
   264ac:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   264ae:	2302      	movs	r3, #2
   264b0:	9300      	str	r3, [sp, #0]
   264b2:	2306      	movs	r3, #6
   264b4:	f7ff fcfa 	bl	25eac <unpack_pktid_validate>
}
   264b8:	b003      	add	sp, #12
   264ba:	f85d fb04 	ldr.w	pc, [sp], #4

000264be <mqtt_unpack_pubcomp>:
{
   264be:	b500      	push	{lr}
   264c0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   264c2:	2300      	movs	r3, #0
   264c4:	9300      	str	r3, [sp, #0]
   264c6:	2307      	movs	r3, #7
   264c8:	f7ff fcf0 	bl	25eac <unpack_pktid_validate>
}
   264cc:	b003      	add	sp, #12
   264ce:	f85d fb04 	ldr.w	pc, [sp], #4

000264d2 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   264d2:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   264d4:	2300      	movs	r3, #0
   264d6:	220d      	movs	r2, #13
   264d8:	f7ff fd1a 	bl	25f10 <unpack_zerolen_validate>
}
   264dc:	bd08      	pop	{r3, pc}
	...

000264e0 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   264e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   264e2:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   264e4:	1f13      	subs	r3, r2, #4
   264e6:	2b03      	cmp	r3, #3
   264e8:	d840      	bhi.n	2656c <mqtt_rx_pub_msgs+0x8c>
   264ea:	e8df f003 	tbb	[pc, r3]
   264ee:	0502      	.short	0x0502
   264f0:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   264f2:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   264f4:	4f22      	ldr	r7, [pc, #136]	; (26580 <mqtt_rx_pub_msgs+0xa0>)
   264f6:	e007      	b.n	26508 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   264f8:	4e22      	ldr	r6, [pc, #136]	; (26584 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   264fa:	4f23      	ldr	r7, [pc, #140]	; (26588 <mqtt_rx_pub_msgs+0xa8>)
		break;
   264fc:	e004      	b.n	26508 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   264fe:	4e23      	ldr	r6, [pc, #140]	; (2658c <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   26500:	4f23      	ldr	r7, [pc, #140]	; (26590 <mqtt_rx_pub_msgs+0xb0>)
		break;
   26502:	e001      	b.n	26508 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   26504:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   26506:	4f23      	ldr	r7, [pc, #140]	; (26594 <mqtt_rx_pub_msgs+0xb4>)
   26508:	4614      	mov	r4, r2
   2650a:	460b      	mov	r3, r1
   2650c:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   2650e:	f10d 0206 	add.w	r2, sp, #6
   26512:	8989      	ldrh	r1, [r1, #12]
   26514:	6898      	ldr	r0, [r3, #8]
   26516:	47b8      	blx	r7
	if (rc != 0) {
   26518:	bb58      	cbnz	r0, 26572 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   2651a:	2c06      	cmp	r4, #6
   2651c:	d012      	beq.n	26544 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   2651e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   26522:	4622      	mov	r2, r4
   26524:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   26528:	4628      	mov	r0, r5
   2652a:	4798      	blx	r3
   2652c:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   2652e:	bb1b      	cbnz	r3, 26578 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   26530:	b12e      	cbz	r6, 2653e <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   26532:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   26536:	4628      	mov	r0, r5
   26538:	47b0      	blx	r6
	if (rc != 0) {
   2653a:	4603      	mov	r3, r0
   2653c:	b998      	cbnz	r0, 26566 <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   2653e:	4618      	mov	r0, r3
   26540:	b003      	add	sp, #12
   26542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   26544:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   26548:	2b01      	cmp	r3, #1
   2654a:	d009      	beq.n	26560 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   2654c:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   26550:	2306      	movs	r3, #6
   26552:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   26556:	2100      	movs	r1, #0
   26558:	4628      	mov	r0, r5
   2655a:	47a0      	blx	r4
   2655c:	4603      	mov	r3, r0
   2655e:	e7e6      	b.n	2652e <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   26560:	f06f 0315 	mvn.w	r3, #21
   26564:	e7e3      	b.n	2652e <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   26566:	f06f 0315 	mvn.w	r3, #21
   2656a:	e7e8      	b.n	2653e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   2656c:	f06f 0315 	mvn.w	r3, #21
   26570:	e7e5      	b.n	2653e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   26572:	f06f 0315 	mvn.w	r3, #21
   26576:	e7e2      	b.n	2653e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   26578:	f06f 0315 	mvn.w	r3, #21
   2657c:	e7df      	b.n	2653e <mqtt_rx_pub_msgs+0x5e>
   2657e:	bf00      	nop
   26580:	00026483 	.word	0x00026483
   26584:	00026677 	.word	0x00026677
   26588:	00026497 	.word	0x00026497
   2658c:	0002666d 	.word	0x0002666d
   26590:	000264ab 	.word	0x000264ab
   26594:	000264bf 	.word	0x000264bf

00026598 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   26598:	4770      	bx	lr

0002659a <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   2659a:	b96a      	cbnz	r2, 265b8 <app_recv+0x1e>
   2659c:	b161      	cbz	r1, 265b8 <app_recv+0x1e>
{
   2659e:	b510      	push	{r4, lr}
   265a0:	460c      	mov	r4, r1
	return pkt->appdatalen;
   265a2:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   265a4:	b91a      	cbnz	r2, 265ae <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   265a6:	4620      	mov	r0, r4
   265a8:	f7f7 fc9b 	bl	1dee2 <net_pkt_unref>
   265ac:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   265ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   265b2:	4618      	mov	r0, r3
   265b4:	4790      	blx	r2
   265b6:	e7f6      	b.n	265a6 <app_recv+0xc>
   265b8:	4770      	bx	lr

000265ba <mqtt_tx_pub_msgs>:
{
   265ba:	b570      	push	{r4, r5, r6, lr}
   265bc:	b084      	sub	sp, #16
   265be:	4604      	mov	r4, r0
	switch (pkt_type) {
   265c0:	3a04      	subs	r2, #4
   265c2:	2a03      	cmp	r2, #3
   265c4:	d849      	bhi.n	2665a <mqtt_tx_pub_msgs+0xa0>
   265c6:	e8df f002 	tbb	[pc, r2]
   265ca:	2c02      	.short	0x2c02
   265cc:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   265ce:	460b      	mov	r3, r1
   265d0:	2204      	movs	r2, #4
   265d2:	f10d 010a 	add.w	r1, sp, #10
   265d6:	a803      	add	r0, sp, #12
   265d8:	f7ff fcb7 	bl	25f4a <mqtt_pack_puback>
	if (rc != 0) {
   265dc:	2800      	cmp	r0, #0
   265de:	d13f      	bne.n	26660 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   265e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   265e2:	2100      	movs	r1, #0
   265e4:	4620      	mov	r0, r4
   265e6:	f000 fe09 	bl	271fc <net_app_get_net_pkt>
	if (tx == NULL) {
   265ea:	4605      	mov	r5, r0
   265ec:	2800      	cmp	r0, #0
   265ee:	d03a      	beq.n	26666 <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   265f0:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   265f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   265f6:	aa03      	add	r2, sp, #12
   265f8:	4631      	mov	r1, r6
   265fa:	f7f7 fdaa 	bl	1e152 <net_pkt_append>
	if (rc != true) {
   265fe:	4286      	cmp	r6, r0
   26600:	d01f      	beq.n	26642 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   26602:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   26606:	4628      	mov	r0, r5
   26608:	f7f7 fc6b 	bl	1dee2 <net_pkt_unref>
}
   2660c:	4620      	mov	r0, r4
   2660e:	b004      	add	sp, #16
   26610:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   26612:	460b      	mov	r3, r1
   26614:	2204      	movs	r2, #4
   26616:	f10d 010a 	add.w	r1, sp, #10
   2661a:	a803      	add	r0, sp, #12
   2661c:	f7ff fcb6 	bl	25f8c <mqtt_pack_pubcomp>
		break;
   26620:	e7dc      	b.n	265dc <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   26622:	460b      	mov	r3, r1
   26624:	2204      	movs	r2, #4
   26626:	f10d 010a 	add.w	r1, sp, #10
   2662a:	a803      	add	r0, sp, #12
   2662c:	f7ff fc98 	bl	25f60 <mqtt_pack_pubrec>
		break;
   26630:	e7d4      	b.n	265dc <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   26632:	460b      	mov	r3, r1
   26634:	2204      	movs	r2, #4
   26636:	f10d 010a 	add.w	r1, sp, #10
   2663a:	a803      	add	r0, sp, #12
   2663c:	f7ff fc9b 	bl	25f76 <mqtt_pack_pubrel>
		break;
   26640:	e7cc      	b.n	265dc <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26642:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26644:	2200      	movs	r2, #0
   26646:	9201      	str	r2, [sp, #4]
   26648:	9300      	str	r3, [sp, #0]
   2664a:	4613      	mov	r3, r2
   2664c:	4629      	mov	r1, r5
   2664e:	4620      	mov	r0, r4
   26650:	f000 fd58 	bl	27104 <net_app_send_pkt>
	if (rc < 0) {
   26654:	1e04      	subs	r4, r0, #0
   26656:	dad9      	bge.n	2660c <mqtt_tx_pub_msgs+0x52>
   26658:	e7d5      	b.n	26606 <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   2665a:	f06f 0415 	mvn.w	r4, #21
   2665e:	e7d5      	b.n	2660c <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   26660:	f06f 0415 	mvn.w	r4, #21
   26664:	e7d2      	b.n	2660c <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   26666:	f06f 040b 	mvn.w	r4, #11
   2666a:	e7cf      	b.n	2660c <mqtt_tx_pub_msgs+0x52>

0002666c <mqtt_tx_pubcomp>:
{
   2666c:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   2666e:	2207      	movs	r2, #7
   26670:	f7ff ffa3 	bl	265ba <mqtt_tx_pub_msgs>
}
   26674:	bd08      	pop	{r3, pc}

00026676 <mqtt_tx_pubrel>:
{
   26676:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   26678:	2206      	movs	r2, #6
   2667a:	f7ff ff9e 	bl	265ba <mqtt_tx_pub_msgs>
}
   2667e:	bd08      	pop	{r3, pc}

00026680 <mqtt_linearize_packet>:
{
   26680:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   26682:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   26684:	42aa      	cmp	r2, r5
   26686:	d820      	bhi.n	266ca <mqtt_linearize_packet+0x4a>
   26688:	2d80      	cmp	r5, #128	; 0x80
   2668a:	d820      	bhi.n	266ce <mqtt_linearize_packet+0x4e>
   2668c:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2668e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   26690:	4810      	ldr	r0, [pc, #64]	; (266d4 <mqtt_linearize_packet+0x54>)
   26692:	f7f4 fe49 	bl	1b328 <net_buf_alloc>
	if (data == NULL) {
   26696:	4606      	mov	r6, r0
   26698:	b180      	cbz	r0, 266bc <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   2669a:	68a1      	ldr	r1, [r4, #8]
   2669c:	460c      	mov	r4, r1
	size_t bytes = 0;
   2669e:	2200      	movs	r2, #0
   266a0:	e002      	b.n	266a8 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   266a2:	89a3      	ldrh	r3, [r4, #12]
   266a4:	441a      	add	r2, r3
		buf = buf->frags;
   266a6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   266a8:	2c00      	cmp	r4, #0
   266aa:	d1fa      	bne.n	266a2 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   266ac:	b292      	uxth	r2, r2
   266ae:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   266b0:	462b      	mov	r3, r5
   266b2:	b292      	uxth	r2, r2
   266b4:	4630      	mov	r0, r6
   266b6:	f7f7 fcc7 	bl	1e048 <net_frag_linear_copy>
	if (rc != 0) {
   266ba:	b908      	cbnz	r0, 266c0 <mqtt_linearize_packet+0x40>
}
   266bc:	4630      	mov	r0, r6
   266be:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   266c0:	4630      	mov	r0, r6
   266c2:	f7f7 fc08 	bl	1ded6 <net_pkt_frag_unref>
	return NULL;
   266c6:	4626      	mov	r6, r4
   266c8:	e7f8      	b.n	266bc <mqtt_linearize_packet+0x3c>
		return NULL;
   266ca:	2600      	movs	r6, #0
   266cc:	e7f6      	b.n	266bc <mqtt_linearize_packet+0x3c>
   266ce:	2600      	movs	r6, #0
   266d0:	e7f4      	b.n	266bc <mqtt_linearize_packet+0x3c>
   266d2:	bf00      	nop
   266d4:	2000d6ec 	.word	0x2000d6ec

000266d8 <mqtt_tx_connect>:
{
   266d8:	b570      	push	{r4, r5, r6, lr}
   266da:	b082      	sub	sp, #8
   266dc:	4604      	mov	r4, r0
   266de:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   266e0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   266e2:	481d      	ldr	r0, [pc, #116]	; (26758 <mqtt_tx_connect+0x80>)
   266e4:	f7f4 fe20 	bl	1b328 <net_buf_alloc>
	if (data == NULL) {
   266e8:	b398      	cbz	r0, 26752 <mqtt_tx_connect+0x7a>
   266ea:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   266ec:	7832      	ldrb	r2, [r6, #0]
   266ee:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   266f2:	f362 0300 	bfi	r3, r2, #0, #1
   266f6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   266fa:	4633      	mov	r3, r6
   266fc:	2280      	movs	r2, #128	; 0x80
   266fe:	f100 010c 	add.w	r1, r0, #12
   26702:	6880      	ldr	r0, [r0, #8]
   26704:	f7ff fc4d 	bl	25fa2 <mqtt_pack_connect>
	if (rc != 0) {
   26708:	b9c0      	cbnz	r0, 2673c <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2670a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2670c:	2100      	movs	r1, #0
   2670e:	4620      	mov	r0, r4
   26710:	f000 fd74 	bl	271fc <net_app_get_net_pkt>
	if (tx == NULL) {
   26714:	4606      	mov	r6, r0
   26716:	b1c8      	cbz	r0, 2674c <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   26718:	4629      	mov	r1, r5
   2671a:	f7f7 fc0c 	bl	1df36 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2671e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26720:	2200      	movs	r2, #0
   26722:	9201      	str	r2, [sp, #4]
   26724:	9300      	str	r3, [sp, #0]
   26726:	4613      	mov	r3, r2
   26728:	4631      	mov	r1, r6
   2672a:	4620      	mov	r0, r4
   2672c:	f000 fcea 	bl	27104 <net_app_send_pkt>
	if (rc < 0) {
   26730:	1e04      	subs	r4, r0, #0
   26732:	da08      	bge.n	26746 <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   26734:	4630      	mov	r0, r6
   26736:	f7f7 fbd4 	bl	1dee2 <net_pkt_unref>
   2673a:	e004      	b.n	26746 <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   2673c:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   26740:	4628      	mov	r0, r5
   26742:	f7f7 fbc8 	bl	1ded6 <net_pkt_frag_unref>
}
   26746:	4620      	mov	r0, r4
   26748:	b002      	add	sp, #8
   2674a:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2674c:	f06f 040b 	mvn.w	r4, #11
   26750:	e7f6      	b.n	26740 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   26752:	f06f 040b 	mvn.w	r4, #11
   26756:	e7f6      	b.n	26746 <mqtt_tx_connect+0x6e>
   26758:	2000d6ec 	.word	0x2000d6ec

0002675c <mqtt_tx_disconnect>:
{
   2675c:	b570      	push	{r4, r5, r6, lr}
   2675e:	b084      	sub	sp, #16
   26760:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   26762:	2202      	movs	r2, #2
   26764:	f10d 010a 	add.w	r1, sp, #10
   26768:	a803      	add	r0, sp, #12
   2676a:	f7ff fe80 	bl	2646e <mqtt_pack_disconnect>
	if (rc != 0) {
   2676e:	bb78      	cbnz	r0, 267d0 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26770:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   26772:	2100      	movs	r1, #0
   26774:	4620      	mov	r0, r4
   26776:	f000 fd41 	bl	271fc <net_app_get_net_pkt>
	if (tx == NULL) {
   2677a:	4605      	mov	r5, r0
   2677c:	b358      	cbz	r0, 267d6 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   2677e:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   26782:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26784:	aa03      	add	r2, sp, #12
   26786:	4631      	mov	r1, r6
   26788:	f7f7 fce3 	bl	1e152 <net_pkt_append>
	if (rc != true) {
   2678c:	4286      	cmp	r6, r0
   2678e:	d007      	beq.n	267a0 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   26790:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   26794:	4628      	mov	r0, r5
   26796:	f7f7 fba4 	bl	1dee2 <net_pkt_unref>
}
   2679a:	4630      	mov	r0, r6
   2679c:	b004      	add	sp, #16
   2679e:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   267a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   267a2:	2200      	movs	r2, #0
   267a4:	9201      	str	r2, [sp, #4]
   267a6:	9300      	str	r3, [sp, #0]
   267a8:	4613      	mov	r3, r2
   267aa:	4629      	mov	r1, r5
   267ac:	4620      	mov	r0, r4
   267ae:	f000 fca9 	bl	27104 <net_app_send_pkt>
	if (rc < 0) {
   267b2:	1e06      	subs	r6, r0, #0
   267b4:	dbee      	blt.n	26794 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   267b6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   267ba:	f36f 0341 	bfc	r3, #1, #1
   267be:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   267c2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   267c6:	2b00      	cmp	r3, #0
   267c8:	d0e7      	beq.n	2679a <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   267ca:	4620      	mov	r0, r4
   267cc:	4798      	blx	r3
   267ce:	e7e4      	b.n	2679a <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   267d0:	f06f 0615 	mvn.w	r6, #21
   267d4:	e7e1      	b.n	2679a <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   267d6:	f06f 060b 	mvn.w	r6, #11
   267da:	e7de      	b.n	2679a <mqtt_tx_disconnect+0x3e>

000267dc <mqtt_tx_puback>:
{
   267dc:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   267de:	2204      	movs	r2, #4
   267e0:	f7ff feeb 	bl	265ba <mqtt_tx_pub_msgs>
}
   267e4:	bd08      	pop	{r3, pc}

000267e6 <mqtt_tx_pubrec>:
{
   267e6:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   267e8:	2205      	movs	r2, #5
   267ea:	f7ff fee6 	bl	265ba <mqtt_tx_pub_msgs>
}
   267ee:	bd08      	pop	{r3, pc}

000267f0 <mqtt_tx_publish>:
{
   267f0:	b570      	push	{r4, r5, r6, lr}
   267f2:	b082      	sub	sp, #8
   267f4:	4605      	mov	r5, r0
   267f6:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   267f8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   267fa:	481a      	ldr	r0, [pc, #104]	; (26864 <mqtt_tx_publish+0x74>)
   267fc:	f7f4 fd94 	bl	1b328 <net_buf_alloc>
	if (data == NULL) {
   26800:	b360      	cbz	r0, 2685c <mqtt_tx_publish+0x6c>
   26802:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   26804:	4633      	mov	r3, r6
   26806:	89c2      	ldrh	r2, [r0, #14]
   26808:	f100 010c 	add.w	r1, r0, #12
   2680c:	6880      	ldr	r0, [r0, #8]
   2680e:	f7ff fd47 	bl	262a0 <mqtt_pack_publish>
	if (rc != 0) {
   26812:	b9c0      	cbnz	r0, 26846 <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26814:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   26816:	2100      	movs	r1, #0
   26818:	4628      	mov	r0, r5
   2681a:	f000 fcef 	bl	271fc <net_app_get_net_pkt>
	if (tx == NULL) {
   2681e:	4606      	mov	r6, r0
   26820:	b1c8      	cbz	r0, 26856 <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   26822:	4621      	mov	r1, r4
   26824:	f7f7 fb87 	bl	1df36 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26828:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2682a:	2200      	movs	r2, #0
   2682c:	9201      	str	r2, [sp, #4]
   2682e:	9300      	str	r3, [sp, #0]
   26830:	4613      	mov	r3, r2
   26832:	4631      	mov	r1, r6
   26834:	4628      	mov	r0, r5
   26836:	f000 fc65 	bl	27104 <net_app_send_pkt>
	if (rc < 0) {
   2683a:	1e05      	subs	r5, r0, #0
   2683c:	da08      	bge.n	26850 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   2683e:	4630      	mov	r0, r6
   26840:	f7f7 fb4f 	bl	1dee2 <net_pkt_unref>
   26844:	e004      	b.n	26850 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   26846:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   2684a:	4620      	mov	r0, r4
   2684c:	f7f7 fb43 	bl	1ded6 <net_pkt_frag_unref>
}
   26850:	4628      	mov	r0, r5
   26852:	b002      	add	sp, #8
   26854:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   26856:	f06f 050b 	mvn.w	r5, #11
   2685a:	e7f6      	b.n	2684a <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   2685c:	f06f 050b 	mvn.w	r5, #11
   26860:	e7f6      	b.n	26850 <mqtt_tx_publish+0x60>
   26862:	bf00      	nop
   26864:	2000d6ec 	.word	0x2000d6ec

00026868 <mqtt_rx_connack>:
{
   26868:	b570      	push	{r4, r5, r6, lr}
   2686a:	b082      	sub	sp, #8
   2686c:	4604      	mov	r4, r0
   2686e:	4608      	mov	r0, r1
   26870:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   26872:	f10d 0307 	add.w	r3, sp, #7
   26876:	f10d 0206 	add.w	r2, sp, #6
   2687a:	8989      	ldrh	r1, [r1, #12]
   2687c:	6880      	ldr	r0, [r0, #8]
   2687e:	f7ff fdda 	bl	26436 <mqtt_unpack_connack>
	if (rc != 0) {
   26882:	b998      	cbnz	r0, 268ac <mqtt_rx_connack+0x44>
   26884:	4605      	mov	r5, r0
	switch (clean_session) {
   26886:	2e01      	cmp	r6, #1
   26888:	d113      	bne.n	268b2 <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   2688a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2688e:	b99b      	cbnz	r3, 268b8 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   26890:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   26894:	f043 0302 	orr.w	r3, r3, #2
   26898:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   2689c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   268a0:	b10b      	cbz	r3, 268a6 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   268a2:	4620      	mov	r0, r4
   268a4:	4798      	blx	r3
}
   268a6:	4628      	mov	r0, r5
   268a8:	b002      	add	sp, #8
   268aa:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   268ac:	f06f 0515 	mvn.w	r5, #21
   268b0:	e7f9      	b.n	268a6 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   268b2:	f06f 0515 	mvn.w	r5, #21
   268b6:	e7f6      	b.n	268a6 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   268b8:	f06f 0515 	mvn.w	r5, #21
	return rc;
   268bc:	e7f3      	b.n	268a6 <mqtt_rx_connack+0x3e>

000268be <mqtt_rx_puback>:
{
   268be:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   268c0:	2204      	movs	r2, #4
   268c2:	f7ff fe0d 	bl	264e0 <mqtt_rx_pub_msgs>
}
   268c6:	bd08      	pop	{r3, pc}

000268c8 <mqtt_rx_pubcomp>:
{
   268c8:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   268ca:	2207      	movs	r2, #7
   268cc:	f7ff fe08 	bl	264e0 <mqtt_rx_pub_msgs>
}
   268d0:	bd08      	pop	{r3, pc}

000268d2 <mqtt_rx_pubrec>:
{
   268d2:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   268d4:	2205      	movs	r2, #5
   268d6:	f7ff fe03 	bl	264e0 <mqtt_rx_pub_msgs>
}
   268da:	bd08      	pop	{r3, pc}

000268dc <mqtt_rx_pubrel>:
{
   268dc:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   268de:	2206      	movs	r2, #6
   268e0:	f7ff fdfe 	bl	264e0 <mqtt_rx_pub_msgs>
}
   268e4:	bd08      	pop	{r3, pc}

000268e6 <mqtt_rx_pingresp>:
{
   268e6:	b508      	push	{r3, lr}
   268e8:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   268ea:	8989      	ldrh	r1, [r1, #12]
   268ec:	6898      	ldr	r0, [r3, #8]
   268ee:	f7ff fdf0 	bl	264d2 <mqtt_unpack_pingresp>
	if (rc != 0) {
   268f2:	4603      	mov	r3, r0
   268f4:	b908      	cbnz	r0, 268fa <mqtt_rx_pingresp+0x14>
}
   268f6:	4618      	mov	r0, r3
   268f8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   268fa:	f06f 0315 	mvn.w	r3, #21
   268fe:	e7fa      	b.n	268f6 <mqtt_rx_pingresp+0x10>

00026900 <mqtt_rx_suback>:
{
   26900:	b530      	push	{r4, r5, lr}
   26902:	b085      	sub	sp, #20
   26904:	4604      	mov	r4, r0
	data = rx->data;
   26906:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   26908:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2690a:	ab03      	add	r3, sp, #12
   2690c:	9301      	str	r3, [sp, #4]
   2690e:	2301      	movs	r3, #1
   26910:	9300      	str	r3, [sp, #0]
   26912:	f10d 0309 	add.w	r3, sp, #9
   26916:	f10d 020a 	add.w	r2, sp, #10
   2691a:	f7ff fc31 	bl	26180 <mqtt_unpack_suback>
	if (rc != 0) {
   2691e:	b988      	cbnz	r0, 26944 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   26920:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   26924:	b18d      	cbz	r5, 2694a <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   26926:	ab03      	add	r3, sp, #12
   26928:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2692c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   26930:	4620      	mov	r0, r4
   26932:	47a8      	blx	r5
	if (rc != 0) {
   26934:	4603      	mov	r3, r0
   26936:	b910      	cbnz	r0, 2693e <mqtt_rx_suback+0x3e>
}
   26938:	4618      	mov	r0, r3
   2693a:	b005      	add	sp, #20
   2693c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2693e:	f06f 0315 	mvn.w	r3, #21
   26942:	e7f9      	b.n	26938 <mqtt_rx_suback+0x38>
		return -EINVAL;
   26944:	f06f 0315 	mvn.w	r3, #21
   26948:	e7f6      	b.n	26938 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2694a:	f06f 0315 	mvn.w	r3, #21
   2694e:	e7f3      	b.n	26938 <mqtt_rx_suback+0x38>

00026950 <mqtt_rx_publish>:
{
   26950:	b530      	push	{r4, r5, lr}
   26952:	b087      	sub	sp, #28
   26954:	4604      	mov	r4, r0
   26956:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   26958:	466a      	mov	r2, sp
   2695a:	8989      	ldrh	r1, [r1, #12]
   2695c:	6898      	ldr	r0, [r3, #8]
   2695e:	f7ff fd0f 	bl	26380 <mqtt_unpack_publish>
	if (rc != 0) {
   26962:	bb00      	cbnz	r0, 269a6 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   26964:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   26968:	2303      	movs	r3, #3
   2696a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2696e:	4669      	mov	r1, sp
   26970:	4620      	mov	r0, r4
   26972:	47a8      	blx	r5
	if (rc != 0) {
   26974:	4602      	mov	r2, r0
   26976:	b9c8      	cbnz	r0, 269ac <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   26978:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2697c:	2b01      	cmp	r3, #1
   2697e:	d00b      	beq.n	26998 <mqtt_rx_publish+0x48>
   26980:	b13b      	cbz	r3, 26992 <mqtt_rx_publish+0x42>
   26982:	2b02      	cmp	r3, #2
   26984:	d115      	bne.n	269b2 <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   26986:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2698a:	4620      	mov	r0, r4
   2698c:	f7ff ff2b 	bl	267e6 <mqtt_tx_pubrec>
   26990:	4602      	mov	r2, r0
}
   26992:	4610      	mov	r0, r2
   26994:	b007      	add	sp, #28
   26996:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   26998:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2699c:	4620      	mov	r0, r4
   2699e:	f7ff ff1d 	bl	267dc <mqtt_tx_puback>
   269a2:	4602      	mov	r2, r0
		break;
   269a4:	e7f5      	b.n	26992 <mqtt_rx_publish+0x42>
		return -EINVAL;
   269a6:	f06f 0215 	mvn.w	r2, #21
   269aa:	e7f2      	b.n	26992 <mqtt_rx_publish+0x42>
		return -EINVAL;
   269ac:	f06f 0215 	mvn.w	r2, #21
   269b0:	e7ef      	b.n	26992 <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   269b2:	f06f 0215 	mvn.w	r2, #21
   269b6:	e7ec      	b.n	26992 <mqtt_rx_publish+0x42>

000269b8 <mqtt_parser>:
{
   269b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269ba:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   269bc:	2202      	movs	r2, #2
   269be:	f7ff fe5f 	bl	26680 <mqtt_linearize_packet>
	if (!data) {
   269c2:	2800      	cmp	r0, #0
   269c4:	d057      	beq.n	26a76 <mqtt_parser+0xbe>
   269c6:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   269c8:	6883      	ldr	r3, [r0, #8]
   269ca:	781b      	ldrb	r3, [r3, #0]
   269cc:	091b      	lsrs	r3, r3, #4
   269ce:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   269d0:	3b02      	subs	r3, #2
   269d2:	2b0b      	cmp	r3, #11
   269d4:	d84c      	bhi.n	26a70 <mqtt_parser+0xb8>
   269d6:	e8df f003 	tbb	[pc, r3]
   269da:	3906      	.short	0x3906
   269dc:	2d3f2716 	.word	0x2d3f2716
   269e0:	4b4b454b 	.word	0x4b4b454b
   269e4:	334b      	.short	0x334b
		if (!ctx->connected) {
   269e6:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   269ea:	f013 0f02 	tst.w	r3, #2
   269ee:	d002      	beq.n	269f6 <mqtt_parser+0x3e>
			rc = -EINVAL;
   269f0:	f06f 0515 	mvn.w	r5, #21
   269f4:	e00c      	b.n	26a10 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   269f6:	f003 0201 	and.w	r2, r3, #1
   269fa:	4601      	mov	r1, r0
   269fc:	4630      	mov	r0, r6
   269fe:	f7ff ff33 	bl	26868 <mqtt_rx_connack>
   26a02:	4605      	mov	r5, r0
   26a04:	e004      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   26a06:	4601      	mov	r1, r0
   26a08:	4630      	mov	r0, r6
   26a0a:	f7ff ff58 	bl	268be <mqtt_rx_puback>
   26a0e:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   26a10:	b12d      	cbz	r5, 26a1e <mqtt_parser+0x66>
   26a12:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   26a16:	b113      	cbz	r3, 26a1e <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   26a18:	4639      	mov	r1, r7
   26a1a:	4630      	mov	r0, r6
   26a1c:	4798      	blx	r3
	net_pkt_frag_unref(data);
   26a1e:	4620      	mov	r0, r4
   26a20:	f7f7 fa59 	bl	1ded6 <net_pkt_frag_unref>
}
   26a24:	4628      	mov	r0, r5
   26a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   26a28:	4601      	mov	r1, r0
   26a2a:	4630      	mov	r0, r6
   26a2c:	f7ff ff51 	bl	268d2 <mqtt_rx_pubrec>
   26a30:	4605      	mov	r5, r0
		break;
   26a32:	e7ed      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   26a34:	4601      	mov	r1, r0
   26a36:	4630      	mov	r0, r6
   26a38:	f7ff ff46 	bl	268c8 <mqtt_rx_pubcomp>
   26a3c:	4605      	mov	r5, r0
		break;
   26a3e:	e7e7      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   26a40:	4601      	mov	r1, r0
   26a42:	4630      	mov	r0, r6
   26a44:	f7ff ff4f 	bl	268e6 <mqtt_rx_pingresp>
   26a48:	4605      	mov	r5, r0
		break;
   26a4a:	e7e1      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   26a4c:	4601      	mov	r1, r0
   26a4e:	4630      	mov	r0, r6
   26a50:	f7ff ff7e 	bl	26950 <mqtt_rx_publish>
   26a54:	4605      	mov	r5, r0
		break;
   26a56:	e7db      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   26a58:	4601      	mov	r1, r0
   26a5a:	4630      	mov	r0, r6
   26a5c:	f7ff ff3e 	bl	268dc <mqtt_rx_pubrel>
   26a60:	4605      	mov	r5, r0
		break;
   26a62:	e7d5      	b.n	26a10 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   26a64:	4601      	mov	r1, r0
   26a66:	4630      	mov	r0, r6
   26a68:	f7ff ff4a 	bl	26900 <mqtt_rx_suback>
   26a6c:	4605      	mov	r5, r0
		break;
   26a6e:	e7cf      	b.n	26a10 <mqtt_parser+0x58>
		rc = -EINVAL;
   26a70:	f06f 0515 	mvn.w	r5, #21
   26a74:	e7cc      	b.n	26a10 <mqtt_parser+0x58>
		return -ENOMEM;
   26a76:	f06f 050b 	mvn.w	r5, #11
   26a7a:	e7d3      	b.n	26a24 <mqtt_parser+0x6c>

00026a7c <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   26a7c:	b530      	push	{r4, r5, lr}
   26a7e:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   26a80:	b348      	cbz	r0, 26ad6 <mqtt_connect+0x5a>
   26a82:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   26a84:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   26a88:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   26a8c:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   26a8e:	9004      	str	r0, [sp, #16]
   26a90:	9103      	str	r1, [sp, #12]
   26a92:	9202      	str	r2, [sp, #8]
   26a94:	9301      	str	r3, [sp, #4]
   26a96:	2300      	movs	r3, #0
   26a98:	9300      	str	r3, [sp, #0]
   26a9a:	2206      	movs	r2, #6
   26a9c:	2101      	movs	r1, #1
   26a9e:	f000 f913 	bl	26cc8 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   26aa2:	1e05      	subs	r5, r0, #0
   26aa4:	db0e      	blt.n	26ac4 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   26aa6:	2300      	movs	r3, #0
   26aa8:	9300      	str	r3, [sp, #0]
   26aaa:	4a0c      	ldr	r2, [pc, #48]	; (26adc <mqtt_connect+0x60>)
   26aac:	490c      	ldr	r1, [pc, #48]	; (26ae0 <mqtt_connect+0x64>)
   26aae:	4620      	mov	r0, r4
   26ab0:	f000 fb11 	bl	270d6 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   26ab4:	1e05      	subs	r5, r0, #0
   26ab6:	db05      	blt.n	26ac4 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   26ab8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   26aba:	4620      	mov	r0, r4
   26abc:	f000 f9ec 	bl	26e98 <net_app_connect>
	if (rc < 0) {
   26ac0:	1e05      	subs	r5, r0, #0
   26ac2:	da05      	bge.n	26ad0 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   26ac4:	4620      	mov	r0, r4
   26ac6:	f000 fbbd 	bl	27244 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   26aca:	4620      	mov	r0, r4
   26acc:	f000 fab8 	bl	27040 <net_app_release>

	return rc;
}
   26ad0:	4628      	mov	r0, r5
   26ad2:	b007      	add	sp, #28
   26ad4:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   26ad6:	f06f 050d 	mvn.w	r5, #13
   26ada:	e7f9      	b.n	26ad0 <mqtt_connect+0x54>
   26adc:	0002659b 	.word	0x0002659b
   26ae0:	00026599 	.word	0x00026599

00026ae4 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   26ae4:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   26ae8:	f043 0301 	orr.w	r3, r3, #1
   26aec:	f36f 0341 	bfc	r3, #1, #1
   26af0:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   26af4:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   26af8:	4b02      	ldr	r3, [pc, #8]	; (26b04 <mqtt_init+0x20>)
   26afa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   26afe:	2000      	movs	r0, #0
   26b00:	4770      	bx	lr
   26b02:	bf00      	nop
   26b04:	000269b9 	.word	0x000269b9

00026b08 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   26b08:	b178      	cbz	r0, 26b2a <mqtt_close+0x22>
{
   26b0a:	b510      	push	{r4, lr}
   26b0c:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   26b0e:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26b12:	f012 0f01 	tst.w	r2, #1
   26b16:	d101      	bne.n	26b1c <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   26b18:	2000      	movs	r0, #0
}
   26b1a:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   26b1c:	f000 fb92 	bl	27244 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   26b20:	4620      	mov	r0, r4
   26b22:	f000 fa8d 	bl	27040 <net_app_release>
	return 0;
   26b26:	2000      	movs	r0, #0
   26b28:	bd10      	pop	{r4, pc}
		return -EFAULT;
   26b2a:	f06f 000d 	mvn.w	r0, #13
   26b2e:	4770      	bx	lr

00026b30 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   26b30:	b570      	push	{r4, r5, r6, lr}
   26b32:	460c      	mov	r4, r1
   26b34:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   26b36:	f7f4 fff5 	bl	1bb24 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   26b3a:	4b20      	ldr	r3, [pc, #128]	; (26bbc <net_app_init+0x8c>)
   26b3c:	fb83 2306 	smull	r2, r3, r3, r6
   26b40:	17f5      	asrs	r5, r6, #31
   26b42:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   26b46:	b380      	cbz	r0, 26baa <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   26b48:	f014 0f02 	tst.w	r4, #2
   26b4c:	d114      	bne.n	26b78 <net_app_init+0x48>
	int count = 0;
   26b4e:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   26b50:	f014 0f04 	tst.w	r4, #4
   26b54:	d000      	beq.n	26b58 <net_app_init+0x28>
		count++;
   26b56:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   26b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26b5c:	4818      	ldr	r0, [pc, #96]	; (26bc0 <net_app_init+0x90>)
   26b5e:	f002 ff93 	bl	29a88 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   26b62:	2e00      	cmp	r6, #0
   26b64:	db0a      	blt.n	26b7c <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   26b66:	b166      	cbz	r6, 26b82 <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   26b68:	4a16      	ldr	r2, [pc, #88]	; (26bc4 <net_app_init+0x94>)
   26b6a:	fb82 3206 	smull	r3, r2, r2, r6
   26b6e:	17f3      	asrs	r3, r6, #31
   26b70:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   26b74:	3301      	adds	r3, #1
   26b76:	e007      	b.n	26b88 <net_app_init+0x58>
		count++;
   26b78:	2101      	movs	r1, #1
   26b7a:	e7e9      	b.n	26b50 <net_app_init+0x20>
		count = -1;
   26b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26b80:	e002      	b.n	26b88 <net_app_init+0x58>
		count = 0;
   26b82:	2300      	movs	r3, #0
   26b84:	e000      	b.n	26b88 <net_app_init+0x58>
   26b86:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   26b88:	1e5c      	subs	r4, r3, #1
   26b8a:	b153      	cbz	r3, 26ba2 <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   26b8c:	4629      	mov	r1, r5
   26b8e:	480e      	ldr	r0, [pc, #56]	; (26bc8 <net_app_init+0x98>)
   26b90:	f002 ff96 	bl	29ac0 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   26b94:	2800      	cmp	r0, #0
   26b96:	d0f6      	beq.n	26b86 <net_app_init+0x56>
	return sem->count;
   26b98:	4b09      	ldr	r3, [pc, #36]	; (26bc0 <net_app_init+0x90>)
   26b9a:	689a      	ldr	r2, [r3, #8]
   26b9c:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   26b9e:	2a00      	cmp	r2, #0
   26ba0:	d1f2      	bne.n	26b88 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   26ba2:	b92c      	cbnz	r4, 26bb0 <net_app_init+0x80>
   26ba4:	b936      	cbnz	r6, 26bb4 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   26ba6:	2000      	movs	r0, #0
   26ba8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   26baa:	f06f 0012 	mvn.w	r0, #18
   26bae:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26bb0:	2000      	movs	r0, #0
   26bb2:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   26bb4:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   26bb8:	bd70      	pop	{r4, r5, r6, pc}
   26bba:	bf00      	nop
   26bbc:	66666667 	.word	0x66666667
   26bc0:	200029b4 	.word	0x200029b4
   26bc4:	10624dd3 	.word	0x10624dd3
   26bc8:	2000d63c 	.word	0x2000d63c

00026bcc <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   26bcc:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   26bce:	f000 fb5b 	bl	27288 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   26bd2:	f247 5230 	movw	r2, #30000	; 0x7530
   26bd6:	2100      	movs	r1, #0
   26bd8:	4801      	ldr	r0, [pc, #4]	; (26be0 <init_net_app+0x14>)
   26bda:	f7ff ffa9 	bl	26b30 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   26bde:	bd08      	pop	{r3, pc}
   26be0:	00032d98 	.word	0x00032d98

00026be4 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   26be4:	f06f 0015 	mvn.w	r0, #21
   26be8:	4770      	bx	lr

00026bea <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   26bea:	b510      	push	{r4, lr}
   26bec:	4604      	mov	r4, r0
   26bee:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   26bf0:	461a      	mov	r2, r3
   26bf2:	b113      	cbz	r3, 26bfa <set_remote_addr+0x10>
   26bf4:	880b      	ldrh	r3, [r1, #0]
   26bf6:	2b0a      	cmp	r3, #10
   26bf8:	d00e      	beq.n	26c18 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   26bfa:	b112      	cbz	r2, 26c02 <set_remote_addr+0x18>
   26bfc:	880b      	ldrh	r3, [r1, #0]
   26bfe:	2b02      	cmp	r3, #2
   26c00:	d012      	beq.n	26c28 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   26c02:	9b02      	ldr	r3, [sp, #8]
   26c04:	221c      	movs	r2, #28
   26c06:	4601      	mov	r1, r0
   26c08:	4620      	mov	r0, r4
   26c0a:	f7ff ffeb 	bl	26be4 <try_resolve>
	if (ret < 0) {
   26c0e:	2800      	cmp	r0, #0
   26c10:	db0c      	blt.n	26c2c <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   26c12:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   26c14:	2000      	movs	r0, #0
   26c16:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   26c18:	2218      	movs	r2, #24
   26c1a:	f104 001c 	add.w	r0, r4, #28
   26c1e:	f7d9 fb4f 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   26c22:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   26c24:	2000      	movs	r0, #0
   26c26:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   26c28:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   26c2c:	bd10      	pop	{r4, pc}

00026c2e <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   26c2e:	6803      	ldr	r3, [r0, #0]
   26c30:	b13b      	cbz	r3, 26c42 <close_net_ctx+0x14>
{
   26c32:	b510      	push	{r4, lr}
   26c34:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   26c36:	4618      	mov	r0, r3
   26c38:	f7f6 fcbe 	bl	1d5b8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   26c3c:	2300      	movs	r3, #0
   26c3e:	6023      	str	r3, [r4, #0]
   26c40:	bd10      	pop	{r4, pc}
   26c42:	4770      	bx	lr

00026c44 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   26c44:	7803      	ldrb	r3, [r0, #0]
   26c46:	2b5b      	cmp	r3, #91	; 0x5b
   26c48:	d002      	beq.n	26c50 <get_port_number+0xc>
   26c4a:	2300      	movs	r3, #0
   26c4c:	4619      	mov	r1, r3
   26c4e:	e019      	b.n	26c84 <get_port_number+0x40>
{
   26c50:	b570      	push	{r4, r5, r6, lr}
   26c52:	460d      	mov	r5, r1
   26c54:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   26c56:	4913      	ldr	r1, [pc, #76]	; (26ca4 <get_port_number+0x60>)
   26c58:	f004 fa6c 	bl	2b134 <strstr>
		if (!ptr) {
   26c5c:	4606      	mov	r6, r0
   26c5e:	b1f0      	cbz	r0, 26c9e <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   26c60:	1c61      	adds	r1, r4, #1
   26c62:	1a44      	subs	r4, r0, r1
   26c64:	2c2e      	cmp	r4, #46	; 0x2e
   26c66:	bfa8      	it	ge
   26c68:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   26c6a:	4622      	mov	r2, r4
   26c6c:	4628      	mov	r0, r5
   26c6e:	f7d9 fb27 	bl	2c0 <memcpy>
		buf[end] = '\0';
   26c72:	2100      	movs	r1, #0
   26c74:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   26c76:	220a      	movs	r2, #10
   26c78:	1cb0      	adds	r0, r6, #2
   26c7a:	f004 fbfb 	bl	2b474 <strtol>
   26c7e:	b280      	uxth	r0, r0
		return port;
   26c80:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   26c82:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   26c84:	5cc2      	ldrb	r2, [r0, r3]
   26c86:	b11a      	cbz	r2, 26c90 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   26c88:	2a3a      	cmp	r2, #58	; 0x3a
   26c8a:	d1fa      	bne.n	26c82 <get_port_number+0x3e>
			count++;
   26c8c:	3101      	adds	r1, #1
   26c8e:	e7f8      	b.n	26c82 <get_port_number+0x3e>
	if (count == 1) {
   26c90:	2901      	cmp	r1, #1
   26c92:	d001      	beq.n	26c98 <get_port_number+0x54>
	return 0;
   26c94:	2000      	movs	r0, #0
   26c96:	4770      	bx	lr
		return -EAFNOSUPPORT;
   26c98:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26c9c:	4770      	bx	lr
			return -EINVAL;
   26c9e:	f06f 0015 	mvn.w	r0, #21
   26ca2:	bd70      	pop	{r4, r5, r6, pc}
   26ca4:	00032db0 	.word	0x00032db0

00026ca8 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   26ca8:	b538      	push	{r3, r4, r5, lr}
   26caa:	460d      	mov	r5, r1
   26cac:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   26cae:	4613      	mov	r3, r2
   26cb0:	2200      	movs	r2, #0
   26cb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   26cb4:	f7f6 ff88 	bl	1dbc8 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   26cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26cba:	b11b      	cbz	r3, 26cc4 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   26cbc:	6f22      	ldr	r2, [r4, #112]	; 0x70
   26cbe:	4629      	mov	r1, r5
   26cc0:	4620      	mov	r0, r4
   26cc2:	4798      	blx	r3
   26cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

00026cc8 <net_app_init_client>:
{
   26cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26ccc:	b09a      	sub	sp, #104	; 0x68
   26cce:	9e22      	ldr	r6, [sp, #136]	; 0x88
   26cd0:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   26cd4:	2800      	cmp	r0, #0
   26cd6:	f000 80c9 	beq.w	26e6c <net_app_init_client+0x1a4>
   26cda:	4604      	mov	r4, r0
	if (ctx->is_init) {
   26cdc:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26ce0:	f010 0f01 	tst.w	r0, #1
   26ce4:	f040 80c5 	bne.w	26e72 <net_app_init_client+0x1aa>
   26ce8:	4699      	mov	r9, r3
   26cea:	4617      	mov	r7, r2
   26cec:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   26cee:	2218      	movs	r2, #24
   26cf0:	2100      	movs	r1, #0
   26cf2:	a802      	add	r0, sp, #8
   26cf4:	f003 fea4 	bl	2aa40 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   26cf8:	2218      	movs	r2, #24
   26cfa:	2100      	movs	r1, #0
   26cfc:	a808      	add	r0, sp, #32
   26cfe:	f003 fe9f 	bl	2aa40 <memset>
	if (peer_addr) {
   26d02:	2e00      	cmp	r6, #0
   26d04:	d03c      	beq.n	26d80 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   26d06:	2218      	movs	r2, #24
   26d08:	4631      	mov	r1, r6
   26d0a:	a808      	add	r0, sp, #32
   26d0c:	f7d9 fad8 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   26d10:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   26d14:	f1b9 0f00 	cmp.w	r9, #0
   26d18:	d05e      	beq.n	26dd8 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   26d1a:	2218      	movs	r2, #24
   26d1c:	4649      	mov	r1, r9
   26d1e:	a802      	add	r0, sp, #8
   26d20:	f7d9 face 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   26d24:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26d28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26d2c:	429a      	cmp	r2, r3
   26d2e:	f040 80a3 	bne.w	26e78 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   26d32:	2302      	movs	r3, #2
   26d34:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   26d38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   26d3a:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   26d3c:	4b54      	ldr	r3, [pc, #336]	; (26e90 <net_app_init_client+0x1c8>)
   26d3e:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   26d40:	4b54      	ldr	r3, [pc, #336]	; (26e94 <net_app_init_client+0x1cc>)
   26d42:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   26d44:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   26d48:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   26d4c:	ab02      	add	r3, sp, #8
   26d4e:	463a      	mov	r2, r7
   26d50:	4629      	mov	r1, r5
   26d52:	4620      	mov	r0, r4
   26d54:	f000 f949 	bl	26fea <_net_app_config_local_ctx>
	if (ret < 0) {
   26d58:	1e05      	subs	r5, r0, #0
   26d5a:	db42      	blt.n	26de2 <net_app_init_client+0x11a>
	if (peer_addr) {
   26d5c:	2e00      	cmp	r6, #0
   26d5e:	d04c      	beq.n	26dfa <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   26d60:	8833      	ldrh	r3, [r6, #0]
   26d62:	2b02      	cmp	r3, #2
   26d64:	f000 808b 	beq.w	26e7e <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   26d68:	2b0a      	cmp	r3, #10
   26d6a:	d03e      	beq.n	26dea <net_app_init_client+0x122>
	ctx->is_init = true;
   26d6c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26d70:	f043 0301 	orr.w	r3, r3, #1
   26d74:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   26d78:	4628      	mov	r0, r5
   26d7a:	b01a      	add	sp, #104	; 0x68
   26d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   26d80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26d82:	b333      	cbz	r3, 26dd2 <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   26d84:	222f      	movs	r2, #47	; 0x2f
   26d86:	a90e      	add	r1, sp, #56	; 0x38
   26d88:	4618      	mov	r0, r3
   26d8a:	f7ff ff5b 	bl	26c44 <get_port_number>
		if (ret > 0) {
   26d8e:	2800      	cmp	r0, #0
   26d90:	dd17      	ble.n	26dc2 <net_app_init_client+0xfa>
			peer_port = ret;
   26d92:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   26d96:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   26d9a:	4650      	mov	r0, sl
   26d9c:	f7d9 fcb0 	bl	700 <strlen>
   26da0:	aa08      	add	r2, sp, #32
   26da2:	4601      	mov	r1, r0
   26da4:	4650      	mov	r0, sl
   26da6:	f7f7 ff72 	bl	1ec8e <net_ipaddr_parse>
   26daa:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   26dac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26db0:	2b0a      	cmp	r3, #10
   26db2:	d1af      	bne.n	26d14 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   26db4:	ea4f 2318 	mov.w	r3, r8, lsr #8
   26db8:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   26dbc:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   26dc0:	e7a8      	b.n	26d14 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   26dc2:	222e      	movs	r2, #46	; 0x2e
   26dc4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   26dc6:	a80e      	add	r0, sp, #56	; 0x38
   26dc8:	f004 f818 	bl	2adfc <strncpy>
	const char *base_peer_addr = peer_addr_str;
   26dcc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   26dd0:	e7e3      	b.n	26d9a <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   26dd2:	f04f 0a00 	mov.w	sl, #0
   26dd6:	e79d      	b.n	26d14 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   26dd8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26ddc:	f8ad 3008 	strh.w	r3, [sp, #8]
   26de0:	e7a7      	b.n	26d32 <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   26de2:	4620      	mov	r0, r4
   26de4:	f7ff ff23 	bl	26c2e <close_net_ctx>
		goto fail;
   26de8:	e7c6      	b.n	26d78 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   26dea:	2218      	movs	r2, #24
   26dec:	4631      	mov	r1, r6
   26dee:	f104 001c 	add.w	r0, r4, #28
   26df2:	f7d9 fa65 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   26df6:	6364      	str	r4, [r4, #52]	; 0x34
   26df8:	e7b8      	b.n	26d6c <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   26dfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26dfc:	b363      	cbz	r3, 26e58 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   26dfe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26e00:	9300      	str	r3, [sp, #0]
   26e02:	f11a 0300 	adds.w	r3, sl, #0
   26e06:	bf18      	it	ne
   26e08:	2301      	movne	r3, #1
   26e0a:	aa0e      	add	r2, sp, #56	; 0x38
   26e0c:	a908      	add	r1, sp, #32
   26e0e:	4620      	mov	r0, r4
   26e10:	f7ff feeb 	bl	26bea <set_remote_addr>
	if (ret < 0) {
   26e14:	1e05      	subs	r5, r0, #0
   26e16:	db25      	blt.n	26e64 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   26e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26e1a:	b39b      	cbz	r3, 26e84 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   26e1c:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   26e1e:	b3a3      	cbz	r3, 26e8a <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   26e20:	8ba3      	ldrh	r3, [r4, #28]
   26e22:	2b0a      	cmp	r3, #10
   26e24:	d1a2      	bne.n	26d6c <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   26e26:	4625      	mov	r5, r4
   26e28:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   26e2c:	88e2      	ldrh	r2, [r4, #6]
   26e2e:	2100      	movs	r1, #0
   26e30:	4628      	mov	r0, r5
   26e32:	f000 f8a3 	bl	26f7c <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   26e36:	6821      	ldr	r1, [r4, #0]
   26e38:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   26e3c:	9300      	str	r3, [sp, #0]
   26e3e:	2318      	movs	r3, #24
   26e40:	462a      	mov	r2, r5
   26e42:	4620      	mov	r0, r4
   26e44:	f000 f886 	bl	26f54 <_net_app_set_net_ctx>
		if (ret < 0) {
   26e48:	1e05      	subs	r5, r0, #0
   26e4a:	da8f      	bge.n	26d6c <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   26e4c:	6820      	ldr	r0, [r4, #0]
   26e4e:	f7f6 fbb3 	bl	1d5b8 <net_context_put>
			ctx->ipv6.ctx = NULL;
   26e52:	2300      	movs	r3, #0
   26e54:	6023      	str	r3, [r4, #0]
   26e56:	e789      	b.n	26d6c <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   26e58:	4620      	mov	r0, r4
   26e5a:	f7ff fee8 	bl	26c2e <close_net_ctx>
		ret = -EINVAL;
   26e5e:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   26e62:	e789      	b.n	26d78 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   26e64:	4620      	mov	r0, r4
   26e66:	f7ff fee2 	bl	26c2e <close_net_ctx>
		goto fail;
   26e6a:	e785      	b.n	26d78 <net_app_init_client+0xb0>
		return -EINVAL;
   26e6c:	f06f 0515 	mvn.w	r5, #21
   26e70:	e782      	b.n	26d78 <net_app_init_client+0xb0>
		return -EALREADY;
   26e72:	f06f 0577 	mvn.w	r5, #119	; 0x77
   26e76:	e77f      	b.n	26d78 <net_app_init_client+0xb0>
			return -EINVAL;
   26e78:	f06f 0515 	mvn.w	r5, #21
   26e7c:	e77c      	b.n	26d78 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   26e7e:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   26e82:	e779      	b.n	26d78 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   26e84:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26e88:	e776      	b.n	26d78 <net_app_init_client+0xb0>
   26e8a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26e8e:	e773      	b.n	26d78 <net_app_init_client+0xb0>
   26e90:	0001db87 	.word	0x0001db87
   26e94:	00026f2b 	.word	0x00026f2b

00026e98 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   26e98:	b1d0      	cbz	r0, 26ed0 <net_app_connect+0x38>
{
   26e9a:	b570      	push	{r4, r5, r6, lr}
   26e9c:	b082      	sub	sp, #8
   26e9e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26ea0:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26ea4:	f012 0f01 	tst.w	r2, #1
   26ea8:	d015      	beq.n	26ed6 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   26eaa:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   26eae:	2a02      	cmp	r2, #2
   26eb0:	d114      	bne.n	26edc <net_app_connect+0x44>
   26eb2:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26eb4:	2100      	movs	r1, #0
   26eb6:	f000 f8df 	bl	27078 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26eba:	b190      	cbz	r0, 26ee2 <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   26ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   26ebe:	9401      	str	r4, [sp, #4]
   26ec0:	9500      	str	r5, [sp, #0]
   26ec2:	4b09      	ldr	r3, [pc, #36]	; (26ee8 <net_app_connect+0x50>)
   26ec4:	2218      	movs	r2, #24
   26ec6:	311c      	adds	r1, #28
   26ec8:	f7f6 fd4a 	bl	1d960 <net_context_connect>
		}
#endif
	}

	return ret;
}
   26ecc:	b002      	add	sp, #8
   26ece:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26ed0:	f06f 0015 	mvn.w	r0, #21
   26ed4:	4770      	bx	lr
		return -ENOENT;
   26ed6:	f06f 0001 	mvn.w	r0, #1
   26eda:	e7f7      	b.n	26ecc <net_app_connect+0x34>
		return -EINVAL;
   26edc:	f06f 0015 	mvn.w	r0, #21
   26ee0:	e7f4      	b.n	26ecc <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   26ee2:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26ee6:	e7f1      	b.n	26ecc <net_app_connect+0x34>
   26ee8:	00026ca9 	.word	0x00026ca9

00026eec <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   26eec:	6340      	str	r0, [r0, #52]	; 0x34
   26eee:	4770      	bx	lr

00026ef0 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26ef0:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26ef4:	2802      	cmp	r0, #2
   26ef6:	d000      	beq.n	26efa <_app_send+0xa>
   26ef8:	4770      	bx	lr
{
   26efa:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26efc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   26efe:	b114      	cbz	r4, 26f06 <_app_send+0x16>
   26f00:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   26f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26f04:	47a0      	blx	r4
   26f06:	bd10      	pop	{r4, pc}

00026f08 <setup_ipv6_ctx>:
{
   26f08:	b510      	push	{r4, lr}
   26f0a:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   26f0c:	4603      	mov	r3, r0
   26f0e:	200a      	movs	r0, #10
   26f10:	f7f6 f8e6 	bl	1d0e0 <net_context_get>
	if (ret < 0) {
   26f14:	2800      	cmp	r0, #0
   26f16:	db05      	blt.n	26f24 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   26f18:	6823      	ldr	r3, [r4, #0]
   26f1a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   26f1c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   26f1e:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   26f20:	641a      	str	r2, [r3, #64]	; 0x40
}
   26f22:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   26f24:	2300      	movs	r3, #0
   26f26:	6023      	str	r3, [r4, #0]
		return ret;
   26f28:	bd10      	pop	{r4, pc}

00026f2a <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   26f2a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26f2e:	2802      	cmp	r0, #2
   26f30:	d000      	beq.n	26f34 <_net_app_received+0xa>
   26f32:	4770      	bx	lr
{
   26f34:	b538      	push	{r3, r4, r5, lr}
   26f36:	4618      	mov	r0, r3
   26f38:	4614      	mov	r4, r2
		if (!pkt) {
   26f3a:	b121      	cbz	r1, 26f46 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   26f3c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   26f3e:	b10d      	cbz	r5, 26f44 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   26f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26f42:	47a8      	blx	r5
   26f44:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   26f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26f48:	2b00      	cmp	r3, #0
   26f4a:	d0fb      	beq.n	26f44 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   26f4c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   26f4e:	4621      	mov	r1, r4
   26f50:	4798      	blx	r3
   26f52:	bd38      	pop	{r3, r4, r5, pc}

00026f54 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   26f54:	b161      	cbz	r1, 26f70 <_net_app_set_net_ctx+0x1c>
{
   26f56:	b510      	push	{r4, lr}
   26f58:	4614      	mov	r4, r2
   26f5a:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   26f5c:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   26f60:	f012 0f01 	tst.w	r2, #1
   26f64:	d007      	beq.n	26f76 <_net_app_set_net_ctx+0x22>
   26f66:	461a      	mov	r2, r3
   26f68:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   26f6a:	f7f6 fb67 	bl	1d63c <net_context_bind>
	return ret;
   26f6e:	bd10      	pop	{r4, pc}
		return -ENOENT;
   26f70:	f06f 0001 	mvn.w	r0, #1
   26f74:	4770      	bx	lr
   26f76:	f06f 0001 	mvn.w	r0, #1
}
   26f7a:	bd10      	pop	{r4, pc}

00026f7c <_net_app_set_local_addr>:
{
   26f7c:	b570      	push	{r4, r5, r6, lr}
   26f7e:	b084      	sub	sp, #16
   26f80:	4604      	mov	r4, r0
	if (myaddr) {
   26f82:	b169      	cbz	r1, 26fa0 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   26f84:	8800      	ldrh	r0, [r0, #0]
   26f86:	2802      	cmp	r0, #2
   26f88:	d029      	beq.n	26fde <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   26f8a:	280a      	cmp	r0, #10
   26f8c:	d12a      	bne.n	26fe4 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   26f8e:	0a13      	lsrs	r3, r2, #8
   26f90:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   26f94:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   26f96:	1d22      	adds	r2, r4, #4
   26f98:	f7f7 fcc3 	bl	1e922 <net_addr_pton>
}
   26f9c:	b004      	add	sp, #16
   26f9e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   26fa0:	8803      	ldrh	r3, [r0, #0]
   26fa2:	2b0a      	cmp	r3, #10
   26fa4:	d003      	beq.n	26fae <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   26fa6:	2b02      	cmp	r3, #2
   26fa8:	d016      	beq.n	26fd8 <_net_app_set_local_addr+0x5c>
	return 0;
   26faa:	2000      	movs	r0, #0
   26fac:	e7f6      	b.n	26f9c <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   26fae:	f7f9 f959 	bl	20264 <net_ipv6_unspecified_address>
   26fb2:	4601      	mov	r1, r0
   26fb4:	2000      	movs	r0, #0
   26fb6:	f7f5 faf9 	bl	1c5ac <net_if_ipv6_select_src_addr>
   26fba:	4603      	mov	r3, r0
   26fbc:	466d      	mov	r5, sp
   26fbe:	6800      	ldr	r0, [r0, #0]
   26fc0:	6859      	ldr	r1, [r3, #4]
   26fc2:	689a      	ldr	r2, [r3, #8]
   26fc4:	68db      	ldr	r3, [r3, #12]
   26fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26fc8:	466d      	mov	r5, sp
   26fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   26fcc:	6060      	str	r0, [r4, #4]
   26fce:	60a1      	str	r1, [r4, #8]
   26fd0:	60e2      	str	r2, [r4, #12]
   26fd2:	6123      	str	r3, [r4, #16]
	return 0;
   26fd4:	2000      	movs	r0, #0
   26fd6:	e7e1      	b.n	26f9c <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   26fd8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26fdc:	e7de      	b.n	26f9c <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   26fde:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26fe2:	e7db      	b.n	26f9c <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   26fe4:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26fe8:	e7d8      	b.n	26f9c <_net_app_set_local_addr+0x20>

00026fea <_net_app_config_local_ctx>:
{
   26fea:	b538      	push	{r3, r4, r5, lr}
   26fec:	4604      	mov	r4, r0
	if (!addr) {
   26fee:	b163      	cbz	r3, 2700a <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   26ff0:	881b      	ldrh	r3, [r3, #0]
   26ff2:	2b0a      	cmp	r3, #10
   26ff4:	d015      	beq.n	27022 <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   26ff6:	2b02      	cmp	r3, #2
   26ff8:	d01c      	beq.n	27034 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   26ffa:	b9f3      	cbnz	r3, 2703a <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26ffc:	4620      	mov	r0, r4
   26ffe:	f7ff ff83 	bl	26f08 <setup_ipv6_ctx>
   27002:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   27004:	6364      	str	r4, [r4, #52]	; 0x34
}
   27006:	4628      	mov	r0, r5
   27008:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   2700a:	8883      	ldrh	r3, [r0, #4]
   2700c:	2b0a      	cmp	r3, #10
   2700e:	d000      	beq.n	27012 <_net_app_config_local_ctx+0x28>
   27010:	b96b      	cbnz	r3, 2702e <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   27012:	4620      	mov	r0, r4
   27014:	f7ff ff78 	bl	26f08 <setup_ipv6_ctx>
   27018:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   2701a:	4620      	mov	r0, r4
   2701c:	f7ff ff66 	bl	26eec <select_default_ctx>
   27020:	e7f1      	b.n	27006 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   27022:	4620      	mov	r0, r4
   27024:	f7ff ff70 	bl	26f08 <setup_ipv6_ctx>
   27028:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   2702a:	6364      	str	r4, [r4, #52]	; 0x34
   2702c:	e7eb      	b.n	27006 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   2702e:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   27032:	e7e8      	b.n	27006 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   27034:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   27038:	e7e5      	b.n	27006 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   2703a:	f06f 0515 	mvn.w	r5, #21
	return ret;
   2703e:	e7e2      	b.n	27006 <_net_app_config_local_ctx+0x1c>

00027040 <net_app_release>:
	if (!ctx) {
   27040:	b1a0      	cbz	r0, 2706c <net_app_release+0x2c>
{
   27042:	b510      	push	{r4, lr}
   27044:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   27046:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2704a:	f013 0f01 	tst.w	r3, #1
   2704e:	d010      	beq.n	27072 <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   27050:	6800      	ldr	r0, [r0, #0]
   27052:	b118      	cbz	r0, 2705c <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   27054:	f7f6 fab0 	bl	1d5b8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   27058:	2300      	movs	r3, #0
   2705a:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   2705c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   27060:	f36f 0300 	bfc	r3, #0, #1
   27064:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   27068:	2000      	movs	r0, #0
   2706a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2706c:	f06f 0015 	mvn.w	r0, #21
   27070:	4770      	bx	lr
		return -ENOENT;
   27072:	f06f 0001 	mvn.w	r0, #1
}
   27076:	bd10      	pop	{r4, pc}

00027078 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   27078:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   2707c:	2b02      	cmp	r3, #2
   2707e:	d128      	bne.n	270d2 <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   27080:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   27084:	2b11      	cmp	r3, #17
   27086:	d009      	beq.n	2709c <_net_app_select_net_ctx+0x24>
		if (!dst) {
   27088:	b1c1      	cbz	r1, 270bc <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   2708a:	880b      	ldrh	r3, [r1, #0]
   2708c:	2b02      	cmp	r3, #2
   2708e:	d01c      	beq.n	270ca <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   27090:	2b0a      	cmp	r3, #10
   27092:	d016      	beq.n	270c2 <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   27094:	b9db      	cbnz	r3, 270ce <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   27096:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27098:	6818      	ldr	r0, [r3, #0]
   2709a:	4770      	bx	lr
		if (!dst) {
   2709c:	b131      	cbz	r1, 270ac <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   2709e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   270a2:	f013 0f02 	tst.w	r3, #2
   270a6:	d0f0      	beq.n	2708a <_net_app_select_net_ctx+0x12>
				return NULL;
   270a8:	2000      	movs	r0, #0
   270aa:	4770      	bx	lr
			if (ctx->is_tls) {
   270ac:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   270b0:	f013 0f02 	tst.w	r3, #2
   270b4:	d107      	bne.n	270c6 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   270b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   270b8:	6818      	ldr	r0, [r3, #0]
   270ba:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   270bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   270be:	6818      	ldr	r0, [r3, #0]
   270c0:	4770      	bx	lr
				return ctx->ipv6.ctx;
   270c2:	6800      	ldr	r0, [r0, #0]
   270c4:	4770      	bx	lr
				return NULL;
   270c6:	2000      	movs	r0, #0
   270c8:	4770      	bx	lr
				return NULL;
   270ca:	2000      	movs	r0, #0
   270cc:	4770      	bx	lr
	return NULL;
   270ce:	2000      	movs	r0, #0
   270d0:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   270d2:	2000      	movs	r0, #0
}
   270d4:	4770      	bx	lr

000270d6 <net_app_set_cb>:
	if (!ctx) {
   270d6:	b170      	cbz	r0, 270f6 <net_app_set_cb+0x20>
{
   270d8:	b410      	push	{r4}
   270da:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   270dc:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   270e0:	f010 0f01 	tst.w	r0, #1
   270e4:	d00a      	beq.n	270fc <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   270e6:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   270e8:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   270ea:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   270ec:	9b01      	ldr	r3, [sp, #4]
   270ee:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   270f0:	2000      	movs	r0, #0
}
   270f2:	bc10      	pop	{r4}
   270f4:	4770      	bx	lr
		return -EINVAL;
   270f6:	f06f 0015 	mvn.w	r0, #21
   270fa:	4770      	bx	lr
		return -ENOENT;
   270fc:	f06f 0001 	mvn.w	r0, #1
   27100:	e7f7      	b.n	270f2 <net_app_set_cb+0x1c>
	...

00027104 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   27104:	2800      	cmp	r0, #0
   27106:	d064      	beq.n	271d2 <net_app_send_pkt+0xce>
{
   27108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2710c:	b08a      	sub	sp, #40	; 0x28
   2710e:	460d      	mov	r5, r1
   27110:	4616      	mov	r6, r2
   27112:	461f      	mov	r7, r3
   27114:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   27116:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2711a:	f013 0f01 	tst.w	r3, #1
   2711e:	d05b      	beq.n	271d8 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   27120:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   27122:	b188      	cbz	r0, 27148 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   27124:	f8d1 e008 	ldr.w	lr, [r1, #8]
   27128:	4673      	mov	r3, lr
	size_t bytes = 0;
   2712a:	2100      	movs	r1, #0
   2712c:	e002      	b.n	27134 <net_app_send_pkt+0x30>
		bytes += buf->len;
   2712e:	899a      	ldrh	r2, [r3, #12]
   27130:	4411      	add	r1, r2
		buf = buf->frags;
   27132:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27134:	2b00      	cmp	r3, #0
   27136:	d1fa      	bne.n	2712e <net_app_send_pkt+0x2a>
   27138:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   2713a:	2900      	cmp	r1, #0
   2713c:	dd0d      	ble.n	2715a <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   2713e:	f10e 0008 	add.w	r0, lr, #8
   27142:	f7f4 f9f8 	bl	1b536 <net_buf_simple_pull>
   27146:	e008      	b.n	2715a <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   27148:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   2714a:	2200      	movs	r2, #0
   2714c:	e002      	b.n	27154 <net_app_send_pkt+0x50>
		bytes += buf->len;
   2714e:	8999      	ldrh	r1, [r3, #12]
   27150:	440a      	add	r2, r1
		buf = buf->frags;
   27152:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27154:	2b00      	cmp	r3, #0
   27156:	d1fa      	bne.n	2714e <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   27158:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   2715a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   2715e:	2b11      	cmp	r3, #17
   27160:	d00e      	beq.n	27180 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   27162:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   27166:	9402      	str	r4, [sp, #8]
   27168:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2716a:	9301      	str	r3, [sp, #4]
   2716c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2716e:	9300      	str	r3, [sp, #0]
   27170:	4b21      	ldr	r3, [pc, #132]	; (271f8 <net_app_send_pkt+0xf4>)
   27172:	463a      	mov	r2, r7
   27174:	4631      	mov	r1, r6
   27176:	4628      	mov	r0, r5
   27178:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   2717a:	b00a      	add	sp, #40	; 0x28
   2717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   27180:	b1de      	cbz	r6, 271ba <net_app_send_pkt+0xb6>
	return pkt->family;
   27182:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   27186:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   2718a:	2b02      	cmp	r3, #2
   2718c:	d02d      	beq.n	271ea <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   2718e:	2b0a      	cmp	r3, #10
   27190:	d12e      	bne.n	271f0 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   27192:	af04      	add	r7, sp, #16
   27194:	6830      	ldr	r0, [r6, #0]
   27196:	6871      	ldr	r1, [r6, #4]
   27198:	68b2      	ldr	r2, [r6, #8]
   2719a:	68f3      	ldr	r3, [r6, #12]
   2719c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2719e:	6930      	ldr	r0, [r6, #16]
   271a0:	6971      	ldr	r1, [r6, #20]
   271a2:	c703      	stmia	r7!, {r0, r1}
   271a4:	af04      	add	r7, sp, #16
   271a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   271a8:	61e0      	str	r0, [r4, #28]
   271aa:	6221      	str	r1, [r4, #32]
   271ac:	6262      	str	r2, [r4, #36]	; 0x24
   271ae:	62a3      	str	r3, [r4, #40]	; 0x28
   271b0:	cf03      	ldmia	r7!, {r0, r1}
   271b2:	62e0      	str	r0, [r4, #44]	; 0x2c
   271b4:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   271b6:	2718      	movs	r7, #24
   271b8:	e7d3      	b.n	27162 <net_app_send_pkt+0x5e>
   271ba:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   271be:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   271c2:	2b02      	cmp	r3, #2
   271c4:	d00b      	beq.n	271de <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   271c6:	2b0a      	cmp	r3, #10
   271c8:	d10c      	bne.n	271e4 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   271ca:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   271ce:	2718      	movs	r7, #24
   271d0:	e7c7      	b.n	27162 <net_app_send_pkt+0x5e>
		return -EINVAL;
   271d2:	f06f 0015 	mvn.w	r0, #21
   271d6:	4770      	bx	lr
		return -ENOENT;
   271d8:	f06f 0001 	mvn.w	r0, #1
   271dc:	e7cd      	b.n	2717a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   271de:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   271e2:	e7ca      	b.n	2717a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   271e4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   271e8:	e7c7      	b.n	2717a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   271ea:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   271ee:	e7c4      	b.n	2717a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   271f0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   271f4:	e7c1      	b.n	2717a <net_app_send_pkt+0x76>
   271f6:	bf00      	nop
   271f8:	00026ef1 	.word	0x00026ef1

000271fc <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   271fc:	b510      	push	{r4, lr}
   271fe:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   27200:	2300      	movs	r3, #0
   27202:	9300      	str	r3, [sp, #0]
   27204:	9301      	str	r3, [sp, #4]
   27206:	9302      	str	r3, [sp, #8]
   27208:	9303      	str	r3, [sp, #12]
   2720a:	9304      	str	r3, [sp, #16]
   2720c:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   2720e:	b198      	cbz	r0, 27238 <net_app_get_net_pkt+0x3c>
   27210:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   27212:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   27216:	f010 0f01 	tst.w	r0, #1
   2721a:	d00f      	beq.n	2723c <net_app_get_net_pkt+0x40>
   2721c:	4618      	mov	r0, r3
   2721e:	4614      	mov	r4, r2
   27220:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   27222:	a906      	add	r1, sp, #24
   27224:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   27228:	f7ff ff26 	bl	27078 <_net_app_select_net_ctx>
	if (!net_ctx) {
   2722c:	b140      	cbz	r0, 27240 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   2722e:	4621      	mov	r1, r4
   27230:	f7f6 fe24 	bl	1de7c <net_pkt_get_tx>
}
   27234:	b006      	add	sp, #24
   27236:	bd10      	pop	{r4, pc}
		return NULL;
   27238:	2000      	movs	r0, #0
   2723a:	e7fb      	b.n	27234 <net_app_get_net_pkt+0x38>
		return NULL;
   2723c:	2000      	movs	r0, #0
   2723e:	e7f9      	b.n	27234 <net_app_get_net_pkt+0x38>
		return NULL;
   27240:	2000      	movs	r0, #0
   27242:	e7f7      	b.n	27234 <net_app_get_net_pkt+0x38>

00027244 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   27244:	b1c0      	cbz	r0, 27278 <net_app_close+0x34>
{
   27246:	b538      	push	{r3, r4, r5, lr}
   27248:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   2724a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2724e:	f013 0f01 	tst.w	r3, #1
   27252:	d014      	beq.n	2727e <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   27254:	2100      	movs	r1, #0
   27256:	f7ff ff0f 	bl	27078 <_net_app_select_net_ctx>
   2725a:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   2725c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2725e:	b11b      	cbz	r3, 27268 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   27260:	6f22      	ldr	r2, [r4, #112]	; 0x70
   27262:	2100      	movs	r1, #0
   27264:	4620      	mov	r0, r4
   27266:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   27268:	b165      	cbz	r5, 27284 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   2726a:	2400      	movs	r4, #0
   2726c:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   2726e:	4628      	mov	r0, r5
   27270:	f7f6 f9a2 	bl	1d5b8 <net_context_put>
	}

	return 0;
   27274:	4620      	mov	r0, r4
   27276:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27278:	f06f 0015 	mvn.w	r0, #21
   2727c:	4770      	bx	lr
		return -ENOENT;
   2727e:	f06f 0001 	mvn.w	r0, #1
   27282:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   27284:	2000      	movs	r0, #0
}
   27286:	bd38      	pop	{r3, r4, r5, pc}

00027288 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   27288:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   2728a:	2000      	movs	r0, #0
   2728c:	f7df fdec 	bl	6e68 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   27290:	1e03      	subs	r3, r0, #0
   27292:	db14      	blt.n	272be <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   27294:	4810      	ldr	r0, [pc, #64]	; (272d8 <_net_app_bt_setup+0x50>)
   27296:	f001 f939 	bl	2850c <device_get_binding>
	if (!dev) {
   2729a:	b1b8      	cbz	r0, 272cc <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   2729c:	f7f4 fc30 	bl	1bb00 <net_if_lookup_by_dev>
	if (!iface) {
   272a0:	4604      	mov	r4, r0
   272a2:	b1b0      	cbz	r0, 272d2 <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   272a4:	480d      	ldr	r0, [pc, #52]	; (272dc <_net_app_bt_setup+0x54>)
   272a6:	f7e3 fcf9 	bl	ac9c <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   272aa:	2303      	movs	r3, #3
   272ac:	4a0c      	ldr	r2, [pc, #48]	; (272e0 <_net_app_bt_setup+0x58>)
   272ae:	4621      	mov	r1, r4
   272b0:	480c      	ldr	r0, [pc, #48]	; (272e4 <_net_app_bt_setup+0x5c>)
   272b2:	f7f7 fe6b 	bl	1ef8c <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   272b6:	4603      	mov	r3, r0
   272b8:	b928      	cbnz	r0, 272c6 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   272ba:	4618      	mov	r0, r3
   272bc:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   272be:	f113 0f78 	cmn.w	r3, #120	; 0x78
   272c2:	d1fa      	bne.n	272ba <_net_app_bt_setup+0x32>
   272c4:	e7e6      	b.n	27294 <_net_app_bt_setup+0xc>
		return -EINVAL;
   272c6:	f06f 0315 	mvn.w	r3, #21
   272ca:	e7f6      	b.n	272ba <_net_app_bt_setup+0x32>
		return -ENODEV;
   272cc:	f06f 0312 	mvn.w	r3, #18
   272d0:	e7f3      	b.n	272ba <_net_app_bt_setup+0x32>
		return -EINVAL;
   272d2:	f06f 0315 	mvn.w	r3, #21
   272d6:	e7f0      	b.n	272ba <_net_app_bt_setup+0x32>
   272d8:	00031a8c 	.word	0x00031a8c
   272dc:	2000caac 	.word	0x2000caac
   272e0:	00031eb4 	.word	0x00031eb4
   272e4:	61550001 	.word	0x61550001

000272e8 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   272e8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   272ea:	4802      	ldr	r0, [pc, #8]	; (272f4 <shell_run+0xc>)
   272ec:	f000 fbbe 	bl	27a6c <shell_init>
	return 0;
}
   272f0:	2000      	movs	r0, #0
   272f2:	bd08      	pop	{r3, pc}
   272f4:	00032db4 	.word	0x00032db4

000272f8 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   272f8:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   272fa:	4b0f      	ldr	r3, [pc, #60]	; (27338 <get_prompt+0x40>)
   272fc:	681b      	ldr	r3, [r3, #0]
   272fe:	b123      	cbz	r3, 2730a <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   27300:	4798      	blx	r3
		if (str) {
   27302:	4603      	mov	r3, r0
   27304:	b108      	cbz	r0, 2730a <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   27306:	4618      	mov	r0, r3
   27308:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   2730a:	4b0c      	ldr	r3, [pc, #48]	; (2733c <get_prompt+0x44>)
   2730c:	681b      	ldr	r3, [r3, #0]
   2730e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27312:	d00c      	beq.n	2732e <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   27314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27318:	009a      	lsls	r2, r3, #2
   2731a:	4b09      	ldr	r3, [pc, #36]	; (27340 <get_prompt+0x48>)
   2731c:	4413      	add	r3, r2
   2731e:	689b      	ldr	r3, [r3, #8]
   27320:	b143      	cbz	r3, 27334 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   27322:	4798      	blx	r3
			if (ret) {
   27324:	4603      	mov	r3, r0
   27326:	2800      	cmp	r0, #0
   27328:	d1ed      	bne.n	27306 <get_prompt+0xe>
		return default_module_prompt;
   2732a:	4b06      	ldr	r3, [pc, #24]	; (27344 <get_prompt+0x4c>)
   2732c:	e7eb      	b.n	27306 <get_prompt+0xe>
	return prompt;
   2732e:	4b06      	ldr	r3, [pc, #24]	; (27348 <get_prompt+0x50>)
   27330:	681b      	ldr	r3, [r3, #0]
   27332:	e7e8      	b.n	27306 <get_prompt+0xe>
		return default_module_prompt;
   27334:	4b03      	ldr	r3, [pc, #12]	; (27344 <get_prompt+0x4c>)
   27336:	e7e6      	b.n	27306 <get_prompt+0xe>
   27338:	200029d0 	.word	0x200029d0
   2733c:	2000cab8 	.word	0x2000cab8
   27340:	2000d580 	.word	0x2000d580
   27344:	20002b80 	.word	0x20002b80
   27348:	20002b98 	.word	0x20002b98

0002734c <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   2734c:	2801      	cmp	r0, #1
   2734e:	d001      	beq.n	27354 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   27350:	2000      	movs	r0, #0
   27352:	4770      	bx	lr
		default_module = -1;
   27354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27358:	4b01      	ldr	r3, [pc, #4]	; (27360 <exit_module+0x14>)
   2735a:	601a      	str	r2, [r3, #0]
   2735c:	e7f8      	b.n	27350 <exit_module+0x4>
   2735e:	bf00      	nop
   27360:	2000cab8 	.word	0x2000cab8

00027364 <print_module_commands>:
{
   27364:	b538      	push	{r3, r4, r5, lr}
   27366:	4605      	mov	r5, r0
	printk("help\n");
   27368:	480a      	ldr	r0, [pc, #40]	; (27394 <print_module_commands+0x30>)
   2736a:	f7db fe7d 	bl	3068 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2736e:	2400      	movs	r4, #0
   27370:	e003      	b.n	2737a <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   27372:	4809      	ldr	r0, [pc, #36]	; (27398 <print_module_commands+0x34>)
   27374:	f7db fe78 	bl	3068 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   27378:	3401      	adds	r4, #1
   2737a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2737e:	009a      	lsls	r2, r3, #2
   27380:	4b06      	ldr	r3, [pc, #24]	; (2739c <print_module_commands+0x38>)
   27382:	4413      	add	r3, r2
   27384:	6859      	ldr	r1, [r3, #4]
   27386:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2738a:	0093      	lsls	r3, r2, #2
   2738c:	58c9      	ldr	r1, [r1, r3]
   2738e:	2900      	cmp	r1, #0
   27390:	d1ef      	bne.n	27372 <print_module_commands+0xe>
}
   27392:	bd38      	pop	{r3, r4, r5, pc}
   27394:	00032e70 	.word	0x00032e70
   27398:	0003208c 	.word	0x0003208c
   2739c:	2000d580 	.word	0x2000d580

000273a0 <line2argv>:
{
   273a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273a2:	4604      	mov	r4, r0
   273a4:	460e      	mov	r6, r1
   273a6:	4617      	mov	r7, r2
	if (!strlen(str)) {
   273a8:	f7d9 f9aa 	bl	700 <strlen>
   273ac:	b918      	cbnz	r0, 273b6 <line2argv+0x16>
   273ae:	4605      	mov	r5, r0
}
   273b0:	4628      	mov	r0, r5
   273b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   273b4:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   273b6:	7823      	ldrb	r3, [r4, #0]
   273b8:	2b20      	cmp	r3, #32
   273ba:	d0fb      	beq.n	273b4 <line2argv+0x14>
	if (!*str) {
   273bc:	b30b      	cbz	r3, 27402 <line2argv+0x62>
	argv[argc++] = str;
   273be:	6034      	str	r4, [r6, #0]
   273c0:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   273c2:	e00a      	b.n	273da <line2argv+0x3a>
			str++;
   273c4:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   273c6:	7823      	ldrb	r3, [r4, #0]
   273c8:	2b20      	cmp	r3, #32
   273ca:	d0fb      	beq.n	273c4 <line2argv+0x24>
		if (!*str) {
   273cc:	b1ab      	cbz	r3, 273fa <line2argv+0x5a>
		argv[argc++] = str;
   273ce:	1c6b      	adds	r3, r5, #1
   273d0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   273d4:	42bb      	cmp	r3, r7
   273d6:	d00a      	beq.n	273ee <line2argv+0x4e>
		argv[argc++] = str;
   273d8:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   273da:	2120      	movs	r1, #32
   273dc:	4620      	mov	r0, r4
   273de:	f003 fbe9 	bl	2abb4 <strchr>
   273e2:	4603      	mov	r3, r0
   273e4:	b148      	cbz	r0, 273fa <line2argv+0x5a>
		*str++ = '\0';
   273e6:	1c5c      	adds	r4, r3, #1
   273e8:	2200      	movs	r2, #0
   273ea:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   273ec:	e7eb      	b.n	273c6 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   273ee:	1e79      	subs	r1, r7, #1
   273f0:	4805      	ldr	r0, [pc, #20]	; (27408 <line2argv+0x68>)
   273f2:	f7db fe39 	bl	3068 <printk>
			return 0;
   273f6:	2500      	movs	r5, #0
   273f8:	e7da      	b.n	273b0 <line2argv+0x10>
	argv[argc] = NULL;
   273fa:	2300      	movs	r3, #0
   273fc:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   27400:	e7d6      	b.n	273b0 <line2argv+0x10>
		return 0;
   27402:	2500      	movs	r5, #0
   27404:	e7d4      	b.n	273b0 <line2argv+0x10>
   27406:	bf00      	nop
   27408:	00032e50 	.word	0x00032e50

0002740c <get_destination_module>:
{
   2740c:	b538      	push	{r3, r4, r5, lr}
   2740e:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   27410:	2400      	movs	r4, #0
   27412:	4a0c      	ldr	r2, [pc, #48]	; (27444 <get_destination_module+0x38>)
   27414:	4b0c      	ldr	r3, [pc, #48]	; (27448 <get_destination_module+0x3c>)
   27416:	1a9b      	subs	r3, r3, r2
   27418:	109b      	asrs	r3, r3, #2
   2741a:	4a0c      	ldr	r2, [pc, #48]	; (2744c <get_destination_module+0x40>)
   2741c:	fb02 f303 	mul.w	r3, r2, r3
   27420:	429c      	cmp	r4, r3
   27422:	da0b      	bge.n	2743c <get_destination_module+0x30>
		if (!strncmp(module_str,
   27424:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27428:	0093      	lsls	r3, r2, #2
   2742a:	2214      	movs	r2, #20
   2742c:	4905      	ldr	r1, [pc, #20]	; (27444 <get_destination_module+0x38>)
   2742e:	58c9      	ldr	r1, [r1, r3]
   27430:	4628      	mov	r0, r5
   27432:	f003 fc91 	bl	2ad58 <strncmp>
   27436:	b118      	cbz	r0, 27440 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   27438:	3401      	adds	r4, #1
   2743a:	e7ea      	b.n	27412 <get_destination_module+0x6>
	return -1;
   2743c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   27440:	4620      	mov	r0, r4
   27442:	bd38      	pop	{r3, r4, r5, pc}
   27444:	2000d580 	.word	0x2000d580
   27448:	2000d58c 	.word	0x2000d58c
   2744c:	aaaaaaab 	.word	0xaaaaaaab

00027450 <set_default_module>:
{
   27450:	b538      	push	{r3, r4, r5, lr}
   27452:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   27454:	f7d9 f954 	bl	700 <strlen>
   27458:	2814      	cmp	r0, #20
   2745a:	d813      	bhi.n	27484 <set_default_module+0x34>
	module = get_destination_module(name);
   2745c:	4620      	mov	r0, r4
   2745e:	f7ff ffd5 	bl	2740c <get_destination_module>
	if (module == -1) {
   27462:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27466:	d014      	beq.n	27492 <set_default_module+0x42>
	default_module = module;
   27468:	4b0d      	ldr	r3, [pc, #52]	; (274a0 <set_default_module+0x50>)
   2746a:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   2746c:	4d0d      	ldr	r5, [pc, #52]	; (274a4 <set_default_module+0x54>)
   2746e:	2214      	movs	r2, #20
   27470:	4621      	mov	r1, r4
   27472:	4628      	mov	r0, r5
   27474:	f003 fcc2 	bl	2adfc <strncpy>
	strcat(default_module_prompt, "> ");
   27478:	490b      	ldr	r1, [pc, #44]	; (274a8 <set_default_module+0x58>)
   2747a:	4628      	mov	r0, r5
   2747c:	f003 fb7a 	bl	2ab74 <strcat>
	return 0;
   27480:	2000      	movs	r0, #0
}
   27482:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   27484:	4621      	mov	r1, r4
   27486:	4809      	ldr	r0, [pc, #36]	; (274ac <set_default_module+0x5c>)
   27488:	f7db fdee 	bl	3068 <printk>
		return -EINVAL;
   2748c:	f06f 0015 	mvn.w	r0, #21
   27490:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   27492:	4621      	mov	r1, r4
   27494:	4806      	ldr	r0, [pc, #24]	; (274b0 <set_default_module+0x60>)
   27496:	f7db fde7 	bl	3068 <printk>
		return -EINVAL;
   2749a:	f06f 0015 	mvn.w	r0, #21
   2749e:	bd38      	pop	{r3, r4, r5, pc}
   274a0:	2000cab8 	.word	0x2000cab8
   274a4:	20002b80 	.word	0x20002b80
   274a8:	00032ed8 	.word	0x00032ed8
   274ac:	00032e78 	.word	0x00032e78
   274b0:	00032eac 	.word	0x00032eac

000274b4 <select_module>:
{
   274b4:	b508      	push	{r3, lr}
	if (argc == 1) {
   274b6:	2801      	cmp	r0, #1
   274b8:	d003      	beq.n	274c2 <select_module+0xe>
	return set_default_module(argv[1]);
   274ba:	6848      	ldr	r0, [r1, #4]
   274bc:	f7ff ffc8 	bl	27450 <set_default_module>
}
   274c0:	bd08      	pop	{r3, pc}
		default_module = -1;
   274c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   274c6:	4b02      	ldr	r3, [pc, #8]	; (274d0 <select_module+0x1c>)
   274c8:	601a      	str	r2, [r3, #0]
		return 0;
   274ca:	2000      	movs	r0, #0
   274cc:	bd08      	pop	{r3, pc}
   274ce:	bf00      	nop
   274d0:	2000cab8 	.word	0x2000cab8

000274d4 <get_command_and_module>:
{
   274d4:	b538      	push	{r3, r4, r5, lr}
   274d6:	4604      	mov	r4, r0
	*module = -1;
   274d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   274dc:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   274de:	6800      	ldr	r0, [r0, #0]
   274e0:	b140      	cbz	r0, 274f4 <get_command_and_module+0x20>
   274e2:	460d      	mov	r5, r1
	if (default_module == -1) {
   274e4:	4b12      	ldr	r3, [pc, #72]	; (27530 <get_command_and_module+0x5c>)
   274e6:	681b      	ldr	r3, [r3, #0]
   274e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   274ec:	d007      	beq.n	274fe <get_command_and_module+0x2a>
	*module = default_module;
   274ee:	600b      	str	r3, [r1, #0]
	return argv[0];
   274f0:	6820      	ldr	r0, [r4, #0]
}
   274f2:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   274f4:	480f      	ldr	r0, [pc, #60]	; (27534 <get_command_and_module+0x60>)
   274f6:	f7db fdb7 	bl	3068 <printk>
		return NULL;
   274fa:	2000      	movs	r0, #0
   274fc:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   274fe:	6863      	ldr	r3, [r4, #4]
   27500:	b14b      	cbz	r3, 27516 <get_command_and_module+0x42>
   27502:	781b      	ldrb	r3, [r3, #0]
   27504:	b13b      	cbz	r3, 27516 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   27506:	f7ff ff81 	bl	2740c <get_destination_module>
   2750a:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   2750c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27510:	d007      	beq.n	27522 <get_command_and_module+0x4e>
		return argv[1];
   27512:	6860      	ldr	r0, [r4, #4]
   27514:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   27516:	4601      	mov	r1, r0
   27518:	4807      	ldr	r0, [pc, #28]	; (27538 <get_command_and_module+0x64>)
   2751a:	f7db fda5 	bl	3068 <printk>
			return NULL;
   2751e:	2000      	movs	r0, #0
   27520:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   27522:	6821      	ldr	r1, [r4, #0]
   27524:	4805      	ldr	r0, [pc, #20]	; (2753c <get_command_and_module+0x68>)
   27526:	f7db fd9f 	bl	3068 <printk>
			return NULL;
   2752a:	2000      	movs	r0, #0
   2752c:	bd38      	pop	{r3, r4, r5, pc}
   2752e:	bf00      	nop
   27530:	2000cab8 	.word	0x2000cab8
   27534:	00032e08 	.word	0x00032e08
   27538:	00032e20 	.word	0x00032e20
   2753c:	00032e3c 	.word	0x00032e3c

00027540 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   27540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   27542:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   27544:	b15c      	cbz	r4, 2755e <get_cb+0x1e>
   27546:	4606      	mov	r6, r0
   27548:	460d      	mov	r5, r1
   2754a:	4617      	mov	r7, r2
   2754c:	7823      	ldrb	r3, [r4, #0]
   2754e:	b133      	cbz	r3, 2755e <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   27550:	4929      	ldr	r1, [pc, #164]	; (275f8 <get_cb+0xb8>)
   27552:	4620      	mov	r0, r4
   27554:	f7d8 ff58 	bl	408 <strcmp>
   27558:	b930      	cbnz	r0, 27568 <get_cb+0x28>
		return show_help;
   2755a:	4828      	ldr	r0, [pc, #160]	; (275fc <get_cb+0xbc>)
   2755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   2755e:	4828      	ldr	r0, [pc, #160]	; (27600 <get_cb+0xc0>)
   27560:	f7db fd82 	bl	3068 <printk>
		return NULL;
   27564:	2000      	movs	r0, #0
   27566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   27568:	4926      	ldr	r1, [pc, #152]	; (27604 <get_cb+0xc4>)
   2756a:	4620      	mov	r0, r4
   2756c:	f7d8 ff4c 	bl	408 <strcmp>
   27570:	b908      	cbnz	r0, 27576 <get_cb+0x36>
		return select_module;
   27572:	4825      	ldr	r0, [pc, #148]	; (27608 <get_cb+0xc8>)
   27574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   27576:	4925      	ldr	r1, [pc, #148]	; (2760c <get_cb+0xcc>)
   27578:	4620      	mov	r0, r4
   2757a:	f7d8 ff45 	bl	408 <strcmp>
   2757e:	2800      	cmp	r0, #0
   27580:	d034      	beq.n	275ec <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   27582:	6833      	ldr	r3, [r6, #0]
   27584:	2b01      	cmp	r3, #1
   27586:	d01c      	beq.n	275c2 <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   27588:	4639      	mov	r1, r7
   2758a:	4628      	mov	r0, r5
   2758c:	f7ff ffa2 	bl	274d4 <get_command_and_module>
   27590:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   27592:	683d      	ldr	r5, [r7, #0]
   27594:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   27598:	d02a      	beq.n	275f0 <get_cb+0xb0>
   2759a:	b358      	cbz	r0, 275f4 <get_cb+0xb4>
   2759c:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2759e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   275a2:	009a      	lsls	r2, r3, #2
   275a4:	4b1a      	ldr	r3, [pc, #104]	; (27610 <get_cb+0xd0>)
   275a6:	4413      	add	r3, r2
   275a8:	6859      	ldr	r1, [r3, #4]
   275aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   275ae:	0093      	lsls	r3, r2, #2
   275b0:	461f      	mov	r7, r3
   275b2:	58c9      	ldr	r1, [r1, r3]
   275b4:	b1c1      	cbz	r1, 275e8 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   275b6:	4630      	mov	r0, r6
   275b8:	f7d8 ff26 	bl	408 <strcmp>
   275bc:	b158      	cbz	r0, 275d6 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   275be:	3401      	adds	r4, #1
   275c0:	e7ed      	b.n	2759e <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   275c2:	4b14      	ldr	r3, [pc, #80]	; (27614 <get_cb+0xd4>)
   275c4:	681b      	ldr	r3, [r3, #0]
   275c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   275ca:	d1dd      	bne.n	27588 <get_cb+0x48>
		printk("Missing parameter\n");
   275cc:	4812      	ldr	r0, [pc, #72]	; (27618 <get_cb+0xd8>)
   275ce:	f7db fd4b 	bl	3068 <printk>
		return NULL;
   275d2:	2000      	movs	r0, #0
   275d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   275d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   275da:	00aa      	lsls	r2, r5, #2
   275dc:	4b0c      	ldr	r3, [pc, #48]	; (27610 <get_cb+0xd0>)
   275de:	4413      	add	r3, r2
   275e0:	685b      	ldr	r3, [r3, #4]
   275e2:	441f      	add	r7, r3
   275e4:	6878      	ldr	r0, [r7, #4]
   275e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   275e8:	2000      	movs	r0, #0
   275ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   275ec:	480b      	ldr	r0, [pc, #44]	; (2761c <get_cb+0xdc>)
   275ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   275f0:	2000      	movs	r0, #0
   275f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   275f4:	2000      	movs	r0, #0
}
   275f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   275f8:	00032ddc 	.word	0x00032ddc
   275fc:	000276c1 	.word	0x000276c1
   27600:	00032dc8 	.word	0x00032dc8
   27604:	00032de4 	.word	0x00032de4
   27608:	000274b5 	.word	0x000274b5
   2760c:	00032dec 	.word	0x00032dec
   27610:	2000d580 	.word	0x2000d580
   27614:	2000cab8 	.word	0x2000cab8
   27618:	00032df4 	.word	0x00032df4
   2761c:	0002734d 	.word	0x0002734d

00027620 <show_cmd_help>:
{
   27620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27624:	b083      	sub	sp, #12
   27626:	4607      	mov	r7, r0
	int module = -1;
   27628:	a902      	add	r1, sp, #8
   2762a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2762e:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   27632:	f7ff ff4f 	bl	274d4 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   27636:	9d01      	ldr	r5, [sp, #4]
   27638:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2763c:	d031      	beq.n	276a2 <show_cmd_help+0x82>
   2763e:	4606      	mov	r6, r0
   27640:	b390      	cbz	r0, 276a8 <show_cmd_help+0x88>
   27642:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   27644:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27648:	009a      	lsls	r2, r3, #2
   2764a:	4b19      	ldr	r3, [pc, #100]	; (276b0 <show_cmd_help+0x90>)
   2764c:	4413      	add	r3, r2
   2764e:	6859      	ldr	r1, [r3, #4]
   27650:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27654:	0093      	lsls	r3, r2, #2
   27656:	4698      	mov	r8, r3
   27658:	58c9      	ldr	r1, [r1, r3]
   2765a:	b1c1      	cbz	r1, 2768e <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   2765c:	4630      	mov	r0, r6
   2765e:	f7d8 fed3 	bl	408 <strcmp>
   27662:	4681      	mov	r9, r0
   27664:	b108      	cbz	r0, 2766a <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   27666:	3401      	adds	r4, #1
   27668:	e7ec      	b.n	27644 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   2766a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2766e:	00aa      	lsls	r2, r5, #2
   27670:	4b0f      	ldr	r3, [pc, #60]	; (276b0 <show_cmd_help+0x90>)
   27672:	4413      	add	r3, r2
   27674:	685b      	ldr	r3, [r3, #4]
   27676:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   2767a:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   2767e:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   27680:	b11a      	cbz	r2, 2768a <show_cmd_help+0x6a>
   27682:	480c      	ldr	r0, [pc, #48]	; (276b4 <show_cmd_help+0x94>)
   27684:	f7db fcf0 	bl	3068 <printk>
			return 0;
   27688:	e007      	b.n	2769a <show_cmd_help+0x7a>
			printk("%s %s\n",
   2768a:	4a0b      	ldr	r2, [pc, #44]	; (276b8 <show_cmd_help+0x98>)
   2768c:	e7f9      	b.n	27682 <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   2768e:	6839      	ldr	r1, [r7, #0]
   27690:	480a      	ldr	r0, [pc, #40]	; (276bc <show_cmd_help+0x9c>)
   27692:	f7db fce9 	bl	3068 <printk>
	return -EINVAL;
   27696:	f06f 0915 	mvn.w	r9, #21
}
   2769a:	4648      	mov	r0, r9
   2769c:	b003      	add	sp, #12
   2769e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   276a2:	f04f 0900 	mov.w	r9, #0
   276a6:	e7f8      	b.n	2769a <show_cmd_help+0x7a>
   276a8:	f04f 0900 	mov.w	r9, #0
   276ac:	e7f5      	b.n	2769a <show_cmd_help+0x7a>
   276ae:	bf00      	nop
   276b0:	2000d580 	.word	0x2000d580
   276b4:	00032f08 	.word	0x00032f08
   276b8:	0002f3ac 	.word	0x0002f3ac
   276bc:	00032e20 	.word	0x00032e20

000276c0 <show_help>:
{
   276c0:	b510      	push	{r4, lr}
   276c2:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   276c4:	2802      	cmp	r0, #2
   276c6:	dc12      	bgt.n	276ee <show_help+0x2e>
   276c8:	4b23      	ldr	r3, [pc, #140]	; (27758 <show_help+0x98>)
   276ca:	681b      	ldr	r3, [r3, #0]
   276cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   276d0:	d001      	beq.n	276d6 <show_help+0x16>
   276d2:	2802      	cmp	r0, #2
   276d4:	d00b      	beq.n	276ee <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   276d6:	2802      	cmp	r0, #2
   276d8:	d00d      	beq.n	276f6 <show_help+0x36>
   276da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   276de:	d001      	beq.n	276e4 <show_help+0x24>
   276e0:	2801      	cmp	r0, #1
   276e2:	d008      	beq.n	276f6 <show_help+0x36>
		printk("Available modules:\n");
   276e4:	481d      	ldr	r0, [pc, #116]	; (2775c <show_help+0x9c>)
   276e6:	f7db fcbf 	bl	3068 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   276ea:	2400      	movs	r4, #0
   276ec:	e025      	b.n	2773a <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   276ee:	1d20      	adds	r0, r4, #4
   276f0:	f7ff ff96 	bl	27620 <show_cmd_help>
   276f4:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   276f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   276fa:	d007      	beq.n	2770c <show_help+0x4c>
		print_module_commands(module);
   276fc:	4618      	mov	r0, r3
   276fe:	f7ff fe31 	bl	27364 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   27702:	4817      	ldr	r0, [pc, #92]	; (27760 <show_help+0xa0>)
   27704:	f7db fcb0 	bl	3068 <printk>
	return 0;
   27708:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   2770a:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   2770c:	6860      	ldr	r0, [r4, #4]
   2770e:	f7ff fe7d 	bl	2740c <get_destination_module>
   27712:	4603      	mov	r3, r0
			if (module == -1) {
   27714:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27718:	d1f0      	bne.n	276fc <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   2771a:	6861      	ldr	r1, [r4, #4]
   2771c:	4811      	ldr	r0, [pc, #68]	; (27764 <show_help+0xa4>)
   2771e:	f7db fca3 	bl	3068 <printk>
				return -EINVAL;
   27722:	f06f 0015 	mvn.w	r0, #21
   27726:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   27728:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2772c:	0093      	lsls	r3, r2, #2
   2772e:	4a0e      	ldr	r2, [pc, #56]	; (27768 <show_help+0xa8>)
   27730:	58d1      	ldr	r1, [r2, r3]
   27732:	480e      	ldr	r0, [pc, #56]	; (2776c <show_help+0xac>)
   27734:	f7db fc98 	bl	3068 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   27738:	3401      	adds	r4, #1
   2773a:	4a0b      	ldr	r2, [pc, #44]	; (27768 <show_help+0xa8>)
   2773c:	4b0c      	ldr	r3, [pc, #48]	; (27770 <show_help+0xb0>)
   2773e:	1a9b      	subs	r3, r3, r2
   27740:	109b      	asrs	r3, r3, #2
   27742:	4a0c      	ldr	r2, [pc, #48]	; (27774 <show_help+0xb4>)
   27744:	fb02 f303 	mul.w	r3, r2, r3
   27748:	429c      	cmp	r4, r3
   2774a:	dbed      	blt.n	27728 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   2774c:	480a      	ldr	r0, [pc, #40]	; (27778 <show_help+0xb8>)
   2774e:	f7db fc8b 	bl	3068 <printk>
	return 0;
   27752:	2000      	movs	r0, #0
}
   27754:	bd10      	pop	{r4, pc}
   27756:	bf00      	nop
   27758:	2000cab8 	.word	0x2000cab8
   2775c:	00032f38 	.word	0x00032f38
   27760:	00032f10 	.word	0x00032f10
   27764:	00032e3c 	.word	0x00032e3c
   27768:	2000d580 	.word	0x2000d580
   2776c:	0003208c 	.word	0x0003208c
   27770:	2000d58c 	.word	0x2000d58c
   27774:	aaaaaaab 	.word	0xaaaaaaab
   27778:	00032f4c 	.word	0x00032f4c

0002777c <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   2777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27780:	b086      	sub	sp, #24
   27782:	4604      	mov	r4, r0
   27784:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   27786:	e000      	b.n	2778a <get_command_to_complete+0xe>
		str++;
   27788:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   2778a:	7823      	ldrb	r3, [r4, #0]
   2778c:	2b20      	cmp	r3, #32
   2778e:	d0fb      	beq.n	27788 <get_command_to_complete+0xc>
	}

	if (!*str) {
   27790:	b3a3      	cbz	r3, 277fc <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   27792:	4b1f      	ldr	r3, [pc, #124]	; (27810 <get_command_to_complete+0x94>)
   27794:	681d      	ldr	r5, [r3, #0]
   27796:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2779a:	d001      	beq.n	277a0 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   2779c:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   277a0:	2120      	movs	r1, #32
   277a2:	4620      	mov	r0, r4
   277a4:	f003 fa06 	bl	2abb4 <strchr>
   277a8:	4606      	mov	r6, r0
	if (default_module != -1) {
   277aa:	4b19      	ldr	r3, [pc, #100]	; (27810 <get_command_to_complete+0x94>)
   277ac:	681f      	ldr	r7, [r3, #0]
   277ae:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   277b2:	d004      	beq.n	277be <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   277b4:	bb28      	cbnz	r0, 27802 <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   277b6:	4628      	mov	r0, r5
   277b8:	b006      	add	sp, #24
   277ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   277be:	b318      	cbz	r0, 27808 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   277c0:	1b05      	subs	r5, r0, r4
   277c2:	1c6a      	adds	r2, r5, #1
   277c4:	2a13      	cmp	r2, #19
   277c6:	dc21      	bgt.n	2780c <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   277c8:	4621      	mov	r1, r4
   277ca:	a801      	add	r0, sp, #4
   277cc:	f003 fb16 	bl	2adfc <strncpy>
	dest_str[str - start] = '\0';
   277d0:	ab06      	add	r3, sp, #24
   277d2:	441d      	add	r5, r3
   277d4:	2300      	movs	r3, #0
   277d6:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   277da:	a801      	add	r0, sp, #4
   277dc:	f7ff fe16 	bl	2740c <get_destination_module>
   277e0:	4605      	mov	r5, r0
	if (dest == -1) {
   277e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   277e6:	d0e6      	beq.n	277b6 <get_command_to_complete+0x3a>
	str++;
   277e8:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   277ea:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   277ee:	2120      	movs	r1, #32
   277f0:	f003 f9e0 	bl	2abb4 <strchr>
	return (str == NULL) ? dest : -1;
   277f4:	2800      	cmp	r0, #0
   277f6:	d0de      	beq.n	277b6 <get_command_to_complete+0x3a>
   277f8:	463d      	mov	r5, r7
   277fa:	e7dc      	b.n	277b6 <get_command_to_complete+0x3a>
		return -1;
   277fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27800:	e7d9      	b.n	277b6 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   27802:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27806:	e7d6      	b.n	277b6 <get_command_to_complete+0x3a>
		return -1;
   27808:	463d      	mov	r5, r7
   2780a:	e7d4      	b.n	277b6 <get_command_to_complete+0x3a>
		return -1;
   2780c:	463d      	mov	r5, r7
   2780e:	e7d2      	b.n	277b6 <get_command_to_complete+0x3a>
   27810:	2000cab8 	.word	0x2000cab8

00027814 <completion>:

static u8_t completion(char *line, u8_t len)
{
   27814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27818:	b087      	sub	sp, #28
   2781a:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   2781c:	2944      	cmp	r1, #68	; 0x44
   2781e:	d903      	bls.n	27828 <completion+0x14>
		return 0;
   27820:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   27822:	b007      	add	sp, #28
   27824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27828:	4689      	mov	r9, r1
	line[len] = '\0';
   2782a:	2300      	movs	r3, #0
   2782c:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   2782e:	a905      	add	r1, sp, #20
   27830:	f7ff ffa4 	bl	2777c <get_command_to_complete>
   27834:	4605      	mov	r5, r0
	if (dest == -1) {
   27836:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2783a:	f000 808f 	beq.w	2795c <completion+0x148>
	command_len = strlen(command_prefix);
   2783e:	9805      	ldr	r0, [sp, #20]
   27840:	f7d8 ff5e 	bl	700 <strlen>
   27844:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   27846:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   2784a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   2784e:	465f      	mov	r7, fp
   27850:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   27852:	e01f      	b.n	27894 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   27854:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27858:	009a      	lsls	r2, r3, #2
   2785a:	4b42      	ldr	r3, [pc, #264]	; (27964 <completion+0x150>)
   2785c:	4413      	add	r3, r2
   2785e:	685b      	ldr	r3, [r3, #4]
   27860:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   27864:	e014      	b.n	27890 <completion+0x7c>
			printk("\n%s\n", first_match);
   27866:	4639      	mov	r1, r7
   27868:	483f      	ldr	r0, [pc, #252]	; (27968 <completion+0x154>)
   2786a:	f7db fbfd 	bl	3068 <printk>
			common_chars = strlen(first_match);
   2786e:	4638      	mov	r0, r7
   27870:	f7d8 ff46 	bl	700 <strlen>
   27874:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   27876:	e026      	b.n	278c6 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   27878:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2787c:	009a      	lsls	r2, r3, #2
   2787e:	4b39      	ldr	r3, [pc, #228]	; (27964 <completion+0x150>)
   27880:	4413      	add	r3, r2
   27882:	685b      	ldr	r3, [r3, #4]
   27884:	f853 100a 	ldr.w	r1, [r3, sl]
   27888:	4838      	ldr	r0, [pc, #224]	; (2796c <completion+0x158>)
   2788a:	f7db fbed 	bl	3068 <printk>
		common_chars = j;
   2788e:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   27890:	f10b 0b01 	add.w	fp, fp, #1
   27894:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27898:	009a      	lsls	r2, r3, #2
   2789a:	4b32      	ldr	r3, [pc, #200]	; (27964 <completion+0x150>)
   2789c:	4413      	add	r3, r2
   2789e:	685a      	ldr	r2, [r3, #4]
   278a0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   278a4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   278a8:	46d0      	mov	r8, sl
   278aa:	f852 100a 	ldr.w	r1, [r2, sl]
   278ae:	b1d1      	cbz	r1, 278e6 <completion+0xd2>
		if (strncmp(command_prefix,
   278b0:	9a01      	ldr	r2, [sp, #4]
   278b2:	9805      	ldr	r0, [sp, #20]
   278b4:	f003 fa50 	bl	2ad58 <strncmp>
   278b8:	4604      	mov	r4, r0
   278ba:	2800      	cmp	r0, #0
   278bc:	d1e8      	bne.n	27890 <completion+0x7c>
		if (!first_match) {
   278be:	2f00      	cmp	r7, #0
   278c0:	d0c8      	beq.n	27854 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   278c2:	2e00      	cmp	r6, #0
   278c4:	dbcf      	blt.n	27866 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   278c6:	42a6      	cmp	r6, r4
   278c8:	ddd6      	ble.n	27878 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   278ca:	5d39      	ldrb	r1, [r7, r4]
   278cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   278d0:	009a      	lsls	r2, r3, #2
   278d2:	4b24      	ldr	r3, [pc, #144]	; (27964 <completion+0x150>)
   278d4:	4413      	add	r3, r2
   278d6:	685b      	ldr	r3, [r3, #4]
   278d8:	f853 3008 	ldr.w	r3, [r3, r8]
   278dc:	5d1b      	ldrb	r3, [r3, r4]
   278de:	4299      	cmp	r1, r3
   278e0:	d1ca      	bne.n	27878 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   278e2:	3401      	adds	r4, #1
   278e4:	e7ef      	b.n	278c6 <completion+0xb2>
   278e6:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   278ea:	2f00      	cmp	r7, #0
   278ec:	d038      	beq.n	27960 <completion+0x14c>
	if (common_chars >= 0) {
   278ee:	2e00      	cmp	r6, #0
   278f0:	db0d      	blt.n	2790e <completion+0xfa>
		printk("%s", get_prompt());
   278f2:	f7ff fd01 	bl	272f8 <get_prompt>
   278f6:	4c1e      	ldr	r4, [pc, #120]	; (27970 <completion+0x15c>)
   278f8:	4601      	mov	r1, r0
   278fa:	4620      	mov	r0, r4
   278fc:	f7db fbb4 	bl	3068 <printk>
		printk("%s", line);
   27900:	9d02      	ldr	r5, [sp, #8]
   27902:	4629      	mov	r1, r5
   27904:	4620      	mov	r0, r4
   27906:	f7db fbaf 	bl	3068 <printk>
	int common_chars = -1, space = 0;
   2790a:	2400      	movs	r4, #0
   2790c:	e015      	b.n	2793a <completion+0x126>
		common_chars = strlen(first_match);
   2790e:	4638      	mov	r0, r7
   27910:	f7d8 fef6 	bl	700 <strlen>
   27914:	4606      	mov	r6, r0
		space = 1;
   27916:	2401      	movs	r4, #1
   27918:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   2791a:	e00e      	b.n	2793a <completion+0x126>
		printk("%c", first_match[i]);
   2791c:	f817 100a 	ldrb.w	r1, [r7, sl]
   27920:	4814      	ldr	r0, [pc, #80]	; (27974 <completion+0x160>)
   27922:	f7db fba1 	bl	3068 <printk>
		line[len++] = first_match[i];
   27926:	f109 0301 	add.w	r3, r9, #1
   2792a:	f817 200a 	ldrb.w	r2, [r7, sl]
   2792e:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   27932:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   27936:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   2793a:	4556      	cmp	r6, sl
   2793c:	dcee      	bgt.n	2791c <completion+0x108>
	if (space) {
   2793e:	b92c      	cbnz	r4, 2794c <completion+0x138>
	return common_chars - command_len + space;
   27940:	9b01      	ldr	r3, [sp, #4]
   27942:	1af0      	subs	r0, r6, r3
   27944:	fa54 f080 	uxtab	r0, r4, r0
   27948:	b2c0      	uxtb	r0, r0
   2794a:	e76a      	b.n	27822 <completion+0xe>
		printk(" ");
   2794c:	480a      	ldr	r0, [pc, #40]	; (27978 <completion+0x164>)
   2794e:	f7db fb8b 	bl	3068 <printk>
		line[len] = ' ';
   27952:	2320      	movs	r3, #32
   27954:	9a02      	ldr	r2, [sp, #8]
   27956:	f802 3009 	strb.w	r3, [r2, r9]
   2795a:	e7f1      	b.n	27940 <completion+0x12c>
		return 0;
   2795c:	2000      	movs	r0, #0
   2795e:	e760      	b.n	27822 <completion+0xe>
		return 0;
   27960:	2000      	movs	r0, #0
   27962:	e75e      	b.n	27822 <completion+0xe>
   27964:	2000d580 	.word	0x2000d580
   27968:	00032dbc 	.word	0x00032dbc
   2796c:	0003208c 	.word	0x0003208c
   27970:	0002ee8c 	.word	0x0002ee8c
   27974:	00032dc4 	.word	0x00032dc4
   27978:	00033410 	.word	0x00033410

0002797c <line_queue_init>:
{
   2797c:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   2797e:	2400      	movs	r4, #0
   27980:	e008      	b.n	27994 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   27982:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   27986:	0093      	lsls	r3, r2, #2
   27988:	4904      	ldr	r1, [pc, #16]	; (2799c <line_queue_init+0x20>)
   2798a:	4419      	add	r1, r3
   2798c:	4804      	ldr	r0, [pc, #16]	; (279a0 <line_queue_init+0x24>)
   2798e:	f001 fced 	bl	2936c <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   27992:	3401      	adds	r4, #1
   27994:	2c02      	cmp	r4, #2
   27996:	ddf4      	ble.n	27982 <line_queue_init+0x6>
}
   27998:	bd10      	pop	{r4, pc}
   2799a:	bf00      	nop
   2799c:	200029e4 	.word	0x200029e4
   279a0:	200029d4 	.word	0x200029d4

000279a4 <shell_exec>:
{
   279a4:	b510      	push	{r4, lr}
   279a6:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   279a8:	4b1e      	ldr	r3, [pc, #120]	; (27a24 <shell_exec+0x80>)
   279aa:	681b      	ldr	r3, [r3, #0]
   279ac:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   279ae:	220b      	movs	r2, #11
   279b0:	a903      	add	r1, sp, #12
   279b2:	f7ff fcf5 	bl	273a0 <line2argv>
   279b6:	9002      	str	r0, [sp, #8]
	if (!argc) {
   279b8:	2800      	cmp	r0, #0
   279ba:	d02f      	beq.n	27a1c <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   279bc:	aa01      	add	r2, sp, #4
   279be:	a903      	add	r1, sp, #12
   279c0:	a802      	add	r0, sp, #8
   279c2:	f7ff fdbd 	bl	27540 <get_cb>
	if (!cb) {
   279c6:	4602      	mov	r2, r0
   279c8:	b168      	cbz	r0, 279e6 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   279ca:	9b01      	ldr	r3, [sp, #4]
   279cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   279d0:	d017      	beq.n	27a02 <shell_exec+0x5e>
   279d2:	4914      	ldr	r1, [pc, #80]	; (27a24 <shell_exec+0x80>)
   279d4:	6809      	ldr	r1, [r1, #0]
   279d6:	428b      	cmp	r3, r1
   279d8:	d013      	beq.n	27a02 <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   279da:	a904      	add	r1, sp, #16
   279dc:	9802      	ldr	r0, [sp, #8]
   279de:	3801      	subs	r0, #1
   279e0:	4790      	blx	r2
   279e2:	4604      	mov	r4, r0
   279e4:	e011      	b.n	27a0a <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   279e6:	4b10      	ldr	r3, [pc, #64]	; (27a28 <shell_exec+0x84>)
   279e8:	681a      	ldr	r2, [r3, #0]
   279ea:	2a00      	cmp	r2, #0
   279ec:	d1ed      	bne.n	279ca <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   279ee:	9903      	ldr	r1, [sp, #12]
   279f0:	480e      	ldr	r0, [pc, #56]	; (27a2c <shell_exec+0x88>)
   279f2:	f7db fb39 	bl	3068 <printk>
	printk("Type 'help' for list of available commands\n");
   279f6:	480e      	ldr	r0, [pc, #56]	; (27a30 <shell_exec+0x8c>)
   279f8:	f7db fb36 	bl	3068 <printk>
			return -EINVAL;
   279fc:	f06f 0415 	mvn.w	r4, #21
   27a00:	e005      	b.n	27a0e <shell_exec+0x6a>
		err = cb(argc, argv);
   27a02:	a903      	add	r1, sp, #12
   27a04:	9802      	ldr	r0, [sp, #8]
   27a06:	4790      	blx	r2
   27a08:	4604      	mov	r4, r0
	if (err < 0) {
   27a0a:	2c00      	cmp	r4, #0
   27a0c:	db02      	blt.n	27a14 <shell_exec+0x70>
}
   27a0e:	4620      	mov	r0, r4
   27a10:	b00e      	add	sp, #56	; 0x38
   27a12:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   27a14:	a803      	add	r0, sp, #12
   27a16:	f7ff fe03 	bl	27620 <show_cmd_help>
   27a1a:	e7f8      	b.n	27a0e <shell_exec+0x6a>
		return -EINVAL;
   27a1c:	f06f 0415 	mvn.w	r4, #21
   27a20:	e7f5      	b.n	27a0e <shell_exec+0x6a>
   27a22:	bf00      	nop
   27a24:	2000cab8 	.word	0x2000cab8
   27a28:	200029cc 	.word	0x200029cc
   27a2c:	00032e20 	.word	0x00032e20
   27a30:	00032edc 	.word	0x00032edc

00027a34 <shell>:
{
   27a34:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   27a36:	f7ff fc5f 	bl	272f8 <get_prompt>
   27a3a:	4601      	mov	r1, r0
   27a3c:	4808      	ldr	r0, [pc, #32]	; (27a60 <shell+0x2c>)
   27a3e:	f7db fb13 	bl	3068 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   27a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27a46:	4807      	ldr	r0, [pc, #28]	; (27a64 <shell+0x30>)
   27a48:	f001 fcb8 	bl	293bc <k_queue_get>
   27a4c:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   27a4e:	3004      	adds	r0, #4
   27a50:	f7ff ffa8 	bl	279a4 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   27a54:	4621      	mov	r1, r4
   27a56:	4804      	ldr	r0, [pc, #16]	; (27a68 <shell+0x34>)
   27a58:	f001 fc88 	bl	2936c <k_queue_append>
   27a5c:	e7eb      	b.n	27a36 <shell+0x2>
   27a5e:	bf00      	nop
   27a60:	0002ee8c 	.word	0x0002ee8c
   27a64:	20002b70 	.word	0x20002b70
   27a68:	200029d4 	.word	0x200029d4

00027a6c <shell_init>:


void shell_init(const char *str)
{
   27a6c:	b510      	push	{r4, lr}
   27a6e:	b086      	sub	sp, #24
   27a70:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   27a72:	4812      	ldr	r0, [pc, #72]	; (27abc <shell_init+0x50>)
   27a74:	f001 fc47 	bl	29306 <k_queue_init>
	k_fifo_init(&avail_queue);
   27a78:	4811      	ldr	r0, [pc, #68]	; (27ac0 <shell_init+0x54>)
   27a7a:	f001 fc44 	bl	29306 <k_queue_init>

	line_queue_init();
   27a7e:	f7ff ff7d 	bl	2797c <line_queue_init>

	prompt = str ? str : "";
   27a82:	b1c4      	cbz	r4, 27ab6 <shell_init+0x4a>
   27a84:	4b0f      	ldr	r3, [pc, #60]	; (27ac4 <shell_init+0x58>)
   27a86:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   27a88:	2300      	movs	r3, #0
   27a8a:	9305      	str	r3, [sp, #20]
   27a8c:	9304      	str	r3, [sp, #16]
   27a8e:	f06f 0208 	mvn.w	r2, #8
   27a92:	9203      	str	r2, [sp, #12]
   27a94:	9302      	str	r3, [sp, #8]
   27a96:	9301      	str	r3, [sp, #4]
   27a98:	9300      	str	r3, [sp, #0]
   27a9a:	4b0b      	ldr	r3, [pc, #44]	; (27ac8 <shell_init+0x5c>)
   27a9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   27aa0:	490a      	ldr	r1, [pc, #40]	; (27acc <shell_init+0x60>)
   27aa2:	480b      	ldr	r0, [pc, #44]	; (27ad0 <shell_init+0x64>)
   27aa4:	f002 fa78 	bl	29f98 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   27aa8:	4a0a      	ldr	r2, [pc, #40]	; (27ad4 <shell_init+0x68>)
   27aaa:	4904      	ldr	r1, [pc, #16]	; (27abc <shell_init+0x50>)
   27aac:	4804      	ldr	r0, [pc, #16]	; (27ac0 <shell_init+0x54>)
   27aae:	f7da fb1b 	bl	20e8 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   27ab2:	b006      	add	sp, #24
   27ab4:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   27ab6:	4c08      	ldr	r4, [pc, #32]	; (27ad8 <shell_init+0x6c>)
   27ab8:	e7e4      	b.n	27a84 <shell_init+0x18>
   27aba:	bf00      	nop
   27abc:	20002b70 	.word	0x20002b70
   27ac0:	200029d4 	.word	0x200029d4
   27ac4:	20002b98 	.word	0x20002b98
   27ac8:	00027a35 	.word	0x00027a35
   27acc:	2000a0d0 	.word	0x2000a0d0
   27ad0:	20002b9c 	.word	0x20002b9c
   27ad4:	00027815 	.word	0x00027815
   27ad8:	0002f3ac 	.word	0x0002f3ac

00027adc <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27adc:	4b0e      	ldr	r3, [pc, #56]	; (27b18 <ftpan_32+0x3c>)
   27ade:	781b      	ldrb	r3, [r3, #0]
   27ae0:	2b06      	cmp	r3, #6
   27ae2:	d001      	beq.n	27ae8 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27ae4:	2000      	movs	r0, #0
   27ae6:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27ae8:	4b0c      	ldr	r3, [pc, #48]	; (27b1c <ftpan_32+0x40>)
   27aea:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27aec:	f013 0f0f 	tst.w	r3, #15
   27af0:	d10e      	bne.n	27b10 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27af2:	4b0b      	ldr	r3, [pc, #44]	; (27b20 <ftpan_32+0x44>)
   27af4:	681b      	ldr	r3, [r3, #0]
   27af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27afa:	2b30      	cmp	r3, #48	; 0x30
   27afc:	d001      	beq.n	27b02 <ftpan_32+0x26>
	return false;
   27afe:	2000      	movs	r0, #0
   27b00:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27b02:	4b08      	ldr	r3, [pc, #32]	; (27b24 <ftpan_32+0x48>)
   27b04:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27b06:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27b0a:	d003      	beq.n	27b14 <ftpan_32+0x38>
	return false;
   27b0c:	2000      	movs	r0, #0
   27b0e:	4770      	bx	lr
   27b10:	2000      	movs	r0, #0
   27b12:	4770      	bx	lr
			return true;
   27b14:	2001      	movs	r0, #1
}
   27b16:	4770      	bx	lr
   27b18:	f0000fe0 	.word	0xf0000fe0
   27b1c:	f0000fe4 	.word	0xf0000fe4
   27b20:	f0000fe8 	.word	0xf0000fe8
   27b24:	f0000fec 	.word	0xf0000fec

00027b28 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27b28:	4b0e      	ldr	r3, [pc, #56]	; (27b64 <ftpan_37+0x3c>)
   27b2a:	781b      	ldrb	r3, [r3, #0]
   27b2c:	2b06      	cmp	r3, #6
   27b2e:	d001      	beq.n	27b34 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27b30:	2000      	movs	r0, #0
   27b32:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27b34:	4b0c      	ldr	r3, [pc, #48]	; (27b68 <ftpan_37+0x40>)
   27b36:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27b38:	f013 0f0f 	tst.w	r3, #15
   27b3c:	d10e      	bne.n	27b5c <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27b3e:	4b0b      	ldr	r3, [pc, #44]	; (27b6c <ftpan_37+0x44>)
   27b40:	681b      	ldr	r3, [r3, #0]
   27b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27b46:	2b30      	cmp	r3, #48	; 0x30
   27b48:	d001      	beq.n	27b4e <ftpan_37+0x26>
	return false;
   27b4a:	2000      	movs	r0, #0
   27b4c:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27b4e:	4b08      	ldr	r3, [pc, #32]	; (27b70 <ftpan_37+0x48>)
   27b50:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27b52:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27b56:	d003      	beq.n	27b60 <ftpan_37+0x38>
	return false;
   27b58:	2000      	movs	r0, #0
   27b5a:	4770      	bx	lr
   27b5c:	2000      	movs	r0, #0
   27b5e:	4770      	bx	lr
			return true;
   27b60:	2001      	movs	r0, #1
}
   27b62:	4770      	bx	lr
   27b64:	f0000fe0 	.word	0xf0000fe0
   27b68:	f0000fe4 	.word	0xf0000fe4
   27b6c:	f0000fe8 	.word	0xf0000fe8
   27b70:	f0000fec 	.word	0xf0000fec

00027b74 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27b74:	4b0e      	ldr	r3, [pc, #56]	; (27bb0 <ftpan_36+0x3c>)
   27b76:	781b      	ldrb	r3, [r3, #0]
   27b78:	2b06      	cmp	r3, #6
   27b7a:	d001      	beq.n	27b80 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27b7c:	2000      	movs	r0, #0
   27b7e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27b80:	4b0c      	ldr	r3, [pc, #48]	; (27bb4 <ftpan_36+0x40>)
   27b82:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27b84:	f013 0f0f 	tst.w	r3, #15
   27b88:	d10e      	bne.n	27ba8 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27b8a:	4b0b      	ldr	r3, [pc, #44]	; (27bb8 <ftpan_36+0x44>)
   27b8c:	681b      	ldr	r3, [r3, #0]
   27b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27b92:	2b30      	cmp	r3, #48	; 0x30
   27b94:	d001      	beq.n	27b9a <ftpan_36+0x26>
	return false;
   27b96:	2000      	movs	r0, #0
   27b98:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27b9a:	4b08      	ldr	r3, [pc, #32]	; (27bbc <ftpan_36+0x48>)
   27b9c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27b9e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27ba2:	d003      	beq.n	27bac <ftpan_36+0x38>
	return false;
   27ba4:	2000      	movs	r0, #0
   27ba6:	4770      	bx	lr
   27ba8:	2000      	movs	r0, #0
   27baa:	4770      	bx	lr
			return true;
   27bac:	2001      	movs	r0, #1
}
   27bae:	4770      	bx	lr
   27bb0:	f0000fe0 	.word	0xf0000fe0
   27bb4:	f0000fe4 	.word	0xf0000fe4
   27bb8:	f0000fe8 	.word	0xf0000fe8
   27bbc:	f0000fec 	.word	0xf0000fec

00027bc0 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27bc0:	4b0f      	ldr	r3, [pc, #60]	; (27c00 <errata_136_nrf52832+0x40>)
   27bc2:	781b      	ldrb	r3, [r3, #0]
   27bc4:	2b06      	cmp	r3, #6
   27bc6:	d001      	beq.n	27bcc <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   27bc8:	2000      	movs	r0, #0
   27bca:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27bcc:	4b0d      	ldr	r3, [pc, #52]	; (27c04 <errata_136_nrf52832+0x44>)
   27bce:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27bd0:	f013 0f0f 	tst.w	r3, #15
   27bd4:	d10b      	bne.n	27bee <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   27bd6:	4b0c      	ldr	r3, [pc, #48]	; (27c08 <errata_136_nrf52832+0x48>)
   27bd8:	681b      	ldr	r3, [r3, #0]
   27bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27bde:	2b30      	cmp	r3, #48	; 0x30
   27be0:	d007      	beq.n	27bf2 <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   27be2:	2b40      	cmp	r3, #64	; 0x40
   27be4:	d007      	beq.n	27bf6 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   27be6:	2b50      	cmp	r3, #80	; 0x50
   27be8:	d007      	beq.n	27bfa <errata_136_nrf52832+0x3a>
	return false;
   27bea:	2000      	movs	r0, #0
   27bec:	4770      	bx	lr
   27bee:	2000      	movs	r0, #0
   27bf0:	4770      	bx	lr
			return true;
   27bf2:	2001      	movs	r0, #1
   27bf4:	4770      	bx	lr
			return true;
   27bf6:	2001      	movs	r0, #1
   27bf8:	4770      	bx	lr
			return true;
   27bfa:	2001      	movs	r0, #1
}
   27bfc:	4770      	bx	lr
   27bfe:	bf00      	nop
   27c00:	f0000fe0 	.word	0xf0000fe0
   27c04:	f0000fe4 	.word	0xf0000fe4
   27c08:	f0000fe8 	.word	0xf0000fe8

00027c0c <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   27c0c:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   27c0e:	f7ff ff65 	bl	27adc <ftpan_32>
   27c12:	b120      	cbz	r0, 27c1e <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   27c14:	4a32      	ldr	r2, [pc, #200]	; (27ce0 <nordicsemi_nrf52832_init+0xd4>)
   27c16:	68d3      	ldr	r3, [r2, #12]
   27c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   27c1c:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   27c1e:	f7ff ff83 	bl	27b28 <ftpan_37>
   27c22:	b110      	cbz	r0, 27c2a <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   27c24:	2203      	movs	r2, #3
   27c26:	4b2f      	ldr	r3, [pc, #188]	; (27ce4 <nordicsemi_nrf52832_init+0xd8>)
   27c28:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   27c2a:	f7ff ffa3 	bl	27b74 <ftpan_36>
   27c2e:	b130      	cbz	r0, 27c3e <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   27c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27c34:	2200      	movs	r2, #0
   27c36:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   27c3a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   27c3e:	f7ff ffbf 	bl	27bc0 <errata_136_nrf52832>
   27c42:	b160      	cbz	r0, 27c5e <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   27c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27c48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27c4c:	f013 0f01 	tst.w	r3, #1
   27c50:	d005      	beq.n	27c5e <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   27c52:	f06f 0201 	mvn.w	r2, #1
   27c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27c5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27c5e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   27c66:	2b00      	cmp	r3, #0
   27c68:	db06      	blt.n	27c78 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27c6a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   27c72:	2b00      	cmp	r3, #0
   27c74:	db00      	blt.n	27c78 <nordicsemi_nrf52832_init+0x6c>
   27c76:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   27c78:	2201      	movs	r2, #1
   27c7a:	4b1b      	ldr	r3, [pc, #108]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27c7c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27c80:	4b19      	ldr	r3, [pc, #100]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27c82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27c86:	2b00      	cmp	r3, #0
   27c88:	d0fa      	beq.n	27c80 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   27c8a:	2215      	movs	r2, #21
   27c8c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27c90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27c94:	4b14      	ldr	r3, [pc, #80]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27c96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27c9a:	2b00      	cmp	r3, #0
   27c9c:	d0fa      	beq.n	27c94 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   27c9e:	2215      	movs	r2, #21
   27ca0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27ca8:	4b0f      	ldr	r3, [pc, #60]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27caa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27cae:	2b00      	cmp	r3, #0
   27cb0:	d0fa      	beq.n	27ca8 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   27cb2:	2200      	movs	r2, #0
   27cb4:	4b0c      	ldr	r3, [pc, #48]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27cb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27cba:	4b0b      	ldr	r3, [pc, #44]	; (27ce8 <nordicsemi_nrf52832_init+0xdc>)
   27cbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27cc0:	2b00      	cmp	r3, #0
   27cc2:	d0fa      	beq.n	27cba <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27cc4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27cc8:	4908      	ldr	r1, [pc, #32]	; (27cec <nordicsemi_nrf52832_init+0xe0>)
   27cca:	68ca      	ldr	r2, [r1, #12]
   27ccc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27cd0:	4b07      	ldr	r3, [pc, #28]	; (27cf0 <nordicsemi_nrf52832_init+0xe4>)
   27cd2:	4313      	orrs	r3, r2
   27cd4:	60cb      	str	r3, [r1, #12]
   27cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   27cda:	bf00      	nop
   27cdc:	e7fd      	b.n	27cda <nordicsemi_nrf52832_init+0xce>
   27cde:	bf00      	nop
   27ce0:	e000edf0 	.word	0xe000edf0
   27ce4:	400005a0 	.word	0x400005a0
   27ce8:	4001e000 	.word	0x4001e000
   27cec:	e000ed00 	.word	0xe000ed00
   27cf0:	05fa0004 	.word	0x05fa0004

00027cf4 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   27cf4:	4a01      	ldr	r2, [pc, #4]	; (27cfc <clock_init+0x8>)
   27cf6:	4b02      	ldr	r3, [pc, #8]	; (27d00 <clock_init+0xc>)
   27cf8:	601a      	str	r2, [r3, #0]
   27cfa:	4770      	bx	lr
   27cfc:	03d09000 	.word	0x03d09000
   27d00:	2000cabc 	.word	0x2000cabc

00027d04 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   27d04:	b510      	push	{r4, lr}
	__asm__ volatile(
   27d06:	f04f 0320 	mov.w	r3, #32
   27d0a:	f3ef 8411 	mrs	r4, BASEPRI
   27d0e:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   27d12:	f7ff ff7b 	bl	27c0c <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   27d16:	4b05      	ldr	r3, [pc, #20]	; (27d2c <nordicsemi_nrf52_init+0x28>)
   27d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27d1c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   27d1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   27d20:	f7ff ffe8 	bl	27cf4 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27d24:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   27d28:	2000      	movs	r0, #0
   27d2a:	bd10      	pop	{r4, pc}
   27d2c:	e000ed00 	.word	0xe000ed00

00027d30 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   27d30:	4808      	ldr	r0, [pc, #32]	; (27d54 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   27d32:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   27d34:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   27d36:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   27d38:	d80b      	bhi.n	27d52 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   27d3a:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   27d3c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   27d3e:	d008      	beq.n	27d52 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   27d40:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   27d42:	f001 fd1f 	bl	29784 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   27d46:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   27d4a:	4903      	ldr	r1, [pc, #12]	; (27d58 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   27d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   27d50:	600a      	str	r2, [r1, #0]

00027d52 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   27d52:	4770      	bx	lr
    ldr r0, =_kernel
   27d54:	20002cd8 	.word	0x20002cd8
    ldr r1, =_SCS_ICSR
   27d58:	e000ed04 	.word	0xe000ed04

00027d5c <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   27d5c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27d5e:	e00a      	b.n	27d76 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   27d60:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   27d62:	2b00      	cmp	r3, #0
   27d64:	db0a      	blt.n	27d7c <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27d66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27d6a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27d6e:	2120      	movs	r1, #32
   27d70:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27d74:	3201      	adds	r2, #1
   27d76:	2a26      	cmp	r2, #38	; 0x26
   27d78:	ddf2      	ble.n	27d60 <_IntLibInit+0x4>
	}
}
   27d7a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27d7c:	f002 010f 	and.w	r1, r2, #15
   27d80:	4b02      	ldr	r3, [pc, #8]	; (27d8c <_IntLibInit+0x30>)
   27d82:	440b      	add	r3, r1
   27d84:	2120      	movs	r1, #32
   27d86:	7619      	strb	r1, [r3, #24]
   27d88:	e7f4      	b.n	27d74 <_IntLibInit+0x18>
   27d8a:	bf00      	nop
   27d8c:	e000ecfc 	.word	0xe000ecfc

00027d90 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   27d90:	490e      	ldr	r1, [pc, #56]	; (27dcc <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27d92:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   27d94:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   27d98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   27d9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   27d9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   27da2:	4f0b      	ldr	r7, [pc, #44]	; (27dd0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   27da4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27da8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27daa:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   27dae:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   27db0:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   27db2:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   27db4:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   27db6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27db8:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   27dba:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   27dbe:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   27dc2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   27dc6:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   27dca:	4770      	bx	lr
    ldr r1, =_kernel
   27dcc:	20002cd8 	.word	0x20002cd8
    ldr v4, =_SCS_ICSR
   27dd0:	e000ed04 	.word	0xe000ed04

00027dd4 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   27dd4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   27dd8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   27dda:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   27dde:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   27de2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   27de4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   27de8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   27dec:	d001      	beq.n	27df2 <_context_switch>

    cmp r1, #2
   27dee:	2902      	cmp	r1, #2
    beq _oops
   27df0:	d007      	beq.n	27e02 <_oops>

00027df2 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   27df2:	4040      	eors	r0, r0
    msr BASEPRI, r0
   27df4:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   27df8:	4904      	ldr	r1, [pc, #16]	; (27e0c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   27dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   27dfe:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   27e00:	4770      	bx	lr

00027e02 <_oops>:

_oops:
    push {lr}
   27e02:	b500      	push	{lr}
    blx _do_kernel_oops
   27e04:	f000 fa82 	bl	2830c <_do_kernel_oops>
    pop {pc}
   27e08:	bd00      	pop	{pc}
   27e0a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   27e0c:	e000ed04 	.word	0xe000ed04

00027e10 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   27e10:	4904      	ldr	r1, [pc, #16]	; (27e24 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27e12:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   27e14:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   27e16:	4904      	ldr	r1, [pc, #16]	; (27e28 <__swap+0x18>)
    ldr r1, [r1]
   27e18:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   27e1a:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   27e1c:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   27e1e:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   27e20:	4770      	bx	lr
   27e22:	0000      	.short	0x0000
    ldr r1, =_kernel
   27e24:	20002cd8 	.word	0x20002cd8
    ldr r1, =_k_neg_eagain
   27e28:	000333e4 	.word	0x000333e4

00027e2c <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   27e2c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   27e2e:	4802      	ldr	r0, [pc, #8]	; (27e38 <_DebugMonitor+0xc>)
   27e30:	f7db f91a 	bl	3068 <printk>
   27e34:	bd08      	pop	{r3, pc}
   27e36:	bf00      	nop
   27e38:	00033020 	.word	0x00033020

00027e3c <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   27e3c:	b508      	push	{r3, lr}
   27e3e:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   27e40:	290f      	cmp	r1, #15
   27e42:	dd05      	ble.n	27e50 <_ReservedException+0x14>
   27e44:	4903      	ldr	r1, [pc, #12]	; (27e54 <_ReservedException+0x18>)
   27e46:	3a10      	subs	r2, #16
   27e48:	4803      	ldr	r0, [pc, #12]	; (27e58 <_ReservedException+0x1c>)
   27e4a:	f7db f90d 	bl	3068 <printk>
   27e4e:	bd08      	pop	{r3, pc}
   27e50:	4902      	ldr	r1, [pc, #8]	; (27e5c <_ReservedException+0x20>)
   27e52:	e7f8      	b.n	27e46 <_ReservedException+0xa>
   27e54:	000331a8 	.word	0x000331a8
   27e58:	000331c4 	.word	0x000331c4
   27e5c:	00033190 	.word	0x00033190

00027e60 <_FaultThreadShow>:
{
   27e60:	b510      	push	{r4, lr}
   27e62:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   27e64:	f001 fc60 	bl	29728 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   27e68:	69a2      	ldr	r2, [r4, #24]
   27e6a:	4601      	mov	r1, r0
   27e6c:	4801      	ldr	r0, [pc, #4]	; (27e74 <_FaultThreadShow+0x14>)
   27e6e:	f7db f8fb 	bl	3068 <printk>
   27e72:	bd10      	pop	{r4, pc}
   27e74:	00033058 	.word	0x00033058

00027e78 <_MpuFault>:
{
   27e78:	b538      	push	{r3, r4, r5, lr}
   27e7a:	4604      	mov	r4, r0
   27e7c:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   27e7e:	481e      	ldr	r0, [pc, #120]	; (27ef8 <_MpuFault+0x80>)
   27e80:	f7db f8f2 	bl	3068 <printk>
	_FaultThreadShow(esf);
   27e84:	4620      	mov	r0, r4
   27e86:	f7ff ffeb 	bl	27e60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   27e8a:	4b1c      	ldr	r3, [pc, #112]	; (27efc <_MpuFault+0x84>)
   27e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e8e:	f013 0f10 	tst.w	r3, #16
   27e92:	d10f      	bne.n	27eb4 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   27e94:	4b19      	ldr	r3, [pc, #100]	; (27efc <_MpuFault+0x84>)
   27e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e98:	f013 0f08 	tst.w	r3, #8
   27e9c:	d10e      	bne.n	27ebc <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   27e9e:	4b17      	ldr	r3, [pc, #92]	; (27efc <_MpuFault+0x84>)
   27ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ea2:	f013 0f02 	tst.w	r3, #2
   27ea6:	d10d      	bne.n	27ec4 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   27ea8:	4b14      	ldr	r3, [pc, #80]	; (27efc <_MpuFault+0x84>)
   27eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27eac:	f013 0f01 	tst.w	r3, #1
   27eb0:	d11d      	bne.n	27eee <_MpuFault+0x76>
   27eb2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27eb4:	4812      	ldr	r0, [pc, #72]	; (27f00 <_MpuFault+0x88>)
   27eb6:	f7db f8d7 	bl	3068 <printk>
   27eba:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   27ebc:	4811      	ldr	r0, [pc, #68]	; (27f04 <_MpuFault+0x8c>)
   27ebe:	f7db f8d3 	bl	3068 <printk>
   27ec2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   27ec4:	4810      	ldr	r0, [pc, #64]	; (27f08 <_MpuFault+0x90>)
   27ec6:	f7db f8cf 	bl	3068 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   27eca:	4b0c      	ldr	r3, [pc, #48]	; (27efc <_MpuFault+0x84>)
   27ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ece:	f013 0f80 	tst.w	r3, #128	; 0x80
   27ed2:	d0ee      	beq.n	27eb2 <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   27ed4:	4b09      	ldr	r3, [pc, #36]	; (27efc <_MpuFault+0x84>)
   27ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   27ed8:	480c      	ldr	r0, [pc, #48]	; (27f0c <_MpuFault+0x94>)
   27eda:	f7db f8c5 	bl	3068 <printk>
			if (fromHardFault) {
   27ede:	2d00      	cmp	r5, #0
   27ee0:	d0e7      	beq.n	27eb2 <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   27ee2:	4a06      	ldr	r2, [pc, #24]	; (27efc <_MpuFault+0x84>)
   27ee4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27eea:	6293      	str	r3, [r2, #40]	; 0x28
   27eec:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   27eee:	4808      	ldr	r0, [pc, #32]	; (27f10 <_MpuFault+0x98>)
   27ef0:	f7db f8ba 	bl	3068 <printk>
}
   27ef4:	e7dd      	b.n	27eb2 <_MpuFault+0x3a>
   27ef6:	bf00      	nop
   27ef8:	00033100 	.word	0x00033100
   27efc:	e000ed00 	.word	0xe000ed00
   27f00:	00033118 	.word	0x00033118
   27f04:	0003312c 	.word	0x0003312c
   27f08:	00033140 	.word	0x00033140
   27f0c:	0003315c 	.word	0x0003315c
   27f10:	00033170 	.word	0x00033170

00027f14 <_BusFault>:
{
   27f14:	b538      	push	{r3, r4, r5, lr}
   27f16:	4604      	mov	r4, r0
   27f18:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   27f1a:	4827      	ldr	r0, [pc, #156]	; (27fb8 <_BusFault+0xa4>)
   27f1c:	f7db f8a4 	bl	3068 <printk>
	_FaultThreadShow(esf);
   27f20:	4620      	mov	r0, r4
   27f22:	f7ff ff9d 	bl	27e60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   27f26:	4b25      	ldr	r3, [pc, #148]	; (27fbc <_BusFault+0xa8>)
   27f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f2a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   27f2e:	d114      	bne.n	27f5a <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   27f30:	4b22      	ldr	r3, [pc, #136]	; (27fbc <_BusFault+0xa8>)
   27f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f34:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27f38:	d113      	bne.n	27f62 <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   27f3a:	4b20      	ldr	r3, [pc, #128]	; (27fbc <_BusFault+0xa8>)
   27f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f3e:	f413 7f00 	tst.w	r3, #512	; 0x200
   27f42:	d112      	bne.n	27f6a <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   27f44:	4b1d      	ldr	r3, [pc, #116]	; (27fbc <_BusFault+0xa8>)
   27f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f48:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27f4c:	d12b      	bne.n	27fa6 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   27f4e:	4b1b      	ldr	r3, [pc, #108]	; (27fbc <_BusFault+0xa8>)
   27f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f52:	f413 7f80 	tst.w	r3, #256	; 0x100
   27f56:	d12a      	bne.n	27fae <_BusFault+0x9a>
   27f58:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27f5a:	4819      	ldr	r0, [pc, #100]	; (27fc0 <_BusFault+0xac>)
   27f5c:	f7db f884 	bl	3068 <printk>
   27f60:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   27f62:	4818      	ldr	r0, [pc, #96]	; (27fc4 <_BusFault+0xb0>)
   27f64:	f7db f880 	bl	3068 <printk>
   27f68:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   27f6a:	4817      	ldr	r0, [pc, #92]	; (27fc8 <_BusFault+0xb4>)
   27f6c:	f7db f87c 	bl	3068 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   27f70:	4b12      	ldr	r3, [pc, #72]	; (27fbc <_BusFault+0xa8>)
   27f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27f78:	d108      	bne.n	27f8c <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   27f7a:	4b10      	ldr	r3, [pc, #64]	; (27fbc <_BusFault+0xa8>)
   27f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27f7e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27f82:	d0e9      	beq.n	27f58 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   27f84:	4811      	ldr	r0, [pc, #68]	; (27fcc <_BusFault+0xb8>)
   27f86:	f7db f86f 	bl	3068 <printk>
   27f8a:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   27f8c:	4b0b      	ldr	r3, [pc, #44]	; (27fbc <_BusFault+0xa8>)
   27f8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   27f90:	480f      	ldr	r0, [pc, #60]	; (27fd0 <_BusFault+0xbc>)
   27f92:	f7db f869 	bl	3068 <printk>
			if (fromHardFault) {
   27f96:	2d00      	cmp	r5, #0
   27f98:	d0ef      	beq.n	27f7a <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   27f9a:	4a08      	ldr	r2, [pc, #32]	; (27fbc <_BusFault+0xa8>)
   27f9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27f9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27fa2:	6293      	str	r3, [r2, #40]	; 0x28
   27fa4:	e7e9      	b.n	27f7a <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   27fa6:	4809      	ldr	r0, [pc, #36]	; (27fcc <_BusFault+0xb8>)
   27fa8:	f7db f85e 	bl	3068 <printk>
   27fac:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   27fae:	4809      	ldr	r0, [pc, #36]	; (27fd4 <_BusFault+0xc0>)
   27fb0:	f7db f85a 	bl	3068 <printk>
}
   27fb4:	e7d0      	b.n	27f58 <_BusFault+0x44>
   27fb6:	bf00      	nop
   27fb8:	00032fb4 	.word	0x00032fb4
   27fbc:	e000ed00 	.word	0xe000ed00
   27fc0:	00033118 	.word	0x00033118
   27fc4:	0003312c 	.word	0x0003312c
   27fc8:	00032fcc 	.word	0x00032fcc
   27fcc:	00032fe8 	.word	0x00032fe8
   27fd0:	0003315c 	.word	0x0003315c
   27fd4:	00033004 	.word	0x00033004

00027fd8 <_UsageFault>:
{
   27fd8:	b510      	push	{r4, lr}
   27fda:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   27fdc:	4821      	ldr	r0, [pc, #132]	; (28064 <_UsageFault+0x8c>)
   27fde:	f7db f843 	bl	3068 <printk>
	_FaultThreadShow(esf);
   27fe2:	4620      	mov	r0, r4
   27fe4:	f7ff ff3c 	bl	27e60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   27fe8:	4b1f      	ldr	r3, [pc, #124]	; (28068 <_UsageFault+0x90>)
   27fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27fec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27ff0:	d120      	bne.n	28034 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   27ff2:	4b1d      	ldr	r3, [pc, #116]	; (28068 <_UsageFault+0x90>)
   27ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ff6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   27ffa:	d11f      	bne.n	2803c <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   27ffc:	4b1a      	ldr	r3, [pc, #104]	; (28068 <_UsageFault+0x90>)
   27ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28000:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   28004:	d11e      	bne.n	28044 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   28006:	4b18      	ldr	r3, [pc, #96]	; (28068 <_UsageFault+0x90>)
   28008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2800a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2800e:	d11d      	bne.n	2804c <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   28010:	4b15      	ldr	r3, [pc, #84]	; (28068 <_UsageFault+0x90>)
   28012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28014:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   28018:	d11c      	bne.n	28054 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   2801a:	4b13      	ldr	r3, [pc, #76]	; (28068 <_UsageFault+0x90>)
   2801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2801e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   28022:	d11b      	bne.n	2805c <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   28024:	4a10      	ldr	r2, [pc, #64]	; (28068 <_UsageFault+0x90>)
   28026:	6a93      	ldr	r3, [r2, #40]	; 0x28
   28028:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2802c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   28030:	6293      	str	r3, [r2, #40]	; 0x28
   28032:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   28034:	480d      	ldr	r0, [pc, #52]	; (2806c <_UsageFault+0x94>)
   28036:	f7db f817 	bl	3068 <printk>
   2803a:	e7da      	b.n	27ff2 <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   2803c:	480c      	ldr	r0, [pc, #48]	; (28070 <_UsageFault+0x98>)
   2803e:	f7db f813 	bl	3068 <printk>
   28042:	e7db      	b.n	27ffc <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   28044:	480b      	ldr	r0, [pc, #44]	; (28074 <_UsageFault+0x9c>)
   28046:	f7db f80f 	bl	3068 <printk>
   2804a:	e7dc      	b.n	28006 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   2804c:	480a      	ldr	r0, [pc, #40]	; (28078 <_UsageFault+0xa0>)
   2804e:	f7db f80b 	bl	3068 <printk>
   28052:	e7dd      	b.n	28010 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   28054:	4809      	ldr	r0, [pc, #36]	; (2807c <_UsageFault+0xa4>)
   28056:	f7db f807 	bl	3068 <printk>
   2805a:	e7de      	b.n	2801a <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   2805c:	4808      	ldr	r0, [pc, #32]	; (28080 <_UsageFault+0xa8>)
   2805e:	f7db f803 	bl	3068 <printk>
   28062:	e7df      	b.n	28024 <_UsageFault+0x4c>
   28064:	000331d8 	.word	0x000331d8
   28068:	e000ed00 	.word	0xe000ed00
   2806c:	000331f4 	.word	0x000331f4
   28070:	00033208 	.word	0x00033208
   28074:	00033224 	.word	0x00033224
   28078:	00033244 	.word	0x00033244
   2807c:	0003326c 	.word	0x0003326c
   28080:	00033288 	.word	0x00033288

00028084 <_HardFault>:
{
   28084:	b510      	push	{r4, lr}
   28086:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   28088:	4816      	ldr	r0, [pc, #88]	; (280e4 <_HardFault+0x60>)
   2808a:	f7da ffed 	bl	3068 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   2808e:	4b16      	ldr	r3, [pc, #88]	; (280e8 <_HardFault+0x64>)
   28090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28092:	f013 0f02 	tst.w	r3, #2
   28096:	d105      	bne.n	280a4 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   28098:	4b13      	ldr	r3, [pc, #76]	; (280e8 <_HardFault+0x64>)
   2809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2809c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   280a0:	d104      	bne.n	280ac <_HardFault+0x28>
   280a2:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   280a4:	4811      	ldr	r0, [pc, #68]	; (280ec <_HardFault+0x68>)
   280a6:	f7da ffdf 	bl	3068 <printk>
   280aa:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   280ac:	4810      	ldr	r0, [pc, #64]	; (280f0 <_HardFault+0x6c>)
   280ae:	f7da ffdb 	bl	3068 <printk>
		if (SCB_MMFSR) {
   280b2:	4b10      	ldr	r3, [pc, #64]	; (280f4 <_HardFault+0x70>)
   280b4:	781b      	ldrb	r3, [r3, #0]
   280b6:	b95b      	cbnz	r3, 280d0 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   280b8:	4b0f      	ldr	r3, [pc, #60]	; (280f8 <_HardFault+0x74>)
   280ba:	781b      	ldrb	r3, [r3, #0]
   280bc:	b96b      	cbnz	r3, 280da <_HardFault+0x56>
		} else if (SCB_UFSR) {
   280be:	4b0f      	ldr	r3, [pc, #60]	; (280fc <_HardFault+0x78>)
   280c0:	881b      	ldrh	r3, [r3, #0]
   280c2:	b29b      	uxth	r3, r3
   280c4:	2b00      	cmp	r3, #0
   280c6:	d0ec      	beq.n	280a2 <_HardFault+0x1e>
			_UsageFault(esf);
   280c8:	4620      	mov	r0, r4
   280ca:	f7ff ff85 	bl	27fd8 <_UsageFault>
}
   280ce:	e7e8      	b.n	280a2 <_HardFault+0x1e>
			_MpuFault(esf, 1);
   280d0:	2101      	movs	r1, #1
   280d2:	4620      	mov	r0, r4
   280d4:	f7ff fed0 	bl	27e78 <_MpuFault>
   280d8:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   280da:	2101      	movs	r1, #1
   280dc:	4620      	mov	r0, r4
   280de:	f7ff ff19 	bl	27f14 <_BusFault>
   280e2:	bd10      	pop	{r4, pc}
   280e4:	000330a4 	.word	0x000330a4
   280e8:	e000ed00 	.word	0xe000ed00
   280ec:	000330bc 	.word	0x000330bc
   280f0:	000330e0 	.word	0x000330e0
   280f4:	e000ed28 	.word	0xe000ed28
   280f8:	e000ed29 	.word	0xe000ed29
   280fc:	e000ed2c 	.word	0xe000ed2c

00028100 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   28100:	b508      	push	{r3, lr}
	switch (fault) {
   28102:	1ecb      	subs	r3, r1, #3
   28104:	2b09      	cmp	r3, #9
   28106:	d817      	bhi.n	28138 <_FaultDump+0x38>
   28108:	e8df f003 	tbb	[pc, r3]
   2810c:	100c0805 	.word	0x100c0805
   28110:	16161616 	.word	0x16161616
   28114:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   28116:	f7ff ffb5 	bl	28084 <_HardFault>
		break;
   2811a:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   2811c:	2100      	movs	r1, #0
   2811e:	f7ff feab 	bl	27e78 <_MpuFault>
		break;
   28122:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   28124:	2100      	movs	r1, #0
   28126:	f7ff fef5 	bl	27f14 <_BusFault>
		break;
   2812a:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   2812c:	f7ff ff54 	bl	27fd8 <_UsageFault>
		break;
   28130:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   28132:	f7ff fe7b 	bl	27e2c <_DebugMonitor>
		break;
   28136:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   28138:	f7ff fe80 	bl	27e3c <_ReservedException>
   2813c:	bd08      	pop	{r3, pc}
	...

00028140 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   28140:	b510      	push	{r4, lr}
   28142:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   28144:	4b05      	ldr	r3, [pc, #20]	; (2815c <_Fault+0x1c>)
   28146:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   28148:	f3c1 0108 	ubfx	r1, r1, #0, #9
   2814c:	f7ff ffd8 	bl	28100 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   28150:	4621      	mov	r1, r4
   28152:	2000      	movs	r0, #0
   28154:	f000 f8e0 	bl	28318 <_SysFatalErrorHandler>
   28158:	bd10      	pop	{r4, pc}
   2815a:	bf00      	nop
   2815c:	e000ed00 	.word	0xe000ed00

00028160 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   28160:	4a02      	ldr	r2, [pc, #8]	; (2816c <_FaultInit+0xc>)
   28162:	6953      	ldr	r3, [r2, #20]
   28164:	f043 0310 	orr.w	r3, r3, #16
   28168:	6153      	str	r3, [r2, #20]
   2816a:	4770      	bx	lr
   2816c:	e000ed00 	.word	0xe000ed00

00028170 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   28170:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   28172:	095b      	lsrs	r3, r3, #5
   28174:	f000 001f 	and.w	r0, r0, #31
   28178:	2201      	movs	r2, #1
   2817a:	fa02 f000 	lsl.w	r0, r2, r0
   2817e:	4a02      	ldr	r2, [pc, #8]	; (28188 <_arch_irq_enable+0x18>)
   28180:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   28184:	4770      	bx	lr
   28186:	bf00      	nop
   28188:	e000e100 	.word	0xe000e100

0002818c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2818c:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   2818e:	095b      	lsrs	r3, r3, #5
   28190:	f000 001f 	and.w	r0, r0, #31
   28194:	2201      	movs	r2, #1
   28196:	fa02 f000 	lsl.w	r0, r2, r0
   2819a:	3320      	adds	r3, #32
   2819c:	4a01      	ldr	r2, [pc, #4]	; (281a4 <_arch_irq_disable+0x18>)
   2819e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   281a2:	4770      	bx	lr
   281a4:	e000e100 	.word	0xe000e100

000281a8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   281a8:	0942      	lsrs	r2, r0, #5
   281aa:	4b05      	ldr	r3, [pc, #20]	; (281c0 <_arch_irq_is_enabled+0x18>)
   281ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   281b0:	f000 001f 	and.w	r0, r0, #31
   281b4:	2301      	movs	r3, #1
   281b6:	fa03 f000 	lsl.w	r0, r3, r0
}
   281ba:	4010      	ands	r0, r2
   281bc:	4770      	bx	lr
   281be:	bf00      	nop
   281c0:	e000e100 	.word	0xe000e100

000281c4 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   281c4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   281c6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   281c8:	2b00      	cmp	r3, #0
   281ca:	db08      	blt.n	281de <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   281cc:	0149      	lsls	r1, r1, #5
   281ce:	b2c9      	uxtb	r1, r1
   281d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   281d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   281d8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   281dc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   281de:	f000 000f 	and.w	r0, r0, #15
   281e2:	0149      	lsls	r1, r1, #5
   281e4:	b2c9      	uxtb	r1, r1
   281e6:	4b01      	ldr	r3, [pc, #4]	; (281ec <_irq_priority_set+0x28>)
   281e8:	5419      	strb	r1, [r3, r0]
   281ea:	4770      	bx	lr
   281ec:	e000ed14 	.word	0xe000ed14

000281f0 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   281f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   281f2:	f000 f847 	bl	28284 <__bus_fault>
   281f6:	bd08      	pop	{r3, pc}

000281f8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   281f8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   281fa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   281fc:	4b04      	ldr	r3, [pc, #16]	; (28210 <_arch_isr_direct_pm+0x18>)
   281fe:	6958      	ldr	r0, [r3, #20]
   28200:	b908      	cbnz	r0, 28206 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   28202:	b662      	cpsie	i
   28204:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   28206:	2200      	movs	r2, #0
   28208:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   2820a:	f000 f9b5 	bl	28578 <_sys_power_save_idle_exit>
   2820e:	e7f8      	b.n	28202 <_arch_isr_direct_pm+0xa>
   28210:	20002cd8 	.word	0x20002cd8

00028214 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   28214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28216:	4605      	mov	r5, r0
   28218:	460c      	mov	r4, r1
   2821a:	4616      	mov	r6, r2
   2821c:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   2821e:	21aa      	movs	r1, #170	; 0xaa
   28220:	4620      	mov	r0, r4
   28222:	f002 fc0d 	bl	2aa40 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   28226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28228:	2204      	movs	r2, #4
   2822a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2822c:	4628      	mov	r0, r5
   2822e:	f001 ff51 	bl	2a0d4 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   28232:	2300      	movs	r3, #0
   28234:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   28236:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   28238:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   2823a:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2823c:	f1a6 0120 	sub.w	r1, r6, #32
   28240:	4421      	add	r1, r4
   28242:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   28246:	4a08      	ldr	r2, [pc, #32]	; (28268 <_new_thread+0x54>)
   28248:	f022 0201 	bic.w	r2, r2, #1
   2824c:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   2824e:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   28250:	9a06      	ldr	r2, [sp, #24]
   28252:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   28254:	9a07      	ldr	r2, [sp, #28]
   28256:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   28258:	9a08      	ldr	r2, [sp, #32]
   2825a:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   2825c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   28260:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   28262:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   28264:	662b      	str	r3, [r5, #96]	; 0x60
   28266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28268:	00029dbd 	.word	0x00029dbd

0002826c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   2826c:	4901      	ldr	r1, [pc, #4]	; (28274 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   2826e:	2210      	movs	r2, #16
	str r2, [r1]
   28270:	600a      	str	r2, [r1, #0]
	bx lr
   28272:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   28274:	e000ed10 	.word	0xe000ed10

00028278 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   28278:	4040      	eors	r0, r0
	msr BASEPRI, r0
   2827a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   2827e:	bf30      	wfi

	bx lr
   28280:	4770      	bx	lr
   28282:	bf00      	nop

00028284 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   28284:	4040      	eors	r0, r0
	msr BASEPRI, r0
   28286:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   2828a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 282a8 <__bus_fault+0x24>
	ldr ip, [ip]
   2828e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   28292:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   28296:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   28298:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   2829c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   282a0:	b500      	push	{lr}
	bl _Fault
   282a2:	f7ff ff4d 	bl	28140 <_Fault>

	pop {pc}
   282a6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   282a8:	e000ed04 	.word	0xe000ed04

000282ac <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   282ac:	b538      	push	{r3, r4, r5, lr}
   282ae:	4604      	mov	r4, r0
   282b0:	460d      	mov	r5, r1
	switch (reason) {
   282b2:	2804      	cmp	r0, #4
   282b4:	d017      	beq.n	282e6 <_NanoFatalErrorHandler+0x3a>
   282b6:	2805      	cmp	r0, #5
   282b8:	d019      	beq.n	282ee <_NanoFatalErrorHandler+0x42>
   282ba:	2803      	cmp	r0, #3
   282bc:	d004      	beq.n	282c8 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   282be:	4601      	mov	r1, r0
   282c0:	480d      	ldr	r0, [pc, #52]	; (282f8 <_NanoFatalErrorHandler+0x4c>)
   282c2:	f7da fed1 	bl	3068 <printk>
		break;
   282c6:	e002      	b.n	282ce <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   282c8:	480c      	ldr	r0, [pc, #48]	; (282fc <_NanoFatalErrorHandler+0x50>)
   282ca:	f7da fecd 	bl	3068 <printk>
   282ce:	f001 fa2b 	bl	29728 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   282d2:	69aa      	ldr	r2, [r5, #24]
   282d4:	4601      	mov	r1, r0
   282d6:	480a      	ldr	r0, [pc, #40]	; (28300 <_NanoFatalErrorHandler+0x54>)
   282d8:	f7da fec6 	bl	3068 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   282dc:	4629      	mov	r1, r5
   282de:	4620      	mov	r0, r4
   282e0:	f000 f81a 	bl	28318 <_SysFatalErrorHandler>
   282e4:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   282e6:	4807      	ldr	r0, [pc, #28]	; (28304 <_NanoFatalErrorHandler+0x58>)
   282e8:	f7da febe 	bl	3068 <printk>
		break;
   282ec:	e7ef      	b.n	282ce <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   282ee:	4806      	ldr	r0, [pc, #24]	; (28308 <_NanoFatalErrorHandler+0x5c>)
   282f0:	f7da feba 	bl	3068 <printk>
		break;
   282f4:	e7eb      	b.n	282ce <_NanoFatalErrorHandler+0x22>
   282f6:	bf00      	nop
   282f8:	00033314 	.word	0x00033314
   282fc:	000332b4 	.word	0x000332b4
   28300:	00033338 	.word	0x00033338
   28304:	000332dc 	.word	0x000332dc
   28308:	000332f8 	.word	0x000332f8

0002830c <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   2830c:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   2830e:	4601      	mov	r1, r0
   28310:	6800      	ldr	r0, [r0, #0]
   28312:	f7ff ffcb 	bl	282ac <_NanoFatalErrorHandler>
   28316:	bd08      	pop	{r3, pc}

00028318 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   28318:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   2831a:	2805      	cmp	r0, #5
   2831c:	d00c      	beq.n	28338 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   2831e:	f001 fd31 	bl	29d84 <k_is_in_isr>
   28322:	b910      	cbnz	r0, 2832a <_SysFatalErrorHandler+0x12>
   28324:	f001 fd42 	bl	29dac <_is_thread_essential>
   28328:	b158      	cbz	r0, 28342 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   2832a:	f001 fd2b 	bl	29d84 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   2832e:	b130      	cbz	r0, 2833e <_SysFatalErrorHandler+0x26>
   28330:	4908      	ldr	r1, [pc, #32]	; (28354 <_SysFatalErrorHandler+0x3c>)
   28332:	4809      	ldr	r0, [pc, #36]	; (28358 <_SysFatalErrorHandler+0x40>)
   28334:	f7da fe98 	bl	3068 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   28338:	f7ff ff9e 	bl	28278 <k_cpu_idle>
   2833c:	e7fc      	b.n	28338 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   2833e:	4907      	ldr	r1, [pc, #28]	; (2835c <_SysFatalErrorHandler+0x44>)
   28340:	e7f7      	b.n	28332 <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   28342:	4c07      	ldr	r4, [pc, #28]	; (28360 <_SysFatalErrorHandler+0x48>)
   28344:	68a1      	ldr	r1, [r4, #8]
   28346:	4807      	ldr	r0, [pc, #28]	; (28364 <_SysFatalErrorHandler+0x4c>)
   28348:	f7da fe8e 	bl	3068 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2834c:	68a0      	ldr	r0, [r4, #8]
   2834e:	f000 f80b 	bl	28368 <_impl_k_thread_abort>
	return;
   28352:	bd10      	pop	{r4, pc}
   28354:	00032784 	.word	0x00032784
   28358:	00033388 	.word	0x00033388
   2835c:	00033374 	.word	0x00033374
   28360:	20002cd8 	.word	0x20002cd8
   28364:	000333a8 	.word	0x000333a8

00028368 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   28368:	b538      	push	{r3, r4, r5, lr}
   2836a:	4605      	mov	r5, r0
	__asm__ volatile(
   2836c:	f04f 0320 	mov.w	r3, #32
   28370:	f3ef 8411 	mrs	r4, BASEPRI
   28374:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   28378:	f001 fe28 	bl	29fcc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   2837c:	4b0b      	ldr	r3, [pc, #44]	; (283ac <_impl_k_thread_abort+0x44>)
   2837e:	689b      	ldr	r3, [r3, #8]
   28380:	429d      	cmp	r5, r3
   28382:	d003      	beq.n	2838c <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   28384:	4620      	mov	r0, r4
   28386:	f001 fa03 	bl	29790 <_reschedule_threads>
   2838a:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   2838c:	4b08      	ldr	r3, [pc, #32]	; (283b0 <_impl_k_thread_abort+0x48>)
   2838e:	685b      	ldr	r3, [r3, #4]
   28390:	f3c3 0308 	ubfx	r3, r3, #0, #9
   28394:	b12b      	cbz	r3, 283a2 <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   28396:	4a06      	ldr	r2, [pc, #24]	; (283b0 <_impl_k_thread_abort+0x48>)
   28398:	6853      	ldr	r3, [r2, #4]
   2839a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2839e:	6053      	str	r3, [r2, #4]
   283a0:	e7f0      	b.n	28384 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   283a2:	f001 f9ef 	bl	29784 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   283a6:	4620      	mov	r0, r4
   283a8:	f7ff fd32 	bl	27e10 <__swap>
   283ac:	20002cd8 	.word	0x20002cd8
   283b0:	e000ed00 	.word	0xe000ed00

000283b4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   283b4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   283b6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   283b8:	4a0b      	ldr	r2, [pc, #44]	; (283e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   283ba:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   283bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   283be:	bf1e      	ittt	ne
	movne	r1, #0
   283c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   283c2:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   283c4:	f000 f8d8 	blne	28578 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   283c8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   283ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   283ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   283d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   283d6:	4905      	ldr	r1, [pc, #20]	; (283ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   283d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   283da:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   283dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   283de:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   283e2:	f7ff bca5 	b.w	27d30 <_ExcExit>
   283e6:	0000      	.short	0x0000
	ldr r2, =_kernel
   283e8:	20002cd8 	.word	0x20002cd8
	ldr r1, =_sw_isr_table
   283ec:	000000dc 	.word	0x000000dc

000283f0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   283f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   283f2:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   283f6:	4809      	ldr	r0, [pc, #36]	; (2841c <__reset+0x2c>)
    ldr r1, =0xaa
   283f8:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   283fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   28400:	f002 fb1e 	bl	2aa40 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   28404:	4805      	ldr	r0, [pc, #20]	; (2841c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   28406:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2840a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2840c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   28410:	2002      	movs	r0, #2
    msr CONTROL, r0
   28412:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   28416:	f000 b807 	b.w	28428 <_PrepC>
   2841a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   2841c:	2000b1e0 	.word	0x2000b1e0

00028420 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   28420:	bf30      	wfi
    b _SysNmiOnReset
   28422:	f7ff bffd 	b.w	28420 <_SysNmiOnReset>
   28426:	bf00      	nop

00028428 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   28428:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2842a:	4a07      	ldr	r2, [pc, #28]	; (28448 <_PrepC+0x20>)
   2842c:	4b07      	ldr	r3, [pc, #28]	; (2844c <_PrepC+0x24>)
   2842e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   28432:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   28434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   28438:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   2843c:	f000 f9d6 	bl	287ec <_bss_zero>
	_data_copy();
   28440:	f000 f9e0 	bl	28804 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   28444:	f000 fa00 	bl	28848 <_Cstart>
   28448:	e000ed00 	.word	0xe000ed00
   2844c:	00000000 	.word	0x00000000

00028450 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   28450:	b508      	push	{r3, lr}
	handler();
   28452:	f7ff ffe5 	bl	28420 <_SysNmiOnReset>
	_ExcExit();
   28456:	f7ff fc6b 	bl	27d30 <_ExcExit>
   2845a:	bd08      	pop	{r3, pc}

0002845c <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   2845c:	4b05      	ldr	r3, [pc, #20]	; (28474 <_region_init+0x18>)
   2845e:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   28460:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   28464:	4308      	orrs	r0, r1
   28466:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   2846a:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   2846c:	f042 0201 	orr.w	r2, r2, #1
   28470:	611a      	str	r2, [r3, #16]
   28472:	4770      	bx	lr
   28474:	e000ed90 	.word	0xe000ed90

00028478 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   28478:	4b14      	ldr	r3, [pc, #80]	; (284cc <_arm_mpu_config+0x54>)
   2847a:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   2847c:	4b14      	ldr	r3, [pc, #80]	; (284d0 <_arm_mpu_config+0x58>)
   2847e:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   28480:	f3c3 2307 	ubfx	r3, r3, #8, #8
   28484:	429a      	cmp	r2, r3
   28486:	d81f      	bhi.n	284c8 <_arm_mpu_config+0x50>
{
   28488:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   2848a:	2400      	movs	r4, #0
   2848c:	4b10      	ldr	r3, [pc, #64]	; (284d0 <_arm_mpu_config+0x58>)
   2848e:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   28490:	e00b      	b.n	284aa <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   28492:	4b0e      	ldr	r3, [pc, #56]	; (284cc <_arm_mpu_config+0x54>)
   28494:	6859      	ldr	r1, [r3, #4]
   28496:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2849a:	0093      	lsls	r3, r2, #2
   2849c:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   2849e:	6892      	ldr	r2, [r2, #8]
   284a0:	58c9      	ldr	r1, [r1, r3]
   284a2:	4620      	mov	r0, r4
   284a4:	f7ff ffda 	bl	2845c <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   284a8:	3401      	adds	r4, #1
   284aa:	4b08      	ldr	r3, [pc, #32]	; (284cc <_arm_mpu_config+0x54>)
   284ac:	681b      	ldr	r3, [r3, #0]
   284ae:	429c      	cmp	r4, r3
   284b0:	d3ef      	bcc.n	28492 <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   284b2:	2205      	movs	r2, #5
   284b4:	4b06      	ldr	r3, [pc, #24]	; (284d0 <_arm_mpu_config+0x58>)
   284b6:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   284b8:	2201      	movs	r2, #1
   284ba:	4b06      	ldr	r3, [pc, #24]	; (284d4 <_arm_mpu_config+0x5c>)
   284bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   284be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   284c2:	f3bf 8f6f 	isb	sy
   284c6:	bd10      	pop	{r4, pc}
   284c8:	4770      	bx	lr
   284ca:	bf00      	nop
   284cc:	2000cac0 	.word	0x2000cac0
   284d0:	e000ed90 	.word	0xe000ed90
   284d4:	20002c04 	.word	0x20002c04

000284d8 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   284d8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   284da:	f7ff ffcd 	bl	28478 <_arm_mpu_config>

	return 0;
}
   284de:	2000      	movs	r0, #0
   284e0:	bd08      	pop	{r3, pc}
	...

000284e4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   284e4:	b538      	push	{r3, r4, r5, lr}
   284e6:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   284e8:	4b07      	ldr	r3, [pc, #28]	; (28508 <_sys_device_do_config_level+0x24>)
   284ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   284ee:	e004      	b.n	284fa <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   284f0:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   284f2:	685b      	ldr	r3, [r3, #4]
   284f4:	4620      	mov	r0, r4
   284f6:	4798      	blx	r3
								info++) {
   284f8:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   284fa:	1c6b      	adds	r3, r5, #1
   284fc:	4a02      	ldr	r2, [pc, #8]	; (28508 <_sys_device_do_config_level+0x24>)
   284fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   28502:	429c      	cmp	r4, r3
   28504:	d3f4      	bcc.n	284f0 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   28506:	bd38      	pop	{r3, r4, r5, pc}
   28508:	000333d0 	.word	0x000333d0

0002850c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   2850c:	b538      	push	{r3, r4, r5, lr}
   2850e:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   28510:	4c0a      	ldr	r4, [pc, #40]	; (2853c <device_get_binding+0x30>)
   28512:	e000      	b.n	28516 <device_get_binding+0xa>
   28514:	340c      	adds	r4, #12
   28516:	4b0a      	ldr	r3, [pc, #40]	; (28540 <device_get_binding+0x34>)
   28518:	429c      	cmp	r4, r3
   2851a:	d00c      	beq.n	28536 <device_get_binding+0x2a>
		if (!info->driver_api) {
   2851c:	6863      	ldr	r3, [r4, #4]
   2851e:	2b00      	cmp	r3, #0
   28520:	d0f8      	beq.n	28514 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   28522:	6823      	ldr	r3, [r4, #0]
   28524:	6819      	ldr	r1, [r3, #0]
   28526:	42a9      	cmp	r1, r5
   28528:	d006      	beq.n	28538 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   2852a:	4628      	mov	r0, r5
   2852c:	f7d7 ff6c 	bl	408 <strcmp>
   28530:	2800      	cmp	r0, #0
   28532:	d1ef      	bne.n	28514 <device_get_binding+0x8>
   28534:	e000      	b.n	28538 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   28536:	2400      	movs	r4, #0
}
   28538:	4620      	mov	r0, r4
   2853a:	bd38      	pop	{r3, r4, r5, pc}
   2853c:	2000d4c0 	.word	0x2000d4c0
   28540:	2000d580 	.word	0x2000d580

00028544 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   28544:	4b01      	ldr	r3, [pc, #4]	; (2854c <set_kernel_idle_time_in_ticks+0x8>)
   28546:	6158      	str	r0, [r3, #20]
   28548:	4770      	bx	lr
   2854a:	bf00      	nop
   2854c:	20002cd8 	.word	0x20002cd8

00028550 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   28550:	b510      	push	{r4, lr}
   28552:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   28554:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28558:	d003      	beq.n	28562 <_sys_power_save_idle+0x12>
   2855a:	4b06      	ldr	r3, [pc, #24]	; (28574 <_sys_power_save_idle+0x24>)
   2855c:	681b      	ldr	r3, [r3, #0]
   2855e:	4298      	cmp	r0, r3
   28560:	db02      	blt.n	28568 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   28562:	4620      	mov	r0, r4
   28564:	f7d9 fff4 	bl	2550 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   28568:	4620      	mov	r0, r4
   2856a:	f7ff ffeb 	bl	28544 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   2856e:	f7ff fe83 	bl	28278 <k_cpu_idle>
   28572:	bd10      	pop	{r4, pc}
   28574:	2000cb04 	.word	0x2000cb04

00028578 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   28578:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   2857a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2857e:	d003      	beq.n	28588 <_sys_power_save_idle_exit+0x10>
   28580:	4b03      	ldr	r3, [pc, #12]	; (28590 <_sys_power_save_idle_exit+0x18>)
   28582:	681b      	ldr	r3, [r3, #0]
   28584:	4298      	cmp	r0, r3
   28586:	db01      	blt.n	2858c <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   28588:	f7d9 fff8 	bl	257c <_timer_idle_exit>
   2858c:	bd08      	pop	{r3, pc}
   2858e:	bf00      	nop
   28590:	2000cb04 	.word	0x2000cb04

00028594 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   28594:	b508      	push	{r3, lr}
   28596:	e005      	b.n	285a4 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28598:	2300      	movs	r3, #0
   2859a:	e00e      	b.n	285ba <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   2859c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   285a0:	f7ff ffd6 	bl	28550 <_sys_power_save_idle>
   285a4:	f04f 0220 	mov.w	r2, #32
   285a8:	f3ef 8311 	mrs	r3, BASEPRI
   285ac:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   285b0:	4a04      	ldr	r2, [pc, #16]	; (285c4 <idle+0x30>)
   285b2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285b6:	4293      	cmp	r3, r2
   285b8:	d0ee      	beq.n	28598 <idle+0x4>
   285ba:	2b00      	cmp	r3, #0
   285bc:	d0ee      	beq.n	2859c <idle+0x8>
   285be:	6918      	ldr	r0, [r3, #16]
   285c0:	e7ee      	b.n	285a0 <idle+0xc>
   285c2:	bf00      	nop
   285c4:	20002cd8 	.word	0x20002cd8

000285c8 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   285c8:	b480      	push	{r7}
   285ca:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   285cc:	4b07      	ldr	r3, [pc, #28]	; (285ec <switch_to_main_thread+0x24>)
   285ce:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   285d2:	4907      	ldr	r1, [pc, #28]	; (285f0 <switch_to_main_thread+0x28>)
   285d4:	4a07      	ldr	r2, [pc, #28]	; (285f4 <switch_to_main_thread+0x2c>)
   285d6:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   285d8:	4c07      	ldr	r4, [pc, #28]	; (285f8 <switch_to_main_thread+0x30>)
   285da:	4a08      	ldr	r2, [pc, #32]	; (285fc <switch_to_main_thread+0x34>)
   285dc:	f383 8809 	msr	PSP, r3
   285e0:	2100      	movs	r1, #0
   285e2:	f381 8811 	msr	BASEPRI, r1
   285e6:	4610      	mov	r0, r2
   285e8:	4720      	bx	r4
   285ea:	bf00      	nop
   285ec:	2000b0a0 	.word	0x2000b0a0
   285f0:	20002c70 	.word	0x20002c70
   285f4:	20002cd8 	.word	0x20002cd8
   285f8:	00029dbd 	.word	0x00029dbd
   285fc:	00028821 	.word	0x00028821

00028600 <prepare_multithreading>:
{
   28600:	b5f0      	push	{r4, r5, r6, r7, lr}
   28602:	b087      	sub	sp, #28
	_IntLibInit();
   28604:	f7ff fbaa 	bl	27d5c <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   28608:	2300      	movs	r3, #0
   2860a:	e007      	b.n	2861c <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   2860c:	1d18      	adds	r0, r3, #4
   2860e:	4927      	ldr	r1, [pc, #156]	; (286ac <prepare_multithreading+0xac>)
   28610:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   28614:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   28618:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   2861a:	3301      	adds	r3, #1
   2861c:	2b1f      	cmp	r3, #31
   2861e:	ddf5      	ble.n	2860c <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   28620:	4e22      	ldr	r6, [pc, #136]	; (286ac <prepare_multithreading+0xac>)
   28622:	4d23      	ldr	r5, [pc, #140]	; (286b0 <prepare_multithreading+0xb0>)
   28624:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   28626:	2701      	movs	r7, #1
   28628:	9704      	str	r7, [sp, #16]
   2862a:	2400      	movs	r4, #0
   2862c:	9403      	str	r4, [sp, #12]
   2862e:	9402      	str	r4, [sp, #8]
   28630:	9401      	str	r4, [sp, #4]
   28632:	9400      	str	r4, [sp, #0]
   28634:	4b1f      	ldr	r3, [pc, #124]	; (286b4 <prepare_multithreading+0xb4>)
   28636:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2863a:	491f      	ldr	r1, [pc, #124]	; (286b8 <prepare_multithreading+0xb8>)
   2863c:	4628      	mov	r0, r5
   2863e:	f001 fc9b 	bl	29f78 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28642:	7a6b      	ldrb	r3, [r5, #9]
   28644:	f023 0304 	bic.w	r3, r3, #4
   28648:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   2864a:	4628      	mov	r0, r5
   2864c:	f000 ff08 	bl	29460 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   28650:	4d1a      	ldr	r5, [pc, #104]	; (286bc <prepare_multithreading+0xbc>)
   28652:	9704      	str	r7, [sp, #16]
   28654:	230f      	movs	r3, #15
   28656:	9303      	str	r3, [sp, #12]
   28658:	9402      	str	r4, [sp, #8]
   2865a:	9401      	str	r4, [sp, #4]
   2865c:	9400      	str	r4, [sp, #0]
   2865e:	4b18      	ldr	r3, [pc, #96]	; (286c0 <prepare_multithreading+0xc0>)
   28660:	f44f 72a0 	mov.w	r2, #320	; 0x140
   28664:	4917      	ldr	r1, [pc, #92]	; (286c4 <prepare_multithreading+0xc4>)
   28666:	4628      	mov	r0, r5
   28668:	f001 fc86 	bl	29f78 <_setup_new_thread>
   2866c:	7a6b      	ldrb	r3, [r5, #9]
   2866e:	f023 0304 	bic.w	r3, r3, #4
   28672:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   28674:	4628      	mov	r0, r5
   28676:	f000 fef3 	bl	29460 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   2867a:	f106 030c 	add.w	r3, r6, #12
   2867e:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   28680:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   28682:	4b11      	ldr	r3, [pc, #68]	; (286c8 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   28684:	f383 8808 	msr	MSP, r3
   28688:	4b10      	ldr	r3, [pc, #64]	; (286cc <prepare_multithreading+0xcc>)
   2868a:	22e0      	movs	r2, #224	; 0xe0
   2868c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   28690:	77dc      	strb	r4, [r3, #31]
   28692:	761c      	strb	r4, [r3, #24]
   28694:	765c      	strb	r4, [r3, #25]
   28696:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   28698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2869a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2869e:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   286a0:	f7ff fd5e 	bl	28160 <_FaultInit>
	_CpuIdleInit();
   286a4:	f7ff fde2 	bl	2826c <_CpuIdleInit>
}
   286a8:	b007      	add	sp, #28
   286aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   286ac:	20002cd8 	.word	0x20002cd8
   286b0:	20002c70 	.word	0x20002c70
   286b4:	00028821 	.word	0x00028821
   286b8:	2000a8a0 	.word	0x2000a8a0
   286bc:	20002c08 	.word	0x20002c08
   286c0:	00028595 	.word	0x00028595
   286c4:	2000b0a0 	.word	0x2000b0a0
   286c8:	2000b9e0 	.word	0x2000b9e0
   286cc:	e000ed00 	.word	0xe000ed00

000286d0 <k_call_stacks_analyze>:
{
   286d0:	b500      	push	{lr}
   286d2:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   286d4:	483a      	ldr	r0, [pc, #232]	; (287c0 <k_call_stacks_analyze+0xf0>)
   286d6:	f7da fcc7 	bl	3068 <printk>
   286da:	2200      	movs	r2, #0
	size_t unused = 0;
   286dc:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   286de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   286e2:	d206      	bcs.n	286f2 <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   286e4:	4937      	ldr	r1, [pc, #220]	; (287c4 <k_call_stacks_analyze+0xf4>)
   286e6:	5c89      	ldrb	r1, [r1, r2]
   286e8:	29aa      	cmp	r1, #170	; 0xaa
   286ea:	d102      	bne.n	286f2 <k_call_stacks_analyze+0x22>
			unused++;
   286ec:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   286ee:	3201      	adds	r2, #1
   286f0:	e7f5      	b.n	286de <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   286f2:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   286f6:	2264      	movs	r2, #100	; 0x64
   286f8:	fb02 f201 	mul.w	r2, r2, r1
   286fc:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   286fe:	9202      	str	r2, [sp, #8]
   28700:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28704:	9201      	str	r2, [sp, #4]
   28706:	9100      	str	r1, [sp, #0]
   28708:	492f      	ldr	r1, [pc, #188]	; (287c8 <k_call_stacks_analyze+0xf8>)
   2870a:	4830      	ldr	r0, [pc, #192]	; (287cc <k_call_stacks_analyze+0xfc>)
   2870c:	f7da fcac 	bl	3068 <printk>
	for (i = 0; i < size; i++) {
   28710:	2200      	movs	r2, #0
	size_t unused = 0;
   28712:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28714:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   28718:	d206      	bcs.n	28728 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   2871a:	492d      	ldr	r1, [pc, #180]	; (287d0 <k_call_stacks_analyze+0x100>)
   2871c:	5c89      	ldrb	r1, [r1, r2]
   2871e:	29aa      	cmp	r1, #170	; 0xaa
   28720:	d102      	bne.n	28728 <k_call_stacks_analyze+0x58>
			unused++;
   28722:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28724:	3201      	adds	r2, #1
   28726:	e7f5      	b.n	28714 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   28728:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   2872c:	2264      	movs	r2, #100	; 0x64
   2872e:	fb02 f201 	mul.w	r2, r2, r1
   28732:	4828      	ldr	r0, [pc, #160]	; (287d4 <k_call_stacks_analyze+0x104>)
   28734:	fba0 0202 	umull	r0, r2, r0, r2
   28738:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2873a:	9202      	str	r2, [sp, #8]
   2873c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   28740:	9201      	str	r2, [sp, #4]
   28742:	9100      	str	r1, [sp, #0]
   28744:	4924      	ldr	r1, [pc, #144]	; (287d8 <k_call_stacks_analyze+0x108>)
   28746:	4821      	ldr	r0, [pc, #132]	; (287cc <k_call_stacks_analyze+0xfc>)
   28748:	f7da fc8e 	bl	3068 <printk>
	for (i = 0; i < size; i++) {
   2874c:	2200      	movs	r2, #0
	size_t unused = 0;
   2874e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28750:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28754:	d206      	bcs.n	28764 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   28756:	4921      	ldr	r1, [pc, #132]	; (287dc <k_call_stacks_analyze+0x10c>)
   28758:	5c89      	ldrb	r1, [r1, r2]
   2875a:	29aa      	cmp	r1, #170	; 0xaa
   2875c:	d102      	bne.n	28764 <k_call_stacks_analyze+0x94>
			unused++;
   2875e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28760:	3201      	adds	r2, #1
   28762:	e7f5      	b.n	28750 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   28764:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   28768:	2264      	movs	r2, #100	; 0x64
   2876a:	fb02 f201 	mul.w	r2, r2, r1
   2876e:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28770:	9202      	str	r2, [sp, #8]
   28772:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28776:	9201      	str	r2, [sp, #4]
   28778:	9100      	str	r1, [sp, #0]
   2877a:	4919      	ldr	r1, [pc, #100]	; (287e0 <k_call_stacks_analyze+0x110>)
   2877c:	4813      	ldr	r0, [pc, #76]	; (287cc <k_call_stacks_analyze+0xfc>)
   2877e:	f7da fc73 	bl	3068 <printk>
	for (i = 0; i < size; i++) {
   28782:	2200      	movs	r2, #0
	size_t unused = 0;
   28784:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28786:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2878a:	d206      	bcs.n	2879a <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   2878c:	4915      	ldr	r1, [pc, #84]	; (287e4 <k_call_stacks_analyze+0x114>)
   2878e:	5c89      	ldrb	r1, [r1, r2]
   28790:	29aa      	cmp	r1, #170	; 0xaa
   28792:	d102      	bne.n	2879a <k_call_stacks_analyze+0xca>
			unused++;
   28794:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28796:	3201      	adds	r2, #1
   28798:	e7f5      	b.n	28786 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   2879a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   2879e:	2264      	movs	r2, #100	; 0x64
   287a0:	fb02 f201 	mul.w	r2, r2, r1
   287a4:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   287a6:	9202      	str	r2, [sp, #8]
   287a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   287ac:	9201      	str	r2, [sp, #4]
   287ae:	9100      	str	r1, [sp, #0]
   287b0:	490d      	ldr	r1, [pc, #52]	; (287e8 <k_call_stacks_analyze+0x118>)
   287b2:	4806      	ldr	r0, [pc, #24]	; (287cc <k_call_stacks_analyze+0xfc>)
   287b4:	f7da fc58 	bl	3068 <printk>
}
   287b8:	b005      	add	sp, #20
   287ba:	f85d fb04 	ldr.w	pc, [sp], #4
   287be:	bf00      	nop
   287c0:	000333ec 	.word	0x000333ec
   287c4:	2000a8a0 	.word	0x2000a8a0
   287c8:	000333fc 	.word	0x000333fc
   287cc:	0003179c 	.word	0x0003179c
   287d0:	2000b0a0 	.word	0x2000b0a0
   287d4:	cccccccd 	.word	0xcccccccd
   287d8:	00033408 	.word	0x00033408
   287dc:	2000b1e0 	.word	0x2000b1e0
   287e0:	00033414 	.word	0x00033414
   287e4:	2000b9e0 	.word	0x2000b9e0
   287e8:	00033420 	.word	0x00033420

000287ec <_bss_zero>:
{
   287ec:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   287ee:	4803      	ldr	r0, [pc, #12]	; (287fc <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   287f0:	4a03      	ldr	r2, [pc, #12]	; (28800 <_bss_zero+0x14>)
   287f2:	1a12      	subs	r2, r2, r0
   287f4:	2100      	movs	r1, #0
   287f6:	f002 f923 	bl	2aa40 <memset>
   287fa:	bd08      	pop	{r3, pc}
   287fc:	20000000 	.word	0x20000000
   28800:	20003190 	.word	0x20003190

00028804 <_data_copy>:
{
   28804:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   28806:	4803      	ldr	r0, [pc, #12]	; (28814 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   28808:	4a03      	ldr	r2, [pc, #12]	; (28818 <_data_copy+0x14>)
   2880a:	1a12      	subs	r2, r2, r0
   2880c:	4903      	ldr	r1, [pc, #12]	; (2881c <_data_copy+0x18>)
   2880e:	f7d7 fd57 	bl	2c0 <memcpy>
   28812:	bd08      	pop	{r3, pc}
   28814:	2000bde0 	.word	0x2000bde0
   28818:	2000da54 	.word	0x2000da54
   2881c:	000336ac 	.word	0x000336ac

00028820 <_main>:
{
   28820:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   28822:	2002      	movs	r0, #2
   28824:	f7ff fe5e 	bl	284e4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   28828:	2003      	movs	r0, #3
   2882a:	f7ff fe5b 	bl	284e4 <_sys_device_do_config_level>
	_init_static_threads();
   2882e:	f001 fc11 	bl	2a054 <_init_static_threads>
	main();
   28832:	f7d9 f93f 	bl	1ab4 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   28836:	4a03      	ldr	r2, [pc, #12]	; (28844 <_main+0x24>)
   28838:	7a13      	ldrb	r3, [r2, #8]
   2883a:	f023 0301 	bic.w	r3, r3, #1
   2883e:	7213      	strb	r3, [r2, #8]
   28840:	bd08      	pop	{r3, pc}
   28842:	bf00      	nop
   28844:	20002c70 	.word	0x20002c70

00028848 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   28848:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   2884a:	2000      	movs	r0, #0
   2884c:	f7ff fed8 	bl	28600 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   28850:	2000      	movs	r0, #0
   28852:	f7ff fe47 	bl	284e4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   28856:	2001      	movs	r0, #1
   28858:	f7ff fe44 	bl	284e4 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   2885c:	f7ff feb4 	bl	285c8 <switch_to_main_thread>

00028860 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   28860:	2200      	movs	r2, #0
   28862:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   28864:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   28866:	e005      	b.n	28874 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   28868:	6941      	ldr	r1, [r0, #20]
   2886a:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2886c:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2886e:	68c1      	ldr	r1, [r0, #12]
   28870:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   28872:	3201      	adds	r2, #1
   28874:	6881      	ldr	r1, [r0, #8]
   28876:	428a      	cmp	r2, r1
   28878:	d3f6      	bcc.n	28868 <create_free_list+0x8>
	}
}
   2887a:	4770      	bx	lr

0002887c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2887c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   2887e:	4c05      	ldr	r4, [pc, #20]	; (28894 <init_mem_slab_module+0x18>)
   28880:	e003      	b.n	2888a <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   28882:	4620      	mov	r0, r4
   28884:	f7ff ffec 	bl	28860 <create_free_list>
	     slab++) {
   28888:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   2888a:	4b03      	ldr	r3, [pc, #12]	; (28898 <init_mem_slab_module+0x1c>)
   2888c:	429c      	cmp	r4, r3
   2888e:	d3f8      	bcc.n	28882 <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   28890:	2000      	movs	r0, #0
   28892:	bd10      	pop	{r4, pc}
   28894:	2000d58c 	.word	0x2000d58c
   28898:	2000d5c4 	.word	0x2000d5c4

0002889c <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2889c:	b538      	push	{r3, r4, r5, lr}
   2889e:	f04f 0320 	mov.w	r3, #32
   288a2:	f3ef 8411 	mrs	r4, BASEPRI
   288a6:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   288aa:	6943      	ldr	r3, [r0, #20]
   288ac:	b15b      	cbz	r3, 288c6 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   288ae:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   288b0:	6943      	ldr	r3, [r0, #20]
   288b2:	681b      	ldr	r3, [r3, #0]
   288b4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   288b6:	6983      	ldr	r3, [r0, #24]
   288b8:	3301      	adds	r3, #1
   288ba:	6183      	str	r3, [r0, #24]
		result = 0;
   288bc:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288be:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   288c2:	4618      	mov	r0, r3
   288c4:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   288c6:	b922      	cbnz	r2, 288d2 <k_mem_slab_alloc+0x36>
		*mem = NULL;
   288c8:	2300      	movs	r3, #0
   288ca:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   288cc:	f06f 030b 	mvn.w	r3, #11
   288d0:	e7f5      	b.n	288be <k_mem_slab_alloc+0x22>
   288d2:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   288d4:	4611      	mov	r1, r2
   288d6:	f000 fed7 	bl	29688 <_pend_current_thread>
	_update_time_slice_before_swap();
   288da:	f000 ff53 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   288de:	4620      	mov	r0, r4
   288e0:	f7ff fa96 	bl	27e10 <__swap>
		if (result == 0) {
   288e4:	4603      	mov	r3, r0
   288e6:	2800      	cmp	r0, #0
   288e8:	d1eb      	bne.n	288c2 <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   288ea:	4a02      	ldr	r2, [pc, #8]	; (288f4 <k_mem_slab_alloc+0x58>)
   288ec:	6892      	ldr	r2, [r2, #8]
   288ee:	68d2      	ldr	r2, [r2, #12]
   288f0:	602a      	str	r2, [r5, #0]
   288f2:	e7e6      	b.n	288c2 <k_mem_slab_alloc+0x26>
   288f4:	20002cd8 	.word	0x20002cd8

000288f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   288f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   288fa:	f04f 0320 	mov.w	r3, #32
   288fe:	f3ef 8411 	mrs	r4, BASEPRI
   28902:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   28906:	4b3d      	ldr	r3, [pc, #244]	; (289fc <k_mem_slab_free+0x104>)
   28908:	681b      	ldr	r3, [r3, #0]
   2890a:	2b00      	cmp	r3, #0
   2890c:	d13a      	bne.n	28984 <k_mem_slab_free+0x8c>
	return list->head == list;
   2890e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28910:	4298      	cmp	r0, r3
   28912:	d048      	beq.n	289a6 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   28914:	b14b      	cbz	r3, 2892a <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   28916:	685a      	ldr	r2, [r3, #4]
   28918:	681d      	ldr	r5, [r3, #0]
   2891a:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   2891c:	681a      	ldr	r2, [r3, #0]
   2891e:	685d      	ldr	r5, [r3, #4]
   28920:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28922:	7a5a      	ldrb	r2, [r3, #9]
   28924:	f022 0202 	bic.w	r2, r2, #2
   28928:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   2892a:	2b00      	cmp	r3, #0
   2892c:	d05c      	beq.n	289e8 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2892e:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28930:	2100      	movs	r1, #0
   28932:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   28934:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28936:	6a19      	ldr	r1, [r3, #32]
   28938:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2893c:	d013      	beq.n	28966 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2893e:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   28942:	482f      	ldr	r0, [pc, #188]	; (28a00 <k_mem_slab_free+0x108>)
   28944:	6900      	ldr	r0, [r0, #16]
   28946:	4282      	cmp	r2, r0
   28948:	d004      	beq.n	28954 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2894a:	b102      	cbz	r2, 2894e <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   2894c:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2894e:	6910      	ldr	r0, [r2, #16]
   28950:	4401      	add	r1, r0
   28952:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   28954:	695a      	ldr	r2, [r3, #20]
   28956:	6919      	ldr	r1, [r3, #16]
   28958:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2895a:	691a      	ldr	r2, [r3, #16]
   2895c:	6959      	ldr	r1, [r3, #20]
   2895e:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28964:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28966:	7a5a      	ldrb	r2, [r3, #9]
   28968:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   2896c:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2896e:	f012 0f1b 	tst.w	r2, #27
   28972:	d11c      	bne.n	289ae <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28974:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28976:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2897a:	d016      	beq.n	289aa <k_mem_slab_free+0xb2>
   2897c:	2200      	movs	r2, #0
   2897e:	e017      	b.n	289b0 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28980:	2300      	movs	r3, #0
   28982:	e003      	b.n	2898c <k_mem_slab_free+0x94>
   28984:	4605      	mov	r5, r0
	return list->head == list;
   28986:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28988:	4298      	cmp	r0, r3
   2898a:	d0f9      	beq.n	28980 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2898c:	2b00      	cmp	r3, #0
   2898e:	d0c1      	beq.n	28914 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28990:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   28992:	f112 0f02 	cmn.w	r2, #2
   28996:	d1bd      	bne.n	28914 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   28998:	686a      	ldr	r2, [r5, #4]
   2899a:	4293      	cmp	r3, r2
   2899c:	d001      	beq.n	289a2 <k_mem_slab_free+0xaa>
   2899e:	681b      	ldr	r3, [r3, #0]
   289a0:	e7f4      	b.n	2898c <k_mem_slab_free+0x94>
   289a2:	2300      	movs	r3, #0
   289a4:	e7f2      	b.n	2898c <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   289a6:	2300      	movs	r3, #0
   289a8:	e7b4      	b.n	28914 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   289aa:	2201      	movs	r2, #1
   289ac:	e000      	b.n	289b0 <k_mem_slab_free+0xb8>
   289ae:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   289b0:	b94a      	cbnz	r2, 289c6 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   289b2:	4b13      	ldr	r3, [pc, #76]	; (28a00 <k_mem_slab_free+0x108>)
   289b4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   289b6:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   289b8:	2b7f      	cmp	r3, #127	; 0x7f
   289ba:	d908      	bls.n	289ce <k_mem_slab_free+0xd6>
   289bc:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   289be:	b96b      	cbnz	r3, 289dc <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   289c0:	f384 8811 	msr	BASEPRI, r4
   289c4:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   289c6:	4618      	mov	r0, r3
   289c8:	f000 fd4a 	bl	29460 <_add_thread_to_ready_q>
   289cc:	e7f1      	b.n	289b2 <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   289ce:	f000 fe6b 	bl	296a8 <__must_switch_threads>
   289d2:	4603      	mov	r3, r0
   289d4:	2800      	cmp	r0, #0
   289d6:	d0f2      	beq.n	289be <k_mem_slab_free+0xc6>
   289d8:	2301      	movs	r3, #1
   289da:	e7f0      	b.n	289be <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   289dc:	f000 fed2 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   289e0:	4620      	mov	r0, r4
   289e2:	f7ff fa15 	bl	27e10 <__swap>
   289e6:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   289e8:	680b      	ldr	r3, [r1, #0]
   289ea:	6942      	ldr	r2, [r0, #20]
   289ec:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   289ee:	680b      	ldr	r3, [r1, #0]
   289f0:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   289f2:	6983      	ldr	r3, [r0, #24]
   289f4:	3b01      	subs	r3, #1
   289f6:	6183      	str	r3, [r0, #24]
   289f8:	e7e2      	b.n	289c0 <k_mem_slab_free+0xc8>
   289fa:	bf00      	nop
   289fc:	200030e0 	.word	0x200030e0
   28a00:	20002cd8 	.word	0x20002cd8

00028a04 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   28a04:	4288      	cmp	r0, r1
   28a06:	da00      	bge.n	28a0a <new_prio_for_inheritance+0x6>
   28a08:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   28a0a:	2900      	cmp	r1, #0
   28a0c:	db01      	blt.n	28a12 <new_prio_for_inheritance+0xe>
   28a0e:	4608      	mov	r0, r1
   28a10:	4770      	bx	lr
   28a12:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   28a14:	4770      	bx	lr

00028a16 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   28a16:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   28a18:	6884      	ldr	r4, [r0, #8]
   28a1a:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28a1e:	428b      	cmp	r3, r1
   28a20:	d00e      	beq.n	28a40 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   28a22:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28a24:	f013 0f1f 	tst.w	r3, #31
   28a28:	d107      	bne.n	28a3a <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28a2a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28a30:	d001      	beq.n	28a36 <adjust_owner_prio+0x20>
   28a32:	2300      	movs	r3, #0
   28a34:	e002      	b.n	28a3c <adjust_owner_prio+0x26>
   28a36:	2301      	movs	r3, #1
   28a38:	e000      	b.n	28a3c <adjust_owner_prio+0x26>
   28a3a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28a3c:	b90b      	cbnz	r3, 28a42 <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   28a3e:	72a1      	strb	r1, [r4, #10]
   28a40:	bd38      	pop	{r3, r4, r5, pc}
   28a42:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   28a44:	4620      	mov	r0, r4
   28a46:	f000 fd2b 	bl	294a0 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   28a4a:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   28a4c:	4620      	mov	r0, r4
   28a4e:	f000 fd07 	bl	29460 <_add_thread_to_ready_q>
   28a52:	bd38      	pop	{r3, r4, r5, pc}

00028a54 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   28a54:	b570      	push	{r4, r5, r6, lr}
   28a56:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   28a58:	4b32      	ldr	r3, [pc, #200]	; (28b24 <_impl_k_mutex_lock+0xd0>)
   28a5a:	689a      	ldr	r2, [r3, #8]
   28a5c:	7ad3      	ldrb	r3, [r2, #11]
   28a5e:	3b01      	subs	r3, #1
   28a60:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   28a62:	68c3      	ldr	r3, [r0, #12]
   28a64:	b97b      	cbnz	r3, 28a86 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   28a66:	2b00      	cmp	r3, #0
   28a68:	d133      	bne.n	28ad2 <_impl_k_mutex_lock+0x7e>
   28a6a:	4a2e      	ldr	r2, [pc, #184]	; (28b24 <_impl_k_mutex_lock+0xd0>)
   28a6c:	6892      	ldr	r2, [r2, #8]
   28a6e:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   28a72:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   28a74:	3301      	adds	r3, #1
   28a76:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   28a78:	4b2a      	ldr	r3, [pc, #168]	; (28b24 <_impl_k_mutex_lock+0xd0>)
   28a7a:	689b      	ldr	r3, [r3, #8]
   28a7c:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   28a7e:	f000 fea1 	bl	297c4 <k_sched_unlock>

		return 0;
   28a82:	2000      	movs	r0, #0
   28a84:	bd70      	pop	{r4, r5, r6, pc}
   28a86:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   28a88:	6881      	ldr	r1, [r0, #8]
   28a8a:	4a26      	ldr	r2, [pc, #152]	; (28b24 <_impl_k_mutex_lock+0xd0>)
   28a8c:	6892      	ldr	r2, [r2, #8]
   28a8e:	4291      	cmp	r1, r2
   28a90:	d0e9      	beq.n	28a66 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   28a92:	b305      	cbz	r5, 28ad6 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   28a94:	f991 100a 	ldrsb.w	r1, [r1, #10]
   28a98:	f992 000a 	ldrsb.w	r0, [r2, #10]
   28a9c:	f7ff ffb2 	bl	28a04 <new_prio_for_inheritance>
	__asm__ volatile(
   28aa0:	f04f 0320 	mov.w	r3, #32
   28aa4:	f3ef 8611 	mrs	r6, BASEPRI
   28aa8:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   28aac:	68a3      	ldr	r3, [r4, #8]
   28aae:	f993 300a 	ldrsb.w	r3, [r3, #10]
   28ab2:	4298      	cmp	r0, r3
   28ab4:	db14      	blt.n	28ae0 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   28ab6:	4629      	mov	r1, r5
   28ab8:	4620      	mov	r0, r4
   28aba:	f000 fde5 	bl	29688 <_pend_current_thread>
	_update_time_slice_before_swap();
   28abe:	f000 fe61 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   28ac2:	4630      	mov	r0, r6
   28ac4:	f7ff f9a4 	bl	27e10 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   28ac8:	b978      	cbnz	r0, 28aea <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   28aca:	f000 fe7b 	bl	297c4 <k_sched_unlock>
		return 0;
   28ace:	2000      	movs	r0, #0
   28ad0:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   28ad2:	6922      	ldr	r2, [r4, #16]
   28ad4:	e7cd      	b.n	28a72 <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   28ad6:	f000 fe75 	bl	297c4 <k_sched_unlock>
		return -EBUSY;
   28ada:	f06f 000f 	mvn.w	r0, #15
   28ade:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   28ae0:	4601      	mov	r1, r0
   28ae2:	4620      	mov	r0, r4
   28ae4:	f7ff ff97 	bl	28a16 <adjust_owner_prio>
   28ae8:	e7e5      	b.n	28ab6 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   28aea:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28aec:	429c      	cmp	r4, r3
   28aee:	d016      	beq.n	28b1e <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   28af0:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   28af2:	b123      	cbz	r3, 28afe <_impl_k_mutex_lock+0xaa>
   28af4:	f993 000a 	ldrsb.w	r0, [r3, #10]
   28af8:	f7ff ff84 	bl	28a04 <new_prio_for_inheritance>
   28afc:	4601      	mov	r1, r0
   28afe:	f04f 0320 	mov.w	r3, #32
   28b02:	f3ef 8511 	mrs	r5, BASEPRI
   28b06:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   28b0a:	4620      	mov	r0, r4
   28b0c:	f7ff ff83 	bl	28a16 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b10:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   28b14:	f000 fe56 	bl	297c4 <k_sched_unlock>

	return -EAGAIN;
   28b18:	f06f 000a 	mvn.w	r0, #10
}
   28b1c:	bd70      	pop	{r4, r5, r6, pc}
   28b1e:	2300      	movs	r3, #0
   28b20:	e7e6      	b.n	28af0 <_impl_k_mutex_lock+0x9c>
   28b22:	bf00      	nop
   28b24:	20002cd8 	.word	0x20002cd8

00028b28 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   28b28:	b570      	push	{r4, r5, r6, lr}
   28b2a:	4b40      	ldr	r3, [pc, #256]	; (28c2c <_impl_k_mutex_unlock+0x104>)
   28b2c:	689a      	ldr	r2, [r3, #8]
   28b2e:	7ad3      	ldrb	r3, [r2, #11]
   28b30:	3b01      	subs	r3, #1
   28b32:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   28b34:	68c3      	ldr	r3, [r0, #12]
   28b36:	3b01      	subs	r3, #1
   28b38:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   28b3a:	2b00      	cmp	r3, #0
   28b3c:	d143      	bne.n	28bc6 <_impl_k_mutex_unlock+0x9e>
   28b3e:	4605      	mov	r5, r0
	__asm__ volatile(
   28b40:	f04f 0320 	mov.w	r3, #32
   28b44:	f3ef 8611 	mrs	r6, BASEPRI
   28b48:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   28b4c:	6901      	ldr	r1, [r0, #16]
   28b4e:	f7ff ff62 	bl	28a16 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   28b52:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   28b54:	4b36      	ldr	r3, [pc, #216]	; (28c30 <_impl_k_mutex_unlock+0x108>)
   28b56:	681b      	ldr	r3, [r3, #0]
   28b58:	2b00      	cmp	r3, #0
   28b5a:	d139      	bne.n	28bd0 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   28b5c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b5e:	42a5      	cmp	r5, r4
   28b60:	d046      	beq.n	28bf0 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   28b62:	b14c      	cbz	r4, 28b78 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   28b64:	6863      	ldr	r3, [r4, #4]
   28b66:	6822      	ldr	r2, [r4, #0]
   28b68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28b6a:	6823      	ldr	r3, [r4, #0]
   28b6c:	6862      	ldr	r2, [r4, #4]
   28b6e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28b70:	7a63      	ldrb	r3, [r4, #9]
   28b72:	f023 0302 	bic.w	r3, r3, #2
   28b76:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   28b78:	2c00      	cmp	r4, #0
   28b7a:	d051      	beq.n	28c20 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28b7c:	6a22      	ldr	r2, [r4, #32]
   28b7e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28b82:	d013      	beq.n	28bac <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28b84:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28b88:	4928      	ldr	r1, [pc, #160]	; (28c2c <_impl_k_mutex_unlock+0x104>)
   28b8a:	6909      	ldr	r1, [r1, #16]
   28b8c:	428b      	cmp	r3, r1
   28b8e:	d004      	beq.n	28b9a <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28b90:	b103      	cbz	r3, 28b94 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   28b92:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28b94:	6919      	ldr	r1, [r3, #16]
   28b96:	440a      	add	r2, r1
   28b98:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28b9a:	6963      	ldr	r3, [r4, #20]
   28b9c:	6922      	ldr	r2, [r4, #16]
   28b9e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28ba0:	6923      	ldr	r3, [r4, #16]
   28ba2:	6962      	ldr	r2, [r4, #20]
   28ba4:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28baa:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28bac:	7a63      	ldrb	r3, [r4, #9]
   28bae:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28bb2:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28bb4:	f013 0f1b 	tst.w	r3, #27
   28bb8:	d11e      	bne.n	28bf8 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28bba:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28bc0:	d018      	beq.n	28bf4 <_impl_k_mutex_unlock+0xcc>
   28bc2:	2300      	movs	r3, #0
   28bc4:	e019      	b.n	28bfa <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   28bc6:	f000 fdfd 	bl	297c4 <k_sched_unlock>
		return;
   28bca:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28bcc:	2400      	movs	r4, #0
   28bce:	e002      	b.n	28bd6 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   28bd0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28bd2:	42a5      	cmp	r5, r4
   28bd4:	d0fa      	beq.n	28bcc <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28bd6:	2c00      	cmp	r4, #0
   28bd8:	d0c3      	beq.n	28b62 <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28bda:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   28bdc:	f113 0f02 	cmn.w	r3, #2
   28be0:	d1bf      	bne.n	28b62 <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   28be2:	6853      	ldr	r3, [r2, #4]
   28be4:	429c      	cmp	r4, r3
   28be6:	d001      	beq.n	28bec <_impl_k_mutex_unlock+0xc4>
   28be8:	6824      	ldr	r4, [r4, #0]
   28bea:	e7f4      	b.n	28bd6 <_impl_k_mutex_unlock+0xae>
   28bec:	2400      	movs	r4, #0
   28bee:	e7f2      	b.n	28bd6 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28bf0:	2400      	movs	r4, #0
   28bf2:	e7b6      	b.n	28b62 <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   28bf4:	2301      	movs	r3, #1
   28bf6:	e000      	b.n	28bfa <_impl_k_mutex_unlock+0xd2>
   28bf8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28bfa:	b96b      	cbnz	r3, 28c18 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28bfc:	f386 8811 	msr	BASEPRI, r6
   28c00:	2300      	movs	r3, #0
   28c02:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   28c04:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   28c06:	68eb      	ldr	r3, [r5, #12]
   28c08:	3301      	adds	r3, #1
   28c0a:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   28c0c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28c10:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   28c12:	f000 fdd7 	bl	297c4 <k_sched_unlock>
   28c16:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28c18:	4620      	mov	r0, r4
   28c1a:	f000 fc21 	bl	29460 <_add_thread_to_ready_q>
   28c1e:	e7ed      	b.n	28bfc <_impl_k_mutex_unlock+0xd4>
   28c20:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   28c24:	2300      	movs	r3, #0
   28c26:	60ab      	str	r3, [r5, #8]
   28c28:	e7f3      	b.n	28c12 <_impl_k_mutex_unlock+0xea>
   28c2a:	bf00      	nop
   28c2c:	20002cd8 	.word	0x20002cd8
   28c30:	200030e0 	.word	0x200030e0

00028c34 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   28c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c36:	4604      	mov	r4, r0
   28c38:	460d      	mov	r5, r1
	*must_reschedule = 0;
   28c3a:	2300      	movs	r3, #0
   28c3c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   28c3e:	6883      	ldr	r3, [r0, #8]
   28c40:	2b00      	cmp	r3, #0
   28c42:	d042      	beq.n	28cca <_signal_poll_event+0x96>
   28c44:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   28c46:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   28c48:	7a43      	ldrb	r3, [r0, #9]
   28c4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28c4e:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   28c50:	f013 0f02 	tst.w	r3, #2
   28c54:	d039      	beq.n	28cca <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28c56:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   28c58:	f113 0f02 	cmn.w	r3, #2
   28c5c:	d060      	beq.n	28d20 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   28c5e:	6843      	ldr	r3, [r0, #4]
   28c60:	6802      	ldr	r2, [r0, #0]
   28c62:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28c64:	6803      	ldr	r3, [r0, #0]
   28c66:	6842      	ldr	r2, [r0, #4]
   28c68:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28c6a:	7a43      	ldrb	r3, [r0, #9]
   28c6c:	f023 0302 	bic.w	r3, r3, #2
   28c70:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28c72:	6a02      	ldr	r2, [r0, #32]
   28c74:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28c78:	d013      	beq.n	28ca2 <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28c7a:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   28c7e:	492a      	ldr	r1, [pc, #168]	; (28d28 <_signal_poll_event+0xf4>)
   28c80:	6909      	ldr	r1, [r1, #16]
   28c82:	428b      	cmp	r3, r1
   28c84:	d004      	beq.n	28c90 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c86:	b103      	cbz	r3, 28c8a <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   28c88:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28c8a:	6919      	ldr	r1, [r3, #16]
   28c8c:	440a      	add	r2, r1
   28c8e:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28c90:	6943      	ldr	r3, [r0, #20]
   28c92:	6902      	ldr	r2, [r0, #16]
   28c94:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28c96:	6903      	ldr	r3, [r0, #16]
   28c98:	6942      	ldr	r2, [r0, #20]
   28c9a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ca0:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   28ca2:	b965      	cbnz	r5, 28cbe <_signal_poll_event+0x8a>
   28ca4:	f06f 0303 	mvn.w	r3, #3
   28ca8:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   28caa:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28cac:	f013 0f1f 	tst.w	r3, #31
   28cb0:	d109      	bne.n	28cc6 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28cb2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28cb8:	d003      	beq.n	28cc2 <_signal_poll_event+0x8e>
   28cba:	2700      	movs	r7, #0
   28cbc:	e004      	b.n	28cc8 <_signal_poll_event+0x94>
   28cbe:	2300      	movs	r3, #0
   28cc0:	e7f2      	b.n	28ca8 <_signal_poll_event+0x74>
   28cc2:	2701      	movs	r7, #1
   28cc4:	e000      	b.n	28cc8 <_signal_poll_event+0x94>
   28cc6:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   28cc8:	b947      	cbnz	r7, 28cdc <_signal_poll_event+0xa8>
	event->poller = NULL;
   28cca:	2000      	movs	r0, #0
   28ccc:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   28cce:	7b63      	ldrb	r3, [r4, #13]
   28cd0:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   28cd4:	f365 1307 	bfi	r3, r5, #4, #4
   28cd8:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   28cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   28cdc:	f000 fbc0 	bl	29460 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   28ce0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   28ce4:	2b0d      	cmp	r3, #13
   28ce6:	d807      	bhi.n	28cf8 <_signal_poll_event+0xc4>
   28ce8:	b19b      	cbz	r3, 28d12 <_signal_poll_event+0xde>
   28cea:	4b10      	ldr	r3, [pc, #64]	; (28d2c <_signal_poll_event+0xf8>)
   28cec:	685b      	ldr	r3, [r3, #4]
   28cee:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28cf2:	d010      	beq.n	28d16 <_signal_poll_event+0xe2>
   28cf4:	2300      	movs	r3, #0
   28cf6:	e000      	b.n	28cfa <_signal_poll_event+0xc6>
   28cf8:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   28cfa:	b973      	cbnz	r3, 28d1a <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   28cfc:	4a0a      	ldr	r2, [pc, #40]	; (28d28 <_signal_poll_event+0xf4>)
   28cfe:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28d00:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28d02:	2a7f      	cmp	r2, #127	; 0x7f
   28d04:	d80a      	bhi.n	28d1c <_signal_poll_event+0xe8>
   28d06:	f000 fccf 	bl	296a8 <__must_switch_threads>
   28d0a:	4603      	mov	r3, r0
   28d0c:	b130      	cbz	r0, 28d1c <_signal_poll_event+0xe8>
   28d0e:	463b      	mov	r3, r7
   28d10:	e004      	b.n	28d1c <_signal_poll_event+0xe8>
   28d12:	2300      	movs	r3, #0
   28d14:	e7f1      	b.n	28cfa <_signal_poll_event+0xc6>
   28d16:	463b      	mov	r3, r7
   28d18:	e7ef      	b.n	28cfa <_signal_poll_event+0xc6>
   28d1a:	2300      	movs	r3, #0
   28d1c:	6033      	str	r3, [r6, #0]
   28d1e:	e7d4      	b.n	28cca <_signal_poll_event+0x96>
		return -EAGAIN;
   28d20:	f06f 000a 	mvn.w	r0, #10
}
   28d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d26:	bf00      	nop
   28d28:	20002cd8 	.word	0x20002cd8
   28d2c:	e000ed00 	.word	0xe000ed00

00028d30 <k_poll_event_init>:
{
   28d30:	b430      	push	{r4, r5}
	event->poller = NULL;
   28d32:	2500      	movs	r5, #0
   28d34:	6085      	str	r5, [r0, #8]
	event->type = type;
   28d36:	7b44      	ldrb	r4, [r0, #13]
   28d38:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   28d3c:	f365 1407 	bfi	r4, r5, #4, #4
   28d40:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   28d42:	7b81      	ldrb	r1, [r0, #14]
   28d44:	f362 0100 	bfi	r1, r2, #0, #1
   28d48:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   28d4a:	89c2      	ldrh	r2, [r0, #14]
   28d4c:	f365 024f 	bfi	r2, r5, #1, #15
   28d50:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   28d52:	6103      	str	r3, [r0, #16]
}
   28d54:	bc30      	pop	{r4, r5}
   28d56:	4770      	bx	lr

00028d58 <k_poll>:
{
   28d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d5c:	b085      	sub	sp, #20
   28d5e:	4691      	mov	r9, r2
	__asm__ volatile(
   28d60:	f04f 0320 	mov.w	r3, #32
   28d64:	f3ef 8511 	mrs	r5, BASEPRI
   28d68:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   28d6c:	4ab7      	ldr	r2, [pc, #732]	; (2904c <k_poll+0x2f4>)
   28d6e:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   28d70:	7a63      	ldrb	r3, [r4, #9]
   28d72:	f043 0320 	orr.w	r3, r3, #32
   28d76:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d78:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   28d7c:	6893      	ldr	r3, [r2, #8]
   28d7e:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   28d80:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   28d82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   28d86:	e01e      	b.n	28dc6 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   28d88:	6917      	ldr	r7, [r2, #16]
   28d8a:	68bf      	ldr	r7, [r7, #8]
   28d8c:	b14f      	cbz	r7, 28da2 <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   28d8e:	f04f 0e02 	mov.w	lr, #2
			return 1;
   28d92:	2701      	movs	r7, #1
   28d94:	e005      	b.n	28da2 <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   28d96:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   28d98:	683f      	ldr	r7, [r7, #0]
   28d9a:	b117      	cbz	r7, 28da2 <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   28d9c:	f04f 0e04 	mov.w	lr, #4
			return 1;
   28da0:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   28da2:	b387      	cbz	r7, 28e06 <k_poll+0xae>
	event->poller = NULL;
   28da4:	2500      	movs	r5, #0
   28da6:	6095      	str	r5, [r2, #8]
	event->state |= state;
   28da8:	7b55      	ldrb	r5, [r2, #13]
   28daa:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   28dae:	f367 1507 	bfi	r5, r7, #4, #4
   28db2:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   28db4:	4aa5      	ldr	r2, [pc, #660]	; (2904c <k_poll+0x2f4>)
   28db6:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   28db8:	7a6a      	ldrb	r2, [r5, #9]
   28dba:	f022 0220 	bic.w	r2, r2, #32
   28dbe:	726a      	strb	r2, [r5, #9]
   28dc0:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   28dc4:	3301      	adds	r3, #1
   28dc6:	428b      	cmp	r3, r1
   28dc8:	f280 8191 	bge.w	290ee <k_poll+0x396>
	__asm__ volatile(
   28dcc:	f04f 0220 	mov.w	r2, #32
   28dd0:	f3ef 8611 	mrs	r6, BASEPRI
   28dd4:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   28dd8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   28ddc:	0095      	lsls	r5, r2, #2
   28dde:	1942      	adds	r2, r0, r5
	switch (event->type) {
   28de0:	7b57      	ldrb	r7, [r2, #13]
   28de2:	f007 070f 	and.w	r7, r7, #15
   28de6:	2f02      	cmp	r7, #2
   28de8:	d0ce      	beq.n	28d88 <k_poll+0x30>
   28dea:	2f04      	cmp	r7, #4
   28dec:	d0d3      	beq.n	28d96 <k_poll+0x3e>
   28dee:	2f01      	cmp	r7, #1
   28df0:	d001      	beq.n	28df6 <k_poll+0x9e>
		return 0;
   28df2:	2700      	movs	r7, #0
   28df4:	e7d5      	b.n	28da2 <k_poll+0x4a>
		if (event->signal->signaled) {
   28df6:	6917      	ldr	r7, [r2, #16]
   28df8:	68bf      	ldr	r7, [r7, #8]
   28dfa:	2f00      	cmp	r7, #0
   28dfc:	d0d1      	beq.n	28da2 <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   28dfe:	f04f 0e01 	mov.w	lr, #1
			return 1;
   28e02:	4677      	mov	r7, lr
   28e04:	e7cd      	b.n	28da2 <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28e06:	f1b9 0f00 	cmp.w	r9, #0
   28e0a:	d0d9      	beq.n	28dc0 <k_poll+0x68>
	return _is_thread_polling(_current);
   28e0c:	4f8f      	ldr	r7, [pc, #572]	; (2904c <k_poll+0x2f4>)
   28e0e:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   28e10:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28e12:	f017 0f20 	tst.w	r7, #32
   28e16:	d0d3      	beq.n	28dc0 <k_poll+0x68>
	switch (event->type) {
   28e18:	7b57      	ldrb	r7, [r2, #13]
   28e1a:	f007 070f 	and.w	r7, r7, #15
   28e1e:	2f02      	cmp	r7, #2
   28e20:	d008      	beq.n	28e34 <k_poll+0xdc>
   28e22:	2f04      	cmp	r7, #4
   28e24:	d07a      	beq.n	28f1c <k_poll+0x1c4>
   28e26:	2f01      	cmp	r7, #1
   28e28:	f000 80ec 	beq.w	29004 <k_poll+0x2ac>
	event->poller = poller;
   28e2c:	ad03      	add	r5, sp, #12
   28e2e:	6095      	str	r5, [r2, #8]
				++last_registered;
   28e30:	3401      	adds	r4, #1
   28e32:	e7c5      	b.n	28dc0 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   28e34:	6917      	ldr	r7, [r2, #16]
   28e36:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   28e3a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28e3e:	45c4      	cmp	ip, r8
   28e40:	d010      	beq.n	28e64 <k_poll+0x10c>
   28e42:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28e46:	b17f      	cbz	r7, 28e68 <k_poll+0x110>
   28e48:	68bf      	ldr	r7, [r7, #8]
   28e4a:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28e4c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28e50:	9f03      	ldr	r7, [sp, #12]
   28e52:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28e56:	45da      	cmp	sl, fp
   28e58:	db06      	blt.n	28e68 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e5a:	45c4      	cmp	ip, r8
   28e5c:	d12e      	bne.n	28ebc <k_poll+0x164>
   28e5e:	f04f 0800 	mov.w	r8, #0
   28e62:	e02b      	b.n	28ebc <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28e64:	2700      	movs	r7, #0
   28e66:	e7ee      	b.n	28e46 <k_poll+0xee>
	node->next = list;
   28e68:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28e6c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28e70:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28e72:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28e76:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28e78:	f8cc 2004 	str.w	r2, [ip, #4]
   28e7c:	e7d6      	b.n	28e2c <k_poll+0xd4>
	if (!insert_point) {
   28e7e:	f1b8 0f00 	cmp.w	r8, #0
   28e82:	d00a      	beq.n	28e9a <k_poll+0x142>
		node->prev = insert_point->prev;
   28e84:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28e88:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28e8a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28e8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28e92:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28e94:	f8c8 2004 	str.w	r2, [r8, #4]
   28e98:	e7c8      	b.n	28e2c <k_poll+0xd4>
	node->next = list;
   28e9a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28e9e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28ea2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28ea4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28ea8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28eaa:	f8cc 2004 	str.w	r2, [ip, #4]
   28eae:	e7bd      	b.n	28e2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eb0:	4647      	mov	r7, r8
   28eb2:	e017      	b.n	28ee4 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   28eb4:	2700      	movs	r7, #0
   28eb6:	e015      	b.n	28ee4 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eb8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28ebc:	f1b8 0f00 	cmp.w	r8, #0
   28ec0:	d021      	beq.n	28f06 <k_poll+0x1ae>
					       pending->poller->thread)) {
   28ec2:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28ec6:	683f      	ldr	r7, [r7, #0]
   28ec8:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28ecc:	45bb      	cmp	fp, r7
   28ece:	dbd6      	blt.n	28e7e <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28ed0:	46c2      	mov	sl, r8
   28ed2:	f1b8 0f00 	cmp.w	r8, #0
   28ed6:	d0eb      	beq.n	28eb0 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   28ed8:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28edc:	45b8      	cmp	r8, r7
   28ede:	d0e9      	beq.n	28eb4 <k_poll+0x15c>
   28ee0:	f8d8 7000 	ldr.w	r7, [r8]
   28ee4:	b167      	cbz	r7, 28f00 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ee6:	f1ba 0f00 	cmp.w	sl, #0
   28eea:	d0e5      	beq.n	28eb8 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   28eec:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28ef0:	45ba      	cmp	sl, r7
   28ef2:	d002      	beq.n	28efa <k_poll+0x1a2>
   28ef4:	f8d8 8000 	ldr.w	r8, [r8]
   28ef8:	e7e0      	b.n	28ebc <k_poll+0x164>
   28efa:	f04f 0800 	mov.w	r8, #0
   28efe:	e7dd      	b.n	28ebc <k_poll+0x164>
   28f00:	f04f 0800 	mov.w	r8, #0
   28f04:	e7da      	b.n	28ebc <k_poll+0x164>
	node->next = list;
   28f06:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28f0a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f0e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28f10:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f14:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28f16:	f8cc 2004 	str.w	r2, [ip, #4]
   28f1a:	e787      	b.n	28e2c <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   28f1c:	6917      	ldr	r7, [r2, #16]
   28f1e:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   28f22:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28f26:	45c4      	cmp	ip, r8
   28f28:	d010      	beq.n	28f4c <k_poll+0x1f4>
   28f2a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28f2e:	b17f      	cbz	r7, 28f50 <k_poll+0x1f8>
   28f30:	68bf      	ldr	r7, [r7, #8]
   28f32:	683f      	ldr	r7, [r7, #0]
   28f34:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28f38:	9f03      	ldr	r7, [sp, #12]
   28f3a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28f3e:	45da      	cmp	sl, fp
   28f40:	db06      	blt.n	28f50 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f42:	45c4      	cmp	ip, r8
   28f44:	d12e      	bne.n	28fa4 <k_poll+0x24c>
   28f46:	f04f 0800 	mov.w	r8, #0
   28f4a:	e02b      	b.n	28fa4 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28f4c:	2700      	movs	r7, #0
   28f4e:	e7ee      	b.n	28f2e <k_poll+0x1d6>
	node->next = list;
   28f50:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28f54:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f58:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28f5a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f5e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28f60:	f8cc 2004 	str.w	r2, [ip, #4]
   28f64:	e762      	b.n	28e2c <k_poll+0xd4>
	if (!insert_point) {
   28f66:	f1b8 0f00 	cmp.w	r8, #0
   28f6a:	d00a      	beq.n	28f82 <k_poll+0x22a>
		node->prev = insert_point->prev;
   28f6c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28f70:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28f72:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28f76:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28f7a:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28f7c:	f8c8 2004 	str.w	r2, [r8, #4]
   28f80:	e754      	b.n	28e2c <k_poll+0xd4>
	node->next = list;
   28f82:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28f86:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f8a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28f8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28f90:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28f92:	f8cc 2004 	str.w	r2, [ip, #4]
   28f96:	e749      	b.n	28e2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f98:	4647      	mov	r7, r8
   28f9a:	e017      	b.n	28fcc <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   28f9c:	2700      	movs	r7, #0
   28f9e:	e015      	b.n	28fcc <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fa0:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28fa4:	f1b8 0f00 	cmp.w	r8, #0
   28fa8:	d021      	beq.n	28fee <k_poll+0x296>
					       pending->poller->thread)) {
   28faa:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28fae:	683f      	ldr	r7, [r7, #0]
   28fb0:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28fb4:	45bb      	cmp	fp, r7
   28fb6:	dbd6      	blt.n	28f66 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28fb8:	46c2      	mov	sl, r8
   28fba:	f1b8 0f00 	cmp.w	r8, #0
   28fbe:	d0eb      	beq.n	28f98 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   28fc0:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28fc4:	45b8      	cmp	r8, r7
   28fc6:	d0e9      	beq.n	28f9c <k_poll+0x244>
   28fc8:	f8d8 7000 	ldr.w	r7, [r8]
   28fcc:	b167      	cbz	r7, 28fe8 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fce:	f1ba 0f00 	cmp.w	sl, #0
   28fd2:	d0e5      	beq.n	28fa0 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   28fd4:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28fd8:	45ba      	cmp	sl, r7
   28fda:	d002      	beq.n	28fe2 <k_poll+0x28a>
   28fdc:	f8d8 8000 	ldr.w	r8, [r8]
   28fe0:	e7e0      	b.n	28fa4 <k_poll+0x24c>
   28fe2:	f04f 0800 	mov.w	r8, #0
   28fe6:	e7dd      	b.n	28fa4 <k_poll+0x24c>
   28fe8:	f04f 0800 	mov.w	r8, #0
   28fec:	e7da      	b.n	28fa4 <k_poll+0x24c>
	node->next = list;
   28fee:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28ff2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28ff6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28ff8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28ffc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28ffe:	f8cc 2004 	str.w	r2, [ip, #4]
   29002:	e713      	b.n	28e2c <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   29004:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   29008:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2900c:	45c4      	cmp	ip, r8
   2900e:	d010      	beq.n	29032 <k_poll+0x2da>
   29010:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   29014:	b17f      	cbz	r7, 29036 <k_poll+0x2de>
   29016:	68bf      	ldr	r7, [r7, #8]
   29018:	683f      	ldr	r7, [r7, #0]
   2901a:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   2901e:	9f03      	ldr	r7, [sp, #12]
   29020:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   29024:	45da      	cmp	sl, fp
   29026:	db06      	blt.n	29036 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29028:	45c4      	cmp	ip, r8
   2902a:	d130      	bne.n	2908e <k_poll+0x336>
   2902c:	f04f 0800 	mov.w	r8, #0
   29030:	e02d      	b.n	2908e <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29032:	2700      	movs	r7, #0
   29034:	e7ee      	b.n	29014 <k_poll+0x2bc>
	node->next = list;
   29036:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2903a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2903e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29040:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29044:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29046:	f8cc 2004 	str.w	r2, [ip, #4]
   2904a:	e6ef      	b.n	28e2c <k_poll+0xd4>
   2904c:	20002cd8 	.word	0x20002cd8
	if (!insert_point) {
   29050:	f1b8 0f00 	cmp.w	r8, #0
   29054:	d00a      	beq.n	2906c <k_poll+0x314>
		node->prev = insert_point->prev;
   29056:	f8d8 7004 	ldr.w	r7, [r8, #4]
   2905a:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2905c:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   29060:	f8d8 5004 	ldr.w	r5, [r8, #4]
   29064:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   29066:	f8c8 2004 	str.w	r2, [r8, #4]
   2906a:	e6df      	b.n	28e2c <k_poll+0xd4>
	node->next = list;
   2906c:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   29070:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29074:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29076:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2907a:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2907c:	f8cc 2004 	str.w	r2, [ip, #4]
   29080:	e6d4      	b.n	28e2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29082:	4647      	mov	r7, r8
   29084:	e017      	b.n	290b6 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   29086:	2700      	movs	r7, #0
   29088:	e015      	b.n	290b6 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2908a:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2908e:	f1b8 0f00 	cmp.w	r8, #0
   29092:	d021      	beq.n	290d8 <k_poll+0x380>
					       pending->poller->thread)) {
   29094:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   29098:	683f      	ldr	r7, [r7, #0]
   2909a:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2909e:	45bb      	cmp	fp, r7
   290a0:	dbd6      	blt.n	29050 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   290a2:	46c2      	mov	sl, r8
   290a4:	f1b8 0f00 	cmp.w	r8, #0
   290a8:	d0eb      	beq.n	29082 <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   290aa:	f8dc 7004 	ldr.w	r7, [ip, #4]
   290ae:	45b8      	cmp	r8, r7
   290b0:	d0e9      	beq.n	29086 <k_poll+0x32e>
   290b2:	f8d8 7000 	ldr.w	r7, [r8]
   290b6:	b167      	cbz	r7, 290d2 <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290b8:	f1ba 0f00 	cmp.w	sl, #0
   290bc:	d0e5      	beq.n	2908a <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   290be:	f8dc 7004 	ldr.w	r7, [ip, #4]
   290c2:	45ba      	cmp	sl, r7
   290c4:	d002      	beq.n	290cc <k_poll+0x374>
   290c6:	f8d8 8000 	ldr.w	r8, [r8]
   290ca:	e7e0      	b.n	2908e <k_poll+0x336>
   290cc:	f04f 0800 	mov.w	r8, #0
   290d0:	e7dd      	b.n	2908e <k_poll+0x336>
   290d2:	f04f 0800 	mov.w	r8, #0
   290d6:	e7da      	b.n	2908e <k_poll+0x336>
	node->next = list;
   290d8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   290dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   290e0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   290e2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   290e6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   290e8:	f8cc 2004 	str.w	r2, [ip, #4]
   290ec:	e69e      	b.n	28e2c <k_poll+0xd4>
   290ee:	f04f 0320 	mov.w	r3, #32
   290f2:	f3ef 8511 	mrs	r5, BASEPRI
   290f6:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   290fa:	4b46      	ldr	r3, [pc, #280]	; (29214 <k_poll+0x4bc>)
   290fc:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   290fe:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   29100:	f013 0f20 	tst.w	r3, #32
   29104:	d047      	beq.n	29196 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   29106:	f023 0320 	bic.w	r3, r3, #32
   2910a:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2910c:	f1b9 0f00 	cmp.w	r9, #0
   29110:	d049      	beq.n	291a6 <k_poll+0x44e>
   29112:	4649      	mov	r1, r9
   29114:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   29116:	a801      	add	r0, sp, #4
   29118:	9001      	str	r0, [sp, #4]
   2911a:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   2911c:	f000 fab4 	bl	29688 <_pend_current_thread>
	_update_time_slice_before_swap();
   29120:	f000 fb30 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   29124:	4628      	mov	r0, r5
   29126:	f7fe fe73 	bl	27e10 <__swap>
   2912a:	f04f 0320 	mov.w	r3, #32
   2912e:	f3ef 8e11 	mrs	lr, BASEPRI
   29132:	f383 8811 	msr	BASEPRI, r3
   29136:	4675      	mov	r5, lr
   29138:	e049      	b.n	291ce <k_poll+0x476>
	node->prev->next = node->next;
   2913a:	6853      	ldr	r3, [r2, #4]
   2913c:	5847      	ldr	r7, [r0, r1]
   2913e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   29140:	5843      	ldr	r3, [r0, r1]
   29142:	6852      	ldr	r2, [r2, #4]
   29144:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29146:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   2914a:	f04f 0320 	mov.w	r3, #32
   2914e:	f3ef 8611 	mrs	r6, BASEPRI
   29152:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   29156:	3c01      	subs	r4, #1
   29158:	2c00      	cmp	r4, #0
   2915a:	db1e      	blt.n	2919a <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   2915c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   29160:	0099      	lsls	r1, r3, #2
   29162:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   29164:	2300      	movs	r3, #0
   29166:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   29168:	7b53      	ldrb	r3, [r2, #13]
   2916a:	f003 030f 	and.w	r3, r3, #15
   2916e:	2b02      	cmp	r3, #2
   29170:	d0e3      	beq.n	2913a <k_poll+0x3e2>
   29172:	2b04      	cmp	r3, #4
   29174:	d008      	beq.n	29188 <k_poll+0x430>
   29176:	2b01      	cmp	r3, #1
   29178:	d1e5      	bne.n	29146 <k_poll+0x3ee>
	node->prev->next = node->next;
   2917a:	6853      	ldr	r3, [r2, #4]
   2917c:	5847      	ldr	r7, [r0, r1]
   2917e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   29180:	5843      	ldr	r3, [r0, r1]
   29182:	6852      	ldr	r2, [r2, #4]
   29184:	605a      	str	r2, [r3, #4]
   29186:	e7de      	b.n	29146 <k_poll+0x3ee>
	node->prev->next = node->next;
   29188:	6853      	ldr	r3, [r2, #4]
   2918a:	5847      	ldr	r7, [r0, r1]
   2918c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2918e:	5843      	ldr	r3, [r0, r1]
   29190:	6852      	ldr	r2, [r2, #4]
   29192:	605a      	str	r2, [r3, #4]
   29194:	e7d7      	b.n	29146 <k_poll+0x3ee>
   29196:	462e      	mov	r6, r5
   29198:	e7de      	b.n	29158 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2919a:	f385 8811 	msr	BASEPRI, r5
		return 0;
   2919e:	2000      	movs	r0, #0
}
   291a0:	b005      	add	sp, #20
   291a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291a6:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   291aa:	f06f 000a 	mvn.w	r0, #10
   291ae:	e7f7      	b.n	291a0 <k_poll+0x448>
	node->prev->next = node->next;
   291b0:	6853      	ldr	r3, [r2, #4]
   291b2:	5877      	ldr	r7, [r6, r1]
   291b4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   291b6:	5873      	ldr	r3, [r6, r1]
   291b8:	6852      	ldr	r2, [r2, #4]
   291ba:	605a      	str	r2, [r3, #4]
   291bc:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   291c0:	f04f 0320 	mov.w	r3, #32
   291c4:	f3ef 8511 	mrs	r5, BASEPRI
   291c8:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   291cc:	3c01      	subs	r4, #1
   291ce:	2c00      	cmp	r4, #0
   291d0:	db1c      	blt.n	2920c <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   291d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   291d6:	0099      	lsls	r1, r3, #2
   291d8:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   291da:	2300      	movs	r3, #0
   291dc:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   291de:	7b53      	ldrb	r3, [r2, #13]
   291e0:	f003 030f 	and.w	r3, r3, #15
   291e4:	2b02      	cmp	r3, #2
   291e6:	d0e3      	beq.n	291b0 <k_poll+0x458>
   291e8:	2b04      	cmp	r3, #4
   291ea:	d008      	beq.n	291fe <k_poll+0x4a6>
   291ec:	2b01      	cmp	r3, #1
   291ee:	d1e5      	bne.n	291bc <k_poll+0x464>
	node->prev->next = node->next;
   291f0:	6853      	ldr	r3, [r2, #4]
   291f2:	5877      	ldr	r7, [r6, r1]
   291f4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   291f6:	5873      	ldr	r3, [r6, r1]
   291f8:	6852      	ldr	r2, [r2, #4]
   291fa:	605a      	str	r2, [r3, #4]
   291fc:	e7de      	b.n	291bc <k_poll+0x464>
	node->prev->next = node->next;
   291fe:	6853      	ldr	r3, [r2, #4]
   29200:	5877      	ldr	r7, [r6, r1]
   29202:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   29204:	5873      	ldr	r3, [r6, r1]
   29206:	6852      	ldr	r2, [r2, #4]
   29208:	605a      	str	r2, [r3, #4]
   2920a:	e7d7      	b.n	291bc <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2920c:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   29210:	e7c6      	b.n	291a0 <k_poll+0x448>
   29212:	bf00      	nop
   29214:	20002cd8 	.word	0x20002cd8

00029218 <_handle_obj_poll_events>:
	return list->head == list;
   29218:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   2921a:	4298      	cmp	r0, r3
   2921c:	d010      	beq.n	29240 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   2921e:	685a      	ldr	r2, [r3, #4]
   29220:	6818      	ldr	r0, [r3, #0]
   29222:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   29224:	681a      	ldr	r2, [r3, #0]
   29226:	6858      	ldr	r0, [r3, #4]
   29228:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   2922a:	b15b      	cbz	r3, 29244 <_handle_obj_poll_events+0x2c>
{
   2922c:	b500      	push	{lr}
   2922e:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   29230:	aa01      	add	r2, sp, #4
   29232:	4618      	mov	r0, r3
   29234:	f7ff fcfe 	bl	28c34 <_signal_poll_event>
	return must_reschedule;
   29238:	9801      	ldr	r0, [sp, #4]
}
   2923a:	b003      	add	sp, #12
   2923c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   29240:	2300      	movs	r3, #0
   29242:	e7f2      	b.n	2922a <_handle_obj_poll_events+0x12>
		return 0;
   29244:	2000      	movs	r0, #0
   29246:	4770      	bx	lr

00029248 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   29248:	b530      	push	{r4, r5, lr}
   2924a:	b083      	sub	sp, #12
	__asm__ volatile(
   2924c:	f04f 0320 	mov.w	r3, #32
   29250:	f3ef 8511 	mrs	r5, BASEPRI
   29254:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   29258:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   2925a:	2301      	movs	r3, #1
   2925c:	6083      	str	r3, [r0, #8]
	return list->head == list;
   2925e:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   29260:	4298      	cmp	r0, r3
   29262:	d013      	beq.n	2928c <k_poll_signal+0x44>
	node->prev->next = node->next;
   29264:	685a      	ldr	r2, [r3, #4]
   29266:	6819      	ldr	r1, [r3, #0]
   29268:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2926a:	681a      	ldr	r2, [r3, #0]
   2926c:	6859      	ldr	r1, [r3, #4]
   2926e:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   29270:	b173      	cbz	r3, 29290 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   29272:	aa01      	add	r2, sp, #4
   29274:	2101      	movs	r1, #1
   29276:	4618      	mov	r0, r3
   29278:	f7ff fcdc 	bl	28c34 <_signal_poll_event>
   2927c:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   2927e:	9b01      	ldr	r3, [sp, #4]
   29280:	b953      	cbnz	r3, 29298 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29282:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   29286:	4620      	mov	r0, r4
   29288:	b003      	add	sp, #12
   2928a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2928c:	2300      	movs	r3, #0
   2928e:	e7ef      	b.n	29270 <k_poll_signal+0x28>
   29290:	f385 8811 	msr	BASEPRI, r5
		return 0;
   29294:	2400      	movs	r4, #0
   29296:	e7f6      	b.n	29286 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   29298:	f000 fa74 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   2929c:	4628      	mov	r0, r5
   2929e:	f7fe fdb7 	bl	27e10 <__swap>
   292a2:	e7f0      	b.n	29286 <k_poll_signal+0x3e>

000292a4 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   292a4:	b530      	push	{r4, r5, lr}
   292a6:	b087      	sub	sp, #28
   292a8:	4604      	mov	r4, r0
   292aa:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   292ac:	4603      	mov	r3, r0
   292ae:	2200      	movs	r2, #0
   292b0:	2104      	movs	r1, #4
   292b2:	eb0d 0001 	add.w	r0, sp, r1
   292b6:	f7ff fd3b 	bl	28d30 <k_poll_event_init>
   292ba:	e005      	b.n	292c8 <k_queue_poll+0x24>
   292bc:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   292c0:	b9f8      	cbnz	r0, 29302 <k_queue_poll+0x5e>
   292c2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   292c6:	d11c      	bne.n	29302 <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   292c8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   292cc:	f36f 1307 	bfc	r3, #4, #4
   292d0:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   292d4:	462a      	mov	r2, r5
   292d6:	2101      	movs	r1, #1
   292d8:	a801      	add	r0, sp, #4
   292da:	f7ff fd3d 	bl	28d58 <k_poll>
		if (err) {
   292de:	b978      	cbnz	r0, 29300 <k_queue_poll+0x5c>
	__asm__ volatile(
   292e0:	f04f 0220 	mov.w	r2, #32
   292e4:	f3ef 8311 	mrs	r3, BASEPRI
   292e8:	f382 8811 	msr	BASEPRI, r2
   292ec:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   292ee:	2800      	cmp	r0, #0
   292f0:	d0e4      	beq.n	292bc <k_queue_poll+0x18>
	list->head = node->next;
   292f2:	6802      	ldr	r2, [r0, #0]
   292f4:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   292f6:	6861      	ldr	r1, [r4, #4]
   292f8:	4288      	cmp	r0, r1
   292fa:	d1df      	bne.n	292bc <k_queue_poll+0x18>
		list->tail = list->head;
   292fc:	6062      	str	r2, [r4, #4]
   292fe:	e7dd      	b.n	292bc <k_queue_poll+0x18>
			return NULL;
   29300:	2000      	movs	r0, #0

	return val;
}
   29302:	b007      	add	sp, #28
   29304:	bd30      	pop	{r4, r5, pc}

00029306 <k_queue_init>:
	list->head = NULL;
   29306:	2300      	movs	r3, #0
   29308:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2930a:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   2930c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   29310:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   29312:	60c3      	str	r3, [r0, #12]
   29314:	4770      	bx	lr

00029316 <k_queue_insert>:
{
   29316:	b510      	push	{r4, lr}
   29318:	f04f 0320 	mov.w	r3, #32
   2931c:	f3ef 8411 	mrs	r4, BASEPRI
   29320:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   29324:	b159      	cbz	r1, 2933e <k_queue_insert+0x28>
	} else if (!prev->next) {
   29326:	680b      	ldr	r3, [r1, #0]
   29328:	b18b      	cbz	r3, 2934e <k_queue_insert+0x38>
		node->next = prev->next;
   2932a:	6013      	str	r3, [r2, #0]
		prev->next = node;
   2932c:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2932e:	2104      	movs	r1, #4
   29330:	3008      	adds	r0, #8
   29332:	f7ff ff71 	bl	29218 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   29336:	b998      	cbnz	r0, 29360 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29338:	f384 8811 	msr	BASEPRI, r4
   2933c:	bd10      	pop	{r4, pc}
	node->next = list->head;
   2933e:	6803      	ldr	r3, [r0, #0]
   29340:	6013      	str	r3, [r2, #0]
	list->head = node;
   29342:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   29344:	6843      	ldr	r3, [r0, #4]
   29346:	2b00      	cmp	r3, #0
   29348:	d1f1      	bne.n	2932e <k_queue_insert+0x18>
		list->tail = list->head;
   2934a:	6042      	str	r2, [r0, #4]
   2934c:	e7ef      	b.n	2932e <k_queue_insert+0x18>
	node->next = NULL;
   2934e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   29350:	6843      	ldr	r3, [r0, #4]
   29352:	b113      	cbz	r3, 2935a <k_queue_insert+0x44>
		list->tail->next = node;
   29354:	601a      	str	r2, [r3, #0]
		list->tail = node;
   29356:	6042      	str	r2, [r0, #4]
   29358:	e7e9      	b.n	2932e <k_queue_insert+0x18>
		list->tail = node;
   2935a:	6042      	str	r2, [r0, #4]
		list->head = node;
   2935c:	6002      	str	r2, [r0, #0]
   2935e:	e7e6      	b.n	2932e <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   29360:	f000 fa10 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   29364:	4620      	mov	r0, r4
   29366:	f7fe fd53 	bl	27e10 <__swap>
   2936a:	bd10      	pop	{r4, pc}

0002936c <k_queue_append>:
{
   2936c:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   2936e:	460a      	mov	r2, r1
   29370:	6841      	ldr	r1, [r0, #4]
   29372:	f7ff ffd0 	bl	29316 <k_queue_insert>
   29376:	bd08      	pop	{r3, pc}

00029378 <k_queue_prepend>:
{
   29378:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   2937a:	460a      	mov	r2, r1
   2937c:	2100      	movs	r1, #0
   2937e:	f7ff ffca 	bl	29316 <k_queue_insert>
   29382:	bd08      	pop	{r3, pc}

00029384 <k_queue_append_list>:
{
   29384:	b510      	push	{r4, lr}
	__asm__ volatile(
   29386:	f04f 0320 	mov.w	r3, #32
   2938a:	f3ef 8411 	mrs	r4, BASEPRI
   2938e:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   29392:	6843      	ldr	r3, [r0, #4]
   29394:	b14b      	cbz	r3, 293aa <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   29396:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   29398:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2939a:	2104      	movs	r1, #4
   2939c:	3008      	adds	r0, #8
   2939e:	f7ff ff3b 	bl	29218 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   293a2:	b928      	cbnz	r0, 293b0 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293a4:	f384 8811 	msr	BASEPRI, r4
   293a8:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   293aa:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   293ac:	6042      	str	r2, [r0, #4]
   293ae:	e7f4      	b.n	2939a <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   293b0:	f000 f9e8 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   293b4:	4620      	mov	r0, r4
   293b6:	f7fe fd2b 	bl	27e10 <__swap>
   293ba:	bd10      	pop	{r4, pc}

000293bc <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   293bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   293be:	f04f 0320 	mov.w	r3, #32
   293c2:	f3ef 8211 	mrs	r2, BASEPRI
   293c6:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   293ca:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   293cc:	b153      	cbz	r3, 293e4 <k_queue_get+0x28>
	list->head = node->next;
   293ce:	6819      	ldr	r1, [r3, #0]
   293d0:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   293d2:	6844      	ldr	r4, [r0, #4]
   293d4:	42a3      	cmp	r3, r4
   293d6:	d003      	beq.n	293e0 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293d8:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   293dc:	4618      	mov	r0, r3
   293de:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   293e0:	6041      	str	r1, [r0, #4]
   293e2:	e7f9      	b.n	293d8 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   293e4:	b121      	cbz	r1, 293f0 <k_queue_get+0x34>
   293e6:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   293ea:	f7ff ff5b 	bl	292a4 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   293ee:	bd10      	pop	{r4, pc}
   293f0:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   293f4:	2000      	movs	r0, #0
   293f6:	bd10      	pop	{r4, pc}

000293f8 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   293f8:	3010      	adds	r0, #16
   293fa:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   293fc:	f000 001f 	and.w	r0, r0, #31
   29400:	2201      	movs	r2, #1
   29402:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   29406:	1d9a      	adds	r2, r3, #6
   29408:	4b03      	ldr	r3, [pc, #12]	; (29418 <_set_ready_q_prio_bit+0x20>)
   2940a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2940e:	685a      	ldr	r2, [r3, #4]
   29410:	4302      	orrs	r2, r0
   29412:	605a      	str	r2, [r3, #4]
   29414:	4770      	bx	lr
   29416:	bf00      	nop
   29418:	20002cd8 	.word	0x20002cd8

0002941c <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   2941c:	3010      	adds	r0, #16
   2941e:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   29420:	f000 001f 	and.w	r0, r0, #31
   29424:	2201      	movs	r2, #1
   29426:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   2942a:	1d9a      	adds	r2, r3, #6
   2942c:	4b03      	ldr	r3, [pc, #12]	; (2943c <_clear_ready_q_prio_bit+0x20>)
   2942e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   29432:	685a      	ldr	r2, [r3, #4]
   29434:	ea22 0200 	bic.w	r2, r2, r0
   29438:	605a      	str	r2, [r3, #4]
   2943a:	4770      	bx	lr
   2943c:	20002cd8 	.word	0x20002cd8

00029440 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   29440:	4b06      	ldr	r3, [pc, #24]	; (2945c <_get_ready_q_head+0x1c>)
   29442:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   29444:	fa92 f3a2 	rbit	r3, r2
   29448:	fab3 f383 	clz	r3, r3
   2944c:	b90a      	cbnz	r2, 29452 <_get_ready_q_head+0x12>
   2944e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   29452:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   29454:	4a01      	ldr	r2, [pc, #4]	; (2945c <_get_ready_q_head+0x1c>)
   29456:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   2945a:	4770      	bx	lr
   2945c:	20002cd8 	.word	0x20002cd8

00029460 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   29460:	b570      	push	{r4, r5, r6, lr}
   29462:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   29464:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   29468:	4e0c      	ldr	r6, [pc, #48]	; (2949c <_add_thread_to_ready_q+0x3c>)
   2946a:	f100 0514 	add.w	r5, r0, #20
   2946e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   29472:	f7ff ffc1 	bl	293f8 <_set_ready_q_prio_bit>
	node->next = list;
   29476:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   29478:	686b      	ldr	r3, [r5, #4]
   2947a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2947c:	686b      	ldr	r3, [r5, #4]
   2947e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29480:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   29482:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   29484:	f994 200a 	ldrsb.w	r2, [r4, #10]
   29488:	f993 100a 	ldrsb.w	r1, [r3, #10]
   2948c:	4291      	cmp	r1, r2
   2948e:	dc02      	bgt.n	29496 <_add_thread_to_ready_q+0x36>
   29490:	4a02      	ldr	r2, [pc, #8]	; (2949c <_add_thread_to_ready_q+0x3c>)
   29492:	6193      	str	r3, [r2, #24]
   29494:	bd70      	pop	{r4, r5, r6, pc}
   29496:	4623      	mov	r3, r4
   29498:	e7fa      	b.n	29490 <_add_thread_to_ready_q+0x30>
   2949a:	bf00      	nop
   2949c:	20002cd8 	.word	0x20002cd8

000294a0 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   294a0:	b538      	push	{r3, r4, r5, lr}
   294a2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   294a4:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   294a8:	4a0e      	ldr	r2, [pc, #56]	; (294e4 <_remove_thread_from_ready_q+0x44>)
   294aa:	3314      	adds	r3, #20
   294ac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   294b0:	6840      	ldr	r0, [r0, #4]
   294b2:	6825      	ldr	r5, [r4, #0]
   294b4:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   294b6:	6820      	ldr	r0, [r4, #0]
   294b8:	6865      	ldr	r5, [r4, #4]
   294ba:	6045      	str	r5, [r0, #4]
	return list->head == list;
   294bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   294c0:	4299      	cmp	r1, r3
   294c2:	d006      	beq.n	294d2 <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   294c4:	4b07      	ldr	r3, [pc, #28]	; (294e4 <_remove_thread_from_ready_q+0x44>)
   294c6:	6998      	ldr	r0, [r3, #24]
   294c8:	4284      	cmp	r4, r0
   294ca:	d007      	beq.n	294dc <_remove_thread_from_ready_q+0x3c>
   294cc:	4b05      	ldr	r3, [pc, #20]	; (294e4 <_remove_thread_from_ready_q+0x44>)
   294ce:	6198      	str	r0, [r3, #24]
   294d0:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   294d2:	f994 000a 	ldrsb.w	r0, [r4, #10]
   294d6:	f7ff ffa1 	bl	2941c <_clear_ready_q_prio_bit>
   294da:	e7f3      	b.n	294c4 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   294dc:	f7ff ffb0 	bl	29440 <_get_ready_q_head>
   294e0:	e7f4      	b.n	294cc <_remove_thread_from_ready_q+0x2c>
   294e2:	bf00      	nop
   294e4:	20002cd8 	.word	0x20002cd8

000294e8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   294e8:	b538      	push	{r3, r4, r5, lr}
   294ea:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   294ec:	4299      	cmp	r1, r3
   294ee:	d115      	bne.n	2951c <_pend_thread+0x34>
   294f0:	2300      	movs	r3, #0
   294f2:	e013      	b.n	2951c <_pend_thread+0x34>
	if (!insert_point) {
   294f4:	b133      	cbz	r3, 29504 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   294f6:	685c      	ldr	r4, [r3, #4]
   294f8:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   294fa:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   294fc:	685c      	ldr	r4, [r3, #4]
   294fe:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   29500:	6058      	str	r0, [r3, #4]
   29502:	e02b      	b.n	2955c <_pend_thread+0x74>
	node->next = list;
   29504:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   29506:	684b      	ldr	r3, [r1, #4]
   29508:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2950a:	684b      	ldr	r3, [r1, #4]
   2950c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2950e:	6048      	str	r0, [r1, #4]
   29510:	e024      	b.n	2955c <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29512:	461d      	mov	r5, r3
   29514:	e010      	b.n	29538 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   29516:	2500      	movs	r5, #0
   29518:	e00e      	b.n	29538 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2951a:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2951c:	b1c3      	cbz	r3, 29550 <_pend_thread+0x68>
   2951e:	f990 500a 	ldrsb.w	r5, [r0, #10]
   29522:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   29526:	42a5      	cmp	r5, r4
   29528:	dbe4      	blt.n	294f4 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2952a:	461c      	mov	r4, r3
   2952c:	2b00      	cmp	r3, #0
   2952e:	d0f0      	beq.n	29512 <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29530:	684d      	ldr	r5, [r1, #4]
   29532:	42ab      	cmp	r3, r5
   29534:	d0ef      	beq.n	29516 <_pend_thread+0x2e>
   29536:	681d      	ldr	r5, [r3, #0]
   29538:	b145      	cbz	r5, 2954c <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2953a:	2c00      	cmp	r4, #0
   2953c:	d0ed      	beq.n	2951a <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   2953e:	684d      	ldr	r5, [r1, #4]
   29540:	42ac      	cmp	r4, r5
   29542:	d001      	beq.n	29548 <_pend_thread+0x60>
   29544:	681b      	ldr	r3, [r3, #0]
   29546:	e7e9      	b.n	2951c <_pend_thread+0x34>
   29548:	2300      	movs	r3, #0
   2954a:	e7e7      	b.n	2951c <_pend_thread+0x34>
   2954c:	2300      	movs	r3, #0
   2954e:	e7e5      	b.n	2951c <_pend_thread+0x34>
	node->next = list;
   29550:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   29552:	684b      	ldr	r3, [r1, #4]
   29554:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   29556:	684b      	ldr	r3, [r1, #4]
   29558:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2955a:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   2955c:	7a44      	ldrb	r4, [r0, #9]
   2955e:	f044 0402 	orr.w	r4, r4, #2
   29562:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   29564:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29568:	f000 8089 	beq.w	2967e <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2956c:	f102 0309 	add.w	r3, r2, #9
   29570:	4a43      	ldr	r2, [pc, #268]	; (29680 <_pend_thread+0x198>)
   29572:	fba2 2303 	umull	r2, r3, r2, r3
   29576:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   29578:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2957a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2957e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29580:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29582:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   29584:	b133      	cbz	r3, 29594 <_pend_thread+0xac>
	return list->head == list;
   29586:	4a3f      	ldr	r2, [pc, #252]	; (29684 <_pend_thread+0x19c>)
   29588:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2958c:	4293      	cmp	r3, r2
   2958e:	d151      	bne.n	29634 <_pend_thread+0x14c>
   29590:	2300      	movs	r3, #0
   29592:	e04f      	b.n	29634 <_pend_thread+0x14c>
	__asm__ volatile(
   29594:	f04f 0320 	mov.w	r3, #32
   29598:	f3ef 8511 	mrs	r5, BASEPRI
   2959c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   295a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   295a4:	6123      	str	r3, [r4, #16]
	if (thread) {
   295a6:	b320      	cbz	r0, 295f2 <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   295a8:	68e3      	ldr	r3, [r4, #12]
   295aa:	b15b      	cbz	r3, 295c4 <_pend_thread+0xdc>
	node->prev->next = node->next;
   295ac:	6843      	ldr	r3, [r0, #4]
   295ae:	6802      	ldr	r2, [r0, #0]
   295b0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   295b2:	6803      	ldr	r3, [r0, #0]
   295b4:	6842      	ldr	r2, [r0, #4]
   295b6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   295b8:	7a43      	ldrb	r3, [r0, #9]
   295ba:	f023 0302 	bic.w	r3, r3, #2
   295be:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   295c0:	2300      	movs	r3, #0
   295c2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   295c4:	7a43      	ldrb	r3, [r0, #9]
   295c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   295ca:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   295cc:	f013 0f1b 	tst.w	r3, #27
   295d0:	d107      	bne.n	295e2 <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   295d2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   295d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   295d8:	d001      	beq.n	295de <_pend_thread+0xf6>
   295da:	2300      	movs	r3, #0
   295dc:	e002      	b.n	295e4 <_pend_thread+0xfc>
   295de:	2301      	movs	r3, #1
   295e0:	e000      	b.n	295e4 <_pend_thread+0xfc>
   295e2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   295e4:	b913      	cbnz	r3, 295ec <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   295e6:	f385 8811 	msr	BASEPRI, r5
   295ea:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   295ec:	f7ff ff38 	bl	29460 <_add_thread_to_ready_q>
   295f0:	e7f9      	b.n	295e6 <_pend_thread+0xfe>
   295f2:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   295f6:	6963      	ldr	r3, [r4, #20]
   295f8:	2b00      	cmp	r3, #0
   295fa:	d040      	beq.n	2967e <_pend_thread+0x196>
			timeout->func(timeout);
   295fc:	4620      	mov	r0, r4
   295fe:	4798      	blx	r3
   29600:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   29602:	1a8a      	subs	r2, r1, r2
   29604:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29606:	b133      	cbz	r3, 29616 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   29608:	685a      	ldr	r2, [r3, #4]
   2960a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2960c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2960e:	685a      	ldr	r2, [r3, #4]
   29610:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29612:	605c      	str	r4, [r3, #4]
   29614:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   29616:	4b1b      	ldr	r3, [pc, #108]	; (29684 <_pend_thread+0x19c>)
   29618:	f103 020c 	add.w	r2, r3, #12
   2961c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2961e:	691a      	ldr	r2, [r3, #16]
   29620:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29622:	691a      	ldr	r2, [r3, #16]
   29624:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29626:	611c      	str	r4, [r3, #16]
   29628:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2962a:	4619      	mov	r1, r3
   2962c:	e011      	b.n	29652 <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   2962e:	2100      	movs	r1, #0
   29630:	e00f      	b.n	29652 <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29632:	2300      	movs	r3, #0
   29634:	b1d3      	cbz	r3, 2966c <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29636:	6922      	ldr	r2, [r4, #16]
   29638:	6919      	ldr	r1, [r3, #16]
   2963a:	428a      	cmp	r2, r1
   2963c:	dde1      	ble.n	29602 <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   2963e:	1a52      	subs	r2, r2, r1
   29640:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29642:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29644:	2b00      	cmp	r3, #0
   29646:	d0f0      	beq.n	2962a <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   29648:	490e      	ldr	r1, [pc, #56]	; (29684 <_pend_thread+0x19c>)
   2964a:	6909      	ldr	r1, [r1, #16]
   2964c:	428b      	cmp	r3, r1
   2964e:	d0ee      	beq.n	2962e <_pend_thread+0x146>
   29650:	6819      	ldr	r1, [r3, #0]
   29652:	2900      	cmp	r1, #0
   29654:	d0ed      	beq.n	29632 <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29656:	b12a      	cbz	r2, 29664 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   29658:	490a      	ldr	r1, [pc, #40]	; (29684 <_pend_thread+0x19c>)
   2965a:	6909      	ldr	r1, [r1, #16]
   2965c:	428a      	cmp	r2, r1
   2965e:	d003      	beq.n	29668 <_pend_thread+0x180>
   29660:	681b      	ldr	r3, [r3, #0]
   29662:	e7e7      	b.n	29634 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29664:	2300      	movs	r3, #0
   29666:	e7e5      	b.n	29634 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   29668:	2300      	movs	r3, #0
   2966a:	e7e3      	b.n	29634 <_pend_thread+0x14c>
	node->next = list;
   2966c:	4b05      	ldr	r3, [pc, #20]	; (29684 <_pend_thread+0x19c>)
   2966e:	f103 020c 	add.w	r2, r3, #12
   29672:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29674:	691a      	ldr	r2, [r3, #16]
   29676:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29678:	691a      	ldr	r2, [r3, #16]
   2967a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2967c:	611c      	str	r4, [r3, #16]
   2967e:	bd38      	pop	{r3, r4, r5, pc}
   29680:	cccccccd 	.word	0xcccccccd
   29684:	20002cd8 	.word	0x20002cd8

00029688 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   29688:	b570      	push	{r4, r5, r6, lr}
   2968a:	4605      	mov	r5, r0
   2968c:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   2968e:	4c05      	ldr	r4, [pc, #20]	; (296a4 <_pend_current_thread+0x1c>)
   29690:	68a0      	ldr	r0, [r4, #8]
   29692:	f7ff ff05 	bl	294a0 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   29696:	4632      	mov	r2, r6
   29698:	4629      	mov	r1, r5
   2969a:	68a0      	ldr	r0, [r4, #8]
   2969c:	f7ff ff24 	bl	294e8 <_pend_thread>
   296a0:	bd70      	pop	{r4, r5, r6, pc}
   296a2:	bf00      	nop
   296a4:	20002cd8 	.word	0x20002cd8

000296a8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   296a8:	4b09      	ldr	r3, [pc, #36]	; (296d0 <__must_switch_threads+0x28>)
   296aa:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   296ac:	fa93 f0a3 	rbit	r0, r3
   296b0:	fab0 f080 	clz	r0, r0
   296b4:	b90b      	cbnz	r3, 296ba <__must_switch_threads+0x12>
   296b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   296ba:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   296bc:	4b04      	ldr	r3, [pc, #16]	; (296d0 <__must_switch_threads+0x28>)
   296be:	689b      	ldr	r3, [r3, #8]
   296c0:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   296c4:	4283      	cmp	r3, r0
   296c6:	bfd4      	ite	le
   296c8:	2000      	movle	r0, #0
   296ca:	2001      	movgt	r0, #1
   296cc:	4770      	bx	lr
   296ce:	bf00      	nop
   296d0:	20002cd8 	.word	0x20002cd8

000296d4 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   296d4:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   296d8:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   296dc:	3214      	adds	r2, #20
   296de:	4911      	ldr	r1, [pc, #68]	; (29724 <_move_thread_to_end_of_prio_q+0x50>)
   296e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   296e4:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   296e6:	4288      	cmp	r0, r1
   296e8:	d01a      	beq.n	29720 <_move_thread_to_end_of_prio_q+0x4c>
{
   296ea:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   296ec:	6841      	ldr	r1, [r0, #4]
   296ee:	6804      	ldr	r4, [r0, #0]
   296f0:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   296f2:	6801      	ldr	r1, [r0, #0]
   296f4:	6844      	ldr	r4, [r0, #4]
   296f6:	604c      	str	r4, [r1, #4]
	node->next = list;
   296f8:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   296fa:	4a0a      	ldr	r2, [pc, #40]	; (29724 <_move_thread_to_end_of_prio_q+0x50>)
   296fc:	3304      	adds	r3, #4
   296fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29702:	6859      	ldr	r1, [r3, #4]
   29704:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   29706:	6859      	ldr	r1, [r3, #4]
   29708:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2970a:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2970c:	6993      	ldr	r3, [r2, #24]
   2970e:	4298      	cmp	r0, r3
   29710:	d002      	beq.n	29718 <_move_thread_to_end_of_prio_q+0x44>
   29712:	4a04      	ldr	r2, [pc, #16]	; (29724 <_move_thread_to_end_of_prio_q+0x50>)
   29714:	6193      	str	r3, [r2, #24]
   29716:	bd10      	pop	{r4, pc}
   29718:	f7ff fe92 	bl	29440 <_get_ready_q_head>
   2971c:	4603      	mov	r3, r0
   2971e:	e7f8      	b.n	29712 <_move_thread_to_end_of_prio_q+0x3e>
   29720:	4770      	bx	lr
   29722:	bf00      	nop
   29724:	20002cd8 	.word	0x20002cd8

00029728 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   29728:	4b01      	ldr	r3, [pc, #4]	; (29730 <_impl_k_current_get+0x8>)
   2972a:	6898      	ldr	r0, [r3, #8]
   2972c:	4770      	bx	lr
   2972e:	bf00      	nop
   29730:	20002cd8 	.word	0x20002cd8

00029734 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   29734:	4b0f      	ldr	r3, [pc, #60]	; (29774 <_is_thread_time_slicing+0x40>)
   29736:	681b      	ldr	r3, [r3, #0]
   29738:	2b00      	cmp	r3, #0
   2973a:	dd14      	ble.n	29766 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   2973c:	4b0e      	ldr	r3, [pc, #56]	; (29778 <_is_thread_time_slicing+0x44>)
   2973e:	681b      	ldr	r3, [r3, #0]
   29740:	4298      	cmp	r0, r3
   29742:	d012      	beq.n	2976a <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   29744:	f990 300a 	ldrsb.w	r3, [r0, #10]
   29748:	4a0c      	ldr	r2, [pc, #48]	; (2977c <_is_thread_time_slicing+0x48>)
   2974a:	6812      	ldr	r2, [r2, #0]
   2974c:	4293      	cmp	r3, r2
   2974e:	db0e      	blt.n	2976e <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   29750:	4a0b      	ldr	r2, [pc, #44]	; (29780 <_is_thread_time_slicing+0x4c>)
   29752:	3314      	adds	r3, #20
   29754:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   29758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2975c:	685b      	ldr	r3, [r3, #4]
   2975e:	1ac0      	subs	r0, r0, r3
   29760:	bf18      	it	ne
   29762:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   29764:	4770      	bx	lr
		return 0;
   29766:	2000      	movs	r0, #0
   29768:	4770      	bx	lr
   2976a:	2000      	movs	r0, #0
   2976c:	4770      	bx	lr
   2976e:	2000      	movs	r0, #0
}
   29770:	4770      	bx	lr
   29772:	bf00      	nop
   29774:	20002df8 	.word	0x20002df8
   29778:	000333e8 	.word	0x000333e8
   2977c:	20002dfc 	.word	0x20002dfc
   29780:	20002cd8 	.word	0x20002cd8

00029784 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   29784:	2200      	movs	r2, #0
   29786:	4b01      	ldr	r3, [pc, #4]	; (2978c <_update_time_slice_before_swap+0x8>)
   29788:	601a      	str	r2, [r3, #0]
   2978a:	4770      	bx	lr
   2978c:	200030e4 	.word	0x200030e4

00029790 <_reschedule_threads>:
{
   29790:	b510      	push	{r4, lr}
   29792:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   29794:	4b0a      	ldr	r3, [pc, #40]	; (297c0 <_reschedule_threads+0x30>)
   29796:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29798:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2979a:	2b7f      	cmp	r3, #127	; 0x7f
   2979c:	d805      	bhi.n	297aa <_reschedule_threads+0x1a>
   2979e:	f7ff ff83 	bl	296a8 <__must_switch_threads>
   297a2:	4603      	mov	r3, r0
   297a4:	b110      	cbz	r0, 297ac <_reschedule_threads+0x1c>
   297a6:	2301      	movs	r3, #1
   297a8:	e000      	b.n	297ac <_reschedule_threads+0x1c>
   297aa:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   297ac:	b913      	cbnz	r3, 297b4 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   297ae:	f384 8811 	msr	BASEPRI, r4
   297b2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   297b4:	f7ff ffe6 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   297b8:	4620      	mov	r0, r4
   297ba:	f7fe fb29 	bl	27e10 <__swap>
   297be:	bd10      	pop	{r4, pc}
   297c0:	20002cd8 	.word	0x20002cd8

000297c4 <k_sched_unlock>:
{
   297c4:	b508      	push	{r3, lr}
	__asm__ volatile(
   297c6:	f04f 0320 	mov.w	r3, #32
   297ca:	f3ef 8011 	mrs	r0, BASEPRI
   297ce:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   297d2:	4b04      	ldr	r3, [pc, #16]	; (297e4 <k_sched_unlock+0x20>)
   297d4:	689a      	ldr	r2, [r3, #8]
   297d6:	7ad3      	ldrb	r3, [r2, #11]
   297d8:	3301      	adds	r3, #1
   297da:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   297dc:	f7ff ffd8 	bl	29790 <_reschedule_threads>
   297e0:	bd08      	pop	{r3, pc}
   297e2:	bf00      	nop
   297e4:	20002cd8 	.word	0x20002cd8

000297e8 <_impl_k_yield>:
{
   297e8:	b538      	push	{r3, r4, r5, lr}
   297ea:	f04f 0320 	mov.w	r3, #32
   297ee:	f3ef 8511 	mrs	r5, BASEPRI
   297f2:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   297f6:	4c08      	ldr	r4, [pc, #32]	; (29818 <_impl_k_yield+0x30>)
   297f8:	68a0      	ldr	r0, [r4, #8]
   297fa:	f7ff ff6b 	bl	296d4 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   297fe:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   29800:	69a3      	ldr	r3, [r4, #24]
   29802:	429a      	cmp	r2, r3
   29804:	d005      	beq.n	29812 <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   29806:	f7ff ffbd 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   2980a:	4628      	mov	r0, r5
   2980c:	f7fe fb00 	bl	27e10 <__swap>
   29810:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29812:	f385 8811 	msr	BASEPRI, r5
   29816:	bd38      	pop	{r3, r4, r5, pc}
   29818:	20002cd8 	.word	0x20002cd8

0002981c <_impl_k_sleep>:
{
   2981c:	b570      	push	{r4, r5, r6, lr}
   2981e:	b082      	sub	sp, #8
	if (duration == 0) {
   29820:	b308      	cbz	r0, 29866 <_impl_k_sleep+0x4a>
   29822:	4603      	mov	r3, r0
   29824:	3309      	adds	r3, #9
   29826:	4a4f      	ldr	r2, [pc, #316]	; (29964 <_impl_k_sleep+0x148>)
   29828:	fba2 2303 	umull	r2, r3, r2, r3
   2982c:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2982e:	3301      	adds	r3, #1
   29830:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   29832:	f04f 0320 	mov.w	r3, #32
   29836:	f3ef 8511 	mrs	r5, BASEPRI
   2983a:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   2983e:	4c4a      	ldr	r4, [pc, #296]	; (29968 <_impl_k_sleep+0x14c>)
   29840:	68a0      	ldr	r0, [r4, #8]
   29842:	f7ff fe2d 	bl	294a0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   29846:	68a0      	ldr	r0, [r4, #8]
   29848:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2984a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2984e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29850:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29852:	2200      	movs	r2, #0
   29854:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   29856:	b14b      	cbz	r3, 2986c <_impl_k_sleep+0x50>
	return list->head == list;
   29858:	4a43      	ldr	r2, [pc, #268]	; (29968 <_impl_k_sleep+0x14c>)
   2985a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2985e:	4293      	cmp	r3, r2
   29860:	d154      	bne.n	2990c <_impl_k_sleep+0xf0>
   29862:	2300      	movs	r3, #0
   29864:	e052      	b.n	2990c <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29866:	f7ff ffbf 	bl	297e8 <_impl_k_yield>
   2986a:	e079      	b.n	29960 <_impl_k_sleep+0x144>
   2986c:	f04f 0320 	mov.w	r3, #32
   29870:	f3ef 8611 	mrs	r6, BASEPRI
   29874:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2987c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2987e:	b320      	cbz	r0, 298ca <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   29880:	68e3      	ldr	r3, [r4, #12]
   29882:	b15b      	cbz	r3, 2989c <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   29884:	6843      	ldr	r3, [r0, #4]
   29886:	6802      	ldr	r2, [r0, #0]
   29888:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2988a:	6803      	ldr	r3, [r0, #0]
   2988c:	6842      	ldr	r2, [r0, #4]
   2988e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29890:	7a43      	ldrb	r3, [r0, #9]
   29892:	f023 0302 	bic.w	r3, r3, #2
   29896:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29898:	2300      	movs	r3, #0
   2989a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2989c:	7a43      	ldrb	r3, [r0, #9]
   2989e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   298a2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   298a4:	f013 0f1b 	tst.w	r3, #27
   298a8:	d107      	bne.n	298ba <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   298aa:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   298ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   298b0:	d001      	beq.n	298b6 <_impl_k_sleep+0x9a>
   298b2:	2300      	movs	r3, #0
   298b4:	e002      	b.n	298bc <_impl_k_sleep+0xa0>
   298b6:	2301      	movs	r3, #1
   298b8:	e000      	b.n	298bc <_impl_k_sleep+0xa0>
   298ba:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   298bc:	b913      	cbnz	r3, 298c4 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   298be:	f386 8811 	msr	BASEPRI, r6
   298c2:	e048      	b.n	29956 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   298c4:	f7ff fdcc 	bl	29460 <_add_thread_to_ready_q>
   298c8:	e7f9      	b.n	298be <_impl_k_sleep+0xa2>
   298ca:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   298ce:	6963      	ldr	r3, [r4, #20]
   298d0:	2b00      	cmp	r3, #0
   298d2:	d040      	beq.n	29956 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   298d4:	4620      	mov	r0, r4
   298d6:	4798      	blx	r3
   298d8:	e03d      	b.n	29956 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   298da:	1a8a      	subs	r2, r1, r2
   298dc:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   298de:	b133      	cbz	r3, 298ee <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   298e0:	685a      	ldr	r2, [r3, #4]
   298e2:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   298e4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   298e6:	685a      	ldr	r2, [r3, #4]
   298e8:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   298ea:	605c      	str	r4, [r3, #4]
   298ec:	e033      	b.n	29956 <_impl_k_sleep+0x13a>
	node->next = list;
   298ee:	4b1e      	ldr	r3, [pc, #120]	; (29968 <_impl_k_sleep+0x14c>)
   298f0:	f103 020c 	add.w	r2, r3, #12
   298f4:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   298f6:	691a      	ldr	r2, [r3, #16]
   298f8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   298fa:	691a      	ldr	r2, [r3, #16]
   298fc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   298fe:	611c      	str	r4, [r3, #16]
   29900:	e029      	b.n	29956 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29902:	4619      	mov	r1, r3
   29904:	e011      	b.n	2992a <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29906:	2100      	movs	r1, #0
   29908:	e00f      	b.n	2992a <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2990a:	2300      	movs	r3, #0
   2990c:	b1d3      	cbz	r3, 29944 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2990e:	6922      	ldr	r2, [r4, #16]
   29910:	6919      	ldr	r1, [r3, #16]
   29912:	428a      	cmp	r2, r1
   29914:	dde1      	ble.n	298da <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   29916:	1a52      	subs	r2, r2, r1
   29918:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2991a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2991c:	2b00      	cmp	r3, #0
   2991e:	d0f0      	beq.n	29902 <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   29920:	4911      	ldr	r1, [pc, #68]	; (29968 <_impl_k_sleep+0x14c>)
   29922:	6909      	ldr	r1, [r1, #16]
   29924:	428b      	cmp	r3, r1
   29926:	d0ee      	beq.n	29906 <_impl_k_sleep+0xea>
   29928:	6819      	ldr	r1, [r3, #0]
   2992a:	2900      	cmp	r1, #0
   2992c:	d0ed      	beq.n	2990a <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2992e:	b12a      	cbz	r2, 2993c <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   29930:	490d      	ldr	r1, [pc, #52]	; (29968 <_impl_k_sleep+0x14c>)
   29932:	6909      	ldr	r1, [r1, #16]
   29934:	428a      	cmp	r2, r1
   29936:	d003      	beq.n	29940 <_impl_k_sleep+0x124>
   29938:	681b      	ldr	r3, [r3, #0]
   2993a:	e7e7      	b.n	2990c <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2993c:	2300      	movs	r3, #0
   2993e:	e7e5      	b.n	2990c <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29940:	2300      	movs	r3, #0
   29942:	e7e3      	b.n	2990c <_impl_k_sleep+0xf0>
	node->next = list;
   29944:	4b08      	ldr	r3, [pc, #32]	; (29968 <_impl_k_sleep+0x14c>)
   29946:	f103 020c 	add.w	r2, r3, #12
   2994a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2994c:	691a      	ldr	r2, [r3, #16]
   2994e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29950:	691a      	ldr	r2, [r3, #16]
   29952:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29954:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   29956:	f7ff ff15 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   2995a:	4628      	mov	r0, r5
   2995c:	f7fe fa58 	bl	27e10 <__swap>
}
   29960:	b002      	add	sp, #8
   29962:	bd70      	pop	{r4, r5, r6, pc}
   29964:	cccccccd 	.word	0xcccccccd
   29968:	20002cd8 	.word	0x20002cd8

0002996c <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   2996c:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   2996e:	4b43      	ldr	r3, [pc, #268]	; (29a7c <do_sem_give+0x110>)
   29970:	681b      	ldr	r3, [r3, #0]
   29972:	2b00      	cmp	r3, #0
   29974:	d136      	bne.n	299e4 <do_sem_give+0x78>
	return list->head == list;
   29976:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29978:	42a0      	cmp	r0, r4
   2997a:	d044      	beq.n	29a06 <do_sem_give+0x9a>
	if (thread) {
   2997c:	b14c      	cbz	r4, 29992 <do_sem_give+0x26>
	node->prev->next = node->next;
   2997e:	6863      	ldr	r3, [r4, #4]
   29980:	6822      	ldr	r2, [r4, #0]
   29982:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29984:	6823      	ldr	r3, [r4, #0]
   29986:	6862      	ldr	r2, [r4, #4]
   29988:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2998a:	7a63      	ldrb	r3, [r4, #9]
   2998c:	f023 0302 	bic.w	r3, r3, #2
   29990:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   29992:	2c00      	cmp	r4, #0
   29994:	d039      	beq.n	29a0a <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29996:	6a22      	ldr	r2, [r4, #32]
   29998:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2999c:	d013      	beq.n	299c6 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2999e:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   299a2:	4937      	ldr	r1, [pc, #220]	; (29a80 <do_sem_give+0x114>)
   299a4:	6909      	ldr	r1, [r1, #16]
   299a6:	428b      	cmp	r3, r1
   299a8:	d004      	beq.n	299b4 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   299aa:	b103      	cbz	r3, 299ae <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   299ac:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   299ae:	6919      	ldr	r1, [r3, #16]
   299b0:	440a      	add	r2, r1
   299b2:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   299b4:	6963      	ldr	r3, [r4, #20]
   299b6:	6922      	ldr	r2, [r4, #16]
   299b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   299ba:	6923      	ldr	r3, [r4, #16]
   299bc:	6962      	ldr	r2, [r4, #20]
   299be:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   299c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   299c4:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   299c6:	7a63      	ldrb	r3, [r4, #9]
   299c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   299cc:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   299ce:	f013 0f1b 	tst.w	r3, #27
   299d2:	d128      	bne.n	29a26 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   299d4:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   299d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   299da:	d022      	beq.n	29a22 <do_sem_give+0xb6>
   299dc:	2300      	movs	r3, #0
   299de:	e023      	b.n	29a28 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299e0:	2400      	movs	r4, #0
   299e2:	e003      	b.n	299ec <do_sem_give+0x80>
   299e4:	4602      	mov	r2, r0
	return list->head == list;
   299e6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299e8:	42a0      	cmp	r0, r4
   299ea:	d0f9      	beq.n	299e0 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   299ec:	2c00      	cmp	r4, #0
   299ee:	d0c5      	beq.n	2997c <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   299f0:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   299f2:	f113 0f02 	cmn.w	r3, #2
   299f6:	d1c1      	bne.n	2997c <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   299f8:	6853      	ldr	r3, [r2, #4]
   299fa:	429c      	cmp	r4, r3
   299fc:	d001      	beq.n	29a02 <do_sem_give+0x96>
   299fe:	6824      	ldr	r4, [r4, #0]
   29a00:	e7f4      	b.n	299ec <do_sem_give+0x80>
   29a02:	2400      	movs	r4, #0
   29a04:	e7f2      	b.n	299ec <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a06:	2400      	movs	r4, #0
   29a08:	e7b8      	b.n	2997c <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   29a0a:	6883      	ldr	r3, [r0, #8]
   29a0c:	68c2      	ldr	r2, [r0, #12]
   29a0e:	4293      	cmp	r3, r2
   29a10:	bf18      	it	ne
   29a12:	3301      	addne	r3, #1
   29a14:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   29a16:	2102      	movs	r1, #2
   29a18:	3010      	adds	r0, #16
   29a1a:	f7ff fbfd 	bl	29218 <_handle_obj_poll_events>
   29a1e:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   29a20:	e01c      	b.n	29a5c <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   29a22:	2301      	movs	r3, #1
   29a24:	e000      	b.n	29a28 <do_sem_give+0xbc>
   29a26:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29a28:	b96b      	cbnz	r3, 29a46 <do_sem_give+0xda>
   29a2a:	2300      	movs	r3, #0
   29a2c:	6663      	str	r3, [r4, #100]	; 0x64
   29a2e:	f3ef 8305 	mrs	r3, IPSR
   29a32:	2b0d      	cmp	r3, #13
   29a34:	d80b      	bhi.n	29a4e <do_sem_give+0xe2>
   29a36:	b19b      	cbz	r3, 29a60 <do_sem_give+0xf4>
   29a38:	4b12      	ldr	r3, [pc, #72]	; (29a84 <do_sem_give+0x118>)
   29a3a:	685b      	ldr	r3, [r3, #4]
   29a3c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29a40:	d010      	beq.n	29a64 <do_sem_give+0xf8>
   29a42:	2300      	movs	r3, #0
   29a44:	e004      	b.n	29a50 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   29a46:	4620      	mov	r0, r4
   29a48:	f7ff fd0a 	bl	29460 <_add_thread_to_ready_q>
   29a4c:	e7ed      	b.n	29a2a <do_sem_give+0xbe>
   29a4e:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   29a50:	b98b      	cbnz	r3, 29a76 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   29a52:	4a0b      	ldr	r2, [pc, #44]	; (29a80 <do_sem_give+0x114>)
   29a54:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29a56:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29a58:	2a7f      	cmp	r2, #127	; 0x7f
   29a5a:	d905      	bls.n	29a68 <do_sem_give+0xfc>
}
   29a5c:	4618      	mov	r0, r3
   29a5e:	bd10      	pop	{r4, pc}
   29a60:	2300      	movs	r3, #0
   29a62:	e7f5      	b.n	29a50 <do_sem_give+0xe4>
   29a64:	2301      	movs	r3, #1
   29a66:	e7f3      	b.n	29a50 <do_sem_give+0xe4>
   29a68:	f7ff fe1e 	bl	296a8 <__must_switch_threads>
   29a6c:	4603      	mov	r3, r0
   29a6e:	2800      	cmp	r0, #0
   29a70:	d0f4      	beq.n	29a5c <do_sem_give+0xf0>
   29a72:	2301      	movs	r3, #1
   29a74:	e7f2      	b.n	29a5c <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   29a76:	2300      	movs	r3, #0
   29a78:	e7f0      	b.n	29a5c <do_sem_give+0xf0>
   29a7a:	bf00      	nop
   29a7c:	200030e0 	.word	0x200030e0
   29a80:	20002cd8 	.word	0x20002cd8
   29a84:	e000ed00 	.word	0xe000ed00

00029a88 <_impl_k_sem_init>:
	sem->count = initial_count;
   29a88:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   29a8a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   29a8c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   29a8e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   29a90:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   29a94:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   29a96:	6143      	str	r3, [r0, #20]
   29a98:	4770      	bx	lr

00029a9a <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   29a9a:	b510      	push	{r4, lr}
	__asm__ volatile(
   29a9c:	f04f 0320 	mov.w	r3, #32
   29aa0:	f3ef 8411 	mrs	r4, BASEPRI
   29aa4:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   29aa8:	f7ff ff60 	bl	2996c <do_sem_give>
   29aac:	b910      	cbnz	r0, 29ab4 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29aae:	f384 8811 	msr	BASEPRI, r4
   29ab2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   29ab4:	f7ff fe66 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   29ab8:	4620      	mov	r0, r4
   29aba:	f7fe f9a9 	bl	27e10 <__swap>
   29abe:	bd10      	pop	{r4, pc}

00029ac0 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   29ac0:	b510      	push	{r4, lr}
	__asm__ volatile(
   29ac2:	f04f 0320 	mov.w	r3, #32
   29ac6:	f3ef 8411 	mrs	r4, BASEPRI
   29aca:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   29ace:	6883      	ldr	r3, [r0, #8]
   29ad0:	b12b      	cbz	r3, 29ade <_impl_k_sem_take+0x1e>
		sem->count--;
   29ad2:	3b01      	subs	r3, #1
   29ad4:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ad6:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   29ada:	2000      	movs	r0, #0
   29adc:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   29ade:	b139      	cbz	r1, 29af0 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   29ae0:	f7ff fdd2 	bl	29688 <_pend_current_thread>
	_update_time_slice_before_swap();
   29ae4:	f7ff fe4e 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   29ae8:	4620      	mov	r0, r4
   29aea:	f7fe f991 	bl	27e10 <__swap>

	return _Swap(key);
}
   29aee:	bd10      	pop	{r4, pc}
   29af0:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   29af4:	f06f 000f 	mvn.w	r0, #15
   29af8:	bd10      	pop	{r4, pc}
	...

00029afc <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   29afc:	b538      	push	{r3, r4, r5, lr}
   29afe:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   29b00:	4b0f      	ldr	r3, [pc, #60]	; (29b40 <handle_time_slicing+0x44>)
   29b02:	6898      	ldr	r0, [r3, #8]
   29b04:	f7ff fe16 	bl	29734 <_is_thread_time_slicing>
   29b08:	b150      	cbz	r0, 29b20 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   29b0a:	00a2      	lsls	r2, r4, #2
   29b0c:	1912      	adds	r2, r2, r4
   29b0e:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   29b10:	490c      	ldr	r1, [pc, #48]	; (29b44 <handle_time_slicing+0x48>)
   29b12:	680b      	ldr	r3, [r1, #0]
   29b14:	441a      	add	r2, r3
   29b16:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   29b18:	4b0b      	ldr	r3, [pc, #44]	; (29b48 <handle_time_slicing+0x4c>)
   29b1a:	681b      	ldr	r3, [r3, #0]
   29b1c:	429a      	cmp	r2, r3
   29b1e:	da00      	bge.n	29b22 <handle_time_slicing+0x26>
   29b20:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   29b22:	2200      	movs	r2, #0
   29b24:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   29b26:	f04f 0320 	mov.w	r3, #32
   29b2a:	f3ef 8411 	mrs	r4, BASEPRI
   29b2e:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   29b32:	4b03      	ldr	r3, [pc, #12]	; (29b40 <handle_time_slicing+0x44>)
   29b34:	6898      	ldr	r0, [r3, #8]
   29b36:	f7ff fdcd 	bl	296d4 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b3a:	f384 8811 	msr	BASEPRI, r4
   29b3e:	e7ef      	b.n	29b20 <handle_time_slicing+0x24>
   29b40:	20002cd8 	.word	0x20002cd8
   29b44:	200030e4 	.word	0x200030e4
   29b48:	20002df8 	.word	0x20002df8

00029b4c <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   29b4c:	4b01      	ldr	r3, [pc, #4]	; (29b54 <_tick_get_32+0x8>)
   29b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   29b52:	4770      	bx	lr
   29b54:	200030e8 	.word	0x200030e8

00029b58 <_impl_k_uptime_get_32>:
{
   29b58:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   29b5a:	f7ff fff7 	bl	29b4c <_tick_get_32>
   29b5e:	0082      	lsls	r2, r0, #2
   29b60:	1810      	adds	r0, r2, r0
   29b62:	1800      	adds	r0, r0, r0
}
   29b64:	bd38      	pop	{r3, r4, r5, pc}
	...

00029b68 <_tick_get>:
	__asm__ volatile(
   29b68:	f04f 0220 	mov.w	r2, #32
   29b6c:	f3ef 8311 	mrs	r3, BASEPRI
   29b70:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   29b74:	4a02      	ldr	r2, [pc, #8]	; (29b80 <_tick_get+0x18>)
   29b76:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b7a:	f383 8811 	msr	BASEPRI, r3
}
   29b7e:	4770      	bx	lr
   29b80:	200030e8 	.word	0x200030e8

00029b84 <_impl_k_uptime_get>:
{
   29b84:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   29b86:	f7ff ffef 	bl	29b68 <_tick_get>
   29b8a:	008c      	lsls	r4, r1, #2
   29b8c:	0082      	lsls	r2, r0, #2
   29b8e:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   29b92:	1880      	adds	r0, r0, r2
   29b94:	4159      	adcs	r1, r3
   29b96:	1800      	adds	r0, r0, r0
   29b98:	4149      	adcs	r1, r1
}
   29b9a:	bd10      	pop	{r4, pc}

00029b9c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   29b9c:	b570      	push	{r4, r5, r6, lr}
   29b9e:	b082      	sub	sp, #8
   29ba0:	4605      	mov	r5, r0
	__asm__ volatile(
   29ba2:	f04f 0320 	mov.w	r3, #32
   29ba6:	f3ef 8011 	mrs	r0, BASEPRI
   29baa:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   29bae:	496a      	ldr	r1, [pc, #424]	; (29d58 <_nano_sys_clock_tick_announce+0x1bc>)
   29bb0:	e9d1 2300 	ldrd	r2, r3, [r1]
   29bb4:	1952      	adds	r2, r2, r5
   29bb6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   29bba:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29bbe:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   29bc2:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   29bc6:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   29bca:	f04f 0320 	mov.w	r3, #32
   29bce:	f3ef 8111 	mrs	r1, BASEPRI
   29bd2:	f383 8811 	msr	BASEPRI, r3
   29bd6:	4608      	mov	r0, r1
	return list->head == list;
   29bd8:	4b60      	ldr	r3, [pc, #384]	; (29d5c <_nano_sys_clock_tick_announce+0x1c0>)
   29bda:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bde:	429a      	cmp	r2, r3
   29be0:	d02b      	beq.n	29c3a <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   29be2:	b362      	cbz	r2, 29c3e <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   29be4:	6913      	ldr	r3, [r2, #16]
   29be6:	1b5b      	subs	r3, r3, r5
   29be8:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   29bea:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   29bec:	2101      	movs	r1, #1
   29bee:	4a5c      	ldr	r2, [pc, #368]	; (29d60 <_nano_sys_clock_tick_announce+0x1c4>)
   29bf0:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   29bf2:	b33b      	cbz	r3, 29c44 <_nano_sys_clock_tick_announce+0xa8>
   29bf4:	691a      	ldr	r2, [r3, #16]
   29bf6:	bb2a      	cbnz	r2, 29c44 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   29bf8:	685a      	ldr	r2, [r3, #4]
   29bfa:	6819      	ldr	r1, [r3, #0]
   29bfc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29bfe:	681a      	ldr	r2, [r3, #0]
   29c00:	6859      	ldr	r1, [r3, #4]
   29c02:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   29c04:	aa02      	add	r2, sp, #8
   29c06:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   29c0a:	6019      	str	r1, [r3, #0]
	node->prev = list;
   29c0c:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   29c0e:	9a00      	ldr	r2, [sp, #0]
   29c10:	6053      	str	r3, [r2, #4]
	list->head = node;
   29c12:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   29c14:	f06f 0201 	mvn.w	r2, #1
   29c18:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c1a:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   29c1e:	f04f 0220 	mov.w	r2, #32
   29c22:	f3ef 8311 	mrs	r3, BASEPRI
   29c26:	f382 8811 	msr	BASEPRI, r2
   29c2a:	4618      	mov	r0, r3
	return list->head == list;
   29c2c:	4a4b      	ldr	r2, [pc, #300]	; (29d5c <_nano_sys_clock_tick_announce+0x1c0>)
   29c2e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c32:	4293      	cmp	r3, r2
   29c34:	d1dd      	bne.n	29bf2 <_nano_sys_clock_tick_announce+0x56>
   29c36:	2300      	movs	r3, #0
   29c38:	e7db      	b.n	29bf2 <_nano_sys_clock_tick_announce+0x56>
   29c3a:	2200      	movs	r2, #0
   29c3c:	e7d1      	b.n	29be2 <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c3e:	f381 8811 	msr	BASEPRI, r1
   29c42:	e084      	b.n	29d4e <_nano_sys_clock_tick_announce+0x1b2>
   29c44:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   29c48:	aa02      	add	r2, sp, #8
   29c4a:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c4e:	4293      	cmp	r3, r2
   29c50:	d00d      	beq.n	29c6e <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   29c52:	b193      	cbz	r3, 29c7a <_nano_sys_clock_tick_announce+0xde>
   29c54:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c56:	b163      	cbz	r3, 29c72 <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   29c58:	9901      	ldr	r1, [sp, #4]
   29c5a:	428b      	cmp	r3, r1
   29c5c:	d00b      	beq.n	29c76 <_nano_sys_clock_tick_announce+0xda>
   29c5e:	6819      	ldr	r1, [r3, #0]
   29c60:	b169      	cbz	r1, 29c7e <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c62:	b172      	cbz	r2, 29c82 <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   29c64:	9901      	ldr	r1, [sp, #4]
   29c66:	428a      	cmp	r2, r1
   29c68:	d00d      	beq.n	29c86 <_nano_sys_clock_tick_announce+0xea>
   29c6a:	681c      	ldr	r4, [r3, #0]
   29c6c:	e027      	b.n	29cbe <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c6e:	2300      	movs	r3, #0
   29c70:	e7ef      	b.n	29c52 <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c72:	4619      	mov	r1, r3
   29c74:	e7f4      	b.n	29c60 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   29c76:	2100      	movs	r1, #0
   29c78:	e7f2      	b.n	29c60 <_nano_sys_clock_tick_announce+0xc4>
   29c7a:	461c      	mov	r4, r3
   29c7c:	e01f      	b.n	29cbe <_nano_sys_clock_tick_announce+0x122>
   29c7e:	2400      	movs	r4, #0
   29c80:	e01d      	b.n	29cbe <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c82:	2400      	movs	r4, #0
   29c84:	e01b      	b.n	29cbe <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   29c86:	2400      	movs	r4, #0
   29c88:	e019      	b.n	29cbe <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   29c8a:	2301      	movs	r3, #1
   29c8c:	e000      	b.n	29c90 <_nano_sys_clock_tick_announce+0xf4>
   29c8e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29c90:	2b00      	cmp	r3, #0
   29c92:	d142      	bne.n	29d1a <_nano_sys_clock_tick_announce+0x17e>
   29c94:	f386 8811 	msr	BASEPRI, r6
   29c98:	2c00      	cmp	r4, #0
   29c9a:	d04d      	beq.n	29d38 <_nano_sys_clock_tick_announce+0x19c>
   29c9c:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c9e:	2c00      	cmp	r4, #0
   29ca0:	d046      	beq.n	29d30 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   29ca2:	9a01      	ldr	r2, [sp, #4]
   29ca4:	4294      	cmp	r4, r2
   29ca6:	d045      	beq.n	29d34 <_nano_sys_clock_tick_announce+0x198>
   29ca8:	6822      	ldr	r2, [r4, #0]
   29caa:	2a00      	cmp	r2, #0
   29cac:	d046      	beq.n	29d3c <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cae:	2b00      	cmp	r3, #0
   29cb0:	d046      	beq.n	29d40 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   29cb2:	9a01      	ldr	r2, [sp, #4]
   29cb4:	4293      	cmp	r3, r2
   29cb6:	d045      	beq.n	29d44 <_nano_sys_clock_tick_announce+0x1a8>
   29cb8:	6822      	ldr	r2, [r4, #0]
   29cba:	4623      	mov	r3, r4
   29cbc:	4614      	mov	r4, r2
   29cbe:	2b00      	cmp	r3, #0
   29cc0:	d042      	beq.n	29d48 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   29cc2:	685a      	ldr	r2, [r3, #4]
   29cc4:	6819      	ldr	r1, [r3, #0]
   29cc6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29cc8:	681a      	ldr	r2, [r3, #0]
   29cca:	6859      	ldr	r1, [r3, #4]
   29ccc:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   29cce:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   29cd0:	f04f 0220 	mov.w	r2, #32
   29cd4:	f3ef 8611 	mrs	r6, BASEPRI
   29cd8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ce0:	611a      	str	r2, [r3, #16]
	if (thread) {
   29ce2:	b1e8      	cbz	r0, 29d20 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   29ce4:	68db      	ldr	r3, [r3, #12]
   29ce6:	b15b      	cbz	r3, 29d00 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   29ce8:	6843      	ldr	r3, [r0, #4]
   29cea:	6802      	ldr	r2, [r0, #0]
   29cec:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29cee:	6803      	ldr	r3, [r0, #0]
   29cf0:	6842      	ldr	r2, [r0, #4]
   29cf2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29cf4:	7a43      	ldrb	r3, [r0, #9]
   29cf6:	f023 0302 	bic.w	r3, r3, #2
   29cfa:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29cfc:	2300      	movs	r3, #0
   29cfe:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29d00:	7a43      	ldrb	r3, [r0, #9]
   29d02:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29d06:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29d08:	f013 0f1b 	tst.w	r3, #27
   29d0c:	d1bf      	bne.n	29c8e <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29d0e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29d14:	d0b9      	beq.n	29c8a <_nano_sys_clock_tick_announce+0xee>
   29d16:	2300      	movs	r3, #0
   29d18:	e7ba      	b.n	29c90 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   29d1a:	f7ff fba1 	bl	29460 <_add_thread_to_ready_q>
   29d1e:	e7b9      	b.n	29c94 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29d20:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29d24:	695a      	ldr	r2, [r3, #20]
   29d26:	2a00      	cmp	r2, #0
   29d28:	d0b6      	beq.n	29c98 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   29d2a:	4618      	mov	r0, r3
   29d2c:	4790      	blx	r2
   29d2e:	e7b3      	b.n	29c98 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d30:	4622      	mov	r2, r4
   29d32:	e7ba      	b.n	29caa <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29d34:	2200      	movs	r2, #0
   29d36:	e7b8      	b.n	29caa <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   29d38:	4622      	mov	r2, r4
   29d3a:	e7be      	b.n	29cba <_nano_sys_clock_tick_announce+0x11e>
   29d3c:	2200      	movs	r2, #0
   29d3e:	e7bc      	b.n	29cba <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d40:	2200      	movs	r2, #0
   29d42:	e7ba      	b.n	29cba <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   29d44:	2200      	movs	r2, #0
   29d46:	e7b8      	b.n	29cba <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   29d48:	2200      	movs	r2, #0
   29d4a:	4b05      	ldr	r3, [pc, #20]	; (29d60 <_nano_sys_clock_tick_announce+0x1c4>)
   29d4c:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   29d4e:	4628      	mov	r0, r5
   29d50:	f7ff fed4 	bl	29afc <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   29d54:	b002      	add	sp, #8
   29d56:	bd70      	pop	{r4, r5, r6, pc}
   29d58:	200030e8 	.word	0x200030e8
   29d5c:	20002cd8 	.word	0x20002cd8
   29d60:	200030e0 	.word	0x200030e0

00029d64 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   29d64:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   29d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29d6e:	4903      	ldr	r1, [pc, #12]	; (29d7c <k_sys_work_q_init+0x18>)
   29d70:	4803      	ldr	r0, [pc, #12]	; (29d80 <k_sys_work_q_init+0x1c>)
   29d72:	f000 fc49 	bl	2a608 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   29d76:	2000      	movs	r0, #0
   29d78:	bd08      	pop	{r3, pc}
   29d7a:	bf00      	nop
   29d7c:	2000b9e0 	.word	0x2000b9e0
   29d80:	200030f0 	.word	0x200030f0

00029d84 <k_is_in_isr>:
   29d84:	f3ef 8305 	mrs	r3, IPSR
   29d88:	2b0d      	cmp	r3, #13
   29d8a:	d807      	bhi.n	29d9c <k_is_in_isr+0x18>
   29d8c:	b143      	cbz	r3, 29da0 <k_is_in_isr+0x1c>
   29d8e:	4b06      	ldr	r3, [pc, #24]	; (29da8 <k_is_in_isr+0x24>)
   29d90:	685b      	ldr	r3, [r3, #4]
   29d92:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29d96:	d005      	beq.n	29da4 <k_is_in_isr+0x20>
   29d98:	2000      	movs	r0, #0
   29d9a:	4770      	bx	lr
   29d9c:	2001      	movs	r0, #1
   29d9e:	4770      	bx	lr
   29da0:	2000      	movs	r0, #0
   29da2:	4770      	bx	lr
   29da4:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   29da6:	4770      	bx	lr
   29da8:	e000ed00 	.word	0xe000ed00

00029dac <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   29dac:	4b02      	ldr	r3, [pc, #8]	; (29db8 <_is_thread_essential+0xc>)
   29dae:	689b      	ldr	r3, [r3, #8]
   29db0:	7a18      	ldrb	r0, [r3, #8]
}
   29db2:	f000 0001 	and.w	r0, r0, #1
   29db6:	4770      	bx	lr
   29db8:	20002cd8 	.word	0x20002cd8

00029dbc <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29dbc:	b508      	push	{r3, lr}
   29dbe:	4604      	mov	r4, r0
   29dc0:	4608      	mov	r0, r1
   29dc2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   29dc4:	461a      	mov	r2, r3
   29dc6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   29dc8:	f7ff fcae 	bl	29728 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   29dcc:	f7fe facc 	bl	28368 <_impl_k_thread_abort>

00029dd0 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   29dd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29dd2:	f04f 0320 	mov.w	r3, #32
   29dd6:	f3ef 8411 	mrs	r4, BASEPRI
   29dda:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   29dde:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   29de0:	f013 0f04 	tst.w	r3, #4
   29de4:	d00b      	beq.n	29dfe <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29de6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29dea:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29dec:	f013 0f1b 	tst.w	r3, #27
   29df0:	d10a      	bne.n	29e08 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29df2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29df8:	d004      	beq.n	29e04 <_impl_k_thread_start+0x34>
   29dfa:	2500      	movs	r5, #0
   29dfc:	e005      	b.n	29e0a <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29dfe:	f384 8811 	msr	BASEPRI, r4
   29e02:	bd38      	pop	{r3, r4, r5, pc}
   29e04:	2501      	movs	r5, #1
   29e06:	e000      	b.n	29e0a <_impl_k_thread_start+0x3a>
   29e08:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   29e0a:	b915      	cbnz	r5, 29e12 <_impl_k_thread_start+0x42>
   29e0c:	f384 8811 	msr	BASEPRI, r4
   29e10:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   29e12:	f7ff fb25 	bl	29460 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   29e16:	4b0a      	ldr	r3, [pc, #40]	; (29e40 <_impl_k_thread_start+0x70>)
   29e18:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29e1a:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29e1c:	2b7f      	cmp	r3, #127	; 0x7f
   29e1e:	d908      	bls.n	29e32 <_impl_k_thread_start+0x62>
   29e20:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   29e22:	2b00      	cmp	r3, #0
   29e24:	d0f2      	beq.n	29e0c <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   29e26:	f7ff fcad 	bl	29784 <_update_time_slice_before_swap>
	return __swap(key);
   29e2a:	4620      	mov	r0, r4
   29e2c:	f7fd fff0 	bl	27e10 <__swap>
   29e30:	bd38      	pop	{r3, r4, r5, pc}
   29e32:	f7ff fc39 	bl	296a8 <__must_switch_threads>
   29e36:	4603      	mov	r3, r0
   29e38:	2800      	cmp	r0, #0
   29e3a:	d0f2      	beq.n	29e22 <_impl_k_thread_start+0x52>
   29e3c:	462b      	mov	r3, r5
   29e3e:	e7f0      	b.n	29e22 <_impl_k_thread_start+0x52>
   29e40:	20002cd8 	.word	0x20002cd8

00029e44 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   29e44:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   29e46:	b1d1      	cbz	r1, 29e7e <schedule_new_thread+0x3a>
   29e48:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29e4a:	3309      	adds	r3, #9
   29e4c:	4a47      	ldr	r2, [pc, #284]	; (29f6c <schedule_new_thread+0x128>)
   29e4e:	fba2 2303 	umull	r2, r3, r2, r3
   29e52:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   29e54:	3301      	adds	r3, #1
	__asm__ volatile(
   29e56:	f04f 0220 	mov.w	r2, #32
   29e5a:	f3ef 8511 	mrs	r5, BASEPRI
   29e5e:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   29e62:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29e66:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29e68:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29e6a:	2200      	movs	r2, #0
   29e6c:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   29e6e:	b14b      	cbz	r3, 29e84 <schedule_new_thread+0x40>
	return list->head == list;
   29e70:	4a3f      	ldr	r2, [pc, #252]	; (29f70 <schedule_new_thread+0x12c>)
   29e72:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29e76:	4293      	cmp	r3, r2
   29e78:	d152      	bne.n	29f20 <schedule_new_thread+0xdc>
   29e7a:	2300      	movs	r3, #0
   29e7c:	e050      	b.n	29f20 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   29e7e:	f7ff ffa7 	bl	29dd0 <_impl_k_thread_start>
   29e82:	bd70      	pop	{r4, r5, r6, pc}
   29e84:	f04f 0320 	mov.w	r3, #32
   29e88:	f3ef 8611 	mrs	r6, BASEPRI
   29e8c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29e94:	6123      	str	r3, [r4, #16]
	if (thread) {
   29e96:	b320      	cbz	r0, 29ee2 <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   29e98:	68e3      	ldr	r3, [r4, #12]
   29e9a:	b15b      	cbz	r3, 29eb4 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   29e9c:	6843      	ldr	r3, [r0, #4]
   29e9e:	6802      	ldr	r2, [r0, #0]
   29ea0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29ea2:	6803      	ldr	r3, [r0, #0]
   29ea4:	6842      	ldr	r2, [r0, #4]
   29ea6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29ea8:	7a43      	ldrb	r3, [r0, #9]
   29eaa:	f023 0302 	bic.w	r3, r3, #2
   29eae:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29eb0:	2300      	movs	r3, #0
   29eb2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29eb4:	7a43      	ldrb	r3, [r0, #9]
   29eb6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29eba:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29ebc:	f013 0f1b 	tst.w	r3, #27
   29ec0:	d107      	bne.n	29ed2 <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29ec2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29ec8:	d001      	beq.n	29ece <schedule_new_thread+0x8a>
   29eca:	2300      	movs	r3, #0
   29ecc:	e002      	b.n	29ed4 <schedule_new_thread+0x90>
   29ece:	2301      	movs	r3, #1
   29ed0:	e000      	b.n	29ed4 <schedule_new_thread+0x90>
   29ed2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29ed4:	b913      	cbnz	r3, 29edc <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ed6:	f386 8811 	msr	BASEPRI, r6
   29eda:	e044      	b.n	29f66 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   29edc:	f7ff fac0 	bl	29460 <_add_thread_to_ready_q>
   29ee0:	e7f9      	b.n	29ed6 <schedule_new_thread+0x92>
   29ee2:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29ee6:	6963      	ldr	r3, [r4, #20]
   29ee8:	2b00      	cmp	r3, #0
   29eea:	d03c      	beq.n	29f66 <schedule_new_thread+0x122>
			timeout->func(timeout);
   29eec:	4620      	mov	r0, r4
   29eee:	4798      	blx	r3
   29ef0:	e039      	b.n	29f66 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   29ef2:	1a8a      	subs	r2, r1, r2
   29ef4:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29ef6:	b133      	cbz	r3, 29f06 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   29ef8:	685a      	ldr	r2, [r3, #4]
   29efa:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29efc:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   29efe:	685a      	ldr	r2, [r3, #4]
   29f00:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29f02:	605c      	str	r4, [r3, #4]
   29f04:	e02f      	b.n	29f66 <schedule_new_thread+0x122>
	node->next = list;
   29f06:	4b1b      	ldr	r3, [pc, #108]	; (29f74 <schedule_new_thread+0x130>)
   29f08:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   29f0a:	685a      	ldr	r2, [r3, #4]
   29f0c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29f0e:	685a      	ldr	r2, [r3, #4]
   29f10:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29f12:	605c      	str	r4, [r3, #4]
   29f14:	e027      	b.n	29f66 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f16:	4619      	mov	r1, r3
   29f18:	e011      	b.n	29f3e <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   29f1a:	2100      	movs	r1, #0
   29f1c:	e00f      	b.n	29f3e <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29f1e:	2300      	movs	r3, #0
   29f20:	b1d3      	cbz	r3, 29f58 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29f22:	6922      	ldr	r2, [r4, #16]
   29f24:	6919      	ldr	r1, [r3, #16]
   29f26:	428a      	cmp	r2, r1
   29f28:	dde3      	ble.n	29ef2 <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   29f2a:	1a52      	subs	r2, r2, r1
   29f2c:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29f2e:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f30:	2b00      	cmp	r3, #0
   29f32:	d0f0      	beq.n	29f16 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29f34:	490e      	ldr	r1, [pc, #56]	; (29f70 <schedule_new_thread+0x12c>)
   29f36:	6909      	ldr	r1, [r1, #16]
   29f38:	428b      	cmp	r3, r1
   29f3a:	d0ee      	beq.n	29f1a <schedule_new_thread+0xd6>
   29f3c:	6819      	ldr	r1, [r3, #0]
   29f3e:	2900      	cmp	r1, #0
   29f40:	d0ed      	beq.n	29f1e <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f42:	b12a      	cbz	r2, 29f50 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29f44:	490a      	ldr	r1, [pc, #40]	; (29f70 <schedule_new_thread+0x12c>)
   29f46:	6909      	ldr	r1, [r1, #16]
   29f48:	428a      	cmp	r2, r1
   29f4a:	d003      	beq.n	29f54 <schedule_new_thread+0x110>
   29f4c:	681b      	ldr	r3, [r3, #0]
   29f4e:	e7e7      	b.n	29f20 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f50:	2300      	movs	r3, #0
   29f52:	e7e5      	b.n	29f20 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   29f54:	2300      	movs	r3, #0
   29f56:	e7e3      	b.n	29f20 <schedule_new_thread+0xdc>
	node->next = list;
   29f58:	4b06      	ldr	r3, [pc, #24]	; (29f74 <schedule_new_thread+0x130>)
   29f5a:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   29f5c:	685a      	ldr	r2, [r3, #4]
   29f5e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29f60:	685a      	ldr	r2, [r3, #4]
   29f62:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29f64:	605c      	str	r4, [r3, #4]
   29f66:	f385 8811 	msr	BASEPRI, r5
   29f6a:	bd70      	pop	{r4, r5, r6, pc}
   29f6c:	cccccccd 	.word	0xcccccccd
   29f70:	20002cd8 	.word	0x20002cd8
   29f74:	20002ce4 	.word	0x20002ce4

00029f78 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   29f78:	b510      	push	{r4, lr}
   29f7a:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29f7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29f7e:	9404      	str	r4, [sp, #16]
   29f80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29f82:	9403      	str	r4, [sp, #12]
   29f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   29f86:	9402      	str	r4, [sp, #8]
   29f88:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29f8a:	9401      	str	r4, [sp, #4]
   29f8c:	9c08      	ldr	r4, [sp, #32]
   29f8e:	9400      	str	r4, [sp, #0]
   29f90:	f7fe f940 	bl	28214 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   29f94:	b006      	add	sp, #24
   29f96:	bd10      	pop	{r4, pc}

00029f98 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   29f98:	b570      	push	{r4, r5, r6, lr}
   29f9a:	b086      	sub	sp, #24
   29f9c:	4604      	mov	r4, r0
   29f9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29fa0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   29fa2:	9604      	str	r6, [sp, #16]
   29fa4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   29fa6:	9603      	str	r6, [sp, #12]
   29fa8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   29faa:	9602      	str	r6, [sp, #8]
   29fac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   29fae:	9601      	str	r6, [sp, #4]
   29fb0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   29fb2:	9600      	str	r6, [sp, #0]
   29fb4:	f7ff ffe0 	bl	29f78 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   29fb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   29fbc:	d003      	beq.n	29fc6 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   29fbe:	4629      	mov	r1, r5
   29fc0:	4620      	mov	r0, r4
   29fc2:	f7ff ff3f 	bl	29e44 <schedule_new_thread>
	}
	return new_thread;
}
   29fc6:	4620      	mov	r0, r4
   29fc8:	b006      	add	sp, #24
   29fca:	bd70      	pop	{r4, r5, r6, pc}

00029fcc <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   29fcc:	b510      	push	{r4, lr}
   29fce:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29fd0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   29fd2:	b103      	cbz	r3, 29fd6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   29fd4:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   29fd6:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29fd8:	f013 0f1f 	tst.w	r3, #31
   29fdc:	d107      	bne.n	29fee <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29fde:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29fe0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29fe4:	d001      	beq.n	29fea <_k_thread_single_abort+0x1e>
   29fe6:	2200      	movs	r2, #0
   29fe8:	e002      	b.n	29ff0 <_k_thread_single_abort+0x24>
   29fea:	2201      	movs	r2, #1
   29fec:	e000      	b.n	29ff0 <_k_thread_single_abort+0x24>
   29fee:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   29ff0:	bb4a      	cbnz	r2, 2a046 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   29ff2:	f013 0f02 	tst.w	r3, #2
   29ff6:	d009      	beq.n	2a00c <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   29ff8:	6863      	ldr	r3, [r4, #4]
   29ffa:	6822      	ldr	r2, [r4, #0]
   29ffc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29ffe:	6823      	ldr	r3, [r4, #0]
   2a000:	6862      	ldr	r2, [r4, #4]
   2a002:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a004:	7a63      	ldrb	r3, [r4, #9]
   2a006:	f023 0302 	bic.w	r3, r3, #2
   2a00a:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a00c:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   2a00e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a012:	d013      	beq.n	2a03c <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a014:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   2a018:	4a0d      	ldr	r2, [pc, #52]	; (2a050 <_k_thread_single_abort+0x84>)
   2a01a:	6912      	ldr	r2, [r2, #16]
   2a01c:	4293      	cmp	r3, r2
   2a01e:	d004      	beq.n	2a02a <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a020:	b103      	cbz	r3, 2a024 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   2a022:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a024:	691a      	ldr	r2, [r3, #16]
   2a026:	440a      	add	r2, r1
   2a028:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2a02a:	6963      	ldr	r3, [r4, #20]
   2a02c:	6922      	ldr	r2, [r4, #16]
   2a02e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a030:	6923      	ldr	r3, [r4, #16]
   2a032:	6962      	ldr	r2, [r4, #20]
   2a034:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a03a:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   2a03c:	7a63      	ldrb	r3, [r4, #9]
   2a03e:	f043 0308 	orr.w	r3, r3, #8
   2a042:	7263      	strb	r3, [r4, #9]
   2a044:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   2a046:	4620      	mov	r0, r4
   2a048:	f7ff fa2a 	bl	294a0 <_remove_thread_from_ready_q>
   2a04c:	e7f6      	b.n	2a03c <_k_thread_single_abort+0x70>
   2a04e:	bf00      	nop
   2a050:	20002cd8 	.word	0x20002cd8

0002a054 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2a054:	b530      	push	{r4, r5, lr}
   2a056:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   2a058:	4c1b      	ldr	r4, [pc, #108]	; (2a0c8 <_init_static_threads+0x74>)
   2a05a:	e012      	b.n	2a082 <_init_static_threads+0x2e>
		_setup_new_thread(
   2a05c:	6a23      	ldr	r3, [r4, #32]
   2a05e:	9304      	str	r3, [sp, #16]
   2a060:	69e3      	ldr	r3, [r4, #28]
   2a062:	9303      	str	r3, [sp, #12]
   2a064:	69a3      	ldr	r3, [r4, #24]
   2a066:	9302      	str	r3, [sp, #8]
   2a068:	6963      	ldr	r3, [r4, #20]
   2a06a:	9301      	str	r3, [sp, #4]
   2a06c:	6923      	ldr	r3, [r4, #16]
   2a06e:	9300      	str	r3, [sp, #0]
   2a070:	68e3      	ldr	r3, [r4, #12]
   2a072:	68a2      	ldr	r2, [r4, #8]
   2a074:	6861      	ldr	r1, [r4, #4]
   2a076:	6820      	ldr	r0, [r4, #0]
   2a078:	f7ff ff7e 	bl	29f78 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   2a07c:	6823      	ldr	r3, [r4, #0]
   2a07e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   2a080:	3430      	adds	r4, #48	; 0x30
   2a082:	4b12      	ldr	r3, [pc, #72]	; (2a0cc <_init_static_threads+0x78>)
   2a084:	429c      	cmp	r4, r3
   2a086:	d3e9      	bcc.n	2a05c <_init_static_threads+0x8>
	--_current->base.sched_locked;
   2a088:	4b11      	ldr	r3, [pc, #68]	; (2a0d0 <_init_static_threads+0x7c>)
   2a08a:	689a      	ldr	r2, [r3, #8]
   2a08c:	7ad3      	ldrb	r3, [r2, #11]
   2a08e:	3b01      	subs	r3, #1
   2a090:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   2a092:	f04f 0320 	mov.w	r3, #32
   2a096:	f3ef 8511 	mrs	r5, BASEPRI
   2a09a:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   2a09e:	4c0a      	ldr	r4, [pc, #40]	; (2a0c8 <_init_static_threads+0x74>)
   2a0a0:	e000      	b.n	2a0a4 <_init_static_threads+0x50>
   2a0a2:	3430      	adds	r4, #48	; 0x30
   2a0a4:	4b09      	ldr	r3, [pc, #36]	; (2a0cc <_init_static_threads+0x78>)
   2a0a6:	429c      	cmp	r4, r3
   2a0a8:	d207      	bcs.n	2a0ba <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   2a0aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a0ac:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a0b0:	d0f7      	beq.n	2a0a2 <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   2a0b2:	6820      	ldr	r0, [r4, #0]
   2a0b4:	f7ff fec6 	bl	29e44 <schedule_new_thread>
   2a0b8:	e7f3      	b.n	2a0a2 <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a0ba:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   2a0be:	f7ff fb81 	bl	297c4 <k_sched_unlock>
}
   2a0c2:	b007      	add	sp, #28
   2a0c4:	bd30      	pop	{r4, r5, pc}
   2a0c6:	bf00      	nop
   2a0c8:	2000d58c 	.word	0x2000d58c
   2a0cc:	2000d58c 	.word	0x2000d58c
   2a0d0:	20002cd8 	.word	0x20002cd8

0002a0d4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2a0d4:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2a0d6:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   2a0d8:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   2a0da:	2300      	movs	r3, #0
   2a0dc:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   2a0de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a0e2:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   2a0e4:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2a0e6:	6183      	str	r3, [r0, #24]
	t->func = func;
   2a0e8:	6243      	str	r3, [r0, #36]	; 0x24
   2a0ea:	4770      	bx	lr

0002a0ec <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2a0ec:	b570      	push	{r4, r5, r6, lr}
   2a0ee:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   2a0f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2a0f2:	2b00      	cmp	r3, #0
   2a0f4:	f340 8088 	ble.w	2a208 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   2a0f8:	f04f 0320 	mov.w	r3, #32
   2a0fc:	f3ef 8511 	mrs	r5, BASEPRI
   2a100:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   2a104:	f100 0218 	add.w	r2, r0, #24
   2a108:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a10a:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2a10c:	2100      	movs	r1, #0
   2a10e:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a110:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   2a112:	b133      	cbz	r3, 2a122 <_timer_expiration_handler+0x36>
	return list->head == list;
   2a114:	4a59      	ldr	r2, [pc, #356]	; (2a27c <_timer_expiration_handler+0x190>)
   2a116:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a11a:	4293      	cmp	r3, r2
   2a11c:	d14f      	bne.n	2a1be <_timer_expiration_handler+0xd2>
   2a11e:	2300      	movs	r3, #0
   2a120:	e04d      	b.n	2a1be <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   2a122:	4608      	mov	r0, r1
   2a124:	f04f 0320 	mov.w	r3, #32
   2a128:	f3ef 8611 	mrs	r6, BASEPRI
   2a12c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a134:	6123      	str	r3, [r4, #16]
	if (thread) {
   2a136:	b319      	cbz	r1, 2a180 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   2a138:	68e3      	ldr	r3, [r4, #12]
   2a13a:	b153      	cbz	r3, 2a152 <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   2a13c:	684b      	ldr	r3, [r1, #4]
   2a13e:	680a      	ldr	r2, [r1, #0]
   2a140:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a142:	680b      	ldr	r3, [r1, #0]
   2a144:	684a      	ldr	r2, [r1, #4]
   2a146:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a148:	7a4b      	ldrb	r3, [r1, #9]
   2a14a:	f023 0302 	bic.w	r3, r3, #2
   2a14e:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   2a150:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a152:	7a43      	ldrb	r3, [r0, #9]
   2a154:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a158:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a15a:	f013 0f1b 	tst.w	r3, #27
   2a15e:	d107      	bne.n	2a170 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a160:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a166:	d001      	beq.n	2a16c <_timer_expiration_handler+0x80>
   2a168:	2300      	movs	r3, #0
   2a16a:	e002      	b.n	2a172 <_timer_expiration_handler+0x86>
   2a16c:	2301      	movs	r3, #1
   2a16e:	e000      	b.n	2a172 <_timer_expiration_handler+0x86>
   2a170:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a172:	b913      	cbnz	r3, 2a17a <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a174:	f386 8811 	msr	BASEPRI, r6
   2a178:	e044      	b.n	2a204 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   2a17a:	f7ff f971 	bl	29460 <_add_thread_to_ready_q>
   2a17e:	e7f9      	b.n	2a174 <_timer_expiration_handler+0x88>
   2a180:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2a184:	6963      	ldr	r3, [r4, #20]
   2a186:	2b00      	cmp	r3, #0
   2a188:	d03c      	beq.n	2a204 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   2a18a:	4620      	mov	r0, r4
   2a18c:	4798      	blx	r3
   2a18e:	e039      	b.n	2a204 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   2a190:	1a8a      	subs	r2, r1, r2
   2a192:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a194:	b133      	cbz	r3, 2a1a4 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   2a196:	685a      	ldr	r2, [r3, #4]
   2a198:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2a19a:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   2a19c:	685a      	ldr	r2, [r3, #4]
   2a19e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2a1a0:	605c      	str	r4, [r3, #4]
   2a1a2:	e02f      	b.n	2a204 <_timer_expiration_handler+0x118>
	node->next = list;
   2a1a4:	4b36      	ldr	r3, [pc, #216]	; (2a280 <_timer_expiration_handler+0x194>)
   2a1a6:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2a1a8:	685a      	ldr	r2, [r3, #4]
   2a1aa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a1ac:	685a      	ldr	r2, [r3, #4]
   2a1ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a1b0:	605c      	str	r4, [r3, #4]
   2a1b2:	e027      	b.n	2a204 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1b4:	4619      	mov	r1, r3
   2a1b6:	e011      	b.n	2a1dc <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   2a1b8:	2100      	movs	r1, #0
   2a1ba:	e00f      	b.n	2a1dc <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a1bc:	2300      	movs	r3, #0
   2a1be:	b1d3      	cbz	r3, 2a1f6 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a1c0:	6902      	ldr	r2, [r0, #16]
   2a1c2:	6919      	ldr	r1, [r3, #16]
   2a1c4:	428a      	cmp	r2, r1
   2a1c6:	dde3      	ble.n	2a190 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   2a1c8:	1a52      	subs	r2, r2, r1
   2a1ca:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a1cc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1ce:	2b00      	cmp	r3, #0
   2a1d0:	d0f0      	beq.n	2a1b4 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   2a1d2:	492a      	ldr	r1, [pc, #168]	; (2a27c <_timer_expiration_handler+0x190>)
   2a1d4:	6909      	ldr	r1, [r1, #16]
   2a1d6:	428b      	cmp	r3, r1
   2a1d8:	d0ee      	beq.n	2a1b8 <_timer_expiration_handler+0xcc>
   2a1da:	6819      	ldr	r1, [r3, #0]
   2a1dc:	2900      	cmp	r1, #0
   2a1de:	d0ed      	beq.n	2a1bc <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1e0:	b12a      	cbz	r2, 2a1ee <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   2a1e2:	4926      	ldr	r1, [pc, #152]	; (2a27c <_timer_expiration_handler+0x190>)
   2a1e4:	6909      	ldr	r1, [r1, #16]
   2a1e6:	428a      	cmp	r2, r1
   2a1e8:	d003      	beq.n	2a1f2 <_timer_expiration_handler+0x106>
   2a1ea:	681b      	ldr	r3, [r3, #0]
   2a1ec:	e7e7      	b.n	2a1be <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1ee:	2300      	movs	r3, #0
   2a1f0:	e7e5      	b.n	2a1be <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   2a1f2:	2300      	movs	r3, #0
   2a1f4:	e7e3      	b.n	2a1be <_timer_expiration_handler+0xd2>
	node->next = list;
   2a1f6:	4b22      	ldr	r3, [pc, #136]	; (2a280 <_timer_expiration_handler+0x194>)
   2a1f8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2a1fa:	685a      	ldr	r2, [r3, #4]
   2a1fc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a1fe:	685a      	ldr	r2, [r3, #4]
   2a200:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a202:	605c      	str	r4, [r3, #4]
   2a204:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2a208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a20a:	3301      	adds	r3, #1
   2a20c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2a20e:	6a23      	ldr	r3, [r4, #32]
   2a210:	b10b      	cbz	r3, 2a216 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   2a212:	4620      	mov	r0, r4
   2a214:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   2a216:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2a21a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a21c:	42a3      	cmp	r3, r4
   2a21e:	d01d      	beq.n	2a25c <_timer_expiration_handler+0x170>

	if (!thread) {
   2a220:	b334      	cbz	r4, 2a270 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   2a222:	6863      	ldr	r3, [r4, #4]
   2a224:	6822      	ldr	r2, [r4, #0]
   2a226:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a228:	6823      	ldr	r3, [r4, #0]
   2a22a:	6862      	ldr	r2, [r4, #4]
   2a22c:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a22e:	7a63      	ldrb	r3, [r4, #9]
   2a230:	f023 0302 	bic.w	r3, r3, #2
   2a234:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   2a236:	f04f 0320 	mov.w	r3, #32
   2a23a:	f3ef 8511 	mrs	r5, BASEPRI
   2a23e:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a242:	7a63      	ldrb	r3, [r4, #9]
   2a244:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a248:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a24a:	f013 0f1b 	tst.w	r3, #27
   2a24e:	d109      	bne.n	2a264 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a250:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a256:	d003      	beq.n	2a260 <_timer_expiration_handler+0x174>
   2a258:	2300      	movs	r3, #0
   2a25a:	e004      	b.n	2a266 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a25c:	2400      	movs	r4, #0
   2a25e:	e7df      	b.n	2a220 <_timer_expiration_handler+0x134>
   2a260:	2301      	movs	r3, #1
   2a262:	e000      	b.n	2a266 <_timer_expiration_handler+0x17a>
   2a264:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a266:	b923      	cbnz	r3, 2a272 <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a268:	f385 8811 	msr	BASEPRI, r5
   2a26c:	2300      	movs	r3, #0
   2a26e:	6663      	str	r3, [r4, #100]	; 0x64
   2a270:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   2a272:	4620      	mov	r0, r4
   2a274:	f7ff f8f4 	bl	29460 <_add_thread_to_ready_q>
   2a278:	e7f6      	b.n	2a268 <_timer_expiration_handler+0x17c>
   2a27a:	bf00      	nop
   2a27c:	20002cd8 	.word	0x20002cd8
   2a280:	20002ce4 	.word	0x20002ce4

0002a284 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   2a284:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2a286:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   2a288:	2300      	movs	r3, #0
   2a28a:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   2a28c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2a290:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2a292:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   2a294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a298:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   2a29a:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   2a29c:	6083      	str	r3, [r0, #8]
	t->func = func;
   2a29e:	4a02      	ldr	r2, [pc, #8]	; (2a2a8 <k_timer_init+0x24>)
   2a2a0:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   2a2a2:	6303      	str	r3, [r0, #48]	; 0x30
   2a2a4:	4770      	bx	lr
   2a2a6:	bf00      	nop
   2a2a8:	0002a0ed 	.word	0x0002a0ed

0002a2ac <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2a2ac:	b530      	push	{r4, r5, lr}
   2a2ae:	b083      	sub	sp, #12
   2a2b0:	3209      	adds	r2, #9
   2a2b2:	4b57      	ldr	r3, [pc, #348]	; (2a410 <_impl_k_timer_start+0x164>)
   2a2b4:	fba3 4202 	umull	r4, r2, r3, r2
   2a2b8:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   2a2ba:	9201      	str	r2, [sp, #4]
   2a2bc:	3109      	adds	r1, #9
   2a2be:	fba3 3101 	umull	r3, r1, r3, r1
   2a2c2:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   2a2c4:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   2a2c6:	f04f 0320 	mov.w	r3, #32
   2a2ca:	f3ef 8411 	mrs	r4, BASEPRI
   2a2ce:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   2a2d2:	6901      	ldr	r1, [r0, #16]
   2a2d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a2d8:	d012      	beq.n	2a300 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a2da:	4603      	mov	r3, r0
	return list->tail == node;
   2a2dc:	4a4d      	ldr	r2, [pc, #308]	; (2a414 <_impl_k_timer_start+0x168>)
   2a2de:	6912      	ldr	r2, [r2, #16]
   2a2e0:	4290      	cmp	r0, r2
   2a2e2:	d004      	beq.n	2a2ee <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a2e4:	b100      	cbz	r0, 2a2e8 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2a2e6:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a2e8:	691a      	ldr	r2, [r3, #16]
   2a2ea:	440a      	add	r2, r1
   2a2ec:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2a2ee:	6843      	ldr	r3, [r0, #4]
   2a2f0:	6802      	ldr	r2, [r0, #0]
   2a2f2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a2f4:	6803      	ldr	r3, [r0, #0]
   2a2f6:	6842      	ldr	r2, [r0, #4]
   2a2f8:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a2fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2fe:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   2a300:	9b01      	ldr	r3, [sp, #4]
   2a302:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   2a304:	2200      	movs	r2, #0
   2a306:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   2a308:	4605      	mov	r5, r0
   2a30a:	f100 0118 	add.w	r1, r0, #24
   2a30e:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a310:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2a312:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a314:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   2a316:	b133      	cbz	r3, 2a326 <_impl_k_timer_start+0x7a>
	return list->head == list;
   2a318:	4a3e      	ldr	r2, [pc, #248]	; (2a414 <_impl_k_timer_start+0x168>)
   2a31a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a31e:	4293      	cmp	r3, r2
   2a320:	d14f      	bne.n	2a3c2 <_impl_k_timer_start+0x116>
   2a322:	2300      	movs	r3, #0
   2a324:	e04d      	b.n	2a3c2 <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   2a326:	4613      	mov	r3, r2
   2a328:	f04f 0220 	mov.w	r2, #32
   2a32c:	f3ef 8511 	mrs	r5, BASEPRI
   2a330:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a338:	6102      	str	r2, [r0, #16]
	if (thread) {
   2a33a:	b323      	cbz	r3, 2a386 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   2a33c:	68c2      	ldr	r2, [r0, #12]
   2a33e:	b152      	cbz	r2, 2a356 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   2a340:	685a      	ldr	r2, [r3, #4]
   2a342:	6819      	ldr	r1, [r3, #0]
   2a344:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2a346:	681a      	ldr	r2, [r3, #0]
   2a348:	6859      	ldr	r1, [r3, #4]
   2a34a:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a34c:	7a5a      	ldrb	r2, [r3, #9]
   2a34e:	f022 0202 	bic.w	r2, r2, #2
   2a352:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   2a354:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a356:	7a5a      	ldrb	r2, [r3, #9]
   2a358:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   2a35c:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a35e:	f012 0f1b 	tst.w	r2, #27
   2a362:	d107      	bne.n	2a374 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a364:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a366:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a36a:	d001      	beq.n	2a370 <_impl_k_timer_start+0xc4>
   2a36c:	2200      	movs	r2, #0
   2a36e:	e002      	b.n	2a376 <_impl_k_timer_start+0xca>
   2a370:	2201      	movs	r2, #1
   2a372:	e000      	b.n	2a376 <_impl_k_timer_start+0xca>
   2a374:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   2a376:	b912      	cbnz	r2, 2a37e <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a378:	f385 8811 	msr	BASEPRI, r5
   2a37c:	e044      	b.n	2a408 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   2a37e:	4618      	mov	r0, r3
   2a380:	f7ff f86e 	bl	29460 <_add_thread_to_ready_q>
   2a384:	e7f8      	b.n	2a378 <_impl_k_timer_start+0xcc>
   2a386:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2a38a:	6943      	ldr	r3, [r0, #20]
   2a38c:	2b00      	cmp	r3, #0
   2a38e:	d03b      	beq.n	2a408 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   2a390:	4798      	blx	r3
   2a392:	e039      	b.n	2a408 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   2a394:	1a8a      	subs	r2, r1, r2
   2a396:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a398:	b133      	cbz	r3, 2a3a8 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   2a39a:	685a      	ldr	r2, [r3, #4]
   2a39c:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   2a39e:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   2a3a0:	685a      	ldr	r2, [r3, #4]
   2a3a2:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   2a3a4:	6058      	str	r0, [r3, #4]
   2a3a6:	e02f      	b.n	2a408 <_impl_k_timer_start+0x15c>
	node->next = list;
   2a3a8:	4b1b      	ldr	r3, [pc, #108]	; (2a418 <_impl_k_timer_start+0x16c>)
   2a3aa:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   2a3ac:	685a      	ldr	r2, [r3, #4]
   2a3ae:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2a3b0:	685a      	ldr	r2, [r3, #4]
   2a3b2:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2a3b4:	6058      	str	r0, [r3, #4]
   2a3b6:	e027      	b.n	2a408 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a3b8:	4619      	mov	r1, r3
   2a3ba:	e011      	b.n	2a3e0 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   2a3bc:	2100      	movs	r1, #0
   2a3be:	e00f      	b.n	2a3e0 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a3c0:	2300      	movs	r3, #0
   2a3c2:	b1d3      	cbz	r3, 2a3fa <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a3c4:	692a      	ldr	r2, [r5, #16]
   2a3c6:	6919      	ldr	r1, [r3, #16]
   2a3c8:	428a      	cmp	r2, r1
   2a3ca:	dde3      	ble.n	2a394 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   2a3cc:	1a52      	subs	r2, r2, r1
   2a3ce:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a3d0:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a3d2:	2b00      	cmp	r3, #0
   2a3d4:	d0f0      	beq.n	2a3b8 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2a3d6:	490f      	ldr	r1, [pc, #60]	; (2a414 <_impl_k_timer_start+0x168>)
   2a3d8:	6909      	ldr	r1, [r1, #16]
   2a3da:	428b      	cmp	r3, r1
   2a3dc:	d0ee      	beq.n	2a3bc <_impl_k_timer_start+0x110>
   2a3de:	6819      	ldr	r1, [r3, #0]
   2a3e0:	2900      	cmp	r1, #0
   2a3e2:	d0ed      	beq.n	2a3c0 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a3e4:	b12a      	cbz	r2, 2a3f2 <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   2a3e6:	490b      	ldr	r1, [pc, #44]	; (2a414 <_impl_k_timer_start+0x168>)
   2a3e8:	6909      	ldr	r1, [r1, #16]
   2a3ea:	428a      	cmp	r2, r1
   2a3ec:	d003      	beq.n	2a3f6 <_impl_k_timer_start+0x14a>
   2a3ee:	681b      	ldr	r3, [r3, #0]
   2a3f0:	e7e7      	b.n	2a3c2 <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a3f2:	2300      	movs	r3, #0
   2a3f4:	e7e5      	b.n	2a3c2 <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   2a3f6:	2300      	movs	r3, #0
   2a3f8:	e7e3      	b.n	2a3c2 <_impl_k_timer_start+0x116>
	node->next = list;
   2a3fa:	4b07      	ldr	r3, [pc, #28]	; (2a418 <_impl_k_timer_start+0x16c>)
   2a3fc:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   2a3fe:	685a      	ldr	r2, [r3, #4]
   2a400:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2a402:	685a      	ldr	r2, [r3, #4]
   2a404:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2a406:	6058      	str	r0, [r3, #4]
   2a408:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   2a40c:	b003      	add	sp, #12
   2a40e:	bd30      	pop	{r4, r5, pc}
   2a410:	cccccccd 	.word	0xcccccccd
   2a414:	20002cd8 	.word	0x20002cd8
   2a418:	20002ce4 	.word	0x20002ce4

0002a41c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   2a41c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a41e:	f04f 0320 	mov.w	r3, #32
   2a422:	f3ef 8411 	mrs	r4, BASEPRI
   2a426:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2a42a:	6903      	ldr	r3, [r0, #16]
   2a42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a430:	d042      	beq.n	2a4b8 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a432:	4602      	mov	r2, r0
	return list->tail == node;
   2a434:	493b      	ldr	r1, [pc, #236]	; (2a524 <_impl_k_timer_stop+0x108>)
   2a436:	6909      	ldr	r1, [r1, #16]
   2a438:	4288      	cmp	r0, r1
   2a43a:	d004      	beq.n	2a446 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a43c:	b100      	cbz	r0, 2a440 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   2a43e:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a440:	6911      	ldr	r1, [r2, #16]
   2a442:	440b      	add	r3, r1
   2a444:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   2a446:	6843      	ldr	r3, [r0, #4]
   2a448:	6802      	ldr	r2, [r0, #0]
   2a44a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a44c:	6803      	ldr	r3, [r0, #0]
   2a44e:	6842      	ldr	r2, [r0, #4]
   2a450:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a456:	6103      	str	r3, [r0, #16]
	return 0;
   2a458:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a45a:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   2a45e:	2b00      	cmp	r3, #0
   2a460:	d15f      	bne.n	2a522 <_impl_k_timer_stop+0x106>
   2a462:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   2a464:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2a466:	b103      	cbz	r3, 2a46a <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   2a468:	4798      	blx	r3
	__asm__ volatile(
   2a46a:	f04f 0320 	mov.w	r3, #32
   2a46e:	f3ef 8511 	mrs	r5, BASEPRI
   2a472:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   2a476:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   2a47a:	4b2b      	ldr	r3, [pc, #172]	; (2a528 <_impl_k_timer_stop+0x10c>)
   2a47c:	681b      	ldr	r3, [r3, #0]
   2a47e:	b9f3      	cbnz	r3, 2a4be <_impl_k_timer_stop+0xa2>
	return list->head == list;
   2a480:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a482:	4282      	cmp	r2, r0
   2a484:	d02c      	beq.n	2a4e0 <_impl_k_timer_stop+0xc4>
	if (thread) {
   2a486:	b148      	cbz	r0, 2a49c <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   2a488:	6843      	ldr	r3, [r0, #4]
   2a48a:	6802      	ldr	r2, [r0, #0]
   2a48c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a48e:	6803      	ldr	r3, [r0, #0]
   2a490:	6842      	ldr	r2, [r0, #4]
   2a492:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a494:	7a43      	ldrb	r3, [r0, #9]
   2a496:	f023 0302 	bic.w	r3, r3, #2
   2a49a:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   2a49c:	b330      	cbz	r0, 2a4ec <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a49e:	7a43      	ldrb	r3, [r0, #9]
   2a4a0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a4a4:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a4a6:	f013 0f1b 	tst.w	r3, #27
   2a4aa:	d11d      	bne.n	2a4e8 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a4ac:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a4b2:	d017      	beq.n	2a4e4 <_impl_k_timer_stop+0xc8>
   2a4b4:	2300      	movs	r3, #0
   2a4b6:	e018      	b.n	2a4ea <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   2a4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a4bc:	e7cd      	b.n	2a45a <_impl_k_timer_stop+0x3e>
	return list->head == list;
   2a4be:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a4c0:	4282      	cmp	r2, r0
   2a4c2:	d102      	bne.n	2a4ca <_impl_k_timer_stop+0xae>
   2a4c4:	2000      	movs	r0, #0
   2a4c6:	e000      	b.n	2a4ca <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   2a4c8:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2a4ca:	2800      	cmp	r0, #0
   2a4cc:	d0db      	beq.n	2a486 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2a4ce:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   2a4d0:	f113 0f02 	cmn.w	r3, #2
   2a4d4:	d1d7      	bne.n	2a486 <_impl_k_timer_stop+0x6a>
   2a4d6:	6853      	ldr	r3, [r2, #4]
   2a4d8:	4298      	cmp	r0, r3
   2a4da:	d1f5      	bne.n	2a4c8 <_impl_k_timer_stop+0xac>
   2a4dc:	2000      	movs	r0, #0
   2a4de:	e7f4      	b.n	2a4ca <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a4e0:	2000      	movs	r0, #0
   2a4e2:	e7d0      	b.n	2a486 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   2a4e4:	2301      	movs	r3, #1
   2a4e6:	e000      	b.n	2a4ea <_impl_k_timer_stop+0xce>
   2a4e8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a4ea:	b95b      	cbnz	r3, 2a504 <_impl_k_timer_stop+0xe8>
   2a4ec:	f3ef 8305 	mrs	r3, IPSR
   2a4f0:	2b0d      	cmp	r3, #13
   2a4f2:	d80a      	bhi.n	2a50a <_impl_k_timer_stop+0xee>
   2a4f4:	b173      	cbz	r3, 2a514 <_impl_k_timer_stop+0xf8>
   2a4f6:	4b0d      	ldr	r3, [pc, #52]	; (2a52c <_impl_k_timer_stop+0x110>)
   2a4f8:	685b      	ldr	r3, [r3, #4]
   2a4fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2a4fe:	d00b      	beq.n	2a518 <_impl_k_timer_stop+0xfc>
   2a500:	2300      	movs	r3, #0
   2a502:	e003      	b.n	2a50c <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   2a504:	f7fe ffac 	bl	29460 <_add_thread_to_ready_q>
   2a508:	e7f0      	b.n	2a4ec <_impl_k_timer_stop+0xd0>
   2a50a:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   2a50c:	b133      	cbz	r3, 2a51c <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a50e:	f385 8811 	msr	BASEPRI, r5
   2a512:	bd38      	pop	{r3, r4, r5, pc}
   2a514:	2300      	movs	r3, #0
   2a516:	e7f9      	b.n	2a50c <_impl_k_timer_stop+0xf0>
   2a518:	2301      	movs	r3, #1
   2a51a:	e7f7      	b.n	2a50c <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   2a51c:	4628      	mov	r0, r5
   2a51e:	f7ff f937 	bl	29790 <_reschedule_threads>
   2a522:	bd38      	pop	{r3, r4, r5, pc}
   2a524:	20002cd8 	.word	0x20002cd8
   2a528:	200030e0 	.word	0x200030e0
   2a52c:	e000ed00 	.word	0xe000ed00

0002a530 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   2a530:	b430      	push	{r4, r5}
	__asm__ volatile(
   2a532:	f04f 0320 	mov.w	r3, #32
   2a536:	f3ef 8411 	mrs	r4, BASEPRI
   2a53a:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2a53e:	6903      	ldr	r3, [r0, #16]
   2a540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a544:	d017      	beq.n	2a576 <_timeout_remaining_get+0x46>
	return list->head == list;
   2a546:	4a10      	ldr	r2, [pc, #64]	; (2a588 <_timeout_remaining_get+0x58>)
   2a548:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a54c:	4293      	cmp	r3, r2
   2a54e:	d001      	beq.n	2a554 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   2a550:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   2a552:	e005      	b.n	2a560 <_timeout_remaining_get+0x30>
   2a554:	2300      	movs	r3, #0
   2a556:	e7fb      	b.n	2a550 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   2a558:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   2a55a:	6913      	ldr	r3, [r2, #16]
   2a55c:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2a55e:	4613      	mov	r3, r2
		while (t != timeout) {
   2a560:	4283      	cmp	r3, r0
   2a562:	d009      	beq.n	2a578 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2a564:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a566:	2b00      	cmp	r3, #0
   2a568:	d0f7      	beq.n	2a55a <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2a56a:	4a07      	ldr	r2, [pc, #28]	; (2a588 <_timeout_remaining_get+0x58>)
   2a56c:	6912      	ldr	r2, [r2, #16]
   2a56e:	4293      	cmp	r3, r2
   2a570:	d0f2      	beq.n	2a558 <_timeout_remaining_get+0x28>
   2a572:	681a      	ldr	r2, [r3, #0]
   2a574:	e7f1      	b.n	2a55a <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   2a576:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a578:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   2a57c:	008a      	lsls	r2, r1, #2
   2a57e:	1850      	adds	r0, r2, r1
   2a580:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   2a582:	bc30      	pop	{r4, r5}
   2a584:	4770      	bx	lr
   2a586:	bf00      	nop
   2a588:	20002cd8 	.word	0x20002cd8

0002a58c <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2a58c:	b538      	push	{r3, r4, r5, lr}
   2a58e:	4604      	mov	r4, r0
   2a590:	e003      	b.n	2a59a <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2a592:	4610      	mov	r0, r2
   2a594:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2a596:	f7ff f927 	bl	297e8 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   2a59a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a59e:	4620      	mov	r0, r4
   2a5a0:	f7fe ff0c 	bl	293bc <k_queue_get>
		if (!work) {
   2a5a4:	4602      	mov	r2, r0
   2a5a6:	2800      	cmp	r0, #0
   2a5a8:	d0f7      	beq.n	2a59a <work_q_main+0xe>
		handler = work->handler;
   2a5aa:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   2a5ac:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a5b0:	f3bf 8f5b 	dmb	ish
   2a5b4:	e853 1f00 	ldrex	r1, [r3]
   2a5b8:	f021 0001 	bic.w	r0, r1, #1
   2a5bc:	e843 0e00 	strex	lr, r0, [r3]
   2a5c0:	f1be 0f00 	cmp.w	lr, #0
   2a5c4:	d1f6      	bne.n	2a5b4 <work_q_main+0x28>
   2a5c6:	f3bf 8f5b 	dmb	ish
   2a5ca:	f011 0f01 	tst.w	r1, #1
   2a5ce:	d0e2      	beq.n	2a596 <work_q_main+0xa>
   2a5d0:	e7df      	b.n	2a592 <work_q_main+0x6>

0002a5d2 <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   2a5d2:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2a5d4:	6984      	ldr	r4, [r0, #24]
   2a5d6:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a5da:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a5dc:	f3bf 8f5b 	dmb	ish
   2a5e0:	e853 2f00 	ldrex	r2, [r3]
   2a5e4:	f042 0001 	orr.w	r0, r2, #1
   2a5e8:	e843 0e00 	strex	lr, r0, [r3]
   2a5ec:	f1be 0f00 	cmp.w	lr, #0
   2a5f0:	d1f6      	bne.n	2a5e0 <work_timeout+0xe>
   2a5f2:	f3bf 8f5b 	dmb	ish
   2a5f6:	f012 0f01 	tst.w	r2, #1
   2a5fa:	d000      	beq.n	2a5fe <work_timeout+0x2c>
   2a5fc:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   2a5fe:	4620      	mov	r0, r4
   2a600:	f7fe feb4 	bl	2936c <k_queue_append>
}
   2a604:	e7fa      	b.n	2a5fc <work_timeout+0x2a>
	...

0002a608 <k_work_q_start>:
{
   2a608:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a60a:	b087      	sub	sp, #28
   2a60c:	4604      	mov	r4, r0
   2a60e:	460d      	mov	r5, r1
   2a610:	4616      	mov	r6, r2
   2a612:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   2a614:	f7fe fe77 	bl	29306 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   2a618:	2300      	movs	r3, #0
   2a61a:	9305      	str	r3, [sp, #20]
   2a61c:	9304      	str	r3, [sp, #16]
   2a61e:	9703      	str	r7, [sp, #12]
   2a620:	9302      	str	r3, [sp, #8]
   2a622:	9301      	str	r3, [sp, #4]
   2a624:	9400      	str	r4, [sp, #0]
   2a626:	4b04      	ldr	r3, [pc, #16]	; (2a638 <k_work_q_start+0x30>)
   2a628:	4632      	mov	r2, r6
   2a62a:	4629      	mov	r1, r5
   2a62c:	f104 0010 	add.w	r0, r4, #16
   2a630:	f7ff fcb2 	bl	29f98 <_impl_k_thread_create>
}
   2a634:	b007      	add	sp, #28
   2a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a638:	0002a58d 	.word	0x0002a58d

0002a63c <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   2a63c:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   2a63e:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a642:	f3bf 8f5b 	dmb	ish
   2a646:	e853 2f00 	ldrex	r2, [r3]
   2a64a:	f022 0201 	bic.w	r2, r2, #1
   2a64e:	e843 2e00 	strex	lr, r2, [r3]
   2a652:	f1be 0f00 	cmp.w	lr, #0
   2a656:	d1f6      	bne.n	2a646 <k_delayed_work_init+0xa>
   2a658:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   2a65c:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   2a65e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a662:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   2a664:	2300      	movs	r3, #0
   2a666:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   2a668:	6143      	str	r3, [r0, #20]
	t->func = func;
   2a66a:	4a02      	ldr	r2, [pc, #8]	; (2a674 <k_delayed_work_init+0x38>)
   2a66c:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2a66e:	6243      	str	r3, [r0, #36]	; 0x24
   2a670:	f85d fb04 	ldr.w	pc, [sp], #4
   2a674:	0002a5d3 	.word	0x0002a5d3

0002a678 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2a678:	b430      	push	{r4, r5}
	__asm__ volatile(
   2a67a:	f04f 0320 	mov.w	r3, #32
   2a67e:	f3ef 8411 	mrs	r4, BASEPRI
   2a682:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   2a686:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2a688:	b18b      	cbz	r3, 2a6ae <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a68a:	f3bf 8f5b 	dmb	ish
   2a68e:	6883      	ldr	r3, [r0, #8]
   2a690:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   2a694:	f013 0f01 	tst.w	r3, #1
   2a698:	d02d      	beq.n	2a6f6 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2a69a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2a69c:	4601      	mov	r1, r0
	return list->head;
   2a69e:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   2a6a0:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2a6a2:	b193      	cbz	r3, 2a6ca <k_delayed_work_cancel+0x52>
		if (test == node) {
   2a6a4:	4299      	cmp	r1, r3
   2a6a6:	d007      	beq.n	2a6b8 <k_delayed_work_cancel+0x40>
		prev = test;
   2a6a8:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2a6aa:	681b      	ldr	r3, [r3, #0]
   2a6ac:	e7f9      	b.n	2a6a2 <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a6ae:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   2a6b2:	f06f 0015 	mvn.w	r0, #21
   2a6b6:	e00e      	b.n	2a6d6 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   2a6b8:	b17a      	cbz	r2, 2a6da <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   2a6ba:	6803      	ldr	r3, [r0, #0]
   2a6bc:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2a6be:	686b      	ldr	r3, [r5, #4]
   2a6c0:	4298      	cmp	r0, r3
   2a6c2:	d011      	beq.n	2a6e8 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   2a6c4:	2300      	movs	r3, #0
   2a6c6:	6003      	str	r3, [r0, #0]
			return true;
   2a6c8:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2a6ca:	b17b      	cbz	r3, 2a6ec <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   2a6cc:	2300      	movs	r3, #0
   2a6ce:	6243      	str	r3, [r0, #36]	; 0x24
   2a6d0:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2a6d4:	4618      	mov	r0, r3
}
   2a6d6:	bc30      	pop	{r4, r5}
   2a6d8:	4770      	bx	lr
		list->head = node->next;
   2a6da:	6803      	ldr	r3, [r0, #0]
   2a6dc:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   2a6de:	686a      	ldr	r2, [r5, #4]
   2a6e0:	4290      	cmp	r0, r2
   2a6e2:	d1ef      	bne.n	2a6c4 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2a6e4:	606b      	str	r3, [r5, #4]
   2a6e6:	e7ed      	b.n	2a6c4 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   2a6e8:	606a      	str	r2, [r5, #4]
   2a6ea:	e7eb      	b.n	2a6c4 <k_delayed_work_cancel+0x4c>
   2a6ec:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   2a6f0:	f06f 0015 	mvn.w	r0, #21
   2a6f4:	e7ef      	b.n	2a6d6 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2a6f6:	69c2      	ldr	r2, [r0, #28]
   2a6f8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a6fc:	d0e6      	beq.n	2a6cc <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a6fe:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2a702:	4909      	ldr	r1, [pc, #36]	; (2a728 <k_delayed_work_cancel+0xb0>)
   2a704:	6909      	ldr	r1, [r1, #16]
   2a706:	428b      	cmp	r3, r1
   2a708:	d004      	beq.n	2a714 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a70a:	b103      	cbz	r3, 2a70e <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   2a70c:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a70e:	6919      	ldr	r1, [r3, #16]
   2a710:	440a      	add	r2, r1
   2a712:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2a714:	6903      	ldr	r3, [r0, #16]
   2a716:	68c2      	ldr	r2, [r0, #12]
   2a718:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a71a:	68c3      	ldr	r3, [r0, #12]
   2a71c:	6902      	ldr	r2, [r0, #16]
   2a71e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a724:	61c3      	str	r3, [r0, #28]
   2a726:	e7d1      	b.n	2a6cc <k_delayed_work_cancel+0x54>
   2a728:	20002cd8 	.word	0x20002cd8

0002a72c <k_delayed_work_submit_to_queue>:
{
   2a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2a72e:	f04f 0320 	mov.w	r3, #32
   2a732:	f3ef 8711 	mrs	r7, BASEPRI
   2a736:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2a73a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2a73c:	b113      	cbz	r3, 2a744 <k_delayed_work_submit_to_queue+0x18>
   2a73e:	4283      	cmp	r3, r0
   2a740:	f040 80b4 	bne.w	2a8ac <k_delayed_work_submit_to_queue+0x180>
   2a744:	4614      	mov	r4, r2
   2a746:	460e      	mov	r6, r1
   2a748:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2a74a:	4283      	cmp	r3, r0
   2a74c:	d016      	beq.n	2a77c <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2a74e:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   2a750:	b1d4      	cbz	r4, 2a788 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2a752:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2a756:	f104 0309 	add.w	r3, r4, #9
   2a75a:	4c57      	ldr	r4, [pc, #348]	; (2a8b8 <k_delayed_work_submit_to_queue+0x18c>)
   2a75c:	fba4 2303 	umull	r2, r3, r4, r3
   2a760:	08db      	lsrs	r3, r3, #3
   2a762:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a764:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2a766:	2200      	movs	r2, #0
   2a768:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a76a:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2a76c:	b32b      	cbz	r3, 2a7ba <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2a76e:	4a53      	ldr	r2, [pc, #332]	; (2a8bc <k_delayed_work_submit_to_queue+0x190>)
   2a770:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a774:	4293      	cmp	r3, r2
   2a776:	d172      	bne.n	2a85e <k_delayed_work_submit_to_queue+0x132>
   2a778:	2300      	movs	r3, #0
   2a77a:	e070      	b.n	2a85e <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2a77c:	4608      	mov	r0, r1
   2a77e:	f7ff ff7b 	bl	2a678 <k_delayed_work_cancel>
		if (err < 0) {
   2a782:	2800      	cmp	r0, #0
   2a784:	dae3      	bge.n	2a74e <k_delayed_work_submit_to_queue+0x22>
   2a786:	e08e      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a788:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a78c:	f3bf 8f5b 	dmb	ish
   2a790:	e853 2f00 	ldrex	r2, [r3]
   2a794:	f042 0101 	orr.w	r1, r2, #1
   2a798:	e843 1000 	strex	r0, r1, [r3]
   2a79c:	2800      	cmp	r0, #0
   2a79e:	d1f7      	bne.n	2a790 <k_delayed_work_submit_to_queue+0x64>
   2a7a0:	f3bf 8f5b 	dmb	ish
   2a7a4:	f012 0f01 	tst.w	r2, #1
   2a7a8:	d001      	beq.n	2a7ae <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   2a7aa:	2000      	movs	r0, #0
   2a7ac:	e07b      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   2a7ae:	4631      	mov	r1, r6
   2a7b0:	4628      	mov	r0, r5
   2a7b2:	f7fe fddb 	bl	2936c <k_queue_append>
   2a7b6:	2000      	movs	r0, #0
   2a7b8:	e075      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   2a7ba:	4610      	mov	r0, r2
   2a7bc:	f04f 0320 	mov.w	r3, #32
   2a7c0:	f3ef 8411 	mrs	r4, BASEPRI
   2a7c4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a7cc:	612b      	str	r3, [r5, #16]
	if (thread) {
   2a7ce:	b322      	cbz	r2, 2a81a <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   2a7d0:	68eb      	ldr	r3, [r5, #12]
   2a7d2:	b153      	cbz	r3, 2a7ea <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2a7d4:	6853      	ldr	r3, [r2, #4]
   2a7d6:	6812      	ldr	r2, [r2, #0]
   2a7d8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a7da:	6803      	ldr	r3, [r0, #0]
   2a7dc:	6842      	ldr	r2, [r0, #4]
   2a7de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a7e0:	7a43      	ldrb	r3, [r0, #9]
   2a7e2:	f023 0302 	bic.w	r3, r3, #2
   2a7e6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a7e8:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a7ea:	7a43      	ldrb	r3, [r0, #9]
   2a7ec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a7f0:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a7f2:	f013 0f1b 	tst.w	r3, #27
   2a7f6:	d107      	bne.n	2a808 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a7f8:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a7fe:	d001      	beq.n	2a804 <k_delayed_work_submit_to_queue+0xd8>
   2a800:	2300      	movs	r3, #0
   2a802:	e002      	b.n	2a80a <k_delayed_work_submit_to_queue+0xde>
   2a804:	2301      	movs	r3, #1
   2a806:	e000      	b.n	2a80a <k_delayed_work_submit_to_queue+0xde>
   2a808:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a80a:	b91b      	cbnz	r3, 2a814 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a80c:	f384 8811 	msr	BASEPRI, r4
   2a810:	2000      	movs	r0, #0
   2a812:	e048      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2a814:	f7fe fe24 	bl	29460 <_add_thread_to_ready_q>
   2a818:	e7f8      	b.n	2a80c <k_delayed_work_submit_to_queue+0xe0>
   2a81a:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2a81e:	696b      	ldr	r3, [r5, #20]
   2a820:	2b00      	cmp	r3, #0
   2a822:	d046      	beq.n	2a8b2 <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2a824:	4628      	mov	r0, r5
   2a826:	4798      	blx	r3
   2a828:	2000      	movs	r0, #0
   2a82a:	e03c      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2a82c:	1aa2      	subs	r2, r4, r2
   2a82e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a830:	b13b      	cbz	r3, 2a842 <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2a832:	685a      	ldr	r2, [r3, #4]
   2a834:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2a836:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   2a838:	685a      	ldr	r2, [r3, #4]
   2a83a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2a83c:	605d      	str	r5, [r3, #4]
   2a83e:	2000      	movs	r0, #0
   2a840:	e031      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2a842:	4b1f      	ldr	r3, [pc, #124]	; (2a8c0 <k_delayed_work_submit_to_queue+0x194>)
   2a844:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a846:	685a      	ldr	r2, [r3, #4]
   2a848:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a84a:	685a      	ldr	r2, [r3, #4]
   2a84c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a84e:	605d      	str	r5, [r3, #4]
   2a850:	2000      	movs	r0, #0
   2a852:	e028      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a854:	4619      	mov	r1, r3
   2a856:	e011      	b.n	2a87c <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   2a858:	2100      	movs	r1, #0
   2a85a:	e00f      	b.n	2a87c <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a85c:	2300      	movs	r3, #0
   2a85e:	b1d3      	cbz	r3, 2a896 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a860:	692a      	ldr	r2, [r5, #16]
   2a862:	691c      	ldr	r4, [r3, #16]
   2a864:	42a2      	cmp	r2, r4
   2a866:	dde1      	ble.n	2a82c <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   2a868:	1b12      	subs	r2, r2, r4
   2a86a:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a86c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a86e:	2b00      	cmp	r3, #0
   2a870:	d0f0      	beq.n	2a854 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2a872:	4912      	ldr	r1, [pc, #72]	; (2a8bc <k_delayed_work_submit_to_queue+0x190>)
   2a874:	6909      	ldr	r1, [r1, #16]
   2a876:	428b      	cmp	r3, r1
   2a878:	d0ee      	beq.n	2a858 <k_delayed_work_submit_to_queue+0x12c>
   2a87a:	6819      	ldr	r1, [r3, #0]
   2a87c:	2900      	cmp	r1, #0
   2a87e:	d0ed      	beq.n	2a85c <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a880:	b12a      	cbz	r2, 2a88e <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2a882:	490e      	ldr	r1, [pc, #56]	; (2a8bc <k_delayed_work_submit_to_queue+0x190>)
   2a884:	6909      	ldr	r1, [r1, #16]
   2a886:	428a      	cmp	r2, r1
   2a888:	d003      	beq.n	2a892 <k_delayed_work_submit_to_queue+0x166>
   2a88a:	681b      	ldr	r3, [r3, #0]
   2a88c:	e7e7      	b.n	2a85e <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a88e:	2300      	movs	r3, #0
   2a890:	e7e5      	b.n	2a85e <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2a892:	2300      	movs	r3, #0
   2a894:	e7e3      	b.n	2a85e <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2a896:	4b0a      	ldr	r3, [pc, #40]	; (2a8c0 <k_delayed_work_submit_to_queue+0x194>)
   2a898:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a89a:	685a      	ldr	r2, [r3, #4]
   2a89c:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a89e:	685a      	ldr	r2, [r3, #4]
   2a8a0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a8a2:	605d      	str	r5, [r3, #4]
   2a8a4:	2000      	movs	r0, #0
   2a8a6:	f387 8811 	msr	BASEPRI, r7
}
   2a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2a8ac:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2a8b0:	e7f9      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2a8b2:	2000      	movs	r0, #0
   2a8b4:	e7f7      	b.n	2a8a6 <k_delayed_work_submit_to_queue+0x17a>
   2a8b6:	bf00      	nop
   2a8b8:	cccccccd 	.word	0xcccccccd
   2a8bc:	20002cd8 	.word	0x20002cd8
   2a8c0:	20002ce4 	.word	0x20002ce4

0002a8c4 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a8c4:	4770      	bx	lr
	...

0002a8c8 <__locale_ctype_ptr_l>:
   2a8c8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a8cc:	4770      	bx	lr
   2a8ce:	bf00      	nop

0002a8d0 <__locale_ctype_ptr>:
   2a8d0:	4b04      	ldr	r3, [pc, #16]	; (2a8e4 <__locale_ctype_ptr+0x14>)
   2a8d2:	4a05      	ldr	r2, [pc, #20]	; (2a8e8 <__locale_ctype_ptr+0x18>)
   2a8d4:	681b      	ldr	r3, [r3, #0]
   2a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a8d8:	2b00      	cmp	r3, #0
   2a8da:	bf08      	it	eq
   2a8dc:	4613      	moveq	r3, r2
   2a8de:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a8e2:	4770      	bx	lr
   2a8e4:	2000cc80 	.word	0x2000cc80
   2a8e8:	2000cb14 	.word	0x2000cb14

0002a8ec <__ascii_mbtowc>:
   2a8ec:	b082      	sub	sp, #8
   2a8ee:	b149      	cbz	r1, 2a904 <__ascii_mbtowc+0x18>
   2a8f0:	b15a      	cbz	r2, 2a90a <__ascii_mbtowc+0x1e>
   2a8f2:	b16b      	cbz	r3, 2a910 <__ascii_mbtowc+0x24>
   2a8f4:	7813      	ldrb	r3, [r2, #0]
   2a8f6:	600b      	str	r3, [r1, #0]
   2a8f8:	7812      	ldrb	r2, [r2, #0]
   2a8fa:	1c10      	adds	r0, r2, #0
   2a8fc:	bf18      	it	ne
   2a8fe:	2001      	movne	r0, #1
   2a900:	b002      	add	sp, #8
   2a902:	4770      	bx	lr
   2a904:	a901      	add	r1, sp, #4
   2a906:	2a00      	cmp	r2, #0
   2a908:	d1f3      	bne.n	2a8f2 <__ascii_mbtowc+0x6>
   2a90a:	4610      	mov	r0, r2
   2a90c:	b002      	add	sp, #8
   2a90e:	4770      	bx	lr
   2a910:	f06f 0001 	mvn.w	r0, #1
   2a914:	e7f4      	b.n	2a900 <__ascii_mbtowc+0x14>
   2a916:	bf00      	nop

0002a918 <memcmp>:
   2a918:	2a03      	cmp	r2, #3
   2a91a:	b470      	push	{r4, r5, r6}
   2a91c:	d922      	bls.n	2a964 <memcmp+0x4c>
   2a91e:	ea40 0301 	orr.w	r3, r0, r1
   2a922:	079b      	lsls	r3, r3, #30
   2a924:	d011      	beq.n	2a94a <memcmp+0x32>
   2a926:	7803      	ldrb	r3, [r0, #0]
   2a928:	780c      	ldrb	r4, [r1, #0]
   2a92a:	42a3      	cmp	r3, r4
   2a92c:	d11d      	bne.n	2a96a <memcmp+0x52>
   2a92e:	440a      	add	r2, r1
   2a930:	3101      	adds	r1, #1
   2a932:	e005      	b.n	2a940 <memcmp+0x28>
   2a934:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a938:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a93c:	42a3      	cmp	r3, r4
   2a93e:	d114      	bne.n	2a96a <memcmp+0x52>
   2a940:	4291      	cmp	r1, r2
   2a942:	d1f7      	bne.n	2a934 <memcmp+0x1c>
   2a944:	2000      	movs	r0, #0
   2a946:	bc70      	pop	{r4, r5, r6}
   2a948:	4770      	bx	lr
   2a94a:	680d      	ldr	r5, [r1, #0]
   2a94c:	6806      	ldr	r6, [r0, #0]
   2a94e:	42ae      	cmp	r6, r5
   2a950:	460c      	mov	r4, r1
   2a952:	4603      	mov	r3, r0
   2a954:	f101 0104 	add.w	r1, r1, #4
   2a958:	f100 0004 	add.w	r0, r0, #4
   2a95c:	d108      	bne.n	2a970 <memcmp+0x58>
   2a95e:	3a04      	subs	r2, #4
   2a960:	2a03      	cmp	r2, #3
   2a962:	d8f2      	bhi.n	2a94a <memcmp+0x32>
   2a964:	2a00      	cmp	r2, #0
   2a966:	d1de      	bne.n	2a926 <memcmp+0xe>
   2a968:	e7ec      	b.n	2a944 <memcmp+0x2c>
   2a96a:	1b18      	subs	r0, r3, r4
   2a96c:	bc70      	pop	{r4, r5, r6}
   2a96e:	4770      	bx	lr
   2a970:	4621      	mov	r1, r4
   2a972:	4618      	mov	r0, r3
   2a974:	e7d7      	b.n	2a926 <memcmp+0xe>
   2a976:	bf00      	nop

0002a978 <memmove>:
   2a978:	4288      	cmp	r0, r1
   2a97a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a97c:	d90d      	bls.n	2a99a <memmove+0x22>
   2a97e:	188b      	adds	r3, r1, r2
   2a980:	4298      	cmp	r0, r3
   2a982:	d20a      	bcs.n	2a99a <memmove+0x22>
   2a984:	1884      	adds	r4, r0, r2
   2a986:	2a00      	cmp	r2, #0
   2a988:	d051      	beq.n	2aa2e <memmove+0xb6>
   2a98a:	4622      	mov	r2, r4
   2a98c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a990:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a994:	4299      	cmp	r1, r3
   2a996:	d1f9      	bne.n	2a98c <memmove+0x14>
   2a998:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a99a:	2a0f      	cmp	r2, #15
   2a99c:	d948      	bls.n	2aa30 <memmove+0xb8>
   2a99e:	ea41 0300 	orr.w	r3, r1, r0
   2a9a2:	079b      	lsls	r3, r3, #30
   2a9a4:	d146      	bne.n	2aa34 <memmove+0xbc>
   2a9a6:	f100 0410 	add.w	r4, r0, #16
   2a9aa:	f101 0310 	add.w	r3, r1, #16
   2a9ae:	4615      	mov	r5, r2
   2a9b0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a9b4:	f844 6c10 	str.w	r6, [r4, #-16]
   2a9b8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a9bc:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a9c0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a9c4:	f844 6c08 	str.w	r6, [r4, #-8]
   2a9c8:	3d10      	subs	r5, #16
   2a9ca:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a9ce:	f844 6c04 	str.w	r6, [r4, #-4]
   2a9d2:	2d0f      	cmp	r5, #15
   2a9d4:	f103 0310 	add.w	r3, r3, #16
   2a9d8:	f104 0410 	add.w	r4, r4, #16
   2a9dc:	d8e8      	bhi.n	2a9b0 <memmove+0x38>
   2a9de:	f1a2 0310 	sub.w	r3, r2, #16
   2a9e2:	f023 030f 	bic.w	r3, r3, #15
   2a9e6:	f002 0e0f 	and.w	lr, r2, #15
   2a9ea:	3310      	adds	r3, #16
   2a9ec:	f1be 0f03 	cmp.w	lr, #3
   2a9f0:	4419      	add	r1, r3
   2a9f2:	4403      	add	r3, r0
   2a9f4:	d921      	bls.n	2aa3a <memmove+0xc2>
   2a9f6:	1f1e      	subs	r6, r3, #4
   2a9f8:	460d      	mov	r5, r1
   2a9fa:	4674      	mov	r4, lr
   2a9fc:	3c04      	subs	r4, #4
   2a9fe:	f855 7b04 	ldr.w	r7, [r5], #4
   2aa02:	f846 7f04 	str.w	r7, [r6, #4]!
   2aa06:	2c03      	cmp	r4, #3
   2aa08:	d8f8      	bhi.n	2a9fc <memmove+0x84>
   2aa0a:	f1ae 0404 	sub.w	r4, lr, #4
   2aa0e:	f024 0403 	bic.w	r4, r4, #3
   2aa12:	3404      	adds	r4, #4
   2aa14:	4421      	add	r1, r4
   2aa16:	4423      	add	r3, r4
   2aa18:	f002 0203 	and.w	r2, r2, #3
   2aa1c:	b162      	cbz	r2, 2aa38 <memmove+0xc0>
   2aa1e:	3b01      	subs	r3, #1
   2aa20:	440a      	add	r2, r1
   2aa22:	f811 4b01 	ldrb.w	r4, [r1], #1
   2aa26:	f803 4f01 	strb.w	r4, [r3, #1]!
   2aa2a:	428a      	cmp	r2, r1
   2aa2c:	d1f9      	bne.n	2aa22 <memmove+0xaa>
   2aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa30:	4603      	mov	r3, r0
   2aa32:	e7f3      	b.n	2aa1c <memmove+0xa4>
   2aa34:	4603      	mov	r3, r0
   2aa36:	e7f2      	b.n	2aa1e <memmove+0xa6>
   2aa38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa3a:	4672      	mov	r2, lr
   2aa3c:	e7ee      	b.n	2aa1c <memmove+0xa4>
   2aa3e:	bf00      	nop

0002aa40 <memset>:
   2aa40:	b470      	push	{r4, r5, r6}
   2aa42:	0786      	lsls	r6, r0, #30
   2aa44:	d046      	beq.n	2aad4 <memset+0x94>
   2aa46:	1e54      	subs	r4, r2, #1
   2aa48:	2a00      	cmp	r2, #0
   2aa4a:	d041      	beq.n	2aad0 <memset+0x90>
   2aa4c:	b2ca      	uxtb	r2, r1
   2aa4e:	4603      	mov	r3, r0
   2aa50:	e002      	b.n	2aa58 <memset+0x18>
   2aa52:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2aa56:	d33b      	bcc.n	2aad0 <memset+0x90>
   2aa58:	f803 2b01 	strb.w	r2, [r3], #1
   2aa5c:	079d      	lsls	r5, r3, #30
   2aa5e:	d1f8      	bne.n	2aa52 <memset+0x12>
   2aa60:	2c03      	cmp	r4, #3
   2aa62:	d92e      	bls.n	2aac2 <memset+0x82>
   2aa64:	b2cd      	uxtb	r5, r1
   2aa66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2aa6a:	2c0f      	cmp	r4, #15
   2aa6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2aa70:	d919      	bls.n	2aaa6 <memset+0x66>
   2aa72:	f103 0210 	add.w	r2, r3, #16
   2aa76:	4626      	mov	r6, r4
   2aa78:	3e10      	subs	r6, #16
   2aa7a:	2e0f      	cmp	r6, #15
   2aa7c:	f842 5c10 	str.w	r5, [r2, #-16]
   2aa80:	f842 5c0c 	str.w	r5, [r2, #-12]
   2aa84:	f842 5c08 	str.w	r5, [r2, #-8]
   2aa88:	f842 5c04 	str.w	r5, [r2, #-4]
   2aa8c:	f102 0210 	add.w	r2, r2, #16
   2aa90:	d8f2      	bhi.n	2aa78 <memset+0x38>
   2aa92:	f1a4 0210 	sub.w	r2, r4, #16
   2aa96:	f022 020f 	bic.w	r2, r2, #15
   2aa9a:	f004 040f 	and.w	r4, r4, #15
   2aa9e:	3210      	adds	r2, #16
   2aaa0:	2c03      	cmp	r4, #3
   2aaa2:	4413      	add	r3, r2
   2aaa4:	d90d      	bls.n	2aac2 <memset+0x82>
   2aaa6:	461e      	mov	r6, r3
   2aaa8:	4622      	mov	r2, r4
   2aaaa:	3a04      	subs	r2, #4
   2aaac:	2a03      	cmp	r2, #3
   2aaae:	f846 5b04 	str.w	r5, [r6], #4
   2aab2:	d8fa      	bhi.n	2aaaa <memset+0x6a>
   2aab4:	1f22      	subs	r2, r4, #4
   2aab6:	f022 0203 	bic.w	r2, r2, #3
   2aaba:	3204      	adds	r2, #4
   2aabc:	4413      	add	r3, r2
   2aabe:	f004 0403 	and.w	r4, r4, #3
   2aac2:	b12c      	cbz	r4, 2aad0 <memset+0x90>
   2aac4:	b2c9      	uxtb	r1, r1
   2aac6:	441c      	add	r4, r3
   2aac8:	f803 1b01 	strb.w	r1, [r3], #1
   2aacc:	429c      	cmp	r4, r3
   2aace:	d1fb      	bne.n	2aac8 <memset+0x88>
   2aad0:	bc70      	pop	{r4, r5, r6}
   2aad2:	4770      	bx	lr
   2aad4:	4614      	mov	r4, r2
   2aad6:	4603      	mov	r3, r0
   2aad8:	e7c2      	b.n	2aa60 <memset+0x20>
   2aada:	bf00      	nop

0002aadc <snprintf>:
   2aadc:	b40c      	push	{r2, r3}
   2aade:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aae0:	4b23      	ldr	r3, [pc, #140]	; (2ab70 <snprintf+0x94>)
   2aae2:	1e0c      	subs	r4, r1, #0
   2aae4:	b09d      	sub	sp, #116	; 0x74
   2aae6:	681d      	ldr	r5, [r3, #0]
   2aae8:	db3d      	blt.n	2ab66 <snprintf+0x8a>
   2aaea:	f44f 7302 	mov.w	r3, #520	; 0x208
   2aaee:	9002      	str	r0, [sp, #8]
   2aaf0:	9006      	str	r0, [sp, #24]
   2aaf2:	f8ad 3014 	strh.w	r3, [sp, #20]
   2aaf6:	ae23      	add	r6, sp, #140	; 0x8c
   2aaf8:	d017      	beq.n	2ab2a <snprintf+0x4e>
   2aafa:	3c01      	subs	r4, #1
   2aafc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aafe:	9404      	str	r4, [sp, #16]
   2ab00:	4633      	mov	r3, r6
   2ab02:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2ab06:	a902      	add	r1, sp, #8
   2ab08:	4628      	mov	r0, r5
   2ab0a:	9407      	str	r4, [sp, #28]
   2ab0c:	9601      	str	r6, [sp, #4]
   2ab0e:	f8ad 7016 	strh.w	r7, [sp, #22]
   2ab12:	f000 fd7f 	bl	2b614 <_svfprintf_r>
   2ab16:	1c42      	adds	r2, r0, #1
   2ab18:	db1b      	blt.n	2ab52 <snprintf+0x76>
   2ab1a:	9b02      	ldr	r3, [sp, #8]
   2ab1c:	2200      	movs	r2, #0
   2ab1e:	701a      	strb	r2, [r3, #0]
   2ab20:	b01d      	add	sp, #116	; 0x74
   2ab22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab26:	b002      	add	sp, #8
   2ab28:	4770      	bx	lr
   2ab2a:	4633      	mov	r3, r6
   2ab2c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2ab30:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ab32:	9404      	str	r4, [sp, #16]
   2ab34:	a902      	add	r1, sp, #8
   2ab36:	4628      	mov	r0, r5
   2ab38:	9407      	str	r4, [sp, #28]
   2ab3a:	9601      	str	r6, [sp, #4]
   2ab3c:	f8ad 7016 	strh.w	r7, [sp, #22]
   2ab40:	f000 fd68 	bl	2b614 <_svfprintf_r>
   2ab44:	1c43      	adds	r3, r0, #1
   2ab46:	db07      	blt.n	2ab58 <snprintf+0x7c>
   2ab48:	b01d      	add	sp, #116	; 0x74
   2ab4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab4e:	b002      	add	sp, #8
   2ab50:	4770      	bx	lr
   2ab52:	238b      	movs	r3, #139	; 0x8b
   2ab54:	602b      	str	r3, [r5, #0]
   2ab56:	e7e0      	b.n	2ab1a <snprintf+0x3e>
   2ab58:	238b      	movs	r3, #139	; 0x8b
   2ab5a:	602b      	str	r3, [r5, #0]
   2ab5c:	b01d      	add	sp, #116	; 0x74
   2ab5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab62:	b002      	add	sp, #8
   2ab64:	4770      	bx	lr
   2ab66:	238b      	movs	r3, #139	; 0x8b
   2ab68:	602b      	str	r3, [r5, #0]
   2ab6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ab6e:	e7eb      	b.n	2ab48 <snprintf+0x6c>
   2ab70:	2000cc80 	.word	0x2000cc80

0002ab74 <strcat>:
   2ab74:	0783      	lsls	r3, r0, #30
   2ab76:	b510      	push	{r4, lr}
   2ab78:	4604      	mov	r4, r0
   2ab7a:	d110      	bne.n	2ab9e <strcat+0x2a>
   2ab7c:	6802      	ldr	r2, [r0, #0]
   2ab7e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2ab82:	ea23 0302 	bic.w	r3, r3, r2
   2ab86:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab8a:	d108      	bne.n	2ab9e <strcat+0x2a>
   2ab8c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2ab90:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2ab94:	ea23 0302 	bic.w	r3, r3, r2
   2ab98:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab9c:	d0f6      	beq.n	2ab8c <strcat+0x18>
   2ab9e:	7803      	ldrb	r3, [r0, #0]
   2aba0:	b11b      	cbz	r3, 2abaa <strcat+0x36>
   2aba2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2aba6:	2b00      	cmp	r3, #0
   2aba8:	d1fb      	bne.n	2aba2 <strcat+0x2e>
   2abaa:	f000 f877 	bl	2ac9c <strcpy>
   2abae:	4620      	mov	r0, r4
   2abb0:	bd10      	pop	{r4, pc}
   2abb2:	bf00      	nop

0002abb4 <strchr>:
   2abb4:	b2c9      	uxtb	r1, r1
   2abb6:	2900      	cmp	r1, #0
   2abb8:	d041      	beq.n	2ac3e <strchr+0x8a>
   2abba:	0782      	lsls	r2, r0, #30
   2abbc:	b4f0      	push	{r4, r5, r6, r7}
   2abbe:	d067      	beq.n	2ac90 <strchr+0xdc>
   2abc0:	7803      	ldrb	r3, [r0, #0]
   2abc2:	2b00      	cmp	r3, #0
   2abc4:	d068      	beq.n	2ac98 <strchr+0xe4>
   2abc6:	4299      	cmp	r1, r3
   2abc8:	d037      	beq.n	2ac3a <strchr+0x86>
   2abca:	1c43      	adds	r3, r0, #1
   2abcc:	e004      	b.n	2abd8 <strchr+0x24>
   2abce:	f813 0b01 	ldrb.w	r0, [r3], #1
   2abd2:	b390      	cbz	r0, 2ac3a <strchr+0x86>
   2abd4:	4281      	cmp	r1, r0
   2abd6:	d02f      	beq.n	2ac38 <strchr+0x84>
   2abd8:	079a      	lsls	r2, r3, #30
   2abda:	461c      	mov	r4, r3
   2abdc:	d1f7      	bne.n	2abce <strchr+0x1a>
   2abde:	6825      	ldr	r5, [r4, #0]
   2abe0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2abe4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2abe8:	ea83 0605 	eor.w	r6, r3, r5
   2abec:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2abf0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2abf4:	ea20 0006 	bic.w	r0, r0, r6
   2abf8:	ea22 0205 	bic.w	r2, r2, r5
   2abfc:	4302      	orrs	r2, r0
   2abfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac02:	d111      	bne.n	2ac28 <strchr+0x74>
   2ac04:	4620      	mov	r0, r4
   2ac06:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2ac0a:	ea83 0706 	eor.w	r7, r3, r6
   2ac0e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2ac12:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2ac16:	ea25 0507 	bic.w	r5, r5, r7
   2ac1a:	ea22 0206 	bic.w	r2, r2, r6
   2ac1e:	432a      	orrs	r2, r5
   2ac20:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac24:	d0ef      	beq.n	2ac06 <strchr+0x52>
   2ac26:	4604      	mov	r4, r0
   2ac28:	7820      	ldrb	r0, [r4, #0]
   2ac2a:	b918      	cbnz	r0, 2ac34 <strchr+0x80>
   2ac2c:	e005      	b.n	2ac3a <strchr+0x86>
   2ac2e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ac32:	b110      	cbz	r0, 2ac3a <strchr+0x86>
   2ac34:	4281      	cmp	r1, r0
   2ac36:	d1fa      	bne.n	2ac2e <strchr+0x7a>
   2ac38:	4620      	mov	r0, r4
   2ac3a:	bcf0      	pop	{r4, r5, r6, r7}
   2ac3c:	4770      	bx	lr
   2ac3e:	0783      	lsls	r3, r0, #30
   2ac40:	d024      	beq.n	2ac8c <strchr+0xd8>
   2ac42:	7803      	ldrb	r3, [r0, #0]
   2ac44:	2b00      	cmp	r3, #0
   2ac46:	d0f9      	beq.n	2ac3c <strchr+0x88>
   2ac48:	1c43      	adds	r3, r0, #1
   2ac4a:	e003      	b.n	2ac54 <strchr+0xa0>
   2ac4c:	7802      	ldrb	r2, [r0, #0]
   2ac4e:	3301      	adds	r3, #1
   2ac50:	2a00      	cmp	r2, #0
   2ac52:	d0f3      	beq.n	2ac3c <strchr+0x88>
   2ac54:	0799      	lsls	r1, r3, #30
   2ac56:	4618      	mov	r0, r3
   2ac58:	d1f8      	bne.n	2ac4c <strchr+0x98>
   2ac5a:	6819      	ldr	r1, [r3, #0]
   2ac5c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ac60:	ea22 0201 	bic.w	r2, r2, r1
   2ac64:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac68:	d108      	bne.n	2ac7c <strchr+0xc8>
   2ac6a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2ac6e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ac72:	ea22 0201 	bic.w	r2, r2, r1
   2ac76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac7a:	d0f6      	beq.n	2ac6a <strchr+0xb6>
   2ac7c:	781a      	ldrb	r2, [r3, #0]
   2ac7e:	4618      	mov	r0, r3
   2ac80:	b142      	cbz	r2, 2ac94 <strchr+0xe0>
   2ac82:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ac86:	2b00      	cmp	r3, #0
   2ac88:	d1fb      	bne.n	2ac82 <strchr+0xce>
   2ac8a:	4770      	bx	lr
   2ac8c:	4603      	mov	r3, r0
   2ac8e:	e7e4      	b.n	2ac5a <strchr+0xa6>
   2ac90:	4604      	mov	r4, r0
   2ac92:	e7a4      	b.n	2abde <strchr+0x2a>
   2ac94:	4618      	mov	r0, r3
   2ac96:	4770      	bx	lr
   2ac98:	4618      	mov	r0, r3
   2ac9a:	e7ce      	b.n	2ac3a <strchr+0x86>

0002ac9c <strcpy>:
   2ac9c:	ea80 0201 	eor.w	r2, r0, r1
   2aca0:	4684      	mov	ip, r0
   2aca2:	f012 0f03 	tst.w	r2, #3
   2aca6:	d14f      	bne.n	2ad48 <strcpy+0xac>
   2aca8:	f011 0f03 	tst.w	r1, #3
   2acac:	d132      	bne.n	2ad14 <strcpy+0x78>
   2acae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2acb2:	f011 0f04 	tst.w	r1, #4
   2acb6:	f851 3b04 	ldr.w	r3, [r1], #4
   2acba:	d00b      	beq.n	2acd4 <strcpy+0x38>
   2acbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2acc0:	439a      	bics	r2, r3
   2acc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2acc6:	bf04      	itt	eq
   2acc8:	f84c 3b04 	streq.w	r3, [ip], #4
   2accc:	f851 3b04 	ldreq.w	r3, [r1], #4
   2acd0:	d116      	bne.n	2ad00 <strcpy+0x64>
   2acd2:	bf00      	nop
   2acd4:	f851 4b04 	ldr.w	r4, [r1], #4
   2acd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2acdc:	439a      	bics	r2, r3
   2acde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ace2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ace6:	d10b      	bne.n	2ad00 <strcpy+0x64>
   2ace8:	f84c 3b04 	str.w	r3, [ip], #4
   2acec:	43a2      	bics	r2, r4
   2acee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2acf2:	bf04      	itt	eq
   2acf4:	f851 3b04 	ldreq.w	r3, [r1], #4
   2acf8:	f84c 4b04 	streq.w	r4, [ip], #4
   2acfc:	d0ea      	beq.n	2acd4 <strcpy+0x38>
   2acfe:	4623      	mov	r3, r4
   2ad00:	f80c 3b01 	strb.w	r3, [ip], #1
   2ad04:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ad08:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ad0c:	d1f8      	bne.n	2ad00 <strcpy+0x64>
   2ad0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ad12:	4770      	bx	lr
   2ad14:	f011 0f01 	tst.w	r1, #1
   2ad18:	d006      	beq.n	2ad28 <strcpy+0x8c>
   2ad1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad1e:	f80c 2b01 	strb.w	r2, [ip], #1
   2ad22:	2a00      	cmp	r2, #0
   2ad24:	bf08      	it	eq
   2ad26:	4770      	bxeq	lr
   2ad28:	f011 0f02 	tst.w	r1, #2
   2ad2c:	d0bf      	beq.n	2acae <strcpy+0x12>
   2ad2e:	f831 2b02 	ldrh.w	r2, [r1], #2
   2ad32:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ad36:	bf16      	itet	ne
   2ad38:	f82c 2b02 	strhne.w	r2, [ip], #2
   2ad3c:	f88c 2000 	strbeq.w	r2, [ip]
   2ad40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2ad44:	d1b3      	bne.n	2acae <strcpy+0x12>
   2ad46:	4770      	bx	lr
   2ad48:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad4c:	f80c 2b01 	strb.w	r2, [ip], #1
   2ad50:	2a00      	cmp	r2, #0
   2ad52:	d1f9      	bne.n	2ad48 <strcpy+0xac>
   2ad54:	4770      	bx	lr
   2ad56:	bf00      	nop

0002ad58 <strncmp>:
   2ad58:	2a00      	cmp	r2, #0
   2ad5a:	d041      	beq.n	2ade0 <strncmp+0x88>
   2ad5c:	ea40 0301 	orr.w	r3, r0, r1
   2ad60:	f013 0303 	ands.w	r3, r3, #3
   2ad64:	b4f0      	push	{r4, r5, r6, r7}
   2ad66:	d125      	bne.n	2adb4 <strncmp+0x5c>
   2ad68:	2a03      	cmp	r2, #3
   2ad6a:	d923      	bls.n	2adb4 <strncmp+0x5c>
   2ad6c:	6804      	ldr	r4, [r0, #0]
   2ad6e:	680d      	ldr	r5, [r1, #0]
   2ad70:	42ac      	cmp	r4, r5
   2ad72:	d11f      	bne.n	2adb4 <strncmp+0x5c>
   2ad74:	3a04      	subs	r2, #4
   2ad76:	d038      	beq.n	2adea <strncmp+0x92>
   2ad78:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2ad7c:	ea25 0404 	bic.w	r4, r5, r4
   2ad80:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ad84:	d12e      	bne.n	2ade4 <strncmp+0x8c>
   2ad86:	3004      	adds	r0, #4
   2ad88:	3104      	adds	r1, #4
   2ad8a:	e00f      	b.n	2adac <strncmp+0x54>
   2ad8c:	f850 3b04 	ldr.w	r3, [r0], #4
   2ad90:	680e      	ldr	r6, [r1, #0]
   2ad92:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2ad96:	42b3      	cmp	r3, r6
   2ad98:	ea24 0403 	bic.w	r4, r4, r3
   2ad9c:	f101 0104 	add.w	r1, r1, #4
   2ada0:	d126      	bne.n	2adf0 <strncmp+0x98>
   2ada2:	3a04      	subs	r2, #4
   2ada4:	d021      	beq.n	2adea <strncmp+0x92>
   2ada6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2adaa:	d11b      	bne.n	2ade4 <strncmp+0x8c>
   2adac:	2a03      	cmp	r2, #3
   2adae:	4607      	mov	r7, r0
   2adb0:	460d      	mov	r5, r1
   2adb2:	d8eb      	bhi.n	2ad8c <strncmp+0x34>
   2adb4:	7805      	ldrb	r5, [r0, #0]
   2adb6:	780c      	ldrb	r4, [r1, #0]
   2adb8:	42ac      	cmp	r4, r5
   2adba:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2adbe:	d11a      	bne.n	2adf6 <strncmp+0x9e>
   2adc0:	b183      	cbz	r3, 2ade4 <strncmp+0x8c>
   2adc2:	b914      	cbnz	r4, 2adca <strncmp+0x72>
   2adc4:	e00e      	b.n	2ade4 <strncmp+0x8c>
   2adc6:	b16b      	cbz	r3, 2ade4 <strncmp+0x8c>
   2adc8:	b17a      	cbz	r2, 2adea <strncmp+0x92>
   2adca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2adce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2add2:	42a2      	cmp	r2, r4
   2add4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2add8:	d0f5      	beq.n	2adc6 <strncmp+0x6e>
   2adda:	1b10      	subs	r0, r2, r4
   2addc:	bcf0      	pop	{r4, r5, r6, r7}
   2adde:	4770      	bx	lr
   2ade0:	4610      	mov	r0, r2
   2ade2:	4770      	bx	lr
   2ade4:	2000      	movs	r0, #0
   2ade6:	bcf0      	pop	{r4, r5, r6, r7}
   2ade8:	4770      	bx	lr
   2adea:	4610      	mov	r0, r2
   2adec:	bcf0      	pop	{r4, r5, r6, r7}
   2adee:	4770      	bx	lr
   2adf0:	4629      	mov	r1, r5
   2adf2:	4638      	mov	r0, r7
   2adf4:	e7de      	b.n	2adb4 <strncmp+0x5c>
   2adf6:	462a      	mov	r2, r5
   2adf8:	e7ef      	b.n	2adda <strncmp+0x82>
   2adfa:	bf00      	nop

0002adfc <strncpy>:
   2adfc:	ea40 0301 	orr.w	r3, r0, r1
   2ae00:	f013 0f03 	tst.w	r3, #3
   2ae04:	b470      	push	{r4, r5, r6}
   2ae06:	4603      	mov	r3, r0
   2ae08:	d024      	beq.n	2ae54 <strncpy+0x58>
   2ae0a:	b1a2      	cbz	r2, 2ae36 <strncpy+0x3a>
   2ae0c:	780c      	ldrb	r4, [r1, #0]
   2ae0e:	701c      	strb	r4, [r3, #0]
   2ae10:	3a01      	subs	r2, #1
   2ae12:	3301      	adds	r3, #1
   2ae14:	3101      	adds	r1, #1
   2ae16:	b13c      	cbz	r4, 2ae28 <strncpy+0x2c>
   2ae18:	b16a      	cbz	r2, 2ae36 <strncpy+0x3a>
   2ae1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ae1e:	f803 4b01 	strb.w	r4, [r3], #1
   2ae22:	3a01      	subs	r2, #1
   2ae24:	2c00      	cmp	r4, #0
   2ae26:	d1f7      	bne.n	2ae18 <strncpy+0x1c>
   2ae28:	b12a      	cbz	r2, 2ae36 <strncpy+0x3a>
   2ae2a:	441a      	add	r2, r3
   2ae2c:	2100      	movs	r1, #0
   2ae2e:	f803 1b01 	strb.w	r1, [r3], #1
   2ae32:	429a      	cmp	r2, r3
   2ae34:	d1fb      	bne.n	2ae2e <strncpy+0x32>
   2ae36:	bc70      	pop	{r4, r5, r6}
   2ae38:	4770      	bx	lr
   2ae3a:	460e      	mov	r6, r1
   2ae3c:	f851 5b04 	ldr.w	r5, [r1], #4
   2ae40:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2ae44:	ea24 0405 	bic.w	r4, r4, r5
   2ae48:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ae4c:	d105      	bne.n	2ae5a <strncpy+0x5e>
   2ae4e:	f843 5b04 	str.w	r5, [r3], #4
   2ae52:	3a04      	subs	r2, #4
   2ae54:	2a03      	cmp	r2, #3
   2ae56:	d8f0      	bhi.n	2ae3a <strncpy+0x3e>
   2ae58:	e7d7      	b.n	2ae0a <strncpy+0xe>
   2ae5a:	4631      	mov	r1, r6
   2ae5c:	e7d6      	b.n	2ae0c <strncpy+0x10>
   2ae5e:	bf00      	nop

0002ae60 <strrchr>:
   2ae60:	b171      	cbz	r1, 2ae80 <strrchr+0x20>
   2ae62:	b538      	push	{r3, r4, r5, lr}
   2ae64:	4603      	mov	r3, r0
   2ae66:	460c      	mov	r4, r1
   2ae68:	2500      	movs	r5, #0
   2ae6a:	e001      	b.n	2ae70 <strrchr+0x10>
   2ae6c:	1c43      	adds	r3, r0, #1
   2ae6e:	4605      	mov	r5, r0
   2ae70:	4618      	mov	r0, r3
   2ae72:	4621      	mov	r1, r4
   2ae74:	f7ff fe9e 	bl	2abb4 <strchr>
   2ae78:	2800      	cmp	r0, #0
   2ae7a:	d1f7      	bne.n	2ae6c <strrchr+0xc>
   2ae7c:	4628      	mov	r0, r5
   2ae7e:	bd38      	pop	{r3, r4, r5, pc}
   2ae80:	f7ff be98 	b.w	2abb4 <strchr>

0002ae84 <critical_factorization>:
   2ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae88:	f04f 0e01 	mov.w	lr, #1
   2ae8c:	4674      	mov	r4, lr
   2ae8e:	2500      	movs	r5, #0
   2ae90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2ae94:	192b      	adds	r3, r5, r4
   2ae96:	428b      	cmp	r3, r1
   2ae98:	eb00 0706 	add.w	r7, r0, r6
   2ae9c:	d20d      	bcs.n	2aeba <critical_factorization+0x36>
   2ae9e:	5d3f      	ldrb	r7, [r7, r4]
   2aea0:	f810 c003 	ldrb.w	ip, [r0, r3]
   2aea4:	45bc      	cmp	ip, r7
   2aea6:	d22d      	bcs.n	2af04 <critical_factorization+0x80>
   2aea8:	461d      	mov	r5, r3
   2aeaa:	2401      	movs	r4, #1
   2aeac:	eba3 0e06 	sub.w	lr, r3, r6
   2aeb0:	192b      	adds	r3, r5, r4
   2aeb2:	428b      	cmp	r3, r1
   2aeb4:	eb00 0706 	add.w	r7, r0, r6
   2aeb8:	d3f1      	bcc.n	2ae9e <critical_factorization+0x1a>
   2aeba:	f04f 0801 	mov.w	r8, #1
   2aebe:	f8c2 e000 	str.w	lr, [r2]
   2aec2:	4644      	mov	r4, r8
   2aec4:	2500      	movs	r5, #0
   2aec6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2aeca:	192b      	adds	r3, r5, r4
   2aecc:	4299      	cmp	r1, r3
   2aece:	eb00 0e07 	add.w	lr, r0, r7
   2aed2:	d90e      	bls.n	2aef2 <critical_factorization+0x6e>
   2aed4:	f81e e004 	ldrb.w	lr, [lr, r4]
   2aed8:	f810 c003 	ldrb.w	ip, [r0, r3]
   2aedc:	45f4      	cmp	ip, lr
   2aede:	d918      	bls.n	2af12 <critical_factorization+0x8e>
   2aee0:	461d      	mov	r5, r3
   2aee2:	2401      	movs	r4, #1
   2aee4:	eba3 0807 	sub.w	r8, r3, r7
   2aee8:	192b      	adds	r3, r5, r4
   2aeea:	4299      	cmp	r1, r3
   2aeec:	eb00 0e07 	add.w	lr, r0, r7
   2aef0:	d8f0      	bhi.n	2aed4 <critical_factorization+0x50>
   2aef2:	3701      	adds	r7, #1
   2aef4:	1c70      	adds	r0, r6, #1
   2aef6:	4287      	cmp	r7, r0
   2aef8:	bf24      	itt	cs
   2aefa:	f8c2 8000 	strcs.w	r8, [r2]
   2aefe:	4638      	movcs	r0, r7
   2af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af04:	d00c      	beq.n	2af20 <critical_factorization+0x9c>
   2af06:	f04f 0e01 	mov.w	lr, #1
   2af0a:	462e      	mov	r6, r5
   2af0c:	4674      	mov	r4, lr
   2af0e:	4475      	add	r5, lr
   2af10:	e7c0      	b.n	2ae94 <critical_factorization+0x10>
   2af12:	d00b      	beq.n	2af2c <critical_factorization+0xa8>
   2af14:	f04f 0801 	mov.w	r8, #1
   2af18:	462f      	mov	r7, r5
   2af1a:	4644      	mov	r4, r8
   2af1c:	4445      	add	r5, r8
   2af1e:	e7d4      	b.n	2aeca <critical_factorization+0x46>
   2af20:	4574      	cmp	r4, lr
   2af22:	bf12      	itee	ne
   2af24:	3401      	addne	r4, #1
   2af26:	461d      	moveq	r5, r3
   2af28:	2401      	moveq	r4, #1
   2af2a:	e7b3      	b.n	2ae94 <critical_factorization+0x10>
   2af2c:	4544      	cmp	r4, r8
   2af2e:	bf12      	itee	ne
   2af30:	3401      	addne	r4, #1
   2af32:	461d      	moveq	r5, r3
   2af34:	2401      	moveq	r4, #1
   2af36:	e7c8      	b.n	2aeca <critical_factorization+0x46>

0002af38 <two_way_long_needle>:
   2af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af3c:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2af40:	4616      	mov	r6, r2
   2af42:	4605      	mov	r5, r0
   2af44:	468b      	mov	fp, r1
   2af46:	4610      	mov	r0, r2
   2af48:	4619      	mov	r1, r3
   2af4a:	aa03      	add	r2, sp, #12
   2af4c:	461c      	mov	r4, r3
   2af4e:	f7ff ff99 	bl	2ae84 <critical_factorization>
   2af52:	ab03      	add	r3, sp, #12
   2af54:	4681      	mov	r9, r0
   2af56:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2af5a:	f843 4f04 	str.w	r4, [r3, #4]!
   2af5e:	4293      	cmp	r3, r2
   2af60:	d1fb      	bne.n	2af5a <two_way_long_needle+0x22>
   2af62:	b14c      	cbz	r4, 2af78 <two_way_long_needle+0x40>
   2af64:	1e63      	subs	r3, r4, #1
   2af66:	1e72      	subs	r2, r6, #1
   2af68:	a804      	add	r0, sp, #16
   2af6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2af6e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2af72:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2af76:	d2f8      	bcs.n	2af6a <two_way_long_needle+0x32>
   2af78:	9903      	ldr	r1, [sp, #12]
   2af7a:	464a      	mov	r2, r9
   2af7c:	4431      	add	r1, r6
   2af7e:	4630      	mov	r0, r6
   2af80:	f7ff fcca 	bl	2a918 <memcmp>
   2af84:	2800      	cmp	r0, #0
   2af86:	d16f      	bne.n	2b068 <two_way_long_needle+0x130>
   2af88:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2af8c:	9300      	str	r3, [sp, #0]
   2af8e:	18f3      	adds	r3, r6, r3
   2af90:	4682      	mov	sl, r0
   2af92:	9301      	str	r3, [sp, #4]
   2af94:	4623      	mov	r3, r4
   2af96:	4680      	mov	r8, r0
   2af98:	4654      	mov	r4, sl
   2af9a:	4658      	mov	r0, fp
   2af9c:	469a      	mov	sl, r3
   2af9e:	eb08 070a 	add.w	r7, r8, sl
   2afa2:	1a3a      	subs	r2, r7, r0
   2afa4:	2100      	movs	r1, #0
   2afa6:	4428      	add	r0, r5
   2afa8:	f7d5 f93a 	bl	220 <memchr>
   2afac:	2800      	cmp	r0, #0
   2afae:	d156      	bne.n	2b05e <two_way_long_needle+0x126>
   2afb0:	2f00      	cmp	r7, #0
   2afb2:	d054      	beq.n	2b05e <two_way_long_needle+0x126>
   2afb4:	19eb      	adds	r3, r5, r7
   2afb6:	aa04      	add	r2, sp, #16
   2afb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2afbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2afc0:	b14b      	cbz	r3, 2afd6 <two_way_long_needle+0x9e>
   2afc2:	b124      	cbz	r4, 2afce <two_way_long_needle+0x96>
   2afc4:	9a03      	ldr	r2, [sp, #12]
   2afc6:	4293      	cmp	r3, r2
   2afc8:	d201      	bcs.n	2afce <two_way_long_needle+0x96>
   2afca:	ebaa 0302 	sub.w	r3, sl, r2
   2afce:	4498      	add	r8, r3
   2afd0:	2400      	movs	r4, #0
   2afd2:	4638      	mov	r0, r7
   2afd4:	e7e3      	b.n	2af9e <two_way_long_needle+0x66>
   2afd6:	454c      	cmp	r4, r9
   2afd8:	4623      	mov	r3, r4
   2afda:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2afde:	bf38      	it	cc
   2afe0:	464b      	movcc	r3, r9
   2afe2:	4573      	cmp	r3, lr
   2afe4:	d213      	bcs.n	2b00e <two_way_long_needle+0xd6>
   2afe6:	eb08 0203 	add.w	r2, r8, r3
   2afea:	f816 c003 	ldrb.w	ip, [r6, r3]
   2afee:	5ca8      	ldrb	r0, [r5, r2]
   2aff0:	4584      	cmp	ip, r0
   2aff2:	442a      	add	r2, r5
   2aff4:	eb06 0103 	add.w	r1, r6, r3
   2aff8:	d006      	beq.n	2b008 <two_way_long_needle+0xd0>
   2affa:	e02c      	b.n	2b056 <two_way_long_needle+0x11e>
   2affc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b000:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b004:	4584      	cmp	ip, r0
   2b006:	d126      	bne.n	2b056 <two_way_long_needle+0x11e>
   2b008:	3301      	adds	r3, #1
   2b00a:	4573      	cmp	r3, lr
   2b00c:	d3f6      	bcc.n	2affc <two_way_long_needle+0xc4>
   2b00e:	454c      	cmp	r4, r9
   2b010:	9900      	ldr	r1, [sp, #0]
   2b012:	f080 8089 	bcs.w	2b128 <two_way_long_needle+0x1f0>
   2b016:	9b00      	ldr	r3, [sp, #0]
   2b018:	eb08 0203 	add.w	r2, r8, r3
   2b01c:	9b01      	ldr	r3, [sp, #4]
   2b01e:	5ca8      	ldrb	r0, [r5, r2]
   2b020:	781b      	ldrb	r3, [r3, #0]
   2b022:	4298      	cmp	r0, r3
   2b024:	442a      	add	r2, r5
   2b026:	d17f      	bne.n	2b128 <two_way_long_needle+0x1f0>
   2b028:	9801      	ldr	r0, [sp, #4]
   2b02a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2b02e:	e006      	b.n	2b03e <two_way_long_needle+0x106>
   2b030:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b034:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b038:	45f4      	cmp	ip, lr
   2b03a:	d103      	bne.n	2b044 <two_way_long_needle+0x10c>
   2b03c:	4619      	mov	r1, r3
   2b03e:	1e4b      	subs	r3, r1, #1
   2b040:	459b      	cmp	fp, r3
   2b042:	d1f5      	bne.n	2b030 <two_way_long_needle+0xf8>
   2b044:	3401      	adds	r4, #1
   2b046:	428c      	cmp	r4, r1
   2b048:	d870      	bhi.n	2b12c <two_way_long_needle+0x1f4>
   2b04a:	9c03      	ldr	r4, [sp, #12]
   2b04c:	4638      	mov	r0, r7
   2b04e:	44a0      	add	r8, r4
   2b050:	ebaa 0404 	sub.w	r4, sl, r4
   2b054:	e7a3      	b.n	2af9e <two_way_long_needle+0x66>
   2b056:	f1c9 0201 	rsb	r2, r9, #1
   2b05a:	4490      	add	r8, r2
   2b05c:	e7b7      	b.n	2afce <two_way_long_needle+0x96>
   2b05e:	2000      	movs	r0, #0
   2b060:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b068:	eba4 0309 	sub.w	r3, r4, r9
   2b06c:	454b      	cmp	r3, r9
   2b06e:	bf38      	it	cc
   2b070:	464b      	movcc	r3, r9
   2b072:	3301      	adds	r3, #1
   2b074:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2b078:	9303      	str	r3, [sp, #12]
   2b07a:	eb06 0308 	add.w	r3, r6, r8
   2b07e:	4658      	mov	r0, fp
   2b080:	f04f 0a00 	mov.w	sl, #0
   2b084:	46cb      	mov	fp, r9
   2b086:	4699      	mov	r9, r3
   2b088:	eb0a 0704 	add.w	r7, sl, r4
   2b08c:	1a3a      	subs	r2, r7, r0
   2b08e:	2100      	movs	r1, #0
   2b090:	4428      	add	r0, r5
   2b092:	f7d5 f8c5 	bl	220 <memchr>
   2b096:	2800      	cmp	r0, #0
   2b098:	d1e1      	bne.n	2b05e <two_way_long_needle+0x126>
   2b09a:	2f00      	cmp	r7, #0
   2b09c:	d0df      	beq.n	2b05e <two_way_long_needle+0x126>
   2b09e:	19eb      	adds	r3, r5, r7
   2b0a0:	aa04      	add	r2, sp, #16
   2b0a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b0aa:	bba3      	cbnz	r3, 2b116 <two_way_long_needle+0x1de>
   2b0ac:	1e61      	subs	r1, r4, #1
   2b0ae:	458b      	cmp	fp, r1
   2b0b0:	d215      	bcs.n	2b0de <two_way_long_needle+0x1a6>
   2b0b2:	eb0a 020b 	add.w	r2, sl, fp
   2b0b6:	f816 300b 	ldrb.w	r3, [r6, fp]
   2b0ba:	f815 e002 	ldrb.w	lr, [r5, r2]
   2b0be:	459e      	cmp	lr, r3
   2b0c0:	442a      	add	r2, r5
   2b0c2:	eb06 000b 	add.w	r0, r6, fp
   2b0c6:	465b      	mov	r3, fp
   2b0c8:	d006      	beq.n	2b0d8 <two_way_long_needle+0x1a0>
   2b0ca:	e027      	b.n	2b11c <two_way_long_needle+0x1e4>
   2b0cc:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2b0d0:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2b0d4:	45f4      	cmp	ip, lr
   2b0d6:	d121      	bne.n	2b11c <two_way_long_needle+0x1e4>
   2b0d8:	3301      	adds	r3, #1
   2b0da:	428b      	cmp	r3, r1
   2b0dc:	d3f6      	bcc.n	2b0cc <two_way_long_needle+0x194>
   2b0de:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b0e2:	d011      	beq.n	2b108 <two_way_long_needle+0x1d0>
   2b0e4:	eb0a 0208 	add.w	r2, sl, r8
   2b0e8:	f899 1000 	ldrb.w	r1, [r9]
   2b0ec:	5cab      	ldrb	r3, [r5, r2]
   2b0ee:	4299      	cmp	r1, r3
   2b0f0:	442a      	add	r2, r5
   2b0f2:	d10f      	bne.n	2b114 <two_way_long_needle+0x1dc>
   2b0f4:	464b      	mov	r3, r9
   2b0f6:	e005      	b.n	2b104 <two_way_long_needle+0x1cc>
   2b0f8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b0fc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b100:	4288      	cmp	r0, r1
   2b102:	d107      	bne.n	2b114 <two_way_long_needle+0x1dc>
   2b104:	42b3      	cmp	r3, r6
   2b106:	d1f7      	bne.n	2b0f8 <two_way_long_needle+0x1c0>
   2b108:	eb05 000a 	add.w	r0, r5, sl
   2b10c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b114:	9b03      	ldr	r3, [sp, #12]
   2b116:	449a      	add	sl, r3
   2b118:	4638      	mov	r0, r7
   2b11a:	e7b5      	b.n	2b088 <two_way_long_needle+0x150>
   2b11c:	f1cb 0201 	rsb	r2, fp, #1
   2b120:	4492      	add	sl, r2
   2b122:	449a      	add	sl, r3
   2b124:	4638      	mov	r0, r7
   2b126:	e7af      	b.n	2b088 <two_way_long_needle+0x150>
   2b128:	4649      	mov	r1, r9
   2b12a:	e78b      	b.n	2b044 <two_way_long_needle+0x10c>
   2b12c:	eb05 0008 	add.w	r0, r5, r8
   2b130:	e796      	b.n	2b060 <two_way_long_needle+0x128>
   2b132:	bf00      	nop

0002b134 <strstr>:
   2b134:	7802      	ldrb	r2, [r0, #0]
   2b136:	2a00      	cmp	r2, #0
   2b138:	f000 8101 	beq.w	2b33e <strstr+0x20a>
   2b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b140:	f891 8000 	ldrb.w	r8, [r1]
   2b144:	b085      	sub	sp, #20
   2b146:	4644      	mov	r4, r8
   2b148:	f1b8 0f00 	cmp.w	r8, #0
   2b14c:	d016      	beq.n	2b17c <strstr+0x48>
   2b14e:	4686      	mov	lr, r0
   2b150:	f101 0c01 	add.w	ip, r1, #1
   2b154:	2701      	movs	r7, #1
   2b156:	e003      	b.n	2b160 <strstr+0x2c>
   2b158:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b15c:	b16c      	cbz	r4, 2b17a <strstr+0x46>
   2b15e:	469c      	mov	ip, r3
   2b160:	42a2      	cmp	r2, r4
   2b162:	bf14      	ite	ne
   2b164:	2700      	movne	r7, #0
   2b166:	f007 0701 	andeq.w	r7, r7, #1
   2b16a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b16e:	4663      	mov	r3, ip
   2b170:	2a00      	cmp	r2, #0
   2b172:	d1f1      	bne.n	2b158 <strstr+0x24>
   2b174:	f89c 3000 	ldrb.w	r3, [ip]
   2b178:	b9fb      	cbnz	r3, 2b1ba <strstr+0x86>
   2b17a:	b117      	cbz	r7, 2b182 <strstr+0x4e>
   2b17c:	b005      	add	sp, #20
   2b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b182:	460e      	mov	r6, r1
   2b184:	4605      	mov	r5, r0
   2b186:	4641      	mov	r1, r8
   2b188:	3001      	adds	r0, #1
   2b18a:	ebac 0406 	sub.w	r4, ip, r6
   2b18e:	f7ff fd11 	bl	2abb4 <strchr>
   2b192:	4607      	mov	r7, r0
   2b194:	b188      	cbz	r0, 2b1ba <strstr+0x86>
   2b196:	2c01      	cmp	r4, #1
   2b198:	d0f0      	beq.n	2b17c <strstr+0x48>
   2b19a:	1928      	adds	r0, r5, r4
   2b19c:	4287      	cmp	r7, r0
   2b19e:	bf94      	ite	ls
   2b1a0:	1bc1      	subls	r1, r0, r7
   2b1a2:	2101      	movhi	r1, #1
   2b1a4:	2c1f      	cmp	r4, #31
   2b1a6:	468b      	mov	fp, r1
   2b1a8:	d90b      	bls.n	2b1c2 <strstr+0x8e>
   2b1aa:	4623      	mov	r3, r4
   2b1ac:	4632      	mov	r2, r6
   2b1ae:	4638      	mov	r0, r7
   2b1b0:	f7ff fec2 	bl	2af38 <two_way_long_needle>
   2b1b4:	b005      	add	sp, #20
   2b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1ba:	2000      	movs	r0, #0
   2b1bc:	b005      	add	sp, #20
   2b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1c2:	aa03      	add	r2, sp, #12
   2b1c4:	4621      	mov	r1, r4
   2b1c6:	4630      	mov	r0, r6
   2b1c8:	f7ff fe5c 	bl	2ae84 <critical_factorization>
   2b1cc:	9903      	ldr	r1, [sp, #12]
   2b1ce:	4680      	mov	r8, r0
   2b1d0:	4602      	mov	r2, r0
   2b1d2:	4431      	add	r1, r6
   2b1d4:	4630      	mov	r0, r6
   2b1d6:	f7ff fb9f 	bl	2a918 <memcmp>
   2b1da:	2800      	cmp	r0, #0
   2b1dc:	d157      	bne.n	2b28e <strstr+0x15a>
   2b1de:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b1e2:	9300      	str	r3, [sp, #0]
   2b1e4:	18f3      	adds	r3, r6, r3
   2b1e6:	4681      	mov	r9, r0
   2b1e8:	4605      	mov	r5, r0
   2b1ea:	9301      	str	r3, [sp, #4]
   2b1ec:	4658      	mov	r0, fp
   2b1ee:	46b2      	mov	sl, r6
   2b1f0:	1966      	adds	r6, r4, r5
   2b1f2:	1a32      	subs	r2, r6, r0
   2b1f4:	2100      	movs	r1, #0
   2b1f6:	4438      	add	r0, r7
   2b1f8:	f7d5 f812 	bl	220 <memchr>
   2b1fc:	2800      	cmp	r0, #0
   2b1fe:	d1dc      	bne.n	2b1ba <strstr+0x86>
   2b200:	2e00      	cmp	r6, #0
   2b202:	d0da      	beq.n	2b1ba <strstr+0x86>
   2b204:	45c8      	cmp	r8, r9
   2b206:	4643      	mov	r3, r8
   2b208:	bf38      	it	cc
   2b20a:	464b      	movcc	r3, r9
   2b20c:	429c      	cmp	r4, r3
   2b20e:	d912      	bls.n	2b236 <strstr+0x102>
   2b210:	195a      	adds	r2, r3, r5
   2b212:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b216:	5cb8      	ldrb	r0, [r7, r2]
   2b218:	4281      	cmp	r1, r0
   2b21a:	443a      	add	r2, r7
   2b21c:	eb0a 0e03 	add.w	lr, sl, r3
   2b220:	d006      	beq.n	2b230 <strstr+0xfc>
   2b222:	e02c      	b.n	2b27e <strstr+0x14a>
   2b224:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b228:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b22c:	4288      	cmp	r0, r1
   2b22e:	d126      	bne.n	2b27e <strstr+0x14a>
   2b230:	3301      	adds	r3, #1
   2b232:	429c      	cmp	r4, r3
   2b234:	d1f6      	bne.n	2b224 <strstr+0xf0>
   2b236:	45c8      	cmp	r8, r9
   2b238:	9900      	ldr	r1, [sp, #0]
   2b23a:	f240 8083 	bls.w	2b344 <strstr+0x210>
   2b23e:	9b00      	ldr	r3, [sp, #0]
   2b240:	18ea      	adds	r2, r5, r3
   2b242:	9b01      	ldr	r3, [sp, #4]
   2b244:	5cb8      	ldrb	r0, [r7, r2]
   2b246:	781b      	ldrb	r3, [r3, #0]
   2b248:	4298      	cmp	r0, r3
   2b24a:	443a      	add	r2, r7
   2b24c:	d17a      	bne.n	2b344 <strstr+0x210>
   2b24e:	9801      	ldr	r0, [sp, #4]
   2b250:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b254:	e006      	b.n	2b264 <strstr+0x130>
   2b256:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b25a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b25e:	45f4      	cmp	ip, lr
   2b260:	d103      	bne.n	2b26a <strstr+0x136>
   2b262:	4619      	mov	r1, r3
   2b264:	1e4b      	subs	r3, r1, #1
   2b266:	455b      	cmp	r3, fp
   2b268:	d1f5      	bne.n	2b256 <strstr+0x122>
   2b26a:	f109 0901 	add.w	r9, r9, #1
   2b26e:	4589      	cmp	r9, r1
   2b270:	d857      	bhi.n	2b322 <strstr+0x1ee>
   2b272:	9b03      	ldr	r3, [sp, #12]
   2b274:	4630      	mov	r0, r6
   2b276:	441d      	add	r5, r3
   2b278:	eba4 0903 	sub.w	r9, r4, r3
   2b27c:	e7b8      	b.n	2b1f0 <strstr+0xbc>
   2b27e:	f1c8 0201 	rsb	r2, r8, #1
   2b282:	4415      	add	r5, r2
   2b284:	441d      	add	r5, r3
   2b286:	f04f 0900 	mov.w	r9, #0
   2b28a:	4630      	mov	r0, r6
   2b28c:	e7b0      	b.n	2b1f0 <strstr+0xbc>
   2b28e:	eba4 0308 	sub.w	r3, r4, r8
   2b292:	4543      	cmp	r3, r8
   2b294:	bf38      	it	cc
   2b296:	4643      	movcc	r3, r8
   2b298:	3301      	adds	r3, #1
   2b29a:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b29e:	9303      	str	r3, [sp, #12]
   2b2a0:	eb06 0309 	add.w	r3, r6, r9
   2b2a4:	4658      	mov	r0, fp
   2b2a6:	2500      	movs	r5, #0
   2b2a8:	46bb      	mov	fp, r7
   2b2aa:	469a      	mov	sl, r3
   2b2ac:	1967      	adds	r7, r4, r5
   2b2ae:	1a3a      	subs	r2, r7, r0
   2b2b0:	2100      	movs	r1, #0
   2b2b2:	4458      	add	r0, fp
   2b2b4:	f7d4 ffb4 	bl	220 <memchr>
   2b2b8:	2800      	cmp	r0, #0
   2b2ba:	f47f af7e 	bne.w	2b1ba <strstr+0x86>
   2b2be:	2f00      	cmp	r7, #0
   2b2c0:	f43f af7b 	beq.w	2b1ba <strstr+0x86>
   2b2c4:	4544      	cmp	r4, r8
   2b2c6:	d915      	bls.n	2b2f4 <strstr+0x1c0>
   2b2c8:	eb08 0205 	add.w	r2, r8, r5
   2b2cc:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b2d0:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b2d4:	4298      	cmp	r0, r3
   2b2d6:	445a      	add	r2, fp
   2b2d8:	eb06 0108 	add.w	r1, r6, r8
   2b2dc:	4643      	mov	r3, r8
   2b2de:	d006      	beq.n	2b2ee <strstr+0x1ba>
   2b2e0:	e023      	b.n	2b32a <strstr+0x1f6>
   2b2e2:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b2e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b2ea:	4586      	cmp	lr, r0
   2b2ec:	d11d      	bne.n	2b32a <strstr+0x1f6>
   2b2ee:	3301      	adds	r3, #1
   2b2f0:	429c      	cmp	r4, r3
   2b2f2:	d1f6      	bne.n	2b2e2 <strstr+0x1ae>
   2b2f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b2f8:	d012      	beq.n	2b320 <strstr+0x1ec>
   2b2fa:	eb05 0209 	add.w	r2, r5, r9
   2b2fe:	f89a 3000 	ldrb.w	r3, [sl]
   2b302:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b306:	4299      	cmp	r1, r3
   2b308:	445a      	add	r2, fp
   2b30a:	d114      	bne.n	2b336 <strstr+0x202>
   2b30c:	4653      	mov	r3, sl
   2b30e:	e005      	b.n	2b31c <strstr+0x1e8>
   2b310:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b314:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b318:	4288      	cmp	r0, r1
   2b31a:	d10c      	bne.n	2b336 <strstr+0x202>
   2b31c:	42b3      	cmp	r3, r6
   2b31e:	d1f7      	bne.n	2b310 <strstr+0x1dc>
   2b320:	465f      	mov	r7, fp
   2b322:	1978      	adds	r0, r7, r5
   2b324:	b005      	add	sp, #20
   2b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b32a:	f1c8 0201 	rsb	r2, r8, #1
   2b32e:	4415      	add	r5, r2
   2b330:	441d      	add	r5, r3
   2b332:	4638      	mov	r0, r7
   2b334:	e7ba      	b.n	2b2ac <strstr+0x178>
   2b336:	9b03      	ldr	r3, [sp, #12]
   2b338:	4638      	mov	r0, r7
   2b33a:	441d      	add	r5, r3
   2b33c:	e7b6      	b.n	2b2ac <strstr+0x178>
   2b33e:	780b      	ldrb	r3, [r1, #0]
   2b340:	b913      	cbnz	r3, 2b348 <strstr+0x214>
   2b342:	4770      	bx	lr
   2b344:	4641      	mov	r1, r8
   2b346:	e790      	b.n	2b26a <strstr+0x136>
   2b348:	2000      	movs	r0, #0
   2b34a:	4770      	bx	lr

0002b34c <_strtol_l.isra.0>:
   2b34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b350:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b354:	460f      	mov	r7, r1
   2b356:	4680      	mov	r8, r0
   2b358:	4616      	mov	r6, r2
   2b35a:	461d      	mov	r5, r3
   2b35c:	468a      	mov	sl, r1
   2b35e:	e000      	b.n	2b362 <_strtol_l.isra.0+0x16>
   2b360:	46a2      	mov	sl, r4
   2b362:	4654      	mov	r4, sl
   2b364:	4648      	mov	r0, r9
   2b366:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b36a:	f7ff faad 	bl	2a8c8 <__locale_ctype_ptr_l>
   2b36e:	4458      	add	r0, fp
   2b370:	7842      	ldrb	r2, [r0, #1]
   2b372:	f012 0208 	ands.w	r2, r2, #8
   2b376:	d1f3      	bne.n	2b360 <_strtol_l.isra.0+0x14>
   2b378:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b37c:	d04f      	beq.n	2b41e <_strtol_l.isra.0+0xd2>
   2b37e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b382:	bf04      	itt	eq
   2b384:	f894 b000 	ldrbeq.w	fp, [r4]
   2b388:	f10a 0402 	addeq.w	r4, sl, #2
   2b38c:	b11d      	cbz	r5, 2b396 <_strtol_l.isra.0+0x4a>
   2b38e:	2d10      	cmp	r5, #16
   2b390:	d056      	beq.n	2b440 <_strtol_l.isra.0+0xf4>
   2b392:	46ac      	mov	ip, r5
   2b394:	e004      	b.n	2b3a0 <_strtol_l.isra.0+0x54>
   2b396:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b39a:	d060      	beq.n	2b45e <_strtol_l.isra.0+0x112>
   2b39c:	250a      	movs	r5, #10
   2b39e:	46ac      	mov	ip, r5
   2b3a0:	2a00      	cmp	r2, #0
   2b3a2:	bf0c      	ite	eq
   2b3a4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b3a8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b3ac:	2100      	movs	r1, #0
   2b3ae:	fbb9 fefc 	udiv	lr, r9, ip
   2b3b2:	4608      	mov	r0, r1
   2b3b4:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b3b8:	e005      	b.n	2b3c6 <_strtol_l.isra.0+0x7a>
   2b3ba:	d029      	beq.n	2b410 <_strtol_l.isra.0+0xc4>
   2b3bc:	fb0c 3000 	mla	r0, ip, r0, r3
   2b3c0:	2101      	movs	r1, #1
   2b3c2:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b3c6:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b3ca:	2b09      	cmp	r3, #9
   2b3cc:	d905      	bls.n	2b3da <_strtol_l.isra.0+0x8e>
   2b3ce:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b3d2:	2b19      	cmp	r3, #25
   2b3d4:	d80b      	bhi.n	2b3ee <_strtol_l.isra.0+0xa2>
   2b3d6:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b3da:	429d      	cmp	r5, r3
   2b3dc:	dd0f      	ble.n	2b3fe <_strtol_l.isra.0+0xb2>
   2b3de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b3e2:	d0ee      	beq.n	2b3c2 <_strtol_l.isra.0+0x76>
   2b3e4:	4586      	cmp	lr, r0
   2b3e6:	d2e8      	bcs.n	2b3ba <_strtol_l.isra.0+0x6e>
   2b3e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b3ec:	e7e9      	b.n	2b3c2 <_strtol_l.isra.0+0x76>
   2b3ee:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b3f2:	2b19      	cmp	r3, #25
   2b3f4:	d803      	bhi.n	2b3fe <_strtol_l.isra.0+0xb2>
   2b3f6:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b3fa:	429d      	cmp	r5, r3
   2b3fc:	dcef      	bgt.n	2b3de <_strtol_l.isra.0+0x92>
   2b3fe:	1c4b      	adds	r3, r1, #1
   2b400:	d013      	beq.n	2b42a <_strtol_l.isra.0+0xde>
   2b402:	b102      	cbz	r2, 2b406 <_strtol_l.isra.0+0xba>
   2b404:	4240      	negs	r0, r0
   2b406:	b146      	cbz	r6, 2b41a <_strtol_l.isra.0+0xce>
   2b408:	b9c1      	cbnz	r1, 2b43c <_strtol_l.isra.0+0xf0>
   2b40a:	6037      	str	r7, [r6, #0]
   2b40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b410:	459a      	cmp	sl, r3
   2b412:	dad3      	bge.n	2b3bc <_strtol_l.isra.0+0x70>
   2b414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b418:	e7d3      	b.n	2b3c2 <_strtol_l.isra.0+0x76>
   2b41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b41e:	f894 b000 	ldrb.w	fp, [r4]
   2b422:	2201      	movs	r2, #1
   2b424:	f10a 0402 	add.w	r4, sl, #2
   2b428:	e7b0      	b.n	2b38c <_strtol_l.isra.0+0x40>
   2b42a:	2322      	movs	r3, #34	; 0x22
   2b42c:	f8c8 3000 	str.w	r3, [r8]
   2b430:	b1ee      	cbz	r6, 2b46e <_strtol_l.isra.0+0x122>
   2b432:	1e67      	subs	r7, r4, #1
   2b434:	4648      	mov	r0, r9
   2b436:	6037      	str	r7, [r6, #0]
   2b438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b43c:	4681      	mov	r9, r0
   2b43e:	e7f8      	b.n	2b432 <_strtol_l.isra.0+0xe6>
   2b440:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b444:	d1a5      	bne.n	2b392 <_strtol_l.isra.0+0x46>
   2b446:	7823      	ldrb	r3, [r4, #0]
   2b448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b44c:	2b58      	cmp	r3, #88	; 0x58
   2b44e:	d1a0      	bne.n	2b392 <_strtol_l.isra.0+0x46>
   2b450:	f04f 0c10 	mov.w	ip, #16
   2b454:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b458:	4665      	mov	r5, ip
   2b45a:	3402      	adds	r4, #2
   2b45c:	e7a0      	b.n	2b3a0 <_strtol_l.isra.0+0x54>
   2b45e:	7823      	ldrb	r3, [r4, #0]
   2b460:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b464:	2b58      	cmp	r3, #88	; 0x58
   2b466:	d0f3      	beq.n	2b450 <_strtol_l.isra.0+0x104>
   2b468:	2508      	movs	r5, #8
   2b46a:	46ac      	mov	ip, r5
   2b46c:	e798      	b.n	2b3a0 <_strtol_l.isra.0+0x54>
   2b46e:	4648      	mov	r0, r9
   2b470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b474 <strtol>:
   2b474:	b530      	push	{r4, r5, lr}
   2b476:	4c08      	ldr	r4, [pc, #32]	; (2b498 <strtol+0x24>)
   2b478:	4b08      	ldr	r3, [pc, #32]	; (2b49c <strtol+0x28>)
   2b47a:	6825      	ldr	r5, [r4, #0]
   2b47c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b47e:	b083      	sub	sp, #12
   2b480:	2c00      	cmp	r4, #0
   2b482:	bf08      	it	eq
   2b484:	461c      	moveq	r4, r3
   2b486:	9400      	str	r4, [sp, #0]
   2b488:	4613      	mov	r3, r2
   2b48a:	460a      	mov	r2, r1
   2b48c:	4601      	mov	r1, r0
   2b48e:	4628      	mov	r0, r5
   2b490:	f7ff ff5c 	bl	2b34c <_strtol_l.isra.0>
   2b494:	b003      	add	sp, #12
   2b496:	bd30      	pop	{r4, r5, pc}
   2b498:	2000cc80 	.word	0x2000cc80
   2b49c:	2000cb14 	.word	0x2000cb14

0002b4a0 <_strtoul_l.isra.0>:
   2b4a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b4a8:	460e      	mov	r6, r1
   2b4aa:	4607      	mov	r7, r0
   2b4ac:	4615      	mov	r5, r2
   2b4ae:	4698      	mov	r8, r3
   2b4b0:	468a      	mov	sl, r1
   2b4b2:	e000      	b.n	2b4b6 <_strtoul_l.isra.0+0x16>
   2b4b4:	46a2      	mov	sl, r4
   2b4b6:	4654      	mov	r4, sl
   2b4b8:	4648      	mov	r0, r9
   2b4ba:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b4be:	f7ff fa03 	bl	2a8c8 <__locale_ctype_ptr_l>
   2b4c2:	4458      	add	r0, fp
   2b4c4:	7840      	ldrb	r0, [r0, #1]
   2b4c6:	f010 0008 	ands.w	r0, r0, #8
   2b4ca:	d1f3      	bne.n	2b4b4 <_strtoul_l.isra.0+0x14>
   2b4cc:	4659      	mov	r1, fp
   2b4ce:	292d      	cmp	r1, #45	; 0x2d
   2b4d0:	d059      	beq.n	2b586 <_strtoul_l.isra.0+0xe6>
   2b4d2:	292b      	cmp	r1, #43	; 0x2b
   2b4d4:	bf04      	itt	eq
   2b4d6:	7821      	ldrbeq	r1, [r4, #0]
   2b4d8:	f10a 0402 	addeq.w	r4, sl, #2
   2b4dc:	f1b8 0f00 	cmp.w	r8, #0
   2b4e0:	d00c      	beq.n	2b4fc <_strtoul_l.isra.0+0x5c>
   2b4e2:	f1b8 0f10 	cmp.w	r8, #16
   2b4e6:	d053      	beq.n	2b590 <_strtoul_l.isra.0+0xf0>
   2b4e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b4ec:	fbbc fcf8 	udiv	ip, ip, r8
   2b4f0:	fb08 fa0c 	mul.w	sl, r8, ip
   2b4f4:	ea6f 0a0a 	mvn.w	sl, sl
   2b4f8:	46c1      	mov	r9, r8
   2b4fa:	e008      	b.n	2b50e <_strtoul_l.isra.0+0x6e>
   2b4fc:	2930      	cmp	r1, #48	; 0x30
   2b4fe:	d058      	beq.n	2b5b2 <_strtoul_l.isra.0+0x112>
   2b500:	f04f 080a 	mov.w	r8, #10
   2b504:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b5e4 <_strtoul_l.isra.0+0x144>
   2b508:	46c1      	mov	r9, r8
   2b50a:	f04f 0a05 	mov.w	sl, #5
   2b50e:	2300      	movs	r3, #0
   2b510:	469e      	mov	lr, r3
   2b512:	e005      	b.n	2b520 <_strtoul_l.isra.0+0x80>
   2b514:	d02a      	beq.n	2b56c <_strtoul_l.isra.0+0xcc>
   2b516:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b51a:	2301      	movs	r3, #1
   2b51c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b520:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b524:	2a09      	cmp	r2, #9
   2b526:	d905      	bls.n	2b534 <_strtoul_l.isra.0+0x94>
   2b528:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b52c:	2a19      	cmp	r2, #25
   2b52e:	d80a      	bhi.n	2b546 <_strtoul_l.isra.0+0xa6>
   2b530:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b534:	4590      	cmp	r8, r2
   2b536:	dd0e      	ble.n	2b556 <_strtoul_l.isra.0+0xb6>
   2b538:	2b00      	cmp	r3, #0
   2b53a:	db01      	blt.n	2b540 <_strtoul_l.isra.0+0xa0>
   2b53c:	45e6      	cmp	lr, ip
   2b53e:	d9e9      	bls.n	2b514 <_strtoul_l.isra.0+0x74>
   2b540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b544:	e7ea      	b.n	2b51c <_strtoul_l.isra.0+0x7c>
   2b546:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b54a:	2a19      	cmp	r2, #25
   2b54c:	d803      	bhi.n	2b556 <_strtoul_l.isra.0+0xb6>
   2b54e:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b552:	4590      	cmp	r8, r2
   2b554:	dcf0      	bgt.n	2b538 <_strtoul_l.isra.0+0x98>
   2b556:	2b00      	cmp	r3, #0
   2b558:	db0d      	blt.n	2b576 <_strtoul_l.isra.0+0xd6>
   2b55a:	b108      	cbz	r0, 2b560 <_strtoul_l.isra.0+0xc0>
   2b55c:	f1ce 0e00 	rsb	lr, lr, #0
   2b560:	b10d      	cbz	r5, 2b566 <_strtoul_l.isra.0+0xc6>
   2b562:	b973      	cbnz	r3, 2b582 <_strtoul_l.isra.0+0xe2>
   2b564:	602e      	str	r6, [r5, #0]
   2b566:	4670      	mov	r0, lr
   2b568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b56c:	4552      	cmp	r2, sl
   2b56e:	ddd2      	ble.n	2b516 <_strtoul_l.isra.0+0x76>
   2b570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b574:	e7d2      	b.n	2b51c <_strtoul_l.isra.0+0x7c>
   2b576:	2322      	movs	r3, #34	; 0x22
   2b578:	603b      	str	r3, [r7, #0]
   2b57a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b57e:	2d00      	cmp	r5, #0
   2b580:	d0f1      	beq.n	2b566 <_strtoul_l.isra.0+0xc6>
   2b582:	1e66      	subs	r6, r4, #1
   2b584:	e7ee      	b.n	2b564 <_strtoul_l.isra.0+0xc4>
   2b586:	7821      	ldrb	r1, [r4, #0]
   2b588:	2001      	movs	r0, #1
   2b58a:	f10a 0402 	add.w	r4, sl, #2
   2b58e:	e7a5      	b.n	2b4dc <_strtoul_l.isra.0+0x3c>
   2b590:	2930      	cmp	r1, #48	; 0x30
   2b592:	d11b      	bne.n	2b5cc <_strtoul_l.isra.0+0x12c>
   2b594:	7823      	ldrb	r3, [r4, #0]
   2b596:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b59a:	2b58      	cmp	r3, #88	; 0x58
   2b59c:	d11c      	bne.n	2b5d8 <_strtoul_l.isra.0+0x138>
   2b59e:	f04f 0910 	mov.w	r9, #16
   2b5a2:	7861      	ldrb	r1, [r4, #1]
   2b5a4:	46c8      	mov	r8, r9
   2b5a6:	f04f 0a0f 	mov.w	sl, #15
   2b5aa:	3402      	adds	r4, #2
   2b5ac:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b5b0:	e7ad      	b.n	2b50e <_strtoul_l.isra.0+0x6e>
   2b5b2:	7823      	ldrb	r3, [r4, #0]
   2b5b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b5b8:	2b58      	cmp	r3, #88	; 0x58
   2b5ba:	d0f0      	beq.n	2b59e <_strtoul_l.isra.0+0xfe>
   2b5bc:	f04f 0808 	mov.w	r8, #8
   2b5c0:	46c1      	mov	r9, r8
   2b5c2:	f04f 0a07 	mov.w	sl, #7
   2b5c6:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b5ca:	e7a0      	b.n	2b50e <_strtoul_l.isra.0+0x6e>
   2b5cc:	f04f 0a0f 	mov.w	sl, #15
   2b5d0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b5d4:	46c1      	mov	r9, r8
   2b5d6:	e79a      	b.n	2b50e <_strtoul_l.isra.0+0x6e>
   2b5d8:	46c1      	mov	r9, r8
   2b5da:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b5de:	f04f 0a0f 	mov.w	sl, #15
   2b5e2:	e794      	b.n	2b50e <_strtoul_l.isra.0+0x6e>
   2b5e4:	19999999 	.word	0x19999999

0002b5e8 <strtoul>:
   2b5e8:	b530      	push	{r4, r5, lr}
   2b5ea:	4c08      	ldr	r4, [pc, #32]	; (2b60c <strtoul+0x24>)
   2b5ec:	4b08      	ldr	r3, [pc, #32]	; (2b610 <strtoul+0x28>)
   2b5ee:	6825      	ldr	r5, [r4, #0]
   2b5f0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b5f2:	b083      	sub	sp, #12
   2b5f4:	2c00      	cmp	r4, #0
   2b5f6:	bf08      	it	eq
   2b5f8:	461c      	moveq	r4, r3
   2b5fa:	9400      	str	r4, [sp, #0]
   2b5fc:	4613      	mov	r3, r2
   2b5fe:	460a      	mov	r2, r1
   2b600:	4601      	mov	r1, r0
   2b602:	4628      	mov	r0, r5
   2b604:	f7ff ff4c 	bl	2b4a0 <_strtoul_l.isra.0>
   2b608:	b003      	add	sp, #12
   2b60a:	bd30      	pop	{r4, r5, pc}
   2b60c:	2000cc80 	.word	0x2000cc80
   2b610:	2000cb14 	.word	0x2000cb14

0002b614 <_svfprintf_r>:
   2b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b618:	b0c3      	sub	sp, #268	; 0x10c
   2b61a:	460c      	mov	r4, r1
   2b61c:	910b      	str	r1, [sp, #44]	; 0x2c
   2b61e:	4692      	mov	sl, r2
   2b620:	930f      	str	r3, [sp, #60]	; 0x3c
   2b622:	900c      	str	r0, [sp, #48]	; 0x30
   2b624:	f002 f9f2 	bl	2da0c <_localeconv_r>
   2b628:	6803      	ldr	r3, [r0, #0]
   2b62a:	931a      	str	r3, [sp, #104]	; 0x68
   2b62c:	4618      	mov	r0, r3
   2b62e:	f7d5 f867 	bl	700 <strlen>
   2b632:	89a3      	ldrh	r3, [r4, #12]
   2b634:	9019      	str	r0, [sp, #100]	; 0x64
   2b636:	0619      	lsls	r1, r3, #24
   2b638:	d503      	bpl.n	2b642 <_svfprintf_r+0x2e>
   2b63a:	6923      	ldr	r3, [r4, #16]
   2b63c:	2b00      	cmp	r3, #0
   2b63e:	f001 8003 	beq.w	2c648 <_svfprintf_r+0x1034>
   2b642:	2300      	movs	r3, #0
   2b644:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b648:	9313      	str	r3, [sp, #76]	; 0x4c
   2b64a:	9315      	str	r3, [sp, #84]	; 0x54
   2b64c:	9314      	str	r3, [sp, #80]	; 0x50
   2b64e:	9327      	str	r3, [sp, #156]	; 0x9c
   2b650:	9326      	str	r3, [sp, #152]	; 0x98
   2b652:	9318      	str	r3, [sp, #96]	; 0x60
   2b654:	931b      	str	r3, [sp, #108]	; 0x6c
   2b656:	9309      	str	r3, [sp, #36]	; 0x24
   2b658:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b65c:	46c8      	mov	r8, r9
   2b65e:	9316      	str	r3, [sp, #88]	; 0x58
   2b660:	9317      	str	r3, [sp, #92]	; 0x5c
   2b662:	f89a 3000 	ldrb.w	r3, [sl]
   2b666:	4654      	mov	r4, sl
   2b668:	b1e3      	cbz	r3, 2b6a4 <_svfprintf_r+0x90>
   2b66a:	2b25      	cmp	r3, #37	; 0x25
   2b66c:	d102      	bne.n	2b674 <_svfprintf_r+0x60>
   2b66e:	e019      	b.n	2b6a4 <_svfprintf_r+0x90>
   2b670:	2b25      	cmp	r3, #37	; 0x25
   2b672:	d003      	beq.n	2b67c <_svfprintf_r+0x68>
   2b674:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b678:	2b00      	cmp	r3, #0
   2b67a:	d1f9      	bne.n	2b670 <_svfprintf_r+0x5c>
   2b67c:	eba4 050a 	sub.w	r5, r4, sl
   2b680:	b185      	cbz	r5, 2b6a4 <_svfprintf_r+0x90>
   2b682:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b684:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b686:	f8c8 a000 	str.w	sl, [r8]
   2b68a:	3301      	adds	r3, #1
   2b68c:	442a      	add	r2, r5
   2b68e:	2b07      	cmp	r3, #7
   2b690:	f8c8 5004 	str.w	r5, [r8, #4]
   2b694:	9227      	str	r2, [sp, #156]	; 0x9c
   2b696:	9326      	str	r3, [sp, #152]	; 0x98
   2b698:	dc7f      	bgt.n	2b79a <_svfprintf_r+0x186>
   2b69a:	f108 0808 	add.w	r8, r8, #8
   2b69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b6a0:	442b      	add	r3, r5
   2b6a2:	9309      	str	r3, [sp, #36]	; 0x24
   2b6a4:	7823      	ldrb	r3, [r4, #0]
   2b6a6:	2b00      	cmp	r3, #0
   2b6a8:	d07f      	beq.n	2b7aa <_svfprintf_r+0x196>
   2b6aa:	2300      	movs	r3, #0
   2b6ac:	461a      	mov	r2, r3
   2b6ae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b6b2:	4619      	mov	r1, r3
   2b6b4:	930d      	str	r3, [sp, #52]	; 0x34
   2b6b6:	469b      	mov	fp, r3
   2b6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b6bc:	7863      	ldrb	r3, [r4, #1]
   2b6be:	900a      	str	r0, [sp, #40]	; 0x28
   2b6c0:	f104 0a01 	add.w	sl, r4, #1
   2b6c4:	f10a 0a01 	add.w	sl, sl, #1
   2b6c8:	f1a3 0020 	sub.w	r0, r3, #32
   2b6cc:	2858      	cmp	r0, #88	; 0x58
   2b6ce:	f200 83c1 	bhi.w	2be54 <_svfprintf_r+0x840>
   2b6d2:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b6d6:	0238      	.short	0x0238
   2b6d8:	03bf03bf 	.word	0x03bf03bf
   2b6dc:	03bf0240 	.word	0x03bf0240
   2b6e0:	03bf03bf 	.word	0x03bf03bf
   2b6e4:	03bf03bf 	.word	0x03bf03bf
   2b6e8:	024503bf 	.word	0x024503bf
   2b6ec:	03bf0203 	.word	0x03bf0203
   2b6f0:	026b005d 	.word	0x026b005d
   2b6f4:	028603bf 	.word	0x028603bf
   2b6f8:	039d039d 	.word	0x039d039d
   2b6fc:	039d039d 	.word	0x039d039d
   2b700:	039d039d 	.word	0x039d039d
   2b704:	039d039d 	.word	0x039d039d
   2b708:	03bf039d 	.word	0x03bf039d
   2b70c:	03bf03bf 	.word	0x03bf03bf
   2b710:	03bf03bf 	.word	0x03bf03bf
   2b714:	03bf03bf 	.word	0x03bf03bf
   2b718:	03bf03bf 	.word	0x03bf03bf
   2b71c:	033703bf 	.word	0x033703bf
   2b720:	03bf0357 	.word	0x03bf0357
   2b724:	03bf0357 	.word	0x03bf0357
   2b728:	03bf03bf 	.word	0x03bf03bf
   2b72c:	039803bf 	.word	0x039803bf
   2b730:	03bf03bf 	.word	0x03bf03bf
   2b734:	03bf03ad 	.word	0x03bf03ad
   2b738:	03bf03bf 	.word	0x03bf03bf
   2b73c:	03bf03bf 	.word	0x03bf03bf
   2b740:	03bf0259 	.word	0x03bf0259
   2b744:	031e03bf 	.word	0x031e03bf
   2b748:	03bf03bf 	.word	0x03bf03bf
   2b74c:	03bf03bf 	.word	0x03bf03bf
   2b750:	03bf03bf 	.word	0x03bf03bf
   2b754:	03bf03bf 	.word	0x03bf03bf
   2b758:	03bf03bf 	.word	0x03bf03bf
   2b75c:	02db02c6 	.word	0x02db02c6
   2b760:	03570357 	.word	0x03570357
   2b764:	028b0357 	.word	0x028b0357
   2b768:	03bf02db 	.word	0x03bf02db
   2b76c:	029003bf 	.word	0x029003bf
   2b770:	029d03bf 	.word	0x029d03bf
   2b774:	02b401cc 	.word	0x02b401cc
   2b778:	03bf0208 	.word	0x03bf0208
   2b77c:	03bf01e1 	.word	0x03bf01e1
   2b780:	03bf007e 	.word	0x03bf007e
   2b784:	020d03bf 	.word	0x020d03bf
   2b788:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b78a:	930f      	str	r3, [sp, #60]	; 0x3c
   2b78c:	4240      	negs	r0, r0
   2b78e:	900d      	str	r0, [sp, #52]	; 0x34
   2b790:	f04b 0b04 	orr.w	fp, fp, #4
   2b794:	f89a 3000 	ldrb.w	r3, [sl]
   2b798:	e794      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2b79a:	aa25      	add	r2, sp, #148	; 0x94
   2b79c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b79e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7a0:	f002 ff0a 	bl	2e5b8 <__ssprint_r>
   2b7a4:	b940      	cbnz	r0, 2b7b8 <_svfprintf_r+0x1a4>
   2b7a6:	46c8      	mov	r8, r9
   2b7a8:	e779      	b.n	2b69e <_svfprintf_r+0x8a>
   2b7aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b7ac:	b123      	cbz	r3, 2b7b8 <_svfprintf_r+0x1a4>
   2b7ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7b2:	aa25      	add	r2, sp, #148	; 0x94
   2b7b4:	f002 ff00 	bl	2e5b8 <__ssprint_r>
   2b7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b7ba:	899b      	ldrh	r3, [r3, #12]
   2b7bc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b7c2:	bf18      	it	ne
   2b7c4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b7c8:	9309      	str	r3, [sp, #36]	; 0x24
   2b7ca:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b7cc:	b043      	add	sp, #268	; 0x10c
   2b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7d2:	f01b 0f20 	tst.w	fp, #32
   2b7d6:	9311      	str	r3, [sp, #68]	; 0x44
   2b7d8:	f040 81dd 	bne.w	2bb96 <_svfprintf_r+0x582>
   2b7dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b7de:	f01b 0f10 	tst.w	fp, #16
   2b7e2:	4613      	mov	r3, r2
   2b7e4:	f040 856e 	bne.w	2c2c4 <_svfprintf_r+0xcb0>
   2b7e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b7ec:	f000 856a 	beq.w	2c2c4 <_svfprintf_r+0xcb0>
   2b7f0:	8814      	ldrh	r4, [r2, #0]
   2b7f2:	3204      	adds	r2, #4
   2b7f4:	2500      	movs	r5, #0
   2b7f6:	2301      	movs	r3, #1
   2b7f8:	920f      	str	r2, [sp, #60]	; 0x3c
   2b7fa:	2700      	movs	r7, #0
   2b7fc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b800:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b802:	1c4a      	adds	r2, r1, #1
   2b804:	f000 8265 	beq.w	2bcd2 <_svfprintf_r+0x6be>
   2b808:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b80c:	9207      	str	r2, [sp, #28]
   2b80e:	ea54 0205 	orrs.w	r2, r4, r5
   2b812:	f040 8264 	bne.w	2bcde <_svfprintf_r+0x6ca>
   2b816:	2900      	cmp	r1, #0
   2b818:	f040 843c 	bne.w	2c094 <_svfprintf_r+0xa80>
   2b81c:	2b00      	cmp	r3, #0
   2b81e:	f040 84d7 	bne.w	2c1d0 <_svfprintf_r+0xbbc>
   2b822:	f01b 0301 	ands.w	r3, fp, #1
   2b826:	930e      	str	r3, [sp, #56]	; 0x38
   2b828:	f000 8604 	beq.w	2c434 <_svfprintf_r+0xe20>
   2b82c:	ae42      	add	r6, sp, #264	; 0x108
   2b82e:	2330      	movs	r3, #48	; 0x30
   2b830:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b838:	4293      	cmp	r3, r2
   2b83a:	bfb8      	it	lt
   2b83c:	4613      	movlt	r3, r2
   2b83e:	9308      	str	r3, [sp, #32]
   2b840:	2300      	movs	r3, #0
   2b842:	9312      	str	r3, [sp, #72]	; 0x48
   2b844:	b117      	cbz	r7, 2b84c <_svfprintf_r+0x238>
   2b846:	9b08      	ldr	r3, [sp, #32]
   2b848:	3301      	adds	r3, #1
   2b84a:	9308      	str	r3, [sp, #32]
   2b84c:	9b07      	ldr	r3, [sp, #28]
   2b84e:	f013 0302 	ands.w	r3, r3, #2
   2b852:	9310      	str	r3, [sp, #64]	; 0x40
   2b854:	d002      	beq.n	2b85c <_svfprintf_r+0x248>
   2b856:	9b08      	ldr	r3, [sp, #32]
   2b858:	3302      	adds	r3, #2
   2b85a:	9308      	str	r3, [sp, #32]
   2b85c:	9b07      	ldr	r3, [sp, #28]
   2b85e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b862:	f040 830e 	bne.w	2be82 <_svfprintf_r+0x86e>
   2b866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b868:	9a08      	ldr	r2, [sp, #32]
   2b86a:	eba3 0b02 	sub.w	fp, r3, r2
   2b86e:	f1bb 0f00 	cmp.w	fp, #0
   2b872:	f340 8306 	ble.w	2be82 <_svfprintf_r+0x86e>
   2b876:	f1bb 0f10 	cmp.w	fp, #16
   2b87a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b87c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b87e:	dd29      	ble.n	2b8d4 <_svfprintf_r+0x2c0>
   2b880:	4643      	mov	r3, r8
   2b882:	4621      	mov	r1, r4
   2b884:	46a8      	mov	r8, r5
   2b886:	2710      	movs	r7, #16
   2b888:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b88a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b88c:	e006      	b.n	2b89c <_svfprintf_r+0x288>
   2b88e:	f1ab 0b10 	sub.w	fp, fp, #16
   2b892:	f1bb 0f10 	cmp.w	fp, #16
   2b896:	f103 0308 	add.w	r3, r3, #8
   2b89a:	dd18      	ble.n	2b8ce <_svfprintf_r+0x2ba>
   2b89c:	3201      	adds	r2, #1
   2b89e:	48b7      	ldr	r0, [pc, #732]	; (2bb7c <_svfprintf_r+0x568>)
   2b8a0:	9226      	str	r2, [sp, #152]	; 0x98
   2b8a2:	3110      	adds	r1, #16
   2b8a4:	2a07      	cmp	r2, #7
   2b8a6:	9127      	str	r1, [sp, #156]	; 0x9c
   2b8a8:	e883 0081 	stmia.w	r3, {r0, r7}
   2b8ac:	ddef      	ble.n	2b88e <_svfprintf_r+0x27a>
   2b8ae:	aa25      	add	r2, sp, #148	; 0x94
   2b8b0:	4629      	mov	r1, r5
   2b8b2:	4620      	mov	r0, r4
   2b8b4:	f002 fe80 	bl	2e5b8 <__ssprint_r>
   2b8b8:	2800      	cmp	r0, #0
   2b8ba:	f47f af7d 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2b8be:	f1ab 0b10 	sub.w	fp, fp, #16
   2b8c2:	f1bb 0f10 	cmp.w	fp, #16
   2b8c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b8c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b8ca:	464b      	mov	r3, r9
   2b8cc:	dce6      	bgt.n	2b89c <_svfprintf_r+0x288>
   2b8ce:	4645      	mov	r5, r8
   2b8d0:	460c      	mov	r4, r1
   2b8d2:	4698      	mov	r8, r3
   2b8d4:	3201      	adds	r2, #1
   2b8d6:	4ba9      	ldr	r3, [pc, #676]	; (2bb7c <_svfprintf_r+0x568>)
   2b8d8:	9226      	str	r2, [sp, #152]	; 0x98
   2b8da:	445c      	add	r4, fp
   2b8dc:	2a07      	cmp	r2, #7
   2b8de:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8e0:	e888 0808 	stmia.w	r8, {r3, fp}
   2b8e4:	f300 8498 	bgt.w	2c218 <_svfprintf_r+0xc04>
   2b8e8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b8ec:	f108 0808 	add.w	r8, r8, #8
   2b8f0:	b177      	cbz	r7, 2b910 <_svfprintf_r+0x2fc>
   2b8f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8f4:	3301      	adds	r3, #1
   2b8f6:	3401      	adds	r4, #1
   2b8f8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b8fc:	2201      	movs	r2, #1
   2b8fe:	2b07      	cmp	r3, #7
   2b900:	9427      	str	r4, [sp, #156]	; 0x9c
   2b902:	9326      	str	r3, [sp, #152]	; 0x98
   2b904:	e888 0006 	stmia.w	r8, {r1, r2}
   2b908:	f300 83db 	bgt.w	2c0c2 <_svfprintf_r+0xaae>
   2b90c:	f108 0808 	add.w	r8, r8, #8
   2b910:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b912:	b16b      	cbz	r3, 2b930 <_svfprintf_r+0x31c>
   2b914:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b916:	3301      	adds	r3, #1
   2b918:	3402      	adds	r4, #2
   2b91a:	a91e      	add	r1, sp, #120	; 0x78
   2b91c:	2202      	movs	r2, #2
   2b91e:	2b07      	cmp	r3, #7
   2b920:	9427      	str	r4, [sp, #156]	; 0x9c
   2b922:	9326      	str	r3, [sp, #152]	; 0x98
   2b924:	e888 0006 	stmia.w	r8, {r1, r2}
   2b928:	f300 83d6 	bgt.w	2c0d8 <_svfprintf_r+0xac4>
   2b92c:	f108 0808 	add.w	r8, r8, #8
   2b930:	2d80      	cmp	r5, #128	; 0x80
   2b932:	f000 8315 	beq.w	2bf60 <_svfprintf_r+0x94c>
   2b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b93a:	1a9f      	subs	r7, r3, r2
   2b93c:	2f00      	cmp	r7, #0
   2b93e:	dd36      	ble.n	2b9ae <_svfprintf_r+0x39a>
   2b940:	2f10      	cmp	r7, #16
   2b942:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b944:	4d8e      	ldr	r5, [pc, #568]	; (2bb80 <_svfprintf_r+0x56c>)
   2b946:	dd27      	ble.n	2b998 <_svfprintf_r+0x384>
   2b948:	4642      	mov	r2, r8
   2b94a:	4621      	mov	r1, r4
   2b94c:	46b0      	mov	r8, r6
   2b94e:	f04f 0b10 	mov.w	fp, #16
   2b952:	462e      	mov	r6, r5
   2b954:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b956:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b958:	e004      	b.n	2b964 <_svfprintf_r+0x350>
   2b95a:	3f10      	subs	r7, #16
   2b95c:	2f10      	cmp	r7, #16
   2b95e:	f102 0208 	add.w	r2, r2, #8
   2b962:	dd15      	ble.n	2b990 <_svfprintf_r+0x37c>
   2b964:	3301      	adds	r3, #1
   2b966:	3110      	adds	r1, #16
   2b968:	2b07      	cmp	r3, #7
   2b96a:	9127      	str	r1, [sp, #156]	; 0x9c
   2b96c:	9326      	str	r3, [sp, #152]	; 0x98
   2b96e:	e882 0840 	stmia.w	r2, {r6, fp}
   2b972:	ddf2      	ble.n	2b95a <_svfprintf_r+0x346>
   2b974:	aa25      	add	r2, sp, #148	; 0x94
   2b976:	4629      	mov	r1, r5
   2b978:	4620      	mov	r0, r4
   2b97a:	f002 fe1d 	bl	2e5b8 <__ssprint_r>
   2b97e:	2800      	cmp	r0, #0
   2b980:	f47f af1a 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2b984:	3f10      	subs	r7, #16
   2b986:	2f10      	cmp	r7, #16
   2b988:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b98a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b98c:	464a      	mov	r2, r9
   2b98e:	dce9      	bgt.n	2b964 <_svfprintf_r+0x350>
   2b990:	4635      	mov	r5, r6
   2b992:	460c      	mov	r4, r1
   2b994:	4646      	mov	r6, r8
   2b996:	4690      	mov	r8, r2
   2b998:	3301      	adds	r3, #1
   2b99a:	443c      	add	r4, r7
   2b99c:	2b07      	cmp	r3, #7
   2b99e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9a0:	9326      	str	r3, [sp, #152]	; 0x98
   2b9a2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b9a6:	f300 8381 	bgt.w	2c0ac <_svfprintf_r+0xa98>
   2b9aa:	f108 0808 	add.w	r8, r8, #8
   2b9ae:	9b07      	ldr	r3, [sp, #28]
   2b9b0:	05df      	lsls	r7, r3, #23
   2b9b2:	f100 8268 	bmi.w	2be86 <_svfprintf_r+0x872>
   2b9b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9b8:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b9ba:	f8c8 6000 	str.w	r6, [r8]
   2b9be:	3301      	adds	r3, #1
   2b9c0:	440c      	add	r4, r1
   2b9c2:	2b07      	cmp	r3, #7
   2b9c4:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9c6:	f8c8 1004 	str.w	r1, [r8, #4]
   2b9ca:	9326      	str	r3, [sp, #152]	; 0x98
   2b9cc:	f300 834d 	bgt.w	2c06a <_svfprintf_r+0xa56>
   2b9d0:	f108 0808 	add.w	r8, r8, #8
   2b9d4:	9b07      	ldr	r3, [sp, #28]
   2b9d6:	075b      	lsls	r3, r3, #29
   2b9d8:	d53a      	bpl.n	2ba50 <_svfprintf_r+0x43c>
   2b9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b9dc:	9a08      	ldr	r2, [sp, #32]
   2b9de:	1a9d      	subs	r5, r3, r2
   2b9e0:	2d00      	cmp	r5, #0
   2b9e2:	dd35      	ble.n	2ba50 <_svfprintf_r+0x43c>
   2b9e4:	2d10      	cmp	r5, #16
   2b9e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9e8:	dd20      	ble.n	2ba2c <_svfprintf_r+0x418>
   2b9ea:	2610      	movs	r6, #16
   2b9ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b9ee:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b9f2:	e004      	b.n	2b9fe <_svfprintf_r+0x3ea>
   2b9f4:	3d10      	subs	r5, #16
   2b9f6:	2d10      	cmp	r5, #16
   2b9f8:	f108 0808 	add.w	r8, r8, #8
   2b9fc:	dd16      	ble.n	2ba2c <_svfprintf_r+0x418>
   2b9fe:	3301      	adds	r3, #1
   2ba00:	4a5e      	ldr	r2, [pc, #376]	; (2bb7c <_svfprintf_r+0x568>)
   2ba02:	9326      	str	r3, [sp, #152]	; 0x98
   2ba04:	3410      	adds	r4, #16
   2ba06:	2b07      	cmp	r3, #7
   2ba08:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba0a:	e888 0044 	stmia.w	r8, {r2, r6}
   2ba0e:	ddf1      	ble.n	2b9f4 <_svfprintf_r+0x3e0>
   2ba10:	aa25      	add	r2, sp, #148	; 0x94
   2ba12:	4659      	mov	r1, fp
   2ba14:	4638      	mov	r0, r7
   2ba16:	f002 fdcf 	bl	2e5b8 <__ssprint_r>
   2ba1a:	2800      	cmp	r0, #0
   2ba1c:	f47f aecc 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2ba20:	3d10      	subs	r5, #16
   2ba22:	2d10      	cmp	r5, #16
   2ba24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba28:	46c8      	mov	r8, r9
   2ba2a:	dce8      	bgt.n	2b9fe <_svfprintf_r+0x3ea>
   2ba2c:	3301      	adds	r3, #1
   2ba2e:	4a53      	ldr	r2, [pc, #332]	; (2bb7c <_svfprintf_r+0x568>)
   2ba30:	9326      	str	r3, [sp, #152]	; 0x98
   2ba32:	442c      	add	r4, r5
   2ba34:	2b07      	cmp	r3, #7
   2ba36:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba38:	e888 0024 	stmia.w	r8, {r2, r5}
   2ba3c:	dd08      	ble.n	2ba50 <_svfprintf_r+0x43c>
   2ba3e:	aa25      	add	r2, sp, #148	; 0x94
   2ba40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ba42:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ba44:	f002 fdb8 	bl	2e5b8 <__ssprint_r>
   2ba48:	2800      	cmp	r0, #0
   2ba4a:	f47f aeb5 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2ba4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ba52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2ba54:	9908      	ldr	r1, [sp, #32]
   2ba56:	428a      	cmp	r2, r1
   2ba58:	bfac      	ite	ge
   2ba5a:	189b      	addge	r3, r3, r2
   2ba5c:	185b      	addlt	r3, r3, r1
   2ba5e:	9309      	str	r3, [sp, #36]	; 0x24
   2ba60:	2c00      	cmp	r4, #0
   2ba62:	f040 830d 	bne.w	2c080 <_svfprintf_r+0xa6c>
   2ba66:	2300      	movs	r3, #0
   2ba68:	9326      	str	r3, [sp, #152]	; 0x98
   2ba6a:	46c8      	mov	r8, r9
   2ba6c:	e5f9      	b.n	2b662 <_svfprintf_r+0x4e>
   2ba6e:	9311      	str	r3, [sp, #68]	; 0x44
   2ba70:	f01b 0320 	ands.w	r3, fp, #32
   2ba74:	f040 81e3 	bne.w	2be3e <_svfprintf_r+0x82a>
   2ba78:	f01b 0210 	ands.w	r2, fp, #16
   2ba7c:	f040 842e 	bne.w	2c2dc <_svfprintf_r+0xcc8>
   2ba80:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2ba84:	f000 842a 	beq.w	2c2dc <_svfprintf_r+0xcc8>
   2ba88:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2ba8a:	4613      	mov	r3, r2
   2ba8c:	460a      	mov	r2, r1
   2ba8e:	3204      	adds	r2, #4
   2ba90:	880c      	ldrh	r4, [r1, #0]
   2ba92:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba94:	2500      	movs	r5, #0
   2ba96:	e6b0      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2ba98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ba9a:	9311      	str	r3, [sp, #68]	; 0x44
   2ba9c:	6816      	ldr	r6, [r2, #0]
   2ba9e:	2400      	movs	r4, #0
   2baa0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2baa4:	1d15      	adds	r5, r2, #4
   2baa6:	2e00      	cmp	r6, #0
   2baa8:	f000 86a7 	beq.w	2c7fa <_svfprintf_r+0x11e6>
   2baac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2baae:	1c53      	adds	r3, r2, #1
   2bab0:	f000 8609 	beq.w	2c6c6 <_svfprintf_r+0x10b2>
   2bab4:	4621      	mov	r1, r4
   2bab6:	4630      	mov	r0, r6
   2bab8:	f7d4 fbb2 	bl	220 <memchr>
   2babc:	2800      	cmp	r0, #0
   2babe:	f000 86e1 	beq.w	2c884 <_svfprintf_r+0x1270>
   2bac2:	1b83      	subs	r3, r0, r6
   2bac4:	930e      	str	r3, [sp, #56]	; 0x38
   2bac6:	940a      	str	r4, [sp, #40]	; 0x28
   2bac8:	950f      	str	r5, [sp, #60]	; 0x3c
   2baca:	f8cd b01c 	str.w	fp, [sp, #28]
   2bace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bad2:	9308      	str	r3, [sp, #32]
   2bad4:	9412      	str	r4, [sp, #72]	; 0x48
   2bad6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bada:	e6b3      	b.n	2b844 <_svfprintf_r+0x230>
   2badc:	f89a 3000 	ldrb.w	r3, [sl]
   2bae0:	2201      	movs	r2, #1
   2bae2:	212b      	movs	r1, #43	; 0x2b
   2bae4:	e5ee      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bae6:	f04b 0b20 	orr.w	fp, fp, #32
   2baea:	f89a 3000 	ldrb.w	r3, [sl]
   2baee:	e5e9      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2baf0:	9311      	str	r3, [sp, #68]	; 0x44
   2baf2:	2a00      	cmp	r2, #0
   2baf4:	f040 8795 	bne.w	2ca22 <_svfprintf_r+0x140e>
   2baf8:	4b22      	ldr	r3, [pc, #136]	; (2bb84 <_svfprintf_r+0x570>)
   2bafa:	9318      	str	r3, [sp, #96]	; 0x60
   2bafc:	f01b 0f20 	tst.w	fp, #32
   2bb00:	f040 8111 	bne.w	2bd26 <_svfprintf_r+0x712>
   2bb04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb06:	f01b 0f10 	tst.w	fp, #16
   2bb0a:	4613      	mov	r3, r2
   2bb0c:	f040 83e1 	bne.w	2c2d2 <_svfprintf_r+0xcbe>
   2bb10:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb14:	f000 83dd 	beq.w	2c2d2 <_svfprintf_r+0xcbe>
   2bb18:	3304      	adds	r3, #4
   2bb1a:	8814      	ldrh	r4, [r2, #0]
   2bb1c:	930f      	str	r3, [sp, #60]	; 0x3c
   2bb1e:	2500      	movs	r5, #0
   2bb20:	f01b 0f01 	tst.w	fp, #1
   2bb24:	f000 810c 	beq.w	2bd40 <_svfprintf_r+0x72c>
   2bb28:	ea54 0305 	orrs.w	r3, r4, r5
   2bb2c:	f000 8108 	beq.w	2bd40 <_svfprintf_r+0x72c>
   2bb30:	2330      	movs	r3, #48	; 0x30
   2bb32:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2bb36:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2bb3a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2bb3e:	f04b 0b02 	orr.w	fp, fp, #2
   2bb42:	2302      	movs	r3, #2
   2bb44:	e659      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2bb46:	f89a 3000 	ldrb.w	r3, [sl]
   2bb4a:	2900      	cmp	r1, #0
   2bb4c:	f47f adba 	bne.w	2b6c4 <_svfprintf_r+0xb0>
   2bb50:	2201      	movs	r2, #1
   2bb52:	2120      	movs	r1, #32
   2bb54:	e5b6      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bb56:	f04b 0b01 	orr.w	fp, fp, #1
   2bb5a:	f89a 3000 	ldrb.w	r3, [sl]
   2bb5e:	e5b1      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bb60:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bb62:	6823      	ldr	r3, [r4, #0]
   2bb64:	930d      	str	r3, [sp, #52]	; 0x34
   2bb66:	4618      	mov	r0, r3
   2bb68:	2800      	cmp	r0, #0
   2bb6a:	4623      	mov	r3, r4
   2bb6c:	f103 0304 	add.w	r3, r3, #4
   2bb70:	f6ff ae0a 	blt.w	2b788 <_svfprintf_r+0x174>
   2bb74:	930f      	str	r3, [sp, #60]	; 0x3c
   2bb76:	f89a 3000 	ldrb.w	r3, [sl]
   2bb7a:	e5a3      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bb7c:	00033478 	.word	0x00033478
   2bb80:	00033488 	.word	0x00033488
   2bb84:	0003345c 	.word	0x0003345c
   2bb88:	f04b 0b10 	orr.w	fp, fp, #16
   2bb8c:	f01b 0f20 	tst.w	fp, #32
   2bb90:	9311      	str	r3, [sp, #68]	; 0x44
   2bb92:	f43f ae23 	beq.w	2b7dc <_svfprintf_r+0x1c8>
   2bb96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bb98:	3507      	adds	r5, #7
   2bb9a:	f025 0307 	bic.w	r3, r5, #7
   2bb9e:	f103 0208 	add.w	r2, r3, #8
   2bba2:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bba6:	920f      	str	r2, [sp, #60]	; 0x3c
   2bba8:	2301      	movs	r3, #1
   2bbaa:	e626      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2bbac:	f89a 3000 	ldrb.w	r3, [sl]
   2bbb0:	2b2a      	cmp	r3, #42	; 0x2a
   2bbb2:	f10a 0401 	add.w	r4, sl, #1
   2bbb6:	f000 8727 	beq.w	2ca08 <_svfprintf_r+0x13f4>
   2bbba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bbbe:	2809      	cmp	r0, #9
   2bbc0:	46a2      	mov	sl, r4
   2bbc2:	f200 86ad 	bhi.w	2c920 <_svfprintf_r+0x130c>
   2bbc6:	2300      	movs	r3, #0
   2bbc8:	461c      	mov	r4, r3
   2bbca:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bbce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bbd2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bbd6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bbda:	2809      	cmp	r0, #9
   2bbdc:	d9f5      	bls.n	2bbca <_svfprintf_r+0x5b6>
   2bbde:	940a      	str	r4, [sp, #40]	; 0x28
   2bbe0:	e572      	b.n	2b6c8 <_svfprintf_r+0xb4>
   2bbe2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bbe6:	f89a 3000 	ldrb.w	r3, [sl]
   2bbea:	e56b      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bbec:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bbf0:	f89a 3000 	ldrb.w	r3, [sl]
   2bbf4:	e566      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bbf6:	f89a 3000 	ldrb.w	r3, [sl]
   2bbfa:	2b6c      	cmp	r3, #108	; 0x6c
   2bbfc:	bf03      	ittte	eq
   2bbfe:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2bc02:	f04b 0b20 	orreq.w	fp, fp, #32
   2bc06:	f10a 0a01 	addeq.w	sl, sl, #1
   2bc0a:	f04b 0b10 	orrne.w	fp, fp, #16
   2bc0e:	e559      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2bc10:	2a00      	cmp	r2, #0
   2bc12:	f040 8711 	bne.w	2ca38 <_svfprintf_r+0x1424>
   2bc16:	f01b 0f20 	tst.w	fp, #32
   2bc1a:	f040 84f9 	bne.w	2c610 <_svfprintf_r+0xffc>
   2bc1e:	f01b 0f10 	tst.w	fp, #16
   2bc22:	f040 84ac 	bne.w	2c57e <_svfprintf_r+0xf6a>
   2bc26:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bc2a:	f000 84a8 	beq.w	2c57e <_svfprintf_r+0xf6a>
   2bc2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bc30:	6813      	ldr	r3, [r2, #0]
   2bc32:	3204      	adds	r2, #4
   2bc34:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc36:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bc3a:	801a      	strh	r2, [r3, #0]
   2bc3c:	e511      	b.n	2b662 <_svfprintf_r+0x4e>
   2bc3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc40:	4bb3      	ldr	r3, [pc, #716]	; (2bf10 <_svfprintf_r+0x8fc>)
   2bc42:	680c      	ldr	r4, [r1, #0]
   2bc44:	9318      	str	r3, [sp, #96]	; 0x60
   2bc46:	2230      	movs	r2, #48	; 0x30
   2bc48:	2378      	movs	r3, #120	; 0x78
   2bc4a:	3104      	adds	r1, #4
   2bc4c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bc50:	9311      	str	r3, [sp, #68]	; 0x44
   2bc52:	f04b 0b02 	orr.w	fp, fp, #2
   2bc56:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc58:	2500      	movs	r5, #0
   2bc5a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bc5e:	2302      	movs	r3, #2
   2bc60:	e5cb      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2bc62:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc64:	9311      	str	r3, [sp, #68]	; 0x44
   2bc66:	680a      	ldr	r2, [r1, #0]
   2bc68:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bc6c:	2300      	movs	r3, #0
   2bc6e:	460a      	mov	r2, r1
   2bc70:	461f      	mov	r7, r3
   2bc72:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bc76:	3204      	adds	r2, #4
   2bc78:	2301      	movs	r3, #1
   2bc7a:	9308      	str	r3, [sp, #32]
   2bc7c:	f8cd b01c 	str.w	fp, [sp, #28]
   2bc80:	970a      	str	r7, [sp, #40]	; 0x28
   2bc82:	9712      	str	r7, [sp, #72]	; 0x48
   2bc84:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc86:	930e      	str	r3, [sp, #56]	; 0x38
   2bc88:	ae28      	add	r6, sp, #160	; 0xa0
   2bc8a:	e5df      	b.n	2b84c <_svfprintf_r+0x238>
   2bc8c:	9311      	str	r3, [sp, #68]	; 0x44
   2bc8e:	2a00      	cmp	r2, #0
   2bc90:	f040 86ea 	bne.w	2ca68 <_svfprintf_r+0x1454>
   2bc94:	f01b 0f20 	tst.w	fp, #32
   2bc98:	d15d      	bne.n	2bd56 <_svfprintf_r+0x742>
   2bc9a:	f01b 0f10 	tst.w	fp, #16
   2bc9e:	f040 8308 	bne.w	2c2b2 <_svfprintf_r+0xc9e>
   2bca2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bca6:	f000 8304 	beq.w	2c2b2 <_svfprintf_r+0xc9e>
   2bcaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bcac:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bcb0:	3104      	adds	r1, #4
   2bcb2:	17e5      	asrs	r5, r4, #31
   2bcb4:	4622      	mov	r2, r4
   2bcb6:	462b      	mov	r3, r5
   2bcb8:	910f      	str	r1, [sp, #60]	; 0x3c
   2bcba:	2a00      	cmp	r2, #0
   2bcbc:	f173 0300 	sbcs.w	r3, r3, #0
   2bcc0:	db58      	blt.n	2bd74 <_svfprintf_r+0x760>
   2bcc2:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bcc4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bcc8:	1c4a      	adds	r2, r1, #1
   2bcca:	f04f 0301 	mov.w	r3, #1
   2bcce:	f47f ad9b 	bne.w	2b808 <_svfprintf_r+0x1f4>
   2bcd2:	ea54 0205 	orrs.w	r2, r4, r5
   2bcd6:	f000 81df 	beq.w	2c098 <_svfprintf_r+0xa84>
   2bcda:	f8cd b01c 	str.w	fp, [sp, #28]
   2bcde:	2b01      	cmp	r3, #1
   2bce0:	f000 827b 	beq.w	2c1da <_svfprintf_r+0xbc6>
   2bce4:	2b02      	cmp	r3, #2
   2bce6:	f040 8206 	bne.w	2c0f6 <_svfprintf_r+0xae2>
   2bcea:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bcec:	464e      	mov	r6, r9
   2bcee:	0923      	lsrs	r3, r4, #4
   2bcf0:	f004 010f 	and.w	r1, r4, #15
   2bcf4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bcf8:	092a      	lsrs	r2, r5, #4
   2bcfa:	461c      	mov	r4, r3
   2bcfc:	4615      	mov	r5, r2
   2bcfe:	5c43      	ldrb	r3, [r0, r1]
   2bd00:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bd04:	ea54 0305 	orrs.w	r3, r4, r5
   2bd08:	d1f1      	bne.n	2bcee <_svfprintf_r+0x6da>
   2bd0a:	eba9 0306 	sub.w	r3, r9, r6
   2bd0e:	930e      	str	r3, [sp, #56]	; 0x38
   2bd10:	e590      	b.n	2b834 <_svfprintf_r+0x220>
   2bd12:	9311      	str	r3, [sp, #68]	; 0x44
   2bd14:	2a00      	cmp	r2, #0
   2bd16:	f040 86a3 	bne.w	2ca60 <_svfprintf_r+0x144c>
   2bd1a:	4b7e      	ldr	r3, [pc, #504]	; (2bf14 <_svfprintf_r+0x900>)
   2bd1c:	9318      	str	r3, [sp, #96]	; 0x60
   2bd1e:	f01b 0f20 	tst.w	fp, #32
   2bd22:	f43f aeef 	beq.w	2bb04 <_svfprintf_r+0x4f0>
   2bd26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd28:	3507      	adds	r5, #7
   2bd2a:	f025 0307 	bic.w	r3, r5, #7
   2bd2e:	f103 0208 	add.w	r2, r3, #8
   2bd32:	f01b 0f01 	tst.w	fp, #1
   2bd36:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd38:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bd3c:	f47f aef4 	bne.w	2bb28 <_svfprintf_r+0x514>
   2bd40:	2302      	movs	r3, #2
   2bd42:	e55a      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2bd44:	9311      	str	r3, [sp, #68]	; 0x44
   2bd46:	2a00      	cmp	r2, #0
   2bd48:	f040 8686 	bne.w	2ca58 <_svfprintf_r+0x1444>
   2bd4c:	f04b 0b10 	orr.w	fp, fp, #16
   2bd50:	f01b 0f20 	tst.w	fp, #32
   2bd54:	d0a1      	beq.n	2bc9a <_svfprintf_r+0x686>
   2bd56:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd58:	3507      	adds	r5, #7
   2bd5a:	f025 0507 	bic.w	r5, r5, #7
   2bd5e:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bd62:	2a00      	cmp	r2, #0
   2bd64:	f105 0108 	add.w	r1, r5, #8
   2bd68:	461d      	mov	r5, r3
   2bd6a:	f173 0300 	sbcs.w	r3, r3, #0
   2bd6e:	910f      	str	r1, [sp, #60]	; 0x3c
   2bd70:	4614      	mov	r4, r2
   2bd72:	daa6      	bge.n	2bcc2 <_svfprintf_r+0x6ae>
   2bd74:	272d      	movs	r7, #45	; 0x2d
   2bd76:	4264      	negs	r4, r4
   2bd78:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bd7c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bd80:	2301      	movs	r3, #1
   2bd82:	e53d      	b.n	2b800 <_svfprintf_r+0x1ec>
   2bd84:	9311      	str	r3, [sp, #68]	; 0x44
   2bd86:	2a00      	cmp	r2, #0
   2bd88:	f040 8662 	bne.w	2ca50 <_svfprintf_r+0x143c>
   2bd8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd8e:	3507      	adds	r5, #7
   2bd90:	f025 0307 	bic.w	r3, r5, #7
   2bd94:	f103 0208 	add.w	r2, r3, #8
   2bd98:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd9a:	681a      	ldr	r2, [r3, #0]
   2bd9c:	9215      	str	r2, [sp, #84]	; 0x54
   2bd9e:	685b      	ldr	r3, [r3, #4]
   2bda0:	9314      	str	r3, [sp, #80]	; 0x50
   2bda2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bda4:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2bda6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bdaa:	4628      	mov	r0, r5
   2bdac:	4621      	mov	r1, r4
   2bdae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bdb2:	4b59      	ldr	r3, [pc, #356]	; (2bf18 <_svfprintf_r+0x904>)
   2bdb4:	f7d5 f964 	bl	1080 <__aeabi_dcmpun>
   2bdb8:	2800      	cmp	r0, #0
   2bdba:	f040 834a 	bne.w	2c452 <_svfprintf_r+0xe3e>
   2bdbe:	4628      	mov	r0, r5
   2bdc0:	4621      	mov	r1, r4
   2bdc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bdc6:	4b54      	ldr	r3, [pc, #336]	; (2bf18 <_svfprintf_r+0x904>)
   2bdc8:	f7d5 f93c 	bl	1044 <__aeabi_dcmple>
   2bdcc:	2800      	cmp	r0, #0
   2bdce:	f040 8340 	bne.w	2c452 <_svfprintf_r+0xe3e>
   2bdd2:	a815      	add	r0, sp, #84	; 0x54
   2bdd4:	c80d      	ldmia	r0, {r0, r2, r3}
   2bdd6:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bdd8:	f7d5 f92a 	bl	1030 <__aeabi_dcmplt>
   2bddc:	2800      	cmp	r0, #0
   2bdde:	f040 8530 	bne.w	2c842 <_svfprintf_r+0x122e>
   2bde2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bde6:	4e4d      	ldr	r6, [pc, #308]	; (2bf1c <_svfprintf_r+0x908>)
   2bde8:	4b4d      	ldr	r3, [pc, #308]	; (2bf20 <_svfprintf_r+0x90c>)
   2bdea:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2bdee:	9007      	str	r0, [sp, #28]
   2bdf0:	9811      	ldr	r0, [sp, #68]	; 0x44
   2bdf2:	2203      	movs	r2, #3
   2bdf4:	2100      	movs	r1, #0
   2bdf6:	9208      	str	r2, [sp, #32]
   2bdf8:	910a      	str	r1, [sp, #40]	; 0x28
   2bdfa:	2847      	cmp	r0, #71	; 0x47
   2bdfc:	bfd8      	it	le
   2bdfe:	461e      	movle	r6, r3
   2be00:	920e      	str	r2, [sp, #56]	; 0x38
   2be02:	9112      	str	r1, [sp, #72]	; 0x48
   2be04:	e51e      	b.n	2b844 <_svfprintf_r+0x230>
   2be06:	f04b 0b08 	orr.w	fp, fp, #8
   2be0a:	f89a 3000 	ldrb.w	r3, [sl]
   2be0e:	e459      	b.n	2b6c4 <_svfprintf_r+0xb0>
   2be10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2be14:	2300      	movs	r3, #0
   2be16:	461c      	mov	r4, r3
   2be18:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2be1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2be20:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2be24:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2be28:	2809      	cmp	r0, #9
   2be2a:	d9f5      	bls.n	2be18 <_svfprintf_r+0x804>
   2be2c:	940d      	str	r4, [sp, #52]	; 0x34
   2be2e:	e44b      	b.n	2b6c8 <_svfprintf_r+0xb4>
   2be30:	f04b 0b10 	orr.w	fp, fp, #16
   2be34:	9311      	str	r3, [sp, #68]	; 0x44
   2be36:	f01b 0320 	ands.w	r3, fp, #32
   2be3a:	f43f ae1d 	beq.w	2ba78 <_svfprintf_r+0x464>
   2be3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2be40:	3507      	adds	r5, #7
   2be42:	f025 0307 	bic.w	r3, r5, #7
   2be46:	f103 0208 	add.w	r2, r3, #8
   2be4a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2be4e:	920f      	str	r2, [sp, #60]	; 0x3c
   2be50:	2300      	movs	r3, #0
   2be52:	e4d2      	b.n	2b7fa <_svfprintf_r+0x1e6>
   2be54:	9311      	str	r3, [sp, #68]	; 0x44
   2be56:	2a00      	cmp	r2, #0
   2be58:	f040 85e7 	bne.w	2ca2a <_svfprintf_r+0x1416>
   2be5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2be5e:	2a00      	cmp	r2, #0
   2be60:	f43f aca3 	beq.w	2b7aa <_svfprintf_r+0x196>
   2be64:	2300      	movs	r3, #0
   2be66:	2101      	movs	r1, #1
   2be68:	461f      	mov	r7, r3
   2be6a:	9108      	str	r1, [sp, #32]
   2be6c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2be70:	f8cd b01c 	str.w	fp, [sp, #28]
   2be74:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2be78:	930a      	str	r3, [sp, #40]	; 0x28
   2be7a:	9312      	str	r3, [sp, #72]	; 0x48
   2be7c:	910e      	str	r1, [sp, #56]	; 0x38
   2be7e:	ae28      	add	r6, sp, #160	; 0xa0
   2be80:	e4e4      	b.n	2b84c <_svfprintf_r+0x238>
   2be82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2be84:	e534      	b.n	2b8f0 <_svfprintf_r+0x2dc>
   2be86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2be88:	2b65      	cmp	r3, #101	; 0x65
   2be8a:	f340 80a7 	ble.w	2bfdc <_svfprintf_r+0x9c8>
   2be8e:	a815      	add	r0, sp, #84	; 0x54
   2be90:	c80d      	ldmia	r0, {r0, r2, r3}
   2be92:	9914      	ldr	r1, [sp, #80]	; 0x50
   2be94:	f7d5 f8c2 	bl	101c <__aeabi_dcmpeq>
   2be98:	2800      	cmp	r0, #0
   2be9a:	f000 8150 	beq.w	2c13e <_svfprintf_r+0xb2a>
   2be9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bea0:	4a20      	ldr	r2, [pc, #128]	; (2bf24 <_svfprintf_r+0x910>)
   2bea2:	f8c8 2000 	str.w	r2, [r8]
   2bea6:	3301      	adds	r3, #1
   2bea8:	3401      	adds	r4, #1
   2beaa:	2201      	movs	r2, #1
   2beac:	2b07      	cmp	r3, #7
   2beae:	9427      	str	r4, [sp, #156]	; 0x9c
   2beb0:	9326      	str	r3, [sp, #152]	; 0x98
   2beb2:	f8c8 2004 	str.w	r2, [r8, #4]
   2beb6:	f300 836a 	bgt.w	2c58e <_svfprintf_r+0xf7a>
   2beba:	f108 0808 	add.w	r8, r8, #8
   2bebe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2bec2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bec4:	4293      	cmp	r3, r2
   2bec6:	db03      	blt.n	2bed0 <_svfprintf_r+0x8bc>
   2bec8:	9b07      	ldr	r3, [sp, #28]
   2beca:	07dd      	lsls	r5, r3, #31
   2becc:	f57f ad82 	bpl.w	2b9d4 <_svfprintf_r+0x3c0>
   2bed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bed2:	9919      	ldr	r1, [sp, #100]	; 0x64
   2bed4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bed6:	f8c8 2000 	str.w	r2, [r8]
   2beda:	3301      	adds	r3, #1
   2bedc:	440c      	add	r4, r1
   2bede:	2b07      	cmp	r3, #7
   2bee0:	f8c8 1004 	str.w	r1, [r8, #4]
   2bee4:	9427      	str	r4, [sp, #156]	; 0x9c
   2bee6:	9326      	str	r3, [sp, #152]	; 0x98
   2bee8:	f300 839e 	bgt.w	2c628 <_svfprintf_r+0x1014>
   2beec:	f108 0808 	add.w	r8, r8, #8
   2bef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bef2:	1e5e      	subs	r6, r3, #1
   2bef4:	2e00      	cmp	r6, #0
   2bef6:	f77f ad6d 	ble.w	2b9d4 <_svfprintf_r+0x3c0>
   2befa:	2e10      	cmp	r6, #16
   2befc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2befe:	4d0a      	ldr	r5, [pc, #40]	; (2bf28 <_svfprintf_r+0x914>)
   2bf00:	f340 81f5 	ble.w	2c2ee <_svfprintf_r+0xcda>
   2bf04:	4622      	mov	r2, r4
   2bf06:	2710      	movs	r7, #16
   2bf08:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2bf0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bf0e:	e013      	b.n	2bf38 <_svfprintf_r+0x924>
   2bf10:	0003345c 	.word	0x0003345c
   2bf14:	00033448 	.word	0x00033448
   2bf18:	7fefffff 	.word	0x7fefffff
   2bf1c:	0003343c 	.word	0x0003343c
   2bf20:	00033438 	.word	0x00033438
   2bf24:	00032fb0 	.word	0x00032fb0
   2bf28:	00033488 	.word	0x00033488
   2bf2c:	f108 0808 	add.w	r8, r8, #8
   2bf30:	3e10      	subs	r6, #16
   2bf32:	2e10      	cmp	r6, #16
   2bf34:	f340 81da 	ble.w	2c2ec <_svfprintf_r+0xcd8>
   2bf38:	3301      	adds	r3, #1
   2bf3a:	3210      	adds	r2, #16
   2bf3c:	2b07      	cmp	r3, #7
   2bf3e:	9227      	str	r2, [sp, #156]	; 0x9c
   2bf40:	9326      	str	r3, [sp, #152]	; 0x98
   2bf42:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bf46:	ddf1      	ble.n	2bf2c <_svfprintf_r+0x918>
   2bf48:	aa25      	add	r2, sp, #148	; 0x94
   2bf4a:	4621      	mov	r1, r4
   2bf4c:	4658      	mov	r0, fp
   2bf4e:	f002 fb33 	bl	2e5b8 <__ssprint_r>
   2bf52:	2800      	cmp	r0, #0
   2bf54:	f47f ac30 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2bf58:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bf5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf5c:	46c8      	mov	r8, r9
   2bf5e:	e7e7      	b.n	2bf30 <_svfprintf_r+0x91c>
   2bf60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bf62:	9a08      	ldr	r2, [sp, #32]
   2bf64:	1a9f      	subs	r7, r3, r2
   2bf66:	2f00      	cmp	r7, #0
   2bf68:	f77f ace5 	ble.w	2b936 <_svfprintf_r+0x322>
   2bf6c:	2f10      	cmp	r7, #16
   2bf6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf70:	4db6      	ldr	r5, [pc, #728]	; (2c24c <_svfprintf_r+0xc38>)
   2bf72:	dd27      	ble.n	2bfc4 <_svfprintf_r+0x9b0>
   2bf74:	4642      	mov	r2, r8
   2bf76:	4621      	mov	r1, r4
   2bf78:	46b0      	mov	r8, r6
   2bf7a:	f04f 0b10 	mov.w	fp, #16
   2bf7e:	462e      	mov	r6, r5
   2bf80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bf82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2bf84:	e004      	b.n	2bf90 <_svfprintf_r+0x97c>
   2bf86:	3f10      	subs	r7, #16
   2bf88:	2f10      	cmp	r7, #16
   2bf8a:	f102 0208 	add.w	r2, r2, #8
   2bf8e:	dd15      	ble.n	2bfbc <_svfprintf_r+0x9a8>
   2bf90:	3301      	adds	r3, #1
   2bf92:	3110      	adds	r1, #16
   2bf94:	2b07      	cmp	r3, #7
   2bf96:	9127      	str	r1, [sp, #156]	; 0x9c
   2bf98:	9326      	str	r3, [sp, #152]	; 0x98
   2bf9a:	e882 0840 	stmia.w	r2, {r6, fp}
   2bf9e:	ddf2      	ble.n	2bf86 <_svfprintf_r+0x972>
   2bfa0:	aa25      	add	r2, sp, #148	; 0x94
   2bfa2:	4629      	mov	r1, r5
   2bfa4:	4620      	mov	r0, r4
   2bfa6:	f002 fb07 	bl	2e5b8 <__ssprint_r>
   2bfaa:	2800      	cmp	r0, #0
   2bfac:	f47f ac04 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2bfb0:	3f10      	subs	r7, #16
   2bfb2:	2f10      	cmp	r7, #16
   2bfb4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2bfb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bfb8:	464a      	mov	r2, r9
   2bfba:	dce9      	bgt.n	2bf90 <_svfprintf_r+0x97c>
   2bfbc:	4635      	mov	r5, r6
   2bfbe:	460c      	mov	r4, r1
   2bfc0:	4646      	mov	r6, r8
   2bfc2:	4690      	mov	r8, r2
   2bfc4:	3301      	adds	r3, #1
   2bfc6:	443c      	add	r4, r7
   2bfc8:	2b07      	cmp	r3, #7
   2bfca:	9427      	str	r4, [sp, #156]	; 0x9c
   2bfcc:	9326      	str	r3, [sp, #152]	; 0x98
   2bfce:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bfd2:	f300 8232 	bgt.w	2c43a <_svfprintf_r+0xe26>
   2bfd6:	f108 0808 	add.w	r8, r8, #8
   2bfda:	e4ac      	b.n	2b936 <_svfprintf_r+0x322>
   2bfdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bfde:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bfe0:	2b01      	cmp	r3, #1
   2bfe2:	f340 81fe 	ble.w	2c3e2 <_svfprintf_r+0xdce>
   2bfe6:	3701      	adds	r7, #1
   2bfe8:	3401      	adds	r4, #1
   2bfea:	2301      	movs	r3, #1
   2bfec:	2f07      	cmp	r7, #7
   2bfee:	9427      	str	r4, [sp, #156]	; 0x9c
   2bff0:	9726      	str	r7, [sp, #152]	; 0x98
   2bff2:	f8c8 6000 	str.w	r6, [r8]
   2bff6:	f8c8 3004 	str.w	r3, [r8, #4]
   2bffa:	f300 8203 	bgt.w	2c404 <_svfprintf_r+0xdf0>
   2bffe:	f108 0808 	add.w	r8, r8, #8
   2c002:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c004:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2c006:	f8c8 3000 	str.w	r3, [r8]
   2c00a:	3701      	adds	r7, #1
   2c00c:	4414      	add	r4, r2
   2c00e:	2f07      	cmp	r7, #7
   2c010:	9427      	str	r4, [sp, #156]	; 0x9c
   2c012:	9726      	str	r7, [sp, #152]	; 0x98
   2c014:	f8c8 2004 	str.w	r2, [r8, #4]
   2c018:	f300 8200 	bgt.w	2c41c <_svfprintf_r+0xe08>
   2c01c:	f108 0808 	add.w	r8, r8, #8
   2c020:	a815      	add	r0, sp, #84	; 0x54
   2c022:	c80d      	ldmia	r0, {r0, r2, r3}
   2c024:	9914      	ldr	r1, [sp, #80]	; 0x50
   2c026:	f7d4 fff9 	bl	101c <__aeabi_dcmpeq>
   2c02a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c02c:	2800      	cmp	r0, #0
   2c02e:	f040 8101 	bne.w	2c234 <_svfprintf_r+0xc20>
   2c032:	3b01      	subs	r3, #1
   2c034:	3701      	adds	r7, #1
   2c036:	3601      	adds	r6, #1
   2c038:	441c      	add	r4, r3
   2c03a:	2f07      	cmp	r7, #7
   2c03c:	9726      	str	r7, [sp, #152]	; 0x98
   2c03e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c040:	f8c8 6000 	str.w	r6, [r8]
   2c044:	f8c8 3004 	str.w	r3, [r8, #4]
   2c048:	f300 8127 	bgt.w	2c29a <_svfprintf_r+0xc86>
   2c04c:	f108 0808 	add.w	r8, r8, #8
   2c050:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2c052:	f8c8 2004 	str.w	r2, [r8, #4]
   2c056:	3701      	adds	r7, #1
   2c058:	4414      	add	r4, r2
   2c05a:	ab21      	add	r3, sp, #132	; 0x84
   2c05c:	2f07      	cmp	r7, #7
   2c05e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c060:	9726      	str	r7, [sp, #152]	; 0x98
   2c062:	f8c8 3000 	str.w	r3, [r8]
   2c066:	f77f acb3 	ble.w	2b9d0 <_svfprintf_r+0x3bc>
   2c06a:	aa25      	add	r2, sp, #148	; 0x94
   2c06c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c06e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c070:	f002 faa2 	bl	2e5b8 <__ssprint_r>
   2c074:	2800      	cmp	r0, #0
   2c076:	f47f ab9f 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c07a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c07c:	46c8      	mov	r8, r9
   2c07e:	e4a9      	b.n	2b9d4 <_svfprintf_r+0x3c0>
   2c080:	aa25      	add	r2, sp, #148	; 0x94
   2c082:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c084:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c086:	f002 fa97 	bl	2e5b8 <__ssprint_r>
   2c08a:	2800      	cmp	r0, #0
   2c08c:	f43f aceb 	beq.w	2ba66 <_svfprintf_r+0x452>
   2c090:	f7ff bb92 	b.w	2b7b8 <_svfprintf_r+0x1a4>
   2c094:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c098:	2b01      	cmp	r3, #1
   2c09a:	f000 8134 	beq.w	2c306 <_svfprintf_r+0xcf2>
   2c09e:	2b02      	cmp	r3, #2
   2c0a0:	d125      	bne.n	2c0ee <_svfprintf_r+0xada>
   2c0a2:	f8cd b01c 	str.w	fp, [sp, #28]
   2c0a6:	2400      	movs	r4, #0
   2c0a8:	2500      	movs	r5, #0
   2c0aa:	e61e      	b.n	2bcea <_svfprintf_r+0x6d6>
   2c0ac:	aa25      	add	r2, sp, #148	; 0x94
   2c0ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0b2:	f002 fa81 	bl	2e5b8 <__ssprint_r>
   2c0b6:	2800      	cmp	r0, #0
   2c0b8:	f47f ab7e 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c0bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c0be:	46c8      	mov	r8, r9
   2c0c0:	e475      	b.n	2b9ae <_svfprintf_r+0x39a>
   2c0c2:	aa25      	add	r2, sp, #148	; 0x94
   2c0c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0c8:	f002 fa76 	bl	2e5b8 <__ssprint_r>
   2c0cc:	2800      	cmp	r0, #0
   2c0ce:	f47f ab73 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c0d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c0d4:	46c8      	mov	r8, r9
   2c0d6:	e41b      	b.n	2b910 <_svfprintf_r+0x2fc>
   2c0d8:	aa25      	add	r2, sp, #148	; 0x94
   2c0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0de:	f002 fa6b 	bl	2e5b8 <__ssprint_r>
   2c0e2:	2800      	cmp	r0, #0
   2c0e4:	f47f ab68 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c0e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c0ea:	46c8      	mov	r8, r9
   2c0ec:	e420      	b.n	2b930 <_svfprintf_r+0x31c>
   2c0ee:	f8cd b01c 	str.w	fp, [sp, #28]
   2c0f2:	2400      	movs	r4, #0
   2c0f4:	2500      	movs	r5, #0
   2c0f6:	4649      	mov	r1, r9
   2c0f8:	e000      	b.n	2c0fc <_svfprintf_r+0xae8>
   2c0fa:	4631      	mov	r1, r6
   2c0fc:	08e2      	lsrs	r2, r4, #3
   2c0fe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2c102:	08e8      	lsrs	r0, r5, #3
   2c104:	f004 0307 	and.w	r3, r4, #7
   2c108:	4605      	mov	r5, r0
   2c10a:	4614      	mov	r4, r2
   2c10c:	3330      	adds	r3, #48	; 0x30
   2c10e:	ea54 0205 	orrs.w	r2, r4, r5
   2c112:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c116:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c11a:	d1ee      	bne.n	2c0fa <_svfprintf_r+0xae6>
   2c11c:	9a07      	ldr	r2, [sp, #28]
   2c11e:	07d2      	lsls	r2, r2, #31
   2c120:	f57f adf3 	bpl.w	2bd0a <_svfprintf_r+0x6f6>
   2c124:	2b30      	cmp	r3, #48	; 0x30
   2c126:	f43f adf0 	beq.w	2bd0a <_svfprintf_r+0x6f6>
   2c12a:	3902      	subs	r1, #2
   2c12c:	2330      	movs	r3, #48	; 0x30
   2c12e:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c132:	eba9 0301 	sub.w	r3, r9, r1
   2c136:	930e      	str	r3, [sp, #56]	; 0x38
   2c138:	460e      	mov	r6, r1
   2c13a:	f7ff bb7b 	b.w	2b834 <_svfprintf_r+0x220>
   2c13e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c140:	2900      	cmp	r1, #0
   2c142:	f340 822e 	ble.w	2c5a2 <_svfprintf_r+0xf8e>
   2c146:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c14a:	4293      	cmp	r3, r2
   2c14c:	bfa8      	it	ge
   2c14e:	4613      	movge	r3, r2
   2c150:	2b00      	cmp	r3, #0
   2c152:	461f      	mov	r7, r3
   2c154:	dd0d      	ble.n	2c172 <_svfprintf_r+0xb5e>
   2c156:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c158:	f8c8 6000 	str.w	r6, [r8]
   2c15c:	3301      	adds	r3, #1
   2c15e:	443c      	add	r4, r7
   2c160:	2b07      	cmp	r3, #7
   2c162:	9427      	str	r4, [sp, #156]	; 0x9c
   2c164:	f8c8 7004 	str.w	r7, [r8, #4]
   2c168:	9326      	str	r3, [sp, #152]	; 0x98
   2c16a:	f300 831f 	bgt.w	2c7ac <_svfprintf_r+0x1198>
   2c16e:	f108 0808 	add.w	r8, r8, #8
   2c172:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c174:	2f00      	cmp	r7, #0
   2c176:	bfa8      	it	ge
   2c178:	1bdb      	subge	r3, r3, r7
   2c17a:	2b00      	cmp	r3, #0
   2c17c:	461f      	mov	r7, r3
   2c17e:	f340 80d6 	ble.w	2c32e <_svfprintf_r+0xd1a>
   2c182:	2f10      	cmp	r7, #16
   2c184:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c186:	4d31      	ldr	r5, [pc, #196]	; (2c24c <_svfprintf_r+0xc38>)
   2c188:	f340 81ed 	ble.w	2c566 <_svfprintf_r+0xf52>
   2c18c:	4642      	mov	r2, r8
   2c18e:	4621      	mov	r1, r4
   2c190:	46b0      	mov	r8, r6
   2c192:	f04f 0b10 	mov.w	fp, #16
   2c196:	462e      	mov	r6, r5
   2c198:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c19a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c19c:	e004      	b.n	2c1a8 <_svfprintf_r+0xb94>
   2c19e:	3208      	adds	r2, #8
   2c1a0:	3f10      	subs	r7, #16
   2c1a2:	2f10      	cmp	r7, #16
   2c1a4:	f340 81db 	ble.w	2c55e <_svfprintf_r+0xf4a>
   2c1a8:	3301      	adds	r3, #1
   2c1aa:	3110      	adds	r1, #16
   2c1ac:	2b07      	cmp	r3, #7
   2c1ae:	9127      	str	r1, [sp, #156]	; 0x9c
   2c1b0:	9326      	str	r3, [sp, #152]	; 0x98
   2c1b2:	e882 0840 	stmia.w	r2, {r6, fp}
   2c1b6:	ddf2      	ble.n	2c19e <_svfprintf_r+0xb8a>
   2c1b8:	aa25      	add	r2, sp, #148	; 0x94
   2c1ba:	4629      	mov	r1, r5
   2c1bc:	4620      	mov	r0, r4
   2c1be:	f002 f9fb 	bl	2e5b8 <__ssprint_r>
   2c1c2:	2800      	cmp	r0, #0
   2c1c4:	f47f aaf8 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c1c8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c1ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c1cc:	464a      	mov	r2, r9
   2c1ce:	e7e7      	b.n	2c1a0 <_svfprintf_r+0xb8c>
   2c1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c1d2:	930e      	str	r3, [sp, #56]	; 0x38
   2c1d4:	464e      	mov	r6, r9
   2c1d6:	f7ff bb2d 	b.w	2b834 <_svfprintf_r+0x220>
   2c1da:	2d00      	cmp	r5, #0
   2c1dc:	bf08      	it	eq
   2c1de:	2c0a      	cmpeq	r4, #10
   2c1e0:	f0c0 808f 	bcc.w	2c302 <_svfprintf_r+0xcee>
   2c1e4:	464e      	mov	r6, r9
   2c1e6:	4620      	mov	r0, r4
   2c1e8:	4629      	mov	r1, r5
   2c1ea:	220a      	movs	r2, #10
   2c1ec:	2300      	movs	r3, #0
   2c1ee:	f7d4 ff85 	bl	10fc <__aeabi_uldivmod>
   2c1f2:	3230      	adds	r2, #48	; 0x30
   2c1f4:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c1f8:	4620      	mov	r0, r4
   2c1fa:	4629      	mov	r1, r5
   2c1fc:	2300      	movs	r3, #0
   2c1fe:	220a      	movs	r2, #10
   2c200:	f7d4 ff7c 	bl	10fc <__aeabi_uldivmod>
   2c204:	4604      	mov	r4, r0
   2c206:	460d      	mov	r5, r1
   2c208:	ea54 0305 	orrs.w	r3, r4, r5
   2c20c:	d1eb      	bne.n	2c1e6 <_svfprintf_r+0xbd2>
   2c20e:	eba9 0306 	sub.w	r3, r9, r6
   2c212:	930e      	str	r3, [sp, #56]	; 0x38
   2c214:	f7ff bb0e 	b.w	2b834 <_svfprintf_r+0x220>
   2c218:	aa25      	add	r2, sp, #148	; 0x94
   2c21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c21c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c21e:	f002 f9cb 	bl	2e5b8 <__ssprint_r>
   2c222:	2800      	cmp	r0, #0
   2c224:	f47f aac8 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c228:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c22c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c22e:	46c8      	mov	r8, r9
   2c230:	f7ff bb5e 	b.w	2b8f0 <_svfprintf_r+0x2dc>
   2c234:	1e5e      	subs	r6, r3, #1
   2c236:	2e00      	cmp	r6, #0
   2c238:	f77f af0a 	ble.w	2c050 <_svfprintf_r+0xa3c>
   2c23c:	2e10      	cmp	r6, #16
   2c23e:	4d03      	ldr	r5, [pc, #12]	; (2c24c <_svfprintf_r+0xc38>)
   2c240:	dd22      	ble.n	2c288 <_svfprintf_r+0xc74>
   2c242:	4622      	mov	r2, r4
   2c244:	f04f 0b10 	mov.w	fp, #16
   2c248:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c24a:	e006      	b.n	2c25a <_svfprintf_r+0xc46>
   2c24c:	00033488 	.word	0x00033488
   2c250:	3e10      	subs	r6, #16
   2c252:	2e10      	cmp	r6, #16
   2c254:	f108 0808 	add.w	r8, r8, #8
   2c258:	dd15      	ble.n	2c286 <_svfprintf_r+0xc72>
   2c25a:	3701      	adds	r7, #1
   2c25c:	3210      	adds	r2, #16
   2c25e:	2f07      	cmp	r7, #7
   2c260:	9227      	str	r2, [sp, #156]	; 0x9c
   2c262:	9726      	str	r7, [sp, #152]	; 0x98
   2c264:	e888 0820 	stmia.w	r8, {r5, fp}
   2c268:	ddf2      	ble.n	2c250 <_svfprintf_r+0xc3c>
   2c26a:	aa25      	add	r2, sp, #148	; 0x94
   2c26c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c26e:	4620      	mov	r0, r4
   2c270:	f002 f9a2 	bl	2e5b8 <__ssprint_r>
   2c274:	2800      	cmp	r0, #0
   2c276:	f47f aa9f 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c27a:	3e10      	subs	r6, #16
   2c27c:	2e10      	cmp	r6, #16
   2c27e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c280:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c282:	46c8      	mov	r8, r9
   2c284:	dce9      	bgt.n	2c25a <_svfprintf_r+0xc46>
   2c286:	4614      	mov	r4, r2
   2c288:	3701      	adds	r7, #1
   2c28a:	4434      	add	r4, r6
   2c28c:	2f07      	cmp	r7, #7
   2c28e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c290:	9726      	str	r7, [sp, #152]	; 0x98
   2c292:	e888 0060 	stmia.w	r8, {r5, r6}
   2c296:	f77f aed9 	ble.w	2c04c <_svfprintf_r+0xa38>
   2c29a:	aa25      	add	r2, sp, #148	; 0x94
   2c29c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c29e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2a0:	f002 f98a 	bl	2e5b8 <__ssprint_r>
   2c2a4:	2800      	cmp	r0, #0
   2c2a6:	f47f aa87 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c2aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c2ac:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c2ae:	46c8      	mov	r8, r9
   2c2b0:	e6ce      	b.n	2c050 <_svfprintf_r+0xa3c>
   2c2b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c2b4:	6814      	ldr	r4, [r2, #0]
   2c2b6:	4613      	mov	r3, r2
   2c2b8:	3304      	adds	r3, #4
   2c2ba:	17e5      	asrs	r5, r4, #31
   2c2bc:	930f      	str	r3, [sp, #60]	; 0x3c
   2c2be:	4622      	mov	r2, r4
   2c2c0:	462b      	mov	r3, r5
   2c2c2:	e4fa      	b.n	2bcba <_svfprintf_r+0x6a6>
   2c2c4:	3204      	adds	r2, #4
   2c2c6:	681c      	ldr	r4, [r3, #0]
   2c2c8:	920f      	str	r2, [sp, #60]	; 0x3c
   2c2ca:	2301      	movs	r3, #1
   2c2cc:	2500      	movs	r5, #0
   2c2ce:	f7ff ba94 	b.w	2b7fa <_svfprintf_r+0x1e6>
   2c2d2:	681c      	ldr	r4, [r3, #0]
   2c2d4:	3304      	adds	r3, #4
   2c2d6:	930f      	str	r3, [sp, #60]	; 0x3c
   2c2d8:	2500      	movs	r5, #0
   2c2da:	e421      	b.n	2bb20 <_svfprintf_r+0x50c>
   2c2dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c2de:	460a      	mov	r2, r1
   2c2e0:	3204      	adds	r2, #4
   2c2e2:	680c      	ldr	r4, [r1, #0]
   2c2e4:	920f      	str	r2, [sp, #60]	; 0x3c
   2c2e6:	2500      	movs	r5, #0
   2c2e8:	f7ff ba87 	b.w	2b7fa <_svfprintf_r+0x1e6>
   2c2ec:	4614      	mov	r4, r2
   2c2ee:	3301      	adds	r3, #1
   2c2f0:	4434      	add	r4, r6
   2c2f2:	2b07      	cmp	r3, #7
   2c2f4:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2f6:	9326      	str	r3, [sp, #152]	; 0x98
   2c2f8:	e888 0060 	stmia.w	r8, {r5, r6}
   2c2fc:	f77f ab68 	ble.w	2b9d0 <_svfprintf_r+0x3bc>
   2c300:	e6b3      	b.n	2c06a <_svfprintf_r+0xa56>
   2c302:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c306:	f8cd b01c 	str.w	fp, [sp, #28]
   2c30a:	ae42      	add	r6, sp, #264	; 0x108
   2c30c:	3430      	adds	r4, #48	; 0x30
   2c30e:	2301      	movs	r3, #1
   2c310:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c314:	930e      	str	r3, [sp, #56]	; 0x38
   2c316:	f7ff ba8d 	b.w	2b834 <_svfprintf_r+0x220>
   2c31a:	aa25      	add	r2, sp, #148	; 0x94
   2c31c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c31e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c320:	f002 f94a 	bl	2e5b8 <__ssprint_r>
   2c324:	2800      	cmp	r0, #0
   2c326:	f47f aa47 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c32a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c32c:	46c8      	mov	r8, r9
   2c32e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c332:	429a      	cmp	r2, r3
   2c334:	db44      	blt.n	2c3c0 <_svfprintf_r+0xdac>
   2c336:	9b07      	ldr	r3, [sp, #28]
   2c338:	07d9      	lsls	r1, r3, #31
   2c33a:	d441      	bmi.n	2c3c0 <_svfprintf_r+0xdac>
   2c33c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c33e:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c340:	1a9a      	subs	r2, r3, r2
   2c342:	1a1d      	subs	r5, r3, r0
   2c344:	4295      	cmp	r5, r2
   2c346:	bfa8      	it	ge
   2c348:	4615      	movge	r5, r2
   2c34a:	2d00      	cmp	r5, #0
   2c34c:	dd0e      	ble.n	2c36c <_svfprintf_r+0xd58>
   2c34e:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c350:	f8c8 5004 	str.w	r5, [r8, #4]
   2c354:	3101      	adds	r1, #1
   2c356:	4406      	add	r6, r0
   2c358:	442c      	add	r4, r5
   2c35a:	2907      	cmp	r1, #7
   2c35c:	f8c8 6000 	str.w	r6, [r8]
   2c360:	9427      	str	r4, [sp, #156]	; 0x9c
   2c362:	9126      	str	r1, [sp, #152]	; 0x98
   2c364:	f300 823b 	bgt.w	2c7de <_svfprintf_r+0x11ca>
   2c368:	f108 0808 	add.w	r8, r8, #8
   2c36c:	2d00      	cmp	r5, #0
   2c36e:	bfac      	ite	ge
   2c370:	1b56      	subge	r6, r2, r5
   2c372:	4616      	movlt	r6, r2
   2c374:	2e00      	cmp	r6, #0
   2c376:	f77f ab2d 	ble.w	2b9d4 <_svfprintf_r+0x3c0>
   2c37a:	2e10      	cmp	r6, #16
   2c37c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c37e:	4db0      	ldr	r5, [pc, #704]	; (2c640 <_svfprintf_r+0x102c>)
   2c380:	ddb5      	ble.n	2c2ee <_svfprintf_r+0xcda>
   2c382:	4622      	mov	r2, r4
   2c384:	2710      	movs	r7, #16
   2c386:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c38a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c38c:	e004      	b.n	2c398 <_svfprintf_r+0xd84>
   2c38e:	f108 0808 	add.w	r8, r8, #8
   2c392:	3e10      	subs	r6, #16
   2c394:	2e10      	cmp	r6, #16
   2c396:	dda9      	ble.n	2c2ec <_svfprintf_r+0xcd8>
   2c398:	3301      	adds	r3, #1
   2c39a:	3210      	adds	r2, #16
   2c39c:	2b07      	cmp	r3, #7
   2c39e:	9227      	str	r2, [sp, #156]	; 0x9c
   2c3a0:	9326      	str	r3, [sp, #152]	; 0x98
   2c3a2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c3a6:	ddf2      	ble.n	2c38e <_svfprintf_r+0xd7a>
   2c3a8:	aa25      	add	r2, sp, #148	; 0x94
   2c3aa:	4621      	mov	r1, r4
   2c3ac:	4658      	mov	r0, fp
   2c3ae:	f002 f903 	bl	2e5b8 <__ssprint_r>
   2c3b2:	2800      	cmp	r0, #0
   2c3b4:	f47f aa00 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c3b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c3ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c3bc:	46c8      	mov	r8, r9
   2c3be:	e7e8      	b.n	2c392 <_svfprintf_r+0xd7e>
   2c3c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c3c2:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c3c4:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c3c6:	f8c8 1000 	str.w	r1, [r8]
   2c3ca:	3301      	adds	r3, #1
   2c3cc:	4404      	add	r4, r0
   2c3ce:	2b07      	cmp	r3, #7
   2c3d0:	9427      	str	r4, [sp, #156]	; 0x9c
   2c3d2:	f8c8 0004 	str.w	r0, [r8, #4]
   2c3d6:	9326      	str	r3, [sp, #152]	; 0x98
   2c3d8:	f300 81f5 	bgt.w	2c7c6 <_svfprintf_r+0x11b2>
   2c3dc:	f108 0808 	add.w	r8, r8, #8
   2c3e0:	e7ac      	b.n	2c33c <_svfprintf_r+0xd28>
   2c3e2:	9b07      	ldr	r3, [sp, #28]
   2c3e4:	07da      	lsls	r2, r3, #31
   2c3e6:	f53f adfe 	bmi.w	2bfe6 <_svfprintf_r+0x9d2>
   2c3ea:	3701      	adds	r7, #1
   2c3ec:	3401      	adds	r4, #1
   2c3ee:	2301      	movs	r3, #1
   2c3f0:	2f07      	cmp	r7, #7
   2c3f2:	9427      	str	r4, [sp, #156]	; 0x9c
   2c3f4:	9726      	str	r7, [sp, #152]	; 0x98
   2c3f6:	f8c8 6000 	str.w	r6, [r8]
   2c3fa:	f8c8 3004 	str.w	r3, [r8, #4]
   2c3fe:	f77f ae25 	ble.w	2c04c <_svfprintf_r+0xa38>
   2c402:	e74a      	b.n	2c29a <_svfprintf_r+0xc86>
   2c404:	aa25      	add	r2, sp, #148	; 0x94
   2c406:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c408:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c40a:	f002 f8d5 	bl	2e5b8 <__ssprint_r>
   2c40e:	2800      	cmp	r0, #0
   2c410:	f47f a9d2 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c414:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c416:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c418:	46c8      	mov	r8, r9
   2c41a:	e5f2      	b.n	2c002 <_svfprintf_r+0x9ee>
   2c41c:	aa25      	add	r2, sp, #148	; 0x94
   2c41e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c420:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c422:	f002 f8c9 	bl	2e5b8 <__ssprint_r>
   2c426:	2800      	cmp	r0, #0
   2c428:	f47f a9c6 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c42c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c42e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c430:	46c8      	mov	r8, r9
   2c432:	e5f5      	b.n	2c020 <_svfprintf_r+0xa0c>
   2c434:	464e      	mov	r6, r9
   2c436:	f7ff b9fd 	b.w	2b834 <_svfprintf_r+0x220>
   2c43a:	aa25      	add	r2, sp, #148	; 0x94
   2c43c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c43e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c440:	f002 f8ba 	bl	2e5b8 <__ssprint_r>
   2c444:	2800      	cmp	r0, #0
   2c446:	f47f a9b7 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c44a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c44c:	46c8      	mov	r8, r9
   2c44e:	f7ff ba72 	b.w	2b936 <_svfprintf_r+0x322>
   2c452:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c454:	4622      	mov	r2, r4
   2c456:	4620      	mov	r0, r4
   2c458:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c45a:	4623      	mov	r3, r4
   2c45c:	4621      	mov	r1, r4
   2c45e:	f7d4 fe0f 	bl	1080 <__aeabi_dcmpun>
   2c462:	2800      	cmp	r0, #0
   2c464:	f040 8286 	bne.w	2c974 <_svfprintf_r+0x1360>
   2c468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c46a:	3301      	adds	r3, #1
   2c46c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c46e:	f023 0320 	bic.w	r3, r3, #32
   2c472:	930e      	str	r3, [sp, #56]	; 0x38
   2c474:	f000 81e2 	beq.w	2c83c <_svfprintf_r+0x1228>
   2c478:	2b47      	cmp	r3, #71	; 0x47
   2c47a:	f000 811e 	beq.w	2c6ba <_svfprintf_r+0x10a6>
   2c47e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c482:	9307      	str	r3, [sp, #28]
   2c484:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c486:	1e1f      	subs	r7, r3, #0
   2c488:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c48a:	9308      	str	r3, [sp, #32]
   2c48c:	bfbb      	ittet	lt
   2c48e:	463b      	movlt	r3, r7
   2c490:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c494:	2300      	movge	r3, #0
   2c496:	232d      	movlt	r3, #45	; 0x2d
   2c498:	9310      	str	r3, [sp, #64]	; 0x40
   2c49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c49c:	2b66      	cmp	r3, #102	; 0x66
   2c49e:	f000 81bb 	beq.w	2c818 <_svfprintf_r+0x1204>
   2c4a2:	2b46      	cmp	r3, #70	; 0x46
   2c4a4:	f000 80df 	beq.w	2c666 <_svfprintf_r+0x1052>
   2c4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c4aa:	9a08      	ldr	r2, [sp, #32]
   2c4ac:	2b45      	cmp	r3, #69	; 0x45
   2c4ae:	bf0c      	ite	eq
   2c4b0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c4b2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c4b4:	a823      	add	r0, sp, #140	; 0x8c
   2c4b6:	a920      	add	r1, sp, #128	; 0x80
   2c4b8:	bf08      	it	eq
   2c4ba:	1c5d      	addeq	r5, r3, #1
   2c4bc:	9004      	str	r0, [sp, #16]
   2c4be:	9103      	str	r1, [sp, #12]
   2c4c0:	a81f      	add	r0, sp, #124	; 0x7c
   2c4c2:	2102      	movs	r1, #2
   2c4c4:	463b      	mov	r3, r7
   2c4c6:	9002      	str	r0, [sp, #8]
   2c4c8:	9501      	str	r5, [sp, #4]
   2c4ca:	9100      	str	r1, [sp, #0]
   2c4cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c4ce:	f000 fb73 	bl	2cbb8 <_dtoa_r>
   2c4d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4d4:	2b67      	cmp	r3, #103	; 0x67
   2c4d6:	4606      	mov	r6, r0
   2c4d8:	f040 81e0 	bne.w	2c89c <_svfprintf_r+0x1288>
   2c4dc:	f01b 0f01 	tst.w	fp, #1
   2c4e0:	f000 8246 	beq.w	2c970 <_svfprintf_r+0x135c>
   2c4e4:	1974      	adds	r4, r6, r5
   2c4e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c4e8:	9808      	ldr	r0, [sp, #32]
   2c4ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c4ec:	4639      	mov	r1, r7
   2c4ee:	f7d4 fd95 	bl	101c <__aeabi_dcmpeq>
   2c4f2:	2800      	cmp	r0, #0
   2c4f4:	f040 8165 	bne.w	2c7c2 <_svfprintf_r+0x11ae>
   2c4f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c4fa:	42a3      	cmp	r3, r4
   2c4fc:	d206      	bcs.n	2c50c <_svfprintf_r+0xef8>
   2c4fe:	2130      	movs	r1, #48	; 0x30
   2c500:	1c5a      	adds	r2, r3, #1
   2c502:	9223      	str	r2, [sp, #140]	; 0x8c
   2c504:	7019      	strb	r1, [r3, #0]
   2c506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c508:	429c      	cmp	r4, r3
   2c50a:	d8f9      	bhi.n	2c500 <_svfprintf_r+0xeec>
   2c50c:	1b9b      	subs	r3, r3, r6
   2c50e:	9313      	str	r3, [sp, #76]	; 0x4c
   2c510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c512:	2b47      	cmp	r3, #71	; 0x47
   2c514:	f000 80e9 	beq.w	2c6ea <_svfprintf_r+0x10d6>
   2c518:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c51a:	2b65      	cmp	r3, #101	; 0x65
   2c51c:	f340 81cd 	ble.w	2c8ba <_svfprintf_r+0x12a6>
   2c520:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c522:	2b66      	cmp	r3, #102	; 0x66
   2c524:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c526:	9312      	str	r3, [sp, #72]	; 0x48
   2c528:	f000 819e 	beq.w	2c868 <_svfprintf_r+0x1254>
   2c52c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c52e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c530:	4619      	mov	r1, r3
   2c532:	4291      	cmp	r1, r2
   2c534:	f300 818a 	bgt.w	2c84c <_svfprintf_r+0x1238>
   2c538:	f01b 0f01 	tst.w	fp, #1
   2c53c:	f040 8213 	bne.w	2c966 <_svfprintf_r+0x1352>
   2c540:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c544:	9308      	str	r3, [sp, #32]
   2c546:	2367      	movs	r3, #103	; 0x67
   2c548:	920e      	str	r2, [sp, #56]	; 0x38
   2c54a:	9311      	str	r3, [sp, #68]	; 0x44
   2c54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c54e:	2b00      	cmp	r3, #0
   2c550:	f040 80c4 	bne.w	2c6dc <_svfprintf_r+0x10c8>
   2c554:	930a      	str	r3, [sp, #40]	; 0x28
   2c556:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c55a:	f7ff b973 	b.w	2b844 <_svfprintf_r+0x230>
   2c55e:	4635      	mov	r5, r6
   2c560:	460c      	mov	r4, r1
   2c562:	4646      	mov	r6, r8
   2c564:	4690      	mov	r8, r2
   2c566:	3301      	adds	r3, #1
   2c568:	443c      	add	r4, r7
   2c56a:	2b07      	cmp	r3, #7
   2c56c:	9427      	str	r4, [sp, #156]	; 0x9c
   2c56e:	9326      	str	r3, [sp, #152]	; 0x98
   2c570:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c574:	f73f aed1 	bgt.w	2c31a <_svfprintf_r+0xd06>
   2c578:	f108 0808 	add.w	r8, r8, #8
   2c57c:	e6d7      	b.n	2c32e <_svfprintf_r+0xd1a>
   2c57e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c580:	6813      	ldr	r3, [r2, #0]
   2c582:	3204      	adds	r2, #4
   2c584:	920f      	str	r2, [sp, #60]	; 0x3c
   2c586:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c588:	601a      	str	r2, [r3, #0]
   2c58a:	f7ff b86a 	b.w	2b662 <_svfprintf_r+0x4e>
   2c58e:	aa25      	add	r2, sp, #148	; 0x94
   2c590:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c592:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c594:	f002 f810 	bl	2e5b8 <__ssprint_r>
   2c598:	2800      	cmp	r0, #0
   2c59a:	f47f a90d 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c59e:	46c8      	mov	r8, r9
   2c5a0:	e48d      	b.n	2bebe <_svfprintf_r+0x8aa>
   2c5a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c5a4:	4a27      	ldr	r2, [pc, #156]	; (2c644 <_svfprintf_r+0x1030>)
   2c5a6:	f8c8 2000 	str.w	r2, [r8]
   2c5aa:	3301      	adds	r3, #1
   2c5ac:	3401      	adds	r4, #1
   2c5ae:	2201      	movs	r2, #1
   2c5b0:	2b07      	cmp	r3, #7
   2c5b2:	9427      	str	r4, [sp, #156]	; 0x9c
   2c5b4:	9326      	str	r3, [sp, #152]	; 0x98
   2c5b6:	f8c8 2004 	str.w	r2, [r8, #4]
   2c5ba:	dc72      	bgt.n	2c6a2 <_svfprintf_r+0x108e>
   2c5bc:	f108 0808 	add.w	r8, r8, #8
   2c5c0:	b929      	cbnz	r1, 2c5ce <_svfprintf_r+0xfba>
   2c5c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c5c4:	b91b      	cbnz	r3, 2c5ce <_svfprintf_r+0xfba>
   2c5c6:	9b07      	ldr	r3, [sp, #28]
   2c5c8:	07d8      	lsls	r0, r3, #31
   2c5ca:	f57f aa03 	bpl.w	2b9d4 <_svfprintf_r+0x3c0>
   2c5ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c5d0:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c5d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c5d4:	f8c8 2000 	str.w	r2, [r8]
   2c5d8:	3301      	adds	r3, #1
   2c5da:	4602      	mov	r2, r0
   2c5dc:	4422      	add	r2, r4
   2c5de:	2b07      	cmp	r3, #7
   2c5e0:	9227      	str	r2, [sp, #156]	; 0x9c
   2c5e2:	f8c8 0004 	str.w	r0, [r8, #4]
   2c5e6:	9326      	str	r3, [sp, #152]	; 0x98
   2c5e8:	f300 818d 	bgt.w	2c906 <_svfprintf_r+0x12f2>
   2c5ec:	f108 0808 	add.w	r8, r8, #8
   2c5f0:	2900      	cmp	r1, #0
   2c5f2:	f2c0 8165 	blt.w	2c8c0 <_svfprintf_r+0x12ac>
   2c5f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c5f8:	f8c8 6000 	str.w	r6, [r8]
   2c5fc:	3301      	adds	r3, #1
   2c5fe:	188c      	adds	r4, r1, r2
   2c600:	2b07      	cmp	r3, #7
   2c602:	9427      	str	r4, [sp, #156]	; 0x9c
   2c604:	9326      	str	r3, [sp, #152]	; 0x98
   2c606:	f8c8 1004 	str.w	r1, [r8, #4]
   2c60a:	f77f a9e1 	ble.w	2b9d0 <_svfprintf_r+0x3bc>
   2c60e:	e52c      	b.n	2c06a <_svfprintf_r+0xa56>
   2c610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c612:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c614:	6813      	ldr	r3, [r2, #0]
   2c616:	17cd      	asrs	r5, r1, #31
   2c618:	4608      	mov	r0, r1
   2c61a:	3204      	adds	r2, #4
   2c61c:	4629      	mov	r1, r5
   2c61e:	920f      	str	r2, [sp, #60]	; 0x3c
   2c620:	e9c3 0100 	strd	r0, r1, [r3]
   2c624:	f7ff b81d 	b.w	2b662 <_svfprintf_r+0x4e>
   2c628:	aa25      	add	r2, sp, #148	; 0x94
   2c62a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c62c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c62e:	f001 ffc3 	bl	2e5b8 <__ssprint_r>
   2c632:	2800      	cmp	r0, #0
   2c634:	f47f a8c0 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c638:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c63a:	46c8      	mov	r8, r9
   2c63c:	e458      	b.n	2bef0 <_svfprintf_r+0x8dc>
   2c63e:	bf00      	nop
   2c640:	00033488 	.word	0x00033488
   2c644:	00032fb0 	.word	0x00032fb0
   2c648:	2140      	movs	r1, #64	; 0x40
   2c64a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c64c:	f001 f9ec 	bl	2da28 <_malloc_r>
   2c650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c652:	6010      	str	r0, [r2, #0]
   2c654:	6110      	str	r0, [r2, #16]
   2c656:	2800      	cmp	r0, #0
   2c658:	f000 81f2 	beq.w	2ca40 <_svfprintf_r+0x142c>
   2c65c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c65e:	2340      	movs	r3, #64	; 0x40
   2c660:	6153      	str	r3, [r2, #20]
   2c662:	f7fe bfee 	b.w	2b642 <_svfprintf_r+0x2e>
   2c666:	a823      	add	r0, sp, #140	; 0x8c
   2c668:	a920      	add	r1, sp, #128	; 0x80
   2c66a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c66c:	9004      	str	r0, [sp, #16]
   2c66e:	9103      	str	r1, [sp, #12]
   2c670:	a81f      	add	r0, sp, #124	; 0x7c
   2c672:	2103      	movs	r1, #3
   2c674:	9002      	str	r0, [sp, #8]
   2c676:	9a08      	ldr	r2, [sp, #32]
   2c678:	9401      	str	r4, [sp, #4]
   2c67a:	463b      	mov	r3, r7
   2c67c:	9100      	str	r1, [sp, #0]
   2c67e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c680:	f000 fa9a 	bl	2cbb8 <_dtoa_r>
   2c684:	4625      	mov	r5, r4
   2c686:	4606      	mov	r6, r0
   2c688:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c68a:	2b46      	cmp	r3, #70	; 0x46
   2c68c:	eb06 0405 	add.w	r4, r6, r5
   2c690:	f47f af29 	bne.w	2c4e6 <_svfprintf_r+0xed2>
   2c694:	7833      	ldrb	r3, [r6, #0]
   2c696:	2b30      	cmp	r3, #48	; 0x30
   2c698:	f000 8178 	beq.w	2c98c <_svfprintf_r+0x1378>
   2c69c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c69e:	442c      	add	r4, r5
   2c6a0:	e721      	b.n	2c4e6 <_svfprintf_r+0xed2>
   2c6a2:	aa25      	add	r2, sp, #148	; 0x94
   2c6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6a8:	f001 ff86 	bl	2e5b8 <__ssprint_r>
   2c6ac:	2800      	cmp	r0, #0
   2c6ae:	f47f a883 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c6b2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c6b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6b6:	46c8      	mov	r8, r9
   2c6b8:	e782      	b.n	2c5c0 <_svfprintf_r+0xfac>
   2c6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6bc:	2b00      	cmp	r3, #0
   2c6be:	bf08      	it	eq
   2c6c0:	2301      	moveq	r3, #1
   2c6c2:	930a      	str	r3, [sp, #40]	; 0x28
   2c6c4:	e6db      	b.n	2c47e <_svfprintf_r+0xe6a>
   2c6c6:	4630      	mov	r0, r6
   2c6c8:	940a      	str	r4, [sp, #40]	; 0x28
   2c6ca:	f7d4 f819 	bl	700 <strlen>
   2c6ce:	950f      	str	r5, [sp, #60]	; 0x3c
   2c6d0:	900e      	str	r0, [sp, #56]	; 0x38
   2c6d2:	f8cd b01c 	str.w	fp, [sp, #28]
   2c6d6:	4603      	mov	r3, r0
   2c6d8:	f7ff b9f9 	b.w	2bace <_svfprintf_r+0x4ba>
   2c6dc:	272d      	movs	r7, #45	; 0x2d
   2c6de:	2300      	movs	r3, #0
   2c6e0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c6e4:	930a      	str	r3, [sp, #40]	; 0x28
   2c6e6:	f7ff b8ae 	b.w	2b846 <_svfprintf_r+0x232>
   2c6ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c6ec:	9312      	str	r3, [sp, #72]	; 0x48
   2c6ee:	461a      	mov	r2, r3
   2c6f0:	3303      	adds	r3, #3
   2c6f2:	db04      	blt.n	2c6fe <_svfprintf_r+0x10ea>
   2c6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6f6:	4619      	mov	r1, r3
   2c6f8:	4291      	cmp	r1, r2
   2c6fa:	f6bf af17 	bge.w	2c52c <_svfprintf_r+0xf18>
   2c6fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c700:	3b02      	subs	r3, #2
   2c702:	9311      	str	r3, [sp, #68]	; 0x44
   2c704:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c708:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c70c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c70e:	3b01      	subs	r3, #1
   2c710:	2b00      	cmp	r3, #0
   2c712:	931f      	str	r3, [sp, #124]	; 0x7c
   2c714:	bfbd      	ittte	lt
   2c716:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c718:	f1c3 0301 	rsblt	r3, r3, #1
   2c71c:	222d      	movlt	r2, #45	; 0x2d
   2c71e:	222b      	movge	r2, #43	; 0x2b
   2c720:	2b09      	cmp	r3, #9
   2c722:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c726:	f340 8116 	ble.w	2c956 <_svfprintf_r+0x1342>
   2c72a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c72e:	4620      	mov	r0, r4
   2c730:	4dab      	ldr	r5, [pc, #684]	; (2c9e0 <_svfprintf_r+0x13cc>)
   2c732:	e000      	b.n	2c736 <_svfprintf_r+0x1122>
   2c734:	4610      	mov	r0, r2
   2c736:	fb85 1203 	smull	r1, r2, r5, r3
   2c73a:	17d9      	asrs	r1, r3, #31
   2c73c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c740:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c744:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c748:	3230      	adds	r2, #48	; 0x30
   2c74a:	2909      	cmp	r1, #9
   2c74c:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c750:	460b      	mov	r3, r1
   2c752:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c756:	dced      	bgt.n	2c734 <_svfprintf_r+0x1120>
   2c758:	3330      	adds	r3, #48	; 0x30
   2c75a:	3802      	subs	r0, #2
   2c75c:	b2d9      	uxtb	r1, r3
   2c75e:	4284      	cmp	r4, r0
   2c760:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c764:	f240 8165 	bls.w	2ca32 <_svfprintf_r+0x141e>
   2c768:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c76c:	4613      	mov	r3, r2
   2c76e:	e001      	b.n	2c774 <_svfprintf_r+0x1160>
   2c770:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c774:	f800 1b01 	strb.w	r1, [r0], #1
   2c778:	42a3      	cmp	r3, r4
   2c77a:	d1f9      	bne.n	2c770 <_svfprintf_r+0x115c>
   2c77c:	3301      	adds	r3, #1
   2c77e:	1a9b      	subs	r3, r3, r2
   2c780:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c784:	4413      	add	r3, r2
   2c786:	aa21      	add	r2, sp, #132	; 0x84
   2c788:	1a9b      	subs	r3, r3, r2
   2c78a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c78c:	931b      	str	r3, [sp, #108]	; 0x6c
   2c78e:	2a01      	cmp	r2, #1
   2c790:	4413      	add	r3, r2
   2c792:	930e      	str	r3, [sp, #56]	; 0x38
   2c794:	f340 8119 	ble.w	2c9ca <_svfprintf_r+0x13b6>
   2c798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c79a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c79c:	4413      	add	r3, r2
   2c79e:	930e      	str	r3, [sp, #56]	; 0x38
   2c7a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c7a4:	9308      	str	r3, [sp, #32]
   2c7a6:	2300      	movs	r3, #0
   2c7a8:	9312      	str	r3, [sp, #72]	; 0x48
   2c7aa:	e6cf      	b.n	2c54c <_svfprintf_r+0xf38>
   2c7ac:	aa25      	add	r2, sp, #148	; 0x94
   2c7ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c7b2:	f001 ff01 	bl	2e5b8 <__ssprint_r>
   2c7b6:	2800      	cmp	r0, #0
   2c7b8:	f47e affe 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c7bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c7be:	46c8      	mov	r8, r9
   2c7c0:	e4d7      	b.n	2c172 <_svfprintf_r+0xb5e>
   2c7c2:	4623      	mov	r3, r4
   2c7c4:	e6a2      	b.n	2c50c <_svfprintf_r+0xef8>
   2c7c6:	aa25      	add	r2, sp, #148	; 0x94
   2c7c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c7cc:	f001 fef4 	bl	2e5b8 <__ssprint_r>
   2c7d0:	2800      	cmp	r0, #0
   2c7d2:	f47e aff1 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c7d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c7d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c7da:	46c8      	mov	r8, r9
   2c7dc:	e5ae      	b.n	2c33c <_svfprintf_r+0xd28>
   2c7de:	aa25      	add	r2, sp, #148	; 0x94
   2c7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c7e4:	f001 fee8 	bl	2e5b8 <__ssprint_r>
   2c7e8:	2800      	cmp	r0, #0
   2c7ea:	f47e afe5 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c7ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c7f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c7f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c7f4:	1a9a      	subs	r2, r3, r2
   2c7f6:	46c8      	mov	r8, r9
   2c7f8:	e5b8      	b.n	2c36c <_svfprintf_r+0xd58>
   2c7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c7fc:	9612      	str	r6, [sp, #72]	; 0x48
   2c7fe:	2b06      	cmp	r3, #6
   2c800:	bf28      	it	cs
   2c802:	2306      	movcs	r3, #6
   2c804:	960a      	str	r6, [sp, #40]	; 0x28
   2c806:	4637      	mov	r7, r6
   2c808:	9308      	str	r3, [sp, #32]
   2c80a:	950f      	str	r5, [sp, #60]	; 0x3c
   2c80c:	f8cd b01c 	str.w	fp, [sp, #28]
   2c810:	930e      	str	r3, [sp, #56]	; 0x38
   2c812:	4e74      	ldr	r6, [pc, #464]	; (2c9e4 <_svfprintf_r+0x13d0>)
   2c814:	f7ff b816 	b.w	2b844 <_svfprintf_r+0x230>
   2c818:	a823      	add	r0, sp, #140	; 0x8c
   2c81a:	a920      	add	r1, sp, #128	; 0x80
   2c81c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c81e:	9004      	str	r0, [sp, #16]
   2c820:	9103      	str	r1, [sp, #12]
   2c822:	a81f      	add	r0, sp, #124	; 0x7c
   2c824:	2103      	movs	r1, #3
   2c826:	9002      	str	r0, [sp, #8]
   2c828:	9a08      	ldr	r2, [sp, #32]
   2c82a:	9501      	str	r5, [sp, #4]
   2c82c:	463b      	mov	r3, r7
   2c82e:	9100      	str	r1, [sp, #0]
   2c830:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c832:	f000 f9c1 	bl	2cbb8 <_dtoa_r>
   2c836:	4606      	mov	r6, r0
   2c838:	1944      	adds	r4, r0, r5
   2c83a:	e72b      	b.n	2c694 <_svfprintf_r+0x1080>
   2c83c:	2306      	movs	r3, #6
   2c83e:	930a      	str	r3, [sp, #40]	; 0x28
   2c840:	e61d      	b.n	2c47e <_svfprintf_r+0xe6a>
   2c842:	272d      	movs	r7, #45	; 0x2d
   2c844:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c848:	f7ff bacd 	b.w	2bde6 <_svfprintf_r+0x7d2>
   2c84c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c84e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c850:	4413      	add	r3, r2
   2c852:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c854:	930e      	str	r3, [sp, #56]	; 0x38
   2c856:	2a00      	cmp	r2, #0
   2c858:	f340 80b0 	ble.w	2c9bc <_svfprintf_r+0x13a8>
   2c85c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c860:	9308      	str	r3, [sp, #32]
   2c862:	2367      	movs	r3, #103	; 0x67
   2c864:	9311      	str	r3, [sp, #68]	; 0x44
   2c866:	e671      	b.n	2c54c <_svfprintf_r+0xf38>
   2c868:	2b00      	cmp	r3, #0
   2c86a:	f340 80c3 	ble.w	2c9f4 <_svfprintf_r+0x13e0>
   2c86e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c870:	2a00      	cmp	r2, #0
   2c872:	f040 8099 	bne.w	2c9a8 <_svfprintf_r+0x1394>
   2c876:	f01b 0f01 	tst.w	fp, #1
   2c87a:	f040 8095 	bne.w	2c9a8 <_svfprintf_r+0x1394>
   2c87e:	9308      	str	r3, [sp, #32]
   2c880:	930e      	str	r3, [sp, #56]	; 0x38
   2c882:	e663      	b.n	2c54c <_svfprintf_r+0xf38>
   2c884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c886:	9308      	str	r3, [sp, #32]
   2c888:	930e      	str	r3, [sp, #56]	; 0x38
   2c88a:	900a      	str	r0, [sp, #40]	; 0x28
   2c88c:	950f      	str	r5, [sp, #60]	; 0x3c
   2c88e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c892:	9012      	str	r0, [sp, #72]	; 0x48
   2c894:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c898:	f7fe bfd4 	b.w	2b844 <_svfprintf_r+0x230>
   2c89c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c89e:	2b47      	cmp	r3, #71	; 0x47
   2c8a0:	f47f ae20 	bne.w	2c4e4 <_svfprintf_r+0xed0>
   2c8a4:	f01b 0f01 	tst.w	fp, #1
   2c8a8:	f47f aeee 	bne.w	2c688 <_svfprintf_r+0x1074>
   2c8ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c8ae:	1b9b      	subs	r3, r3, r6
   2c8b0:	9313      	str	r3, [sp, #76]	; 0x4c
   2c8b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c8b4:	2b47      	cmp	r3, #71	; 0x47
   2c8b6:	f43f af18 	beq.w	2c6ea <_svfprintf_r+0x10d6>
   2c8ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c8bc:	9312      	str	r3, [sp, #72]	; 0x48
   2c8be:	e721      	b.n	2c704 <_svfprintf_r+0x10f0>
   2c8c0:	424f      	negs	r7, r1
   2c8c2:	3110      	adds	r1, #16
   2c8c4:	4d48      	ldr	r5, [pc, #288]	; (2c9e8 <_svfprintf_r+0x13d4>)
   2c8c6:	da2f      	bge.n	2c928 <_svfprintf_r+0x1314>
   2c8c8:	2410      	movs	r4, #16
   2c8ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c8ce:	e004      	b.n	2c8da <_svfprintf_r+0x12c6>
   2c8d0:	f108 0808 	add.w	r8, r8, #8
   2c8d4:	3f10      	subs	r7, #16
   2c8d6:	2f10      	cmp	r7, #16
   2c8d8:	dd26      	ble.n	2c928 <_svfprintf_r+0x1314>
   2c8da:	3301      	adds	r3, #1
   2c8dc:	3210      	adds	r2, #16
   2c8de:	2b07      	cmp	r3, #7
   2c8e0:	9227      	str	r2, [sp, #156]	; 0x9c
   2c8e2:	9326      	str	r3, [sp, #152]	; 0x98
   2c8e4:	f8c8 5000 	str.w	r5, [r8]
   2c8e8:	f8c8 4004 	str.w	r4, [r8, #4]
   2c8ec:	ddf0      	ble.n	2c8d0 <_svfprintf_r+0x12bc>
   2c8ee:	aa25      	add	r2, sp, #148	; 0x94
   2c8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c8f2:	4658      	mov	r0, fp
   2c8f4:	f001 fe60 	bl	2e5b8 <__ssprint_r>
   2c8f8:	2800      	cmp	r0, #0
   2c8fa:	f47e af5d 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c8fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c900:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c902:	46c8      	mov	r8, r9
   2c904:	e7e6      	b.n	2c8d4 <_svfprintf_r+0x12c0>
   2c906:	aa25      	add	r2, sp, #148	; 0x94
   2c908:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c90a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c90c:	f001 fe54 	bl	2e5b8 <__ssprint_r>
   2c910:	2800      	cmp	r0, #0
   2c912:	f47e af51 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c916:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c918:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c91a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c91c:	46c8      	mov	r8, r9
   2c91e:	e667      	b.n	2c5f0 <_svfprintf_r+0xfdc>
   2c920:	2000      	movs	r0, #0
   2c922:	900a      	str	r0, [sp, #40]	; 0x28
   2c924:	f7fe bed0 	b.w	2b6c8 <_svfprintf_r+0xb4>
   2c928:	3301      	adds	r3, #1
   2c92a:	443a      	add	r2, r7
   2c92c:	2b07      	cmp	r3, #7
   2c92e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c932:	9227      	str	r2, [sp, #156]	; 0x9c
   2c934:	9326      	str	r3, [sp, #152]	; 0x98
   2c936:	f108 0808 	add.w	r8, r8, #8
   2c93a:	f77f ae5c 	ble.w	2c5f6 <_svfprintf_r+0xfe2>
   2c93e:	aa25      	add	r2, sp, #148	; 0x94
   2c940:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c942:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c944:	f001 fe38 	bl	2e5b8 <__ssprint_r>
   2c948:	2800      	cmp	r0, #0
   2c94a:	f47e af35 	bne.w	2b7b8 <_svfprintf_r+0x1a4>
   2c94e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c950:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c952:	46c8      	mov	r8, r9
   2c954:	e64f      	b.n	2c5f6 <_svfprintf_r+0xfe2>
   2c956:	3330      	adds	r3, #48	; 0x30
   2c958:	2230      	movs	r2, #48	; 0x30
   2c95a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c95e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c962:	ab22      	add	r3, sp, #136	; 0x88
   2c964:	e70f      	b.n	2c786 <_svfprintf_r+0x1172>
   2c966:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c968:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c96a:	4413      	add	r3, r2
   2c96c:	930e      	str	r3, [sp, #56]	; 0x38
   2c96e:	e775      	b.n	2c85c <_svfprintf_r+0x1248>
   2c970:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c972:	e5cb      	b.n	2c50c <_svfprintf_r+0xef8>
   2c974:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c976:	4e1d      	ldr	r6, [pc, #116]	; (2c9ec <_svfprintf_r+0x13d8>)
   2c978:	2b00      	cmp	r3, #0
   2c97a:	bfb6      	itet	lt
   2c97c:	272d      	movlt	r7, #45	; 0x2d
   2c97e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c982:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c986:	4b1a      	ldr	r3, [pc, #104]	; (2c9f0 <_svfprintf_r+0x13dc>)
   2c988:	f7ff ba2f 	b.w	2bdea <_svfprintf_r+0x7d6>
   2c98c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c98e:	9808      	ldr	r0, [sp, #32]
   2c990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c992:	4639      	mov	r1, r7
   2c994:	f7d4 fb42 	bl	101c <__aeabi_dcmpeq>
   2c998:	2800      	cmp	r0, #0
   2c99a:	f47f ae7f 	bne.w	2c69c <_svfprintf_r+0x1088>
   2c99e:	f1c5 0501 	rsb	r5, r5, #1
   2c9a2:	951f      	str	r5, [sp, #124]	; 0x7c
   2c9a4:	442c      	add	r4, r5
   2c9a6:	e59e      	b.n	2c4e6 <_svfprintf_r+0xed2>
   2c9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c9aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c9ac:	4413      	add	r3, r2
   2c9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c9b0:	441a      	add	r2, r3
   2c9b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c9b6:	920e      	str	r2, [sp, #56]	; 0x38
   2c9b8:	9308      	str	r3, [sp, #32]
   2c9ba:	e5c7      	b.n	2c54c <_svfprintf_r+0xf38>
   2c9bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c9be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c9c0:	f1c3 0301 	rsb	r3, r3, #1
   2c9c4:	441a      	add	r2, r3
   2c9c6:	4613      	mov	r3, r2
   2c9c8:	e7d0      	b.n	2c96c <_svfprintf_r+0x1358>
   2c9ca:	f01b 0301 	ands.w	r3, fp, #1
   2c9ce:	9312      	str	r3, [sp, #72]	; 0x48
   2c9d0:	f47f aee2 	bne.w	2c798 <_svfprintf_r+0x1184>
   2c9d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c9d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c9da:	9308      	str	r3, [sp, #32]
   2c9dc:	e5b6      	b.n	2c54c <_svfprintf_r+0xf38>
   2c9de:	bf00      	nop
   2c9e0:	66666667 	.word	0x66666667
   2c9e4:	00033470 	.word	0x00033470
   2c9e8:	00033488 	.word	0x00033488
   2c9ec:	00033444 	.word	0x00033444
   2c9f0:	00033440 	.word	0x00033440
   2c9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c9f6:	b913      	cbnz	r3, 2c9fe <_svfprintf_r+0x13ea>
   2c9f8:	f01b 0f01 	tst.w	fp, #1
   2c9fc:	d002      	beq.n	2ca04 <_svfprintf_r+0x13f0>
   2c9fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ca00:	3301      	adds	r3, #1
   2ca02:	e7d4      	b.n	2c9ae <_svfprintf_r+0x139a>
   2ca04:	2301      	movs	r3, #1
   2ca06:	e73a      	b.n	2c87e <_svfprintf_r+0x126a>
   2ca08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2ca0a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2ca0e:	6828      	ldr	r0, [r5, #0]
   2ca10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2ca14:	900a      	str	r0, [sp, #40]	; 0x28
   2ca16:	4628      	mov	r0, r5
   2ca18:	3004      	adds	r0, #4
   2ca1a:	46a2      	mov	sl, r4
   2ca1c:	900f      	str	r0, [sp, #60]	; 0x3c
   2ca1e:	f7fe be51 	b.w	2b6c4 <_svfprintf_r+0xb0>
   2ca22:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca26:	f7ff b867 	b.w	2baf8 <_svfprintf_r+0x4e4>
   2ca2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca2e:	f7ff ba15 	b.w	2be5c <_svfprintf_r+0x848>
   2ca32:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2ca36:	e6a6      	b.n	2c786 <_svfprintf_r+0x1172>
   2ca38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca3c:	f7ff b8eb 	b.w	2bc16 <_svfprintf_r+0x602>
   2ca40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ca42:	230c      	movs	r3, #12
   2ca44:	6013      	str	r3, [r2, #0]
   2ca46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ca4a:	9309      	str	r3, [sp, #36]	; 0x24
   2ca4c:	f7fe bebd 	b.w	2b7ca <_svfprintf_r+0x1b6>
   2ca50:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca54:	f7ff b99a 	b.w	2bd8c <_svfprintf_r+0x778>
   2ca58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca5c:	f7ff b976 	b.w	2bd4c <_svfprintf_r+0x738>
   2ca60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca64:	f7ff b959 	b.w	2bd1a <_svfprintf_r+0x706>
   2ca68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca6c:	f7ff b912 	b.w	2bc94 <_svfprintf_r+0x680>

0002ca70 <__ascii_wctomb>:
   2ca70:	b121      	cbz	r1, 2ca7c <__ascii_wctomb+0xc>
   2ca72:	2aff      	cmp	r2, #255	; 0xff
   2ca74:	d804      	bhi.n	2ca80 <__ascii_wctomb+0x10>
   2ca76:	700a      	strb	r2, [r1, #0]
   2ca78:	2001      	movs	r0, #1
   2ca7a:	4770      	bx	lr
   2ca7c:	4608      	mov	r0, r1
   2ca7e:	4770      	bx	lr
   2ca80:	238a      	movs	r3, #138	; 0x8a
   2ca82:	6003      	str	r3, [r0, #0]
   2ca84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ca88:	4770      	bx	lr
   2ca8a:	bf00      	nop

0002ca8c <quorem>:
   2ca8c:	6902      	ldr	r2, [r0, #16]
   2ca8e:	690b      	ldr	r3, [r1, #16]
   2ca90:	4293      	cmp	r3, r2
   2ca92:	f300 808d 	bgt.w	2cbb0 <quorem+0x124>
   2ca96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca9a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2ca9e:	f101 0714 	add.w	r7, r1, #20
   2caa2:	f100 0b14 	add.w	fp, r0, #20
   2caa6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2caaa:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2caae:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2cab2:	b083      	sub	sp, #12
   2cab4:	3201      	adds	r2, #1
   2cab6:	fbb3 f9f2 	udiv	r9, r3, r2
   2caba:	eb0b 0304 	add.w	r3, fp, r4
   2cabe:	9400      	str	r4, [sp, #0]
   2cac0:	eb07 0a04 	add.w	sl, r7, r4
   2cac4:	9301      	str	r3, [sp, #4]
   2cac6:	f1b9 0f00 	cmp.w	r9, #0
   2caca:	d039      	beq.n	2cb40 <quorem+0xb4>
   2cacc:	2500      	movs	r5, #0
   2cace:	462e      	mov	r6, r5
   2cad0:	46bc      	mov	ip, r7
   2cad2:	46de      	mov	lr, fp
   2cad4:	f85c 4b04 	ldr.w	r4, [ip], #4
   2cad8:	f8de 3000 	ldr.w	r3, [lr]
   2cadc:	b2a2      	uxth	r2, r4
   2cade:	fb09 5502 	mla	r5, r9, r2, r5
   2cae2:	0c22      	lsrs	r2, r4, #16
   2cae4:	0c2c      	lsrs	r4, r5, #16
   2cae6:	fb09 4202 	mla	r2, r9, r2, r4
   2caea:	b2ad      	uxth	r5, r5
   2caec:	1b75      	subs	r5, r6, r5
   2caee:	b296      	uxth	r6, r2
   2caf0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2caf4:	fa15 f383 	uxtah	r3, r5, r3
   2caf8:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2cafc:	b29b      	uxth	r3, r3
   2cafe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2cb02:	45e2      	cmp	sl, ip
   2cb04:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2cb08:	f84e 3b04 	str.w	r3, [lr], #4
   2cb0c:	ea4f 4626 	mov.w	r6, r6, asr #16
   2cb10:	d2e0      	bcs.n	2cad4 <quorem+0x48>
   2cb12:	9b00      	ldr	r3, [sp, #0]
   2cb14:	f85b 3003 	ldr.w	r3, [fp, r3]
   2cb18:	b993      	cbnz	r3, 2cb40 <quorem+0xb4>
   2cb1a:	9c01      	ldr	r4, [sp, #4]
   2cb1c:	1f23      	subs	r3, r4, #4
   2cb1e:	459b      	cmp	fp, r3
   2cb20:	d20c      	bcs.n	2cb3c <quorem+0xb0>
   2cb22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cb26:	b94b      	cbnz	r3, 2cb3c <quorem+0xb0>
   2cb28:	f1a4 0308 	sub.w	r3, r4, #8
   2cb2c:	e002      	b.n	2cb34 <quorem+0xa8>
   2cb2e:	681a      	ldr	r2, [r3, #0]
   2cb30:	3b04      	subs	r3, #4
   2cb32:	b91a      	cbnz	r2, 2cb3c <quorem+0xb0>
   2cb34:	459b      	cmp	fp, r3
   2cb36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cb3a:	d3f8      	bcc.n	2cb2e <quorem+0xa2>
   2cb3c:	f8c0 8010 	str.w	r8, [r0, #16]
   2cb40:	4604      	mov	r4, r0
   2cb42:	f001 fc2b 	bl	2e39c <__mcmp>
   2cb46:	2800      	cmp	r0, #0
   2cb48:	db2e      	blt.n	2cba8 <quorem+0x11c>
   2cb4a:	f109 0901 	add.w	r9, r9, #1
   2cb4e:	465d      	mov	r5, fp
   2cb50:	2300      	movs	r3, #0
   2cb52:	f857 1b04 	ldr.w	r1, [r7], #4
   2cb56:	6828      	ldr	r0, [r5, #0]
   2cb58:	b28a      	uxth	r2, r1
   2cb5a:	1a9a      	subs	r2, r3, r2
   2cb5c:	0c0b      	lsrs	r3, r1, #16
   2cb5e:	fa12 f280 	uxtah	r2, r2, r0
   2cb62:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2cb66:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2cb6a:	b292      	uxth	r2, r2
   2cb6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2cb70:	45ba      	cmp	sl, r7
   2cb72:	f845 2b04 	str.w	r2, [r5], #4
   2cb76:	ea4f 4323 	mov.w	r3, r3, asr #16
   2cb7a:	d2ea      	bcs.n	2cb52 <quorem+0xc6>
   2cb7c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2cb80:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2cb84:	b982      	cbnz	r2, 2cba8 <quorem+0x11c>
   2cb86:	1f1a      	subs	r2, r3, #4
   2cb88:	4593      	cmp	fp, r2
   2cb8a:	d20b      	bcs.n	2cba4 <quorem+0x118>
   2cb8c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2cb90:	b942      	cbnz	r2, 2cba4 <quorem+0x118>
   2cb92:	3b08      	subs	r3, #8
   2cb94:	e002      	b.n	2cb9c <quorem+0x110>
   2cb96:	681a      	ldr	r2, [r3, #0]
   2cb98:	3b04      	subs	r3, #4
   2cb9a:	b91a      	cbnz	r2, 2cba4 <quorem+0x118>
   2cb9c:	459b      	cmp	fp, r3
   2cb9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cba2:	d3f8      	bcc.n	2cb96 <quorem+0x10a>
   2cba4:	f8c4 8010 	str.w	r8, [r4, #16]
   2cba8:	4648      	mov	r0, r9
   2cbaa:	b003      	add	sp, #12
   2cbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbb0:	2000      	movs	r0, #0
   2cbb2:	4770      	bx	lr
   2cbb4:	0000      	movs	r0, r0
	...

0002cbb8 <_dtoa_r>:
   2cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cbbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2cbbe:	b09b      	sub	sp, #108	; 0x6c
   2cbc0:	4604      	mov	r4, r0
   2cbc2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cbc4:	4692      	mov	sl, r2
   2cbc6:	469b      	mov	fp, r3
   2cbc8:	b141      	cbz	r1, 2cbdc <_dtoa_r+0x24>
   2cbca:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cbcc:	604a      	str	r2, [r1, #4]
   2cbce:	2301      	movs	r3, #1
   2cbd0:	4093      	lsls	r3, r2
   2cbd2:	608b      	str	r3, [r1, #8]
   2cbd4:	f001 fa0a 	bl	2dfec <_Bfree>
   2cbd8:	2300      	movs	r3, #0
   2cbda:	6423      	str	r3, [r4, #64]	; 0x40
   2cbdc:	f1bb 0f00 	cmp.w	fp, #0
   2cbe0:	465d      	mov	r5, fp
   2cbe2:	db35      	blt.n	2cc50 <_dtoa_r+0x98>
   2cbe4:	2300      	movs	r3, #0
   2cbe6:	6033      	str	r3, [r6, #0]
   2cbe8:	4b9d      	ldr	r3, [pc, #628]	; (2ce60 <_dtoa_r+0x2a8>)
   2cbea:	43ab      	bics	r3, r5
   2cbec:	d015      	beq.n	2cc1a <_dtoa_r+0x62>
   2cbee:	4650      	mov	r0, sl
   2cbf0:	4659      	mov	r1, fp
   2cbf2:	2200      	movs	r2, #0
   2cbf4:	2300      	movs	r3, #0
   2cbf6:	f7d4 fa11 	bl	101c <__aeabi_dcmpeq>
   2cbfa:	4680      	mov	r8, r0
   2cbfc:	2800      	cmp	r0, #0
   2cbfe:	d02d      	beq.n	2cc5c <_dtoa_r+0xa4>
   2cc00:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc02:	2301      	movs	r3, #1
   2cc04:	6013      	str	r3, [r2, #0]
   2cc06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc08:	2b00      	cmp	r3, #0
   2cc0a:	f000 80bd 	beq.w	2cd88 <_dtoa_r+0x1d0>
   2cc0e:	4895      	ldr	r0, [pc, #596]	; (2ce64 <_dtoa_r+0x2ac>)
   2cc10:	6018      	str	r0, [r3, #0]
   2cc12:	3801      	subs	r0, #1
   2cc14:	b01b      	add	sp, #108	; 0x6c
   2cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc1c:	f242 730f 	movw	r3, #9999	; 0x270f
   2cc20:	6013      	str	r3, [r2, #0]
   2cc22:	f1ba 0f00 	cmp.w	sl, #0
   2cc26:	d10d      	bne.n	2cc44 <_dtoa_r+0x8c>
   2cc28:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cc2c:	b955      	cbnz	r5, 2cc44 <_dtoa_r+0x8c>
   2cc2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc30:	488d      	ldr	r0, [pc, #564]	; (2ce68 <_dtoa_r+0x2b0>)
   2cc32:	2b00      	cmp	r3, #0
   2cc34:	d0ee      	beq.n	2cc14 <_dtoa_r+0x5c>
   2cc36:	f100 0308 	add.w	r3, r0, #8
   2cc3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2cc3c:	6013      	str	r3, [r2, #0]
   2cc3e:	b01b      	add	sp, #108	; 0x6c
   2cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc46:	4889      	ldr	r0, [pc, #548]	; (2ce6c <_dtoa_r+0x2b4>)
   2cc48:	2b00      	cmp	r3, #0
   2cc4a:	d0e3      	beq.n	2cc14 <_dtoa_r+0x5c>
   2cc4c:	1cc3      	adds	r3, r0, #3
   2cc4e:	e7f4      	b.n	2cc3a <_dtoa_r+0x82>
   2cc50:	2301      	movs	r3, #1
   2cc52:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2cc56:	6033      	str	r3, [r6, #0]
   2cc58:	46ab      	mov	fp, r5
   2cc5a:	e7c5      	b.n	2cbe8 <_dtoa_r+0x30>
   2cc5c:	aa18      	add	r2, sp, #96	; 0x60
   2cc5e:	ab19      	add	r3, sp, #100	; 0x64
   2cc60:	9201      	str	r2, [sp, #4]
   2cc62:	9300      	str	r3, [sp, #0]
   2cc64:	4652      	mov	r2, sl
   2cc66:	465b      	mov	r3, fp
   2cc68:	4620      	mov	r0, r4
   2cc6a:	f001 fc37 	bl	2e4dc <__d2b>
   2cc6e:	0d2b      	lsrs	r3, r5, #20
   2cc70:	4681      	mov	r9, r0
   2cc72:	d071      	beq.n	2cd58 <_dtoa_r+0x1a0>
   2cc74:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2cc78:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2cc7c:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cc7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2cc82:	4650      	mov	r0, sl
   2cc84:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2cc88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cc8c:	2200      	movs	r2, #0
   2cc8e:	4b78      	ldr	r3, [pc, #480]	; (2ce70 <_dtoa_r+0x2b8>)
   2cc90:	f7d3 fda8 	bl	7e4 <__aeabi_dsub>
   2cc94:	a36c      	add	r3, pc, #432	; (adr r3, 2ce48 <_dtoa_r+0x290>)
   2cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cc9a:	f7d3 ff57 	bl	b4c <__aeabi_dmul>
   2cc9e:	a36c      	add	r3, pc, #432	; (adr r3, 2ce50 <_dtoa_r+0x298>)
   2cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cca4:	f7d3 fda0 	bl	7e8 <__adddf3>
   2cca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2ccac:	4630      	mov	r0, r6
   2ccae:	f7d3 fee7 	bl	a80 <__aeabi_i2d>
   2ccb2:	a369      	add	r3, pc, #420	; (adr r3, 2ce58 <_dtoa_r+0x2a0>)
   2ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ccb8:	f7d3 ff48 	bl	b4c <__aeabi_dmul>
   2ccbc:	4602      	mov	r2, r0
   2ccbe:	460b      	mov	r3, r1
   2ccc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2ccc4:	f7d3 fd90 	bl	7e8 <__adddf3>
   2ccc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cccc:	f7d4 f9ee 	bl	10ac <__aeabi_d2iz>
   2ccd0:	2200      	movs	r2, #0
   2ccd2:	9002      	str	r0, [sp, #8]
   2ccd4:	2300      	movs	r3, #0
   2ccd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2ccda:	f7d4 f9a9 	bl	1030 <__aeabi_dcmplt>
   2ccde:	2800      	cmp	r0, #0
   2cce0:	f040 8173 	bne.w	2cfca <_dtoa_r+0x412>
   2cce4:	9d02      	ldr	r5, [sp, #8]
   2cce6:	2d16      	cmp	r5, #22
   2cce8:	f200 815d 	bhi.w	2cfa6 <_dtoa_r+0x3ee>
   2ccec:	4b61      	ldr	r3, [pc, #388]	; (2ce74 <_dtoa_r+0x2bc>)
   2ccee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2ccf2:	e9d3 0100 	ldrd	r0, r1, [r3]
   2ccf6:	4652      	mov	r2, sl
   2ccf8:	465b      	mov	r3, fp
   2ccfa:	f7d4 f9b7 	bl	106c <__aeabi_dcmpgt>
   2ccfe:	2800      	cmp	r0, #0
   2cd00:	f000 81c5 	beq.w	2d08e <_dtoa_r+0x4d6>
   2cd04:	1e6b      	subs	r3, r5, #1
   2cd06:	9302      	str	r3, [sp, #8]
   2cd08:	2300      	movs	r3, #0
   2cd0a:	930e      	str	r3, [sp, #56]	; 0x38
   2cd0c:	1bbf      	subs	r7, r7, r6
   2cd0e:	1e7b      	subs	r3, r7, #1
   2cd10:	9306      	str	r3, [sp, #24]
   2cd12:	f100 8154 	bmi.w	2cfbe <_dtoa_r+0x406>
   2cd16:	2300      	movs	r3, #0
   2cd18:	9308      	str	r3, [sp, #32]
   2cd1a:	9b02      	ldr	r3, [sp, #8]
   2cd1c:	2b00      	cmp	r3, #0
   2cd1e:	f2c0 8145 	blt.w	2cfac <_dtoa_r+0x3f4>
   2cd22:	9a06      	ldr	r2, [sp, #24]
   2cd24:	930d      	str	r3, [sp, #52]	; 0x34
   2cd26:	4611      	mov	r1, r2
   2cd28:	4419      	add	r1, r3
   2cd2a:	2300      	movs	r3, #0
   2cd2c:	9106      	str	r1, [sp, #24]
   2cd2e:	930c      	str	r3, [sp, #48]	; 0x30
   2cd30:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd32:	2b09      	cmp	r3, #9
   2cd34:	d82a      	bhi.n	2cd8c <_dtoa_r+0x1d4>
   2cd36:	2b05      	cmp	r3, #5
   2cd38:	f340 865b 	ble.w	2d9f2 <_dtoa_r+0xe3a>
   2cd3c:	3b04      	subs	r3, #4
   2cd3e:	9324      	str	r3, [sp, #144]	; 0x90
   2cd40:	2500      	movs	r5, #0
   2cd42:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd44:	3b02      	subs	r3, #2
   2cd46:	2b03      	cmp	r3, #3
   2cd48:	f200 8642 	bhi.w	2d9d0 <_dtoa_r+0xe18>
   2cd4c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2cd50:	02c903d4 	.word	0x02c903d4
   2cd54:	046103df 	.word	0x046103df
   2cd58:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cd5a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2cd5c:	443e      	add	r6, r7
   2cd5e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2cd62:	2b20      	cmp	r3, #32
   2cd64:	f340 818e 	ble.w	2d084 <_dtoa_r+0x4cc>
   2cd68:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2cd6c:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2cd70:	409d      	lsls	r5, r3
   2cd72:	fa2a f000 	lsr.w	r0, sl, r0
   2cd76:	4328      	orrs	r0, r5
   2cd78:	f7d3 fe72 	bl	a60 <__aeabi_ui2d>
   2cd7c:	2301      	movs	r3, #1
   2cd7e:	3e01      	subs	r6, #1
   2cd80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2cd84:	9314      	str	r3, [sp, #80]	; 0x50
   2cd86:	e781      	b.n	2cc8c <_dtoa_r+0xd4>
   2cd88:	483b      	ldr	r0, [pc, #236]	; (2ce78 <_dtoa_r+0x2c0>)
   2cd8a:	e743      	b.n	2cc14 <_dtoa_r+0x5c>
   2cd8c:	2100      	movs	r1, #0
   2cd8e:	6461      	str	r1, [r4, #68]	; 0x44
   2cd90:	4620      	mov	r0, r4
   2cd92:	9125      	str	r1, [sp, #148]	; 0x94
   2cd94:	f001 f904 	bl	2dfa0 <_Balloc>
   2cd98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cd9c:	930a      	str	r3, [sp, #40]	; 0x28
   2cd9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cda0:	930f      	str	r3, [sp, #60]	; 0x3c
   2cda2:	2301      	movs	r3, #1
   2cda4:	9004      	str	r0, [sp, #16]
   2cda6:	6420      	str	r0, [r4, #64]	; 0x40
   2cda8:	9224      	str	r2, [sp, #144]	; 0x90
   2cdaa:	930b      	str	r3, [sp, #44]	; 0x2c
   2cdac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2cdae:	2b00      	cmp	r3, #0
   2cdb0:	f2c0 80d9 	blt.w	2cf66 <_dtoa_r+0x3ae>
   2cdb4:	9a02      	ldr	r2, [sp, #8]
   2cdb6:	2a0e      	cmp	r2, #14
   2cdb8:	f300 80d5 	bgt.w	2cf66 <_dtoa_r+0x3ae>
   2cdbc:	4b2d      	ldr	r3, [pc, #180]	; (2ce74 <_dtoa_r+0x2bc>)
   2cdbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cdc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2cdca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cdcc:	2b00      	cmp	r3, #0
   2cdce:	f2c0 83ba 	blt.w	2d546 <_dtoa_r+0x98e>
   2cdd2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2cdd6:	4650      	mov	r0, sl
   2cdd8:	462a      	mov	r2, r5
   2cdda:	4633      	mov	r3, r6
   2cddc:	4659      	mov	r1, fp
   2cdde:	f7d3 ffdf 	bl	da0 <__aeabi_ddiv>
   2cde2:	f7d4 f963 	bl	10ac <__aeabi_d2iz>
   2cde6:	4680      	mov	r8, r0
   2cde8:	f7d3 fe4a 	bl	a80 <__aeabi_i2d>
   2cdec:	462a      	mov	r2, r5
   2cdee:	4633      	mov	r3, r6
   2cdf0:	f7d3 feac 	bl	b4c <__aeabi_dmul>
   2cdf4:	460b      	mov	r3, r1
   2cdf6:	4602      	mov	r2, r0
   2cdf8:	4659      	mov	r1, fp
   2cdfa:	4650      	mov	r0, sl
   2cdfc:	f7d3 fcf2 	bl	7e4 <__aeabi_dsub>
   2ce00:	9d04      	ldr	r5, [sp, #16]
   2ce02:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2ce06:	702b      	strb	r3, [r5, #0]
   2ce08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce0a:	2b01      	cmp	r3, #1
   2ce0c:	4606      	mov	r6, r0
   2ce0e:	460f      	mov	r7, r1
   2ce10:	f105 0501 	add.w	r5, r5, #1
   2ce14:	d068      	beq.n	2cee8 <_dtoa_r+0x330>
   2ce16:	2200      	movs	r2, #0
   2ce18:	4b18      	ldr	r3, [pc, #96]	; (2ce7c <_dtoa_r+0x2c4>)
   2ce1a:	f7d3 fe97 	bl	b4c <__aeabi_dmul>
   2ce1e:	2200      	movs	r2, #0
   2ce20:	2300      	movs	r3, #0
   2ce22:	4606      	mov	r6, r0
   2ce24:	460f      	mov	r7, r1
   2ce26:	f7d4 f8f9 	bl	101c <__aeabi_dcmpeq>
   2ce2a:	2800      	cmp	r0, #0
   2ce2c:	f040 8088 	bne.w	2cf40 <_dtoa_r+0x388>
   2ce30:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2ce34:	f04f 0a00 	mov.w	sl, #0
   2ce38:	f8df b040 	ldr.w	fp, [pc, #64]	; 2ce7c <_dtoa_r+0x2c4>
   2ce3c:	940c      	str	r4, [sp, #48]	; 0x30
   2ce3e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2ce42:	e028      	b.n	2ce96 <_dtoa_r+0x2de>
   2ce44:	f3af 8000 	nop.w
   2ce48:	636f4361 	.word	0x636f4361
   2ce4c:	3fd287a7 	.word	0x3fd287a7
   2ce50:	8b60c8b3 	.word	0x8b60c8b3
   2ce54:	3fc68a28 	.word	0x3fc68a28
   2ce58:	509f79fb 	.word	0x509f79fb
   2ce5c:	3fd34413 	.word	0x3fd34413
   2ce60:	7ff00000 	.word	0x7ff00000
   2ce64:	00032fb1 	.word	0x00032fb1
   2ce68:	0003359c 	.word	0x0003359c
   2ce6c:	000335a8 	.word	0x000335a8
   2ce70:	3ff80000 	.word	0x3ff80000
   2ce74:	000335d8 	.word	0x000335d8
   2ce78:	00032fb0 	.word	0x00032fb0
   2ce7c:	40240000 	.word	0x40240000
   2ce80:	f7d3 fe64 	bl	b4c <__aeabi_dmul>
   2ce84:	2200      	movs	r2, #0
   2ce86:	2300      	movs	r3, #0
   2ce88:	4606      	mov	r6, r0
   2ce8a:	460f      	mov	r7, r1
   2ce8c:	f7d4 f8c6 	bl	101c <__aeabi_dcmpeq>
   2ce90:	2800      	cmp	r0, #0
   2ce92:	f040 83c1 	bne.w	2d618 <_dtoa_r+0xa60>
   2ce96:	4642      	mov	r2, r8
   2ce98:	464b      	mov	r3, r9
   2ce9a:	4630      	mov	r0, r6
   2ce9c:	4639      	mov	r1, r7
   2ce9e:	f7d3 ff7f 	bl	da0 <__aeabi_ddiv>
   2cea2:	f7d4 f903 	bl	10ac <__aeabi_d2iz>
   2cea6:	4604      	mov	r4, r0
   2cea8:	f7d3 fdea 	bl	a80 <__aeabi_i2d>
   2ceac:	4642      	mov	r2, r8
   2ceae:	464b      	mov	r3, r9
   2ceb0:	f7d3 fe4c 	bl	b4c <__aeabi_dmul>
   2ceb4:	4602      	mov	r2, r0
   2ceb6:	460b      	mov	r3, r1
   2ceb8:	4630      	mov	r0, r6
   2ceba:	4639      	mov	r1, r7
   2cebc:	f7d3 fc92 	bl	7e4 <__aeabi_dsub>
   2cec0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2cec4:	9e04      	ldr	r6, [sp, #16]
   2cec6:	f805 eb01 	strb.w	lr, [r5], #1
   2ceca:	eba5 0e06 	sub.w	lr, r5, r6
   2cece:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2ced0:	45b6      	cmp	lr, r6
   2ced2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2ced6:	4652      	mov	r2, sl
   2ced8:	465b      	mov	r3, fp
   2ceda:	d1d1      	bne.n	2ce80 <_dtoa_r+0x2c8>
   2cedc:	46a0      	mov	r8, r4
   2cede:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cee2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cee4:	4606      	mov	r6, r0
   2cee6:	460f      	mov	r7, r1
   2cee8:	4632      	mov	r2, r6
   2ceea:	463b      	mov	r3, r7
   2ceec:	4630      	mov	r0, r6
   2ceee:	4639      	mov	r1, r7
   2cef0:	f7d3 fc7a 	bl	7e8 <__adddf3>
   2cef4:	4606      	mov	r6, r0
   2cef6:	460f      	mov	r7, r1
   2cef8:	4602      	mov	r2, r0
   2cefa:	460b      	mov	r3, r1
   2cefc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf00:	f7d4 f896 	bl	1030 <__aeabi_dcmplt>
   2cf04:	b948      	cbnz	r0, 2cf1a <_dtoa_r+0x362>
   2cf06:	4632      	mov	r2, r6
   2cf08:	463b      	mov	r3, r7
   2cf0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf0e:	f7d4 f885 	bl	101c <__aeabi_dcmpeq>
   2cf12:	b1a8      	cbz	r0, 2cf40 <_dtoa_r+0x388>
   2cf14:	f018 0f01 	tst.w	r8, #1
   2cf18:	d012      	beq.n	2cf40 <_dtoa_r+0x388>
   2cf1a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cf1e:	9a04      	ldr	r2, [sp, #16]
   2cf20:	1e6b      	subs	r3, r5, #1
   2cf22:	e004      	b.n	2cf2e <_dtoa_r+0x376>
   2cf24:	429a      	cmp	r2, r3
   2cf26:	f000 8401 	beq.w	2d72c <_dtoa_r+0xb74>
   2cf2a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2cf2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2cf32:	f103 0501 	add.w	r5, r3, #1
   2cf36:	d0f5      	beq.n	2cf24 <_dtoa_r+0x36c>
   2cf38:	f108 0801 	add.w	r8, r8, #1
   2cf3c:	f883 8000 	strb.w	r8, [r3]
   2cf40:	4649      	mov	r1, r9
   2cf42:	4620      	mov	r0, r4
   2cf44:	f001 f852 	bl	2dfec <_Bfree>
   2cf48:	2200      	movs	r2, #0
   2cf4a:	9b02      	ldr	r3, [sp, #8]
   2cf4c:	702a      	strb	r2, [r5, #0]
   2cf4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cf50:	3301      	adds	r3, #1
   2cf52:	6013      	str	r3, [r2, #0]
   2cf54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cf56:	2b00      	cmp	r3, #0
   2cf58:	f000 839e 	beq.w	2d698 <_dtoa_r+0xae0>
   2cf5c:	9804      	ldr	r0, [sp, #16]
   2cf5e:	601d      	str	r5, [r3, #0]
   2cf60:	b01b      	add	sp, #108	; 0x6c
   2cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cf68:	2a00      	cmp	r2, #0
   2cf6a:	d03e      	beq.n	2cfea <_dtoa_r+0x432>
   2cf6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2cf6e:	2a01      	cmp	r2, #1
   2cf70:	f340 8311 	ble.w	2d596 <_dtoa_r+0x9de>
   2cf74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cf78:	1e5f      	subs	r7, r3, #1
   2cf7a:	42ba      	cmp	r2, r7
   2cf7c:	f2c0 838f 	blt.w	2d69e <_dtoa_r+0xae6>
   2cf80:	1bd7      	subs	r7, r2, r7
   2cf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf84:	2b00      	cmp	r3, #0
   2cf86:	f2c0 848b 	blt.w	2d8a0 <_dtoa_r+0xce8>
   2cf8a:	9d08      	ldr	r5, [sp, #32]
   2cf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf8e:	9a08      	ldr	r2, [sp, #32]
   2cf90:	441a      	add	r2, r3
   2cf92:	9208      	str	r2, [sp, #32]
   2cf94:	9a06      	ldr	r2, [sp, #24]
   2cf96:	2101      	movs	r1, #1
   2cf98:	441a      	add	r2, r3
   2cf9a:	4620      	mov	r0, r4
   2cf9c:	9206      	str	r2, [sp, #24]
   2cf9e:	f001 f8bf 	bl	2e120 <__i2b>
   2cfa2:	4606      	mov	r6, r0
   2cfa4:	e024      	b.n	2cff0 <_dtoa_r+0x438>
   2cfa6:	2301      	movs	r3, #1
   2cfa8:	930e      	str	r3, [sp, #56]	; 0x38
   2cfaa:	e6af      	b.n	2cd0c <_dtoa_r+0x154>
   2cfac:	9a08      	ldr	r2, [sp, #32]
   2cfae:	9b02      	ldr	r3, [sp, #8]
   2cfb0:	1ad2      	subs	r2, r2, r3
   2cfb2:	425b      	negs	r3, r3
   2cfb4:	930c      	str	r3, [sp, #48]	; 0x30
   2cfb6:	2300      	movs	r3, #0
   2cfb8:	9208      	str	r2, [sp, #32]
   2cfba:	930d      	str	r3, [sp, #52]	; 0x34
   2cfbc:	e6b8      	b.n	2cd30 <_dtoa_r+0x178>
   2cfbe:	f1c7 0301 	rsb	r3, r7, #1
   2cfc2:	9308      	str	r3, [sp, #32]
   2cfc4:	2300      	movs	r3, #0
   2cfc6:	9306      	str	r3, [sp, #24]
   2cfc8:	e6a7      	b.n	2cd1a <_dtoa_r+0x162>
   2cfca:	9d02      	ldr	r5, [sp, #8]
   2cfcc:	4628      	mov	r0, r5
   2cfce:	f7d3 fd57 	bl	a80 <__aeabi_i2d>
   2cfd2:	4602      	mov	r2, r0
   2cfd4:	460b      	mov	r3, r1
   2cfd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cfda:	f7d4 f81f 	bl	101c <__aeabi_dcmpeq>
   2cfde:	2800      	cmp	r0, #0
   2cfe0:	f47f ae80 	bne.w	2cce4 <_dtoa_r+0x12c>
   2cfe4:	1e6b      	subs	r3, r5, #1
   2cfe6:	9302      	str	r3, [sp, #8]
   2cfe8:	e67c      	b.n	2cce4 <_dtoa_r+0x12c>
   2cfea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cfec:	9d08      	ldr	r5, [sp, #32]
   2cfee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2cff0:	2d00      	cmp	r5, #0
   2cff2:	dd0c      	ble.n	2d00e <_dtoa_r+0x456>
   2cff4:	9906      	ldr	r1, [sp, #24]
   2cff6:	2900      	cmp	r1, #0
   2cff8:	460b      	mov	r3, r1
   2cffa:	dd08      	ble.n	2d00e <_dtoa_r+0x456>
   2cffc:	42a9      	cmp	r1, r5
   2cffe:	9a08      	ldr	r2, [sp, #32]
   2d000:	bfa8      	it	ge
   2d002:	462b      	movge	r3, r5
   2d004:	1ad2      	subs	r2, r2, r3
   2d006:	1aed      	subs	r5, r5, r3
   2d008:	1acb      	subs	r3, r1, r3
   2d00a:	9208      	str	r2, [sp, #32]
   2d00c:	9306      	str	r3, [sp, #24]
   2d00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d010:	b1d3      	cbz	r3, 2d048 <_dtoa_r+0x490>
   2d012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d014:	2b00      	cmp	r3, #0
   2d016:	f000 82b7 	beq.w	2d588 <_dtoa_r+0x9d0>
   2d01a:	2f00      	cmp	r7, #0
   2d01c:	dd10      	ble.n	2d040 <_dtoa_r+0x488>
   2d01e:	4631      	mov	r1, r6
   2d020:	463a      	mov	r2, r7
   2d022:	4620      	mov	r0, r4
   2d024:	f001 f918 	bl	2e258 <__pow5mult>
   2d028:	464a      	mov	r2, r9
   2d02a:	4601      	mov	r1, r0
   2d02c:	4606      	mov	r6, r0
   2d02e:	4620      	mov	r0, r4
   2d030:	f001 f880 	bl	2e134 <__multiply>
   2d034:	4649      	mov	r1, r9
   2d036:	4680      	mov	r8, r0
   2d038:	4620      	mov	r0, r4
   2d03a:	f000 ffd7 	bl	2dfec <_Bfree>
   2d03e:	46c1      	mov	r9, r8
   2d040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d042:	1bda      	subs	r2, r3, r7
   2d044:	f040 82a1 	bne.w	2d58a <_dtoa_r+0x9d2>
   2d048:	2101      	movs	r1, #1
   2d04a:	4620      	mov	r0, r4
   2d04c:	f001 f868 	bl	2e120 <__i2b>
   2d050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d052:	2b00      	cmp	r3, #0
   2d054:	4680      	mov	r8, r0
   2d056:	dd1c      	ble.n	2d092 <_dtoa_r+0x4da>
   2d058:	4601      	mov	r1, r0
   2d05a:	461a      	mov	r2, r3
   2d05c:	4620      	mov	r0, r4
   2d05e:	f001 f8fb 	bl	2e258 <__pow5mult>
   2d062:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d064:	2b01      	cmp	r3, #1
   2d066:	4680      	mov	r8, r0
   2d068:	f340 8254 	ble.w	2d514 <_dtoa_r+0x95c>
   2d06c:	2300      	movs	r3, #0
   2d06e:	930c      	str	r3, [sp, #48]	; 0x30
   2d070:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2d074:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2d078:	6918      	ldr	r0, [r3, #16]
   2d07a:	f001 f801 	bl	2e080 <__hi0bits>
   2d07e:	f1c0 0020 	rsb	r0, r0, #32
   2d082:	e010      	b.n	2d0a6 <_dtoa_r+0x4ee>
   2d084:	f1c3 0520 	rsb	r5, r3, #32
   2d088:	fa0a f005 	lsl.w	r0, sl, r5
   2d08c:	e674      	b.n	2cd78 <_dtoa_r+0x1c0>
   2d08e:	900e      	str	r0, [sp, #56]	; 0x38
   2d090:	e63c      	b.n	2cd0c <_dtoa_r+0x154>
   2d092:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d094:	2b01      	cmp	r3, #1
   2d096:	f340 8287 	ble.w	2d5a8 <_dtoa_r+0x9f0>
   2d09a:	2300      	movs	r3, #0
   2d09c:	930c      	str	r3, [sp, #48]	; 0x30
   2d09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d0a0:	2001      	movs	r0, #1
   2d0a2:	2b00      	cmp	r3, #0
   2d0a4:	d1e4      	bne.n	2d070 <_dtoa_r+0x4b8>
   2d0a6:	9a06      	ldr	r2, [sp, #24]
   2d0a8:	4410      	add	r0, r2
   2d0aa:	f010 001f 	ands.w	r0, r0, #31
   2d0ae:	f000 80a1 	beq.w	2d1f4 <_dtoa_r+0x63c>
   2d0b2:	f1c0 0320 	rsb	r3, r0, #32
   2d0b6:	2b04      	cmp	r3, #4
   2d0b8:	f340 849e 	ble.w	2d9f8 <_dtoa_r+0xe40>
   2d0bc:	9b08      	ldr	r3, [sp, #32]
   2d0be:	f1c0 001c 	rsb	r0, r0, #28
   2d0c2:	4403      	add	r3, r0
   2d0c4:	9308      	str	r3, [sp, #32]
   2d0c6:	4613      	mov	r3, r2
   2d0c8:	4403      	add	r3, r0
   2d0ca:	4405      	add	r5, r0
   2d0cc:	9306      	str	r3, [sp, #24]
   2d0ce:	9b08      	ldr	r3, [sp, #32]
   2d0d0:	2b00      	cmp	r3, #0
   2d0d2:	dd05      	ble.n	2d0e0 <_dtoa_r+0x528>
   2d0d4:	4649      	mov	r1, r9
   2d0d6:	461a      	mov	r2, r3
   2d0d8:	4620      	mov	r0, r4
   2d0da:	f001 f90d 	bl	2e2f8 <__lshift>
   2d0de:	4681      	mov	r9, r0
   2d0e0:	9b06      	ldr	r3, [sp, #24]
   2d0e2:	2b00      	cmp	r3, #0
   2d0e4:	dd05      	ble.n	2d0f2 <_dtoa_r+0x53a>
   2d0e6:	4641      	mov	r1, r8
   2d0e8:	461a      	mov	r2, r3
   2d0ea:	4620      	mov	r0, r4
   2d0ec:	f001 f904 	bl	2e2f8 <__lshift>
   2d0f0:	4680      	mov	r8, r0
   2d0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d0f4:	2b00      	cmp	r3, #0
   2d0f6:	f040 8086 	bne.w	2d206 <_dtoa_r+0x64e>
   2d0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d0fc:	2b00      	cmp	r3, #0
   2d0fe:	f340 8266 	ble.w	2d5ce <_dtoa_r+0xa16>
   2d102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d104:	2b00      	cmp	r3, #0
   2d106:	f000 8098 	beq.w	2d23a <_dtoa_r+0x682>
   2d10a:	2d00      	cmp	r5, #0
   2d10c:	dd05      	ble.n	2d11a <_dtoa_r+0x562>
   2d10e:	4631      	mov	r1, r6
   2d110:	462a      	mov	r2, r5
   2d112:	4620      	mov	r0, r4
   2d114:	f001 f8f0 	bl	2e2f8 <__lshift>
   2d118:	4606      	mov	r6, r0
   2d11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d11c:	2b00      	cmp	r3, #0
   2d11e:	f040 8337 	bne.w	2d790 <_dtoa_r+0xbd8>
   2d122:	9606      	str	r6, [sp, #24]
   2d124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d126:	9a04      	ldr	r2, [sp, #16]
   2d128:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d12c:	3b01      	subs	r3, #1
   2d12e:	18d3      	adds	r3, r2, r3
   2d130:	930b      	str	r3, [sp, #44]	; 0x2c
   2d132:	f00a 0301 	and.w	r3, sl, #1
   2d136:	930c      	str	r3, [sp, #48]	; 0x30
   2d138:	4617      	mov	r7, r2
   2d13a:	46c2      	mov	sl, r8
   2d13c:	4651      	mov	r1, sl
   2d13e:	4648      	mov	r0, r9
   2d140:	f7ff fca4 	bl	2ca8c <quorem>
   2d144:	4631      	mov	r1, r6
   2d146:	4605      	mov	r5, r0
   2d148:	4648      	mov	r0, r9
   2d14a:	f001 f927 	bl	2e39c <__mcmp>
   2d14e:	465a      	mov	r2, fp
   2d150:	900a      	str	r0, [sp, #40]	; 0x28
   2d152:	4651      	mov	r1, sl
   2d154:	4620      	mov	r0, r4
   2d156:	f001 f93d 	bl	2e3d4 <__mdiff>
   2d15a:	68c2      	ldr	r2, [r0, #12]
   2d15c:	4680      	mov	r8, r0
   2d15e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d162:	2a00      	cmp	r2, #0
   2d164:	f040 822b 	bne.w	2d5be <_dtoa_r+0xa06>
   2d168:	4601      	mov	r1, r0
   2d16a:	4648      	mov	r0, r9
   2d16c:	9308      	str	r3, [sp, #32]
   2d16e:	f001 f915 	bl	2e39c <__mcmp>
   2d172:	4641      	mov	r1, r8
   2d174:	9006      	str	r0, [sp, #24]
   2d176:	4620      	mov	r0, r4
   2d178:	f000 ff38 	bl	2dfec <_Bfree>
   2d17c:	9a06      	ldr	r2, [sp, #24]
   2d17e:	9b08      	ldr	r3, [sp, #32]
   2d180:	b932      	cbnz	r2, 2d190 <_dtoa_r+0x5d8>
   2d182:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d184:	b921      	cbnz	r1, 2d190 <_dtoa_r+0x5d8>
   2d186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d188:	2a00      	cmp	r2, #0
   2d18a:	f000 83ef 	beq.w	2d96c <_dtoa_r+0xdb4>
   2d18e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d190:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d192:	2900      	cmp	r1, #0
   2d194:	f2c0 829f 	blt.w	2d6d6 <_dtoa_r+0xb1e>
   2d198:	d105      	bne.n	2d1a6 <_dtoa_r+0x5ee>
   2d19a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d19c:	b919      	cbnz	r1, 2d1a6 <_dtoa_r+0x5ee>
   2d19e:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d1a0:	2900      	cmp	r1, #0
   2d1a2:	f000 8298 	beq.w	2d6d6 <_dtoa_r+0xb1e>
   2d1a6:	2a00      	cmp	r2, #0
   2d1a8:	f300 8306 	bgt.w	2d7b8 <_dtoa_r+0xc00>
   2d1ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d1ae:	703b      	strb	r3, [r7, #0]
   2d1b0:	f107 0801 	add.w	r8, r7, #1
   2d1b4:	4297      	cmp	r7, r2
   2d1b6:	4645      	mov	r5, r8
   2d1b8:	f000 830c 	beq.w	2d7d4 <_dtoa_r+0xc1c>
   2d1bc:	4649      	mov	r1, r9
   2d1be:	2300      	movs	r3, #0
   2d1c0:	220a      	movs	r2, #10
   2d1c2:	4620      	mov	r0, r4
   2d1c4:	f000 ff1c 	bl	2e000 <__multadd>
   2d1c8:	455e      	cmp	r6, fp
   2d1ca:	4681      	mov	r9, r0
   2d1cc:	4631      	mov	r1, r6
   2d1ce:	f04f 0300 	mov.w	r3, #0
   2d1d2:	f04f 020a 	mov.w	r2, #10
   2d1d6:	4620      	mov	r0, r4
   2d1d8:	f000 81eb 	beq.w	2d5b2 <_dtoa_r+0x9fa>
   2d1dc:	f000 ff10 	bl	2e000 <__multadd>
   2d1e0:	4659      	mov	r1, fp
   2d1e2:	4606      	mov	r6, r0
   2d1e4:	2300      	movs	r3, #0
   2d1e6:	220a      	movs	r2, #10
   2d1e8:	4620      	mov	r0, r4
   2d1ea:	f000 ff09 	bl	2e000 <__multadd>
   2d1ee:	4647      	mov	r7, r8
   2d1f0:	4683      	mov	fp, r0
   2d1f2:	e7a3      	b.n	2d13c <_dtoa_r+0x584>
   2d1f4:	201c      	movs	r0, #28
   2d1f6:	9b08      	ldr	r3, [sp, #32]
   2d1f8:	4403      	add	r3, r0
   2d1fa:	9308      	str	r3, [sp, #32]
   2d1fc:	9b06      	ldr	r3, [sp, #24]
   2d1fe:	4403      	add	r3, r0
   2d200:	4405      	add	r5, r0
   2d202:	9306      	str	r3, [sp, #24]
   2d204:	e763      	b.n	2d0ce <_dtoa_r+0x516>
   2d206:	4641      	mov	r1, r8
   2d208:	4648      	mov	r0, r9
   2d20a:	f001 f8c7 	bl	2e39c <__mcmp>
   2d20e:	2800      	cmp	r0, #0
   2d210:	f6bf af73 	bge.w	2d0fa <_dtoa_r+0x542>
   2d214:	9f02      	ldr	r7, [sp, #8]
   2d216:	4649      	mov	r1, r9
   2d218:	2300      	movs	r3, #0
   2d21a:	220a      	movs	r2, #10
   2d21c:	4620      	mov	r0, r4
   2d21e:	3f01      	subs	r7, #1
   2d220:	9702      	str	r7, [sp, #8]
   2d222:	f000 feed 	bl	2e000 <__multadd>
   2d226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d228:	4681      	mov	r9, r0
   2d22a:	2b00      	cmp	r3, #0
   2d22c:	f040 83b6 	bne.w	2d99c <_dtoa_r+0xde4>
   2d230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d232:	2b00      	cmp	r3, #0
   2d234:	f340 83bf 	ble.w	2d9b6 <_dtoa_r+0xdfe>
   2d238:	930a      	str	r3, [sp, #40]	; 0x28
   2d23a:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d23e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d240:	465d      	mov	r5, fp
   2d242:	e002      	b.n	2d24a <_dtoa_r+0x692>
   2d244:	f000 fedc 	bl	2e000 <__multadd>
   2d248:	4681      	mov	r9, r0
   2d24a:	4641      	mov	r1, r8
   2d24c:	4648      	mov	r0, r9
   2d24e:	f7ff fc1d 	bl	2ca8c <quorem>
   2d252:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d256:	f805 ab01 	strb.w	sl, [r5], #1
   2d25a:	eba5 030b 	sub.w	r3, r5, fp
   2d25e:	42bb      	cmp	r3, r7
   2d260:	f04f 020a 	mov.w	r2, #10
   2d264:	f04f 0300 	mov.w	r3, #0
   2d268:	4649      	mov	r1, r9
   2d26a:	4620      	mov	r0, r4
   2d26c:	dbea      	blt.n	2d244 <_dtoa_r+0x68c>
   2d26e:	9b04      	ldr	r3, [sp, #16]
   2d270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d272:	2a01      	cmp	r2, #1
   2d274:	bfac      	ite	ge
   2d276:	189b      	addge	r3, r3, r2
   2d278:	3301      	addlt	r3, #1
   2d27a:	461d      	mov	r5, r3
   2d27c:	f04f 0b00 	mov.w	fp, #0
   2d280:	4649      	mov	r1, r9
   2d282:	2201      	movs	r2, #1
   2d284:	4620      	mov	r0, r4
   2d286:	f001 f837 	bl	2e2f8 <__lshift>
   2d28a:	4641      	mov	r1, r8
   2d28c:	4681      	mov	r9, r0
   2d28e:	f001 f885 	bl	2e39c <__mcmp>
   2d292:	2800      	cmp	r0, #0
   2d294:	f340 823d 	ble.w	2d712 <_dtoa_r+0xb5a>
   2d298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d29c:	9904      	ldr	r1, [sp, #16]
   2d29e:	1e6b      	subs	r3, r5, #1
   2d2a0:	e004      	b.n	2d2ac <_dtoa_r+0x6f4>
   2d2a2:	428b      	cmp	r3, r1
   2d2a4:	f000 81ae 	beq.w	2d604 <_dtoa_r+0xa4c>
   2d2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d2ac:	2a39      	cmp	r2, #57	; 0x39
   2d2ae:	f103 0501 	add.w	r5, r3, #1
   2d2b2:	d0f6      	beq.n	2d2a2 <_dtoa_r+0x6ea>
   2d2b4:	3201      	adds	r2, #1
   2d2b6:	701a      	strb	r2, [r3, #0]
   2d2b8:	4641      	mov	r1, r8
   2d2ba:	4620      	mov	r0, r4
   2d2bc:	f000 fe96 	bl	2dfec <_Bfree>
   2d2c0:	2e00      	cmp	r6, #0
   2d2c2:	f43f ae3d 	beq.w	2cf40 <_dtoa_r+0x388>
   2d2c6:	f1bb 0f00 	cmp.w	fp, #0
   2d2ca:	d005      	beq.n	2d2d8 <_dtoa_r+0x720>
   2d2cc:	45b3      	cmp	fp, r6
   2d2ce:	d003      	beq.n	2d2d8 <_dtoa_r+0x720>
   2d2d0:	4659      	mov	r1, fp
   2d2d2:	4620      	mov	r0, r4
   2d2d4:	f000 fe8a 	bl	2dfec <_Bfree>
   2d2d8:	4631      	mov	r1, r6
   2d2da:	4620      	mov	r0, r4
   2d2dc:	f000 fe86 	bl	2dfec <_Bfree>
   2d2e0:	e62e      	b.n	2cf40 <_dtoa_r+0x388>
   2d2e2:	2300      	movs	r3, #0
   2d2e4:	930b      	str	r3, [sp, #44]	; 0x2c
   2d2e6:	9b02      	ldr	r3, [sp, #8]
   2d2e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d2ea:	4413      	add	r3, r2
   2d2ec:	930f      	str	r3, [sp, #60]	; 0x3c
   2d2ee:	3301      	adds	r3, #1
   2d2f0:	2b01      	cmp	r3, #1
   2d2f2:	461f      	mov	r7, r3
   2d2f4:	461e      	mov	r6, r3
   2d2f6:	930a      	str	r3, [sp, #40]	; 0x28
   2d2f8:	bfb8      	it	lt
   2d2fa:	2701      	movlt	r7, #1
   2d2fc:	2100      	movs	r1, #0
   2d2fe:	2f17      	cmp	r7, #23
   2d300:	6461      	str	r1, [r4, #68]	; 0x44
   2d302:	d90a      	bls.n	2d31a <_dtoa_r+0x762>
   2d304:	2201      	movs	r2, #1
   2d306:	2304      	movs	r3, #4
   2d308:	005b      	lsls	r3, r3, #1
   2d30a:	f103 0014 	add.w	r0, r3, #20
   2d30e:	4287      	cmp	r7, r0
   2d310:	4611      	mov	r1, r2
   2d312:	f102 0201 	add.w	r2, r2, #1
   2d316:	d2f7      	bcs.n	2d308 <_dtoa_r+0x750>
   2d318:	6461      	str	r1, [r4, #68]	; 0x44
   2d31a:	4620      	mov	r0, r4
   2d31c:	f000 fe40 	bl	2dfa0 <_Balloc>
   2d320:	2e0e      	cmp	r6, #14
   2d322:	9004      	str	r0, [sp, #16]
   2d324:	6420      	str	r0, [r4, #64]	; 0x40
   2d326:	f63f ad41 	bhi.w	2cdac <_dtoa_r+0x1f4>
   2d32a:	2d00      	cmp	r5, #0
   2d32c:	f43f ad3e 	beq.w	2cdac <_dtoa_r+0x1f4>
   2d330:	9902      	ldr	r1, [sp, #8]
   2d332:	2900      	cmp	r1, #0
   2d334:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d338:	f340 8202 	ble.w	2d740 <_dtoa_r+0xb88>
   2d33c:	4bb8      	ldr	r3, [pc, #736]	; (2d620 <_dtoa_r+0xa68>)
   2d33e:	f001 020f 	and.w	r2, r1, #15
   2d342:	110d      	asrs	r5, r1, #4
   2d344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d348:	06e9      	lsls	r1, r5, #27
   2d34a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d34e:	f140 81ae 	bpl.w	2d6ae <_dtoa_r+0xaf6>
   2d352:	4bb4      	ldr	r3, [pc, #720]	; (2d624 <_dtoa_r+0xa6c>)
   2d354:	4650      	mov	r0, sl
   2d356:	4659      	mov	r1, fp
   2d358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d35c:	f7d3 fd20 	bl	da0 <__aeabi_ddiv>
   2d360:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d364:	f005 050f 	and.w	r5, r5, #15
   2d368:	f04f 0a03 	mov.w	sl, #3
   2d36c:	b18d      	cbz	r5, 2d392 <_dtoa_r+0x7da>
   2d36e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d624 <_dtoa_r+0xa6c>
   2d372:	07ea      	lsls	r2, r5, #31
   2d374:	d509      	bpl.n	2d38a <_dtoa_r+0x7d2>
   2d376:	4630      	mov	r0, r6
   2d378:	4639      	mov	r1, r7
   2d37a:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d37e:	f7d3 fbe5 	bl	b4c <__aeabi_dmul>
   2d382:	f10a 0a01 	add.w	sl, sl, #1
   2d386:	4606      	mov	r6, r0
   2d388:	460f      	mov	r7, r1
   2d38a:	106d      	asrs	r5, r5, #1
   2d38c:	f108 0808 	add.w	r8, r8, #8
   2d390:	d1ef      	bne.n	2d372 <_dtoa_r+0x7ba>
   2d392:	463b      	mov	r3, r7
   2d394:	4632      	mov	r2, r6
   2d396:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d39a:	f7d3 fd01 	bl	da0 <__aeabi_ddiv>
   2d39e:	4607      	mov	r7, r0
   2d3a0:	4688      	mov	r8, r1
   2d3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d3a4:	b143      	cbz	r3, 2d3b8 <_dtoa_r+0x800>
   2d3a6:	2200      	movs	r2, #0
   2d3a8:	4b9f      	ldr	r3, [pc, #636]	; (2d628 <_dtoa_r+0xa70>)
   2d3aa:	4638      	mov	r0, r7
   2d3ac:	4641      	mov	r1, r8
   2d3ae:	f7d3 fe3f 	bl	1030 <__aeabi_dcmplt>
   2d3b2:	2800      	cmp	r0, #0
   2d3b4:	f040 8286 	bne.w	2d8c4 <_dtoa_r+0xd0c>
   2d3b8:	4650      	mov	r0, sl
   2d3ba:	f7d3 fb61 	bl	a80 <__aeabi_i2d>
   2d3be:	463a      	mov	r2, r7
   2d3c0:	4643      	mov	r3, r8
   2d3c2:	f7d3 fbc3 	bl	b4c <__aeabi_dmul>
   2d3c6:	4b99      	ldr	r3, [pc, #612]	; (2d62c <_dtoa_r+0xa74>)
   2d3c8:	2200      	movs	r2, #0
   2d3ca:	f7d3 fa0d 	bl	7e8 <__adddf3>
   2d3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d3d0:	4605      	mov	r5, r0
   2d3d2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d3d6:	2b00      	cmp	r3, #0
   2d3d8:	f000 813e 	beq.w	2d658 <_dtoa_r+0xaa0>
   2d3dc:	9b02      	ldr	r3, [sp, #8]
   2d3de:	9315      	str	r3, [sp, #84]	; 0x54
   2d3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d3e2:	9312      	str	r3, [sp, #72]	; 0x48
   2d3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d3e6:	2b00      	cmp	r3, #0
   2d3e8:	f000 81fa 	beq.w	2d7e0 <_dtoa_r+0xc28>
   2d3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d3ee:	4b8c      	ldr	r3, [pc, #560]	; (2d620 <_dtoa_r+0xa68>)
   2d3f0:	498f      	ldr	r1, [pc, #572]	; (2d630 <_dtoa_r+0xa78>)
   2d3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d3f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d3fa:	2000      	movs	r0, #0
   2d3fc:	f7d3 fcd0 	bl	da0 <__aeabi_ddiv>
   2d400:	462a      	mov	r2, r5
   2d402:	4633      	mov	r3, r6
   2d404:	f7d3 f9ee 	bl	7e4 <__aeabi_dsub>
   2d408:	4682      	mov	sl, r0
   2d40a:	468b      	mov	fp, r1
   2d40c:	4638      	mov	r0, r7
   2d40e:	4641      	mov	r1, r8
   2d410:	f7d3 fe4c 	bl	10ac <__aeabi_d2iz>
   2d414:	4605      	mov	r5, r0
   2d416:	f7d3 fb33 	bl	a80 <__aeabi_i2d>
   2d41a:	4602      	mov	r2, r0
   2d41c:	460b      	mov	r3, r1
   2d41e:	4638      	mov	r0, r7
   2d420:	4641      	mov	r1, r8
   2d422:	f7d3 f9df 	bl	7e4 <__aeabi_dsub>
   2d426:	3530      	adds	r5, #48	; 0x30
   2d428:	fa5f f885 	uxtb.w	r8, r5
   2d42c:	9d04      	ldr	r5, [sp, #16]
   2d42e:	4606      	mov	r6, r0
   2d430:	460f      	mov	r7, r1
   2d432:	f885 8000 	strb.w	r8, [r5]
   2d436:	4602      	mov	r2, r0
   2d438:	460b      	mov	r3, r1
   2d43a:	4650      	mov	r0, sl
   2d43c:	4659      	mov	r1, fp
   2d43e:	3501      	adds	r5, #1
   2d440:	f7d3 fe14 	bl	106c <__aeabi_dcmpgt>
   2d444:	2800      	cmp	r0, #0
   2d446:	d154      	bne.n	2d4f2 <_dtoa_r+0x93a>
   2d448:	4632      	mov	r2, r6
   2d44a:	463b      	mov	r3, r7
   2d44c:	2000      	movs	r0, #0
   2d44e:	4976      	ldr	r1, [pc, #472]	; (2d628 <_dtoa_r+0xa70>)
   2d450:	f7d3 f9c8 	bl	7e4 <__aeabi_dsub>
   2d454:	4602      	mov	r2, r0
   2d456:	460b      	mov	r3, r1
   2d458:	4650      	mov	r0, sl
   2d45a:	4659      	mov	r1, fp
   2d45c:	f7d3 fe06 	bl	106c <__aeabi_dcmpgt>
   2d460:	2800      	cmp	r0, #0
   2d462:	f040 8270 	bne.w	2d946 <_dtoa_r+0xd8e>
   2d466:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d468:	2a01      	cmp	r2, #1
   2d46a:	f000 8111 	beq.w	2d690 <_dtoa_r+0xad8>
   2d46e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d470:	9a04      	ldr	r2, [sp, #16]
   2d472:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d476:	4413      	add	r3, r2
   2d478:	4699      	mov	r9, r3
   2d47a:	e00d      	b.n	2d498 <_dtoa_r+0x8e0>
   2d47c:	2000      	movs	r0, #0
   2d47e:	496a      	ldr	r1, [pc, #424]	; (2d628 <_dtoa_r+0xa70>)
   2d480:	f7d3 f9b0 	bl	7e4 <__aeabi_dsub>
   2d484:	4652      	mov	r2, sl
   2d486:	465b      	mov	r3, fp
   2d488:	f7d3 fdd2 	bl	1030 <__aeabi_dcmplt>
   2d48c:	2800      	cmp	r0, #0
   2d48e:	f040 8258 	bne.w	2d942 <_dtoa_r+0xd8a>
   2d492:	454d      	cmp	r5, r9
   2d494:	f000 80fa 	beq.w	2d68c <_dtoa_r+0xad4>
   2d498:	4650      	mov	r0, sl
   2d49a:	4659      	mov	r1, fp
   2d49c:	2200      	movs	r2, #0
   2d49e:	4b65      	ldr	r3, [pc, #404]	; (2d634 <_dtoa_r+0xa7c>)
   2d4a0:	f7d3 fb54 	bl	b4c <__aeabi_dmul>
   2d4a4:	2200      	movs	r2, #0
   2d4a6:	4b63      	ldr	r3, [pc, #396]	; (2d634 <_dtoa_r+0xa7c>)
   2d4a8:	4682      	mov	sl, r0
   2d4aa:	468b      	mov	fp, r1
   2d4ac:	4630      	mov	r0, r6
   2d4ae:	4639      	mov	r1, r7
   2d4b0:	f7d3 fb4c 	bl	b4c <__aeabi_dmul>
   2d4b4:	460f      	mov	r7, r1
   2d4b6:	4606      	mov	r6, r0
   2d4b8:	f7d3 fdf8 	bl	10ac <__aeabi_d2iz>
   2d4bc:	4680      	mov	r8, r0
   2d4be:	f7d3 fadf 	bl	a80 <__aeabi_i2d>
   2d4c2:	4602      	mov	r2, r0
   2d4c4:	460b      	mov	r3, r1
   2d4c6:	4630      	mov	r0, r6
   2d4c8:	4639      	mov	r1, r7
   2d4ca:	f7d3 f98b 	bl	7e4 <__aeabi_dsub>
   2d4ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d4d2:	fa5f f888 	uxtb.w	r8, r8
   2d4d6:	4652      	mov	r2, sl
   2d4d8:	465b      	mov	r3, fp
   2d4da:	f805 8b01 	strb.w	r8, [r5], #1
   2d4de:	4606      	mov	r6, r0
   2d4e0:	460f      	mov	r7, r1
   2d4e2:	f7d3 fda5 	bl	1030 <__aeabi_dcmplt>
   2d4e6:	4632      	mov	r2, r6
   2d4e8:	463b      	mov	r3, r7
   2d4ea:	2800      	cmp	r0, #0
   2d4ec:	d0c6      	beq.n	2d47c <_dtoa_r+0x8c4>
   2d4ee:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d4f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d4f4:	9302      	str	r3, [sp, #8]
   2d4f6:	e523      	b.n	2cf40 <_dtoa_r+0x388>
   2d4f8:	2300      	movs	r3, #0
   2d4fa:	930b      	str	r3, [sp, #44]	; 0x2c
   2d4fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d4fe:	2b00      	cmp	r3, #0
   2d500:	f340 80dc 	ble.w	2d6bc <_dtoa_r+0xb04>
   2d504:	461f      	mov	r7, r3
   2d506:	461e      	mov	r6, r3
   2d508:	930f      	str	r3, [sp, #60]	; 0x3c
   2d50a:	930a      	str	r3, [sp, #40]	; 0x28
   2d50c:	e6f6      	b.n	2d2fc <_dtoa_r+0x744>
   2d50e:	2301      	movs	r3, #1
   2d510:	930b      	str	r3, [sp, #44]	; 0x2c
   2d512:	e7f3      	b.n	2d4fc <_dtoa_r+0x944>
   2d514:	f1ba 0f00 	cmp.w	sl, #0
   2d518:	f47f ada8 	bne.w	2d06c <_dtoa_r+0x4b4>
   2d51c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d520:	2b00      	cmp	r3, #0
   2d522:	f47f adba 	bne.w	2d09a <_dtoa_r+0x4e2>
   2d526:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d52a:	0d3f      	lsrs	r7, r7, #20
   2d52c:	053f      	lsls	r7, r7, #20
   2d52e:	2f00      	cmp	r7, #0
   2d530:	f000 820d 	beq.w	2d94e <_dtoa_r+0xd96>
   2d534:	9b08      	ldr	r3, [sp, #32]
   2d536:	3301      	adds	r3, #1
   2d538:	9308      	str	r3, [sp, #32]
   2d53a:	9b06      	ldr	r3, [sp, #24]
   2d53c:	3301      	adds	r3, #1
   2d53e:	9306      	str	r3, [sp, #24]
   2d540:	2301      	movs	r3, #1
   2d542:	930c      	str	r3, [sp, #48]	; 0x30
   2d544:	e5ab      	b.n	2d09e <_dtoa_r+0x4e6>
   2d546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d548:	2b00      	cmp	r3, #0
   2d54a:	f73f ac42 	bgt.w	2cdd2 <_dtoa_r+0x21a>
   2d54e:	f040 8221 	bne.w	2d994 <_dtoa_r+0xddc>
   2d552:	2200      	movs	r2, #0
   2d554:	4b38      	ldr	r3, [pc, #224]	; (2d638 <_dtoa_r+0xa80>)
   2d556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d55a:	f7d3 faf7 	bl	b4c <__aeabi_dmul>
   2d55e:	4652      	mov	r2, sl
   2d560:	465b      	mov	r3, fp
   2d562:	f7d3 fd79 	bl	1058 <__aeabi_dcmpge>
   2d566:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d56a:	4646      	mov	r6, r8
   2d56c:	2800      	cmp	r0, #0
   2d56e:	d041      	beq.n	2d5f4 <_dtoa_r+0xa3c>
   2d570:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d572:	9d04      	ldr	r5, [sp, #16]
   2d574:	43db      	mvns	r3, r3
   2d576:	9302      	str	r3, [sp, #8]
   2d578:	4641      	mov	r1, r8
   2d57a:	4620      	mov	r0, r4
   2d57c:	f000 fd36 	bl	2dfec <_Bfree>
   2d580:	2e00      	cmp	r6, #0
   2d582:	f43f acdd 	beq.w	2cf40 <_dtoa_r+0x388>
   2d586:	e6a7      	b.n	2d2d8 <_dtoa_r+0x720>
   2d588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d58a:	4649      	mov	r1, r9
   2d58c:	4620      	mov	r0, r4
   2d58e:	f000 fe63 	bl	2e258 <__pow5mult>
   2d592:	4681      	mov	r9, r0
   2d594:	e558      	b.n	2d048 <_dtoa_r+0x490>
   2d596:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d598:	2a00      	cmp	r2, #0
   2d59a:	f000 8187 	beq.w	2d8ac <_dtoa_r+0xcf4>
   2d59e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d5a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d5a4:	9d08      	ldr	r5, [sp, #32]
   2d5a6:	e4f2      	b.n	2cf8e <_dtoa_r+0x3d6>
   2d5a8:	f1ba 0f00 	cmp.w	sl, #0
   2d5ac:	f47f ad75 	bne.w	2d09a <_dtoa_r+0x4e2>
   2d5b0:	e7b4      	b.n	2d51c <_dtoa_r+0x964>
   2d5b2:	f000 fd25 	bl	2e000 <__multadd>
   2d5b6:	4647      	mov	r7, r8
   2d5b8:	4606      	mov	r6, r0
   2d5ba:	4683      	mov	fp, r0
   2d5bc:	e5be      	b.n	2d13c <_dtoa_r+0x584>
   2d5be:	4601      	mov	r1, r0
   2d5c0:	4620      	mov	r0, r4
   2d5c2:	9306      	str	r3, [sp, #24]
   2d5c4:	f000 fd12 	bl	2dfec <_Bfree>
   2d5c8:	2201      	movs	r2, #1
   2d5ca:	9b06      	ldr	r3, [sp, #24]
   2d5cc:	e5e0      	b.n	2d190 <_dtoa_r+0x5d8>
   2d5ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d5d0:	2b02      	cmp	r3, #2
   2d5d2:	f77f ad96 	ble.w	2d102 <_dtoa_r+0x54a>
   2d5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d5d8:	2b00      	cmp	r3, #0
   2d5da:	d1c9      	bne.n	2d570 <_dtoa_r+0x9b8>
   2d5dc:	4641      	mov	r1, r8
   2d5de:	2205      	movs	r2, #5
   2d5e0:	4620      	mov	r0, r4
   2d5e2:	f000 fd0d 	bl	2e000 <__multadd>
   2d5e6:	4601      	mov	r1, r0
   2d5e8:	4680      	mov	r8, r0
   2d5ea:	4648      	mov	r0, r9
   2d5ec:	f000 fed6 	bl	2e39c <__mcmp>
   2d5f0:	2800      	cmp	r0, #0
   2d5f2:	ddbd      	ble.n	2d570 <_dtoa_r+0x9b8>
   2d5f4:	9a02      	ldr	r2, [sp, #8]
   2d5f6:	9904      	ldr	r1, [sp, #16]
   2d5f8:	2331      	movs	r3, #49	; 0x31
   2d5fa:	3201      	adds	r2, #1
   2d5fc:	9202      	str	r2, [sp, #8]
   2d5fe:	700b      	strb	r3, [r1, #0]
   2d600:	1c4d      	adds	r5, r1, #1
   2d602:	e7b9      	b.n	2d578 <_dtoa_r+0x9c0>
   2d604:	9a02      	ldr	r2, [sp, #8]
   2d606:	3201      	adds	r2, #1
   2d608:	9202      	str	r2, [sp, #8]
   2d60a:	9a04      	ldr	r2, [sp, #16]
   2d60c:	2331      	movs	r3, #49	; 0x31
   2d60e:	7013      	strb	r3, [r2, #0]
   2d610:	e652      	b.n	2d2b8 <_dtoa_r+0x700>
   2d612:	2301      	movs	r3, #1
   2d614:	930b      	str	r3, [sp, #44]	; 0x2c
   2d616:	e666      	b.n	2d2e6 <_dtoa_r+0x72e>
   2d618:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d61c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d61e:	e48f      	b.n	2cf40 <_dtoa_r+0x388>
   2d620:	000335d8 	.word	0x000335d8
   2d624:	000335b0 	.word	0x000335b0
   2d628:	3ff00000 	.word	0x3ff00000
   2d62c:	401c0000 	.word	0x401c0000
   2d630:	3fe00000 	.word	0x3fe00000
   2d634:	40240000 	.word	0x40240000
   2d638:	40140000 	.word	0x40140000
   2d63c:	4650      	mov	r0, sl
   2d63e:	f7d3 fa1f 	bl	a80 <__aeabi_i2d>
   2d642:	463a      	mov	r2, r7
   2d644:	4643      	mov	r3, r8
   2d646:	f7d3 fa81 	bl	b4c <__aeabi_dmul>
   2d64a:	2200      	movs	r2, #0
   2d64c:	4bc1      	ldr	r3, [pc, #772]	; (2d954 <_dtoa_r+0xd9c>)
   2d64e:	f7d3 f8cb 	bl	7e8 <__adddf3>
   2d652:	4605      	mov	r5, r0
   2d654:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d658:	4641      	mov	r1, r8
   2d65a:	2200      	movs	r2, #0
   2d65c:	4bbe      	ldr	r3, [pc, #760]	; (2d958 <_dtoa_r+0xda0>)
   2d65e:	4638      	mov	r0, r7
   2d660:	f7d3 f8c0 	bl	7e4 <__aeabi_dsub>
   2d664:	462a      	mov	r2, r5
   2d666:	4633      	mov	r3, r6
   2d668:	4682      	mov	sl, r0
   2d66a:	468b      	mov	fp, r1
   2d66c:	f7d3 fcfe 	bl	106c <__aeabi_dcmpgt>
   2d670:	4680      	mov	r8, r0
   2d672:	2800      	cmp	r0, #0
   2d674:	f040 8110 	bne.w	2d898 <_dtoa_r+0xce0>
   2d678:	462a      	mov	r2, r5
   2d67a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d67e:	4650      	mov	r0, sl
   2d680:	4659      	mov	r1, fp
   2d682:	f7d3 fcd5 	bl	1030 <__aeabi_dcmplt>
   2d686:	b118      	cbz	r0, 2d690 <_dtoa_r+0xad8>
   2d688:	4646      	mov	r6, r8
   2d68a:	e771      	b.n	2d570 <_dtoa_r+0x9b8>
   2d68c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d690:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d694:	f7ff bb8a 	b.w	2cdac <_dtoa_r+0x1f4>
   2d698:	9804      	ldr	r0, [sp, #16]
   2d69a:	f7ff babb 	b.w	2cc14 <_dtoa_r+0x5c>
   2d69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d6a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d6a2:	970c      	str	r7, [sp, #48]	; 0x30
   2d6a4:	1afb      	subs	r3, r7, r3
   2d6a6:	441a      	add	r2, r3
   2d6a8:	920d      	str	r2, [sp, #52]	; 0x34
   2d6aa:	2700      	movs	r7, #0
   2d6ac:	e469      	b.n	2cf82 <_dtoa_r+0x3ca>
   2d6ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d6b2:	f04f 0a02 	mov.w	sl, #2
   2d6b6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d6ba:	e657      	b.n	2d36c <_dtoa_r+0x7b4>
   2d6bc:	2100      	movs	r1, #0
   2d6be:	2301      	movs	r3, #1
   2d6c0:	6461      	str	r1, [r4, #68]	; 0x44
   2d6c2:	4620      	mov	r0, r4
   2d6c4:	9325      	str	r3, [sp, #148]	; 0x94
   2d6c6:	f000 fc6b 	bl	2dfa0 <_Balloc>
   2d6ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d6cc:	9004      	str	r0, [sp, #16]
   2d6ce:	6420      	str	r0, [r4, #64]	; 0x40
   2d6d0:	930a      	str	r3, [sp, #40]	; 0x28
   2d6d2:	930f      	str	r3, [sp, #60]	; 0x3c
   2d6d4:	e629      	b.n	2d32a <_dtoa_r+0x772>
   2d6d6:	2a00      	cmp	r2, #0
   2d6d8:	46d0      	mov	r8, sl
   2d6da:	f8cd b018 	str.w	fp, [sp, #24]
   2d6de:	469a      	mov	sl, r3
   2d6e0:	dd11      	ble.n	2d706 <_dtoa_r+0xb4e>
   2d6e2:	4649      	mov	r1, r9
   2d6e4:	2201      	movs	r2, #1
   2d6e6:	4620      	mov	r0, r4
   2d6e8:	f000 fe06 	bl	2e2f8 <__lshift>
   2d6ec:	4641      	mov	r1, r8
   2d6ee:	4681      	mov	r9, r0
   2d6f0:	f000 fe54 	bl	2e39c <__mcmp>
   2d6f4:	2800      	cmp	r0, #0
   2d6f6:	f340 8146 	ble.w	2d986 <_dtoa_r+0xdce>
   2d6fa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d6fe:	f000 8106 	beq.w	2d90e <_dtoa_r+0xd56>
   2d702:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d706:	46b3      	mov	fp, r6
   2d708:	f887 a000 	strb.w	sl, [r7]
   2d70c:	1c7d      	adds	r5, r7, #1
   2d70e:	9e06      	ldr	r6, [sp, #24]
   2d710:	e5d2      	b.n	2d2b8 <_dtoa_r+0x700>
   2d712:	d104      	bne.n	2d71e <_dtoa_r+0xb66>
   2d714:	f01a 0f01 	tst.w	sl, #1
   2d718:	d001      	beq.n	2d71e <_dtoa_r+0xb66>
   2d71a:	e5bd      	b.n	2d298 <_dtoa_r+0x6e0>
   2d71c:	4615      	mov	r5, r2
   2d71e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d722:	2b30      	cmp	r3, #48	; 0x30
   2d724:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d728:	d0f8      	beq.n	2d71c <_dtoa_r+0xb64>
   2d72a:	e5c5      	b.n	2d2b8 <_dtoa_r+0x700>
   2d72c:	9904      	ldr	r1, [sp, #16]
   2d72e:	2230      	movs	r2, #48	; 0x30
   2d730:	700a      	strb	r2, [r1, #0]
   2d732:	9a02      	ldr	r2, [sp, #8]
   2d734:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d738:	3201      	adds	r2, #1
   2d73a:	9202      	str	r2, [sp, #8]
   2d73c:	f7ff bbfc 	b.w	2cf38 <_dtoa_r+0x380>
   2d740:	f000 80bb 	beq.w	2d8ba <_dtoa_r+0xd02>
   2d744:	9b02      	ldr	r3, [sp, #8]
   2d746:	425d      	negs	r5, r3
   2d748:	4b84      	ldr	r3, [pc, #528]	; (2d95c <_dtoa_r+0xda4>)
   2d74a:	f005 020f 	and.w	r2, r5, #15
   2d74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d752:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d75a:	f7d3 f9f7 	bl	b4c <__aeabi_dmul>
   2d75e:	112d      	asrs	r5, r5, #4
   2d760:	4607      	mov	r7, r0
   2d762:	4688      	mov	r8, r1
   2d764:	f000 812c 	beq.w	2d9c0 <_dtoa_r+0xe08>
   2d768:	4e7d      	ldr	r6, [pc, #500]	; (2d960 <_dtoa_r+0xda8>)
   2d76a:	f04f 0a02 	mov.w	sl, #2
   2d76e:	07eb      	lsls	r3, r5, #31
   2d770:	d509      	bpl.n	2d786 <_dtoa_r+0xbce>
   2d772:	4638      	mov	r0, r7
   2d774:	4641      	mov	r1, r8
   2d776:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d77a:	f7d3 f9e7 	bl	b4c <__aeabi_dmul>
   2d77e:	f10a 0a01 	add.w	sl, sl, #1
   2d782:	4607      	mov	r7, r0
   2d784:	4688      	mov	r8, r1
   2d786:	106d      	asrs	r5, r5, #1
   2d788:	f106 0608 	add.w	r6, r6, #8
   2d78c:	d1ef      	bne.n	2d76e <_dtoa_r+0xbb6>
   2d78e:	e608      	b.n	2d3a2 <_dtoa_r+0x7ea>
   2d790:	6871      	ldr	r1, [r6, #4]
   2d792:	4620      	mov	r0, r4
   2d794:	f000 fc04 	bl	2dfa0 <_Balloc>
   2d798:	6933      	ldr	r3, [r6, #16]
   2d79a:	3302      	adds	r3, #2
   2d79c:	009a      	lsls	r2, r3, #2
   2d79e:	4605      	mov	r5, r0
   2d7a0:	f106 010c 	add.w	r1, r6, #12
   2d7a4:	300c      	adds	r0, #12
   2d7a6:	f7d2 fd8b 	bl	2c0 <memcpy>
   2d7aa:	4629      	mov	r1, r5
   2d7ac:	2201      	movs	r2, #1
   2d7ae:	4620      	mov	r0, r4
   2d7b0:	f000 fda2 	bl	2e2f8 <__lshift>
   2d7b4:	9006      	str	r0, [sp, #24]
   2d7b6:	e4b5      	b.n	2d124 <_dtoa_r+0x56c>
   2d7b8:	2b39      	cmp	r3, #57	; 0x39
   2d7ba:	f8cd b018 	str.w	fp, [sp, #24]
   2d7be:	46d0      	mov	r8, sl
   2d7c0:	f000 80a5 	beq.w	2d90e <_dtoa_r+0xd56>
   2d7c4:	f103 0a01 	add.w	sl, r3, #1
   2d7c8:	46b3      	mov	fp, r6
   2d7ca:	f887 a000 	strb.w	sl, [r7]
   2d7ce:	1c7d      	adds	r5, r7, #1
   2d7d0:	9e06      	ldr	r6, [sp, #24]
   2d7d2:	e571      	b.n	2d2b8 <_dtoa_r+0x700>
   2d7d4:	465a      	mov	r2, fp
   2d7d6:	46d0      	mov	r8, sl
   2d7d8:	46b3      	mov	fp, r6
   2d7da:	469a      	mov	sl, r3
   2d7dc:	4616      	mov	r6, r2
   2d7de:	e54f      	b.n	2d280 <_dtoa_r+0x6c8>
   2d7e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d7e2:	495e      	ldr	r1, [pc, #376]	; (2d95c <_dtoa_r+0xda4>)
   2d7e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d7e8:	462a      	mov	r2, r5
   2d7ea:	4633      	mov	r3, r6
   2d7ec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d7f0:	f7d3 f9ac 	bl	b4c <__aeabi_dmul>
   2d7f4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d7f8:	4638      	mov	r0, r7
   2d7fa:	4641      	mov	r1, r8
   2d7fc:	f7d3 fc56 	bl	10ac <__aeabi_d2iz>
   2d800:	4605      	mov	r5, r0
   2d802:	f7d3 f93d 	bl	a80 <__aeabi_i2d>
   2d806:	460b      	mov	r3, r1
   2d808:	4602      	mov	r2, r0
   2d80a:	4641      	mov	r1, r8
   2d80c:	4638      	mov	r0, r7
   2d80e:	f7d2 ffe9 	bl	7e4 <__aeabi_dsub>
   2d812:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d814:	460f      	mov	r7, r1
   2d816:	9904      	ldr	r1, [sp, #16]
   2d818:	3530      	adds	r5, #48	; 0x30
   2d81a:	2b01      	cmp	r3, #1
   2d81c:	700d      	strb	r5, [r1, #0]
   2d81e:	4606      	mov	r6, r0
   2d820:	f101 0501 	add.w	r5, r1, #1
   2d824:	d026      	beq.n	2d874 <_dtoa_r+0xcbc>
   2d826:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d828:	9a04      	ldr	r2, [sp, #16]
   2d82a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d968 <_dtoa_r+0xdb0>
   2d82e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d832:	4413      	add	r3, r2
   2d834:	f04f 0a00 	mov.w	sl, #0
   2d838:	4699      	mov	r9, r3
   2d83a:	4652      	mov	r2, sl
   2d83c:	465b      	mov	r3, fp
   2d83e:	4630      	mov	r0, r6
   2d840:	4639      	mov	r1, r7
   2d842:	f7d3 f983 	bl	b4c <__aeabi_dmul>
   2d846:	460f      	mov	r7, r1
   2d848:	4606      	mov	r6, r0
   2d84a:	f7d3 fc2f 	bl	10ac <__aeabi_d2iz>
   2d84e:	4680      	mov	r8, r0
   2d850:	f7d3 f916 	bl	a80 <__aeabi_i2d>
   2d854:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d858:	4602      	mov	r2, r0
   2d85a:	460b      	mov	r3, r1
   2d85c:	4630      	mov	r0, r6
   2d85e:	4639      	mov	r1, r7
   2d860:	f7d2 ffc0 	bl	7e4 <__aeabi_dsub>
   2d864:	f805 8b01 	strb.w	r8, [r5], #1
   2d868:	454d      	cmp	r5, r9
   2d86a:	4606      	mov	r6, r0
   2d86c:	460f      	mov	r7, r1
   2d86e:	d1e4      	bne.n	2d83a <_dtoa_r+0xc82>
   2d870:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d874:	4b3b      	ldr	r3, [pc, #236]	; (2d964 <_dtoa_r+0xdac>)
   2d876:	2200      	movs	r2, #0
   2d878:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d87c:	f7d2 ffb4 	bl	7e8 <__adddf3>
   2d880:	4632      	mov	r2, r6
   2d882:	463b      	mov	r3, r7
   2d884:	f7d3 fbd4 	bl	1030 <__aeabi_dcmplt>
   2d888:	2800      	cmp	r0, #0
   2d88a:	d046      	beq.n	2d91a <_dtoa_r+0xd62>
   2d88c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d88e:	9302      	str	r3, [sp, #8]
   2d890:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d894:	f7ff bb43 	b.w	2cf1e <_dtoa_r+0x366>
   2d898:	f04f 0800 	mov.w	r8, #0
   2d89c:	4646      	mov	r6, r8
   2d89e:	e6a9      	b.n	2d5f4 <_dtoa_r+0xa3c>
   2d8a0:	9b08      	ldr	r3, [sp, #32]
   2d8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d8a4:	1a9d      	subs	r5, r3, r2
   2d8a6:	2300      	movs	r3, #0
   2d8a8:	f7ff bb71 	b.w	2cf8e <_dtoa_r+0x3d6>
   2d8ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d8ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d8b0:	9d08      	ldr	r5, [sp, #32]
   2d8b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d8b6:	f7ff bb6a 	b.w	2cf8e <_dtoa_r+0x3d6>
   2d8ba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d8be:	f04f 0a02 	mov.w	sl, #2
   2d8c2:	e56e      	b.n	2d3a2 <_dtoa_r+0x7ea>
   2d8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d8c6:	2b00      	cmp	r3, #0
   2d8c8:	f43f aeb8 	beq.w	2d63c <_dtoa_r+0xa84>
   2d8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8ce:	2b00      	cmp	r3, #0
   2d8d0:	f77f aede 	ble.w	2d690 <_dtoa_r+0xad8>
   2d8d4:	2200      	movs	r2, #0
   2d8d6:	4b24      	ldr	r3, [pc, #144]	; (2d968 <_dtoa_r+0xdb0>)
   2d8d8:	4638      	mov	r0, r7
   2d8da:	4641      	mov	r1, r8
   2d8dc:	f7d3 f936 	bl	b4c <__aeabi_dmul>
   2d8e0:	4607      	mov	r7, r0
   2d8e2:	4688      	mov	r8, r1
   2d8e4:	f10a 0001 	add.w	r0, sl, #1
   2d8e8:	f7d3 f8ca 	bl	a80 <__aeabi_i2d>
   2d8ec:	463a      	mov	r2, r7
   2d8ee:	4643      	mov	r3, r8
   2d8f0:	f7d3 f92c 	bl	b4c <__aeabi_dmul>
   2d8f4:	2200      	movs	r2, #0
   2d8f6:	4b17      	ldr	r3, [pc, #92]	; (2d954 <_dtoa_r+0xd9c>)
   2d8f8:	f7d2 ff76 	bl	7e8 <__adddf3>
   2d8fc:	9a02      	ldr	r2, [sp, #8]
   2d8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d900:	9312      	str	r3, [sp, #72]	; 0x48
   2d902:	3a01      	subs	r2, #1
   2d904:	4605      	mov	r5, r0
   2d906:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d90a:	9215      	str	r2, [sp, #84]	; 0x54
   2d90c:	e56a      	b.n	2d3e4 <_dtoa_r+0x82c>
   2d90e:	2239      	movs	r2, #57	; 0x39
   2d910:	46b3      	mov	fp, r6
   2d912:	703a      	strb	r2, [r7, #0]
   2d914:	9e06      	ldr	r6, [sp, #24]
   2d916:	1c7d      	adds	r5, r7, #1
   2d918:	e4c0      	b.n	2d29c <_dtoa_r+0x6e4>
   2d91a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d91e:	2000      	movs	r0, #0
   2d920:	4910      	ldr	r1, [pc, #64]	; (2d964 <_dtoa_r+0xdac>)
   2d922:	f7d2 ff5f 	bl	7e4 <__aeabi_dsub>
   2d926:	4632      	mov	r2, r6
   2d928:	463b      	mov	r3, r7
   2d92a:	f7d3 fb9f 	bl	106c <__aeabi_dcmpgt>
   2d92e:	b908      	cbnz	r0, 2d934 <_dtoa_r+0xd7c>
   2d930:	e6ae      	b.n	2d690 <_dtoa_r+0xad8>
   2d932:	4615      	mov	r5, r2
   2d934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d938:	2b30      	cmp	r3, #48	; 0x30
   2d93a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d93e:	d0f8      	beq.n	2d932 <_dtoa_r+0xd7a>
   2d940:	e5d7      	b.n	2d4f2 <_dtoa_r+0x93a>
   2d942:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d946:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d948:	9302      	str	r3, [sp, #8]
   2d94a:	f7ff bae8 	b.w	2cf1e <_dtoa_r+0x366>
   2d94e:	970c      	str	r7, [sp, #48]	; 0x30
   2d950:	f7ff bba5 	b.w	2d09e <_dtoa_r+0x4e6>
   2d954:	401c0000 	.word	0x401c0000
   2d958:	40140000 	.word	0x40140000
   2d95c:	000335d8 	.word	0x000335d8
   2d960:	000335b0 	.word	0x000335b0
   2d964:	3fe00000 	.word	0x3fe00000
   2d968:	40240000 	.word	0x40240000
   2d96c:	2b39      	cmp	r3, #57	; 0x39
   2d96e:	f8cd b018 	str.w	fp, [sp, #24]
   2d972:	46d0      	mov	r8, sl
   2d974:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d978:	469a      	mov	sl, r3
   2d97a:	d0c8      	beq.n	2d90e <_dtoa_r+0xd56>
   2d97c:	f1bb 0f00 	cmp.w	fp, #0
   2d980:	f73f aebf 	bgt.w	2d702 <_dtoa_r+0xb4a>
   2d984:	e6bf      	b.n	2d706 <_dtoa_r+0xb4e>
   2d986:	f47f aebe 	bne.w	2d706 <_dtoa_r+0xb4e>
   2d98a:	f01a 0f01 	tst.w	sl, #1
   2d98e:	f43f aeba 	beq.w	2d706 <_dtoa_r+0xb4e>
   2d992:	e6b2      	b.n	2d6fa <_dtoa_r+0xb42>
   2d994:	f04f 0800 	mov.w	r8, #0
   2d998:	4646      	mov	r6, r8
   2d99a:	e5e9      	b.n	2d570 <_dtoa_r+0x9b8>
   2d99c:	4631      	mov	r1, r6
   2d99e:	2300      	movs	r3, #0
   2d9a0:	220a      	movs	r2, #10
   2d9a2:	4620      	mov	r0, r4
   2d9a4:	f000 fb2c 	bl	2e000 <__multadd>
   2d9a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9aa:	2b00      	cmp	r3, #0
   2d9ac:	4606      	mov	r6, r0
   2d9ae:	dd0a      	ble.n	2d9c6 <_dtoa_r+0xe0e>
   2d9b0:	930a      	str	r3, [sp, #40]	; 0x28
   2d9b2:	f7ff bbaa 	b.w	2d10a <_dtoa_r+0x552>
   2d9b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d9b8:	2b02      	cmp	r3, #2
   2d9ba:	dc23      	bgt.n	2da04 <_dtoa_r+0xe4c>
   2d9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9be:	e43b      	b.n	2d238 <_dtoa_r+0x680>
   2d9c0:	f04f 0a02 	mov.w	sl, #2
   2d9c4:	e4ed      	b.n	2d3a2 <_dtoa_r+0x7ea>
   2d9c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d9c8:	2b02      	cmp	r3, #2
   2d9ca:	dc1b      	bgt.n	2da04 <_dtoa_r+0xe4c>
   2d9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9ce:	e7ef      	b.n	2d9b0 <_dtoa_r+0xdf8>
   2d9d0:	2500      	movs	r5, #0
   2d9d2:	6465      	str	r5, [r4, #68]	; 0x44
   2d9d4:	4629      	mov	r1, r5
   2d9d6:	4620      	mov	r0, r4
   2d9d8:	f000 fae2 	bl	2dfa0 <_Balloc>
   2d9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d9e0:	930a      	str	r3, [sp, #40]	; 0x28
   2d9e2:	930f      	str	r3, [sp, #60]	; 0x3c
   2d9e4:	2301      	movs	r3, #1
   2d9e6:	9004      	str	r0, [sp, #16]
   2d9e8:	9525      	str	r5, [sp, #148]	; 0x94
   2d9ea:	6420      	str	r0, [r4, #64]	; 0x40
   2d9ec:	930b      	str	r3, [sp, #44]	; 0x2c
   2d9ee:	f7ff b9dd 	b.w	2cdac <_dtoa_r+0x1f4>
   2d9f2:	2501      	movs	r5, #1
   2d9f4:	f7ff b9a5 	b.w	2cd42 <_dtoa_r+0x18a>
   2d9f8:	f43f ab69 	beq.w	2d0ce <_dtoa_r+0x516>
   2d9fc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2da00:	f7ff bbf9 	b.w	2d1f6 <_dtoa_r+0x63e>
   2da04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da06:	930a      	str	r3, [sp, #40]	; 0x28
   2da08:	e5e5      	b.n	2d5d6 <_dtoa_r+0xa1e>
   2da0a:	bf00      	nop

0002da0c <_localeconv_r>:
   2da0c:	4a04      	ldr	r2, [pc, #16]	; (2da20 <_localeconv_r+0x14>)
   2da0e:	4b05      	ldr	r3, [pc, #20]	; (2da24 <_localeconv_r+0x18>)
   2da10:	6812      	ldr	r2, [r2, #0]
   2da12:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2da14:	2800      	cmp	r0, #0
   2da16:	bf08      	it	eq
   2da18:	4618      	moveq	r0, r3
   2da1a:	30f0      	adds	r0, #240	; 0xf0
   2da1c:	4770      	bx	lr
   2da1e:	bf00      	nop
   2da20:	2000cc80 	.word	0x2000cc80
   2da24:	2000cb14 	.word	0x2000cb14

0002da28 <_malloc_r>:
   2da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da2c:	f101 060b 	add.w	r6, r1, #11
   2da30:	2e16      	cmp	r6, #22
   2da32:	b083      	sub	sp, #12
   2da34:	4605      	mov	r5, r0
   2da36:	f240 809e 	bls.w	2db76 <_malloc_r+0x14e>
   2da3a:	f036 0607 	bics.w	r6, r6, #7
   2da3e:	f100 80bd 	bmi.w	2dbbc <_malloc_r+0x194>
   2da42:	42b1      	cmp	r1, r6
   2da44:	f200 80ba 	bhi.w	2dbbc <_malloc_r+0x194>
   2da48:	f000 fa9e 	bl	2df88 <__malloc_lock>
   2da4c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2da50:	f0c0 8293 	bcc.w	2df7a <_malloc_r+0x552>
   2da54:	0a73      	lsrs	r3, r6, #9
   2da56:	f000 80b8 	beq.w	2dbca <_malloc_r+0x1a2>
   2da5a:	2b04      	cmp	r3, #4
   2da5c:	f200 8179 	bhi.w	2dd52 <_malloc_r+0x32a>
   2da60:	09b3      	lsrs	r3, r6, #6
   2da62:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2da66:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2da6a:	00c3      	lsls	r3, r0, #3
   2da6c:	4fbf      	ldr	r7, [pc, #764]	; (2dd6c <_malloc_r+0x344>)
   2da6e:	443b      	add	r3, r7
   2da70:	f1a3 0108 	sub.w	r1, r3, #8
   2da74:	685c      	ldr	r4, [r3, #4]
   2da76:	42a1      	cmp	r1, r4
   2da78:	d106      	bne.n	2da88 <_malloc_r+0x60>
   2da7a:	e00c      	b.n	2da96 <_malloc_r+0x6e>
   2da7c:	2a00      	cmp	r2, #0
   2da7e:	f280 80aa 	bge.w	2dbd6 <_malloc_r+0x1ae>
   2da82:	68e4      	ldr	r4, [r4, #12]
   2da84:	42a1      	cmp	r1, r4
   2da86:	d006      	beq.n	2da96 <_malloc_r+0x6e>
   2da88:	6863      	ldr	r3, [r4, #4]
   2da8a:	f023 0303 	bic.w	r3, r3, #3
   2da8e:	1b9a      	subs	r2, r3, r6
   2da90:	2a0f      	cmp	r2, #15
   2da92:	ddf3      	ble.n	2da7c <_malloc_r+0x54>
   2da94:	4670      	mov	r0, lr
   2da96:	693c      	ldr	r4, [r7, #16]
   2da98:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2dd80 <_malloc_r+0x358>
   2da9c:	4574      	cmp	r4, lr
   2da9e:	f000 81ab 	beq.w	2ddf8 <_malloc_r+0x3d0>
   2daa2:	6863      	ldr	r3, [r4, #4]
   2daa4:	f023 0303 	bic.w	r3, r3, #3
   2daa8:	1b9a      	subs	r2, r3, r6
   2daaa:	2a0f      	cmp	r2, #15
   2daac:	f300 8190 	bgt.w	2ddd0 <_malloc_r+0x3a8>
   2dab0:	2a00      	cmp	r2, #0
   2dab2:	f8c7 e014 	str.w	lr, [r7, #20]
   2dab6:	f8c7 e010 	str.w	lr, [r7, #16]
   2daba:	f280 809d 	bge.w	2dbf8 <_malloc_r+0x1d0>
   2dabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2dac2:	f080 8161 	bcs.w	2dd88 <_malloc_r+0x360>
   2dac6:	08db      	lsrs	r3, r3, #3
   2dac8:	f103 0c01 	add.w	ip, r3, #1
   2dacc:	1099      	asrs	r1, r3, #2
   2dace:	687a      	ldr	r2, [r7, #4]
   2dad0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2dad4:	f8c4 8008 	str.w	r8, [r4, #8]
   2dad8:	2301      	movs	r3, #1
   2dada:	408b      	lsls	r3, r1
   2dadc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2dae0:	4313      	orrs	r3, r2
   2dae2:	3908      	subs	r1, #8
   2dae4:	60e1      	str	r1, [r4, #12]
   2dae6:	607b      	str	r3, [r7, #4]
   2dae8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2daec:	f8c8 400c 	str.w	r4, [r8, #12]
   2daf0:	1082      	asrs	r2, r0, #2
   2daf2:	2401      	movs	r4, #1
   2daf4:	4094      	lsls	r4, r2
   2daf6:	429c      	cmp	r4, r3
   2daf8:	f200 808b 	bhi.w	2dc12 <_malloc_r+0x1ea>
   2dafc:	421c      	tst	r4, r3
   2dafe:	d106      	bne.n	2db0e <_malloc_r+0xe6>
   2db00:	f020 0003 	bic.w	r0, r0, #3
   2db04:	0064      	lsls	r4, r4, #1
   2db06:	421c      	tst	r4, r3
   2db08:	f100 0004 	add.w	r0, r0, #4
   2db0c:	d0fa      	beq.n	2db04 <_malloc_r+0xdc>
   2db0e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2db12:	46cc      	mov	ip, r9
   2db14:	4680      	mov	r8, r0
   2db16:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2db1a:	459c      	cmp	ip, r3
   2db1c:	d107      	bne.n	2db2e <_malloc_r+0x106>
   2db1e:	e16d      	b.n	2ddfc <_malloc_r+0x3d4>
   2db20:	2a00      	cmp	r2, #0
   2db22:	f280 817b 	bge.w	2de1c <_malloc_r+0x3f4>
   2db26:	68db      	ldr	r3, [r3, #12]
   2db28:	459c      	cmp	ip, r3
   2db2a:	f000 8167 	beq.w	2ddfc <_malloc_r+0x3d4>
   2db2e:	6859      	ldr	r1, [r3, #4]
   2db30:	f021 0103 	bic.w	r1, r1, #3
   2db34:	1b8a      	subs	r2, r1, r6
   2db36:	2a0f      	cmp	r2, #15
   2db38:	ddf2      	ble.n	2db20 <_malloc_r+0xf8>
   2db3a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2db3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2db42:	9300      	str	r3, [sp, #0]
   2db44:	199c      	adds	r4, r3, r6
   2db46:	4628      	mov	r0, r5
   2db48:	f046 0601 	orr.w	r6, r6, #1
   2db4c:	f042 0501 	orr.w	r5, r2, #1
   2db50:	605e      	str	r6, [r3, #4]
   2db52:	f8c8 c00c 	str.w	ip, [r8, #12]
   2db56:	f8cc 8008 	str.w	r8, [ip, #8]
   2db5a:	617c      	str	r4, [r7, #20]
   2db5c:	613c      	str	r4, [r7, #16]
   2db5e:	f8c4 e00c 	str.w	lr, [r4, #12]
   2db62:	f8c4 e008 	str.w	lr, [r4, #8]
   2db66:	6065      	str	r5, [r4, #4]
   2db68:	505a      	str	r2, [r3, r1]
   2db6a:	f000 fa13 	bl	2df94 <__malloc_unlock>
   2db6e:	9b00      	ldr	r3, [sp, #0]
   2db70:	f103 0408 	add.w	r4, r3, #8
   2db74:	e01e      	b.n	2dbb4 <_malloc_r+0x18c>
   2db76:	2910      	cmp	r1, #16
   2db78:	d820      	bhi.n	2dbbc <_malloc_r+0x194>
   2db7a:	f000 fa05 	bl	2df88 <__malloc_lock>
   2db7e:	2610      	movs	r6, #16
   2db80:	2318      	movs	r3, #24
   2db82:	2002      	movs	r0, #2
   2db84:	4f79      	ldr	r7, [pc, #484]	; (2dd6c <_malloc_r+0x344>)
   2db86:	443b      	add	r3, r7
   2db88:	f1a3 0208 	sub.w	r2, r3, #8
   2db8c:	685c      	ldr	r4, [r3, #4]
   2db8e:	4294      	cmp	r4, r2
   2db90:	f000 813d 	beq.w	2de0e <_malloc_r+0x3e6>
   2db94:	6863      	ldr	r3, [r4, #4]
   2db96:	68e1      	ldr	r1, [r4, #12]
   2db98:	68a6      	ldr	r6, [r4, #8]
   2db9a:	f023 0303 	bic.w	r3, r3, #3
   2db9e:	4423      	add	r3, r4
   2dba0:	4628      	mov	r0, r5
   2dba2:	685a      	ldr	r2, [r3, #4]
   2dba4:	60f1      	str	r1, [r6, #12]
   2dba6:	f042 0201 	orr.w	r2, r2, #1
   2dbaa:	608e      	str	r6, [r1, #8]
   2dbac:	605a      	str	r2, [r3, #4]
   2dbae:	f000 f9f1 	bl	2df94 <__malloc_unlock>
   2dbb2:	3408      	adds	r4, #8
   2dbb4:	4620      	mov	r0, r4
   2dbb6:	b003      	add	sp, #12
   2dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbbc:	2400      	movs	r4, #0
   2dbbe:	230c      	movs	r3, #12
   2dbc0:	4620      	mov	r0, r4
   2dbc2:	602b      	str	r3, [r5, #0]
   2dbc4:	b003      	add	sp, #12
   2dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbca:	2040      	movs	r0, #64	; 0x40
   2dbcc:	f44f 7300 	mov.w	r3, #512	; 0x200
   2dbd0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2dbd4:	e74a      	b.n	2da6c <_malloc_r+0x44>
   2dbd6:	4423      	add	r3, r4
   2dbd8:	68e1      	ldr	r1, [r4, #12]
   2dbda:	685a      	ldr	r2, [r3, #4]
   2dbdc:	68a6      	ldr	r6, [r4, #8]
   2dbde:	f042 0201 	orr.w	r2, r2, #1
   2dbe2:	60f1      	str	r1, [r6, #12]
   2dbe4:	4628      	mov	r0, r5
   2dbe6:	608e      	str	r6, [r1, #8]
   2dbe8:	605a      	str	r2, [r3, #4]
   2dbea:	f000 f9d3 	bl	2df94 <__malloc_unlock>
   2dbee:	3408      	adds	r4, #8
   2dbf0:	4620      	mov	r0, r4
   2dbf2:	b003      	add	sp, #12
   2dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbf8:	4423      	add	r3, r4
   2dbfa:	4628      	mov	r0, r5
   2dbfc:	685a      	ldr	r2, [r3, #4]
   2dbfe:	f042 0201 	orr.w	r2, r2, #1
   2dc02:	605a      	str	r2, [r3, #4]
   2dc04:	f000 f9c6 	bl	2df94 <__malloc_unlock>
   2dc08:	3408      	adds	r4, #8
   2dc0a:	4620      	mov	r0, r4
   2dc0c:	b003      	add	sp, #12
   2dc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc12:	68bc      	ldr	r4, [r7, #8]
   2dc14:	6863      	ldr	r3, [r4, #4]
   2dc16:	f023 0803 	bic.w	r8, r3, #3
   2dc1a:	45b0      	cmp	r8, r6
   2dc1c:	d304      	bcc.n	2dc28 <_malloc_r+0x200>
   2dc1e:	eba8 0306 	sub.w	r3, r8, r6
   2dc22:	2b0f      	cmp	r3, #15
   2dc24:	f300 8085 	bgt.w	2dd32 <_malloc_r+0x30a>
   2dc28:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2dd84 <_malloc_r+0x35c>
   2dc2c:	4b50      	ldr	r3, [pc, #320]	; (2dd70 <_malloc_r+0x348>)
   2dc2e:	f8d9 2000 	ldr.w	r2, [r9]
   2dc32:	681b      	ldr	r3, [r3, #0]
   2dc34:	3201      	adds	r2, #1
   2dc36:	4433      	add	r3, r6
   2dc38:	eb04 0a08 	add.w	sl, r4, r8
   2dc3c:	f000 8155 	beq.w	2deea <_malloc_r+0x4c2>
   2dc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2dc44:	330f      	adds	r3, #15
   2dc46:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2dc4a:	f02b 0b0f 	bic.w	fp, fp, #15
   2dc4e:	4659      	mov	r1, fp
   2dc50:	4628      	mov	r0, r5
   2dc52:	f000 fc9f 	bl	2e594 <_sbrk_r>
   2dc56:	1c41      	adds	r1, r0, #1
   2dc58:	4602      	mov	r2, r0
   2dc5a:	f000 80fc 	beq.w	2de56 <_malloc_r+0x42e>
   2dc5e:	4582      	cmp	sl, r0
   2dc60:	f200 80f7 	bhi.w	2de52 <_malloc_r+0x42a>
   2dc64:	4b43      	ldr	r3, [pc, #268]	; (2dd74 <_malloc_r+0x34c>)
   2dc66:	6819      	ldr	r1, [r3, #0]
   2dc68:	4459      	add	r1, fp
   2dc6a:	6019      	str	r1, [r3, #0]
   2dc6c:	f000 814d 	beq.w	2df0a <_malloc_r+0x4e2>
   2dc70:	f8d9 0000 	ldr.w	r0, [r9]
   2dc74:	3001      	adds	r0, #1
   2dc76:	bf1b      	ittet	ne
   2dc78:	eba2 0a0a 	subne.w	sl, r2, sl
   2dc7c:	4451      	addne	r1, sl
   2dc7e:	f8c9 2000 	streq.w	r2, [r9]
   2dc82:	6019      	strne	r1, [r3, #0]
   2dc84:	f012 0107 	ands.w	r1, r2, #7
   2dc88:	f000 8115 	beq.w	2deb6 <_malloc_r+0x48e>
   2dc8c:	f1c1 0008 	rsb	r0, r1, #8
   2dc90:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2dc94:	4402      	add	r2, r0
   2dc96:	3108      	adds	r1, #8
   2dc98:	eb02 090b 	add.w	r9, r2, fp
   2dc9c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2dca0:	eba1 0909 	sub.w	r9, r1, r9
   2dca4:	4649      	mov	r1, r9
   2dca6:	4628      	mov	r0, r5
   2dca8:	9301      	str	r3, [sp, #4]
   2dcaa:	9200      	str	r2, [sp, #0]
   2dcac:	f000 fc72 	bl	2e594 <_sbrk_r>
   2dcb0:	1c43      	adds	r3, r0, #1
   2dcb2:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2dcb6:	f000 8143 	beq.w	2df40 <_malloc_r+0x518>
   2dcba:	1a80      	subs	r0, r0, r2
   2dcbc:	4448      	add	r0, r9
   2dcbe:	f040 0001 	orr.w	r0, r0, #1
   2dcc2:	6819      	ldr	r1, [r3, #0]
   2dcc4:	60ba      	str	r2, [r7, #8]
   2dcc6:	4449      	add	r1, r9
   2dcc8:	42bc      	cmp	r4, r7
   2dcca:	6050      	str	r0, [r2, #4]
   2dccc:	6019      	str	r1, [r3, #0]
   2dcce:	d017      	beq.n	2dd00 <_malloc_r+0x2d8>
   2dcd0:	f1b8 0f0f 	cmp.w	r8, #15
   2dcd4:	f240 80fb 	bls.w	2dece <_malloc_r+0x4a6>
   2dcd8:	6860      	ldr	r0, [r4, #4]
   2dcda:	f1a8 020c 	sub.w	r2, r8, #12
   2dcde:	f022 0207 	bic.w	r2, r2, #7
   2dce2:	eb04 0e02 	add.w	lr, r4, r2
   2dce6:	f000 0001 	and.w	r0, r0, #1
   2dcea:	f04f 0c05 	mov.w	ip, #5
   2dcee:	4310      	orrs	r0, r2
   2dcf0:	2a0f      	cmp	r2, #15
   2dcf2:	6060      	str	r0, [r4, #4]
   2dcf4:	f8ce c004 	str.w	ip, [lr, #4]
   2dcf8:	f8ce c008 	str.w	ip, [lr, #8]
   2dcfc:	f200 8117 	bhi.w	2df2e <_malloc_r+0x506>
   2dd00:	4b1d      	ldr	r3, [pc, #116]	; (2dd78 <_malloc_r+0x350>)
   2dd02:	68bc      	ldr	r4, [r7, #8]
   2dd04:	681a      	ldr	r2, [r3, #0]
   2dd06:	4291      	cmp	r1, r2
   2dd08:	bf88      	it	hi
   2dd0a:	6019      	strhi	r1, [r3, #0]
   2dd0c:	4b1b      	ldr	r3, [pc, #108]	; (2dd7c <_malloc_r+0x354>)
   2dd0e:	681a      	ldr	r2, [r3, #0]
   2dd10:	4291      	cmp	r1, r2
   2dd12:	6862      	ldr	r2, [r4, #4]
   2dd14:	bf88      	it	hi
   2dd16:	6019      	strhi	r1, [r3, #0]
   2dd18:	f022 0203 	bic.w	r2, r2, #3
   2dd1c:	4296      	cmp	r6, r2
   2dd1e:	eba2 0306 	sub.w	r3, r2, r6
   2dd22:	d801      	bhi.n	2dd28 <_malloc_r+0x300>
   2dd24:	2b0f      	cmp	r3, #15
   2dd26:	dc04      	bgt.n	2dd32 <_malloc_r+0x30a>
   2dd28:	4628      	mov	r0, r5
   2dd2a:	f000 f933 	bl	2df94 <__malloc_unlock>
   2dd2e:	2400      	movs	r4, #0
   2dd30:	e740      	b.n	2dbb4 <_malloc_r+0x18c>
   2dd32:	19a2      	adds	r2, r4, r6
   2dd34:	f043 0301 	orr.w	r3, r3, #1
   2dd38:	f046 0601 	orr.w	r6, r6, #1
   2dd3c:	6066      	str	r6, [r4, #4]
   2dd3e:	4628      	mov	r0, r5
   2dd40:	60ba      	str	r2, [r7, #8]
   2dd42:	6053      	str	r3, [r2, #4]
   2dd44:	f000 f926 	bl	2df94 <__malloc_unlock>
   2dd48:	3408      	adds	r4, #8
   2dd4a:	4620      	mov	r0, r4
   2dd4c:	b003      	add	sp, #12
   2dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd52:	2b14      	cmp	r3, #20
   2dd54:	d971      	bls.n	2de3a <_malloc_r+0x412>
   2dd56:	2b54      	cmp	r3, #84	; 0x54
   2dd58:	f200 80a3 	bhi.w	2dea2 <_malloc_r+0x47a>
   2dd5c:	0b33      	lsrs	r3, r6, #12
   2dd5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2dd62:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2dd66:	00c3      	lsls	r3, r0, #3
   2dd68:	e680      	b.n	2da6c <_malloc_r+0x44>
   2dd6a:	bf00      	nop
   2dd6c:	2000d0b0 	.word	0x2000d0b0
   2dd70:	20002e30 	.word	0x20002e30
   2dd74:	20002e00 	.word	0x20002e00
   2dd78:	20002e28 	.word	0x20002e28
   2dd7c:	20002e2c 	.word	0x20002e2c
   2dd80:	2000d0b8 	.word	0x2000d0b8
   2dd84:	2000d4b8 	.word	0x2000d4b8
   2dd88:	0a5a      	lsrs	r2, r3, #9
   2dd8a:	2a04      	cmp	r2, #4
   2dd8c:	d95b      	bls.n	2de46 <_malloc_r+0x41e>
   2dd8e:	2a14      	cmp	r2, #20
   2dd90:	f200 80ae 	bhi.w	2def0 <_malloc_r+0x4c8>
   2dd94:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2dd98:	00c9      	lsls	r1, r1, #3
   2dd9a:	325b      	adds	r2, #91	; 0x5b
   2dd9c:	eb07 0c01 	add.w	ip, r7, r1
   2dda0:	5879      	ldr	r1, [r7, r1]
   2dda2:	f1ac 0c08 	sub.w	ip, ip, #8
   2dda6:	458c      	cmp	ip, r1
   2dda8:	f000 8088 	beq.w	2debc <_malloc_r+0x494>
   2ddac:	684a      	ldr	r2, [r1, #4]
   2ddae:	f022 0203 	bic.w	r2, r2, #3
   2ddb2:	4293      	cmp	r3, r2
   2ddb4:	d273      	bcs.n	2de9e <_malloc_r+0x476>
   2ddb6:	6889      	ldr	r1, [r1, #8]
   2ddb8:	458c      	cmp	ip, r1
   2ddba:	d1f7      	bne.n	2ddac <_malloc_r+0x384>
   2ddbc:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2ddc0:	687b      	ldr	r3, [r7, #4]
   2ddc2:	60e2      	str	r2, [r4, #12]
   2ddc4:	f8c4 c008 	str.w	ip, [r4, #8]
   2ddc8:	6094      	str	r4, [r2, #8]
   2ddca:	f8cc 400c 	str.w	r4, [ip, #12]
   2ddce:	e68f      	b.n	2daf0 <_malloc_r+0xc8>
   2ddd0:	19a1      	adds	r1, r4, r6
   2ddd2:	f046 0c01 	orr.w	ip, r6, #1
   2ddd6:	f042 0601 	orr.w	r6, r2, #1
   2ddda:	f8c4 c004 	str.w	ip, [r4, #4]
   2ddde:	4628      	mov	r0, r5
   2dde0:	6179      	str	r1, [r7, #20]
   2dde2:	6139      	str	r1, [r7, #16]
   2dde4:	f8c1 e00c 	str.w	lr, [r1, #12]
   2dde8:	f8c1 e008 	str.w	lr, [r1, #8]
   2ddec:	604e      	str	r6, [r1, #4]
   2ddee:	50e2      	str	r2, [r4, r3]
   2ddf0:	f000 f8d0 	bl	2df94 <__malloc_unlock>
   2ddf4:	3408      	adds	r4, #8
   2ddf6:	e6dd      	b.n	2dbb4 <_malloc_r+0x18c>
   2ddf8:	687b      	ldr	r3, [r7, #4]
   2ddfa:	e679      	b.n	2daf0 <_malloc_r+0xc8>
   2ddfc:	f108 0801 	add.w	r8, r8, #1
   2de00:	f018 0f03 	tst.w	r8, #3
   2de04:	f10c 0c08 	add.w	ip, ip, #8
   2de08:	f47f ae85 	bne.w	2db16 <_malloc_r+0xee>
   2de0c:	e02d      	b.n	2de6a <_malloc_r+0x442>
   2de0e:	68dc      	ldr	r4, [r3, #12]
   2de10:	42a3      	cmp	r3, r4
   2de12:	bf08      	it	eq
   2de14:	3002      	addeq	r0, #2
   2de16:	f43f ae3e 	beq.w	2da96 <_malloc_r+0x6e>
   2de1a:	e6bb      	b.n	2db94 <_malloc_r+0x16c>
   2de1c:	4419      	add	r1, r3
   2de1e:	461c      	mov	r4, r3
   2de20:	684a      	ldr	r2, [r1, #4]
   2de22:	68db      	ldr	r3, [r3, #12]
   2de24:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2de28:	f042 0201 	orr.w	r2, r2, #1
   2de2c:	604a      	str	r2, [r1, #4]
   2de2e:	4628      	mov	r0, r5
   2de30:	60f3      	str	r3, [r6, #12]
   2de32:	609e      	str	r6, [r3, #8]
   2de34:	f000 f8ae 	bl	2df94 <__malloc_unlock>
   2de38:	e6bc      	b.n	2dbb4 <_malloc_r+0x18c>
   2de3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2de3e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2de42:	00c3      	lsls	r3, r0, #3
   2de44:	e612      	b.n	2da6c <_malloc_r+0x44>
   2de46:	099a      	lsrs	r2, r3, #6
   2de48:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2de4c:	00c9      	lsls	r1, r1, #3
   2de4e:	3238      	adds	r2, #56	; 0x38
   2de50:	e7a4      	b.n	2dd9c <_malloc_r+0x374>
   2de52:	42bc      	cmp	r4, r7
   2de54:	d054      	beq.n	2df00 <_malloc_r+0x4d8>
   2de56:	68bc      	ldr	r4, [r7, #8]
   2de58:	6862      	ldr	r2, [r4, #4]
   2de5a:	f022 0203 	bic.w	r2, r2, #3
   2de5e:	e75d      	b.n	2dd1c <_malloc_r+0x2f4>
   2de60:	f859 3908 	ldr.w	r3, [r9], #-8
   2de64:	4599      	cmp	r9, r3
   2de66:	f040 8086 	bne.w	2df76 <_malloc_r+0x54e>
   2de6a:	f010 0f03 	tst.w	r0, #3
   2de6e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2de72:	d1f5      	bne.n	2de60 <_malloc_r+0x438>
   2de74:	687b      	ldr	r3, [r7, #4]
   2de76:	ea23 0304 	bic.w	r3, r3, r4
   2de7a:	607b      	str	r3, [r7, #4]
   2de7c:	0064      	lsls	r4, r4, #1
   2de7e:	429c      	cmp	r4, r3
   2de80:	f63f aec7 	bhi.w	2dc12 <_malloc_r+0x1ea>
   2de84:	2c00      	cmp	r4, #0
   2de86:	f43f aec4 	beq.w	2dc12 <_malloc_r+0x1ea>
   2de8a:	421c      	tst	r4, r3
   2de8c:	4640      	mov	r0, r8
   2de8e:	f47f ae3e 	bne.w	2db0e <_malloc_r+0xe6>
   2de92:	0064      	lsls	r4, r4, #1
   2de94:	421c      	tst	r4, r3
   2de96:	f100 0004 	add.w	r0, r0, #4
   2de9a:	d0fa      	beq.n	2de92 <_malloc_r+0x46a>
   2de9c:	e637      	b.n	2db0e <_malloc_r+0xe6>
   2de9e:	468c      	mov	ip, r1
   2dea0:	e78c      	b.n	2ddbc <_malloc_r+0x394>
   2dea2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2dea6:	d815      	bhi.n	2ded4 <_malloc_r+0x4ac>
   2dea8:	0bf3      	lsrs	r3, r6, #15
   2deaa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2deae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2deb2:	00c3      	lsls	r3, r0, #3
   2deb4:	e5da      	b.n	2da6c <_malloc_r+0x44>
   2deb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2deba:	e6ed      	b.n	2dc98 <_malloc_r+0x270>
   2debc:	687b      	ldr	r3, [r7, #4]
   2debe:	1092      	asrs	r2, r2, #2
   2dec0:	2101      	movs	r1, #1
   2dec2:	fa01 f202 	lsl.w	r2, r1, r2
   2dec6:	4313      	orrs	r3, r2
   2dec8:	607b      	str	r3, [r7, #4]
   2deca:	4662      	mov	r2, ip
   2decc:	e779      	b.n	2ddc2 <_malloc_r+0x39a>
   2dece:	2301      	movs	r3, #1
   2ded0:	6053      	str	r3, [r2, #4]
   2ded2:	e729      	b.n	2dd28 <_malloc_r+0x300>
   2ded4:	f240 5254 	movw	r2, #1364	; 0x554
   2ded8:	4293      	cmp	r3, r2
   2deda:	d822      	bhi.n	2df22 <_malloc_r+0x4fa>
   2dedc:	0cb3      	lsrs	r3, r6, #18
   2dede:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2dee2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2dee6:	00c3      	lsls	r3, r0, #3
   2dee8:	e5c0      	b.n	2da6c <_malloc_r+0x44>
   2deea:	f103 0b10 	add.w	fp, r3, #16
   2deee:	e6ae      	b.n	2dc4e <_malloc_r+0x226>
   2def0:	2a54      	cmp	r2, #84	; 0x54
   2def2:	d829      	bhi.n	2df48 <_malloc_r+0x520>
   2def4:	0b1a      	lsrs	r2, r3, #12
   2def6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2defa:	00c9      	lsls	r1, r1, #3
   2defc:	326e      	adds	r2, #110	; 0x6e
   2defe:	e74d      	b.n	2dd9c <_malloc_r+0x374>
   2df00:	4b20      	ldr	r3, [pc, #128]	; (2df84 <_malloc_r+0x55c>)
   2df02:	6819      	ldr	r1, [r3, #0]
   2df04:	4459      	add	r1, fp
   2df06:	6019      	str	r1, [r3, #0]
   2df08:	e6b2      	b.n	2dc70 <_malloc_r+0x248>
   2df0a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2df0e:	2800      	cmp	r0, #0
   2df10:	f47f aeae 	bne.w	2dc70 <_malloc_r+0x248>
   2df14:	eb08 030b 	add.w	r3, r8, fp
   2df18:	68ba      	ldr	r2, [r7, #8]
   2df1a:	f043 0301 	orr.w	r3, r3, #1
   2df1e:	6053      	str	r3, [r2, #4]
   2df20:	e6ee      	b.n	2dd00 <_malloc_r+0x2d8>
   2df22:	207f      	movs	r0, #127	; 0x7f
   2df24:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2df28:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2df2c:	e59e      	b.n	2da6c <_malloc_r+0x44>
   2df2e:	f104 0108 	add.w	r1, r4, #8
   2df32:	4628      	mov	r0, r5
   2df34:	9300      	str	r3, [sp, #0]
   2df36:	f000 fc3d 	bl	2e7b4 <_free_r>
   2df3a:	9b00      	ldr	r3, [sp, #0]
   2df3c:	6819      	ldr	r1, [r3, #0]
   2df3e:	e6df      	b.n	2dd00 <_malloc_r+0x2d8>
   2df40:	2001      	movs	r0, #1
   2df42:	f04f 0900 	mov.w	r9, #0
   2df46:	e6bc      	b.n	2dcc2 <_malloc_r+0x29a>
   2df48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2df4c:	d805      	bhi.n	2df5a <_malloc_r+0x532>
   2df4e:	0bda      	lsrs	r2, r3, #15
   2df50:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2df54:	00c9      	lsls	r1, r1, #3
   2df56:	3277      	adds	r2, #119	; 0x77
   2df58:	e720      	b.n	2dd9c <_malloc_r+0x374>
   2df5a:	f240 5154 	movw	r1, #1364	; 0x554
   2df5e:	428a      	cmp	r2, r1
   2df60:	d805      	bhi.n	2df6e <_malloc_r+0x546>
   2df62:	0c9a      	lsrs	r2, r3, #18
   2df64:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2df68:	00c9      	lsls	r1, r1, #3
   2df6a:	327c      	adds	r2, #124	; 0x7c
   2df6c:	e716      	b.n	2dd9c <_malloc_r+0x374>
   2df6e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2df72:	227e      	movs	r2, #126	; 0x7e
   2df74:	e712      	b.n	2dd9c <_malloc_r+0x374>
   2df76:	687b      	ldr	r3, [r7, #4]
   2df78:	e780      	b.n	2de7c <_malloc_r+0x454>
   2df7a:	08f0      	lsrs	r0, r6, #3
   2df7c:	f106 0308 	add.w	r3, r6, #8
   2df80:	e600      	b.n	2db84 <_malloc_r+0x15c>
   2df82:	bf00      	nop
   2df84:	20002e00 	.word	0x20002e00

0002df88 <__malloc_lock>:
   2df88:	4801      	ldr	r0, [pc, #4]	; (2df90 <__malloc_lock+0x8>)
   2df8a:	f000 bcf9 	b.w	2e980 <__retarget_lock_acquire_recursive>
   2df8e:	bf00      	nop
   2df90:	20003178 	.word	0x20003178

0002df94 <__malloc_unlock>:
   2df94:	4801      	ldr	r0, [pc, #4]	; (2df9c <__malloc_unlock+0x8>)
   2df96:	f000 bcf5 	b.w	2e984 <__retarget_lock_release_recursive>
   2df9a:	bf00      	nop
   2df9c:	20003178 	.word	0x20003178

0002dfa0 <_Balloc>:
   2dfa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dfa2:	b570      	push	{r4, r5, r6, lr}
   2dfa4:	4605      	mov	r5, r0
   2dfa6:	460c      	mov	r4, r1
   2dfa8:	b14b      	cbz	r3, 2dfbe <_Balloc+0x1e>
   2dfaa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2dfae:	b180      	cbz	r0, 2dfd2 <_Balloc+0x32>
   2dfb0:	6802      	ldr	r2, [r0, #0]
   2dfb2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2dfb6:	2300      	movs	r3, #0
   2dfb8:	6103      	str	r3, [r0, #16]
   2dfba:	60c3      	str	r3, [r0, #12]
   2dfbc:	bd70      	pop	{r4, r5, r6, pc}
   2dfbe:	2221      	movs	r2, #33	; 0x21
   2dfc0:	2104      	movs	r1, #4
   2dfc2:	f000 fb77 	bl	2e6b4 <_calloc_r>
   2dfc6:	64e8      	str	r0, [r5, #76]	; 0x4c
   2dfc8:	4603      	mov	r3, r0
   2dfca:	2800      	cmp	r0, #0
   2dfcc:	d1ed      	bne.n	2dfaa <_Balloc+0xa>
   2dfce:	2000      	movs	r0, #0
   2dfd0:	bd70      	pop	{r4, r5, r6, pc}
   2dfd2:	2101      	movs	r1, #1
   2dfd4:	fa01 f604 	lsl.w	r6, r1, r4
   2dfd8:	1d72      	adds	r2, r6, #5
   2dfda:	4628      	mov	r0, r5
   2dfdc:	0092      	lsls	r2, r2, #2
   2dfde:	f000 fb69 	bl	2e6b4 <_calloc_r>
   2dfe2:	2800      	cmp	r0, #0
   2dfe4:	d0f3      	beq.n	2dfce <_Balloc+0x2e>
   2dfe6:	6044      	str	r4, [r0, #4]
   2dfe8:	6086      	str	r6, [r0, #8]
   2dfea:	e7e4      	b.n	2dfb6 <_Balloc+0x16>

0002dfec <_Bfree>:
   2dfec:	b131      	cbz	r1, 2dffc <_Bfree+0x10>
   2dfee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dff0:	684a      	ldr	r2, [r1, #4]
   2dff2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2dff6:	6008      	str	r0, [r1, #0]
   2dff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2dffc:	4770      	bx	lr
   2dffe:	bf00      	nop

0002e000 <__multadd>:
   2e000:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e002:	690c      	ldr	r4, [r1, #16]
   2e004:	b083      	sub	sp, #12
   2e006:	460d      	mov	r5, r1
   2e008:	4606      	mov	r6, r0
   2e00a:	f101 0e14 	add.w	lr, r1, #20
   2e00e:	2700      	movs	r7, #0
   2e010:	f8de 0000 	ldr.w	r0, [lr]
   2e014:	b281      	uxth	r1, r0
   2e016:	fb02 3301 	mla	r3, r2, r1, r3
   2e01a:	0c01      	lsrs	r1, r0, #16
   2e01c:	0c18      	lsrs	r0, r3, #16
   2e01e:	fb02 0101 	mla	r1, r2, r1, r0
   2e022:	b29b      	uxth	r3, r3
   2e024:	3701      	adds	r7, #1
   2e026:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2e02a:	42bc      	cmp	r4, r7
   2e02c:	f84e 3b04 	str.w	r3, [lr], #4
   2e030:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2e034:	dcec      	bgt.n	2e010 <__multadd+0x10>
   2e036:	b13b      	cbz	r3, 2e048 <__multadd+0x48>
   2e038:	68aa      	ldr	r2, [r5, #8]
   2e03a:	4294      	cmp	r4, r2
   2e03c:	da07      	bge.n	2e04e <__multadd+0x4e>
   2e03e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2e042:	3401      	adds	r4, #1
   2e044:	6153      	str	r3, [r2, #20]
   2e046:	612c      	str	r4, [r5, #16]
   2e048:	4628      	mov	r0, r5
   2e04a:	b003      	add	sp, #12
   2e04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e04e:	6869      	ldr	r1, [r5, #4]
   2e050:	9301      	str	r3, [sp, #4]
   2e052:	3101      	adds	r1, #1
   2e054:	4630      	mov	r0, r6
   2e056:	f7ff ffa3 	bl	2dfa0 <_Balloc>
   2e05a:	692a      	ldr	r2, [r5, #16]
   2e05c:	3202      	adds	r2, #2
   2e05e:	f105 010c 	add.w	r1, r5, #12
   2e062:	4607      	mov	r7, r0
   2e064:	0092      	lsls	r2, r2, #2
   2e066:	300c      	adds	r0, #12
   2e068:	f7d2 f92a 	bl	2c0 <memcpy>
   2e06c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2e06e:	6869      	ldr	r1, [r5, #4]
   2e070:	9b01      	ldr	r3, [sp, #4]
   2e072:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2e076:	6028      	str	r0, [r5, #0]
   2e078:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2e07c:	463d      	mov	r5, r7
   2e07e:	e7de      	b.n	2e03e <__multadd+0x3e>

0002e080 <__hi0bits>:
   2e080:	0c02      	lsrs	r2, r0, #16
   2e082:	0412      	lsls	r2, r2, #16
   2e084:	4603      	mov	r3, r0
   2e086:	b9b2      	cbnz	r2, 2e0b6 <__hi0bits+0x36>
   2e088:	0403      	lsls	r3, r0, #16
   2e08a:	2010      	movs	r0, #16
   2e08c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2e090:	bf04      	itt	eq
   2e092:	021b      	lsleq	r3, r3, #8
   2e094:	3008      	addeq	r0, #8
   2e096:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2e09a:	bf04      	itt	eq
   2e09c:	011b      	lsleq	r3, r3, #4
   2e09e:	3004      	addeq	r0, #4
   2e0a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2e0a4:	bf04      	itt	eq
   2e0a6:	009b      	lsleq	r3, r3, #2
   2e0a8:	3002      	addeq	r0, #2
   2e0aa:	2b00      	cmp	r3, #0
   2e0ac:	db02      	blt.n	2e0b4 <__hi0bits+0x34>
   2e0ae:	005b      	lsls	r3, r3, #1
   2e0b0:	d403      	bmi.n	2e0ba <__hi0bits+0x3a>
   2e0b2:	2020      	movs	r0, #32
   2e0b4:	4770      	bx	lr
   2e0b6:	2000      	movs	r0, #0
   2e0b8:	e7e8      	b.n	2e08c <__hi0bits+0xc>
   2e0ba:	3001      	adds	r0, #1
   2e0bc:	4770      	bx	lr
   2e0be:	bf00      	nop

0002e0c0 <__lo0bits>:
   2e0c0:	6803      	ldr	r3, [r0, #0]
   2e0c2:	f013 0207 	ands.w	r2, r3, #7
   2e0c6:	4601      	mov	r1, r0
   2e0c8:	d007      	beq.n	2e0da <__lo0bits+0x1a>
   2e0ca:	07da      	lsls	r2, r3, #31
   2e0cc:	d421      	bmi.n	2e112 <__lo0bits+0x52>
   2e0ce:	0798      	lsls	r0, r3, #30
   2e0d0:	d421      	bmi.n	2e116 <__lo0bits+0x56>
   2e0d2:	089b      	lsrs	r3, r3, #2
   2e0d4:	600b      	str	r3, [r1, #0]
   2e0d6:	2002      	movs	r0, #2
   2e0d8:	4770      	bx	lr
   2e0da:	b298      	uxth	r0, r3
   2e0dc:	b198      	cbz	r0, 2e106 <__lo0bits+0x46>
   2e0de:	4610      	mov	r0, r2
   2e0e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   2e0e4:	bf04      	itt	eq
   2e0e6:	0a1b      	lsreq	r3, r3, #8
   2e0e8:	3008      	addeq	r0, #8
   2e0ea:	071a      	lsls	r2, r3, #28
   2e0ec:	bf04      	itt	eq
   2e0ee:	091b      	lsreq	r3, r3, #4
   2e0f0:	3004      	addeq	r0, #4
   2e0f2:	079a      	lsls	r2, r3, #30
   2e0f4:	bf04      	itt	eq
   2e0f6:	089b      	lsreq	r3, r3, #2
   2e0f8:	3002      	addeq	r0, #2
   2e0fa:	07da      	lsls	r2, r3, #31
   2e0fc:	d407      	bmi.n	2e10e <__lo0bits+0x4e>
   2e0fe:	085b      	lsrs	r3, r3, #1
   2e100:	d104      	bne.n	2e10c <__lo0bits+0x4c>
   2e102:	2020      	movs	r0, #32
   2e104:	4770      	bx	lr
   2e106:	0c1b      	lsrs	r3, r3, #16
   2e108:	2010      	movs	r0, #16
   2e10a:	e7e9      	b.n	2e0e0 <__lo0bits+0x20>
   2e10c:	3001      	adds	r0, #1
   2e10e:	600b      	str	r3, [r1, #0]
   2e110:	4770      	bx	lr
   2e112:	2000      	movs	r0, #0
   2e114:	4770      	bx	lr
   2e116:	085b      	lsrs	r3, r3, #1
   2e118:	600b      	str	r3, [r1, #0]
   2e11a:	2001      	movs	r0, #1
   2e11c:	4770      	bx	lr
   2e11e:	bf00      	nop

0002e120 <__i2b>:
   2e120:	b510      	push	{r4, lr}
   2e122:	460c      	mov	r4, r1
   2e124:	2101      	movs	r1, #1
   2e126:	f7ff ff3b 	bl	2dfa0 <_Balloc>
   2e12a:	2201      	movs	r2, #1
   2e12c:	6144      	str	r4, [r0, #20]
   2e12e:	6102      	str	r2, [r0, #16]
   2e130:	bd10      	pop	{r4, pc}
   2e132:	bf00      	nop

0002e134 <__multiply>:
   2e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e138:	690c      	ldr	r4, [r1, #16]
   2e13a:	6915      	ldr	r5, [r2, #16]
   2e13c:	42ac      	cmp	r4, r5
   2e13e:	b083      	sub	sp, #12
   2e140:	468b      	mov	fp, r1
   2e142:	4616      	mov	r6, r2
   2e144:	da04      	bge.n	2e150 <__multiply+0x1c>
   2e146:	4622      	mov	r2, r4
   2e148:	46b3      	mov	fp, r6
   2e14a:	462c      	mov	r4, r5
   2e14c:	460e      	mov	r6, r1
   2e14e:	4615      	mov	r5, r2
   2e150:	f8db 3008 	ldr.w	r3, [fp, #8]
   2e154:	f8db 1004 	ldr.w	r1, [fp, #4]
   2e158:	eb04 0805 	add.w	r8, r4, r5
   2e15c:	4598      	cmp	r8, r3
   2e15e:	bfc8      	it	gt
   2e160:	3101      	addgt	r1, #1
   2e162:	f7ff ff1d 	bl	2dfa0 <_Balloc>
   2e166:	f100 0914 	add.w	r9, r0, #20
   2e16a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2e16e:	45d1      	cmp	r9, sl
   2e170:	9000      	str	r0, [sp, #0]
   2e172:	d205      	bcs.n	2e180 <__multiply+0x4c>
   2e174:	464b      	mov	r3, r9
   2e176:	2100      	movs	r1, #0
   2e178:	f843 1b04 	str.w	r1, [r3], #4
   2e17c:	459a      	cmp	sl, r3
   2e17e:	d8fb      	bhi.n	2e178 <__multiply+0x44>
   2e180:	f106 0c14 	add.w	ip, r6, #20
   2e184:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2e188:	f10b 0b14 	add.w	fp, fp, #20
   2e18c:	459c      	cmp	ip, r3
   2e18e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2e192:	d24c      	bcs.n	2e22e <__multiply+0xfa>
   2e194:	f8cd a004 	str.w	sl, [sp, #4]
   2e198:	469a      	mov	sl, r3
   2e19a:	f8dc 5000 	ldr.w	r5, [ip]
   2e19e:	b2af      	uxth	r7, r5
   2e1a0:	b1ef      	cbz	r7, 2e1de <__multiply+0xaa>
   2e1a2:	2100      	movs	r1, #0
   2e1a4:	464d      	mov	r5, r9
   2e1a6:	465e      	mov	r6, fp
   2e1a8:	460c      	mov	r4, r1
   2e1aa:	f856 2b04 	ldr.w	r2, [r6], #4
   2e1ae:	6828      	ldr	r0, [r5, #0]
   2e1b0:	b293      	uxth	r3, r2
   2e1b2:	b281      	uxth	r1, r0
   2e1b4:	fb07 1303 	mla	r3, r7, r3, r1
   2e1b8:	0c12      	lsrs	r2, r2, #16
   2e1ba:	0c01      	lsrs	r1, r0, #16
   2e1bc:	4423      	add	r3, r4
   2e1be:	fb07 1102 	mla	r1, r7, r2, r1
   2e1c2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2e1c6:	b29b      	uxth	r3, r3
   2e1c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2e1cc:	45b6      	cmp	lr, r6
   2e1ce:	f845 3b04 	str.w	r3, [r5], #4
   2e1d2:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2e1d6:	d8e8      	bhi.n	2e1aa <__multiply+0x76>
   2e1d8:	602c      	str	r4, [r5, #0]
   2e1da:	f8dc 5000 	ldr.w	r5, [ip]
   2e1de:	0c2d      	lsrs	r5, r5, #16
   2e1e0:	d01d      	beq.n	2e21e <__multiply+0xea>
   2e1e2:	f8d9 3000 	ldr.w	r3, [r9]
   2e1e6:	4648      	mov	r0, r9
   2e1e8:	461c      	mov	r4, r3
   2e1ea:	4659      	mov	r1, fp
   2e1ec:	2200      	movs	r2, #0
   2e1ee:	880e      	ldrh	r6, [r1, #0]
   2e1f0:	0c24      	lsrs	r4, r4, #16
   2e1f2:	fb05 4406 	mla	r4, r5, r6, r4
   2e1f6:	4422      	add	r2, r4
   2e1f8:	b29b      	uxth	r3, r3
   2e1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e1fe:	f840 3b04 	str.w	r3, [r0], #4
   2e202:	f851 3b04 	ldr.w	r3, [r1], #4
   2e206:	6804      	ldr	r4, [r0, #0]
   2e208:	0c1b      	lsrs	r3, r3, #16
   2e20a:	b2a6      	uxth	r6, r4
   2e20c:	fb05 6303 	mla	r3, r5, r3, r6
   2e210:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2e214:	458e      	cmp	lr, r1
   2e216:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2e21a:	d8e8      	bhi.n	2e1ee <__multiply+0xba>
   2e21c:	6003      	str	r3, [r0, #0]
   2e21e:	f10c 0c04 	add.w	ip, ip, #4
   2e222:	45e2      	cmp	sl, ip
   2e224:	f109 0904 	add.w	r9, r9, #4
   2e228:	d8b7      	bhi.n	2e19a <__multiply+0x66>
   2e22a:	f8dd a004 	ldr.w	sl, [sp, #4]
   2e22e:	f1b8 0f00 	cmp.w	r8, #0
   2e232:	dd0b      	ble.n	2e24c <__multiply+0x118>
   2e234:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2e238:	f1aa 0a04 	sub.w	sl, sl, #4
   2e23c:	b11b      	cbz	r3, 2e246 <__multiply+0x112>
   2e23e:	e005      	b.n	2e24c <__multiply+0x118>
   2e240:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2e244:	b913      	cbnz	r3, 2e24c <__multiply+0x118>
   2e246:	f1b8 0801 	subs.w	r8, r8, #1
   2e24a:	d1f9      	bne.n	2e240 <__multiply+0x10c>
   2e24c:	9800      	ldr	r0, [sp, #0]
   2e24e:	f8c0 8010 	str.w	r8, [r0, #16]
   2e252:	b003      	add	sp, #12
   2e254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e258 <__pow5mult>:
   2e258:	f012 0303 	ands.w	r3, r2, #3
   2e25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e260:	4614      	mov	r4, r2
   2e262:	4607      	mov	r7, r0
   2e264:	d12e      	bne.n	2e2c4 <__pow5mult+0x6c>
   2e266:	460d      	mov	r5, r1
   2e268:	10a4      	asrs	r4, r4, #2
   2e26a:	d01c      	beq.n	2e2a6 <__pow5mult+0x4e>
   2e26c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2e26e:	b396      	cbz	r6, 2e2d6 <__pow5mult+0x7e>
   2e270:	07e3      	lsls	r3, r4, #31
   2e272:	f04f 0800 	mov.w	r8, #0
   2e276:	d406      	bmi.n	2e286 <__pow5mult+0x2e>
   2e278:	1064      	asrs	r4, r4, #1
   2e27a:	d014      	beq.n	2e2a6 <__pow5mult+0x4e>
   2e27c:	6830      	ldr	r0, [r6, #0]
   2e27e:	b1a8      	cbz	r0, 2e2ac <__pow5mult+0x54>
   2e280:	4606      	mov	r6, r0
   2e282:	07e3      	lsls	r3, r4, #31
   2e284:	d5f8      	bpl.n	2e278 <__pow5mult+0x20>
   2e286:	4632      	mov	r2, r6
   2e288:	4629      	mov	r1, r5
   2e28a:	4638      	mov	r0, r7
   2e28c:	f7ff ff52 	bl	2e134 <__multiply>
   2e290:	b1b5      	cbz	r5, 2e2c0 <__pow5mult+0x68>
   2e292:	686a      	ldr	r2, [r5, #4]
   2e294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e296:	1064      	asrs	r4, r4, #1
   2e298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e29c:	6029      	str	r1, [r5, #0]
   2e29e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2e2a2:	4605      	mov	r5, r0
   2e2a4:	d1ea      	bne.n	2e27c <__pow5mult+0x24>
   2e2a6:	4628      	mov	r0, r5
   2e2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e2ac:	4632      	mov	r2, r6
   2e2ae:	4631      	mov	r1, r6
   2e2b0:	4638      	mov	r0, r7
   2e2b2:	f7ff ff3f 	bl	2e134 <__multiply>
   2e2b6:	6030      	str	r0, [r6, #0]
   2e2b8:	f8c0 8000 	str.w	r8, [r0]
   2e2bc:	4606      	mov	r6, r0
   2e2be:	e7e0      	b.n	2e282 <__pow5mult+0x2a>
   2e2c0:	4605      	mov	r5, r0
   2e2c2:	e7d9      	b.n	2e278 <__pow5mult+0x20>
   2e2c4:	1e5a      	subs	r2, r3, #1
   2e2c6:	4d0b      	ldr	r5, [pc, #44]	; (2e2f4 <__pow5mult+0x9c>)
   2e2c8:	2300      	movs	r3, #0
   2e2ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2e2ce:	f7ff fe97 	bl	2e000 <__multadd>
   2e2d2:	4605      	mov	r5, r0
   2e2d4:	e7c8      	b.n	2e268 <__pow5mult+0x10>
   2e2d6:	2101      	movs	r1, #1
   2e2d8:	4638      	mov	r0, r7
   2e2da:	f7ff fe61 	bl	2dfa0 <_Balloc>
   2e2de:	f240 2171 	movw	r1, #625	; 0x271
   2e2e2:	2201      	movs	r2, #1
   2e2e4:	2300      	movs	r3, #0
   2e2e6:	6141      	str	r1, [r0, #20]
   2e2e8:	6102      	str	r2, [r0, #16]
   2e2ea:	4606      	mov	r6, r0
   2e2ec:	64b8      	str	r0, [r7, #72]	; 0x48
   2e2ee:	6003      	str	r3, [r0, #0]
   2e2f0:	e7be      	b.n	2e270 <__pow5mult+0x18>
   2e2f2:	bf00      	nop
   2e2f4:	000336a0 	.word	0x000336a0

0002e2f8 <__lshift>:
   2e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e2fc:	4691      	mov	r9, r2
   2e2fe:	690a      	ldr	r2, [r1, #16]
   2e300:	688b      	ldr	r3, [r1, #8]
   2e302:	ea4f 1469 	mov.w	r4, r9, asr #5
   2e306:	eb04 0802 	add.w	r8, r4, r2
   2e30a:	f108 0501 	add.w	r5, r8, #1
   2e30e:	429d      	cmp	r5, r3
   2e310:	460e      	mov	r6, r1
   2e312:	4607      	mov	r7, r0
   2e314:	6849      	ldr	r1, [r1, #4]
   2e316:	dd04      	ble.n	2e322 <__lshift+0x2a>
   2e318:	005b      	lsls	r3, r3, #1
   2e31a:	429d      	cmp	r5, r3
   2e31c:	f101 0101 	add.w	r1, r1, #1
   2e320:	dcfa      	bgt.n	2e318 <__lshift+0x20>
   2e322:	4638      	mov	r0, r7
   2e324:	f7ff fe3c 	bl	2dfa0 <_Balloc>
   2e328:	2c00      	cmp	r4, #0
   2e32a:	f100 0314 	add.w	r3, r0, #20
   2e32e:	dd06      	ble.n	2e33e <__lshift+0x46>
   2e330:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2e334:	2100      	movs	r1, #0
   2e336:	f843 1b04 	str.w	r1, [r3], #4
   2e33a:	429a      	cmp	r2, r3
   2e33c:	d1fb      	bne.n	2e336 <__lshift+0x3e>
   2e33e:	6934      	ldr	r4, [r6, #16]
   2e340:	f106 0114 	add.w	r1, r6, #20
   2e344:	f019 091f 	ands.w	r9, r9, #31
   2e348:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2e34c:	d01d      	beq.n	2e38a <__lshift+0x92>
   2e34e:	f1c9 0c20 	rsb	ip, r9, #32
   2e352:	2200      	movs	r2, #0
   2e354:	680c      	ldr	r4, [r1, #0]
   2e356:	fa04 f409 	lsl.w	r4, r4, r9
   2e35a:	4314      	orrs	r4, r2
   2e35c:	f843 4b04 	str.w	r4, [r3], #4
   2e360:	f851 2b04 	ldr.w	r2, [r1], #4
   2e364:	458e      	cmp	lr, r1
   2e366:	fa22 f20c 	lsr.w	r2, r2, ip
   2e36a:	d8f3      	bhi.n	2e354 <__lshift+0x5c>
   2e36c:	601a      	str	r2, [r3, #0]
   2e36e:	b10a      	cbz	r2, 2e374 <__lshift+0x7c>
   2e370:	f108 0502 	add.w	r5, r8, #2
   2e374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e376:	6872      	ldr	r2, [r6, #4]
   2e378:	3d01      	subs	r5, #1
   2e37a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e37e:	6105      	str	r5, [r0, #16]
   2e380:	6031      	str	r1, [r6, #0]
   2e382:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e38a:	3b04      	subs	r3, #4
   2e38c:	f851 2b04 	ldr.w	r2, [r1], #4
   2e390:	f843 2f04 	str.w	r2, [r3, #4]!
   2e394:	458e      	cmp	lr, r1
   2e396:	d8f9      	bhi.n	2e38c <__lshift+0x94>
   2e398:	e7ec      	b.n	2e374 <__lshift+0x7c>
   2e39a:	bf00      	nop

0002e39c <__mcmp>:
   2e39c:	b430      	push	{r4, r5}
   2e39e:	690b      	ldr	r3, [r1, #16]
   2e3a0:	4605      	mov	r5, r0
   2e3a2:	6900      	ldr	r0, [r0, #16]
   2e3a4:	1ac0      	subs	r0, r0, r3
   2e3a6:	d10f      	bne.n	2e3c8 <__mcmp+0x2c>
   2e3a8:	009b      	lsls	r3, r3, #2
   2e3aa:	3514      	adds	r5, #20
   2e3ac:	3114      	adds	r1, #20
   2e3ae:	4419      	add	r1, r3
   2e3b0:	442b      	add	r3, r5
   2e3b2:	e001      	b.n	2e3b8 <__mcmp+0x1c>
   2e3b4:	429d      	cmp	r5, r3
   2e3b6:	d207      	bcs.n	2e3c8 <__mcmp+0x2c>
   2e3b8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2e3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e3c0:	4294      	cmp	r4, r2
   2e3c2:	d0f7      	beq.n	2e3b4 <__mcmp+0x18>
   2e3c4:	d302      	bcc.n	2e3cc <__mcmp+0x30>
   2e3c6:	2001      	movs	r0, #1
   2e3c8:	bc30      	pop	{r4, r5}
   2e3ca:	4770      	bx	lr
   2e3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3d0:	e7fa      	b.n	2e3c8 <__mcmp+0x2c>
   2e3d2:	bf00      	nop

0002e3d4 <__mdiff>:
   2e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e3d8:	690f      	ldr	r7, [r1, #16]
   2e3da:	460e      	mov	r6, r1
   2e3dc:	6911      	ldr	r1, [r2, #16]
   2e3de:	1a7f      	subs	r7, r7, r1
   2e3e0:	2f00      	cmp	r7, #0
   2e3e2:	4690      	mov	r8, r2
   2e3e4:	d117      	bne.n	2e416 <__mdiff+0x42>
   2e3e6:	0089      	lsls	r1, r1, #2
   2e3e8:	f106 0514 	add.w	r5, r6, #20
   2e3ec:	f102 0e14 	add.w	lr, r2, #20
   2e3f0:	186b      	adds	r3, r5, r1
   2e3f2:	4471      	add	r1, lr
   2e3f4:	e001      	b.n	2e3fa <__mdiff+0x26>
   2e3f6:	429d      	cmp	r5, r3
   2e3f8:	d25c      	bcs.n	2e4b4 <__mdiff+0xe0>
   2e3fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2e3fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2e402:	42a2      	cmp	r2, r4
   2e404:	d0f7      	beq.n	2e3f6 <__mdiff+0x22>
   2e406:	d25e      	bcs.n	2e4c6 <__mdiff+0xf2>
   2e408:	4633      	mov	r3, r6
   2e40a:	462c      	mov	r4, r5
   2e40c:	4646      	mov	r6, r8
   2e40e:	4675      	mov	r5, lr
   2e410:	4698      	mov	r8, r3
   2e412:	2701      	movs	r7, #1
   2e414:	e005      	b.n	2e422 <__mdiff+0x4e>
   2e416:	db58      	blt.n	2e4ca <__mdiff+0xf6>
   2e418:	f106 0514 	add.w	r5, r6, #20
   2e41c:	f108 0414 	add.w	r4, r8, #20
   2e420:	2700      	movs	r7, #0
   2e422:	6871      	ldr	r1, [r6, #4]
   2e424:	f7ff fdbc 	bl	2dfa0 <_Balloc>
   2e428:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e42c:	6936      	ldr	r6, [r6, #16]
   2e42e:	60c7      	str	r7, [r0, #12]
   2e430:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e434:	46a6      	mov	lr, r4
   2e436:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e43a:	f100 0414 	add.w	r4, r0, #20
   2e43e:	2300      	movs	r3, #0
   2e440:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e444:	f855 8b04 	ldr.w	r8, [r5], #4
   2e448:	b28a      	uxth	r2, r1
   2e44a:	fa13 f388 	uxtah	r3, r3, r8
   2e44e:	0c09      	lsrs	r1, r1, #16
   2e450:	1a9a      	subs	r2, r3, r2
   2e452:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e456:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e45a:	b292      	uxth	r2, r2
   2e45c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e460:	45f4      	cmp	ip, lr
   2e462:	f844 2b04 	str.w	r2, [r4], #4
   2e466:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e46a:	d8e9      	bhi.n	2e440 <__mdiff+0x6c>
   2e46c:	42af      	cmp	r7, r5
   2e46e:	d917      	bls.n	2e4a0 <__mdiff+0xcc>
   2e470:	46a4      	mov	ip, r4
   2e472:	46ae      	mov	lr, r5
   2e474:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e478:	fa13 f382 	uxtah	r3, r3, r2
   2e47c:	1419      	asrs	r1, r3, #16
   2e47e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e482:	b29b      	uxth	r3, r3
   2e484:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e488:	4577      	cmp	r7, lr
   2e48a:	f84c 2b04 	str.w	r2, [ip], #4
   2e48e:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e492:	d8ef      	bhi.n	2e474 <__mdiff+0xa0>
   2e494:	43ed      	mvns	r5, r5
   2e496:	442f      	add	r7, r5
   2e498:	f027 0703 	bic.w	r7, r7, #3
   2e49c:	3704      	adds	r7, #4
   2e49e:	443c      	add	r4, r7
   2e4a0:	3c04      	subs	r4, #4
   2e4a2:	b922      	cbnz	r2, 2e4ae <__mdiff+0xda>
   2e4a4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e4a8:	3e01      	subs	r6, #1
   2e4aa:	2b00      	cmp	r3, #0
   2e4ac:	d0fa      	beq.n	2e4a4 <__mdiff+0xd0>
   2e4ae:	6106      	str	r6, [r0, #16]
   2e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e4b4:	2100      	movs	r1, #0
   2e4b6:	f7ff fd73 	bl	2dfa0 <_Balloc>
   2e4ba:	2201      	movs	r2, #1
   2e4bc:	2300      	movs	r3, #0
   2e4be:	6102      	str	r2, [r0, #16]
   2e4c0:	6143      	str	r3, [r0, #20]
   2e4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e4c6:	4674      	mov	r4, lr
   2e4c8:	e7ab      	b.n	2e422 <__mdiff+0x4e>
   2e4ca:	4633      	mov	r3, r6
   2e4cc:	f106 0414 	add.w	r4, r6, #20
   2e4d0:	f102 0514 	add.w	r5, r2, #20
   2e4d4:	4616      	mov	r6, r2
   2e4d6:	2701      	movs	r7, #1
   2e4d8:	4698      	mov	r8, r3
   2e4da:	e7a2      	b.n	2e422 <__mdiff+0x4e>

0002e4dc <__d2b>:
   2e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e4e0:	b082      	sub	sp, #8
   2e4e2:	2101      	movs	r1, #1
   2e4e4:	461c      	mov	r4, r3
   2e4e6:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e4ea:	4615      	mov	r5, r2
   2e4ec:	9e08      	ldr	r6, [sp, #32]
   2e4ee:	f7ff fd57 	bl	2dfa0 <_Balloc>
   2e4f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e4f6:	4680      	mov	r8, r0
   2e4f8:	b10f      	cbz	r7, 2e4fe <__d2b+0x22>
   2e4fa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e4fe:	9401      	str	r4, [sp, #4]
   2e500:	b31d      	cbz	r5, 2e54a <__d2b+0x6e>
   2e502:	a802      	add	r0, sp, #8
   2e504:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e508:	f7ff fdda 	bl	2e0c0 <__lo0bits>
   2e50c:	2800      	cmp	r0, #0
   2e50e:	d134      	bne.n	2e57a <__d2b+0x9e>
   2e510:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e514:	f8c8 2014 	str.w	r2, [r8, #20]
   2e518:	2b00      	cmp	r3, #0
   2e51a:	bf0c      	ite	eq
   2e51c:	2101      	moveq	r1, #1
   2e51e:	2102      	movne	r1, #2
   2e520:	f8c8 3018 	str.w	r3, [r8, #24]
   2e524:	f8c8 1010 	str.w	r1, [r8, #16]
   2e528:	b9df      	cbnz	r7, 2e562 <__d2b+0x86>
   2e52a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e52e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e532:	6030      	str	r0, [r6, #0]
   2e534:	6918      	ldr	r0, [r3, #16]
   2e536:	f7ff fda3 	bl	2e080 <__hi0bits>
   2e53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e53c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e540:	6018      	str	r0, [r3, #0]
   2e542:	4640      	mov	r0, r8
   2e544:	b002      	add	sp, #8
   2e546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e54a:	a801      	add	r0, sp, #4
   2e54c:	f7ff fdb8 	bl	2e0c0 <__lo0bits>
   2e550:	9b01      	ldr	r3, [sp, #4]
   2e552:	f8c8 3014 	str.w	r3, [r8, #20]
   2e556:	2101      	movs	r1, #1
   2e558:	3020      	adds	r0, #32
   2e55a:	f8c8 1010 	str.w	r1, [r8, #16]
   2e55e:	2f00      	cmp	r7, #0
   2e560:	d0e3      	beq.n	2e52a <__d2b+0x4e>
   2e562:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e564:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e568:	4407      	add	r7, r0
   2e56a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e56e:	6037      	str	r7, [r6, #0]
   2e570:	6018      	str	r0, [r3, #0]
   2e572:	4640      	mov	r0, r8
   2e574:	b002      	add	sp, #8
   2e576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e57a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e57e:	f1c0 0220 	rsb	r2, r0, #32
   2e582:	fa03 f202 	lsl.w	r2, r3, r2
   2e586:	430a      	orrs	r2, r1
   2e588:	40c3      	lsrs	r3, r0
   2e58a:	9301      	str	r3, [sp, #4]
   2e58c:	f8c8 2014 	str.w	r2, [r8, #20]
   2e590:	e7c2      	b.n	2e518 <__d2b+0x3c>
   2e592:	bf00      	nop

0002e594 <_sbrk_r>:
   2e594:	b538      	push	{r3, r4, r5, lr}
   2e596:	4c07      	ldr	r4, [pc, #28]	; (2e5b4 <_sbrk_r+0x20>)
   2e598:	2300      	movs	r3, #0
   2e59a:	4605      	mov	r5, r0
   2e59c:	4608      	mov	r0, r1
   2e59e:	6023      	str	r3, [r4, #0]
   2e5a0:	f7d3 faa2 	bl	1ae8 <_sbrk>
   2e5a4:	1c43      	adds	r3, r0, #1
   2e5a6:	d000      	beq.n	2e5aa <_sbrk_r+0x16>
   2e5a8:	bd38      	pop	{r3, r4, r5, pc}
   2e5aa:	6823      	ldr	r3, [r4, #0]
   2e5ac:	2b00      	cmp	r3, #0
   2e5ae:	d0fb      	beq.n	2e5a8 <_sbrk_r+0x14>
   2e5b0:	602b      	str	r3, [r5, #0]
   2e5b2:	bd38      	pop	{r3, r4, r5, pc}
   2e5b4:	2000318c 	.word	0x2000318c

0002e5b8 <__ssprint_r>:
   2e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5bc:	6893      	ldr	r3, [r2, #8]
   2e5be:	b083      	sub	sp, #12
   2e5c0:	4690      	mov	r8, r2
   2e5c2:	2b00      	cmp	r3, #0
   2e5c4:	d070      	beq.n	2e6a8 <__ssprint_r+0xf0>
   2e5c6:	4682      	mov	sl, r0
   2e5c8:	460c      	mov	r4, r1
   2e5ca:	6817      	ldr	r7, [r2, #0]
   2e5cc:	688d      	ldr	r5, [r1, #8]
   2e5ce:	6808      	ldr	r0, [r1, #0]
   2e5d0:	e042      	b.n	2e658 <__ssprint_r+0xa0>
   2e5d2:	89a3      	ldrh	r3, [r4, #12]
   2e5d4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e5d8:	d02e      	beq.n	2e638 <__ssprint_r+0x80>
   2e5da:	6965      	ldr	r5, [r4, #20]
   2e5dc:	6921      	ldr	r1, [r4, #16]
   2e5de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e5e2:	eba0 0b01 	sub.w	fp, r0, r1
   2e5e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e5ea:	f10b 0001 	add.w	r0, fp, #1
   2e5ee:	106d      	asrs	r5, r5, #1
   2e5f0:	4430      	add	r0, r6
   2e5f2:	42a8      	cmp	r0, r5
   2e5f4:	462a      	mov	r2, r5
   2e5f6:	bf84      	itt	hi
   2e5f8:	4605      	movhi	r5, r0
   2e5fa:	462a      	movhi	r2, r5
   2e5fc:	055b      	lsls	r3, r3, #21
   2e5fe:	d538      	bpl.n	2e672 <__ssprint_r+0xba>
   2e600:	4611      	mov	r1, r2
   2e602:	4650      	mov	r0, sl
   2e604:	f7ff fa10 	bl	2da28 <_malloc_r>
   2e608:	2800      	cmp	r0, #0
   2e60a:	d03c      	beq.n	2e686 <__ssprint_r+0xce>
   2e60c:	465a      	mov	r2, fp
   2e60e:	6921      	ldr	r1, [r4, #16]
   2e610:	9001      	str	r0, [sp, #4]
   2e612:	f7d1 fe55 	bl	2c0 <memcpy>
   2e616:	89a2      	ldrh	r2, [r4, #12]
   2e618:	9b01      	ldr	r3, [sp, #4]
   2e61a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e61e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e622:	81a2      	strh	r2, [r4, #12]
   2e624:	eba5 020b 	sub.w	r2, r5, fp
   2e628:	eb03 000b 	add.w	r0, r3, fp
   2e62c:	6165      	str	r5, [r4, #20]
   2e62e:	6123      	str	r3, [r4, #16]
   2e630:	6020      	str	r0, [r4, #0]
   2e632:	60a2      	str	r2, [r4, #8]
   2e634:	4635      	mov	r5, r6
   2e636:	46b3      	mov	fp, r6
   2e638:	465a      	mov	r2, fp
   2e63a:	4649      	mov	r1, r9
   2e63c:	f7fc f99c 	bl	2a978 <memmove>
   2e640:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e644:	68a2      	ldr	r2, [r4, #8]
   2e646:	6820      	ldr	r0, [r4, #0]
   2e648:	1b55      	subs	r5, r2, r5
   2e64a:	4458      	add	r0, fp
   2e64c:	1b9e      	subs	r6, r3, r6
   2e64e:	60a5      	str	r5, [r4, #8]
   2e650:	6020      	str	r0, [r4, #0]
   2e652:	f8c8 6008 	str.w	r6, [r8, #8]
   2e656:	b33e      	cbz	r6, 2e6a8 <__ssprint_r+0xf0>
   2e658:	687e      	ldr	r6, [r7, #4]
   2e65a:	463b      	mov	r3, r7
   2e65c:	3708      	adds	r7, #8
   2e65e:	2e00      	cmp	r6, #0
   2e660:	d0fa      	beq.n	2e658 <__ssprint_r+0xa0>
   2e662:	42ae      	cmp	r6, r5
   2e664:	f8d3 9000 	ldr.w	r9, [r3]
   2e668:	46ab      	mov	fp, r5
   2e66a:	d2b2      	bcs.n	2e5d2 <__ssprint_r+0x1a>
   2e66c:	4635      	mov	r5, r6
   2e66e:	46b3      	mov	fp, r6
   2e670:	e7e2      	b.n	2e638 <__ssprint_r+0x80>
   2e672:	4650      	mov	r0, sl
   2e674:	f000 f988 	bl	2e988 <_realloc_r>
   2e678:	4603      	mov	r3, r0
   2e67a:	2800      	cmp	r0, #0
   2e67c:	d1d2      	bne.n	2e624 <__ssprint_r+0x6c>
   2e67e:	6921      	ldr	r1, [r4, #16]
   2e680:	4650      	mov	r0, sl
   2e682:	f000 f897 	bl	2e7b4 <_free_r>
   2e686:	230c      	movs	r3, #12
   2e688:	f8ca 3000 	str.w	r3, [sl]
   2e68c:	89a3      	ldrh	r3, [r4, #12]
   2e68e:	2200      	movs	r2, #0
   2e690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e698:	81a3      	strh	r3, [r4, #12]
   2e69a:	f8c8 2008 	str.w	r2, [r8, #8]
   2e69e:	f8c8 2004 	str.w	r2, [r8, #4]
   2e6a2:	b003      	add	sp, #12
   2e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e6a8:	2000      	movs	r0, #0
   2e6aa:	f8c8 0004 	str.w	r0, [r8, #4]
   2e6ae:	b003      	add	sp, #12
   2e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e6b4 <_calloc_r>:
   2e6b4:	b510      	push	{r4, lr}
   2e6b6:	fb02 f101 	mul.w	r1, r2, r1
   2e6ba:	f7ff f9b5 	bl	2da28 <_malloc_r>
   2e6be:	4604      	mov	r4, r0
   2e6c0:	b1d8      	cbz	r0, 2e6fa <_calloc_r+0x46>
   2e6c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2e6c6:	f022 0203 	bic.w	r2, r2, #3
   2e6ca:	3a04      	subs	r2, #4
   2e6cc:	2a24      	cmp	r2, #36	; 0x24
   2e6ce:	d818      	bhi.n	2e702 <_calloc_r+0x4e>
   2e6d0:	2a13      	cmp	r2, #19
   2e6d2:	d914      	bls.n	2e6fe <_calloc_r+0x4a>
   2e6d4:	2300      	movs	r3, #0
   2e6d6:	2a1b      	cmp	r2, #27
   2e6d8:	6003      	str	r3, [r0, #0]
   2e6da:	6043      	str	r3, [r0, #4]
   2e6dc:	d916      	bls.n	2e70c <_calloc_r+0x58>
   2e6de:	2a24      	cmp	r2, #36	; 0x24
   2e6e0:	6083      	str	r3, [r0, #8]
   2e6e2:	60c3      	str	r3, [r0, #12]
   2e6e4:	bf11      	iteee	ne
   2e6e6:	f100 0210 	addne.w	r2, r0, #16
   2e6ea:	6103      	streq	r3, [r0, #16]
   2e6ec:	6143      	streq	r3, [r0, #20]
   2e6ee:	f100 0218 	addeq.w	r2, r0, #24
   2e6f2:	2300      	movs	r3, #0
   2e6f4:	6013      	str	r3, [r2, #0]
   2e6f6:	6053      	str	r3, [r2, #4]
   2e6f8:	6093      	str	r3, [r2, #8]
   2e6fa:	4620      	mov	r0, r4
   2e6fc:	bd10      	pop	{r4, pc}
   2e6fe:	4602      	mov	r2, r0
   2e700:	e7f7      	b.n	2e6f2 <_calloc_r+0x3e>
   2e702:	2100      	movs	r1, #0
   2e704:	f7fc f99c 	bl	2aa40 <memset>
   2e708:	4620      	mov	r0, r4
   2e70a:	bd10      	pop	{r4, pc}
   2e70c:	f100 0208 	add.w	r2, r0, #8
   2e710:	e7ef      	b.n	2e6f2 <_calloc_r+0x3e>
   2e712:	bf00      	nop

0002e714 <_malloc_trim_r>:
   2e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e716:	4f24      	ldr	r7, [pc, #144]	; (2e7a8 <_malloc_trim_r+0x94>)
   2e718:	460c      	mov	r4, r1
   2e71a:	4606      	mov	r6, r0
   2e71c:	f7ff fc34 	bl	2df88 <__malloc_lock>
   2e720:	68bb      	ldr	r3, [r7, #8]
   2e722:	685d      	ldr	r5, [r3, #4]
   2e724:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2e728:	310f      	adds	r1, #15
   2e72a:	f025 0503 	bic.w	r5, r5, #3
   2e72e:	4429      	add	r1, r5
   2e730:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2e734:	f021 010f 	bic.w	r1, r1, #15
   2e738:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2e73c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2e740:	db07      	blt.n	2e752 <_malloc_trim_r+0x3e>
   2e742:	2100      	movs	r1, #0
   2e744:	4630      	mov	r0, r6
   2e746:	f7ff ff25 	bl	2e594 <_sbrk_r>
   2e74a:	68bb      	ldr	r3, [r7, #8]
   2e74c:	442b      	add	r3, r5
   2e74e:	4298      	cmp	r0, r3
   2e750:	d004      	beq.n	2e75c <_malloc_trim_r+0x48>
   2e752:	4630      	mov	r0, r6
   2e754:	f7ff fc1e 	bl	2df94 <__malloc_unlock>
   2e758:	2000      	movs	r0, #0
   2e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e75c:	4261      	negs	r1, r4
   2e75e:	4630      	mov	r0, r6
   2e760:	f7ff ff18 	bl	2e594 <_sbrk_r>
   2e764:	3001      	adds	r0, #1
   2e766:	d00d      	beq.n	2e784 <_malloc_trim_r+0x70>
   2e768:	4b10      	ldr	r3, [pc, #64]	; (2e7ac <_malloc_trim_r+0x98>)
   2e76a:	68ba      	ldr	r2, [r7, #8]
   2e76c:	6819      	ldr	r1, [r3, #0]
   2e76e:	1b2d      	subs	r5, r5, r4
   2e770:	f045 0501 	orr.w	r5, r5, #1
   2e774:	4630      	mov	r0, r6
   2e776:	1b09      	subs	r1, r1, r4
   2e778:	6055      	str	r5, [r2, #4]
   2e77a:	6019      	str	r1, [r3, #0]
   2e77c:	f7ff fc0a 	bl	2df94 <__malloc_unlock>
   2e780:	2001      	movs	r0, #1
   2e782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e784:	2100      	movs	r1, #0
   2e786:	4630      	mov	r0, r6
   2e788:	f7ff ff04 	bl	2e594 <_sbrk_r>
   2e78c:	68ba      	ldr	r2, [r7, #8]
   2e78e:	1a83      	subs	r3, r0, r2
   2e790:	2b0f      	cmp	r3, #15
   2e792:	ddde      	ble.n	2e752 <_malloc_trim_r+0x3e>
   2e794:	4c06      	ldr	r4, [pc, #24]	; (2e7b0 <_malloc_trim_r+0x9c>)
   2e796:	4905      	ldr	r1, [pc, #20]	; (2e7ac <_malloc_trim_r+0x98>)
   2e798:	6824      	ldr	r4, [r4, #0]
   2e79a:	f043 0301 	orr.w	r3, r3, #1
   2e79e:	1b00      	subs	r0, r0, r4
   2e7a0:	6053      	str	r3, [r2, #4]
   2e7a2:	6008      	str	r0, [r1, #0]
   2e7a4:	e7d5      	b.n	2e752 <_malloc_trim_r+0x3e>
   2e7a6:	bf00      	nop
   2e7a8:	2000d0b0 	.word	0x2000d0b0
   2e7ac:	20002e00 	.word	0x20002e00
   2e7b0:	2000d4b8 	.word	0x2000d4b8

0002e7b4 <_free_r>:
   2e7b4:	2900      	cmp	r1, #0
   2e7b6:	d044      	beq.n	2e842 <_free_r+0x8e>
   2e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7bc:	460d      	mov	r5, r1
   2e7be:	4680      	mov	r8, r0
   2e7c0:	f7ff fbe2 	bl	2df88 <__malloc_lock>
   2e7c4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2e7c8:	4969      	ldr	r1, [pc, #420]	; (2e970 <_free_r+0x1bc>)
   2e7ca:	f027 0301 	bic.w	r3, r7, #1
   2e7ce:	f1a5 0408 	sub.w	r4, r5, #8
   2e7d2:	18e2      	adds	r2, r4, r3
   2e7d4:	688e      	ldr	r6, [r1, #8]
   2e7d6:	6850      	ldr	r0, [r2, #4]
   2e7d8:	42b2      	cmp	r2, r6
   2e7da:	f020 0003 	bic.w	r0, r0, #3
   2e7de:	d05e      	beq.n	2e89e <_free_r+0xea>
   2e7e0:	07fe      	lsls	r6, r7, #31
   2e7e2:	6050      	str	r0, [r2, #4]
   2e7e4:	d40b      	bmi.n	2e7fe <_free_r+0x4a>
   2e7e6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2e7ea:	1be4      	subs	r4, r4, r7
   2e7ec:	f101 0e08 	add.w	lr, r1, #8
   2e7f0:	68a5      	ldr	r5, [r4, #8]
   2e7f2:	4575      	cmp	r5, lr
   2e7f4:	443b      	add	r3, r7
   2e7f6:	d06d      	beq.n	2e8d4 <_free_r+0x120>
   2e7f8:	68e7      	ldr	r7, [r4, #12]
   2e7fa:	60ef      	str	r7, [r5, #12]
   2e7fc:	60bd      	str	r5, [r7, #8]
   2e7fe:	1815      	adds	r5, r2, r0
   2e800:	686d      	ldr	r5, [r5, #4]
   2e802:	07ed      	lsls	r5, r5, #31
   2e804:	d53e      	bpl.n	2e884 <_free_r+0xd0>
   2e806:	f043 0201 	orr.w	r2, r3, #1
   2e80a:	6062      	str	r2, [r4, #4]
   2e80c:	50e3      	str	r3, [r4, r3]
   2e80e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2e812:	d217      	bcs.n	2e844 <_free_r+0x90>
   2e814:	08db      	lsrs	r3, r3, #3
   2e816:	1c58      	adds	r0, r3, #1
   2e818:	109a      	asrs	r2, r3, #2
   2e81a:	684d      	ldr	r5, [r1, #4]
   2e81c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2e820:	60a7      	str	r7, [r4, #8]
   2e822:	2301      	movs	r3, #1
   2e824:	4093      	lsls	r3, r2
   2e826:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2e82a:	432b      	orrs	r3, r5
   2e82c:	3a08      	subs	r2, #8
   2e82e:	60e2      	str	r2, [r4, #12]
   2e830:	604b      	str	r3, [r1, #4]
   2e832:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2e836:	60fc      	str	r4, [r7, #12]
   2e838:	4640      	mov	r0, r8
   2e83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e83e:	f7ff bba9 	b.w	2df94 <__malloc_unlock>
   2e842:	4770      	bx	lr
   2e844:	0a5a      	lsrs	r2, r3, #9
   2e846:	2a04      	cmp	r2, #4
   2e848:	d852      	bhi.n	2e8f0 <_free_r+0x13c>
   2e84a:	099a      	lsrs	r2, r3, #6
   2e84c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2e850:	00ff      	lsls	r7, r7, #3
   2e852:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2e856:	19c8      	adds	r0, r1, r7
   2e858:	59ca      	ldr	r2, [r1, r7]
   2e85a:	3808      	subs	r0, #8
   2e85c:	4290      	cmp	r0, r2
   2e85e:	d04f      	beq.n	2e900 <_free_r+0x14c>
   2e860:	6851      	ldr	r1, [r2, #4]
   2e862:	f021 0103 	bic.w	r1, r1, #3
   2e866:	428b      	cmp	r3, r1
   2e868:	d232      	bcs.n	2e8d0 <_free_r+0x11c>
   2e86a:	6892      	ldr	r2, [r2, #8]
   2e86c:	4290      	cmp	r0, r2
   2e86e:	d1f7      	bne.n	2e860 <_free_r+0xac>
   2e870:	68c3      	ldr	r3, [r0, #12]
   2e872:	60a0      	str	r0, [r4, #8]
   2e874:	60e3      	str	r3, [r4, #12]
   2e876:	609c      	str	r4, [r3, #8]
   2e878:	60c4      	str	r4, [r0, #12]
   2e87a:	4640      	mov	r0, r8
   2e87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e880:	f7ff bb88 	b.w	2df94 <__malloc_unlock>
   2e884:	6895      	ldr	r5, [r2, #8]
   2e886:	4f3b      	ldr	r7, [pc, #236]	; (2e974 <_free_r+0x1c0>)
   2e888:	42bd      	cmp	r5, r7
   2e88a:	4403      	add	r3, r0
   2e88c:	d040      	beq.n	2e910 <_free_r+0x15c>
   2e88e:	68d0      	ldr	r0, [r2, #12]
   2e890:	60e8      	str	r0, [r5, #12]
   2e892:	f043 0201 	orr.w	r2, r3, #1
   2e896:	6085      	str	r5, [r0, #8]
   2e898:	6062      	str	r2, [r4, #4]
   2e89a:	50e3      	str	r3, [r4, r3]
   2e89c:	e7b7      	b.n	2e80e <_free_r+0x5a>
   2e89e:	07ff      	lsls	r7, r7, #31
   2e8a0:	4403      	add	r3, r0
   2e8a2:	d407      	bmi.n	2e8b4 <_free_r+0x100>
   2e8a4:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2e8a8:	1aa4      	subs	r4, r4, r2
   2e8aa:	4413      	add	r3, r2
   2e8ac:	68a0      	ldr	r0, [r4, #8]
   2e8ae:	68e2      	ldr	r2, [r4, #12]
   2e8b0:	60c2      	str	r2, [r0, #12]
   2e8b2:	6090      	str	r0, [r2, #8]
   2e8b4:	4a30      	ldr	r2, [pc, #192]	; (2e978 <_free_r+0x1c4>)
   2e8b6:	6812      	ldr	r2, [r2, #0]
   2e8b8:	f043 0001 	orr.w	r0, r3, #1
   2e8bc:	4293      	cmp	r3, r2
   2e8be:	6060      	str	r0, [r4, #4]
   2e8c0:	608c      	str	r4, [r1, #8]
   2e8c2:	d3b9      	bcc.n	2e838 <_free_r+0x84>
   2e8c4:	4b2d      	ldr	r3, [pc, #180]	; (2e97c <_free_r+0x1c8>)
   2e8c6:	4640      	mov	r0, r8
   2e8c8:	6819      	ldr	r1, [r3, #0]
   2e8ca:	f7ff ff23 	bl	2e714 <_malloc_trim_r>
   2e8ce:	e7b3      	b.n	2e838 <_free_r+0x84>
   2e8d0:	4610      	mov	r0, r2
   2e8d2:	e7cd      	b.n	2e870 <_free_r+0xbc>
   2e8d4:	1811      	adds	r1, r2, r0
   2e8d6:	6849      	ldr	r1, [r1, #4]
   2e8d8:	07c9      	lsls	r1, r1, #31
   2e8da:	d444      	bmi.n	2e966 <_free_r+0x1b2>
   2e8dc:	6891      	ldr	r1, [r2, #8]
   2e8de:	68d2      	ldr	r2, [r2, #12]
   2e8e0:	60ca      	str	r2, [r1, #12]
   2e8e2:	4403      	add	r3, r0
   2e8e4:	f043 0001 	orr.w	r0, r3, #1
   2e8e8:	6091      	str	r1, [r2, #8]
   2e8ea:	6060      	str	r0, [r4, #4]
   2e8ec:	50e3      	str	r3, [r4, r3]
   2e8ee:	e7a3      	b.n	2e838 <_free_r+0x84>
   2e8f0:	2a14      	cmp	r2, #20
   2e8f2:	d816      	bhi.n	2e922 <_free_r+0x16e>
   2e8f4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2e8f8:	00ff      	lsls	r7, r7, #3
   2e8fa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2e8fe:	e7aa      	b.n	2e856 <_free_r+0xa2>
   2e900:	10aa      	asrs	r2, r5, #2
   2e902:	2301      	movs	r3, #1
   2e904:	684d      	ldr	r5, [r1, #4]
   2e906:	4093      	lsls	r3, r2
   2e908:	432b      	orrs	r3, r5
   2e90a:	604b      	str	r3, [r1, #4]
   2e90c:	4603      	mov	r3, r0
   2e90e:	e7b0      	b.n	2e872 <_free_r+0xbe>
   2e910:	f043 0201 	orr.w	r2, r3, #1
   2e914:	614c      	str	r4, [r1, #20]
   2e916:	610c      	str	r4, [r1, #16]
   2e918:	60e5      	str	r5, [r4, #12]
   2e91a:	60a5      	str	r5, [r4, #8]
   2e91c:	6062      	str	r2, [r4, #4]
   2e91e:	50e3      	str	r3, [r4, r3]
   2e920:	e78a      	b.n	2e838 <_free_r+0x84>
   2e922:	2a54      	cmp	r2, #84	; 0x54
   2e924:	d806      	bhi.n	2e934 <_free_r+0x180>
   2e926:	0b1a      	lsrs	r2, r3, #12
   2e928:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2e92c:	00ff      	lsls	r7, r7, #3
   2e92e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2e932:	e790      	b.n	2e856 <_free_r+0xa2>
   2e934:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2e938:	d806      	bhi.n	2e948 <_free_r+0x194>
   2e93a:	0bda      	lsrs	r2, r3, #15
   2e93c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2e940:	00ff      	lsls	r7, r7, #3
   2e942:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2e946:	e786      	b.n	2e856 <_free_r+0xa2>
   2e948:	f240 5054 	movw	r0, #1364	; 0x554
   2e94c:	4282      	cmp	r2, r0
   2e94e:	d806      	bhi.n	2e95e <_free_r+0x1aa>
   2e950:	0c9a      	lsrs	r2, r3, #18
   2e952:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2e956:	00ff      	lsls	r7, r7, #3
   2e958:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2e95c:	e77b      	b.n	2e856 <_free_r+0xa2>
   2e95e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2e962:	257e      	movs	r5, #126	; 0x7e
   2e964:	e777      	b.n	2e856 <_free_r+0xa2>
   2e966:	f043 0101 	orr.w	r1, r3, #1
   2e96a:	6061      	str	r1, [r4, #4]
   2e96c:	6013      	str	r3, [r2, #0]
   2e96e:	e763      	b.n	2e838 <_free_r+0x84>
   2e970:	2000d0b0 	.word	0x2000d0b0
   2e974:	2000d0b8 	.word	0x2000d0b8
   2e978:	2000d4bc 	.word	0x2000d4bc
   2e97c:	20002e30 	.word	0x20002e30

0002e980 <__retarget_lock_acquire_recursive>:
   2e980:	4770      	bx	lr
   2e982:	bf00      	nop

0002e984 <__retarget_lock_release_recursive>:
   2e984:	4770      	bx	lr
   2e986:	bf00      	nop

0002e988 <_realloc_r>:
   2e988:	2900      	cmp	r1, #0
   2e98a:	f000 8095 	beq.w	2eab8 <_realloc_r+0x130>
   2e98e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e992:	460d      	mov	r5, r1
   2e994:	4616      	mov	r6, r2
   2e996:	b083      	sub	sp, #12
   2e998:	4680      	mov	r8, r0
   2e99a:	f106 070b 	add.w	r7, r6, #11
   2e99e:	f7ff faf3 	bl	2df88 <__malloc_lock>
   2e9a2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e9a6:	2f16      	cmp	r7, #22
   2e9a8:	f02e 0403 	bic.w	r4, lr, #3
   2e9ac:	f1a5 0908 	sub.w	r9, r5, #8
   2e9b0:	d83c      	bhi.n	2ea2c <_realloc_r+0xa4>
   2e9b2:	2210      	movs	r2, #16
   2e9b4:	4617      	mov	r7, r2
   2e9b6:	42be      	cmp	r6, r7
   2e9b8:	d83d      	bhi.n	2ea36 <_realloc_r+0xae>
   2e9ba:	4294      	cmp	r4, r2
   2e9bc:	da43      	bge.n	2ea46 <_realloc_r+0xbe>
   2e9be:	4bc4      	ldr	r3, [pc, #784]	; (2ecd0 <_realloc_r+0x348>)
   2e9c0:	6899      	ldr	r1, [r3, #8]
   2e9c2:	eb09 0004 	add.w	r0, r9, r4
   2e9c6:	4288      	cmp	r0, r1
   2e9c8:	f000 80b4 	beq.w	2eb34 <_realloc_r+0x1ac>
   2e9cc:	6843      	ldr	r3, [r0, #4]
   2e9ce:	f023 0101 	bic.w	r1, r3, #1
   2e9d2:	4401      	add	r1, r0
   2e9d4:	6849      	ldr	r1, [r1, #4]
   2e9d6:	07c9      	lsls	r1, r1, #31
   2e9d8:	d54c      	bpl.n	2ea74 <_realloc_r+0xec>
   2e9da:	f01e 0f01 	tst.w	lr, #1
   2e9de:	f000 809b 	beq.w	2eb18 <_realloc_r+0x190>
   2e9e2:	4631      	mov	r1, r6
   2e9e4:	4640      	mov	r0, r8
   2e9e6:	f7ff f81f 	bl	2da28 <_malloc_r>
   2e9ea:	4606      	mov	r6, r0
   2e9ec:	2800      	cmp	r0, #0
   2e9ee:	d03a      	beq.n	2ea66 <_realloc_r+0xde>
   2e9f0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e9f4:	f023 0301 	bic.w	r3, r3, #1
   2e9f8:	444b      	add	r3, r9
   2e9fa:	f1a0 0208 	sub.w	r2, r0, #8
   2e9fe:	429a      	cmp	r2, r3
   2ea00:	f000 8121 	beq.w	2ec46 <_realloc_r+0x2be>
   2ea04:	1f22      	subs	r2, r4, #4
   2ea06:	2a24      	cmp	r2, #36	; 0x24
   2ea08:	f200 8107 	bhi.w	2ec1a <_realloc_r+0x292>
   2ea0c:	2a13      	cmp	r2, #19
   2ea0e:	f200 80db 	bhi.w	2ebc8 <_realloc_r+0x240>
   2ea12:	4603      	mov	r3, r0
   2ea14:	462a      	mov	r2, r5
   2ea16:	6811      	ldr	r1, [r2, #0]
   2ea18:	6019      	str	r1, [r3, #0]
   2ea1a:	6851      	ldr	r1, [r2, #4]
   2ea1c:	6059      	str	r1, [r3, #4]
   2ea1e:	6892      	ldr	r2, [r2, #8]
   2ea20:	609a      	str	r2, [r3, #8]
   2ea22:	4629      	mov	r1, r5
   2ea24:	4640      	mov	r0, r8
   2ea26:	f7ff fec5 	bl	2e7b4 <_free_r>
   2ea2a:	e01c      	b.n	2ea66 <_realloc_r+0xde>
   2ea2c:	f027 0707 	bic.w	r7, r7, #7
   2ea30:	2f00      	cmp	r7, #0
   2ea32:	463a      	mov	r2, r7
   2ea34:	dabf      	bge.n	2e9b6 <_realloc_r+0x2e>
   2ea36:	2600      	movs	r6, #0
   2ea38:	230c      	movs	r3, #12
   2ea3a:	4630      	mov	r0, r6
   2ea3c:	f8c8 3000 	str.w	r3, [r8]
   2ea40:	b003      	add	sp, #12
   2ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea46:	462e      	mov	r6, r5
   2ea48:	1be3      	subs	r3, r4, r7
   2ea4a:	2b0f      	cmp	r3, #15
   2ea4c:	d81e      	bhi.n	2ea8c <_realloc_r+0x104>
   2ea4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2ea52:	f003 0301 	and.w	r3, r3, #1
   2ea56:	4323      	orrs	r3, r4
   2ea58:	444c      	add	r4, r9
   2ea5a:	f8c9 3004 	str.w	r3, [r9, #4]
   2ea5e:	6863      	ldr	r3, [r4, #4]
   2ea60:	f043 0301 	orr.w	r3, r3, #1
   2ea64:	6063      	str	r3, [r4, #4]
   2ea66:	4640      	mov	r0, r8
   2ea68:	f7ff fa94 	bl	2df94 <__malloc_unlock>
   2ea6c:	4630      	mov	r0, r6
   2ea6e:	b003      	add	sp, #12
   2ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea74:	f023 0303 	bic.w	r3, r3, #3
   2ea78:	18e1      	adds	r1, r4, r3
   2ea7a:	4291      	cmp	r1, r2
   2ea7c:	db1f      	blt.n	2eabe <_realloc_r+0x136>
   2ea7e:	68c3      	ldr	r3, [r0, #12]
   2ea80:	6882      	ldr	r2, [r0, #8]
   2ea82:	462e      	mov	r6, r5
   2ea84:	60d3      	str	r3, [r2, #12]
   2ea86:	460c      	mov	r4, r1
   2ea88:	609a      	str	r2, [r3, #8]
   2ea8a:	e7dd      	b.n	2ea48 <_realloc_r+0xc0>
   2ea8c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2ea90:	eb09 0107 	add.w	r1, r9, r7
   2ea94:	f002 0201 	and.w	r2, r2, #1
   2ea98:	444c      	add	r4, r9
   2ea9a:	f043 0301 	orr.w	r3, r3, #1
   2ea9e:	4317      	orrs	r7, r2
   2eaa0:	f8c9 7004 	str.w	r7, [r9, #4]
   2eaa4:	604b      	str	r3, [r1, #4]
   2eaa6:	6863      	ldr	r3, [r4, #4]
   2eaa8:	f043 0301 	orr.w	r3, r3, #1
   2eaac:	3108      	adds	r1, #8
   2eaae:	6063      	str	r3, [r4, #4]
   2eab0:	4640      	mov	r0, r8
   2eab2:	f7ff fe7f 	bl	2e7b4 <_free_r>
   2eab6:	e7d6      	b.n	2ea66 <_realloc_r+0xde>
   2eab8:	4611      	mov	r1, r2
   2eaba:	f7fe bfb5 	b.w	2da28 <_malloc_r>
   2eabe:	f01e 0f01 	tst.w	lr, #1
   2eac2:	d18e      	bne.n	2e9e2 <_realloc_r+0x5a>
   2eac4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2eac8:	eba9 0a01 	sub.w	sl, r9, r1
   2eacc:	f8da 1004 	ldr.w	r1, [sl, #4]
   2ead0:	f021 0103 	bic.w	r1, r1, #3
   2ead4:	440b      	add	r3, r1
   2ead6:	4423      	add	r3, r4
   2ead8:	4293      	cmp	r3, r2
   2eada:	db25      	blt.n	2eb28 <_realloc_r+0x1a0>
   2eadc:	68c2      	ldr	r2, [r0, #12]
   2eade:	6881      	ldr	r1, [r0, #8]
   2eae0:	4656      	mov	r6, sl
   2eae2:	60ca      	str	r2, [r1, #12]
   2eae4:	6091      	str	r1, [r2, #8]
   2eae6:	f8da 100c 	ldr.w	r1, [sl, #12]
   2eaea:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2eaee:	1f22      	subs	r2, r4, #4
   2eaf0:	2a24      	cmp	r2, #36	; 0x24
   2eaf2:	60c1      	str	r1, [r0, #12]
   2eaf4:	6088      	str	r0, [r1, #8]
   2eaf6:	f200 8094 	bhi.w	2ec22 <_realloc_r+0x29a>
   2eafa:	2a13      	cmp	r2, #19
   2eafc:	d96f      	bls.n	2ebde <_realloc_r+0x256>
   2eafe:	6829      	ldr	r1, [r5, #0]
   2eb00:	f8ca 1008 	str.w	r1, [sl, #8]
   2eb04:	6869      	ldr	r1, [r5, #4]
   2eb06:	f8ca 100c 	str.w	r1, [sl, #12]
   2eb0a:	2a1b      	cmp	r2, #27
   2eb0c:	f200 80a2 	bhi.w	2ec54 <_realloc_r+0x2cc>
   2eb10:	3508      	adds	r5, #8
   2eb12:	f10a 0210 	add.w	r2, sl, #16
   2eb16:	e063      	b.n	2ebe0 <_realloc_r+0x258>
   2eb18:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2eb1c:	eba9 0a03 	sub.w	sl, r9, r3
   2eb20:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb24:	f021 0103 	bic.w	r1, r1, #3
   2eb28:	1863      	adds	r3, r4, r1
   2eb2a:	4293      	cmp	r3, r2
   2eb2c:	f6ff af59 	blt.w	2e9e2 <_realloc_r+0x5a>
   2eb30:	4656      	mov	r6, sl
   2eb32:	e7d8      	b.n	2eae6 <_realloc_r+0x15e>
   2eb34:	6841      	ldr	r1, [r0, #4]
   2eb36:	f021 0b03 	bic.w	fp, r1, #3
   2eb3a:	44a3      	add	fp, r4
   2eb3c:	f107 0010 	add.w	r0, r7, #16
   2eb40:	4583      	cmp	fp, r0
   2eb42:	da56      	bge.n	2ebf2 <_realloc_r+0x26a>
   2eb44:	f01e 0f01 	tst.w	lr, #1
   2eb48:	f47f af4b 	bne.w	2e9e2 <_realloc_r+0x5a>
   2eb4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2eb50:	eba9 0a01 	sub.w	sl, r9, r1
   2eb54:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb58:	f021 0103 	bic.w	r1, r1, #3
   2eb5c:	448b      	add	fp, r1
   2eb5e:	4558      	cmp	r0, fp
   2eb60:	dce2      	bgt.n	2eb28 <_realloc_r+0x1a0>
   2eb62:	4656      	mov	r6, sl
   2eb64:	f8da 100c 	ldr.w	r1, [sl, #12]
   2eb68:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2eb6c:	1f22      	subs	r2, r4, #4
   2eb6e:	2a24      	cmp	r2, #36	; 0x24
   2eb70:	60c1      	str	r1, [r0, #12]
   2eb72:	6088      	str	r0, [r1, #8]
   2eb74:	f200 808f 	bhi.w	2ec96 <_realloc_r+0x30e>
   2eb78:	2a13      	cmp	r2, #19
   2eb7a:	f240 808a 	bls.w	2ec92 <_realloc_r+0x30a>
   2eb7e:	6829      	ldr	r1, [r5, #0]
   2eb80:	f8ca 1008 	str.w	r1, [sl, #8]
   2eb84:	6869      	ldr	r1, [r5, #4]
   2eb86:	f8ca 100c 	str.w	r1, [sl, #12]
   2eb8a:	2a1b      	cmp	r2, #27
   2eb8c:	f200 808a 	bhi.w	2eca4 <_realloc_r+0x31c>
   2eb90:	3508      	adds	r5, #8
   2eb92:	f10a 0210 	add.w	r2, sl, #16
   2eb96:	6829      	ldr	r1, [r5, #0]
   2eb98:	6011      	str	r1, [r2, #0]
   2eb9a:	6869      	ldr	r1, [r5, #4]
   2eb9c:	6051      	str	r1, [r2, #4]
   2eb9e:	68a9      	ldr	r1, [r5, #8]
   2eba0:	6091      	str	r1, [r2, #8]
   2eba2:	eb0a 0107 	add.w	r1, sl, r7
   2eba6:	ebab 0207 	sub.w	r2, fp, r7
   2ebaa:	f042 0201 	orr.w	r2, r2, #1
   2ebae:	6099      	str	r1, [r3, #8]
   2ebb0:	604a      	str	r2, [r1, #4]
   2ebb2:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ebb6:	f003 0301 	and.w	r3, r3, #1
   2ebba:	431f      	orrs	r7, r3
   2ebbc:	4640      	mov	r0, r8
   2ebbe:	f8ca 7004 	str.w	r7, [sl, #4]
   2ebc2:	f7ff f9e7 	bl	2df94 <__malloc_unlock>
   2ebc6:	e751      	b.n	2ea6c <_realloc_r+0xe4>
   2ebc8:	682b      	ldr	r3, [r5, #0]
   2ebca:	6003      	str	r3, [r0, #0]
   2ebcc:	686b      	ldr	r3, [r5, #4]
   2ebce:	6043      	str	r3, [r0, #4]
   2ebd0:	2a1b      	cmp	r2, #27
   2ebd2:	d82d      	bhi.n	2ec30 <_realloc_r+0x2a8>
   2ebd4:	f100 0308 	add.w	r3, r0, #8
   2ebd8:	f105 0208 	add.w	r2, r5, #8
   2ebdc:	e71b      	b.n	2ea16 <_realloc_r+0x8e>
   2ebde:	4632      	mov	r2, r6
   2ebe0:	6829      	ldr	r1, [r5, #0]
   2ebe2:	6011      	str	r1, [r2, #0]
   2ebe4:	6869      	ldr	r1, [r5, #4]
   2ebe6:	6051      	str	r1, [r2, #4]
   2ebe8:	68a9      	ldr	r1, [r5, #8]
   2ebea:	6091      	str	r1, [r2, #8]
   2ebec:	461c      	mov	r4, r3
   2ebee:	46d1      	mov	r9, sl
   2ebf0:	e72a      	b.n	2ea48 <_realloc_r+0xc0>
   2ebf2:	eb09 0107 	add.w	r1, r9, r7
   2ebf6:	ebab 0b07 	sub.w	fp, fp, r7
   2ebfa:	f04b 0201 	orr.w	r2, fp, #1
   2ebfe:	6099      	str	r1, [r3, #8]
   2ec00:	604a      	str	r2, [r1, #4]
   2ec02:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2ec06:	f003 0301 	and.w	r3, r3, #1
   2ec0a:	431f      	orrs	r7, r3
   2ec0c:	4640      	mov	r0, r8
   2ec0e:	f845 7c04 	str.w	r7, [r5, #-4]
   2ec12:	f7ff f9bf 	bl	2df94 <__malloc_unlock>
   2ec16:	462e      	mov	r6, r5
   2ec18:	e728      	b.n	2ea6c <_realloc_r+0xe4>
   2ec1a:	4629      	mov	r1, r5
   2ec1c:	f7fb feac 	bl	2a978 <memmove>
   2ec20:	e6ff      	b.n	2ea22 <_realloc_r+0x9a>
   2ec22:	4629      	mov	r1, r5
   2ec24:	4630      	mov	r0, r6
   2ec26:	461c      	mov	r4, r3
   2ec28:	46d1      	mov	r9, sl
   2ec2a:	f7fb fea5 	bl	2a978 <memmove>
   2ec2e:	e70b      	b.n	2ea48 <_realloc_r+0xc0>
   2ec30:	68ab      	ldr	r3, [r5, #8]
   2ec32:	6083      	str	r3, [r0, #8]
   2ec34:	68eb      	ldr	r3, [r5, #12]
   2ec36:	60c3      	str	r3, [r0, #12]
   2ec38:	2a24      	cmp	r2, #36	; 0x24
   2ec3a:	d017      	beq.n	2ec6c <_realloc_r+0x2e4>
   2ec3c:	f100 0310 	add.w	r3, r0, #16
   2ec40:	f105 0210 	add.w	r2, r5, #16
   2ec44:	e6e7      	b.n	2ea16 <_realloc_r+0x8e>
   2ec46:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2ec4a:	f023 0303 	bic.w	r3, r3, #3
   2ec4e:	441c      	add	r4, r3
   2ec50:	462e      	mov	r6, r5
   2ec52:	e6f9      	b.n	2ea48 <_realloc_r+0xc0>
   2ec54:	68a9      	ldr	r1, [r5, #8]
   2ec56:	f8ca 1010 	str.w	r1, [sl, #16]
   2ec5a:	68e9      	ldr	r1, [r5, #12]
   2ec5c:	f8ca 1014 	str.w	r1, [sl, #20]
   2ec60:	2a24      	cmp	r2, #36	; 0x24
   2ec62:	d00c      	beq.n	2ec7e <_realloc_r+0x2f6>
   2ec64:	3510      	adds	r5, #16
   2ec66:	f10a 0218 	add.w	r2, sl, #24
   2ec6a:	e7b9      	b.n	2ebe0 <_realloc_r+0x258>
   2ec6c:	692b      	ldr	r3, [r5, #16]
   2ec6e:	6103      	str	r3, [r0, #16]
   2ec70:	696b      	ldr	r3, [r5, #20]
   2ec72:	6143      	str	r3, [r0, #20]
   2ec74:	f105 0218 	add.w	r2, r5, #24
   2ec78:	f100 0318 	add.w	r3, r0, #24
   2ec7c:	e6cb      	b.n	2ea16 <_realloc_r+0x8e>
   2ec7e:	692a      	ldr	r2, [r5, #16]
   2ec80:	f8ca 2018 	str.w	r2, [sl, #24]
   2ec84:	696a      	ldr	r2, [r5, #20]
   2ec86:	f8ca 201c 	str.w	r2, [sl, #28]
   2ec8a:	3518      	adds	r5, #24
   2ec8c:	f10a 0220 	add.w	r2, sl, #32
   2ec90:	e7a6      	b.n	2ebe0 <_realloc_r+0x258>
   2ec92:	4632      	mov	r2, r6
   2ec94:	e77f      	b.n	2eb96 <_realloc_r+0x20e>
   2ec96:	4629      	mov	r1, r5
   2ec98:	4630      	mov	r0, r6
   2ec9a:	9301      	str	r3, [sp, #4]
   2ec9c:	f7fb fe6c 	bl	2a978 <memmove>
   2eca0:	9b01      	ldr	r3, [sp, #4]
   2eca2:	e77e      	b.n	2eba2 <_realloc_r+0x21a>
   2eca4:	68a9      	ldr	r1, [r5, #8]
   2eca6:	f8ca 1010 	str.w	r1, [sl, #16]
   2ecaa:	68e9      	ldr	r1, [r5, #12]
   2ecac:	f8ca 1014 	str.w	r1, [sl, #20]
   2ecb0:	2a24      	cmp	r2, #36	; 0x24
   2ecb2:	d003      	beq.n	2ecbc <_realloc_r+0x334>
   2ecb4:	3510      	adds	r5, #16
   2ecb6:	f10a 0218 	add.w	r2, sl, #24
   2ecba:	e76c      	b.n	2eb96 <_realloc_r+0x20e>
   2ecbc:	692a      	ldr	r2, [r5, #16]
   2ecbe:	f8ca 2018 	str.w	r2, [sl, #24]
   2ecc2:	696a      	ldr	r2, [r5, #20]
   2ecc4:	f8ca 201c 	str.w	r2, [sl, #28]
   2ecc8:	3518      	adds	r5, #24
   2ecca:	f10a 0220 	add.w	r2, sl, #32
   2ecce:	e762      	b.n	2eb96 <_realloc_r+0x20e>
   2ecd0:	2000d0b0 	.word	0x2000d0b0
