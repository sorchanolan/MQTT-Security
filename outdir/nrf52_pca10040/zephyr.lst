
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000aac0 	.word	0x2000aac0
       4:	00027129 	.word	0x00027129
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027189 	.word	0x00027189
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00026fbd 	.word	0x00026fbd
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00026fbd 	.word	0x00026fbd
      14:	00026fbd 	.word	0x00026fbd
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00026fbd 	.word	0x00026fbd
		for (b = 0; b < 8; b++) {
      1c:	00026fbd 	.word	0x00026fbd
      20:	00026fbd 	.word	0x00026fbd
			crc = (crc << 1);
      24:	00026fbd 	.word	0x00026fbd
			if (i < len) {
      28:	00026fbd 	.word	0x00026fbd
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00026b0d 	.word	0x00026b0d
      30:	00026fbd 	.word	0x00026fbd
      34:	00026fbd 	.word	0x00026fbd
      38:	00026ac9 	.word	0x00026ac9
      3c:	00026fbd 	.word	0x00026fbd

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	000270ed 00018835 000270ed 000270ed     .p..5....p...p..
	for (i = 0; i < len + padding; i++) {
      50:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
      90:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
      b0:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	000270ed 000270ed 000270ed 000270ed     .p...p...p...p..
      d0:	000270ed 000270ed 000270ed              .p...p...p..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 000029d5 00000000 00026f29     .....)......)o..
      ec:	2000cee4 0000230f 00000000 00026f29     ... .#......)o..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00026f29 00000000 00026f29     ....)o......)o..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000cf20 000026e3 00000000 00026f29      .. .&......)o..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00026f29 00000000 00018855     ....)o......U...
     13c:	00000000 00026f29 00000000 00018897     ....)o..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00026f29 00000000 00026f29     ....)o......)o..
     15c:	00000000 00026f29 00000000 00002455     ....)o......U$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00026f29 00000000 00026f29     ....)o......)o..
     17c:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 0001888d 00000000 00026f29     ............)o..
     1ac:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00026f29 00000000 00026f29     ....)o......)o..
     1cc:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00026f29 00000000 00026f29     ....)o......)o..
     1fc:	00000000 00026f29 00000000 00026f29     ....)o......)o..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00026f29                       ....)o..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop
    1434:	0000      	movs	r0, r0
	...

00001438 <sensors_thread>:

K_THREAD_STACK_DEFINE(ss_stack_area, SS_STACK_SIZE);
struct k_thread ss_thread;

void sensors_thread(void * unused1, void * unused2, void * unused3)
{
    1438:	b508      	push	{r3, lr}
    143a:	e008      	b.n	144e <sensors_thread+0x16>
			x = 0.0;

		if ((z++) > Z_MAX)
			z = 0;

		telemetry_changed = true;
    143c:	2201      	movs	r2, #1
    143e:	4b24      	ldr	r3, [pc, #144]	; (14d0 <sensors_thread+0x98>)
    1440:	701a      	strb	r2, [r3, #0]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1442:	4824      	ldr	r0, [pc, #144]	; (14d4 <sensors_thread+0x9c>)
    1444:	f026 fa0c 	bl	27860 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1448:	4823      	ldr	r0, [pc, #140]	; (14d8 <sensors_thread+0xa0>)
    144a:	f027 f9c2 	bl	287d2 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1452:	f027 f87f 	bl	28554 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    145a:	481e      	ldr	r0, [pc, #120]	; (14d4 <sensors_thread+0x9c>)
    145c:	f026 f996 	bl	2778c <_impl_k_mutex_lock>
		y = sin(x * 2 * PI);
    1460:	4c1e      	ldr	r4, [pc, #120]	; (14dc <sensors_thread+0xa4>)
    1462:	e9d4 2300 	ldrd	r2, r3, [r4]
    1466:	4610      	mov	r0, r2
    1468:	4619      	mov	r1, r3
    146a:	f7ff f9bd 	bl	7e8 <__adddf3>
    146e:	a314      	add	r3, pc, #80	; (adr r3, 14c0 <sensors_thread+0x88>)
    1470:	e9d3 2300 	ldrd	r2, r3, [r3]
    1474:	f7ff fb6a 	bl	b4c <__aeabi_dmul>
    1478:	f028 f8c2 	bl	29600 <sin>
    147c:	4b18      	ldr	r3, [pc, #96]	; (14e0 <sensors_thread+0xa8>)
    147e:	e9c3 0100 	strd	r0, r1, [r3]
		if ((x = x + X_STEP) >= 1.0)
    1482:	a311      	add	r3, pc, #68	; (adr r3, 14c8 <sensors_thread+0x90>)
    1484:	e9d3 2300 	ldrd	r2, r3, [r3]
    1488:	e9d4 0100 	ldrd	r0, r1, [r4]
    148c:	f7ff f9ac 	bl	7e8 <__adddf3>
    1490:	e9c4 0100 	strd	r0, r1, [r4]
    1494:	2200      	movs	r2, #0
    1496:	4b13      	ldr	r3, [pc, #76]	; (14e4 <sensors_thread+0xac>)
    1498:	f7ff fdde 	bl	1058 <__aeabi_dcmpge>
    149c:	b118      	cbz	r0, 14a6 <sensors_thread+0x6e>
			x = 0.0;
    149e:	2000      	movs	r0, #0
    14a0:	2100      	movs	r1, #0
    14a2:	e9c4 0100 	strd	r0, r1, [r4]
		if ((z++) > Z_MAX)
    14a6:	4a10      	ldr	r2, [pc, #64]	; (14e8 <sensors_thread+0xb0>)
    14a8:	6813      	ldr	r3, [r2, #0]
    14aa:	1c59      	adds	r1, r3, #1
    14ac:	6011      	str	r1, [r2, #0]
    14ae:	2b64      	cmp	r3, #100	; 0x64
    14b0:	ddc4      	ble.n	143c <sensors_thread+0x4>
			z = 0;
    14b2:	2200      	movs	r2, #0
    14b4:	4b0c      	ldr	r3, [pc, #48]	; (14e8 <sensors_thread+0xb0>)
    14b6:	601a      	str	r2, [r3, #0]
    14b8:	e7c0      	b.n	143c <sensors_thread+0x4>
    14ba:	bf00      	nop
    14bc:	f3af 8000 	nop.w
    14c0:	54442d18 	.word	0x54442d18
    14c4:	400921fb 	.word	0x400921fb
    14c8:	9999999a 	.word	0x9999999a
    14cc:	3fa99999 	.word	0x3fa99999
    14d0:	20000210 	.word	0x20000210
    14d4:	2000d068 	.word	0x2000d068
    14d8:	2000cff4 	.word	0x2000cff4
    14dc:	20000218 	.word	0x20000218
    14e0:	20000220 	.word	0x20000220
    14e4:	3ff00000 	.word	0x3ff00000
    14e8:	20000228 	.word	0x20000228

000014ec <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    14ec:	b530      	push	{r4, r5, lr}
    14ee:	b083      	sub	sp, #12
    14f0:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    14f2:	2a05      	cmp	r2, #5
    14f4:	d01b      	beq.n	152e <publish_cb+0x42>
    14f6:	2a07      	cmp	r2, #7
    14f8:	d01c      	beq.n	1534 <publish_cb+0x48>
    14fa:	2a04      	cmp	r2, #4
    14fc:	d003      	beq.n	1506 <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    14fe:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    1502:	4b0e      	ldr	r3, [pc, #56]	; (153c <publish_cb+0x50>)
    1504:	e001      	b.n	150a <publish_cb+0x1e>
	int rc = 0;
    1506:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1508:	4b0d      	ldr	r3, [pc, #52]	; (1540 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    150a:	9100      	str	r1, [sp, #0]
    150c:	22c3      	movs	r2, #195	; 0xc3
    150e:	490d      	ldr	r1, [pc, #52]	; (1544 <publish_cb+0x58>)
    1510:	480d      	ldr	r0, [pc, #52]	; (1548 <publish_cb+0x5c>)
    1512:	f001 fd35 	bl	2f80 <printk>

	if (client_ctx->publish_data) {
    1516:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    151a:	b111      	cbz	r1, 1522 <publish_cb+0x36>
		printk(", user_data: %s",
    151c:	480b      	ldr	r0, [pc, #44]	; (154c <publish_cb+0x60>)
    151e:	f001 fd2f 	bl	2f80 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    1522:	480b      	ldr	r0, [pc, #44]	; (1550 <publish_cb+0x64>)
    1524:	f001 fd2c 	bl	2f80 <printk>

	return rc;
}
    1528:	4620      	mov	r0, r4
    152a:	b003      	add	sp, #12
    152c:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    152e:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1530:	4b08      	ldr	r3, [pc, #32]	; (1554 <publish_cb+0x68>)
		break;
    1532:	e7ea      	b.n	150a <publish_cb+0x1e>
	int rc = 0;
    1534:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    1536:	4b08      	ldr	r3, [pc, #32]	; (1558 <publish_cb+0x6c>)
    1538:	e7e7      	b.n	150a <publish_cb+0x1e>
    153a:	bf00      	nop
    153c:	0002eff8 	.word	0x0002eff8
    1540:	0002efd0 	.word	0x0002efd0
    1544:	0002eec0 	.word	0x0002eec0
    1548:	0002f00c 	.word	0x0002f00c
    154c:	0002f028 	.word	0x0002f028
    1550:	00030348 	.word	0x00030348
    1554:	0002efec 	.word	0x0002efec
    1558:	0002efdc 	.word	0x0002efdc

0000155c <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    155c:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    155e:	460b      	mov	r3, r1
    1560:	22d5      	movs	r2, #213	; 0xd5
    1562:	4902      	ldr	r1, [pc, #8]	; (156c <malformed_cb+0x10>)
    1564:	4802      	ldr	r0, [pc, #8]	; (1570 <malformed_cb+0x14>)
    1566:	f001 fd0b 	bl	2f80 <printk>
    156a:	bd08      	pop	{r3, pc}
    156c:	0002eecc 	.word	0x0002eecc
    1570:	0002ef84 	.word	0x0002ef84

00001574 <disconnect_cb>:
{
    1574:	b510      	push	{r4, lr}
    1576:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    1578:	2294      	movs	r2, #148	; 0x94
    157a:	4907      	ldr	r1, [pc, #28]	; (1598 <disconnect_cb+0x24>)
    157c:	4807      	ldr	r0, [pc, #28]	; (159c <disconnect_cb+0x28>)
    157e:	f001 fcff 	bl	2f80 <printk>
	if (client_ctx->disconnect_data) {
    1582:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    1586:	b111      	cbz	r1, 158e <disconnect_cb+0x1a>
		printk(" user_data: %s",
    1588:	4805      	ldr	r0, [pc, #20]	; (15a0 <disconnect_cb+0x2c>)
    158a:	f001 fcf9 	bl	2f80 <printk>
	printk("\n");
    158e:	4805      	ldr	r0, [pc, #20]	; (15a4 <disconnect_cb+0x30>)
    1590:	f001 fcf6 	bl	2f80 <printk>
    1594:	bd10      	pop	{r4, pc}
    1596:	bf00      	nop
    1598:	0002eeb0 	.word	0x0002eeb0
    159c:	0002eef0 	.word	0x0002eef0
    15a0:	0002eef8 	.word	0x0002eef8
    15a4:	00030348 	.word	0x00030348

000015a8 <connect_cb>:
{
    15a8:	b510      	push	{r4, lr}
    15aa:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    15ac:	2281      	movs	r2, #129	; 0x81
    15ae:	4907      	ldr	r1, [pc, #28]	; (15cc <connect_cb+0x24>)
    15b0:	4807      	ldr	r0, [pc, #28]	; (15d0 <connect_cb+0x28>)
    15b2:	f001 fce5 	bl	2f80 <printk>
	if (client_ctx->connect_data) {
    15b6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    15ba:	b111      	cbz	r1, 15c2 <connect_cb+0x1a>
		printk(" user_data: %s",
    15bc:	4805      	ldr	r0, [pc, #20]	; (15d4 <connect_cb+0x2c>)
    15be:	f001 fcdf 	bl	2f80 <printk>
	printk("\n");
    15c2:	4805      	ldr	r0, [pc, #20]	; (15d8 <connect_cb+0x30>)
    15c4:	f001 fcdc 	bl	2f80 <printk>
    15c8:	bd10      	pop	{r4, pc}
    15ca:	bf00      	nop
    15cc:	0002eea4 	.word	0x0002eea4
    15d0:	0002eef0 	.word	0x0002eef0
    15d4:	0002eef8 	.word	0x0002eef8
    15d8:	00030348 	.word	0x00030348

000015dc <get_telemetry_payload>:
	return payload;
}


static char *get_telemetry_payload(enum mqtt_qos qos)
{
    15dc:	b510      	push	{r4, lr}
    15de:	b084      	sub	sp, #16
	static char payload[128];
	snprintf(payload, sizeof(payload), "{\"testval1\":\"%1.4f\", \"testval2\":\"%d\"}", y, z);
    15e0:	4c08      	ldr	r4, [pc, #32]	; (1604 <get_telemetry_payload+0x28>)
    15e2:	4b09      	ldr	r3, [pc, #36]	; (1608 <get_telemetry_payload+0x2c>)
    15e4:	681b      	ldr	r3, [r3, #0]
    15e6:	9302      	str	r3, [sp, #8]
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <get_telemetry_payload+0x30>)
    15ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    15ee:	e9cd 2300 	strd	r2, r3, [sp]
    15f2:	4a07      	ldr	r2, [pc, #28]	; (1610 <get_telemetry_payload+0x34>)
    15f4:	2180      	movs	r1, #128	; 0x80
    15f6:	4620      	mov	r0, r4
    15f8:	f029 faae 	bl	2ab58 <snprintf>
	return payload;
}
    15fc:	4620      	mov	r0, r4
    15fe:	b004      	add	sp, #16
    1600:	bd10      	pop	{r4, pc}
    1602:	bf00      	nop
    1604:	20000090 	.word	0x20000090
    1608:	20000228 	.word	0x20000228
    160c:	20000220 	.word	0x20000220
    1610:	0002ef5c 	.word	0x0002ef5c

00001614 <prepare_telemetry_msg>:
	pub_msg->pkt_id = sys_rand32_get();
}

static void prepare_telemetry_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1614:	b538      	push	{r3, r4, r5, lr}
    1616:	4604      	mov	r4, r0
    1618:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_telemetry_payload(qos);
    161a:	4608      	mov	r0, r1
    161c:	f7ff ffde 	bl	15dc <get_telemetry_payload>
    1620:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1622:	f7ff f86d 	bl	700 <strlen>
    1626:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    1628:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = "v1/devices/me/telemetry";
    162a:	4804      	ldr	r0, [pc, #16]	; (163c <prepare_telemetry_msg+0x28>)
    162c:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    162e:	f7ff f867 	bl	700 <strlen>
    1632:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1634:	f000 fd0a 	bl	204c <sys_rand32_get>
    1638:	80a0      	strh	r0, [r4, #4]
    163a:	bd38      	pop	{r3, r4, r5, pc}
    163c:	0002efb8 	.word	0x0002efb8

00001640 <get_attributes_payload>:
{
    1640:	b510      	push	{r4, lr}
    1642:	b082      	sub	sp, #8
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    1644:	f027 f924 	bl	28890 <_impl_k_uptime_get_32>
	snprintf(payload, sizeof(payload), "{\"firmware_version\":\"%s\", \"serial_number\":\"%s\", \"uptime\":\"%d\"}",
    1648:	4c08      	ldr	r4, [pc, #32]	; (166c <get_attributes_payload+0x2c>)
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <get_attributes_payload+0x30>)
    164c:	fba3 3000 	umull	r3, r0, r3, r0
    1650:	0980      	lsrs	r0, r0, #6
    1652:	9001      	str	r0, [sp, #4]
    1654:	4b07      	ldr	r3, [pc, #28]	; (1674 <get_attributes_payload+0x34>)
    1656:	9300      	str	r3, [sp, #0]
    1658:	4b07      	ldr	r3, [pc, #28]	; (1678 <get_attributes_payload+0x38>)
    165a:	4a08      	ldr	r2, [pc, #32]	; (167c <get_attributes_payload+0x3c>)
    165c:	2180      	movs	r1, #128	; 0x80
    165e:	4620      	mov	r0, r4
    1660:	f029 fa7a 	bl	2ab58 <snprintf>
}
    1664:	4620      	mov	r0, r4
    1666:	b002      	add	sp, #8
    1668:	bd10      	pop	{r4, pc}
    166a:	bf00      	nop
    166c:	20000010 	.word	0x20000010
    1670:	10624dd3 	.word	0x10624dd3
    1674:	0002ef50 	.word	0x0002ef50
    1678:	0002ef08 	.word	0x0002ef08
    167c:	0002ef10 	.word	0x0002ef10

00001680 <prepare_attributes_msg>:
{
    1680:	b538      	push	{r3, r4, r5, lr}
    1682:	4604      	mov	r4, r0
    1684:	460d      	mov	r5, r1
	pub_msg->msg = get_attributes_payload(qos);
    1686:	4608      	mov	r0, r1
    1688:	f7ff ffda 	bl	1640 <get_attributes_payload>
    168c:	6120      	str	r0, [r4, #16]
	pub_msg->msg_len = strlen(pub_msg->msg);
    168e:	f7ff f837 	bl	700 <strlen>
    1692:	82a0      	strh	r0, [r4, #20]
	pub_msg->qos = qos;
    1694:	7065      	strb	r5, [r4, #1]
	pub_msg->topic = "v1/devices/me/attributes";
    1696:	4804      	ldr	r0, [pc, #16]	; (16a8 <prepare_attributes_msg+0x28>)
    1698:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    169a:	f7ff f831 	bl	700 <strlen>
    169e:	81a0      	strh	r0, [r4, #12]
	pub_msg->pkt_id = sys_rand32_get();
    16a0:	f000 fcd4 	bl	204c <sys_rand32_get>
    16a4:	80a0      	strh	r0, [r4, #4]
    16a6:	bd38      	pop	{r3, r4, r5, pc}
    16a8:	0002ef9c 	.word	0x0002ef9c

000016ac <publisher_thread>:
K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;
static struct mqtt_client_ctx pub_ctx;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    16ac:	b530      	push	{r4, r5, lr}
    16ae:	b083      	sub	sp, #12

	int i, rc;
	bool data_changed;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    16b0:	4c81      	ldr	r4, [pc, #516]	; (18b8 <publisher_thread+0x20c>)
    16b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    16b6:	2100      	movs	r1, #0
    16b8:	4620      	mov	r0, r4
    16ba:	f029 f9ff 	bl	2aabc <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    16be:	4b7f      	ldr	r3, [pc, #508]	; (18bc <publisher_thread+0x210>)
    16c0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    16c4:	4b7e      	ldr	r3, [pc, #504]	; (18c0 <publisher_thread+0x214>)
    16c6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    16ca:	4b7e      	ldr	r3, [pc, #504]	; (18c4 <publisher_thread+0x218>)
    16cc:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    16d0:	f242 7310 	movw	r3, #10000	; 0x2710
    16d4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    16d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    16dc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    16e0:	4b79      	ldr	r3, [pc, #484]	; (18c8 <publisher_thread+0x21c>)
    16e2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    16e6:	f240 735b 	movw	r3, #1883	; 0x75b
    16ea:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    16ee:	4b77      	ldr	r3, [pc, #476]	; (18cc <publisher_thread+0x220>)
    16f0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    16f4:	4876      	ldr	r0, [pc, #472]	; (18d0 <publisher_thread+0x224>)
    16f6:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    16f8:	f7ff f802 	bl	700 <strlen>
    16fc:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    16fe:	7823      	ldrb	r3, [r4, #0]
    1700:	f043 0301 	orr.w	r3, r3, #1
    1704:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    1706:	4b73      	ldr	r3, [pc, #460]	; (18d4 <publisher_thread+0x228>)
    1708:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    170c:	4b72      	ldr	r3, [pc, #456]	; (18d8 <publisher_thread+0x22c>)
    170e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1712:	4b72      	ldr	r3, [pc, #456]	; (18dc <publisher_thread+0x230>)
    1714:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1718:	e0aa      	b.n	1870 <publisher_thread+0x1c4>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    171a:	4b71      	ldr	r3, [pc, #452]	; (18e0 <publisher_thread+0x234>)
    171c:	e0b7      	b.n	188e <publisher_thread+0x1e2>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    171e:	4b70      	ldr	r3, [pc, #448]	; (18e0 <publisher_thread+0x234>)
    1720:	9301      	str	r3, [sp, #4]
    1722:	9400      	str	r4, [sp, #0]
    1724:	4b6f      	ldr	r3, [pc, #444]	; (18e4 <publisher_thread+0x238>)
    1726:	f240 124b 	movw	r2, #331	; 0x14b
    172a:	496f      	ldr	r1, [pc, #444]	; (18e8 <publisher_thread+0x23c>)
    172c:	486f      	ldr	r0, [pc, #444]	; (18ec <publisher_thread+0x240>)
    172e:	f001 fc27 	bl	2f80 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    1732:	b15c      	cbz	r4, 174c <publisher_thread+0xa0>
    1734:	1c6b      	adds	r3, r5, #1
    1736:	2d63      	cmp	r5, #99	; 0x63
    1738:	dc08      	bgt.n	174c <publisher_thread+0xa0>
    173a:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    173c:	486c      	ldr	r0, [pc, #432]	; (18f0 <publisher_thread+0x244>)
    173e:	f024 f839 	bl	257b4 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1742:	4604      	mov	r4, r0
    1744:	2800      	cmp	r0, #0
    1746:	d1ea      	bne.n	171e <publisher_thread+0x72>
    1748:	4b6a      	ldr	r3, [pc, #424]	; (18f4 <publisher_thread+0x248>)
    174a:	e7e9      	b.n	1720 <publisher_thread+0x74>

		if (rc != 0) {
    174c:	b1cc      	cbz	r4, 1782 <publisher_thread+0xd6>
    174e:	e0aa      	b.n	18a6 <publisher_thread+0x1fa>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1750:	4b63      	ldr	r3, [pc, #396]	; (18e0 <publisher_thread+0x234>)
    1752:	9301      	str	r3, [sp, #4]
    1754:	9500      	str	r5, [sp, #0]
    1756:	4b68      	ldr	r3, [pc, #416]	; (18f8 <publisher_thread+0x24c>)
    1758:	f240 1255 	movw	r2, #341	; 0x155
    175c:	4962      	ldr	r1, [pc, #392]	; (18e8 <publisher_thread+0x23c>)
    175e:	4863      	ldr	r0, [pc, #396]	; (18ec <publisher_thread+0x240>)
    1760:	f001 fc0e 	bl	2f80 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1768:	f026 fef4 	bl	28554 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    176c:	b99d      	cbnz	r5, 1796 <publisher_thread+0xea>
    176e:	1c63      	adds	r3, r4, #1
    1770:	2c13      	cmp	r4, #19
    1772:	dc10      	bgt.n	1796 <publisher_thread+0xea>
    1774:	4a50      	ldr	r2, [pc, #320]	; (18b8 <publisher_thread+0x20c>)
    1776:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    177a:	f012 0f02 	tst.w	r2, #2
    177e:	d10a      	bne.n	1796 <publisher_thread+0xea>
    1780:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    1782:	484d      	ldr	r0, [pc, #308]	; (18b8 <publisher_thread+0x20c>)
    1784:	4601      	mov	r1, r0
    1786:	3048      	adds	r0, #72	; 0x48
    1788:	f023 fe42 	bl	25410 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    178c:	4605      	mov	r5, r0
    178e:	2800      	cmp	r0, #0
    1790:	d1de      	bne.n	1750 <publisher_thread+0xa4>
    1792:	4b58      	ldr	r3, [pc, #352]	; (18f4 <publisher_thread+0x248>)
    1794:	e7dd      	b.n	1752 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    1796:	4b48      	ldr	r3, [pc, #288]	; (18b8 <publisher_thread+0x20c>)
    1798:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    179c:	f013 0f02 	tst.w	r3, #2
    17a0:	d114      	bne.n	17cc <publisher_thread+0x120>
			mqtt_close(&pub_ctx.mqtt_ctx);
    17a2:	4853      	ldr	r0, [pc, #332]	; (18f0 <publisher_thread+0x244>)
    17a4:	f024 f84c 	bl	25840 <mqtt_close>
			goto exit_pub;
    17a8:	e07d      	b.n	18a6 <publisher_thread+0x1fa>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (telemetry_changed) {
				prepare_telemetry_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    17aa:	2100      	movs	r1, #0
    17ac:	4853      	ldr	r0, [pc, #332]	; (18fc <publisher_thread+0x250>)
    17ae:	f7ff ff31 	bl	1614 <prepare_telemetry_msg>
				telemetry_changed=false;
    17b2:	2200      	movs	r2, #0
    17b4:	4b52      	ldr	r3, [pc, #328]	; (1900 <publisher_thread+0x254>)
    17b6:	701a      	strb	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    17b8:	4852      	ldr	r0, [pc, #328]	; (1904 <publisher_thread+0x258>)
    17ba:	f026 f851 	bl	27860 <_impl_k_mutex_unlock>
				data_changed = true;
			}

			k_mutex_unlock(&pub_data);

			if (data_changed) {
    17be:	b9d4      	cbnz	r4, 17f6 <publisher_thread+0x14a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    17c0:	f242 7110 	movw	r1, #10000	; 0x2710
    17c4:	4850      	ldr	r0, [pc, #320]	; (1908 <publisher_thread+0x25c>)
    17c6:	f027 f817 	bl	287f8 <_impl_k_sem_take>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    17ca:	bb48      	cbnz	r0, 1820 <publisher_thread+0x174>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    17cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    17d0:	484c      	ldr	r0, [pc, #304]	; (1904 <publisher_thread+0x258>)
    17d2:	f025 ffdb 	bl	2778c <_impl_k_mutex_lock>
			if (telemetry_changed) {
    17d6:	4b4a      	ldr	r3, [pc, #296]	; (1900 <publisher_thread+0x254>)
    17d8:	781c      	ldrb	r4, [r3, #0]
    17da:	2c00      	cmp	r4, #0
    17dc:	d1e5      	bne.n	17aa <publisher_thread+0xfe>
			else if (attributes_changed) {
    17de:	4b4b      	ldr	r3, [pc, #300]	; (190c <publisher_thread+0x260>)
    17e0:	781c      	ldrb	r4, [r3, #0]
    17e2:	2c00      	cmp	r4, #0
    17e4:	d0e8      	beq.n	17b8 <publisher_thread+0x10c>
				prepare_attributes_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    17e6:	2100      	movs	r1, #0
    17e8:	4844      	ldr	r0, [pc, #272]	; (18fc <publisher_thread+0x250>)
    17ea:	f7ff ff49 	bl	1680 <prepare_attributes_msg>
				attributes_changed = false;
    17ee:	2200      	movs	r2, #0
    17f0:	4b46      	ldr	r3, [pc, #280]	; (190c <publisher_thread+0x260>)
    17f2:	701a      	strb	r2, [r3, #0]
    17f4:	e7e0      	b.n	17b8 <publisher_thread+0x10c>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    17f6:	4830      	ldr	r0, [pc, #192]	; (18b8 <publisher_thread+0x20c>)
    17f8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    17fc:	3048      	adds	r0, #72	; 0x48
    17fe:	f023 fe93 	bl	25528 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    1802:	4603      	mov	r3, r0
    1804:	b950      	cbnz	r0, 181c <publisher_thread+0x170>
    1806:	4a3b      	ldr	r2, [pc, #236]	; (18f4 <publisher_thread+0x248>)
    1808:	9201      	str	r2, [sp, #4]
    180a:	9300      	str	r3, [sp, #0]
    180c:	4b40      	ldr	r3, [pc, #256]	; (1910 <publisher_thread+0x264>)
    180e:	f240 1271 	movw	r2, #369	; 0x171
    1812:	4935      	ldr	r1, [pc, #212]	; (18e8 <publisher_thread+0x23c>)
    1814:	4835      	ldr	r0, [pc, #212]	; (18ec <publisher_thread+0x240>)
    1816:	f001 fbb3 	bl	2f80 <printk>
    181a:	e7d1      	b.n	17c0 <publisher_thread+0x114>
    181c:	4a30      	ldr	r2, [pc, #192]	; (18e0 <publisher_thread+0x234>)
    181e:	e7f3      	b.n	1808 <publisher_thread+0x15c>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    1820:	4833      	ldr	r0, [pc, #204]	; (18f0 <publisher_thread+0x244>)
    1822:	f023 fe37 	bl	25494 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1826:	4603      	mov	r3, r0
    1828:	2800      	cmp	r0, #0
    182a:	d141      	bne.n	18b0 <publisher_thread+0x204>
    182c:	4a31      	ldr	r2, [pc, #196]	; (18f4 <publisher_thread+0x248>)
    182e:	9201      	str	r2, [sp, #4]
    1830:	9300      	str	r3, [sp, #0]
    1832:	4b38      	ldr	r3, [pc, #224]	; (1914 <publisher_thread+0x268>)
    1834:	f44f 72bb 	mov.w	r2, #374	; 0x176
    1838:	492b      	ldr	r1, [pc, #172]	; (18e8 <publisher_thread+0x23c>)
    183a:	482c      	ldr	r0, [pc, #176]	; (18ec <publisher_thread+0x240>)
    183c:	f001 fba0 	bl	2f80 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1840:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1844:	f026 fe86 	bl	28554 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1848:	4829      	ldr	r0, [pc, #164]	; (18f0 <publisher_thread+0x244>)
    184a:	f023 fff9 	bl	25840 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    184e:	4603      	mov	r3, r0
    1850:	2800      	cmp	r0, #0
    1852:	d12f      	bne.n	18b4 <publisher_thread+0x208>
    1854:	4a27      	ldr	r2, [pc, #156]	; (18f4 <publisher_thread+0x248>)
    1856:	9201      	str	r2, [sp, #4]
    1858:	9300      	str	r3, [sp, #0]
    185a:	4b2f      	ldr	r3, [pc, #188]	; (1918 <publisher_thread+0x26c>)
    185c:	f240 127b 	movw	r2, #379	; 0x17b
    1860:	4921      	ldr	r1, [pc, #132]	; (18e8 <publisher_thread+0x23c>)
    1862:	4822      	ldr	r0, [pc, #136]	; (18ec <publisher_thread+0x240>)
    1864:	f001 fb8c 	bl	2f80 <printk>
    1868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    186c:	f026 fe72 	bl	28554 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1874:	4824      	ldr	r0, [pc, #144]	; (1908 <publisher_thread+0x25c>)
    1876:	f026 ffbf 	bl	287f8 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    187a:	b9a0      	cbnz	r0, 18a6 <publisher_thread+0x1fa>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    187c:	2101      	movs	r1, #1
    187e:	481c      	ldr	r0, [pc, #112]	; (18f0 <publisher_thread+0x244>)
    1880:	f023 ffcc 	bl	2581c <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    1884:	4605      	mov	r5, r0
    1886:	2800      	cmp	r0, #0
    1888:	f47f af47 	bne.w	171a <publisher_thread+0x6e>
    188c:	4b19      	ldr	r3, [pc, #100]	; (18f4 <publisher_thread+0x248>)
    188e:	9301      	str	r3, [sp, #4]
    1890:	9500      	str	r5, [sp, #0]
    1892:	4b22      	ldr	r3, [pc, #136]	; (191c <publisher_thread+0x270>)
    1894:	f44f 72a1 	mov.w	r2, #322	; 0x142
    1898:	4913      	ldr	r1, [pc, #76]	; (18e8 <publisher_thread+0x23c>)
    189a:	4814      	ldr	r0, [pc, #80]	; (18ec <publisher_thread+0x240>)
    189c:	f001 fb70 	bl	2f80 <printk>
		if (rc != 0) {
    18a0:	2d00      	cmp	r5, #0
    18a2:	f43f af4b 	beq.w	173c <publisher_thread+0x90>
	}


exit_pub:

	printk("\nPublisher terminated!!\n");
    18a6:	481e      	ldr	r0, [pc, #120]	; (1920 <publisher_thread+0x274>)
    18a8:	f001 fb6a 	bl	2f80 <printk>
}
    18ac:	b003      	add	sp, #12
    18ae:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    18b0:	4a0b      	ldr	r2, [pc, #44]	; (18e0 <publisher_thread+0x234>)
    18b2:	e7bc      	b.n	182e <publisher_thread+0x182>
		PRINT_RESULT("mqtt_close", rc);
    18b4:	4a0a      	ldr	r2, [pc, #40]	; (18e0 <publisher_thread+0x234>)
    18b6:	e7ce      	b.n	1856 <publisher_thread+0x1aa>
    18b8:	20000110 	.word	0x20000110
    18bc:	000015a9 	.word	0x000015a9
    18c0:	00001575 	.word	0x00001575
    18c4:	0000155d 	.word	0x0000155d
    18c8:	0002f044 	.word	0x0002f044
    18cc:	000014ed 	.word	0x000014ed
    18d0:	0002f060 	.word	0x0002f060
    18d4:	0002f078 	.word	0x0002f078
    18d8:	0002f084 	.word	0x0002f084
    18dc:	0002f094 	.word	0x0002f094
    18e0:	0002f03c 	.word	0x0002f03c
    18e4:	0002f0c0 	.word	0x0002f0c0
    18e8:	0002eedc 	.word	0x0002eedc
    18ec:	0002f0a8 	.word	0x0002f0a8
    18f0:	20000158 	.word	0x20000158
    18f4:	0002f038 	.word	0x0002f038
    18f8:	0002f0d0 	.word	0x0002f0d0
    18fc:	20000140 	.word	0x20000140
    1900:	20000210 	.word	0x20000210
    1904:	2000d068 	.word	0x2000d068
    1908:	2000cff4 	.word	0x2000cff4
    190c:	20000000 	.word	0x20000000
    1910:	0002f0e0 	.word	0x0002f0e0
    1914:	0002f0f0 	.word	0x0002f0f0
    1918:	0002f104 	.word	0x0002f104
    191c:	0002f09c 	.word	0x0002f09c
    1920:	0002f110 	.word	0x0002f110

00001924 <start_publisher>:


static void start_publisher()
{
    1924:	b500      	push	{lr}
    1926:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1928:	2300      	movs	r3, #0
    192a:	9305      	str	r3, [sp, #20]
    192c:	9304      	str	r3, [sp, #16]
    192e:	2205      	movs	r2, #5
    1930:	9203      	str	r2, [sp, #12]
    1932:	9302      	str	r3, [sp, #8]
    1934:	9301      	str	r3, [sp, #4]
    1936:	9300      	str	r3, [sp, #0]
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <start_publisher+0x28>)
    193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    193e:	4904      	ldr	r1, [pc, #16]	; (1950 <start_publisher+0x2c>)
    1940:	4804      	ldr	r0, [pc, #16]	; (1954 <start_publisher+0x30>)
    1942:	f027 f9c5 	bl	28cd0 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    1946:	b007      	add	sp, #28
    1948:	f85d fb04 	ldr.w	pc, [sp], #4
    194c:	000016ad 	.word	0x000016ad
    1950:	200033b0 	.word	0x200033b0
    1954:	200028dc 	.word	0x200028dc

00001958 <start_sensors>:
{
    1958:	b500      	push	{lr}
    195a:	b087      	sub	sp, #28
    195c:	2300      	movs	r3, #0
    195e:	9305      	str	r3, [sp, #20]
    1960:	9304      	str	r3, [sp, #16]
    1962:	2205      	movs	r2, #5
    1964:	9203      	str	r2, [sp, #12]
    1966:	9302      	str	r3, [sp, #8]
    1968:	9301      	str	r3, [sp, #4]
    196a:	9300      	str	r3, [sp, #0]
    196c:	4b04      	ldr	r3, [pc, #16]	; (1980 <start_sensors+0x28>)
    196e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1972:	4904      	ldr	r1, [pc, #16]	; (1984 <start_sensors+0x2c>)
    1974:	4804      	ldr	r0, [pc, #16]	; (1988 <start_sensors+0x30>)
    1976:	f027 f9ab 	bl	28cd0 <_impl_k_thread_create>
}
    197a:	b007      	add	sp, #28
    197c:	f85d fb04 	ldr.w	pc, [sp], #4
    1980:	00001439 	.word	0x00001439
    1984:	20002bb0 	.word	0x20002bb0
    1988:	20002874 	.word	0x20002874

0000198c <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    198c:	b508      	push	{r3, lr}
	start_publisher();
    198e:	f7ff ffc9 	bl	1924 <start_publisher>
	start_sensors();
    1992:	f7ff ffe1 	bl	1958 <start_sensors>
    1996:	bd08      	pop	{r3, pc}

00001998 <main>:
}


void main(void)
{
    1998:	b510      	push	{r4, lr}
	struct net_if *iface = net_if_get_default();
    199a:	f018 ff5f 	bl	1a85c <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    199e:	f3bf 8f5b 	dmb	ish
    19a2:	68c3      	ldr	r3, [r0, #12]
    19a4:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    19a8:	f013 0f01 	tst.w	r3, #1
    19ac:	d013      	beq.n	19d6 <main+0x3e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    19ae:	4c0e      	ldr	r4, [pc, #56]	; (19e8 <main+0x50>)
    19b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    19b4:	4620      	mov	r0, r4
    19b6:	f025 fee9 	bl	2778c <_impl_k_mutex_lock>
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	while (true) {
		k_mutex_lock(&pub_data, K_FOREVER);
		attributes_changed = true;
    19ba:	2201      	movs	r2, #1
    19bc:	4b0b      	ldr	r3, [pc, #44]	; (19ec <main+0x54>)
    19be:	701a      	strb	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    19c0:	4620      	mov	r0, r4
    19c2:	f025 ff4d 	bl	27860 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    19c6:	480a      	ldr	r0, [pc, #40]	; (19f0 <main+0x58>)
    19c8:	f026 ff03 	bl	287d2 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    19cc:	f242 7010 	movw	r0, #10000	; 0x2710
    19d0:	f026 fdc0 	bl	28554 <_impl_k_sleep>
    19d4:	e7eb      	b.n	19ae <main+0x16>
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    19d6:	4807      	ldr	r0, [pc, #28]	; (19f4 <main+0x5c>)
    19d8:	4b07      	ldr	r3, [pc, #28]	; (19f8 <main+0x60>)
    19da:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    19dc:	4b07      	ldr	r3, [pc, #28]	; (19fc <main+0x64>)
    19de:	6083      	str	r3, [r0, #8]
		net_mgmt_add_event_callback(&cb);
    19e0:	f020 fd7a 	bl	224d8 <net_mgmt_add_event_callback>
    19e4:	e7e3      	b.n	19ae <main+0x16>
    19e6:	bf00      	nop
    19e8:	2000d068 	.word	0x2000d068
    19ec:	20000000 	.word	0x20000000
    19f0:	2000cff4 	.word	0x2000cff4
    19f4:	20000004 	.word	0x20000004
    19f8:	0000198d 	.word	0x0000198d
    19fc:	d0010002 	.word	0xd0010002

00001a00 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1a00:	4b08      	ldr	r3, [pc, #32]	; (1a24 <_sbrk+0x24>)
    1a02:	681a      	ldr	r2, [r3, #0]
    1a04:	4b08      	ldr	r3, [pc, #32]	; (1a28 <_sbrk+0x28>)
    1a06:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1a08:	4410      	add	r0, r2
    1a0a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1a0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1a12:	4298      	cmp	r0, r3
    1a14:	d203      	bcs.n	1a1e <_sbrk+0x1e>
		heap_sz += count;
    1a16:	4b03      	ldr	r3, [pc, #12]	; (1a24 <_sbrk+0x24>)
    1a18:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    1a1a:	4608      	mov	r0, r1
    1a1c:	4770      	bx	lr
		return (void *)-1;
    1a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a22:	e7fa      	b.n	1a1a <_sbrk+0x1a>
    1a24:	2000022c 	.word	0x2000022c
    1a28:	2000d454 	.word	0x2000d454

00001a2c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1a30:	280a      	cmp	r0, #10
    1a32:	d007      	beq.n	1a44 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1a34:	4b07      	ldr	r3, [pc, #28]	; (1a54 <console_out+0x28>)
    1a36:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a38:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1a3a:	685b      	ldr	r3, [r3, #4]
    1a3c:	b2e1      	uxtb	r1, r4
    1a3e:	4798      	blx	r3

	return c;
}
    1a40:	4620      	mov	r0, r4
    1a42:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1a44:	4b03      	ldr	r3, [pc, #12]	; (1a54 <console_out+0x28>)
    1a46:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a48:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a4a:	685b      	ldr	r3, [r3, #4]
    1a4c:	210d      	movs	r1, #13
    1a4e:	4798      	blx	r3
    1a50:	e7f0      	b.n	1a34 <console_out+0x8>
    1a52:	bf00      	nop
    1a54:	20000250 	.word	0x20000250

00001a58 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1a58:	b510      	push	{r4, lr}
    1a5a:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a5c:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1a5e:	691b      	ldr	r3, [r3, #16]
    1a60:	b11b      	cbz	r3, 1a6a <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1a62:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1a64:	2800      	cmp	r0, #0
    1a66:	db02      	blt.n	1a6e <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1a68:	bd10      	pop	{r4, pc}
	}

	return 0;
    1a6a:	2000      	movs	r0, #0
    1a6c:	e7fa      	b.n	1a64 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a6e:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a72:	b123      	cbz	r3, 1a7e <read_uart+0x26>
		api->irq_rx_disable(dev);
    1a74:	4620      	mov	r0, r4
    1a76:	4798      	blx	r3
		return -EIO;
    1a78:	f06f 0004 	mvn.w	r0, #4
    1a7c:	bd10      	pop	{r4, pc}
    1a7e:	f06f 0004 	mvn.w	r0, #4
    1a82:	e7f1      	b.n	1a68 <read_uart+0x10>

00001a84 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1a84:	b500      	push	{lr}
    1a86:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1a88:	4b19      	ldr	r3, [pc, #100]	; (1af0 <console_input_init+0x6c>)
    1a8a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a8c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a90:	b103      	cbz	r3, 1a94 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1a92:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1a94:	4b16      	ldr	r3, [pc, #88]	; (1af0 <console_input_init+0x6c>)
    1a96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a98:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1a9a:	699b      	ldr	r3, [r3, #24]
    1a9c:	b103      	cbz	r3, 1aa0 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1a9e:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1aa0:	4b13      	ldr	r3, [pc, #76]	; (1af0 <console_input_init+0x6c>)
    1aa2:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1aa4:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1aa6:	b18b      	cbz	r3, 1acc <console_input_init+0x48>
    1aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1aaa:	b17b      	cbz	r3, 1acc <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1aac:	4911      	ldr	r1, [pc, #68]	; (1af4 <console_input_init+0x70>)
    1aae:	4798      	blx	r3
    1ab0:	e00c      	b.n	1acc <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1ab2:	2201      	movs	r2, #1
    1ab4:	f10d 0107 	add.w	r1, sp, #7
    1ab8:	4798      	blx	r3
    1aba:	e007      	b.n	1acc <console_input_init+0x48>
	return 0;
    1abc:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1abe:	b168      	cbz	r0, 1adc <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1ac0:	4b0b      	ldr	r3, [pc, #44]	; (1af0 <console_input_init+0x6c>)
    1ac2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ac4:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1ac6:	691b      	ldr	r3, [r3, #16]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d1f2      	bne.n	1ab2 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1acc:	4b08      	ldr	r3, [pc, #32]	; (1af0 <console_input_init+0x6c>)
    1ace:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ad0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d0f1      	beq.n	1abc <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1ad8:	4798      	blx	r3
    1ada:	e7f0      	b.n	1abe <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1adc:	4b04      	ldr	r3, [pc, #16]	; (1af0 <console_input_init+0x6c>)
    1ade:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ae0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1ae2:	6a1b      	ldr	r3, [r3, #32]
    1ae4:	b103      	cbz	r3, 1ae8 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1ae6:	4798      	blx	r3
}
    1ae8:	b003      	add	sp, #12
    1aea:	f85d fb04 	ldr.w	pc, [sp], #4
    1aee:	bf00      	nop
    1af0:	20000250 	.word	0x20000250
    1af4:	00001df1 	.word	0x00001df1

00001af8 <del_char>:
{
    1af8:	b570      	push	{r4, r5, r6, lr}
    1afa:	4606      	mov	r6, r0
    1afc:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1afe:	4b17      	ldr	r3, [pc, #92]	; (1b5c <del_char+0x64>)
    1b00:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b02:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b04:	685b      	ldr	r3, [r3, #4]
    1b06:	2108      	movs	r1, #8
    1b08:	4798      	blx	r3
	if (end == 0) {
    1b0a:	b11d      	cbz	r5, 1b14 <del_char+0x1c>
	printk("\x1b[s");
    1b0c:	4814      	ldr	r0, [pc, #80]	; (1b60 <del_char+0x68>)
    1b0e:	f001 fa37 	bl	2f80 <printk>
    1b12:	e014      	b.n	1b3e <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1b14:	4c11      	ldr	r4, [pc, #68]	; (1b5c <del_char+0x64>)
    1b16:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b18:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b1a:	685b      	ldr	r3, [r3, #4]
    1b1c:	2120      	movs	r1, #32
    1b1e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1b20:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b22:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b24:	685b      	ldr	r3, [r3, #4]
    1b26:	2108      	movs	r1, #8
    1b28:	4798      	blx	r3
    1b2a:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1b2c:	7871      	ldrb	r1, [r6, #1]
    1b2e:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1b32:	4b0a      	ldr	r3, [pc, #40]	; (1b5c <del_char+0x64>)
    1b34:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b36:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b38:	685b      	ldr	r3, [r3, #4]
    1b3a:	4798      	blx	r3
	while (end-- > 0) {
    1b3c:	4625      	mov	r5, r4
    1b3e:	1e6b      	subs	r3, r5, #1
    1b40:	b2dc      	uxtb	r4, r3
    1b42:	2d00      	cmp	r5, #0
    1b44:	d1f2      	bne.n	1b2c <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <del_char+0x64>)
    1b48:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b4a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b4c:	685b      	ldr	r3, [r3, #4]
    1b4e:	2120      	movs	r1, #32
    1b50:	4798      	blx	r3
	printk("\x1b[u");
    1b52:	4804      	ldr	r0, [pc, #16]	; (1b64 <del_char+0x6c>)
    1b54:	f001 fa14 	bl	2f80 <printk>
    1b58:	bd70      	pop	{r4, r5, r6, pc}
    1b5a:	bf00      	nop
    1b5c:	20000250 	.word	0x20000250
    1b60:	0002f12c 	.word	0x0002f12c
    1b64:	0002f130 	.word	0x0002f130

00001b68 <insert_char>:
{
    1b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b6c:	4605      	mov	r5, r0
    1b6e:	4688      	mov	r8, r1
    1b70:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1b72:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <insert_char+0x5c>)
    1b74:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b76:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b78:	685b      	ldr	r3, [r3, #4]
    1b7a:	4798      	blx	r3
	if (end == 0) {
    1b7c:	b91c      	cbnz	r4, 1b86 <insert_char+0x1e>
		*pos = c;
    1b7e:	f885 8000 	strb.w	r8, [r5]
		return;
    1b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1b86:	462e      	mov	r6, r5
    1b88:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1b8c:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1b90:	480d      	ldr	r0, [pc, #52]	; (1bc8 <insert_char+0x60>)
    1b92:	f001 f9f5 	bl	2f80 <printk>
    1b96:	e00c      	b.n	1bb2 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1b98:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <insert_char+0x5c>)
    1b9a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b9c:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b9e:	685b      	ldr	r3, [r3, #4]
    1ba0:	4639      	mov	r1, r7
    1ba2:	4798      	blx	r3
		c = *pos;
    1ba4:	4633      	mov	r3, r6
    1ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1baa:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1bac:	4617      	mov	r7, r2
	while (end-- > 0) {
    1bae:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1bb0:	461e      	mov	r6, r3
	while (end-- > 0) {
    1bb2:	1e63      	subs	r3, r4, #1
    1bb4:	b2dd      	uxtb	r5, r3
    1bb6:	2c00      	cmp	r4, #0
    1bb8:	d1ee      	bne.n	1b98 <insert_char+0x30>
	printk("\x1b[u");
    1bba:	4804      	ldr	r0, [pc, #16]	; (1bcc <insert_char+0x64>)
    1bbc:	f001 f9e0 	bl	2f80 <printk>
    1bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bc4:	20000250 	.word	0x20000250
    1bc8:	0002f12c 	.word	0x0002f12c
    1bcc:	0002f130 	.word	0x0002f130

00001bd0 <handle_ansi>:
{
    1bd0:	b538      	push	{r3, r4, r5, lr}
    1bd2:	4604      	mov	r4, r0
    1bd4:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bd6:	4b7f      	ldr	r3, [pc, #508]	; (1dd4 <handle_ansi+0x204>)
    1bd8:	f3bf 8f5b 	dmb	ish
    1bdc:	e853 2f00 	ldrex	r2, [r3]
    1be0:	f022 0104 	bic.w	r1, r2, #4
    1be4:	e843 1000 	strex	r0, r1, [r3]
    1be8:	2800      	cmp	r0, #0
    1bea:	d1f7      	bne.n	1bdc <handle_ansi+0xc>
    1bec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1bf0:	f012 0f04 	tst.w	r2, #4
    1bf4:	d03c      	beq.n	1c70 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1bf6:	f028 fea9 	bl	2a94c <__locale_ctype_ptr>
    1bfa:	4420      	add	r0, r4
    1bfc:	7843      	ldrb	r3, [r0, #1]
    1bfe:	f013 0f04 	tst.w	r3, #4
    1c02:	d121      	bne.n	1c48 <handle_ansi+0x78>
			ansi_val = 1;
    1c04:	2201      	movs	r2, #1
    1c06:	4b74      	ldr	r3, [pc, #464]	; (1dd8 <handle_ansi+0x208>)
    1c08:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1c0a:	2c46      	cmp	r4, #70	; 0x46
    1c0c:	f000 80d0 	beq.w	1db0 <handle_ansi+0x1e0>
    1c10:	f200 8086 	bhi.w	1d20 <handle_ansi+0x150>
    1c14:	2c43      	cmp	r4, #67	; 0x43
    1c16:	f000 80a7 	beq.w	1d68 <handle_ansi+0x198>
    1c1a:	2c44      	cmp	r4, #68	; 0x44
    1c1c:	d106      	bne.n	1c2c <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1c1e:	4b6f      	ldr	r3, [pc, #444]	; (1ddc <handle_ansi+0x20c>)
    1c20:	781b      	ldrb	r3, [r3, #0]
    1c22:	4a6d      	ldr	r2, [pc, #436]	; (1dd8 <handle_ansi+0x208>)
    1c24:	6811      	ldr	r1, [r2, #0]
    1c26:	428b      	cmp	r3, r1
    1c28:	f080 8092 	bcs.w	1d50 <handle_ansi+0x180>
    1c2c:	4b69      	ldr	r3, [pc, #420]	; (1dd4 <handle_ansi+0x204>)
    1c2e:	f3bf 8f5b 	dmb	ish
    1c32:	e853 2f00 	ldrex	r2, [r3]
    1c36:	f022 0202 	bic.w	r2, r2, #2
    1c3a:	e843 2100 	strex	r1, r2, [r3]
    1c3e:	2900      	cmp	r1, #0
    1c40:	d1f7      	bne.n	1c32 <handle_ansi+0x62>
    1c42:	f3bf 8f5b 	dmb	ish
    1c46:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c48:	4b62      	ldr	r3, [pc, #392]	; (1dd4 <handle_ansi+0x204>)
    1c4a:	f3bf 8f5b 	dmb	ish
    1c4e:	e853 2f00 	ldrex	r2, [r3]
    1c52:	f042 0208 	orr.w	r2, r2, #8
    1c56:	e843 2100 	strex	r1, r2, [r3]
    1c5a:	2900      	cmp	r1, #0
    1c5c:	d1f7      	bne.n	1c4e <handle_ansi+0x7e>
    1c5e:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1c62:	3c30      	subs	r4, #48	; 0x30
    1c64:	4b5c      	ldr	r3, [pc, #368]	; (1dd8 <handle_ansi+0x208>)
    1c66:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1c68:	2200      	movs	r2, #0
    1c6a:	4b5d      	ldr	r3, [pc, #372]	; (1de0 <handle_ansi+0x210>)
    1c6c:	601a      	str	r2, [r3, #0]
		return;
    1c6e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c70:	f3bf 8f5b 	dmb	ish
    1c74:	4b57      	ldr	r3, [pc, #348]	; (1dd4 <handle_ansi+0x204>)
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1c7c:	f013 0f08 	tst.w	r3, #8
    1c80:	d0c3      	beq.n	1c0a <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1c82:	f028 fe63 	bl	2a94c <__locale_ctype_ptr>
    1c86:	4420      	add	r0, r4
    1c88:	7843      	ldrb	r3, [r0, #1]
    1c8a:	f013 0f04 	tst.w	r3, #4
    1c8e:	d11b      	bne.n	1cc8 <handle_ansi+0xf8>
		if (byte == ';' &&
    1c90:	2c3b      	cmp	r4, #59	; 0x3b
    1c92:	d034      	beq.n	1cfe <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c94:	4b4f      	ldr	r3, [pc, #316]	; (1dd4 <handle_ansi+0x204>)
    1c96:	f3bf 8f5b 	dmb	ish
    1c9a:	e853 2f00 	ldrex	r2, [r3]
    1c9e:	f022 0208 	bic.w	r2, r2, #8
    1ca2:	e843 2100 	strex	r1, r2, [r3]
    1ca6:	2900      	cmp	r1, #0
    1ca8:	d1f7      	bne.n	1c9a <handle_ansi+0xca>
    1caa:	f3bf 8f5b 	dmb	ish
    1cae:	f3bf 8f5b 	dmb	ish
    1cb2:	e853 2f00 	ldrex	r2, [r3]
    1cb6:	f022 0210 	bic.w	r2, r2, #16
    1cba:	e843 2100 	strex	r1, r2, [r3]
    1cbe:	2900      	cmp	r1, #0
    1cc0:	d1f7      	bne.n	1cb2 <handle_ansi+0xe2>
    1cc2:	f3bf 8f5b 	dmb	ish
    1cc6:	e7a0      	b.n	1c0a <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1cc8:	f3bf 8f5b 	dmb	ish
    1ccc:	4b41      	ldr	r3, [pc, #260]	; (1dd4 <handle_ansi+0x204>)
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1cd4:	f013 0f10 	tst.w	r3, #16
    1cd8:	d008      	beq.n	1cec <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1cda:	4941      	ldr	r1, [pc, #260]	; (1de0 <handle_ansi+0x210>)
    1cdc:	680a      	ldr	r2, [r1, #0]
    1cde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1ce2:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1ce4:	4423      	add	r3, r4
    1ce6:	3b30      	subs	r3, #48	; 0x30
    1ce8:	600b      	str	r3, [r1, #0]
    1cea:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1cec:	493a      	ldr	r1, [pc, #232]	; (1dd8 <handle_ansi+0x208>)
    1cee:	680a      	ldr	r2, [r1, #0]
    1cf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cf4:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1cf6:	4423      	add	r3, r4
    1cf8:	3b30      	subs	r3, #48	; 0x30
    1cfa:	600b      	str	r3, [r1, #0]
    1cfc:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1cfe:	4b35      	ldr	r3, [pc, #212]	; (1dd4 <handle_ansi+0x204>)
    1d00:	f3bf 8f5b 	dmb	ish
    1d04:	e853 2f00 	ldrex	r2, [r3]
    1d08:	f042 0110 	orr.w	r1, r2, #16
    1d0c:	e843 1000 	strex	r0, r1, [r3]
    1d10:	2800      	cmp	r0, #0
    1d12:	d1f7      	bne.n	1d04 <handle_ansi+0x134>
    1d14:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1d18:	f012 0f10 	tst.w	r2, #16
    1d1c:	d1ba      	bne.n	1c94 <handle_ansi+0xc4>
    1d1e:	e792      	b.n	1c46 <handle_ansi+0x76>
	switch (byte) {
    1d20:	2c48      	cmp	r4, #72	; 0x48
    1d22:	d034      	beq.n	1d8e <handle_ansi+0x1be>
    1d24:	2c7e      	cmp	r4, #126	; 0x7e
    1d26:	d181      	bne.n	1c2c <handle_ansi+0x5c>
		if (!end) {
    1d28:	4b2e      	ldr	r3, [pc, #184]	; (1de4 <handle_ansi+0x214>)
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	f43f af7d 	beq.w	1c2c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d32:	2101      	movs	r1, #1
    1d34:	482c      	ldr	r0, [pc, #176]	; (1de8 <handle_ansi+0x218>)
    1d36:	f001 f923 	bl	2f80 <printk>
		del_char(&line[cur], --end);
    1d3a:	4b28      	ldr	r3, [pc, #160]	; (1ddc <handle_ansi+0x20c>)
    1d3c:	7818      	ldrb	r0, [r3, #0]
    1d3e:	4b29      	ldr	r3, [pc, #164]	; (1de4 <handle_ansi+0x214>)
    1d40:	7819      	ldrb	r1, [r3, #0]
    1d42:	3901      	subs	r1, #1
    1d44:	b2c9      	uxtb	r1, r1
    1d46:	7019      	strb	r1, [r3, #0]
    1d48:	4428      	add	r0, r5
    1d4a:	f7ff fed5 	bl	1af8 <del_char>
		break;
    1d4e:	e76d      	b.n	1c2c <handle_ansi+0x5c>
		end += ansi_val;
    1d50:	b2c8      	uxtb	r0, r1
    1d52:	4c24      	ldr	r4, [pc, #144]	; (1de4 <handle_ansi+0x214>)
    1d54:	7822      	ldrb	r2, [r4, #0]
    1d56:	4402      	add	r2, r0
    1d58:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1d5a:	1a1b      	subs	r3, r3, r0
    1d5c:	4a1f      	ldr	r2, [pc, #124]	; (1ddc <handle_ansi+0x20c>)
    1d5e:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1d60:	4822      	ldr	r0, [pc, #136]	; (1dec <handle_ansi+0x21c>)
    1d62:	f001 f90d 	bl	2f80 <printk>
    1d66:	e761      	b.n	1c2c <handle_ansi+0x5c>
		if (ansi_val > end) {
    1d68:	4b1e      	ldr	r3, [pc, #120]	; (1de4 <handle_ansi+0x214>)
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	4a1a      	ldr	r2, [pc, #104]	; (1dd8 <handle_ansi+0x208>)
    1d6e:	6811      	ldr	r1, [r2, #0]
    1d70:	428b      	cmp	r3, r1
    1d72:	f4ff af5b 	bcc.w	1c2c <handle_ansi+0x5c>
		end -= ansi_val;
    1d76:	b2ca      	uxtb	r2, r1
    1d78:	1a9b      	subs	r3, r3, r2
    1d7a:	481a      	ldr	r0, [pc, #104]	; (1de4 <handle_ansi+0x214>)
    1d7c:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1d7e:	4b17      	ldr	r3, [pc, #92]	; (1ddc <handle_ansi+0x20c>)
    1d80:	7818      	ldrb	r0, [r3, #0]
    1d82:	4402      	add	r2, r0
    1d84:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1d86:	4818      	ldr	r0, [pc, #96]	; (1de8 <handle_ansi+0x218>)
    1d88:	f001 f8fa 	bl	2f80 <printk>
    1d8c:	e74e      	b.n	1c2c <handle_ansi+0x5c>
		if (!cur) {
    1d8e:	4b13      	ldr	r3, [pc, #76]	; (1ddc <handle_ansi+0x20c>)
    1d90:	7819      	ldrb	r1, [r3, #0]
    1d92:	2900      	cmp	r1, #0
    1d94:	f43f af4a 	beq.w	1c2c <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1d98:	4814      	ldr	r0, [pc, #80]	; (1dec <handle_ansi+0x21c>)
    1d9a:	f001 f8f1 	bl	2f80 <printk>
		end += cur;
    1d9e:	4911      	ldr	r1, [pc, #68]	; (1de4 <handle_ansi+0x214>)
    1da0:	4a0e      	ldr	r2, [pc, #56]	; (1ddc <handle_ansi+0x20c>)
    1da2:	780b      	ldrb	r3, [r1, #0]
    1da4:	7810      	ldrb	r0, [r2, #0]
    1da6:	4403      	add	r3, r0
    1da8:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1daa:	2300      	movs	r3, #0
    1dac:	7013      	strb	r3, [r2, #0]
		break;
    1dae:	e73d      	b.n	1c2c <handle_ansi+0x5c>
		if (!end) {
    1db0:	4b0c      	ldr	r3, [pc, #48]	; (1de4 <handle_ansi+0x214>)
    1db2:	7819      	ldrb	r1, [r3, #0]
    1db4:	2900      	cmp	r1, #0
    1db6:	f43f af39 	beq.w	1c2c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1dba:	480b      	ldr	r0, [pc, #44]	; (1de8 <handle_ansi+0x218>)
    1dbc:	f001 f8e0 	bl	2f80 <printk>
		cur += end;
    1dc0:	4906      	ldr	r1, [pc, #24]	; (1ddc <handle_ansi+0x20c>)
    1dc2:	4a08      	ldr	r2, [pc, #32]	; (1de4 <handle_ansi+0x214>)
    1dc4:	780b      	ldrb	r3, [r1, #0]
    1dc6:	7810      	ldrb	r0, [r2, #0]
    1dc8:	4403      	add	r3, r0
    1dca:	700b      	strb	r3, [r1, #0]
		end = 0;
    1dcc:	2300      	movs	r3, #0
    1dce:	7013      	strb	r3, [r2, #0]
		break;
    1dd0:	e72c      	b.n	1c2c <handle_ansi+0x5c>
    1dd2:	bf00      	nop
    1dd4:	20000248 	.word	0x20000248
    1dd8:	20000230 	.word	0x20000230
    1ddc:	20000244 	.word	0x20000244
    1de0:	20000234 	.word	0x20000234
    1de4:	20000245 	.word	0x20000245
    1de8:	0002f13c 	.word	0x0002f13c
    1dec:	0002f134 	.word	0x0002f134

00001df0 <uart_console_isr>:
{
    1df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1df4:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1df6:	e001      	b.n	1dfc <uart_console_isr+0xc>
	return 0;
    1df8:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1dfa:	b9d8      	cbnz	r0, 1e34 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1dfc:	4b78      	ldr	r3, [pc, #480]	; (1fe0 <uart_console_isr+0x1f0>)
    1dfe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e00:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e04:	2b00      	cmp	r3, #0
    1e06:	f000 80e7 	beq.w	1fd8 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1e0a:	4798      	blx	r3
    1e0c:	2800      	cmp	r0, #0
    1e0e:	d037      	beq.n	1e80 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1e10:	4b73      	ldr	r3, [pc, #460]	; (1fe0 <uart_console_isr+0x1f0>)
    1e12:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e14:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e18:	2b00      	cmp	r3, #0
    1e1a:	f000 80df 	beq.w	1fdc <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1e1e:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1e20:	2800      	cmp	r0, #0
    1e22:	d02d      	beq.n	1e80 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1e24:	4b6e      	ldr	r3, [pc, #440]	; (1fe0 <uart_console_isr+0x1f0>)
    1e26:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e28:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d0e3      	beq.n	1df8 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1e30:	4798      	blx	r3
    1e32:	e7e2      	b.n	1dfa <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1e34:	2201      	movs	r2, #1
    1e36:	f10d 0107 	add.w	r1, sp, #7
    1e3a:	4b69      	ldr	r3, [pc, #420]	; (1fe0 <uart_console_isr+0x1f0>)
    1e3c:	6818      	ldr	r0, [r3, #0]
    1e3e:	f7ff fe0b 	bl	1a58 <read_uart>
		if (rx < 0) {
    1e42:	2800      	cmp	r0, #0
    1e44:	db1c      	blt.n	1e80 <uart_console_isr+0x90>
		if (!cmd) {
    1e46:	4b67      	ldr	r3, [pc, #412]	; (1fe4 <uart_console_isr+0x1f4>)
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	b183      	cbz	r3, 1e6e <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e4c:	f3bf 8f5b 	dmb	ish
    1e50:	4b65      	ldr	r3, [pc, #404]	; (1fe8 <uart_console_isr+0x1f8>)
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1e58:	f013 0f02 	tst.w	r3, #2
    1e5c:	d013      	beq.n	1e86 <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1e5e:	4b61      	ldr	r3, [pc, #388]	; (1fe4 <uart_console_isr+0x1f4>)
    1e60:	6819      	ldr	r1, [r3, #0]
    1e62:	3104      	adds	r1, #4
    1e64:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e68:	f7ff feb2 	bl	1bd0 <handle_ansi>
			continue;
    1e6c:	e7c6      	b.n	1dfc <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1e6e:	2100      	movs	r1, #0
    1e70:	4b5e      	ldr	r3, [pc, #376]	; (1fec <uart_console_isr+0x1fc>)
    1e72:	6818      	ldr	r0, [r3, #0]
    1e74:	f026 f93e 	bl	280f4 <k_queue_get>
    1e78:	4b5a      	ldr	r3, [pc, #360]	; (1fe4 <uart_console_isr+0x1f4>)
    1e7a:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1e7c:	2800      	cmp	r0, #0
    1e7e:	d1e5      	bne.n	1e4c <uart_console_isr+0x5c>
}
    1e80:	b002      	add	sp, #8
    1e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e86:	4b58      	ldr	r3, [pc, #352]	; (1fe8 <uart_console_isr+0x1f8>)
    1e88:	f3bf 8f5b 	dmb	ish
    1e8c:	e853 2f00 	ldrex	r2, [r3]
    1e90:	f022 0101 	bic.w	r1, r2, #1
    1e94:	e843 1000 	strex	r0, r1, [r3]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d1f7      	bne.n	1e8c <uart_console_isr+0x9c>
    1e9c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1ea0:	f012 0f01 	tst.w	r2, #1
    1ea4:	d01d      	beq.n	1ee2 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1eaa:	2b5b      	cmp	r3, #91	; 0x5b
    1eac:	d1a6      	bne.n	1dfc <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1eae:	4b4e      	ldr	r3, [pc, #312]	; (1fe8 <uart_console_isr+0x1f8>)
    1eb0:	f3bf 8f5b 	dmb	ish
    1eb4:	e853 2f00 	ldrex	r2, [r3]
    1eb8:	f042 0202 	orr.w	r2, r2, #2
    1ebc:	e843 2100 	strex	r1, r2, [r3]
    1ec0:	2900      	cmp	r1, #0
    1ec2:	d1f7      	bne.n	1eb4 <uart_console_isr+0xc4>
    1ec4:	f3bf 8f5b 	dmb	ish
    1ec8:	f3bf 8f5b 	dmb	ish
    1ecc:	e853 2f00 	ldrex	r2, [r3]
    1ed0:	f042 0204 	orr.w	r2, r2, #4
    1ed4:	e843 2100 	strex	r1, r2, [r3]
    1ed8:	2900      	cmp	r1, #0
    1eda:	d1f7      	bne.n	1ecc <uart_console_isr+0xdc>
    1edc:	f3bf 8f5b 	dmb	ish
			continue;
    1ee0:	e78c      	b.n	1dfc <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1ee2:	f028 fd33 	bl	2a94c <__locale_ctype_ptr>
    1ee6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1eea:	4408      	add	r0, r1
    1eec:	7843      	ldrb	r3, [r0, #1]
    1eee:	f013 0f97 	tst.w	r3, #151	; 0x97
    1ef2:	d15f      	bne.n	1fb4 <uart_console_isr+0x1c4>
			switch (byte) {
    1ef4:	290d      	cmp	r1, #13
    1ef6:	d03c      	beq.n	1f72 <uart_console_isr+0x182>
    1ef8:	d916      	bls.n	1f28 <uart_console_isr+0x138>
    1efa:	291b      	cmp	r1, #27
    1efc:	d02b      	beq.n	1f56 <uart_console_isr+0x166>
    1efe:	297f      	cmp	r1, #127	; 0x7f
    1f00:	f47f af7c 	bne.w	1dfc <uart_console_isr+0xc>
				if (cur > 0) {
    1f04:	4b3a      	ldr	r3, [pc, #232]	; (1ff0 <uart_console_isr+0x200>)
    1f06:	781b      	ldrb	r3, [r3, #0]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	f43f af77 	beq.w	1dfc <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1f0e:	4a35      	ldr	r2, [pc, #212]	; (1fe4 <uart_console_isr+0x1f4>)
    1f10:	6812      	ldr	r2, [r2, #0]
    1f12:	3b01      	subs	r3, #1
    1f14:	b2db      	uxtb	r3, r3
    1f16:	4936      	ldr	r1, [pc, #216]	; (1ff0 <uart_console_isr+0x200>)
    1f18:	700b      	strb	r3, [r1, #0]
    1f1a:	4413      	add	r3, r2
    1f1c:	4a35      	ldr	r2, [pc, #212]	; (1ff4 <uart_console_isr+0x204>)
    1f1e:	7811      	ldrb	r1, [r2, #0]
    1f20:	1d18      	adds	r0, r3, #4
    1f22:	f7ff fde9 	bl	1af8 <del_char>
    1f26:	e769      	b.n	1dfc <uart_console_isr+0xc>
			switch (byte) {
    1f28:	2909      	cmp	r1, #9
    1f2a:	f47f af67 	bne.w	1dfc <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1f2e:	4b32      	ldr	r3, [pc, #200]	; (1ff8 <uart_console_isr+0x208>)
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	2b00      	cmp	r3, #0
    1f34:	f43f af62 	beq.w	1dfc <uart_console_isr+0xc>
    1f38:	4a2e      	ldr	r2, [pc, #184]	; (1ff4 <uart_console_isr+0x204>)
    1f3a:	7812      	ldrb	r2, [r2, #0]
    1f3c:	2a00      	cmp	r2, #0
    1f3e:	f47f af5d 	bne.w	1dfc <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1f42:	4a28      	ldr	r2, [pc, #160]	; (1fe4 <uart_console_isr+0x1f4>)
    1f44:	6810      	ldr	r0, [r2, #0]
    1f46:	4c2a      	ldr	r4, [pc, #168]	; (1ff0 <uart_console_isr+0x200>)
    1f48:	7821      	ldrb	r1, [r4, #0]
    1f4a:	3004      	adds	r0, #4
    1f4c:	4798      	blx	r3
    1f4e:	7823      	ldrb	r3, [r4, #0]
    1f50:	4403      	add	r3, r0
    1f52:	7023      	strb	r3, [r4, #0]
			continue;
    1f54:	e752      	b.n	1dfc <uart_console_isr+0xc>
    1f56:	4b24      	ldr	r3, [pc, #144]	; (1fe8 <uart_console_isr+0x1f8>)
    1f58:	f3bf 8f5b 	dmb	ish
    1f5c:	e853 2f00 	ldrex	r2, [r3]
    1f60:	f042 0201 	orr.w	r2, r2, #1
    1f64:	e843 2100 	strex	r1, r2, [r3]
    1f68:	2900      	cmp	r1, #0
    1f6a:	d1f7      	bne.n	1f5c <uart_console_isr+0x16c>
    1f6c:	f3bf 8f5b 	dmb	ish
    1f70:	e744      	b.n	1dfc <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1f72:	4d1c      	ldr	r5, [pc, #112]	; (1fe4 <uart_console_isr+0x1f4>)
    1f74:	682b      	ldr	r3, [r5, #0]
    1f76:	4f1e      	ldr	r7, [pc, #120]	; (1ff0 <uart_console_isr+0x200>)
    1f78:	783a      	ldrb	r2, [r7, #0]
    1f7a:	4e1e      	ldr	r6, [pc, #120]	; (1ff4 <uart_console_isr+0x204>)
    1f7c:	7831      	ldrb	r1, [r6, #0]
    1f7e:	440a      	add	r2, r1
    1f80:	4413      	add	r3, r2
    1f82:	2400      	movs	r4, #0
    1f84:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1f86:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1fe0 <uart_console_isr+0x1f0>
    1f8a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f8e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f90:	685b      	ldr	r3, [r3, #4]
    1f92:	210d      	movs	r1, #13
    1f94:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1f96:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f9a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f9c:	685b      	ldr	r3, [r3, #4]
    1f9e:	210a      	movs	r1, #10
    1fa0:	4798      	blx	r3
				cur = 0;
    1fa2:	703c      	strb	r4, [r7, #0]
				end = 0;
    1fa4:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1fa6:	6829      	ldr	r1, [r5, #0]
    1fa8:	4b14      	ldr	r3, [pc, #80]	; (1ffc <uart_console_isr+0x20c>)
    1faa:	6818      	ldr	r0, [r3, #0]
    1fac:	f026 f87a 	bl	280a4 <k_queue_append>
				cmd = NULL;
    1fb0:	602c      	str	r4, [r5, #0]
				break;
    1fb2:	e723      	b.n	1dfc <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1fb4:	4b0e      	ldr	r3, [pc, #56]	; (1ff0 <uart_console_isr+0x200>)
    1fb6:	781b      	ldrb	r3, [r3, #0]
    1fb8:	4a0e      	ldr	r2, [pc, #56]	; (1ff4 <uart_console_isr+0x204>)
    1fba:	7812      	ldrb	r2, [r2, #0]
    1fbc:	18d0      	adds	r0, r2, r3
    1fbe:	287e      	cmp	r0, #126	; 0x7e
    1fc0:	f63f af1c 	bhi.w	1dfc <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1fc4:	4807      	ldr	r0, [pc, #28]	; (1fe4 <uart_console_isr+0x1f4>)
    1fc6:	6800      	ldr	r0, [r0, #0]
    1fc8:	1c5d      	adds	r5, r3, #1
    1fca:	4c09      	ldr	r4, [pc, #36]	; (1ff0 <uart_console_isr+0x200>)
    1fcc:	7025      	strb	r5, [r4, #0]
    1fce:	4418      	add	r0, r3
    1fd0:	3004      	adds	r0, #4
    1fd2:	f7ff fdc9 	bl	1b68 <insert_char>
    1fd6:	e711      	b.n	1dfc <uart_console_isr+0xc>
	return 0;
    1fd8:	2000      	movs	r0, #0
    1fda:	e717      	b.n	1e0c <uart_console_isr+0x1c>
	return 0;
    1fdc:	2000      	movs	r0, #0
    1fde:	e71f      	b.n	1e20 <uart_console_isr+0x30>
    1fe0:	20000250 	.word	0x20000250
    1fe4:	2000023c 	.word	0x2000023c
    1fe8:	20000248 	.word	0x20000248
    1fec:	20000238 	.word	0x20000238
    1ff0:	20000244 	.word	0x20000244
    1ff4:	20000245 	.word	0x20000245
    1ff8:	20000240 	.word	0x20000240
    1ffc:	2000024c 	.word	0x2000024c

00002000 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    2000:	b508      	push	{r3, lr}
	avail_queue = avail;
    2002:	4b04      	ldr	r3, [pc, #16]	; (2014 <uart_register_input+0x14>)
    2004:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    2006:	4b04      	ldr	r3, [pc, #16]	; (2018 <uart_register_input+0x18>)
    2008:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <uart_register_input+0x1c>)
    200c:	601a      	str	r2, [r3, #0]

	console_input_init();
    200e:	f7ff fd39 	bl	1a84 <console_input_init>
    2012:	bd08      	pop	{r3, pc}
    2014:	20000238 	.word	0x20000238
    2018:	2000024c 	.word	0x2000024c
    201c:	20000240 	.word	0x20000240

00002020 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    2020:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2022:	4802      	ldr	r0, [pc, #8]	; (202c <uart_console_hook_install+0xc>)
    2024:	f000 fe70 	bl	2d08 <__printk_hook_install>
    2028:	bd08      	pop	{r3, pc}
    202a:	bf00      	nop
    202c:	00001a2d 	.word	0x00001a2d

00002030 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2030:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2032:	4804      	ldr	r0, [pc, #16]	; (2044 <uart_console_init+0x14>)
    2034:	f025 f906 	bl	27244 <device_get_binding>
    2038:	4b03      	ldr	r3, [pc, #12]	; (2048 <uart_console_init+0x18>)
    203a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    203c:	f7ff fff0 	bl	2020 <uart_console_hook_install>

	return 0;
}
    2040:	2000      	movs	r0, #0
    2042:	bd08      	pop	{r3, pc}
    2044:	0002f144 	.word	0x0002f144
    2048:	20000250 	.word	0x20000250

0000204c <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    204c:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    204e:	f000 fa73 	bl	2538 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2052:	4b08      	ldr	r3, [pc, #32]	; (2074 <sys_rand32_get+0x28>)
    2054:	f3bf 8f5b 	dmb	ish
    2058:	e853 2f00 	ldrex	r2, [r3]
    205c:	4906      	ldr	r1, [pc, #24]	; (2078 <sys_rand32_get+0x2c>)
    205e:	1851      	adds	r1, r2, r1
    2060:	e843 1e00 	strex	lr, r1, [r3]
    2064:	f1be 0f00 	cmp.w	lr, #0
    2068:	d1f6      	bne.n	2058 <sys_rand32_get+0xc>
    206a:	f3bf 8f5b 	dmb	ish
}
    206e:	4410      	add	r0, r2
    2070:	bd08      	pop	{r3, pc}
    2072:	bf00      	nop
    2074:	20000254 	.word	0x20000254
    2078:	3b9aca0d 	.word	0x3b9aca0d

0000207c <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    207c:	6803      	ldr	r3, [r0, #0]
    207e:	689b      	ldr	r3, [r3, #8]
    2080:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    2082:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2086:	d05b      	beq.n	2140 <baudrate_set+0xc4>
    2088:	d910      	bls.n	20ac <baudrate_set+0x30>
    208a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    208e:	d05e      	beq.n	214e <baudrate_set+0xd2>
    2090:	d833      	bhi.n	20fa <baudrate_set+0x7e>
    2092:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2096:	d055      	beq.n	2144 <baudrate_set+0xc8>
    2098:	d929      	bls.n	20ee <baudrate_set+0x72>
    209a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    209e:	d054      	beq.n	214a <baudrate_set+0xce>
    20a0:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    20a4:	d11b      	bne.n	20de <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    20a6:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    20aa:	e03b      	b.n	2124 <baudrate_set+0xa8>
	switch (baudrate) {
    20ac:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    20b0:	d03f      	beq.n	2132 <baudrate_set+0xb6>
    20b2:	d90b      	bls.n	20cc <baudrate_set+0x50>
    20b4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    20b8:	d03e      	beq.n	2138 <baudrate_set+0xbc>
    20ba:	d913      	bls.n	20e4 <baudrate_set+0x68>
    20bc:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    20c0:	d03c      	beq.n	213c <baudrate_set+0xc0>
    20c2:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    20c6:	d10a      	bne.n	20de <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    20c8:	4a27      	ldr	r2, [pc, #156]	; (2168 <baudrate_set+0xec>)
		break;
    20ca:	e02b      	b.n	2124 <baudrate_set+0xa8>
	switch (baudrate) {
    20cc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    20d0:	d046      	beq.n	2160 <baudrate_set+0xe4>
    20d2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    20d6:	d029      	beq.n	212c <baudrate_set+0xb0>
    20d8:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    20dc:	d020      	beq.n	2120 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    20de:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    20e2:	4770      	bx	lr
	switch (baudrate) {
    20e4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    20e8:	d1f9      	bne.n	20de <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    20ea:	4a20      	ldr	r2, [pc, #128]	; (216c <baudrate_set+0xf0>)
		break;
    20ec:	e01a      	b.n	2124 <baudrate_set+0xa8>
	switch (baudrate) {
    20ee:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    20f2:	d1f4      	bne.n	20de <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    20f4:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    20f8:	e014      	b.n	2124 <baudrate_set+0xa8>
	switch (baudrate) {
    20fa:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    20fe:	d029      	beq.n	2154 <baudrate_set+0xd8>
    2100:	d908      	bls.n	2114 <baudrate_set+0x98>
    2102:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2106:	d028      	beq.n	215a <baudrate_set+0xde>
    2108:	4a19      	ldr	r2, [pc, #100]	; (2170 <baudrate_set+0xf4>)
    210a:	4291      	cmp	r1, r2
    210c:	d1e7      	bne.n	20de <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    2112:	e007      	b.n	2124 <baudrate_set+0xa8>
	switch (baudrate) {
    2114:	4a17      	ldr	r2, [pc, #92]	; (2174 <baudrate_set+0xf8>)
    2116:	4291      	cmp	r1, r2
    2118:	d1e1      	bne.n	20de <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    211a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    211e:	e001      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2120:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2124:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    2128:	2000      	movs	r0, #0
    212a:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    212c:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2130:	e7f8      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    2132:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    2136:	e7f5      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2138:	4a0f      	ldr	r2, [pc, #60]	; (2178 <baudrate_set+0xfc>)
		break;
    213a:	e7f3      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    213c:	4a0f      	ldr	r2, [pc, #60]	; (217c <baudrate_set+0x100>)
		break;
    213e:	e7f1      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2140:	4a0f      	ldr	r2, [pc, #60]	; (2180 <baudrate_set+0x104>)
		break;
    2142:	e7ef      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    2144:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    2148:	e7ec      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    214a:	4a0e      	ldr	r2, [pc, #56]	; (2184 <baudrate_set+0x108>)
		break;
    214c:	e7ea      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    214e:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    2152:	e7e7      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    2154:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    2158:	e7e4      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    215a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    215e:	e7e1      	b.n	2124 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2160:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    2164:	e7de      	b.n	2124 <baudrate_set+0xa8>
    2166:	bf00      	nop
    2168:	004ea000 	.word	0x004ea000
    216c:	0013b000 	.word	0x0013b000
    2170:	000f4240 	.word	0x000f4240
    2174:	0003d090 	.word	0x0003d090
    2178:	00275000 	.word	0x00275000
    217c:	003af000 	.word	0x003af000
    2180:	0075c000 	.word	0x0075c000
    2184:	013a9000 	.word	0x013a9000

00002188 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2188:	6803      	ldr	r3, [r0, #0]
    218a:	689b      	ldr	r3, [r3, #8]
    218c:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    218e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2192:	b132      	cbz	r2, 21a2 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2194:	2000      	movs	r0, #0
    2196:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    219a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    219e:	700b      	strb	r3, [r1, #0]

	return 0;
    21a0:	4770      	bx	lr
		return -1;
    21a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    21a6:	4770      	bx	lr

000021a8 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21a8:	6803      	ldr	r3, [r0, #0]
    21aa:	689b      	ldr	r3, [r3, #8]
    21ac:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    21ae:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    21b2:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    21b6:	2b00      	cmp	r3, #0
    21b8:	d0fb      	beq.n	21b2 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    21ba:	2300      	movs	r3, #0
    21bc:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    21c0:	4608      	mov	r0, r1
    21c2:	4770      	bx	lr

000021c4 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21c4:	6803      	ldr	r3, [r0, #0]
    21c6:	689b      	ldr	r3, [r3, #8]
    21c8:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    21ca:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    21ce:	b132      	cbz	r2, 21de <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    21d0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    21d4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    21d8:	f000 000f 	and.w	r0, r0, #15
    21dc:	4770      	bx	lr
	u32_t error = 0;
    21de:	2000      	movs	r0, #0
    21e0:	e7fa      	b.n	21d8 <uart_nrf5_err_check+0x14>

000021e2 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    21e2:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21e4:	6803      	ldr	r3, [r0, #0]
    21e6:	689b      	ldr	r3, [r3, #8]
    21e8:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    21ea:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21ec:	e007      	b.n	21fe <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    21ee:	2000      	movs	r0, #0
    21f0:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    21f4:	1c58      	adds	r0, r3, #1
    21f6:	5ccb      	ldrb	r3, [r1, r3]
    21f8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    21fc:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21fe:	4618      	mov	r0, r3
    2200:	1ad5      	subs	r5, r2, r3
    2202:	2d00      	cmp	r5, #0
    2204:	dd03      	ble.n	220e <uart_nrf5_fifo_fill+0x2c>
    2206:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    220a:	2d00      	cmp	r5, #0
    220c:	d1ef      	bne.n	21ee <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    220e:	bc30      	pop	{r4, r5}
    2210:	4770      	bx	lr

00002212 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2212:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2214:	6803      	ldr	r3, [r0, #0]
    2216:	689b      	ldr	r3, [r3, #8]
    2218:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    221a:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    221c:	e007      	b.n	222e <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    221e:	2000      	movs	r0, #0
    2220:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2224:	1c58      	adds	r0, r3, #1
    2226:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    222a:	54cd      	strb	r5, [r1, r3]
    222c:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    222e:	4618      	mov	r0, r3
    2230:	1ad5      	subs	r5, r2, r3
    2232:	2d00      	cmp	r5, #0
    2234:	dd03      	ble.n	223e <uart_nrf5_fifo_read+0x2c>
    2236:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    223a:	2d00      	cmp	r5, #0
    223c:	d1ef      	bne.n	221e <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    223e:	bc30      	pop	{r4, r5}
    2240:	4770      	bx	lr

00002242 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2242:	6803      	ldr	r3, [r0, #0]
    2244:	689b      	ldr	r3, [r3, #8]
    2246:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2248:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    224c:	f043 0308 	orr.w	r3, r3, #8
    2250:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2254:	4770      	bx	lr

00002256 <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2256:	6803      	ldr	r3, [r0, #0]
    2258:	689b      	ldr	r3, [r3, #8]
    225a:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    225c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2260:	f043 0308 	orr.w	r3, r3, #8
    2264:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2268:	4770      	bx	lr

0000226a <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    226a:	6803      	ldr	r3, [r0, #0]
    226c:	689b      	ldr	r3, [r3, #8]
    226e:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2270:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2274:	4770      	bx	lr

00002276 <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2276:	6803      	ldr	r3, [r0, #0]
    2278:	689b      	ldr	r3, [r3, #8]
    227a:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    227c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2280:	f043 0304 	orr.w	r3, r3, #4
    2284:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2288:	4770      	bx	lr

0000228a <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    228a:	6803      	ldr	r3, [r0, #0]
    228c:	689b      	ldr	r3, [r3, #8]
    228e:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2290:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2294:	f043 0304 	orr.w	r3, r3, #4
    2298:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    229c:	4770      	bx	lr

0000229e <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    229e:	6803      	ldr	r3, [r0, #0]
    22a0:	689b      	ldr	r3, [r3, #8]
    22a2:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    22a4:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    22a8:	fab0 f080 	clz	r0, r0
    22ac:	0940      	lsrs	r0, r0, #5
    22ae:	4770      	bx	lr

000022b0 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22b0:	6803      	ldr	r3, [r0, #0]
    22b2:	689b      	ldr	r3, [r3, #8]
    22b4:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    22b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    22ba:	4770      	bx	lr

000022bc <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22bc:	6803      	ldr	r3, [r0, #0]
    22be:	689b      	ldr	r3, [r3, #8]
    22c0:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    22c2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    22c6:	f043 0310 	orr.w	r3, r3, #16
    22ca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    22ce:	4770      	bx	lr

000022d0 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22d0:	6803      	ldr	r3, [r0, #0]
    22d2:	689b      	ldr	r3, [r3, #8]
    22d4:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    22d6:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    22da:	f043 0310 	orr.w	r3, r3, #16
    22de:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22e2:	4770      	bx	lr

000022e4 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    22e4:	b510      	push	{r4, lr}
    22e6:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22e8:	f7ff ffbf 	bl	226a <uart_nrf5_irq_tx_ready>
    22ec:	b110      	cbz	r0, 22f4 <uart_nrf5_irq_is_pending+0x10>
    22ee:	2301      	movs	r3, #1
}
    22f0:	4618      	mov	r0, r3
    22f2:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22f4:	4620      	mov	r0, r4
    22f6:	f7ff ffdb 	bl	22b0 <uart_nrf5_irq_rx_ready>
    22fa:	4603      	mov	r3, r0
    22fc:	2800      	cmp	r0, #0
    22fe:	d0f7      	beq.n	22f0 <uart_nrf5_irq_is_pending+0xc>
    2300:	2301      	movs	r3, #1
    2302:	e7f5      	b.n	22f0 <uart_nrf5_irq_is_pending+0xc>

00002304 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2304:	2001      	movs	r0, #1
    2306:	4770      	bx	lr

00002308 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2308:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    230a:	6059      	str	r1, [r3, #4]
    230c:	4770      	bx	lr

0000230e <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    230e:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2310:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    2312:	685b      	ldr	r3, [r3, #4]
    2314:	b103      	cbz	r3, 2318 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    2316:	4798      	blx	r3
    2318:	bd08      	pop	{r3, pc}

0000231a <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    231a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    231c:	2200      	movs	r2, #0
    231e:	2101      	movs	r1, #1
    2320:	2002      	movs	r0, #2
    2322:	f024 fdeb 	bl	26efc <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    2326:	2002      	movs	r0, #2
    2328:	f024 fdbe 	bl	26ea8 <_arch_irq_enable>
    232c:	bd08      	pop	{r3, pc}
	...

00002330 <uart_nrf5_init>:
{
    2330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2332:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    2334:	6803      	ldr	r3, [r0, #0]
    2336:	689b      	ldr	r3, [r3, #8]
    2338:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    233a:	481d      	ldr	r0, [pc, #116]	; (23b0 <uart_nrf5_init+0x80>)
    233c:	f024 ff82 	bl	27244 <device_get_binding>
    2340:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    2342:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2344:	681f      	ldr	r7, [r3, #0]
    2346:	f240 1301 	movw	r3, #257	; 0x101
    234a:	2206      	movs	r2, #6
    234c:	2100      	movs	r1, #0
    234e:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2350:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2352:	681f      	ldr	r7, [r3, #0]
    2354:	2300      	movs	r3, #0
    2356:	2208      	movs	r2, #8
    2358:	4619      	mov	r1, r3
    235a:	4630      	mov	r0, r6
    235c:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    235e:	2306      	movs	r3, #6
    2360:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2364:	2308      	movs	r3, #8
    2366:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    236a:	68a3      	ldr	r3, [r4, #8]
    236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2370:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2372:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    2374:	6822      	ldr	r2, [r4, #0]
    2376:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2378:	6852      	ldr	r2, [r2, #4]
    237a:	6819      	ldr	r1, [r3, #0]
    237c:	4620      	mov	r0, r4
    237e:	f7ff fe7d 	bl	207c <baudrate_set>
	if (err) {
    2382:	4606      	mov	r6, r0
    2384:	b108      	cbz	r0, 238a <uart_nrf5_init+0x5a>
}
    2386:	4630      	mov	r0, r6
    2388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    238a:	2304      	movs	r3, #4
    238c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2390:	2300      	movs	r3, #0
    2392:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    2396:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    239a:	2301      	movs	r3, #1
    239c:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    239e:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    23a0:	4b04      	ldr	r3, [pc, #16]	; (23b4 <uart_nrf5_init+0x84>)
    23a2:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    23a4:	6823      	ldr	r3, [r4, #0]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	689b      	ldr	r3, [r3, #8]
    23aa:	4620      	mov	r0, r4
    23ac:	4798      	blx	r3
	return 0;
    23ae:	e7ea      	b.n	2386 <uart_nrf5_init+0x56>
    23b0:	0002f158 	.word	0x0002f158
    23b4:	0002f184 	.word	0x0002f184

000023b8 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    23b8:	4b08      	ldr	r3, [pc, #32]	; (23dc <rtc_compare_set+0x24>)
    23ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    23be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    23c2:	1ac0      	subs	r0, r0, r3
    23c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23c8:	3802      	subs	r0, #2
    23ca:	4b05      	ldr	r3, [pc, #20]	; (23e0 <rtc_compare_set+0x28>)
    23cc:	4298      	cmp	r0, r3
    23ce:	d904      	bls.n	23da <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    23d4:	4b03      	ldr	r3, [pc, #12]	; (23e4 <rtc_compare_set+0x2c>)
    23d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    23da:	4770      	bx	lr
    23dc:	40011000 	.word	0x40011000
    23e0:	007ffffd 	.word	0x007ffffd
    23e4:	e000e100 	.word	0xe000e100

000023e8 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    23e8:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    23ea:	4b15      	ldr	r3, [pc, #84]	; (2440 <rtc_announce_set_next+0x58>)
    23ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    23f0:	4a14      	ldr	r2, [pc, #80]	; (2444 <rtc_announce_set_next+0x5c>)
    23f2:	6811      	ldr	r1, [r2, #0]
    23f4:	1a5b      	subs	r3, r3, r1
    23f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    23fa:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    23fe:	d917      	bls.n	2430 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2400:	4a11      	ldr	r2, [pc, #68]	; (2448 <rtc_announce_set_next+0x60>)
    2402:	fba2 0203 	umull	r0, r2, r2, r3
    2406:	1a9b      	subs	r3, r3, r2
    2408:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    240c:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    240e:	4a0f      	ldr	r2, [pc, #60]	; (244c <rtc_announce_set_next+0x64>)
    2410:	6810      	ldr	r0, [r2, #0]
    2412:	4283      	cmp	r3, r0
    2414:	d800      	bhi.n	2418 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2416:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2418:	f240 1347 	movw	r3, #327	; 0x147
    241c:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2424:	4a07      	ldr	r2, [pc, #28]	; (2444 <rtc_announce_set_next+0x5c>)
    2426:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    2428:	4b09      	ldr	r3, [pc, #36]	; (2450 <rtc_announce_set_next+0x68>)
    242a:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    242c:	f026 fa52 	bl	288d4 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2430:	4b04      	ldr	r3, [pc, #16]	; (2444 <rtc_announce_set_next+0x5c>)
    2432:	6818      	ldr	r0, [r3, #0]
    2434:	f200 1047 	addw	r0, r0, #327	; 0x147
    2438:	f7ff ffbe 	bl	23b8 <rtc_compare_set>
    243c:	bd08      	pop	{r3, pc}
    243e:	bf00      	nop
    2440:	40011000 	.word	0x40011000
    2444:	2000025c 	.word	0x2000025c
    2448:	90d4f121 	.word	0x90d4f121
    244c:	20000258 	.word	0x20000258
    2450:	2000c510 	.word	0x2000c510

00002454 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    2454:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    2456:	2200      	movs	r2, #0
    2458:	4b02      	ldr	r3, [pc, #8]	; (2464 <rtc1_nrf5_isr+0x10>)
    245a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    245e:	f7ff ffc3 	bl	23e8 <rtc_announce_set_next>
    2462:	bd08      	pop	{r3, pc}
    2464:	40011000 	.word	0x40011000

00002468 <_timer_idle_enter>:
{
    2468:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    246a:	f246 4335 	movw	r3, #25653	; 0x6435
    246e:	4298      	cmp	r0, r3
    2470:	d900      	bls.n	2474 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    2472:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    2474:	4b05      	ldr	r3, [pc, #20]	; (248c <_timer_idle_enter+0x24>)
    2476:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    2478:	4b05      	ldr	r3, [pc, #20]	; (2490 <_timer_idle_enter+0x28>)
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	f240 1247 	movw	r2, #327	; 0x147
    2480:	fb02 3000 	mla	r0, r2, r0, r3
    2484:	f7ff ff98 	bl	23b8 <rtc_compare_set>
    2488:	bd08      	pop	{r3, pc}
    248a:	bf00      	nop
    248c:	20000258 	.word	0x20000258
    2490:	2000025c 	.word	0x2000025c

00002494 <_timer_idle_exit>:
{
    2494:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    2496:	2200      	movs	r2, #0
    2498:	4b06      	ldr	r3, [pc, #24]	; (24b4 <_timer_idle_exit+0x20>)
    249a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    249e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24a2:	4b05      	ldr	r3, [pc, #20]	; (24b8 <_timer_idle_exit+0x24>)
    24a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    24a8:	f7ff ff9e 	bl	23e8 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    24ac:	2201      	movs	r2, #1
    24ae:	4b03      	ldr	r3, [pc, #12]	; (24bc <_timer_idle_exit+0x28>)
    24b0:	601a      	str	r2, [r3, #0]
    24b2:	bd08      	pop	{r3, pc}
    24b4:	40011000 	.word	0x40011000
    24b8:	e000e100 	.word	0xe000e100
    24bc:	20000258 	.word	0x20000258

000024c0 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    24c0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    24c2:	4818      	ldr	r0, [pc, #96]	; (2524 <_sys_clock_driver_init+0x64>)
    24c4:	f024 febe 	bl	27244 <device_get_binding>
	if (!clock) {
    24c8:	b348      	cbz	r0, 251e <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    24ca:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    24cc:	6812      	ldr	r2, [r2, #0]
    24ce:	2101      	movs	r1, #1
    24d0:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    24d2:	2400      	movs	r4, #0
    24d4:	4b14      	ldr	r3, [pc, #80]	; (2528 <_sys_clock_driver_init+0x68>)
    24d6:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    24d8:	2601      	movs	r6, #1
    24da:	4b14      	ldr	r3, [pc, #80]	; (252c <_sys_clock_driver_init+0x6c>)
    24dc:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    24de:	4d14      	ldr	r5, [pc, #80]	; (2530 <_sys_clock_driver_init+0x70>)
    24e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    24e4:	f240 1347 	movw	r3, #327	; 0x147
    24e8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    24ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    24f0:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    24f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    24f8:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    24fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2500:	4b0c      	ldr	r3, [pc, #48]	; (2534 <_sys_clock_driver_init+0x74>)
    2502:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    2506:	4622      	mov	r2, r4
    2508:	4631      	mov	r1, r6
    250a:	2011      	movs	r0, #17
    250c:	f024 fcf6 	bl	26efc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    2510:	2011      	movs	r0, #17
    2512:	f024 fcc9 	bl	26ea8 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    2516:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    2518:	602e      	str	r6, [r5, #0]

	return 0;
    251a:	4620      	mov	r0, r4
    251c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    251e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2522:	bd70      	pop	{r4, r5, r6, pc}
    2524:	0002f160 	.word	0x0002f160
    2528:	2000025c 	.word	0x2000025c
    252c:	20000258 	.word	0x20000258
    2530:	40011000 	.word	0x40011000
    2534:	e000e100 	.word	0xe000e100

00002538 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2538:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    253a:	4b0d      	ldr	r3, [pc, #52]	; (2570 <_timer_cycle_get_32+0x38>)
    253c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2540:	e000      	b.n	2544 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    2542:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    2544:	4b0b      	ldr	r3, [pc, #44]	; (2574 <_timer_cycle_get_32+0x3c>)
    2546:	e9d3 2300 	ldrd	r2, r3, [r3]
    254a:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    254c:	f240 1047 	movw	r0, #327	; 0x147
    2550:	fb00 1212 	mls	r2, r0, r2, r1
    2554:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <_timer_cycle_get_32+0x38>)
    255a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    255e:	4299      	cmp	r1, r3
    2560:	d1ef      	bne.n	2542 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2562:	4b05      	ldr	r3, [pc, #20]	; (2578 <_timer_cycle_get_32+0x40>)
    2564:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    2566:	fb00 2004 	mla	r0, r0, r4, r2
    256a:	bc10      	pop	{r4}
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	40011000 	.word	0x40011000
    2574:	20002b08 	.word	0x20002b08
    2578:	2000c514 	.word	0x2000c514

0000257c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    257c:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    257e:	6803      	ldr	r3, [r0, #0]
    2580:	689b      	ldr	r3, [r3, #8]
    2582:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2584:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2586:	2000      	movs	r0, #0
    2588:	e000      	b.n	258c <gpiote_find_channel+0x10>
    258a:	3001      	adds	r0, #1
    258c:	2807      	cmp	r0, #7
    258e:	dc0d      	bgt.n	25ac <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2590:	68d3      	ldr	r3, [r2, #12]
    2592:	40c3      	lsrs	r3, r0
    2594:	f013 0f01 	tst.w	r3, #1
    2598:	d0f7      	beq.n	258a <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    259a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    259e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    25a2:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    25a6:	428b      	cmp	r3, r1
    25a8:	d1ef      	bne.n	258a <gpiote_find_channel+0xe>
    25aa:	e001      	b.n	25b0 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    25ac:	f06f 0012 	mvn.w	r0, #18
}
    25b0:	bc10      	pop	{r4}
    25b2:	4770      	bx	lr

000025b4 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    25b4:	6800      	ldr	r0, [r0, #0]
    25b6:	6880      	ldr	r0, [r0, #8]
    25b8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25ba:	b121      	cbz	r1, 25c6 <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    25bc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    25c0:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    25c2:	2000      	movs	r0, #0
    25c4:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    25c6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    25ca:	fa21 f202 	lsr.w	r2, r1, r2
    25ce:	f002 0201 	and.w	r2, r2, #1
    25d2:	601a      	str	r2, [r3, #0]
    25d4:	e7f5      	b.n	25c2 <gpio_nrf5_read+0xe>

000025d6 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    25d6:	6800      	ldr	r0, [r0, #0]
    25d8:	6880      	ldr	r0, [r0, #8]
    25da:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25dc:	b961      	cbnz	r1, 25f8 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    25de:	b12b      	cbz	r3, 25ec <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    25e0:	2301      	movs	r3, #1
    25e2:	fa03 f202 	lsl.w	r2, r3, r2
    25e6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    25ea:	e007      	b.n	25fc <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    25ec:	2301      	movs	r3, #1
    25ee:	fa03 f202 	lsl.w	r2, r3, r2
    25f2:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    25f6:	e001      	b.n	25fc <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    25f8:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    25fc:	2000      	movs	r0, #0
    25fe:	4770      	bx	lr

00002600 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2600:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2602:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2604:	b14a      	cbz	r2, 261a <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2606:	6823      	ldr	r3, [r4, #0]
    2608:	600b      	str	r3, [r1, #0]
	list->head = node;
    260a:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    260c:	6863      	ldr	r3, [r4, #4]
    260e:	b113      	cbz	r3, 2616 <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2610:	2000      	movs	r0, #0
    2612:	bc10      	pop	{r4}
    2614:	4770      	bx	lr
		list->tail = list->head;
    2616:	6061      	str	r1, [r4, #4]
    2618:	e7fa      	b.n	2610 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    261a:	4608      	mov	r0, r1
	return list->head;
    261c:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    261e:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2620:	2b00      	cmp	r3, #0
    2622:	d0f5      	beq.n	2610 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    2624:	4298      	cmp	r0, r3
    2626:	d002      	beq.n	262e <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    2628:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	e7f8      	b.n	2620 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    262e:	b13a      	cbz	r2, 2640 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2630:	680b      	ldr	r3, [r1, #0]
    2632:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    2634:	6863      	ldr	r3, [r4, #4]
    2636:	4299      	cmp	r1, r3
    2638:	d009      	beq.n	264e <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    263a:	2300      	movs	r3, #0
    263c:	600b      	str	r3, [r1, #0]
    263e:	e7e7      	b.n	2610 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2640:	680b      	ldr	r3, [r1, #0]
    2642:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    2644:	6862      	ldr	r2, [r4, #4]
    2646:	4291      	cmp	r1, r2
    2648:	d1f7      	bne.n	263a <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    264a:	6063      	str	r3, [r4, #4]
    264c:	e7f5      	b.n	263a <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    264e:	6062      	str	r2, [r4, #4]
    2650:	e7f3      	b.n	263a <gpio_nrf5_manage_callback+0x3a>

00002652 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2654:	6803      	ldr	r3, [r0, #0]
    2656:	689b      	ldr	r3, [r3, #8]
    2658:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    265a:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    265c:	b9b9      	cbnz	r1, 268e <gpio_nrf5_enable_callback+0x3c>
    265e:	460d      	mov	r5, r1
    2660:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    2662:	4611      	mov	r1, r2
    2664:	f7ff ff8a 	bl	257c <gpiote_find_channel>
		if (i < 0) {
    2668:	2800      	cmp	r0, #0
    266a:	db12      	blt.n	2692 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    266c:	2301      	movs	r3, #1
    266e:	fa03 f404 	lsl.w	r4, r3, r4
    2672:	68ba      	ldr	r2, [r7, #8]
    2674:	4314      	orrs	r4, r2
    2676:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2678:	f100 0240 	add.w	r2, r0, #64	; 0x40
    267c:	2100      	movs	r1, #0
    267e:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2682:	fa03 f000 	lsl.w	r0, r3, r0
    2686:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    268a:	4628      	mov	r0, r5
    268c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    268e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002694 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2696:	6803      	ldr	r3, [r0, #0]
    2698:	689b      	ldr	r3, [r3, #8]
    269a:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    269c:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    269e:	b991      	cbnz	r1, 26c6 <gpio_nrf5_disable_callback+0x32>
    26a0:	460d      	mov	r5, r1
    26a2:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    26a4:	4611      	mov	r1, r2
    26a6:	f7ff ff69 	bl	257c <gpiote_find_channel>
		if (i < 0) {
    26aa:	2800      	cmp	r0, #0
    26ac:	db0d      	blt.n	26ca <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    26ae:	2301      	movs	r3, #1
    26b0:	fa03 f404 	lsl.w	r4, r3, r4
    26b4:	68b2      	ldr	r2, [r6, #8]
    26b6:	ea22 0404 	bic.w	r4, r2, r4
    26ba:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    26bc:	4083      	lsls	r3, r0
    26be:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    26c2:	4628      	mov	r0, r5
    26c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    26c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    26ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000026cc <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    26cc:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    26ce:	2200      	movs	r2, #0
    26d0:	2101      	movs	r1, #1
    26d2:	2006      	movs	r0, #6
    26d4:	f024 fc12 	bl	26efc <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    26d8:	2006      	movs	r0, #6
    26da:	f024 fbe5 	bl	26ea8 <_arch_irq_enable>

	return 0;
}
    26de:	2000      	movs	r0, #0
    26e0:	bd08      	pop	{r3, pc}

000026e2 <gpio_nrf5_port_isr>:
{
    26e2:	b570      	push	{r4, r5, r6, lr}
    26e4:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26e6:	6803      	ldr	r3, [r0, #0]
    26e8:	689b      	ldr	r3, [r3, #8]
    26ea:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26ec:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26ee:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    26f0:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26f2:	e000      	b.n	26f6 <gpio_nrf5_port_isr+0x14>
    26f4:	3301      	adds	r3, #1
    26f6:	2b07      	cmp	r3, #7
    26f8:	dc14      	bgt.n	2724 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    26fa:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2702:	2a00      	cmp	r2, #0
    2704:	d0f6      	beq.n	26f4 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    2706:	f103 0240 	add.w	r2, r3, #64	; 0x40
    270a:	2000      	movs	r0, #0
    270c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2710:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2714:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2718:	f3c0 2004 	ubfx	r0, r0, #8, #5
    271c:	2201      	movs	r2, #1
    271e:	4082      	lsls	r2, r0
    2720:	4316      	orrs	r6, r2
    2722:	e7e7      	b.n	26f4 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    2724:	68a3      	ldr	r3, [r4, #8]
    2726:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2728:	2006      	movs	r0, #6
    272a:	f024 fbcb 	bl	26ec4 <_arch_irq_disable>
	return list->head;
    272e:	6824      	ldr	r4, [r4, #0]
    2730:	e005      	b.n	273e <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2732:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2734:	b16c      	cbz	r4, 2752 <gpio_nrf5_port_isr+0x70>
	return node->next;
    2736:	6823      	ldr	r3, [r4, #0]
    2738:	b16b      	cbz	r3, 2756 <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    273a:	b172      	cbz	r2, 275a <gpio_nrf5_port_isr+0x78>
	return node->next;
    273c:	6824      	ldr	r4, [r4, #0]
    273e:	b174      	cbz	r4, 275e <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2740:	68a3      	ldr	r3, [r4, #8]
    2742:	421e      	tst	r6, r3
    2744:	d0f5      	beq.n	2732 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2746:	6863      	ldr	r3, [r4, #4]
    2748:	4632      	mov	r2, r6
    274a:	4621      	mov	r1, r4
    274c:	4628      	mov	r0, r5
    274e:	4798      	blx	r3
    2750:	e7ef      	b.n	2732 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2752:	4623      	mov	r3, r4
    2754:	e7f0      	b.n	2738 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2756:	2400      	movs	r4, #0
    2758:	e7f1      	b.n	273e <gpio_nrf5_port_isr+0x5c>
    275a:	2400      	movs	r4, #0
    275c:	e7ef      	b.n	273e <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    275e:	2006      	movs	r0, #6
    2760:	f024 fba2 	bl	26ea8 <_arch_irq_enable>
    2764:	bd70      	pop	{r4, r5, r6, pc}
	...

00002768 <gpio_nrf5_config>:
{
    2768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    276c:	6804      	ldr	r4, [r0, #0]
    276e:	68a5      	ldr	r5, [r4, #8]
    2770:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2772:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2774:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2776:	2900      	cmp	r1, #0
    2778:	d17f      	bne.n	287a <gpio_nrf5_config+0x112>
    277a:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    277c:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2780:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2784:	f403 7440 	and.w	r4, r3, #768	; 0x300
    2788:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    278c:	d025      	beq.n	27da <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    278e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2792:	d024      	beq.n	27de <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    2794:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2796:	f013 0f01 	tst.w	r3, #1
    279a:	d030      	beq.n	27fe <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    279c:	2c0c      	cmp	r4, #12
    279e:	d020      	beq.n	27e2 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    27a0:	2c04      	cmp	r4, #4
    27a2:	d025      	beq.n	27f0 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    27a4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    27a8:	4938      	ldr	r1, [pc, #224]	; (288c <gpio_nrf5_config+0x124>)
    27aa:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    27ae:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    27b0:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    27b4:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    27b8:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    27bc:	f013 0102 	ands.w	r1, r3, #2
    27c0:	d04a      	beq.n	2858 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    27c2:	f013 0f20 	tst.w	r3, #32
    27c6:	d05b      	beq.n	2880 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    27c8:	f013 0f40 	tst.w	r3, #64	; 0x40
    27cc:	d123      	bne.n	2816 <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    27ce:	f013 0f04 	tst.w	r3, #4
    27d2:	d044      	beq.n	285e <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    27d4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    27d8:	e01f      	b.n	281a <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    27da:	240c      	movs	r4, #12
    27dc:	e7db      	b.n	2796 <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    27de:	2404      	movs	r4, #4
    27e0:	e7d9      	b.n	2796 <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    27e2:	f04f 0c01 	mov.w	ip, #1
    27e6:	fa0c fc02 	lsl.w	ip, ip, r2
    27ea:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    27ee:	e7d9      	b.n	27a4 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    27f0:	f04f 0c01 	mov.w	ip, #1
    27f4:	fa0c fc02 	lsl.w	ip, ip, r2
    27f8:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    27fc:	e7d2      	b.n	27a4 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    27fe:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2802:	f8df e088 	ldr.w	lr, [pc, #136]	; 288c <gpio_nrf5_config+0x124>
    2806:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    280a:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    280c:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2810:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    2814:	e7d2      	b.n	27bc <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    2816:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    281a:	4614      	mov	r4, r2
    281c:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    281e:	68f8      	ldr	r0, [r7, #12]
    2820:	f7fe fc84 	bl	112c <__popcountsi2>
    2824:	2808      	cmp	r0, #8
    2826:	d02e      	beq.n	2886 <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    2828:	4621      	mov	r1, r4
    282a:	4628      	mov	r0, r5
    282c:	f7ff fea6 	bl	257c <gpiote_find_channel>
		if (i < 0) {
    2830:	2800      	cmp	r0, #0
    2832:	db17      	blt.n	2864 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    2834:	2301      	movs	r3, #1
    2836:	fa03 f200 	lsl.w	r2, r3, r0
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	4313      	orrs	r3, r2
    283e:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2840:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    2844:	0224      	lsls	r4, r4, #8
    2846:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    284a:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    284e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2852:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    2856:	4641      	mov	r1, r8
}
    2858:	4608      	mov	r0, r1
    285a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    285e:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    2862:	e7da      	b.n	281a <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2864:	68fb      	ldr	r3, [r7, #12]
    2866:	43db      	mvns	r3, r3
    2868:	fa93 f0a3 	rbit	r0, r3
    286c:	fab0 f080 	clz	r0, r0
    2870:	2b00      	cmp	r3, #0
    2872:	d1df      	bne.n	2834 <gpio_nrf5_config+0xcc>
    2874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2878:	e7dc      	b.n	2834 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    287a:	f06f 0185 	mvn.w	r1, #133	; 0x85
    287e:	e7eb      	b.n	2858 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2880:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2884:	e7e8      	b.n	2858 <gpio_nrf5_config+0xf0>
			return -EIO;
    2886:	f06f 0104 	mvn.w	r1, #4
    288a:	e7e5      	b.n	2858 <gpio_nrf5_config+0xf0>
    288c:	0002f1c8 	.word	0x0002f1c8

00002890 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2890:	f04f 0320 	mov.w	r3, #32
    2894:	f3ef 8111 	mrs	r1, BASEPRI
    2898:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    289c:	4b12      	ldr	r3, [pc, #72]	; (28e8 <_m16src_stop+0x58>)
    289e:	781a      	ldrb	r2, [r3, #0]
    28a0:	b192      	cbz	r2, 28c8 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    28a2:	1e53      	subs	r3, r2, #1
    28a4:	b2db      	uxtb	r3, r3
    28a6:	4810      	ldr	r0, [pc, #64]	; (28e8 <_m16src_stop+0x58>)
    28a8:	7003      	strb	r3, [r0, #0]
    28aa:	b993      	cbnz	r3, 28d2 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    28ac:	4b0f      	ldr	r3, [pc, #60]	; (28ec <_m16src_stop+0x5c>)
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	b99b      	cbnz	r3, 28da <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    28b2:	4b0e      	ldr	r3, [pc, #56]	; (28ec <_m16src_stop+0x5c>)
    28b4:	2201      	movs	r2, #1
    28b6:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28b8:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    28bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    28c0:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    28c2:	2000      	movs	r0, #0
    28c4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    28c6:	4770      	bx	lr
    28c8:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    28cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    28d0:	4770      	bx	lr
    28d2:	f381 8811 	msr	BASEPRI, r1
		return 0;
    28d6:	2000      	movs	r0, #0
    28d8:	4770      	bx	lr
		m16src_ref++;
    28da:	4b03      	ldr	r3, [pc, #12]	; (28e8 <_m16src_stop+0x58>)
    28dc:	701a      	strb	r2, [r3, #0]
    28de:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    28e2:	f06f 000a 	mvn.w	r0, #10
    28e6:	4770      	bx	lr
    28e8:	20000272 	.word	0x20000272
    28ec:	20000271 	.word	0x20000271

000028f0 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    28f0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    28f2:	2200      	movs	r2, #0
    28f4:	2101      	movs	r1, #1
    28f6:	4610      	mov	r0, r2
    28f8:	f024 fb00 	bl	26efc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    28fc:	2000      	movs	r0, #0
    28fe:	f024 fad3 	bl	26ea8 <_arch_irq_enable>

	return 0;
}
    2902:	2000      	movs	r0, #0
    2904:	bd08      	pop	{r3, pc}
	...

00002908 <_m16src_start>:
{
    2908:	b510      	push	{r4, lr}
	__asm__ volatile(
    290a:	f04f 0320 	mov.w	r3, #32
    290e:	f3ef 8411 	mrs	r4, BASEPRI
    2912:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    2916:	4a2c      	ldr	r2, [pc, #176]	; (29c8 <_m16src_start+0xc0>)
    2918:	7813      	ldrb	r3, [r2, #0]
    291a:	1c58      	adds	r0, r3, #1
    291c:	7010      	strb	r0, [r2, #0]
    291e:	b153      	cbz	r3, 2936 <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2920:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2928:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    292c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2930:	d047      	beq.n	29c2 <_m16src_start+0xba>
		return 0;
    2932:	2000      	movs	r0, #0
    2934:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    2936:	4a25      	ldr	r2, [pc, #148]	; (29cc <_m16src_start+0xc4>)
    2938:	7812      	ldrb	r2, [r2, #0]
    293a:	b9a2      	cbnz	r2, 2966 <_m16src_start+0x5e>
	m16src_grd = 1;
    293c:	2201      	movs	r2, #1
    293e:	4b23      	ldr	r3, [pc, #140]	; (29cc <_m16src_start+0xc4>)
    2940:	701a      	strb	r2, [r3, #0]
    2942:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    2946:	b3a1      	cbz	r1, 29b2 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    2948:	2000      	movs	r0, #0
    294a:	f024 fabb 	bl	26ec4 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2952:	2200      	movs	r2, #0
    2954:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2958:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    295c:	2201      	movs	r2, #1
    295e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2962:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2964:	e009      	b.n	297a <_m16src_start+0x72>
		m16src_ref--;
    2966:	4a18      	ldr	r2, [pc, #96]	; (29c8 <_m16src_start+0xc0>)
    2968:	7013      	strb	r3, [r2, #0]
    296a:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    296e:	f06f 000a 	mvn.w	r0, #10
    2972:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2974:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    2976:	bf40      	sev
  __ASM volatile ("wfe");
    2978:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    297a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    297e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2982:	2b00      	cmp	r3, #0
    2984:	d0f6      	beq.n	2974 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2986:	2200      	movs	r2, #0
    2988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    298c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2990:	f011 0f01 	tst.w	r1, #1
    2994:	d102      	bne.n	299c <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2996:	2201      	movs	r2, #1
    2998:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    299c:	2201      	movs	r2, #1
    299e:	4b0c      	ldr	r3, [pc, #48]	; (29d0 <_m16src_start+0xc8>)
    29a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    29a4:	2000      	movs	r0, #0
    29a6:	f024 fa7f 	bl	26ea8 <_arch_irq_enable>
	m16src_grd = 0;
    29aa:	2200      	movs	r2, #0
    29ac:	4b07      	ldr	r3, [pc, #28]	; (29cc <_m16src_start+0xc4>)
    29ae:	701a      	strb	r2, [r3, #0]
    29b0:	e7b8      	b.n	2924 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b6:	2200      	movs	r2, #0
    29b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    29bc:	2201      	movs	r2, #1
    29be:	601a      	str	r2, [r3, #0]
    29c0:	e7f3      	b.n	29aa <_m16src_start+0xa2>
		return -EINPROGRESS;
    29c2:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    29c6:	bd10      	pop	{r4, pc}
    29c8:	20000272 	.word	0x20000272
    29cc:	20000271 	.word	0x20000271
    29d0:	e000e100 	.word	0xe000e100

000029d4 <_power_clock_isr>:
{
    29d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29d8:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    29da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29de:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    29e2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    29e6:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    29ea:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    29ee:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    29f2:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    29f6:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    29fa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    29fe:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2a02:	b11d      	cbz	r5, 2a0c <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2a04:	f04f 0e00 	mov.w	lr, #0
    2a08:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2a0c:	b127      	cbz	r7, 2a18 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a0e:	2700      	movs	r7, #0
    2a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a14:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2a18:	b132      	cbz	r2, 2a28 <_power_clock_isr+0x54>
    2a1a:	b129      	cbz	r1, 2a28 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a20:	2201      	movs	r2, #1
    2a22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2a26:	611a      	str	r2, [r3, #16]
	if (lf) {
    2a28:	b126      	cbz	r6, 2a34 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a2a:	2200      	movs	r2, #0
    2a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2a34:	b910      	cbnz	r0, 2a3c <_power_clock_isr+0x68>
	if (ctto) {
    2a36:	b964      	cbnz	r4, 2a52 <_power_clock_isr+0x7e>
    2a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2a3c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2a40:	2100      	movs	r1, #0
    2a42:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2a46:	4640      	mov	r0, r8
    2a48:	f7ff ff22 	bl	2890 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2a4c:	2301      	movs	r3, #1
    2a4e:	6173      	str	r3, [r6, #20]
    2a50:	e7f1      	b.n	2a36 <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a56:	2100      	movs	r1, #0
    2a58:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a5c:	2201      	movs	r2, #1
    2a5e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a62:	4640      	mov	r0, r8
    2a64:	f7ff ff50 	bl	2908 <_m16src_start>
		if (!err) {
    2a68:	2800      	cmp	r0, #0
    2a6a:	d1e5      	bne.n	2a38 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a6c:	2201      	movs	r2, #1
    2a6e:	4b02      	ldr	r3, [pc, #8]	; (2a78 <_power_clock_isr+0xa4>)
    2a70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2a74:	e7e0      	b.n	2a38 <_power_clock_isr+0x64>
    2a76:	bf00      	nop
    2a78:	e000e100 	.word	0xe000e100

00002a7c <_k32src_start>:
	__asm__ volatile(
    2a7c:	f04f 0220 	mov.w	r2, #32
    2a80:	f3ef 8311 	mrs	r3, BASEPRI
    2a84:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2a88:	4a38      	ldr	r2, [pc, #224]	; (2b6c <_k32src_start+0xf0>)
    2a8a:	7812      	ldrb	r2, [r2, #0]
    2a8c:	b152      	cbz	r2, 2aa4 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a8e:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a96:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a9e:	d062      	beq.n	2b66 <_k32src_start+0xea>
		return 0;
    2aa0:	2000      	movs	r0, #0
    2aa2:	4770      	bx	lr
{
    2aa4:	b570      	push	{r4, r5, r6, lr}
    2aa6:	460d      	mov	r5, r1
    2aa8:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2aaa:	2601      	movs	r6, #1
    2aac:	4a2f      	ldr	r2, [pc, #188]	; (2b6c <_k32src_start+0xf0>)
    2aae:	7016      	strb	r6, [r2, #0]
    2ab0:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2ab4:	2000      	movs	r0, #0
    2ab6:	f024 fa05 	bl	26ec4 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2abe:	2200      	movs	r2, #0
    2ac0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2ac4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2ac8:	2102      	movs	r1, #2
    2aca:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2ace:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2ad2:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2ad4:	e002      	b.n	2adc <_k32src_start+0x60>
    2ad6:	bf20      	wfe
  __ASM volatile ("sev");
    2ad8:	bf40      	sev
  __ASM volatile ("wfe");
    2ada:	bf20      	wfe
    2adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d0f6      	beq.n	2ad6 <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ae8:	2100      	movs	r1, #0
    2aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2af2:	f012 0f02 	tst.w	r2, #2
    2af6:	d102      	bne.n	2afe <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2af8:	2202      	movs	r2, #2
    2afa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2afe:	2201      	movs	r2, #1
    2b00:	4b1b      	ldr	r3, [pc, #108]	; (2b70 <_k32src_start+0xf4>)
    2b02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2b06:	2000      	movs	r0, #0
    2b08:	f024 f9ce 	bl	26ea8 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b10:	2218      	movs	r2, #24
    2b12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2b16:	2200      	movs	r2, #0
    2b18:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2b1c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2b20:	f015 0f03 	tst.w	r5, #3
    2b24:	d008      	beq.n	2b38 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b2a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2b2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b32:	d015      	beq.n	2b60 <_k32src_start+0xe4>
		return 0;
    2b34:	2000      	movs	r0, #0
    2b36:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b38:	2210      	movs	r2, #16
    2b3a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b3e:	2218      	movs	r2, #24
    2b40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b44:	2201      	movs	r2, #1
    2b46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b4a:	2100      	movs	r1, #0
    2b4c:	4620      	mov	r0, r4
    2b4e:	f7ff fedb 	bl	2908 <_m16src_start>
		if (!err) {
    2b52:	2800      	cmp	r0, #0
    2b54:	d1e7      	bne.n	2b26 <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b56:	2201      	movs	r2, #1
    2b58:	4b05      	ldr	r3, [pc, #20]	; (2b70 <_k32src_start+0xf4>)
    2b5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b5e:	e7e2      	b.n	2b26 <_k32src_start+0xaa>
		return -EINPROGRESS;
    2b60:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2b64:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2b66:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2b6a:	4770      	bx	lr
    2b6c:	20000270 	.word	0x20000270
    2b70:	e000e100 	.word	0xe000e100

00002b74 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2b74:	2000      	movs	r0, #0
    2b76:	4770      	bx	lr

00002b78 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2b78:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2b7a:	680b      	ldr	r3, [r1, #0]
    2b7c:	3301      	adds	r3, #1
    2b7e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2b80:	4b01      	ldr	r3, [pc, #4]	; (2b88 <char_out+0x10>)
    2b82:	681b      	ldr	r3, [r3, #0]
    2b84:	4798      	blx	r3
}
    2b86:	bd08      	pop	{r3, pc}
    2b88:	2000b808 	.word	0x2000b808

00002b8c <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b90:	b083      	sub	sp, #12
    2b92:	4606      	mov	r6, r0
    2b94:	9101      	str	r1, [sp, #4]
    2b96:	4691      	mov	r9, r2
    2b98:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2b9a:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2b9c:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2ba0:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2ba2:	4653      	mov	r3, sl

	for (; size; size--) {
    2ba4:	e009      	b.n	2bba <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2ba6:	2809      	cmp	r0, #9
    2ba8:	d91f      	bls.n	2bea <_printk_hex_ulong+0x5e>
    2baa:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2bac:	9901      	ldr	r1, [sp, #4]
    2bae:	4418      	add	r0, r3
    2bb0:	47b0      	blx	r6
			digits++;
    2bb2:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2bb4:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2bb8:	462b      	mov	r3, r5
	for (; size; size--) {
    2bba:	b323      	cbz	r3, 2c06 <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2bbc:	1e5d      	subs	r5, r3, #1
    2bbe:	00a8      	lsls	r0, r5, #2
    2bc0:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2bc4:	f010 000f 	ands.w	r0, r0, #15
    2bc8:	d1ed      	bne.n	2ba6 <_printk_hex_ulong+0x1a>
    2bca:	f1b8 0f00 	cmp.w	r8, #0
    2bce:	d1ea      	bne.n	2ba6 <_printk_hex_ulong+0x1a>
    2bd0:	2b01      	cmp	r3, #1
    2bd2:	d0e8      	beq.n	2ba6 <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2bd4:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bda:	459a      	cmp	sl, r3
    2bdc:	dc11      	bgt.n	2c02 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2bde:	2f01      	cmp	r7, #1
    2be0:	d005      	beq.n	2bee <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2be2:	2f02      	cmp	r7, #2
    2be4:	d008      	beq.n	2bf8 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2be6:	46da      	mov	sl, fp
    2be8:	e7e6      	b.n	2bb8 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2bea:	2330      	movs	r3, #48	; 0x30
    2bec:	e7de      	b.n	2bac <_printk_hex_ulong+0x20>
				out('0', ctx);
    2bee:	9901      	ldr	r1, [sp, #4]
    2bf0:	2030      	movs	r0, #48	; 0x30
    2bf2:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bf4:	46da      	mov	sl, fp
    2bf6:	e7df      	b.n	2bb8 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2bf8:	9901      	ldr	r1, [sp, #4]
    2bfa:	2020      	movs	r0, #32
    2bfc:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bfe:	46da      	mov	sl, fp
    2c00:	e7da      	b.n	2bb8 <_printk_hex_ulong+0x2c>
    2c02:	46da      	mov	sl, fp
    2c04:	e7d8      	b.n	2bb8 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2c06:	2f03      	cmp	r7, #3
    2c08:	d002      	beq.n	2c10 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c0a:	b003      	add	sp, #12
    2c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c12:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2c16:	1e65      	subs	r5, r4, #1
    2c18:	2c00      	cmp	r4, #0
    2c1a:	ddf6      	ble.n	2c0a <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2c1c:	9901      	ldr	r1, [sp, #4]
    2c1e:	2020      	movs	r0, #32
    2c20:	47b0      	blx	r6
		while (remaining-- > 0) {
    2c22:	462c      	mov	r4, r5
    2c24:	e7f7      	b.n	2c16 <_printk_hex_ulong+0x8a>
	...

00002c28 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c2c:	b083      	sub	sp, #12
    2c2e:	4682      	mov	sl, r0
    2c30:	9101      	str	r1, [sp, #4]
    2c32:	469b      	mov	fp, r3
    2c34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2c36:	2f00      	cmp	r7, #0
    2c38:	dd07      	ble.n	2c4a <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2c3a:	4615      	mov	r5, r2
    2c3c:	f04f 0901 	mov.w	r9, #1
    2c40:	260a      	movs	r6, #10
    2c42:	f04f 0800 	mov.w	r8, #0
    2c46:	4c22      	ldr	r4, [pc, #136]	; (2cd0 <_printk_dec_ulong+0xa8>)
    2c48:	e015      	b.n	2c76 <_printk_dec_ulong+0x4e>
		min_width = 1;
    2c4a:	2701      	movs	r7, #1
    2c4c:	e7f5      	b.n	2c3a <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2c4e:	1c60      	adds	r0, r4, #1
    2c50:	fbb5 f0f0 	udiv	r0, r5, r0
    2c54:	9901      	ldr	r1, [sp, #4]
    2c56:	3030      	adds	r0, #48	; 0x30
    2c58:	47d0      	blx	sl
			digits++;
    2c5a:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2c5e:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2c62:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2c64:	1c63      	adds	r3, r4, #1
    2c66:	fbb5 f2f3 	udiv	r2, r5, r3
    2c6a:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2c6e:	4b19      	ldr	r3, [pc, #100]	; (2cd4 <_printk_dec_ulong+0xac>)
    2c70:	fba3 3404 	umull	r3, r4, r3, r4
    2c74:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2c76:	2c08      	cmp	r4, #8
    2c78:	d914      	bls.n	2ca4 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2c7a:	f1b8 0f00 	cmp.w	r8, #0
    2c7e:	d1e6      	bne.n	2c4e <_printk_dec_ulong+0x26>
    2c80:	42ac      	cmp	r4, r5
    2c82:	d3e4      	bcc.n	2c4e <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2c84:	42be      	cmp	r6, r7
    2c86:	dcec      	bgt.n	2c62 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2c88:	f1bb 0f02 	cmp.w	fp, #2
    2c8c:	d8e9      	bhi.n	2c62 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c8e:	f1bb 0f01 	cmp.w	fp, #1
    2c92:	d005      	beq.n	2ca0 <_printk_dec_ulong+0x78>
    2c94:	2020      	movs	r0, #32
    2c96:	9901      	ldr	r1, [sp, #4]
    2c98:	47d0      	blx	sl
			digits++;
    2c9a:	f109 0901 	add.w	r9, r9, #1
    2c9e:	e7e0      	b.n	2c62 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2ca0:	2030      	movs	r0, #48	; 0x30
    2ca2:	e7f8      	b.n	2c96 <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2ca4:	9901      	ldr	r1, [sp, #4]
    2ca6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2caa:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2cac:	f1bb 0f03 	cmp.w	fp, #3
    2cb0:	d002      	beq.n	2cb8 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2cb2:	b003      	add	sp, #12
    2cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2cb8:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2cbc:	e003      	b.n	2cc6 <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2cbe:	9901      	ldr	r1, [sp, #4]
    2cc0:	2020      	movs	r0, #32
    2cc2:	47d0      	blx	sl
		while (remaining-- > 0) {
    2cc4:	4627      	mov	r7, r4
    2cc6:	1e7c      	subs	r4, r7, #1
    2cc8:	2f00      	cmp	r7, #0
    2cca:	dcf8      	bgt.n	2cbe <_printk_dec_ulong+0x96>
    2ccc:	e7f1      	b.n	2cb2 <_printk_dec_ulong+0x8a>
    2cce:	bf00      	nop
    2cd0:	3b9ac9ff 	.word	0x3b9ac9ff
    2cd4:	cccccccd 	.word	0xcccccccd

00002cd8 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2cd8:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2cda:	680c      	ldr	r4, [r1, #0]
    2cdc:	b154      	cbz	r4, 2cf4 <str_out+0x1c>
    2cde:	688b      	ldr	r3, [r1, #8]
    2ce0:	684a      	ldr	r2, [r1, #4]
    2ce2:	4293      	cmp	r3, r2
    2ce4:	da06      	bge.n	2cf4 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2ce6:	3a01      	subs	r2, #1
    2ce8:	4293      	cmp	r3, r2
    2cea:	d008      	beq.n	2cfe <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2cec:	1c5a      	adds	r2, r3, #1
    2cee:	608a      	str	r2, [r1, #8]
    2cf0:	54e0      	strb	r0, [r4, r3]
    2cf2:	e002      	b.n	2cfa <str_out+0x22>
		ctx->count++;
    2cf4:	688b      	ldr	r3, [r1, #8]
    2cf6:	3301      	adds	r3, #1
    2cf8:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2cfa:	bc10      	pop	{r4}
    2cfc:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2cfe:	1c5a      	adds	r2, r3, #1
    2d00:	608a      	str	r2, [r1, #8]
    2d02:	2200      	movs	r2, #0
    2d04:	54e2      	strb	r2, [r4, r3]
    2d06:	e7f8      	b.n	2cfa <str_out+0x22>

00002d08 <__printk_hook_install>:
	_char_out = fn;
    2d08:	4b01      	ldr	r3, [pc, #4]	; (2d10 <__printk_hook_install+0x8>)
    2d0a:	6018      	str	r0, [r3, #0]
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	2000b808 	.word	0x2000b808

00002d14 <_vprintk>:
{
    2d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d18:	b084      	sub	sp, #16
    2d1a:	4607      	mov	r7, r0
    2d1c:	460e      	mov	r6, r1
    2d1e:	4614      	mov	r4, r2
    2d20:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2d22:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2d26:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2d2a:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2d2c:	4645      	mov	r5, r8
	while (*fmt) {
    2d2e:	e104      	b.n	2f3a <_vprintk+0x226>
			switch (*fmt) {
    2d30:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2d34:	2b55      	cmp	r3, #85	; 0x55
    2d36:	f200 80f1 	bhi.w	2f1c <_vprintk+0x208>
    2d3a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d3e:	00ea      	.short	0x00ea
    2d40:	00ef00ef 	.word	0x00ef00ef
    2d44:	00ef00ef 	.word	0x00ef00ef
    2d48:	00ef00ef 	.word	0x00ef00ef
    2d4c:	010800ef 	.word	0x010800ef
    2d50:	00ef00ef 	.word	0x00ef00ef
    2d54:	00590056 	.word	0x00590056
    2d58:	00590059 	.word	0x00590059
    2d5c:	00590059 	.word	0x00590059
    2d60:	00590059 	.word	0x00590059
    2d64:	00590059 	.word	0x00590059
    2d68:	00ef00ef 	.word	0x00ef00ef
    2d6c:	00ef00ef 	.word	0x00ef00ef
    2d70:	00ef00ef 	.word	0x00ef00ef
    2d74:	00ef00ef 	.word	0x00ef00ef
    2d78:	00ef00ef 	.word	0x00ef00ef
    2d7c:	00ef00ef 	.word	0x00ef00ef
    2d80:	00ef00ef 	.word	0x00ef00ef
    2d84:	00ef00ef 	.word	0x00ef00ef
    2d88:	00ef00ef 	.word	0x00ef00ef
    2d8c:	00ef00ef 	.word	0x00ef00ef
    2d90:	00ef00ef 	.word	0x00ef00ef
    2d94:	00ef00ef 	.word	0x00ef00ef
    2d98:	00ef00ef 	.word	0x00ef00ef
    2d9c:	00ef00ef 	.word	0x00ef00ef
    2da0:	00ef00ef 	.word	0x00ef00ef
    2da4:	00ef00bc 	.word	0x00ef00bc
    2da8:	00ef00ef 	.word	0x00ef00ef
    2dac:	00ef00ef 	.word	0x00ef00ef
    2db0:	00ef00ef 	.word	0x00ef00ef
    2db4:	00ef00ef 	.word	0x00ef00ef
    2db8:	00e200ef 	.word	0x00e200ef
    2dbc:	00ef0076 	.word	0x00ef0076
    2dc0:	00ef00ef 	.word	0x00ef00ef
    2dc4:	007600fd 	.word	0x007600fd
    2dc8:	00ef00ef 	.word	0x00ef00ef
    2dcc:	00ef0073 	.word	0x00ef0073
    2dd0:	00ef00ef 	.word	0x00ef00ef
    2dd4:	00ef00b2 	.word	0x00ef00b2
    2dd8:	00d500ef 	.word	0x00d500ef
    2ddc:	009900ef 	.word	0x009900ef
    2de0:	00ef00ef 	.word	0x00ef00ef
    2de4:	00ef00bc 	.word	0x00ef00bc
    2de8:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2dea:	f1ba 0f00 	cmp.w	sl, #0
    2dee:	db10      	blt.n	2e12 <_vprintk+0xfe>
				if (min_width < 0) {
    2df0:	f1ba 0f00 	cmp.w	sl, #0
    2df4:	db13      	blt.n	2e1e <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2df6:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2dfa:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2dfe:	4418      	add	r0, r3
    2e00:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2e04:	f1b9 0f00 	cmp.w	r9, #0
    2e08:	f040 8096 	bne.w	2f38 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2e0c:	f04f 0902 	mov.w	r9, #2
    2e10:	e092      	b.n	2f38 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2e12:	f1b9 0f00 	cmp.w	r9, #0
    2e16:	d1eb      	bne.n	2df0 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2e18:	f04f 0901 	mov.w	r9, #1
    2e1c:	e08c      	b.n	2f38 <_vprintk+0x224>
					min_width = *fmt - '0';
    2e1e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2e22:	e7ef      	b.n	2e04 <_vprintk+0xf0>
				long_ctr++;
    2e24:	f108 0801 	add.w	r8, r8, #1
    2e28:	e086      	b.n	2f38 <_vprintk+0x224>
				if (long_ctr < 2) {
    2e2a:	f1b8 0f01 	cmp.w	r8, #1
    2e2e:	dd13      	ble.n	2e58 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2e30:	9b03      	ldr	r3, [sp, #12]
    2e32:	3307      	adds	r3, #7
    2e34:	f023 0307 	bic.w	r3, r3, #7
    2e38:	f103 0208 	add.w	r2, r3, #8
    2e3c:	9203      	str	r2, [sp, #12]
    2e3e:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2e40:	2d00      	cmp	r5, #0
    2e42:	db0e      	blt.n	2e62 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2e44:	f8cd a000 	str.w	sl, [sp]
    2e48:	464b      	mov	r3, r9
    2e4a:	462a      	mov	r2, r5
    2e4c:	4631      	mov	r1, r6
    2e4e:	4638      	mov	r0, r7
    2e50:	f7ff feea 	bl	2c28 <_printk_dec_ulong>
			might_format = 0;
    2e54:	2500      	movs	r5, #0
				break;
    2e56:	e06f      	b.n	2f38 <_vprintk+0x224>
					d = va_arg(ap, long);
    2e58:	9b03      	ldr	r3, [sp, #12]
    2e5a:	1d1a      	adds	r2, r3, #4
    2e5c:	9203      	str	r2, [sp, #12]
    2e5e:	681d      	ldr	r5, [r3, #0]
    2e60:	e7ee      	b.n	2e40 <_vprintk+0x12c>
					out((int)'-', ctx);
    2e62:	4631      	mov	r1, r6
    2e64:	202d      	movs	r0, #45	; 0x2d
    2e66:	47b8      	blx	r7
					d = -d;
    2e68:	426d      	negs	r5, r5
					min_width--;
    2e6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2e6e:	e7e9      	b.n	2e44 <_vprintk+0x130>
				if (long_ctr < 2) {
    2e70:	f1b8 0f01 	cmp.w	r8, #1
    2e74:	dd10      	ble.n	2e98 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2e76:	9b03      	ldr	r3, [sp, #12]
    2e78:	3307      	adds	r3, #7
    2e7a:	f023 0307 	bic.w	r3, r3, #7
    2e7e:	f103 0208 	add.w	r2, r3, #8
    2e82:	9203      	str	r2, [sp, #12]
    2e84:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2e86:	f8cd a000 	str.w	sl, [sp]
    2e8a:	464b      	mov	r3, r9
    2e8c:	4631      	mov	r1, r6
    2e8e:	4638      	mov	r0, r7
    2e90:	f7ff feca 	bl	2c28 <_printk_dec_ulong>
			might_format = 0;
    2e94:	2500      	movs	r5, #0
				break;
    2e96:	e04f      	b.n	2f38 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2e98:	9b03      	ldr	r3, [sp, #12]
    2e9a:	1d1a      	adds	r2, r3, #4
    2e9c:	9203      	str	r2, [sp, #12]
    2e9e:	681a      	ldr	r2, [r3, #0]
    2ea0:	e7f1      	b.n	2e86 <_vprintk+0x172>
				  out('0', ctx);
    2ea2:	4631      	mov	r1, r6
    2ea4:	2030      	movs	r0, #48	; 0x30
    2ea6:	47b8      	blx	r7
				  out('x', ctx);
    2ea8:	4631      	mov	r1, r6
    2eaa:	2078      	movs	r0, #120	; 0x78
    2eac:	47b8      	blx	r7
				  min_width = 8;
    2eae:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2eb2:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2eb6:	f1b8 0f01 	cmp.w	r8, #1
    2eba:	dd10      	ble.n	2ede <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	3307      	adds	r3, #7
    2ec0:	f023 0307 	bic.w	r3, r3, #7
    2ec4:	f103 0208 	add.w	r2, r3, #8
    2ec8:	9203      	str	r2, [sp, #12]
    2eca:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2ecc:	f8cd a000 	str.w	sl, [sp]
    2ed0:	464b      	mov	r3, r9
    2ed2:	4631      	mov	r1, r6
    2ed4:	4638      	mov	r0, r7
    2ed6:	f7ff fe59 	bl	2b8c <_printk_hex_ulong>
			might_format = 0;
    2eda:	2500      	movs	r5, #0
				break;
    2edc:	e02c      	b.n	2f38 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	1d1a      	adds	r2, r3, #4
    2ee2:	9203      	str	r2, [sp, #12]
    2ee4:	681a      	ldr	r2, [r3, #0]
    2ee6:	e7f1      	b.n	2ecc <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2ee8:	9b03      	ldr	r3, [sp, #12]
    2eea:	1d1a      	adds	r2, r3, #4
    2eec:	9203      	str	r2, [sp, #12]
    2eee:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2ef0:	e002      	b.n	2ef8 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2ef2:	3501      	adds	r5, #1
    2ef4:	4631      	mov	r1, r6
    2ef6:	47b8      	blx	r7
				while (*s)
    2ef8:	7828      	ldrb	r0, [r5, #0]
    2efa:	2800      	cmp	r0, #0
    2efc:	d1f9      	bne.n	2ef2 <_vprintk+0x1de>
			might_format = 0;
    2efe:	2500      	movs	r5, #0
    2f00:	e01a      	b.n	2f38 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2f02:	9b03      	ldr	r3, [sp, #12]
    2f04:	1d1a      	adds	r2, r3, #4
    2f06:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2f08:	4631      	mov	r1, r6
    2f0a:	6818      	ldr	r0, [r3, #0]
    2f0c:	47b8      	blx	r7
			might_format = 0;
    2f0e:	2500      	movs	r5, #0
				break;
    2f10:	e012      	b.n	2f38 <_vprintk+0x224>
				out((int)'%', ctx);
    2f12:	4631      	mov	r1, r6
    2f14:	2025      	movs	r0, #37	; 0x25
    2f16:	47b8      	blx	r7
			might_format = 0;
    2f18:	2500      	movs	r5, #0
				break;
    2f1a:	e00d      	b.n	2f38 <_vprintk+0x224>
				out((int)'%', ctx);
    2f1c:	4631      	mov	r1, r6
    2f1e:	2025      	movs	r0, #37	; 0x25
    2f20:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2f22:	4631      	mov	r1, r6
    2f24:	7820      	ldrb	r0, [r4, #0]
    2f26:	47b8      	blx	r7
			might_format = 0;
    2f28:	2500      	movs	r5, #0
				break;
    2f2a:	e005      	b.n	2f38 <_vprintk+0x224>
				long_ctr = 0;
    2f2c:	46a8      	mov	r8, r5
				min_width = -1;
    2f2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2f32:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2f36:	2501      	movs	r5, #1
		++fmt;
    2f38:	3401      	adds	r4, #1
	while (*fmt) {
    2f3a:	7820      	ldrb	r0, [r4, #0]
    2f3c:	b150      	cbz	r0, 2f54 <_vprintk+0x240>
		if (!might_format) {
    2f3e:	2d00      	cmp	r5, #0
    2f40:	f47f aef6 	bne.w	2d30 <_vprintk+0x1c>
			if (*fmt != '%') {
    2f44:	2825      	cmp	r0, #37	; 0x25
    2f46:	d0f1      	beq.n	2f2c <_vprintk+0x218>
				out((int)*fmt, ctx);
    2f48:	4631      	mov	r1, r6
    2f4a:	47b8      	blx	r7
    2f4c:	e7f4      	b.n	2f38 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2f4e:	f04f 0903 	mov.w	r9, #3
    2f52:	e7f1      	b.n	2f38 <_vprintk+0x224>
}
    2f54:	b004      	add	sp, #16
    2f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002f5c <vprintk>:
{
    2f5c:	b510      	push	{r4, lr}
    2f5e:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2f60:	ac02      	add	r4, sp, #8
    2f62:	2300      	movs	r3, #0
    2f64:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2f68:	460b      	mov	r3, r1
    2f6a:	4602      	mov	r2, r0
    2f6c:	4621      	mov	r1, r4
    2f6e:	4803      	ldr	r0, [pc, #12]	; (2f7c <vprintk+0x20>)
    2f70:	f7ff fed0 	bl	2d14 <_vprintk>
}
    2f74:	9801      	ldr	r0, [sp, #4]
    2f76:	b002      	add	sp, #8
    2f78:	bd10      	pop	{r4, pc}
    2f7a:	bf00      	nop
    2f7c:	00002b79 	.word	0x00002b79

00002f80 <printk>:
{
    2f80:	b40f      	push	{r0, r1, r2, r3}
    2f82:	b500      	push	{lr}
    2f84:	b083      	sub	sp, #12
    2f86:	a904      	add	r1, sp, #16
    2f88:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2f8c:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2f8e:	f7ff ffe5 	bl	2f5c <vprintk>
}
    2f92:	b003      	add	sp, #12
    2f94:	f85d eb04 	ldr.w	lr, [sp], #4
    2f98:	b004      	add	sp, #16
    2f9a:	4770      	bx	lr

00002f9c <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2f9c:	b40c      	push	{r2, r3}
    2f9e:	b510      	push	{r4, lr}
    2fa0:	b084      	sub	sp, #16
    2fa2:	4604      	mov	r4, r0
    2fa4:	ab06      	add	r3, sp, #24
    2fa6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2faa:	9001      	str	r0, [sp, #4]
    2fac:	9102      	str	r1, [sp, #8]
    2fae:	2100      	movs	r1, #0
    2fb0:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2fb2:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2fb4:	a901      	add	r1, sp, #4
    2fb6:	4807      	ldr	r0, [pc, #28]	; (2fd4 <snprintk+0x38>)
    2fb8:	f7ff feac 	bl	2d14 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2fbc:	9b03      	ldr	r3, [sp, #12]
    2fbe:	9a02      	ldr	r2, [sp, #8]
    2fc0:	4293      	cmp	r3, r2
    2fc2:	da01      	bge.n	2fc8 <snprintk+0x2c>
		str[ctx.count] = '\0';
    2fc4:	2200      	movs	r2, #0
    2fc6:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2fc8:	9803      	ldr	r0, [sp, #12]
    2fca:	b004      	add	sp, #16
    2fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fd0:	b002      	add	sp, #8
    2fd2:	4770      	bx	lr
    2fd4:	00002cd9 	.word	0x00002cd9

00002fd8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2fd8:	4770      	bx	lr

00002fda <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2fda:	428b      	cmp	r3, r1
    2fdc:	d901      	bls.n	2fe2 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2fde:	2000      	movs	r0, #0
    2fe0:	4770      	bx	lr
{
    2fe2:	b510      	push	{r4, lr}
    2fe4:	461c      	mov	r4, r3
    2fe6:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2fe8:	461a      	mov	r2, r3
    2fea:	f7fd f969 	bl	2c0 <memcpy>
		return from_len;
    2fee:	4620      	mov	r0, r4
    2ff0:	bd10      	pop	{r4, pc}

00002ff2 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2ff2:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2ff4:	f027 fd62 	bl	2aabc <memset>
    2ff8:	bd08      	pop	{r3, pc}

00002ffa <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2ffa:	09c3      	lsrs	r3, r0, #7
    2ffc:	005a      	lsls	r2, r3, #1
    2ffe:	4413      	add	r3, r2
    3000:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3004:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    3008:	b2c0      	uxtb	r0, r0
    300a:	4770      	bx	lr

0000300c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    300c:	b4f0      	push	{r4, r5, r6, r7}
    300e:	b08c      	sub	sp, #48	; 0x30
    3010:	4604      	mov	r4, r0
    3012:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    3014:	ad01      	add	r5, sp, #4
    3016:	4e2a      	ldr	r6, [pc, #168]	; (30c0 <tc_aes128_set_encrypt_key+0xb4>)
    3018:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    301a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    301c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3020:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3024:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3028:	2c00      	cmp	r4, #0
    302a:	d044      	beq.n	30b6 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    302c:	2f00      	cmp	r7, #0
    302e:	d044      	beq.n	30ba <tc_aes128_set_encrypt_key+0xae>
    3030:	2200      	movs	r2, #0
    3032:	e00f      	b.n	3054 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3034:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    3038:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    303c:	784b      	ldrb	r3, [r1, #1]
    303e:	041b      	lsls	r3, r3, #16
    3040:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3044:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3046:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    304a:	78c9      	ldrb	r1, [r1, #3]
    304c:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    304e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    3052:	3201      	adds	r2, #1
    3054:	2a03      	cmp	r2, #3
    3056:	d9ed      	bls.n	3034 <tc_aes128_set_encrypt_key+0x28>
    3058:	e006      	b.n	3068 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    305a:	1f11      	subs	r1, r2, #4
    305c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3060:	404b      	eors	r3, r1
    3062:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3066:	3201      	adds	r2, #1
    3068:	2a2b      	cmp	r2, #43	; 0x2b
    306a:	d820      	bhi.n	30ae <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    306c:	1e53      	subs	r3, r2, #1
    306e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    3072:	f012 0f03 	tst.w	r2, #3
    3076:	d1f0      	bne.n	305a <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    3078:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    307c:	0e19      	lsrs	r1, r3, #24
    307e:	4811      	ldr	r0, [pc, #68]	; (30c4 <tc_aes128_set_encrypt_key+0xb8>)
    3080:	5c45      	ldrb	r5, [r0, r1]
    3082:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3086:	5c41      	ldrb	r1, [r0, r1]
    3088:	0409      	lsls	r1, r1, #16
    308a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    308e:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3092:	5d45      	ldrb	r5, [r0, r5]
    3094:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    3098:	b2db      	uxtb	r3, r3
    309a:	5cc3      	ldrb	r3, [r0, r3]
    309c:	4319      	orrs	r1, r3
    309e:	f022 0303 	bic.w	r3, r2, #3
    30a2:	a80c      	add	r0, sp, #48	; 0x30
    30a4:	4403      	add	r3, r0
    30a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    30aa:	404b      	eors	r3, r1
    30ac:	e7d5      	b.n	305a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    30ae:	2001      	movs	r0, #1
}
    30b0:	b00c      	add	sp, #48	; 0x30
    30b2:	bcf0      	pop	{r4, r5, r6, r7}
    30b4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    30b6:	2000      	movs	r0, #0
    30b8:	e7fa      	b.n	30b0 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    30ba:	2000      	movs	r0, #0
    30bc:	e7f8      	b.n	30b0 <tc_aes128_set_encrypt_key+0xa4>
    30be:	bf00      	nop
    30c0:	0002ee28 	.word	0x0002ee28
    30c4:	0002f248 	.word	0x0002f248

000030c8 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    30c8:	2800      	cmp	r0, #0
    30ca:	f000 8367 	beq.w	379c <tc_aes_encrypt+0x6d4>
{
    30ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30d2:	b088      	sub	sp, #32
    30d4:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    30d6:	2900      	cmp	r1, #0
    30d8:	f000 8362 	beq.w	37a0 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    30dc:	2a00      	cmp	r2, #0
    30de:	f000 8361 	beq.w	37a4 <tc_aes_encrypt+0x6dc>
    30e2:	4617      	mov	r7, r2
    30e4:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    30e6:	2310      	movs	r3, #16
    30e8:	4619      	mov	r1, r3
    30ea:	eb0d 0003 	add.w	r0, sp, r3
    30ee:	f7ff ff74 	bl	2fda <_copy>
	add_round_key(state, s->words);
    30f2:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    30f4:	683b      	ldr	r3, [r7, #0]
    30f6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    30fa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30fe:	f88d 2010 	strb.w	r2, [sp, #16]
    3102:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3106:	f89d 1011 	ldrb.w	r1, [sp, #17]
    310a:	404a      	eors	r2, r1
    310c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3110:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3114:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3118:	404a      	eors	r2, r1
    311a:	f88d 2012 	strb.w	r2, [sp, #18]
    311e:	b2db      	uxtb	r3, r3
    3120:	f89d 2013 	ldrb.w	r2, [sp, #19]
    3124:	4053      	eors	r3, r2
    3126:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3130:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3134:	f88d 2014 	strb.w	r2, [sp, #20]
    3138:	f3c3 4207 	ubfx	r2, r3, #16, #8
    313c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3140:	404a      	eors	r2, r1
    3142:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3146:	f3c3 2207 	ubfx	r2, r3, #8, #8
    314a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    314e:	404a      	eors	r2, r1
    3150:	f88d 2016 	strb.w	r2, [sp, #22]
    3154:	b2db      	uxtb	r3, r3
    3156:	f89d 2017 	ldrb.w	r2, [sp, #23]
    315a:	4053      	eors	r3, r2
    315c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3160:	68bb      	ldr	r3, [r7, #8]
    3162:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3166:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    316a:	f88d 2018 	strb.w	r2, [sp, #24]
    316e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3172:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3176:	404a      	eors	r2, r1
    3178:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    317c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3180:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3184:	404a      	eors	r2, r1
    3186:	f88d 201a 	strb.w	r2, [sp, #26]
    318a:	b2db      	uxtb	r3, r3
    318c:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3190:	4053      	eors	r3, r2
    3192:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3196:	68fb      	ldr	r3, [r7, #12]
    3198:	f89d 201c 	ldrb.w	r2, [sp, #28]
    319c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31a0:	f88d 201c 	strb.w	r2, [sp, #28]
    31a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31a8:	f89d 101d 	ldrb.w	r1, [sp, #29]
    31ac:	404a      	eors	r2, r1
    31ae:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    31b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31b6:	f89d 101e 	ldrb.w	r1, [sp, #30]
    31ba:	404a      	eors	r2, r1
    31bc:	f88d 201e 	strb.w	r2, [sp, #30]
    31c0:	b2db      	uxtb	r3, r3
    31c2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    31c6:	4053      	eors	r3, r2
    31c8:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    31cc:	2500      	movs	r5, #0
    31ce:	e210      	b.n	35f2 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    31d0:	a904      	add	r1, sp, #16
    31d2:	5ccc      	ldrb	r4, [r1, r3]
    31d4:	4a02      	ldr	r2, [pc, #8]	; (31e0 <tc_aes_encrypt+0x118>)
    31d6:	5d14      	ldrb	r4, [r2, r4]
    31d8:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    31da:	3301      	adds	r3, #1
    31dc:	e002      	b.n	31e4 <tc_aes_encrypt+0x11c>
    31de:	bf00      	nop
    31e0:	0002f248 	.word	0x0002f248
    31e4:	2b0f      	cmp	r3, #15
    31e6:	d9f3      	bls.n	31d0 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    31e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    31ec:	f88d 3000 	strb.w	r3, [sp]
    31f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    31f4:	f88d 3001 	strb.w	r3, [sp, #1]
    31f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    31fc:	f88d 3002 	strb.w	r3, [sp, #2]
    3200:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3204:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3208:	f89d 3014 	ldrb.w	r3, [sp, #20]
    320c:	f88d 3004 	strb.w	r3, [sp, #4]
    3210:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3214:	f88d 3005 	strb.w	r3, [sp, #5]
    3218:	f89d 301e 	ldrb.w	r3, [sp, #30]
    321c:	f88d 3006 	strb.w	r3, [sp, #6]
    3220:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3224:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3228:	f89d 3018 	ldrb.w	r3, [sp, #24]
    322c:	f88d 3008 	strb.w	r3, [sp, #8]
    3230:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3234:	f88d 3009 	strb.w	r3, [sp, #9]
    3238:	f89d 3012 	ldrb.w	r3, [sp, #18]
    323c:	f88d 300a 	strb.w	r3, [sp, #10]
    3240:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3244:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3248:	f89d 301c 	ldrb.w	r3, [sp, #28]
    324c:	f88d 300c 	strb.w	r3, [sp, #12]
    3250:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3254:	f88d 300d 	strb.w	r3, [sp, #13]
    3258:	f89d 3016 	ldrb.w	r3, [sp, #22]
    325c:	f88d 300e 	strb.w	r3, [sp, #14]
    3260:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3264:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3268:	2310      	movs	r3, #16
    326a:	466a      	mov	r2, sp
    326c:	4619      	mov	r1, r3
    326e:	eb0d 0003 	add.w	r0, sp, r3
    3272:	f7ff feb2 	bl	2fda <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3276:	f89d 0010 	ldrb.w	r0, [sp, #16]
    327a:	f7ff febe 	bl	2ffa <_double_byte>
    327e:	4604      	mov	r4, r0
    3280:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3284:	f7ff feb9 	bl	2ffa <_double_byte>
    3288:	f89d 1011 	ldrb.w	r1, [sp, #17]
    328c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3290:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3294:	4048      	eors	r0, r1
    3296:	4044      	eors	r4, r0
    3298:	4062      	eors	r2, r4
    329a:	4053      	eors	r3, r2
    329c:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    32a0:	f89d 4010 	ldrb.w	r4, [sp, #16]
    32a4:	4608      	mov	r0, r1
    32a6:	f7ff fea8 	bl	2ffa <_double_byte>
    32aa:	4044      	eors	r4, r0
    32ac:	b2e4      	uxtb	r4, r4
    32ae:	f89d 0012 	ldrb.w	r0, [sp, #18]
    32b2:	f7ff fea2 	bl	2ffa <_double_byte>
    32b6:	f89d 2012 	ldrb.w	r2, [sp, #18]
    32ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32be:	4050      	eors	r0, r2
    32c0:	4044      	eors	r4, r0
    32c2:	405c      	eors	r4, r3
    32c4:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    32c8:	f89d 4010 	ldrb.w	r4, [sp, #16]
    32cc:	f89d 0011 	ldrb.w	r0, [sp, #17]
    32d0:	4044      	eors	r4, r0
    32d2:	4610      	mov	r0, r2
    32d4:	f7ff fe91 	bl	2ffa <_double_byte>
    32d8:	4044      	eors	r4, r0
    32da:	b2e4      	uxtb	r4, r4
    32dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32e0:	f7ff fe8b 	bl	2ffa <_double_byte>
    32e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32e8:	4058      	eors	r0, r3
    32ea:	4044      	eors	r4, r0
    32ec:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    32f0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    32f4:	f7ff fe81 	bl	2ffa <_double_byte>
    32f8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    32fc:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3300:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3304:	4050      	eors	r0, r2
    3306:	4043      	eors	r3, r0
    3308:	405c      	eors	r4, r3
    330a:	b2e4      	uxtb	r4, r4
    330c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3310:	f7ff fe73 	bl	2ffa <_double_byte>
    3314:	4060      	eors	r0, r4
    3316:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    331a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    331e:	f7ff fe6c 	bl	2ffa <_double_byte>
    3322:	4604      	mov	r4, r0
    3324:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3328:	f7ff fe67 	bl	2ffa <_double_byte>
    332c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3330:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3334:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3338:	4048      	eors	r0, r1
    333a:	4044      	eors	r4, r0
    333c:	4062      	eors	r2, r4
    333e:	4053      	eors	r3, r2
    3340:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3344:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3348:	4608      	mov	r0, r1
    334a:	f7ff fe56 	bl	2ffa <_double_byte>
    334e:	4044      	eors	r4, r0
    3350:	b2e4      	uxtb	r4, r4
    3352:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3356:	f7ff fe50 	bl	2ffa <_double_byte>
    335a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    335e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3362:	4050      	eors	r0, r2
    3364:	4044      	eors	r4, r0
    3366:	405c      	eors	r4, r3
    3368:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    336c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3370:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3374:	4044      	eors	r4, r0
    3376:	4610      	mov	r0, r2
    3378:	f7ff fe3f 	bl	2ffa <_double_byte>
    337c:	4044      	eors	r4, r0
    337e:	b2e4      	uxtb	r4, r4
    3380:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3384:	f7ff fe39 	bl	2ffa <_double_byte>
    3388:	f89d 3017 	ldrb.w	r3, [sp, #23]
    338c:	4058      	eors	r0, r3
    338e:	4044      	eors	r4, r0
    3390:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3394:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3398:	f7ff fe2f 	bl	2ffa <_double_byte>
    339c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    33a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    33a4:	f89d 4016 	ldrb.w	r4, [sp, #22]
    33a8:	4050      	eors	r0, r2
    33aa:	4043      	eors	r3, r0
    33ac:	405c      	eors	r4, r3
    33ae:	b2e4      	uxtb	r4, r4
    33b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    33b4:	f7ff fe21 	bl	2ffa <_double_byte>
    33b8:	4060      	eors	r0, r4
    33ba:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    33be:	f89d 0018 	ldrb.w	r0, [sp, #24]
    33c2:	f7ff fe1a 	bl	2ffa <_double_byte>
    33c6:	4604      	mov	r4, r0
    33c8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    33cc:	f7ff fe15 	bl	2ffa <_double_byte>
    33d0:	f89d 1019 	ldrb.w	r1, [sp, #25]
    33d4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33d8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33dc:	4048      	eors	r0, r1
    33de:	4044      	eors	r4, r0
    33e0:	4062      	eors	r2, r4
    33e2:	4053      	eors	r3, r2
    33e4:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33ec:	4608      	mov	r0, r1
    33ee:	f7ff fe04 	bl	2ffa <_double_byte>
    33f2:	4044      	eors	r4, r0
    33f4:	b2e4      	uxtb	r4, r4
    33f6:	f89d 001a 	ldrb.w	r0, [sp, #26]
    33fa:	f7ff fdfe 	bl	2ffa <_double_byte>
    33fe:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3402:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3406:	4050      	eors	r0, r2
    3408:	4044      	eors	r4, r0
    340a:	405c      	eors	r4, r3
    340c:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3410:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3414:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3418:	4044      	eors	r4, r0
    341a:	4610      	mov	r0, r2
    341c:	f7ff fded 	bl	2ffa <_double_byte>
    3420:	4044      	eors	r4, r0
    3422:	b2e4      	uxtb	r4, r4
    3424:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3428:	f7ff fde7 	bl	2ffa <_double_byte>
    342c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3430:	4058      	eors	r0, r3
    3432:	4044      	eors	r4, r0
    3434:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3438:	f89d 0018 	ldrb.w	r0, [sp, #24]
    343c:	f7ff fddd 	bl	2ffa <_double_byte>
    3440:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3444:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3448:	f89d 401a 	ldrb.w	r4, [sp, #26]
    344c:	4050      	eors	r0, r2
    344e:	4043      	eors	r3, r0
    3450:	405c      	eors	r4, r3
    3452:	b2e4      	uxtb	r4, r4
    3454:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3458:	f7ff fdcf 	bl	2ffa <_double_byte>
    345c:	4060      	eors	r0, r4
    345e:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3462:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3466:	f7ff fdc8 	bl	2ffa <_double_byte>
    346a:	4604      	mov	r4, r0
    346c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3470:	f7ff fdc3 	bl	2ffa <_double_byte>
    3474:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3478:	f89d 201e 	ldrb.w	r2, [sp, #30]
    347c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3480:	4048      	eors	r0, r1
    3482:	4044      	eors	r4, r0
    3484:	4062      	eors	r2, r4
    3486:	4053      	eors	r3, r2
    3488:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    348c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3490:	4608      	mov	r0, r1
    3492:	f7ff fdb2 	bl	2ffa <_double_byte>
    3496:	4044      	eors	r4, r0
    3498:	b2e4      	uxtb	r4, r4
    349a:	f89d 001e 	ldrb.w	r0, [sp, #30]
    349e:	f7ff fdac 	bl	2ffa <_double_byte>
    34a2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34aa:	4050      	eors	r0, r2
    34ac:	4044      	eors	r4, r0
    34ae:	405c      	eors	r4, r3
    34b0:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    34b4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    34b8:	f89d 001d 	ldrb.w	r0, [sp, #29]
    34bc:	4044      	eors	r4, r0
    34be:	4610      	mov	r0, r2
    34c0:	f7ff fd9b 	bl	2ffa <_double_byte>
    34c4:	4044      	eors	r4, r0
    34c6:	b2e4      	uxtb	r4, r4
    34c8:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34cc:	f7ff fd95 	bl	2ffa <_double_byte>
    34d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34d4:	4058      	eors	r0, r3
    34d6:	4044      	eors	r4, r0
    34d8:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    34dc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34e0:	f7ff fd8b 	bl	2ffa <_double_byte>
    34e4:	f89d 201c 	ldrb.w	r2, [sp, #28]
    34e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34ec:	f89d 401e 	ldrb.w	r4, [sp, #30]
    34f0:	4050      	eors	r0, r2
    34f2:	4043      	eors	r3, r0
    34f4:	405c      	eors	r4, r3
    34f6:	b2e4      	uxtb	r4, r4
    34f8:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34fc:	f7ff fd7d 	bl	2ffa <_double_byte>
    3500:	4060      	eors	r0, r4
    3502:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3506:	2310      	movs	r3, #16
    3508:	466a      	mov	r2, sp
    350a:	4619      	mov	r1, r3
    350c:	eb0d 0003 	add.w	r0, sp, r3
    3510:	f7ff fd63 	bl	2fda <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3514:	3501      	adds	r5, #1
    3516:	012b      	lsls	r3, r5, #4
    3518:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    351a:	58f3      	ldr	r3, [r6, r3]
    351c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3520:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3524:	f88d 1010 	strb.w	r1, [sp, #16]
    3528:	f3c3 4107 	ubfx	r1, r3, #16, #8
    352c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3530:	4041      	eors	r1, r0
    3532:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3536:	f3c3 2107 	ubfx	r1, r3, #8, #8
    353a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    353e:	4041      	eors	r1, r0
    3540:	f88d 1012 	strb.w	r1, [sp, #18]
    3544:	b2db      	uxtb	r3, r3
    3546:	f89d 1013 	ldrb.w	r1, [sp, #19]
    354a:	404b      	eors	r3, r1
    354c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3550:	6853      	ldr	r3, [r2, #4]
    3552:	f89d 1014 	ldrb.w	r1, [sp, #20]
    3556:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    355a:	f88d 1014 	strb.w	r1, [sp, #20]
    355e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3562:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3566:	4041      	eors	r1, r0
    3568:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    356c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3570:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3574:	4041      	eors	r1, r0
    3576:	f88d 1016 	strb.w	r1, [sp, #22]
    357a:	b2db      	uxtb	r3, r3
    357c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3580:	404b      	eors	r3, r1
    3582:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3586:	6893      	ldr	r3, [r2, #8]
    3588:	f89d 1018 	ldrb.w	r1, [sp, #24]
    358c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3590:	f88d 1018 	strb.w	r1, [sp, #24]
    3594:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3598:	f89d 0019 	ldrb.w	r0, [sp, #25]
    359c:	4041      	eors	r1, r0
    359e:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    35a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    35a6:	f89d 001a 	ldrb.w	r0, [sp, #26]
    35aa:	4041      	eors	r1, r0
    35ac:	f88d 101a 	strb.w	r1, [sp, #26]
    35b0:	b2db      	uxtb	r3, r3
    35b2:	f89d 101b 	ldrb.w	r1, [sp, #27]
    35b6:	404b      	eors	r3, r1
    35b8:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    35bc:	68d3      	ldr	r3, [r2, #12]
    35be:	f89d 201c 	ldrb.w	r2, [sp, #28]
    35c2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    35c6:	f88d 201c 	strb.w	r2, [sp, #28]
    35ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
    35ce:	f89d 101d 	ldrb.w	r1, [sp, #29]
    35d2:	404a      	eors	r2, r1
    35d4:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    35d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    35dc:	f89d 101e 	ldrb.w	r1, [sp, #30]
    35e0:	404a      	eors	r2, r1
    35e2:	f88d 201e 	strb.w	r2, [sp, #30]
    35e6:	b2db      	uxtb	r3, r3
    35e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    35ec:	4053      	eors	r3, r2
    35ee:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    35f2:	2d08      	cmp	r5, #8
    35f4:	d801      	bhi.n	35fa <tc_aes_encrypt+0x532>
    35f6:	2300      	movs	r3, #0
    35f8:	e5f4      	b.n	31e4 <tc_aes_encrypt+0x11c>
    35fa:	2300      	movs	r3, #0
    35fc:	e005      	b.n	360a <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    35fe:	aa04      	add	r2, sp, #16
    3600:	5cd1      	ldrb	r1, [r2, r3]
    3602:	4869      	ldr	r0, [pc, #420]	; (37a8 <tc_aes_encrypt+0x6e0>)
    3604:	5c41      	ldrb	r1, [r0, r1]
    3606:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3608:	3301      	adds	r3, #1
    360a:	2b0f      	cmp	r3, #15
    360c:	d9f7      	bls.n	35fe <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    360e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3612:	f88d 3000 	strb.w	r3, [sp]
    3616:	f89d 3015 	ldrb.w	r3, [sp, #21]
    361a:	f88d 3001 	strb.w	r3, [sp, #1]
    361e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3622:	f88d 3002 	strb.w	r3, [sp, #2]
    3626:	f89d 301f 	ldrb.w	r3, [sp, #31]
    362a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    362e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3632:	f88d 3004 	strb.w	r3, [sp, #4]
    3636:	f89d 3019 	ldrb.w	r3, [sp, #25]
    363a:	f88d 3005 	strb.w	r3, [sp, #5]
    363e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3642:	f88d 3006 	strb.w	r3, [sp, #6]
    3646:	f89d 3013 	ldrb.w	r3, [sp, #19]
    364a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    364e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3652:	f88d 3008 	strb.w	r3, [sp, #8]
    3656:	f89d 301d 	ldrb.w	r3, [sp, #29]
    365a:	f88d 3009 	strb.w	r3, [sp, #9]
    365e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3662:	f88d 300a 	strb.w	r3, [sp, #10]
    3666:	f89d 3017 	ldrb.w	r3, [sp, #23]
    366a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    366e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3672:	f88d 300c 	strb.w	r3, [sp, #12]
    3676:	f89d 3011 	ldrb.w	r3, [sp, #17]
    367a:	f88d 300d 	strb.w	r3, [sp, #13]
    367e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3682:	f88d 300e 	strb.w	r3, [sp, #14]
    3686:	f89d 301b 	ldrb.w	r3, [sp, #27]
    368a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    368e:	2310      	movs	r3, #16
    3690:	466a      	mov	r2, sp
    3692:	4619      	mov	r1, r3
    3694:	eb0d 0003 	add.w	r0, sp, r3
    3698:	f7ff fc9f 	bl	2fda <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    369c:	1c6b      	adds	r3, r5, #1
    369e:	011b      	lsls	r3, r3, #4
    36a0:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    36a2:	58fb      	ldr	r3, [r7, r3]
    36a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    36a8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36ac:	f88d 1010 	strb.w	r1, [sp, #16]
    36b0:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36b4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    36b8:	4041      	eors	r1, r0
    36ba:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    36be:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36c2:	f89d 0012 	ldrb.w	r0, [sp, #18]
    36c6:	4041      	eors	r1, r0
    36c8:	f88d 1012 	strb.w	r1, [sp, #18]
    36cc:	b2db      	uxtb	r3, r3
    36ce:	f89d 1013 	ldrb.w	r1, [sp, #19]
    36d2:	404b      	eors	r3, r1
    36d4:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    36d8:	6853      	ldr	r3, [r2, #4]
    36da:	f89d 1014 	ldrb.w	r1, [sp, #20]
    36de:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36e2:	f88d 1014 	strb.w	r1, [sp, #20]
    36e6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36ea:	f89d 0015 	ldrb.w	r0, [sp, #21]
    36ee:	4041      	eors	r1, r0
    36f0:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    36f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36f8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    36fc:	4041      	eors	r1, r0
    36fe:	f88d 1016 	strb.w	r1, [sp, #22]
    3702:	b2db      	uxtb	r3, r3
    3704:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3708:	404b      	eors	r3, r1
    370a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    370e:	6893      	ldr	r3, [r2, #8]
    3710:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3714:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3718:	f88d 1018 	strb.w	r1, [sp, #24]
    371c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3720:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3724:	4041      	eors	r1, r0
    3726:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    372a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    372e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3732:	4041      	eors	r1, r0
    3734:	f88d 101a 	strb.w	r1, [sp, #26]
    3738:	b2db      	uxtb	r3, r3
    373a:	f89d 101b 	ldrb.w	r1, [sp, #27]
    373e:	404b      	eors	r3, r1
    3740:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3744:	68d3      	ldr	r3, [r2, #12]
    3746:	f89d 201c 	ldrb.w	r2, [sp, #28]
    374a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    374e:	f88d 201c 	strb.w	r2, [sp, #28]
    3752:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3756:	f89d 101d 	ldrb.w	r1, [sp, #29]
    375a:	404a      	eors	r2, r1
    375c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3760:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3764:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3768:	404a      	eors	r2, r1
    376a:	f88d 201e 	strb.w	r2, [sp, #30]
    376e:	b2db      	uxtb	r3, r3
    3770:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3774:	4053      	eors	r3, r2
    3776:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    377a:	2310      	movs	r3, #16
    377c:	eb0d 0203 	add.w	r2, sp, r3
    3780:	4619      	mov	r1, r3
    3782:	4640      	mov	r0, r8
    3784:	f7ff fc29 	bl	2fda <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3788:	2210      	movs	r2, #16
    378a:	2100      	movs	r1, #0
    378c:	eb0d 0002 	add.w	r0, sp, r2
    3790:	f7ff fc2f 	bl	2ff2 <_set>

	return TC_CRYPTO_SUCCESS;
    3794:	2001      	movs	r0, #1
}
    3796:	b008      	add	sp, #32
    3798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    379c:	2000      	movs	r0, #0
    379e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    37a0:	2000      	movs	r0, #0
    37a2:	e7f8      	b.n	3796 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    37a4:	2000      	movs	r0, #0
    37a6:	e7f6      	b.n	3796 <tc_aes_encrypt+0x6ce>
    37a8:	0002f248 	.word	0x0002f248

000037ac <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    37ac:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    37ae:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    37b2:	f991 3000 	ldrsb.w	r3, [r1]
    37b6:	2b00      	cmp	r3, #0
    37b8:	db0d      	blt.n	37d6 <gf_double+0x2a>
    37ba:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    37bc:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    37be:	1e45      	subs	r5, r0, #1
    37c0:	7814      	ldrb	r4, [r2, #0]
    37c2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    37c6:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    37c8:	428a      	cmp	r2, r1
    37ca:	d006      	beq.n	37da <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    37cc:	7813      	ldrb	r3, [r2, #0]
    37ce:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    37d0:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    37d2:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    37d4:	e7f3      	b.n	37be <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    37d6:	2387      	movs	r3, #135	; 0x87
    37d8:	e7f0      	b.n	37bc <gf_double+0x10>
	}
}
    37da:	bc30      	pop	{r4, r5}
    37dc:	4770      	bx	lr

000037de <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    37de:	b130      	cbz	r0, 37ee <tc_cmac_erase+0x10>
{
    37e0:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    37e2:	2258      	movs	r2, #88	; 0x58
    37e4:	2100      	movs	r1, #0
    37e6:	f7ff fc04 	bl	2ff2 <_set>

	return TC_CRYPTO_SUCCESS;
    37ea:	2001      	movs	r0, #1
    37ec:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    37ee:	2000      	movs	r0, #0
    37f0:	4770      	bx	lr

000037f2 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37f2:	b1a0      	cbz	r0, 381e <tc_cmac_init+0x2c>
{
    37f4:	b510      	push	{r4, lr}
    37f6:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37f8:	2210      	movs	r2, #16
    37fa:	2100      	movs	r1, #0
    37fc:	f7ff fbf9 	bl	2ff2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    3800:	2210      	movs	r2, #16
    3802:	2100      	movs	r1, #0
    3804:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3808:	f7ff fbf3 	bl	2ff2 <_set>
	s->leftover_offset = 0;
    380c:	2300      	movs	r3, #0
    380e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    3810:	2200      	movs	r2, #0
    3812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3816:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    381a:	2001      	movs	r0, #1
    381c:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    381e:	2000      	movs	r0, #0
    3820:	4770      	bx	lr

00003822 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    3822:	b338      	cbz	r0, 3874 <tc_cmac_setup+0x52>
{
    3824:	b570      	push	{r4, r5, r6, lr}
    3826:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    3828:	b331      	cbz	r1, 3878 <tc_cmac_setup+0x56>
    382a:	4616      	mov	r6, r2
    382c:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    382e:	2258      	movs	r2, #88	; 0x58
    3830:	2100      	movs	r1, #0
    3832:	f7ff fbde 	bl	2ff2 <_set>
	s->sched = sched;
    3836:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3838:	4629      	mov	r1, r5
    383a:	4630      	mov	r0, r6
    383c:	f7ff fbe6 	bl	300c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3840:	2210      	movs	r2, #16
    3842:	2100      	movs	r1, #0
    3844:	4620      	mov	r0, r4
    3846:	f7ff fbd4 	bl	2ff2 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    384a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    384c:	4621      	mov	r1, r4
    384e:	4620      	mov	r0, r4
    3850:	f7ff fc3a 	bl	30c8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    3854:	f104 0510 	add.w	r5, r4, #16
    3858:	4621      	mov	r1, r4
    385a:	4628      	mov	r0, r5
    385c:	f7ff ffa6 	bl	37ac <gf_double>
	gf_double (s->K2, s->K1);
    3860:	4629      	mov	r1, r5
    3862:	f104 0020 	add.w	r0, r4, #32
    3866:	f7ff ffa1 	bl	37ac <gf_double>
	tc_cmac_init(s);
    386a:	4620      	mov	r0, r4
    386c:	f7ff ffc1 	bl	37f2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3870:	2001      	movs	r0, #1
    3872:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3874:	2000      	movs	r0, #0
    3876:	4770      	bx	lr
    3878:	2000      	movs	r0, #0
}
    387a:	bd70      	pop	{r4, r5, r6, pc}

0000387c <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    387c:	2800      	cmp	r0, #0
    387e:	d05f      	beq.n	3940 <tc_cmac_update+0xc4>
{
    3880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3882:	460d      	mov	r5, r1
    3884:	4616      	mov	r6, r2
    3886:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    3888:	2a00      	cmp	r2, #0
    388a:	d05b      	beq.n	3944 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    388c:	2900      	cmp	r1, #0
    388e:	d05b      	beq.n	3948 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3890:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3894:	ea52 0103 	orrs.w	r1, r2, r3
    3898:	d058      	beq.n	394c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    389a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    389e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    38a2:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    38a6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    38a8:	2800      	cmp	r0, #0
    38aa:	d038      	beq.n	391e <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    38ac:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    38b0:	42be      	cmp	r6, r7
    38b2:	d30b      	bcc.n	38cc <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    38b4:	3030      	adds	r0, #48	; 0x30
    38b6:	463b      	mov	r3, r7
    38b8:	462a      	mov	r2, r5
    38ba:	4639      	mov	r1, r7
    38bc:	4420      	add	r0, r4
    38be:	f7ff fb8c 	bl	2fda <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    38c2:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    38c4:	443d      	add	r5, r7
		s->leftover_offset = 0;
    38c6:	2300      	movs	r3, #0
    38c8:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38ca:	e012      	b.n	38f2 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    38cc:	3030      	adds	r0, #48	; 0x30
    38ce:	4633      	mov	r3, r6
    38d0:	462a      	mov	r2, r5
    38d2:	4631      	mov	r1, r6
    38d4:	4420      	add	r0, r4
    38d6:	f7ff fb80 	bl	2fda <_copy>
			s->leftover_offset += data_length;
    38da:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38dc:	4433      	add	r3, r6
    38de:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    38e0:	2001      	movs	r0, #1
    38e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    38e4:	18e2      	adds	r2, r4, r3
    38e6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    38ea:	5ce1      	ldrb	r1, [r4, r3]
    38ec:	404a      	eors	r2, r1
    38ee:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38f0:	3301      	adds	r3, #1
    38f2:	2b0f      	cmp	r3, #15
    38f4:	d9f6      	bls.n	38e4 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38f8:	4621      	mov	r1, r4
    38fa:	4620      	mov	r0, r4
    38fc:	f7ff fbe4 	bl	30c8 <tc_aes_encrypt>
    3900:	e00d      	b.n	391e <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    3902:	5cea      	ldrb	r2, [r5, r3]
    3904:	5ce1      	ldrb	r1, [r4, r3]
    3906:	404a      	eors	r2, r1
    3908:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    390a:	3301      	adds	r3, #1
    390c:	2b0f      	cmp	r3, #15
    390e:	d9f8      	bls.n	3902 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3910:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3912:	4621      	mov	r1, r4
    3914:	4620      	mov	r0, r4
    3916:	f7ff fbd7 	bl	30c8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    391a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    391c:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    391e:	2e10      	cmp	r6, #16
    3920:	d901      	bls.n	3926 <tc_cmac_update+0xaa>
    3922:	2300      	movs	r3, #0
    3924:	e7f2      	b.n	390c <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    3926:	b90e      	cbnz	r6, 392c <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    3928:	2001      	movs	r0, #1
}
    392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    392c:	4633      	mov	r3, r6
    392e:	462a      	mov	r2, r5
    3930:	4631      	mov	r1, r6
    3932:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3936:	f7ff fb50 	bl	2fda <_copy>
		s->leftover_offset = data_length;
    393a:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    393c:	2001      	movs	r0, #1
    393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3940:	2000      	movs	r0, #0
    3942:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    3944:	2001      	movs	r0, #1
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3948:	2000      	movs	r0, #0
    394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    394c:	2000      	movs	r0, #0
    394e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003950 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3950:	b370      	cbz	r0, 39b0 <tc_cmac_final+0x60>
{
    3952:	b570      	push	{r4, r5, r6, lr}
    3954:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    3956:	b369      	cbz	r1, 39b4 <tc_cmac_final+0x64>
    3958:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    395a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    395c:	2a10      	cmp	r2, #16
    395e:	d010      	beq.n	3982 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3960:	f102 0030 	add.w	r0, r2, #48	; 0x30
    3964:	f1c2 0210 	rsb	r2, r2, #16
    3968:	2100      	movs	r1, #0
    396a:	4428      	add	r0, r5
    396c:	f7ff fb41 	bl	2ff2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3970:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3972:	442b      	add	r3, r5
    3974:	2280      	movs	r2, #128	; 0x80
    3976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    397a:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    397e:	2300      	movs	r3, #0
    3980:	e00a      	b.n	3998 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3982:	3110      	adds	r1, #16
    3984:	e7fb      	b.n	397e <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    3986:	18ea      	adds	r2, r5, r3
    3988:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    398c:	5ccc      	ldrb	r4, [r1, r3]
    398e:	4054      	eors	r4, r2
    3990:	5cea      	ldrb	r2, [r5, r3]
    3992:	4062      	eors	r2, r4
    3994:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3996:	3301      	adds	r3, #1
    3998:	2b0f      	cmp	r3, #15
    399a:	d9f4      	bls.n	3986 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    399c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    399e:	4629      	mov	r1, r5
    39a0:	4630      	mov	r0, r6
    39a2:	f7ff fb91 	bl	30c8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    39a6:	4628      	mov	r0, r5
    39a8:	f7ff ff19 	bl	37de <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    39ac:	2001      	movs	r0, #1
    39ae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    39b0:	2000      	movs	r0, #0
    39b2:	4770      	bx	lr
    39b4:	2000      	movs	r0, #0
}
    39b6:	bd70      	pop	{r4, r5, r6, pc}

000039b8 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    39b8:	2000      	movs	r0, #0
    39ba:	4770      	bx	lr

000039bc <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    39bc:	b530      	push	{r4, r5, lr}
    39be:	b085      	sub	sp, #20
    39c0:	4604      	mov	r4, r0
    39c2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    39c4:	2203      	movs	r2, #3
    39c6:	4668      	mov	r0, sp
    39c8:	f7fc fc7a 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    39cc:	220d      	movs	r2, #13
    39ce:	2100      	movs	r1, #0
    39d0:	f10d 0003 	add.w	r0, sp, #3
    39d4:	f027 f872 	bl	2aabc <memset>

	err = bt_encrypt_le(irk, res, res);
    39d8:	466a      	mov	r2, sp
    39da:	4669      	mov	r1, sp
    39dc:	4620      	mov	r0, r4
    39de:	f00d f89f 	bl	10b20 <bt_encrypt_le>
	if (err) {
    39e2:	4604      	mov	r4, r0
    39e4:	b110      	cbz	r0, 39ec <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    39e6:	4620      	mov	r0, r4
    39e8:	b005      	add	sp, #20
    39ea:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    39ec:	2203      	movs	r2, #3
    39ee:	4669      	mov	r1, sp
    39f0:	4628      	mov	r0, r5
    39f2:	f7fc fc65 	bl	2c0 <memcpy>
	return 0;
    39f6:	e7f6      	b.n	39e6 <ah+0x2a>

000039f8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    39f8:	b510      	push	{r4, lr}
    39fa:	b082      	sub	sp, #8
    39fc:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    39fe:	aa01      	add	r2, sp, #4
    3a00:	3103      	adds	r1, #3
    3a02:	f7ff ffdb 	bl	39bc <ah>
	if (err) {
    3a06:	b110      	cbz	r0, 3a0e <bt_rpa_irk_matches+0x16>
		return false;
    3a08:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    3a0a:	b002      	add	sp, #8
    3a0c:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    3a0e:	2203      	movs	r2, #3
    3a10:	a901      	add	r1, sp, #4
    3a12:	4620      	mov	r0, r4
    3a14:	f026 ffbe 	bl	2a994 <memcmp>
    3a18:	fab0 f080 	clz	r0, r0
    3a1c:	0940      	lsrs	r0, r0, #5
    3a1e:	e7f4      	b.n	3a0a <bt_rpa_irk_matches+0x12>

00003a20 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	4606      	mov	r6, r0
    3a24:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    3a26:	1ccd      	adds	r5, r1, #3
    3a28:	2103      	movs	r1, #3
    3a2a:	4628      	mov	r0, r5
    3a2c:	f00d f85c 	bl	10ae8 <bt_rand>
	if (err) {
    3a30:	4603      	mov	r3, r0
    3a32:	b108      	cbz	r0, 3a38 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    3a34:	4618      	mov	r0, r3
    3a36:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    3a38:	f994 3005 	ldrsb.w	r3, [r4, #5]
    3a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a44:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    3a46:	4622      	mov	r2, r4
    3a48:	4629      	mov	r1, r5
    3a4a:	4630      	mov	r0, r6
    3a4c:	f7ff ffb6 	bl	39bc <ah>
    3a50:	4603      	mov	r3, r0
    3a52:	e7ef      	b.n	3a34 <bt_rpa_create+0x14>

00003a54 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3a54:	b570      	push	{r4, r5, r6, lr}
    3a56:	4605      	mov	r5, r0
    3a58:	460c      	mov	r4, r1
	switch (src->type) {
    3a5a:	7803      	ldrb	r3, [r0, #0]
    3a5c:	2b01      	cmp	r3, #1
    3a5e:	d010      	beq.n	3a82 <uuid_to_uuid128+0x2e>
    3a60:	b113      	cbz	r3, 3a68 <uuid_to_uuid128+0x14>
    3a62:	2b02      	cmp	r3, #2
    3a64:	d01f      	beq.n	3aa6 <uuid_to_uuid128+0x52>
    3a66:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    3a68:	4e12      	ldr	r6, [pc, #72]	; (3ab4 <uuid_to_uuid128+0x60>)
    3a6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3a6c:	6020      	str	r0, [r4, #0]
    3a6e:	6061      	str	r1, [r4, #4]
    3a70:	60a2      	str	r2, [r4, #8]
    3a72:	60e3      	str	r3, [r4, #12]
    3a74:	7833      	ldrb	r3, [r6, #0]
    3a76:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    3a78:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3a7a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3a7c:	0a1b      	lsrs	r3, r3, #8
    3a7e:	73a3      	strb	r3, [r4, #14]
    3a80:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    3a82:	4e0c      	ldr	r6, [pc, #48]	; (3ab4 <uuid_to_uuid128+0x60>)
    3a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3a86:	6020      	str	r0, [r4, #0]
    3a88:	6061      	str	r1, [r4, #4]
    3a8a:	60a2      	str	r2, [r4, #8]
    3a8c:	60e3      	str	r3, [r4, #12]
    3a8e:	7833      	ldrb	r3, [r6, #0]
    3a90:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    3a92:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    3a94:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3a96:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3a9a:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3a9c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    3a9e:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    3aa0:	0a1b      	lsrs	r3, r3, #8
    3aa2:	7423      	strb	r3, [r4, #16]
    3aa4:	bd70      	pop	{r4, r5, r6, pc}
    3aa6:	4608      	mov	r0, r1
    3aa8:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    3aaa:	2211      	movs	r2, #17
    3aac:	f7fc fc08 	bl	2c0 <memcpy>
    3ab0:	bd70      	pop	{r4, r5, r6, pc}
    3ab2:	bf00      	nop
    3ab4:	0002f4e0 	.word	0x0002f4e0

00003ab8 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3ab8:	b510      	push	{r4, lr}
    3aba:	b08a      	sub	sp, #40	; 0x28
    3abc:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    3abe:	a905      	add	r1, sp, #20
    3ac0:	f7ff ffc8 	bl	3a54 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3ac4:	4669      	mov	r1, sp
    3ac6:	4620      	mov	r0, r4
    3ac8:	f7ff ffc4 	bl	3a54 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    3acc:	2210      	movs	r2, #16
    3ace:	f10d 0101 	add.w	r1, sp, #1
    3ad2:	f10d 0015 	add.w	r0, sp, #21
    3ad6:	f026 ff5d 	bl	2a994 <memcmp>
}
    3ada:	b00a      	add	sp, #40	; 0x28
    3adc:	bd10      	pop	{r4, pc}

00003ade <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3ade:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3ae0:	7803      	ldrb	r3, [r0, #0]
    3ae2:	780a      	ldrb	r2, [r1, #0]
    3ae4:	4293      	cmp	r3, r2
    3ae6:	d107      	bne.n	3af8 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    3ae8:	2b01      	cmp	r3, #1
    3aea:	d00c      	beq.n	3b06 <bt_uuid_cmp+0x28>
    3aec:	b13b      	cbz	r3, 3afe <bt_uuid_cmp+0x20>
    3aee:	2b02      	cmp	r3, #2
    3af0:	d00d      	beq.n	3b0e <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    3af2:	f06f 0015 	mvn.w	r0, #21
}
    3af6:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    3af8:	f7ff ffde 	bl	3ab8 <uuid128_cmp>
    3afc:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3afe:	8840      	ldrh	r0, [r0, #2]
    3b00:	884b      	ldrh	r3, [r1, #2]
    3b02:	1ac0      	subs	r0, r0, r3
    3b04:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3b06:	6840      	ldr	r0, [r0, #4]
    3b08:	684b      	ldr	r3, [r1, #4]
    3b0a:	1ac0      	subs	r0, r0, r3
    3b0c:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3b0e:	2210      	movs	r2, #16
    3b10:	3101      	adds	r1, #1
    3b12:	3001      	adds	r0, #1
    3b14:	f026 ff3e 	bl	2a994 <memcmp>
    3b18:	bd08      	pop	{r3, pc}
	...

00003b1c <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    3b1c:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    3b1e:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3b20:	4b06      	ldr	r3, [pc, #24]	; (3b3c <le_dhkey_complete+0x20>)
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	b133      	cbz	r3, 3b34 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3b26:	7802      	ldrb	r2, [r0, #0]
    3b28:	b92a      	cbnz	r2, 3b36 <le_dhkey_complete+0x1a>
    3b2a:	3001      	adds	r0, #1
    3b2c:	4798      	blx	r3
		dh_key_cb = NULL;
    3b2e:	2200      	movs	r2, #0
    3b30:	4b02      	ldr	r3, [pc, #8]	; (3b3c <le_dhkey_complete+0x20>)
    3b32:	601a      	str	r2, [r3, #0]
    3b34:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3b36:	2000      	movs	r0, #0
    3b38:	e7f8      	b.n	3b2c <le_dhkey_complete+0x10>
    3b3a:	bf00      	nop
    3b3c:	20000274 	.word	0x20000274

00003b40 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    3b40:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    3b42:	7851      	ldrb	r1, [r2, #1]
    3b44:	4b06      	ldr	r3, [pc, #24]	; (3b60 <read_local_ver_complete+0x20>)
    3b46:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3b48:	8851      	ldrh	r1, [r2, #2]
    3b4a:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3b4c:	7911      	ldrb	r1, [r2, #4]
    3b4e:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3b50:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    3b54:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3b56:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    3b5a:	829a      	strh	r2, [r3, #20]
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop
    3b60:	2000b810 	.word	0x2000b810

00003b64 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    3b64:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    3b66:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    3b68:	7a1a      	ldrb	r2, [r3, #8]
    3b6a:	79dc      	ldrb	r4, [r3, #7]
    3b6c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    3b70:	7999      	ldrb	r1, [r3, #6]
    3b72:	795a      	ldrb	r2, [r3, #5]
    3b74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3b78:	2000      	movs	r0, #0
    3b7a:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    3b7e:	791c      	ldrb	r4, [r3, #4]
    3b80:	78da      	ldrb	r2, [r3, #3]
    3b82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    3b86:	789c      	ldrb	r4, [r3, #2]
    3b88:	785b      	ldrb	r3, [r3, #1]
    3b8a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    3b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3b92:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    3b94:	4b02      	ldr	r3, [pc, #8]	; (3ba0 <le_read_supp_states_complete+0x3c>)
    3b96:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    3b9a:	bc10      	pop	{r4}
    3b9c:	4770      	bx	lr
    3b9e:	bf00      	nop
    3ba0:	2000b810 	.word	0x2000b810

00003ba4 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3ba4:	7803      	ldrb	r3, [r0, #0]
    3ba6:	f013 0f01 	tst.w	r3, #1
    3baa:	d106      	bne.n	3bba <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3bac:	4b0c      	ldr	r3, [pc, #48]	; (3be0 <valid_adv_param+0x3c>)
    3bae:	7b9b      	ldrb	r3, [r3, #14]
    3bb0:	2b08      	cmp	r3, #8
    3bb2:	d802      	bhi.n	3bba <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    3bb4:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3bb6:	2b9f      	cmp	r3, #159	; 0x9f
    3bb8:	d90c      	bls.n	3bd4 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3bba:	8843      	ldrh	r3, [r0, #2]
    3bbc:	8882      	ldrh	r2, [r0, #4]
    3bbe:	4293      	cmp	r3, r2
    3bc0:	d80a      	bhi.n	3bd8 <valid_adv_param+0x34>
    3bc2:	2b1f      	cmp	r3, #31
    3bc4:	d90a      	bls.n	3bdc <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3bc6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    3bca:	d801      	bhi.n	3bd0 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    3bcc:	2001      	movs	r0, #1
}
    3bce:	4770      	bx	lr
		return false;
    3bd0:	2000      	movs	r0, #0
    3bd2:	4770      	bx	lr
			return false;
    3bd4:	2000      	movs	r0, #0
    3bd6:	4770      	bx	lr
		return false;
    3bd8:	2000      	movs	r0, #0
    3bda:	4770      	bx	lr
    3bdc:	2000      	movs	r0, #0
    3bde:	4770      	bx	lr
    3be0:	2000b810 	.word	0x2000b810

00003be4 <hci_reset_complete>:
	u8_t status = buf->data[0];
    3be4:	6883      	ldr	r3, [r0, #8]
    3be6:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    3be8:	b103      	cbz	r3, 3bec <hci_reset_complete+0x8>
    3bea:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    3bec:	2200      	movs	r2, #0
    3bee:	4b07      	ldr	r3, [pc, #28]	; (3c0c <hci_reset_complete+0x28>)
    3bf0:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3bf2:	4b07      	ldr	r3, [pc, #28]	; (3c10 <hci_reset_complete+0x2c>)
    3bf4:	2201      	movs	r2, #1
    3bf6:	f3bf 8f5b 	dmb	ish
    3bfa:	e853 1f00 	ldrex	r1, [r3]
    3bfe:	e843 2000 	strex	r0, r2, [r3]
    3c02:	2800      	cmp	r0, #0
    3c04:	d1f9      	bne.n	3bfa <hci_reset_complete+0x16>
    3c06:	f3bf 8f5b 	dmb	ish
    3c0a:	e7ee      	b.n	3bea <hci_reset_complete+0x6>
    3c0c:	200002c0 	.word	0x200002c0
    3c10:	2000b880 	.word	0x2000b880

00003c14 <read_local_features_complete>:
{
    3c14:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    3c16:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3c18:	2208      	movs	r2, #8
    3c1a:	3101      	adds	r1, #1
    3c1c:	4801      	ldr	r0, [pc, #4]	; (3c24 <read_local_features_complete+0x10>)
    3c1e:	f7fc fb4f 	bl	2c0 <memcpy>
    3c22:	bd08      	pop	{r3, pc}
    3c24:	2000b826 	.word	0x2000b826

00003c28 <read_bdaddr_complete>:
{
    3c28:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    3c2a:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3c2c:	4c04      	ldr	r4, [pc, #16]	; (3c40 <read_bdaddr_complete+0x18>)
    3c2e:	2206      	movs	r2, #6
    3c30:	3101      	adds	r1, #1
    3c32:	1c60      	adds	r0, r4, #1
    3c34:	f7fc fb44 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3c38:	2300      	movs	r3, #0
    3c3a:	7023      	strb	r3, [r4, #0]
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	bf00      	nop
    3c40:	2000b810 	.word	0x2000b810

00003c44 <read_supported_commands_complete>:
{
    3c44:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    3c46:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    3c48:	2240      	movs	r2, #64	; 0x40
    3c4a:	3101      	adds	r1, #1
    3c4c:	4801      	ldr	r0, [pc, #4]	; (3c54 <read_supported_commands_complete+0x10>)
    3c4e:	f7fc fb37 	bl	2c0 <memcpy>
    3c52:	bd08      	pop	{r3, pc}
    3c54:	2000b82e 	.word	0x2000b82e

00003c58 <read_le_features_complete>:
{
    3c58:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    3c5a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3c5c:	2208      	movs	r2, #8
    3c5e:	3101      	adds	r1, #1
    3c60:	4801      	ldr	r0, [pc, #4]	; (3c68 <read_le_features_complete+0x10>)
    3c62:	f7fc fb2d 	bl	2c0 <memcpy>
    3c66:	bd08      	pop	{r3, pc}
    3c68:	2000b888 	.word	0x2000b888

00003c6c <le_read_buffer_size_complete>:
{
    3c6c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    3c6e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    3c70:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3c74:	b299      	uxth	r1, r3
    3c76:	4807      	ldr	r0, [pc, #28]	; (3c94 <le_read_buffer_size_complete+0x28>)
    3c78:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    3c7c:	b901      	cbnz	r1, 3c80 <le_read_buffer_size_complete+0x14>
    3c7e:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    3c80:	78d1      	ldrb	r1, [r2, #3]
    3c82:	2902      	cmp	r1, #2
    3c84:	bf28      	it	cs
    3c86:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3c88:	460a      	mov	r2, r1
    3c8a:	308c      	adds	r0, #140	; 0x8c
    3c8c:	f024 fd98 	bl	287c0 <_impl_k_sem_init>
    3c90:	e7f5      	b.n	3c7e <le_read_buffer_size_complete+0x12>
    3c92:	bf00      	nop
    3c94:	2000b810 	.word	0x2000b810

00003c98 <read_buffer_size_complete>:
{
    3c98:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    3c9a:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    3c9c:	4b09      	ldr	r3, [pc, #36]	; (3cc4 <read_buffer_size_complete+0x2c>)
    3c9e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    3ca2:	b103      	cbz	r3, 3ca6 <read_buffer_size_complete+0xe>
    3ca4:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    3ca6:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3caa:	4806      	ldr	r0, [pc, #24]	; (3cc4 <read_buffer_size_complete+0x2c>)
    3cac:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    3cb0:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    3cb2:	2902      	cmp	r1, #2
    3cb4:	bf28      	it	cs
    3cb6:	2102      	movcs	r1, #2
    3cb8:	460a      	mov	r2, r1
    3cba:	308c      	adds	r0, #140	; 0x8c
    3cbc:	f024 fd80 	bl	287c0 <_impl_k_sem_init>
    3cc0:	e7f0      	b.n	3ca4 <read_buffer_size_complete+0xc>
    3cc2:	bf00      	nop
    3cc4:	2000b810 	.word	0x2000b810

00003cc8 <le_pkey_complete>:
{
    3cc8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    3cca:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ccc:	4b17      	ldr	r3, [pc, #92]	; (3d2c <le_pkey_complete+0x64>)
    3cce:	f3bf 8f5b 	dmb	ish
    3cd2:	e853 2f00 	ldrex	r2, [r3]
    3cd6:	f022 0210 	bic.w	r2, r2, #16
    3cda:	e843 2100 	strex	r1, r2, [r3]
    3cde:	2900      	cmp	r1, #0
    3ce0:	d1f7      	bne.n	3cd2 <le_pkey_complete+0xa>
    3ce2:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    3ce6:	782b      	ldrb	r3, [r5, #0]
    3ce8:	b113      	cbz	r3, 3cf0 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3cea:	4b11      	ldr	r3, [pc, #68]	; (3d30 <le_pkey_complete+0x68>)
    3cec:	681c      	ldr	r4, [r3, #0]
    3cee:	e015      	b.n	3d1c <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    3cf0:	2240      	movs	r2, #64	; 0x40
    3cf2:	1c69      	adds	r1, r5, #1
    3cf4:	480f      	ldr	r0, [pc, #60]	; (3d34 <le_pkey_complete+0x6c>)
    3cf6:	f7fc fae3 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3cfa:	4b0c      	ldr	r3, [pc, #48]	; (3d2c <le_pkey_complete+0x64>)
    3cfc:	f3bf 8f5b 	dmb	ish
    3d00:	e853 2f00 	ldrex	r2, [r3]
    3d04:	f042 0208 	orr.w	r2, r2, #8
    3d08:	e843 2100 	strex	r1, r2, [r3]
    3d0c:	2900      	cmp	r1, #0
    3d0e:	d1f7      	bne.n	3d00 <le_pkey_complete+0x38>
    3d10:	f3bf 8f5b 	dmb	ish
    3d14:	e7e9      	b.n	3cea <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    3d16:	2000      	movs	r0, #0
    3d18:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d1a:	6864      	ldr	r4, [r4, #4]
    3d1c:	b12c      	cbz	r4, 3d2a <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    3d1e:	6823      	ldr	r3, [r4, #0]
    3d20:	782a      	ldrb	r2, [r5, #0]
    3d22:	2a00      	cmp	r2, #0
    3d24:	d1f7      	bne.n	3d16 <le_pkey_complete+0x4e>
    3d26:	1c68      	adds	r0, r5, #1
    3d28:	e7f6      	b.n	3d18 <le_pkey_complete+0x50>
}
    3d2a:	bd38      	pop	{r3, r4, r5, pc}
    3d2c:	2000b880 	.word	0x2000b880
    3d30:	200002b8 	.word	0x200002b8
    3d34:	20000278 	.word	0x20000278

00003d38 <hci_acl>:
{
    3d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d3a:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3d3c:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3d3e:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3d40:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    3d42:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3d44:	f100 0510 	add.w	r5, r0, #16
    3d48:	89c3      	ldrh	r3, [r0, #14]
    3d4a:	442b      	add	r3, r5
    3d4c:	3303      	adds	r3, #3
    3d4e:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    3d52:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3d56:	805a      	strh	r2, [r3, #2]
    3d58:	89c3      	ldrh	r3, [r0, #14]
    3d5a:	442b      	add	r3, r5
    3d5c:	3303      	adds	r3, #3
    3d5e:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    3d62:	22ff      	movs	r2, #255	; 0xff
    3d64:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    3d66:	2104      	movs	r1, #4
    3d68:	3008      	adds	r0, #8
    3d6a:	f016 fa80 	bl	1a26e <net_buf_simple_pull>
	if (buf->len != len) {
    3d6e:	89a3      	ldrh	r3, [r4, #12]
    3d70:	429e      	cmp	r6, r3
    3d72:	d003      	beq.n	3d7c <hci_acl+0x44>
		net_buf_unref(buf);
    3d74:	4620      	mov	r0, r4
    3d76:	f016 f9e1 	bl	1a13c <net_buf_unref>
		return;
    3d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d7c:	89e3      	ldrh	r3, [r4, #14]
    3d7e:	442b      	add	r3, r5
    3d80:	3303      	adds	r3, #3
    3d82:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3d86:	8858      	ldrh	r0, [r3, #2]
    3d88:	f002 fc7e 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    3d8c:	4606      	mov	r6, r0
    3d8e:	b180      	cbz	r0, 3db2 <hci_acl+0x7a>
    3d90:	89e3      	ldrh	r3, [r4, #14]
    3d92:	441d      	add	r5, r3
    3d94:	3503      	adds	r5, #3
    3d96:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    3d9a:	f003 f83b 	bl	6e14 <bt_conn_get_id>
    3d9e:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    3da0:	463a      	mov	r2, r7
    3da2:	4621      	mov	r1, r4
    3da4:	4630      	mov	r0, r6
    3da6:	f002 fb23 	bl	63f0 <bt_conn_recv>
	bt_conn_unref(conn);
    3daa:	4630      	mov	r0, r6
    3dac:	f002 fcf0 	bl	6790 <bt_conn_unref>
    3db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    3db2:	4620      	mov	r0, r4
    3db4:	f016 f9c2 	bl	1a13c <net_buf_unref>
		return;
    3db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003dba <update_sec_level>:
{
    3dba:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    3dbc:	7a83      	ldrb	r3, [r0, #10]
    3dbe:	b18b      	cbz	r3, 3de4 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3dc0:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3dc2:	b1ab      	cbz	r3, 3df0 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3dc4:	f3bf 8f5b 	dmb	ish
    3dc8:	689b      	ldr	r3, [r3, #8]
    3dca:	f3bf 8f5b 	dmb	ish
    3dce:	f013 0f01 	tst.w	r3, #1
    3dd2:	d00d      	beq.n	3df0 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    3dd4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3dd6:	899b      	ldrh	r3, [r3, #12]
    3dd8:	f013 0f20 	tst.w	r3, #32
    3ddc:	d005      	beq.n	3dea <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    3dde:	2304      	movs	r3, #4
    3de0:	7203      	strb	r3, [r0, #8]
    3de2:	e007      	b.n	3df4 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    3de4:	2301      	movs	r3, #1
    3de6:	7203      	strb	r3, [r0, #8]
		return;
    3de8:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    3dea:	2303      	movs	r3, #3
    3dec:	7203      	strb	r3, [r0, #8]
    3dee:	e001      	b.n	3df4 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3df0:	2302      	movs	r3, #2
    3df2:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    3df4:	7a42      	ldrb	r2, [r0, #9]
    3df6:	7a03      	ldrb	r3, [r0, #8]
    3df8:	429a      	cmp	r2, r3
    3dfa:	d800      	bhi.n	3dfe <update_sec_level+0x44>
    3dfc:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3dfe:	2105      	movs	r1, #5
    3e00:	f002 fe8a 	bl	6b18 <bt_conn_disconnect>
    3e04:	e7fa      	b.n	3dfc <update_sec_level+0x42>

00003e06 <hci_encrypt_change>:
{
    3e06:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    3e08:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3e0a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3e0e:	f002 fc3b 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    3e12:	b1e0      	cbz	r0, 3e4e <hci_encrypt_change+0x48>
    3e14:	4604      	mov	r4, r0
	if (evt->status) {
    3e16:	782b      	ldrb	r3, [r5, #0]
    3e18:	b13b      	cbz	r3, 3e2a <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    3e1a:	7883      	ldrb	r3, [r0, #2]
    3e1c:	b90b      	cbnz	r3, 3e22 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    3e1e:	7a03      	ldrb	r3, [r0, #8]
    3e20:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    3e22:	4620      	mov	r0, r4
    3e24:	f002 fcb4 	bl	6790 <bt_conn_unref>
		return;
    3e28:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    3e2a:	78eb      	ldrb	r3, [r5, #3]
    3e2c:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    3e2e:	7882      	ldrb	r2, [r0, #2]
    3e30:	b91a      	cbnz	r2, 3e3a <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    3e32:	b96b      	cbnz	r3, 3e50 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    3e34:	4620      	mov	r0, r4
    3e36:	f7ff ffc0 	bl	3dba <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    3e3a:	7829      	ldrb	r1, [r5, #0]
    3e3c:	4620      	mov	r0, r4
    3e3e:	f003 fbcb 	bl	75d8 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3e42:	4620      	mov	r0, r4
    3e44:	f002 fa9e 	bl	6384 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3e48:	4620      	mov	r0, r4
    3e4a:	f002 fca1 	bl	6790 <bt_conn_unref>
    3e4e:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    3e50:	f008 fafe 	bl	c450 <bt_smp_update_keys>
    3e54:	e7ee      	b.n	3e34 <hci_encrypt_change+0x2e>

00003e56 <hci_encrypt_key_refresh_complete>:
{
    3e56:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    3e58:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3e5a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3e5e:	f002 fc13 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    3e62:	b170      	cbz	r0, 3e82 <hci_encrypt_key_refresh_complete+0x2c>
    3e64:	4604      	mov	r4, r0
	if (evt->status) {
    3e66:	7829      	ldrb	r1, [r5, #0]
    3e68:	b961      	cbnz	r1, 3e84 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    3e6a:	7883      	ldrb	r3, [r0, #2]
    3e6c:	b16b      	cbz	r3, 3e8a <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    3e6e:	7829      	ldrb	r1, [r5, #0]
    3e70:	4620      	mov	r0, r4
    3e72:	f003 fbb1 	bl	75d8 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3e76:	4620      	mov	r0, r4
    3e78:	f002 fa84 	bl	6384 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3e7c:	4620      	mov	r0, r4
    3e7e:	f002 fc87 	bl	6790 <bt_conn_unref>
    3e82:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    3e84:	f003 fba8 	bl	75d8 <bt_l2cap_encrypt_change>
		return;
    3e88:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    3e8a:	f008 fae1 	bl	c450 <bt_smp_update_keys>
		update_sec_level(conn);
    3e8e:	4620      	mov	r0, r4
    3e90:	f7ff ff93 	bl	3dba <update_sec_level>
    3e94:	e7eb      	b.n	3e6e <hci_encrypt_key_refresh_complete+0x18>

00003e96 <find_id_addr>:
{
    3e96:	b510      	push	{r4, lr}
    3e98:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    3e9a:	f008 fbe3 	bl	c664 <bt_keys_find_irk>
		if (keys) {
    3e9e:	b100      	cbz	r0, 3ea2 <find_id_addr+0xc>
			return &keys->addr;
    3ea0:	bd10      	pop	{r4, pc}
	return addr;
    3ea2:	4620      	mov	r0, r4
}
    3ea4:	bd10      	pop	{r4, pc}
	...

00003ea8 <update_conn_param>:
{
    3ea8:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    3eaa:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    3eae:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    3eb0:	b12b      	cbz	r3, 3ebe <update_conn_param+0x16>
    3eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3eb6:	4803      	ldr	r0, [pc, #12]	; (3ec4 <update_conn_param+0x1c>)
    3eb8:	f025 fad4 	bl	29464 <k_delayed_work_submit_to_queue>
    3ebc:	bd08      	pop	{r3, pc}
    3ebe:	2200      	movs	r2, #0
    3ec0:	e7f9      	b.n	3eb6 <update_conn_param+0xe>
    3ec2:	bf00      	nop
    3ec4:	20002b10 	.word	0x20002b10

00003ec8 <le_data_len_change>:
{
    3ec8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    3eca:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3ecc:	8818      	ldrh	r0, [r3, #0]
    3ece:	f002 fbdb 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    3ed2:	b198      	cbz	r0, 3efc <le_data_len_change+0x34>
    3ed4:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3ed6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ed8:	f3bf 8f5b 	dmb	ish
    3edc:	e853 2f00 	ldrex	r2, [r3]
    3ee0:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    3ee4:	e843 1000 	strex	r0, r1, [r3]
    3ee8:	2800      	cmp	r0, #0
    3eea:	d1f7      	bne.n	3edc <le_data_len_change+0x14>
    3eec:	f3bf 8f5b 	dmb	ish
    3ef0:	f412 7f80 	tst.w	r2, #256	; 0x100
    3ef4:	d103      	bne.n	3efe <le_data_len_change+0x36>
	bt_conn_unref(conn);
    3ef6:	4620      	mov	r0, r4
    3ef8:	f002 fc4a 	bl	6790 <bt_conn_unref>
    3efc:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    3efe:	4620      	mov	r0, r4
    3f00:	f7ff ffd2 	bl	3ea8 <update_conn_param>
    3f04:	e7f7      	b.n	3ef6 <le_data_len_change+0x2e>
	...

00003f08 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    3f08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f0a:	4b12      	ldr	r3, [pc, #72]	; (3f54 <le_data_len_change+0x4c>)
    3f0c:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f10:	2400      	movs	r4, #0
    3f12:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3f16:	ea54 0305 	orrs.w	r3, r4, r5
    3f1a:	d008      	beq.n	3f2e <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    3f1c:	4b0e      	ldr	r3, [pc, #56]	; (3f58 <le_data_len_change+0x50>)
    3f1e:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f22:	f004 0440 	and.w	r4, r4, #64	; 0x40
    3f26:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f28:	ea54 0305 	orrs.w	r3, r4, r5
    3f2c:	d100      	bne.n	3f30 <le_data_len_change+0x28>
    3f2e:	bd38      	pop	{r3, r4, r5, pc}
    3f30:	4613      	mov	r3, r2
    3f32:	460d      	mov	r5, r1
    3f34:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    3f36:	220a      	movs	r2, #10
    3f38:	2107      	movs	r1, #7
    3f3a:	4618      	mov	r0, r3
    3f3c:	f008 fcf0 	bl	c920 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    3f40:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    3f42:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    3f44:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    3f46:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    3f48:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    3f4a:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    3f4c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    3f4e:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    3f50:	8103      	strh	r3, [r0, #8]
    3f52:	e7ec      	b.n	3f2e <le_data_len_change+0x26>
    3f54:	2000bb00 	.word	0x2000bb00
    3f58:	2000bb08 	.word	0x2000bb08

00003f5c <le_conn_update_complete>:
{
    3f5c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3f5e:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3f60:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3f64:	f002 fb90 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    3f68:	b128      	cbz	r0, 3f76 <le_conn_update_complete+0x1a>
    3f6a:	4605      	mov	r5, r0
	if (!evt->status) {
    3f6c:	7823      	ldrb	r3, [r4, #0]
    3f6e:	b11b      	cbz	r3, 3f78 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    3f70:	4628      	mov	r0, r5
    3f72:	f002 fc0d 	bl	6790 <bt_conn_unref>
    3f76:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3f78:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    3f7c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3f80:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    3f84:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3f88:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    3f8c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    3f90:	f002 f912 	bl	61b8 <notify_le_param_updated>
    3f94:	e7ec      	b.n	3f70 <le_conn_update_complete+0x14>
	...

00003f98 <le_conn_update_complete>:
{
    3f98:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f9a:	4b14      	ldr	r3, [pc, #80]	; (3fec <le_conn_update_complete+0x54>)
    3f9c:	e9d3 4500 	ldrd	r4, r5, [r3]
    3fa0:	2400      	movs	r4, #0
    3fa2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3fa6:	ea54 0305 	orrs.w	r3, r4, r5
    3faa:	d008      	beq.n	3fbe <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    3fac:	4b10      	ldr	r3, [pc, #64]	; (3ff0 <le_conn_update_complete+0x58>)
    3fae:	e9d3 4500 	ldrd	r4, r5, [r3]
    3fb2:	f004 0404 	and.w	r4, r4, #4
    3fb6:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3fb8:	ea54 0305 	orrs.w	r3, r4, r5
    3fbc:	d100      	bne.n	3fc0 <le_conn_update_complete+0x28>
    3fbe:	bd38      	pop	{r3, r4, r5, pc}
    3fc0:	4613      	mov	r3, r2
    3fc2:	460d      	mov	r5, r1
    3fc4:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    3fc6:	2209      	movs	r2, #9
    3fc8:	2103      	movs	r1, #3
    3fca:	4618      	mov	r0, r3
    3fcc:	f008 fca8 	bl	c920 <meta_evt>
	sep->status = radio_cu->status;
    3fd0:	78e3      	ldrb	r3, [r4, #3]
    3fd2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3fd4:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    3fd8:	88a3      	ldrh	r3, [r4, #4]
    3fda:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    3fde:	88e3      	ldrh	r3, [r4, #6]
    3fe0:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    3fe4:	8923      	ldrh	r3, [r4, #8]
    3fe6:	f8a0 3007 	strh.w	r3, [r0, #7]
    3fea:	e7e8      	b.n	3fbe <le_conn_update_complete+0x26>
    3fec:	2000bb00 	.word	0x2000bb00
    3ff0:	2000bb08 	.word	0x2000bb08

00003ff4 <hci_cmd_done>:
{
    3ff4:	b538      	push	{r3, r4, r5, lr}
    3ff6:	460d      	mov	r5, r1
    3ff8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3ffa:	7990      	ldrb	r0, [r2, #6]
    3ffc:	f016 f824 	bl	1a048 <net_buf_pool_get>
    4000:	4b0b      	ldr	r3, [pc, #44]	; (4030 <hci_cmd_done+0x3c>)
    4002:	4283      	cmp	r3, r0
    4004:	d000      	beq.n	4008 <hci_cmd_done+0x14>
    4006:	bd38      	pop	{r3, r4, r5, pc}
    4008:	f104 0210 	add.w	r2, r4, #16
    400c:	89e3      	ldrh	r3, [r4, #14]
    400e:	4413      	add	r3, r2
    4010:	3303      	adds	r3, #3
    4012:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4016:	6859      	ldr	r1, [r3, #4]
    4018:	2900      	cmp	r1, #0
    401a:	d0f4      	beq.n	4006 <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    401c:	705d      	strb	r5, [r3, #1]
    401e:	89e3      	ldrh	r3, [r4, #14]
    4020:	441a      	add	r2, r3
    4022:	3203      	adds	r2, #3
    4024:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4028:	6850      	ldr	r0, [r2, #4]
    402a:	f024 fbd2 	bl	287d2 <_impl_k_sem_give>
    402e:	e7ea      	b.n	4006 <hci_cmd_done+0x12>
    4030:	2000d0ac 	.word	0x2000d0ac

00004034 <hci_cmd_complete>:
{
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4038:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    403c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4040:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4042:	2103      	movs	r1, #3
    4044:	f016 f913 	bl	1a26e <net_buf_simple_pull>
	status = buf->data[0];
    4048:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    404a:	4622      	mov	r2, r4
    404c:	7819      	ldrb	r1, [r3, #0]
    404e:	4630      	mov	r0, r6
    4050:	f7ff ffd0 	bl	3ff4 <hci_cmd_done>
	if (ncmd) {
    4054:	b905      	cbnz	r5, 4058 <hci_cmd_complete+0x24>
    4056:	bd70      	pop	{r4, r5, r6, pc}
    4058:	4801      	ldr	r0, [pc, #4]	; (4060 <hci_cmd_complete+0x2c>)
    405a:	f024 fbba 	bl	287d2 <_impl_k_sem_give>
}
    405e:	e7fa      	b.n	4056 <hci_cmd_complete+0x22>
    4060:	2000b8b8 	.word	0x2000b8b8

00004064 <hci_cmd_status>:
{
    4064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4066:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4068:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    406c:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    406e:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4070:	2104      	movs	r1, #4
    4072:	f016 f8fc 	bl	1a26e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4076:	462a      	mov	r2, r5
    4078:	7821      	ldrb	r1, [r4, #0]
    407a:	4638      	mov	r0, r7
    407c:	f7ff ffba 	bl	3ff4 <hci_cmd_done>
	if (ncmd) {
    4080:	b906      	cbnz	r6, 4084 <hci_cmd_status+0x20>
    4082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4084:	4801      	ldr	r0, [pc, #4]	; (408c <hci_cmd_status+0x28>)
    4086:	f024 fba4 	bl	287d2 <_impl_k_sem_give>
}
    408a:	e7fa      	b.n	4082 <hci_cmd_status+0x1e>
    408c:	2000b8b8 	.word	0x2000b8b8

00004090 <hci_num_completed_packets>:
{
    4090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4094:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4098:	2700      	movs	r7, #0
    409a:	e026      	b.n	40ea <hci_num_completed_packets+0x5a>
    409c:	f386 8811 	msr	BASEPRI, r6
			continue;
    40a0:	e022      	b.n	40e8 <hci_num_completed_packets+0x58>
    40a2:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    40a6:	b1e1      	cbz	r1, 40e2 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    40a8:	f104 001c 	add.w	r0, r4, #28
    40ac:	f023 fffa 	bl	280a4 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    40b0:	4620      	mov	r0, r4
    40b2:	f002 f85f 	bl	6174 <bt_conn_get_pkts>
    40b6:	f024 fb8c 	bl	287d2 <_impl_k_sem_give>
		while (count--) {
    40ba:	4635      	mov	r5, r6
    40bc:	1e6b      	subs	r3, r5, #1
    40be:	b29e      	uxth	r6, r3
    40c0:	b17d      	cbz	r5, 40e2 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    40c2:	f04f 0220 	mov.w	r2, #32
    40c6:	f3ef 8311 	mrs	r3, BASEPRI
    40ca:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    40ce:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    40d0:	2900      	cmp	r1, #0
    40d2:	d0e6      	beq.n	40a2 <hci_num_completed_packets+0x12>
	list->head = node->next;
    40d4:	680a      	ldr	r2, [r1, #0]
    40d6:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    40d8:	69a0      	ldr	r0, [r4, #24]
    40da:	4281      	cmp	r1, r0
    40dc:	d1e1      	bne.n	40a2 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    40de:	61a2      	str	r2, [r4, #24]
    40e0:	e7df      	b.n	40a2 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    40e2:	4620      	mov	r0, r4
    40e4:	f002 fb54 	bl	6790 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    40e8:	3701      	adds	r7, #1
    40ea:	f898 3000 	ldrb.w	r3, [r8]
    40ee:	429f      	cmp	r7, r3
    40f0:	da13      	bge.n	411a <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    40f2:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    40f6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    40fa:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    40fe:	f04f 0320 	mov.w	r3, #32
    4102:	f3ef 8611 	mrs	r6, BASEPRI
    4106:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    410a:	f002 fabd 	bl	6688 <bt_conn_lookup_handle>
		if (!conn) {
    410e:	4604      	mov	r4, r0
    4110:	2800      	cmp	r0, #0
    4112:	d0c3      	beq.n	409c <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4114:	f386 8811 	msr	BASEPRI, r6
    4118:	e7d0      	b.n	40bc <hci_num_completed_packets+0x2c>
}
    411a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004120 <bt_hci_cmd_create>:
{
    4120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4122:	4607      	mov	r7, r0
    4124:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    412a:	4812      	ldr	r0, [pc, #72]	; (4174 <bt_hci_cmd_create+0x54>)
    412c:	f015 ff98 	bl	1a060 <net_buf_alloc>
    4130:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4132:	2100      	movs	r1, #0
    4134:	f015 ffef 	bl	1a116 <net_buf_reserve>
    4138:	f104 0310 	add.w	r3, r4, #16
    413c:	89e2      	ldrh	r2, [r4, #14]
    413e:	441a      	add	r2, r3
    4140:	3203      	adds	r2, #3
    4142:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4146:	2100      	movs	r1, #0
    4148:	7011      	strb	r1, [r2, #0]
    414a:	89e2      	ldrh	r2, [r4, #14]
    414c:	441a      	add	r2, r3
    414e:	3203      	adds	r2, #3
    4150:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4154:	8057      	strh	r7, [r2, #2]
    4156:	89e2      	ldrh	r2, [r4, #14]
    4158:	4413      	add	r3, r2
    415a:	3303      	adds	r3, #3
    415c:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4160:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4162:	2103      	movs	r1, #3
    4164:	f104 0008 	add.w	r0, r4, #8
    4168:	f016 f834 	bl	1a1d4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    416c:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    416e:	7085      	strb	r5, [r0, #2]
}
    4170:	4620      	mov	r0, r4
    4172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4174:	2000d0ac 	.word	0x2000d0ac

00004178 <bt_hci_cmd_send_sync>:
{
    4178:	b570      	push	{r4, r5, r6, lr}
    417a:	b086      	sub	sp, #24
    417c:	4616      	mov	r6, r2
	if (!buf) {
    417e:	460d      	mov	r5, r1
    4180:	b329      	cbz	r1, 41ce <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4182:	2201      	movs	r2, #1
    4184:	2100      	movs	r1, #0
    4186:	4668      	mov	r0, sp
    4188:	f024 fb1a 	bl	287c0 <_impl_k_sem_init>
    418c:	f105 0410 	add.w	r4, r5, #16
    4190:	89eb      	ldrh	r3, [r5, #14]
    4192:	4423      	add	r3, r4
    4194:	3303      	adds	r3, #3
    4196:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    419a:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    419e:	4628      	mov	r0, r5
    41a0:	f015 ffe8 	bl	1a174 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    41a4:	4629      	mov	r1, r5
    41a6:	4813      	ldr	r0, [pc, #76]	; (41f4 <bt_hci_cmd_send_sync+0x7c>)
    41a8:	f015 ffba 	bl	1a120 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    41ac:	f242 7110 	movw	r1, #10000	; 0x2710
    41b0:	4668      	mov	r0, sp
    41b2:	f024 fb21 	bl	287f8 <_impl_k_sem_take>
    41b6:	89eb      	ldrh	r3, [r5, #14]
    41b8:	441c      	add	r4, r3
    41ba:	3403      	adds	r4, #3
    41bc:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    41c0:	7863      	ldrb	r3, [r4, #1]
    41c2:	b963      	cbnz	r3, 41de <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    41c4:	b18e      	cbz	r6, 41ea <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    41c6:	6035      	str	r5, [r6, #0]
		err = 0;
    41c8:	2000      	movs	r0, #0
}
    41ca:	b006      	add	sp, #24
    41cc:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    41ce:	f7ff ffa7 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    41d2:	4605      	mov	r5, r0
    41d4:	2800      	cmp	r0, #0
    41d6:	d1d4      	bne.n	4182 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    41d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    41dc:	e7f5      	b.n	41ca <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    41de:	4628      	mov	r0, r5
    41e0:	f015 ffac 	bl	1a13c <net_buf_unref>
		err = -EIO;
    41e4:	f06f 0004 	mvn.w	r0, #4
    41e8:	e7ef      	b.n	41ca <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    41ea:	4628      	mov	r0, r5
    41ec:	f015 ffa6 	bl	1a13c <net_buf_unref>
		err = 0;
    41f0:	2000      	movs	r0, #0
    41f2:	e7ea      	b.n	41ca <bt_hci_cmd_send_sync+0x52>
    41f4:	2000b8e4 	.word	0x2000b8e4

000041f8 <common_init>:
{
    41f8:	b510      	push	{r4, lr}
    41fa:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    41fc:	aa01      	add	r2, sp, #4
    41fe:	2100      	movs	r1, #0
    4200:	f640 4003 	movw	r0, #3075	; 0xc03
    4204:	f7ff ffb8 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4208:	4604      	mov	r4, r0
    420a:	b110      	cbz	r0, 4212 <common_init+0x1a>
}
    420c:	4620      	mov	r0, r4
    420e:	b002      	add	sp, #8
    4210:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4212:	9801      	ldr	r0, [sp, #4]
    4214:	f7ff fce6 	bl	3be4 <hci_reset_complete>
	net_buf_unref(rsp);
    4218:	ac02      	add	r4, sp, #8
    421a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    421e:	f015 ff8d 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4222:	4622      	mov	r2, r4
    4224:	2100      	movs	r1, #0
    4226:	f241 0003 	movw	r0, #4099	; 0x1003
    422a:	f7ff ffa5 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    422e:	4604      	mov	r4, r0
    4230:	2800      	cmp	r0, #0
    4232:	d1eb      	bne.n	420c <common_init+0x14>
	read_local_features_complete(rsp);
    4234:	9801      	ldr	r0, [sp, #4]
    4236:	f7ff fced 	bl	3c14 <read_local_features_complete>
	net_buf_unref(rsp);
    423a:	ac02      	add	r4, sp, #8
    423c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4240:	f015 ff7c 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4244:	4622      	mov	r2, r4
    4246:	2100      	movs	r1, #0
    4248:	f241 0001 	movw	r0, #4097	; 0x1001
    424c:	f7ff ff94 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4250:	4604      	mov	r4, r0
    4252:	2800      	cmp	r0, #0
    4254:	d1da      	bne.n	420c <common_init+0x14>
	read_local_ver_complete(rsp);
    4256:	9801      	ldr	r0, [sp, #4]
    4258:	f7ff fc72 	bl	3b40 <read_local_ver_complete>
	net_buf_unref(rsp);
    425c:	ac02      	add	r4, sp, #8
    425e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4262:	f015 ff6b 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4266:	4622      	mov	r2, r4
    4268:	2100      	movs	r1, #0
    426a:	f241 0009 	movw	r0, #4105	; 0x1009
    426e:	f7ff ff83 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4272:	4604      	mov	r4, r0
    4274:	2800      	cmp	r0, #0
    4276:	d1c9      	bne.n	420c <common_init+0x14>
	read_bdaddr_complete(rsp);
    4278:	9801      	ldr	r0, [sp, #4]
    427a:	f7ff fcd5 	bl	3c28 <read_bdaddr_complete>
	net_buf_unref(rsp);
    427e:	ac02      	add	r4, sp, #8
    4280:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4284:	f015 ff5a 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4288:	4622      	mov	r2, r4
    428a:	2100      	movs	r1, #0
    428c:	f241 0002 	movw	r0, #4098	; 0x1002
    4290:	f7ff ff72 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4294:	4604      	mov	r4, r0
    4296:	2800      	cmp	r0, #0
    4298:	d1b8      	bne.n	420c <common_init+0x14>
	read_supported_commands_complete(rsp);
    429a:	9801      	ldr	r0, [sp, #4]
    429c:	f7ff fcd2 	bl	3c44 <read_supported_commands_complete>
	net_buf_unref(rsp);
    42a0:	9801      	ldr	r0, [sp, #4]
    42a2:	f015 ff4b 	bl	1a13c <net_buf_unref>
	return 0;
    42a6:	e7b1      	b.n	420c <common_init+0x14>

000042a8 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    42a8:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    42aa:	4b3a      	ldr	r3, [pc, #232]	; (4394 <common_init+0xec>)
    42ac:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    42b0:	2a00      	cmp	r2, #0
    42b2:	d15e      	bne.n	4372 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    42b4:	2200      	movs	r2, #0
    42b6:	4b37      	ldr	r3, [pc, #220]	; (4394 <common_init+0xec>)
    42b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    42bc:	4c35      	ldr	r4, [pc, #212]	; (4394 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    42be:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    42c2:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    42c6:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    42ca:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    42ce:	f00a fa47 	bl	e760 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    42d2:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    42d6:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    42da:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    42de:	462b      	mov	r3, r5
    42e0:	440a      	add	r2, r1
    42e2:	2108      	movs	r1, #8
    42e4:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    42e8:	f00a fa3a 	bl	e760 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    42ec:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    42f0:	2202      	movs	r2, #2
    42f2:	2124      	movs	r1, #36	; 0x24
    42f4:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    42f8:	f00a fa32 	bl	e760 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    42fc:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4300:	3a01      	subs	r2, #1
    4302:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4306:	b292      	uxth	r2, r2
    4308:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    430c:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4310:	f00a fa26 	bl	e760 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4314:	4628      	mov	r0, r5
    4316:	f00a fa48 	bl	e7aa <mem_acquire>
	LL_ASSERT(link);
    431a:	b3a0      	cbz	r0, 4386 <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    431c:	4c1d      	ldr	r4, [pc, #116]	; (4394 <common_init+0xec>)
    431e:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4322:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4326:	f00a faa5 	bl	e874 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    432a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    432e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4332:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4336:	20ff      	movs	r0, #255	; 0xff
    4338:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    433c:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4340:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4344:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4348:	231f      	movs	r3, #31
    434a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    434e:	2325      	movs	r3, #37	; 0x25
    4350:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4354:	231b      	movs	r3, #27
    4356:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    435a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    435e:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4362:	2303      	movs	r3, #3
    4364:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4368:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    436c:	f00c ff58 	bl	11220 <packet_rx_allocate>
    4370:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4372:	4618      	mov	r0, r3
    4374:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4378:	f44f 71aa 	mov.w	r1, #340	; 0x154
    437c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4380:	f00a f9ee 	bl	e760 <mem_init>
    4384:	e79a      	b.n	42bc <common_init+0x14>
	LL_ASSERT(link);
    4386:	4040      	eors	r0, r0
    4388:	f380 8811 	msr	BASEPRI, r0
    438c:	f04f 0004 	mov.w	r0, #4
    4390:	df02      	svc	2
    4392:	bf00      	nop
    4394:	20000e8c 	.word	0x20000e8c

00004398 <le_set_event_mask>:
{
    4398:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    439a:	2108      	movs	r1, #8
    439c:	f242 0001 	movw	r0, #8193	; 0x2001
    43a0:	f7ff febe 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    43a4:	2800      	cmp	r0, #0
    43a6:	d042      	beq.n	442e <le_set_event_mask+0x96>
    43a8:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    43aa:	2108      	movs	r1, #8
    43ac:	4408      	add	r0, r1
    43ae:	f015 ff11 	bl	1a1d4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    43b2:	4b20      	ldr	r3, [pc, #128]	; (4434 <le_set_event_mask+0x9c>)
    43b4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    43b8:	f011 0f02 	tst.w	r1, #2
    43bc:	d131      	bne.n	4422 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    43be:	220f      	movs	r2, #15
    43c0:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    43c2:	f011 0f20 	tst.w	r1, #32
    43c6:	d001      	beq.n	43cc <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    43c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    43cc:	4d19      	ldr	r5, [pc, #100]	; (4434 <le_set_event_mask+0x9c>)
    43ce:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    43d2:	f015 0f09 	tst.w	r5, #9
    43d6:	d001      	beq.n	43dc <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    43d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    43dc:	f011 0f01 	tst.w	r1, #1
    43e0:	d001      	beq.n	43e6 <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    43e2:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    43e6:	4913      	ldr	r1, [pc, #76]	; (4434 <le_set_event_mask+0x9c>)
    43e8:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    43ec:	f001 0106 	and.w	r1, r1, #6
    43f0:	2906      	cmp	r1, #6
    43f2:	d019      	beq.n	4428 <le_set_event_mask+0x90>
	dst[0] = val;
    43f4:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    43f6:	f3c2 2107 	ubfx	r1, r2, #8, #8
    43fa:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    43fc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    43fe:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4400:	0a12      	lsrs	r2, r2, #8
    4402:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4404:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4406:	f3c3 2207 	ubfx	r2, r3, #8, #8
    440a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    440c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    440e:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4410:	0a1b      	lsrs	r3, r3, #8
    4412:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4414:	2200      	movs	r2, #0
    4416:	4621      	mov	r1, r4
    4418:	f242 0001 	movw	r0, #8193	; 0x2001
    441c:	f7ff feac 	bl	4178 <bt_hci_cmd_send_sync>
    4420:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4422:	222f      	movs	r2, #47	; 0x2f
    4424:	2300      	movs	r3, #0
    4426:	e7cc      	b.n	43c2 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4428:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    442c:	e7e2      	b.n	43f4 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    442e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4432:	bd38      	pop	{r3, r4, r5, pc}
    4434:	2000b810 	.word	0x2000b810

00004438 <le_set_event_mask>:
{
    4438:	b570      	push	{r4, r5, r6, lr}
    443a:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    443c:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    443e:	79da      	ldrb	r2, [r3, #7]
    4440:	7999      	ldrb	r1, [r3, #6]
    4442:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4446:	7958      	ldrb	r0, [r3, #5]
    4448:	791a      	ldrb	r2, [r3, #4]
    444a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    444e:	2400      	movs	r4, #0
    4450:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4454:	78d9      	ldrb	r1, [r3, #3]
    4456:	789a      	ldrb	r2, [r3, #2]
    4458:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    445c:	7859      	ldrb	r1, [r3, #1]
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4468:	ea44 0003 	orr.w	r0, r4, r3
    446c:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    446e:	4b04      	ldr	r3, [pc, #16]	; (4480 <le_set_event_mask+0x48>)
    4470:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4474:	2101      	movs	r1, #1
    4476:	4630      	mov	r0, r6
    4478:	f008 f9b8 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    447c:	7004      	strb	r4, [r0, #0]
    447e:	bd70      	pop	{r4, r5, r6, pc}
    4480:	2000bb08 	.word	0x2000bb08

00004484 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    4484:	4b4c      	ldr	r3, [pc, #304]	; (45b8 <le_init+0x134>)
    4486:	7e9b      	ldrb	r3, [r3, #26]
    4488:	f013 0f40 	tst.w	r3, #64	; 0x40
    448c:	f000 808c 	beq.w	45a8 <le_init+0x124>
{
    4490:	b570      	push	{r4, r5, r6, lr}
    4492:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4494:	aa01      	add	r2, sp, #4
    4496:	2100      	movs	r1, #0
    4498:	f242 0003 	movw	r0, #8195	; 0x2003
    449c:	f7ff fe6c 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    44a0:	4603      	mov	r3, r0
    44a2:	b110      	cbz	r0, 44aa <le_init+0x26>
}
    44a4:	4618      	mov	r0, r3
    44a6:	b002      	add	sp, #8
    44a8:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    44aa:	9801      	ldr	r0, [sp, #4]
    44ac:	f7ff fbd4 	bl	3c58 <read_le_features_complete>
	net_buf_unref(rsp);
    44b0:	ac02      	add	r4, sp, #8
    44b2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    44b6:	f015 fe41 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    44ba:	4622      	mov	r2, r4
    44bc:	2100      	movs	r1, #0
    44be:	f242 0002 	movw	r0, #8194	; 0x2002
    44c2:	f7ff fe59 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    44c6:	4603      	mov	r3, r0
    44c8:	2800      	cmp	r0, #0
    44ca:	d1eb      	bne.n	44a4 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    44cc:	9801      	ldr	r0, [sp, #4]
    44ce:	f7ff fbcd 	bl	3c6c <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    44d2:	9801      	ldr	r0, [sp, #4]
    44d4:	f015 fe32 	bl	1a13c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    44d8:	4b37      	ldr	r3, [pc, #220]	; (45b8 <le_init+0x134>)
    44da:	7e9b      	ldrb	r3, [r3, #26]
    44dc:	f013 0f20 	tst.w	r3, #32
    44e0:	d037      	beq.n	4552 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    44e2:	4b35      	ldr	r3, [pc, #212]	; (45b8 <le_init+0x134>)
    44e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    44e8:	f013 0f08 	tst.w	r3, #8
    44ec:	d149      	bne.n	4582 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <le_init+0x134>)
    44f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    44f4:	f013 0f20 	tst.w	r3, #32
    44f8:	d027      	beq.n	454a <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    44fa:	466a      	mov	r2, sp
    44fc:	2100      	movs	r1, #0
    44fe:	f242 002f 	movw	r0, #8239	; 0x202f
    4502:	f7ff fe39 	bl	4178 <bt_hci_cmd_send_sync>
		if (err) {
    4506:	4603      	mov	r3, r0
    4508:	2800      	cmp	r0, #0
    450a:	d1cb      	bne.n	44a4 <le_init+0x20>
		rp = (void *)rsp->data;
    450c:	9800      	ldr	r0, [sp, #0]
    450e:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4510:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4514:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    4518:	f015 fe10 	bl	1a13c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    451c:	2104      	movs	r1, #4
    451e:	f242 0024 	movw	r0, #8228	; 0x2024
    4522:	f7ff fdfd 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    4526:	4604      	mov	r4, r0
    4528:	2800      	cmp	r0, #0
    452a:	d03a      	beq.n	45a2 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    452c:	2104      	movs	r1, #4
    452e:	3008      	adds	r0, #8
    4530:	f015 fe50 	bl	1a1d4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4534:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4536:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4538:	2200      	movs	r2, #0
    453a:	4621      	mov	r1, r4
    453c:	f242 0024 	movw	r0, #8228	; 0x2024
    4540:	f7ff fe1a 	bl	4178 <bt_hci_cmd_send_sync>
		if (err) {
    4544:	4603      	mov	r3, r0
    4546:	2800      	cmp	r0, #0
    4548:	d1ac      	bne.n	44a4 <le_init+0x20>
	return  le_set_event_mask();
    454a:	f7ff ff25 	bl	4398 <le_set_event_mask>
    454e:	4603      	mov	r3, r0
    4550:	e7a8      	b.n	44a4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4552:	2102      	movs	r1, #2
    4554:	f640 406d 	movw	r0, #3181	; 0xc6d
    4558:	f7ff fde2 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    455c:	4604      	mov	r4, r0
    455e:	b338      	cbz	r0, 45b0 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4560:	2102      	movs	r1, #2
    4562:	3008      	adds	r0, #8
    4564:	f015 fe36 	bl	1a1d4 <net_buf_simple_add>
		cp_le->le = 0x01;
    4568:	2301      	movs	r3, #1
    456a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    456c:	2200      	movs	r2, #0
    456e:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4570:	4621      	mov	r1, r4
    4572:	f640 406d 	movw	r0, #3181	; 0xc6d
    4576:	f7ff fdff 	bl	4178 <bt_hci_cmd_send_sync>
		if (err) {
    457a:	4603      	mov	r3, r0
    457c:	2800      	cmp	r0, #0
    457e:	d0b0      	beq.n	44e2 <le_init+0x5e>
    4580:	e790      	b.n	44a4 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4582:	aa01      	add	r2, sp, #4
    4584:	2100      	movs	r1, #0
    4586:	f242 001c 	movw	r0, #8220	; 0x201c
    458a:	f7ff fdf5 	bl	4178 <bt_hci_cmd_send_sync>
		if (err) {
    458e:	4603      	mov	r3, r0
    4590:	2800      	cmp	r0, #0
    4592:	d187      	bne.n	44a4 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    4594:	9801      	ldr	r0, [sp, #4]
    4596:	f7ff fae5 	bl	3b64 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    459a:	9801      	ldr	r0, [sp, #4]
    459c:	f015 fdce 	bl	1a13c <net_buf_unref>
    45a0:	e7a5      	b.n	44ee <le_init+0x6a>
			return -ENOBUFS;
    45a2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    45a6:	e77d      	b.n	44a4 <le_init+0x20>
		return -ENODEV;
    45a8:	f06f 0312 	mvn.w	r3, #18
}
    45ac:	4618      	mov	r0, r3
    45ae:	4770      	bx	lr
			return -ENOBUFS;
    45b0:	f06f 0368 	mvn.w	r3, #104	; 0x68
    45b4:	e776      	b.n	44a4 <le_init+0x20>
    45b6:	bf00      	nop
    45b8:	2000b810 	.word	0x2000b810

000045bc <br_init>:
{
    45bc:	b510      	push	{r4, lr}
    45be:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    45c0:	4b0b      	ldr	r3, [pc, #44]	; (45f0 <br_init+0x34>)
    45c2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    45c6:	b11b      	cbz	r3, 45d0 <br_init+0x14>
		return 0;
    45c8:	2400      	movs	r4, #0
}
    45ca:	4620      	mov	r0, r4
    45cc:	b002      	add	sp, #8
    45ce:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    45d0:	aa01      	add	r2, sp, #4
    45d2:	2100      	movs	r1, #0
    45d4:	f241 0005 	movw	r0, #4101	; 0x1005
    45d8:	f7ff fdce 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    45dc:	4604      	mov	r4, r0
    45de:	2800      	cmp	r0, #0
    45e0:	d1f3      	bne.n	45ca <br_init+0xe>
	read_buffer_size_complete(rsp);
    45e2:	9801      	ldr	r0, [sp, #4]
    45e4:	f7ff fb58 	bl	3c98 <read_buffer_size_complete>
	net_buf_unref(rsp);
    45e8:	9801      	ldr	r0, [sp, #4]
    45ea:	f015 fda7 	bl	1a13c <net_buf_unref>
	return 0;
    45ee:	e7ec      	b.n	45ca <br_init+0xe>
    45f0:	2000b810 	.word	0x2000b810

000045f4 <set_event_mask>:
{
    45f4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    45f6:	2108      	movs	r1, #8
    45f8:	f640 4001 	movw	r0, #3073	; 0xc01
    45fc:	f7ff fd90 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    4600:	b348      	cbz	r0, 4656 <set_event_mask+0x62>
    4602:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    4604:	2108      	movs	r1, #8
    4606:	4408      	add	r0, r1
    4608:	f015 fde4 	bl	1a1d4 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    460c:	4b13      	ldr	r3, [pc, #76]	; (465c <set_event_mask+0x68>)
    460e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4612:	f013 0f01 	tst.w	r3, #1
    4616:	d11b      	bne.n	4650 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    4618:	4a11      	ldr	r2, [pc, #68]	; (4660 <set_event_mask+0x6c>)
    461a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    461e:	b291      	uxth	r1, r2
	dst[0] = val;
    4620:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4622:	0a09      	lsrs	r1, r1, #8
    4624:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4626:	0c12      	lsrs	r2, r2, #16
    4628:	b291      	uxth	r1, r2
	dst[0] = val;
    462a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    462c:	0a0a      	lsrs	r2, r1, #8
    462e:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    4630:	b29a      	uxth	r2, r3
	dst[0] = val;
    4632:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4634:	0a12      	lsrs	r2, r2, #8
    4636:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4638:	0c1b      	lsrs	r3, r3, #16
    463a:	b29a      	uxth	r2, r3
	dst[0] = val;
    463c:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    463e:	0a13      	lsrs	r3, r2, #8
    4640:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4642:	2200      	movs	r2, #0
    4644:	4621      	mov	r1, r4
    4646:	f640 4001 	movw	r0, #3073	; 0xc01
    464a:	f7ff fd95 	bl	4178 <bt_hci_cmd_send_sync>
    464e:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    4650:	4a04      	ldr	r2, [pc, #16]	; (4664 <set_event_mask+0x70>)
    4652:	4b05      	ldr	r3, [pc, #20]	; (4668 <set_event_mask+0x74>)
    4654:	e7e3      	b.n	461e <set_event_mask+0x2a>
		return -ENOBUFS;
    4656:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    465a:	bd10      	pop	{r4, pc}
    465c:	2000b810 	.word	0x2000b810
    4660:	02008810 	.word	0x02008810
    4664:	02008890 	.word	0x02008890
    4668:	20008000 	.word	0x20008000

0000466c <set_event_mask>:
{
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4670:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    4672:	79da      	ldrb	r2, [r3, #7]
    4674:	7999      	ldrb	r1, [r3, #6]
    4676:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    467a:	7958      	ldrb	r0, [r3, #5]
    467c:	791a      	ldrb	r2, [r3, #4]
    467e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4682:	2400      	movs	r4, #0
    4684:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4688:	78d9      	ldrb	r1, [r3, #3]
    468a:	789a      	ldrb	r2, [r3, #2]
    468c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4690:	7859      	ldrb	r1, [r3, #1]
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    469c:	ea44 0003 	orr.w	r0, r4, r3
    46a0:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    46a2:	4b04      	ldr	r3, [pc, #16]	; (46b4 <set_event_mask+0x48>)
    46a4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    46a8:	2101      	movs	r1, #1
    46aa:	4630      	mov	r0, r6
    46ac:	f008 f89e 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    46b0:	7004      	strb	r4, [r0, #0]
    46b2:	bd70      	pop	{r4, r5, r6, pc}
    46b4:	2000bb00 	.word	0x2000bb00

000046b8 <hci_vs_init>:
{
    46b8:	b510      	push	{r4, lr}
    46ba:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    46bc:	aa01      	add	r2, sp, #4
    46be:	2100      	movs	r1, #0
    46c0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    46c4:	f7ff fd58 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    46c8:	b108      	cbz	r0, 46ce <hci_vs_init+0x16>
}
    46ca:	b002      	add	sp, #8
    46cc:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    46ce:	ac02      	add	r4, sp, #8
    46d0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    46d4:	f015 fd32 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    46d8:	4622      	mov	r2, r4
    46da:	2100      	movs	r1, #0
    46dc:	f64f 4002 	movw	r0, #64514	; 0xfc02
    46e0:	f7ff fd4a 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    46e4:	2800      	cmp	r0, #0
    46e6:	d1f0      	bne.n	46ca <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    46e8:	9b01      	ldr	r3, [sp, #4]
    46ea:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    46ec:	2202      	movs	r2, #2
    46ee:	3101      	adds	r1, #1
    46f0:	480d      	ldr	r0, [pc, #52]	; (4728 <hci_vs_init+0x70>)
    46f2:	f7fb fde5 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    46f6:	ac02      	add	r4, sp, #8
    46f8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    46fc:	f015 fd1e 	bl	1a13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4700:	4622      	mov	r2, r4
    4702:	2100      	movs	r1, #0
    4704:	f64f 4003 	movw	r0, #64515	; 0xfc03
    4708:	f7ff fd36 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    470c:	2800      	cmp	r0, #0
    470e:	d1dc      	bne.n	46ca <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    4710:	9b01      	ldr	r3, [sp, #4]
    4712:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4714:	2201      	movs	r2, #1
    4716:	4411      	add	r1, r2
    4718:	4804      	ldr	r0, [pc, #16]	; (472c <hci_vs_init+0x74>)
    471a:	f7fb fdd1 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    471e:	9801      	ldr	r0, [sp, #4]
    4720:	f015 fd0c 	bl	1a13c <net_buf_unref>
    4724:	e7d1      	b.n	46ca <hci_vs_init+0x12>
    4726:	bf00      	nop
    4728:	2000b86f 	.word	0x2000b86f
    472c:	2000b86e 	.word	0x2000b86e

00004730 <set_random_address>:
{
    4730:	b570      	push	{r4, r5, r6, lr}
    4732:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    4734:	2206      	movs	r2, #6
    4736:	4914      	ldr	r1, [pc, #80]	; (4788 <set_random_address+0x58>)
    4738:	f026 f92c 	bl	2a994 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    473c:	4604      	mov	r4, r0
    473e:	b908      	cbnz	r0, 4744 <set_random_address+0x14>
}
    4740:	4620      	mov	r0, r4
    4742:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    4744:	2106      	movs	r1, #6
    4746:	f242 0005 	movw	r0, #8197	; 0x2005
    474a:	f7ff fce9 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    474e:	4604      	mov	r4, r0
    4750:	b1b8      	cbz	r0, 4782 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    4752:	2206      	movs	r2, #6
    4754:	4629      	mov	r1, r5
    4756:	3008      	adds	r0, #8
    4758:	f015 fd42 	bl	1a1e0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    475c:	2200      	movs	r2, #0
    475e:	4621      	mov	r1, r4
    4760:	f242 0005 	movw	r0, #8197	; 0x2005
    4764:	f7ff fd08 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4768:	4604      	mov	r4, r0
    476a:	2800      	cmp	r0, #0
    476c:	d1e8      	bne.n	4740 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    476e:	4e07      	ldr	r6, [pc, #28]	; (478c <set_random_address+0x5c>)
    4770:	2206      	movs	r2, #6
    4772:	4629      	mov	r1, r5
    4774:	f106 0008 	add.w	r0, r6, #8
    4778:	f7fb fda2 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    477c:	2301      	movs	r3, #1
    477e:	71f3      	strb	r3, [r6, #7]
	return 0;
    4780:	e7de      	b.n	4740 <set_random_address+0x10>
		return -ENOBUFS;
    4782:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4786:	e7db      	b.n	4740 <set_random_address+0x10>
    4788:	2000b818 	.word	0x2000b818
    478c:	2000b810 	.word	0x2000b810

00004790 <le_set_private_addr>:
{
    4790:	b500      	push	{lr}
    4792:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    4794:	2106      	movs	r1, #6
    4796:	4668      	mov	r0, sp
    4798:	f00c f9a6 	bl	10ae8 <bt_rand>
	if (err) {
    479c:	4603      	mov	r3, r0
    479e:	b118      	cbz	r0, 47a8 <le_set_private_addr+0x18>
}
    47a0:	4618      	mov	r0, r3
    47a2:	b003      	add	sp, #12
    47a4:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    47a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    47ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    47b0:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    47b4:	4668      	mov	r0, sp
    47b6:	f7ff ffbb 	bl	4730 <set_random_address>
    47ba:	4603      	mov	r3, r0
    47bc:	e7f0      	b.n	47a0 <le_set_private_addr+0x10>
	...

000047c0 <bt_hci_stop_scanning>:
{
    47c0:	b530      	push	{r4, r5, lr}
    47c2:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    47c4:	f3bf 8f5b 	dmb	ish
    47c8:	4b26      	ldr	r3, [pc, #152]	; (4864 <bt_hci_stop_scanning+0xa4>)
    47ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    47cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    47d0:	f013 0f80 	tst.w	r3, #128	; 0x80
    47d4:	d03f      	beq.n	4856 <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    47d6:	2102      	movs	r1, #2
    47d8:	f242 000c 	movw	r0, #8204	; 0x200c
    47dc:	f7ff fca0 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    47e0:	4604      	mov	r4, r0
    47e2:	2800      	cmp	r0, #0
    47e4:	d03a      	beq.n	485c <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    47e6:	2102      	movs	r1, #2
    47e8:	3008      	adds	r0, #8
    47ea:	f015 fcf3 	bl	1a1d4 <net_buf_simple_add>
    47ee:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    47f0:	2202      	movs	r2, #2
    47f2:	2100      	movs	r1, #0
    47f4:	f026 f962 	bl	2aabc <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    47f8:	2300      	movs	r3, #0
    47fa:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    47fc:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    47fe:	aa01      	add	r2, sp, #4
    4800:	4621      	mov	r1, r4
    4802:	f242 000c 	movw	r0, #8204	; 0x200c
    4806:	f7ff fcb7 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    480a:	4604      	mov	r4, r0
    480c:	b930      	cbnz	r0, 481c <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	689b      	ldr	r3, [r3, #8]
    4812:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    4814:	b12c      	cbz	r4, 4822 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    4816:	9801      	ldr	r0, [sp, #4]
    4818:	f015 fc90 	bl	1a13c <net_buf_unref>
}
    481c:	4620      	mov	r0, r4
    481e:	b003      	add	sp, #12
    4820:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4822:	4b11      	ldr	r3, [pc, #68]	; (4868 <bt_hci_stop_scanning+0xa8>)
    4824:	f3bf 8f5b 	dmb	ish
    4828:	e853 2f00 	ldrex	r2, [r3]
    482c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4830:	e843 2100 	strex	r1, r2, [r3]
    4834:	2900      	cmp	r1, #0
    4836:	d1f7      	bne.n	4828 <bt_hci_stop_scanning+0x68>
    4838:	f3bf 8f5b 	dmb	ish
    483c:	f3bf 8f5b 	dmb	ish
    4840:	e853 2f00 	ldrex	r2, [r3]
    4844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4848:	e843 2100 	strex	r1, r2, [r3]
    484c:	2900      	cmp	r1, #0
    484e:	d1f7      	bne.n	4840 <bt_hci_stop_scanning+0x80>
    4850:	f3bf 8f5b 	dmb	ish
    4854:	e7df      	b.n	4816 <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    4856:	f06f 0477 	mvn.w	r4, #119	; 0x77
    485a:	e7df      	b.n	481c <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    485c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4860:	e7dc      	b.n	481c <bt_hci_stop_scanning+0x5c>
    4862:	bf00      	nop
    4864:	2000b810 	.word	0x2000b810
    4868:	2000b880 	.word	0x2000b880

0000486c <set_advertise_enable>:
{
    486c:	b538      	push	{r3, r4, r5, lr}
    486e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    4870:	2101      	movs	r1, #1
    4872:	f242 000a 	movw	r0, #8202	; 0x200a
    4876:	f7ff fc53 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    487a:	b380      	cbz	r0, 48de <set_advertise_enable+0x72>
    487c:	4604      	mov	r4, r0
	if (enable) {
    487e:	b1dd      	cbz	r5, 48b8 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    4880:	2101      	movs	r1, #1
    4882:	3008      	adds	r0, #8
    4884:	f015 fcb7 	bl	1a1f6 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4888:	2200      	movs	r2, #0
    488a:	4621      	mov	r1, r4
    488c:	f242 000a 	movw	r0, #8202	; 0x200a
    4890:	f7ff fc72 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4894:	4603      	mov	r3, r0
    4896:	b968      	cbnz	r0, 48b4 <set_advertise_enable+0x48>
	if (enable) {
    4898:	b99d      	cbnz	r5, 48c2 <set_advertise_enable+0x56>
    489a:	4a12      	ldr	r2, [pc, #72]	; (48e4 <set_advertise_enable+0x78>)
    489c:	f3bf 8f5b 	dmb	ish
    48a0:	e852 1f00 	ldrex	r1, [r2]
    48a4:	f021 0120 	bic.w	r1, r1, #32
    48a8:	e842 1000 	strex	r0, r1, [r2]
    48ac:	2800      	cmp	r0, #0
    48ae:	d1f7      	bne.n	48a0 <set_advertise_enable+0x34>
    48b0:	f3bf 8f5b 	dmb	ish
}
    48b4:	4618      	mov	r0, r3
    48b6:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    48b8:	2100      	movs	r1, #0
    48ba:	3008      	adds	r0, #8
    48bc:	f015 fc9b 	bl	1a1f6 <net_buf_simple_add_u8>
    48c0:	e7e2      	b.n	4888 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    48c2:	4a08      	ldr	r2, [pc, #32]	; (48e4 <set_advertise_enable+0x78>)
    48c4:	f3bf 8f5b 	dmb	ish
    48c8:	e852 1f00 	ldrex	r1, [r2]
    48cc:	f041 0120 	orr.w	r1, r1, #32
    48d0:	e842 1000 	strex	r0, r1, [r2]
    48d4:	2800      	cmp	r0, #0
    48d6:	d1f7      	bne.n	48c8 <set_advertise_enable+0x5c>
    48d8:	f3bf 8f5b 	dmb	ish
    48dc:	e7ea      	b.n	48b4 <set_advertise_enable+0x48>
		return -ENOBUFS;
    48de:	f06f 0368 	mvn.w	r3, #104	; 0x68
    48e2:	e7e7      	b.n	48b4 <set_advertise_enable+0x48>
    48e4:	2000b880 	.word	0x2000b880

000048e8 <hci_le_create_conn>:
{
    48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ea:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    48ec:	2119      	movs	r1, #25
    48ee:	f242 000d 	movw	r0, #8205	; 0x200d
    48f2:	f7ff fc15 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    48f6:	b378      	cbz	r0, 4958 <hci_le_create_conn+0x70>
    48f8:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    48fa:	2119      	movs	r1, #25
    48fc:	3008      	adds	r0, #8
    48fe:	f015 fc69 	bl	1a1d4 <net_buf_simple_add>
    4902:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    4904:	2219      	movs	r2, #25
    4906:	2100      	movs	r1, #0
    4908:	f026 f8d8 	bl	2aabc <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    490c:	2600      	movs	r6, #0
    490e:	2360      	movs	r3, #96	; 0x60
    4910:	7023      	strb	r3, [r4, #0]
    4912:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    4914:	70a3      	strb	r3, [r4, #2]
    4916:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4918:	2207      	movs	r2, #7
    491a:	f105 0156 	add.w	r1, r5, #86	; 0x56
    491e:	1d60      	adds	r0, r4, #5
    4920:	f7fb fcce 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    4924:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    4928:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    492a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    492e:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4932:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4936:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    493a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    493e:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    4942:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    4946:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    494a:	4632      	mov	r2, r6
    494c:	4639      	mov	r1, r7
    494e:	f242 000d 	movw	r0, #8205	; 0x200d
    4952:	f7ff fc11 	bl	4178 <bt_hci_cmd_send_sync>
    4956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4958:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000495e <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    495e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4962:	4682      	mov	sl, r0
    4964:	460f      	mov	r7, r1
    4966:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4968:	2120      	movs	r1, #32
    496a:	f7ff fbd9 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    496e:	2800      	cmp	r0, #0
    4970:	d03c      	beq.n	49ec <set_ad+0x8e>
    4972:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    4974:	2120      	movs	r1, #32
    4976:	3008      	adds	r0, #8
    4978:	f015 fc2c 	bl	1a1d4 <net_buf_simple_add>
    497c:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    497e:	2220      	movs	r2, #32
    4980:	2100      	movs	r1, #0
    4982:	f026 f89b 	bl	2aabc <memset>

	for (i = 0; i < ad_len; i++) {
    4986:	2600      	movs	r6, #0
    4988:	4546      	cmp	r6, r8
    498a:	d228      	bcs.n	49de <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    498c:	7822      	ldrb	r2, [r4, #0]
    498e:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    4992:	786b      	ldrb	r3, [r5, #1]
    4994:	4413      	add	r3, r2
    4996:	3302      	adds	r3, #2
    4998:	2b1f      	cmp	r3, #31
    499a:	dc19      	bgt.n	49d0 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    499c:	1c53      	adds	r3, r2, #1
    499e:	b2db      	uxtb	r3, r3
    49a0:	7023      	strb	r3, [r4, #0]
    49a2:	7869      	ldrb	r1, [r5, #1]
    49a4:	3101      	adds	r1, #1
    49a6:	4422      	add	r2, r4
    49a8:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    49aa:	1c58      	adds	r0, r3, #1
    49ac:	b2c0      	uxtb	r0, r0
    49ae:	7020      	strb	r0, [r4, #0]
    49b0:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    49b4:	4423      	add	r3, r4
    49b6:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    49b8:	4420      	add	r0, r4
    49ba:	786a      	ldrb	r2, [r5, #1]
    49bc:	6869      	ldr	r1, [r5, #4]
    49be:	3001      	adds	r0, #1
    49c0:	f7fb fc7e 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    49c4:	786b      	ldrb	r3, [r5, #1]
    49c6:	7822      	ldrb	r2, [r4, #0]
    49c8:	4413      	add	r3, r2
    49ca:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    49cc:	3601      	adds	r6, #1
    49ce:	e7db      	b.n	4988 <set_ad+0x2a>
			net_buf_unref(buf);
    49d0:	4648      	mov	r0, r9
    49d2:	f015 fbb3 	bl	1a13c <net_buf_unref>
			return -EINVAL;
    49d6:	f06f 0015 	mvn.w	r0, #21
    49da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    49de:	2200      	movs	r2, #0
    49e0:	4649      	mov	r1, r9
    49e2:	4650      	mov	r0, sl
    49e4:	f7ff fbc8 	bl	4178 <bt_hci_cmd_send_sync>
    49e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    49ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    49f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000049f4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    49f4:	8802      	ldrh	r2, [r0, #0]
    49f6:	8843      	ldrh	r3, [r0, #2]
    49f8:	429a      	cmp	r2, r3
    49fa:	d81a      	bhi.n	4a32 <bt_le_conn_params_valid+0x3e>
    49fc:	2a05      	cmp	r2, #5
    49fe:	d91a      	bls.n	4a36 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    4a00:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4a04:	d819      	bhi.n	4a3a <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    4a06:	8881      	ldrh	r1, [r0, #4]
    4a08:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    4a0c:	d217      	bcs.n	4a3e <bt_le_conn_params_valid+0x4a>
{
    4a0e:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    4a10:	88c0      	ldrh	r0, [r0, #6]
    4a12:	f1a0 020a 	sub.w	r2, r0, #10
    4a16:	b292      	uxth	r2, r2
    4a18:	f640 4476 	movw	r4, #3190	; 0xc76
    4a1c:	42a2      	cmp	r2, r4
    4a1e:	d810      	bhi.n	4a42 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    4a20:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    4a24:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    4a28:	da01      	bge.n	4a2e <bt_le_conn_params_valid+0x3a>
	return true;
    4a2a:	2001      	movs	r0, #1
    4a2c:	e00a      	b.n	4a44 <bt_le_conn_params_valid+0x50>
		return false;
    4a2e:	2000      	movs	r0, #0
    4a30:	e008      	b.n	4a44 <bt_le_conn_params_valid+0x50>
		return false;
    4a32:	2000      	movs	r0, #0
    4a34:	4770      	bx	lr
    4a36:	2000      	movs	r0, #0
    4a38:	4770      	bx	lr
    4a3a:	2000      	movs	r0, #0
    4a3c:	4770      	bx	lr
		return false;
    4a3e:	2000      	movs	r0, #0
    4a40:	4770      	bx	lr
		return false;
    4a42:	2000      	movs	r0, #0
}
    4a44:	bc10      	pop	{r4}
    4a46:	4770      	bx	lr

00004a48 <bt_addr_le_create_static>:
{
    4a48:	b510      	push	{r4, lr}
    4a4a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    4a4c:	2301      	movs	r3, #1
    4a4e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    4a52:	2106      	movs	r1, #6
    4a54:	f00c f848 	bl	10ae8 <bt_rand>
	if (err) {
    4a58:	4602      	mov	r2, r0
    4a5a:	b918      	cbnz	r0, 4a64 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    4a5c:	79a3      	ldrb	r3, [r4, #6]
    4a5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4a62:	71a3      	strb	r3, [r4, #6]
}
    4a64:	4610      	mov	r0, r2
    4a66:	bd10      	pop	{r4, pc}

00004a68 <set_static_addr>:
{
    4a68:	b510      	push	{r4, lr}
    4a6a:	b082      	sub	sp, #8
	if (bt_storage) {
    4a6c:	4b2e      	ldr	r3, [pc, #184]	; (4b28 <set_static_addr+0xc0>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	b13b      	cbz	r3, 4a82 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    4a72:	681c      	ldr	r4, [r3, #0]
    4a74:	2307      	movs	r3, #7
    4a76:	4a2d      	ldr	r2, [pc, #180]	; (4b2c <set_static_addr+0xc4>)
    4a78:	2100      	movs	r1, #0
    4a7a:	4608      	mov	r0, r1
    4a7c:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4a7e:	2807      	cmp	r0, #7
    4a80:	d02c      	beq.n	4adc <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4a82:	4b2a      	ldr	r3, [pc, #168]	; (4b2c <set_static_addr+0xc4>)
    4a84:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    4a88:	f013 0f01 	tst.w	r3, #1
    4a8c:	d018      	beq.n	4ac0 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4a8e:	aa01      	add	r2, sp, #4
    4a90:	2100      	movs	r1, #0
    4a92:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4a96:	f7ff fb6f 	bl	4178 <bt_hci_cmd_send_sync>
		if (err) {
    4a9a:	b988      	cbnz	r0, 4ac0 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    4a9c:	9801      	ldr	r0, [sp, #4]
    4a9e:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4aa0:	784b      	ldrb	r3, [r1, #1]
    4aa2:	b15b      	cbz	r3, 4abc <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4aa4:	4821      	ldr	r0, [pc, #132]	; (4b2c <set_static_addr+0xc4>)
    4aa6:	2301      	movs	r3, #1
    4aa8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    4aac:	2206      	movs	r2, #6
    4aae:	3102      	adds	r1, #2
    4ab0:	f7fb fc06 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    4ab4:	9801      	ldr	r0, [sp, #4]
    4ab6:	f015 fb41 	bl	1a13c <net_buf_unref>
    4aba:	e00f      	b.n	4adc <set_static_addr+0x74>
		net_buf_unref(rsp);
    4abc:	f015 fb3e 	bl	1a13c <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4ac0:	481a      	ldr	r0, [pc, #104]	; (4b2c <set_static_addr+0xc4>)
    4ac2:	f7ff ffc1 	bl	4a48 <bt_addr_le_create_static>
	if (err) {
    4ac6:	4603      	mov	r3, r0
    4ac8:	b9b8      	cbnz	r0, 4afa <set_static_addr+0x92>
	if (bt_storage) {
    4aca:	4b17      	ldr	r3, [pc, #92]	; (4b28 <set_static_addr+0xc0>)
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	b12b      	cbz	r3, 4adc <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4ad0:	685c      	ldr	r4, [r3, #4]
    4ad2:	2307      	movs	r3, #7
    4ad4:	4a15      	ldr	r2, [pc, #84]	; (4b2c <set_static_addr+0xc4>)
    4ad6:	2100      	movs	r1, #0
    4ad8:	4608      	mov	r0, r1
    4ada:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4adc:	4b13      	ldr	r3, [pc, #76]	; (4b2c <set_static_addr+0xc4>)
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	2b01      	cmp	r3, #1
    4ae2:	d11b      	bne.n	4b1c <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    4ae4:	4b11      	ldr	r3, [pc, #68]	; (4b2c <set_static_addr+0xc4>)
    4ae6:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4ae8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4aec:	2bc0      	cmp	r3, #192	; 0xc0
    4aee:	d118      	bne.n	4b22 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    4af0:	480f      	ldr	r0, [pc, #60]	; (4b30 <set_static_addr+0xc8>)
    4af2:	f7ff fe1d 	bl	4730 <set_random_address>
	if (err) {
    4af6:	4603      	mov	r3, r0
    4af8:	b110      	cbz	r0, 4b00 <set_static_addr+0x98>
}
    4afa:	4618      	mov	r0, r3
    4afc:	b002      	add	sp, #8
    4afe:	bd10      	pop	{r4, pc}
    4b00:	4a0c      	ldr	r2, [pc, #48]	; (4b34 <set_static_addr+0xcc>)
    4b02:	f3bf 8f5b 	dmb	ish
    4b06:	e852 1f00 	ldrex	r1, [r2]
    4b0a:	f041 0104 	orr.w	r1, r1, #4
    4b0e:	e842 1000 	strex	r0, r1, [r2]
    4b12:	2800      	cmp	r0, #0
    4b14:	d1f7      	bne.n	4b06 <set_static_addr+0x9e>
    4b16:	f3bf 8f5b 	dmb	ish
	return 0;
    4b1a:	e7ee      	b.n	4afa <set_static_addr+0x92>
		return -EINVAL;
    4b1c:	f06f 0315 	mvn.w	r3, #21
    4b20:	e7eb      	b.n	4afa <set_static_addr+0x92>
    4b22:	f06f 0315 	mvn.w	r3, #21
    4b26:	e7e8      	b.n	4afa <set_static_addr+0x92>
    4b28:	2000295c 	.word	0x2000295c
    4b2c:	2000b810 	.word	0x2000b810
    4b30:	2000b811 	.word	0x2000b811
    4b34:	2000b880 	.word	0x2000b880

00004b38 <hci_init>:
{
    4b38:	b510      	push	{r4, lr}
    4b3a:	b084      	sub	sp, #16
	err = common_init();
    4b3c:	f7ff fb5c 	bl	41f8 <common_init>
	if (err) {
    4b40:	4604      	mov	r4, r0
    4b42:	b110      	cbz	r0, 4b4a <hci_init+0x12>
}
    4b44:	4620      	mov	r0, r4
    4b46:	b004      	add	sp, #16
    4b48:	bd10      	pop	{r4, pc}
	err = le_init();
    4b4a:	f7ff fc9b 	bl	4484 <le_init>
	if (err) {
    4b4e:	4604      	mov	r4, r0
    4b50:	2800      	cmp	r0, #0
    4b52:	d1f7      	bne.n	4b44 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4b54:	4b17      	ldr	r3, [pc, #92]	; (4bb4 <hci_init+0x7c>)
    4b56:	7e9b      	ldrb	r3, [r3, #26]
    4b58:	f013 0f20 	tst.w	r3, #32
    4b5c:	d104      	bne.n	4b68 <hci_init+0x30>
		err = br_init();
    4b5e:	f7ff fd2d 	bl	45bc <br_init>
		if (err) {
    4b62:	4604      	mov	r4, r0
    4b64:	2800      	cmp	r0, #0
    4b66:	d1ed      	bne.n	4b44 <hci_init+0xc>
	err = set_event_mask();
    4b68:	f7ff fd44 	bl	45f4 <set_event_mask>
	if (err) {
    4b6c:	4604      	mov	r4, r0
    4b6e:	2800      	cmp	r0, #0
    4b70:	d1e8      	bne.n	4b44 <hci_init+0xc>
	hci_vs_init();
    4b72:	f7ff fda1 	bl	46b8 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4b76:	2300      	movs	r3, #0
    4b78:	9300      	str	r3, [sp, #0]
    4b7a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    4b7e:	2207      	movs	r2, #7
    4b80:	4669      	mov	r1, sp
    4b82:	480c      	ldr	r0, [pc, #48]	; (4bb4 <hci_init+0x7c>)
    4b84:	f025 ff06 	bl	2a994 <memcmp>
    4b88:	b178      	cbz	r0, 4baa <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4b8a:	4b0b      	ldr	r3, [pc, #44]	; (4bb8 <hci_init+0x80>)
    4b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b90:	9002      	str	r0, [sp, #8]
    4b92:	f8ad 100c 	strh.w	r1, [sp, #12]
    4b96:	0c09      	lsrs	r1, r1, #16
    4b98:	f88d 100e 	strb.w	r1, [sp, #14]
    4b9c:	2207      	movs	r2, #7
    4b9e:	a902      	add	r1, sp, #8
    4ba0:	4804      	ldr	r0, [pc, #16]	; (4bb4 <hci_init+0x7c>)
    4ba2:	f025 fef7 	bl	2a994 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4ba6:	2800      	cmp	r0, #0
    4ba8:	d1cc      	bne.n	4b44 <hci_init+0xc>
		err = set_static_addr();
    4baa:	f7ff ff5d 	bl	4a68 <set_static_addr>
    4bae:	4604      	mov	r4, r0
    4bb0:	e7c8      	b.n	4b44 <hci_init+0xc>
    4bb2:	bf00      	nop
    4bb4:	2000b810 	.word	0x2000b810
    4bb8:	0002ee58 	.word	0x0002ee58

00004bbc <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    4bbc:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    4bbe:	2100      	movs	r1, #0
    4bc0:	4608      	mov	r0, r1
    4bc2:	f007 ffb1 	bl	cb28 <reset>
    4bc6:	bd08      	pop	{r3, pc}

00004bc8 <bt_send>:
{
    4bc8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    4bca:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <bt_send+0x10>)
    4bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4bd0:	68db      	ldr	r3, [r3, #12]
    4bd2:	4798      	blx	r3
}
    4bd4:	bd08      	pop	{r3, pc}
    4bd6:	bf00      	nop
    4bd8:	2000b810 	.word	0x2000b810

00004bdc <bt_hci_cmd_send>:
{
    4bdc:	b538      	push	{r3, r4, r5, lr}
    4bde:	4605      	mov	r5, r0
	if (!buf) {
    4be0:	460c      	mov	r4, r1
    4be2:	b151      	cbz	r1, 4bfa <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4be4:	f640 4335 	movw	r3, #3125	; 0xc35
    4be8:	429d      	cmp	r5, r3
    4bea:	d00e      	beq.n	4c0a <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4bec:	4621      	mov	r1, r4
    4bee:	480c      	ldr	r0, [pc, #48]	; (4c20 <bt_hci_cmd_send+0x44>)
    4bf0:	f015 fa96 	bl	1a120 <net_buf_put>
	return 0;
    4bf4:	2500      	movs	r5, #0
}
    4bf6:	4628      	mov	r0, r5
    4bf8:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4bfa:	f7ff fa91 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    4bfe:	4604      	mov	r4, r0
    4c00:	2800      	cmp	r0, #0
    4c02:	d1ef      	bne.n	4be4 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    4c04:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4c08:	e7f5      	b.n	4bf6 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    4c0a:	4620      	mov	r0, r4
    4c0c:	f7ff ffdc 	bl	4bc8 <bt_send>
		if (err) {
    4c10:	4605      	mov	r5, r0
    4c12:	2800      	cmp	r0, #0
    4c14:	d0ef      	beq.n	4bf6 <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    4c16:	4620      	mov	r0, r4
    4c18:	f015 fa90 	bl	1a13c <net_buf_unref>
    4c1c:	e7eb      	b.n	4bf6 <bt_hci_cmd_send+0x1a>
    4c1e:	bf00      	nop
    4c20:	2000b8e4 	.word	0x2000b8e4

00004c24 <start_le_scan>:
{
    4c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c28:	b083      	sub	sp, #12
    4c2a:	4606      	mov	r6, r0
    4c2c:	4689      	mov	r9, r1
    4c2e:	4615      	mov	r5, r2
    4c30:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    4c32:	2107      	movs	r1, #7
    4c34:	f242 000b 	movw	r0, #8203	; 0x200b
    4c38:	f7ff fa72 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    4c3c:	2800      	cmp	r0, #0
    4c3e:	d072      	beq.n	4d26 <start_le_scan+0x102>
    4c40:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    4c42:	2107      	movs	r1, #7
    4c44:	3008      	adds	r0, #8
    4c46:	f015 fac5 	bl	1a1d4 <net_buf_simple_add>
    4c4a:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    4c4c:	2207      	movs	r2, #7
    4c4e:	2100      	movs	r1, #0
    4c50:	f025 ff34 	bl	2aabc <memset>
	set_param->scan_type = scan_type;
    4c54:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    4c56:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    4c5a:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    4c5e:	2300      	movs	r3, #0
    4c60:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    4c62:	4b34      	ldr	r3, [pc, #208]	; (4d34 <start_le_scan+0x110>)
    4c64:	781b      	ldrb	r3, [r3, #0]
    4c66:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4c68:	2e01      	cmp	r6, #1
    4c6a:	d02c      	beq.n	4cc6 <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    4c6c:	4639      	mov	r1, r7
    4c6e:	f242 000b 	movw	r0, #8203	; 0x200b
    4c72:	f7ff ffb3 	bl	4bdc <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    4c76:	2102      	movs	r1, #2
    4c78:	f242 000c 	movw	r0, #8204	; 0x200c
    4c7c:	f7ff fa50 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    4c80:	4604      	mov	r4, r0
    4c82:	2800      	cmp	r0, #0
    4c84:	d052      	beq.n	4d2c <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4c86:	2102      	movs	r1, #2
    4c88:	3008      	adds	r0, #8
    4c8a:	f015 faa3 	bl	1a1d4 <net_buf_simple_add>
    4c8e:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4c90:	2202      	movs	r2, #2
    4c92:	2100      	movs	r1, #0
    4c94:	f025 ff12 	bl	2aabc <memset>
	scan_enable->filter_dup = filter_dup;
    4c98:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    4c9c:	2301      	movs	r3, #1
    4c9e:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    4ca0:	aa01      	add	r2, sp, #4
    4ca2:	4621      	mov	r1, r4
    4ca4:	f242 000c 	movw	r0, #8204	; 0x200c
    4ca8:	f7ff fa66 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    4cac:	4605      	mov	r5, r0
    4cae:	b930      	cbnz	r0, 4cbe <start_le_scan+0x9a>
	err = rsp->data[0];
    4cb0:	9b01      	ldr	r3, [sp, #4]
    4cb2:	689b      	ldr	r3, [r3, #8]
    4cb4:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    4cb6:	b1d5      	cbz	r5, 4cee <start_le_scan+0xca>
	net_buf_unref(rsp);
    4cb8:	9801      	ldr	r0, [sp, #4]
    4cba:	f015 fa3f 	bl	1a13c <net_buf_unref>
}
    4cbe:	4628      	mov	r0, r5
    4cc0:	b003      	add	sp, #12
    4cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4cc6:	f3bf 8f5b 	dmb	ish
    4cca:	4b1a      	ldr	r3, [pc, #104]	; (4d34 <start_le_scan+0x110>)
    4ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4cce:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4cd2:	f013 0f20 	tst.w	r3, #32
    4cd6:	d1c9      	bne.n	4c6c <start_le_scan+0x48>
			err = le_set_private_addr();
    4cd8:	f7ff fd5a 	bl	4790 <le_set_private_addr>
			if (err) {
    4cdc:	4605      	mov	r5, r0
    4cde:	b910      	cbnz	r0, 4ce6 <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    4ce0:	2301      	movs	r3, #1
    4ce2:	7163      	strb	r3, [r4, #5]
    4ce4:	e7c2      	b.n	4c6c <start_le_scan+0x48>
				net_buf_unref(buf);
    4ce6:	4638      	mov	r0, r7
    4ce8:	f015 fa28 	bl	1a13c <net_buf_unref>
				return err;
    4cec:	e7e7      	b.n	4cbe <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cee:	4b12      	ldr	r3, [pc, #72]	; (4d38 <start_le_scan+0x114>)
    4cf0:	f3bf 8f5b 	dmb	ish
    4cf4:	e853 2f00 	ldrex	r2, [r3]
    4cf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4cfc:	e843 2100 	strex	r1, r2, [r3]
    4d00:	2900      	cmp	r1, #0
    4d02:	d1f7      	bne.n	4cf4 <start_le_scan+0xd0>
    4d04:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    4d08:	2e01      	cmp	r6, #1
    4d0a:	d1d5      	bne.n	4cb8 <start_le_scan+0x94>
    4d0c:	f3bf 8f5b 	dmb	ish
    4d10:	e853 2f00 	ldrex	r2, [r3]
    4d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4d18:	e843 2100 	strex	r1, r2, [r3]
    4d1c:	2900      	cmp	r1, #0
    4d1e:	d1f7      	bne.n	4d10 <start_le_scan+0xec>
    4d20:	f3bf 8f5b 	dmb	ish
    4d24:	e7c8      	b.n	4cb8 <start_le_scan+0x94>
		return -ENOBUFS;
    4d26:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4d2a:	e7c8      	b.n	4cbe <start_le_scan+0x9a>
		return -ENOBUFS;
    4d2c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4d30:	e7c5      	b.n	4cbe <start_le_scan+0x9a>
    4d32:	bf00      	nop
    4d34:	2000b810 	.word	0x2000b810
    4d38:	2000b880 	.word	0x2000b880

00004d3c <bt_le_scan_update>:
{
    4d3c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4d3e:	f3bf 8f5b 	dmb	ish
    4d42:	4b17      	ldr	r3, [pc, #92]	; (4da0 <bt_le_scan_update+0x64>)
    4d44:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    4d46:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    4d4a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d4e:	b114      	cbz	r4, 4d56 <bt_le_scan_update+0x1a>
		return 0;
    4d50:	2300      	movs	r3, #0
}
    4d52:	4618      	mov	r0, r3
    4d54:	bd38      	pop	{r3, r4, r5, pc}
    4d56:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4d58:	f3bf 8f5b 	dmb	ish
    4d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4d5e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4d62:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d66:	d004      	beq.n	4d72 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    4d68:	f7ff fd2a 	bl	47c0 <bt_hci_stop_scanning>
		if (err) {
    4d6c:	4603      	mov	r3, r0
    4d6e:	2800      	cmp	r0, #0
    4d70:	d1ef      	bne.n	4d52 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    4d72:	2101      	movs	r1, #1
    4d74:	2000      	movs	r0, #0
    4d76:	f001 fcd9 	bl	672c <bt_conn_lookup_state_le>
		if (!conn) {
    4d7a:	b170      	cbz	r0, 4d9a <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    4d7c:	f001 fd08 	bl	6790 <bt_conn_unref>
		if (fast_scan) {
    4d80:	b13d      	cbz	r5, 4d92 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    4d82:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    4d84:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    4d86:	2301      	movs	r3, #1
    4d88:	2000      	movs	r0, #0
    4d8a:	f7ff ff4b 	bl	4c24 <start_le_scan>
    4d8e:	4603      	mov	r3, r0
    4d90:	e7df      	b.n	4d52 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    4d92:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    4d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4d98:	e7f5      	b.n	4d86 <bt_le_scan_update+0x4a>
			return 0;
    4d9a:	4623      	mov	r3, r4
    4d9c:	e7d9      	b.n	4d52 <bt_le_scan_update+0x16>
    4d9e:	bf00      	nop
    4da0:	2000b810 	.word	0x2000b810

00004da4 <bt_init>:
{
    4da4:	b510      	push	{r4, lr}
	err = hci_init();
    4da6:	f7ff fec7 	bl	4b38 <hci_init>
	if (err) {
    4daa:	4604      	mov	r4, r0
    4dac:	b108      	cbz	r0, 4db2 <bt_init+0xe>
}
    4dae:	4620      	mov	r0, r4
    4db0:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    4db2:	f002 f83b 	bl	6e2c <bt_conn_init>
		if (err) {
    4db6:	4604      	mov	r4, r0
    4db8:	2800      	cmp	r0, #0
    4dba:	d1f8      	bne.n	4dae <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4dbc:	4b07      	ldr	r3, [pc, #28]	; (4ddc <bt_init+0x38>)
    4dbe:	f3bf 8f5b 	dmb	ish
    4dc2:	e853 2f00 	ldrex	r2, [r3]
    4dc6:	f042 0202 	orr.w	r2, r2, #2
    4dca:	e843 2100 	strex	r1, r2, [r3]
    4dce:	2900      	cmp	r1, #0
    4dd0:	d1f7      	bne.n	4dc2 <bt_init+0x1e>
    4dd2:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    4dd6:	f7ff ffb1 	bl	4d3c <bt_le_scan_update>
	return 0;
    4dda:	e7e8      	b.n	4dae <bt_init+0xa>
    4ddc:	2000b880 	.word	0x2000b880

00004de0 <init_work>:
{
    4de0:	b508      	push	{r3, lr}
	err = bt_init();
    4de2:	f7ff ffdf 	bl	4da4 <bt_init>
	if (ready_cb) {
    4de6:	4b02      	ldr	r3, [pc, #8]	; (4df0 <init_work+0x10>)
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	b103      	cbz	r3, 4dee <init_work+0xe>
		ready_cb(err);
    4dec:	4798      	blx	r3
    4dee:	bd08      	pop	{r3, pc}
    4df0:	200002bc 	.word	0x200002bc

00004df4 <hci_disconn_complete>:
{
    4df4:	b530      	push	{r4, r5, lr}
    4df6:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4df8:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4dfa:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    4dfe:	7823      	ldrb	r3, [r4, #0]
    4e00:	b10b      	cbz	r3, 4e06 <hci_disconn_complete+0x12>
}
    4e02:	b005      	add	sp, #20
    4e04:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    4e06:	f001 fc3f 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    4e0a:	4605      	mov	r5, r0
    4e0c:	2800      	cmp	r0, #0
    4e0e:	d034      	beq.n	4e7a <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    4e10:	78e3      	ldrb	r3, [r4, #3]
    4e12:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4e14:	f022 faf8 	bl	27408 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    4e18:	2200      	movs	r2, #0
	size_t unused = 0;
    4e1a:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    4e1c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    4e20:	d206      	bcs.n	4e30 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    4e22:	4927      	ldr	r1, [pc, #156]	; (4ec0 <hci_disconn_complete+0xcc>)
    4e24:	5c89      	ldrb	r1, [r1, r2]
    4e26:	29aa      	cmp	r1, #170	; 0xaa
    4e28:	d102      	bne.n	4e30 <hci_disconn_complete+0x3c>
			unused++;
    4e2a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    4e2c:	3201      	adds	r2, #1
    4e2e:	e7f5      	b.n	4e1c <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    4e30:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    4e34:	2264      	movs	r2, #100	; 0x64
    4e36:	fb02 f201 	mul.w	r2, r2, r1
    4e3a:	4822      	ldr	r0, [pc, #136]	; (4ec4 <hci_disconn_complete+0xd0>)
    4e3c:	fba0 0202 	umull	r0, r2, r0, r2
    4e40:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4e42:	9202      	str	r2, [sp, #8]
    4e44:	f44f 7220 	mov.w	r2, #640	; 0x280
    4e48:	9201      	str	r2, [sp, #4]
    4e4a:	9100      	str	r1, [sp, #0]
    4e4c:	491e      	ldr	r1, [pc, #120]	; (4ec8 <hci_disconn_complete+0xd4>)
    4e4e:	481f      	ldr	r0, [pc, #124]	; (4ecc <hci_disconn_complete+0xd8>)
    4e50:	f7fe f896 	bl	2f80 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e54:	2100      	movs	r1, #0
    4e56:	4628      	mov	r0, r5
    4e58:	f001 fd28 	bl	68ac <bt_conn_set_state>
	conn->handle = 0;
    4e5c:	2300      	movs	r3, #0
    4e5e:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4e60:	78ab      	ldrb	r3, [r5, #2]
    4e62:	bb03      	cbnz	r3, 4ea6 <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4e64:	f3bf 8f5b 	dmb	ish
    4e68:	686b      	ldr	r3, [r5, #4]
    4e6a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4e6e:	f013 0f01 	tst.w	r3, #1
    4e72:	d11c      	bne.n	4eae <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    4e74:	4628      	mov	r0, r5
    4e76:	f001 fc8b 	bl	6790 <bt_conn_unref>
    4e7a:	f3bf 8f5b 	dmb	ish
    4e7e:	4b14      	ldr	r3, [pc, #80]	; (4ed0 <hci_disconn_complete+0xdc>)
    4e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e82:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4e86:	f013 0f40 	tst.w	r3, #64	; 0x40
    4e8a:	d0ba      	beq.n	4e02 <hci_disconn_complete+0xe>
    4e8c:	f3bf 8f5b 	dmb	ish
    4e90:	4b0f      	ldr	r3, [pc, #60]	; (4ed0 <hci_disconn_complete+0xdc>)
    4e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e94:	f3bf 8f5b 	dmb	ish
    4e98:	f013 0f20 	tst.w	r3, #32
    4e9c:	d1b1      	bne.n	4e02 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    4e9e:	2001      	movs	r0, #1
    4ea0:	f7ff fce4 	bl	486c <set_advertise_enable>
    4ea4:	e7ad      	b.n	4e02 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    4ea6:	4628      	mov	r0, r5
    4ea8:	f001 fc72 	bl	6790 <bt_conn_unref>
		return;
    4eac:	e7a9      	b.n	4e02 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4eae:	2101      	movs	r1, #1
    4eb0:	4628      	mov	r0, r5
    4eb2:	f001 fcfb 	bl	68ac <bt_conn_set_state>
		bt_le_scan_update(false);
    4eb6:	2000      	movs	r0, #0
    4eb8:	f7ff ff40 	bl	4d3c <bt_le_scan_update>
    4ebc:	e7da      	b.n	4e74 <hci_disconn_complete+0x80>
    4ebe:	bf00      	nop
    4ec0:	20003bb0 	.word	0x20003bb0
    4ec4:	cccccccd 	.word	0xcccccccd
    4ec8:	0002f4f4 	.word	0x0002f4f4
    4ecc:	0002f500 	.word	0x0002f500
    4ed0:	2000b810 	.word	0x2000b810

00004ed4 <check_pending_conn>:
{
    4ed4:	b538      	push	{r3, r4, r5, lr}
    4ed6:	f3bf 8f5b 	dmb	ish
    4eda:	4b23      	ldr	r3, [pc, #140]	; (4f68 <check_pending_conn+0x94>)
    4edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4ede:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4ee2:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ee6:	d101      	bne.n	4eec <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4ee8:	2a01      	cmp	r2, #1
    4eea:	d900      	bls.n	4eee <check_pending_conn+0x1a>
    4eec:	bd38      	pop	{r3, r4, r5, pc}
    4eee:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    4ef0:	2101      	movs	r1, #1
    4ef2:	f001 fc1b 	bl	672c <bt_conn_lookup_state_le>
	if (!conn) {
    4ef6:	4605      	mov	r5, r0
    4ef8:	2800      	cmp	r0, #0
    4efa:	d0f7      	beq.n	4eec <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    4efc:	f7ff fc60 	bl	47c0 <bt_hci_stop_scanning>
    4f00:	b9c0      	cbnz	r0, 4f34 <check_pending_conn+0x60>
    4f02:	f3bf 8f5b 	dmb	ish
    4f06:	4b18      	ldr	r3, [pc, #96]	; (4f68 <check_pending_conn+0x94>)
    4f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4f0a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4f0e:	f013 0f04 	tst.w	r3, #4
    4f12:	d11c      	bne.n	4f4e <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    4f14:	2207      	movs	r2, #7
    4f16:	4914      	ldr	r1, [pc, #80]	; (4f68 <check_pending_conn+0x94>)
    4f18:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    4f1c:	f7fb f9d0 	bl	2c0 <memcpy>
    4f20:	2207      	movs	r2, #7
    4f22:	4621      	mov	r1, r4
    4f24:	f105 0056 	add.w	r0, r5, #86	; 0x56
    4f28:	f7fb f9ca 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    4f2c:	4628      	mov	r0, r5
    4f2e:	f7ff fcdb 	bl	48e8 <hci_le_create_conn>
    4f32:	b180      	cbz	r0, 4f56 <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    4f34:	231f      	movs	r3, #31
    4f36:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4f38:	2100      	movs	r1, #0
    4f3a:	4628      	mov	r0, r5
    4f3c:	f001 fcb6 	bl	68ac <bt_conn_set_state>
	bt_conn_unref(conn);
    4f40:	4628      	mov	r0, r5
    4f42:	f001 fc25 	bl	6790 <bt_conn_unref>
	bt_le_scan_update(false);
    4f46:	2000      	movs	r0, #0
    4f48:	f7ff fef8 	bl	4d3c <bt_le_scan_update>
    4f4c:	e7ce      	b.n	4eec <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    4f4e:	4807      	ldr	r0, [pc, #28]	; (4f6c <check_pending_conn+0x98>)
    4f50:	f7ff fbee 	bl	4730 <set_random_address>
    4f54:	e7de      	b.n	4f14 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4f56:	2102      	movs	r1, #2
    4f58:	4628      	mov	r0, r5
    4f5a:	f001 fca7 	bl	68ac <bt_conn_set_state>
	bt_conn_unref(conn);
    4f5e:	4628      	mov	r0, r5
    4f60:	f001 fc16 	bl	6790 <bt_conn_unref>
	return;
    4f64:	bd38      	pop	{r3, r4, r5, pc}
    4f66:	bf00      	nop
    4f68:	2000b810 	.word	0x2000b810
    4f6c:	2000b811 	.word	0x2000b811

00004f70 <le_adv_report>:
{
    4f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f74:	b083      	sub	sp, #12
    4f76:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    4f78:	f100 0308 	add.w	r3, r0, #8
    4f7c:	9300      	str	r3, [sp, #0]
    4f7e:	4618      	mov	r0, r3
    4f80:	f015 f97d 	bl	1a27e <net_buf_simple_pull_u8>
	while (num_reports--) {
    4f84:	e00a      	b.n	4f9c <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    4f86:	7822      	ldrb	r2, [r4, #0]
    4f88:	4631      	mov	r1, r6
    4f8a:	9801      	ldr	r0, [sp, #4]
    4f8c:	f7ff ffa2 	bl	4ed4 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4f90:	7a21      	ldrb	r1, [r4, #8]
    4f92:	3101      	adds	r1, #1
    4f94:	9800      	ldr	r0, [sp, #0]
    4f96:	f015 f96a 	bl	1a26e <net_buf_simple_pull>
	while (num_reports--) {
    4f9a:	4638      	mov	r0, r7
    4f9c:	1e43      	subs	r3, r0, #1
    4f9e:	b2df      	uxtb	r7, r3
    4fa0:	b368      	cbz	r0, 4ffe <le_adv_report+0x8e>
		info = (void *)buf->data;
    4fa2:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    4fa4:	2109      	movs	r1, #9
    4fa6:	f8dd 9000 	ldr.w	r9, [sp]
    4faa:	4648      	mov	r0, r9
    4fac:	f015 f95f 	bl	1a26e <net_buf_simple_pull>
		rssi = info->data[info->length];
    4fb0:	7a23      	ldrb	r3, [r4, #8]
    4fb2:	4423      	add	r3, r4
    4fb4:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    4fb8:	1c66      	adds	r6, r4, #1
    4fba:	4630      	mov	r0, r6
    4fbc:	f7fe ff6b 	bl	3e96 <find_id_addr>
    4fc0:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    4fc2:	4b10      	ldr	r3, [pc, #64]	; (5004 <le_adv_report+0x94>)
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d0dd      	beq.n	4f86 <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    4fca:	f8cd 9000 	str.w	r9, [sp]
    4fce:	4648      	mov	r0, r9
    4fd0:	f015 f965 	bl	1a29e <net_buf_simple_headroom>
    4fd4:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    4fd8:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    4fdc:	7a23      	ldrb	r3, [r4, #8]
    4fde:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    4fe0:	4b08      	ldr	r3, [pc, #32]	; (5004 <le_adv_report+0x94>)
    4fe2:	f8d3 b000 	ldr.w	fp, [r3]
    4fe6:	9b00      	ldr	r3, [sp, #0]
    4fe8:	7822      	ldrb	r2, [r4, #0]
    4fea:	4641      	mov	r1, r8
    4fec:	9801      	ldr	r0, [sp, #4]
    4fee:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    4ff0:	f105 0310 	add.w	r3, r5, #16
    4ff4:	4453      	add	r3, sl
    4ff6:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    4ff8:	f8a5 900c 	strh.w	r9, [r5, #12]
    4ffc:	e7c3      	b.n	4f86 <le_adv_report+0x16>
}
    4ffe:	b003      	add	sp, #12
    5000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5004:	200002c0 	.word	0x200002c0

00005008 <hci_le_read_remote_features>:
{
    5008:	b538      	push	{r3, r4, r5, lr}
    500a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    500c:	2102      	movs	r1, #2
    500e:	f242 0016 	movw	r0, #8214	; 0x2016
    5012:	f7ff f885 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    5016:	b168      	cbz	r0, 5034 <hci_le_read_remote_features+0x2c>
    5018:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    501a:	2102      	movs	r1, #2
    501c:	3008      	adds	r0, #8
    501e:	f015 f8d9 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5022:	882b      	ldrh	r3, [r5, #0]
    5024:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5026:	4621      	mov	r1, r4
    5028:	f242 0016 	movw	r0, #8214	; 0x2016
    502c:	f7ff fdd6 	bl	4bdc <bt_hci_cmd_send>
	return 0;
    5030:	2000      	movs	r0, #0
    5032:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5034:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5038:	bd38      	pop	{r3, r4, r5, pc}

0000503a <hci_le_set_phy>:
{
    503a:	b538      	push	{r3, r4, r5, lr}
    503c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    503e:	2107      	movs	r1, #7
    5040:	f242 0032 	movw	r0, #8242	; 0x2032
    5044:	f7ff f86c 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    5048:	b1a0      	cbz	r0, 5074 <hci_le_set_phy+0x3a>
    504a:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    504c:	2107      	movs	r1, #7
    504e:	3008      	adds	r0, #8
    5050:	f015 f8c0 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5054:	8823      	ldrh	r3, [r4, #0]
    5056:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5058:	2400      	movs	r4, #0
    505a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    505c:	2302      	movs	r3, #2
    505e:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5060:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5062:	7144      	strb	r4, [r0, #5]
    5064:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5066:	4629      	mov	r1, r5
    5068:	f242 0032 	movw	r0, #8242	; 0x2032
    506c:	f7ff fdb6 	bl	4bdc <bt_hci_cmd_send>
	return 0;
    5070:	4620      	mov	r0, r4
    5072:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5074:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5078:	bd38      	pop	{r3, r4, r5, pc}

0000507a <hci_le_set_data_len>:
{
    507a:	b5f0      	push	{r4, r5, r6, r7, lr}
    507c:	b083      	sub	sp, #12
    507e:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5080:	aa01      	add	r2, sp, #4
    5082:	2100      	movs	r1, #0
    5084:	f242 002f 	movw	r0, #8239	; 0x202f
    5088:	f7ff f876 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    508c:	4603      	mov	r3, r0
    508e:	b110      	cbz	r0, 5096 <hci_le_set_data_len+0x1c>
}
    5090:	4618      	mov	r0, r3
    5092:	b003      	add	sp, #12
    5094:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5096:	9801      	ldr	r0, [sp, #4]
    5098:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    509a:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    509e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    50a2:	f015 f84b 	bl	1a13c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    50a6:	2106      	movs	r1, #6
    50a8:	f242 0022 	movw	r0, #8226	; 0x2022
    50ac:	f7ff f838 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    50b0:	4605      	mov	r5, r0
    50b2:	b170      	cbz	r0, 50d2 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    50b4:	2106      	movs	r1, #6
    50b6:	3008      	adds	r0, #8
    50b8:	f015 f88c 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    50bc:	8823      	ldrh	r3, [r4, #0]
    50be:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    50c0:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    50c2:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    50c4:	4629      	mov	r1, r5
    50c6:	f242 0022 	movw	r0, #8226	; 0x2022
    50ca:	f7ff fd87 	bl	4bdc <bt_hci_cmd_send>
    50ce:	4603      	mov	r3, r0
    50d0:	e7de      	b.n	5090 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    50d2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    50d6:	e7db      	b.n	5090 <hci_le_set_data_len+0x16>

000050d8 <le_conn_complete>:
{
    50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    50dc:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    50de:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    50e2:	7823      	ldrb	r3, [r4, #0]
    50e4:	b17b      	cbz	r3, 5106 <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    50e6:	2102      	movs	r1, #2
    50e8:	2000      	movs	r0, #0
    50ea:	f001 fb1f 	bl	672c <bt_conn_lookup_state_le>
		if (!conn) {
    50ee:	4605      	mov	r5, r0
    50f0:	b3d0      	cbz	r0, 5168 <le_conn_complete+0x90>
		conn->err = evt->status;
    50f2:	7823      	ldrb	r3, [r4, #0]
    50f4:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    50f6:	2100      	movs	r1, #0
    50f8:	f001 fbd8 	bl	68ac <bt_conn_set_state>
		bt_conn_unref(conn);
    50fc:	4628      	mov	r0, r5
    50fe:	f001 fb47 	bl	6790 <bt_conn_unref>
		return;
    5102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5106:	1d27      	adds	r7, r4, #4
    5108:	4638      	mov	r0, r7
    510a:	f7fe fec4 	bl	3e96 <find_id_addr>
    510e:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5110:	2102      	movs	r1, #2
    5112:	f001 fb0b 	bl	672c <bt_conn_lookup_state_le>
    5116:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5118:	78e3      	ldrb	r3, [r4, #3]
    511a:	2b01      	cmp	r3, #1
    511c:	d026      	beq.n	516c <le_conn_complete+0x94>
	if (!conn) {
    511e:	b31d      	cbz	r5, 5168 <le_conn_complete+0x90>
	conn->handle   = handle;
    5120:	4628      	mov	r0, r5
    5122:	f820 6b48 	strh.w	r6, [r0], #72
    5126:	2207      	movs	r2, #7
    5128:	4641      	mov	r1, r8
    512a:	f7fb f8c9 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    512e:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5132:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5136:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    513a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    513e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5142:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5146:	78e3      	ldrb	r3, [r4, #3]
    5148:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    514a:	2b01      	cmp	r3, #1
    514c:	d022      	beq.n	5194 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    514e:	2103      	movs	r1, #3
    5150:	4628      	mov	r0, r5
    5152:	f001 fbab 	bl	68ac <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5156:	7b2b      	ldrb	r3, [r5, #12]
    5158:	2b03      	cmp	r3, #3
    515a:	d03b      	beq.n	51d4 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    515c:	4628      	mov	r0, r5
    515e:	f001 fb17 	bl	6790 <bt_conn_unref>
	bt_le_scan_update(false);
    5162:	2000      	movs	r0, #0
    5164:	f7ff fdea 	bl	4d3c <bt_le_scan_update>
    5168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    516c:	4b3a      	ldr	r3, [pc, #232]	; (5258 <le_conn_complete+0x180>)
    516e:	f3bf 8f5b 	dmb	ish
    5172:	e853 2f00 	ldrex	r2, [r3]
    5176:	f022 0220 	bic.w	r2, r2, #32
    517a:	e843 2100 	strex	r1, r2, [r3]
    517e:	2900      	cmp	r1, #0
    5180:	d1f7      	bne.n	5172 <le_conn_complete+0x9a>
    5182:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5186:	2d00      	cmp	r5, #0
    5188:	d1c9      	bne.n	511e <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    518a:	4640      	mov	r0, r8
    518c:	f001 fa30 	bl	65f0 <bt_conn_add_le>
    5190:	4605      	mov	r5, r0
    5192:	e7c4      	b.n	511e <le_conn_complete+0x46>
    5194:	2207      	movs	r2, #7
    5196:	4639      	mov	r1, r7
    5198:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    519c:	f7fb f890 	bl	2c0 <memcpy>
    51a0:	4e2e      	ldr	r6, [pc, #184]	; (525c <le_conn_complete+0x184>)
    51a2:	2207      	movs	r2, #7
    51a4:	4631      	mov	r1, r6
    51a6:	f105 0056 	add.w	r0, r5, #86	; 0x56
    51aa:	f7fb f889 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    51ae:	f3bf 8f5b 	dmb	ish
    51b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
    51b4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    51b8:	f013 0f40 	tst.w	r3, #64	; 0x40
    51bc:	d0c7      	beq.n	514e <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    51be:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    51c2:	2200      	movs	r2, #0
    51c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    51c8:	4313      	orrs	r3, r2
    51ca:	d0c0      	beq.n	514e <le_conn_complete+0x76>
			set_advertise_enable(true);
    51cc:	2001      	movs	r0, #1
    51ce:	f7ff fb4d 	bl	486c <set_advertise_enable>
    51d2:	e7bc      	b.n	514e <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    51d4:	78e3      	ldrb	r3, [r4, #3]
    51d6:	b12b      	cbz	r3, 51e4 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    51d8:	4b20      	ldr	r3, [pc, #128]	; (525c <le_conn_complete+0x184>)
    51da:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    51de:	f013 0f08 	tst.w	r3, #8
    51e2:	d004      	beq.n	51ee <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    51e4:	4628      	mov	r0, r5
    51e6:	f7ff ff0f 	bl	5008 <hci_le_read_remote_features>
		if (!err) {
    51ea:	2800      	cmp	r0, #0
    51ec:	d0b6      	beq.n	515c <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    51ee:	4b1b      	ldr	r3, [pc, #108]	; (525c <le_conn_complete+0x184>)
    51f0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    51f4:	f013 0f01 	tst.w	r3, #1
    51f8:	d10d      	bne.n	5216 <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    51fa:	4b18      	ldr	r3, [pc, #96]	; (525c <le_conn_complete+0x184>)
    51fc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5200:	f013 0f20 	tst.w	r3, #32
    5204:	d003      	beq.n	520e <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5206:	4628      	mov	r0, r5
    5208:	f7ff ff37 	bl	507a <hci_le_set_data_len>
		if (!err) {
    520c:	b1b0      	cbz	r0, 523c <le_conn_complete+0x164>
	update_conn_param(conn);
    520e:	4628      	mov	r0, r5
    5210:	f7fe fe4a 	bl	3ea8 <update_conn_param>
    5214:	e7a2      	b.n	515c <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5216:	4628      	mov	r0, r5
    5218:	f7ff ff0f 	bl	503a <hci_le_set_phy>
		if (!err) {
    521c:	2800      	cmp	r0, #0
    521e:	d1ec      	bne.n	51fa <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5220:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5222:	f3bf 8f5b 	dmb	ish
    5226:	e853 2f00 	ldrex	r2, [r3]
    522a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    522e:	e843 2100 	strex	r1, r2, [r3]
    5232:	2900      	cmp	r1, #0
    5234:	d1f7      	bne.n	5226 <le_conn_complete+0x14e>
    5236:	f3bf 8f5b 	dmb	ish
    523a:	e78f      	b.n	515c <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    523c:	1d2b      	adds	r3, r5, #4
    523e:	f3bf 8f5b 	dmb	ish
    5242:	e853 2f00 	ldrex	r2, [r3]
    5246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    524a:	e843 2100 	strex	r1, r2, [r3]
    524e:	2900      	cmp	r1, #0
    5250:	d1f7      	bne.n	5242 <le_conn_complete+0x16a>
    5252:	f3bf 8f5b 	dmb	ish
    5256:	e781      	b.n	515c <le_conn_complete+0x84>
    5258:	2000b880 	.word	0x2000b880
    525c:	2000b810 	.word	0x2000b810

00005260 <le_conn_complete>:
{
    5260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5264:	4604      	mov	r4, r0
    5266:	460f      	mov	r7, r1
    5268:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    526a:	1d85      	adds	r5, r0, #6
    526c:	f100 060c 	add.w	r6, r0, #12
    5270:	4633      	mov	r3, r6
    5272:	22ff      	movs	r2, #255	; 0xff
    5274:	4629      	mov	r1, r5
    5276:	7940      	ldrb	r0, [r0, #5]
    5278:	f014 faf8 	bl	1986c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    527c:	4b40      	ldr	r3, [pc, #256]	; (5380 <le_conn_complete+0x120>)
    527e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5282:	2200      	movs	r2, #0
    5284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5288:	4313      	orrs	r3, r2
    528a:	d077      	beq.n	537c <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    528c:	4b3d      	ldr	r3, [pc, #244]	; (5384 <le_conn_complete+0x124>)
    528e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5292:	f002 0001 	and.w	r0, r2, #1
    5296:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5298:	4301      	orrs	r1, r0
    529a:	d104      	bne.n	52a6 <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    529c:	f402 7000 	and.w	r0, r2, #512	; 0x200
    52a0:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    52a2:	4301      	orrs	r1, r0
    52a4:	d06a      	beq.n	537c <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    52a6:	78e1      	ldrb	r1, [r4, #3]
    52a8:	b919      	cbnz	r1, 52b2 <le_conn_complete+0x52>
		conn_count++;
    52aa:	4837      	ldr	r0, [pc, #220]	; (5388 <le_conn_complete+0x128>)
    52ac:	6801      	ldr	r1, [r0, #0]
    52ae:	3101      	adds	r1, #1
    52b0:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    52b2:	f402 7200 	and.w	r2, r2, #512	; 0x200
    52b6:	2300      	movs	r3, #0
    52b8:	4313      	orrs	r3, r2
    52ba:	d03e      	beq.n	533a <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    52bc:	221e      	movs	r2, #30
    52be:	210a      	movs	r1, #10
    52c0:	4640      	mov	r0, r8
    52c2:	f007 fb2d 	bl	c920 <meta_evt>
    52c6:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    52c8:	78e3      	ldrb	r3, [r4, #3]
    52ca:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    52cc:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    52d0:	7923      	ldrb	r3, [r4, #4]
    52d2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    52d4:	7963      	ldrb	r3, [r4, #5]
    52d6:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    52d8:	2206      	movs	r2, #6
    52da:	4629      	mov	r1, r5
    52dc:	3005      	adds	r0, #5
    52de:	f7fa ffef 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    52e2:	7ca3      	ldrb	r3, [r4, #18]
    52e4:	b123      	cbz	r3, 52f0 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    52e6:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    52e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    52ec:	2b40      	cmp	r3, #64	; 0x40
    52ee:	d01c      	beq.n	532a <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    52f0:	2206      	movs	r2, #6
    52f2:	2100      	movs	r1, #0
    52f4:	f108 000b 	add.w	r0, r8, #11
    52f8:	f025 fbe0 	bl	2aabc <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    52fc:	2206      	movs	r2, #6
    52fe:	4631      	mov	r1, r6
    5300:	f108 0011 	add.w	r0, r8, #17
    5304:	f7fa ffdc 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5308:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    530c:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5310:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5314:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5318:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    531c:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5320:	7fe3      	ldrb	r3, [r4, #31]
    5322:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    532a:	2206      	movs	r2, #6
    532c:	f104 0113 	add.w	r1, r4, #19
    5330:	f108 000b 	add.w	r0, r8, #11
    5334:	f7fa ffc4 	bl	2c0 <memcpy>
    5338:	e7e0      	b.n	52fc <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    533a:	2212      	movs	r2, #18
    533c:	2101      	movs	r1, #1
    533e:	4640      	mov	r0, r8
    5340:	f007 faee 	bl	c920 <meta_evt>
    5344:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5346:	78e3      	ldrb	r3, [r4, #3]
    5348:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    534a:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    534e:	7923      	ldrb	r3, [r4, #4]
    5350:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5352:	7963      	ldrb	r3, [r4, #5]
    5354:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5356:	2206      	movs	r2, #6
    5358:	4629      	mov	r1, r5
    535a:	3005      	adds	r0, #5
    535c:	f7fa ffb0 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5360:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5364:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5368:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    536c:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5370:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5374:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5378:	7fe3      	ldrb	r3, [r4, #31]
    537a:	7473      	strb	r3, [r6, #17]
    537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5380:	2000bb00 	.word	0x2000bb00
    5384:	2000bb08 	.word	0x2000bb08
    5388:	200009dc 	.word	0x200009dc

0000538c <le_remote_feat_complete>:
{
    538c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    538e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5390:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5394:	f001 f978 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    5398:	b1f0      	cbz	r0, 53d8 <le_remote_feat_complete+0x4c>
    539a:	4604      	mov	r4, r0
	if (!evt->status) {
    539c:	782b      	ldrb	r3, [r5, #0]
    539e:	b1e3      	cbz	r3, 53da <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    53a0:	4b24      	ldr	r3, [pc, #144]	; (5434 <le_remote_feat_complete+0xa8>)
    53a2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    53a6:	f013 0f01 	tst.w	r3, #1
    53aa:	d004      	beq.n	53b6 <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    53ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    53b0:	f013 0f01 	tst.w	r3, #1
    53b4:	d117      	bne.n	53e6 <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    53b6:	4b1f      	ldr	r3, [pc, #124]	; (5434 <le_remote_feat_complete+0xa8>)
    53b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    53bc:	f013 0f20 	tst.w	r3, #32
    53c0:	d004      	beq.n	53cc <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    53c2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    53c6:	f013 0f20 	tst.w	r3, #32
    53ca:	d11f      	bne.n	540c <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    53cc:	4620      	mov	r0, r4
    53ce:	f7fe fd6b 	bl	3ea8 <update_conn_param>
	bt_conn_unref(conn);
    53d2:	4620      	mov	r0, r4
    53d4:	f001 f9dc 	bl	6790 <bt_conn_unref>
    53d8:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    53da:	2208      	movs	r2, #8
    53dc:	1ce9      	adds	r1, r5, #3
    53de:	3068      	adds	r0, #104	; 0x68
    53e0:	f7fa ff6e 	bl	2c0 <memcpy>
    53e4:	e7dc      	b.n	53a0 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    53e6:	4620      	mov	r0, r4
    53e8:	f7ff fe27 	bl	503a <hci_le_set_phy>
		if (!err) {
    53ec:	2800      	cmp	r0, #0
    53ee:	d1e2      	bne.n	53b6 <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    53f0:	1d23      	adds	r3, r4, #4
    53f2:	f3bf 8f5b 	dmb	ish
    53f6:	e853 2f00 	ldrex	r2, [r3]
    53fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    53fe:	e843 2100 	strex	r1, r2, [r3]
    5402:	2900      	cmp	r1, #0
    5404:	d1f7      	bne.n	53f6 <le_remote_feat_complete+0x6a>
    5406:	f3bf 8f5b 	dmb	ish
    540a:	e7e2      	b.n	53d2 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    540c:	4620      	mov	r0, r4
    540e:	f7ff fe34 	bl	507a <hci_le_set_data_len>
		if (!err) {
    5412:	2800      	cmp	r0, #0
    5414:	d1da      	bne.n	53cc <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5416:	1d23      	adds	r3, r4, #4
    5418:	f3bf 8f5b 	dmb	ish
    541c:	e853 2f00 	ldrex	r2, [r3]
    5420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5424:	e843 2100 	strex	r1, r2, [r3]
    5428:	2900      	cmp	r1, #0
    542a:	d1f7      	bne.n	541c <le_remote_feat_complete+0x90>
    542c:	f3bf 8f5b 	dmb	ish
    5430:	e7cf      	b.n	53d2 <le_remote_feat_complete+0x46>
    5432:	bf00      	nop
    5434:	2000b810 	.word	0x2000b810

00005438 <le_remote_feat_complete>:
{
    5438:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    543a:	4c14      	ldr	r4, [pc, #80]	; (548c <le_remote_feat_complete+0x54>)
    543c:	e9d4 4500 	ldrd	r4, r5, [r4]
    5440:	2400      	movs	r4, #0
    5442:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5446:	432c      	orrs	r4, r5
    5448:	d007      	beq.n	545a <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    544a:	4c11      	ldr	r4, [pc, #68]	; (5490 <le_remote_feat_complete+0x58>)
    544c:	e9d4 4500 	ldrd	r4, r5, [r4]
    5450:	f004 0408 	and.w	r4, r4, #8
    5454:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5456:	432c      	orrs	r4, r5
    5458:	d100      	bne.n	545c <le_remote_feat_complete+0x24>
    545a:	bd70      	pop	{r4, r5, r6, pc}
    545c:	4615      	mov	r5, r2
    545e:	460e      	mov	r6, r1
    5460:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    5462:	220b      	movs	r2, #11
    5464:	2104      	movs	r1, #4
    5466:	4618      	mov	r0, r3
    5468:	f007 fa5a 	bl	c920 <meta_evt>
	sep->status = status;
    546c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    546e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    5472:	b12c      	cbz	r4, 5480 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5474:	2208      	movs	r2, #8
    5476:	2100      	movs	r1, #0
    5478:	3003      	adds	r0, #3
    547a:	f025 fb1f 	bl	2aabc <memset>
    547e:	e7ec      	b.n	545a <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    5480:	2208      	movs	r2, #8
    5482:	1d31      	adds	r1, r6, #4
    5484:	3003      	adds	r0, #3
    5486:	f7fa ff1b 	bl	2c0 <memcpy>
    548a:	bd70      	pop	{r4, r5, r6, pc}
    548c:	2000bb00 	.word	0x2000bb00
    5490:	2000bb08 	.word	0x2000bb08

00005494 <le_phy_update_complete>:
{
    5494:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    5496:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5498:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    549c:	f001 f8f4 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    54a0:	b308      	cbz	r0, 54e6 <le_phy_update_complete+0x52>
    54a2:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    54a4:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54a6:	f3bf 8f5b 	dmb	ish
    54aa:	e855 3f00 	ldrex	r3, [r5]
    54ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    54b2:	e845 2100 	strex	r1, r2, [r5]
    54b6:	2900      	cmp	r1, #0
    54b8:	d1f7      	bne.n	54aa <le_phy_update_complete+0x16>
    54ba:	f3bf 8f5b 	dmb	ish
    54be:	f013 0f80 	tst.w	r3, #128	; 0x80
    54c2:	d00d      	beq.n	54e0 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    54c4:	4b11      	ldr	r3, [pc, #68]	; (550c <le_phy_update_complete+0x78>)
    54c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    54ca:	f013 0f20 	tst.w	r3, #32
    54ce:	d004      	beq.n	54da <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    54d0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    54d4:	f013 0f20 	tst.w	r3, #32
    54d8:	d106      	bne.n	54e8 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    54da:	4620      	mov	r0, r4
    54dc:	f7fe fce4 	bl	3ea8 <update_conn_param>
	bt_conn_unref(conn);
    54e0:	4620      	mov	r0, r4
    54e2:	f001 f955 	bl	6790 <bt_conn_unref>
    54e6:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    54e8:	4620      	mov	r0, r4
    54ea:	f7ff fdc6 	bl	507a <hci_le_set_data_len>
		if (!err) {
    54ee:	2800      	cmp	r0, #0
    54f0:	d1f3      	bne.n	54da <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54f2:	f3bf 8f5b 	dmb	ish
    54f6:	e855 3f00 	ldrex	r3, [r5]
    54fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    54fe:	e845 3200 	strex	r2, r3, [r5]
    5502:	2a00      	cmp	r2, #0
    5504:	d1f7      	bne.n	54f6 <le_phy_update_complete+0x62>
    5506:	f3bf 8f5b 	dmb	ish
    550a:	e7e9      	b.n	54e0 <le_phy_update_complete+0x4c>
    550c:	2000b810 	.word	0x2000b810

00005510 <le_conn_param_neg_reply>:
{
    5510:	b570      	push	{r4, r5, r6, lr}
    5512:	4606      	mov	r6, r0
    5514:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5516:	2103      	movs	r1, #3
    5518:	f242 0021 	movw	r0, #8225	; 0x2021
    551c:	f7fe fe00 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    5520:	b160      	cbz	r0, 553c <le_conn_param_neg_reply+0x2c>
    5522:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5524:	2103      	movs	r1, #3
    5526:	3008      	adds	r0, #8
    5528:	f014 fe54 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    552c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    552e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5530:	4621      	mov	r1, r4
    5532:	f242 0021 	movw	r0, #8225	; 0x2021
    5536:	f7ff fb51 	bl	4bdc <bt_hci_cmd_send>
    553a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    553c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5540:	bd70      	pop	{r4, r5, r6, pc}

00005542 <le_conn_param_req_reply>:
{
    5542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5544:	4607      	mov	r7, r0
    5546:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5548:	210e      	movs	r1, #14
    554a:	f242 0020 	movw	r0, #8224	; 0x2020
    554e:	f7fe fde7 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    5552:	b1c0      	cbz	r0, 5586 <le_conn_param_req_reply+0x44>
    5554:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5556:	210e      	movs	r1, #14
    5558:	3008      	adds	r0, #8
    555a:	f014 fe3b 	bl	1a1d4 <net_buf_simple_add>
    555e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5560:	220e      	movs	r2, #14
    5562:	2100      	movs	r1, #0
    5564:	f025 faaa 	bl	2aabc <memset>
	cp->handle = sys_cpu_to_le16(handle);
    5568:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    556a:	882b      	ldrh	r3, [r5, #0]
    556c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    556e:	886b      	ldrh	r3, [r5, #2]
    5570:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5572:	88ab      	ldrh	r3, [r5, #4]
    5574:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5576:	88eb      	ldrh	r3, [r5, #6]
    5578:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    557a:	4631      	mov	r1, r6
    557c:	f242 0020 	movw	r0, #8224	; 0x2020
    5580:	f7ff fb2c 	bl	4bdc <bt_hci_cmd_send>
    5584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    5586:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000558c <le_conn_param_req_reply>:
{
    558c:	b570      	push	{r4, r5, r6, lr}
    558e:	b082      	sub	sp, #8
    5590:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    5592:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    5594:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    5596:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    5598:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    559a:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    559c:	9201      	str	r2, [sp, #4]
    559e:	9100      	str	r1, [sp, #0]
    55a0:	2200      	movs	r2, #0
    55a2:	2102      	movs	r1, #2
    55a4:	b2a0      	uxth	r0, r4
    55a6:	f012 f927 	bl	177f8 <ll_conn_update>
    55aa:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    55ac:	2103      	movs	r1, #3
    55ae:	4630      	mov	r0, r6
    55b0:	f007 f91c 	bl	c7ec <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    55b4:	b12d      	cbz	r5, 55c2 <le_conn_param_req_reply+0x36>
    55b6:	230c      	movs	r3, #12
    55b8:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    55ba:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    55be:	b002      	add	sp, #8
    55c0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    55c2:	2300      	movs	r3, #0
    55c4:	e7f8      	b.n	55b8 <le_conn_param_req_reply+0x2c>
	...

000055c8 <le_conn_param_req>:
{
    55c8:	b530      	push	{r4, r5, lr}
    55ca:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    55cc:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    55ce:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    55d0:	885a      	ldrh	r2, [r3, #2]
    55d2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    55d6:	889a      	ldrh	r2, [r3, #4]
    55d8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    55dc:	88da      	ldrh	r2, [r3, #6]
    55de:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    55e2:	891b      	ldrh	r3, [r3, #8]
    55e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    55e8:	4620      	mov	r0, r4
    55ea:	f001 f84d 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    55ee:	b178      	cbz	r0, 5610 <le_conn_param_req+0x48>
    55f0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    55f2:	4669      	mov	r1, sp
    55f4:	f000 fdf6 	bl	61e4 <le_param_req>
    55f8:	b980      	cbnz	r0, 561c <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    55fa:	211e      	movs	r1, #30
    55fc:	4620      	mov	r0, r4
    55fe:	f7ff ff87 	bl	5510 <le_conn_param_neg_reply>
    5602:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    5604:	4628      	mov	r0, r5
    5606:	f001 f8c3 	bl	6790 <bt_conn_unref>
}
    560a:	4620      	mov	r0, r4
    560c:	b003      	add	sp, #12
    560e:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    5610:	2102      	movs	r1, #2
    5612:	4620      	mov	r0, r4
    5614:	f7ff ff7c 	bl	5510 <le_conn_param_neg_reply>
    5618:	4604      	mov	r4, r0
    561a:	e7f6      	b.n	560a <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    561c:	4669      	mov	r1, sp
    561e:	4620      	mov	r0, r4
    5620:	f7ff ff8f 	bl	5542 <le_conn_param_req_reply>
    5624:	4604      	mov	r4, r0
    5626:	e7ed      	b.n	5604 <le_conn_param_req+0x3c>

00005628 <le_conn_param_req>:
{
    5628:	b530      	push	{r4, r5, lr}
    562a:	b083      	sub	sp, #12
    562c:	4604      	mov	r4, r0
    562e:	460d      	mov	r5, r1
    5630:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5632:	4b14      	ldr	r3, [pc, #80]	; (5684 <le_conn_param_req+0x5c>)
    5634:	e9d3 2300 	ldrd	r2, r3, [r3]
    5638:	2200      	movs	r2, #0
    563a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    563e:	4313      	orrs	r3, r2
    5640:	d007      	beq.n	5652 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    5642:	4b11      	ldr	r3, [pc, #68]	; (5688 <le_conn_param_req+0x60>)
    5644:	e9d3 2300 	ldrd	r2, r3, [r3]
    5648:	f002 0220 	and.w	r2, r2, #32
    564c:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    564e:	4313      	orrs	r3, r2
    5650:	d109      	bne.n	5666 <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    5652:	2300      	movs	r3, #0
    5654:	9301      	str	r3, [sp, #4]
    5656:	9300      	str	r3, [sp, #0]
    5658:	221a      	movs	r2, #26
    565a:	2102      	movs	r1, #2
    565c:	4628      	mov	r0, r5
    565e:	f012 f8cb 	bl	177f8 <ll_conn_update>
}
    5662:	b003      	add	sp, #12
    5664:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    5666:	220a      	movs	r2, #10
    5668:	2106      	movs	r1, #6
    566a:	f007 f959 	bl	c920 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    566e:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    5670:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    5672:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    5674:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    5676:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    5678:	8923      	ldrh	r3, [r4, #8]
    567a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    567c:	8963      	ldrh	r3, [r4, #10]
    567e:	8103      	strh	r3, [r0, #8]
    5680:	e7ef      	b.n	5662 <le_conn_param_req+0x3a>
    5682:	bf00      	nop
    5684:	2000bb00 	.word	0x2000bb00
    5688:	2000bb08 	.word	0x2000bb08

0000568c <le_ltk_request>:
{
    568c:	b5f0      	push	{r4, r5, r6, r7, lr}
    568e:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    5690:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5692:	8820      	ldrh	r0, [r4, #0]
    5694:	f000 fff8 	bl	6688 <bt_conn_lookup_handle>
	if (!conn) {
    5698:	2800      	cmp	r0, #0
    569a:	d040      	beq.n	571e <le_ltk_request+0x92>
    569c:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    569e:	f8d4 2002 	ldr.w	r2, [r4, #2]
    56a2:	f8d4 3006 	ldr.w	r3, [r4, #6]
    56a6:	4313      	orrs	r3, r2
    56a8:	d102      	bne.n	56b0 <le_ltk_request+0x24>
    56aa:	8963      	ldrh	r3, [r4, #10]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d038      	beq.n	5722 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    56b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    56b2:	2b00      	cmp	r3, #0
    56b4:	d053      	beq.n	575e <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    56b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    56b8:	b16b      	cbz	r3, 56d6 <le_ltk_request+0x4a>
    56ba:	899a      	ldrh	r2, [r3, #12]
    56bc:	f012 0f20 	tst.w	r2, #32
    56c0:	d009      	beq.n	56d6 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    56c2:	f8d4 0002 	ldr.w	r0, [r4, #2]
    56c6:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    56ca:	ea50 0201 	orrs.w	r2, r0, r1
    56ce:	d102      	bne.n	56d6 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    56d0:	8962      	ldrh	r2, [r4, #10]
    56d2:	2a00      	cmp	r2, #0
    56d4:	d052      	beq.n	577c <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    56d6:	b16b      	cbz	r3, 56f4 <le_ltk_request+0x68>
    56d8:	899a      	ldrh	r2, [r3, #12]
    56da:	f012 0f01 	tst.w	r2, #1
    56de:	d009      	beq.n	56f4 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    56e0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    56e4:	f8d4 6002 	ldr.w	r6, [r4, #2]
    56e8:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    56ec:	42b9      	cmp	r1, r7
    56ee:	bf08      	it	eq
    56f0:	42b0      	cmpeq	r0, r6
    56f2:	d06a      	beq.n	57ca <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    56f4:	2102      	movs	r1, #2
    56f6:	f242 001b 	movw	r0, #8219	; 0x201b
    56fa:	f7fe fd11 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    56fe:	4606      	mov	r6, r0
    5700:	b150      	cbz	r0, 5718 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    5702:	2102      	movs	r1, #2
    5704:	3008      	adds	r0, #8
    5706:	f014 fd65 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = evt->handle;
    570a:	8823      	ldrh	r3, [r4, #0]
    570c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    570e:	4631      	mov	r1, r6
    5710:	f242 001b 	movw	r0, #8219	; 0x201b
    5714:	f7ff fa62 	bl	4bdc <bt_hci_cmd_send>
	bt_conn_unref(conn);
    5718:	4628      	mov	r0, r5
    571a:	f001 f839 	bl	6790 <bt_conn_unref>
}
    571e:	b005      	add	sp, #20
    5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    5722:	4669      	mov	r1, sp
    5724:	f006 ff14 	bl	c550 <bt_smp_get_tk>
    5728:	2800      	cmp	r0, #0
    572a:	d0c1      	beq.n	56b0 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    572c:	2112      	movs	r1, #18
    572e:	f242 001a 	movw	r0, #8218	; 0x201a
    5732:	f7fe fcf5 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    5736:	4606      	mov	r6, r0
    5738:	2800      	cmp	r0, #0
    573a:	d0ed      	beq.n	5718 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    573c:	2112      	movs	r1, #18
    573e:	3008      	adds	r0, #8
    5740:	f014 fd48 	bl	1a1d4 <net_buf_simple_add>
		cp->handle = evt->handle;
    5744:	8823      	ldrh	r3, [r4, #0]
    5746:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    574a:	2210      	movs	r2, #16
    574c:	4669      	mov	r1, sp
    574e:	f7fa fdb7 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5752:	4631      	mov	r1, r6
    5754:	f242 001a 	movw	r0, #8218	; 0x201a
    5758:	f7ff fa40 	bl	4bdc <bt_hci_cmd_send>
		goto done;
    575c:	e7dc      	b.n	5718 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    575e:	f105 0648 	add.w	r6, r5, #72	; 0x48
    5762:	4631      	mov	r1, r6
    5764:	2020      	movs	r0, #32
    5766:	f006 ff59 	bl	c61c <bt_keys_find>
    576a:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    576c:	2800      	cmp	r0, #0
    576e:	d1a2      	bne.n	56b6 <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    5770:	4631      	mov	r1, r6
    5772:	2001      	movs	r0, #1
    5774:	f006 ff52 	bl	c61c <bt_keys_find>
    5778:	6728      	str	r0, [r5, #112]	; 0x70
    577a:	e79c      	b.n	56b6 <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    577c:	2112      	movs	r1, #18
    577e:	f242 001a 	movw	r0, #8218	; 0x201a
    5782:	f7fe fccd 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    5786:	4606      	mov	r6, r0
    5788:	2800      	cmp	r0, #0
    578a:	d0c5      	beq.n	5718 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    578c:	2112      	movs	r1, #18
    578e:	3008      	adds	r0, #8
    5790:	f014 fd20 	bl	1a1d4 <net_buf_simple_add>
		cp->handle = evt->handle;
    5794:	8823      	ldrh	r3, [r4, #0]
    5796:	4604      	mov	r4, r0
    5798:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    579c:	6f29      	ldr	r1, [r5, #112]	; 0x70
    579e:	79ca      	ldrb	r2, [r1, #7]
    57a0:	311a      	adds	r1, #26
    57a2:	4620      	mov	r0, r4
    57a4:	f7fa fd8c 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    57a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    57aa:	79d8      	ldrb	r0, [r3, #7]
    57ac:	280f      	cmp	r0, #15
    57ae:	d905      	bls.n	57bc <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    57b0:	4631      	mov	r1, r6
    57b2:	f242 001a 	movw	r0, #8218	; 0x201a
    57b6:	f7ff fa11 	bl	4bdc <bt_hci_cmd_send>
		goto done;
    57ba:	e7ad      	b.n	5718 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    57bc:	f1c0 0210 	rsb	r2, r0, #16
    57c0:	2100      	movs	r1, #0
    57c2:	4420      	add	r0, r4
    57c4:	f025 f97a 	bl	2aabc <memset>
    57c8:	e7f2      	b.n	57b0 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    57ca:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    57ce:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    57d0:	429a      	cmp	r2, r3
    57d2:	d18f      	bne.n	56f4 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    57d4:	2112      	movs	r1, #18
    57d6:	f242 001a 	movw	r0, #8218	; 0x201a
    57da:	f7fe fca1 	bl	4120 <bt_hci_cmd_create>
		if (!buf) {
    57de:	4606      	mov	r6, r0
    57e0:	2800      	cmp	r0, #0
    57e2:	d099      	beq.n	5718 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    57e4:	2112      	movs	r1, #18
    57e6:	3008      	adds	r0, #8
    57e8:	f014 fcf4 	bl	1a1d4 <net_buf_simple_add>
		cp->handle = evt->handle;
    57ec:	8823      	ldrh	r3, [r4, #0]
    57ee:	4604      	mov	r4, r0
    57f0:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    57f4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    57f6:	79ca      	ldrb	r2, [r1, #7]
    57f8:	317a      	adds	r1, #122	; 0x7a
    57fa:	4620      	mov	r0, r4
    57fc:	f7fa fd60 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    5800:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5802:	79d8      	ldrb	r0, [r3, #7]
    5804:	280f      	cmp	r0, #15
    5806:	d905      	bls.n	5814 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5808:	4631      	mov	r1, r6
    580a:	f242 001a 	movw	r0, #8218	; 0x201a
    580e:	f7ff f9e5 	bl	4bdc <bt_hci_cmd_send>
		goto done;
    5812:	e781      	b.n	5718 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    5814:	f1c0 0210 	rsb	r2, r0, #16
    5818:	2100      	movs	r1, #0
    581a:	4420      	add	r0, r4
    581c:	f025 f94e 	bl	2aabc <memset>
    5820:	e7f2      	b.n	5808 <le_ltk_request+0x17c>
	...

00005824 <le_ltk_request>:
{
    5824:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5826:	4b15      	ldr	r3, [pc, #84]	; (587c <le_ltk_request+0x58>)
    5828:	e9d3 4500 	ldrd	r4, r5, [r3]
    582c:	2400      	movs	r4, #0
    582e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5832:	ea54 0305 	orrs.w	r3, r4, r5
    5836:	d008      	beq.n	584a <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    5838:	4b11      	ldr	r3, [pc, #68]	; (5880 <le_ltk_request+0x5c>)
    583a:	e9d3 4500 	ldrd	r4, r5, [r3]
    583e:	f004 0410 	and.w	r4, r4, #16
    5842:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5844:	ea54 0305 	orrs.w	r3, r4, r5
    5848:	d100      	bne.n	584c <le_ltk_request+0x28>
    584a:	bd70      	pop	{r4, r5, r6, pc}
    584c:	4613      	mov	r3, r2
    584e:	460d      	mov	r5, r1
    5850:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    5852:	220c      	movs	r2, #12
    5854:	2105      	movs	r1, #5
    5856:	4618      	mov	r0, r3
    5858:	f007 f862 	bl	c920 <meta_evt>
    585c:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    585e:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    5862:	2208      	movs	r2, #8
    5864:	1d21      	adds	r1, r4, #4
    5866:	f7fa fd2b 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    586a:	2202      	movs	r2, #2
    586c:	f104 010c 	add.w	r1, r4, #12
    5870:	f106 000a 	add.w	r0, r6, #10
    5874:	f7fa fd24 	bl	2c0 <memcpy>
    5878:	e7e7      	b.n	584a <le_ltk_request+0x26>
    587a:	bf00      	nop
    587c:	2000bb00 	.word	0x2000bb00
    5880:	2000bb08 	.word	0x2000bb08

00005884 <hci_le_meta_event>:
{
    5884:	b538      	push	{r3, r4, r5, lr}
    5886:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5888:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    588c:	2101      	movs	r1, #1
    588e:	f014 fcee 	bl	1a26e <net_buf_simple_pull>
	switch (evt->subevent) {
    5892:	782b      	ldrb	r3, [r5, #0]
    5894:	3b01      	subs	r3, #1
    5896:	2b0b      	cmp	r3, #11
    5898:	d82e      	bhi.n	58f8 <hci_le_meta_event+0x74>
    589a:	e8df f003 	tbb	[pc, r3]
    589e:	2a06      	.short	0x2a06
    58a0:	121e0e0a 	.word	0x121e0e0a
    58a4:	2d262216 	.word	0x2d262216
    58a8:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    58aa:	4620      	mov	r0, r4
    58ac:	f7ff fc14 	bl	50d8 <le_conn_complete>
		break;
    58b0:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    58b2:	4620      	mov	r0, r4
    58b4:	f7fe fb52 	bl	3f5c <le_conn_update_complete>
		break;
    58b8:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    58ba:	4620      	mov	r0, r4
    58bc:	f7ff fd66 	bl	538c <le_remote_feat_complete>
		break;
    58c0:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    58c2:	4620      	mov	r0, r4
    58c4:	f7ff fe80 	bl	55c8 <le_conn_param_req>
		break;
    58c8:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    58ca:	4620      	mov	r0, r4
    58cc:	f7fe fafc 	bl	3ec8 <le_data_len_change>
		break;
    58d0:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    58d2:	4620      	mov	r0, r4
    58d4:	f7ff fdde 	bl	5494 <le_phy_update_complete>
		break;
    58d8:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    58da:	4620      	mov	r0, r4
    58dc:	f7ff fed6 	bl	568c <le_ltk_request>
		break;
    58e0:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    58e2:	4620      	mov	r0, r4
    58e4:	f7fe f9f0 	bl	3cc8 <le_pkey_complete>
		break;
    58e8:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    58ea:	4620      	mov	r0, r4
    58ec:	f7fe f916 	bl	3b1c <le_dhkey_complete>
		break;
    58f0:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    58f2:	4620      	mov	r0, r4
    58f4:	f7ff fb3c 	bl	4f70 <le_adv_report>
    58f8:	bd38      	pop	{r3, r4, r5, pc}

000058fa <hci_event>:
{
    58fa:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    58fc:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    58fe:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    5900:	2b0e      	cmp	r3, #14
    5902:	d316      	bcc.n	5932 <hci_event+0x38>
    5904:	2b0f      	cmp	r3, #15
    5906:	d901      	bls.n	590c <hci_event+0x12>
    5908:	2b13      	cmp	r3, #19
    590a:	d112      	bne.n	5932 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    590c:	2301      	movs	r3, #1
    590e:	b993      	cbnz	r3, 5936 <hci_event+0x3c>
    5910:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5912:	2102      	movs	r1, #2
    5914:	3008      	adds	r0, #8
    5916:	f014 fcaa 	bl	1a26e <net_buf_simple_pull>
	switch (hdr->evt) {
    591a:	782b      	ldrb	r3, [r5, #0]
    591c:	2b08      	cmp	r3, #8
    591e:	d019      	beq.n	5954 <hci_event+0x5a>
    5920:	d90f      	bls.n	5942 <hci_event+0x48>
    5922:	2b30      	cmp	r3, #48	; 0x30
    5924:	d01a      	beq.n	595c <hci_event+0x62>
    5926:	2b3e      	cmp	r3, #62	; 0x3e
    5928:	d110      	bne.n	594c <hci_event+0x52>
		hci_le_meta_event(buf);
    592a:	4620      	mov	r0, r4
    592c:	f7ff ffaa 	bl	5884 <hci_le_meta_event>
		break;
    5930:	e00c      	b.n	594c <hci_event+0x52>
	default:
		return false;
    5932:	2300      	movs	r3, #0
    5934:	e7eb      	b.n	590e <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5936:	4040      	eors	r0, r0
    5938:	f380 8811 	msr	BASEPRI, r0
    593c:	f04f 0004 	mov.w	r0, #4
    5940:	df02      	svc	2
	switch (hdr->evt) {
    5942:	2b05      	cmp	r3, #5
    5944:	d102      	bne.n	594c <hci_event+0x52>
		hci_disconn_complete(buf);
    5946:	4620      	mov	r0, r4
    5948:	f7ff fa54 	bl	4df4 <hci_disconn_complete>
	net_buf_unref(buf);
    594c:	4620      	mov	r0, r4
    594e:	f014 fbf5 	bl	1a13c <net_buf_unref>
    5952:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    5954:	4620      	mov	r0, r4
    5956:	f7fe fa56 	bl	3e06 <hci_encrypt_change>
		break;
    595a:	e7f7      	b.n	594c <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    595c:	4620      	mov	r0, r4
    595e:	f7fe fa7a 	bl	3e56 <hci_encrypt_key_refresh_complete>
		break;
    5962:	e7f3      	b.n	594c <hci_event+0x52>

00005964 <send_cmd>:
{
    5964:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5966:	2100      	movs	r1, #0
    5968:	4820      	ldr	r0, [pc, #128]	; (59ec <send_cmd+0x88>)
    596a:	f014 fbba 	bl	1a0e2 <net_buf_get>
	BT_ASSERT(buf);
    596e:	b1d0      	cbz	r0, 59a6 <send_cmd+0x42>
    5970:	4604      	mov	r4, r0
    5972:	4d1f      	ldr	r5, [pc, #124]	; (59f0 <send_cmd+0x8c>)
    5974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5978:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    597c:	f022 ff3c 	bl	287f8 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5980:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    5984:	b120      	cbz	r0, 5990 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    5986:	f014 fbd9 	bl	1a13c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    598a:	2200      	movs	r2, #0
    598c:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    5990:	4620      	mov	r0, r4
    5992:	f014 fbef 	bl	1a174 <net_buf_ref>
    5996:	4b16      	ldr	r3, [pc, #88]	; (59f0 <send_cmd+0x8c>)
    5998:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    599c:	4620      	mov	r0, r4
    599e:	f7ff f913 	bl	4bc8 <bt_send>
	if (err) {
    59a2:	b930      	cbnz	r0, 59b2 <send_cmd+0x4e>
    59a4:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    59a6:	4040      	eors	r0, r0
    59a8:	f380 8811 	msr	BASEPRI, r0
    59ac:	f04f 0004 	mov.w	r0, #4
    59b0:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    59b2:	4d0f      	ldr	r5, [pc, #60]	; (59f0 <send_cmd+0x8c>)
    59b4:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    59b8:	f022 ff0b 	bl	287d2 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    59bc:	f104 0310 	add.w	r3, r4, #16
    59c0:	89e2      	ldrh	r2, [r4, #14]
    59c2:	4413      	add	r3, r2
    59c4:	3303      	adds	r3, #3
    59c6:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    59ca:	2200      	movs	r2, #0
    59cc:	211f      	movs	r1, #31
    59ce:	8858      	ldrh	r0, [r3, #2]
    59d0:	f7fe fb10 	bl	3ff4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    59d4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    59d8:	f014 fbb0 	bl	1a13c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    59dc:	2300      	movs	r3, #0
    59de:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    59e2:	4620      	mov	r0, r4
    59e4:	f014 fbaa 	bl	1a13c <net_buf_unref>
}
    59e8:	e7dc      	b.n	59a4 <send_cmd+0x40>
    59ea:	bf00      	nop
    59ec:	2000b8e4 	.word	0x2000b8e4
    59f0:	2000b810 	.word	0x2000b810

000059f4 <process_events>:
{
    59f4:	b538      	push	{r3, r4, r5, lr}
    59f6:	4604      	mov	r4, r0
    59f8:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    59fa:	e003      	b.n	5a04 <process_events+0x10>
				send_cmd();
    59fc:	f7ff ffb2 	bl	5964 <send_cmd>
	for (; count; ev++, count--) {
    5a00:	3414      	adds	r4, #20
    5a02:	3d01      	subs	r5, #1
    5a04:	b1a5      	cbz	r5, 5a30 <process_events+0x3c>
		switch (ev->state) {
    5a06:	7b63      	ldrb	r3, [r4, #13]
    5a08:	091b      	lsrs	r3, r3, #4
    5a0a:	2b04      	cmp	r3, #4
    5a0c:	d1f8      	bne.n	5a00 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5a0e:	7b23      	ldrb	r3, [r4, #12]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d0f3      	beq.n	59fc <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    5a14:	2b01      	cmp	r3, #1
    5a16:	d006      	beq.n	5a26 <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5a18:	2b02      	cmp	r3, #2
    5a1a:	d1f1      	bne.n	5a00 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    5a1c:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    5a1e:	382c      	subs	r0, #44	; 0x2c
    5a20:	f001 f9c8 	bl	6db4 <bt_conn_process_tx>
    5a24:	e7ec      	b.n	5a00 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    5a26:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    5a28:	381c      	subs	r0, #28
    5a2a:	f000 fd65 	bl	64f8 <bt_conn_notify_tx>
    5a2e:	e7e7      	b.n	5a00 <process_events+0xc>
}
    5a30:	bd38      	pop	{r3, r4, r5, pc}
	...

00005a34 <hci_tx_thread>:
{
    5a34:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5a36:	4c0f      	ldr	r4, [pc, #60]	; (5a74 <hci_tx_thread+0x40>)
    5a38:	7b63      	ldrb	r3, [r4, #13]
    5a3a:	f36f 1307 	bfc	r3, #4, #4
    5a3e:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    5a40:	f104 0014 	add.w	r0, r4, #20
    5a44:	f000 feca 	bl	67dc <bt_conn_prepare_events>
    5a48:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    5a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a4e:	4629      	mov	r1, r5
    5a50:	4620      	mov	r0, r4
    5a52:	f022 f81d 	bl	27a90 <k_poll>
		BT_ASSERT(err == 0);
    5a56:	b930      	cbnz	r0, 5a66 <hci_tx_thread+0x32>
		process_events(events, ev_count);
    5a58:	4629      	mov	r1, r5
    5a5a:	4806      	ldr	r0, [pc, #24]	; (5a74 <hci_tx_thread+0x40>)
    5a5c:	f7ff ffca 	bl	59f4 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    5a60:	f022 fd5e 	bl	28520 <_impl_k_yield>
    5a64:	e7e7      	b.n	5a36 <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    5a66:	4040      	eors	r0, r0
    5a68:	f380 8811 	msr	BASEPRI, r0
    5a6c:	f04f 0004 	mov.w	r0, #4
    5a70:	df02      	svc	2
    5a72:	bf00      	nop
    5a74:	2000b8f8 	.word	0x2000b8f8

00005a78 <bt_recv>:
{
    5a78:	b510      	push	{r4, lr}
    5a7a:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    5a7c:	7980      	ldrb	r0, [r0, #6]
    5a7e:	f014 fae3 	bl	1a048 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    5a82:	8ac3      	ldrh	r3, [r0, #22]
    5a84:	2b03      	cmp	r3, #3
    5a86:	d910      	bls.n	5aaa <bt_recv+0x32>
    5a88:	f104 0310 	add.w	r3, r4, #16
    5a8c:	89e2      	ldrh	r2, [r4, #14]
    5a8e:	4413      	add	r3, r2
    5a90:	3303      	adds	r3, #3
    5a92:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    5a96:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    5a98:	2b01      	cmp	r3, #1
    5a9a:	d00c      	beq.n	5ab6 <bt_recv+0x3e>
    5a9c:	2b03      	cmp	r3, #3
    5a9e:	d10f      	bne.n	5ac0 <bt_recv+0x48>
		hci_acl(buf);
    5aa0:	4620      	mov	r0, r4
    5aa2:	f7fe f949 	bl	3d38 <hci_acl>
		return 0;
    5aa6:	2000      	movs	r0, #0
    5aa8:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5aaa:	4620      	mov	r0, r4
    5aac:	f014 fb46 	bl	1a13c <net_buf_unref>
		return -EINVAL;
    5ab0:	f06f 0015 	mvn.w	r0, #21
    5ab4:	bd10      	pop	{r4, pc}
		hci_event(buf);
    5ab6:	4620      	mov	r0, r4
    5ab8:	f7ff ff1f 	bl	58fa <hci_event>
		return 0;
    5abc:	2000      	movs	r0, #0
    5abe:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5ac0:	4620      	mov	r0, r4
    5ac2:	f014 fb3b 	bl	1a13c <net_buf_unref>
		return -EINVAL;
    5ac6:	f06f 0015 	mvn.w	r0, #21
}
    5aca:	bd10      	pop	{r4, pc}

00005acc <bt_recv_prio>:
{
    5acc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5ace:	6885      	ldr	r5, [r0, #8]
    5ad0:	f100 0310 	add.w	r3, r0, #16
    5ad4:	89c2      	ldrh	r2, [r0, #14]
    5ad6:	4413      	add	r3, r2
    5ad8:	3303      	adds	r3, #3
    5ada:	f023 0303 	bic.w	r3, r3, #3
    5ade:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5ae0:	2b01      	cmp	r3, #1
    5ae2:	d120      	bne.n	5b26 <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5ae4:	8983      	ldrh	r3, [r0, #12]
    5ae6:	2b01      	cmp	r3, #1
    5ae8:	d923      	bls.n	5b32 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5aea:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    5aec:	2b0e      	cmp	r3, #14
    5aee:	d326      	bcc.n	5b3e <bt_recv_prio+0x72>
    5af0:	2b0f      	cmp	r3, #15
    5af2:	d901      	bls.n	5af8 <bt_recv_prio+0x2c>
    5af4:	2b13      	cmp	r3, #19
    5af6:	d122      	bne.n	5b3e <bt_recv_prio+0x72>
		return true;
    5af8:	2301      	movs	r3, #1
    5afa:	b313      	cbz	r3, 5b42 <bt_recv_prio+0x76>
    5afc:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5afe:	2102      	movs	r1, #2
    5b00:	3008      	adds	r0, #8
    5b02:	f014 fbb4 	bl	1a26e <net_buf_simple_pull>
	switch (hdr->evt) {
    5b06:	782b      	ldrb	r3, [r5, #0]
    5b08:	2b0f      	cmp	r3, #15
    5b0a:	d028      	beq.n	5b5e <bt_recv_prio+0x92>
    5b0c:	2b13      	cmp	r3, #19
    5b0e:	d02a      	beq.n	5b66 <bt_recv_prio+0x9a>
    5b10:	2b0e      	cmp	r3, #14
    5b12:	d01c      	beq.n	5b4e <bt_recv_prio+0x82>
		net_buf_unref(buf);
    5b14:	4620      	mov	r0, r4
    5b16:	f014 fb11 	bl	1a13c <net_buf_unref>
		BT_ASSERT(0);
    5b1a:	4040      	eors	r0, r0
    5b1c:	f380 8811 	msr	BASEPRI, r0
    5b20:	f04f 0004 	mov.w	r0, #4
    5b24:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5b26:	4040      	eors	r0, r0
    5b28:	f380 8811 	msr	BASEPRI, r0
    5b2c:	f04f 0004 	mov.w	r0, #4
    5b30:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5b32:	4040      	eors	r0, r0
    5b34:	f380 8811 	msr	BASEPRI, r0
    5b38:	f04f 0004 	mov.w	r0, #4
    5b3c:	df02      	svc	2
		return false;
    5b3e:	2300      	movs	r3, #0
    5b40:	e7db      	b.n	5afa <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5b42:	4040      	eors	r0, r0
    5b44:	f380 8811 	msr	BASEPRI, r0
    5b48:	f04f 0004 	mov.w	r0, #4
    5b4c:	df02      	svc	2
		hci_cmd_complete(buf);
    5b4e:	4620      	mov	r0, r4
    5b50:	f7fe fa70 	bl	4034 <hci_cmd_complete>
	net_buf_unref(buf);
    5b54:	4620      	mov	r0, r4
    5b56:	f014 faf1 	bl	1a13c <net_buf_unref>
}
    5b5a:	2000      	movs	r0, #0
    5b5c:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    5b5e:	4620      	mov	r0, r4
    5b60:	f7fe fa80 	bl	4064 <hci_cmd_status>
		break;
    5b64:	e7f6      	b.n	5b54 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    5b66:	4620      	mov	r0, r4
    5b68:	f7fe fa92 	bl	4090 <hci_num_completed_packets>
		break;
    5b6c:	e7f2      	b.n	5b54 <bt_recv_prio+0x88>
	...

00005b70 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5b70:	4b0a      	ldr	r3, [pc, #40]	; (5b9c <bt_hci_driver_register+0x2c>)
    5b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5b76:	b943      	cbnz	r3, 5b8a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    5b78:	6883      	ldr	r3, [r0, #8]
    5b7a:	b14b      	cbz	r3, 5b90 <bt_hci_driver_register+0x20>
    5b7c:	68c3      	ldr	r3, [r0, #12]
    5b7e:	b153      	cbz	r3, 5b96 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    5b80:	4b06      	ldr	r3, [pc, #24]	; (5b9c <bt_hci_driver_register+0x2c>)
    5b82:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    5b86:	2000      	movs	r0, #0
    5b88:	4770      	bx	lr
		return -EALREADY;
    5b8a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5b8e:	4770      	bx	lr
		return -EINVAL;
    5b90:	f06f 0015 	mvn.w	r0, #21
    5b94:	4770      	bx	lr
    5b96:	f06f 0015 	mvn.w	r0, #21
}
    5b9a:	4770      	bx	lr
    5b9c:	2000b810 	.word	0x2000b810

00005ba0 <bt_enable>:
{
    5ba0:	b530      	push	{r4, r5, lr}
    5ba2:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    5ba4:	4b29      	ldr	r3, [pc, #164]	; (5c4c <bt_enable+0xac>)
    5ba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5baa:	2b00      	cmp	r3, #0
    5bac:	d047      	beq.n	5c3e <bt_enable+0x9e>
    5bae:	4b28      	ldr	r3, [pc, #160]	; (5c50 <bt_enable+0xb0>)
    5bb0:	f3bf 8f5b 	dmb	ish
    5bb4:	e853 2f00 	ldrex	r2, [r3]
    5bb8:	f042 0101 	orr.w	r1, r2, #1
    5bbc:	e843 1400 	strex	r4, r1, [r3]
    5bc0:	2c00      	cmp	r4, #0
    5bc2:	d1f7      	bne.n	5bb4 <bt_enable+0x14>
    5bc4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5bc8:	f012 0f01 	tst.w	r2, #1
    5bcc:	d13a      	bne.n	5c44 <bt_enable+0xa4>
    5bce:	4604      	mov	r4, r0
	ready_cb = cb;
    5bd0:	4b20      	ldr	r3, [pc, #128]	; (5c54 <bt_enable+0xb4>)
    5bd2:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    5bd4:	2300      	movs	r3, #0
    5bd6:	9305      	str	r3, [sp, #20]
    5bd8:	9304      	str	r3, [sp, #16]
    5bda:	f06f 0208 	mvn.w	r2, #8
    5bde:	9203      	str	r2, [sp, #12]
    5be0:	9302      	str	r3, [sp, #8]
    5be2:	9301      	str	r3, [sp, #4]
    5be4:	9300      	str	r3, [sp, #0]
    5be6:	4b1c      	ldr	r3, [pc, #112]	; (5c58 <bt_enable+0xb8>)
    5be8:	f44f 7220 	mov.w	r2, #640	; 0x280
    5bec:	491b      	ldr	r1, [pc, #108]	; (5c5c <bt_enable+0xbc>)
    5bee:	481c      	ldr	r0, [pc, #112]	; (5c60 <bt_enable+0xc0>)
    5bf0:	f023 f86e 	bl	28cd0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    5bf4:	4b15      	ldr	r3, [pc, #84]	; (5c4c <bt_enable+0xac>)
    5bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5bfa:	689b      	ldr	r3, [r3, #8]
    5bfc:	4798      	blx	r3
	if (err) {
    5bfe:	4605      	mov	r5, r0
    5c00:	b980      	cbnz	r0, 5c24 <bt_enable+0x84>
	if (!cb) {
    5c02:	b194      	cbz	r4, 5c2a <bt_enable+0x8a>
    5c04:	4b17      	ldr	r3, [pc, #92]	; (5c64 <bt_enable+0xc4>)
    5c06:	f3bf 8f5b 	dmb	ish
    5c0a:	e853 2f00 	ldrex	r2, [r3]
    5c0e:	f042 0101 	orr.w	r1, r2, #1
    5c12:	e843 1000 	strex	r0, r1, [r3]
    5c16:	2800      	cmp	r0, #0
    5c18:	d1f7      	bne.n	5c0a <bt_enable+0x6a>
    5c1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5c1e:	f012 0f01 	tst.w	r2, #1
    5c22:	d006      	beq.n	5c32 <bt_enable+0x92>
}
    5c24:	4628      	mov	r0, r5
    5c26:	b007      	add	sp, #28
    5c28:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    5c2a:	f7ff f8bb 	bl	4da4 <bt_init>
    5c2e:	4605      	mov	r5, r0
    5c30:	e7f8      	b.n	5c24 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    5c32:	f1a3 0108 	sub.w	r1, r3, #8
    5c36:	480c      	ldr	r0, [pc, #48]	; (5c68 <bt_enable+0xc8>)
    5c38:	f022 fa34 	bl	280a4 <k_queue_append>
    5c3c:	e7f2      	b.n	5c24 <bt_enable+0x84>
		return -ENODEV;
    5c3e:	f06f 0512 	mvn.w	r5, #18
    5c42:	e7ef      	b.n	5c24 <bt_enable+0x84>
		return -EALREADY;
    5c44:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5c48:	e7ec      	b.n	5c24 <bt_enable+0x84>
    5c4a:	bf00      	nop
    5c4c:	2000b810 	.word	0x2000b810
    5c50:	2000b880 	.word	0x2000b880
    5c54:	200002bc 	.word	0x200002bc
    5c58:	00005a35 	.word	0x00005a35
    5c5c:	20003bb0 	.word	0x20003bb0
    5c60:	200002c4 	.word	0x200002c4
    5c64:	2000b87c 	.word	0x2000b87c
    5c68:	20002b10 	.word	0x20002b10

00005c6c <bt_addr_le_is_bonded>:
{
    5c6c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5c6e:	f006 fd51 	bl	c714 <bt_keys_find_addr>
		return keys && keys->keys;
    5c72:	b118      	cbz	r0, 5c7c <bt_addr_le_is_bonded+0x10>
    5c74:	8983      	ldrh	r3, [r0, #12]
    5c76:	b91b      	cbnz	r3, 5c80 <bt_addr_le_is_bonded+0x14>
    5c78:	2000      	movs	r0, #0
    5c7a:	bd08      	pop	{r3, pc}
    5c7c:	2000      	movs	r0, #0
    5c7e:	bd08      	pop	{r3, pc}
    5c80:	2001      	movs	r0, #1
}
    5c82:	bd08      	pop	{r3, pc}

00005c84 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c88:	4605      	mov	r5, r0
    5c8a:	460c      	mov	r4, r1
    5c8c:	4617      	mov	r7, r2
    5c8e:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    5c90:	f7fd ff88 	bl	3ba4 <valid_adv_param>
    5c94:	2800      	cmp	r0, #0
    5c96:	f000 808d 	beq.w	5db4 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c9a:	f3bf 8f5b 	dmb	ish
    5c9e:	4b4b      	ldr	r3, [pc, #300]	; (5dcc <bt_le_adv_start+0x148>)
    5ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5ca2:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5ca6:	f013 0f20 	tst.w	r3, #32
    5caa:	f040 8086 	bne.w	5dba <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5cae:	463a      	mov	r2, r7
    5cb0:	4621      	mov	r1, r4
    5cb2:	f242 0008 	movw	r0, #8200	; 0x2008
    5cb6:	f7fe fe52 	bl	495e <set_ad>
	if (err) {
    5cba:	4604      	mov	r4, r0
    5cbc:	2800      	cmp	r0, #0
    5cbe:	d13b      	bne.n	5d38 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5cc0:	2e00      	cmp	r6, #0
    5cc2:	d03c      	beq.n	5d3e <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5cc4:	9a06      	ldr	r2, [sp, #24]
    5cc6:	4631      	mov	r1, r6
    5cc8:	f242 0009 	movw	r0, #8201	; 0x2009
    5ccc:	f7fe fe47 	bl	495e <set_ad>
		if (err) {
    5cd0:	4604      	mov	r4, r0
    5cd2:	bb88      	cbnz	r0, 5d38 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    5cd4:	210f      	movs	r1, #15
    5cd6:	f242 0006 	movw	r0, #8198	; 0x2006
    5cda:	f7fe fa21 	bl	4120 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    5cde:	4680      	mov	r8, r0
    5ce0:	2800      	cmp	r0, #0
    5ce2:	d06d      	beq.n	5dc0 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    5ce4:	210f      	movs	r1, #15
    5ce6:	3008      	adds	r0, #8
    5ce8:	f014 fa74 	bl	1a1d4 <net_buf_simple_add>
    5cec:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    5cee:	220f      	movs	r2, #15
    5cf0:	2100      	movs	r1, #0
    5cf2:	f024 fee3 	bl	2aabc <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    5cf6:	886b      	ldrh	r3, [r5, #2]
    5cf8:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    5cfa:	88ab      	ldrh	r3, [r5, #4]
    5cfc:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    5cfe:	2307      	movs	r3, #7
    5d00:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5d02:	782b      	ldrb	r3, [r5, #0]
    5d04:	f013 0f01 	tst.w	r3, #1
    5d08:	d11e      	bne.n	5d48 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    5d0a:	68a8      	ldr	r0, [r5, #8]
    5d0c:	b378      	cbz	r0, 5d6e <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5d0e:	7943      	ldrb	r3, [r0, #5]
    5d10:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5d14:	d157      	bne.n	5dc6 <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    5d16:	f7fe fd0b 	bl	4730 <set_random_address>
    5d1a:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    5d1c:	bb5c      	cbnz	r4, 5d76 <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    5d1e:	2301      	movs	r3, #1
    5d20:	717b      	strb	r3, [r7, #5]

		if (sd) {
    5d22:	b366      	cbz	r6, 5d7e <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    5d24:	2302      	movs	r3, #2
    5d26:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5d28:	2200      	movs	r2, #0
    5d2a:	4641      	mov	r1, r8
    5d2c:	f242 0006 	movw	r0, #8198	; 0x2006
    5d30:	f7fe fa22 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    5d34:	4604      	mov	r4, r0
    5d36:	b328      	cbz	r0, 5d84 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    5d38:	4620      	mov	r0, r4
    5d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5d3e:	782b      	ldrb	r3, [r5, #0]
    5d40:	f013 0f01 	tst.w	r3, #1
    5d44:	d0c6      	beq.n	5cd4 <bt_le_adv_start+0x50>
    5d46:	e7bd      	b.n	5cc4 <bt_le_adv_start+0x40>
    5d48:	f3bf 8f5b 	dmb	ish
    5d4c:	4b1f      	ldr	r3, [pc, #124]	; (5dcc <bt_le_adv_start+0x148>)
    5d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5d50:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    5d54:	f013 0f04 	tst.w	r3, #4
    5d58:	d105      	bne.n	5d66 <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    5d5a:	4b1c      	ldr	r3, [pc, #112]	; (5dcc <bt_le_adv_start+0x148>)
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    5d60:	2300      	movs	r3, #0
    5d62:	713b      	strb	r3, [r7, #4]
    5d64:	e7e0      	b.n	5d28 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    5d66:	481a      	ldr	r0, [pc, #104]	; (5dd0 <bt_le_adv_start+0x14c>)
    5d68:	f7fe fce2 	bl	4730 <set_random_address>
    5d6c:	e7f5      	b.n	5d5a <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    5d6e:	f7fe fd0f 	bl	4790 <le_set_private_addr>
    5d72:	4604      	mov	r4, r0
    5d74:	e7d2      	b.n	5d1c <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    5d76:	4640      	mov	r0, r8
    5d78:	f014 f9e0 	bl	1a13c <net_buf_unref>
			return err;
    5d7c:	e7dc      	b.n	5d38 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    5d7e:	2303      	movs	r3, #3
    5d80:	713b      	strb	r3, [r7, #4]
    5d82:	e7d1      	b.n	5d28 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    5d84:	2001      	movs	r0, #1
    5d86:	f7fe fd71 	bl	486c <set_advertise_enable>
	if (err) {
    5d8a:	4604      	mov	r4, r0
    5d8c:	2800      	cmp	r0, #0
    5d8e:	d1d3      	bne.n	5d38 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5d90:	782b      	ldrb	r3, [r5, #0]
    5d92:	f013 0f02 	tst.w	r3, #2
    5d96:	d1cf      	bne.n	5d38 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d98:	4b0e      	ldr	r3, [pc, #56]	; (5dd4 <bt_le_adv_start+0x150>)
    5d9a:	f3bf 8f5b 	dmb	ish
    5d9e:	e853 2f00 	ldrex	r2, [r3]
    5da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5da6:	e843 2100 	strex	r1, r2, [r3]
    5daa:	2900      	cmp	r1, #0
    5dac:	d1f7      	bne.n	5d9e <bt_le_adv_start+0x11a>
    5dae:	f3bf 8f5b 	dmb	ish
    5db2:	e7c1      	b.n	5d38 <bt_le_adv_start+0xb4>
		return -EINVAL;
    5db4:	f06f 0415 	mvn.w	r4, #21
    5db8:	e7be      	b.n	5d38 <bt_le_adv_start+0xb4>
		return -EALREADY;
    5dba:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5dbe:	e7bb      	b.n	5d38 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    5dc0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5dc4:	e7b8      	b.n	5d38 <bt_le_adv_start+0xb4>
				return -EINVAL;
    5dc6:	f06f 0415 	mvn.w	r4, #21
    5dca:	e7b5      	b.n	5d38 <bt_le_adv_start+0xb4>
    5dcc:	2000b810 	.word	0x2000b810
    5dd0:	2000b811 	.word	0x2000b811
    5dd4:	2000b880 	.word	0x2000b880

00005dd8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5dd8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5dda:	4b16      	ldr	r3, [pc, #88]	; (5e34 <bt_le_adv_stop+0x5c>)
    5ddc:	f103 0270 	add.w	r2, r3, #112	; 0x70
    5de0:	f3bf 8f5b 	dmb	ish
    5de4:	e852 1f00 	ldrex	r1, [r2]
    5de8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    5dec:	e842 1000 	strex	r0, r1, [r2]
    5df0:	2800      	cmp	r0, #0
    5df2:	d1f7      	bne.n	5de4 <bt_le_adv_stop+0xc>
    5df4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5df8:	f3bf 8f5b 	dmb	ish
    5dfc:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    5dfe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5e02:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5e06:	b90c      	cbnz	r4, 5e0c <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    5e08:	4620      	mov	r0, r4
    5e0a:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    5e0c:	2000      	movs	r0, #0
    5e0e:	f7fe fd2d 	bl	486c <set_advertise_enable>
	if (err) {
    5e12:	4604      	mov	r4, r0
    5e14:	2800      	cmp	r0, #0
    5e16:	d1f7      	bne.n	5e08 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e18:	f3bf 8f5b 	dmb	ish
    5e1c:	4b05      	ldr	r3, [pc, #20]	; (5e34 <bt_le_adv_stop+0x5c>)
    5e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5e20:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5e24:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    5e28:	b90b      	cbnz	r3, 5e2e <bt_le_adv_stop+0x56>
	return 0;
    5e2a:	461c      	mov	r4, r3
    5e2c:	e7ec      	b.n	5e08 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    5e2e:	f7fe fcaf 	bl	4790 <le_set_private_addr>
    5e32:	e7e9      	b.n	5e08 <bt_le_adv_stop+0x30>
    5e34:	2000b810 	.word	0x2000b810

00005e38 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    5e38:	b538      	push	{r3, r4, r5, lr}
    5e3a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5e3c:	4808      	ldr	r0, [pc, #32]	; (5e60 <bt_buf_get_rx+0x28>)
    5e3e:	f014 f90f 	bl	1a060 <net_buf_alloc>
#endif

	if (buf) {
    5e42:	4604      	mov	r4, r0
    5e44:	b150      	cbz	r0, 5e5c <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5e46:	2100      	movs	r1, #0
    5e48:	f014 f965 	bl	1a116 <net_buf_reserve>
    5e4c:	f104 0310 	add.w	r3, r4, #16
    5e50:	89e2      	ldrh	r2, [r4, #14]
    5e52:	4413      	add	r3, r2
    5e54:	3303      	adds	r3, #3
    5e56:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    5e5a:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5e5c:	4620      	mov	r0, r4
    5e5e:	bd38      	pop	{r3, r4, r5, pc}
    5e60:	2000d0cc 	.word	0x2000d0cc

00005e64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5e64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e66:	f04f 0320 	mov.w	r3, #32
    5e6a:	f3ef 8211 	mrs	r2, BASEPRI
    5e6e:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5e72:	4b0f      	ldr	r3, [pc, #60]	; (5eb0 <bt_buf_get_cmd_complete+0x4c>)
    5e74:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5e78:	2500      	movs	r5, #0
    5e7a:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5e7e:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5e82:	b17c      	cbz	r4, 5ea4 <bt_buf_get_cmd_complete+0x40>
    5e84:	f104 0310 	add.w	r3, r4, #16
    5e88:	89e2      	ldrh	r2, [r4, #14]
    5e8a:	4413      	add	r3, r2
    5e8c:	3303      	adds	r3, #3
    5e8e:	f023 0303 	bic.w	r3, r3, #3
    5e92:	2201      	movs	r2, #1
    5e94:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    5e96:	4629      	mov	r1, r5
    5e98:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5e9a:	4620      	mov	r0, r4
    5e9c:	f014 f93b 	bl	1a116 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5ea0:	4620      	mov	r0, r4
    5ea2:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5ea4:	4601      	mov	r1, r0
    5ea6:	2001      	movs	r0, #1
    5ea8:	f7ff ffc6 	bl	5e38 <bt_buf_get_rx>
    5eac:	4604      	mov	r4, r0
    5eae:	e7f7      	b.n	5ea0 <bt_buf_get_cmd_complete+0x3c>
    5eb0:	2000b810 	.word	0x2000b810

00005eb4 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5eb4:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5eb6:	4b29      	ldr	r3, [pc, #164]	; (5f5c <bt_pub_key_gen+0xa8>)
    5eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    5ebc:	f003 0306 	and.w	r3, r3, #6
    5ec0:	2b06      	cmp	r3, #6
    5ec2:	d148      	bne.n	5f56 <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    5ec4:	4b26      	ldr	r3, [pc, #152]	; (5f60 <bt_pub_key_gen+0xac>)
    5ec6:	681a      	ldr	r2, [r3, #0]
    5ec8:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    5eca:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ecc:	4b25      	ldr	r3, [pc, #148]	; (5f64 <bt_pub_key_gen+0xb0>)
    5ece:	f3bf 8f5b 	dmb	ish
    5ed2:	e853 2f00 	ldrex	r2, [r3]
    5ed6:	f042 0110 	orr.w	r1, r2, #16
    5eda:	e843 1400 	strex	r4, r1, [r3]
    5ede:	2c00      	cmp	r4, #0
    5ee0:	d1f7      	bne.n	5ed2 <bt_pub_key_gen+0x1e>
    5ee2:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5ee6:	f012 0f10 	tst.w	r2, #16
    5eea:	d002      	beq.n	5ef2 <bt_pub_key_gen+0x3e>
		return 0;
    5eec:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    5eee:	4630      	mov	r0, r6
    5ef0:	bd70      	pop	{r4, r5, r6, pc}
    5ef2:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ef4:	f3bf 8f5b 	dmb	ish
    5ef8:	e853 2f00 	ldrex	r2, [r3]
    5efc:	f022 0208 	bic.w	r2, r2, #8
    5f00:	e843 2100 	strex	r1, r2, [r3]
    5f04:	2900      	cmp	r1, #0
    5f06:	d1f7      	bne.n	5ef8 <bt_pub_key_gen+0x44>
    5f08:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5f0c:	2200      	movs	r2, #0
    5f0e:	4611      	mov	r1, r2
    5f10:	f242 0025 	movw	r0, #8229	; 0x2025
    5f14:	f7fe f930 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    5f18:	4606      	mov	r6, r0
    5f1a:	b910      	cbnz	r0, 5f22 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5f1c:	4b10      	ldr	r3, [pc, #64]	; (5f60 <bt_pub_key_gen+0xac>)
    5f1e:	681c      	ldr	r4, [r3, #0]
    5f20:	e011      	b.n	5f46 <bt_pub_key_gen+0x92>
    5f22:	4b10      	ldr	r3, [pc, #64]	; (5f64 <bt_pub_key_gen+0xb0>)
    5f24:	f3bf 8f5b 	dmb	ish
    5f28:	e853 2f00 	ldrex	r2, [r3]
    5f2c:	f022 0210 	bic.w	r2, r2, #16
    5f30:	e843 2100 	strex	r1, r2, [r3]
    5f34:	2900      	cmp	r1, #0
    5f36:	d1f7      	bne.n	5f28 <bt_pub_key_gen+0x74>
    5f38:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    5f3c:	2200      	movs	r2, #0
    5f3e:	4b08      	ldr	r3, [pc, #32]	; (5f60 <bt_pub_key_gen+0xac>)
    5f40:	601a      	str	r2, [r3, #0]
		return err;
    5f42:	e7d4      	b.n	5eee <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5f44:	6864      	ldr	r4, [r4, #4]
    5f46:	2c00      	cmp	r4, #0
    5f48:	d0d1      	beq.n	5eee <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    5f4a:	42ac      	cmp	r4, r5
    5f4c:	d0fa      	beq.n	5f44 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    5f4e:	6823      	ldr	r3, [r4, #0]
    5f50:	2000      	movs	r0, #0
    5f52:	4798      	blx	r3
    5f54:	e7f6      	b.n	5f44 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    5f56:	f06f 0685 	mvn.w	r6, #133	; 0x85
    5f5a:	e7c8      	b.n	5eee <bt_pub_key_gen+0x3a>
    5f5c:	2000b810 	.word	0x2000b810
    5f60:	200002b8 	.word	0x200002b8
    5f64:	2000b880 	.word	0x2000b880

00005f68 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5f68:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5f6a:	4b21      	ldr	r3, [pc, #132]	; (5ff0 <bt_dh_key_gen+0x88>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	bbab      	cbnz	r3, 5fdc <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f70:	f3bf 8f5b 	dmb	ish
    5f74:	4b1f      	ldr	r3, [pc, #124]	; (5ff4 <bt_dh_key_gen+0x8c>)
    5f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f78:	f3bf 8f5b 	dmb	ish
    5f7c:	f013 0f10 	tst.w	r3, #16
    5f80:	d130      	bne.n	5fe4 <bt_dh_key_gen+0x7c>
    5f82:	f3bf 8f5b 	dmb	ish
    5f86:	4b1b      	ldr	r3, [pc, #108]	; (5ff4 <bt_dh_key_gen+0x8c>)
    5f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f8a:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5f8e:	f013 0f08 	tst.w	r3, #8
    5f92:	d02a      	beq.n	5fea <bt_dh_key_gen+0x82>
    5f94:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    5f96:	4b16      	ldr	r3, [pc, #88]	; (5ff0 <bt_dh_key_gen+0x88>)
    5f98:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5f9a:	2140      	movs	r1, #64	; 0x40
    5f9c:	f242 0026 	movw	r0, #8230	; 0x2026
    5fa0:	f7fe f8be 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    5fa4:	4605      	mov	r5, r0
    5fa6:	b198      	cbz	r0, 5fd0 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    5fa8:	2140      	movs	r1, #64	; 0x40
    5faa:	3008      	adds	r0, #8
    5fac:	f014 f912 	bl	1a1d4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5fb0:	2240      	movs	r2, #64	; 0x40
    5fb2:	4621      	mov	r1, r4
    5fb4:	f7fa f984 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5fb8:	2200      	movs	r2, #0
    5fba:	4629      	mov	r1, r5
    5fbc:	f242 0026 	movw	r0, #8230	; 0x2026
    5fc0:	f7fe f8da 	bl	4178 <bt_hci_cmd_send_sync>
	if (err) {
    5fc4:	4603      	mov	r3, r0
    5fc6:	b158      	cbz	r0, 5fe0 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5fc8:	2100      	movs	r1, #0
    5fca:	4a09      	ldr	r2, [pc, #36]	; (5ff0 <bt_dh_key_gen+0x88>)
    5fcc:	6011      	str	r1, [r2, #0]
		return err;
    5fce:	e007      	b.n	5fe0 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5fd0:	2200      	movs	r2, #0
    5fd2:	4b07      	ldr	r3, [pc, #28]	; (5ff0 <bt_dh_key_gen+0x88>)
    5fd4:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    5fd6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5fda:	e001      	b.n	5fe0 <bt_dh_key_gen+0x78>
		return -EBUSY;
    5fdc:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    5fe0:	4618      	mov	r0, r3
    5fe2:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    5fe4:	f06f 030f 	mvn.w	r3, #15
    5fe8:	e7fa      	b.n	5fe0 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    5fea:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    5fee:	e7f7      	b.n	5fe0 <bt_dh_key_gen+0x78>
    5ff0:	20000274 	.word	0x20000274
    5ff4:	2000b810 	.word	0x2000b810

00005ff8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5ff8:	b538      	push	{r3, r4, r5, lr}
    5ffa:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5ffc:	4b06      	ldr	r3, [pc, #24]	; (6018 <notify_connected+0x20>)
    5ffe:	681c      	ldr	r4, [r3, #0]
    6000:	e000      	b.n	6004 <notify_connected+0xc>
    6002:	69a4      	ldr	r4, [r4, #24]
    6004:	b134      	cbz	r4, 6014 <notify_connected+0x1c>
		if (cb->connected) {
    6006:	6823      	ldr	r3, [r4, #0]
    6008:	2b00      	cmp	r3, #0
    600a:	d0fa      	beq.n	6002 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    600c:	7ae9      	ldrb	r1, [r5, #11]
    600e:	4628      	mov	r0, r5
    6010:	4798      	blx	r3
    6012:	e7f6      	b.n	6002 <notify_connected+0xa>
		}
	}
}
    6014:	bd38      	pop	{r3, r4, r5, pc}
    6016:	bf00      	nop
    6018:	20000394 	.word	0x20000394

0000601c <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    601c:	b538      	push	{r3, r4, r5, lr}
    601e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6020:	4b06      	ldr	r3, [pc, #24]	; (603c <notify_disconnected+0x20>)
    6022:	681c      	ldr	r4, [r3, #0]
    6024:	e000      	b.n	6028 <notify_disconnected+0xc>
    6026:	69a4      	ldr	r4, [r4, #24]
    6028:	b134      	cbz	r4, 6038 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    602a:	6863      	ldr	r3, [r4, #4]
    602c:	2b00      	cmp	r3, #0
    602e:	d0fa      	beq.n	6026 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6030:	7ae9      	ldrb	r1, [r5, #11]
    6032:	4628      	mov	r0, r5
    6034:	4798      	blx	r3
    6036:	e7f6      	b.n	6026 <notify_disconnected+0xa>
		}
	}
}
    6038:	bd38      	pop	{r3, r4, r5, pc}
    603a:	bf00      	nop
    603c:	20000394 	.word	0x20000394

00006040 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6040:	2300      	movs	r3, #0
    6042:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <tx_free+0x18>)
    6046:	681a      	ldr	r2, [r3, #0]
    6048:	6002      	str	r2, [r0, #0]
	list->head = node;
    604a:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    604c:	685b      	ldr	r3, [r3, #4]
    604e:	b103      	cbz	r3, 6052 <tx_free+0x12>
    6050:	4770      	bx	lr
		list->tail = list->head;
    6052:	4b01      	ldr	r3, [pc, #4]	; (6058 <tx_free+0x18>)
    6054:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6056:	e7fb      	b.n	6050 <tx_free+0x10>
    6058:	20000534 	.word	0x20000534

0000605c <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    605c:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    605e:	4a0f      	ldr	r2, [pc, #60]	; (609c <add_pending_tx+0x40>)
    6060:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6062:	681c      	ldr	r4, [r3, #0]
    6064:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6066:	6852      	ldr	r2, [r2, #4]
    6068:	4293      	cmp	r3, r2
    606a:	d011      	beq.n	6090 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    606c:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    606e:	f04f 0220 	mov.w	r2, #32
    6072:	f3ef 8111 	mrs	r1, BASEPRI
    6076:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    607a:	2200      	movs	r2, #0
    607c:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    607e:	6982      	ldr	r2, [r0, #24]
    6080:	b14a      	cbz	r2, 6096 <add_pending_tx+0x3a>
		list->tail->next = node;
    6082:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6084:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6086:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    608a:	4618      	mov	r0, r3
    608c:	bc10      	pop	{r4}
    608e:	4770      	bx	lr
		list->tail = list->head;
    6090:	4a02      	ldr	r2, [pc, #8]	; (609c <add_pending_tx+0x40>)
    6092:	6054      	str	r4, [r2, #4]
    6094:	e7ea      	b.n	606c <add_pending_tx+0x10>
		list->tail = node;
    6096:	6183      	str	r3, [r0, #24]
		list->head = node;
    6098:	6143      	str	r3, [r0, #20]
    609a:	e7f4      	b.n	6086 <add_pending_tx+0x2a>
    609c:	20000534 	.word	0x20000534

000060a0 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    60a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    60a2:	f04f 0320 	mov.w	r3, #32
    60a6:	f3ef 8411 	mrs	r4, BASEPRI
    60aa:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    60ae:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    60b0:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    60b2:	b163      	cbz	r3, 60ce <remove_pending_tx+0x2e>
		if (test == node) {
    60b4:	4299      	cmp	r1, r3
    60b6:	d002      	beq.n	60be <remove_pending_tx+0x1e>
		prev = test;
    60b8:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    60ba:	681b      	ldr	r3, [r3, #0]
    60bc:	e7f9      	b.n	60b2 <remove_pending_tx+0x12>
	if (!prev_node) {
    60be:	b162      	cbz	r2, 60da <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    60c0:	680b      	ldr	r3, [r1, #0]
    60c2:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    60c4:	6983      	ldr	r3, [r0, #24]
    60c6:	4299      	cmp	r1, r3
    60c8:	d00e      	beq.n	60e8 <remove_pending_tx+0x48>
	node->next = NULL;
    60ca:	2300      	movs	r3, #0
    60cc:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    60ce:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    60d2:	4608      	mov	r0, r1
    60d4:	f7ff ffb4 	bl	6040 <tx_free>
    60d8:	bd10      	pop	{r4, pc}
		list->head = node->next;
    60da:	680b      	ldr	r3, [r1, #0]
    60dc:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    60de:	6982      	ldr	r2, [r0, #24]
    60e0:	4291      	cmp	r1, r2
    60e2:	d1f2      	bne.n	60ca <remove_pending_tx+0x2a>
			list->tail = list->head;
    60e4:	6183      	str	r3, [r0, #24]
    60e6:	e7f0      	b.n	60ca <remove_pending_tx+0x2a>
			list->tail = prev_node;
    60e8:	6182      	str	r2, [r0, #24]
    60ea:	e7ee      	b.n	60ca <remove_pending_tx+0x2a>

000060ec <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    60ec:	884b      	ldrh	r3, [r1, #2]
    60ee:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    60f2:	888b      	ldrh	r3, [r1, #4]
    60f4:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    60f8:	88cb      	ldrh	r3, [r1, #6]
    60fa:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    60fe:	4770      	bx	lr

00006100 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6100:	89c3      	ldrh	r3, [r0, #14]
    6102:	b903      	cbnz	r3, 6106 <bt_conn_reset_rx_state+0x6>
    6104:	4770      	bx	lr
{
    6106:	b510      	push	{r4, lr}
    6108:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    610a:	6900      	ldr	r0, [r0, #16]
    610c:	f014 f816 	bl	1a13c <net_buf_unref>
	conn->rx = NULL;
    6110:	2300      	movs	r3, #0
    6112:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6114:	81e3      	strh	r3, [r4, #14]
    6116:	bd10      	pop	{r4, pc}

00006118 <conn_new>:
{
    6118:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    611a:	2300      	movs	r3, #0
    611c:	b1ab      	cbz	r3, 614a <conn_new+0x32>
	struct bt_conn *conn = NULL;
    611e:	2400      	movs	r4, #0
	if (!conn) {
    6120:	b18c      	cbz	r4, 6146 <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6122:	229c      	movs	r2, #156	; 0x9c
    6124:	2100      	movs	r1, #0
    6126:	4620      	mov	r0, r4
    6128:	f024 fcc8 	bl	2aabc <memset>
	atomic_set(&conn->ref, 1);
    612c:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6130:	2201      	movs	r2, #1
    6132:	f3bf 8f5b 	dmb	ish
    6136:	e853 1f00 	ldrex	r1, [r3]
    613a:	e843 2000 	strex	r0, r2, [r3]
    613e:	2800      	cmp	r0, #0
    6140:	d1f9      	bne.n	6136 <conn_new+0x1e>
    6142:	f3bf 8f5b 	dmb	ish
}
    6146:	4620      	mov	r0, r4
    6148:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    614a:	229c      	movs	r2, #156	; 0x9c
    614c:	fb02 f203 	mul.w	r2, r2, r3
    6150:	3240      	adds	r2, #64	; 0x40
    6152:	4907      	ldr	r1, [pc, #28]	; (6170 <conn_new+0x58>)
    6154:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6156:	f3bf 8f5b 	dmb	ish
    615a:	6852      	ldr	r2, [r2, #4]
    615c:	f3bf 8f5b 	dmb	ish
    6160:	b10a      	cbz	r2, 6166 <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6162:	3301      	adds	r3, #1
    6164:	e7da      	b.n	611c <conn_new+0x4>
			conn = &conns[i];
    6166:	229c      	movs	r2, #156	; 0x9c
    6168:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    616c:	e7d8      	b.n	6120 <conn_new+0x8>
    616e:	bf00      	nop
    6170:	200003a8 	.word	0x200003a8

00006174 <bt_conn_get_pkts>:
}
    6174:	4800      	ldr	r0, [pc, #0]	; (6178 <bt_conn_get_pkts+0x4>)
    6176:	4770      	bx	lr
    6178:	2000b89c 	.word	0x2000b89c

0000617c <process_unack_tx>:
{
    617c:	b510      	push	{r4, lr}
    617e:	4604      	mov	r4, r0
    6180:	e009      	b.n	6196 <process_unack_tx+0x1a>
    6182:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6186:	b1b0      	cbz	r0, 61b6 <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6188:	f7ff ff5a 	bl	6040 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    618c:	4620      	mov	r0, r4
    618e:	f7ff fff1 	bl	6174 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6192:	f022 fb1e 	bl	287d2 <_impl_k_sem_give>
	__asm__ volatile(
    6196:	f04f 0220 	mov.w	r2, #32
    619a:	f3ef 8311 	mrs	r3, BASEPRI
    619e:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    61a2:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    61a4:	2800      	cmp	r0, #0
    61a6:	d0ec      	beq.n	6182 <process_unack_tx+0x6>
	list->head = node->next;
    61a8:	6802      	ldr	r2, [r0, #0]
    61aa:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    61ac:	69a1      	ldr	r1, [r4, #24]
    61ae:	4288      	cmp	r0, r1
    61b0:	d1e7      	bne.n	6182 <process_unack_tx+0x6>
		list->tail = list->head;
    61b2:	61a2      	str	r2, [r4, #24]
    61b4:	e7e5      	b.n	6182 <process_unack_tx+0x6>
    61b6:	bd10      	pop	{r4, pc}

000061b8 <notify_le_param_updated>:
{
    61b8:	b570      	push	{r4, r5, r6, lr}
    61ba:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    61bc:	4b08      	ldr	r3, [pc, #32]	; (61e0 <notify_le_param_updated+0x28>)
    61be:	681c      	ldr	r4, [r3, #0]
    61c0:	e000      	b.n	61c4 <notify_le_param_updated+0xc>
    61c2:	69a4      	ldr	r4, [r4, #24]
    61c4:	b15c      	cbz	r4, 61de <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    61c6:	68e6      	ldr	r6, [r4, #12]
    61c8:	2e00      	cmp	r6, #0
    61ca:	d0fa      	beq.n	61c2 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    61cc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    61d0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    61d4:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    61d8:	4628      	mov	r0, r5
    61da:	47b0      	blx	r6
    61dc:	e7f1      	b.n	61c2 <notify_le_param_updated+0xa>
}
    61de:	bd70      	pop	{r4, r5, r6, pc}
    61e0:	20000394 	.word	0x20000394

000061e4 <le_param_req>:
{
    61e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61e6:	4606      	mov	r6, r0
    61e8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    61ea:	4608      	mov	r0, r1
    61ec:	f7fe fc02 	bl	49f4 <bt_le_conn_params_valid>
    61f0:	4607      	mov	r7, r0
    61f2:	b198      	cbz	r0, 621c <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    61f4:	4b0a      	ldr	r3, [pc, #40]	; (6220 <le_param_req+0x3c>)
    61f6:	681c      	ldr	r4, [r3, #0]
    61f8:	e000      	b.n	61fc <le_param_req+0x18>
    61fa:	69a4      	ldr	r4, [r4, #24]
    61fc:	b174      	cbz	r4, 621c <le_param_req+0x38>
		if (!cb->le_param_req) {
    61fe:	68a3      	ldr	r3, [r4, #8]
    6200:	2b00      	cmp	r3, #0
    6202:	d0fa      	beq.n	61fa <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6204:	4629      	mov	r1, r5
    6206:	4630      	mov	r0, r6
    6208:	4798      	blx	r3
    620a:	b130      	cbz	r0, 621a <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    620c:	4628      	mov	r0, r5
    620e:	f7fe fbf1 	bl	49f4 <bt_le_conn_params_valid>
    6212:	2800      	cmp	r0, #0
    6214:	d1f1      	bne.n	61fa <le_param_req+0x16>
			return false;
    6216:	4607      	mov	r7, r0
    6218:	e000      	b.n	621c <le_param_req+0x38>
			return false;
    621a:	4607      	mov	r7, r0
}
    621c:	4638      	mov	r0, r7
    621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6220:	20000394 	.word	0x20000394

00006224 <bt_conn_identity_resolved>:
{
    6224:	b570      	push	{r4, r5, r6, lr}
    6226:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6228:	78c3      	ldrb	r3, [r0, #3]
    622a:	b923      	cbnz	r3, 6236 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    622c:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6230:	4b08      	ldr	r3, [pc, #32]	; (6254 <bt_conn_identity_resolved+0x30>)
    6232:	681c      	ldr	r4, [r3, #0]
    6234:	e003      	b.n	623e <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6236:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    623a:	e7f9      	b.n	6230 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    623c:	69a4      	ldr	r4, [r4, #24]
    623e:	b144      	cbz	r4, 6252 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6240:	6923      	ldr	r3, [r4, #16]
    6242:	2b00      	cmp	r3, #0
    6244:	d0fa      	beq.n	623c <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6246:	f105 0248 	add.w	r2, r5, #72	; 0x48
    624a:	4631      	mov	r1, r6
    624c:	4628      	mov	r0, r5
    624e:	4798      	blx	r3
    6250:	e7f4      	b.n	623c <bt_conn_identity_resolved+0x18>
}
    6252:	bd70      	pop	{r4, r5, r6, pc}
    6254:	20000394 	.word	0x20000394

00006258 <bt_conn_le_start_encryption>:
{
    6258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    625c:	4680      	mov	r8, r0
    625e:	4617      	mov	r7, r2
    6260:	461c      	mov	r4, r3
    6262:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6264:	211c      	movs	r1, #28
    6266:	f242 0019 	movw	r0, #8217	; 0x2019
    626a:	f7fd ff59 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    626e:	b338      	cbz	r0, 62c0 <bt_conn_le_start_encryption+0x68>
    6270:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6272:	211c      	movs	r1, #28
    6274:	3008      	adds	r0, #8
    6276:	f013 ffad 	bl	1a1d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    627a:	f8b8 2000 	ldrh.w	r2, [r8]
    627e:	4603      	mov	r3, r0
    6280:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6284:	f8c0 7002 	str.w	r7, [r0, #2]
    6288:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    628a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    628e:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6290:	f100 040c 	add.w	r4, r0, #12
    6294:	462a      	mov	r2, r5
    6296:	9907      	ldr	r1, [sp, #28]
    6298:	4620      	mov	r0, r4
    629a:	f7fa f811 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    629e:	2d0f      	cmp	r5, #15
    62a0:	d907      	bls.n	62b2 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    62a2:	2200      	movs	r2, #0
    62a4:	4631      	mov	r1, r6
    62a6:	f242 0019 	movw	r0, #8217	; 0x2019
    62aa:	f7fd ff65 	bl	4178 <bt_hci_cmd_send_sync>
    62ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    62b2:	f1c5 0210 	rsb	r2, r5, #16
    62b6:	2100      	movs	r1, #0
    62b8:	1960      	adds	r0, r4, r5
    62ba:	f024 fbff 	bl	2aabc <memset>
    62be:	e7f0      	b.n	62a2 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    62c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    62c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000062c8 <start_security>:
{
    62c8:	b530      	push	{r4, r5, lr}
    62ca:	b085      	sub	sp, #20
    62cc:	4604      	mov	r4, r0
	switch (conn->role) {
    62ce:	78c3      	ldrb	r3, [r0, #3]
    62d0:	b123      	cbz	r3, 62dc <start_security+0x14>
    62d2:	2b01      	cmp	r3, #1
    62d4:	d052      	beq.n	637c <start_security+0xb4>
		return -EINVAL;
    62d6:	f06f 0015 	mvn.w	r0, #21
    62da:	e051      	b.n	6380 <start_security+0xb8>
		if (!conn->le.keys) {
    62dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
    62de:	b353      	cbz	r3, 6336 <start_security+0x6e>
		if (!conn->le.keys ||
    62e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    62e2:	2b00      	cmp	r3, #0
    62e4:	d036      	beq.n	6354 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    62e6:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    62e8:	f012 0f24 	tst.w	r2, #36	; 0x24
    62ec:	d032      	beq.n	6354 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    62ee:	7a62      	ldrb	r2, [r4, #9]
    62f0:	2a02      	cmp	r2, #2
    62f2:	d833      	bhi.n	635c <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    62f4:	7a63      	ldrb	r3, [r4, #9]
    62f6:	2b03      	cmp	r3, #3
    62f8:	d90d      	bls.n	6316 <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    62fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
    62fc:	f3bf 8f5b 	dmb	ish
    6300:	689b      	ldr	r3, [r3, #8]
    6302:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6306:	f013 0f01 	tst.w	r3, #1
    630a:	d104      	bne.n	6316 <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    630c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    630e:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6310:	f013 0f20 	tst.w	r3, #32
    6314:	d02e      	beq.n	6374 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6316:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6318:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    631c:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    631e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6322:	9502      	str	r5, [sp, #8]
    6324:	9201      	str	r2, [sp, #4]
    6326:	8b1b      	ldrh	r3, [r3, #24]
    6328:	9300      	str	r3, [sp, #0]
    632a:	4602      	mov	r2, r0
    632c:	460b      	mov	r3, r1
    632e:	4620      	mov	r0, r4
    6330:	f7ff ff92 	bl	6258 <bt_conn_le_start_encryption>
    6334:	e024      	b.n	6380 <start_security+0xb8>
						     &conn->le.dst);
    6336:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    633a:	4629      	mov	r1, r5
    633c:	2020      	movs	r0, #32
    633e:	f006 f96d 	bl	c61c <bt_keys_find>
    6342:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6344:	2800      	cmp	r0, #0
    6346:	d1cb      	bne.n	62e0 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6348:	4629      	mov	r1, r5
    634a:	2004      	movs	r0, #4
    634c:	f006 f966 	bl	c61c <bt_keys_find>
    6350:	6720      	str	r0, [r4, #112]	; 0x70
    6352:	e7c5      	b.n	62e0 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6354:	4620      	mov	r0, r4
    6356:	f005 ff14 	bl	c182 <bt_smp_send_pairing_req>
    635a:	e011      	b.n	6380 <start_security+0xb8>
    635c:	f3bf 8f5b 	dmb	ish
    6360:	689b      	ldr	r3, [r3, #8]
    6362:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6366:	f013 0f01 	tst.w	r3, #1
    636a:	d1c3      	bne.n	62f4 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    636c:	4620      	mov	r0, r4
    636e:	f005 ff08 	bl	c182 <bt_smp_send_pairing_req>
    6372:	e005      	b.n	6380 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6374:	4620      	mov	r0, r4
    6376:	f005 ff04 	bl	c182 <bt_smp_send_pairing_req>
    637a:	e001      	b.n	6380 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    637c:	f005 feae 	bl	c0dc <bt_smp_send_security_req>
}
    6380:	b005      	add	sp, #20
    6382:	bd30      	pop	{r4, r5, pc}

00006384 <bt_conn_security_changed>:
{
    6384:	b538      	push	{r3, r4, r5, lr}
    6386:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6388:	4b06      	ldr	r3, [pc, #24]	; (63a4 <bt_conn_security_changed+0x20>)
    638a:	681c      	ldr	r4, [r3, #0]
    638c:	e000      	b.n	6390 <bt_conn_security_changed+0xc>
    638e:	69a4      	ldr	r4, [r4, #24]
    6390:	b134      	cbz	r4, 63a0 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6392:	6963      	ldr	r3, [r4, #20]
    6394:	2b00      	cmp	r3, #0
    6396:	d0fa      	beq.n	638e <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6398:	7a29      	ldrb	r1, [r5, #8]
    639a:	4628      	mov	r0, r5
    639c:	4798      	blx	r3
    639e:	e7f6      	b.n	638e <bt_conn_security_changed+0xa>
}
    63a0:	bd38      	pop	{r3, r4, r5, pc}
    63a2:	bf00      	nop
    63a4:	20000394 	.word	0x20000394

000063a8 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    63a8:	7b03      	ldrb	r3, [r0, #12]
    63aa:	2b03      	cmp	r3, #3
    63ac:	d112      	bne.n	63d4 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    63ae:	7a03      	ldrb	r3, [r0, #8]
    63b0:	428b      	cmp	r3, r1
    63b2:	d212      	bcs.n	63da <bt_conn_security+0x32>
    63b4:	7a43      	ldrb	r3, [r0, #9]
    63b6:	4299      	cmp	r1, r3
    63b8:	d801      	bhi.n	63be <bt_conn_security+0x16>
		return 0;
    63ba:	2300      	movs	r3, #0
    63bc:	e00e      	b.n	63dc <bt_conn_security+0x34>
{
    63be:	b510      	push	{r4, lr}
    63c0:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    63c2:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    63c4:	f7ff ff80 	bl	62c8 <start_security>
	if (err) {
    63c8:	4603      	mov	r3, r0
    63ca:	b108      	cbz	r0, 63d0 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    63cc:	7a22      	ldrb	r2, [r4, #8]
    63ce:	7262      	strb	r2, [r4, #9]
}
    63d0:	4618      	mov	r0, r3
    63d2:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    63d4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    63d8:	e000      	b.n	63dc <bt_conn_security+0x34>
		return 0;
    63da:	2300      	movs	r3, #0
}
    63dc:	4618      	mov	r0, r3
    63de:	4770      	bx	lr

000063e0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    63e0:	4b02      	ldr	r3, [pc, #8]	; (63ec <bt_conn_cb_register+0xc>)
    63e2:	681a      	ldr	r2, [r3, #0]
    63e4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    63e6:	6018      	str	r0, [r3, #0]
    63e8:	4770      	bx	lr
    63ea:	bf00      	nop
    63ec:	20000394 	.word	0x20000394

000063f0 <bt_conn_recv>:
{
    63f0:	b570      	push	{r4, r5, r6, lr}
    63f2:	4605      	mov	r5, r0
    63f4:	460c      	mov	r4, r1
	switch (flags) {
    63f6:	2a01      	cmp	r2, #1
    63f8:	d01a      	beq.n	6430 <bt_conn_recv+0x40>
    63fa:	2a02      	cmp	r2, #2
    63fc:	d149      	bne.n	6492 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    63fe:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6400:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6402:	89c3      	ldrh	r3, [r0, #14]
    6404:	b97b      	cbnz	r3, 6426 <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6406:	89a3      	ldrh	r3, [r4, #12]
    6408:	1af3      	subs	r3, r6, r3
    640a:	3304      	adds	r3, #4
    640c:	b29b      	uxth	r3, r3
    640e:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6410:	b963      	cbnz	r3, 642c <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6412:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6414:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6416:	3304      	adds	r3, #4
    6418:	89a2      	ldrh	r2, [r4, #12]
    641a:	4293      	cmp	r3, r2
    641c:	d03f      	beq.n	649e <bt_conn_recv+0xae>
		net_buf_unref(buf);
    641e:	4620      	mov	r0, r4
    6420:	f013 fe8c 	bl	1a13c <net_buf_unref>
		return;
    6424:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6426:	f7ff fe6b 	bl	6100 <bt_conn_reset_rx_state>
    642a:	e7ec      	b.n	6406 <bt_conn_recv+0x16>
			conn->rx = buf;
    642c:	612c      	str	r4, [r5, #16]
			return;
    642e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6430:	89c3      	ldrh	r3, [r0, #14]
    6432:	b1db      	cbz	r3, 646c <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6434:	898e      	ldrh	r6, [r1, #12]
    6436:	42b3      	cmp	r3, r6
    6438:	d31e      	bcc.n	6478 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    643a:	6900      	ldr	r0, [r0, #16]
    643c:	3008      	adds	r0, #8
    643e:	f013 ff32 	bl	1a2a6 <net_buf_simple_tailroom>
    6442:	4286      	cmp	r6, r0
    6444:	d81e      	bhi.n	6484 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6446:	6928      	ldr	r0, [r5, #16]
    6448:	89a2      	ldrh	r2, [r4, #12]
    644a:	68a1      	ldr	r1, [r4, #8]
    644c:	3008      	adds	r0, #8
    644e:	f013 fec7 	bl	1a1e0 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6452:	89a2      	ldrh	r2, [r4, #12]
    6454:	89eb      	ldrh	r3, [r5, #14]
    6456:	1a9b      	subs	r3, r3, r2
    6458:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    645a:	4620      	mov	r0, r4
    645c:	f013 fe6e 	bl	1a13c <net_buf_unref>
		if (conn->rx_len) {
    6460:	89eb      	ldrh	r3, [r5, #14]
    6462:	bb03      	cbnz	r3, 64a6 <bt_conn_recv+0xb6>
		buf = conn->rx;
    6464:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    6466:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6468:	81eb      	strh	r3, [r5, #14]
		break;
    646a:	e7d2      	b.n	6412 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    646c:	f7ff fe48 	bl	6100 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6470:	4620      	mov	r0, r4
    6472:	f013 fe63 	bl	1a13c <net_buf_unref>
			return;
    6476:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6478:	f7ff fe42 	bl	6100 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    647c:	4620      	mov	r0, r4
    647e:	f013 fe5d 	bl	1a13c <net_buf_unref>
			return;
    6482:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6484:	4628      	mov	r0, r5
    6486:	f7ff fe3b 	bl	6100 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    648a:	4620      	mov	r0, r4
    648c:	f013 fe56 	bl	1a13c <net_buf_unref>
			return;
    6490:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    6492:	f7ff fe35 	bl	6100 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    6496:	4620      	mov	r0, r4
    6498:	f013 fe50 	bl	1a13c <net_buf_unref>
		return;
    649c:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    649e:	4621      	mov	r1, r4
    64a0:	4628      	mov	r0, r5
    64a2:	f001 fd06 	bl	7eb2 <bt_l2cap_recv>
    64a6:	bd70      	pop	{r4, r5, r6, pc}

000064a8 <bt_conn_send_cb>:
{
    64a8:	b570      	push	{r4, r5, r6, lr}
    64aa:	4605      	mov	r5, r0
    64ac:	460c      	mov	r4, r1
    64ae:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    64b0:	7988      	ldrb	r0, [r1, #6]
    64b2:	f013 fdc9 	bl	1a048 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    64b6:	8ac3      	ldrh	r3, [r0, #22]
    64b8:	2b03      	cmp	r3, #3
    64ba:	d911      	bls.n	64e0 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    64bc:	7b2b      	ldrb	r3, [r5, #12]
    64be:	2b03      	cmp	r3, #3
    64c0:	d114      	bne.n	64ec <bt_conn_send_cb+0x44>
    64c2:	f104 0310 	add.w	r3, r4, #16
    64c6:	89e2      	ldrh	r2, [r4, #14]
    64c8:	4413      	add	r3, r2
    64ca:	3303      	adds	r3, #3
    64cc:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    64d0:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    64d2:	4621      	mov	r1, r4
    64d4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    64d8:	f013 fe22 	bl	1a120 <net_buf_put>
	return 0;
    64dc:	2000      	movs	r0, #0
}
    64de:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    64e0:	4620      	mov	r0, r4
    64e2:	f013 fe2b 	bl	1a13c <net_buf_unref>
		return -EINVAL;
    64e6:	f06f 0015 	mvn.w	r0, #21
    64ea:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    64ec:	4620      	mov	r0, r4
    64ee:	f013 fe25 	bl	1a13c <net_buf_unref>
		return -ENOTCONN;
    64f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    64f6:	bd70      	pop	{r4, r5, r6, pc}

000064f8 <bt_conn_notify_tx>:
{
    64f8:	b538      	push	{r3, r4, r5, lr}
    64fa:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    64fc:	e002      	b.n	6504 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    64fe:	4620      	mov	r0, r4
    6500:	f7ff fd9e 	bl	6040 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6504:	2100      	movs	r1, #0
    6506:	f105 001c 	add.w	r0, r5, #28
    650a:	f021 fdf3 	bl	280f4 <k_queue_get>
    650e:	4604      	mov	r4, r0
    6510:	b128      	cbz	r0, 651e <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    6512:	6863      	ldr	r3, [r4, #4]
    6514:	2b00      	cmp	r3, #0
    6516:	d0f2      	beq.n	64fe <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    6518:	4628      	mov	r0, r5
    651a:	4798      	blx	r3
    651c:	e7ef      	b.n	64fe <bt_conn_notify_tx+0x6>
}
    651e:	bd38      	pop	{r3, r4, r5, pc}

00006520 <notify_tx>:
{
    6520:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6522:	2400      	movs	r4, #0
    6524:	b104      	cbz	r4, 6528 <notify_tx+0x8>
}
    6526:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6528:	239c      	movs	r3, #156	; 0x9c
    652a:	fb03 f304 	mul.w	r3, r3, r4
    652e:	3340      	adds	r3, #64	; 0x40
    6530:	4a0b      	ldr	r2, [pc, #44]	; (6560 <notify_tx+0x40>)
    6532:	4413      	add	r3, r2
    6534:	f3bf 8f5b 	dmb	ish
    6538:	685b      	ldr	r3, [r3, #4]
    653a:	f3bf 8f5b 	dmb	ish
    653e:	b13b      	cbz	r3, 6550 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6540:	239c      	movs	r3, #156	; 0x9c
    6542:	fb03 2304 	mla	r3, r3, r4, r2
    6546:	7b1b      	ldrb	r3, [r3, #12]
    6548:	3b03      	subs	r3, #3
    654a:	b2db      	uxtb	r3, r3
    654c:	2b01      	cmp	r3, #1
    654e:	d901      	bls.n	6554 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6550:	3401      	adds	r4, #1
    6552:	e7e7      	b.n	6524 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    6554:	209c      	movs	r0, #156	; 0x9c
    6556:	fb00 2004 	mla	r0, r0, r4, r2
    655a:	f7ff ffcd 	bl	64f8 <bt_conn_notify_tx>
    655e:	e7f7      	b.n	6550 <notify_tx+0x30>
    6560:	200003a8 	.word	0x200003a8

00006564 <send_frag>:
{
    6564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6568:	4606      	mov	r6, r0
    656a:	460d      	mov	r5, r1
    656c:	4690      	mov	r8, r2
    656e:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    6570:	f7ff fe00 	bl	6174 <bt_conn_get_pkts>
    6574:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6576:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    657a:	f022 f93d 	bl	287f8 <_impl_k_sem_take>
	notify_tx();
    657e:	f7ff ffcf 	bl	6520 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    6582:	7b33      	ldrb	r3, [r6, #12]
    6584:	2b03      	cmp	r3, #3
    6586:	d006      	beq.n	6596 <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6588:	4638      	mov	r0, r7
    658a:	f022 f922 	bl	287d2 <_impl_k_sem_give>
	if (always_consume) {
    658e:	bb4c      	cbnz	r4, 65e4 <send_frag+0x80>
}
    6590:	4620      	mov	r0, r4
    6592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    6596:	2104      	movs	r1, #4
    6598:	f105 0008 	add.w	r0, r5, #8
    659c:	f013 fe51 	bl	1a242 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    65a0:	f9b6 3000 	ldrsh.w	r3, [r6]
    65a4:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    65a8:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    65ac:	89ab      	ldrh	r3, [r5, #12]
    65ae:	3b04      	subs	r3, #4
    65b0:	8043      	strh	r3, [r0, #2]
    65b2:	f105 0310 	add.w	r3, r5, #16
    65b6:	89ea      	ldrh	r2, [r5, #14]
    65b8:	4413      	add	r3, r2
    65ba:	3303      	adds	r3, #3
    65bc:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    65c0:	6819      	ldr	r1, [r3, #0]
    65c2:	2202      	movs	r2, #2
    65c4:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    65c6:	4630      	mov	r0, r6
    65c8:	f7ff fd48 	bl	605c <add_pending_tx>
    65cc:	4680      	mov	r8, r0
	err = bt_send(buf);
    65ce:	4628      	mov	r0, r5
    65d0:	f7fe fafa 	bl	4bc8 <bt_send>
	if (err) {
    65d4:	b908      	cbnz	r0, 65da <send_frag+0x76>
	return true;
    65d6:	2401      	movs	r4, #1
    65d8:	e7da      	b.n	6590 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    65da:	4641      	mov	r1, r8
    65dc:	4630      	mov	r0, r6
    65de:	f7ff fd5f 	bl	60a0 <remove_pending_tx>
		goto fail;
    65e2:	e7d1      	b.n	6588 <send_frag+0x24>
		net_buf_unref(buf);
    65e4:	4628      	mov	r0, r5
    65e6:	f013 fda9 	bl	1a13c <net_buf_unref>
	return false;
    65ea:	2400      	movs	r4, #0
    65ec:	e7d0      	b.n	6590 <send_frag+0x2c>
	...

000065f0 <bt_conn_add_le>:
{
    65f0:	b538      	push	{r3, r4, r5, lr}
    65f2:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    65f4:	f7ff fd90 	bl	6118 <conn_new>
	if (!conn) {
    65f8:	4604      	mov	r4, r0
    65fa:	b1a0      	cbz	r0, 6626 <bt_conn_add_le+0x36>
    65fc:	2207      	movs	r2, #7
    65fe:	4629      	mov	r1, r5
    6600:	3048      	adds	r0, #72	; 0x48
    6602:	f7f9 fe5d 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    6606:	2301      	movs	r3, #1
    6608:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    660a:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    660c:	2300      	movs	r3, #0
    660e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6610:	2318      	movs	r3, #24
    6612:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    6616:	2328      	movs	r3, #40	; 0x28
    6618:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    661c:	4903      	ldr	r1, [pc, #12]	; (662c <bt_conn_add_le+0x3c>)
    661e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6622:	f022 fea7 	bl	29374 <k_delayed_work_init>
}
    6626:	4620      	mov	r0, r4
    6628:	bd38      	pop	{r3, r4, r5, pc}
    662a:	bf00      	nop
    662c:	00006c2d 	.word	0x00006c2d

00006630 <bt_conn_addr_le_cmp>:
{
    6630:	b538      	push	{r3, r4, r5, lr}
    6632:	4604      	mov	r4, r0
    6634:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    6636:	2207      	movs	r2, #7
    6638:	f100 0148 	add.w	r1, r0, #72	; 0x48
    663c:	4628      	mov	r0, r5
    663e:	f024 f9a9 	bl	2a994 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    6642:	4603      	mov	r3, r0
    6644:	b140      	cbz	r0, 6658 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6646:	78e3      	ldrb	r3, [r4, #3]
    6648:	b143      	cbz	r3, 665c <bt_conn_addr_le_cmp+0x2c>
    664a:	2207      	movs	r2, #7
    664c:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6650:	4628      	mov	r0, r5
    6652:	f024 f99f 	bl	2a994 <memcmp>
    6656:	4603      	mov	r3, r0
}
    6658:	4618      	mov	r0, r3
    665a:	bd38      	pop	{r3, r4, r5, pc}
    665c:	2207      	movs	r2, #7
    665e:	f104 0156 	add.w	r1, r4, #86	; 0x56
    6662:	4628      	mov	r0, r5
    6664:	f024 f996 	bl	2a994 <memcmp>
    6668:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    666a:	e7f5      	b.n	6658 <bt_conn_addr_le_cmp+0x28>

0000666c <bt_conn_ref>:
	atomic_inc(&conn->ref);
    666c:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6670:	f3bf 8f5b 	dmb	ish
    6674:	e853 2f00 	ldrex	r2, [r3]
    6678:	3201      	adds	r2, #1
    667a:	e843 2100 	strex	r1, r2, [r3]
    667e:	2900      	cmp	r1, #0
    6680:	d1f8      	bne.n	6674 <bt_conn_ref+0x8>
    6682:	f3bf 8f5b 	dmb	ish
}
    6686:	4770      	bx	lr

00006688 <bt_conn_lookup_handle>:
{
    6688:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    668a:	2300      	movs	r3, #0
    668c:	b10b      	cbz	r3, 6692 <bt_conn_lookup_handle+0xa>
	return NULL;
    668e:	2000      	movs	r0, #0
}
    6690:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    6692:	229c      	movs	r2, #156	; 0x9c
    6694:	fb02 f203 	mul.w	r2, r2, r3
    6698:	3240      	adds	r2, #64	; 0x40
    669a:	490f      	ldr	r1, [pc, #60]	; (66d8 <bt_conn_lookup_handle+0x50>)
    669c:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    669e:	f3bf 8f5b 	dmb	ish
    66a2:	6852      	ldr	r2, [r2, #4]
    66a4:	f3bf 8f5b 	dmb	ish
    66a8:	b13a      	cbz	r2, 66ba <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    66aa:	229c      	movs	r2, #156	; 0x9c
    66ac:	fb02 1203 	mla	r2, r2, r3, r1
    66b0:	7b12      	ldrb	r2, [r2, #12]
    66b2:	3a03      	subs	r2, #3
    66b4:	b2d2      	uxtb	r2, r2
    66b6:	2a01      	cmp	r2, #1
    66b8:	d901      	bls.n	66be <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66ba:	3301      	adds	r3, #1
    66bc:	e7e6      	b.n	668c <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    66be:	229c      	movs	r2, #156	; 0x9c
    66c0:	fb02 f203 	mul.w	r2, r2, r3
    66c4:	5a8a      	ldrh	r2, [r1, r2]
    66c6:	4282      	cmp	r2, r0
    66c8:	d1f7      	bne.n	66ba <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    66ca:	209c      	movs	r0, #156	; 0x9c
    66cc:	fb00 1003 	mla	r0, r0, r3, r1
    66d0:	f7ff ffcc 	bl	666c <bt_conn_ref>
    66d4:	bd08      	pop	{r3, pc}
    66d6:	bf00      	nop
    66d8:	200003a8 	.word	0x200003a8

000066dc <bt_conn_lookup_addr_le>:
{
    66dc:	b570      	push	{r4, r5, r6, lr}
    66de:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66e0:	2400      	movs	r4, #0
    66e2:	b10c      	cbz	r4, 66e8 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    66e4:	2000      	movs	r0, #0
}
    66e6:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    66e8:	239c      	movs	r3, #156	; 0x9c
    66ea:	fb03 f304 	mul.w	r3, r3, r4
    66ee:	3340      	adds	r3, #64	; 0x40
    66f0:	4a0d      	ldr	r2, [pc, #52]	; (6728 <bt_conn_lookup_addr_le+0x4c>)
    66f2:	4413      	add	r3, r2
    66f4:	f3bf 8f5b 	dmb	ish
    66f8:	685b      	ldr	r3, [r3, #4]
    66fa:	f3bf 8f5b 	dmb	ish
    66fe:	b123      	cbz	r3, 670a <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6700:	239c      	movs	r3, #156	; 0x9c
    6702:	fb03 2304 	mla	r3, r3, r4, r2
    6706:	789b      	ldrb	r3, [r3, #2]
    6708:	b10b      	cbz	r3, 670e <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    670a:	3401      	adds	r4, #1
    670c:	e7e9      	b.n	66e2 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    670e:	269c      	movs	r6, #156	; 0x9c
    6710:	fb06 2604 	mla	r6, r6, r4, r2
    6714:	4629      	mov	r1, r5
    6716:	4630      	mov	r0, r6
    6718:	f7ff ff8a 	bl	6630 <bt_conn_addr_le_cmp>
    671c:	2800      	cmp	r0, #0
    671e:	d1f4      	bne.n	670a <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    6720:	4630      	mov	r0, r6
    6722:	f7ff ffa3 	bl	666c <bt_conn_ref>
    6726:	bd70      	pop	{r4, r5, r6, pc}
    6728:	200003a8 	.word	0x200003a8

0000672c <bt_conn_lookup_state_le>:
{
    672c:	b570      	push	{r4, r5, r6, lr}
    672e:	4605      	mov	r5, r0
    6730:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6732:	2400      	movs	r4, #0
    6734:	b10c      	cbz	r4, 673a <bt_conn_lookup_state_le+0xe>
	return NULL;
    6736:	2000      	movs	r0, #0
}
    6738:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    673a:	239c      	movs	r3, #156	; 0x9c
    673c:	fb03 f304 	mul.w	r3, r3, r4
    6740:	3340      	adds	r3, #64	; 0x40
    6742:	4a12      	ldr	r2, [pc, #72]	; (678c <bt_conn_lookup_state_le+0x60>)
    6744:	4413      	add	r3, r2
    6746:	f3bf 8f5b 	dmb	ish
    674a:	685b      	ldr	r3, [r3, #4]
    674c:	f3bf 8f5b 	dmb	ish
    6750:	b19b      	cbz	r3, 677a <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6752:	239c      	movs	r3, #156	; 0x9c
    6754:	fb03 2304 	mla	r3, r3, r4, r2
    6758:	789b      	ldrb	r3, [r3, #2]
    675a:	b973      	cbnz	r3, 677a <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    675c:	b135      	cbz	r5, 676c <bt_conn_lookup_state_le+0x40>
    675e:	4629      	mov	r1, r5
    6760:	209c      	movs	r0, #156	; 0x9c
    6762:	fb00 2004 	mla	r0, r0, r4, r2
    6766:	f7ff ff63 	bl	6630 <bt_conn_addr_le_cmp>
    676a:	b930      	cbnz	r0, 677a <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    676c:	239c      	movs	r3, #156	; 0x9c
    676e:	4a07      	ldr	r2, [pc, #28]	; (678c <bt_conn_lookup_state_le+0x60>)
    6770:	fb03 2304 	mla	r3, r3, r4, r2
    6774:	7b1b      	ldrb	r3, [r3, #12]
    6776:	42b3      	cmp	r3, r6
    6778:	d001      	beq.n	677e <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    677a:	3401      	adds	r4, #1
    677c:	e7da      	b.n	6734 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    677e:	209c      	movs	r0, #156	; 0x9c
    6780:	fb00 2004 	mla	r0, r0, r4, r2
    6784:	f7ff ff72 	bl	666c <bt_conn_ref>
    6788:	bd70      	pop	{r4, r5, r6, pc}
    678a:	bf00      	nop
    678c:	200003a8 	.word	0x200003a8

00006790 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    6790:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6792:	f3bf 8f5b 	dmb	ish
    6796:	e850 3f00 	ldrex	r3, [r0]
    679a:	3b01      	subs	r3, #1
    679c:	e840 3200 	strex	r2, r3, [r0]
    67a0:	2a00      	cmp	r2, #0
    67a2:	d1f8      	bne.n	6796 <bt_conn_unref+0x6>
    67a4:	f3bf 8f5b 	dmb	ish
    67a8:	4770      	bx	lr

000067aa <conn_cleanup>:
{
    67aa:	b510      	push	{r4, lr}
    67ac:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    67ae:	e002      	b.n	67b6 <conn_cleanup+0xc>
		net_buf_unref(buf);
    67b0:	4618      	mov	r0, r3
    67b2:	f013 fcc3 	bl	1a13c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    67b6:	2100      	movs	r1, #0
    67b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    67bc:	f013 fc91 	bl	1a0e2 <net_buf_get>
    67c0:	4603      	mov	r3, r0
    67c2:	2800      	cmp	r0, #0
    67c4:	d1f4      	bne.n	67b0 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    67c6:	4620      	mov	r0, r4
    67c8:	f7ff fe96 	bl	64f8 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    67cc:	4620      	mov	r0, r4
    67ce:	f7ff fc97 	bl	6100 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    67d2:	4620      	mov	r0, r4
    67d4:	f7ff ffdc 	bl	6790 <bt_conn_unref>
    67d8:	bd10      	pop	{r4, pc}
	...

000067dc <bt_conn_prepare_events>:
{
    67dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67e0:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    67e2:	4b30      	ldr	r3, [pc, #192]	; (68a4 <bt_conn_prepare_events+0xc8>)
    67e4:	2400      	movs	r4, #0
    67e6:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    67e8:	4622      	mov	r2, r4
    67ea:	2101      	movs	r1, #1
    67ec:	f021 f93c 	bl	27a68 <k_poll_event_init>
    67f0:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    67f2:	b114      	cbz	r4, 67fa <bt_conn_prepare_events+0x1e>
}
    67f4:	4628      	mov	r0, r5
    67f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    67fa:	4a2b      	ldr	r2, [pc, #172]	; (68a8 <bt_conn_prepare_events+0xcc>)
    67fc:	239c      	movs	r3, #156	; 0x9c
    67fe:	fb03 f304 	mul.w	r3, r3, r4
    6802:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    6804:	3340      	adds	r3, #64	; 0x40
    6806:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6808:	f3bf 8f5b 	dmb	ish
    680c:	685b      	ldr	r3, [r3, #4]
    680e:	f3bf 8f5b 	dmb	ish
    6812:	b143      	cbz	r3, 6826 <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    6814:	7b03      	ldrb	r3, [r0, #12]
    6816:	b143      	cbz	r3, 682a <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    6818:	239c      	movs	r3, #156	; 0x9c
    681a:	4a23      	ldr	r2, [pc, #140]	; (68a8 <bt_conn_prepare_events+0xcc>)
    681c:	fb03 2304 	mla	r3, r3, r4, r2
    6820:	7b1b      	ldrb	r3, [r3, #12]
    6822:	2b03      	cmp	r3, #3
    6824:	d015      	beq.n	6852 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6826:	3401      	adds	r4, #1
    6828:	e7e3      	b.n	67f2 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    682a:	4603      	mov	r3, r0
    682c:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    682e:	f3bf 8f5b 	dmb	ish
    6832:	e853 2f00 	ldrex	r2, [r3]
    6836:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    683a:	e843 1700 	strex	r7, r1, [r3]
    683e:	2f00      	cmp	r7, #0
    6840:	d1f7      	bne.n	6832 <bt_conn_prepare_events+0x56>
    6842:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    6846:	f012 0f40 	tst.w	r2, #64	; 0x40
    684a:	d0e5      	beq.n	6818 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    684c:	f7ff ffad 	bl	67aa <conn_cleanup>
			continue;
    6850:	e7e9      	b.n	6826 <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    6852:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6856:	ea4f 0883 	mov.w	r8, r3, lsl #2
    685a:	44b0      	add	r8, r6
				  &conn->tx_notify);
    685c:	4691      	mov	r9, r2
    685e:	279c      	movs	r7, #156	; 0x9c
    6860:	fb07 f704 	mul.w	r7, r7, r4
    6864:	f107 0318 	add.w	r3, r7, #24
    6868:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    686a:	3304      	adds	r3, #4
    686c:	2200      	movs	r2, #0
    686e:	2104      	movs	r1, #4
    6870:	4640      	mov	r0, r8
    6872:	f021 f8f9 	bl	27a68 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    6876:	1c6b      	adds	r3, r5, #1
    6878:	2201      	movs	r2, #1
    687a:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    687e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6882:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6886:	44b0      	add	r8, r6
				  &conn->tx_queue);
    6888:	f107 0328 	add.w	r3, r7, #40	; 0x28
    688c:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    688e:	3304      	adds	r3, #4
    6890:	2200      	movs	r2, #0
    6892:	2104      	movs	r1, #4
    6894:	4640      	mov	r0, r8
    6896:	f021 f8e7 	bl	27a68 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    689a:	3502      	adds	r5, #2
    689c:	2302      	movs	r3, #2
    689e:	f888 300c 	strb.w	r3, [r8, #12]
    68a2:	e7c0      	b.n	6826 <bt_conn_prepare_events+0x4a>
    68a4:	2000b948 	.word	0x2000b948
    68a8:	200003a8 	.word	0x200003a8

000068ac <bt_conn_set_state>:
{
    68ac:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    68ae:	7b05      	ldrb	r5, [r0, #12]
    68b0:	428d      	cmp	r5, r1
    68b2:	d00a      	beq.n	68ca <bt_conn_set_state+0x1e>
    68b4:	4604      	mov	r4, r0
	conn->state = state;
    68b6:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    68b8:	b145      	cbz	r5, 68cc <bt_conn_set_state+0x20>
    68ba:	2d02      	cmp	r5, #2
    68bc:	d009      	beq.n	68d2 <bt_conn_set_state+0x26>
	switch (conn->state) {
    68be:	7b23      	ldrb	r3, [r4, #12]
    68c0:	2b02      	cmp	r3, #2
    68c2:	d068      	beq.n	6996 <bt_conn_set_state+0xea>
    68c4:	2b03      	cmp	r3, #3
    68c6:	d00b      	beq.n	68e0 <bt_conn_set_state+0x34>
    68c8:	b31b      	cbz	r3, 6912 <bt_conn_set_state+0x66>
    68ca:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    68cc:	f7ff fece 	bl	666c <bt_conn_ref>
		break;
    68d0:	e7f5      	b.n	68be <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    68d2:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    68d4:	2b00      	cmp	r3, #0
    68d6:	d1f2      	bne.n	68be <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    68d8:	3074      	adds	r0, #116	; 0x74
    68da:	f022 fd69 	bl	293b0 <k_delayed_work_cancel>
    68de:	e7ee      	b.n	68be <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    68e0:	78a3      	ldrb	r3, [r4, #2]
    68e2:	2b02      	cmp	r3, #2
    68e4:	d0f1      	beq.n	68ca <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    68e6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    68ea:	f021 fba8 	bl	2803e <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    68ee:	f104 001c 	add.w	r0, r4, #28
    68f2:	f021 fba4 	bl	2803e <k_queue_init>
		k_poll_signal(&conn_change, 0);
    68f6:	2100      	movs	r1, #0
    68f8:	482d      	ldr	r0, [pc, #180]	; (69b0 <bt_conn_set_state+0x104>)
    68fa:	f021 fb41 	bl	27f80 <k_poll_signal>
	list->head = NULL;
    68fe:	2300      	movs	r3, #0
    6900:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    6902:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    6904:	4620      	mov	r0, r4
    6906:	f001 f87d 	bl	7a04 <bt_l2cap_connected>
		notify_connected(conn);
    690a:	4620      	mov	r0, r4
    690c:	f7ff fb74 	bl	5ff8 <notify_connected>
		break;
    6910:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    6912:	78a3      	ldrb	r3, [r4, #2]
    6914:	2b02      	cmp	r3, #2
    6916:	d00d      	beq.n	6934 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    6918:	1eeb      	subs	r3, r5, #3
    691a:	b2db      	uxtb	r3, r3
    691c:	2b01      	cmp	r3, #1
    691e:	d90d      	bls.n	693c <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    6920:	2d02      	cmp	r5, #2
    6922:	d02d      	beq.n	6980 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6924:	2d01      	cmp	r5, #1
    6926:	d1d0      	bne.n	68ca <bt_conn_set_state+0x1e>
			if (conn->err) {
    6928:	7ae3      	ldrb	r3, [r4, #11]
    692a:	bb83      	cbnz	r3, 698e <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    692c:	4620      	mov	r0, r4
    692e:	f7ff ff2f 	bl	6790 <bt_conn_unref>
    6932:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    6934:	4620      	mov	r0, r4
    6936:	f7ff ff2b 	bl	6790 <bt_conn_unref>
			break;
    693a:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    693c:	4620      	mov	r0, r4
    693e:	f000 fd21 	bl	7384 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    6942:	4620      	mov	r0, r4
    6944:	f7ff fb6a 	bl	601c <notify_disconnected>
			process_unack_tx(conn);
    6948:	4620      	mov	r0, r4
    694a:	f7ff fc17 	bl	617c <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    694e:	78a3      	ldrb	r3, [r4, #2]
    6950:	b18b      	cbz	r3, 6976 <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    6952:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6954:	f3bf 8f5b 	dmb	ish
    6958:	e854 3f00 	ldrex	r3, [r4]
    695c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6960:	e844 3200 	strex	r2, r3, [r4]
    6964:	2a00      	cmp	r2, #0
    6966:	d1f7      	bne.n	6958 <bt_conn_set_state+0xac>
    6968:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    696c:	2100      	movs	r1, #0
    696e:	4810      	ldr	r0, [pc, #64]	; (69b0 <bt_conn_set_state+0x104>)
    6970:	f021 fb06 	bl	27f80 <k_poll_signal>
    6974:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    6976:	f104 0074 	add.w	r0, r4, #116	; 0x74
    697a:	f022 fd19 	bl	293b0 <k_delayed_work_cancel>
    697e:	e7e8      	b.n	6952 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    6980:	4620      	mov	r0, r4
    6982:	f7ff fb39 	bl	5ff8 <notify_connected>
			bt_conn_unref(conn);
    6986:	4620      	mov	r0, r4
    6988:	f7ff ff02 	bl	6790 <bt_conn_unref>
    698c:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    698e:	4620      	mov	r0, r4
    6990:	f7ff fb32 	bl	5ff8 <notify_connected>
    6994:	e7ca      	b.n	692c <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6996:	78a3      	ldrb	r3, [r4, #2]
    6998:	2b02      	cmp	r3, #2
    699a:	d096      	beq.n	68ca <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    699c:	2b00      	cmp	r3, #0
    699e:	d194      	bne.n	68ca <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    69a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    69a4:	f104 0174 	add.w	r1, r4, #116	; 0x74
    69a8:	4802      	ldr	r0, [pc, #8]	; (69b4 <bt_conn_set_state+0x108>)
    69aa:	f022 fd5b 	bl	29464 <k_delayed_work_submit_to_queue>
    69ae:	e78c      	b.n	68ca <bt_conn_set_state+0x1e>
    69b0:	2000b948 	.word	0x2000b948
    69b4:	20002b10 	.word	0x20002b10

000069b8 <bt_hci_disconnect>:
{
    69b8:	b570      	push	{r4, r5, r6, lr}
    69ba:	4605      	mov	r5, r0
    69bc:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    69be:	2103      	movs	r1, #3
    69c0:	f240 4006 	movw	r0, #1030	; 0x406
    69c4:	f7fd fbac 	bl	4120 <bt_hci_cmd_create>
	if (!buf) {
    69c8:	b1a8      	cbz	r0, 69f6 <bt_hci_disconnect+0x3e>
    69ca:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    69cc:	2103      	movs	r1, #3
    69ce:	3008      	adds	r0, #8
    69d0:	f013 fc00 	bl	1a1d4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    69d4:	882b      	ldrh	r3, [r5, #0]
    69d6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    69d8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    69da:	4621      	mov	r1, r4
    69dc:	f240 4006 	movw	r0, #1030	; 0x406
    69e0:	f7fe f8fc 	bl	4bdc <bt_hci_cmd_send>
	if (err) {
    69e4:	4604      	mov	r4, r0
    69e6:	b108      	cbz	r0, 69ec <bt_hci_disconnect+0x34>
}
    69e8:	4620      	mov	r0, r4
    69ea:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    69ec:	2104      	movs	r1, #4
    69ee:	4628      	mov	r0, r5
    69f0:	f7ff ff5c 	bl	68ac <bt_conn_set_state>
	return 0;
    69f4:	e7f8      	b.n	69e8 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    69f6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    69fa:	e7f5      	b.n	69e8 <bt_hci_disconnect+0x30>

000069fc <bt_conn_get_info>:
	info->type = conn->type;
    69fc:	7883      	ldrb	r3, [r0, #2]
    69fe:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    6a00:	78c3      	ldrb	r3, [r0, #3]
    6a02:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    6a04:	7883      	ldrb	r3, [r0, #2]
    6a06:	b9cb      	cbnz	r3, 6a3c <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    6a08:	78c3      	ldrb	r3, [r0, #3]
    6a0a:	b983      	cbnz	r3, 6a2e <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    6a0c:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6a10:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    6a12:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6a16:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    6a18:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6a1c:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    6a1e:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    6a22:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    6a24:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6a28:	820b      	strh	r3, [r1, #16]
		return 0;
    6a2a:	2000      	movs	r0, #0
    6a2c:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    6a2e:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6a32:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6a34:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6a38:	608b      	str	r3, [r1, #8]
    6a3a:	e7ed      	b.n	6a18 <bt_conn_get_info+0x1c>
	return -EINVAL;
    6a3c:	f06f 0015 	mvn.w	r0, #21
}
    6a40:	4770      	bx	lr
	...

00006a44 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6a44:	b570      	push	{r4, r5, r6, lr}
    6a46:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6a48:	460d      	mov	r5, r1
    6a4a:	b121      	cbz	r1, 6a56 <bt_le_set_auto_conn+0x12>
    6a4c:	4608      	mov	r0, r1
    6a4e:	f7fd ffd1 	bl	49f4 <bt_le_conn_params_valid>
    6a52:	2800      	cmp	r0, #0
    6a54:	d05a      	beq.n	6b0c <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    6a56:	4630      	mov	r0, r6
    6a58:	f7ff fe40 	bl	66dc <bt_conn_lookup_addr_le>
	if (!conn) {
    6a5c:	4604      	mov	r4, r0
    6a5e:	b1d8      	cbz	r0, 6a98 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    6a60:	b33d      	cbz	r5, 6ab2 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    6a62:	4629      	mov	r1, r5
    6a64:	4620      	mov	r0, r4
    6a66:	f7ff fb41 	bl	60ec <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    6a6a:	1d23      	adds	r3, r4, #4
    6a6c:	f3bf 8f5b 	dmb	ish
    6a70:	e853 2f00 	ldrex	r2, [r3]
    6a74:	f042 0101 	orr.w	r1, r2, #1
    6a78:	e843 1000 	strex	r0, r1, [r3]
    6a7c:	2800      	cmp	r0, #0
    6a7e:	d1f7      	bne.n	6a70 <bt_le_set_auto_conn+0x2c>
    6a80:	f3bf 8f5b 	dmb	ish
    6a84:	f012 0f01 	tst.w	r2, #1
    6a88:	d00f      	beq.n	6aaa <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    6a8a:	7b23      	ldrb	r3, [r4, #12]
    6a8c:	b363      	cbz	r3, 6ae8 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    6a8e:	4620      	mov	r0, r4
    6a90:	f7ff fe7e 	bl	6790 <bt_conn_unref>

	return 0;
    6a94:	2000      	movs	r0, #0
    6a96:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    6a98:	4630      	mov	r0, r6
    6a9a:	f7ff fda9 	bl	65f0 <bt_conn_add_le>
		if (!conn) {
    6a9e:	4604      	mov	r4, r0
    6aa0:	2800      	cmp	r0, #0
    6aa2:	d1dd      	bne.n	6a60 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6aa4:	f06f 000b 	mvn.w	r0, #11
}
    6aa8:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    6aaa:	4620      	mov	r0, r4
    6aac:	f7ff fdde 	bl	666c <bt_conn_ref>
    6ab0:	e7eb      	b.n	6a8a <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    6ab2:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ab4:	f3bf 8f5b 	dmb	ish
    6ab8:	e853 2f00 	ldrex	r2, [r3]
    6abc:	f022 0101 	bic.w	r1, r2, #1
    6ac0:	e843 1000 	strex	r0, r1, [r3]
    6ac4:	2800      	cmp	r0, #0
    6ac6:	d1f7      	bne.n	6ab8 <bt_le_set_auto_conn+0x74>
    6ac8:	f3bf 8f5b 	dmb	ish
    6acc:	f012 0f01 	tst.w	r2, #1
    6ad0:	d0db      	beq.n	6a8a <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    6ad2:	4620      	mov	r0, r4
    6ad4:	f7ff fe5c 	bl	6790 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6ad8:	7b23      	ldrb	r3, [r4, #12]
    6ada:	2b01      	cmp	r3, #1
    6adc:	d1d5      	bne.n	6a8a <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6ade:	2100      	movs	r1, #0
    6ae0:	4620      	mov	r0, r4
    6ae2:	f7ff fee3 	bl	68ac <bt_conn_set_state>
    6ae6:	e7d0      	b.n	6a8a <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ae8:	f3bf 8f5b 	dmb	ish
    6aec:	4b09      	ldr	r3, [pc, #36]	; (6b14 <bt_le_set_auto_conn+0xd0>)
    6aee:	681b      	ldr	r3, [r3, #0]
    6af0:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6af4:	f013 0f02 	tst.w	r3, #2
    6af8:	d0c9      	beq.n	6a8e <bt_le_set_auto_conn+0x4a>
		if (param) {
    6afa:	b11d      	cbz	r5, 6b04 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6afc:	2101      	movs	r1, #1
    6afe:	4620      	mov	r0, r4
    6b00:	f7ff fed4 	bl	68ac <bt_conn_set_state>
		bt_le_scan_update(false);
    6b04:	2000      	movs	r0, #0
    6b06:	f7fe f919 	bl	4d3c <bt_le_scan_update>
    6b0a:	e7c0      	b.n	6a8e <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    6b0c:	f06f 0015 	mvn.w	r0, #21
    6b10:	bd70      	pop	{r4, r5, r6, pc}
    6b12:	bf00      	nop
    6b14:	2000b880 	.word	0x2000b880

00006b18 <bt_conn_disconnect>:
{
    6b18:	b538      	push	{r3, r4, r5, lr}
    6b1a:	4604      	mov	r4, r0
    6b1c:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    6b1e:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6b20:	b13b      	cbz	r3, 6b32 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    6b22:	7b23      	ldrb	r3, [r4, #12]
    6b24:	3b01      	subs	r3, #1
    6b26:	2b03      	cmp	r3, #3
    6b28:	d823      	bhi.n	6b72 <bt_conn_disconnect+0x5a>
    6b2a:	e8df f003 	tbb	[pc, r3]
    6b2e:	1309      	.short	0x1309
    6b30:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    6b32:	2100      	movs	r1, #0
    6b34:	3048      	adds	r0, #72	; 0x48
    6b36:	f7ff ff85 	bl	6a44 <bt_le_set_auto_conn>
    6b3a:	e7f2      	b.n	6b22 <bt_conn_disconnect+0xa>
		return 0;
    6b3c:	2000      	movs	r0, #0
    6b3e:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    6b40:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6b42:	2100      	movs	r1, #0
    6b44:	4620      	mov	r0, r4
    6b46:	f7ff feb1 	bl	68ac <bt_conn_set_state>
		bt_le_scan_update(false);
    6b4a:	2000      	movs	r0, #0
    6b4c:	f7fe f8f6 	bl	4d3c <bt_le_scan_update>
		return 0;
    6b50:	2000      	movs	r0, #0
    6b52:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    6b54:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6b58:	f022 fc2a 	bl	293b0 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6b5c:	2100      	movs	r1, #0
    6b5e:	f242 000e 	movw	r0, #8206	; 0x200e
    6b62:	f7fe f83b 	bl	4bdc <bt_hci_cmd_send>
    6b66:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    6b68:	4629      	mov	r1, r5
    6b6a:	4620      	mov	r0, r4
    6b6c:	f7ff ff24 	bl	69b8 <bt_hci_disconnect>
    6b70:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6b72:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    6b76:	bd38      	pop	{r3, r4, r5, pc}

00006b78 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    6b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b7a:	4607      	mov	r7, r0
    6b7c:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6b7e:	210e      	movs	r1, #14
    6b80:	f242 0013 	movw	r0, #8211	; 0x2013
    6b84:	f7fd facc 	bl	4120 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    6b88:	b1c8      	cbz	r0, 6bbe <bt_conn_le_conn_update+0x46>
    6b8a:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6b8c:	210e      	movs	r1, #14
    6b8e:	3008      	adds	r0, #8
    6b90:	f013 fb20 	bl	1a1d4 <net_buf_simple_add>
    6b94:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    6b96:	220e      	movs	r2, #14
    6b98:	2100      	movs	r1, #0
    6b9a:	f023 ff8f 	bl	2aabc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6b9e:	883b      	ldrh	r3, [r7, #0]
    6ba0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6ba2:	882b      	ldrh	r3, [r5, #0]
    6ba4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    6ba6:	886b      	ldrh	r3, [r5, #2]
    6ba8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    6baa:	88ab      	ldrh	r3, [r5, #4]
    6bac:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6bae:	88eb      	ldrh	r3, [r5, #6]
    6bb0:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6bb2:	4631      	mov	r1, r6
    6bb4:	f242 0013 	movw	r0, #8211	; 0x2013
    6bb8:	f7fe f810 	bl	4bdc <bt_hci_cmd_send>
    6bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6bbe:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006bc4 <bt_conn_le_param_update>:
{
    6bc4:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    6bc6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6bca:	880a      	ldrh	r2, [r1, #0]
    6bcc:	4293      	cmp	r3, r2
    6bce:	d307      	bcc.n	6be0 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    6bd0:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    6bd2:	4293      	cmp	r3, r2
    6bd4:	d804      	bhi.n	6be0 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    6bd6:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6bda:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    6bdc:	429a      	cmp	r2, r3
    6bde:	d016      	beq.n	6c0e <bt_conn_le_param_update+0x4a>
    6be0:	460d      	mov	r5, r1
    6be2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    6be4:	3074      	adds	r0, #116	; 0x74
    6be6:	f022 fbe3 	bl	293b0 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6bea:	4b0f      	ldr	r3, [pc, #60]	; (6c28 <bt_conn_le_param_update+0x64>)
    6bec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6bf0:	f013 0f02 	tst.w	r3, #2
    6bf4:	d004      	beq.n	6c00 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6bf6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6bfa:	f013 0f02 	tst.w	r3, #2
    6bfe:	d101      	bne.n	6c04 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    6c00:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6c02:	b963      	cbnz	r3, 6c1e <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    6c04:	4629      	mov	r1, r5
    6c06:	4620      	mov	r0, r4
    6c08:	f7ff ffb6 	bl	6b78 <bt_conn_le_conn_update>
    6c0c:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    6c0e:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    6c12:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    6c14:	429a      	cmp	r2, r3
    6c16:	d1e3      	bne.n	6be0 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    6c18:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    6c1c:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    6c1e:	4629      	mov	r1, r5
    6c20:	4620      	mov	r0, r4
    6c22:	f001 f821 	bl	7c68 <bt_l2cap_update_conn_param>
    6c26:	bd38      	pop	{r3, r4, r5, pc}
    6c28:	2000b810 	.word	0x2000b810

00006c2c <le_conn_update>:
{
    6c2c:	b500      	push	{lr}
    6c2e:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    6c30:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    6c34:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6c38:	2b02      	cmp	r3, #2
    6c3a:	d016      	beq.n	6c6a <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6c3c:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    6c40:	f8ad 3000 	strh.w	r3, [sp]
    6c44:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    6c48:	f8ad 3002 	strh.w	r3, [sp, #2]
    6c4c:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    6c50:	f8ad 3004 	strh.w	r3, [sp, #4]
    6c54:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    6c58:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6c5c:	4669      	mov	r1, sp
    6c5e:	4610      	mov	r0, r2
    6c60:	f7ff ffb0 	bl	6bc4 <bt_conn_le_param_update>
}
    6c64:	b003      	add	sp, #12
    6c66:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6c6a:	2113      	movs	r1, #19
    6c6c:	4610      	mov	r0, r2
    6c6e:	f7ff ff53 	bl	6b18 <bt_conn_disconnect>
		return;
    6c72:	e7f7      	b.n	6c64 <le_conn_update+0x38>

00006c74 <le_conn_update>:
{
    6c74:	b510      	push	{r4, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    6c7a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6c7c:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    6c7e:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    6c80:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    6c82:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6c84:	9201      	str	r2, [sp, #4]
    6c86:	9100      	str	r1, [sp, #0]
    6c88:	2200      	movs	r2, #0
    6c8a:	4611      	mov	r1, r2
    6c8c:	f010 fdb4 	bl	177f8 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    6c90:	b100      	cbz	r0, 6c94 <le_conn_update+0x20>
    6c92:	200c      	movs	r0, #12
    6c94:	f005 fd82 	bl	c79c <cmd_status>
    6c98:	6020      	str	r0, [r4, #0]
}
    6c9a:	b002      	add	sp, #8
    6c9c:	bd10      	pop	{r4, pc}
	...

00006ca0 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    6ca0:	b538      	push	{r3, r4, r5, lr}
    6ca2:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    6ca4:	4603      	mov	r3, r0
    6ca6:	b150      	cbz	r0, 6cbe <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    6ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6cac:	4618      	mov	r0, r3
    6cae:	f013 f9d7 	bl	1a060 <net_buf_alloc>
    6cb2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6cb4:	1d29      	adds	r1, r5, #4
    6cb6:	f013 fa2e 	bl	1a116 <net_buf_reserve>

	return buf;
}
    6cba:	4620      	mov	r0, r4
    6cbc:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    6cbe:	4b01      	ldr	r3, [pc, #4]	; (6cc4 <bt_conn_create_pdu+0x24>)
    6cc0:	e7f2      	b.n	6ca8 <bt_conn_create_pdu+0x8>
    6cc2:	bf00      	nop
    6cc4:	2000d08c 	.word	0x2000d08c

00006cc8 <create_frag>:
{
    6cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cca:	4606      	mov	r6, r0
    6ccc:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    6cce:	2100      	movs	r1, #0
    6cd0:	4608      	mov	r0, r1
    6cd2:	f7ff ffe5 	bl	6ca0 <bt_conn_create_pdu>
    6cd6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6cd8:	7b33      	ldrb	r3, [r6, #12]
    6cda:	2b03      	cmp	r3, #3
    6cdc:	d121      	bne.n	6d22 <create_frag+0x5a>
    6cde:	f100 0310 	add.w	r3, r0, #16
    6ce2:	89c2      	ldrh	r2, [r0, #14]
    6ce4:	4413      	add	r3, r2
    6ce6:	3303      	adds	r3, #3
    6ce8:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    6cec:	2200      	movs	r2, #0
    6cee:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    6cf0:	4b10      	ldr	r3, [pc, #64]	; (6d34 <create_frag+0x6c>)
    6cf2:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6cf6:	f100 0608 	add.w	r6, r0, #8
    6cfa:	4630      	mov	r0, r6
    6cfc:	f013 fad3 	bl	1a2a6 <net_buf_simple_tailroom>
    6d00:	4287      	cmp	r7, r0
    6d02:	d212      	bcs.n	6d2a <create_frag+0x62>
	return bt_dev.le.mtu;
    6d04:	4b0b      	ldr	r3, [pc, #44]	; (6d34 <create_frag+0x6c>)
    6d06:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6d0a:	463a      	mov	r2, r7
    6d0c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6d10:	4630      	mov	r0, r6
    6d12:	f013 fa65 	bl	1a1e0 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6d16:	4639      	mov	r1, r7
    6d18:	4620      	mov	r0, r4
    6d1a:	f013 faa8 	bl	1a26e <net_buf_simple_pull>
}
    6d1e:	4628      	mov	r0, r5
    6d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    6d22:	f013 fa0b 	bl	1a13c <net_buf_unref>
		return NULL;
    6d26:	2500      	movs	r5, #0
    6d28:	e7f9      	b.n	6d1e <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6d2a:	4630      	mov	r0, r6
    6d2c:	f013 fabb 	bl	1a2a6 <net_buf_simple_tailroom>
    6d30:	b287      	uxth	r7, r0
    6d32:	e7ea      	b.n	6d0a <create_frag+0x42>
    6d34:	2000b810 	.word	0x2000b810

00006d38 <send_buf>:
{
    6d38:	b538      	push	{r3, r4, r5, lr}
    6d3a:	4605      	mov	r5, r0
    6d3c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    6d3e:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    6d40:	4b1b      	ldr	r3, [pc, #108]	; (6db0 <send_buf+0x78>)
    6d42:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    6d46:	429a      	cmp	r2, r3
    6d48:	d91f      	bls.n	6d8a <send_buf+0x52>
	frag = create_frag(conn, buf);
    6d4a:	f7ff ffbd 	bl	6cc8 <create_frag>
	if (!frag) {
    6d4e:	4601      	mov	r1, r0
    6d50:	b350      	cbz	r0, 6da8 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    6d52:	2301      	movs	r3, #1
    6d54:	2200      	movs	r2, #0
    6d56:	4628      	mov	r0, r5
    6d58:	f7ff fc04 	bl	6564 <send_frag>
    6d5c:	4603      	mov	r3, r0
    6d5e:	b1c8      	cbz	r0, 6d94 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    6d60:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    6d62:	4a13      	ldr	r2, [pc, #76]	; (6db0 <send_buf+0x78>)
    6d64:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    6d68:	429a      	cmp	r2, r3
    6d6a:	d215      	bcs.n	6d98 <send_buf+0x60>
		frag = create_frag(conn, buf);
    6d6c:	4621      	mov	r1, r4
    6d6e:	4628      	mov	r0, r5
    6d70:	f7ff ffaa 	bl	6cc8 <create_frag>
		if (!frag) {
    6d74:	4601      	mov	r1, r0
    6d76:	b1c8      	cbz	r0, 6dac <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6d78:	2301      	movs	r3, #1
    6d7a:	461a      	mov	r2, r3
    6d7c:	4628      	mov	r0, r5
    6d7e:	f7ff fbf1 	bl	6564 <send_frag>
    6d82:	4603      	mov	r3, r0
    6d84:	2800      	cmp	r0, #0
    6d86:	d1eb      	bne.n	6d60 <send_buf+0x28>
    6d88:	e004      	b.n	6d94 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6d8a:	2300      	movs	r3, #0
    6d8c:	461a      	mov	r2, r3
    6d8e:	f7ff fbe9 	bl	6564 <send_frag>
    6d92:	4603      	mov	r3, r0
}
    6d94:	4618      	mov	r0, r3
    6d96:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6d98:	2300      	movs	r3, #0
    6d9a:	2201      	movs	r2, #1
    6d9c:	4621      	mov	r1, r4
    6d9e:	4628      	mov	r0, r5
    6da0:	f7ff fbe0 	bl	6564 <send_frag>
    6da4:	4603      	mov	r3, r0
    6da6:	e7f5      	b.n	6d94 <send_buf+0x5c>
		return false;
    6da8:	2300      	movs	r3, #0
    6daa:	e7f3      	b.n	6d94 <send_buf+0x5c>
			return false;
    6dac:	2300      	movs	r3, #0
    6dae:	e7f1      	b.n	6d94 <send_buf+0x5c>
    6db0:	2000b810 	.word	0x2000b810

00006db4 <bt_conn_process_tx>:
{
    6db4:	b538      	push	{r3, r4, r5, lr}
    6db6:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6db8:	7b03      	ldrb	r3, [r0, #12]
    6dba:	b97b      	cbnz	r3, 6ddc <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    6dbc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6dbe:	f3bf 8f5b 	dmb	ish
    6dc2:	e853 2f00 	ldrex	r2, [r3]
    6dc6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6dca:	e843 1000 	strex	r0, r1, [r3]
    6dce:	2800      	cmp	r0, #0
    6dd0:	d1f7      	bne.n	6dc2 <bt_conn_process_tx+0xe>
    6dd2:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6dd6:	f012 0f40 	tst.w	r2, #64	; 0x40
    6dda:	d10c      	bne.n	6df6 <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6ddc:	2100      	movs	r1, #0
    6dde:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6de2:	f013 f97e 	bl	1a0e2 <net_buf_get>
	BT_ASSERT(buf);
    6de6:	4605      	mov	r5, r0
    6de8:	b148      	cbz	r0, 6dfe <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    6dea:	4601      	mov	r1, r0
    6dec:	4620      	mov	r0, r4
    6dee:	f7ff ffa3 	bl	6d38 <send_buf>
    6df2:	b150      	cbz	r0, 6e0a <bt_conn_process_tx+0x56>
    6df4:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    6df6:	4620      	mov	r0, r4
    6df8:	f7ff fcd7 	bl	67aa <conn_cleanup>
		return;
    6dfc:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6dfe:	4040      	eors	r0, r0
    6e00:	f380 8811 	msr	BASEPRI, r0
    6e04:	f04f 0004 	mov.w	r0, #4
    6e08:	df02      	svc	2
		net_buf_unref(buf);
    6e0a:	4628      	mov	r0, r5
    6e0c:	f013 f996 	bl	1a13c <net_buf_unref>
    6e10:	e7f0      	b.n	6df4 <bt_conn_process_tx+0x40>
	...

00006e14 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    6e14:	4b03      	ldr	r3, [pc, #12]	; (6e24 <bt_conn_get_id+0x10>)
    6e16:	1ac0      	subs	r0, r0, r3
    6e18:	1080      	asrs	r0, r0, #2
    6e1a:	4b03      	ldr	r3, [pc, #12]	; (6e28 <bt_conn_get_id+0x14>)
    6e1c:	fb03 f000 	mul.w	r0, r3, r0
}
    6e20:	b2c0      	uxtb	r0, r0
    6e22:	4770      	bx	lr
    6e24:	200003a8 	.word	0x200003a8
    6e28:	96f96f97 	.word	0x96f96f97

00006e2c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6e2c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6e2e:	2300      	movs	r3, #0
    6e30:	e000      	b.n	6e34 <bt_conn_init+0x8>
    6e32:	3301      	adds	r3, #1
    6e34:	2b01      	cmp	r3, #1
    6e36:	d80d      	bhi.n	6e54 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    6e38:	491a      	ldr	r1, [pc, #104]	; (6ea4 <bt_conn_init+0x78>)
    6e3a:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    6e3e:	4a1a      	ldr	r2, [pc, #104]	; (6ea8 <bt_conn_init+0x7c>)
    6e40:	6814      	ldr	r4, [r2, #0]
    6e42:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    6e46:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    6e48:	6852      	ldr	r2, [r2, #4]
    6e4a:	2a00      	cmp	r2, #0
    6e4c:	d1f1      	bne.n	6e32 <bt_conn_init+0x6>
		list->tail = list->head;
    6e4e:	4a16      	ldr	r2, [pc, #88]	; (6ea8 <bt_conn_init+0x7c>)
    6e50:	6050      	str	r0, [r2, #4]
    6e52:	e7ee      	b.n	6e32 <bt_conn_init+0x6>
	}

	bt_att_init();
    6e54:	f002 fa68 	bl	9328 <bt_att_init>

	err = bt_smp_init();
    6e58:	f005 fba2 	bl	c5a0 <bt_smp_init>
	if (err) {
    6e5c:	4605      	mov	r5, r0
    6e5e:	b108      	cbz	r0, 6e64 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    6e60:	4628      	mov	r0, r5
    6e62:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    6e64:	f000 ff20 	bl	7ca8 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6e68:	462c      	mov	r4, r5
    6e6a:	2c00      	cmp	r4, #0
    6e6c:	d1f8      	bne.n	6e60 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    6e6e:	4a0f      	ldr	r2, [pc, #60]	; (6eac <bt_conn_init+0x80>)
    6e70:	239c      	movs	r3, #156	; 0x9c
    6e72:	fb03 f304 	mul.w	r3, r3, r4
    6e76:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    6e78:	3340      	adds	r3, #64	; 0x40
    6e7a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e7c:	f3bf 8f5b 	dmb	ish
    6e80:	685b      	ldr	r3, [r3, #4]
    6e82:	f3bf 8f5b 	dmb	ish
    6e86:	b90b      	cbnz	r3, 6e8c <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6e88:	3401      	adds	r4, #1
    6e8a:	e7ee      	b.n	6e6a <bt_conn_init+0x3e>
    6e8c:	f3bf 8f5b 	dmb	ish
    6e90:	6843      	ldr	r3, [r0, #4]
    6e92:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    6e96:	f013 0f01 	tst.w	r3, #1
    6e9a:	d0f5      	beq.n	6e88 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6e9c:	2101      	movs	r1, #1
    6e9e:	f7ff fd05 	bl	68ac <bt_conn_set_state>
    6ea2:	e7f1      	b.n	6e88 <bt_conn_init+0x5c>
    6ea4:	20000398 	.word	0x20000398
    6ea8:	20000534 	.word	0x20000534
    6eac:	200003a8 	.word	0x200003a8

00006eb0 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6eb0:	4a05      	ldr	r2, [pc, #20]	; (6ec8 <get_ident+0x18>)
    6eb2:	7813      	ldrb	r3, [r2, #0]
    6eb4:	3301      	adds	r3, #1
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    6eba:	b90b      	cbnz	r3, 6ec0 <get_ident+0x10>
		ident++;
    6ebc:	3301      	adds	r3, #1
    6ebe:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    6ec0:	4b01      	ldr	r3, [pc, #4]	; (6ec8 <get_ident+0x18>)
    6ec2:	7818      	ldrb	r0, [r3, #0]
    6ec4:	4770      	bx	lr
    6ec6:	bf00      	nop
    6ec8:	200005d8 	.word	0x200005d8

00006ecc <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    6ecc:	b430      	push	{r4, r5}
	return list->head;
    6ece:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6ed0:	b113      	cbz	r3, 6ed8 <__l2cap_lookup_ident+0xc>
    6ed2:	3b08      	subs	r3, #8
    6ed4:	2400      	movs	r4, #0
    6ed6:	e01b      	b.n	6f10 <__l2cap_lookup_ident+0x44>
    6ed8:	2300      	movs	r3, #0
    6eda:	e7fb      	b.n	6ed4 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    6edc:	b35a      	cbz	r2, 6f36 <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    6ede:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    6ee2:	b144      	cbz	r4, 6ef6 <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    6ee4:	6899      	ldr	r1, [r3, #8]
    6ee6:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    6ee8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    6eea:	428a      	cmp	r2, r1
    6eec:	d00a      	beq.n	6f04 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    6eee:	2200      	movs	r2, #0
    6ef0:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    6ef2:	4618      	mov	r0, r3
    6ef4:	e01d      	b.n	6f32 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    6ef6:	6899      	ldr	r1, [r3, #8]
    6ef8:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6efa:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6efc:	4294      	cmp	r4, r2
    6efe:	d1f6      	bne.n	6eee <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    6f00:	6401      	str	r1, [r0, #64]	; 0x40
    6f02:	e7f4      	b.n	6eee <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    6f04:	6404      	str	r4, [r0, #64]	; 0x40
    6f06:	e7f2      	b.n	6eee <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f08:	4625      	mov	r5, r4
    6f0a:	e00a      	b.n	6f22 <__l2cap_lookup_ident+0x56>
    6f0c:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f0e:	3b08      	subs	r3, #8
    6f10:	b173      	cbz	r3, 6f30 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    6f12:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    6f16:	428d      	cmp	r5, r1
    6f18:	d0e0      	beq.n	6edc <__l2cap_lookup_ident+0x10>
    6f1a:	f113 0408 	adds.w	r4, r3, #8
    6f1e:	d0f3      	beq.n	6f08 <__l2cap_lookup_ident+0x3c>
	return node->next;
    6f20:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f22:	b11d      	cbz	r5, 6f2c <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f24:	2c00      	cmp	r4, #0
    6f26:	d0f1      	beq.n	6f0c <__l2cap_lookup_ident+0x40>
	return node->next;
    6f28:	689b      	ldr	r3, [r3, #8]
    6f2a:	e7f0      	b.n	6f0e <__l2cap_lookup_ident+0x42>
    6f2c:	2300      	movs	r3, #0
    6f2e:	e7ef      	b.n	6f10 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    6f30:	2000      	movs	r0, #0
}
    6f32:	bc30      	pop	{r4, r5}
    6f34:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    6f36:	4618      	mov	r0, r3
    6f38:	e7fb      	b.n	6f32 <__l2cap_lookup_ident+0x66>
	...

00006f3c <l2cap_server_lookup_psm>:
	return list->head;
    6f3c:	4b0d      	ldr	r3, [pc, #52]	; (6f74 <l2cap_server_lookup_psm+0x38>)
    6f3e:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6f40:	b10b      	cbz	r3, 6f46 <l2cap_server_lookup_psm+0xa>
    6f42:	3b08      	subs	r3, #8
    6f44:	e006      	b.n	6f54 <l2cap_server_lookup_psm+0x18>
    6f46:	2300      	movs	r3, #0
    6f48:	e004      	b.n	6f54 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f4a:	4611      	mov	r1, r2
    6f4c:	e00a      	b.n	6f64 <l2cap_server_lookup_psm+0x28>
	return node->next;
    6f4e:	689a      	ldr	r2, [r3, #8]
    6f50:	f1a2 0308 	sub.w	r3, r2, #8
    6f54:	b163      	cbz	r3, 6f70 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    6f56:	881a      	ldrh	r2, [r3, #0]
    6f58:	4282      	cmp	r2, r0
    6f5a:	d009      	beq.n	6f70 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f5c:	f113 0208 	adds.w	r2, r3, #8
    6f60:	d0f3      	beq.n	6f4a <l2cap_server_lookup_psm+0xe>
	return node->next;
    6f62:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6f64:	b111      	cbz	r1, 6f6c <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f66:	2a00      	cmp	r2, #0
    6f68:	d1f1      	bne.n	6f4e <l2cap_server_lookup_psm+0x12>
    6f6a:	e7f1      	b.n	6f50 <l2cap_server_lookup_psm+0x14>
    6f6c:	2300      	movs	r3, #0
    6f6e:	e7f1      	b.n	6f54 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    6f70:	4618      	mov	r0, r3
    6f72:	4770      	bx	lr
    6f74:	200005e4 	.word	0x200005e4

00006f78 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6f78:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6f7c:	b29b      	uxth	r3, r3
    6f7e:	2b3f      	cmp	r3, #63	; 0x3f
    6f80:	d835      	bhi.n	6fee <l2cap_remove_tx_cid+0x76>
	return list->head;
    6f82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f84:	b12b      	cbz	r3, 6f92 <l2cap_remove_tx_cid+0x1a>
    6f86:	3b08      	subs	r3, #8
    6f88:	2200      	movs	r2, #0
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d031      	beq.n	6ff2 <l2cap_remove_tx_cid+0x7a>
{
    6f8e:	b410      	push	{r4}
    6f90:	e01c      	b.n	6fcc <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f92:	2300      	movs	r3, #0
    6f94:	e7f8      	b.n	6f88 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6f96:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    6f9a:	b14a      	cbz	r2, 6fb0 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    6f9c:	689c      	ldr	r4, [r3, #8]
    6f9e:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    6fa0:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6fa2:	42a1      	cmp	r1, r4
    6fa4:	d00b      	beq.n	6fbe <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    6fa6:	2200      	movs	r2, #0
    6fa8:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    6faa:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    6fac:	bc10      	pop	{r4}
    6fae:	4770      	bx	lr
		list->head = node->next;
    6fb0:	689a      	ldr	r2, [r3, #8]
    6fb2:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6fb4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6fb6:	428c      	cmp	r4, r1
    6fb8:	d1f5      	bne.n	6fa6 <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    6fba:	6402      	str	r2, [r0, #64]	; 0x40
    6fbc:	e7f3      	b.n	6fa6 <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    6fbe:	6402      	str	r2, [r0, #64]	; 0x40
    6fc0:	e7f1      	b.n	6fa6 <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6fc2:	4614      	mov	r4, r2
    6fc4:	e00a      	b.n	6fdc <l2cap_remove_tx_cid+0x64>
    6fc6:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6fc8:	3b08      	subs	r3, #8
    6fca:	b173      	cbz	r3, 6fea <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6fcc:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    6fd0:	42a1      	cmp	r1, r4
    6fd2:	d0e0      	beq.n	6f96 <l2cap_remove_tx_cid+0x1e>
    6fd4:	f113 0208 	adds.w	r2, r3, #8
    6fd8:	d0f3      	beq.n	6fc2 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    6fda:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6fdc:	b11c      	cbz	r4, 6fe6 <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6fde:	2a00      	cmp	r2, #0
    6fe0:	d0f1      	beq.n	6fc6 <l2cap_remove_tx_cid+0x4e>
	return node->next;
    6fe2:	689b      	ldr	r3, [r3, #8]
    6fe4:	e7f0      	b.n	6fc8 <l2cap_remove_tx_cid+0x50>
    6fe6:	2300      	movs	r3, #0
    6fe8:	e7ef      	b.n	6fca <l2cap_remove_tx_cid+0x52>
	return NULL;
    6fea:	2000      	movs	r0, #0
    6fec:	e7de      	b.n	6fac <l2cap_remove_tx_cid+0x34>
		return NULL;
    6fee:	2000      	movs	r0, #0
    6ff0:	4770      	bx	lr
	return NULL;
    6ff2:	2000      	movs	r0, #0
}
    6ff4:	4770      	bx	lr

00006ff6 <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    6ff6:	4770      	bx	lr

00006ff8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    6ff8:	4770      	bx	lr
	...

00006ffc <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    6ffc:	2000      	movs	r0, #0
    6ffe:	b110      	cbz	r0, 7006 <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7000:	f06f 000b 	mvn.w	r0, #11
}
    7004:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7006:	239c      	movs	r3, #156	; 0x9c
    7008:	fb03 f300 	mul.w	r3, r3, r0
    700c:	4a06      	ldr	r2, [pc, #24]	; (7028 <l2cap_accept+0x2c>)
    700e:	58d3      	ldr	r3, [r2, r3]
    7010:	b10b      	cbz	r3, 7016 <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7012:	3001      	adds	r0, #1
    7014:	e7f3      	b.n	6ffe <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7016:	239c      	movs	r3, #156	; 0x9c
    7018:	4a03      	ldr	r2, [pc, #12]	; (7028 <l2cap_accept+0x2c>)
    701a:	fb03 2300 	mla	r3, r3, r0, r2
    701e:	4a03      	ldr	r2, [pc, #12]	; (702c <l2cap_accept+0x30>)
    7020:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7022:	600b      	str	r3, [r1, #0]
		return 0;
    7024:	4770      	bx	lr
    7026:	bf00      	nop
    7028:	2000053c 	.word	0x2000053c
    702c:	2000b964 	.word	0x2000b964

00007030 <l2cap_alloc_frag>:
{
    7030:	b538      	push	{r3, r4, r5, lr}
    7032:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7034:	6843      	ldr	r3, [r0, #4]
    7036:	68db      	ldr	r3, [r3, #12]
    7038:	4798      	blx	r3
	if (!frag) {
    703a:	4604      	mov	r4, r0
    703c:	b120      	cbz	r0, 7048 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    703e:	4601      	mov	r1, r0
    7040:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7044:	f013 f8ab 	bl	1a19e <net_buf_frag_add>
}
    7048:	4620      	mov	r0, r4
    704a:	bd38      	pop	{r3, r4, r5, pc}

0000704c <l2cap_chan_rx_give_credits>:
{
    704c:	b538      	push	{r3, r4, r5, lr}
    704e:	4605      	mov	r5, r0
	while (credits--) {
    7050:	e004      	b.n	705c <l2cap_chan_rx_give_credits+0x10>
    7052:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7056:	f021 fbbc 	bl	287d2 <_impl_k_sem_give>
    705a:	4621      	mov	r1, r4
    705c:	1e4b      	subs	r3, r1, #1
    705e:	b29c      	uxth	r4, r3
    7060:	2900      	cmp	r1, #0
    7062:	d1f6      	bne.n	7052 <l2cap_chan_rx_give_credits+0x6>
}
    7064:	bd38      	pop	{r3, r4, r5, pc}

00007066 <l2cap_chan_tx_give_credits>:
{
    7066:	b538      	push	{r3, r4, r5, lr}
    7068:	4605      	mov	r5, r0
	while (credits--) {
    706a:	e004      	b.n	7076 <l2cap_chan_tx_give_credits+0x10>
    706c:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7070:	f021 fbaf 	bl	287d2 <_impl_k_sem_give>
    7074:	4621      	mov	r1, r4
    7076:	1e4b      	subs	r3, r1, #1
    7078:	b29c      	uxth	r4, r3
    707a:	2900      	cmp	r1, #0
    707c:	d1f6      	bne.n	706c <l2cap_chan_tx_give_credits+0x6>
}
    707e:	bd38      	pop	{r3, r4, r5, pc}

00007080 <l2cap_chan_destroy>:
{
    7080:	b510      	push	{r4, lr}
    7082:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7084:	3010      	adds	r0, #16
    7086:	f022 f993 	bl	293b0 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    708a:	e002      	b.n	7092 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    708c:	4618      	mov	r0, r3
    708e:	f013 f855 	bl	1a13c <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7092:	2100      	movs	r1, #0
    7094:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7098:	f013 f823 	bl	1a0e2 <net_buf_get>
    709c:	4603      	mov	r3, r0
    709e:	2800      	cmp	r0, #0
    70a0:	d1f4      	bne.n	708c <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    70a2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    70a6:	b130      	cbz	r0, 70b6 <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    70a8:	f013 f848 	bl	1a13c <net_buf_unref>
		ch->_sdu = NULL;
    70ac:	2300      	movs	r3, #0
    70ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    70b2:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    70b6:	bd10      	pop	{r4, pc}

000070b8 <l2cap_chan_le_get_tx_buf>:
{
    70b8:	b508      	push	{r3, lr}
    70ba:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    70bc:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    70c0:	b118      	cbz	r0, 70ca <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    70c2:	2200      	movs	r2, #0
    70c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    70c8:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    70ca:	2100      	movs	r1, #0
    70cc:	f103 0080 	add.w	r0, r3, #128	; 0x80
    70d0:	f013 f807 	bl	1a0e2 <net_buf_get>
}
    70d4:	bd08      	pop	{r3, pc}

000070d6 <l2cap_chan_tx_init>:
{
    70d6:	b510      	push	{r4, lr}
    70d8:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    70da:	2220      	movs	r2, #32
    70dc:	2100      	movs	r1, #0
    70de:	3060      	adds	r0, #96	; 0x60
    70e0:	f023 fcec 	bl	2aabc <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    70e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70e8:	2100      	movs	r1, #0
    70ea:	f104 0068 	add.w	r0, r4, #104	; 0x68
    70ee:	f021 fb67 	bl	287c0 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    70f2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    70f6:	f020 ffa2 	bl	2803e <k_queue_init>
    70fa:	bd10      	pop	{r4, pc}

000070fc <l2cap_chan_rx_init>:
{
    70fc:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    70fe:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7102:	b913      	cbnz	r3, 710a <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7104:	2342      	movs	r3, #66	; 0x42
    7106:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    710a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    710e:	b96b      	cbnz	r3, 712c <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7110:	6843      	ldr	r3, [r0, #4]
    7112:	68db      	ldr	r3, [r3, #12]
    7114:	b1cb      	cbz	r3, 714a <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7116:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    711a:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    711c:	4a0d      	ldr	r2, [pc, #52]	; (7154 <l2cap_chan_rx_init+0x58>)
    711e:	fb82 1203 	smull	r1, r2, r2, r3
    7122:	17db      	asrs	r3, r3, #31
    7124:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7128:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    712c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7130:	3302      	adds	r3, #2
    7132:	2b44      	cmp	r3, #68	; 0x44
    7134:	bfa8      	it	ge
    7136:	2344      	movge	r3, #68	; 0x44
    7138:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    713c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7140:	2100      	movs	r1, #0
    7142:	3048      	adds	r0, #72	; 0x48
    7144:	f021 fb3c 	bl	287c0 <_impl_k_sem_init>
    7148:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    714a:	2302      	movs	r3, #2
    714c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7150:	e7ec      	b.n	712c <l2cap_chan_rx_init+0x30>
    7152:	bf00      	nop
    7154:	78787879 	.word	0x78787879

00007158 <l2cap_change_security>:
{
    7158:	b508      	push	{r3, lr}
	switch (err) {
    715a:	2905      	cmp	r1, #5
    715c:	d00e      	beq.n	717c <l2cap_change_security+0x24>
    715e:	2908      	cmp	r1, #8
    7160:	d120      	bne.n	71a4 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7162:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7166:	2b01      	cmp	r3, #1
    7168:	d81f      	bhi.n	71aa <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    716a:	2302      	movs	r3, #2
    716c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7170:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7174:	6800      	ldr	r0, [r0, #0]
    7176:	f7ff f917 	bl	63a8 <bt_conn_security>
    717a:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    717c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7180:	2b01      	cmp	r3, #1
    7182:	d905      	bls.n	7190 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7184:	2b02      	cmp	r3, #2
    7186:	d807      	bhi.n	7198 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7188:	2303      	movs	r3, #3
    718a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    718e:	e7ef      	b.n	7170 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7190:	2302      	movs	r3, #2
    7192:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7196:	e7eb      	b.n	7170 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7198:	2b03      	cmp	r3, #3
    719a:	d809      	bhi.n	71b0 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    719c:	2304      	movs	r3, #4
    719e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    71a2:	e7e5      	b.n	7170 <l2cap_change_security+0x18>
		return -EINVAL;
    71a4:	f06f 0015 	mvn.w	r0, #21
    71a8:	bd08      	pop	{r3, pc}
			return -EALREADY;
    71aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
    71ae:	bd08      	pop	{r3, pc}
			return -EALREADY;
    71b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    71b4:	bd08      	pop	{r3, pc}
	...

000071b8 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    71b8:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    71bc:	2200      	movs	r2, #0
    71be:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    71c0:	4a05      	ldr	r2, [pc, #20]	; (71d8 <bt_l2cap_le_fixed_chan_register+0x20>)
    71c2:	6852      	ldr	r2, [r2, #4]
    71c4:	b11a      	cbz	r2, 71ce <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    71c6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    71c8:	4a03      	ldr	r2, [pc, #12]	; (71d8 <bt_l2cap_le_fixed_chan_register+0x20>)
    71ca:	6053      	str	r3, [r2, #4]
    71cc:	4770      	bx	lr
		list->tail = node;
    71ce:	4a02      	ldr	r2, [pc, #8]	; (71d8 <bt_l2cap_le_fixed_chan_register+0x20>)
    71d0:	6053      	str	r3, [r2, #4]
		list->head = node;
    71d2:	6013      	str	r3, [r2, #0]
    71d4:	4770      	bx	lr
    71d6:	bf00      	nop
    71d8:	200005dc 	.word	0x200005dc

000071dc <bt_l2cap_chan_remove>:
	return list->head;
    71dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71de:	b123      	cbz	r3, 71ea <bt_l2cap_chan_remove+0xe>
    71e0:	3b08      	subs	r3, #8
    71e2:	2200      	movs	r2, #0
    71e4:	b35b      	cbz	r3, 723e <bt_l2cap_chan_remove+0x62>
{
    71e6:	b410      	push	{r4}
    71e8:	e01c      	b.n	7224 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71ea:	2300      	movs	r3, #0
    71ec:	e7f9      	b.n	71e2 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    71ee:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    71f2:	b142      	cbz	r2, 7206 <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    71f4:	689c      	ldr	r4, [r3, #8]
    71f6:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    71f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    71fa:	42a1      	cmp	r1, r4
    71fc:	d00a      	beq.n	7214 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    71fe:	2200      	movs	r2, #0
    7200:	609a      	str	r2, [r3, #8]
}
    7202:	bc10      	pop	{r4}
    7204:	4770      	bx	lr
		list->head = node->next;
    7206:	689a      	ldr	r2, [r3, #8]
    7208:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    720a:	6c04      	ldr	r4, [r0, #64]	; 0x40
    720c:	428c      	cmp	r4, r1
    720e:	d1f6      	bne.n	71fe <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7210:	6402      	str	r2, [r0, #64]	; 0x40
    7212:	e7f4      	b.n	71fe <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7214:	6402      	str	r2, [r0, #64]	; 0x40
    7216:	e7f2      	b.n	71fe <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7218:	4614      	mov	r4, r2
    721a:	e009      	b.n	7230 <bt_l2cap_chan_remove+0x54>
    721c:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    721e:	3b08      	subs	r3, #8
    7220:	2b00      	cmp	r3, #0
    7222:	d0ee      	beq.n	7202 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7224:	428b      	cmp	r3, r1
    7226:	d0e2      	beq.n	71ee <bt_l2cap_chan_remove+0x12>
    7228:	f113 0208 	adds.w	r2, r3, #8
    722c:	d0f4      	beq.n	7218 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    722e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7230:	b11c      	cbz	r4, 723a <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7232:	2a00      	cmp	r2, #0
    7234:	d0f2      	beq.n	721c <bt_l2cap_chan_remove+0x40>
	return node->next;
    7236:	689b      	ldr	r3, [r3, #8]
    7238:	e7f1      	b.n	721e <bt_l2cap_chan_remove+0x42>
    723a:	2300      	movs	r3, #0
    723c:	e7f0      	b.n	7220 <bt_l2cap_chan_remove+0x44>
    723e:	4770      	bx	lr

00007240 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7240:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7244:	4770      	bx	lr

00007246 <bt_l2cap_chan_del>:
{
    7246:	b510      	push	{r4, lr}
    7248:	4604      	mov	r4, r0
	if (!chan->conn) {
    724a:	6803      	ldr	r3, [r0, #0]
    724c:	b12b      	cbz	r3, 725a <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    724e:	6843      	ldr	r3, [r0, #4]
    7250:	685b      	ldr	r3, [r3, #4]
    7252:	b103      	cbz	r3, 7256 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7254:	4798      	blx	r3
	chan->conn = NULL;
    7256:	2300      	movs	r3, #0
    7258:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    725a:	2100      	movs	r1, #0
    725c:	4620      	mov	r0, r4
    725e:	f7ff ffef 	bl	7240 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7262:	2300      	movs	r3, #0
    7264:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7266:	68e3      	ldr	r3, [r4, #12]
    7268:	b10b      	cbz	r3, 726e <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    726a:	4620      	mov	r0, r4
    726c:	4798      	blx	r3
    726e:	bd10      	pop	{r4, pc}

00007270 <l2cap_rtx_timeout>:
{
    7270:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7272:	f1a0 0410 	sub.w	r4, r0, #16
    7276:	4621      	mov	r1, r4
    7278:	f850 0c10 	ldr.w	r0, [r0, #-16]
    727c:	f7ff ffae 	bl	71dc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7280:	4620      	mov	r0, r4
    7282:	f7ff ffe0 	bl	7246 <bt_l2cap_chan_del>
    7286:	bd10      	pop	{r4, pc}

00007288 <le_conn_rsp>:
{
    7288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    728c:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    728e:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7290:	8992      	ldrh	r2, [r2, #12]
    7292:	2a09      	cmp	r2, #9
    7294:	d927      	bls.n	72e6 <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7296:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    729a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    729e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    72a2:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    72a4:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    72a6:	b14d      	cbz	r5, 72bc <le_conn_rsp+0x34>
    72a8:	2d05      	cmp	r5, #5
    72aa:	d007      	beq.n	72bc <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    72ac:	2d08      	cmp	r5, #8
    72ae:	d005      	beq.n	72bc <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    72b0:	2201      	movs	r2, #1
    72b2:	4630      	mov	r0, r6
    72b4:	f7ff fe0a 	bl	6ecc <__l2cap_lookup_ident>
    72b8:	4604      	mov	r4, r0
    72ba:	e004      	b.n	72c6 <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    72bc:	2200      	movs	r2, #0
    72be:	4630      	mov	r0, r6
    72c0:	f7ff fe04 	bl	6ecc <__l2cap_lookup_ident>
    72c4:	4604      	mov	r4, r0
	if (!chan) {
    72c6:	b174      	cbz	r4, 72e6 <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    72c8:	f104 0010 	add.w	r0, r4, #16
    72cc:	f022 f870 	bl	293b0 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    72d0:	2300      	movs	r3, #0
    72d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    72d6:	2d05      	cmp	r5, #5
    72d8:	d021      	beq.n	731e <le_conn_rsp+0x96>
    72da:	2d08      	cmp	r5, #8
    72dc:	d01f      	beq.n	731e <le_conn_rsp+0x96>
    72de:	b125      	cbz	r5, 72ea <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    72e0:	4620      	mov	r0, r4
    72e2:	f7ff ffb0 	bl	7246 <bt_l2cap_chan_del>
    72e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    72ea:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    72ee:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    72f2:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    72f6:	2103      	movs	r1, #3
    72f8:	4620      	mov	r0, r4
    72fa:	f7ff ffa1 	bl	7240 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    72fe:	6863      	ldr	r3, [r4, #4]
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	b10b      	cbz	r3, 7308 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7304:	4620      	mov	r0, r4
    7306:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7308:	4639      	mov	r1, r7
    730a:	4620      	mov	r0, r4
    730c:	f7ff feab 	bl	7066 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7310:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7314:	4620      	mov	r0, r4
    7316:	f7ff fe99 	bl	704c <l2cap_chan_rx_give_credits>
		break;
    731a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    731e:	4629      	mov	r1, r5
    7320:	4620      	mov	r0, r4
    7322:	f7ff ff19 	bl	7158 <l2cap_change_security>
    7326:	2800      	cmp	r0, #0
    7328:	d0dd      	beq.n	72e6 <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    732a:	4621      	mov	r1, r4
    732c:	4630      	mov	r0, r6
    732e:	f7ff ff55 	bl	71dc <bt_l2cap_chan_remove>
    7332:	e7d5      	b.n	72e0 <le_conn_rsp+0x58>

00007334 <le_disconn_rsp>:
{
    7334:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7336:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7338:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    733a:	8993      	ldrh	r3, [r2, #12]
    733c:	2b03      	cmp	r3, #3
    733e:	d800      	bhi.n	7342 <le_disconn_rsp+0xe>
    7340:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7342:	8809      	ldrh	r1, [r1, #0]
    7344:	f7ff fe18 	bl	6f78 <l2cap_remove_tx_cid>
	if (!chan) {
    7348:	2800      	cmp	r0, #0
    734a:	d0f9      	beq.n	7340 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    734c:	f7ff ff7b 	bl	7246 <bt_l2cap_chan_del>
    7350:	e7f6      	b.n	7340 <le_disconn_rsp+0xc>

00007352 <reject_cmd>:
{
    7352:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7354:	2201      	movs	r2, #1
    7356:	6800      	ldr	r0, [r0, #0]
    7358:	f7ff fdb8 	bl	6ecc <__l2cap_lookup_ident>
	if (!chan) {
    735c:	b108      	cbz	r0, 7362 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    735e:	f7ff ff72 	bl	7246 <bt_l2cap_chan_del>
    7362:	bd08      	pop	{r3, pc}

00007364 <bt_l2cap_chan_add>:
{
    7364:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7366:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    736a:	2400      	movs	r4, #0
    736c:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    736e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7370:	b12c      	cbz	r4, 737e <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7372:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7374:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7376:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7378:	60ca      	str	r2, [r1, #12]
}
    737a:	bc10      	pop	{r4}
    737c:	4770      	bx	lr
		list->tail = node;
    737e:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7380:	63c3      	str	r3, [r0, #60]	; 0x3c
    7382:	e7f8      	b.n	7376 <bt_l2cap_chan_add+0x12>

00007384 <bt_l2cap_disconnected>:
{
    7384:	b510      	push	{r4, lr}
	return list->head;
    7386:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7388:	b140      	cbz	r0, 739c <bt_l2cap_disconnected+0x18>
    738a:	3808      	subs	r0, #8
    738c:	b140      	cbz	r0, 73a0 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    738e:	f110 0408 	adds.w	r4, r0, #8
    7392:	d000      	beq.n	7396 <bt_l2cap_disconnected+0x12>
	return node->next;
    7394:	6884      	ldr	r4, [r0, #8]
    7396:	b12c      	cbz	r4, 73a4 <bt_l2cap_disconnected+0x20>
    7398:	3c08      	subs	r4, #8
    739a:	e00a      	b.n	73b2 <bt_l2cap_disconnected+0x2e>
    739c:	2000      	movs	r0, #0
    739e:	e7f5      	b.n	738c <bt_l2cap_disconnected+0x8>
    73a0:	4604      	mov	r4, r0
    73a2:	e006      	b.n	73b2 <bt_l2cap_disconnected+0x2e>
    73a4:	2400      	movs	r4, #0
    73a6:	e004      	b.n	73b2 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    73a8:	461a      	mov	r2, r3
    73aa:	e00a      	b.n	73c2 <bt_l2cap_disconnected+0x3e>
    73ac:	3b08      	subs	r3, #8
    73ae:	4620      	mov	r0, r4
    73b0:	461c      	mov	r4, r3
    73b2:	b178      	cbz	r0, 73d4 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    73b4:	f7ff ff47 	bl	7246 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    73b8:	b144      	cbz	r4, 73cc <bt_l2cap_disconnected+0x48>
    73ba:	f114 0308 	adds.w	r3, r4, #8
    73be:	d0f3      	beq.n	73a8 <bt_l2cap_disconnected+0x24>
	return node->next;
    73c0:	68a2      	ldr	r2, [r4, #8]
    73c2:	b12a      	cbz	r2, 73d0 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    73c4:	2b00      	cmp	r3, #0
    73c6:	d0f1      	beq.n	73ac <bt_l2cap_disconnected+0x28>
	return node->next;
    73c8:	68a3      	ldr	r3, [r4, #8]
    73ca:	e7ef      	b.n	73ac <bt_l2cap_disconnected+0x28>
    73cc:	4623      	mov	r3, r4
    73ce:	e7ee      	b.n	73ae <bt_l2cap_disconnected+0x2a>
    73d0:	2300      	movs	r3, #0
    73d2:	e7ec      	b.n	73ae <bt_l2cap_disconnected+0x2a>
}
    73d4:	bd10      	pop	{r4, pc}

000073d6 <bt_l2cap_create_pdu>:
{
    73d6:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    73d8:	3104      	adds	r1, #4
    73da:	f7ff fc61 	bl	6ca0 <bt_conn_create_pdu>
}
    73de:	bd08      	pop	{r3, pc}

000073e0 <l2cap_create_le_sig_pdu>:
{
    73e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73e2:	460f      	mov	r7, r1
    73e4:	4616      	mov	r6, r2
    73e6:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    73e8:	2100      	movs	r1, #0
    73ea:	4608      	mov	r0, r1
    73ec:	f7ff fff3 	bl	73d6 <bt_l2cap_create_pdu>
    73f0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    73f2:	2104      	movs	r1, #4
    73f4:	3008      	adds	r0, #8
    73f6:	f012 feed 	bl	1a1d4 <net_buf_simple_add>
	hdr->code = code;
    73fa:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    73fc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    73fe:	8045      	strh	r5, [r0, #2]
}
    7400:	4620      	mov	r0, r4
    7402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007404 <l2cap_chan_create_seg>:
{
    7404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7408:	4605      	mov	r5, r0
    740a:	460c      	mov	r4, r1
    740c:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    740e:	7988      	ldrb	r0, [r1, #6]
    7410:	f012 fe1a 	bl	1a048 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7414:	89a3      	ldrh	r3, [r4, #12]
    7416:	4443      	add	r3, r8
    7418:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    741c:	4293      	cmp	r3, r2
    741e:	d802      	bhi.n	7426 <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7420:	8ac3      	ldrh	r3, [r0, #22]
    7422:	2b03      	cmp	r3, #3
    7424:	d815      	bhi.n	7452 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7426:	79a0      	ldrb	r0, [r4, #6]
    7428:	f012 fe0e 	bl	1a048 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    742c:	8ac3      	ldrh	r3, [r0, #22]
    742e:	2b03      	cmp	r3, #3
    7430:	d902      	bls.n	7438 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    7432:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7434:	2b4b      	cmp	r3, #75	; 0x4b
    7436:	d82e      	bhi.n	7496 <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7438:	2100      	movs	r1, #0
    743a:	4608      	mov	r0, r1
    743c:	f7ff ffcb 	bl	73d6 <bt_l2cap_create_pdu>
    7440:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    7442:	f1b8 0f00 	cmp.w	r8, #0
    7446:	d038      	beq.n	74ba <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7448:	f106 0008 	add.w	r0, r6, #8
    744c:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    744e:	2100      	movs	r1, #0
    7450:	e02e      	b.n	74b0 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7452:	fa1f f688 	uxth.w	r6, r8
    7456:	3608      	adds	r6, #8
    7458:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    745a:	f104 0708 	add.w	r7, r4, #8
    745e:	4638      	mov	r0, r7
    7460:	f012 ff1d 	bl	1a29e <net_buf_simple_headroom>
    7464:	42b0      	cmp	r0, r6
    7466:	d3de      	bcc.n	7426 <l2cap_chan_create_seg+0x22>
    7468:	6823      	ldr	r3, [r4, #0]
    746a:	2b00      	cmp	r3, #0
    746c:	d1db      	bne.n	7426 <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    746e:	f1b8 0f00 	cmp.w	r8, #0
    7472:	d00b      	beq.n	748c <l2cap_chan_create_seg+0x88>
    7474:	4623      	mov	r3, r4
    7476:	2100      	movs	r1, #0
    7478:	e002      	b.n	7480 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    747a:	899a      	ldrh	r2, [r3, #12]
    747c:	4411      	add	r1, r2
		buf = buf->frags;
    747e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7480:	2b00      	cmp	r3, #0
    7482:	d1fa      	bne.n	747a <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    7484:	b289      	uxth	r1, r1
    7486:	4638      	mov	r0, r7
    7488:	f012 fee3 	bl	1a252 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    748c:	4620      	mov	r0, r4
    748e:	f012 fe71 	bl	1a174 <net_buf_ref>
    7492:	4606      	mov	r6, r0
    7494:	e02f      	b.n	74f6 <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    7496:	2100      	movs	r1, #0
    7498:	f012 fde2 	bl	1a060 <net_buf_alloc>
		if (seg) {
    749c:	4606      	mov	r6, r0
    749e:	2800      	cmp	r0, #0
    74a0:	d0ca      	beq.n	7438 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    74a2:	2108      	movs	r1, #8
    74a4:	f012 fe37 	bl	1a116 <net_buf_reserve>
    74a8:	e7cb      	b.n	7442 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    74aa:	899a      	ldrh	r2, [r3, #12]
    74ac:	4411      	add	r1, r2
		buf = buf->frags;
    74ae:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    74b0:	2b00      	cmp	r3, #0
    74b2:	d1fa      	bne.n	74aa <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    74b4:	b289      	uxth	r1, r1
    74b6:	f012 fea5 	bl	1a204 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    74ba:	f106 0708 	add.w	r7, r6, #8
    74be:	4638      	mov	r0, r7
    74c0:	f012 fef1 	bl	1a2a6 <net_buf_simple_tailroom>
    74c4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    74c8:	eba5 0308 	sub.w	r3, r5, r8
    74cc:	4298      	cmp	r0, r3
    74ce:	d315      	bcc.n	74fc <l2cap_chan_create_seg+0xf8>
    74d0:	fa1f f888 	uxth.w	r8, r8
    74d4:	eba5 0508 	sub.w	r5, r5, r8
    74d8:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    74da:	89a0      	ldrh	r0, [r4, #12]
    74dc:	4285      	cmp	r5, r0
    74de:	bf28      	it	cs
    74e0:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    74e2:	462a      	mov	r2, r5
    74e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    74e8:	4638      	mov	r0, r7
    74ea:	f012 fe79 	bl	1a1e0 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    74ee:	4629      	mov	r1, r5
    74f0:	4620      	mov	r0, r4
    74f2:	f012 febc 	bl	1a26e <net_buf_simple_pull>
}
    74f6:	4630      	mov	r0, r6
    74f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    74fc:	4638      	mov	r0, r7
    74fe:	f012 fed2 	bl	1a2a6 <net_buf_simple_tailroom>
    7502:	b285      	uxth	r5, r0
    7504:	e7e9      	b.n	74da <l2cap_chan_create_seg+0xd6>

00007506 <bt_l2cap_send_cb>:
{
    7506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7508:	4605      	mov	r5, r0
    750a:	460f      	mov	r7, r1
    750c:	4614      	mov	r4, r2
    750e:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    7510:	2104      	movs	r1, #4
    7512:	f102 0008 	add.w	r0, r2, #8
    7516:	f012 fe94 	bl	1a242 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    751a:	89a3      	ldrh	r3, [r4, #12]
    751c:	3b04      	subs	r3, #4
    751e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    7520:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    7522:	4632      	mov	r2, r6
    7524:	4621      	mov	r1, r4
    7526:	4628      	mov	r0, r5
    7528:	f7fe ffbe 	bl	64a8 <bt_conn_send_cb>
    752c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007530 <l2cap_chan_send_req>:
{
    7530:	b538      	push	{r3, r4, r5, lr}
    7532:	4604      	mov	r4, r0
    7534:	460d      	mov	r5, r1
	if (timeout) {
    7536:	b94a      	cbnz	r2, 754c <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7538:	3010      	adds	r0, #16
    753a:	f021 ff39 	bl	293b0 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    753e:	2300      	movs	r3, #0
    7540:	462a      	mov	r2, r5
    7542:	2105      	movs	r1, #5
    7544:	6820      	ldr	r0, [r4, #0]
    7546:	f7ff ffde 	bl	7506 <bt_l2cap_send_cb>
    754a:	bd38      	pop	{r3, r4, r5, pc}
    754c:	f100 0110 	add.w	r1, r0, #16
    7550:	4801      	ldr	r0, [pc, #4]	; (7558 <l2cap_chan_send_req+0x28>)
    7552:	f021 ff87 	bl	29464 <k_delayed_work_submit_to_queue>
    7556:	e7f2      	b.n	753e <l2cap_chan_send_req+0xe>
    7558:	20002b10 	.word	0x20002b10

0000755c <l2cap_le_conn_req>:
{
    755c:	b538      	push	{r3, r4, r5, lr}
    755e:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7560:	f7ff fca6 	bl	6eb0 <get_ident>
    7564:	4602      	mov	r2, r0
    7566:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    756a:	230a      	movs	r3, #10
    756c:	2114      	movs	r1, #20
    756e:	2000      	movs	r0, #0
    7570:	f7ff ff36 	bl	73e0 <l2cap_create_le_sig_pdu>
    7574:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7576:	210a      	movs	r1, #10
    7578:	3008      	adds	r0, #8
    757a:	f012 fe2b 	bl	1a1d4 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    757e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    7580:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7582:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7586:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7588:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    758c:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    758e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    7592:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7594:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    7598:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    759a:	f649 4240 	movw	r2, #40000	; 0x9c40
    759e:	4629      	mov	r1, r5
    75a0:	4620      	mov	r0, r4
    75a2:	f7ff ffc5 	bl	7530 <l2cap_chan_send_req>
}
    75a6:	2000      	movs	r0, #0
    75a8:	bd38      	pop	{r3, r4, r5, pc}

000075aa <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    75aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    75ae:	2b01      	cmp	r3, #1
    75b0:	d000      	beq.n	75b4 <l2cap_le_encrypt_change+0xa>
    75b2:	4770      	bx	lr
    75b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    75b8:	2b00      	cmp	r3, #0
    75ba:	d1fa      	bne.n	75b2 <l2cap_le_encrypt_change+0x8>
{
    75bc:	b510      	push	{r4, lr}
    75be:	4604      	mov	r4, r0
	if (status) {
    75c0:	b911      	cbnz	r1, 75c8 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    75c2:	f7ff ffcb 	bl	755c <l2cap_le_conn_req>
    75c6:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    75c8:	4601      	mov	r1, r0
    75ca:	6800      	ldr	r0, [r0, #0]
    75cc:	f7ff fe06 	bl	71dc <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    75d0:	4620      	mov	r0, r4
    75d2:	f7ff fe38 	bl	7246 <bt_l2cap_chan_del>
		return;
    75d6:	bd10      	pop	{r4, pc}

000075d8 <bt_l2cap_encrypt_change>:
{
    75d8:	b538      	push	{r3, r4, r5, lr}
    75da:	460d      	mov	r5, r1
	return list->head;
    75dc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    75de:	b10c      	cbz	r4, 75e4 <bt_l2cap_encrypt_change+0xc>
    75e0:	3c08      	subs	r4, #8
    75e2:	e00a      	b.n	75fa <bt_l2cap_encrypt_change+0x22>
    75e4:	2400      	movs	r4, #0
    75e6:	e008      	b.n	75fa <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75e8:	f114 0308 	adds.w	r3, r4, #8
    75ec:	d012      	beq.n	7614 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    75ee:	68a2      	ldr	r2, [r4, #8]
    75f0:	b192      	cbz	r2, 7618 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75f2:	b103      	cbz	r3, 75f6 <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    75f4:	68a3      	ldr	r3, [r4, #8]
    75f6:	f1a3 0408 	sub.w	r4, r3, #8
    75fa:	b17c      	cbz	r4, 761c <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    75fc:	4629      	mov	r1, r5
    75fe:	4620      	mov	r0, r4
    7600:	f7ff ffd3 	bl	75aa <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    7604:	6863      	ldr	r3, [r4, #4]
    7606:	689b      	ldr	r3, [r3, #8]
    7608:	2b00      	cmp	r3, #0
    760a:	d0ed      	beq.n	75e8 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    760c:	4629      	mov	r1, r5
    760e:	4620      	mov	r0, r4
    7610:	4798      	blx	r3
    7612:	e7e9      	b.n	75e8 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7614:	461a      	mov	r2, r3
    7616:	e7eb      	b.n	75f0 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7618:	2400      	movs	r4, #0
    761a:	e7ee      	b.n	75fa <bt_l2cap_encrypt_change+0x22>
}
    761c:	bd38      	pop	{r3, r4, r5, pc}

0000761e <l2cap_chan_update_credits>:
{
    761e:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    7620:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    7622:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    7626:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    762a:	d900      	bls.n	762e <l2cap_chan_update_credits+0x10>
    762c:	bd70      	pop	{r4, r5, r6, pc}
    762e:	460e      	mov	r6, r1
    7630:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    7632:	b2a4      	uxth	r4, r4
    7634:	1b1b      	subs	r3, r3, r4
    7636:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    7638:	4621      	mov	r1, r4
    763a:	f7ff fd07 	bl	704c <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    763e:	f7ff fc37 	bl	6eb0 <get_ident>
    7642:	2304      	movs	r3, #4
    7644:	4602      	mov	r2, r0
    7646:	2116      	movs	r1, #22
    7648:	4630      	mov	r0, r6
    764a:	f7ff fec9 	bl	73e0 <l2cap_create_le_sig_pdu>
    764e:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    7650:	2104      	movs	r1, #4
    7652:	3008      	adds	r0, #8
    7654:	f012 fdbe 	bl	1a1d4 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7658:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    765c:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    765e:	8044      	strh	r4, [r0, #2]
    7660:	2300      	movs	r3, #0
    7662:	4632      	mov	r2, r6
    7664:	2105      	movs	r1, #5
    7666:	6828      	ldr	r0, [r5, #0]
    7668:	f7ff ff4d 	bl	7506 <bt_l2cap_send_cb>
}
    766c:	e7de      	b.n	762c <l2cap_chan_update_credits+0xe>

0000766e <l2cap_chan_le_send>:
{
    766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7670:	4604      	mov	r4, r0
    7672:	460d      	mov	r5, r1
    7674:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7676:	2100      	movs	r1, #0
    7678:	3068      	adds	r0, #104	; 0x68
    767a:	f021 f8bd 	bl	287f8 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    767e:	b9b0      	cbnz	r0, 76ae <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    7680:	4632      	mov	r2, r6
    7682:	4629      	mov	r1, r5
    7684:	4620      	mov	r0, r4
    7686:	f7ff febd 	bl	7404 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    768a:	6827      	ldr	r7, [r4, #0]
    768c:	b157      	cbz	r7, 76a4 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    768e:	8985      	ldrh	r5, [r0, #12]
    7690:	1bad      	subs	r5, r5, r6
    7692:	2300      	movs	r3, #0
    7694:	4602      	mov	r2, r0
    7696:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    769a:	4638      	mov	r0, r7
    769c:	f7ff ff33 	bl	7506 <bt_l2cap_send_cb>
}
    76a0:	4628      	mov	r0, r5
    76a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    76a4:	f012 fd4a 	bl	1a13c <net_buf_unref>
		return -ECONNRESET;
    76a8:	f06f 0567 	mvn.w	r5, #103	; 0x67
    76ac:	e7f8      	b.n	76a0 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    76ae:	f06f 050a 	mvn.w	r5, #10
    76b2:	e7f5      	b.n	76a0 <l2cap_chan_le_send+0x32>

000076b4 <l2cap_chan_le_send_sdu>:
{
    76b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76b8:	b082      	sub	sp, #8
    76ba:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    76bc:	680d      	ldr	r5, [r1, #0]
    76be:	462b      	mov	r3, r5
	size_t bytes = 0;
    76c0:	2200      	movs	r2, #0
    76c2:	e002      	b.n	76ca <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    76c4:	899c      	ldrh	r4, [r3, #12]
    76c6:	4422      	add	r2, r4
		buf = buf->frags;
    76c8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    76ca:	2b00      	cmp	r3, #0
    76cc:	d1fa      	bne.n	76c4 <l2cap_chan_le_send_sdu+0x10>
    76ce:	9b01      	ldr	r3, [sp, #4]
    76d0:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    76d2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    76d6:	4294      	cmp	r4, r2
    76d8:	dc54      	bgt.n	7784 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    76da:	89aa      	ldrh	r2, [r5, #12]
    76dc:	b912      	cbnz	r2, 76e4 <l2cap_chan_le_send_sdu+0x30>
    76de:	682a      	ldr	r2, [r5, #0]
    76e0:	b102      	cbz	r2, 76e4 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    76e2:	4615      	mov	r5, r2
    76e4:	4688      	mov	r8, r1
    76e6:	4607      	mov	r7, r0
	if (!sent) {
    76e8:	b10b      	cbz	r3, 76ee <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    76ea:	2600      	movs	r6, #0
    76ec:	e024      	b.n	7738 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    76ee:	2202      	movs	r2, #2
    76f0:	4629      	mov	r1, r5
    76f2:	f7ff ffbc 	bl	766e <l2cap_chan_le_send>
		if (ret < 0) {
    76f6:	1e06      	subs	r6, r0, #0
    76f8:	db01      	blt.n	76fe <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    76fa:	9601      	str	r6, [sp, #4]
    76fc:	e7f5      	b.n	76ea <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    76fe:	f116 0f0b 	cmn.w	r6, #11
    7702:	d002      	beq.n	770a <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    7704:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    7708:	e038      	b.n	777c <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    770a:	f105 0010 	add.w	r0, r5, #16
    770e:	89eb      	ldrh	r3, [r5, #14]
    7710:	4418      	add	r0, r3
    7712:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    7714:	2204      	movs	r2, #4
    7716:	eb0d 0102 	add.w	r1, sp, r2
    771a:	f020 0003 	bic.w	r0, r0, #3
    771e:	f7f8 fdcf 	bl	2c0 <memcpy>
    7722:	e7ef      	b.n	7704 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    7724:	2200      	movs	r2, #0
    7726:	4629      	mov	r1, r5
    7728:	4638      	mov	r0, r7
    772a:	f7ff ffa0 	bl	766e <l2cap_chan_le_send>
		if (ret < 0) {
    772e:	1e06      	subs	r6, r0, #0
    7730:	db0e      	blt.n	7750 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    7732:	9b01      	ldr	r3, [sp, #4]
    7734:	4433      	add	r3, r6
    7736:	9301      	str	r3, [sp, #4]
    7738:	9b01      	ldr	r3, [sp, #4]
    773a:	429c      	cmp	r4, r3
    773c:	dd1b      	ble.n	7776 <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    773e:	89ab      	ldrh	r3, [r5, #12]
    7740:	2b00      	cmp	r3, #0
    7742:	d1ef      	bne.n	7724 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    7744:	4629      	mov	r1, r5
    7746:	2000      	movs	r0, #0
    7748:	f012 fd38 	bl	1a1bc <net_buf_frag_del>
    774c:	4605      	mov	r5, r0
    774e:	e7e9      	b.n	7724 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    7750:	f116 0f0b 	cmn.w	r6, #11
    7754:	d002      	beq.n	775c <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    7756:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    775a:	e00f      	b.n	777c <l2cap_chan_le_send_sdu+0xc8>
    775c:	f105 0010 	add.w	r0, r5, #16
    7760:	89eb      	ldrh	r3, [r5, #14]
    7762:	4418      	add	r0, r3
    7764:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    7766:	2204      	movs	r2, #4
    7768:	eb0d 0102 	add.w	r1, sp, r2
    776c:	f020 0003 	bic.w	r0, r0, #3
    7770:	f7f8 fda6 	bl	2c0 <memcpy>
    7774:	e7ef      	b.n	7756 <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    7776:	4628      	mov	r0, r5
    7778:	f012 fce0 	bl	1a13c <net_buf_unref>
}
    777c:	4630      	mov	r0, r6
    777e:	b002      	add	sp, #8
    7780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    7784:	f06f 0679 	mvn.w	r6, #121	; 0x79
    7788:	e7f8      	b.n	777c <l2cap_chan_le_send_sdu+0xc8>

0000778a <l2cap_chan_le_send_resume>:
{
    778a:	b510      	push	{r4, lr}
    778c:	b082      	sub	sp, #8
    778e:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    7790:	4620      	mov	r0, r4
    7792:	f7ff fc91 	bl	70b8 <l2cap_chan_le_get_tx_buf>
    7796:	9001      	str	r0, [sp, #4]
    7798:	b180      	cbz	r0, 77bc <l2cap_chan_le_send_resume+0x32>
    779a:	f100 0310 	add.w	r3, r0, #16
    779e:	89c2      	ldrh	r2, [r0, #14]
    77a0:	4413      	add	r3, r2
    77a2:	3303      	adds	r3, #3
    77a4:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    77a8:	681a      	ldr	r2, [r3, #0]
    77aa:	a901      	add	r1, sp, #4
    77ac:	4620      	mov	r0, r4
    77ae:	f7ff ff81 	bl	76b4 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    77b2:	2800      	cmp	r0, #0
    77b4:	daec      	bge.n	7790 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    77b6:	f110 0f0b 	cmn.w	r0, #11
    77ba:	d001      	beq.n	77c0 <l2cap_chan_le_send_resume+0x36>
}
    77bc:	b002      	add	sp, #8
    77be:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    77c0:	9b01      	ldr	r3, [sp, #4]
    77c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    77c6:	e7f9      	b.n	77bc <l2cap_chan_le_send_resume+0x32>

000077c8 <l2cap_send_reject>:
{
    77c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77cc:	4680      	mov	r8, r0
    77ce:	4691      	mov	r9, r2
    77d0:	461e      	mov	r6, r3
    77d2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    77d6:	1cbb      	adds	r3, r7, #2
    77d8:	460a      	mov	r2, r1
    77da:	2101      	movs	r1, #1
    77dc:	2000      	movs	r0, #0
    77de:	f7ff fdff 	bl	73e0 <l2cap_create_le_sig_pdu>
    77e2:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    77e4:	f100 0508 	add.w	r5, r0, #8
    77e8:	2102      	movs	r1, #2
    77ea:	4628      	mov	r0, r5
    77ec:	f012 fcf2 	bl	1a1d4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    77f0:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    77f4:	b126      	cbz	r6, 7800 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    77f6:	463a      	mov	r2, r7
    77f8:	4631      	mov	r1, r6
    77fa:	4628      	mov	r0, r5
    77fc:	f012 fcf0 	bl	1a1e0 <net_buf_simple_add_mem>
    7800:	2300      	movs	r3, #0
    7802:	4622      	mov	r2, r4
    7804:	2105      	movs	r1, #5
    7806:	4640      	mov	r0, r8
    7808:	f7ff fe7d 	bl	7506 <bt_l2cap_send_cb>
    780c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007810 <le_conn_param_update_req>:
{
    7810:	b570      	push	{r4, r5, r6, lr}
    7812:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7814:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    7816:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7818:	8990      	ldrh	r0, [r2, #12]
    781a:	2807      	cmp	r0, #7
    781c:	d908      	bls.n	7830 <le_conn_param_update_req+0x20>
    781e:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    7820:	78e2      	ldrb	r2, [r4, #3]
    7822:	b13a      	cbz	r2, 7834 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    7824:	2200      	movs	r2, #0
    7826:	9200      	str	r2, [sp, #0]
    7828:	4613      	mov	r3, r2
    782a:	4620      	mov	r0, r4
    782c:	f7ff ffcc 	bl	77c8 <l2cap_send_reject>
}
    7830:	b004      	add	sp, #16
    7832:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    7834:	881a      	ldrh	r2, [r3, #0]
    7836:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    783a:	885a      	ldrh	r2, [r3, #2]
    783c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    7840:	889a      	ldrh	r2, [r3, #4]
    7842:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    7846:	88db      	ldrh	r3, [r3, #6]
    7848:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    784c:	2302      	movs	r3, #2
    784e:	460a      	mov	r2, r1
    7850:	2113      	movs	r1, #19
    7852:	f7ff fdc5 	bl	73e0 <l2cap_create_le_sig_pdu>
    7856:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    7858:	a902      	add	r1, sp, #8
    785a:	4620      	mov	r0, r4
    785c:	f7fe fcc2 	bl	61e4 <le_param_req>
    7860:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7862:	2102      	movs	r1, #2
    7864:	f106 0008 	add.w	r0, r6, #8
    7868:	f012 fcb4 	bl	1a1d4 <net_buf_simple_add>
	if (accepted) {
    786c:	b17d      	cbz	r5, 788e <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    786e:	2300      	movs	r3, #0
    7870:	7003      	strb	r3, [r0, #0]
    7872:	7043      	strb	r3, [r0, #1]
    7874:	2300      	movs	r3, #0
    7876:	4632      	mov	r2, r6
    7878:	2105      	movs	r1, #5
    787a:	4620      	mov	r0, r4
    787c:	f7ff fe43 	bl	7506 <bt_l2cap_send_cb>
	if (accepted) {
    7880:	2d00      	cmp	r5, #0
    7882:	d0d5      	beq.n	7830 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    7884:	a902      	add	r1, sp, #8
    7886:	4620      	mov	r0, r4
    7888:	f7ff f976 	bl	6b78 <bt_conn_le_conn_update>
    788c:	e7d0      	b.n	7830 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    788e:	2301      	movs	r3, #1
    7890:	7003      	strb	r3, [r0, #0]
    7892:	2300      	movs	r3, #0
    7894:	7043      	strb	r3, [r0, #1]
    7896:	e7ed      	b.n	7874 <le_conn_param_update_req+0x64>

00007898 <le_disconn_req>:
{
    7898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    789c:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    789e:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    78a0:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    78a2:	8993      	ldrh	r3, [r2, #12]
    78a4:	2b03      	cmp	r3, #3
    78a6:	d802      	bhi.n	78ae <le_disconn_req+0x16>
}
    78a8:	b004      	add	sp, #16
    78aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ae:	4614      	mov	r4, r2
    78b0:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    78b2:	8879      	ldrh	r1, [r7, #2]
    78b4:	4630      	mov	r0, r6
    78b6:	f7ff fb5f 	bl	6f78 <l2cap_remove_tx_cid>
	if (!chan) {
    78ba:	4680      	mov	r8, r0
    78bc:	b1d0      	cbz	r0, 78f4 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    78be:	2304      	movs	r3, #4
    78c0:	462a      	mov	r2, r5
    78c2:	2107      	movs	r1, #7
    78c4:	4620      	mov	r0, r4
    78c6:	f7ff fd8b 	bl	73e0 <l2cap_create_le_sig_pdu>
    78ca:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    78cc:	2104      	movs	r1, #4
    78ce:	3008      	adds	r0, #8
    78d0:	f012 fc80 	bl	1a1d4 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    78d4:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    78d8:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    78da:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    78de:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    78e0:	4640      	mov	r0, r8
    78e2:	f7ff fcb0 	bl	7246 <bt_l2cap_chan_del>
    78e6:	2300      	movs	r3, #0
    78e8:	4622      	mov	r2, r4
    78ea:	2105      	movs	r1, #5
    78ec:	4630      	mov	r0, r6
    78ee:	f7ff fe0a 	bl	7506 <bt_l2cap_send_cb>
    78f2:	e7d9      	b.n	78a8 <le_disconn_req+0x10>
		data.scid = req->scid;
    78f4:	887b      	ldrh	r3, [r7, #2]
    78f6:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    78fa:	883b      	ldrh	r3, [r7, #0]
    78fc:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7900:	2304      	movs	r3, #4
    7902:	9300      	str	r3, [sp, #0]
    7904:	ab03      	add	r3, sp, #12
    7906:	2202      	movs	r2, #2
    7908:	4629      	mov	r1, r5
    790a:	4630      	mov	r0, r6
    790c:	f7ff ff5c 	bl	77c8 <l2cap_send_reject>
    7910:	e7ca      	b.n	78a8 <le_disconn_req+0x10>

00007912 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    7912:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7914:	b108      	cbz	r0, 791a <bt_l2cap_le_lookup_tx_cid+0x8>
    7916:	3808      	subs	r0, #8
    7918:	e006      	b.n	7928 <bt_l2cap_le_lookup_tx_cid+0x16>
    791a:	2000      	movs	r0, #0
    791c:	e004      	b.n	7928 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    791e:	461a      	mov	r2, r3
    7920:	e00b      	b.n	793a <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    7922:	6883      	ldr	r3, [r0, #8]
    7924:	f1a3 0008 	sub.w	r0, r3, #8
    7928:	b168      	cbz	r0, 7946 <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    792a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    792e:	428b      	cmp	r3, r1
    7930:	d009      	beq.n	7946 <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7932:	f110 0308 	adds.w	r3, r0, #8
    7936:	d0f2      	beq.n	791e <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    7938:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    793a:	b112      	cbz	r2, 7942 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    793c:	2b00      	cmp	r3, #0
    793e:	d1f0      	bne.n	7922 <bt_l2cap_le_lookup_tx_cid+0x10>
    7940:	e7f0      	b.n	7924 <bt_l2cap_le_lookup_tx_cid+0x12>
    7942:	2000      	movs	r0, #0
    7944:	e7f0      	b.n	7928 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    7946:	4770      	bx	lr

00007948 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    7948:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    794a:	b108      	cbz	r0, 7950 <bt_l2cap_le_lookup_rx_cid+0x8>
    794c:	3808      	subs	r0, #8
    794e:	e006      	b.n	795e <bt_l2cap_le_lookup_rx_cid+0x16>
    7950:	2000      	movs	r0, #0
    7952:	e004      	b.n	795e <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7954:	461a      	mov	r2, r3
    7956:	e00b      	b.n	7970 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    7958:	6883      	ldr	r3, [r0, #8]
    795a:	f1a3 0008 	sub.w	r0, r3, #8
    795e:	b168      	cbz	r0, 797c <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7960:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7964:	428b      	cmp	r3, r1
    7966:	d009      	beq.n	797c <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7968:	f110 0308 	adds.w	r3, r0, #8
    796c:	d0f2      	beq.n	7954 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    796e:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7970:	b112      	cbz	r2, 7978 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7972:	2b00      	cmp	r3, #0
    7974:	d1f0      	bne.n	7958 <bt_l2cap_le_lookup_rx_cid+0x10>
    7976:	e7f0      	b.n	795a <bt_l2cap_le_lookup_rx_cid+0x12>
    7978:	2000      	movs	r0, #0
    797a:	e7f0      	b.n	795e <bt_l2cap_le_lookup_rx_cid+0x16>
}
    797c:	4770      	bx	lr

0000797e <l2cap_chan_alloc_cid>:
{
    797e:	b570      	push	{r4, r5, r6, lr}
    7980:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    7982:	460d      	mov	r5, r1
    7984:	b1a1      	cbz	r1, 79b0 <l2cap_chan_alloc_cid+0x32>
    7986:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    798a:	b9ab      	cbnz	r3, 79b8 <l2cap_chan_alloc_cid+0x3a>
    798c:	2440      	movs	r4, #64	; 0x40
    798e:	e001      	b.n	7994 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7990:	3401      	adds	r4, #1
    7992:	b2a4      	uxth	r4, r4
    7994:	2c7f      	cmp	r4, #127	; 0x7f
    7996:	d80d      	bhi.n	79b4 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    7998:	2d00      	cmp	r5, #0
    799a:	d0f9      	beq.n	7990 <l2cap_chan_alloc_cid+0x12>
    799c:	4621      	mov	r1, r4
    799e:	4630      	mov	r0, r6
    79a0:	f7ff ffd2 	bl	7948 <bt_l2cap_le_lookup_rx_cid>
    79a4:	2800      	cmp	r0, #0
    79a6:	d1f3      	bne.n	7990 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    79a8:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    79ac:	4628      	mov	r0, r5
    79ae:	bd70      	pop	{r4, r5, r6, pc}
    79b0:	2440      	movs	r4, #64	; 0x40
    79b2:	e7ef      	b.n	7994 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    79b4:	2000      	movs	r0, #0
    79b6:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    79b8:	4608      	mov	r0, r1
}
    79ba:	bd70      	pop	{r4, r5, r6, pc}

000079bc <l2cap_chan_add>:
{
    79bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79be:	4606      	mov	r6, r0
    79c0:	460c      	mov	r4, r1
    79c2:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    79c4:	f7ff ffdb 	bl	797e <l2cap_chan_alloc_cid>
	if (!ch) {
    79c8:	b1c0      	cbz	r0, 79fc <l2cap_chan_add+0x40>
    79ca:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    79cc:	490c      	ldr	r1, [pc, #48]	; (7a00 <l2cap_chan_add+0x44>)
    79ce:	f104 0010 	add.w	r0, r4, #16
    79d2:	f021 fccf 	bl	29374 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    79d6:	463a      	mov	r2, r7
    79d8:	4621      	mov	r1, r4
    79da:	4630      	mov	r0, r6
    79dc:	f7ff fcc2 	bl	7364 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    79e0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    79e4:	3b40      	subs	r3, #64	; 0x40
    79e6:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    79e8:	2b3f      	cmp	r3, #63	; 0x3f
    79ea:	d901      	bls.n	79f0 <l2cap_chan_add+0x34>
	return true;
    79ec:	2001      	movs	r0, #1
}
    79ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    79f0:	2101      	movs	r1, #1
    79f2:	4620      	mov	r0, r4
    79f4:	f7ff fc24 	bl	7240 <bt_l2cap_chan_set_state>
	return true;
    79f8:	2001      	movs	r0, #1
    79fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    79fc:	2000      	movs	r0, #0
    79fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a00:	00007271 	.word	0x00007271

00007a04 <bt_l2cap_connected>:
{
    7a04:	b530      	push	{r4, r5, lr}
    7a06:	b083      	sub	sp, #12
    7a08:	4605      	mov	r5, r0
	return list->head;
    7a0a:	4b18      	ldr	r3, [pc, #96]	; (7a6c <bt_l2cap_connected+0x68>)
    7a0c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7a0e:	b10c      	cbz	r4, 7a14 <bt_l2cap_connected+0x10>
    7a10:	3c08      	subs	r4, #8
    7a12:	e00a      	b.n	7a2a <bt_l2cap_connected+0x26>
    7a14:	2400      	movs	r4, #0
    7a16:	e008      	b.n	7a2a <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a18:	f114 0308 	adds.w	r3, r4, #8
    7a1c:	d01f      	beq.n	7a5e <bt_l2cap_connected+0x5a>
	return node->next;
    7a1e:	68a2      	ldr	r2, [r4, #8]
    7a20:	b1fa      	cbz	r2, 7a62 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a22:	b103      	cbz	r3, 7a26 <bt_l2cap_connected+0x22>
	return node->next;
    7a24:	68a3      	ldr	r3, [r4, #8]
    7a26:	f1a3 0408 	sub.w	r4, r3, #8
    7a2a:	b1e4      	cbz	r4, 7a66 <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    7a2c:	6863      	ldr	r3, [r4, #4]
    7a2e:	a901      	add	r1, sp, #4
    7a30:	4628      	mov	r0, r5
    7a32:	4798      	blx	r3
    7a34:	2800      	cmp	r0, #0
    7a36:	dbef      	blt.n	7a18 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    7a38:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7a3a:	8823      	ldrh	r3, [r4, #0]
    7a3c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    7a40:	8823      	ldrh	r3, [r4, #0]
    7a42:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    7a46:	2200      	movs	r2, #0
    7a48:	4628      	mov	r0, r5
    7a4a:	f7ff ffb7 	bl	79bc <l2cap_chan_add>
    7a4e:	b150      	cbz	r0, 7a66 <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    7a50:	9801      	ldr	r0, [sp, #4]
    7a52:	6843      	ldr	r3, [r0, #4]
    7a54:	681b      	ldr	r3, [r3, #0]
    7a56:	2b00      	cmp	r3, #0
    7a58:	d0de      	beq.n	7a18 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    7a5a:	4798      	blx	r3
    7a5c:	e7dc      	b.n	7a18 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a5e:	461a      	mov	r2, r3
    7a60:	e7de      	b.n	7a20 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7a62:	2400      	movs	r4, #0
    7a64:	e7e1      	b.n	7a2a <bt_l2cap_connected+0x26>
}
    7a66:	b003      	add	sp, #12
    7a68:	bd30      	pop	{r4, r5, pc}
    7a6a:	bf00      	nop
    7a6c:	200005dc 	.word	0x200005dc

00007a70 <le_conn_req>:
{
    7a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a74:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7a76:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7a78:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7a7a:	8990      	ldrh	r0, [r2, #12]
    7a7c:	2809      	cmp	r0, #9
    7a7e:	d912      	bls.n	7aa6 <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    7a80:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    7a84:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    7a88:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    7a8c:	889e      	ldrh	r6, [r3, #4]
    7a8e:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    7a90:	88df      	ldrh	r7, [r3, #6]
    7a92:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    7a96:	891d      	ldrh	r5, [r3, #8]
    7a98:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7a9c:	2816      	cmp	r0, #22
    7a9e:	d902      	bls.n	7aa6 <le_conn_req+0x36>
    7aa0:	f1be 0f16 	cmp.w	lr, #22
    7aa4:	d802      	bhi.n	7aac <le_conn_req+0x3c>
}
    7aa6:	b005      	add	sp, #20
    7aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aac:	4610      	mov	r0, r2
    7aae:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7ab0:	230a      	movs	r3, #10
    7ab2:	2115      	movs	r1, #21
    7ab4:	f7ff fc94 	bl	73e0 <l2cap_create_le_sig_pdu>
    7ab8:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7aba:	210a      	movs	r1, #10
    7abc:	3008      	adds	r0, #8
    7abe:	f012 fb89 	bl	1a1d4 <net_buf_simple_add>
    7ac2:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    7ac4:	220a      	movs	r2, #10
    7ac6:	2100      	movs	r1, #0
    7ac8:	f022 fff8 	bl	2aabc <memset>
	server = l2cap_server_lookup_psm(psm);
    7acc:	4648      	mov	r0, r9
    7ace:	f7ff fa35 	bl	6f3c <l2cap_server_lookup_psm>
	if (!server) {
    7ad2:	4681      	mov	r9, r0
    7ad4:	b168      	cbz	r0, 7af2 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    7ad6:	7a22      	ldrb	r2, [r4, #8]
    7ad8:	7883      	ldrb	r3, [r0, #2]
    7ada:	429a      	cmp	r2, r3
    7adc:	d20d      	bcs.n	7afa <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    7ade:	2305      	movs	r3, #5
    7ae0:	9a01      	ldr	r2, [sp, #4]
    7ae2:	8113      	strh	r3, [r2, #8]
    7ae4:	2300      	movs	r3, #0
    7ae6:	9a00      	ldr	r2, [sp, #0]
    7ae8:	2105      	movs	r1, #5
    7aea:	4620      	mov	r0, r4
    7aec:	f7ff fd0b 	bl	7506 <bt_l2cap_send_cb>
    7af0:	e7d9      	b.n	7aa6 <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7af2:	2302      	movs	r3, #2
    7af4:	9a01      	ldr	r2, [sp, #4]
    7af6:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7af8:	e7f4      	b.n	7ae4 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    7afa:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    7afe:	b29b      	uxth	r3, r3
    7b00:	2b3f      	cmp	r3, #63	; 0x3f
    7b02:	d903      	bls.n	7b0c <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7b04:	2309      	movs	r3, #9
    7b06:	9a01      	ldr	r2, [sp, #4]
    7b08:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7b0a:	e7eb      	b.n	7ae4 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    7b0c:	4651      	mov	r1, sl
    7b0e:	4620      	mov	r0, r4
    7b10:	f7ff feff 	bl	7912 <bt_l2cap_le_lookup_tx_cid>
    7b14:	9003      	str	r0, [sp, #12]
	if (chan) {
    7b16:	b118      	cbz	r0, 7b20 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    7b18:	230a      	movs	r3, #10
    7b1a:	9a01      	ldr	r2, [sp, #4]
    7b1c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7b1e:	e7e1      	b.n	7ae4 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    7b20:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7b24:	a903      	add	r1, sp, #12
    7b26:	4620      	mov	r0, r4
    7b28:	4798      	blx	r3
    7b2a:	2800      	cmp	r0, #0
    7b2c:	da03      	bge.n	7b36 <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7b2e:	2304      	movs	r3, #4
    7b30:	9a01      	ldr	r2, [sp, #4]
    7b32:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7b34:	e7d6      	b.n	7ae4 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    7b36:	9903      	ldr	r1, [sp, #12]
    7b38:	f899 3002 	ldrb.w	r3, [r9, #2]
    7b3c:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7b40:	4a1e      	ldr	r2, [pc, #120]	; (7bbc <le_conn_req+0x14c>)
    7b42:	4620      	mov	r0, r4
    7b44:	f7ff ff3a 	bl	79bc <l2cap_chan_add>
    7b48:	b918      	cbnz	r0, 7b52 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7b4a:	2304      	movs	r3, #4
    7b4c:	9a01      	ldr	r2, [sp, #4]
    7b4e:	8113      	strh	r3, [r2, #8]
    7b50:	e7c8      	b.n	7ae4 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7b52:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    7b56:	4650      	mov	r0, sl
    7b58:	f7ff fabd 	bl	70d6 <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    7b5c:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    7b60:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    7b64:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    7b68:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    7b6c:	4659      	mov	r1, fp
    7b6e:	4650      	mov	r0, sl
    7b70:	f7ff fa79 	bl	7066 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    7b74:	4650      	mov	r0, sl
    7b76:	f7ff fac1 	bl	70fc <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7b7a:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    7b7e:	4650      	mov	r0, sl
    7b80:	f7ff fa64 	bl	704c <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    7b84:	9803      	ldr	r0, [sp, #12]
    7b86:	f8b9 3000 	ldrh.w	r3, [r9]
    7b8a:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    7b8c:	2103      	movs	r1, #3
    7b8e:	f7ff fb57 	bl	7240 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    7b92:	9803      	ldr	r0, [sp, #12]
    7b94:	6843      	ldr	r3, [r0, #4]
    7b96:	681b      	ldr	r3, [r3, #0]
    7b98:	b103      	cbz	r3, 7b9c <le_conn_req+0x12c>
			chan->ops->connected(chan);
    7b9a:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7b9c:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    7ba0:	9901      	ldr	r1, [sp, #4]
    7ba2:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7ba4:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    7ba8:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7baa:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    7bae:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7bb0:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    7bb4:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    7bb6:	2300      	movs	r3, #0
    7bb8:	810b      	strh	r3, [r1, #8]
    7bba:	e793      	b.n	7ae4 <le_conn_req+0x74>
    7bbc:	00007081 	.word	0x00007081

00007bc0 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7bc0:	1e53      	subs	r3, r2, #1
    7bc2:	b29b      	uxth	r3, r3
    7bc4:	2bfe      	cmp	r3, #254	; 0xfe
    7bc6:	d814      	bhi.n	7bf2 <l2cap_le_connect+0x32>
{
    7bc8:	b570      	push	{r4, r5, r6, lr}
    7bca:	4615      	mov	r5, r2
    7bcc:	460c      	mov	r4, r1
    7bce:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    7bd0:	4608      	mov	r0, r1
    7bd2:	f7ff fa80 	bl	70d6 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    7bd6:	4620      	mov	r0, r4
    7bd8:	f7ff fa90 	bl	70fc <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    7bdc:	4a08      	ldr	r2, [pc, #32]	; (7c00 <l2cap_le_connect+0x40>)
    7bde:	4621      	mov	r1, r4
    7be0:	4630      	mov	r0, r6
    7be2:	f7ff feeb 	bl	79bc <l2cap_chan_add>
    7be6:	b138      	cbz	r0, 7bf8 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    7be8:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    7bea:	4620      	mov	r0, r4
    7bec:	f7ff fcb6 	bl	755c <l2cap_le_conn_req>
    7bf0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    7bf2:	f06f 0015 	mvn.w	r0, #21
    7bf6:	4770      	bx	lr
		return -ENOMEM;
    7bf8:	f06f 000b 	mvn.w	r0, #11
}
    7bfc:	bd70      	pop	{r4, r5, r6, pc}
    7bfe:	bf00      	nop
    7c00:	00007081 	.word	0x00007081

00007c04 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    7c04:	8802      	ldrh	r2, [r0, #0]
    7c06:	1e53      	subs	r3, r2, #1
    7c08:	b29b      	uxth	r3, r3
    7c0a:	2bfe      	cmp	r3, #254	; 0xfe
    7c0c:	d81d      	bhi.n	7c4a <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7c0e:	6843      	ldr	r3, [r0, #4]
    7c10:	b1f3      	cbz	r3, 7c50 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    7c12:	7883      	ldrb	r3, [r0, #2]
    7c14:	2b04      	cmp	r3, #4
    7c16:	d81e      	bhi.n	7c56 <bt_l2cap_server_register+0x52>
{
    7c18:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    7c1a:	b90b      	cbnz	r3, 7c20 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    7c1c:	2301      	movs	r3, #1
    7c1e:	7083      	strb	r3, [r0, #2]
    7c20:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    7c22:	4610      	mov	r0, r2
    7c24:	f7ff f98a 	bl	6f3c <l2cap_server_lookup_psm>
    7c28:	b9c0      	cbnz	r0, 7c5c <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    7c2a:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    7c2e:	2200      	movs	r2, #0
    7c30:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    7c32:	4a0c      	ldr	r2, [pc, #48]	; (7c64 <bt_l2cap_server_register+0x60>)
    7c34:	6852      	ldr	r2, [r2, #4]
    7c36:	b122      	cbz	r2, 7c42 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    7c38:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7c3a:	4a0a      	ldr	r2, [pc, #40]	; (7c64 <bt_l2cap_server_register+0x60>)
    7c3c:	6053      	str	r3, [r2, #4]
	return 0;
    7c3e:	2000      	movs	r0, #0
    7c40:	bd10      	pop	{r4, pc}
		list->tail = node;
    7c42:	4a08      	ldr	r2, [pc, #32]	; (7c64 <bt_l2cap_server_register+0x60>)
    7c44:	6053      	str	r3, [r2, #4]
		list->head = node;
    7c46:	6013      	str	r3, [r2, #0]
    7c48:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7c4a:	f06f 0015 	mvn.w	r0, #21
    7c4e:	4770      	bx	lr
    7c50:	f06f 0015 	mvn.w	r0, #21
    7c54:	4770      	bx	lr
		return -EINVAL;
    7c56:	f06f 0015 	mvn.w	r0, #21
    7c5a:	4770      	bx	lr
		return -EADDRINUSE;
    7c5c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    7c60:	bd10      	pop	{r4, pc}
    7c62:	bf00      	nop
    7c64:	200005e4 	.word	0x200005e4

00007c68 <bt_l2cap_update_conn_param>:
{
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	4606      	mov	r6, r0
    7c6c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7c6e:	f7ff f91f 	bl	6eb0 <get_ident>
    7c72:	2308      	movs	r3, #8
    7c74:	4602      	mov	r2, r0
    7c76:	2112      	movs	r1, #18
    7c78:	2000      	movs	r0, #0
    7c7a:	f7ff fbb1 	bl	73e0 <l2cap_create_le_sig_pdu>
    7c7e:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7c80:	2108      	movs	r1, #8
    7c82:	4408      	add	r0, r1
    7c84:	f012 faa6 	bl	1a1d4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7c88:	8823      	ldrh	r3, [r4, #0]
    7c8a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7c8c:	8863      	ldrh	r3, [r4, #2]
    7c8e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7c90:	88a3      	ldrh	r3, [r4, #4]
    7c92:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    7c94:	88e3      	ldrh	r3, [r4, #6]
    7c96:	80c3      	strh	r3, [r0, #6]
    7c98:	2300      	movs	r3, #0
    7c9a:	462a      	mov	r2, r5
    7c9c:	2105      	movs	r1, #5
    7c9e:	4630      	mov	r0, r6
    7ca0:	f7ff fc31 	bl	7506 <bt_l2cap_send_cb>
}
    7ca4:	2000      	movs	r0, #0
    7ca6:	bd70      	pop	{r4, r5, r6, pc}

00007ca8 <bt_l2cap_init>:
{
    7ca8:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    7caa:	4802      	ldr	r0, [pc, #8]	; (7cb4 <bt_l2cap_init+0xc>)
    7cac:	f7ff fa84 	bl	71b8 <bt_l2cap_le_fixed_chan_register>
    7cb0:	bd08      	pop	{r3, pc}
    7cb2:	bf00      	nop
    7cb4:	2000b958 	.word	0x2000b958

00007cb8 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7cb8:	b188      	cbz	r0, 7cde <bt_l2cap_chan_connect+0x26>
{
    7cba:	b508      	push	{r3, lr}
    7cbc:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7cbe:	7b00      	ldrb	r0, [r0, #12]
    7cc0:	2803      	cmp	r0, #3
    7cc2:	d10f      	bne.n	7ce4 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    7cc4:	b189      	cbz	r1, 7cea <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7cc6:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    7cca:	2804      	cmp	r0, #4
    7ccc:	d810      	bhi.n	7cf0 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7cce:	b910      	cbnz	r0, 7cd6 <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    7cd0:	2001      	movs	r0, #1
    7cd2:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    7cd6:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    7cd8:	f7ff ff72 	bl	7bc0 <l2cap_le_connect>
    7cdc:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    7cde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7ce2:	4770      	bx	lr
    7ce4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7ce8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7cea:	f06f 0015 	mvn.w	r0, #21
    7cee:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7cf0:	f06f 0015 	mvn.w	r0, #21
}
    7cf4:	bd08      	pop	{r3, pc}

00007cf6 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7cf6:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    7cf8:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7cfa:	b30b      	cbz	r3, 7d40 <bt_l2cap_chan_disconnect+0x4a>
    7cfc:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7cfe:	f7ff f8d7 	bl	6eb0 <get_ident>
    7d02:	4602      	mov	r2, r0
    7d04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7d08:	2304      	movs	r3, #4
    7d0a:	2106      	movs	r1, #6
    7d0c:	2000      	movs	r0, #0
    7d0e:	f7ff fb67 	bl	73e0 <l2cap_create_le_sig_pdu>
    7d12:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    7d14:	2104      	movs	r1, #4
    7d16:	3008      	adds	r0, #8
    7d18:	f012 fa5c 	bl	1a1d4 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7d1c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7d20:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7d22:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7d26:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    7d28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    7d2c:	4629      	mov	r1, r5
    7d2e:	4620      	mov	r0, r4
    7d30:	f7ff fbfe 	bl	7530 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    7d34:	2104      	movs	r1, #4
    7d36:	4620      	mov	r0, r4
    7d38:	f7ff fa82 	bl	7240 <bt_l2cap_chan_set_state>

	return 0;
    7d3c:	2000      	movs	r0, #0
    7d3e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7d40:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7d44:	bd38      	pop	{r3, r4, r5, pc}

00007d46 <l2cap_chan_le_recv_sdu>:
{
    7d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d4a:	4681      	mov	r9, r0
    7d4c:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    7d4e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    7d52:	4603      	mov	r3, r0
	size_t bytes = 0;
    7d54:	2200      	movs	r2, #0
    7d56:	e002      	b.n	7d5e <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    7d58:	8999      	ldrh	r1, [r3, #12]
    7d5a:	440a      	add	r2, r1
		buf = buf->frags;
    7d5c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d1fa      	bne.n	7d58 <l2cap_chan_le_recv_sdu+0x12>
    7d62:	89b3      	ldrh	r3, [r6, #12]
    7d64:	441a      	add	r2, r3
    7d66:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7d6a:	429a      	cmp	r2, r3
    7d6c:	d803      	bhi.n	7d76 <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    7d6e:	f012 fa05 	bl	1a17c <net_buf_frag_last>
    7d72:	4680      	mov	r8, r0
	while (buf->len) {
    7d74:	e017      	b.n	7da6 <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    7d76:	4648      	mov	r0, r9
    7d78:	f7ff ffbd 	bl	7cf6 <bt_l2cap_chan_disconnect>
		return;
    7d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7d80:	f108 0708 	add.w	r7, r8, #8
    7d84:	4638      	mov	r0, r7
    7d86:	f012 fa8e 	bl	1a2a6 <net_buf_simple_tailroom>
    7d8a:	89b4      	ldrh	r4, [r6, #12]
    7d8c:	42a0      	cmp	r0, r4
    7d8e:	d31d      	bcc.n	7dcc <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    7d90:	4635      	mov	r5, r6
    7d92:	4622      	mov	r2, r4
    7d94:	f855 1f08 	ldr.w	r1, [r5, #8]!
    7d98:	4638      	mov	r0, r7
    7d9a:	f012 fa21 	bl	1a1e0 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7d9e:	4621      	mov	r1, r4
    7da0:	4628      	mov	r0, r5
    7da2:	f012 fa64 	bl	1a26e <net_buf_simple_pull>
	while (buf->len) {
    7da6:	89b3      	ldrh	r3, [r6, #12]
    7da8:	b1ab      	cbz	r3, 7dd6 <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    7daa:	f108 0008 	add.w	r0, r8, #8
    7dae:	f012 fa7a 	bl	1a2a6 <net_buf_simple_tailroom>
    7db2:	2800      	cmp	r0, #0
    7db4:	d1e4      	bne.n	7d80 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    7db6:	4648      	mov	r0, r9
    7db8:	f7ff f93a 	bl	7030 <l2cap_alloc_frag>
			if (!frag) {
    7dbc:	4680      	mov	r8, r0
    7dbe:	2800      	cmp	r0, #0
    7dc0:	d1de      	bne.n	7d80 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    7dc2:	4648      	mov	r0, r9
    7dc4:	f7ff ff97 	bl	7cf6 <bt_l2cap_chan_disconnect>
				return;
    7dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7dcc:	4638      	mov	r0, r7
    7dce:	f012 fa6a 	bl	1a2a6 <net_buf_simple_tailroom>
    7dd2:	b284      	uxth	r4, r0
    7dd4:	e7dc      	b.n	7d90 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7dd6:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    7dda:	460b      	mov	r3, r1
	size_t bytes = 0;
    7ddc:	2200      	movs	r2, #0
    7dde:	e002      	b.n	7de6 <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    7de0:	8998      	ldrh	r0, [r3, #12]
    7de2:	4402      	add	r2, r0
		buf = buf->frags;
    7de4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7de6:	2b00      	cmp	r3, #0
    7de8:	d1fa      	bne.n	7de0 <l2cap_chan_le_recv_sdu+0x9a>
    7dea:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7dee:	4293      	cmp	r3, r2
    7df0:	d005      	beq.n	7dfe <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    7df2:	4631      	mov	r1, r6
    7df4:	4648      	mov	r0, r9
    7df6:	f7ff fc12 	bl	761e <l2cap_chan_update_credits>
    7dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    7dfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7e02:	691b      	ldr	r3, [r3, #16]
    7e04:	4648      	mov	r0, r9
    7e06:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    7e08:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    7e0c:	f012 f996 	bl	1a13c <net_buf_unref>
		chan->_sdu = NULL;
    7e10:	2300      	movs	r3, #0
    7e12:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    7e16:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    7e1a:	e7ea      	b.n	7df2 <l2cap_chan_le_recv_sdu+0xac>

00007e1c <l2cap_chan_le_recv>:
{
    7e1c:	b570      	push	{r4, r5, r6, lr}
    7e1e:	4604      	mov	r4, r0
    7e20:	460d      	mov	r5, r1
    7e22:	2100      	movs	r1, #0
    7e24:	3048      	adds	r0, #72	; 0x48
    7e26:	f020 fce7 	bl	287f8 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    7e2a:	b938      	cbnz	r0, 7e3c <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    7e2c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    7e30:	b143      	cbz	r3, 7e44 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    7e32:	4629      	mov	r1, r5
    7e34:	4620      	mov	r0, r4
    7e36:	f7ff ff86 	bl	7d46 <l2cap_chan_le_recv_sdu>
		return;
    7e3a:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7e3c:	4620      	mov	r0, r4
    7e3e:	f7ff ff5a 	bl	7cf6 <bt_l2cap_chan_disconnect>
		return;
    7e42:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    7e44:	f105 0008 	add.w	r0, r5, #8
    7e48:	f012 fa21 	bl	1a28e <net_buf_simple_pull_le16>
    7e4c:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    7e4e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7e52:	4298      	cmp	r0, r3
    7e54:	d80e      	bhi.n	7e74 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    7e56:	6862      	ldr	r2, [r4, #4]
    7e58:	68d3      	ldr	r3, [r2, #12]
    7e5a:	b19b      	cbz	r3, 7e84 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7e5c:	4620      	mov	r0, r4
    7e5e:	4798      	blx	r3
    7e60:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    7e64:	b150      	cbz	r0, 7e7c <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    7e66:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    7e6a:	4629      	mov	r1, r5
    7e6c:	4620      	mov	r0, r4
    7e6e:	f7ff ff6a 	bl	7d46 <l2cap_chan_le_recv_sdu>
		return;
    7e72:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7e74:	4620      	mov	r0, r4
    7e76:	f7ff ff3e 	bl	7cf6 <bt_l2cap_chan_disconnect>
		return;
    7e7a:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    7e7c:	4620      	mov	r0, r4
    7e7e:	f7ff ff3a 	bl	7cf6 <bt_l2cap_chan_disconnect>
			return;
    7e82:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    7e84:	6913      	ldr	r3, [r2, #16]
    7e86:	4629      	mov	r1, r5
    7e88:	4620      	mov	r0, r4
    7e8a:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    7e8c:	4629      	mov	r1, r5
    7e8e:	4620      	mov	r0, r4
    7e90:	f7ff fbc5 	bl	761e <l2cap_chan_update_credits>
    7e94:	bd70      	pop	{r4, r5, r6, pc}

00007e96 <l2cap_chan_recv>:
{
    7e96:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7e98:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7e9c:	3b40      	subs	r3, #64	; 0x40
    7e9e:	b29b      	uxth	r3, r3
    7ea0:	2b3f      	cmp	r3, #63	; 0x3f
    7ea2:	d903      	bls.n	7eac <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    7ea4:	6843      	ldr	r3, [r0, #4]
    7ea6:	691b      	ldr	r3, [r3, #16]
    7ea8:	4798      	blx	r3
    7eaa:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    7eac:	f7ff ffb6 	bl	7e1c <l2cap_chan_le_recv>
		return;
    7eb0:	bd08      	pop	{r3, pc}

00007eb2 <bt_l2cap_recv>:
{
    7eb2:	b570      	push	{r4, r5, r6, lr}
    7eb4:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    7eb6:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7eb8:	898b      	ldrh	r3, [r1, #12]
    7eba:	2b03      	cmp	r3, #3
    7ebc:	d912      	bls.n	7ee4 <bt_l2cap_recv+0x32>
    7ebe:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    7ec0:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7ec2:	2104      	movs	r1, #4
    7ec4:	f104 0008 	add.w	r0, r4, #8
    7ec8:	f012 f9d1 	bl	1a26e <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7ecc:	4631      	mov	r1, r6
    7ece:	4628      	mov	r0, r5
    7ed0:	f7ff fd3a 	bl	7948 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7ed4:	b150      	cbz	r0, 7eec <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    7ed6:	4621      	mov	r1, r4
    7ed8:	f7ff ffdd 	bl	7e96 <l2cap_chan_recv>
	net_buf_unref(buf);
    7edc:	4620      	mov	r0, r4
    7ede:	f012 f92d 	bl	1a13c <net_buf_unref>
    7ee2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7ee4:	4608      	mov	r0, r1
    7ee6:	f012 f929 	bl	1a13c <net_buf_unref>
		return;
    7eea:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7eec:	4620      	mov	r0, r4
    7eee:	f012 f925 	bl	1a13c <net_buf_unref>
		return;
    7ef2:	bd70      	pop	{r4, r5, r6, pc}

00007ef4 <le_credits>:
{
    7ef4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7ef6:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    7ef8:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    7efa:	8993      	ldrh	r3, [r2, #12]
    7efc:	2b03      	cmp	r3, #3
    7efe:	d800      	bhi.n	7f02 <le_credits+0xe>
    7f00:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    7f02:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7f04:	8809      	ldrh	r1, [r1, #0]
    7f06:	f7ff fd04 	bl	7912 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    7f0a:	4604      	mov	r4, r0
    7f0c:	2800      	cmp	r0, #0
    7f0e:	d0f7      	beq.n	7f00 <le_credits+0xc>
    7f10:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7f12:	442b      	add	r3, r5
    7f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7f18:	d206      	bcs.n	7f28 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    7f1a:	4629      	mov	r1, r5
    7f1c:	f7ff f8a3 	bl	7066 <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    7f20:	4620      	mov	r0, r4
    7f22:	f7ff fc32 	bl	778a <l2cap_chan_le_send_resume>
    7f26:	e7eb      	b.n	7f00 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    7f28:	f7ff fee5 	bl	7cf6 <bt_l2cap_chan_disconnect>
		return;
    7f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

00007f30 <l2cap_recv>:
{
    7f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f32:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7f34:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7f36:	898b      	ldrh	r3, [r1, #12]
    7f38:	2b03      	cmp	r3, #3
    7f3a:	d801      	bhi.n	7f40 <l2cap_recv+0x10>
}
    7f3c:	b003      	add	sp, #12
    7f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f40:	460c      	mov	r4, r1
    7f42:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    7f44:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7f46:	2104      	movs	r1, #4
    7f48:	f104 0008 	add.w	r0, r4, #8
    7f4c:	f012 f98f 	bl	1a26e <net_buf_simple_pull>
	if (buf->len != len) {
    7f50:	89a3      	ldrh	r3, [r4, #12]
    7f52:	429f      	cmp	r7, r3
    7f54:	d1f2      	bne.n	7f3c <l2cap_recv+0xc>
	if (!hdr->ident) {
    7f56:	7871      	ldrb	r1, [r6, #1]
    7f58:	2900      	cmp	r1, #0
    7f5a:	d0ef      	beq.n	7f3c <l2cap_recv+0xc>
	switch (hdr->code) {
    7f5c:	7833      	ldrb	r3, [r6, #0]
    7f5e:	3b01      	subs	r3, #1
    7f60:	2b15      	cmp	r3, #21
    7f62:	d852      	bhi.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
    7f64:	a201      	add	r2, pc, #4	; (adr r2, 7f6c <l2cap_recv+0x3c>)
    7f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7f6a:	bf00      	nop
    7f6c:	00008001 	.word	0x00008001
    7f70:	0000800b 	.word	0x0000800b
    7f74:	0000800b 	.word	0x0000800b
    7f78:	0000800b 	.word	0x0000800b
    7f7c:	0000800b 	.word	0x0000800b
    7f80:	00007fe3 	.word	0x00007fe3
    7f84:	00007fed 	.word	0x00007fed
    7f88:	0000800b 	.word	0x0000800b
    7f8c:	0000800b 	.word	0x0000800b
    7f90:	0000800b 	.word	0x0000800b
    7f94:	0000800b 	.word	0x0000800b
    7f98:	0000800b 	.word	0x0000800b
    7f9c:	0000800b 	.word	0x0000800b
    7fa0:	0000800b 	.word	0x0000800b
    7fa4:	0000800b 	.word	0x0000800b
    7fa8:	0000800b 	.word	0x0000800b
    7fac:	0000800b 	.word	0x0000800b
    7fb0:	00007fc5 	.word	0x00007fc5
    7fb4:	00007f3d 	.word	0x00007f3d
    7fb8:	00007fcf 	.word	0x00007fcf
    7fbc:	00007fd9 	.word	0x00007fd9
    7fc0:	00007ff7 	.word	0x00007ff7
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    7fc4:	4622      	mov	r2, r4
    7fc6:	4628      	mov	r0, r5
    7fc8:	f7ff fc22 	bl	7810 <le_conn_param_update_req>
		break;
    7fcc:	e7b6      	b.n	7f3c <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    7fce:	4622      	mov	r2, r4
    7fd0:	4628      	mov	r0, r5
    7fd2:	f7ff fd4d 	bl	7a70 <le_conn_req>
		break;
    7fd6:	e7b1      	b.n	7f3c <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    7fd8:	4622      	mov	r2, r4
    7fda:	4628      	mov	r0, r5
    7fdc:	f7ff f954 	bl	7288 <le_conn_rsp>
		break;
    7fe0:	e7ac      	b.n	7f3c <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    7fe2:	4622      	mov	r2, r4
    7fe4:	4628      	mov	r0, r5
    7fe6:	f7ff fc57 	bl	7898 <le_disconn_req>
		break;
    7fea:	e7a7      	b.n	7f3c <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    7fec:	4622      	mov	r2, r4
    7fee:	4628      	mov	r0, r5
    7ff0:	f7ff f9a0 	bl	7334 <le_disconn_rsp>
		break;
    7ff4:	e7a2      	b.n	7f3c <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    7ff6:	4622      	mov	r2, r4
    7ff8:	4628      	mov	r0, r5
    7ffa:	f7ff ff7b 	bl	7ef4 <le_credits>
		break;
    7ffe:	e79d      	b.n	7f3c <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8000:	4622      	mov	r2, r4
    8002:	4628      	mov	r0, r5
    8004:	f7ff f9a5 	bl	7352 <reject_cmd>
		break;
    8008:	e798      	b.n	7f3c <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    800a:	6828      	ldr	r0, [r5, #0]
    800c:	2200      	movs	r2, #0
    800e:	9200      	str	r2, [sp, #0]
    8010:	4613      	mov	r3, r2
    8012:	f7ff fbd9 	bl	77c8 <l2cap_send_reject>
		break;
    8016:	e791      	b.n	7f3c <l2cap_recv+0xc>

00008018 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8018:	b510      	push	{r4, lr}
    801a:	b082      	sub	sp, #8
    801c:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    801e:	b1f9      	cbz	r1, 8060 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8020:	6803      	ldr	r3, [r0, #0]
    8022:	b303      	cbz	r3, 8066 <bt_l2cap_chan_send+0x4e>
    8024:	7b1b      	ldrb	r3, [r3, #12]
    8026:	2b03      	cmp	r3, #3
    8028:	d120      	bne.n	806c <bt_l2cap_chan_send+0x54>
    802a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    802c:	2200      	movs	r2, #0
    802e:	a901      	add	r1, sp, #4
    8030:	f7ff fb40 	bl	76b4 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8034:	2800      	cmp	r0, #0
    8036:	db01      	blt.n	803c <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8038:	b002      	add	sp, #8
    803a:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    803c:	f110 0f0b 	cmn.w	r0, #11
    8040:	d1fa      	bne.n	8038 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8042:	9901      	ldr	r1, [sp, #4]
    8044:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8048:	f012 f86a 	bl	1a120 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    804c:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    804e:	f102 0310 	add.w	r3, r2, #16
    8052:	89d2      	ldrh	r2, [r2, #14]
    8054:	4413      	add	r3, r2
    8056:	3303      	adds	r3, #3
    8058:	f023 0303 	bic.w	r3, r3, #3
    805c:	6818      	ldr	r0, [r3, #0]
    805e:	e7eb      	b.n	8038 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8060:	f06f 0015 	mvn.w	r0, #21
    8064:	e7e8      	b.n	8038 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8066:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    806a:	e7e5      	b.n	8038 <bt_l2cap_chan_send+0x20>
    806c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8070:	e7e2      	b.n	8038 <bt_l2cap_chan_send+0x20>

00008072 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8072:	b100      	cbz	r0, 8076 <range_is_valid+0x4>
    8074:	b919      	cbnz	r1, 807e <range_is_valid+0xc>
		if (err) {
    8076:	b142      	cbz	r2, 808a <range_is_valid+0x18>
			*err = 0;
    8078:	2000      	movs	r0, #0
    807a:	8010      	strh	r0, [r2, #0]
    807c:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    807e:	4288      	cmp	r0, r1
    8080:	d905      	bls.n	808e <range_is_valid+0x1c>
		if (err) {
    8082:	b132      	cbz	r2, 8092 <range_is_valid+0x20>
			*err = start;
    8084:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8086:	2000      	movs	r0, #0
    8088:	4770      	bx	lr
		return false;
    808a:	2000      	movs	r0, #0
    808c:	4770      	bx	lr
	}

	return true;
    808e:	2001      	movs	r0, #1
    8090:	4770      	bx	lr
		return false;
    8092:	2000      	movs	r0, #0
}
    8094:	4770      	bx	lr

00008096 <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8096:	f012 0f01 	tst.w	r2, #1
    809a:	d007      	beq.n	80ac <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    809c:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    809e:	f013 0f15 	tst.w	r3, #21
    80a2:	d101      	bne.n	80a8 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    80a4:	2002      	movs	r0, #2
    80a6:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    80a8:	684b      	ldr	r3, [r1, #4]
    80aa:	b1eb      	cbz	r3, 80e8 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    80ac:	f012 0f02 	tst.w	r2, #2
    80b0:	d007      	beq.n	80c2 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    80b2:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    80b4:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    80b8:	d101      	bne.n	80be <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    80ba:	2003      	movs	r0, #3
    80bc:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    80be:	688b      	ldr	r3, [r1, #8]
    80c0:	b1a3      	cbz	r3, 80ec <check_perm+0x56>
	}

	mask &= attr->perm;
    80c2:	7c8b      	ldrb	r3, [r1, #18]
    80c4:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    80c6:	f012 0f30 	tst.w	r2, #48	; 0x30
    80ca:	d004      	beq.n	80d6 <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    80cc:	7a03      	ldrb	r3, [r0, #8]
    80ce:	2b02      	cmp	r3, #2
    80d0:	d801      	bhi.n	80d6 <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    80d2:	2005      	movs	r0, #5
    80d4:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    80d6:	f012 0f0c 	tst.w	r2, #12
    80da:	d009      	beq.n	80f0 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    80dc:	7a83      	ldrb	r3, [r0, #10]
    80de:	b90b      	cbnz	r3, 80e4 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    80e0:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    80e2:	4770      	bx	lr
	return 0;
    80e4:	2000      	movs	r0, #0
    80e6:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    80e8:	2002      	movs	r0, #2
    80ea:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    80ec:	2003      	movs	r0, #3
    80ee:	4770      	bx	lr
	return 0;
    80f0:	2000      	movs	r0, #0
    80f2:	4770      	bx	lr

000080f4 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    80f4:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    80f8:	2bfe      	cmp	r3, #254	; 0xfe
    80fa:	d901      	bls.n	8100 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    80fc:	200e      	movs	r0, #14
}
    80fe:	4770      	bx	lr
		return -err;
    8100:	4240      	negs	r0, r0
    8102:	b2c0      	uxtb	r0, r0
    8104:	4770      	bx	lr

00008106 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    810a:	b082      	sub	sp, #8
    810c:	4606      	mov	r6, r0
    810e:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8110:	680f      	ldr	r7, [r1, #0]
    8112:	222a      	movs	r2, #42	; 0x2a
    8114:	4601      	mov	r1, r0
    8116:	4638      	mov	r0, r7
    8118:	f7ff ffbd 	bl	8096 <check_perm>
    811c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    811e:	b120      	cbz	r0, 812a <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8120:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8122:	4628      	mov	r0, r5
    8124:	b002      	add	sp, #8
    8126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    812a:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    812c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8130:	7c23      	ldrb	r3, [r4, #16]
    8132:	8a62      	ldrh	r2, [r4, #18]
    8134:	2100      	movs	r1, #0
    8136:	9101      	str	r1, [sp, #4]
    8138:	9200      	str	r2, [sp, #0]
    813a:	68e2      	ldr	r2, [r4, #12]
    813c:	4631      	mov	r1, r6
    813e:	4638      	mov	r0, r7
    8140:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8142:	2800      	cmp	r0, #0
    8144:	db02      	blt.n	814c <write_cb+0x46>
    8146:	7c23      	ldrb	r3, [r4, #16]
    8148:	4298      	cmp	r0, r3
    814a:	d003      	beq.n	8154 <write_cb+0x4e>
		data->err = err_to_att(write);
    814c:	f7ff ffd2 	bl	80f4 <err_to_att>
    8150:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8152:	e7e6      	b.n	8122 <write_cb+0x1c>
	data->err = 0;
    8154:	2300      	movs	r3, #0
    8156:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8158:	2501      	movs	r5, #1
    815a:	e7e2      	b.n	8122 <write_cb+0x1c>

0000815c <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    815c:	2006      	movs	r0, #6
    815e:	4770      	bx	lr

00008160 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8160:	2006      	movs	r0, #6
    8162:	4770      	bx	lr

00008164 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8164:	2300      	movs	r3, #0
    8166:	2b1a      	cmp	r3, #26
    8168:	d80b      	bhi.n	8182 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    816a:	4a09      	ldr	r2, [pc, #36]	; (8190 <att_op_get_type+0x2c>)
    816c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8170:	4282      	cmp	r2, r0
    8172:	d001      	beq.n	8178 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8174:	3301      	adds	r3, #1
    8176:	e7f6      	b.n	8166 <att_op_get_type+0x2>
			return handlers[i].type;
    8178:	4a05      	ldr	r2, [pc, #20]	; (8190 <att_op_get_type+0x2c>)
    817a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    817e:	7898      	ldrb	r0, [r3, #2]
    8180:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8182:	f010 0f40 	tst.w	r0, #64	; 0x40
    8186:	d101      	bne.n	818c <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8188:	2006      	movs	r0, #6
}
    818a:	4770      	bx	lr
		return ATT_COMMAND;
    818c:	2000      	movs	r0, #0
    818e:	4770      	bx	lr
    8190:	0002f534 	.word	0x0002f534

00008194 <att_cb>:
{
    8194:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8196:	6883      	ldr	r3, [r0, #8]
    8198:	7818      	ldrb	r0, [r3, #0]
    819a:	f7ff ffe3 	bl	8164 <att_op_get_type>
    819e:	3801      	subs	r0, #1
    81a0:	2804      	cmp	r0, #4
    81a2:	d808      	bhi.n	81b6 <att_cb+0x22>
    81a4:	e8df f000 	tbb	[pc, r0]
    81a8:	09070305 	.word	0x09070305
    81ac:	05          	.byte	0x05
    81ad:	00          	.byte	0x00
		return att_rsp_sent;
    81ae:	4804      	ldr	r0, [pc, #16]	; (81c0 <att_cb+0x2c>)
    81b0:	bd08      	pop	{r3, pc}
		return att_req_sent;
    81b2:	4804      	ldr	r0, [pc, #16]	; (81c4 <att_cb+0x30>)
    81b4:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    81b6:	4804      	ldr	r0, [pc, #16]	; (81c8 <att_cb+0x34>)
    81b8:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    81ba:	4804      	ldr	r0, [pc, #16]	; (81cc <att_cb+0x38>)
}
    81bc:	bd08      	pop	{r3, pc}
    81be:	bf00      	nop
    81c0:	00008307 	.word	0x00008307
    81c4:	00008379 	.word	0x00008379
    81c8:	00008331 	.word	0x00008331
    81cc:	0000833f 	.word	0x0000833f

000081d0 <read_cb>:
{
    81d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    81d4:	b083      	sub	sp, #12
    81d6:	4606      	mov	r6, r0
    81d8:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    81da:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    81de:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    81e2:	6888      	ldr	r0, [r1, #8]
    81e4:	2100      	movs	r1, #0
    81e6:	3008      	adds	r0, #8
    81e8:	f011 fff4 	bl	1a1d4 <net_buf_simple_add>
    81ec:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    81ee:	2300      	movs	r3, #0
    81f0:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    81f2:	2215      	movs	r2, #21
    81f4:	4631      	mov	r1, r6
    81f6:	4638      	mov	r0, r7
    81f8:	f7ff ff4d 	bl	8096 <check_perm>
    81fc:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    81fe:	b120      	cbz	r0, 820a <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8200:	2500      	movs	r5, #0
}
    8202:	4628      	mov	r0, r5
    8204:	b003      	add	sp, #12
    8206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    820a:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    820c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8210:	68a3      	ldr	r3, [r4, #8]
    8212:	6899      	ldr	r1, [r3, #8]
    8214:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8216:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    821a:	1a9b      	subs	r3, r3, r2
    821c:	88a0      	ldrh	r0, [r4, #4]
    821e:	9000      	str	r0, [sp, #0]
    8220:	b29b      	uxth	r3, r3
    8222:	440a      	add	r2, r1
    8224:	4631      	mov	r1, r6
    8226:	4638      	mov	r0, r7
    8228:	47c8      	blx	r9
	if (read < 0) {
    822a:	1e01      	subs	r1, r0, #0
    822c:	db05      	blt.n	823a <read_cb+0x6a>
	net_buf_add(data->buf, read);
    822e:	68a0      	ldr	r0, [r4, #8]
    8230:	3008      	adds	r0, #8
    8232:	f011 ffcf 	bl	1a1d4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8236:	2501      	movs	r5, #1
    8238:	e7e3      	b.n	8202 <read_cb+0x32>
		data->err = err_to_att(read);
    823a:	4608      	mov	r0, r1
    823c:	f7ff ff5a 	bl	80f4 <err_to_att>
    8240:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8242:	e7de      	b.n	8202 <read_cb+0x32>

00008244 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8244:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8246:	7b03      	ldrb	r3, [r0, #12]
    8248:	2b03      	cmp	r3, #3
    824a:	d10f      	bne.n	826c <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    824c:	2104      	movs	r1, #4
    824e:	f7ff fb7b 	bl	7948 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8252:	b168      	cbz	r0, 8270 <att_chan_get+0x2c>
    8254:	f3bf 8f5b 	dmb	ish
    8258:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    825c:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8260:	f012 0f04 	tst.w	r2, #4
    8264:	d100      	bne.n	8268 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8266:	bd08      	pop	{r3, pc}
		return NULL;
    8268:	2000      	movs	r0, #0
    826a:	bd08      	pop	{r3, pc}
		return NULL;
    826c:	2000      	movs	r0, #0
    826e:	bd08      	pop	{r3, pc}
		return NULL;
    8270:	2000      	movs	r0, #0
    8272:	bd08      	pop	{r3, pc}

00008274 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8276:	2400      	movs	r4, #0
    8278:	b11c      	cbz	r4, 8282 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    827a:	f06f 040b 	mvn.w	r4, #11
}
    827e:	4620      	mov	r0, r4
    8280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8282:	23ec      	movs	r3, #236	; 0xec
    8284:	fb03 f304 	mul.w	r3, r3, r4
    8288:	4a12      	ldr	r2, [pc, #72]	; (82d4 <bt_att_accept+0x60>)
    828a:	58d3      	ldr	r3, [r2, r3]
    828c:	b10b      	cbz	r3, 8292 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    828e:	3401      	adds	r4, #1
    8290:	e7f2      	b.n	8278 <bt_att_accept+0x4>
    8292:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8294:	480f      	ldr	r0, [pc, #60]	; (82d4 <bt_att_accept+0x60>)
    8296:	23ec      	movs	r3, #236	; 0xec
    8298:	fb03 f304 	mul.w	r3, r3, r4
    829c:	18c6      	adds	r6, r0, r3
    829e:	4a0e      	ldr	r2, [pc, #56]	; (82d8 <bt_att_accept+0x64>)
    82a0:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    82a2:	f103 0298 	add.w	r2, r3, #152	; 0x98
    82a6:	4402      	add	r2, r0
    82a8:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    82aa:	2100      	movs	r1, #0
    82ac:	f3bf 8f5b 	dmb	ish
    82b0:	e852 7f00 	ldrex	r7, [r2]
    82b4:	e842 1e00 	strex	lr, r1, [r2]
    82b8:	f1be 0f00 	cmp.w	lr, #0
    82bc:	d1f8      	bne.n	82b0 <bt_att_accept+0x3c>
    82be:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    82c2:	33d0      	adds	r3, #208	; 0xd0
    82c4:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    82c6:	2202      	movs	r2, #2
    82c8:	4611      	mov	r1, r2
    82ca:	3004      	adds	r0, #4
    82cc:	f020 fa78 	bl	287c0 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    82d0:	602e      	str	r6, [r5, #0]
		return 0;
    82d2:	e7d4      	b.n	827e <bt_att_accept+0xa>
    82d4:	200005ec 	.word	0x200005ec
    82d8:	2000b984 	.word	0x2000b984

000082dc <att_req_destroy>:
{
    82dc:	b510      	push	{r4, lr}
    82de:	4604      	mov	r4, r0
	if (req->buf) {
    82e0:	6900      	ldr	r0, [r0, #16]
    82e2:	b108      	cbz	r0, 82e8 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    82e4:	f011 ff2a 	bl	1a13c <net_buf_unref>
	if (req->destroy) {
    82e8:	68a3      	ldr	r3, [r4, #8]
    82ea:	b10b      	cbz	r3, 82f0 <att_req_destroy+0x14>
		req->destroy(req);
    82ec:	4620      	mov	r0, r4
    82ee:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    82f0:	2218      	movs	r2, #24
    82f2:	2100      	movs	r1, #0
    82f4:	4620      	mov	r0, r4
    82f6:	f022 fbe1 	bl	2aabc <memset>
    82fa:	bd10      	pop	{r4, pc}

000082fc <att_get>:
{
    82fc:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    82fe:	2104      	movs	r1, #4
    8300:	f7ff fb07 	bl	7912 <bt_l2cap_le_lookup_tx_cid>
}
    8304:	bd08      	pop	{r3, pc}

00008306 <att_rsp_sent>:
{
    8306:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8308:	f7ff fff8 	bl	82fc <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    830c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8310:	f3bf 8f5b 	dmb	ish
    8314:	e853 2f00 	ldrex	r2, [r3]
    8318:	f022 0201 	bic.w	r2, r2, #1
    831c:	e843 2100 	strex	r1, r2, [r3]
    8320:	2900      	cmp	r1, #0
    8322:	d1f7      	bne.n	8314 <att_rsp_sent+0xe>
    8324:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8328:	30d4      	adds	r0, #212	; 0xd4
    832a:	f020 fa52 	bl	287d2 <_impl_k_sem_give>
    832e:	bd08      	pop	{r3, pc}

00008330 <att_pdu_sent>:
{
    8330:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8332:	f7ff ffe3 	bl	82fc <att_get>
    8336:	30d4      	adds	r0, #212	; 0xd4
    8338:	f020 fa4b 	bl	287d2 <_impl_k_sem_give>
    833c:	bd08      	pop	{r3, pc}

0000833e <att_cfm_sent>:
{
    833e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8340:	f7ff ffdc 	bl	82fc <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8344:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8348:	f3bf 8f5b 	dmb	ish
    834c:	e853 2f00 	ldrex	r2, [r3]
    8350:	f022 0202 	bic.w	r2, r2, #2
    8354:	e843 2100 	strex	r1, r2, [r3]
    8358:	2900      	cmp	r1, #0
    835a:	d1f7      	bne.n	834c <att_cfm_sent+0xe>
    835c:	f3bf 8f5b 	dmb	ish
    8360:	30d4      	adds	r0, #212	; 0xd4
    8362:	f020 fa36 	bl	287d2 <_impl_k_sem_give>
    8366:	bd08      	pop	{r3, pc}

00008368 <att_notify>:
{
    8368:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    836a:	f101 0008 	add.w	r0, r1, #8
    836e:	f011 ff8e 	bl	1a28e <net_buf_simple_pull_le16>
}
    8372:	2000      	movs	r0, #0
    8374:	bd08      	pop	{r3, pc}
	...

00008378 <att_req_sent>:
{
    8378:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    837a:	f7ff ffbf 	bl	82fc <att_get>
    837e:	4604      	mov	r4, r0
    8380:	30d4      	adds	r0, #212	; 0xd4
    8382:	f020 fa26 	bl	287d2 <_impl_k_sem_give>
	if (att->req) {
    8386:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    838a:	b133      	cbz	r3, 839a <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    838c:	f247 5230 	movw	r2, #30000	; 0x7530
    8390:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8394:	4801      	ldr	r0, [pc, #4]	; (839c <att_req_sent+0x24>)
    8396:	f021 f865 	bl	29464 <k_delayed_work_submit_to_queue>
    839a:	bd10      	pop	{r4, pc}
    839c:	20002b10 	.word	0x20002b10

000083a0 <read_group_cb>:
{
    83a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83a4:	b084      	sub	sp, #16
    83a6:	4605      	mov	r5, r0
    83a8:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    83aa:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    83ac:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    83ae:	2300      	movs	r3, #0
    83b0:	f88d 3008 	strb.w	r3, [sp, #8]
    83b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    83b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    83bc:	a902      	add	r1, sp, #8
    83be:	6800      	ldr	r0, [r0, #0]
    83c0:	f7fb fb8d 	bl	3ade <bt_uuid_cmp>
    83c4:	b1a8      	cbz	r0, 83f2 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    83c6:	2300      	movs	r3, #0
    83c8:	f88d 300c 	strb.w	r3, [sp, #12]
    83cc:	f642 0301 	movw	r3, #10241	; 0x2801
    83d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    83d4:	a903      	add	r1, sp, #12
    83d6:	6828      	ldr	r0, [r5, #0]
    83d8:	f7fb fb81 	bl	3ade <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    83dc:	b148      	cbz	r0, 83f2 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    83de:	6923      	ldr	r3, [r4, #16]
    83e0:	2b00      	cmp	r3, #0
    83e2:	d04c      	beq.n	847e <read_group_cb+0xde>
    83e4:	8a2a      	ldrh	r2, [r5, #16]
    83e6:	8859      	ldrh	r1, [r3, #2]
    83e8:	428a      	cmp	r2, r1
    83ea:	d94a      	bls.n	8482 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    83ec:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    83ee:	2001      	movs	r0, #1
    83f0:	e039      	b.n	8466 <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    83f2:	6861      	ldr	r1, [r4, #4]
    83f4:	6828      	ldr	r0, [r5, #0]
    83f6:	f7fb fb72 	bl	3ade <bt_uuid_cmp>
    83fa:	2800      	cmp	r0, #0
    83fc:	d130      	bne.n	8460 <read_group_cb+0xc0>
	if (data->rsp->len &&
    83fe:	68e3      	ldr	r3, [r4, #12]
    8400:	781a      	ldrb	r2, [r3, #0]
    8402:	b132      	cbz	r2, 8412 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8404:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8408:	68a1      	ldr	r1, [r4, #8]
    840a:	8989      	ldrh	r1, [r1, #12]
    840c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    840e:	4293      	cmp	r3, r2
    8410:	db39      	blt.n	8486 <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8412:	68a0      	ldr	r0, [r4, #8]
    8414:	2104      	movs	r1, #4
    8416:	3008      	adds	r0, #8
    8418:	f011 fedc 	bl	1a1d4 <net_buf_simple_add>
    841c:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    841e:	8a2b      	ldrh	r3, [r5, #16]
    8420:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8422:	6923      	ldr	r3, [r4, #16]
    8424:	8a2a      	ldrh	r2, [r5, #16]
    8426:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8428:	f8d5 8004 	ldr.w	r8, [r5, #4]
    842c:	68a3      	ldr	r3, [r4, #8]
    842e:	6899      	ldr	r1, [r3, #8]
    8430:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8432:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8436:	1a9b      	subs	r3, r3, r2
    8438:	2000      	movs	r0, #0
    843a:	9000      	str	r0, [sp, #0]
    843c:	b29b      	uxth	r3, r3
    843e:	440a      	add	r2, r1
    8440:	4629      	mov	r1, r5
    8442:	4638      	mov	r0, r7
    8444:	47c0      	blx	r8
	if (read < 0) {
    8446:	1e01      	subs	r1, r0, #0
    8448:	db1f      	blt.n	848a <read_group_cb+0xea>
	if (!data->rsp->len) {
    844a:	68e2      	ldr	r2, [r4, #12]
    844c:	7813      	ldrb	r3, [r2, #0]
    844e:	b96b      	cbnz	r3, 846c <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    8450:	1d0b      	adds	r3, r1, #4
    8452:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8454:	68a0      	ldr	r0, [r4, #8]
    8456:	3008      	adds	r0, #8
    8458:	f011 febc 	bl	1a1d4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    845c:	2001      	movs	r0, #1
    845e:	e002      	b.n	8466 <read_group_cb+0xc6>
		data->group = NULL;
    8460:	2300      	movs	r3, #0
    8462:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8464:	2001      	movs	r0, #1
}
    8466:	b004      	add	sp, #16
    8468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    846c:	1d0a      	adds	r2, r1, #4
    846e:	4293      	cmp	r3, r2
    8470:	d0f0      	beq.n	8454 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    8472:	68a2      	ldr	r2, [r4, #8]
    8474:	8993      	ldrh	r3, [r2, #12]
    8476:	3b04      	subs	r3, #4
    8478:	8193      	strh	r3, [r2, #12]
		return false;
    847a:	2000      	movs	r0, #0
    847c:	e7f3      	b.n	8466 <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    847e:	2001      	movs	r0, #1
    8480:	e7f1      	b.n	8466 <read_group_cb+0xc6>
    8482:	2001      	movs	r0, #1
    8484:	e7ef      	b.n	8466 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8486:	2000      	movs	r0, #0
    8488:	e7ed      	b.n	8466 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    848a:	2000      	movs	r0, #0
    848c:	e7eb      	b.n	8466 <read_group_cb+0xc6>

0000848e <read_type_cb>:
{
    848e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8492:	b082      	sub	sp, #8
    8494:	4606      	mov	r6, r0
    8496:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8498:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    849a:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    849e:	6849      	ldr	r1, [r1, #4]
    84a0:	6800      	ldr	r0, [r0, #0]
    84a2:	f7fb fb1c 	bl	3ade <bt_uuid_cmp>
    84a6:	2800      	cmp	r0, #0
    84a8:	d14d      	bne.n	8546 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    84aa:	2215      	movs	r2, #21
    84ac:	4631      	mov	r1, r6
    84ae:	4640      	mov	r0, r8
    84b0:	f7ff fdf1 	bl	8096 <check_perm>
    84b4:	4605      	mov	r5, r0
    84b6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    84b8:	b130      	cbz	r0, 84c8 <read_type_cb+0x3a>
		if (data->rsp->len) {
    84ba:	68e3      	ldr	r3, [r4, #12]
    84bc:	781d      	ldrb	r5, [r3, #0]
    84be:	2d00      	cmp	r5, #0
    84c0:	d042      	beq.n	8548 <read_type_cb+0xba>
			data->err = 0x00;
    84c2:	2500      	movs	r5, #0
    84c4:	7525      	strb	r5, [r4, #20]
    84c6:	e03f      	b.n	8548 <read_type_cb+0xba>
	data->err = 0x00;
    84c8:	f04f 0900 	mov.w	r9, #0
    84cc:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    84d0:	68a0      	ldr	r0, [r4, #8]
    84d2:	2102      	movs	r1, #2
    84d4:	3008      	adds	r0, #8
    84d6:	f011 fe7d 	bl	1a1d4 <net_buf_simple_add>
    84da:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    84dc:	8a33      	ldrh	r3, [r6, #16]
    84de:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    84e0:	f8d6 a004 	ldr.w	sl, [r6, #4]
    84e4:	68a3      	ldr	r3, [r4, #8]
    84e6:	6899      	ldr	r1, [r3, #8]
    84e8:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    84ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    84ee:	1a9b      	subs	r3, r3, r2
    84f0:	f8cd 9000 	str.w	r9, [sp]
    84f4:	b29b      	uxth	r3, r3
    84f6:	440a      	add	r2, r1
    84f8:	4631      	mov	r1, r6
    84fa:	4640      	mov	r0, r8
    84fc:	47d0      	blx	sl
	if (read < 0) {
    84fe:	1e01      	subs	r1, r0, #0
    8500:	db14      	blt.n	852c <read_type_cb+0x9e>
	if (!data->rsp->len) {
    8502:	68e2      	ldr	r2, [r4, #12]
    8504:	7813      	ldrb	r3, [r2, #0]
    8506:	b9b3      	cbnz	r3, 8536 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    8508:	1c8b      	adds	r3, r1, #2
    850a:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    850c:	68a0      	ldr	r0, [r4, #8]
    850e:	3008      	adds	r0, #8
    8510:	f011 fe60 	bl	1a1d4 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    8514:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    8518:	68a3      	ldr	r3, [r4, #8]
    851a:	899b      	ldrh	r3, [r3, #12]
    851c:	1aed      	subs	r5, r5, r3
    851e:	68e3      	ldr	r3, [r4, #12]
    8520:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8522:	429d      	cmp	r5, r3
    8524:	bfd4      	ite	le
    8526:	2500      	movle	r5, #0
    8528:	2501      	movgt	r5, #1
    852a:	e00d      	b.n	8548 <read_type_cb+0xba>
		data->err = err_to_att(read);
    852c:	4608      	mov	r0, r1
    852e:	f7ff fde1 	bl	80f4 <err_to_att>
    8532:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8534:	e008      	b.n	8548 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    8536:	1c8a      	adds	r2, r1, #2
    8538:	4293      	cmp	r3, r2
    853a:	d0e7      	beq.n	850c <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    853c:	68a2      	ldr	r2, [r4, #8]
    853e:	8993      	ldrh	r3, [r2, #12]
    8540:	3b02      	subs	r3, #2
    8542:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    8544:	e000      	b.n	8548 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    8546:	2501      	movs	r5, #1
}
    8548:	4628      	mov	r0, r5
    854a:	b002      	add	sp, #8
    854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008550 <uuid_create>:
{
    8550:	b510      	push	{r4, lr}
    8552:	4604      	mov	r4, r0
	switch (buf->len) {
    8554:	898b      	ldrh	r3, [r1, #12]
    8556:	2b02      	cmp	r3, #2
    8558:	d003      	beq.n	8562 <uuid_create+0x12>
    855a:	2b10      	cmp	r3, #16
    855c:	d00a      	beq.n	8574 <uuid_create+0x24>
	return false;
    855e:	2000      	movs	r0, #0
}
    8560:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    8562:	2300      	movs	r3, #0
    8564:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    8566:	f101 0008 	add.w	r0, r1, #8
    856a:	f011 fe90 	bl	1a28e <net_buf_simple_pull_le16>
    856e:	8060      	strh	r0, [r4, #2]
		return true;
    8570:	2001      	movs	r0, #1
    8572:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    8574:	2302      	movs	r3, #2
    8576:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    857a:	898a      	ldrh	r2, [r1, #12]
    857c:	6889      	ldr	r1, [r1, #8]
    857e:	f7f7 fe9f 	bl	2c0 <memcpy>
		return true;
    8582:	2001      	movs	r0, #1
    8584:	bd10      	pop	{r4, pc}

00008586 <find_info_cb>:
{
    8586:	b570      	push	{r4, r5, r6, lr}
    8588:	4605      	mov	r5, r0
    858a:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    858c:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    858e:	688b      	ldr	r3, [r1, #8]
    8590:	b13b      	cbz	r3, 85a2 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    8592:	68a3      	ldr	r3, [r4, #8]
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	2b01      	cmp	r3, #1
    8598:	d011      	beq.n	85be <find_info_cb+0x38>
    859a:	2b02      	cmp	r3, #2
    859c:	d02b      	beq.n	85f6 <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    859e:	2000      	movs	r0, #0
    85a0:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    85a2:	6848      	ldr	r0, [r1, #4]
    85a4:	2101      	movs	r1, #1
    85a6:	3008      	adds	r0, #8
    85a8:	f011 fe14 	bl	1a1d4 <net_buf_simple_add>
    85ac:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    85ae:	682b      	ldr	r3, [r5, #0]
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	b913      	cbnz	r3, 85ba <find_info_cb+0x34>
    85b4:	2301      	movs	r3, #1
    85b6:	7003      	strb	r3, [r0, #0]
    85b8:	e7eb      	b.n	8592 <find_info_cb+0xc>
    85ba:	2302      	movs	r3, #2
    85bc:	e7fb      	b.n	85b6 <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    85be:	682b      	ldr	r3, [r5, #0]
    85c0:	781b      	ldrb	r3, [r3, #0]
    85c2:	b10b      	cbz	r3, 85c8 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    85c4:	2000      	movs	r0, #0
    85c6:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    85c8:	6860      	ldr	r0, [r4, #4]
    85ca:	2104      	movs	r1, #4
    85cc:	3008      	adds	r0, #8
    85ce:	f011 fe01 	bl	1a1d4 <net_buf_simple_add>
    85d2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    85d4:	8a2b      	ldrh	r3, [r5, #16]
    85d6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    85d8:	68e3      	ldr	r3, [r4, #12]
    85da:	682a      	ldr	r2, [r5, #0]
    85dc:	8852      	ldrh	r2, [r2, #2]
    85de:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    85e0:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    85e4:	6862      	ldr	r2, [r4, #4]
    85e6:	8992      	ldrh	r2, [r2, #12]
    85e8:	1a9b      	subs	r3, r3, r2
    85ea:	2b04      	cmp	r3, #4
    85ec:	d801      	bhi.n	85f2 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    85ee:	2000      	movs	r0, #0
    85f0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    85f2:	2001      	movs	r0, #1
    85f4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    85f6:	682b      	ldr	r3, [r5, #0]
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	2b02      	cmp	r3, #2
    85fc:	d001      	beq.n	8602 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    85fe:	2000      	movs	r0, #0
    8600:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    8602:	6860      	ldr	r0, [r4, #4]
    8604:	2112      	movs	r1, #18
    8606:	3008      	adds	r0, #8
    8608:	f011 fde4 	bl	1a1d4 <net_buf_simple_add>
    860c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    860e:	8a2b      	ldrh	r3, [r5, #16]
    8610:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    8612:	68e0      	ldr	r0, [r4, #12]
    8614:	6829      	ldr	r1, [r5, #0]
    8616:	2210      	movs	r2, #16
    8618:	3101      	adds	r1, #1
    861a:	3002      	adds	r0, #2
    861c:	f7f7 fe50 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    8620:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8624:	6862      	ldr	r2, [r4, #4]
    8626:	8992      	ldrh	r2, [r2, #12]
    8628:	1a9b      	subs	r3, r3, r2
    862a:	2b12      	cmp	r3, #18
    862c:	d901      	bls.n	8632 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    862e:	2001      	movs	r0, #1
    8630:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    8632:	2000      	movs	r0, #0
}
    8634:	bd70      	pop	{r4, r5, r6, pc}

00008636 <find_type_cb>:
{
    8636:	b5f0      	push	{r4, r5, r6, r7, lr}
    8638:	b089      	sub	sp, #36	; 0x24
    863a:	4605      	mov	r5, r0
    863c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    863e:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8640:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8642:	2300      	movs	r3, #0
    8644:	f88d 3018 	strb.w	r3, [sp, #24]
    8648:	f642 0301 	movw	r3, #10241	; 0x2801
    864c:	f8ad 301a 	strh.w	r3, [sp, #26]
    8650:	a906      	add	r1, sp, #24
    8652:	6800      	ldr	r0, [r0, #0]
    8654:	f7fb fa43 	bl	3ade <bt_uuid_cmp>
    8658:	b920      	cbnz	r0, 8664 <find_type_cb+0x2e>
		data->group = NULL;
    865a:	2300      	movs	r3, #0
    865c:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    865e:	2001      	movs	r0, #1
}
    8660:	b009      	add	sp, #36	; 0x24
    8662:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8664:	2300      	movs	r3, #0
    8666:	f88d 301c 	strb.w	r3, [sp, #28]
    866a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    866e:	f8ad 301e 	strh.w	r3, [sp, #30]
    8672:	a907      	add	r1, sp, #28
    8674:	6828      	ldr	r0, [r5, #0]
    8676:	f7fb fa32 	bl	3ade <bt_uuid_cmp>
    867a:	b148      	cbz	r0, 8690 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    867c:	68a3      	ldr	r3, [r4, #8]
    867e:	2b00      	cmp	r3, #0
    8680:	d039      	beq.n	86f6 <find_type_cb+0xc0>
    8682:	8a2a      	ldrh	r2, [r5, #16]
    8684:	8859      	ldrh	r1, [r3, #2]
    8686:	428a      	cmp	r2, r1
    8688:	d937      	bls.n	86fa <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    868a:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    868c:	2001      	movs	r0, #1
    868e:	e7e7      	b.n	8660 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    8690:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8694:	6862      	ldr	r2, [r4, #4]
    8696:	8992      	ldrh	r2, [r2, #12]
    8698:	1a9b      	subs	r3, r3, r2
    869a:	2b03      	cmp	r3, #3
    869c:	d801      	bhi.n	86a2 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    869e:	2000      	movs	r0, #0
    86a0:	e7de      	b.n	8660 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    86a2:	686e      	ldr	r6, [r5, #4]
    86a4:	2300      	movs	r3, #0
    86a6:	9300      	str	r3, [sp, #0]
    86a8:	2310      	movs	r3, #16
    86aa:	aa02      	add	r2, sp, #8
    86ac:	4629      	mov	r1, r5
    86ae:	4638      	mov	r0, r7
    86b0:	47b0      	blx	r6
	if (read < 0) {
    86b2:	1e02      	subs	r2, r0, #0
    86b4:	db06      	blt.n	86c4 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    86b6:	7c23      	ldrb	r3, [r4, #16]
    86b8:	429a      	cmp	r2, r3
    86ba:	d007      	beq.n	86cc <find_type_cb+0x96>
		data->group = NULL;
    86bc:	2300      	movs	r3, #0
    86be:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    86c0:	2001      	movs	r0, #1
    86c2:	e7cd      	b.n	8660 <find_type_cb+0x2a>
		data->group = NULL;
    86c4:	2300      	movs	r3, #0
    86c6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    86c8:	2001      	movs	r0, #1
    86ca:	e7c9      	b.n	8660 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    86cc:	a902      	add	r1, sp, #8
    86ce:	68e0      	ldr	r0, [r4, #12]
    86d0:	f022 f960 	bl	2a994 <memcmp>
    86d4:	2800      	cmp	r0, #0
    86d6:	d1f1      	bne.n	86bc <find_type_cb+0x86>
	data->err = 0x00;
    86d8:	2300      	movs	r3, #0
    86da:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    86dc:	6860      	ldr	r0, [r4, #4]
    86de:	2104      	movs	r1, #4
    86e0:	3008      	adds	r0, #8
    86e2:	f011 fd77 	bl	1a1d4 <net_buf_simple_add>
    86e6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    86e8:	8a2b      	ldrh	r3, [r5, #16]
    86ea:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    86ec:	68a3      	ldr	r3, [r4, #8]
    86ee:	8a2a      	ldrh	r2, [r5, #16]
    86f0:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    86f2:	2001      	movs	r0, #1
    86f4:	e7b4      	b.n	8660 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    86f6:	2001      	movs	r0, #1
    86f8:	e7b2      	b.n	8660 <find_type_cb+0x2a>
    86fa:	2001      	movs	r0, #1
    86fc:	e7b0      	b.n	8660 <find_type_cb+0x2a>

000086fe <att_change_security>:
{
    86fe:	b508      	push	{r3, lr}
	switch (err) {
    8700:	2905      	cmp	r1, #5
    8702:	d008      	beq.n	8716 <att_change_security+0x18>
    8704:	290f      	cmp	r1, #15
    8706:	d113      	bne.n	8730 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    8708:	7a03      	ldrb	r3, [r0, #8]
    870a:	2b01      	cmp	r3, #1
    870c:	d813      	bhi.n	8736 <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    870e:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    8710:	f7fd fe4a 	bl	63a8 <bt_conn_security>
    8714:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    8716:	7a03      	ldrb	r3, [r0, #8]
    8718:	2b01      	cmp	r3, #1
    871a:	d905      	bls.n	8728 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    871c:	2b02      	cmp	r3, #2
    871e:	d905      	bls.n	872c <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    8720:	2b03      	cmp	r3, #3
    8722:	d80b      	bhi.n	873c <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    8724:	2104      	movs	r1, #4
    8726:	e7f3      	b.n	8710 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    8728:	2102      	movs	r1, #2
    872a:	e7f1      	b.n	8710 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    872c:	2103      	movs	r1, #3
    872e:	e7ef      	b.n	8710 <att_change_security+0x12>
		return -EINVAL;
    8730:	f06f 0015 	mvn.w	r0, #21
    8734:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8736:	f06f 0077 	mvn.w	r0, #119	; 0x77
    873a:	bd08      	pop	{r3, pc}
			return -EALREADY;
    873c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    8740:	bd08      	pop	{r3, pc}
	...

00008744 <bt_att_connected>:
{
    8744:	b510      	push	{r4, lr}
    8746:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8748:	2317      	movs	r3, #23
    874a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    874e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    8752:	4906      	ldr	r1, [pc, #24]	; (876c <bt_att_connected+0x28>)
    8754:	30ac      	adds	r0, #172	; 0xac
    8756:	f020 fe0d 	bl	29374 <k_delayed_work_init>
	list->head = NULL;
    875a:	2300      	movs	r3, #0
    875c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    8760:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    8764:	6820      	ldr	r0, [r4, #0]
    8766:	f001 fadd 	bl	9d24 <bt_gatt_connected>
    876a:	bd10      	pop	{r4, pc}
    876c:	00008acb 	.word	0x00008acb

00008770 <att_send_req>:
{
    8770:	b570      	push	{r4, r5, r6, lr}
    8772:	4605      	mov	r5, r0
    8774:	460c      	mov	r4, r1
	att->req = req;
    8776:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    877a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    877e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8782:	4630      	mov	r0, r6
    8784:	f020 f838 	bl	287f8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8788:	682b      	ldr	r3, [r5, #0]
    878a:	7b1b      	ldrb	r3, [r3, #12]
    878c:	2b03      	cmp	r3, #3
    878e:	d019      	beq.n	87c4 <att_send_req+0x54>
    8790:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    8792:	b323      	cbz	r3, 87de <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    8794:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    8796:	f106 0008 	add.w	r0, r6, #8
    879a:	f011 fd80 	bl	1a29e <net_buf_simple_headroom>
    879e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    87a0:	89b3      	ldrh	r3, [r6, #12]
    87a2:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    87a4:	682d      	ldr	r5, [r5, #0]
    87a6:	6920      	ldr	r0, [r4, #16]
    87a8:	f011 fce4 	bl	1a174 <net_buf_ref>
    87ac:	4606      	mov	r6, r0
    87ae:	6920      	ldr	r0, [r4, #16]
    87b0:	f7ff fcf0 	bl	8194 <att_cb>
    87b4:	4603      	mov	r3, r0
    87b6:	4632      	mov	r2, r6
    87b8:	2104      	movs	r1, #4
    87ba:	4628      	mov	r0, r5
    87bc:	f7fe fea3 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    87c0:	2000      	movs	r0, #0
}
    87c2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    87c4:	f3bf 8f5b 	dmb	ish
    87c8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    87cc:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    87d0:	f013 0f04 	tst.w	r3, #4
    87d4:	d101      	bne.n	87da <att_send_req+0x6a>
    87d6:	2301      	movs	r3, #1
    87d8:	e7db      	b.n	8792 <att_send_req+0x22>
    87da:	2300      	movs	r3, #0
    87dc:	e7d9      	b.n	8792 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    87de:	4630      	mov	r0, r6
    87e0:	f01f fff7 	bl	287d2 <_impl_k_sem_give>
		return -ENOTCONN;
    87e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    87e8:	bd70      	pop	{r4, r5, r6, pc}

000087ea <att_process>:
{
    87ea:	b508      	push	{r3, lr}
	return (!list->head);
    87ec:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    87f0:	b131      	cbz	r1, 8800 <att_process+0x16>
	list->head = node->next;
    87f2:	680b      	ldr	r3, [r1, #0]
    87f4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    87f8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    87fc:	4291      	cmp	r1, r2
    87fe:	d003      	beq.n	8808 <att_process+0x1e>
	if (!node) {
    8800:	b109      	cbz	r1, 8806 <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    8802:	f7ff ffb5 	bl	8770 <att_send_req>
    8806:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    8808:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    880c:	e7f8      	b.n	8800 <att_process+0x16>

0000880e <att_handle_rsp>:
{
    880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8812:	b082      	sub	sp, #8
    8814:	4604      	mov	r4, r0
    8816:	460e      	mov	r6, r1
    8818:	4617      	mov	r7, r2
    881a:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    881c:	30ac      	adds	r0, #172	; 0xac
    881e:	f020 fdc7 	bl	293b0 <k_delayed_work_cancel>
	if (!att->req) {
    8822:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8826:	b1e3      	cbz	r3, 8862 <att_handle_rsp+0x54>
	if (att->req->buf) {
    8828:	6918      	ldr	r0, [r3, #16]
    882a:	b128      	cbz	r0, 8838 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    882c:	f011 fc86 	bl	1a13c <net_buf_unref>
		att->req->buf = NULL;
    8830:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8834:	2200      	movs	r2, #0
    8836:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    8838:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    883c:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    8840:	2200      	movs	r2, #0
    8842:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    8844:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8848:	9300      	str	r3, [sp, #0]
    884a:	463b      	mov	r3, r7
    884c:	4632      	mov	r2, r6
    884e:	4629      	mov	r1, r5
    8850:	6820      	ldr	r0, [r4, #0]
    8852:	47c0      	blx	r8
	if (!att->req->func) {
    8854:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    8858:	6843      	ldr	r3, [r0, #4]
    885a:	b14b      	cbz	r3, 8870 <att_handle_rsp+0x62>
	att->req = NULL;
    885c:	2300      	movs	r3, #0
    885e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    8862:	4620      	mov	r0, r4
    8864:	f7ff ffc1 	bl	87ea <att_process>
}
    8868:	2000      	movs	r0, #0
    886a:	b002      	add	sp, #8
    886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    8870:	f7ff fd34 	bl	82dc <att_req_destroy>
    8874:	e7f2      	b.n	885c <att_handle_rsp+0x4e>

00008876 <att_confirm>:
{
    8876:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8878:	2300      	movs	r3, #0
    887a:	898a      	ldrh	r2, [r1, #12]
    887c:	6889      	ldr	r1, [r1, #8]
    887e:	f7ff ffc6 	bl	880e <att_handle_rsp>
}
    8882:	bd08      	pop	{r3, pc}

00008884 <att_handle_exec_write_rsp>:
{
    8884:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8886:	2300      	movs	r3, #0
    8888:	898a      	ldrh	r2, [r1, #12]
    888a:	6889      	ldr	r1, [r1, #8]
    888c:	f7ff ffbf 	bl	880e <att_handle_rsp>
}
    8890:	bd08      	pop	{r3, pc}

00008892 <att_handle_prepare_write_rsp>:
{
    8892:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8894:	2300      	movs	r3, #0
    8896:	898a      	ldrh	r2, [r1, #12]
    8898:	6889      	ldr	r1, [r1, #8]
    889a:	f7ff ffb8 	bl	880e <att_handle_rsp>
}
    889e:	bd08      	pop	{r3, pc}

000088a0 <att_handle_write_rsp>:
{
    88a0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88a2:	2300      	movs	r3, #0
    88a4:	898a      	ldrh	r2, [r1, #12]
    88a6:	6889      	ldr	r1, [r1, #8]
    88a8:	f7ff ffb1 	bl	880e <att_handle_rsp>
}
    88ac:	bd08      	pop	{r3, pc}

000088ae <att_handle_read_mult_rsp>:
{
    88ae:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88b0:	2300      	movs	r3, #0
    88b2:	898a      	ldrh	r2, [r1, #12]
    88b4:	6889      	ldr	r1, [r1, #8]
    88b6:	f7ff ffaa 	bl	880e <att_handle_rsp>
}
    88ba:	bd08      	pop	{r3, pc}

000088bc <att_handle_read_blob_rsp>:
{
    88bc:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88be:	2300      	movs	r3, #0
    88c0:	898a      	ldrh	r2, [r1, #12]
    88c2:	6889      	ldr	r1, [r1, #8]
    88c4:	f7ff ffa3 	bl	880e <att_handle_rsp>
}
    88c8:	bd08      	pop	{r3, pc}

000088ca <att_handle_read_rsp>:
{
    88ca:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88cc:	2300      	movs	r3, #0
    88ce:	898a      	ldrh	r2, [r1, #12]
    88d0:	6889      	ldr	r1, [r1, #8]
    88d2:	f7ff ff9c 	bl	880e <att_handle_rsp>
}
    88d6:	bd08      	pop	{r3, pc}

000088d8 <att_handle_read_type_rsp>:
{
    88d8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88da:	2300      	movs	r3, #0
    88dc:	898a      	ldrh	r2, [r1, #12]
    88de:	6889      	ldr	r1, [r1, #8]
    88e0:	f7ff ff95 	bl	880e <att_handle_rsp>
}
    88e4:	bd08      	pop	{r3, pc}

000088e6 <att_handle_find_type_rsp>:
{
    88e6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88e8:	2300      	movs	r3, #0
    88ea:	898a      	ldrh	r2, [r1, #12]
    88ec:	6889      	ldr	r1, [r1, #8]
    88ee:	f7ff ff8e 	bl	880e <att_handle_rsp>
}
    88f2:	bd08      	pop	{r3, pc}

000088f4 <att_handle_find_info_rsp>:
{
    88f4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88f6:	2300      	movs	r3, #0
    88f8:	898a      	ldrh	r2, [r1, #12]
    88fa:	6889      	ldr	r1, [r1, #8]
    88fc:	f7ff ff87 	bl	880e <att_handle_rsp>
}
    8900:	bd08      	pop	{r3, pc}

00008902 <att_mtu_rsp>:
	if (!att) {
    8902:	b1b8      	cbz	r0, 8934 <att_mtu_rsp+0x32>
{
    8904:	b508      	push	{r3, lr}
    8906:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    8908:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    890a:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    890c:	2b16      	cmp	r3, #22
    890e:	d90b      	bls.n	8928 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    8910:	2b41      	cmp	r3, #65	; 0x41
    8912:	bf28      	it	cs
    8914:	2341      	movcs	r3, #65	; 0x41
    8916:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    891a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    891e:	2300      	movs	r3, #0
    8920:	8992      	ldrh	r2, [r2, #12]
    8922:	f7ff ff74 	bl	880e <att_handle_rsp>
    8926:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    8928:	2304      	movs	r3, #4
    892a:	2200      	movs	r2, #0
    892c:	4611      	mov	r1, r2
    892e:	f7ff ff6e 	bl	880e <att_handle_rsp>
    8932:	bd08      	pop	{r3, pc}
		return 0;
    8934:	2000      	movs	r0, #0
    8936:	4770      	bx	lr

00008938 <bt_att_encrypt_change>:
{
    8938:	b570      	push	{r4, r5, r6, lr}
    893a:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    893c:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    893e:	b941      	cbnz	r1, 8952 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    8940:	7a2b      	ldrb	r3, [r5, #8]
    8942:	2b01      	cmp	r3, #1
    8944:	d004      	beq.n	8950 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    8946:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    894a:	b10b      	cbz	r3, 8950 <bt_att_encrypt_change+0x18>
    894c:	7d1b      	ldrb	r3, [r3, #20]
    894e:	b933      	cbnz	r3, 895e <bt_att_encrypt_change+0x26>
    8950:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8952:	2305      	movs	r3, #5
    8954:	2200      	movs	r2, #0
    8956:	4611      	mov	r1, r2
    8958:	f7ff ff59 	bl	880e <att_handle_rsp>
		return;
    895c:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    895e:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8966:	4630      	mov	r0, r6
    8968:	f01f ff46 	bl	287f8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    896c:	6823      	ldr	r3, [r4, #0]
    896e:	7b1b      	ldrb	r3, [r3, #12]
    8970:	2b03      	cmp	r3, #3
    8972:	d012      	beq.n	899a <bt_att_encrypt_change+0x62>
    8974:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    8976:	b1eb      	cbz	r3, 89b4 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    8978:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    897c:	691e      	ldr	r6, [r3, #16]
    897e:	4630      	mov	r0, r6
    8980:	f7ff fc08 	bl	8194 <att_cb>
    8984:	4603      	mov	r3, r0
    8986:	4632      	mov	r2, r6
    8988:	2104      	movs	r1, #4
    898a:	4628      	mov	r0, r5
    898c:	f7fe fdbb 	bl	7506 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    8990:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8994:	2200      	movs	r2, #0
    8996:	611a      	str	r2, [r3, #16]
    8998:	e7da      	b.n	8950 <bt_att_encrypt_change+0x18>
    899a:	f3bf 8f5b 	dmb	ish
    899e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    89a2:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    89a6:	f013 0f04 	tst.w	r3, #4
    89aa:	d101      	bne.n	89b0 <bt_att_encrypt_change+0x78>
    89ac:	2301      	movs	r3, #1
    89ae:	e7e2      	b.n	8976 <bt_att_encrypt_change+0x3e>
    89b0:	2300      	movs	r3, #0
    89b2:	e7e0      	b.n	8976 <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    89b4:	4630      	mov	r0, r6
    89b6:	f01f ff0c 	bl	287d2 <_impl_k_sem_give>
    89ba:	bd70      	pop	{r4, r5, r6, pc}

000089bc <att_error_rsp>:
{
    89bc:	b538      	push	{r3, r4, r5, lr}
    89be:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    89c0:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    89c2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    89c6:	b1fb      	cbz	r3, 8a08 <att_error_rsp+0x4c>
	if (att->req->buf) {
    89c8:	691a      	ldr	r2, [r3, #16]
    89ca:	b132      	cbz	r2, 89da <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    89cc:	f102 0110 	add.w	r1, r2, #16
    89d0:	899d      	ldrh	r5, [r3, #12]
    89d2:	4429      	add	r1, r5
    89d4:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    89d6:	89db      	ldrh	r3, [r3, #14]
    89d8:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    89da:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    89dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    89e0:	7d1b      	ldrb	r3, [r3, #20]
    89e2:	b133      	cbz	r3, 89f2 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    89e4:	462b      	mov	r3, r5
    89e6:	2200      	movs	r2, #0
    89e8:	4611      	mov	r1, r2
    89ea:	4620      	mov	r0, r4
    89ec:	f7ff ff0f 	bl	880e <att_handle_rsp>
}
    89f0:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    89f2:	4629      	mov	r1, r5
    89f4:	6820      	ldr	r0, [r4, #0]
    89f6:	f7ff fe82 	bl	86fe <att_change_security>
    89fa:	2800      	cmp	r0, #0
    89fc:	d1f2      	bne.n	89e4 <att_error_rsp+0x28>
		att->req->retrying = true;
    89fe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8a02:	2201      	movs	r2, #1
    8a04:	751a      	strb	r2, [r3, #20]
		return 0;
    8a06:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    8a08:	250e      	movs	r5, #14
    8a0a:	e7eb      	b.n	89e4 <att_error_rsp+0x28>

00008a0c <att_reset>:
{
    8a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a0e:	b083      	sub	sp, #12
    8a10:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    8a12:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8a16:	f3bf 8f5b 	dmb	ish
    8a1a:	e853 2f00 	ldrex	r2, [r3]
    8a1e:	f042 0204 	orr.w	r2, r2, #4
    8a22:	e843 2100 	strex	r1, r2, [r3]
    8a26:	2900      	cmp	r1, #0
    8a28:	d1f7      	bne.n	8a1a <att_reset+0xe>
    8a2a:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    8a2e:	2400      	movs	r4, #0
    8a30:	e004      	b.n	8a3c <att_reset+0x30>
    8a32:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    8a36:	f01f fecc 	bl	287d2 <_impl_k_sem_give>
    8a3a:	3401      	adds	r4, #1
    8a3c:	2c01      	cmp	r4, #1
    8a3e:	ddf8      	ble.n	8a32 <att_reset+0x26>
	return list->head;
    8a40:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8a44:	b11d      	cbz	r5, 8a4e <att_reset+0x42>
    8a46:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a48:	b145      	cbz	r5, 8a5c <att_reset+0x50>
	return node->next;
    8a4a:	682c      	ldr	r4, [r5, #0]
    8a4c:	e006      	b.n	8a5c <att_reset+0x50>
    8a4e:	462c      	mov	r4, r5
    8a50:	e004      	b.n	8a5c <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a52:	4623      	mov	r3, r4
    8a54:	e014      	b.n	8a80 <att_reset+0x74>
    8a56:	4623      	mov	r3, r4
    8a58:	4625      	mov	r5, r4
    8a5a:	461c      	mov	r4, r3
    8a5c:	b1c5      	cbz	r5, 8a90 <att_reset+0x84>
		if (req->func) {
    8a5e:	686e      	ldr	r6, [r5, #4]
    8a60:	b12e      	cbz	r6, 8a6e <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    8a62:	9500      	str	r5, [sp, #0]
    8a64:	2300      	movs	r3, #0
    8a66:	461a      	mov	r2, r3
    8a68:	210e      	movs	r1, #14
    8a6a:	4618      	mov	r0, r3
    8a6c:	47b0      	blx	r6
		att_req_destroy(req);
    8a6e:	4628      	mov	r0, r5
    8a70:	f7ff fc34 	bl	82dc <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8a74:	2c00      	cmp	r4, #0
    8a76:	d0ee      	beq.n	8a56 <att_reset+0x4a>
    8a78:	4622      	mov	r2, r4
    8a7a:	2c00      	cmp	r4, #0
    8a7c:	d0e9      	beq.n	8a52 <att_reset+0x46>
	return node->next;
    8a7e:	6823      	ldr	r3, [r4, #0]
    8a80:	b113      	cbz	r3, 8a88 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a82:	b11a      	cbz	r2, 8a8c <att_reset+0x80>
	return node->next;
    8a84:	6823      	ldr	r3, [r4, #0]
    8a86:	e7e7      	b.n	8a58 <att_reset+0x4c>
    8a88:	2300      	movs	r3, #0
    8a8a:	e7e5      	b.n	8a58 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a8c:	2300      	movs	r3, #0
    8a8e:	e7e3      	b.n	8a58 <att_reset+0x4c>
	list->head = NULL;
    8a90:	2300      	movs	r3, #0
    8a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    8a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    8a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    8a9e:	b12b      	cbz	r3, 8aac <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8aa0:	230e      	movs	r3, #14
    8aa2:	2200      	movs	r2, #0
    8aa4:	4611      	mov	r1, r2
    8aa6:	4638      	mov	r0, r7
    8aa8:	f7ff feb1 	bl	880e <att_handle_rsp>
}
    8aac:	b003      	add	sp, #12
    8aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008ab0 <bt_att_disconnected>:
{
    8ab0:	b510      	push	{r4, lr}
    8ab2:	4604      	mov	r4, r0
	att_reset(att);
    8ab4:	f7ff ffaa 	bl	8a0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8ab8:	6820      	ldr	r0, [r4, #0]
    8aba:	f001 f93f 	bl	9d3c <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    8abe:	22ec      	movs	r2, #236	; 0xec
    8ac0:	2100      	movs	r1, #0
    8ac2:	4620      	mov	r0, r4
    8ac4:	f021 fffa 	bl	2aabc <memset>
    8ac8:	bd10      	pop	{r4, pc}

00008aca <att_timeout>:
{
    8aca:	b510      	push	{r4, lr}
    8acc:	4604      	mov	r4, r0
	att_reset(att);
    8ace:	38ac      	subs	r0, #172	; 0xac
    8ad0:	f7ff ff9c 	bl	8a0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8ad4:	f854 0cac 	ldr.w	r0, [r4, #-172]
    8ad8:	f001 f930 	bl	9d3c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    8adc:	2300      	movs	r3, #0
    8ade:	f844 3cac 	str.w	r3, [r4, #-172]
    8ae2:	bd10      	pop	{r4, pc}

00008ae4 <bt_att_create_pdu>:
{
    8ae4:	b538      	push	{r3, r4, r5, lr}
    8ae6:	460d      	mov	r5, r1
    8ae8:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    8aea:	f7ff fbab 	bl	8244 <att_chan_get>
	if (!att) {
    8aee:	b180      	cbz	r0, 8b12 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8af0:	3401      	adds	r4, #1
    8af2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    8af6:	429c      	cmp	r4, r3
    8af8:	d80d      	bhi.n	8b16 <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    8afa:	2100      	movs	r1, #0
    8afc:	4608      	mov	r0, r1
    8afe:	f7fe fc6a 	bl	73d6 <bt_l2cap_create_pdu>
    8b02:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8b04:	2101      	movs	r1, #1
    8b06:	3008      	adds	r0, #8
    8b08:	f011 fb64 	bl	1a1d4 <net_buf_simple_add>
	hdr->code = op;
    8b0c:	7005      	strb	r5, [r0, #0]
}
    8b0e:	4620      	mov	r0, r4
    8b10:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8b12:	2400      	movs	r4, #0
    8b14:	e7fb      	b.n	8b0e <bt_att_create_pdu+0x2a>
		return NULL;
    8b16:	2400      	movs	r4, #0
    8b18:	e7f9      	b.n	8b0e <bt_att_create_pdu+0x2a>
	...

00008b1c <att_indicate>:
{
    8b1c:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8b1e:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8b20:	f101 0008 	add.w	r0, r1, #8
    8b24:	f011 fbb3 	bl	1a28e <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8b28:	2200      	movs	r2, #0
    8b2a:	211e      	movs	r1, #30
    8b2c:	4620      	mov	r0, r4
    8b2e:	f7ff ffd9 	bl	8ae4 <bt_att_create_pdu>
	if (!buf) {
    8b32:	b128      	cbz	r0, 8b40 <att_indicate+0x24>
    8b34:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    8b36:	4b03      	ldr	r3, [pc, #12]	; (8b44 <att_indicate+0x28>)
    8b38:	2104      	movs	r1, #4
    8b3a:	4620      	mov	r0, r4
    8b3c:	f7fe fce3 	bl	7506 <bt_l2cap_send_cb>
}
    8b40:	2000      	movs	r0, #0
    8b42:	bd10      	pop	{r4, pc}
    8b44:	0000833f 	.word	0x0000833f

00008b48 <att_mtu_req>:
{
    8b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8b4c:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    8b4e:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    8b50:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8b52:	2d16      	cmp	r5, #22
    8b54:	d802      	bhi.n	8b5c <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    8b56:	2004      	movs	r0, #4
    8b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b5c:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8b5e:	2202      	movs	r2, #2
    8b60:	2103      	movs	r1, #3
    8b62:	4638      	mov	r0, r7
    8b64:	f7ff ffbe 	bl	8ae4 <bt_att_create_pdu>
	if (!pdu) {
    8b68:	4680      	mov	r8, r0
    8b6a:	b1b8      	cbz	r0, 8b9c <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8b6c:	2102      	movs	r1, #2
    8b6e:	3008      	adds	r0, #8
    8b70:	f011 fb30 	bl	1a1d4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8b74:	2600      	movs	r6, #0
    8b76:	2341      	movs	r3, #65	; 0x41
    8b78:	7003      	strb	r3, [r0, #0]
    8b7a:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    8b7c:	4b09      	ldr	r3, [pc, #36]	; (8ba4 <att_mtu_req+0x5c>)
    8b7e:	4642      	mov	r2, r8
    8b80:	2104      	movs	r1, #4
    8b82:	4638      	mov	r0, r7
    8b84:	f7fe fcbf 	bl	7506 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    8b88:	2d41      	cmp	r5, #65	; 0x41
    8b8a:	bf28      	it	cs
    8b8c:	2541      	movcs	r5, #65	; 0x41
    8b8e:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8b92:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    8b96:	4630      	mov	r0, r6
    8b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    8b9c:	200e      	movs	r0, #14
}
    8b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ba2:	bf00      	nop
    8ba4:	00008307 	.word	0x00008307

00008ba8 <send_err_rsp>:
	if (!req) {
    8ba8:	b901      	cbnz	r1, 8bac <send_err_rsp+0x4>
    8baa:	4770      	bx	lr
{
    8bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bb0:	460f      	mov	r7, r1
    8bb2:	461d      	mov	r5, r3
    8bb4:	4616      	mov	r6, r2
    8bb6:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8bb8:	2204      	movs	r2, #4
    8bba:	2101      	movs	r1, #1
    8bbc:	f7ff ff92 	bl	8ae4 <bt_att_create_pdu>
	if (!buf) {
    8bc0:	4680      	mov	r8, r0
    8bc2:	b168      	cbz	r0, 8be0 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8bc4:	2104      	movs	r1, #4
    8bc6:	3008      	adds	r0, #8
    8bc8:	f011 fb04 	bl	1a1d4 <net_buf_simple_add>
	rsp->request = req;
    8bcc:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    8bce:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    8bd2:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    8bd4:	4b03      	ldr	r3, [pc, #12]	; (8be4 <send_err_rsp+0x3c>)
    8bd6:	4642      	mov	r2, r8
    8bd8:	2104      	movs	r1, #4
    8bda:	4620      	mov	r0, r4
    8bdc:	f7fe fc93 	bl	7506 <bt_l2cap_send_cb>
    8be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8be4:	00008307 	.word	0x00008307

00008be8 <bt_att_recv>:
{
    8be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    8bea:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8bec:	898b      	ldrh	r3, [r1, #12]
    8bee:	b903      	cbnz	r3, 8bf2 <bt_att_recv+0xa>
    8bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bf2:	460e      	mov	r6, r1
    8bf4:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    8bf6:	2101      	movs	r1, #1
    8bf8:	f106 0008 	add.w	r0, r6, #8
    8bfc:	f011 fb37 	bl	1a26e <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8c00:	2300      	movs	r3, #0
    8c02:	2b1a      	cmp	r3, #26
    8c04:	d822      	bhi.n	8c4c <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    8c06:	782c      	ldrb	r4, [r5, #0]
    8c08:	4a2c      	ldr	r2, [pc, #176]	; (8cbc <bt_att_recv+0xd4>)
    8c0a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8c0e:	4294      	cmp	r4, r2
    8c10:	d001      	beq.n	8c16 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8c12:	3301      	adds	r3, #1
    8c14:	e7f5      	b.n	8c02 <bt_att_recv+0x1a>
			handler = &handlers[i];
    8c16:	4c29      	ldr	r4, [pc, #164]	; (8cbc <bt_att_recv+0xd4>)
    8c18:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    8c1c:	b1c4      	cbz	r4, 8c50 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    8c1e:	78a3      	ldrb	r3, [r4, #2]
    8c20:	2b01      	cmp	r3, #1
    8c22:	d022      	beq.n	8c6a <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    8c24:	78a3      	ldrb	r3, [r4, #2]
    8c26:	2b05      	cmp	r3, #5
    8c28:	d031      	beq.n	8c8e <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    8c2a:	89b2      	ldrh	r2, [r6, #12]
    8c2c:	7863      	ldrb	r3, [r4, #1]
    8c2e:	429a      	cmp	r2, r3
    8c30:	d23f      	bcs.n	8cb2 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    8c32:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    8c34:	78a2      	ldrb	r2, [r4, #2]
    8c36:	2a01      	cmp	r2, #1
    8c38:	d1da      	bne.n	8bf0 <bt_att_recv+0x8>
    8c3a:	2800      	cmp	r0, #0
    8c3c:	d0d8      	beq.n	8bf0 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8c3e:	4603      	mov	r3, r0
    8c40:	2200      	movs	r2, #0
    8c42:	7829      	ldrb	r1, [r5, #0]
    8c44:	6838      	ldr	r0, [r7, #0]
    8c46:	f7ff ffaf 	bl	8ba8 <send_err_rsp>
    8c4a:	e7d1      	b.n	8bf0 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8c4c:	2400      	movs	r4, #0
    8c4e:	e7e5      	b.n	8c1c <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8c50:	782c      	ldrb	r4, [r5, #0]
    8c52:	4620      	mov	r0, r4
    8c54:	f7ff fa86 	bl	8164 <att_op_get_type>
    8c58:	2800      	cmp	r0, #0
    8c5a:	d0c9      	beq.n	8bf0 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    8c5c:	2306      	movs	r3, #6
    8c5e:	2200      	movs	r2, #0
    8c60:	4621      	mov	r1, r4
    8c62:	6838      	ldr	r0, [r7, #0]
    8c64:	f7ff ffa0 	bl	8ba8 <send_err_rsp>
    8c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    8c6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8c6e:	f3bf 8f5b 	dmb	ish
    8c72:	e853 2f00 	ldrex	r2, [r3]
    8c76:	f042 0101 	orr.w	r1, r2, #1
    8c7a:	e843 1000 	strex	r0, r1, [r3]
    8c7e:	2800      	cmp	r0, #0
    8c80:	d1f7      	bne.n	8c72 <bt_att_recv+0x8a>
    8c82:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8c86:	f012 0f01 	tst.w	r2, #1
    8c8a:	d0cb      	beq.n	8c24 <bt_att_recv+0x3c>
    8c8c:	e7b0      	b.n	8bf0 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    8c8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8c92:	f3bf 8f5b 	dmb	ish
    8c96:	e853 2f00 	ldrex	r2, [r3]
    8c9a:	f042 0102 	orr.w	r1, r2, #2
    8c9e:	e843 1000 	strex	r0, r1, [r3]
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d1f7      	bne.n	8c96 <bt_att_recv+0xae>
    8ca6:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    8caa:	f012 0f02 	tst.w	r2, #2
    8cae:	d0bc      	beq.n	8c2a <bt_att_recv+0x42>
    8cb0:	e79e      	b.n	8bf0 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    8cb2:	6863      	ldr	r3, [r4, #4]
    8cb4:	4631      	mov	r1, r6
    8cb6:	4638      	mov	r0, r7
    8cb8:	4798      	blx	r3
    8cba:	e7bb      	b.n	8c34 <bt_att_recv+0x4c>
    8cbc:	0002f534 	.word	0x0002f534

00008cc0 <att_write_rsp>:
{
    8cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cc4:	b086      	sub	sp, #24
	if (!handle) {
    8cc6:	b923      	cbnz	r3, 8cd2 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    8cc8:	2401      	movs	r4, #1
}
    8cca:	4620      	mov	r0, r4
    8ccc:	b006      	add	sp, #24
    8cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cd2:	4698      	mov	r8, r3
    8cd4:	4617      	mov	r7, r2
    8cd6:	460e      	mov	r6, r1
    8cd8:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    8cda:	2218      	movs	r2, #24
    8cdc:	2100      	movs	r1, #0
    8cde:	4668      	mov	r0, sp
    8ce0:	f021 feec 	bl	2aabc <memset>
	if (rsp) {
    8ce4:	b137      	cbz	r7, 8cf4 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8ce6:	2200      	movs	r2, #0
    8ce8:	4639      	mov	r1, r7
    8cea:	4628      	mov	r0, r5
    8cec:	f7ff fefa 	bl	8ae4 <bt_att_create_pdu>
    8cf0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8cf2:	b3a0      	cbz	r0, 8d5e <att_write_rsp+0x9e>
	data.conn = conn;
    8cf4:	9500      	str	r5, [sp, #0]
	data.op = op;
    8cf6:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    8cfa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8cfe:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d04:	9303      	str	r3, [sp, #12]
	data.len = len;
    8d06:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8d0a:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8d0e:	2301      	movs	r3, #1
    8d10:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8d14:	466b      	mov	r3, sp
    8d16:	4a13      	ldr	r2, [pc, #76]	; (8d64 <att_write_rsp+0xa4>)
    8d18:	4641      	mov	r1, r8
    8d1a:	4640      	mov	r0, r8
    8d1c:	f000 ff26 	bl	9b6c <bt_gatt_foreach_attr>
	if (data.err) {
    8d20:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8d24:	b194      	cbz	r4, 8d4c <att_write_rsp+0x8c>
		if (rsp) {
    8d26:	b91f      	cbnz	r7, 8d30 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8d28:	2e18      	cmp	r6, #24
    8d2a:	d00c      	beq.n	8d46 <att_write_rsp+0x86>
    8d2c:	2400      	movs	r4, #0
    8d2e:	e7cc      	b.n	8cca <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    8d30:	9801      	ldr	r0, [sp, #4]
    8d32:	f011 fa03 	bl	1a13c <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    8d36:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d3a:	4642      	mov	r2, r8
    8d3c:	4631      	mov	r1, r6
    8d3e:	4628      	mov	r0, r5
    8d40:	f7ff ff32 	bl	8ba8 <send_err_rsp>
    8d44:	e7f0      	b.n	8d28 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8d46:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8d4a:	e7be      	b.n	8cca <att_write_rsp+0xa>
	if (data.buf) {
    8d4c:	9a01      	ldr	r2, [sp, #4]
    8d4e:	2a00      	cmp	r2, #0
    8d50:	d0bb      	beq.n	8cca <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8d52:	4b05      	ldr	r3, [pc, #20]	; (8d68 <att_write_rsp+0xa8>)
    8d54:	2104      	movs	r1, #4
    8d56:	4628      	mov	r0, r5
    8d58:	f7fe fbd5 	bl	7506 <bt_l2cap_send_cb>
    8d5c:	e7b5      	b.n	8cca <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    8d5e:	240e      	movs	r4, #14
    8d60:	e7b3      	b.n	8cca <att_write_rsp+0xa>
    8d62:	bf00      	nop
    8d64:	00008107 	.word	0x00008107
    8d68:	00008307 	.word	0x00008307

00008d6c <att_signed_write_cmd>:
{
    8d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d6e:	b085      	sub	sp, #20
    8d70:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8d72:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    8d74:	460c      	mov	r4, r1
    8d76:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    8d7a:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8d7c:	2101      	movs	r1, #1
    8d7e:	4620      	mov	r0, r4
    8d80:	f011 fa5f 	bl	1a242 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8d84:	4629      	mov	r1, r5
    8d86:	4630      	mov	r0, r6
    8d88:	f003 faf2 	bl	c370 <bt_smp_sign_verify>
	if (err) {
    8d8c:	b110      	cbz	r0, 8d94 <att_signed_write_cmd+0x28>
		return 0;
    8d8e:	2000      	movs	r0, #0
}
    8d90:	b005      	add	sp, #20
    8d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8d94:	2101      	movs	r1, #1
    8d96:	4620      	mov	r0, r4
    8d98:	f011 fa69 	bl	1a26e <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8d9c:	2102      	movs	r1, #2
    8d9e:	4620      	mov	r0, r4
    8da0:	f011 fa65 	bl	1a26e <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8da4:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    8da6:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8da8:	3b0c      	subs	r3, #12
    8daa:	b2db      	uxtb	r3, r3
    8dac:	9302      	str	r3, [sp, #8]
    8dae:	9201      	str	r2, [sp, #4]
    8db0:	2100      	movs	r1, #0
    8db2:	9100      	str	r1, [sp, #0]
    8db4:	463b      	mov	r3, r7
    8db6:	460a      	mov	r2, r1
    8db8:	4630      	mov	r0, r6
    8dba:	f7ff ff81 	bl	8cc0 <att_write_rsp>
    8dbe:	e7e7      	b.n	8d90 <att_signed_write_cmd+0x24>

00008dc0 <att_write_cmd>:
{
    8dc0:	b530      	push	{r4, r5, lr}
    8dc2:	b085      	sub	sp, #20
    8dc4:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8dc6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8dc8:	f101 0008 	add.w	r0, r1, #8
    8dcc:	f011 fa5f 	bl	1a28e <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    8dd0:	68a3      	ldr	r3, [r4, #8]
    8dd2:	7b22      	ldrb	r2, [r4, #12]
    8dd4:	9202      	str	r2, [sp, #8]
    8dd6:	9301      	str	r3, [sp, #4]
    8dd8:	2100      	movs	r1, #0
    8dda:	9100      	str	r1, [sp, #0]
    8ddc:	4603      	mov	r3, r0
    8dde:	460a      	mov	r2, r1
    8de0:	4628      	mov	r0, r5
    8de2:	f7ff ff6d 	bl	8cc0 <att_write_rsp>
}
    8de6:	b005      	add	sp, #20
    8de8:	bd30      	pop	{r4, r5, pc}

00008dea <att_write_req>:
{
    8dea:	b530      	push	{r4, r5, lr}
    8dec:	b085      	sub	sp, #20
    8dee:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8df0:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8df2:	f101 0008 	add.w	r0, r1, #8
    8df6:	f011 fa4a 	bl	1a28e <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    8dfa:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    8dfc:	7b22      	ldrb	r2, [r4, #12]
    8dfe:	9202      	str	r2, [sp, #8]
    8e00:	9301      	str	r3, [sp, #4]
    8e02:	2300      	movs	r3, #0
    8e04:	9300      	str	r3, [sp, #0]
    8e06:	4603      	mov	r3, r0
    8e08:	2213      	movs	r2, #19
    8e0a:	2112      	movs	r1, #18
    8e0c:	4628      	mov	r0, r5
    8e0e:	f7ff ff57 	bl	8cc0 <att_write_rsp>
}
    8e12:	b005      	add	sp, #20
    8e14:	bd30      	pop	{r4, r5, pc}
	...

00008e18 <att_read_group_rsp>:
{
    8e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e1c:	b086      	sub	sp, #24
    8e1e:	4604      	mov	r4, r0
    8e20:	4688      	mov	r8, r1
    8e22:	4616      	mov	r6, r2
    8e24:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    8e26:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    8e28:	2214      	movs	r2, #20
    8e2a:	2100      	movs	r1, #0
    8e2c:	a801      	add	r0, sp, #4
    8e2e:	f021 fe45 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8e32:	2201      	movs	r2, #1
    8e34:	2111      	movs	r1, #17
    8e36:	4628      	mov	r0, r5
    8e38:	f7ff fe54 	bl	8ae4 <bt_att_create_pdu>
    8e3c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8e3e:	b328      	cbz	r0, 8e8c <att_read_group_rsp+0x74>
	data.att = att;
    8e40:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    8e42:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8e46:	2101      	movs	r1, #1
    8e48:	3008      	adds	r0, #8
    8e4a:	f011 f9c3 	bl	1a1d4 <net_buf_simple_add>
    8e4e:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    8e50:	2300      	movs	r3, #0
    8e52:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    8e54:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8e56:	ab01      	add	r3, sp, #4
    8e58:	4a0f      	ldr	r2, [pc, #60]	; (8e98 <att_read_group_rsp+0x80>)
    8e5a:	4639      	mov	r1, r7
    8e5c:	4630      	mov	r0, r6
    8e5e:	f000 fe85 	bl	9b6c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8e62:	9b04      	ldr	r3, [sp, #16]
    8e64:	781c      	ldrb	r4, [r3, #0]
    8e66:	b13c      	cbz	r4, 8e78 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8e68:	4b0c      	ldr	r3, [pc, #48]	; (8e9c <att_read_group_rsp+0x84>)
    8e6a:	9a03      	ldr	r2, [sp, #12]
    8e6c:	2104      	movs	r1, #4
    8e6e:	4628      	mov	r0, r5
    8e70:	f7fe fb49 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    8e74:	2400      	movs	r4, #0
    8e76:	e00a      	b.n	8e8e <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    8e78:	9803      	ldr	r0, [sp, #12]
    8e7a:	f011 f95f 	bl	1a13c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8e7e:	230a      	movs	r3, #10
    8e80:	4632      	mov	r2, r6
    8e82:	2110      	movs	r1, #16
    8e84:	4628      	mov	r0, r5
    8e86:	f7ff fe8f 	bl	8ba8 <send_err_rsp>
		return 0;
    8e8a:	e000      	b.n	8e8e <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    8e8c:	240e      	movs	r4, #14
}
    8e8e:	4620      	mov	r0, r4
    8e90:	b006      	add	sp, #24
    8e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e96:	bf00      	nop
    8e98:	000083a1 	.word	0x000083a1
    8e9c:	00008307 	.word	0x00008307

00008ea0 <att_read_group_req>:
{
    8ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ea4:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    8ea6:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8ea8:	898b      	ldrh	r3, [r1, #12]
    8eaa:	2b06      	cmp	r3, #6
    8eac:	d005      	beq.n	8eba <att_read_group_req+0x1a>
    8eae:	2b14      	cmp	r3, #20
    8eb0:	d003      	beq.n	8eba <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    8eb2:	2004      	movs	r0, #4
}
    8eb4:	b008      	add	sp, #32
    8eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8eba:	460c      	mov	r4, r1
    8ebc:	4605      	mov	r5, r0
	req = (void *)buf->data;
    8ebe:	4608      	mov	r0, r1
    8ec0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    8ec4:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8ec6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    8eca:	2104      	movs	r1, #4
    8ecc:	f011 f9cf 	bl	1a26e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    8ed0:	4621      	mov	r1, r4
    8ed2:	a801      	add	r0, sp, #4
    8ed4:	f7ff fb3c 	bl	8550 <uuid_create>
    8ed8:	b908      	cbnz	r0, 8ede <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    8eda:	200e      	movs	r0, #14
    8edc:	e7ea      	b.n	8eb4 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    8ede:	f10d 0216 	add.w	r2, sp, #22
    8ee2:	4641      	mov	r1, r8
    8ee4:	4638      	mov	r0, r7
    8ee6:	f7ff f8c4 	bl	8072 <range_is_valid>
    8eea:	b1f0      	cbz	r0, 8f2a <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8eec:	2300      	movs	r3, #0
    8eee:	f88d 3018 	strb.w	r3, [sp, #24]
    8ef2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8ef6:	f8ad 301a 	strh.w	r3, [sp, #26]
    8efa:	a906      	add	r1, sp, #24
    8efc:	a801      	add	r0, sp, #4
    8efe:	f7fa fdee 	bl	3ade <bt_uuid_cmp>
    8f02:	b158      	cbz	r0, 8f1c <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8f04:	2300      	movs	r3, #0
    8f06:	f88d 301c 	strb.w	r3, [sp, #28]
    8f0a:	f642 0301 	movw	r3, #10241	; 0x2801
    8f0e:	f8ad 301e 	strh.w	r3, [sp, #30]
    8f12:	a907      	add	r1, sp, #28
    8f14:	a801      	add	r0, sp, #4
    8f16:	f7fa fde2 	bl	3ade <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8f1a:	b978      	cbnz	r0, 8f3c <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    8f1c:	4643      	mov	r3, r8
    8f1e:	463a      	mov	r2, r7
    8f20:	a901      	add	r1, sp, #4
    8f22:	4628      	mov	r0, r5
    8f24:	f7ff ff78 	bl	8e18 <att_read_group_rsp>
    8f28:	e7c4      	b.n	8eb4 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    8f2a:	2301      	movs	r3, #1
    8f2c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8f30:	2110      	movs	r1, #16
    8f32:	4630      	mov	r0, r6
    8f34:	f7ff fe38 	bl	8ba8 <send_err_rsp>
		return 0;
    8f38:	2000      	movs	r0, #0
    8f3a:	e7bb      	b.n	8eb4 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8f3c:	2310      	movs	r3, #16
    8f3e:	463a      	mov	r2, r7
    8f40:	4619      	mov	r1, r3
    8f42:	4630      	mov	r0, r6
    8f44:	f7ff fe30 	bl	8ba8 <send_err_rsp>
		return 0;
    8f48:	2000      	movs	r0, #0
    8f4a:	e7b3      	b.n	8eb4 <att_read_group_req+0x14>

00008f4c <att_read_mult_req>:
{
    8f4c:	b570      	push	{r4, r5, r6, lr}
    8f4e:	b086      	sub	sp, #24
    8f50:	4605      	mov	r5, r0
    8f52:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8f54:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    8f56:	2214      	movs	r2, #20
    8f58:	2100      	movs	r1, #0
    8f5a:	a801      	add	r0, sp, #4
    8f5c:	f021 fdae 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8f60:	2200      	movs	r2, #0
    8f62:	210f      	movs	r1, #15
    8f64:	4630      	mov	r0, r6
    8f66:	f7ff fdbd 	bl	8ae4 <bt_att_create_pdu>
    8f6a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8f6c:	b348      	cbz	r0, 8fc2 <att_read_mult_req+0x76>
	data.att = att;
    8f6e:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    8f70:	89a3      	ldrh	r3, [r4, #12]
    8f72:	2b01      	cmp	r3, #1
    8f74:	d91c      	bls.n	8fb0 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    8f76:	f104 0008 	add.w	r0, r4, #8
    8f7a:	f011 f988 	bl	1a28e <net_buf_simple_pull_le16>
    8f7e:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f80:	2301      	movs	r3, #1
    8f82:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f86:	ab01      	add	r3, sp, #4
    8f88:	4a0f      	ldr	r2, [pc, #60]	; (8fc8 <att_read_mult_req+0x7c>)
    8f8a:	4601      	mov	r1, r0
    8f8c:	f000 fdee 	bl	9b6c <bt_gatt_foreach_attr>
		if (data.err) {
    8f90:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d0eb      	beq.n	8f70 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    8f98:	9803      	ldr	r0, [sp, #12]
    8f9a:	f011 f8cf 	bl	1a13c <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    8f9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8fa2:	462a      	mov	r2, r5
    8fa4:	210e      	movs	r1, #14
    8fa6:	4630      	mov	r0, r6
    8fa8:	f7ff fdfe 	bl	8ba8 <send_err_rsp>
			return 0;
    8fac:	2000      	movs	r0, #0
    8fae:	e006      	b.n	8fbe <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8fb0:	4b06      	ldr	r3, [pc, #24]	; (8fcc <att_read_mult_req+0x80>)
    8fb2:	9a03      	ldr	r2, [sp, #12]
    8fb4:	2104      	movs	r1, #4
    8fb6:	4630      	mov	r0, r6
    8fb8:	f7fe faa5 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    8fbc:	2000      	movs	r0, #0
}
    8fbe:	b006      	add	sp, #24
    8fc0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    8fc2:	200e      	movs	r0, #14
    8fc4:	e7fb      	b.n	8fbe <att_read_mult_req+0x72>
    8fc6:	bf00      	nop
    8fc8:	000081d1 	.word	0x000081d1
    8fcc:	00008307 	.word	0x00008307

00008fd0 <att_read_rsp>:
{
    8fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fd4:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    8fd6:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    8fd8:	b923      	cbnz	r3, 8fe4 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    8fda:	2401      	movs	r4, #1
}
    8fdc:	4620      	mov	r0, r4
    8fde:	b006      	add	sp, #24
    8fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fe4:	461d      	mov	r5, r3
    8fe6:	4616      	mov	r6, r2
    8fe8:	4688      	mov	r8, r1
    8fea:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    8fec:	2214      	movs	r2, #20
    8fee:	2100      	movs	r1, #0
    8ff0:	a801      	add	r0, sp, #4
    8ff2:	f021 fd63 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8ff6:	2200      	movs	r2, #0
    8ff8:	4631      	mov	r1, r6
    8ffa:	4638      	mov	r0, r7
    8ffc:	f7ff fd72 	bl	8ae4 <bt_att_create_pdu>
    9000:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9002:	b318      	cbz	r0, 904c <att_read_rsp+0x7c>
	data.att = att;
    9004:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9006:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    900a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    900e:	2301      	movs	r3, #1
    9010:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9014:	ab01      	add	r3, sp, #4
    9016:	4a0e      	ldr	r2, [pc, #56]	; (9050 <att_read_rsp+0x80>)
    9018:	4629      	mov	r1, r5
    901a:	4628      	mov	r0, r5
    901c:	f000 fda6 	bl	9b6c <bt_gatt_foreach_attr>
	if (data.err) {
    9020:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9024:	b934      	cbnz	r4, 9034 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9026:	4b0b      	ldr	r3, [pc, #44]	; (9054 <att_read_rsp+0x84>)
    9028:	9a03      	ldr	r2, [sp, #12]
    902a:	2104      	movs	r1, #4
    902c:	4638      	mov	r0, r7
    902e:	f7fe fa6a 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    9032:	e7d3      	b.n	8fdc <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9034:	9803      	ldr	r0, [sp, #12]
    9036:	f011 f881 	bl	1a13c <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    903a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    903e:	462a      	mov	r2, r5
    9040:	4641      	mov	r1, r8
    9042:	4638      	mov	r0, r7
    9044:	f7ff fdb0 	bl	8ba8 <send_err_rsp>
		return 0;
    9048:	2400      	movs	r4, #0
    904a:	e7c7      	b.n	8fdc <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    904c:	240e      	movs	r4, #14
    904e:	e7c5      	b.n	8fdc <att_read_rsp+0xc>
    9050:	000081d1 	.word	0x000081d1
    9054:	00008307 	.word	0x00008307

00009058 <att_read_blob_req>:
{
    9058:	b500      	push	{lr}
    905a:	b083      	sub	sp, #12
	req = (void *)buf->data;
    905c:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    905e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9060:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9062:	9200      	str	r2, [sp, #0]
    9064:	220d      	movs	r2, #13
    9066:	210c      	movs	r1, #12
    9068:	f7ff ffb2 	bl	8fd0 <att_read_rsp>
}
    906c:	b003      	add	sp, #12
    906e:	f85d fb04 	ldr.w	pc, [sp], #4

00009072 <att_read_req>:
{
    9072:	b500      	push	{lr}
    9074:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9076:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9078:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    907a:	2200      	movs	r2, #0
    907c:	9200      	str	r2, [sp, #0]
    907e:	220b      	movs	r2, #11
    9080:	210a      	movs	r1, #10
    9082:	f7ff ffa5 	bl	8fd0 <att_read_rsp>
}
    9086:	b003      	add	sp, #12
    9088:	f85d fb04 	ldr.w	pc, [sp], #4

0000908c <att_read_type_rsp>:
{
    908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9090:	b086      	sub	sp, #24
    9092:	4604      	mov	r4, r0
    9094:	4688      	mov	r8, r1
    9096:	4616      	mov	r6, r2
    9098:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    909a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    909c:	2218      	movs	r2, #24
    909e:	2100      	movs	r1, #0
    90a0:	4668      	mov	r0, sp
    90a2:	f021 fd0b 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    90a6:	2201      	movs	r2, #1
    90a8:	2109      	movs	r1, #9
    90aa:	4628      	mov	r0, r5
    90ac:	f7ff fd1a 	bl	8ae4 <bt_att_create_pdu>
    90b0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    90b2:	b340      	cbz	r0, 9106 <att_read_type_rsp+0x7a>
	data.att = att;
    90b4:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    90b6:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90ba:	2101      	movs	r1, #1
    90bc:	3008      	adds	r0, #8
    90be:	f011 f889 	bl	1a1d4 <net_buf_simple_add>
    90c2:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    90c4:	2300      	movs	r3, #0
    90c6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    90c8:	230a      	movs	r3, #10
    90ca:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    90ce:	466b      	mov	r3, sp
    90d0:	4a0f      	ldr	r2, [pc, #60]	; (9110 <att_read_type_rsp+0x84>)
    90d2:	4639      	mov	r1, r7
    90d4:	4630      	mov	r0, r6
    90d6:	f000 fd49 	bl	9b6c <bt_gatt_foreach_attr>
	if (data.err) {
    90da:	f89d 4014 	ldrb.w	r4, [sp, #20]
    90de:	b934      	cbnz	r4, 90ee <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    90e0:	4b0c      	ldr	r3, [pc, #48]	; (9114 <att_read_type_rsp+0x88>)
    90e2:	9a02      	ldr	r2, [sp, #8]
    90e4:	2104      	movs	r1, #4
    90e6:	4628      	mov	r0, r5
    90e8:	f7fe fa0d 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    90ec:	e00c      	b.n	9108 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    90ee:	9802      	ldr	r0, [sp, #8]
    90f0:	f011 f824 	bl	1a13c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    90f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    90f8:	4632      	mov	r2, r6
    90fa:	2108      	movs	r1, #8
    90fc:	4628      	mov	r0, r5
    90fe:	f7ff fd53 	bl	8ba8 <send_err_rsp>
		return 0;
    9102:	2400      	movs	r4, #0
    9104:	e000      	b.n	9108 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9106:	240e      	movs	r4, #14
}
    9108:	4620      	mov	r0, r4
    910a:	b006      	add	sp, #24
    910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9110:	0000848f 	.word	0x0000848f
    9114:	00008307 	.word	0x00008307

00009118 <att_read_type_req>:
{
    9118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    911c:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    911e:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9120:	898b      	ldrh	r3, [r1, #12]
    9122:	2b06      	cmp	r3, #6
    9124:	d005      	beq.n	9132 <att_read_type_req+0x1a>
    9126:	2b14      	cmp	r3, #20
    9128:	d003      	beq.n	9132 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    912a:	2004      	movs	r0, #4
}
    912c:	b006      	add	sp, #24
    912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9132:	460c      	mov	r4, r1
    9134:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9136:	4608      	mov	r0, r1
    9138:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    913c:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    913e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9142:	2104      	movs	r1, #4
    9144:	f011 f893 	bl	1a26e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9148:	4621      	mov	r1, r4
    914a:	a801      	add	r0, sp, #4
    914c:	f7ff fa00 	bl	8550 <uuid_create>
    9150:	b908      	cbnz	r0, 9156 <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9152:	200e      	movs	r0, #14
    9154:	e7ea      	b.n	912c <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9156:	f10d 0216 	add.w	r2, sp, #22
    915a:	4641      	mov	r1, r8
    915c:	4638      	mov	r0, r7
    915e:	f7fe ff88 	bl	8072 <range_is_valid>
    9162:	b130      	cbz	r0, 9172 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9164:	4643      	mov	r3, r8
    9166:	463a      	mov	r2, r7
    9168:	a901      	add	r1, sp, #4
    916a:	4628      	mov	r0, r5
    916c:	f7ff ff8e 	bl	908c <att_read_type_rsp>
    9170:	e7dc      	b.n	912c <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9172:	2301      	movs	r3, #1
    9174:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9178:	2108      	movs	r1, #8
    917a:	4630      	mov	r0, r6
    917c:	f7ff fd14 	bl	8ba8 <send_err_rsp>
		return 0;
    9180:	2000      	movs	r0, #0
    9182:	e7d3      	b.n	912c <att_read_type_req+0x14>

00009184 <att_find_type_rsp>:
{
    9184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9188:	b086      	sub	sp, #24
    918a:	4604      	mov	r4, r0
    918c:	460e      	mov	r6, r1
    918e:	4617      	mov	r7, r2
    9190:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9192:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9194:	2214      	movs	r2, #20
    9196:	2100      	movs	r1, #0
    9198:	a801      	add	r0, sp, #4
    919a:	f021 fc8f 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    919e:	2200      	movs	r2, #0
    91a0:	2107      	movs	r1, #7
    91a2:	4628      	mov	r0, r5
    91a4:	f7ff fc9e 	bl	8ae4 <bt_att_create_pdu>
    91a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    91aa:	b338      	cbz	r0, 91fc <att_find_type_rsp+0x78>
	data.att = att;
    91ac:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    91ae:	2300      	movs	r3, #0
    91b0:	9303      	str	r3, [sp, #12]
	data.value = value;
    91b2:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    91b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    91ba:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    91be:	230a      	movs	r3, #10
    91c0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    91c4:	ab01      	add	r3, sp, #4
    91c6:	4a10      	ldr	r2, [pc, #64]	; (9208 <att_find_type_rsp+0x84>)
    91c8:	4639      	mov	r1, r7
    91ca:	4630      	mov	r0, r6
    91cc:	f000 fcce 	bl	9b6c <bt_gatt_foreach_attr>
	if (data.err) {
    91d0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    91d4:	b934      	cbnz	r4, 91e4 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    91d6:	4b0d      	ldr	r3, [pc, #52]	; (920c <att_find_type_rsp+0x88>)
    91d8:	9a02      	ldr	r2, [sp, #8]
    91da:	2104      	movs	r1, #4
    91dc:	4628      	mov	r0, r5
    91de:	f7fe f992 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    91e2:	e00c      	b.n	91fe <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    91e4:	9802      	ldr	r0, [sp, #8]
    91e6:	f010 ffa9 	bl	1a13c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    91ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
    91ee:	4632      	mov	r2, r6
    91f0:	2106      	movs	r1, #6
    91f2:	4628      	mov	r0, r5
    91f4:	f7ff fcd8 	bl	8ba8 <send_err_rsp>
		return 0;
    91f8:	2400      	movs	r4, #0
    91fa:	e000      	b.n	91fe <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    91fc:	240e      	movs	r4, #14
}
    91fe:	4620      	mov	r0, r4
    9200:	b006      	add	sp, #24
    9202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9206:	bf00      	nop
    9208:	00008637 	.word	0x00008637
    920c:	00008307 	.word	0x00008307

00009210 <att_find_type_req>:
{
    9210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9214:	b084      	sub	sp, #16
    9216:	4605      	mov	r5, r0
    9218:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    921a:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    921e:	4608      	mov	r0, r1
    9220:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9224:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9226:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9228:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    922c:	2106      	movs	r1, #6
    922e:	f011 f81e 	bl	1a26e <net_buf_simple_pull>
    9232:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9234:	f10d 020e 	add.w	r2, sp, #14
    9238:	4631      	mov	r1, r6
    923a:	4620      	mov	r0, r4
    923c:	f7fe ff19 	bl	8072 <range_is_valid>
    9240:	b160      	cbz	r0, 925c <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9242:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9246:	d012      	beq.n	926e <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9248:	230a      	movs	r3, #10
    924a:	4622      	mov	r2, r4
    924c:	2106      	movs	r1, #6
    924e:	4648      	mov	r0, r9
    9250:	f7ff fcaa 	bl	8ba8 <send_err_rsp>
		return 0;
    9254:	2000      	movs	r0, #0
}
    9256:	b004      	add	sp, #16
    9258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    925c:	2301      	movs	r3, #1
    925e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9262:	2106      	movs	r1, #6
    9264:	4648      	mov	r0, r9
    9266:	f7ff fc9f 	bl	8ba8 <send_err_rsp>
		return 0;
    926a:	2000      	movs	r0, #0
    926c:	e7f3      	b.n	9256 <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    926e:	7b3b      	ldrb	r3, [r7, #12]
    9270:	9300      	str	r3, [sp, #0]
    9272:	4653      	mov	r3, sl
    9274:	4632      	mov	r2, r6
    9276:	4621      	mov	r1, r4
    9278:	4628      	mov	r0, r5
    927a:	f7ff ff83 	bl	9184 <att_find_type_rsp>
    927e:	e7ea      	b.n	9256 <att_find_type_req+0x46>

00009280 <att_find_info_rsp>:
{
    9280:	b5f0      	push	{r4, r5, r6, r7, lr}
    9282:	b085      	sub	sp, #20
    9284:	4605      	mov	r5, r0
    9286:	460e      	mov	r6, r1
    9288:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    928a:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    928c:	2210      	movs	r2, #16
    928e:	2100      	movs	r1, #0
    9290:	4668      	mov	r0, sp
    9292:	f021 fc13 	bl	2aabc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9296:	2200      	movs	r2, #0
    9298:	2105      	movs	r1, #5
    929a:	4620      	mov	r0, r4
    929c:	f7ff fc22 	bl	8ae4 <bt_att_create_pdu>
    92a0:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    92a2:	b1e8      	cbz	r0, 92e0 <att_find_info_rsp+0x60>
	data.att = att;
    92a4:	ab04      	add	r3, sp, #16
    92a6:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    92aa:	4a0e      	ldr	r2, [pc, #56]	; (92e4 <att_find_info_rsp+0x64>)
    92ac:	4639      	mov	r1, r7
    92ae:	4630      	mov	r0, r6
    92b0:	f000 fc5c 	bl	9b6c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    92b4:	9b02      	ldr	r3, [sp, #8]
    92b6:	b143      	cbz	r3, 92ca <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    92b8:	4b0b      	ldr	r3, [pc, #44]	; (92e8 <att_find_info_rsp+0x68>)
    92ba:	9a01      	ldr	r2, [sp, #4]
    92bc:	2104      	movs	r1, #4
    92be:	4620      	mov	r0, r4
    92c0:	f7fe f921 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    92c4:	2000      	movs	r0, #0
}
    92c6:	b005      	add	sp, #20
    92c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    92ca:	9801      	ldr	r0, [sp, #4]
    92cc:	f010 ff36 	bl	1a13c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    92d0:	230a      	movs	r3, #10
    92d2:	4632      	mov	r2, r6
    92d4:	2104      	movs	r1, #4
    92d6:	4620      	mov	r0, r4
    92d8:	f7ff fc66 	bl	8ba8 <send_err_rsp>
		return 0;
    92dc:	2000      	movs	r0, #0
    92de:	e7f2      	b.n	92c6 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    92e0:	200e      	movs	r0, #14
    92e2:	e7f0      	b.n	92c6 <att_find_info_rsp+0x46>
    92e4:	00008587 	.word	0x00008587
    92e8:	00008307 	.word	0x00008307

000092ec <att_find_info_req>:
{
    92ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ee:	b083      	sub	sp, #12
    92f0:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    92f2:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    92f4:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    92f6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    92f8:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    92fa:	f10d 0206 	add.w	r2, sp, #6
    92fe:	4631      	mov	r1, r6
    9300:	4628      	mov	r0, r5
    9302:	f7fe feb6 	bl	8072 <range_is_valid>
    9306:	b130      	cbz	r0, 9316 <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9308:	4632      	mov	r2, r6
    930a:	4629      	mov	r1, r5
    930c:	4620      	mov	r0, r4
    930e:	f7ff ffb7 	bl	9280 <att_find_info_rsp>
}
    9312:	b003      	add	sp, #12
    9314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9316:	2301      	movs	r3, #1
    9318:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    931c:	2104      	movs	r1, #4
    931e:	4638      	mov	r0, r7
    9320:	f7ff fc42 	bl	8ba8 <send_err_rsp>
		return 0;
    9324:	2000      	movs	r0, #0
    9326:	e7f4      	b.n	9312 <att_find_info_req+0x26>

00009328 <bt_att_init>:

void bt_att_init(void)
{
    9328:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    932a:	4803      	ldr	r0, [pc, #12]	; (9338 <bt_att_init+0x10>)
    932c:	f7fd ff44 	bl	71b8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9330:	f000 fb3c 	bl	99ac <bt_gatt_init>
    9334:	bd08      	pop	{r3, pc}
    9336:	bf00      	nop
    9338:	2000b978 	.word	0x2000b978

0000933c <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    933e:	2800      	cmp	r0, #0
    9340:	d043      	beq.n	93ca <bt_att_send+0x8e>
    9342:	4606      	mov	r6, r0
    9344:	2900      	cmp	r1, #0
    9346:	d043      	beq.n	93d0 <bt_att_send+0x94>
    9348:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    934a:	f7fe ff7b 	bl	8244 <att_chan_get>
	if (!att) {
    934e:	4605      	mov	r5, r0
    9350:	2800      	cmp	r0, #0
    9352:	d040      	beq.n	93d6 <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9354:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    935c:	4638      	mov	r0, r7
    935e:	f01f fa4b 	bl	287f8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9362:	682b      	ldr	r3, [r5, #0]
    9364:	7b1b      	ldrb	r3, [r3, #12]
    9366:	2b03      	cmp	r3, #3
    9368:	d011      	beq.n	938e <bt_att_send+0x52>
    936a:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    936c:	b1e3      	cbz	r3, 93a8 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    936e:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9370:	781b      	ldrb	r3, [r3, #0]
    9372:	2bd2      	cmp	r3, #210	; 0xd2
    9374:	d01e      	beq.n	93b4 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9376:	4620      	mov	r0, r4
    9378:	f7fe ff0c 	bl	8194 <att_cb>
    937c:	4603      	mov	r3, r0
    937e:	4622      	mov	r2, r4
    9380:	2104      	movs	r1, #4
    9382:	4630      	mov	r0, r6
    9384:	f7fe f8bf 	bl	7506 <bt_l2cap_send_cb>

	return 0;
    9388:	2500      	movs	r5, #0
}
    938a:	4628      	mov	r0, r5
    938c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    938e:	f3bf 8f5b 	dmb	ish
    9392:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9396:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    939a:	f013 0f04 	tst.w	r3, #4
    939e:	d101      	bne.n	93a4 <bt_att_send+0x68>
    93a0:	2301      	movs	r3, #1
    93a2:	e7e3      	b.n	936c <bt_att_send+0x30>
    93a4:	2300      	movs	r3, #0
    93a6:	e7e1      	b.n	936c <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    93a8:	4638      	mov	r0, r7
    93aa:	f01f fa12 	bl	287d2 <_impl_k_sem_give>
		return -ENOTCONN;
    93ae:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    93b2:	e7ea      	b.n	938a <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    93b4:	4621      	mov	r1, r4
    93b6:	4630      	mov	r0, r6
    93b8:	f003 f81a 	bl	c3f0 <bt_smp_sign>
		if (err) {
    93bc:	4605      	mov	r5, r0
    93be:	2800      	cmp	r0, #0
    93c0:	d0d9      	beq.n	9376 <bt_att_send+0x3a>
    93c2:	4638      	mov	r0, r7
    93c4:	f01f fa05 	bl	287d2 <_impl_k_sem_give>
			return err;
    93c8:	e7df      	b.n	938a <bt_att_send+0x4e>
		return -EINVAL;
    93ca:	f06f 0515 	mvn.w	r5, #21
    93ce:	e7dc      	b.n	938a <bt_att_send+0x4e>
    93d0:	f06f 0515 	mvn.w	r5, #21
    93d4:	e7d9      	b.n	938a <bt_att_send+0x4e>
		return -ENOTCONN;
    93d6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    93da:	e7d6      	b.n	938a <bt_att_send+0x4e>

000093dc <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    93dc:	b1e0      	cbz	r0, 9418 <bt_att_req_send+0x3c>
    93de:	b1f1      	cbz	r1, 941e <bt_att_req_send+0x42>
{
    93e0:	b510      	push	{r4, lr}
    93e2:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    93e4:	f7fe ff2e 	bl	8244 <att_chan_get>
	if (!att) {
    93e8:	b1e0      	cbz	r0, 9424 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    93ea:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    93ee:	b17a      	cbz	r2, 9410 <bt_att_req_send+0x34>
	node->next = NULL;
    93f0:	2200      	movs	r2, #0
    93f2:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    93f4:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    93f8:	b122      	cbz	r2, 9404 <bt_att_req_send+0x28>
		list->tail->next = node;
    93fa:	6014      	str	r4, [r2, #0]
		list->tail = node;
    93fc:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9400:	2000      	movs	r0, #0
    9402:	bd10      	pop	{r4, pc}
		list->tail = node;
    9404:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9408:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    940c:	2000      	movs	r0, #0
    940e:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9410:	4621      	mov	r1, r4
    9412:	f7ff f9ad 	bl	8770 <att_send_req>
    9416:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9418:	f06f 0015 	mvn.w	r0, #21
    941c:	4770      	bx	lr
    941e:	f06f 0015 	mvn.w	r0, #21
    9422:	4770      	bx	lr
		return -ENOTCONN;
    9424:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9428:	bd10      	pop	{r4, pc}

0000942a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    942a:	4770      	bx	lr

0000942c <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    942c:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    942e:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    9430:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    9432:	4a1c      	ldr	r2, [pc, #112]	; (94a4 <gatt_register+0x78>)
    9434:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9436:	b172      	cbz	r2, 9456 <gatt_register+0x2a>
	return list->tail;
    9438:	4a1a      	ldr	r2, [pc, #104]	; (94a4 <gatt_register+0x78>)
    943a:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    943c:	b14a      	cbz	r2, 9452 <gatt_register+0x26>
    943e:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    9440:	6815      	ldr	r5, [r2, #0]
    9442:	8892      	ldrh	r2, [r2, #4]
    9444:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9448:	0091      	lsls	r1, r2, #2
    944a:	3914      	subs	r1, #20
    944c:	4429      	add	r1, r5
    944e:	8a0a      	ldrh	r2, [r1, #16]
    9450:	e009      	b.n	9466 <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9452:	2200      	movs	r2, #0
    9454:	e7f4      	b.n	9440 <gatt_register+0x14>
		handle = 0;
    9456:	2200      	movs	r2, #0
    9458:	e005      	b.n	9466 <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    945a:	428a      	cmp	r2, r1
    945c:	d21e      	bcs.n	949c <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    945e:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    9460:	3414      	adds	r4, #20
    9462:	3b01      	subs	r3, #1
    9464:	b29b      	uxth	r3, r3
    9466:	b13c      	cbz	r4, 9478 <gatt_register+0x4c>
    9468:	b133      	cbz	r3, 9478 <gatt_register+0x4c>
		if (!attrs->handle) {
    946a:	8a21      	ldrh	r1, [r4, #16]
    946c:	2900      	cmp	r1, #0
    946e:	d1f4      	bne.n	945a <gatt_register+0x2e>
			attrs->handle = ++handle;
    9470:	3201      	adds	r2, #1
    9472:	b292      	uxth	r2, r2
    9474:	8222      	strh	r2, [r4, #16]
    9476:	e7f3      	b.n	9460 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9478:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    947c:	2200      	movs	r2, #0
    947e:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    9480:	4a08      	ldr	r2, [pc, #32]	; (94a4 <gatt_register+0x78>)
    9482:	6852      	ldr	r2, [r2, #4]
    9484:	b12a      	cbz	r2, 9492 <gatt_register+0x66>
		list->tail->next = node;
    9486:	6013      	str	r3, [r2, #0]
		list->tail = node;
    9488:	4a06      	ldr	r2, [pc, #24]	; (94a4 <gatt_register+0x78>)
    948a:	6053      	str	r3, [r2, #4]

	return 0;
    948c:	2000      	movs	r0, #0
}
    948e:	bc30      	pop	{r4, r5}
    9490:	4770      	bx	lr
		list->tail = node;
    9492:	4a04      	ldr	r2, [pc, #16]	; (94a4 <gatt_register+0x78>)
    9494:	6053      	str	r3, [r2, #4]
		list->head = node;
    9496:	6013      	str	r3, [r2, #0]
	return 0;
    9498:	2000      	movs	r0, #0
    949a:	e7f8      	b.n	948e <gatt_register+0x62>
			return -EINVAL;
    949c:	f06f 0015 	mvn.w	r0, #21
    94a0:	e7f5      	b.n	948e <gatt_register+0x62>
    94a2:	bf00      	nop
    94a4:	200006d8 	.word	0x200006d8

000094a8 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    94a8:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    94aa:	8804      	ldrh	r4, [r0, #0]
    94ac:	4294      	cmp	r4, r2
    94ae:	d802      	bhi.n	94b6 <update_range+0xe>
    94b0:	880d      	ldrh	r5, [r1, #0]
    94b2:	429d      	cmp	r5, r3
    94b4:	d209      	bcs.n	94ca <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    94b6:	4294      	cmp	r4, r2
    94b8:	d900      	bls.n	94bc <update_range+0x14>
		*start = new_start;
    94ba:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    94bc:	880a      	ldrh	r2, [r1, #0]
    94be:	4293      	cmp	r3, r2
    94c0:	d905      	bls.n	94ce <update_range+0x26>
		*end = new_end;
    94c2:	800b      	strh	r3, [r1, #0]
	}

	return true;
    94c4:	2001      	movs	r0, #1
}
    94c6:	bc30      	pop	{r4, r5}
    94c8:	4770      	bx	lr
		return false;
    94ca:	2000      	movs	r0, #0
    94cc:	e7fb      	b.n	94c6 <update_range+0x1e>
	return true;
    94ce:	2001      	movs	r0, #1
    94d0:	e7f9      	b.n	94c6 <update_range+0x1e>

000094d2 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    94d2:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    94d4:	2000      	movs	r0, #0
    94d6:	4770      	bx	lr

000094d8 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    94d8:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    94da:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    94dc:	4623      	mov	r3, r4
    94de:	e000      	b.n	94e2 <gatt_ccc_changed+0xa>
    94e0:	3301      	adds	r3, #1
    94e2:	684a      	ldr	r2, [r1, #4]
    94e4:	429a      	cmp	r2, r3
    94e6:	d907      	bls.n	94f8 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    94e8:	680a      	ldr	r2, [r1, #0]
    94ea:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    94ee:	8912      	ldrh	r2, [r2, #8]
    94f0:	4294      	cmp	r4, r2
    94f2:	d2f5      	bcs.n	94e0 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    94f4:	4614      	mov	r4, r2
    94f6:	e7f3      	b.n	94e0 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    94f8:	890b      	ldrh	r3, [r1, #8]
    94fa:	429c      	cmp	r4, r3
    94fc:	d003      	beq.n	9506 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    94fe:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    9500:	68cb      	ldr	r3, [r1, #12]
    9502:	4621      	mov	r1, r4
    9504:	4798      	blx	r3
    9506:	bd10      	pop	{r4, pc}

00009508 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    9508:	b510      	push	{r4, lr}
    950a:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    950c:	69dc      	ldr	r4, [r3, #28]
    950e:	460a      	mov	r2, r1
    9510:	6999      	ldr	r1, [r3, #24]
    9512:	47a0      	blx	r4
    9514:	bd10      	pop	{r4, pc}
	...

00009518 <sc_indicate_rsp>:
{
    9518:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    951a:	4b0f      	ldr	r3, [pc, #60]	; (9558 <sc_indicate_rsp+0x40>)
    951c:	f103 0254 	add.w	r2, r3, #84	; 0x54
    9520:	f3bf 8f5b 	dmb	ish
    9524:	e852 1f00 	ldrex	r1, [r2]
    9528:	f021 0102 	bic.w	r1, r1, #2
    952c:	e842 1000 	strex	r0, r1, [r2]
    9530:	2800      	cmp	r0, #0
    9532:	d1f7      	bne.n	9524 <sc_indicate_rsp+0xc>
    9534:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9538:	f3bf 8f5b 	dmb	ish
    953c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    953e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9542:	f013 0f01 	tst.w	r3, #1
    9546:	d100      	bne.n	954a <sc_indicate_rsp+0x32>
    9548:	bd08      	pop	{r3, pc}
    954a:	2200      	movs	r2, #0
    954c:	4903      	ldr	r1, [pc, #12]	; (955c <sc_indicate_rsp+0x44>)
    954e:	4804      	ldr	r0, [pc, #16]	; (9560 <sc_indicate_rsp+0x48>)
    9550:	f01f ff88 	bl	29464 <k_delayed_work_submit_to_queue>
}
    9554:	e7f8      	b.n	9548 <sc_indicate_rsp+0x30>
    9556:	bf00      	nop
    9558:	200006e0 	.word	0x200006e0
    955c:	2000070c 	.word	0x2000070c
    9560:	20002b10 	.word	0x20002b10

00009564 <sc_indicate>:
{
    9564:	b510      	push	{r4, lr}
    9566:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9568:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    956a:	f3bf 8f5b 	dmb	ish
    956e:	e850 3f00 	ldrex	r3, [r0]
    9572:	f043 0e01 	orr.w	lr, r3, #1
    9576:	e840 ec00 	strex	ip, lr, [r0]
    957a:	f1bc 0f00 	cmp.w	ip, #0
    957e:	d1f6      	bne.n	956e <sc_indicate+0xa>
    9580:	f3bf 8f5b 	dmb	ish
    9584:	f013 0f01 	tst.w	r3, #1
    9588:	d10a      	bne.n	95a0 <sc_indicate+0x3c>
		sc->start = start;
    958a:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    958c:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    958e:	f3bf 8f5b 	dmb	ish
    9592:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9594:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    9598:	f013 0f02 	tst.w	r3, #2
    959c:	d00b      	beq.n	95b6 <sc_indicate+0x52>
    959e:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    95a0:	4613      	mov	r3, r2
    95a2:	460a      	mov	r2, r1
    95a4:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    95a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    95ac:	f7ff ff7c 	bl	94a8 <update_range>
    95b0:	2800      	cmp	r0, #0
    95b2:	d1ec      	bne.n	958e <sc_indicate+0x2a>
    95b4:	e7f3      	b.n	959e <sc_indicate+0x3a>
    95b6:	220a      	movs	r2, #10
    95b8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    95bc:	4801      	ldr	r0, [pc, #4]	; (95c4 <sc_indicate+0x60>)
    95be:	f01f ff51 	bl	29464 <k_delayed_work_submit_to_queue>
    95c2:	e7ec      	b.n	959e <sc_indicate+0x3a>
    95c4:	20002b10 	.word	0x20002b10

000095c8 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    95c8:	b510      	push	{r4, lr}
    95ca:	b082      	sub	sp, #8
    95cc:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    95ce:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    95d0:	6a09      	ldr	r1, [r1, #32]
    95d2:	a801      	add	r0, sp, #4
    95d4:	f7f6 fe74 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    95d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    95dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    95e0:	89a1      	ldrh	r1, [r4, #12]
    95e2:	b909      	cbnz	r1, 95e8 <sc_save+0x20>
    95e4:	89e1      	ldrh	r1, [r4, #14]
    95e6:	b139      	cbz	r1, 95f8 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    95e8:	f104 010e 	add.w	r1, r4, #14
    95ec:	f104 000c 	add.w	r0, r4, #12
    95f0:	f7ff ff5a 	bl	94a8 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    95f4:	b002      	add	sp, #8
    95f6:	bd10      	pop	{r4, pc}
		*stored = data;
    95f8:	9801      	ldr	r0, [sp, #4]
    95fa:	60e0      	str	r0, [r4, #12]
		goto done;
    95fc:	e7fa      	b.n	95f4 <sc_save+0x2c>

000095fe <bt_gatt_attr_write_ccc>:
{
    95fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9602:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9606:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    9608:	2c02      	cmp	r4, #2
    960a:	d84f      	bhi.n	96ac <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    960c:	4698      	mov	r8, r3
    960e:	441c      	add	r4, r3
    9610:	2c02      	cmp	r4, #2
    9612:	d84e      	bhi.n	96b2 <bt_gatt_attr_write_ccc+0xb4>
    9614:	460f      	mov	r7, r1
    9616:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    9618:	7853      	ldrb	r3, [r2, #1]
    961a:	7816      	ldrb	r6, [r2, #0]
    961c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    9620:	2400      	movs	r4, #0
    9622:	686b      	ldr	r3, [r5, #4]
    9624:	429c      	cmp	r4, r3
    9626:	d209      	bcs.n	963c <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9628:	6829      	ldr	r1, [r5, #0]
    962a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    962e:	3101      	adds	r1, #1
    9630:	4648      	mov	r0, r9
    9632:	f7fc fffd 	bl	6630 <bt_conn_addr_le_cmp>
    9636:	b108      	cbz	r0, 963c <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    9638:	3401      	adds	r4, #1
    963a:	e7f2      	b.n	9622 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    963c:	686b      	ldr	r3, [r5, #4]
    963e:	429c      	cmp	r4, r3
    9640:	d026      	beq.n	9690 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    9642:	b91e      	cbnz	r6, 964c <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    9644:	682a      	ldr	r2, [r5, #0]
    9646:	0123      	lsls	r3, r4, #4
    9648:	2100      	movs	r1, #0
    964a:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    964c:	682b      	ldr	r3, [r5, #0]
    964e:	0124      	lsls	r4, r4, #4
    9650:	4423      	add	r3, r4
    9652:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    9654:	682b      	ldr	r3, [r5, #0]
    9656:	441c      	add	r4, r3
    9658:	8922      	ldrh	r2, [r4, #8]
    965a:	892b      	ldrh	r3, [r5, #8]
    965c:	429a      	cmp	r2, r3
    965e:	d003      	beq.n	9668 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    9660:	4629      	mov	r1, r5
    9662:	4638      	mov	r0, r7
    9664:	f7ff ff38 	bl	94d8 <gatt_ccc_changed>
}
    9668:	4640      	mov	r0, r8
    966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    966e:	2207      	movs	r2, #7
    9670:	f109 0148 	add.w	r1, r9, #72	; 0x48
    9674:	3001      	adds	r0, #1
    9676:	f7f6 fe23 	bl	2c0 <memcpy>
			if (value) {
    967a:	b11e      	cbz	r6, 9684 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    967c:	682b      	ldr	r3, [r5, #0]
    967e:	2201      	movs	r2, #1
    9680:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    9684:	686b      	ldr	r3, [r5, #4]
    9686:	429c      	cmp	r4, r3
    9688:	d1e0      	bne.n	964c <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    968a:	f06f 0810 	mvn.w	r8, #16
    968e:	e7eb      	b.n	9668 <bt_gatt_attr_write_ccc+0x6a>
    9690:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    9692:	429c      	cmp	r4, r3
    9694:	d2f6      	bcs.n	9684 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    9696:	682a      	ldr	r2, [r5, #0]
    9698:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    969c:	eb02 000a 	add.w	r0, r2, sl
    96a0:	f812 200a 	ldrb.w	r2, [r2, sl]
    96a4:	2a00      	cmp	r2, #0
    96a6:	d0e2      	beq.n	966e <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    96a8:	3401      	adds	r4, #1
    96aa:	e7f2      	b.n	9692 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    96ac:	f06f 0806 	mvn.w	r8, #6
    96b0:	e7da      	b.n	9668 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    96b2:	f06f 080c 	mvn.w	r8, #12
    96b6:	e7d7      	b.n	9668 <bt_gatt_attr_write_ccc+0x6a>

000096b8 <gatt_send>:
{
    96b8:	b538      	push	{r3, r4, r5, lr}
    96ba:	460d      	mov	r5, r1
	if (params) {
    96bc:	b153      	cbz	r3, 96d4 <gatt_send+0x1c>
    96be:	4619      	mov	r1, r3
		req->buf = buf;
    96c0:	611d      	str	r5, [r3, #16]
		req->func = func;
    96c2:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    96c4:	9b04      	ldr	r3, [sp, #16]
    96c6:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    96c8:	f7ff fe88 	bl	93dc <bt_att_req_send>
    96cc:	4604      	mov	r4, r0
	if (err) {
    96ce:	b92c      	cbnz	r4, 96dc <gatt_send+0x24>
}
    96d0:	4620      	mov	r0, r4
    96d2:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    96d4:	f7ff fe32 	bl	933c <bt_att_send>
    96d8:	4604      	mov	r4, r0
    96da:	e7f8      	b.n	96ce <gatt_send+0x16>
		net_buf_unref(buf);
    96dc:	4628      	mov	r0, r5
    96de:	f010 fd2d 	bl	1a13c <net_buf_unref>
	return err;
    96e2:	e7f5      	b.n	96d0 <gatt_send+0x18>

000096e4 <gatt_indicate>:
{
    96e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96e8:	b082      	sub	sp, #8
    96ea:	4680      	mov	r8, r0
    96ec:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    96ee:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    96f0:	3202      	adds	r2, #2
    96f2:	211d      	movs	r1, #29
    96f4:	f7ff f9f6 	bl	8ae4 <bt_att_create_pdu>
	if (!buf) {
    96f8:	b1f8      	cbz	r0, 973a <gatt_indicate+0x56>
    96fa:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    96fc:	f100 0708 	add.w	r7, r0, #8
    9700:	2102      	movs	r1, #2
    9702:	4638      	mov	r0, r7
    9704:	f010 fd66 	bl	1a1d4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    9708:	69a3      	ldr	r3, [r4, #24]
    970a:	8a1b      	ldrh	r3, [r3, #16]
    970c:	4605      	mov	r5, r0
    970e:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    9712:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    9714:	4638      	mov	r0, r7
    9716:	f010 fd5d 	bl	1a1d4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    971a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    971c:	6a21      	ldr	r1, [r4, #32]
    971e:	4628      	mov	r0, r5
    9720:	f7f6 fdce 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9724:	2300      	movs	r3, #0
    9726:	9300      	str	r3, [sp, #0]
    9728:	4623      	mov	r3, r4
    972a:	4a05      	ldr	r2, [pc, #20]	; (9740 <gatt_indicate+0x5c>)
    972c:	4631      	mov	r1, r6
    972e:	4640      	mov	r0, r8
    9730:	f7ff ffc2 	bl	96b8 <gatt_send>
}
    9734:	b002      	add	sp, #8
    9736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    973a:	f06f 000b 	mvn.w	r0, #11
    973e:	e7f9      	b.n	9734 <gatt_indicate+0x50>
    9740:	00009509 	.word	0x00009509

00009744 <gatt_notify>:
{
    9744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9748:	4680      	mov	r8, r0
    974a:	468a      	mov	sl, r1
    974c:	4691      	mov	r9, r2
    974e:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    9750:	1c9a      	adds	r2, r3, #2
    9752:	211b      	movs	r1, #27
    9754:	f7ff f9c6 	bl	8ae4 <bt_att_create_pdu>
	if (!buf) {
    9758:	b1d8      	cbz	r0, 9792 <gatt_notify+0x4e>
    975a:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    975c:	f100 0708 	add.w	r7, r0, #8
    9760:	2102      	movs	r1, #2
    9762:	4638      	mov	r0, r7
    9764:	f010 fd36 	bl	1a1d4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9768:	4605      	mov	r5, r0
    976a:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    976e:	4621      	mov	r1, r4
    9770:	4638      	mov	r0, r7
    9772:	f010 fd2f 	bl	1a1d4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    9776:	4622      	mov	r2, r4
    9778:	4649      	mov	r1, r9
    977a:	4628      	mov	r0, r5
    977c:	f7f6 fda0 	bl	2c0 <memcpy>
    9780:	2300      	movs	r3, #0
    9782:	4632      	mov	r2, r6
    9784:	2104      	movs	r1, #4
    9786:	4640      	mov	r0, r8
    9788:	f7fd febd 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    978c:	2000      	movs	r0, #0
    978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    9792:	f06f 000b 	mvn.w	r0, #11
}
    9796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000979c <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97a0:	b082      	sub	sp, #8
    97a2:	4604      	mov	r4, r0
    97a4:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    97a6:	2300      	movs	r3, #0
    97a8:	f88d 3000 	strb.w	r3, [sp]
    97ac:	f642 1302 	movw	r3, #10498	; 0x2902
    97b0:	f8ad 3002 	strh.w	r3, [sp, #2]
    97b4:	4669      	mov	r1, sp
    97b6:	6800      	ldr	r0, [r0, #0]
    97b8:	f7fa f991 	bl	3ade <bt_uuid_cmp>
    97bc:	b938      	cbnz	r0, 97ce <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    97be:	68a2      	ldr	r2, [r4, #8]
    97c0:	4b29      	ldr	r3, [pc, #164]	; (9868 <notify_cb+0xcc>)
    97c2:	429a      	cmp	r2, r3
    97c4:	d012      	beq.n	97ec <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    97c6:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    97c8:	b002      	add	sp, #8
    97ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    97ce:	6820      	ldr	r0, [r4, #0]
    97d0:	2300      	movs	r3, #0
    97d2:	f88d 3004 	strb.w	r3, [sp, #4]
    97d6:	f642 0303 	movw	r3, #10243	; 0x2803
    97da:	f8ad 3006 	strh.w	r3, [sp, #6]
    97de:	a901      	add	r1, sp, #4
    97e0:	f7fa f97d 	bl	3ade <bt_uuid_cmp>
    97e4:	2800      	cmp	r0, #0
    97e6:	d0ef      	beq.n	97c8 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    97e8:	2001      	movs	r0, #1
    97ea:	e7ed      	b.n	97c8 <notify_cb+0x2c>
	ccc = attr->user_data;
    97ec:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    97ee:	2400      	movs	r4, #0
    97f0:	e01a      	b.n	9828 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    97f2:	6828      	ldr	r0, [r5, #0]
    97f4:	4b1d      	ldr	r3, [pc, #116]	; (986c <notify_cb+0xd0>)
    97f6:	4298      	cmp	r0, r3
    97f8:	d115      	bne.n	9826 <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    97fa:	6979      	ldr	r1, [r7, #20]
    97fc:	4430      	add	r0, r6
    97fe:	f7ff fee3 	bl	95c8 <sc_save>
			continue;
    9802:	e010      	b.n	9826 <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9804:	88bb      	ldrh	r3, [r7, #4]
    9806:	2b02      	cmp	r3, #2
    9808:	d024      	beq.n	9854 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    980a:	68b9      	ldr	r1, [r7, #8]
    980c:	8a3b      	ldrh	r3, [r7, #16]
    980e:	68fa      	ldr	r2, [r7, #12]
    9810:	8a09      	ldrh	r1, [r1, #16]
    9812:	f7ff ff97 	bl	9744 <gatt_notify>
    9816:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    9818:	4640      	mov	r0, r8
    981a:	f7fc ffb9 	bl	6790 <bt_conn_unref>
		if (err < 0) {
    981e:	2e00      	cmp	r6, #0
    9820:	db1f      	blt.n	9862 <notify_cb+0xc6>
		data->err = 0;
    9822:	2300      	movs	r3, #0
    9824:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    9826:	3401      	adds	r4, #1
    9828:	686b      	ldr	r3, [r5, #4]
    982a:	429c      	cmp	r4, r3
    982c:	d217      	bcs.n	985e <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    982e:	6828      	ldr	r0, [r5, #0]
    9830:	0126      	lsls	r6, r4, #4
    9832:	4430      	add	r0, r6
    9834:	8902      	ldrh	r2, [r0, #8]
    9836:	88bb      	ldrh	r3, [r7, #4]
    9838:	429a      	cmp	r2, r3
    983a:	d1f4      	bne.n	9826 <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    983c:	3001      	adds	r0, #1
    983e:	f7fc ff4d 	bl	66dc <bt_conn_lookup_addr_le>
		if (!conn) {
    9842:	4680      	mov	r8, r0
    9844:	2800      	cmp	r0, #0
    9846:	d0d4      	beq.n	97f2 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    9848:	7b03      	ldrb	r3, [r0, #12]
    984a:	2b03      	cmp	r3, #3
    984c:	d0da      	beq.n	9804 <notify_cb+0x68>
			bt_conn_unref(conn);
    984e:	f7fc ff9f 	bl	6790 <bt_conn_unref>
			continue;
    9852:	e7e8      	b.n	9826 <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    9854:	6979      	ldr	r1, [r7, #20]
    9856:	f7ff ff45 	bl	96e4 <gatt_indicate>
    985a:	4606      	mov	r6, r0
    985c:	e7dc      	b.n	9818 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    985e:	2001      	movs	r0, #1
    9860:	e7b2      	b.n	97c8 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    9862:	2000      	movs	r0, #0
    9864:	e7b0      	b.n	97c8 <notify_cb+0x2c>
    9866:	bf00      	nop
    9868:	000095ff 	.word	0x000095ff
    986c:	20000738 	.word	0x20000738

00009870 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    9870:	8981      	ldrh	r1, [r0, #12]
    9872:	b909      	cbnz	r1, 9878 <sc_restore+0x8>
    9874:	89c3      	ldrh	r3, [r0, #14]
    9876:	b163      	cbz	r3, 9892 <sc_restore+0x22>
{
    9878:	b510      	push	{r4, lr}
    987a:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    987c:	89c2      	ldrh	r2, [r0, #14]
    987e:	4805      	ldr	r0, [pc, #20]	; (9894 <sc_restore+0x24>)
    9880:	f7ff fe70 	bl	9564 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    9884:	2204      	movs	r2, #4
    9886:	2100      	movs	r1, #0
    9888:	f104 000c 	add.w	r0, r4, #12
    988c:	f021 f916 	bl	2aabc <memset>
    9890:	bd10      	pop	{r4, pc}
    9892:	4770      	bx	lr
    9894:	200006e0 	.word	0x200006e0

00009898 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9898:	6882      	ldr	r2, [r0, #8]
    989a:	4b16      	ldr	r3, [pc, #88]	; (98f4 <connected_cb+0x5c>)
    989c:	429a      	cmp	r2, r3
    989e:	d001      	beq.n	98a4 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    98a0:	2001      	movs	r0, #1
    98a2:	4770      	bx	lr
{
    98a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98a8:	460f      	mov	r7, r1
    98aa:	4680      	mov	r8, r0
	ccc = attr->user_data;
    98ac:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    98ae:	2400      	movs	r4, #0
    98b0:	e004      	b.n	98bc <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    98b2:	4430      	add	r0, r6
    98b4:	f7ff ffdc 	bl	9870 <sc_restore>
    98b8:	e019      	b.n	98ee <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    98ba:	3401      	adds	r4, #1
    98bc:	686b      	ldr	r3, [r5, #4]
    98be:	429c      	cmp	r4, r3
    98c0:	d215      	bcs.n	98ee <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    98c2:	6829      	ldr	r1, [r5, #0]
    98c4:	0126      	lsls	r6, r4, #4
    98c6:	4431      	add	r1, r6
    98c8:	3101      	adds	r1, #1
    98ca:	4638      	mov	r0, r7
    98cc:	f7fc feb0 	bl	6630 <bt_conn_addr_le_cmp>
    98d0:	2800      	cmp	r0, #0
    98d2:	d1f2      	bne.n	98ba <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    98d4:	682b      	ldr	r3, [r5, #0]
    98d6:	4433      	add	r3, r6
    98d8:	891b      	ldrh	r3, [r3, #8]
    98da:	2b00      	cmp	r3, #0
    98dc:	d0ed      	beq.n	98ba <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    98de:	4629      	mov	r1, r5
    98e0:	4640      	mov	r0, r8
    98e2:	f7ff fdf9 	bl	94d8 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    98e6:	6828      	ldr	r0, [r5, #0]
    98e8:	4b03      	ldr	r3, [pc, #12]	; (98f8 <connected_cb+0x60>)
    98ea:	4298      	cmp	r0, r3
    98ec:	d0e1      	beq.n	98b2 <connected_cb+0x1a>
}
    98ee:	2001      	movs	r0, #1
    98f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98f4:	000095ff 	.word	0x000095ff
    98f8:	20000738 	.word	0x20000738

000098fc <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    98fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9900:	6882      	ldr	r2, [r0, #8]
    9902:	4b29      	ldr	r3, [pc, #164]	; (99a8 <disconnected_cb+0xac>)
    9904:	429a      	cmp	r2, r3
    9906:	d002      	beq.n	990e <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    9908:	2001      	movs	r0, #1
    990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    990e:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    9910:	892b      	ldrh	r3, [r5, #8]
    9912:	2b00      	cmp	r3, #0
    9914:	d0f8      	beq.n	9908 <disconnected_cb+0xc>
    9916:	4688      	mov	r8, r1
    9918:	4607      	mov	r7, r0
    991a:	2400      	movs	r4, #0
    991c:	e012      	b.n	9944 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    991e:	f7fc ff37 	bl	6790 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    9922:	e7f1      	b.n	9908 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    9924:	f108 0948 	add.w	r9, r8, #72	; 0x48
    9928:	4648      	mov	r0, r9
    992a:	f7fc f99f 	bl	5c6c <bt_addr_le_is_bonded>
    992e:	bb28      	cbnz	r0, 997c <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    9930:	682b      	ldr	r3, [r5, #0]
    9932:	2100      	movs	r1, #0
    9934:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    9936:	6828      	ldr	r0, [r5, #0]
    9938:	4430      	add	r0, r6
    993a:	2202      	movs	r2, #2
    993c:	3008      	adds	r0, #8
    993e:	f021 f8bd 	bl	2aabc <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    9942:	3401      	adds	r4, #1
    9944:	686b      	ldr	r3, [r5, #4]
    9946:	429c      	cmp	r4, r3
    9948:	d220      	bcs.n	998c <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    994a:	6829      	ldr	r1, [r5, #0]
    994c:	0126      	lsls	r6, r4, #4
    994e:	4431      	add	r1, r6
    9950:	890b      	ldrh	r3, [r1, #8]
    9952:	2b00      	cmp	r3, #0
    9954:	d0f5      	beq.n	9942 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9956:	3101      	adds	r1, #1
    9958:	4640      	mov	r0, r8
    995a:	f7fc fe69 	bl	6630 <bt_conn_addr_le_cmp>
    995e:	2800      	cmp	r0, #0
    9960:	d0e0      	beq.n	9924 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9962:	6828      	ldr	r0, [r5, #0]
    9964:	4430      	add	r0, r6
    9966:	3001      	adds	r0, #1
    9968:	f7fc feb8 	bl	66dc <bt_conn_lookup_addr_le>
			if (tmp) {
    996c:	2800      	cmp	r0, #0
    996e:	d0e8      	beq.n	9942 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    9970:	7b02      	ldrb	r2, [r0, #12]
    9972:	2a03      	cmp	r2, #3
    9974:	d0d3      	beq.n	991e <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    9976:	f7fc ff0b 	bl	6790 <bt_conn_unref>
    997a:	e7e2      	b.n	9942 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    997c:	6828      	ldr	r0, [r5, #0]
    997e:	4430      	add	r0, r6
    9980:	2207      	movs	r2, #7
    9982:	4649      	mov	r1, r9
    9984:	3001      	adds	r0, #1
    9986:	f7f6 fc9b 	bl	2c0 <memcpy>
    998a:	e7da      	b.n	9942 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    998c:	2202      	movs	r2, #2
    998e:	2100      	movs	r1, #0
    9990:	f105 0008 	add.w	r0, r5, #8
    9994:	f021 f892 	bl	2aabc <memset>
	if (ccc->cfg_changed) {
    9998:	68eb      	ldr	r3, [r5, #12]
    999a:	2b00      	cmp	r3, #0
    999c:	d0b4      	beq.n	9908 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    999e:	8929      	ldrh	r1, [r5, #8]
    99a0:	4638      	mov	r0, r7
    99a2:	4798      	blx	r3
    99a4:	e7b0      	b.n	9908 <disconnected_cb+0xc>
    99a6:	bf00      	nop
    99a8:	000095ff 	.word	0x000095ff

000099ac <bt_gatt_init>:
{
    99ac:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    99ae:	4805      	ldr	r0, [pc, #20]	; (99c4 <bt_gatt_init+0x18>)
    99b0:	f7ff fd3c 	bl	942c <gatt_register>
	gatt_register(&gatt_svc);
    99b4:	4804      	ldr	r0, [pc, #16]	; (99c8 <bt_gatt_init+0x1c>)
    99b6:	f7ff fd39 	bl	942c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    99ba:	4904      	ldr	r1, [pc, #16]	; (99cc <bt_gatt_init+0x20>)
    99bc:	4804      	ldr	r0, [pc, #16]	; (99d0 <bt_gatt_init+0x24>)
    99be:	f01f fcd9 	bl	29374 <k_delayed_work_init>
    99c2:	bd08      	pop	{r3, pc}
    99c4:	2000ba6c 	.word	0x2000ba6c
    99c8:	2000bac8 	.word	0x2000bac8
    99cc:	00009ca1 	.word	0x00009ca1
    99d0:	2000070c 	.word	0x2000070c

000099d4 <bt_gatt_service_register>:
{
    99d4:	b510      	push	{r4, lr}
    99d6:	b082      	sub	sp, #8
    99d8:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    99da:	6803      	ldr	r3, [r0, #0]
    99dc:	6818      	ldr	r0, [r3, #0]
    99de:	2300      	movs	r3, #0
    99e0:	f88d 3000 	strb.w	r3, [sp]
    99e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    99e8:	f8ad 3002 	strh.w	r3, [sp, #2]
    99ec:	4669      	mov	r1, sp
    99ee:	f7fa f876 	bl	3ade <bt_uuid_cmp>
    99f2:	b300      	cbz	r0, 9a36 <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    99f4:	6823      	ldr	r3, [r4, #0]
    99f6:	6818      	ldr	r0, [r3, #0]
    99f8:	2300      	movs	r3, #0
    99fa:	f88d 3004 	strb.w	r3, [sp, #4]
    99fe:	f641 0301 	movw	r3, #6145	; 0x1801
    9a02:	f8ad 3006 	strh.w	r3, [sp, #6]
    9a06:	a901      	add	r1, sp, #4
    9a08:	f7fa f869 	bl	3ade <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    9a0c:	b1b0      	cbz	r0, 9a3c <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    9a0e:	4620      	mov	r0, r4
    9a10:	f7ff fd0c 	bl	942c <gatt_register>
	if (err < 0) {
    9a14:	2800      	cmp	r0, #0
    9a16:	db0c      	blt.n	9a32 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9a18:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    9a1a:	88a2      	ldrh	r2, [r4, #4]
    9a1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9a20:	0093      	lsls	r3, r2, #2
    9a22:	3b14      	subs	r3, #20
    9a24:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9a26:	8a1a      	ldrh	r2, [r3, #16]
    9a28:	8a09      	ldrh	r1, [r1, #16]
    9a2a:	4806      	ldr	r0, [pc, #24]	; (9a44 <bt_gatt_service_register+0x70>)
    9a2c:	f7ff fd9a 	bl	9564 <sc_indicate>
	return 0;
    9a30:	2000      	movs	r0, #0
}
    9a32:	b002      	add	sp, #8
    9a34:	bd10      	pop	{r4, pc}
		return -EALREADY;
    9a36:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a3a:	e7fa      	b.n	9a32 <bt_gatt_service_register+0x5e>
    9a3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a40:	e7f7      	b.n	9a32 <bt_gatt_service_register+0x5e>
    9a42:	bf00      	nop
    9a44:	200006e0 	.word	0x200006e0

00009a48 <bt_gatt_attr_read>:
{
    9a48:	b510      	push	{r4, lr}
    9a4a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9a4e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    9a52:	42a1      	cmp	r1, r4
    9a54:	d80c      	bhi.n	9a70 <bt_gatt_attr_read+0x28>
    9a56:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    9a58:	1a64      	subs	r4, r4, r1
    9a5a:	42a3      	cmp	r3, r4
    9a5c:	bfa8      	it	ge
    9a5e:	4623      	movge	r3, r4
    9a60:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    9a62:	4622      	mov	r2, r4
    9a64:	9b03      	ldr	r3, [sp, #12]
    9a66:	4419      	add	r1, r3
    9a68:	f7f6 fc2a 	bl	2c0 <memcpy>
}
    9a6c:	4620      	mov	r0, r4
    9a6e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9a70:	f06f 0406 	mvn.w	r4, #6
    9a74:	e7fa      	b.n	9a6c <bt_gatt_attr_read+0x24>

00009a76 <read_appearance>:
{
    9a76:	b530      	push	{r4, r5, lr}
    9a78:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    9a7a:	ac06      	add	r4, sp, #24
    9a7c:	2500      	movs	r5, #0
    9a7e:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    9a82:	2502      	movs	r5, #2
    9a84:	9502      	str	r5, [sp, #8]
    9a86:	9401      	str	r4, [sp, #4]
    9a88:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    9a8c:	9400      	str	r4, [sp, #0]
    9a8e:	f7ff ffdb 	bl	9a48 <bt_gatt_attr_read>
}
    9a92:	b007      	add	sp, #28
    9a94:	bd30      	pop	{r4, r5, pc}
	...

00009a98 <read_name>:
{
    9a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a9c:	b084      	sub	sp, #16
    9a9e:	4605      	mov	r5, r0
    9aa0:	460e      	mov	r6, r1
    9aa2:	4617      	mov	r7, r2
    9aa4:	4698      	mov	r8, r3
				 strlen(gap_name));
    9aa6:	4c09      	ldr	r4, [pc, #36]	; (9acc <read_name+0x34>)
    9aa8:	4620      	mov	r0, r4
    9aaa:	f7f6 fe29 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    9aae:	b280      	uxth	r0, r0
    9ab0:	9002      	str	r0, [sp, #8]
    9ab2:	9401      	str	r4, [sp, #4]
    9ab4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9ab8:	9300      	str	r3, [sp, #0]
    9aba:	4643      	mov	r3, r8
    9abc:	463a      	mov	r2, r7
    9abe:	4631      	mov	r1, r6
    9ac0:	4628      	mov	r0, r5
    9ac2:	f7ff ffc1 	bl	9a48 <bt_gatt_attr_read>
}
    9ac6:	b004      	add	sp, #16
    9ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9acc:	0002f67c 	.word	0x0002f67c

00009ad0 <bt_gatt_attr_read_service>:
{
    9ad0:	b570      	push	{r4, r5, r6, lr}
    9ad2:	b086      	sub	sp, #24
    9ad4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    9ad8:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    9ada:	7826      	ldrb	r6, [r4, #0]
    9adc:	b146      	cbz	r6, 9af0 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    9ade:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9ae0:	2610      	movs	r6, #16
    9ae2:	9602      	str	r6, [sp, #8]
    9ae4:	9401      	str	r4, [sp, #4]
    9ae6:	9500      	str	r5, [sp, #0]
    9ae8:	f7ff ffae 	bl	9a48 <bt_gatt_attr_read>
}
    9aec:	b006      	add	sp, #24
    9aee:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    9af0:	8866      	ldrh	r6, [r4, #2]
    9af2:	ac06      	add	r4, sp, #24
    9af4:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9af8:	2602      	movs	r6, #2
    9afa:	9602      	str	r6, [sp, #8]
    9afc:	9401      	str	r4, [sp, #4]
    9afe:	9500      	str	r5, [sp, #0]
    9b00:	f7ff ffa2 	bl	9a48 <bt_gatt_attr_read>
    9b04:	e7f2      	b.n	9aec <bt_gatt_attr_read_service+0x1c>

00009b06 <bt_gatt_attr_read_ccc>:
{
    9b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b0a:	b086      	sub	sp, #24
    9b0c:	4607      	mov	r7, r0
    9b0e:	4688      	mov	r8, r1
    9b10:	4691      	mov	r9, r2
    9b12:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9b14:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9b16:	2400      	movs	r4, #0
    9b18:	686b      	ldr	r3, [r5, #4]
    9b1a:	429c      	cmp	r4, r3
    9b1c:	d20e      	bcs.n	9b3c <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9b1e:	6829      	ldr	r1, [r5, #0]
    9b20:	0126      	lsls	r6, r4, #4
    9b22:	4431      	add	r1, r6
    9b24:	3101      	adds	r1, #1
    9b26:	4638      	mov	r0, r7
    9b28:	f7fc fd82 	bl	6630 <bt_conn_addr_le_cmp>
    9b2c:	b108      	cbz	r0, 9b32 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    9b2e:	3401      	adds	r4, #1
    9b30:	e7f2      	b.n	9b18 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    9b32:	682b      	ldr	r3, [r5, #0]
    9b34:	441e      	add	r6, r3
    9b36:	8933      	ldrh	r3, [r6, #8]
    9b38:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    9b3c:	686b      	ldr	r3, [r5, #4]
    9b3e:	429c      	cmp	r4, r3
    9b40:	d010      	beq.n	9b64 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    9b42:	2302      	movs	r3, #2
    9b44:	9302      	str	r3, [sp, #8]
    9b46:	f10d 0316 	add.w	r3, sp, #22
    9b4a:	9301      	str	r3, [sp, #4]
    9b4c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    9b50:	9300      	str	r3, [sp, #0]
    9b52:	4653      	mov	r3, sl
    9b54:	464a      	mov	r2, r9
    9b56:	4641      	mov	r1, r8
    9b58:	4638      	mov	r0, r7
    9b5a:	f7ff ff75 	bl	9a48 <bt_gatt_attr_read>
}
    9b5e:	b006      	add	sp, #24
    9b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    9b64:	2300      	movs	r3, #0
    9b66:	f8ad 3016 	strh.w	r3, [sp, #22]
    9b6a:	e7ea      	b.n	9b42 <bt_gatt_attr_read_ccc+0x3c>

00009b6c <bt_gatt_foreach_attr>:
{
    9b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b70:	4606      	mov	r6, r0
    9b72:	460f      	mov	r7, r1
    9b74:	4690      	mov	r8, r2
    9b76:	4699      	mov	r9, r3
	return list->head;
    9b78:	4b15      	ldr	r3, [pc, #84]	; (9bd0 <bt_gatt_foreach_attr+0x64>)
    9b7a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9b7c:	b10d      	cbz	r5, 9b82 <bt_gatt_foreach_attr+0x16>
    9b7e:	3d08      	subs	r5, #8
    9b80:	e01e      	b.n	9bc0 <bt_gatt_foreach_attr+0x54>
    9b82:	2500      	movs	r5, #0
    9b84:	e01c      	b.n	9bc0 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    9b86:	3401      	adds	r4, #1
    9b88:	88ab      	ldrh	r3, [r5, #4]
    9b8a:	429c      	cmp	r4, r3
    9b8c:	da0f      	bge.n	9bae <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9b8e:	6828      	ldr	r0, [r5, #0]
    9b90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9b94:	0093      	lsls	r3, r2, #2
    9b96:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    9b98:	8a03      	ldrh	r3, [r0, #16]
    9b9a:	42b3      	cmp	r3, r6
    9b9c:	d3f3      	bcc.n	9b86 <bt_gatt_foreach_attr+0x1a>
    9b9e:	42bb      	cmp	r3, r7
    9ba0:	d8f1      	bhi.n	9b86 <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    9ba2:	4649      	mov	r1, r9
    9ba4:	47c0      	blx	r8
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d1ed      	bne.n	9b86 <bt_gatt_foreach_attr+0x1a>
    9baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9bae:	f115 0308 	adds.w	r3, r5, #8
    9bb2:	d009      	beq.n	9bc8 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    9bb4:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9bb6:	b14a      	cbz	r2, 9bcc <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9bb8:	b103      	cbz	r3, 9bbc <bt_gatt_foreach_attr+0x50>
	return node->next;
    9bba:	68ab      	ldr	r3, [r5, #8]
    9bbc:	f1a3 0508 	sub.w	r5, r3, #8
    9bc0:	2d00      	cmp	r5, #0
    9bc2:	d0f2      	beq.n	9baa <bt_gatt_foreach_attr+0x3e>
    9bc4:	2400      	movs	r4, #0
    9bc6:	e7df      	b.n	9b88 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9bc8:	461a      	mov	r2, r3
    9bca:	e7f4      	b.n	9bb6 <bt_gatt_foreach_attr+0x4a>
    9bcc:	2500      	movs	r5, #0
    9bce:	e7f7      	b.n	9bc0 <bt_gatt_foreach_attr+0x54>
    9bd0:	200006d8 	.word	0x200006d8

00009bd4 <bt_gatt_attr_next>:
{
    9bd4:	b500      	push	{lr}
    9bd6:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    9bd8:	ab02      	add	r3, sp, #8
    9bda:	2200      	movs	r2, #0
    9bdc:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9be0:	8a00      	ldrh	r0, [r0, #16]
    9be2:	3001      	adds	r0, #1
    9be4:	b280      	uxth	r0, r0
    9be6:	4a04      	ldr	r2, [pc, #16]	; (9bf8 <bt_gatt_attr_next+0x24>)
    9be8:	4601      	mov	r1, r0
    9bea:	f7ff ffbf 	bl	9b6c <bt_gatt_foreach_attr>
}
    9bee:	9801      	ldr	r0, [sp, #4]
    9bf0:	b003      	add	sp, #12
    9bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    9bf6:	bf00      	nop
    9bf8:	000094d3 	.word	0x000094d3

00009bfc <bt_gatt_attr_read_chrc>:
{
    9bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c00:	b08a      	sub	sp, #40	; 0x28
    9c02:	4606      	mov	r6, r0
    9c04:	460c      	mov	r4, r1
    9c06:	4617      	mov	r7, r2
    9c08:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    9c0a:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    9c0c:	792b      	ldrb	r3, [r5, #4]
    9c0e:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    9c12:	4608      	mov	r0, r1
    9c14:	f7ff ffde 	bl	9bd4 <bt_gatt_attr_next>
	if (!next) {
    9c18:	b1c0      	cbz	r0, 9c4c <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    9c1a:	8a03      	ldrh	r3, [r0, #16]
    9c1c:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    9c20:	6829      	ldr	r1, [r5, #0]
    9c22:	780b      	ldrb	r3, [r1, #0]
    9c24:	b9c3      	cbnz	r3, 9c58 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    9c26:	884b      	ldrh	r3, [r1, #2]
    9c28:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    9c2c:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    9c2e:	9302      	str	r3, [sp, #8]
    9c30:	ab05      	add	r3, sp, #20
    9c32:	9301      	str	r3, [sp, #4]
    9c34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    9c38:	9300      	str	r3, [sp, #0]
    9c3a:	4643      	mov	r3, r8
    9c3c:	463a      	mov	r2, r7
    9c3e:	4621      	mov	r1, r4
    9c40:	4630      	mov	r0, r6
    9c42:	f7ff ff01 	bl	9a48 <bt_gatt_attr_read>
}
    9c46:	b00a      	add	sp, #40	; 0x28
    9c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    9c4c:	2300      	movs	r3, #0
    9c4e:	f88d 3015 	strb.w	r3, [sp, #21]
    9c52:	f88d 3016 	strb.w	r3, [sp, #22]
    9c56:	e7e3      	b.n	9c20 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    9c58:	2210      	movs	r2, #16
    9c5a:	3101      	adds	r1, #1
    9c5c:	f10d 0017 	add.w	r0, sp, #23
    9c60:	f7f6 fb2e 	bl	2c0 <memcpy>
		value_len += 16;
    9c64:	2313      	movs	r3, #19
    9c66:	e7e2      	b.n	9c2e <bt_gatt_attr_read_chrc+0x32>

00009c68 <bt_gatt_indicate>:
{
    9c68:	b500      	push	{lr}
    9c6a:	b087      	sub	sp, #28
	if (conn) {
    9c6c:	b120      	cbz	r0, 9c78 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    9c6e:	f7ff fd39 	bl	96e4 <gatt_indicate>
}
    9c72:	b007      	add	sp, #28
    9c74:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    9c78:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9c7c:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    9c7e:	2302      	movs	r3, #2
    9c80:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    9c84:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    9c86:	6988      	ldr	r0, [r1, #24]
    9c88:	466b      	mov	r3, sp
    9c8a:	4a04      	ldr	r2, [pc, #16]	; (9c9c <bt_gatt_indicate+0x34>)
    9c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c90:	8a00      	ldrh	r0, [r0, #16]
    9c92:	f7ff ff6b 	bl	9b6c <bt_gatt_foreach_attr>
	return nfy.err;
    9c96:	9800      	ldr	r0, [sp, #0]
    9c98:	e7eb      	b.n	9c72 <bt_gatt_indicate+0xa>
    9c9a:	bf00      	nop
    9c9c:	0000979d 	.word	0x0000979d

00009ca0 <sc_process>:
{
    9ca0:	b510      	push	{r4, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9ca6:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    9caa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9cae:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    9cb2:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9cb6:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    9cba:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9cbe:	f3bf 8f5b 	dmb	ish
    9cc2:	e854 2f00 	ldrex	r2, [r4]
    9cc6:	f022 0201 	bic.w	r2, r2, #1
    9cca:	e844 2000 	strex	r0, r2, [r4]
    9cce:	2800      	cmp	r0, #0
    9cd0:	d1f7      	bne.n	9cc2 <sc_process+0x22>
    9cd2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    9cd6:	2000      	movs	r0, #0
    9cd8:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    9cdc:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9ce0:	4a0e      	ldr	r2, [pc, #56]	; (9d1c <sc_process+0x7c>)
    9ce2:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9ce6:	4a0e      	ldr	r2, [pc, #56]	; (9d20 <sc_process+0x80>)
    9ce8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9cec:	aa01      	add	r2, sp, #4
    9cee:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9cf2:	2204      	movs	r2, #4
    9cf4:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9cf8:	f7ff ffb6 	bl	9c68 <bt_gatt_indicate>
    9cfc:	b108      	cbz	r0, 9d02 <sc_process+0x62>
}
    9cfe:	b002      	add	sp, #8
    9d00:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d02:	f3bf 8f5b 	dmb	ish
    9d06:	e854 3f00 	ldrex	r3, [r4]
    9d0a:	f043 0302 	orr.w	r3, r3, #2
    9d0e:	e844 3200 	strex	r2, r3, [r4]
    9d12:	2a00      	cmp	r2, #0
    9d14:	d1f7      	bne.n	9d06 <sc_process+0x66>
    9d16:	f3bf 8f5b 	dmb	ish
    9d1a:	e7f0      	b.n	9cfe <sc_process+0x5e>
    9d1c:	2000baa0 	.word	0x2000baa0
    9d20:	00009519 	.word	0x00009519

00009d24 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    9d24:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    9d26:	4603      	mov	r3, r0
    9d28:	4a03      	ldr	r2, [pc, #12]	; (9d38 <bt_gatt_connected+0x14>)
    9d2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d2e:	2001      	movs	r0, #1
    9d30:	f7ff ff1c 	bl	9b6c <bt_gatt_foreach_attr>
    9d34:	bd08      	pop	{r3, pc}
    9d36:	bf00      	nop
    9d38:	00009899 	.word	0x00009899

00009d3c <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9d3c:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9d3e:	4603      	mov	r3, r0
    9d40:	4a03      	ldr	r2, [pc, #12]	; (9d50 <bt_gatt_disconnected+0x14>)
    9d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d46:	2001      	movs	r0, #1
    9d48:	f7ff ff10 	bl	9b6c <bt_gatt_foreach_attr>
    9d4c:	bd08      	pop	{r3, pc}
    9d4e:	bf00      	nop
    9d50:	000098fd 	.word	0x000098fd

00009d54 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9d54:	4b11      	ldr	r3, [pc, #68]	; (9d9c <get_io_capa+0x48>)
    9d56:	681b      	ldr	r3, [r3, #0]
    9d58:	b1db      	cbz	r3, 9d92 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9d5a:	681a      	ldr	r2, [r3, #0]
    9d5c:	b152      	cbz	r2, 9d74 <get_io_capa+0x20>
    9d5e:	6859      	ldr	r1, [r3, #4]
    9d60:	b141      	cbz	r1, 9d74 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9d62:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9d64:	b109      	cbz	r1, 9d6a <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9d66:	2004      	movs	r0, #4
    9d68:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9d6a:	490d      	ldr	r1, [pc, #52]	; (9da0 <get_io_capa+0x4c>)
    9d6c:	7809      	ldrb	r1, [r1, #0]
    9d6e:	b909      	cbnz	r1, 9d74 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9d70:	2004      	movs	r0, #4
    9d72:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9d74:	490a      	ldr	r1, [pc, #40]	; (9da0 <get_io_capa+0x4c>)
    9d76:	7809      	ldrb	r1, [r1, #0]
    9d78:	b121      	cbz	r1, 9d84 <get_io_capa+0x30>
    9d7a:	b11a      	cbz	r2, 9d84 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    9d7c:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    9d7e:	b109      	cbz	r1, 9d84 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    9d80:	2001      	movs	r0, #1
    9d82:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    9d84:	685b      	ldr	r3, [r3, #4]
    9d86:	b10b      	cbz	r3, 9d8c <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    9d88:	2002      	movs	r0, #2
    9d8a:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    9d8c:	b11a      	cbz	r2, 9d96 <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    9d8e:	2000      	movs	r0, #0
    9d90:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9d92:	2003      	movs	r0, #3
    9d94:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    9d96:	2003      	movs	r0, #3
}
    9d98:	4770      	bx	lr
    9d9a:	bf00      	nop
    9d9c:	20002948 	.word	0x20002948
    9da0:	20000940 	.word	0x20000940

00009da4 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9da4:	2904      	cmp	r1, #4
    9da6:	d811      	bhi.n	9dcc <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9da8:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9dac:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9db0:	4313      	orrs	r3, r2
    9db2:	f013 0f04 	tst.w	r3, #4
    9db6:	d00b      	beq.n	9dd0 <get_pair_method+0x2c>
{
    9db8:	b510      	push	{r4, lr}
    9dba:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    9dbc:	f7ff ffca 	bl	9d54 <get_io_capa>
    9dc0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9dc4:	4c03      	ldr	r4, [pc, #12]	; (9dd4 <get_pair_method+0x30>)
    9dc6:	4421      	add	r1, r4
    9dc8:	5c08      	ldrb	r0, [r1, r0]
    9dca:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    9dcc:	2000      	movs	r0, #0
    9dce:	4770      	bx	lr
		return JUST_WORKS;
    9dd0:	2000      	movs	r0, #0
    9dd2:	4770      	bx	lr
    9dd4:	0002f6a0 	.word	0x0002f6a0

00009dd8 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    9dd8:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    9ddc:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    9de0:	4290      	cmp	r0, r2
    9de2:	bf28      	it	cs
    9de4:	4610      	movcs	r0, r2
    9de6:	4770      	bx	lr

00009de8 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    9de8:	b430      	push	{r4, r5}
	size_t len = 16;
    9dea:	2310      	movs	r3, #16

	while (len--) {
    9dec:	e007      	b.n	9dfe <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    9dee:	7803      	ldrb	r3, [r0, #0]
    9df0:	780d      	ldrb	r5, [r1, #0]
    9df2:	406b      	eors	r3, r5
    9df4:	7013      	strb	r3, [r2, #0]
	while (len--) {
    9df6:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    9df8:	3201      	adds	r2, #1
    9dfa:	3101      	adds	r1, #1
    9dfc:	3001      	adds	r0, #1
	while (len--) {
    9dfe:	1e5c      	subs	r4, r3, #1
    9e00:	2b00      	cmp	r3, #0
    9e02:	d1f4      	bne.n	9dee <xor_128+0x6>
	}
}
    9e04:	bc30      	pop	{r4, r5}
    9e06:	4770      	bx	lr

00009e08 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9e08:	2904      	cmp	r1, #4
    9e0a:	d819      	bhi.n	9e40 <legacy_get_pair_method+0x38>
{
    9e0c:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9e0e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9e12:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9e16:	4313      	orrs	r3, r2
    9e18:	f013 0f04 	tst.w	r3, #4
    9e1c:	d012      	beq.n	9e44 <legacy_get_pair_method+0x3c>
    9e1e:	460c      	mov	r4, r1
    9e20:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    9e22:	f7ff ff97 	bl	9d54 <get_io_capa>
    9e26:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9e2a:	4c08      	ldr	r4, [pc, #32]	; (9e4c <legacy_get_pair_method+0x44>)
    9e2c:	4421      	add	r1, r4
    9e2e:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    9e30:	2804      	cmp	r0, #4
    9e32:	d000      	beq.n	9e36 <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    9e34:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9e36:	682b      	ldr	r3, [r5, #0]
    9e38:	78db      	ldrb	r3, [r3, #3]
    9e3a:	b92b      	cbnz	r3, 9e48 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    9e3c:	2002      	movs	r0, #2
    9e3e:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9e40:	2000      	movs	r0, #0
    9e42:	4770      	bx	lr
		return JUST_WORKS;
    9e44:	2000      	movs	r0, #0
    9e46:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    9e48:	2001      	movs	r0, #1
    9e4a:	e7f3      	b.n	9e34 <legacy_get_pair_method+0x2c>
    9e4c:	0002f684 	.word	0x0002f684

00009e50 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    9e50:	b510      	push	{r4, lr}
	if (sc_supported) {
    9e52:	4b09      	ldr	r3, [pc, #36]	; (9e78 <get_auth+0x28>)
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	b143      	cbz	r3, 9e6a <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    9e58:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    9e5c:	f7ff ff7a 	bl	9d54 <get_io_capa>
    9e60:	2803      	cmp	r0, #3
    9e62:	d005      	beq.n	9e70 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    9e64:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    9e68:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    9e6a:	f000 0407 	and.w	r4, r0, #7
    9e6e:	e7f5      	b.n	9e5c <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    9e70:	f004 000b 	and.w	r0, r4, #11
    9e74:	bd10      	pop	{r4, pc}
    9e76:	bf00      	nop
    9e78:	20000940 	.word	0x20000940

00009e7c <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    9e7c:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    9e7e:	7a43      	ldrb	r3, [r0, #9]
    9e80:	3b01      	subs	r3, #1
    9e82:	2b03      	cmp	r3, #3
    9e84:	d818      	bhi.n	9eb8 <sec_level_reachable+0x3c>
    9e86:	e8df f003 	tbb	[pc, r3]
    9e8a:	0202      	.short	0x0202
    9e8c:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    9e8e:	2001      	movs	r0, #1
    9e90:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9e92:	f7ff ff5f 	bl	9d54 <get_io_capa>
    9e96:	3803      	subs	r0, #3
    9e98:	bf18      	it	ne
    9e9a:	2001      	movne	r0, #1
    9e9c:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9e9e:	f7ff ff59 	bl	9d54 <get_io_capa>
    9ea2:	2803      	cmp	r0, #3
    9ea4:	d004      	beq.n	9eb0 <sec_level_reachable+0x34>
    9ea6:	4b05      	ldr	r3, [pc, #20]	; (9ebc <sec_level_reachable+0x40>)
    9ea8:	781b      	ldrb	r3, [r3, #0]
    9eaa:	b91b      	cbnz	r3, 9eb4 <sec_level_reachable+0x38>
    9eac:	2000      	movs	r0, #0
    9eae:	bd08      	pop	{r3, pc}
    9eb0:	2000      	movs	r0, #0
    9eb2:	bd08      	pop	{r3, pc}
    9eb4:	2001      	movs	r0, #1
    9eb6:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    9eb8:	2000      	movs	r0, #0
	}
}
    9eba:	bd08      	pop	{r3, pc}
    9ebc:	20000940 	.word	0x20000940

00009ec0 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9ec0:	2000      	movs	r0, #0
    9ec2:	b110      	cbz	r0, 9eca <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9ec4:	f06f 000b 	mvn.w	r0, #11
}
    9ec8:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    9eca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9ece:	fb03 f300 	mul.w	r3, r3, r0
    9ed2:	4a07      	ldr	r2, [pc, #28]	; (9ef0 <bt_smp_accept+0x30>)
    9ed4:	58d3      	ldr	r3, [r2, r3]
    9ed6:	b10b      	cbz	r3, 9edc <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9ed8:	3001      	adds	r0, #1
    9eda:	e7f2      	b.n	9ec2 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    9edc:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9ee0:	4a03      	ldr	r2, [pc, #12]	; (9ef0 <bt_smp_accept+0x30>)
    9ee2:	fb03 2300 	mla	r3, r3, r0, r2
    9ee6:	4a03      	ldr	r2, [pc, #12]	; (9ef4 <bt_smp_accept+0x34>)
    9ee8:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    9eea:	600b      	str	r3, [r1, #0]
		return 0;
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	20000758 	.word	0x20000758
    9ef4:	2000bae0 	.word	0x2000bae0

00009ef8 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    9ef8:	4b04      	ldr	r3, [pc, #16]	; (9f0c <le_sc_supported+0x14>)
    9efa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    9efe:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    9f02:	2806      	cmp	r0, #6
    9f04:	bf14      	ite	ne
    9f06:	2000      	movne	r0, #0
    9f08:	2001      	moveq	r0, #1
    9f0a:	4770      	bx	lr
    9f0c:	2000b810 	.word	0x2000b810

00009f10 <smp_chan_get>:
{
    9f10:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9f12:	2106      	movs	r1, #6
    9f14:	f7fd fd18 	bl	7948 <bt_l2cap_le_lookup_rx_cid>
}
    9f18:	bd08      	pop	{r3, pc}

00009f1a <smp_create_pdu>:
{
    9f1a:	b538      	push	{r3, r4, r5, lr}
    9f1c:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9f1e:	2100      	movs	r1, #0
    9f20:	4608      	mov	r0, r1
    9f22:	f7fd fa58 	bl	73d6 <bt_l2cap_create_pdu>
    9f26:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9f28:	2101      	movs	r1, #1
    9f2a:	3008      	adds	r0, #8
    9f2c:	f010 f952 	bl	1a1d4 <net_buf_simple_add>
	hdr->code = op;
    9f30:	7005      	strb	r5, [r0, #0]
}
    9f32:	4620      	mov	r0, r4
    9f34:	bd38      	pop	{r3, r4, r5, pc}

00009f36 <smp_init>:
{
    9f36:	b510      	push	{r4, lr}
    9f38:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9f3a:	22e0      	movs	r2, #224	; 0xe0
    9f3c:	2100      	movs	r1, #0
    9f3e:	309c      	adds	r0, #156	; 0x9c
    9f40:	f020 fdbc 	bl	2aabc <memset>
	if (bt_rand(smp->prnd, 16)) {
    9f44:	2110      	movs	r1, #16
    9f46:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9f4a:	f006 fdcd 	bl	10ae8 <bt_rand>
    9f4e:	b110      	cbz	r0, 9f56 <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    9f50:	2308      	movs	r3, #8
}
    9f52:	4618      	mov	r0, r3
    9f54:	bd10      	pop	{r4, pc}
    9f56:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9f58:	349c      	adds	r4, #156	; 0x9c
    9f5a:	f3bf 8f5b 	dmb	ish
    9f5e:	e854 2f00 	ldrex	r2, [r4]
    9f62:	f042 0220 	orr.w	r2, r2, #32
    9f66:	e844 2100 	strex	r1, r2, [r4]
    9f6a:	2900      	cmp	r1, #0
    9f6c:	d1f7      	bne.n	9f5e <smp_init+0x28>
    9f6e:	f3bf 8f5b 	dmb	ish
	return 0;
    9f72:	e7ee      	b.n	9f52 <smp_init+0x1c>

00009f74 <display_passkey>:
{
    9f74:	b538      	push	{r3, r4, r5, lr}
    9f76:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9f78:	2104      	movs	r1, #4
    9f7a:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9f7e:	f006 fdb3 	bl	10ae8 <bt_rand>
    9f82:	b108      	cbz	r0, 9f88 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    9f84:	2008      	movs	r0, #8
}
    9f86:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    9f88:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    9f8c:	4909      	ldr	r1, [pc, #36]	; (9fb4 <display_passkey+0x40>)
    9f8e:	fba1 2103 	umull	r2, r1, r1, r3
    9f92:	0c89      	lsrs	r1, r1, #18
    9f94:	4a08      	ldr	r2, [pc, #32]	; (9fb8 <display_passkey+0x44>)
    9f96:	fb02 3111 	mls	r1, r2, r1, r3
    9f9a:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    9f9e:	2500      	movs	r5, #0
    9fa0:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9fa4:	4b05      	ldr	r3, [pc, #20]	; (9fbc <display_passkey+0x48>)
    9fa6:	681b      	ldr	r3, [r3, #0]
    9fa8:	681b      	ldr	r3, [r3, #0]
    9faa:	6820      	ldr	r0, [r4, #0]
    9fac:	4798      	blx	r3
	return 0;
    9fae:	4628      	mov	r0, r5
    9fb0:	bd38      	pop	{r3, r4, r5, pc}
    9fb2:	bf00      	nop
    9fb4:	431bde83 	.word	0x431bde83
    9fb8:	000f4240 	.word	0x000f4240
    9fbc:	20002948 	.word	0x20002948

00009fc0 <smp_send>:
{
    9fc0:	b510      	push	{r4, lr}
    9fc2:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9fc4:	4613      	mov	r3, r2
    9fc6:	460a      	mov	r2, r1
    9fc8:	2106      	movs	r1, #6
    9fca:	6800      	ldr	r0, [r0, #0]
    9fcc:	f7fd fa9b 	bl	7506 <bt_l2cap_send_cb>
    9fd0:	f247 5230 	movw	r2, #30000	; 0x7530
    9fd4:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    9fd8:	4801      	ldr	r0, [pc, #4]	; (9fe0 <smp_send+0x20>)
    9fda:	f01f fa43 	bl	29464 <k_delayed_work_submit_to_queue>
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	20002b10 	.word	0x20002b10

00009fe4 <sc_smp_send_dhkey_check>:
{
    9fe4:	b570      	push	{r4, r5, r6, lr}
    9fe6:	4604      	mov	r4, r0
    9fe8:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9fea:	2210      	movs	r2, #16
    9fec:	210d      	movs	r1, #13
    9fee:	6800      	ldr	r0, [r0, #0]
    9ff0:	f7ff ff93 	bl	9f1a <smp_create_pdu>
	if (!buf) {
    9ff4:	b178      	cbz	r0, a016 <sc_smp_send_dhkey_check+0x32>
    9ff6:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    9ff8:	2110      	movs	r1, #16
    9ffa:	3008      	adds	r0, #8
    9ffc:	f010 f8ea 	bl	1a1d4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    a000:	2210      	movs	r2, #16
    a002:	4631      	mov	r1, r6
    a004:	f7f6 f95c 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    a008:	2200      	movs	r2, #0
    a00a:	4629      	mov	r1, r5
    a00c:	4620      	mov	r0, r4
    a00e:	f7ff ffd7 	bl	9fc0 <smp_send>
	return 0;
    a012:	2000      	movs	r0, #0
    a014:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a016:	2008      	movs	r0, #8
}
    a018:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a01c <sc_send_public_key>:
{
    a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a01e:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    a020:	2240      	movs	r2, #64	; 0x40
    a022:	210c      	movs	r1, #12
    a024:	6800      	ldr	r0, [r0, #0]
    a026:	f7ff ff78 	bl	9f1a <smp_create_pdu>
	if (!req_buf) {
    a02a:	b1b0      	cbz	r0, a05a <sc_send_public_key+0x3e>
    a02c:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    a02e:	2140      	movs	r1, #64	; 0x40
    a030:	3008      	adds	r0, #8
    a032:	f010 f8cf 	bl	1a1d4 <net_buf_simple_add>
    a036:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a038:	4e09      	ldr	r6, [pc, #36]	; (a060 <sc_send_public_key+0x44>)
    a03a:	2220      	movs	r2, #32
    a03c:	4631      	mov	r1, r6
    a03e:	f7f6 f93f 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a042:	2220      	movs	r2, #32
    a044:	18b1      	adds	r1, r6, r2
    a046:	18b8      	adds	r0, r7, r2
    a048:	f7f6 f93a 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    a04c:	2200      	movs	r2, #0
    a04e:	4629      	mov	r1, r5
    a050:	4620      	mov	r0, r4
    a052:	f7ff ffb5 	bl	9fc0 <smp_send>
	return 0;
    a056:	2000      	movs	r0, #0
    a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a05a:	2008      	movs	r0, #8
}
    a05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a05e:	bf00      	nop
    a060:	20000900 	.word	0x20000900

0000a064 <send_pairing_rsp>:
{
    a064:	b538      	push	{r3, r4, r5, lr}
    a066:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    a068:	2206      	movs	r2, #6
    a06a:	2102      	movs	r1, #2
    a06c:	6800      	ldr	r0, [r0, #0]
    a06e:	f7ff ff54 	bl	9f1a <smp_create_pdu>
	if (!rsp_buf) {
    a072:	b180      	cbz	r0, a096 <send_pairing_rsp+0x32>
    a074:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    a076:	2106      	movs	r1, #6
    a078:	3008      	adds	r0, #8
    a07a:	f010 f8ab 	bl	1a1d4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    a07e:	2206      	movs	r2, #6
    a080:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    a084:	f7f6 f91c 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a088:	2200      	movs	r2, #0
    a08a:	4629      	mov	r1, r5
    a08c:	4620      	mov	r0, r4
    a08e:	f7ff ff97 	bl	9fc0 <smp_send>
	return 0;
    a092:	2000      	movs	r0, #0
    a094:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a096:	2008      	movs	r0, #8
}
    a098:	bd38      	pop	{r3, r4, r5, pc}

0000a09a <smp_send_pairing_random>:
{
    a09a:	b538      	push	{r3, r4, r5, lr}
    a09c:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    a09e:	2210      	movs	r2, #16
    a0a0:	2104      	movs	r1, #4
    a0a2:	6800      	ldr	r0, [r0, #0]
    a0a4:	f7ff ff39 	bl	9f1a <smp_create_pdu>
	if (!rsp_buf) {
    a0a8:	b180      	cbz	r0, a0cc <smp_send_pairing_random+0x32>
    a0aa:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    a0ac:	2110      	movs	r1, #16
    a0ae:	3008      	adds	r0, #8
    a0b0:	f010 f890 	bl	1a1d4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a0b4:	2210      	movs	r2, #16
    a0b6:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a0ba:	f7f6 f901 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a0be:	2200      	movs	r2, #0
    a0c0:	4629      	mov	r1, r5
    a0c2:	4620      	mov	r0, r4
    a0c4:	f7ff ff7c 	bl	9fc0 <smp_send>
	return 0;
    a0c8:	2000      	movs	r0, #0
    a0ca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a0cc:	2008      	movs	r0, #8
}
    a0ce:	bd38      	pop	{r3, r4, r5, pc}

0000a0d0 <bt_smp_aes_cmac>:
{
    a0d0:	b570      	push	{r4, r5, r6, lr}
    a0d2:	b0c2      	sub	sp, #264	; 0x108
    a0d4:	460c      	mov	r4, r1
    a0d6:	4615      	mov	r5, r2
    a0d8:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a0da:	aa16      	add	r2, sp, #88	; 0x58
    a0dc:	4601      	mov	r1, r0
    a0de:	4668      	mov	r0, sp
    a0e0:	f7f9 fb9f 	bl	3822 <tc_cmac_setup>
    a0e4:	b180      	cbz	r0, a108 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    a0e6:	462a      	mov	r2, r5
    a0e8:	4621      	mov	r1, r4
    a0ea:	4668      	mov	r0, sp
    a0ec:	f7f9 fbc6 	bl	387c <tc_cmac_update>
    a0f0:	b168      	cbz	r0, a10e <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    a0f2:	4669      	mov	r1, sp
    a0f4:	4630      	mov	r0, r6
    a0f6:	f7f9 fc2b 	bl	3950 <tc_cmac_final>
    a0fa:	b110      	cbz	r0, a102 <bt_smp_aes_cmac+0x32>
	return 0;
    a0fc:	2000      	movs	r0, #0
}
    a0fe:	b042      	add	sp, #264	; 0x108
    a100:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a102:	f06f 0004 	mvn.w	r0, #4
    a106:	e7fa      	b.n	a0fe <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a108:	f06f 0004 	mvn.w	r0, #4
    a10c:	e7f7      	b.n	a0fe <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a10e:	f06f 0004 	mvn.w	r0, #4
    a112:	e7f4      	b.n	a0fe <bt_smp_aes_cmac+0x2e>

0000a114 <smp_sign_buf>:
{
    a114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a118:	b08b      	sub	sp, #44	; 0x2c
    a11a:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    a11c:	188f      	adds	r7, r1, r2
    a11e:	683b      	ldr	r3, [r7, #0]
    a120:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    a122:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    a124:	2300      	movs	r3, #0
    a126:	e006      	b.n	a136 <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    a128:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a12a:	1af1      	subs	r1, r6, r3
    a12c:	3901      	subs	r1, #1
    a12e:	5c6c      	ldrb	r4, [r5, r1]
    a130:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a132:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    a134:	3301      	adds	r3, #1
    a136:	ea4f 0856 	mov.w	r8, r6, lsr #1
    a13a:	4543      	cmp	r3, r8
    a13c:	d3f4      	bcc.n	a128 <smp_sign_buf+0x14>
	src += length - 1;
    a13e:	300f      	adds	r0, #15
    a140:	2410      	movs	r4, #16
    a142:	ab05      	add	r3, sp, #20
    a144:	e004      	b.n	a150 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a146:	7802      	ldrb	r2, [r0, #0]
    a148:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a14a:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a14c:	3801      	subs	r0, #1
    a14e:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a150:	2c00      	cmp	r4, #0
    a152:	d1f8      	bne.n	a146 <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    a154:	ab01      	add	r3, sp, #4
    a156:	4632      	mov	r2, r6
    a158:	4629      	mov	r1, r5
    a15a:	a805      	add	r0, sp, #20
    a15c:	f7ff ffb8 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a160:	4681      	mov	r9, r0
    a162:	bb08      	cbnz	r0, a1a8 <smp_sign_buf+0x94>
    a164:	4623      	mov	r3, r4
    a166:	e009      	b.n	a17c <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    a168:	aa01      	add	r2, sp, #4
    a16a:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a16c:	f1c3 010f 	rsb	r1, r3, #15
    a170:	f812 e001 	ldrb.w	lr, [r2, r1]
    a174:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a178:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    a17a:	3301      	adds	r3, #1
    a17c:	2b07      	cmp	r3, #7
    a17e:	d9f3      	bls.n	a168 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    a180:	2204      	movs	r2, #4
    a182:	a909      	add	r1, sp, #36	; 0x24
    a184:	a802      	add	r0, sp, #8
    a186:	f7f6 f89b 	bl	2c0 <memcpy>
    a18a:	e006      	b.n	a19a <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    a18c:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a18e:	1b33      	subs	r3, r6, r4
    a190:	3b01      	subs	r3, #1
    a192:	5ce9      	ldrb	r1, [r5, r3]
    a194:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a196:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    a198:	3401      	adds	r4, #1
    a19a:	45a0      	cmp	r8, r4
    a19c:	d8f6      	bhi.n	a18c <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    a19e:	220c      	movs	r2, #12
    a1a0:	a902      	add	r1, sp, #8
    a1a2:	4638      	mov	r0, r7
    a1a4:	f7f6 f88c 	bl	2c0 <memcpy>
}
    a1a8:	4648      	mov	r0, r9
    a1aa:	b00b      	add	sp, #44	; 0x2c
    a1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a1b0 <smp_f4>:
{
    a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1b2:	b097      	sub	sp, #92	; 0x5c
    a1b4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    a1b6:	301f      	adds	r0, #31
    a1b8:	2420      	movs	r4, #32
    a1ba:	ad01      	add	r5, sp, #4
    a1bc:	e004      	b.n	a1c8 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1be:	7807      	ldrb	r7, [r0, #0]
    a1c0:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    a1c2:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1c4:	3801      	subs	r0, #1
    a1c6:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a1c8:	2c00      	cmp	r4, #0
    a1ca:	d1f8      	bne.n	a1be <smp_f4+0xe>
	src += length - 1;
    a1cc:	311f      	adds	r1, #31
    a1ce:	2020      	movs	r0, #32
    a1d0:	ac09      	add	r4, sp, #36	; 0x24
    a1d2:	e004      	b.n	a1de <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1d4:	780d      	ldrb	r5, [r1, #0]
    a1d6:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    a1d8:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1da:	3901      	subs	r1, #1
    a1dc:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    a1de:	2800      	cmp	r0, #0
    a1e0:	d1f8      	bne.n	a1d4 <smp_f4+0x24>
	m[64] = z;
    a1e2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    a1e6:	320f      	adds	r2, #15
    a1e8:	2410      	movs	r4, #16
    a1ea:	ab12      	add	r3, sp, #72	; 0x48
    a1ec:	e004      	b.n	a1f8 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1ee:	7811      	ldrb	r1, [r2, #0]
    a1f0:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    a1f2:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1f4:	3a01      	subs	r2, #1
    a1f6:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a1f8:	2c00      	cmp	r4, #0
    a1fa:	d1f8      	bne.n	a1ee <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    a1fc:	4633      	mov	r3, r6
    a1fe:	2241      	movs	r2, #65	; 0x41
    a200:	a901      	add	r1, sp, #4
    a202:	a812      	add	r0, sp, #72	; 0x48
    a204:	f7ff ff64 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a208:	4605      	mov	r5, r0
    a20a:	b138      	cbz	r0, a21c <smp_f4+0x6c>
    a20c:	e008      	b.n	a220 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    a20e:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a210:	f1c4 030f 	rsb	r3, r4, #15
    a214:	5cf1      	ldrb	r1, [r6, r3]
    a216:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a218:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    a21a:	3401      	adds	r4, #1
    a21c:	2c07      	cmp	r4, #7
    a21e:	d9f6      	bls.n	a20e <smp_f4+0x5e>
}
    a220:	4628      	mov	r0, r5
    a222:	b017      	add	sp, #92	; 0x5c
    a224:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a228 <sc_smp_check_confirm>:
	switch (smp->method) {
    a228:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a22c:	2b03      	cmp	r3, #3
    a22e:	d827      	bhi.n	a280 <sc_smp_check_confirm+0x58>
    a230:	e8df f003 	tbb	[pc, r3]
    a234:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a238:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    a23c:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    a240:	40d3      	lsrs	r3, r2
    a242:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    a246:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a24a:	b2db      	uxtb	r3, r3
		break;
    a24c:	e000      	b.n	a250 <sc_smp_check_confirm+0x28>
		r = 0;
    a24e:	2300      	movs	r3, #0
{
    a250:	b510      	push	{r4, lr}
    a252:	b086      	sub	sp, #24
    a254:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a256:	aa02      	add	r2, sp, #8
    a258:	9200      	str	r2, [sp, #0]
    a25a:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    a25e:	490a      	ldr	r1, [pc, #40]	; (a288 <sc_smp_check_confirm+0x60>)
    a260:	30f3      	adds	r0, #243	; 0xf3
    a262:	f7ff ffa5 	bl	a1b0 <smp_f4>
    a266:	b110      	cbz	r0, a26e <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    a268:	2008      	movs	r0, #8
}
    a26a:	b006      	add	sp, #24
    a26c:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    a26e:	2210      	movs	r2, #16
    a270:	a902      	add	r1, sp, #8
    a272:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a276:	f020 fb8d 	bl	2a994 <memcmp>
    a27a:	b118      	cbz	r0, a284 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    a27c:	2004      	movs	r0, #4
    a27e:	e7f4      	b.n	a26a <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    a280:	2008      	movs	r0, #8
    a282:	4770      	bx	lr
	return 0;
    a284:	2000      	movs	r0, #0
    a286:	e7f0      	b.n	a26a <sc_smp_check_confirm+0x42>
    a288:	20000900 	.word	0x20000900

0000a28c <smp_f5>:
{
    a28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a290:	b09b      	sub	sp, #108	; 0x6c
    a292:	4604      	mov	r4, r0
    a294:	460e      	mov	r6, r1
    a296:	4615      	mov	r5, r2
    a298:	461f      	mov	r7, r3
    a29a:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    a29e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    a2a2:	2235      	movs	r2, #53	; 0x35
    a2a4:	2100      	movs	r1, #0
    a2a6:	a80c      	add	r0, sp, #48	; 0x30
    a2a8:	f020 fc08 	bl	2aabc <memset>
    a2ac:	2362      	movs	r3, #98	; 0x62
    a2ae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a2b2:	2374      	movs	r3, #116	; 0x74
    a2b4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    a2b8:	236c      	movs	r3, #108	; 0x6c
    a2ba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    a2be:	2365      	movs	r3, #101	; 0x65
    a2c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    a2c4:	2301      	movs	r3, #1
    a2c6:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    a2ca:	f104 001f 	add.w	r0, r4, #31
    a2ce:	2320      	movs	r3, #32
    a2d0:	466a      	mov	r2, sp
    a2d2:	e004      	b.n	a2de <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2d4:	7801      	ldrb	r1, [r0, #0]
    a2d6:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a2d8:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2da:	3801      	subs	r0, #1
    a2dc:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d1f8      	bne.n	a2d4 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a2e2:	ab08      	add	r3, sp, #32
    a2e4:	2220      	movs	r2, #32
    a2e6:	4669      	mov	r1, sp
    a2e8:	4838      	ldr	r0, [pc, #224]	; (a3cc <smp_f5+0x140>)
    a2ea:	f7ff fef1 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a2ee:	4686      	mov	lr, r0
    a2f0:	2800      	cmp	r0, #0
    a2f2:	d166      	bne.n	a3c2 <smp_f5+0x136>
	src += length - 1;
    a2f4:	360f      	adds	r6, #15
    a2f6:	2310      	movs	r3, #16
    a2f8:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    a2fc:	e004      	b.n	a308 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2fe:	7831      	ldrb	r1, [r6, #0]
    a300:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a302:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a304:	3e01      	subs	r6, #1
    a306:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a308:	2b00      	cmp	r3, #0
    a30a:	d1f8      	bne.n	a2fe <smp_f5+0x72>
	src += length - 1;
    a30c:	350f      	adds	r5, #15
    a30e:	2310      	movs	r3, #16
    a310:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    a314:	e004      	b.n	a320 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a316:	7829      	ldrb	r1, [r5, #0]
    a318:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a31a:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a31c:	3d01      	subs	r5, #1
    a31e:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a320:	2b00      	cmp	r3, #0
    a322:	d1f8      	bne.n	a316 <smp_f5+0x8a>
	m[37] = a1->type;
    a324:	f817 3b06 	ldrb.w	r3, [r7], #6
    a328:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    a32c:	2306      	movs	r3, #6
    a32e:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    a332:	e004      	b.n	a33e <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a334:	7839      	ldrb	r1, [r7, #0]
    a336:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a338:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a33a:	3f01      	subs	r7, #1
    a33c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a33e:	2b00      	cmp	r3, #0
    a340:	d1f8      	bne.n	a334 <smp_f5+0xa8>
	m[44] = a2->type;
    a342:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a344:	f813 2b06 	ldrb.w	r2, [r3], #6
    a348:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    a34c:	2406      	movs	r4, #6
    a34e:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    a352:	e004      	b.n	a35e <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a354:	7819      	ldrb	r1, [r3, #0]
    a356:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a358:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a35a:	3b01      	subs	r3, #1
    a35c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a35e:	2c00      	cmp	r4, #0
    a360:	d1f8      	bne.n	a354 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a362:	4643      	mov	r3, r8
    a364:	2235      	movs	r2, #53	; 0x35
    a366:	a90c      	add	r1, sp, #48	; 0x30
    a368:	a808      	add	r0, sp, #32
    a36a:	f7ff feb1 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a36e:	4686      	mov	lr, r0
    a370:	bb38      	cbnz	r0, a3c2 <smp_f5+0x136>
    a372:	4623      	mov	r3, r4
    a374:	e00a      	b.n	a38c <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    a376:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a37a:	f1c3 020f 	rsb	r2, r3, #15
    a37e:	f818 0002 	ldrb.w	r0, [r8, r2]
    a382:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a386:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    a38a:	3301      	adds	r3, #1
    a38c:	2b07      	cmp	r3, #7
    a38e:	d9f2      	bls.n	a376 <smp_f5+0xea>
	m[0] = 0x01;
    a390:	a91a      	add	r1, sp, #104	; 0x68
    a392:	2301      	movs	r3, #1
    a394:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a398:	464b      	mov	r3, r9
    a39a:	2235      	movs	r2, #53	; 0x35
    a39c:	a808      	add	r0, sp, #32
    a39e:	f7ff fe97 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a3a2:	4686      	mov	lr, r0
    a3a4:	b158      	cbz	r0, a3be <smp_f5+0x132>
    a3a6:	e00c      	b.n	a3c2 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    a3a8:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a3ac:	f1c4 030f 	rsb	r3, r4, #15
    a3b0:	f819 1003 	ldrb.w	r1, [r9, r3]
    a3b4:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a3b8:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    a3bc:	3401      	adds	r4, #1
    a3be:	2c07      	cmp	r4, #7
    a3c0:	d9f2      	bls.n	a3a8 <smp_f5+0x11c>
}
    a3c2:	4670      	mov	r0, lr
    a3c4:	b01b      	add	sp, #108	; 0x6c
    a3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a3ca:	bf00      	nop
    a3cc:	0002f6bc 	.word	0x0002f6bc

0000a3d0 <smp_f6>:
{
    a3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3d2:	b097      	sub	sp, #92	; 0x5c
    a3d4:	4604      	mov	r4, r0
    a3d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    a3d8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a3da:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    a3dc:	310f      	adds	r1, #15
    a3de:	2010      	movs	r0, #16
    a3e0:	f10d 0e04 	add.w	lr, sp, #4
    a3e4:	e007      	b.n	a3f6 <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3e6:	f891 c000 	ldrb.w	ip, [r1]
    a3ea:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    a3ee:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3f0:	3901      	subs	r1, #1
    a3f2:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    a3f6:	2800      	cmp	r0, #0
    a3f8:	d1f5      	bne.n	a3e6 <smp_f6+0x16>
	src += length - 1;
    a3fa:	320f      	adds	r2, #15
    a3fc:	2110      	movs	r1, #16
    a3fe:	a805      	add	r0, sp, #20
    a400:	e006      	b.n	a410 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a402:	f892 e000 	ldrb.w	lr, [r2]
    a406:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    a40a:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a40c:	3a01      	subs	r2, #1
    a40e:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a410:	2900      	cmp	r1, #0
    a412:	d1f6      	bne.n	a402 <smp_f6+0x32>
	src += length - 1;
    a414:	330f      	adds	r3, #15
    a416:	2210      	movs	r2, #16
    a418:	a909      	add	r1, sp, #36	; 0x24
    a41a:	e004      	b.n	a426 <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a41c:	7818      	ldrb	r0, [r3, #0]
    a41e:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a420:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a422:	3b01      	subs	r3, #1
    a424:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a426:	2a00      	cmp	r2, #0
    a428:	d1f8      	bne.n	a41c <smp_f6+0x4c>
	src += length - 1;
    a42a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a42c:	3302      	adds	r3, #2
    a42e:	2203      	movs	r2, #3
    a430:	a90d      	add	r1, sp, #52	; 0x34
    a432:	e004      	b.n	a43e <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a434:	7818      	ldrb	r0, [r3, #0]
    a436:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a438:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a43a:	3b01      	subs	r3, #1
    a43c:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a43e:	2a00      	cmp	r2, #0
    a440:	d1f8      	bne.n	a434 <smp_f6+0x64>
	m[51] = a1->type;
    a442:	4631      	mov	r1, r6
    a444:	f811 3b01 	ldrb.w	r3, [r1], #1
    a448:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    a44c:	2206      	movs	r2, #6
    a44e:	a80e      	add	r0, sp, #56	; 0x38
    a450:	f7f5 ff36 	bl	2c0 <memcpy>
	src += length - 1;
    a454:	3606      	adds	r6, #6
    a456:	2306      	movs	r3, #6
    a458:	aa0e      	add	r2, sp, #56	; 0x38
    a45a:	e004      	b.n	a466 <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a45c:	7831      	ldrb	r1, [r6, #0]
    a45e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a460:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a462:	3e01      	subs	r6, #1
    a464:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a466:	2b00      	cmp	r3, #0
    a468:	d1f8      	bne.n	a45c <smp_f6+0x8c>
	m[58] = a2->type;
    a46a:	4629      	mov	r1, r5
    a46c:	f811 3b01 	ldrb.w	r3, [r1], #1
    a470:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    a474:	2206      	movs	r2, #6
    a476:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    a47a:	f7f5 ff21 	bl	2c0 <memcpy>
	src += length - 1;
    a47e:	3506      	adds	r5, #6
    a480:	2306      	movs	r3, #6
    a482:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    a486:	e004      	b.n	a492 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a488:	7829      	ldrb	r1, [r5, #0]
    a48a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a48c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a48e:	3d01      	subs	r5, #1
    a490:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a492:	2b00      	cmp	r3, #0
    a494:	d1f8      	bne.n	a488 <smp_f6+0xb8>
	src += length - 1;
    a496:	f104 000f 	add.w	r0, r4, #15
    a49a:	2410      	movs	r4, #16
    a49c:	ab12      	add	r3, sp, #72	; 0x48
    a49e:	e004      	b.n	a4aa <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a4a0:	7802      	ldrb	r2, [r0, #0]
    a4a2:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a4a4:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a4a6:	3801      	subs	r0, #1
    a4a8:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a4aa:	2c00      	cmp	r4, #0
    a4ac:	d1f8      	bne.n	a4a0 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    a4ae:	463b      	mov	r3, r7
    a4b0:	2241      	movs	r2, #65	; 0x41
    a4b2:	a901      	add	r1, sp, #4
    a4b4:	a812      	add	r0, sp, #72	; 0x48
    a4b6:	f7ff fe0b 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a4ba:	4605      	mov	r5, r0
    a4bc:	b138      	cbz	r0, a4ce <smp_f6+0xfe>
    a4be:	e008      	b.n	a4d2 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    a4c0:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a4c2:	f1c4 030f 	rsb	r3, r4, #15
    a4c6:	5cf9      	ldrb	r1, [r7, r3]
    a4c8:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a4ca:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    a4cc:	3401      	adds	r4, #1
    a4ce:	2c07      	cmp	r4, #7
    a4d0:	d9f6      	bls.n	a4c0 <smp_f6+0xf0>
}
    a4d2:	4628      	mov	r0, r5
    a4d4:	b017      	add	sp, #92	; 0x5c
    a4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a4d8 <compute_and_send_master_dhcheck>:
{
    a4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4da:	b08d      	sub	sp, #52	; 0x34
    a4dc:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a4de:	2210      	movs	r2, #16
    a4e0:	2100      	movs	r1, #0
    a4e2:	eb0d 0002 	add.w	r0, sp, r2
    a4e6:	f020 fae9 	bl	2aabc <memset>
	switch (smp->method) {
    a4ea:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a4ee:	2b03      	cmp	r3, #3
    a4f0:	d84a      	bhi.n	a588 <compute_and_send_master_dhcheck+0xb0>
    a4f2:	e8df f003 	tbb	[pc, r3]
    a4f6:	0208      	.short	0x0208
    a4f8:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a4fa:	2204      	movs	r2, #4
    a4fc:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a500:	a804      	add	r0, sp, #16
    a502:	f7f5 fedd 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a506:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    a50a:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    a50e:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a510:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a514:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a518:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a51c:	9102      	str	r1, [sp, #8]
    a51e:	9501      	str	r5, [sp, #4]
    a520:	9200      	str	r2, [sp, #0]
    a522:	334f      	adds	r3, #79	; 0x4f
    a524:	463a      	mov	r2, r7
    a526:	4631      	mov	r1, r6
    a528:	f204 1033 	addw	r0, r4, #307	; 0x133
    a52c:	f7ff feae 	bl	a28c <smp_f5>
    a530:	b110      	cbz	r0, a538 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a532:	2008      	movs	r0, #8
}
    a534:	b00d      	add	sp, #52	; 0x34
    a536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a538:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a53c:	6823      	ldr	r3, [r4, #0]
    a53e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    a542:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a544:	a808      	add	r0, sp, #32
    a546:	9003      	str	r0, [sp, #12]
    a548:	9302      	str	r3, [sp, #8]
    a54a:	9101      	str	r1, [sp, #4]
    a54c:	9200      	str	r2, [sp, #0]
    a54e:	ab04      	add	r3, sp, #16
    a550:	463a      	mov	r2, r7
    a552:	4631      	mov	r1, r6
    a554:	4628      	mov	r0, r5
    a556:	f7ff ff3b 	bl	a3d0 <smp_f6>
    a55a:	b108      	cbz	r0, a560 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a55c:	2008      	movs	r0, #8
    a55e:	e7e9      	b.n	a534 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a560:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a564:	f3bf 8f5b 	dmb	ish
    a568:	e853 2f00 	ldrex	r2, [r3]
    a56c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a570:	e843 2100 	strex	r1, r2, [r3]
    a574:	2900      	cmp	r1, #0
    a576:	d1f7      	bne.n	a568 <compute_and_send_master_dhcheck+0x90>
    a578:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    a57c:	a908      	add	r1, sp, #32
    a57e:	4620      	mov	r0, r4
    a580:	f7ff fd30 	bl	9fe4 <sc_smp_send_dhkey_check>
	return 0;
    a584:	2000      	movs	r0, #0
    a586:	e7d5      	b.n	a534 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a588:	2008      	movs	r0, #8
    a58a:	e7d3      	b.n	a534 <compute_and_send_master_dhcheck+0x5c>

0000a58c <compute_and_check_and_send_slave_dhcheck>:
{
    a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a58e:	b091      	sub	sp, #68	; 0x44
    a590:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a592:	2210      	movs	r2, #16
    a594:	2100      	movs	r1, #0
    a596:	eb0d 0002 	add.w	r0, sp, r2
    a59a:	f020 fa8f 	bl	2aabc <memset>
	switch (smp->method) {
    a59e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a5a2:	2b03      	cmp	r3, #3
    a5a4:	d866      	bhi.n	a674 <compute_and_check_and_send_slave_dhcheck+0xe8>
    a5a6:	e8df f003 	tbb	[pc, r3]
    a5aa:	0208      	.short	0x0208
    a5ac:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a5ae:	2204      	movs	r2, #4
    a5b0:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a5b4:	a804      	add	r0, sp, #16
    a5b6:	f7f5 fe83 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a5ba:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    a5be:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    a5c2:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a5c4:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a5c8:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a5cc:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a5d0:	9102      	str	r1, [sp, #8]
    a5d2:	9501      	str	r5, [sp, #4]
    a5d4:	9200      	str	r2, [sp, #0]
    a5d6:	334f      	adds	r3, #79	; 0x4f
    a5d8:	463a      	mov	r2, r7
    a5da:	4631      	mov	r1, r6
    a5dc:	f204 1033 	addw	r0, r4, #307	; 0x133
    a5e0:	f7ff fe54 	bl	a28c <smp_f5>
    a5e4:	b110      	cbz	r0, a5ec <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a5e6:	2008      	movs	r0, #8
}
    a5e8:	b011      	add	sp, #68	; 0x44
    a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a5ec:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    a5f0:	6823      	ldr	r3, [r4, #0]
    a5f2:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a5f6:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a5f8:	a808      	add	r0, sp, #32
    a5fa:	9003      	str	r0, [sp, #12]
    a5fc:	9302      	str	r3, [sp, #8]
    a5fe:	9101      	str	r1, [sp, #4]
    a600:	9200      	str	r2, [sp, #0]
    a602:	ab04      	add	r3, sp, #16
    a604:	4632      	mov	r2, r6
    a606:	4639      	mov	r1, r7
    a608:	4628      	mov	r0, r5
    a60a:	f7ff fee1 	bl	a3d0 <smp_f6>
    a60e:	b108      	cbz	r0, a614 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a610:	2008      	movs	r0, #8
    a612:	e7e9      	b.n	a5e8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a614:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a618:	6823      	ldr	r3, [r4, #0]
    a61a:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a61e:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a620:	a80c      	add	r0, sp, #48	; 0x30
    a622:	9003      	str	r0, [sp, #12]
    a624:	9302      	str	r3, [sp, #8]
    a626:	9101      	str	r1, [sp, #4]
    a628:	9200      	str	r2, [sp, #0]
    a62a:	ab04      	add	r3, sp, #16
    a62c:	463a      	mov	r2, r7
    a62e:	4631      	mov	r1, r6
    a630:	4628      	mov	r0, r5
    a632:	f7ff fecd 	bl	a3d0 <smp_f6>
    a636:	b108      	cbz	r0, a63c <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    a638:	2008      	movs	r0, #8
    a63a:	e7d5      	b.n	a5e8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    a63c:	2210      	movs	r2, #16
    a63e:	a90c      	add	r1, sp, #48	; 0x30
    a640:	f204 1053 	addw	r0, r4, #339	; 0x153
    a644:	f020 f9a6 	bl	2a994 <memcmp>
    a648:	b108      	cbz	r0, a64e <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a64a:	200b      	movs	r0, #11
    a64c:	e7cc      	b.n	a5e8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    a64e:	a908      	add	r1, sp, #32
    a650:	4620      	mov	r0, r4
    a652:	f7ff fcc7 	bl	9fe4 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a656:	34a0      	adds	r4, #160	; 0xa0
    a658:	f3bf 8f5b 	dmb	ish
    a65c:	e854 3f00 	ldrex	r3, [r4]
    a660:	f043 0302 	orr.w	r3, r3, #2
    a664:	e844 3200 	strex	r2, r3, [r4]
    a668:	2a00      	cmp	r2, #0
    a66a:	d1f7      	bne.n	a65c <compute_and_check_and_send_slave_dhcheck+0xd0>
    a66c:	f3bf 8f5b 	dmb	ish
	return 0;
    a670:	2000      	movs	r0, #0
    a672:	e7b9      	b.n	a5e8 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a674:	2008      	movs	r0, #8
    a676:	e7b7      	b.n	a5e8 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000a678 <smp_g2>:
{
    a678:	b5f0      	push	{r4, r5, r6, r7, lr}
    a67a:	b099      	sub	sp, #100	; 0x64
    a67c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    a67e:	301f      	adds	r0, #31
    a680:	2520      	movs	r5, #32
    a682:	ae04      	add	r6, sp, #16
    a684:	e004      	b.n	a690 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a686:	7807      	ldrb	r7, [r0, #0]
    a688:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    a68a:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a68c:	3801      	subs	r0, #1
    a68e:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    a690:	2d00      	cmp	r5, #0
    a692:	d1f8      	bne.n	a686 <smp_g2+0xe>
	src += length - 1;
    a694:	311f      	adds	r1, #31
    a696:	2020      	movs	r0, #32
    a698:	ad0c      	add	r5, sp, #48	; 0x30
    a69a:	e004      	b.n	a6a6 <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a69c:	780e      	ldrb	r6, [r1, #0]
    a69e:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    a6a0:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6a2:	3901      	subs	r1, #1
    a6a4:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d1f8      	bne.n	a69c <smp_g2+0x24>
	src += length - 1;
    a6aa:	330f      	adds	r3, #15
    a6ac:	2110      	movs	r1, #16
    a6ae:	a814      	add	r0, sp, #80	; 0x50
    a6b0:	e004      	b.n	a6bc <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6b2:	781d      	ldrb	r5, [r3, #0]
    a6b4:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    a6b6:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6b8:	3b01      	subs	r3, #1
    a6ba:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a6bc:	2900      	cmp	r1, #0
    a6be:	d1f8      	bne.n	a6b2 <smp_g2+0x3a>
	src += length - 1;
    a6c0:	320f      	adds	r2, #15
    a6c2:	2310      	movs	r3, #16
    a6c4:	4669      	mov	r1, sp
    a6c6:	e004      	b.n	a6d2 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6c8:	7810      	ldrb	r0, [r2, #0]
    a6ca:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a6cc:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6ce:	3a01      	subs	r2, #1
    a6d0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	d1f8      	bne.n	a6c8 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    a6d6:	466b      	mov	r3, sp
    a6d8:	2250      	movs	r2, #80	; 0x50
    a6da:	a904      	add	r1, sp, #16
    a6dc:	4668      	mov	r0, sp
    a6de:	f7ff fcf7 	bl	a0d0 <bt_smp_aes_cmac>
	if (err) {
    a6e2:	4605      	mov	r5, r0
    a6e4:	b110      	cbz	r0, a6ec <smp_g2+0x74>
}
    a6e6:	4628      	mov	r0, r5
    a6e8:	b019      	add	sp, #100	; 0x64
    a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    a6ec:	2204      	movs	r2, #4
    a6ee:	a903      	add	r1, sp, #12
    a6f0:	4620      	mov	r0, r4
    a6f2:	f7f5 fde5 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a6f6:	6822      	ldr	r2, [r4, #0]
    a6f8:	0a13      	lsrs	r3, r2, #8
    a6fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a6fe:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a702:	0211      	lsls	r1, r2, #8
    a704:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    a708:	430b      	orrs	r3, r1
    a70a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    a70e:	4a04      	ldr	r2, [pc, #16]	; (a720 <smp_g2+0xa8>)
    a710:	fba2 1203 	umull	r1, r2, r2, r3
    a714:	0c92      	lsrs	r2, r2, #18
    a716:	4903      	ldr	r1, [pc, #12]	; (a724 <smp_g2+0xac>)
    a718:	fb01 3212 	mls	r2, r1, r2, r3
    a71c:	6022      	str	r2, [r4, #0]
	return 0;
    a71e:	e7e2      	b.n	a6e6 <smp_g2+0x6e>
    a720:	431bde83 	.word	0x431bde83
    a724:	000f4240 	.word	0x000f4240

0000a728 <smp_send_pairing_confirm>:
{
    a728:	b570      	push	{r4, r5, r6, lr}
    a72a:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    a72c:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    a72e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a732:	2b03      	cmp	r3, #3
    a734:	d83f      	bhi.n	a7b6 <smp_send_pairing_confirm+0x8e>
    a736:	e8df f003 	tbb	[pc, r3]
    a73a:	020d      	.short	0x020d
    a73c:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a73e:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a742:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a746:	40dd      	lsrs	r5, r3
    a748:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a74c:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a750:	b2ed      	uxtb	r5, r5
		break;
    a752:	e000      	b.n	a756 <smp_send_pairing_confirm+0x2e>
		r = 0;
    a754:	2500      	movs	r5, #0
    a756:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a758:	2210      	movs	r2, #16
    a75a:	2103      	movs	r1, #3
    a75c:	4630      	mov	r0, r6
    a75e:	f7ff fbdc 	bl	9f1a <smp_create_pdu>
	if (!buf) {
    a762:	4606      	mov	r6, r0
    a764:	b348      	cbz	r0, a7ba <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    a766:	2110      	movs	r1, #16
    a768:	3008      	adds	r0, #8
    a76a:	f00f fd33 	bl	1a1d4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a76e:	9000      	str	r0, [sp, #0]
    a770:	462b      	mov	r3, r5
    a772:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a776:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a77a:	4811      	ldr	r0, [pc, #68]	; (a7c0 <smp_send_pairing_confirm+0x98>)
    a77c:	f7ff fd18 	bl	a1b0 <smp_f4>
    a780:	b120      	cbz	r0, a78c <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    a782:	4630      	mov	r0, r6
    a784:	f00f fcda 	bl	1a13c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a788:	2008      	movs	r0, #8
    a78a:	e017      	b.n	a7bc <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    a78c:	2200      	movs	r2, #0
    a78e:	4631      	mov	r1, r6
    a790:	4620      	mov	r0, r4
    a792:	f7ff fc15 	bl	9fc0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a796:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a79a:	f3bf 8f5b 	dmb	ish
    a79e:	e850 3f00 	ldrex	r3, [r0]
    a7a2:	f023 0301 	bic.w	r3, r3, #1
    a7a6:	e840 3200 	strex	r2, r3, [r0]
    a7aa:	2a00      	cmp	r2, #0
    a7ac:	d1f7      	bne.n	a79e <smp_send_pairing_confirm+0x76>
    a7ae:	f3bf 8f5b 	dmb	ish
	return 0;
    a7b2:	2000      	movs	r0, #0
    a7b4:	e002      	b.n	a7bc <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a7b6:	2008      	movs	r0, #8
    a7b8:	e000      	b.n	a7bc <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a7ba:	2008      	movs	r0, #8
}
    a7bc:	b002      	add	sp, #8
    a7be:	bd70      	pop	{r4, r5, r6, pc}
    a7c0:	20000900 	.word	0x20000900

0000a7c4 <smp_c1>:
{
    a7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7c8:	b088      	sub	sp, #32
    a7ca:	4604      	mov	r4, r0
    a7cc:	460f      	mov	r7, r1
    a7ce:	4611      	mov	r1, r2
    a7d0:	4698      	mov	r8, r3
    a7d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a7d4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    a7d6:	782b      	ldrb	r3, [r5, #0]
    a7d8:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    a7dc:	7833      	ldrb	r3, [r6, #0]
    a7de:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    a7e2:	2207      	movs	r2, #7
    a7e4:	f10d 0012 	add.w	r0, sp, #18
    a7e8:	f7f5 fd6a 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    a7ec:	2207      	movs	r2, #7
    a7ee:	4641      	mov	r1, r8
    a7f0:	f10d 0019 	add.w	r0, sp, #25
    a7f4:	f7f5 fd64 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    a7f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a7fa:	a904      	add	r1, sp, #16
    a7fc:	4638      	mov	r0, r7
    a7fe:	f7ff faf3 	bl	9de8 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a802:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a804:	4611      	mov	r1, r2
    a806:	4620      	mov	r0, r4
    a808:	f006 f98a 	bl	10b20 <bt_encrypt_le>
	if (err) {
    a80c:	4603      	mov	r3, r0
    a80e:	b118      	cbz	r0, a818 <smp_c1+0x54>
}
    a810:	4618      	mov	r0, r3
    a812:	b008      	add	sp, #32
    a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    a818:	2206      	movs	r2, #6
    a81a:	1c71      	adds	r1, r6, #1
    a81c:	4668      	mov	r0, sp
    a81e:	f7f5 fd4f 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a822:	2206      	movs	r2, #6
    a824:	1c69      	adds	r1, r5, #1
    a826:	eb0d 0002 	add.w	r0, sp, r2
    a82a:	f7f5 fd49 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    a82e:	2204      	movs	r2, #4
    a830:	2100      	movs	r1, #0
    a832:	a803      	add	r0, sp, #12
    a834:	f020 f942 	bl	2aabc <memset>
	xor_128(enc_data, p2, enc_data);
    a838:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a83a:	4669      	mov	r1, sp
    a83c:	4610      	mov	r0, r2
    a83e:	f7ff fad3 	bl	9de8 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    a842:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a844:	4611      	mov	r1, r2
    a846:	4620      	mov	r0, r4
    a848:	f006 f96a 	bl	10b20 <bt_encrypt_le>
    a84c:	4603      	mov	r3, r0
    a84e:	e7df      	b.n	a810 <smp_c1+0x4c>

0000a850 <legacy_send_pairing_confirm>:
{
    a850:	b570      	push	{r4, r5, r6, lr}
    a852:	b084      	sub	sp, #16
    a854:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a856:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a858:	2210      	movs	r2, #16
    a85a:	2103      	movs	r1, #3
    a85c:	4628      	mov	r0, r5
    a85e:	f7ff fb5c 	bl	9f1a <smp_create_pdu>
	if (!buf) {
    a862:	b370      	cbz	r0, a8c2 <legacy_send_pairing_confirm+0x72>
    a864:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    a866:	2110      	movs	r1, #16
    a868:	3008      	adds	r0, #8
    a86a:	f00f fcb3 	bl	1a1d4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    a86e:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    a872:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    a874:	9002      	str	r0, [sp, #8]
    a876:	9501      	str	r5, [sp, #4]
    a878:	9300      	str	r3, [sp, #0]
    a87a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a87e:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a882:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a886:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    a88a:	f7ff ff9b 	bl	a7c4 <smp_c1>
    a88e:	b120      	cbz	r0, a89a <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    a890:	4630      	mov	r0, r6
    a892:	f00f fc53 	bl	1a13c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a896:	2008      	movs	r0, #8
    a898:	e014      	b.n	a8c4 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    a89a:	2200      	movs	r2, #0
    a89c:	4631      	mov	r1, r6
    a89e:	4620      	mov	r0, r4
    a8a0:	f7ff fb8e 	bl	9fc0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a8a4:	34a0      	adds	r4, #160	; 0xa0
    a8a6:	f3bf 8f5b 	dmb	ish
    a8aa:	e854 3f00 	ldrex	r3, [r4]
    a8ae:	f023 0301 	bic.w	r3, r3, #1
    a8b2:	e844 3200 	strex	r2, r3, [r4]
    a8b6:	2a00      	cmp	r2, #0
    a8b8:	d1f7      	bne.n	a8aa <legacy_send_pairing_confirm+0x5a>
    a8ba:	f3bf 8f5b 	dmb	ish
	return 0;
    a8be:	2000      	movs	r0, #0
    a8c0:	e000      	b.n	a8c4 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    a8c2:	2008      	movs	r0, #8
}
    a8c4:	b004      	add	sp, #16
    a8c6:	bd70      	pop	{r4, r5, r6, pc}

0000a8c8 <legacy_pairing_confirm>:
{
    a8c8:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a8ca:	6803      	ldr	r3, [r0, #0]
    a8cc:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a8ce:	b1c3      	cbz	r3, a902 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a8d0:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a8d4:	f3bf 8f5b 	dmb	ish
    a8d8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a8dc:	f3bf 8f5b 	dmb	ish
    a8e0:	f412 7f00 	tst.w	r2, #512	; 0x200
    a8e4:	d01e      	beq.n	a924 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a8e6:	f3bf 8f5b 	dmb	ish
    a8ea:	e853 2f00 	ldrex	r2, [r3]
    a8ee:	f042 0201 	orr.w	r2, r2, #1
    a8f2:	e843 2100 	strex	r1, r2, [r3]
    a8f6:	2900      	cmp	r1, #0
    a8f8:	d1f7      	bne.n	a8ea <legacy_pairing_confirm+0x22>
    a8fa:	f3bf 8f5b 	dmb	ish
	return 0;
    a8fe:	2000      	movs	r0, #0
}
    a900:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a902:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a906:	f3bf 8f5b 	dmb	ish
    a90a:	e853 2f00 	ldrex	r2, [r3]
    a90e:	f042 0208 	orr.w	r2, r2, #8
    a912:	e843 2100 	strex	r1, r2, [r3]
    a916:	2900      	cmp	r1, #0
    a918:	d1f7      	bne.n	a90a <legacy_pairing_confirm+0x42>
    a91a:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    a91e:	f7ff ff97 	bl	a850 <legacy_send_pairing_confirm>
    a922:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    a924:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a928:	f3bf 8f5b 	dmb	ish
    a92c:	e853 2f00 	ldrex	r2, [r3]
    a930:	f042 0210 	orr.w	r2, r2, #16
    a934:	e843 2100 	strex	r1, r2, [r3]
    a938:	2900      	cmp	r1, #0
    a93a:	d1f7      	bne.n	a92c <legacy_pairing_confirm+0x64>
    a93c:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    a940:	f7ff ff86 	bl	a850 <legacy_send_pairing_confirm>
    a944:	bd08      	pop	{r3, pc}

0000a946 <smp_pairing_confirm>:
{
    a946:	b510      	push	{r4, lr}
    a948:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    a94a:	2210      	movs	r2, #16
    a94c:	6889      	ldr	r1, [r1, #8]
    a94e:	30b3      	adds	r0, #179	; 0xb3
    a950:	f7f5 fcb6 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a954:	6823      	ldr	r3, [r4, #0]
    a956:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a958:	b313      	cbz	r3, a9a0 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a95a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a95e:	f3bf 8f5b 	dmb	ish
    a962:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a966:	f3bf 8f5b 	dmb	ish
    a96a:	f013 0f20 	tst.w	r3, #32
    a96e:	d029      	beq.n	a9c4 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    a970:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a974:	2b01      	cmp	r3, #1
    a976:	d029      	beq.n	a9cc <smp_pairing_confirm+0x86>
    a978:	2b02      	cmp	r3, #2
    a97a:	d150      	bne.n	aa1e <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a97c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a980:	f3bf 8f5b 	dmb	ish
    a984:	e853 2f00 	ldrex	r2, [r3]
    a988:	f042 0210 	orr.w	r2, r2, #16
    a98c:	e843 2100 	strex	r1, r2, [r3]
    a990:	2900      	cmp	r1, #0
    a992:	d1f7      	bne.n	a984 <smp_pairing_confirm+0x3e>
    a994:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a998:	4620      	mov	r0, r4
    a99a:	f7ff fec5 	bl	a728 <smp_send_pairing_confirm>
    a99e:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a9a0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a9a4:	f3bf 8f5b 	dmb	ish
    a9a8:	e853 2f00 	ldrex	r2, [r3]
    a9ac:	f042 0210 	orr.w	r2, r2, #16
    a9b0:	e843 2100 	strex	r1, r2, [r3]
    a9b4:	2900      	cmp	r1, #0
    a9b6:	d1f7      	bne.n	a9a8 <smp_pairing_confirm+0x62>
    a9b8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    a9bc:	4620      	mov	r0, r4
    a9be:	f7ff fb6c 	bl	a09a <smp_send_pairing_random>
    a9c2:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    a9c4:	4620      	mov	r0, r4
    a9c6:	f7ff ff7f 	bl	a8c8 <legacy_pairing_confirm>
    a9ca:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a9cc:	f3bf 8f5b 	dmb	ish
    a9d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a9d4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a9d8:	f413 7f00 	tst.w	r3, #512	; 0x200
    a9dc:	d111      	bne.n	aa02 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a9de:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a9e2:	f3bf 8f5b 	dmb	ish
    a9e6:	e853 2f00 	ldrex	r2, [r3]
    a9ea:	f042 0210 	orr.w	r2, r2, #16
    a9ee:	e843 2100 	strex	r1, r2, [r3]
    a9f2:	2900      	cmp	r1, #0
    a9f4:	d1f7      	bne.n	a9e6 <smp_pairing_confirm+0xa0>
    a9f6:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a9fa:	4620      	mov	r0, r4
    a9fc:	f7ff fe94 	bl	a728 <smp_send_pairing_confirm>
    aa00:	bd10      	pop	{r4, pc}
    aa02:	f3bf 8f5b 	dmb	ish
    aa06:	e852 3f00 	ldrex	r3, [r2]
    aa0a:	f043 0301 	orr.w	r3, r3, #1
    aa0e:	e842 3100 	strex	r1, r3, [r2]
    aa12:	2900      	cmp	r1, #0
    aa14:	d1f7      	bne.n	aa06 <smp_pairing_confirm+0xc0>
    aa16:	f3bf 8f5b 	dmb	ish
			return 0;
    aa1a:	2000      	movs	r0, #0
    aa1c:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aa1e:	2008      	movs	r0, #8
}
    aa20:	bd10      	pop	{r4, pc}

0000aa22 <smp_s1>:
{
    aa22:	b570      	push	{r4, r5, r6, lr}
    aa24:	4605      	mov	r5, r0
    aa26:	460e      	mov	r6, r1
    aa28:	4611      	mov	r1, r2
    aa2a:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    aa2c:	2208      	movs	r2, #8
    aa2e:	4618      	mov	r0, r3
    aa30:	f7f5 fc46 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    aa34:	2208      	movs	r2, #8
    aa36:	4631      	mov	r1, r6
    aa38:	18a0      	adds	r0, r4, r2
    aa3a:	f7f5 fc41 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    aa3e:	4622      	mov	r2, r4
    aa40:	4621      	mov	r1, r4
    aa42:	4628      	mov	r0, r5
    aa44:	f006 f86c 	bl	10b20 <bt_encrypt_le>
}
    aa48:	bd70      	pop	{r4, r5, r6, pc}

0000aa4a <smp_reset>:
{
    aa4a:	b538      	push	{r3, r4, r5, lr}
    aa4c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    aa4e:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    aa50:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    aa54:	f01e fcac 	bl	293b0 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    aa58:	2200      	movs	r2, #0
    aa5a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    aa5e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aa62:	f3bf 8f5b 	dmb	ish
    aa66:	e853 1f00 	ldrex	r1, [r3]
    aa6a:	e843 2000 	strex	r0, r2, [r3]
    aa6e:	2800      	cmp	r0, #0
    aa70:	d1f9      	bne.n	aa66 <smp_reset+0x1c>
    aa72:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    aa76:	34a0      	adds	r4, #160	; 0xa0
    aa78:	f3bf 8f5b 	dmb	ish
    aa7c:	e854 1f00 	ldrex	r1, [r4]
    aa80:	e844 2000 	strex	r0, r2, [r4]
    aa84:	2800      	cmp	r0, #0
    aa86:	d1f9      	bne.n	aa7c <smp_reset+0x32>
    aa88:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    aa8c:	7a69      	ldrb	r1, [r5, #9]
    aa8e:	7a2a      	ldrb	r2, [r5, #8]
    aa90:	4291      	cmp	r1, r2
    aa92:	d000      	beq.n	aa96 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    aa94:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    aa96:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa98:	b162      	cbz	r2, aab4 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa9a:	f3bf 8f5b 	dmb	ish
    aa9e:	e853 2f00 	ldrex	r2, [r3]
    aaa2:	f042 0202 	orr.w	r2, r2, #2
    aaa6:	e843 2100 	strex	r1, r2, [r3]
    aaaa:	2900      	cmp	r1, #0
    aaac:	d1f7      	bne.n	aa9e <smp_reset+0x54>
    aaae:	f3bf 8f5b 	dmb	ish
    aab2:	bd38      	pop	{r3, r4, r5, pc}
    aab4:	f3bf 8f5b 	dmb	ish
    aab8:	e853 2f00 	ldrex	r2, [r3]
    aabc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    aac0:	e843 2100 	strex	r1, r2, [r3]
    aac4:	2900      	cmp	r1, #0
    aac6:	d1f7      	bne.n	aab8 <smp_reset+0x6e>
    aac8:	f3bf 8f5b 	dmb	ish
    aacc:	bd38      	pop	{r3, r4, r5, pc}

0000aace <smp_pairing_complete>:
{
    aace:	b508      	push	{r3, lr}
	smp_reset(smp);
    aad0:	f7ff ffbb 	bl	aa4a <smp_reset>
    aad4:	bd08      	pop	{r3, pc}

0000aad6 <smp_error>:
{
    aad6:	b570      	push	{r4, r5, r6, lr}
    aad8:	4604      	mov	r4, r0
    aada:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    aadc:	f7ff fff7 	bl	aace <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    aae0:	2201      	movs	r2, #1
    aae2:	2105      	movs	r1, #5
    aae4:	6820      	ldr	r0, [r4, #0]
    aae6:	f7ff fa18 	bl	9f1a <smp_create_pdu>
	if (!buf) {
    aaea:	b168      	cbz	r0, ab08 <smp_error+0x32>
    aaec:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    aaee:	2101      	movs	r1, #1
    aaf0:	3008      	adds	r0, #8
    aaf2:	f00f fb6f 	bl	1a1d4 <net_buf_simple_add>
	rsp->reason = reason;
    aaf6:	7006      	strb	r6, [r0, #0]
    aaf8:	2300      	movs	r3, #0
    aafa:	462a      	mov	r2, r5
    aafc:	2106      	movs	r1, #6
    aafe:	6820      	ldr	r0, [r4, #0]
    ab00:	f7fc fd01 	bl	7506 <bt_l2cap_send_cb>
	return 0;
    ab04:	2000      	movs	r0, #0
    ab06:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ab08:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    ab0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ab10 <bt_smp_dhkey_ready>:
{
    ab10:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ab12:	2400      	movs	r4, #0
    ab14:	b384      	cbz	r4, ab78 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    ab16:	2400      	movs	r4, #0
	if (!smp) {
    ab18:	b36c      	cbz	r4, ab76 <bt_smp_dhkey_ready+0x66>
    ab1a:	4601      	mov	r1, r0
	if (!dhkey) {
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d04b      	beq.n	abb8 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    ab20:	2220      	movs	r2, #32
    ab22:	f204 1033 	addw	r0, r4, #307	; 0x133
    ab26:	f7f5 fbcb 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ab2a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ab2e:	f3bf 8f5b 	dmb	ish
    ab32:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ab36:	f3bf 8f5b 	dmb	ish
    ab3a:	f412 7f00 	tst.w	r2, #512	; 0x200
    ab3e:	d140      	bne.n	abc2 <bt_smp_dhkey_ready+0xb2>
    ab40:	f3bf 8f5b 	dmb	ish
    ab44:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ab48:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    ab4c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    ab50:	d144      	bne.n	abdc <bt_smp_dhkey_ready+0xcc>
    ab52:	f3bf 8f5b 	dmb	ish
    ab56:	681b      	ldr	r3, [r3, #0]
    ab58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    ab5c:	f413 7f80 	tst.w	r3, #256	; 0x100
    ab60:	d009      	beq.n	ab76 <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ab62:	6823      	ldr	r3, [r4, #0]
    ab64:	78db      	ldrb	r3, [r3, #3]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d149      	bne.n	abfe <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    ab6a:	4620      	mov	r0, r4
    ab6c:	f7ff fcb4 	bl	a4d8 <compute_and_send_master_dhcheck>
			if (err) {
    ab70:	4601      	mov	r1, r0
    ab72:	2800      	cmp	r0, #0
    ab74:	d13f      	bne.n	abf6 <bt_smp_dhkey_ready+0xe6>
    ab76:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ab78:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ab7c:	fb03 f304 	mul.w	r3, r3, r4
    ab80:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    ab84:	4b23      	ldr	r3, [pc, #140]	; (ac14 <bt_smp_dhkey_ready+0x104>)
    ab86:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab88:	f3bf 8f5b 	dmb	ish
    ab8c:	e853 2f00 	ldrex	r2, [r3]
    ab90:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    ab94:	e843 1e00 	strex	lr, r1, [r3]
    ab98:	f1be 0f00 	cmp.w	lr, #0
    ab9c:	d1f6      	bne.n	ab8c <bt_smp_dhkey_ready+0x7c>
    ab9e:	f3bf 8f5b 	dmb	ish
    aba2:	f012 0f80 	tst.w	r2, #128	; 0x80
    aba6:	d101      	bne.n	abac <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aba8:	3401      	adds	r4, #1
    abaa:	e7b3      	b.n	ab14 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    abac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    abb0:	4b18      	ldr	r3, [pc, #96]	; (ac14 <bt_smp_dhkey_ready+0x104>)
    abb2:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    abb6:	e7af      	b.n	ab18 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    abb8:	210b      	movs	r1, #11
    abba:	4620      	mov	r0, r4
    abbc:	f7ff ff8b 	bl	aad6 <smp_error>
		return;
    abc0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    abc2:	f3bf 8f5b 	dmb	ish
    abc6:	e853 2f00 	ldrex	r2, [r3]
    abca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    abce:	e843 2100 	strex	r1, r2, [r3]
    abd2:	2900      	cmp	r1, #0
    abd4:	d1f7      	bne.n	abc6 <bt_smp_dhkey_ready+0xb6>
    abd6:	f3bf 8f5b 	dmb	ish
    abda:	bd10      	pop	{r4, pc}
    abdc:	f3bf 8f5b 	dmb	ish
    abe0:	e853 2f00 	ldrex	r2, [r3]
    abe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    abe8:	e843 2100 	strex	r1, r2, [r3]
    abec:	2900      	cmp	r1, #0
    abee:	d1f7      	bne.n	abe0 <bt_smp_dhkey_ready+0xd0>
    abf0:	f3bf 8f5b 	dmb	ish
    abf4:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    abf6:	4620      	mov	r0, r4
    abf8:	f7ff ff6d 	bl	aad6 <smp_error>
    abfc:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    abfe:	4620      	mov	r0, r4
    ac00:	f7ff fcc4 	bl	a58c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    ac04:	4601      	mov	r1, r0
    ac06:	2800      	cmp	r0, #0
    ac08:	d0b5      	beq.n	ab76 <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    ac0a:	4620      	mov	r0, r4
    ac0c:	f7ff ff63 	bl	aad6 <smp_error>
    ac10:	e7b1      	b.n	ab76 <bt_smp_dhkey_ready+0x66>
    ac12:	bf00      	nop
    ac14:	20000758 	.word	0x20000758

0000ac18 <smp_pairing_failed>:
{
    ac18:	b538      	push	{r3, r4, r5, lr}
    ac1a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ac1c:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    ac1e:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    ac20:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    ac24:	3b01      	subs	r3, #1
    ac26:	2b02      	cmp	r3, #2
    ac28:	d913      	bls.n	ac52 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ac2a:	f3bf 8f5b 	dmb	ish
    ac2e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ac32:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac36:	f013 0f04 	tst.w	r3, #4
    ac3a:	d004      	beq.n	ac46 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    ac3c:	6823      	ldr	r3, [r4, #0]
    ac3e:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac40:	b108      	cbz	r0, ac46 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    ac42:	f001 fd98 	bl	c776 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    ac46:	7829      	ldrb	r1, [r5, #0]
    ac48:	4620      	mov	r0, r4
    ac4a:	f7ff ff40 	bl	aace <smp_pairing_complete>
}
    ac4e:	2000      	movs	r0, #0
    ac50:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    ac52:	4b02      	ldr	r3, [pc, #8]	; (ac5c <smp_pairing_failed+0x44>)
    ac54:	681b      	ldr	r3, [r3, #0]
    ac56:	68db      	ldr	r3, [r3, #12]
    ac58:	4798      	blx	r3
		break;
    ac5a:	e7e6      	b.n	ac2a <smp_pairing_failed+0x12>
    ac5c:	20002948 	.word	0x20002948

0000ac60 <bt_smp_disconnected>:
{
    ac60:	b538      	push	{r3, r4, r5, lr}
    ac62:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    ac64:	6803      	ldr	r3, [r0, #0]
    ac66:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    ac68:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ac6c:	f01e fba0 	bl	293b0 <k_delayed_work_cancel>
	if (keys) {
    ac70:	b164      	cbz	r4, ac8c <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    ac72:	89a3      	ldrh	r3, [r4, #12]
    ac74:	b13b      	cbz	r3, ac86 <bt_smp_disconnected+0x26>
    ac76:	f3bf 8f5b 	dmb	ish
    ac7a:	68a3      	ldr	r3, [r4, #8]
    ac7c:	f3bf 8f5b 	dmb	ish
    ac80:	f013 0f02 	tst.w	r3, #2
    ac84:	d002      	beq.n	ac8c <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    ac86:	4620      	mov	r0, r4
    ac88:	f001 fd75 	bl	c776 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    ac8c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    ac90:	2100      	movs	r1, #0
    ac92:	4628      	mov	r0, r5
    ac94:	f01f ff12 	bl	2aabc <memset>
    ac98:	bd38      	pop	{r3, r4, r5, pc}

0000ac9a <smp_timeout>:
{
    ac9a:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    ac9c:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    aca0:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    aca4:	f3bf 8f5b 	dmb	ish
    aca8:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    acac:	f3bf 8f5b 	dmb	ish
    acb0:	f013 0f04 	tst.w	r3, #4
    acb4:	d004      	beq.n	acc0 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    acb6:	682b      	ldr	r3, [r5, #0]
    acb8:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    acba:	b108      	cbz	r0, acc0 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    acbc:	f001 fd5b 	bl	c776 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    acc0:	2108      	movs	r1, #8
    acc2:	4628      	mov	r0, r5
    acc4:	f7ff ff03 	bl	aace <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    acc8:	f3bf 8f5b 	dmb	ish
    accc:	e854 3f00 	ldrex	r3, [r4]
    acd0:	f043 0310 	orr.w	r3, r3, #16
    acd4:	e844 3200 	strex	r2, r3, [r4]
    acd8:	2a00      	cmp	r2, #0
    acda:	d1f7      	bne.n	accc <smp_timeout+0x32>
    acdc:	f3bf 8f5b 	dmb	ish
    ace0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ace4 <legacy_distribute_keys>:
{
    ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace8:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    acea:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    acec:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    acee:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    acf2:	f013 0f01 	tst.w	r3, #1
    acf6:	d102      	bne.n	acfe <legacy_distribute_keys+0x1a>
}
    acf8:	b008      	add	sp, #32
    acfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acfe:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    ad00:	2110      	movs	r1, #16
    ad02:	eb0d 0001 	add.w	r0, sp, r1
    ad06:	f005 feef 	bl	10ae8 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    ad0a:	2108      	movs	r1, #8
    ad0c:	eb0d 0001 	add.w	r0, sp, r1
    ad10:	f005 feea 	bl	10ae8 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    ad14:	2102      	movs	r1, #2
    ad16:	f10d 0006 	add.w	r0, sp, #6
    ad1a:	f005 fee5 	bl	10ae8 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    ad1e:	2210      	movs	r2, #16
    ad20:	2106      	movs	r1, #6
    ad22:	4628      	mov	r0, r5
    ad24:	f7ff f8f9 	bl	9f1a <smp_create_pdu>
		if (!buf) {
    ad28:	4607      	mov	r7, r0
    ad2a:	2800      	cmp	r0, #0
    ad2c:	d0e4      	beq.n	acf8 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    ad2e:	2110      	movs	r1, #16
    ad30:	3008      	adds	r0, #8
    ad32:	f00f fa4f 	bl	1a1d4 <net_buf_simple_add>
    ad36:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    ad38:	79f2      	ldrb	r2, [r6, #7]
    ad3a:	a904      	add	r1, sp, #16
    ad3c:	f7f5 fac0 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ad40:	79f0      	ldrb	r0, [r6, #7]
    ad42:	280f      	cmp	r0, #15
    ad44:	d93b      	bls.n	adbe <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    ad46:	2200      	movs	r2, #0
    ad48:	4639      	mov	r1, r7
    ad4a:	4620      	mov	r0, r4
    ad4c:	f7ff f938 	bl	9fc0 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    ad50:	220a      	movs	r2, #10
    ad52:	2107      	movs	r1, #7
    ad54:	4628      	mov	r0, r5
    ad56:	f7ff f8e0 	bl	9f1a <smp_create_pdu>
		if (!buf) {
    ad5a:	4605      	mov	r5, r0
    ad5c:	2800      	cmp	r0, #0
    ad5e:	d0cb      	beq.n	acf8 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    ad60:	210a      	movs	r1, #10
    ad62:	3008      	adds	r0, #8
    ad64:	f00f fa36 	bl	1a1d4 <net_buf_simple_add>
		ident->rand = rand;
    ad68:	9b03      	ldr	r3, [sp, #12]
    ad6a:	9a02      	ldr	r2, [sp, #8]
    ad6c:	f8c0 2002 	str.w	r2, [r0, #2]
    ad70:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    ad74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ad78:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    ad7a:	4a14      	ldr	r2, [pc, #80]	; (adcc <legacy_distribute_keys+0xe8>)
    ad7c:	4629      	mov	r1, r5
    ad7e:	4620      	mov	r0, r4
    ad80:	f7ff f91e 	bl	9fc0 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ad84:	f3bf 8f5b 	dmb	ish
    ad88:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ad8c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad90:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ad94:	d0b0      	beq.n	acf8 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ad96:	2101      	movs	r1, #1
    ad98:	4630      	mov	r0, r6
    ad9a:	f001 fcd5 	bl	c748 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    ad9e:	2210      	movs	r2, #16
    ada0:	eb0d 0102 	add.w	r1, sp, r2
    ada4:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    ada8:	f7f5 fa8a 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    adac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    adb0:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    adb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    adb8:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    adbc:	e79c      	b.n	acf8 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    adbe:	f1c0 0210 	rsb	r2, r0, #16
    adc2:	2100      	movs	r1, #0
    adc4:	4440      	add	r0, r8
    adc6:	f01f fe79 	bl	2aabc <memset>
    adca:	e7bc      	b.n	ad46 <legacy_distribute_keys+0x62>
    adcc:	0000b9ff 	.word	0x0000b9ff

0000add0 <bt_smp_distribute_keys>:
{
    add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    add2:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    add4:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    add6:	b176      	cbz	r6, adf6 <bt_smp_distribute_keys+0x26>
    add8:	4604      	mov	r4, r0
    adda:	f3bf 8f5b 	dmb	ish
    adde:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ade2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ade6:	f013 0f20 	tst.w	r3, #32
    adea:	d005      	beq.n	adf8 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    adec:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    adf0:	f013 0f04 	tst.w	r3, #4
    adf4:	d103      	bne.n	adfe <bt_smp_distribute_keys+0x2e>
    adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    adf8:	f7ff ff74 	bl	ace4 <legacy_distribute_keys>
    adfc:	e7f6      	b.n	adec <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    adfe:	2210      	movs	r2, #16
    ae00:	210a      	movs	r1, #10
    ae02:	4628      	mov	r0, r5
    ae04:	f7ff f889 	bl	9f1a <smp_create_pdu>
		if (!buf) {
    ae08:	4605      	mov	r5, r0
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d0f3      	beq.n	adf6 <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    ae0e:	2110      	movs	r1, #16
    ae10:	3008      	adds	r0, #8
    ae12:	f00f f9df 	bl	1a1d4 <net_buf_simple_add>
    ae16:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    ae18:	2110      	movs	r1, #16
    ae1a:	f005 fe65 	bl	10ae8 <bt_rand>
    ae1e:	f3bf 8f5b 	dmb	ish
    ae22:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ae26:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ae2a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ae2e:	d105      	bne.n	ae3c <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    ae30:	4a09      	ldr	r2, [pc, #36]	; (ae58 <bt_smp_distribute_keys+0x88>)
    ae32:	4629      	mov	r1, r5
    ae34:	4620      	mov	r0, r4
    ae36:	f7ff f8c3 	bl	9fc0 <smp_send>
    ae3a:	e7dc      	b.n	adf6 <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ae3c:	2108      	movs	r1, #8
    ae3e:	4630      	mov	r0, r6
    ae40:	f001 fc82 	bl	c748 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ae44:	2210      	movs	r2, #16
    ae46:	4639      	mov	r1, r7
    ae48:	f106 0048 	add.w	r0, r6, #72	; 0x48
    ae4c:	f7f5 fa38 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    ae50:	2300      	movs	r3, #0
    ae52:	65b3      	str	r3, [r6, #88]	; 0x58
    ae54:	e7ec      	b.n	ae30 <bt_smp_distribute_keys+0x60>
    ae56:	bf00      	nop
    ae58:	0000b9f5 	.word	0x0000b9f5

0000ae5c <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    ae5c:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    ae5e:	b911      	cbnz	r1, ae66 <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    ae60:	b108      	cbz	r0, ae66 <bt_smp_encrypt_change+0xa>
    ae62:	7a9a      	ldrb	r2, [r3, #10]
    ae64:	b902      	cbnz	r2, ae68 <bt_smp_encrypt_change+0xc>
    ae66:	4770      	bx	lr
{
    ae68:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ae6a:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae6e:	f3bf 8f5b 	dmb	ish
    ae72:	e852 1f00 	ldrex	r1, [r2]
    ae76:	f021 0402 	bic.w	r4, r1, #2
    ae7a:	e842 4e00 	strex	lr, r4, [r2]
    ae7e:	f1be 0f00 	cmp.w	lr, #0
    ae82:	d1f6      	bne.n	ae72 <bt_smp_encrypt_change+0x16>
    ae84:	f3bf 8f5b 	dmb	ish
    ae88:	f011 0f02 	tst.w	r1, #2
    ae8c:	d100      	bne.n	ae90 <bt_smp_encrypt_change+0x34>
    ae8e:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ae90:	f3bf 8f5b 	dmb	ish
    ae94:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ae98:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ae9c:	f011 0f08 	tst.w	r1, #8
    aea0:	d04b      	beq.n	af3a <bt_smp_encrypt_change+0xde>
    aea2:	f3bf 8f5b 	dmb	ish
    aea6:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    aeaa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    aeae:	f011 0f20 	tst.w	r1, #32
    aeb2:	d015      	beq.n	aee0 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    aeb4:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    aeb8:	f011 0f08 	tst.w	r1, #8
    aebc:	d004      	beq.n	aec8 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    aebe:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    aec2:	f011 0f08 	tst.w	r1, #8
    aec6:	d146      	bne.n	af56 <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    aec8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    aecc:	f021 0108 	bic.w	r1, r1, #8
    aed0:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    aed4:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    aed8:	f021 0108 	bic.w	r1, r1, #8
    aedc:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    aee0:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    aee4:	f011 0f01 	tst.w	r1, #1
    aee8:	d142      	bne.n	af70 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    aeea:	f011 0f02 	tst.w	r1, #2
    aeee:	d14f      	bne.n	af90 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    aef0:	f011 0f04 	tst.w	r1, #4
    aef4:	d15c      	bne.n	afb0 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aef6:	f3bf 8f5b 	dmb	ish
    aefa:	e852 1f00 	ldrex	r1, [r2]
    aefe:	f041 0104 	orr.w	r1, r1, #4
    af02:	e842 1400 	strex	r4, r1, [r2]
    af06:	2c00      	cmp	r4, #0
    af08:	d1f7      	bne.n	aefa <bt_smp_encrypt_change+0x9e>
    af0a:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    af0e:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    af10:	b91b      	cbnz	r3, af1a <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    af12:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    af16:	2b00      	cmp	r3, #0
    af18:	d1b9      	bne.n	ae8e <bt_smp_encrypt_change+0x32>
    af1a:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    af1c:	f7ff ff58 	bl	add0 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    af20:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    af24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    af28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    af2c:	2b00      	cmp	r3, #0
    af2e:	d1ae      	bne.n	ae8e <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    af30:	2100      	movs	r1, #0
    af32:	4620      	mov	r0, r4
    af34:	f7ff fdcb 	bl	aace <smp_pairing_complete>
    af38:	e7a9      	b.n	ae8e <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    af3a:	309c      	adds	r0, #156	; 0x9c
    af3c:	f3bf 8f5b 	dmb	ish
    af40:	e850 3f00 	ldrex	r3, [r0]
    af44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    af48:	e840 3200 	strex	r2, r3, [r0]
    af4c:	2a00      	cmp	r2, #0
    af4e:	d1f7      	bne.n	af40 <bt_smp_encrypt_change+0xe4>
    af50:	f3bf 8f5b 	dmb	ish
    af54:	bd10      	pop	{r4, pc}
    af56:	f3bf 8f5b 	dmb	ish
    af5a:	e852 1f00 	ldrex	r1, [r2]
    af5e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    af62:	e842 1400 	strex	r4, r1, [r2]
    af66:	2c00      	cmp	r4, #0
    af68:	d1f7      	bne.n	af5a <bt_smp_encrypt_change+0xfe>
    af6a:	f3bf 8f5b 	dmb	ish
    af6e:	e7ab      	b.n	aec8 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    af70:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af74:	f3bf 8f5b 	dmb	ish
    af78:	e851 4f00 	ldrex	r4, [r1]
    af7c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    af80:	e841 4e00 	strex	lr, r4, [r1]
    af84:	f1be 0f00 	cmp.w	lr, #0
    af88:	d1f6      	bne.n	af78 <bt_smp_encrypt_change+0x11c>
    af8a:	f3bf 8f5b 	dmb	ish
    af8e:	e7b2      	b.n	aef6 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    af90:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af94:	f3bf 8f5b 	dmb	ish
    af98:	e851 4f00 	ldrex	r4, [r1]
    af9c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    afa0:	e841 4e00 	strex	lr, r4, [r1]
    afa4:	f1be 0f00 	cmp.w	lr, #0
    afa8:	d1f6      	bne.n	af98 <bt_smp_encrypt_change+0x13c>
    afaa:	f3bf 8f5b 	dmb	ish
    afae:	e7a2      	b.n	aef6 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    afb0:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    afb4:	f3bf 8f5b 	dmb	ish
    afb8:	e851 4f00 	ldrex	r4, [r1]
    afbc:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    afc0:	e841 4e00 	strex	lr, r4, [r1]
    afc4:	f1be 0f00 	cmp.w	lr, #0
    afc8:	d1f6      	bne.n	afb8 <bt_smp_encrypt_change+0x15c>
    afca:	f3bf 8f5b 	dmb	ish
    afce:	e792      	b.n	aef6 <bt_smp_encrypt_change+0x9a>

0000afd0 <bt_smp_recv>:
{
    afd0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    afd2:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    afd4:	898b      	ldrh	r3, [r1, #12]
    afd6:	b903      	cbnz	r3, afda <bt_smp_recv+0xa>
    afd8:	bd70      	pop	{r4, r5, r6, pc}
    afda:	460c      	mov	r4, r1
    afdc:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    afde:	2101      	movs	r1, #1
    afe0:	f104 0008 	add.w	r0, r4, #8
    afe4:	f00f f943 	bl	1a26e <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    afe8:	f3bf 8f5b 	dmb	ish
    afec:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    aff0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    aff4:	f013 0f10 	tst.w	r3, #16
    aff8:	d1ee      	bne.n	afd8 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    affa:	7833      	ldrb	r3, [r6, #0]
    affc:	2b0d      	cmp	r3, #13
    affe:	d824      	bhi.n	b04a <bt_smp_recv+0x7a>
    b000:	4a21      	ldr	r2, [pc, #132]	; (b088 <bt_smp_recv+0xb8>)
    b002:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    b006:	b302      	cbz	r2, b04a <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    b008:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b00c:	f003 001f 	and.w	r0, r3, #31
    b010:	2101      	movs	r1, #1
    b012:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b014:	095b      	lsrs	r3, r3, #5
    b016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b01a:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b01c:	f3bf 8f5b 	dmb	ish
    b020:	e853 2f00 	ldrex	r2, [r3]
    b024:	ea02 0e00 	and.w	lr, r2, r0
    b028:	e843 ec00 	strex	ip, lr, [r3]
    b02c:	f1bc 0f00 	cmp.w	ip, #0
    b030:	d1f6      	bne.n	b020 <bt_smp_recv+0x50>
    b032:	f3bf 8f5b 	dmb	ish
    b036:	4211      	tst	r1, r2
    b038:	d10c      	bne.n	b054 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    b03a:	7833      	ldrb	r3, [r6, #0]
    b03c:	2b05      	cmp	r3, #5
    b03e:	d0cb      	beq.n	afd8 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b040:	2108      	movs	r1, #8
    b042:	4628      	mov	r0, r5
    b044:	f7ff fd47 	bl	aad6 <smp_error>
    b048:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    b04a:	2107      	movs	r1, #7
    b04c:	4628      	mov	r0, r5
    b04e:	f7ff fd42 	bl	aad6 <smp_error>
		return;
    b052:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    b054:	89a1      	ldrh	r1, [r4, #12]
    b056:	7832      	ldrb	r2, [r6, #0]
    b058:	4b0b      	ldr	r3, [pc, #44]	; (b088 <bt_smp_recv+0xb8>)
    b05a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b05e:	791b      	ldrb	r3, [r3, #4]
    b060:	4299      	cmp	r1, r3
    b062:	d004      	beq.n	b06e <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    b064:	210a      	movs	r1, #10
    b066:	4628      	mov	r0, r5
    b068:	f7ff fd35 	bl	aad6 <smp_error>
		return;
    b06c:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    b06e:	4b06      	ldr	r3, [pc, #24]	; (b088 <bt_smp_recv+0xb8>)
    b070:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    b074:	4621      	mov	r1, r4
    b076:	4628      	mov	r0, r5
    b078:	4798      	blx	r3
	if (err) {
    b07a:	4601      	mov	r1, r0
    b07c:	2800      	cmp	r0, #0
    b07e:	d0ab      	beq.n	afd8 <bt_smp_recv+0x8>
		smp_error(smp, err);
    b080:	4628      	mov	r0, r5
    b082:	f7ff fd28 	bl	aad6 <smp_error>
    b086:	e7a7      	b.n	afd8 <bt_smp_recv+0x8>
    b088:	0002f60c 	.word	0x0002f60c

0000b08c <smp_dhkey_check>:
{
    b08c:	b570      	push	{r4, r5, r6, lr}
    b08e:	b08c      	sub	sp, #48	; 0x30
    b090:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    b092:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b094:	6803      	ldr	r3, [r0, #0]
    b096:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b098:	b12c      	cbz	r4, b0a6 <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    b09a:	2c01      	cmp	r4, #1
    b09c:	d058      	beq.n	b150 <smp_dhkey_check+0xc4>
	return 0;
    b09e:	2400      	movs	r4, #0
}
    b0a0:	4620      	mov	r0, r4
    b0a2:	b00c      	add	sp, #48	; 0x30
    b0a4:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    b0a6:	2210      	movs	r2, #16
    b0a8:	2100      	movs	r1, #0
    b0aa:	a808      	add	r0, sp, #32
    b0ac:	f01f fd06 	bl	2aabc <memset>
		switch (smp->method) {
    b0b0:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b0b4:	2b03      	cmp	r3, #3
    b0b6:	d847      	bhi.n	b148 <smp_dhkey_check+0xbc>
    b0b8:	e8df f003 	tbb	[pc, r3]
    b0bc:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b0c0:	2204      	movs	r2, #4
    b0c2:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    b0c6:	a808      	add	r0, sp, #32
    b0c8:	f7f5 f8fa 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b0cc:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    b0d0:	682b      	ldr	r3, [r5, #0]
    b0d2:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    b0d6:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b0d8:	a804      	add	r0, sp, #16
    b0da:	9003      	str	r0, [sp, #12]
    b0dc:	9302      	str	r3, [sp, #8]
    b0de:	9101      	str	r1, [sp, #4]
    b0e0:	9200      	str	r2, [sp, #0]
    b0e2:	ab08      	add	r3, sp, #32
    b0e4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    b0e8:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    b0ec:	f205 1063 	addw	r0, r5, #355	; 0x163
    b0f0:	f7ff f96e 	bl	a3d0 <smp_f6>
    b0f4:	b108      	cbz	r0, b0fa <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    b0f6:	2408      	movs	r4, #8
    b0f8:	e7d2      	b.n	b0a0 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    b0fa:	2210      	movs	r2, #16
    b0fc:	4631      	mov	r1, r6
    b0fe:	eb0d 0002 	add.w	r0, sp, r2
    b102:	f01f fc47 	bl	2a994 <memcmp>
    b106:	b108      	cbz	r0, b10c <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b108:	240b      	movs	r4, #11
    b10a:	e7c9      	b.n	b0a0 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    b10c:	4628      	mov	r0, r5
    b10e:	f7fe fe63 	bl	9dd8 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    b112:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    b116:	9002      	str	r0, [sp, #8]
    b118:	9301      	str	r3, [sp, #4]
    b11a:	2300      	movs	r3, #0
    b11c:	9300      	str	r3, [sp, #0]
    b11e:	2200      	movs	r2, #0
    b120:	2300      	movs	r3, #0
    b122:	6828      	ldr	r0, [r5, #0]
    b124:	f7fb f898 	bl	6258 <bt_conn_le_start_encryption>
    b128:	2800      	cmp	r0, #0
    b12a:	db0f      	blt.n	b14c <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b12c:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b12e:	f3bf 8f5b 	dmb	ish
    b132:	e855 3f00 	ldrex	r3, [r5]
    b136:	f043 0302 	orr.w	r3, r3, #2
    b13a:	e845 3200 	strex	r2, r3, [r5]
    b13e:	2a00      	cmp	r2, #0
    b140:	d1f7      	bne.n	b132 <smp_dhkey_check+0xa6>
    b142:	f3bf 8f5b 	dmb	ish
		return 0;
    b146:	e7ab      	b.n	b0a0 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b148:	2408      	movs	r4, #8
    b14a:	e7a9      	b.n	b0a0 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b14c:	2408      	movs	r4, #8
    b14e:	e7a7      	b.n	b0a0 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b150:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b154:	f3bf 8f5b 	dmb	ish
    b158:	e854 3f00 	ldrex	r3, [r4]
    b15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b160:	e844 3200 	strex	r2, r3, [r4]
    b164:	2a00      	cmp	r2, #0
    b166:	d1f7      	bne.n	b158 <smp_dhkey_check+0xcc>
    b168:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    b16c:	2210      	movs	r2, #16
    b16e:	4631      	mov	r1, r6
    b170:	f205 1053 	addw	r0, r5, #339	; 0x153
    b174:	f7f5 f8a4 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b178:	f3bf 8f5b 	dmb	ish
    b17c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b180:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b184:	f013 0f80 	tst.w	r3, #128	; 0x80
    b188:	d10d      	bne.n	b1a6 <smp_dhkey_check+0x11a>
    b18a:	f3bf 8f5b 	dmb	ish
    b18e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b192:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b196:	f413 7f00 	tst.w	r3, #512	; 0x200
    b19a:	d112      	bne.n	b1c2 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    b19c:	4628      	mov	r0, r5
    b19e:	f7ff f9f5 	bl	a58c <compute_and_check_and_send_slave_dhcheck>
    b1a2:	4604      	mov	r4, r0
    b1a4:	e77c      	b.n	b0a0 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b1a6:	f3bf 8f5b 	dmb	ish
    b1aa:	e854 3f00 	ldrex	r3, [r4]
    b1ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b1b2:	e844 3200 	strex	r2, r3, [r4]
    b1b6:	2a00      	cmp	r2, #0
    b1b8:	d1f7      	bne.n	b1aa <smp_dhkey_check+0x11e>
    b1ba:	f3bf 8f5b 	dmb	ish
			return 0;
    b1be:	2400      	movs	r4, #0
    b1c0:	e76e      	b.n	b0a0 <smp_dhkey_check+0x14>
    b1c2:	f3bf 8f5b 	dmb	ish
    b1c6:	e854 3f00 	ldrex	r3, [r4]
    b1ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b1ce:	e844 3200 	strex	r2, r3, [r4]
    b1d2:	2a00      	cmp	r2, #0
    b1d4:	d1f7      	bne.n	b1c6 <smp_dhkey_check+0x13a>
    b1d6:	f3bf 8f5b 	dmb	ish
			return 0;
    b1da:	2400      	movs	r4, #0
    b1dc:	e760      	b.n	b0a0 <smp_dhkey_check+0x14>

0000b1de <legacy_pairing_random>:
{
    b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1e2:	b088      	sub	sp, #32
    b1e4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b1e6:	4605      	mov	r5, r0
    b1e8:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b1ec:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b1f0:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    b1f4:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b1f8:	a904      	add	r1, sp, #16
    b1fa:	9102      	str	r1, [sp, #8]
    b1fc:	9201      	str	r2, [sp, #4]
    b1fe:	9300      	str	r3, [sp, #0]
    b200:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    b204:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    b208:	4641      	mov	r1, r8
    b20a:	4628      	mov	r0, r5
    b20c:	f7ff fada 	bl	a7c4 <smp_c1>
	if (err) {
    b210:	b120      	cbz	r0, b21c <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    b212:	2708      	movs	r7, #8
}
    b214:	4638      	mov	r0, r7
    b216:	b008      	add	sp, #32
    b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b21c:	2210      	movs	r2, #16
    b21e:	eb0d 0102 	add.w	r1, sp, r2
    b222:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b226:	f01f fbb5 	bl	2a994 <memcmp>
    b22a:	b108      	cbz	r0, b230 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    b22c:	2704      	movs	r7, #4
    b22e:	e7f1      	b.n	b214 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b230:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b232:	bb3f      	cbnz	r7, b284 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    b234:	ab04      	add	r3, sp, #16
    b236:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b23a:	4641      	mov	r1, r8
    b23c:	4628      	mov	r0, r5
    b23e:	f7ff fbf0 	bl	aa22 <smp_s1>
		if (err) {
    b242:	b108      	cbz	r0, b248 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    b244:	2708      	movs	r7, #8
    b246:	e7e5      	b.n	b214 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    b248:	4620      	mov	r0, r4
    b24a:	f7fe fdc5 	bl	9dd8 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b24e:	9002      	str	r0, [sp, #8]
    b250:	ab04      	add	r3, sp, #16
    b252:	9301      	str	r3, [sp, #4]
    b254:	2300      	movs	r3, #0
    b256:	9300      	str	r3, [sp, #0]
    b258:	2200      	movs	r2, #0
    b25a:	2300      	movs	r3, #0
    b25c:	4630      	mov	r0, r6
    b25e:	f7fa fffb 	bl	6258 <bt_conn_le_start_encryption>
    b262:	b108      	cbz	r0, b268 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    b264:	2708      	movs	r7, #8
    b266:	e7d5      	b.n	b214 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b268:	34a0      	adds	r4, #160	; 0xa0
    b26a:	f3bf 8f5b 	dmb	ish
    b26e:	e854 3f00 	ldrex	r3, [r4]
    b272:	f043 0302 	orr.w	r3, r3, #2
    b276:	e844 3200 	strex	r2, r3, [r4]
    b27a:	2a00      	cmp	r2, #0
    b27c:	d1f7      	bne.n	b26e <legacy_pairing_random+0x90>
    b27e:	f3bf 8f5b 	dmb	ish
		return 0;
    b282:	e7c7      	b.n	b214 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    b284:	ab04      	add	r3, sp, #16
    b286:	4642      	mov	r2, r8
    b288:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b28c:	4628      	mov	r0, r5
    b28e:	f7ff fbc8 	bl	aa22 <smp_s1>
		if (err) {
    b292:	b108      	cbz	r0, b298 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    b294:	2708      	movs	r7, #8
    b296:	e7bd      	b.n	b214 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b298:	2210      	movs	r2, #16
    b29a:	eb0d 0102 	add.w	r1, sp, r2
    b29e:	4628      	mov	r0, r5
    b2a0:	f7f5 f80e 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b2a4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b2a8:	f3bf 8f5b 	dmb	ish
    b2ac:	e853 2f00 	ldrex	r2, [r3]
    b2b0:	f042 0202 	orr.w	r2, r2, #2
    b2b4:	e843 2100 	strex	r1, r2, [r3]
    b2b8:	2900      	cmp	r1, #0
    b2ba:	d1f7      	bne.n	b2ac <legacy_pairing_random+0xce>
    b2bc:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b2c0:	4620      	mov	r0, r4
    b2c2:	f7fe feea 	bl	a09a <smp_send_pairing_random>
	return 0;
    b2c6:	2700      	movs	r7, #0
    b2c8:	e7a4      	b.n	b214 <legacy_pairing_random+0x36>
	...

0000b2cc <smp_pairing_random>:
{
    b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ce:	b085      	sub	sp, #20
    b2d0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b2d2:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    b2d6:	2210      	movs	r2, #16
    b2d8:	6889      	ldr	r1, [r1, #8]
    b2da:	4628      	mov	r0, r5
    b2dc:	f7f4 fff0 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2e0:	f3bf 8f5b 	dmb	ish
    b2e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b2e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b2ec:	f013 0f20 	tst.w	r3, #32
    b2f0:	d00d      	beq.n	b30e <smp_pairing_random+0x42>
    b2f2:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b2f6:	6823      	ldr	r3, [r4, #0]
    b2f8:	78db      	ldrb	r3, [r3, #3]
    b2fa:	b17b      	cbz	r3, b31c <smp_pairing_random+0x50>
	switch (smp->method) {
    b2fc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b300:	2b03      	cmp	r3, #3
    b302:	f200 8106 	bhi.w	b512 <smp_pairing_random+0x246>
    b306:	e8df f003 	tbb	[pc, r3]
    b30a:	bfa0      	.short	0xbfa0
    b30c:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    b30e:	4620      	mov	r0, r4
    b310:	f7ff ff65 	bl	b1de <legacy_pairing_random>
    b314:	4606      	mov	r6, r0
}
    b316:	4630      	mov	r0, r6
    b318:	b005      	add	sp, #20
    b31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    b31c:	4620      	mov	r0, r4
    b31e:	f7fe ff83 	bl	a228 <sc_smp_check_confirm>
		if (err) {
    b322:	4606      	mov	r6, r0
    b324:	2800      	cmp	r0, #0
    b326:	d1f6      	bne.n	b316 <smp_pairing_random+0x4a>
		switch (smp->method) {
    b328:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b32c:	2b03      	cmp	r3, #3
    b32e:	f200 80ee 	bhi.w	b50e <smp_pairing_random+0x242>
    b332:	e8df f003 	tbb	[pc, r3]
    b336:	2e50      	.short	0x2e50
    b338:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b33a:	ab03      	add	r3, sp, #12
    b33c:	9300      	str	r3, [sp, #0]
    b33e:	462b      	mov	r3, r5
    b340:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b344:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b348:	4873      	ldr	r0, [pc, #460]	; (b518 <smp_pairing_random+0x24c>)
    b34a:	f7ff f995 	bl	a678 <smp_g2>
    b34e:	b108      	cbz	r0, b354 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    b350:	2608      	movs	r6, #8
    b352:	e7e0      	b.n	b316 <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b354:	f3bf 8f5b 	dmb	ish
    b358:	e857 3f00 	ldrex	r3, [r7]
    b35c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b360:	e847 3200 	strex	r2, r3, [r7]
    b364:	2a00      	cmp	r2, #0
    b366:	d1f7      	bne.n	b358 <smp_pairing_random+0x8c>
    b368:	f3bf 8f5b 	dmb	ish
    b36c:	f3bf 8f5b 	dmb	ish
    b370:	e857 3f00 	ldrex	r3, [r7]
    b374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b378:	e847 3200 	strex	r2, r3, [r7]
    b37c:	2a00      	cmp	r2, #0
    b37e:	d1f7      	bne.n	b370 <smp_pairing_random+0xa4>
    b380:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b384:	4b65      	ldr	r3, [pc, #404]	; (b51c <smp_pairing_random+0x250>)
    b386:	681b      	ldr	r3, [r3, #0]
    b388:	689b      	ldr	r3, [r3, #8]
    b38a:	9903      	ldr	r1, [sp, #12]
    b38c:	6820      	ldr	r0, [r4, #0]
    b38e:	4798      	blx	r3
			return 0;
    b390:	e7c1      	b.n	b316 <smp_pairing_random+0x4a>
			smp->passkey_round++;
    b392:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b396:	3301      	adds	r3, #1
    b398:	b2db      	uxtb	r3, r3
    b39a:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b39e:	2b14      	cmp	r3, #20
    b3a0:	d019      	beq.n	b3d6 <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    b3a2:	2110      	movs	r1, #16
    b3a4:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b3a8:	f005 fb9e 	bl	10ae8 <bt_rand>
    b3ac:	b108      	cbz	r0, b3b2 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    b3ae:	2608      	movs	r6, #8
    b3b0:	e7b1      	b.n	b316 <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    b3b2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b3b6:	f3bf 8f5b 	dmb	ish
    b3ba:	e853 2f00 	ldrex	r2, [r3]
    b3be:	f042 0208 	orr.w	r2, r2, #8
    b3c2:	e843 2100 	strex	r1, r2, [r3]
    b3c6:	2900      	cmp	r1, #0
    b3c8:	d1f7      	bne.n	b3ba <smp_pairing_random+0xee>
    b3ca:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    b3ce:	4620      	mov	r0, r4
    b3d0:	f7ff f9aa 	bl	a728 <smp_send_pairing_confirm>
			return 0;
    b3d4:	e79f      	b.n	b316 <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3d6:	f3bf 8f5b 	dmb	ish
    b3da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b3de:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b3e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    b3e6:	d00c      	beq.n	b402 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3e8:	f3bf 8f5b 	dmb	ish
    b3ec:	e857 3f00 	ldrex	r3, [r7]
    b3f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b3f4:	e847 3200 	strex	r2, r3, [r7]
    b3f8:	2a00      	cmp	r2, #0
    b3fa:	d1f7      	bne.n	b3ec <smp_pairing_random+0x120>
    b3fc:	f3bf 8f5b 	dmb	ish
			return 0;
    b400:	e789      	b.n	b316 <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    b402:	4620      	mov	r0, r4
    b404:	f7ff f868 	bl	a4d8 <compute_and_send_master_dhcheck>
    b408:	4606      	mov	r6, r0
    b40a:	e784      	b.n	b316 <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b40c:	ab03      	add	r3, sp, #12
    b40e:	9300      	str	r3, [sp, #0]
    b410:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b414:	462a      	mov	r2, r5
    b416:	4940      	ldr	r1, [pc, #256]	; (b518 <smp_pairing_random+0x24c>)
    b418:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b41c:	f7ff f92c 	bl	a678 <smp_g2>
    b420:	b108      	cbz	r0, b426 <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    b422:	2608      	movs	r6, #8
    b424:	e777      	b.n	b316 <smp_pairing_random+0x4a>
    b426:	f3bf 8f5b 	dmb	ish
    b42a:	e857 3f00 	ldrex	r3, [r7]
    b42e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b432:	e847 3200 	strex	r2, r3, [r7]
    b436:	2a00      	cmp	r2, #0
    b438:	d1f7      	bne.n	b42a <smp_pairing_random+0x15e>
    b43a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b43e:	4b37      	ldr	r3, [pc, #220]	; (b51c <smp_pairing_random+0x250>)
    b440:	681b      	ldr	r3, [r3, #0]
    b442:	689b      	ldr	r3, [r3, #8]
    b444:	9903      	ldr	r1, [sp, #12]
    b446:	6820      	ldr	r0, [r4, #0]
    b448:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b44a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b44e:	f3bf 8f5b 	dmb	ish
    b452:	e853 2f00 	ldrex	r2, [r3]
    b456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b45a:	e843 2100 	strex	r1, r2, [r3]
    b45e:	2900      	cmp	r1, #0
    b460:	d1f7      	bne.n	b452 <smp_pairing_random+0x186>
    b462:	f3bf 8f5b 	dmb	ish
    b466:	f3bf 8f5b 	dmb	ish
    b46a:	e857 3f00 	ldrex	r3, [r7]
    b46e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b472:	e847 3200 	strex	r2, r3, [r7]
    b476:	2a00      	cmp	r2, #0
    b478:	d1f7      	bne.n	b46a <smp_pairing_random+0x19e>
    b47a:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    b47e:	4620      	mov	r0, r4
    b480:	f7fe fe0b 	bl	a09a <smp_send_pairing_random>
	return 0;
    b484:	2600      	movs	r6, #0
    b486:	e746      	b.n	b316 <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    b488:	4620      	mov	r0, r4
    b48a:	f7fe fecd 	bl	a228 <sc_smp_check_confirm>
		if (err) {
    b48e:	4606      	mov	r6, r0
    b490:	2800      	cmp	r0, #0
    b492:	f47f af40 	bne.w	b316 <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    b496:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    b49a:	f3bf 8f5b 	dmb	ish
    b49e:	e855 3f00 	ldrex	r3, [r5]
    b4a2:	f043 0308 	orr.w	r3, r3, #8
    b4a6:	e845 3200 	strex	r2, r3, [r5]
    b4aa:	2a00      	cmp	r2, #0
    b4ac:	d1f7      	bne.n	b49e <smp_pairing_random+0x1d2>
    b4ae:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b4b2:	4620      	mov	r0, r4
    b4b4:	f7fe fdf1 	bl	a09a <smp_send_pairing_random>
		smp->passkey_round++;
    b4b8:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b4bc:	3301      	adds	r3, #1
    b4be:	b2db      	uxtb	r3, r3
    b4c0:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b4c4:	2b14      	cmp	r3, #20
    b4c6:	d009      	beq.n	b4dc <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    b4c8:	2110      	movs	r1, #16
    b4ca:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b4ce:	f005 fb0b 	bl	10ae8 <bt_rand>
    b4d2:	2800      	cmp	r0, #0
    b4d4:	f43f af1f 	beq.w	b316 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b4d8:	2608      	movs	r6, #8
    b4da:	e71c      	b.n	b316 <smp_pairing_random+0x4a>
    b4dc:	f3bf 8f5b 	dmb	ish
    b4e0:	e855 3f00 	ldrex	r3, [r5]
    b4e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b4e8:	e845 3200 	strex	r2, r3, [r5]
    b4ec:	2a00      	cmp	r2, #0
    b4ee:	d1f7      	bne.n	b4e0 <smp_pairing_random+0x214>
    b4f0:	f3bf 8f5b 	dmb	ish
    b4f4:	f3bf 8f5b 	dmb	ish
    b4f8:	e857 3f00 	ldrex	r3, [r7]
    b4fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b500:	e847 3200 	strex	r2, r3, [r7]
    b504:	2a00      	cmp	r2, #0
    b506:	d1f7      	bne.n	b4f8 <smp_pairing_random+0x22c>
    b508:	f3bf 8f5b 	dmb	ish
			return 0;
    b50c:	e703      	b.n	b316 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b50e:	2608      	movs	r6, #8
    b510:	e701      	b.n	b316 <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    b512:	2608      	movs	r6, #8
    b514:	e6ff      	b.n	b316 <smp_pairing_random+0x4a>
    b516:	bf00      	nop
    b518:	20000900 	.word	0x20000900
    b51c:	20002948 	.word	0x20002948

0000b520 <generate_dhkey>:
{
    b520:	b510      	push	{r4, lr}
    b522:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    b524:	490a      	ldr	r1, [pc, #40]	; (b550 <generate_dhkey+0x30>)
    b526:	30f3      	adds	r0, #243	; 0xf3
    b528:	f7fa fd1e 	bl	5f68 <bt_dh_key_gen>
    b52c:	b108      	cbz	r0, b532 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    b52e:	2008      	movs	r0, #8
}
    b530:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b532:	34a0      	adds	r4, #160	; 0xa0
    b534:	f3bf 8f5b 	dmb	ish
    b538:	e854 3f00 	ldrex	r3, [r4]
    b53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b540:	e844 3200 	strex	r2, r3, [r4]
    b544:	2a00      	cmp	r2, #0
    b546:	d1f7      	bne.n	b538 <generate_dhkey+0x18>
    b548:	f3bf 8f5b 	dmb	ish
	return 0;
    b54c:	bd10      	pop	{r4, pc}
    b54e:	bf00      	nop
    b550:	0000ab11 	.word	0x0000ab11

0000b554 <smp_public_key_slave>:
{
    b554:	b510      	push	{r4, lr}
    b556:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    b558:	f7fe fd60 	bl	a01c <sc_send_public_key>
	if (err) {
    b55c:	4603      	mov	r3, r0
    b55e:	2800      	cmp	r0, #0
    b560:	d154      	bne.n	b60c <smp_public_key_slave+0xb8>
	switch (smp->method) {
    b562:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b566:	2b03      	cmp	r3, #3
    b568:	d852      	bhi.n	b610 <smp_public_key_slave+0xbc>
    b56a:	e8df f003 	tbb	[pc, r3]
    b56e:	2a02      	.short	0x2a02
    b570:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b572:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b576:	f3bf 8f5b 	dmb	ish
    b57a:	e853 2f00 	ldrex	r2, [r3]
    b57e:	f042 0210 	orr.w	r2, r2, #16
    b582:	e843 2100 	strex	r1, r2, [r3]
    b586:	2900      	cmp	r1, #0
    b588:	d1f7      	bne.n	b57a <smp_public_key_slave+0x26>
    b58a:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    b58e:	4620      	mov	r0, r4
    b590:	f7ff f8ca 	bl	a728 <smp_send_pairing_confirm>
		if (err) {
    b594:	4603      	mov	r3, r0
    b596:	b3a8      	cbz	r0, b604 <smp_public_key_slave+0xb0>
    b598:	e038      	b.n	b60c <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    b59a:	4620      	mov	r0, r4
    b59c:	f7fe fcea 	bl	9f74 <display_passkey>
		if (err) {
    b5a0:	4603      	mov	r3, r0
    b5a2:	bb98      	cbnz	r0, b60c <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b5a4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b5a8:	f3bf 8f5b 	dmb	ish
    b5ac:	e853 2f00 	ldrex	r2, [r3]
    b5b0:	f042 0208 	orr.w	r2, r2, #8
    b5b4:	e843 2100 	strex	r1, r2, [r3]
    b5b8:	2900      	cmp	r1, #0
    b5ba:	d1f7      	bne.n	b5ac <smp_public_key_slave+0x58>
    b5bc:	f3bf 8f5b 	dmb	ish
    b5c0:	e020      	b.n	b604 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b5c2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b5c6:	f3bf 8f5b 	dmb	ish
    b5ca:	e853 2f00 	ldrex	r2, [r3]
    b5ce:	f042 0208 	orr.w	r2, r2, #8
    b5d2:	e843 2100 	strex	r1, r2, [r3]
    b5d6:	2900      	cmp	r1, #0
    b5d8:	d1f7      	bne.n	b5ca <smp_public_key_slave+0x76>
    b5da:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b5de:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b5e2:	f3bf 8f5b 	dmb	ish
    b5e6:	e853 2f00 	ldrex	r2, [r3]
    b5ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b5ee:	e843 2100 	strex	r1, r2, [r3]
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d1f7      	bne.n	b5e6 <smp_public_key_slave+0x92>
    b5f6:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b5fa:	4b06      	ldr	r3, [pc, #24]	; (b614 <smp_public_key_slave+0xc0>)
    b5fc:	681b      	ldr	r3, [r3, #0]
    b5fe:	685b      	ldr	r3, [r3, #4]
    b600:	6820      	ldr	r0, [r4, #0]
    b602:	4798      	blx	r3
	return generate_dhkey(smp);
    b604:	4620      	mov	r0, r4
    b606:	f7ff ff8b 	bl	b520 <generate_dhkey>
    b60a:	4603      	mov	r3, r0
}
    b60c:	4618      	mov	r0, r3
    b60e:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b610:	2308      	movs	r3, #8
    b612:	e7fb      	b.n	b60c <smp_public_key_slave+0xb8>
    b614:	20002948 	.word	0x20002948

0000b618 <bt_smp_pkey_ready>:
{
    b618:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    b61a:	b150      	cbz	r0, b632 <bt_smp_pkey_ready+0x1a>
    b61c:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    b61e:	2240      	movs	r2, #64	; 0x40
    b620:	4826      	ldr	r0, [pc, #152]	; (b6bc <bt_smp_pkey_ready+0xa4>)
    b622:	f7f4 fe4d 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    b626:	2201      	movs	r2, #1
    b628:	4b25      	ldr	r3, [pc, #148]	; (b6c0 <bt_smp_pkey_ready+0xa8>)
    b62a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b62c:	2400      	movs	r4, #0
    b62e:	b124      	cbz	r4, b63a <bt_smp_pkey_ready+0x22>
    b630:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    b632:	2200      	movs	r2, #0
    b634:	4b22      	ldr	r3, [pc, #136]	; (b6c0 <bt_smp_pkey_ready+0xa8>)
    b636:	701a      	strb	r2, [r3, #0]
		return;
    b638:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    b63a:	4a22      	ldr	r2, [pc, #136]	; (b6c4 <bt_smp_pkey_ready+0xac>)
    b63c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b640:	fb03 f304 	mul.w	r3, r3, r4
    b644:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    b646:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b648:	f3bf 8f5b 	dmb	ish
    b64c:	58d3      	ldr	r3, [r2, r3]
    b64e:	f3bf 8f5b 	dmb	ish
    b652:	f013 0f40 	tst.w	r3, #64	; 0x40
    b656:	d020      	beq.n	b69a <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b658:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b65c:	fb03 f304 	mul.w	r3, r3, r4
    b660:	58d3      	ldr	r3, [r2, r3]
    b662:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b664:	b9fb      	cbnz	r3, b6a6 <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    b666:	4628      	mov	r0, r5
    b668:	f7fe fcd8 	bl	a01c <sc_send_public_key>
			if (err) {
    b66c:	4601      	mov	r1, r0
    b66e:	b9b0      	cbnz	r0, b69e <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    b670:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b674:	fb03 f304 	mul.w	r3, r3, r4
    b678:	f103 0298 	add.w	r2, r3, #152	; 0x98
    b67c:	4b11      	ldr	r3, [pc, #68]	; (b6c4 <bt_smp_pkey_ready+0xac>)
    b67e:	4413      	add	r3, r2
    b680:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b682:	f3bf 8f5b 	dmb	ish
    b686:	e853 2f00 	ldrex	r2, [r3]
    b68a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    b68e:	e843 2100 	strex	r1, r2, [r3]
    b692:	2900      	cmp	r1, #0
    b694:	d1f7      	bne.n	b686 <bt_smp_pkey_ready+0x6e>
    b696:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b69a:	3401      	adds	r4, #1
    b69c:	e7c7      	b.n	b62e <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    b69e:	4628      	mov	r0, r5
    b6a0:	f7ff fa19 	bl	aad6 <smp_error>
    b6a4:	e7e4      	b.n	b670 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    b6a6:	4628      	mov	r0, r5
    b6a8:	f7ff ff54 	bl	b554 <smp_public_key_slave>
		if (err) {
    b6ac:	4601      	mov	r1, r0
    b6ae:	2800      	cmp	r0, #0
    b6b0:	d0f3      	beq.n	b69a <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    b6b2:	4628      	mov	r0, r5
    b6b4:	f7ff fa0f 	bl	aad6 <smp_error>
    b6b8:	e7ef      	b.n	b69a <bt_smp_pkey_ready+0x82>
    b6ba:	bf00      	nop
    b6bc:	20000900 	.word	0x20000900
    b6c0:	200008fc 	.word	0x200008fc
    b6c4:	20000758 	.word	0x20000758

0000b6c8 <smp_public_key>:
{
    b6c8:	b570      	push	{r4, r5, r6, lr}
    b6ca:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    b6cc:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b6ce:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    b6d2:	2220      	movs	r2, #32
    b6d4:	4631      	mov	r1, r6
    b6d6:	4628      	mov	r0, r5
    b6d8:	f7f4 fdf2 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b6dc:	2220      	movs	r2, #32
    b6de:	18b1      	adds	r1, r6, r2
    b6e0:	f204 1013 	addw	r0, r4, #275	; 0x113
    b6e4:	f7f4 fdec 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b6e8:	2240      	movs	r2, #64	; 0x40
    b6ea:	493d      	ldr	r1, [pc, #244]	; (b7e0 <smp_public_key+0x118>)
    b6ec:	4628      	mov	r0, r5
    b6ee:	f01f f951 	bl	2a994 <memcmp>
    b6f2:	b158      	cbz	r0, b70c <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b6f4:	6823      	ldr	r3, [r4, #0]
    b6f6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b6f8:	2b00      	cmp	r3, #0
    b6fa:	d156      	bne.n	b7aa <smp_public_key+0xe2>
		switch (smp->method) {
    b6fc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b700:	2b03      	cmp	r3, #3
    b702:	d86a      	bhi.n	b7da <smp_public_key+0x112>
    b704:	e8df f003 	tbb	[pc, r3]
    b708:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b70c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b710:	f3bf 8f5b 	dmb	ish
    b714:	e853 2f00 	ldrex	r2, [r3]
    b718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b71c:	e843 2100 	strex	r1, r2, [r3]
    b720:	2900      	cmp	r1, #0
    b722:	d1f7      	bne.n	b714 <smp_public_key+0x4c>
    b724:	f3bf 8f5b 	dmb	ish
    b728:	e7e4      	b.n	b6f4 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    b72a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b72e:	f3bf 8f5b 	dmb	ish
    b732:	e853 2f00 	ldrex	r2, [r3]
    b736:	f042 0208 	orr.w	r2, r2, #8
    b73a:	e843 2100 	strex	r1, r2, [r3]
    b73e:	2900      	cmp	r1, #0
    b740:	d1f7      	bne.n	b732 <smp_public_key+0x6a>
    b742:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    b746:	4620      	mov	r0, r4
    b748:	f7ff feea 	bl	b520 <generate_dhkey>
    b74c:	4603      	mov	r3, r0
    b74e:	e033      	b.n	b7b8 <smp_public_key+0xf0>
			err = display_passkey(smp);
    b750:	4620      	mov	r0, r4
    b752:	f7fe fc0f 	bl	9f74 <display_passkey>
			if (err) {
    b756:	4603      	mov	r3, r0
    b758:	bb70      	cbnz	r0, b7b8 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    b75a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b75e:	f3bf 8f5b 	dmb	ish
    b762:	e853 2f00 	ldrex	r2, [r3]
    b766:	f042 0208 	orr.w	r2, r2, #8
    b76a:	e843 2100 	strex	r1, r2, [r3]
    b76e:	2900      	cmp	r1, #0
    b770:	d1f7      	bne.n	b762 <smp_public_key+0x9a>
    b772:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    b776:	4620      	mov	r0, r4
    b778:	f7fe ffd6 	bl	a728 <smp_send_pairing_confirm>
			if (err) {
    b77c:	4603      	mov	r3, r0
    b77e:	b9d8      	cbnz	r0, b7b8 <smp_public_key+0xf0>
    b780:	e7e1      	b.n	b746 <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b782:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b786:	f3bf 8f5b 	dmb	ish
    b78a:	e853 2f00 	ldrex	r2, [r3]
    b78e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b792:	e843 2100 	strex	r1, r2, [r3]
    b796:	2900      	cmp	r1, #0
    b798:	d1f7      	bne.n	b78a <smp_public_key+0xc2>
    b79a:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b79e:	4b11      	ldr	r3, [pc, #68]	; (b7e4 <smp_public_key+0x11c>)
    b7a0:	681b      	ldr	r3, [r3, #0]
    b7a2:	685b      	ldr	r3, [r3, #4]
    b7a4:	6820      	ldr	r0, [r4, #0]
    b7a6:	4798      	blx	r3
			break;
    b7a8:	e7cd      	b.n	b746 <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    b7aa:	4b0f      	ldr	r3, [pc, #60]	; (b7e8 <smp_public_key+0x120>)
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	b12b      	cbz	r3, b7bc <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    b7b0:	4620      	mov	r0, r4
    b7b2:	f7ff fecf 	bl	b554 <smp_public_key_slave>
    b7b6:	4603      	mov	r3, r0
}
    b7b8:	4618      	mov	r0, r3
    b7ba:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b7bc:	34a0      	adds	r4, #160	; 0xa0
    b7be:	f3bf 8f5b 	dmb	ish
    b7c2:	e854 3f00 	ldrex	r3, [r4]
    b7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7ca:	e844 3200 	strex	r2, r3, [r4]
    b7ce:	2a00      	cmp	r2, #0
    b7d0:	d1f7      	bne.n	b7c2 <smp_public_key+0xfa>
    b7d2:	f3bf 8f5b 	dmb	ish
		return 0;
    b7d6:	2300      	movs	r3, #0
    b7d8:	e7ee      	b.n	b7b8 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    b7da:	2308      	movs	r3, #8
    b7dc:	e7ec      	b.n	b7b8 <smp_public_key+0xf0>
    b7de:	bf00      	nop
    b7e0:	0002f6cc 	.word	0x0002f6cc
    b7e4:	20002948 	.word	0x20002948
    b7e8:	200008fc 	.word	0x200008fc

0000b7ec <smp_signing_info>:
{
    b7ec:	b570      	push	{r4, r5, r6, lr}
    b7ee:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b7f0:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b7f2:	f3bf 8f5b 	dmb	ish
    b7f6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b7fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b7fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b802:	d111      	bne.n	b828 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    b804:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b808:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b80c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b810:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b812:	b902      	cbnz	r2, b816 <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b814:	b1ab      	cbz	r3, b842 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    b816:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b81a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b81e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b822:	b193      	cbz	r3, b84a <smp_signing_info+0x5e>
	return 0;
    b824:	2000      	movs	r0, #0
}
    b826:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    b828:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    b82a:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b82e:	2010      	movs	r0, #16
    b830:	f000 ff8e 	bl	c750 <bt_keys_get_type>
		if (!keys) {
    b834:	b178      	cbz	r0, b856 <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    b836:	2210      	movs	r2, #16
    b838:	4631      	mov	r1, r6
    b83a:	305c      	adds	r0, #92	; 0x5c
    b83c:	f7f4 fd40 	bl	2c0 <memcpy>
    b840:	e7e0      	b.n	b804 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    b842:	4620      	mov	r0, r4
    b844:	f7ff fac4 	bl	add0 <bt_smp_distribute_keys>
    b848:	e7e5      	b.n	b816 <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    b84a:	2100      	movs	r1, #0
    b84c:	4620      	mov	r0, r4
    b84e:	f7ff f93e 	bl	aace <smp_pairing_complete>
	return 0;
    b852:	2000      	movs	r0, #0
    b854:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b856:	2008      	movs	r0, #8
    b858:	bd70      	pop	{r4, r5, r6, pc}

0000b85a <smp_ident_info>:
{
    b85a:	b538      	push	{r3, r4, r5, lr}
    b85c:	4604      	mov	r4, r0
    b85e:	f3bf 8f5b 	dmb	ish
    b862:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b866:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b86a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b86e:	d00b      	beq.n	b888 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    b870:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b872:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    b874:	3148      	adds	r1, #72	; 0x48
    b876:	2002      	movs	r0, #2
    b878:	f000 ff6a 	bl	c750 <bt_keys_get_type>
		if (!keys) {
    b87c:	b198      	cbz	r0, b8a6 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    b87e:	2210      	movs	r2, #16
    b880:	4629      	mov	r1, r5
    b882:	3030      	adds	r0, #48	; 0x30
    b884:	f7f4 fd1c 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    b888:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b88a:	f3bf 8f5b 	dmb	ish
    b88e:	e854 3f00 	ldrex	r3, [r4]
    b892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b896:	e844 3200 	strex	r2, r3, [r4]
    b89a:	2a00      	cmp	r2, #0
    b89c:	d1f7      	bne.n	b88e <smp_ident_info+0x34>
    b89e:	f3bf 8f5b 	dmb	ish
	return 0;
    b8a2:	2000      	movs	r0, #0
    b8a4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b8a6:	2008      	movs	r0, #8
}
    b8a8:	bd38      	pop	{r3, r4, r5, pc}

0000b8aa <smp_master_ident>:
{
    b8aa:	b570      	push	{r4, r5, r6, lr}
    b8ac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b8ae:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b8b0:	f3bf 8f5b 	dmb	ish
    b8b4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b8b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b8bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b8c0:	d116      	bne.n	b8f0 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b8c2:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b8c6:	f013 0f02 	tst.w	r3, #2
    b8ca:	d127      	bne.n	b91c <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b8cc:	f013 0f04 	tst.w	r3, #4
    b8d0:	d133      	bne.n	b93a <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b8d2:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b8d4:	b91b      	cbnz	r3, b8de <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b8d6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d03c      	beq.n	b958 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    b8de:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b8e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b8ea:	b3cb      	cbz	r3, b960 <smp_master_ident+0xb6>
	return 0;
    b8ec:	2000      	movs	r0, #0
}
    b8ee:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    b8f0:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b8f2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b8f6:	2004      	movs	r0, #4
    b8f8:	f000 ff2a 	bl	c750 <bt_keys_get_type>
		if (!keys) {
    b8fc:	b3b0      	cbz	r0, b96c <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    b8fe:	8832      	ldrh	r2, [r6, #0]
    b900:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    b902:	f8d6 1002 	ldr.w	r1, [r6, #2]
    b906:	f8d6 2006 	ldr.w	r2, [r6, #6]
    b90a:	6101      	str	r1, [r0, #16]
    b90c:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    b90e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b912:	f023 0301 	bic.w	r3, r3, #1
    b916:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    b91a:	e7d2      	b.n	b8c2 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b91c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b920:	f3bf 8f5b 	dmb	ish
    b924:	e853 2f00 	ldrex	r2, [r3]
    b928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b92c:	e843 2100 	strex	r1, r2, [r3]
    b930:	2900      	cmp	r1, #0
    b932:	d1f7      	bne.n	b924 <smp_master_ident+0x7a>
    b934:	f3bf 8f5b 	dmb	ish
    b938:	e7cb      	b.n	b8d2 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b93a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b93e:	f3bf 8f5b 	dmb	ish
    b942:	e853 2f00 	ldrex	r2, [r3]
    b946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    b94a:	e843 2100 	strex	r1, r2, [r3]
    b94e:	2900      	cmp	r1, #0
    b950:	d1f7      	bne.n	b942 <smp_master_ident+0x98>
    b952:	f3bf 8f5b 	dmb	ish
    b956:	e7bc      	b.n	b8d2 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    b958:	4620      	mov	r0, r4
    b95a:	f7ff fa39 	bl	add0 <bt_smp_distribute_keys>
    b95e:	e7be      	b.n	b8de <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    b960:	2100      	movs	r1, #0
    b962:	4620      	mov	r0, r4
    b964:	f7ff f8b3 	bl	aace <smp_pairing_complete>
	return 0;
    b968:	2000      	movs	r0, #0
    b96a:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b96c:	2008      	movs	r0, #8
    b96e:	bd70      	pop	{r4, r5, r6, pc}

0000b970 <smp_encrypt_info>:
{
    b970:	b538      	push	{r3, r4, r5, lr}
    b972:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b974:	f3bf 8f5b 	dmb	ish
    b978:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b97c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b980:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b984:	d00b      	beq.n	b99e <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    b986:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b988:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b98a:	3148      	adds	r1, #72	; 0x48
    b98c:	2004      	movs	r0, #4
    b98e:	f000 fedf 	bl	c750 <bt_keys_get_type>
		if (!keys) {
    b992:	b198      	cbz	r0, b9bc <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    b994:	2210      	movs	r2, #16
    b996:	4629      	mov	r1, r5
    b998:	301a      	adds	r0, #26
    b99a:	f7f4 fc91 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    b99e:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b9a0:	f3bf 8f5b 	dmb	ish
    b9a4:	e854 3f00 	ldrex	r3, [r4]
    b9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b9ac:	e844 3200 	strex	r2, r3, [r4]
    b9b0:	2a00      	cmp	r2, #0
    b9b2:	d1f7      	bne.n	b9a4 <smp_encrypt_info+0x34>
    b9b4:	f3bf 8f5b 	dmb	ish
	return 0;
    b9b8:	2000      	movs	r0, #0
    b9ba:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b9bc:	2008      	movs	r0, #8
}
    b9be:	bd38      	pop	{r3, r4, r5, pc}

0000b9c0 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    b9c0:	7883      	ldrb	r3, [r0, #2]
    b9c2:	b103      	cbz	r3, b9c6 <smp_check_complete+0x6>
    b9c4:	4770      	bx	lr
{
    b9c6:	b510      	push	{r4, lr}
    b9c8:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    b9ca:	2106      	movs	r1, #6
    b9cc:	f7fb ffa1 	bl	7912 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    b9d0:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b9d4:	ea21 0104 	bic.w	r1, r1, r4
    b9d8:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    b9dc:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    b9e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b9e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b9e8:	b103      	cbz	r3, b9ec <smp_check_complete+0x2c>
    b9ea:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    b9ec:	2100      	movs	r1, #0
    b9ee:	f7ff f86e 	bl	aace <smp_pairing_complete>
    b9f2:	e7fa      	b.n	b9ea <smp_check_complete+0x2a>

0000b9f4 <sign_info_sent>:
{
    b9f4:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    b9f6:	2104      	movs	r1, #4
    b9f8:	f7ff ffe2 	bl	b9c0 <smp_check_complete>
    b9fc:	bd08      	pop	{r3, pc}

0000b9fe <ident_sent>:
{
    b9fe:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    ba00:	2101      	movs	r1, #1
    ba02:	f7ff ffdd 	bl	b9c0 <smp_check_complete>
    ba06:	bd08      	pop	{r3, pc}

0000ba08 <smp_ident_addr_info>:
{
    ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ba0c:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ba0e:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ba10:	782b      	ldrb	r3, [r5, #0]
    ba12:	b153      	cbz	r3, ba2a <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    ba14:	79ab      	ldrb	r3, [r5, #6]
    ba16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ba1a:	2bc0      	cmp	r3, #192	; 0xc0
    ba1c:	bf14      	ite	ne
    ba1e:	2300      	movne	r3, #0
    ba20:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    ba22:	b923      	cbnz	r3, ba2e <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    ba24:	200a      	movs	r0, #10
    ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    ba2a:	2301      	movs	r3, #1
    ba2c:	e7f9      	b.n	ba22 <smp_ident_addr_info+0x1a>
    ba2e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba30:	f3bf 8f5b 	dmb	ish
    ba34:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ba38:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba40:	d119      	bne.n	ba76 <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ba42:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    ba46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ba4a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ba4e:	f013 0f04 	tst.w	r3, #4
    ba52:	d14f      	bne.n	baf4 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba54:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ba56:	b91b      	cbnz	r3, ba60 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba58:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	d058      	beq.n	bb12 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    ba60:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    ba64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	d054      	beq.n	bb1a <smp_ident_addr_info+0x112>
	return 0;
    ba70:	2000      	movs	r0, #0
}
    ba72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    ba76:	f106 0848 	add.w	r8, r6, #72	; 0x48
    ba7a:	4641      	mov	r1, r8
    ba7c:	2002      	movs	r0, #2
    ba7e:	f000 fe67 	bl	c750 <bt_keys_get_type>
		if (!keys) {
    ba82:	4681      	mov	r9, r0
    ba84:	2800      	cmp	r0, #0
    ba86:	d04f      	beq.n	bb28 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    ba88:	78f3      	ldrb	r3, [r6, #3]
    ba8a:	bb43      	cbnz	r3, bade <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    ba8c:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ba90:	780b      	ldrb	r3, [r1, #0]
    ba92:	2b01      	cmp	r3, #1
    ba94:	d026      	beq.n	bae4 <smp_ident_addr_info+0xdc>
		return false;
    ba96:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    ba98:	2f00      	cmp	r7, #0
    ba9a:	d0d2      	beq.n	ba42 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    ba9c:	2206      	movs	r2, #6
    ba9e:	3101      	adds	r1, #1
    baa0:	f109 0040 	add.w	r0, r9, #64	; 0x40
    baa4:	f7f4 fc0c 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    baa8:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    baac:	b13b      	cbz	r3, babe <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    baae:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    bab2:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    bab6:	2fc0      	cmp	r7, #192	; 0xc0
    bab8:	bf14      	ite	ne
    baba:	2700      	movne	r7, #0
    babc:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    babe:	2f00      	cmp	r7, #0
    bac0:	d1bf      	bne.n	ba42 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    bac2:	2207      	movs	r2, #7
    bac4:	4629      	mov	r1, r5
    bac6:	4648      	mov	r0, r9
    bac8:	f7f4 fbfa 	bl	2c0 <memcpy>
    bacc:	2207      	movs	r2, #7
    bace:	4629      	mov	r1, r5
    bad0:	4640      	mov	r0, r8
    bad2:	f7f4 fbf5 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    bad6:	4630      	mov	r0, r6
    bad8:	f7fa fba4 	bl	6224 <bt_conn_identity_resolved>
    badc:	e7b1      	b.n	ba42 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    bade:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    bae2:	e7d5      	b.n	ba90 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    bae4:	798f      	ldrb	r7, [r1, #6]
    bae6:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    baea:	2f40      	cmp	r7, #64	; 0x40
    baec:	bf14      	ite	ne
    baee:	2700      	movne	r7, #0
    baf0:	2701      	moveq	r7, #1
    baf2:	e7d1      	b.n	ba98 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    baf4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    baf8:	f3bf 8f5b 	dmb	ish
    bafc:	e853 2f00 	ldrex	r2, [r3]
    bb00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bb04:	e843 2100 	strex	r1, r2, [r3]
    bb08:	2900      	cmp	r1, #0
    bb0a:	d1f7      	bne.n	bafc <smp_ident_addr_info+0xf4>
    bb0c:	f3bf 8f5b 	dmb	ish
    bb10:	e7a0      	b.n	ba54 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    bb12:	4620      	mov	r0, r4
    bb14:	f7ff f95c 	bl	add0 <bt_smp_distribute_keys>
    bb18:	e7a2      	b.n	ba60 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    bb1a:	2100      	movs	r1, #0
    bb1c:	4620      	mov	r0, r4
    bb1e:	f7fe ffd6 	bl	aace <smp_pairing_complete>
	return 0;
    bb22:	2000      	movs	r0, #0
    bb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    bb28:	2008      	movs	r0, #8
    bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000bb30 <legacy_request_tk>:
{
    bb30:	b570      	push	{r4, r5, r6, lr}
    bb32:	b082      	sub	sp, #8
    bb34:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bb36:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    bb38:	f105 0048 	add.w	r0, r5, #72	; 0x48
    bb3c:	f000 fdea 	bl	c714 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bb40:	b168      	cbz	r0, bb5e <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb42:	f3bf 8f5b 	dmb	ish
    bb46:	6883      	ldr	r3, [r0, #8]
    bb48:	f3bf 8f5b 	dmb	ish
    bb4c:	f013 0f01 	tst.w	r3, #1
    bb50:	d005      	beq.n	bb5e <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    bb52:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bb56:	b913      	cbnz	r3, bb5e <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    bb58:	2008      	movs	r0, #8
}
    bb5a:	b002      	add	sp, #8
    bb5c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    bb5e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bb62:	2b01      	cmp	r3, #1
    bb64:	d025      	beq.n	bbb2 <legacy_request_tk+0x82>
    bb66:	2b00      	cmp	r3, #0
    bb68:	d037      	beq.n	bbda <legacy_request_tk+0xaa>
    bb6a:	2b02      	cmp	r3, #2
    bb6c:	d001      	beq.n	bb72 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    bb6e:	2008      	movs	r0, #8
    bb70:	e7f3      	b.n	bb5a <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    bb72:	2104      	movs	r1, #4
    bb74:	eb0d 0001 	add.w	r0, sp, r1
    bb78:	f004 ffb6 	bl	10ae8 <bt_rand>
    bb7c:	b108      	cbz	r0, bb82 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    bb7e:	2008      	movs	r0, #8
    bb80:	e7eb      	b.n	bb5a <legacy_request_tk+0x2a>
		passkey %= 1000000;
    bb82:	9b01      	ldr	r3, [sp, #4]
    bb84:	4916      	ldr	r1, [pc, #88]	; (bbe0 <legacy_request_tk+0xb0>)
    bb86:	fba1 2103 	umull	r2, r1, r1, r3
    bb8a:	0c89      	lsrs	r1, r1, #18
    bb8c:	4a15      	ldr	r2, [pc, #84]	; (bbe4 <legacy_request_tk+0xb4>)
    bb8e:	fb02 3111 	mls	r1, r2, r1, r3
    bb92:	ae02      	add	r6, sp, #8
    bb94:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    bb98:	4b13      	ldr	r3, [pc, #76]	; (bbe8 <legacy_request_tk+0xb8>)
    bb9a:	681b      	ldr	r3, [r3, #0]
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	4628      	mov	r0, r5
    bba0:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    bba2:	2204      	movs	r2, #4
    bba4:	4631      	mov	r1, r6
    bba6:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    bbaa:	f7f4 fb89 	bl	2c0 <memcpy>
	return 0;
    bbae:	2000      	movs	r0, #0
		break;
    bbb0:	e7d3      	b.n	bb5a <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bbb2:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbb4:	f3bf 8f5b 	dmb	ish
    bbb8:	e854 3f00 	ldrex	r3, [r4]
    bbbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bbc0:	e844 3200 	strex	r2, r3, [r4]
    bbc4:	2a00      	cmp	r2, #0
    bbc6:	d1f7      	bne.n	bbb8 <legacy_request_tk+0x88>
    bbc8:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    bbcc:	4b06      	ldr	r3, [pc, #24]	; (bbe8 <legacy_request_tk+0xb8>)
    bbce:	681b      	ldr	r3, [r3, #0]
    bbd0:	685b      	ldr	r3, [r3, #4]
    bbd2:	4628      	mov	r0, r5
    bbd4:	4798      	blx	r3
	return 0;
    bbd6:	2000      	movs	r0, #0
		break;
    bbd8:	e7bf      	b.n	bb5a <legacy_request_tk+0x2a>
	return 0;
    bbda:	2000      	movs	r0, #0
    bbdc:	e7bd      	b.n	bb5a <legacy_request_tk+0x2a>
    bbde:	bf00      	nop
    bbe0:	431bde83 	.word	0x431bde83
    bbe4:	000f4240 	.word	0x000f4240
    bbe8:	20002948 	.word	0x20002948

0000bbec <legacy_pairing_rsp>:
{
    bbec:	b538      	push	{r3, r4, r5, lr}
    bbee:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    bbf0:	f7fe f90a 	bl	9e08 <legacy_get_pair_method>
    bbf4:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    bbf8:	bb10      	cbnz	r0, bc40 <legacy_pairing_rsp+0x54>
    bbfa:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbfc:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc00:	f3bf 8f5b 	dmb	ish
    bc04:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bc08:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    bc0c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bc10:	d016      	beq.n	bc40 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bc12:	4b24      	ldr	r3, [pc, #144]	; (bca4 <legacy_pairing_rsp+0xb8>)
    bc14:	681b      	ldr	r3, [r3, #0]
    bc16:	b19b      	cbz	r3, bc40 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    bc18:	691b      	ldr	r3, [r3, #16]
    bc1a:	b18b      	cbz	r3, bc40 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc1c:	f3bf 8f5b 	dmb	ish
    bc20:	e852 3f00 	ldrex	r3, [r2]
    bc24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bc28:	e842 3100 	strex	r1, r3, [r2]
    bc2c:	2900      	cmp	r1, #0
    bc2e:	d1f7      	bne.n	bc20 <legacy_pairing_rsp+0x34>
    bc30:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bc34:	4b1b      	ldr	r3, [pc, #108]	; (bca4 <legacy_pairing_rsp+0xb8>)
    bc36:	681b      	ldr	r3, [r3, #0]
    bc38:	691b      	ldr	r3, [r3, #16]
    bc3a:	6828      	ldr	r0, [r5, #0]
    bc3c:	4798      	blx	r3
		return 0;
    bc3e:	e004      	b.n	bc4a <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    bc40:	4628      	mov	r0, r5
    bc42:	f7ff ff75 	bl	bb30 <legacy_request_tk>
	if (ret) {
    bc46:	4604      	mov	r4, r0
    bc48:	b108      	cbz	r0, bc4e <legacy_pairing_rsp+0x62>
}
    bc4a:	4620      	mov	r0, r4
    bc4c:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bc4e:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc52:	f3bf 8f5b 	dmb	ish
    bc56:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    bc5a:	f3bf 8f5b 	dmb	ish
    bc5e:	f412 7f00 	tst.w	r2, #512	; 0x200
    bc62:	d00c      	beq.n	bc7e <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc64:	f3bf 8f5b 	dmb	ish
    bc68:	e853 2f00 	ldrex	r2, [r3]
    bc6c:	f042 0201 	orr.w	r2, r2, #1
    bc70:	e843 2100 	strex	r1, r2, [r3]
    bc74:	2900      	cmp	r1, #0
    bc76:	d1f7      	bne.n	bc68 <legacy_pairing_rsp+0x7c>
    bc78:	f3bf 8f5b 	dmb	ish
	return 0;
    bc7c:	e7e5      	b.n	bc4a <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bc7e:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    bc82:	f3bf 8f5b 	dmb	ish
    bc86:	e853 2f00 	ldrex	r2, [r3]
    bc8a:	f042 0208 	orr.w	r2, r2, #8
    bc8e:	e843 2100 	strex	r1, r2, [r3]
    bc92:	2900      	cmp	r1, #0
    bc94:	d1f7      	bne.n	bc86 <legacy_pairing_rsp+0x9a>
    bc96:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    bc9a:	4628      	mov	r0, r5
    bc9c:	f7fe fdd8 	bl	a850 <legacy_send_pairing_confirm>
    bca0:	4604      	mov	r4, r0
    bca2:	e7d2      	b.n	bc4a <legacy_pairing_rsp+0x5e>
    bca4:	20002948 	.word	0x20002948

0000bca8 <smp_pairing_rsp>:
{
    bca8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    bcaa:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bcac:	78eb      	ldrb	r3, [r5, #3]
    bcae:	3b07      	subs	r3, #7
    bcb0:	b2db      	uxtb	r3, r3
    bcb2:	2b09      	cmp	r3, #9
    bcb4:	d902      	bls.n	bcbc <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bcb6:	2506      	movs	r5, #6
}
    bcb8:	4628      	mov	r0, r5
    bcba:	bd70      	pop	{r4, r5, r6, pc}
    bcbc:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    bcbe:	792b      	ldrb	r3, [r5, #4]
    bcc0:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    bcc4:	4013      	ands	r3, r2
    bcc6:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    bcca:	796b      	ldrb	r3, [r5, #5]
    bccc:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    bcd0:	4013      	ands	r3, r2
    bcd2:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bcd6:	2302      	movs	r3, #2
    bcd8:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    bcdc:	2206      	movs	r2, #6
    bcde:	4629      	mov	r1, r5
    bce0:	30ad      	adds	r0, #173	; 0xad
    bce2:	f7f4 faed 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bce6:	78ab      	ldrb	r3, [r5, #2]
    bce8:	f013 0f08 	tst.w	r3, #8
    bcec:	d004      	beq.n	bcf8 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bcee:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bcf2:	f013 0f08 	tst.w	r3, #8
    bcf6:	d148      	bne.n	bd8a <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bcf8:	78ab      	ldrb	r3, [r5, #2]
    bcfa:	f013 0f20 	tst.w	r3, #32
    bcfe:	d004      	beq.n	bd0a <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bd00:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bd04:	f013 0f20 	tst.w	r3, #32
    bd08:	d14e      	bne.n	bda8 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bd0a:	78ab      	ldrb	r3, [r5, #2]
    bd0c:	f013 0f01 	tst.w	r3, #1
    bd10:	d004      	beq.n	bd1c <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bd12:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bd16:	f013 0f01 	tst.w	r3, #1
    bd1a:	d154      	bne.n	bdc6 <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bd1c:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd20:	f3bf 8f5b 	dmb	ish
    bd24:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bd28:	f3bf 8f5b 	dmb	ish
    bd2c:	f013 0f20 	tst.w	r3, #32
    bd30:	d058      	beq.n	bde4 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    bd32:	7829      	ldrb	r1, [r5, #0]
    bd34:	4620      	mov	r0, r4
    bd36:	f7fe f835 	bl	9da4 <get_pair_method>
    bd3a:	4605      	mov	r5, r0
    bd3c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    bd40:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    bd44:	f003 0304 	and.w	r3, r3, #4
    bd48:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    bd4c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bd50:	f003 0306 	and.w	r3, r3, #6
    bd54:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    bd58:	2800      	cmp	r0, #0
    bd5a:	d049      	beq.n	bdf0 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    bd5c:	4b3c      	ldr	r3, [pc, #240]	; (be50 <smp_pairing_rsp+0x1a8>)
    bd5e:	781b      	ldrb	r3, [r3, #0]
    bd60:	2b00      	cmp	r3, #0
    bd62:	d067      	beq.n	be34 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bd64:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd68:	f3bf 8f5b 	dmb	ish
    bd6c:	e853 2f00 	ldrex	r2, [r3]
    bd70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    bd74:	e843 2100 	strex	r1, r2, [r3]
    bd78:	2900      	cmp	r1, #0
    bd7a:	d1f7      	bne.n	bd6c <smp_pairing_rsp+0xc4>
    bd7c:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    bd80:	4620      	mov	r0, r4
    bd82:	f7fe f94b 	bl	a01c <sc_send_public_key>
    bd86:	4605      	mov	r5, r0
    bd88:	e796      	b.n	bcb8 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bd8a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd8e:	f3bf 8f5b 	dmb	ish
    bd92:	e853 2f00 	ldrex	r2, [r3]
    bd96:	f042 0220 	orr.w	r2, r2, #32
    bd9a:	e843 2100 	strex	r1, r2, [r3]
    bd9e:	2900      	cmp	r1, #0
    bda0:	d1f7      	bne.n	bd92 <smp_pairing_rsp+0xea>
    bda2:	f3bf 8f5b 	dmb	ish
    bda6:	e7a7      	b.n	bcf8 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bda8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bdac:	f3bf 8f5b 	dmb	ish
    bdb0:	e853 2f00 	ldrex	r2, [r3]
    bdb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bdb8:	e843 2100 	strex	r1, r2, [r3]
    bdbc:	2900      	cmp	r1, #0
    bdbe:	d1f7      	bne.n	bdb0 <smp_pairing_rsp+0x108>
    bdc0:	f3bf 8f5b 	dmb	ish
    bdc4:	e7a1      	b.n	bd0a <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bdc6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bdca:	f3bf 8f5b 	dmb	ish
    bdce:	e853 2f00 	ldrex	r2, [r3]
    bdd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bdd6:	e843 2100 	strex	r1, r2, [r3]
    bdda:	2900      	cmp	r1, #0
    bddc:	d1f7      	bne.n	bdce <smp_pairing_rsp+0x126>
    bdde:	f3bf 8f5b 	dmb	ish
    bde2:	e79b      	b.n	bd1c <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    bde4:	7829      	ldrb	r1, [r5, #0]
    bde6:	4620      	mov	r0, r4
    bde8:	f7ff ff00 	bl	bbec <legacy_pairing_rsp>
    bdec:	4605      	mov	r5, r0
    bdee:	e763      	b.n	bcb8 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdf0:	f3bf 8f5b 	dmb	ish
    bdf4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bdf8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bdfc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    be00:	d0ac      	beq.n	bd5c <smp_pairing_rsp+0xb4>
    be02:	4b14      	ldr	r3, [pc, #80]	; (be54 <smp_pairing_rsp+0x1ac>)
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	2b00      	cmp	r3, #0
    be08:	d0a8      	beq.n	bd5c <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    be0a:	691b      	ldr	r3, [r3, #16]
    be0c:	2b00      	cmp	r3, #0
    be0e:	d0a5      	beq.n	bd5c <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be10:	f3bf 8f5b 	dmb	ish
    be14:	e856 3f00 	ldrex	r3, [r6]
    be18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be1c:	e846 3200 	strex	r2, r3, [r6]
    be20:	2a00      	cmp	r2, #0
    be22:	d1f7      	bne.n	be14 <smp_pairing_rsp+0x16c>
    be24:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    be28:	4b0a      	ldr	r3, [pc, #40]	; (be54 <smp_pairing_rsp+0x1ac>)
    be2a:	681b      	ldr	r3, [r3, #0]
    be2c:	691b      	ldr	r3, [r3, #16]
    be2e:	6820      	ldr	r0, [r4, #0]
    be30:	4798      	blx	r3
			return 0;
    be32:	e741      	b.n	bcb8 <smp_pairing_rsp+0x10>
    be34:	f3bf 8f5b 	dmb	ish
    be38:	e856 3f00 	ldrex	r3, [r6]
    be3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be40:	e846 3200 	strex	r2, r3, [r6]
    be44:	2a00      	cmp	r2, #0
    be46:	d1f7      	bne.n	be38 <smp_pairing_rsp+0x190>
    be48:	f3bf 8f5b 	dmb	ish
		return 0;
    be4c:	2500      	movs	r5, #0
    be4e:	e733      	b.n	bcb8 <smp_pairing_rsp+0x10>
    be50:	200008fc 	.word	0x200008fc
    be54:	20002948 	.word	0x20002948

0000be58 <legacy_pairing_req>:
{
    be58:	b538      	push	{r3, r4, r5, lr}
    be5a:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    be5c:	f7fd ffd4 	bl	9e08 <legacy_get_pair_method>
    be60:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    be64:	bb10      	cbnz	r0, beac <legacy_pairing_req+0x54>
    be66:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be68:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be6c:	f3bf 8f5b 	dmb	ish
    be70:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    be74:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    be78:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    be7c:	d116      	bne.n	beac <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be7e:	4b18      	ldr	r3, [pc, #96]	; (bee0 <legacy_pairing_req+0x88>)
    be80:	681b      	ldr	r3, [r3, #0]
    be82:	b19b      	cbz	r3, beac <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    be84:	691b      	ldr	r3, [r3, #16]
    be86:	b18b      	cbz	r3, beac <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be88:	f3bf 8f5b 	dmb	ish
    be8c:	e852 3f00 	ldrex	r3, [r2]
    be90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be94:	e842 3100 	strex	r1, r3, [r2]
    be98:	2900      	cmp	r1, #0
    be9a:	d1f7      	bne.n	be8c <legacy_pairing_req+0x34>
    be9c:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bea0:	4b0f      	ldr	r3, [pc, #60]	; (bee0 <legacy_pairing_req+0x88>)
    bea2:	681b      	ldr	r3, [r3, #0]
    bea4:	691b      	ldr	r3, [r3, #16]
    bea6:	6828      	ldr	r0, [r5, #0]
    bea8:	4798      	blx	r3
		return 0;
    beaa:	e004      	b.n	beb6 <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    beac:	4628      	mov	r0, r5
    beae:	f7fe f8d9 	bl	a064 <send_pairing_rsp>
	if (ret) {
    beb2:	4604      	mov	r4, r0
    beb4:	b108      	cbz	r0, beba <legacy_pairing_req+0x62>
}
    beb6:	4620      	mov	r0, r4
    beb8:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    beba:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    bebe:	f3bf 8f5b 	dmb	ish
    bec2:	e853 2f00 	ldrex	r2, [r3]
    bec6:	f042 0208 	orr.w	r2, r2, #8
    beca:	e843 2100 	strex	r1, r2, [r3]
    bece:	2900      	cmp	r1, #0
    bed0:	d1f7      	bne.n	bec2 <legacy_pairing_req+0x6a>
    bed2:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    bed6:	4628      	mov	r0, r5
    bed8:	f7ff fe2a 	bl	bb30 <legacy_request_tk>
    bedc:	4604      	mov	r4, r0
    bede:	e7ea      	b.n	beb6 <legacy_pairing_req+0x5e>
    bee0:	20002948 	.word	0x20002948

0000bee4 <smp_pairing_req>:
{
    bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    bee6:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bee8:	78f3      	ldrb	r3, [r6, #3]
    beea:	3b07      	subs	r3, #7
    beec:	b2db      	uxtb	r3, r3
    beee:	2b09      	cmp	r3, #9
    bef0:	d902      	bls.n	bef8 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bef2:	2506      	movs	r5, #6
}
    bef4:	4628      	mov	r0, r5
    bef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bef8:	4604      	mov	r4, r0
	ret = smp_init(smp);
    befa:	f7fe f81c 	bl	9f36 <smp_init>
	if (ret) {
    befe:	b108      	cbz	r0, bf04 <smp_pairing_req+0x20>
		return ret;
    bf00:	b2c5      	uxtb	r5, r0
    bf02:	e7f7      	b.n	bef4 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    bf04:	2301      	movs	r3, #1
    bf06:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    bf0a:	2206      	movs	r2, #6
    bf0c:	4631      	mov	r1, r6
    bf0e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    bf12:	f7f4 f9d5 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bf16:	2302      	movs	r3, #2
    bf18:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    bf1c:	78b0      	ldrb	r0, [r6, #2]
    bf1e:	f7fd ff97 	bl	9e50 <get_auth>
    bf22:	4605      	mov	r5, r0
    bf24:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    bf28:	f7fd ff14 	bl	9d54 <get_io_capa>
    bf2c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    bf30:	2300      	movs	r3, #0
    bf32:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    bf36:	2310      	movs	r3, #16
    bf38:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    bf3c:	7933      	ldrb	r3, [r6, #4]
    bf3e:	f003 0307 	and.w	r3, r3, #7
    bf42:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    bf46:	7973      	ldrb	r3, [r6, #5]
    bf48:	f003 0305 	and.w	r3, r3, #5
    bf4c:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf50:	f015 0f08 	tst.w	r5, #8
    bf54:	d003      	beq.n	bf5e <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bf56:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf58:	f013 0f08 	tst.w	r3, #8
    bf5c:	d15b      	bne.n	c016 <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf5e:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bf62:	f013 0f20 	tst.w	r3, #32
    bf66:	d003      	beq.n	bf70 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bf68:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf6a:	f013 0f20 	tst.w	r3, #32
    bf6e:	d16d      	bne.n	c04c <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    bf70:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    bf74:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    bf78:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    bf7c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf80:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bf84:	f013 0f01 	tst.w	r3, #1
    bf88:	d003      	beq.n	bf92 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bf8a:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf8c:	f013 0f01 	tst.w	r3, #1
    bf90:	d16b      	bne.n	c06a <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    bf92:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    bf96:	f3bf 8f5b 	dmb	ish
    bf9a:	e857 3f00 	ldrex	r3, [r7]
    bf9e:	f043 0308 	orr.w	r3, r3, #8
    bfa2:	e847 3200 	strex	r2, r3, [r7]
    bfa6:	2a00      	cmp	r2, #0
    bfa8:	d1f7      	bne.n	bf9a <smp_pairing_req+0xb6>
    bfaa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bfae:	f3bf 8f5b 	dmb	ish
    bfb2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bfb6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bfba:	f013 0f20 	tst.w	r3, #32
    bfbe:	d063      	beq.n	c088 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    bfc0:	7831      	ldrb	r1, [r6, #0]
    bfc2:	4620      	mov	r0, r4
    bfc4:	f7fd feee 	bl	9da4 <get_pair_method>
    bfc8:	4605      	mov	r5, r0
    bfca:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    bfce:	2800      	cmp	r0, #0
    bfd0:	d160      	bne.n	c094 <smp_pairing_req+0x1b0>
    bfd2:	f3bf 8f5b 	dmb	ish
    bfd6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bfda:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bfde:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bfe2:	d157      	bne.n	c094 <smp_pairing_req+0x1b0>
    bfe4:	4b35      	ldr	r3, [pc, #212]	; (c0bc <smp_pairing_req+0x1d8>)
    bfe6:	681b      	ldr	r3, [r3, #0]
    bfe8:	2b00      	cmp	r3, #0
    bfea:	d053      	beq.n	c094 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    bfec:	691b      	ldr	r3, [r3, #16]
    bfee:	2b00      	cmp	r3, #0
    bff0:	d050      	beq.n	c094 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bff2:	f3bf 8f5b 	dmb	ish
    bff6:	e857 3f00 	ldrex	r3, [r7]
    bffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bffe:	e847 3200 	strex	r2, r3, [r7]
    c002:	2a00      	cmp	r2, #0
    c004:	d1f7      	bne.n	bff6 <smp_pairing_req+0x112>
    c006:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c00a:	4b2c      	ldr	r3, [pc, #176]	; (c0bc <smp_pairing_req+0x1d8>)
    c00c:	681b      	ldr	r3, [r3, #0]
    c00e:	691b      	ldr	r3, [r3, #16]
    c010:	6820      	ldr	r0, [r4, #0]
    c012:	4798      	blx	r3
			return 0;
    c014:	e76e      	b.n	bef4 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c016:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c01a:	f3bf 8f5b 	dmb	ish
    c01e:	e853 2f00 	ldrex	r2, [r3]
    c022:	f042 0220 	orr.w	r2, r2, #32
    c026:	e843 2100 	strex	r1, r2, [r3]
    c02a:	2900      	cmp	r1, #0
    c02c:	d1f7      	bne.n	c01e <smp_pairing_req+0x13a>
    c02e:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    c032:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    c036:	f003 0306 	and.w	r3, r3, #6
    c03a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    c03e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c042:	f003 0304 	and.w	r3, r3, #4
    c046:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    c04a:	e788      	b.n	bf5e <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c04c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c050:	f3bf 8f5b 	dmb	ish
    c054:	e853 2f00 	ldrex	r2, [r3]
    c058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c05c:	e843 2100 	strex	r1, r2, [r3]
    c060:	2900      	cmp	r1, #0
    c062:	d1f7      	bne.n	c054 <smp_pairing_req+0x170>
    c064:	f3bf 8f5b 	dmb	ish
    c068:	e782      	b.n	bf70 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c06a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c06e:	f3bf 8f5b 	dmb	ish
    c072:	e853 2f00 	ldrex	r2, [r3]
    c076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c07a:	e843 2100 	strex	r1, r2, [r3]
    c07e:	2900      	cmp	r1, #0
    c080:	d1f7      	bne.n	c072 <smp_pairing_req+0x18e>
    c082:	f3bf 8f5b 	dmb	ish
    c086:	e784      	b.n	bf92 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    c088:	7831      	ldrb	r1, [r6, #0]
    c08a:	4620      	mov	r0, r4
    c08c:	f7ff fee4 	bl	be58 <legacy_pairing_req>
    c090:	4605      	mov	r5, r0
    c092:	e72f      	b.n	bef4 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c094:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c098:	f3bf 8f5b 	dmb	ish
    c09c:	e853 2f00 	ldrex	r2, [r3]
    c0a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c0a4:	e843 2100 	strex	r1, r2, [r3]
    c0a8:	2900      	cmp	r1, #0
    c0aa:	d1f7      	bne.n	c09c <smp_pairing_req+0x1b8>
    c0ac:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    c0b0:	4620      	mov	r0, r4
    c0b2:	f7fd ffd7 	bl	a064 <send_pairing_rsp>
    c0b6:	4605      	mov	r5, r0
    c0b8:	e71c      	b.n	bef4 <smp_pairing_req+0x10>
    c0ba:	bf00      	nop
    c0bc:	20002948 	.word	0x20002948

0000c0c0 <bt_smp_connected>:
{
    c0c0:	b510      	push	{r4, lr}
    c0c2:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c0c4:	4904      	ldr	r1, [pc, #16]	; (c0d8 <bt_smp_connected+0x18>)
    c0c6:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    c0ca:	f01d f953 	bl	29374 <k_delayed_work_init>
	smp_reset(smp);
    c0ce:	4620      	mov	r0, r4
    c0d0:	f7fe fcbb 	bl	aa4a <smp_reset>
    c0d4:	bd10      	pop	{r4, pc}
    c0d6:	bf00      	nop
    c0d8:	0000ac9b 	.word	0x0000ac9b

0000c0dc <bt_smp_send_security_req>:
{
    c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0e0:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    c0e2:	f7fd ff15 	bl	9f10 <smp_chan_get>
	if (!smp) {
    c0e6:	b3e8      	cbz	r0, c164 <bt_smp_send_security_req+0x88>
    c0e8:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c0ea:	f3bf 8f5b 	dmb	ish
    c0ee:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c0f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c0f6:	f013 0f10 	tst.w	r3, #16
    c0fa:	d136      	bne.n	c16a <bt_smp_send_security_req+0x8e>
    c0fc:	f3bf 8f5b 	dmb	ish
    c100:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    c104:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    c108:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c10c:	bb85      	cbnz	r5, c170 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    c10e:	4630      	mov	r0, r6
    c110:	f7fd feb4 	bl	9e7c <sec_level_reachable>
    c114:	b378      	cbz	r0, c176 <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    c116:	2201      	movs	r2, #1
    c118:	210b      	movs	r1, #11
    c11a:	4630      	mov	r0, r6
    c11c:	f7fd fefd 	bl	9f1a <smp_create_pdu>
	if (!req_buf) {
    c120:	4607      	mov	r7, r0
    c122:	b358      	cbz	r0, c17c <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    c124:	2101      	movs	r1, #1
    c126:	3008      	adds	r0, #8
    c128:	f00e f854 	bl	1a1d4 <net_buf_simple_add>
    c12c:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c12e:	2009      	movs	r0, #9
    c130:	f7fd fe8e 	bl	9e50 <get_auth>
    c134:	f888 0000 	strb.w	r0, [r8]
    c138:	2300      	movs	r3, #0
    c13a:	463a      	mov	r2, r7
    c13c:	2106      	movs	r1, #6
    c13e:	4630      	mov	r0, r6
    c140:	f7fb f9e1 	bl	7506 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    c144:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c146:	f3bf 8f5b 	dmb	ish
    c14a:	e854 3f00 	ldrex	r3, [r4]
    c14e:	f043 0320 	orr.w	r3, r3, #32
    c152:	e844 3200 	strex	r2, r3, [r4]
    c156:	2a00      	cmp	r2, #0
    c158:	d1f7      	bne.n	c14a <bt_smp_send_security_req+0x6e>
    c15a:	f3bf 8f5b 	dmb	ish
}
    c15e:	4628      	mov	r0, r5
    c160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    c164:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    c168:	e7f9      	b.n	c15e <bt_smp_send_security_req+0x82>
		return -EIO;
    c16a:	f06f 0504 	mvn.w	r5, #4
    c16e:	e7f6      	b.n	c15e <bt_smp_send_security_req+0x82>
		return -EBUSY;
    c170:	f06f 050f 	mvn.w	r5, #15
    c174:	e7f3      	b.n	c15e <bt_smp_send_security_req+0x82>
		return -EINVAL;
    c176:	f06f 0515 	mvn.w	r5, #21
    c17a:	e7f0      	b.n	c15e <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    c17c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c180:	e7ed      	b.n	c15e <bt_smp_send_security_req+0x82>

0000c182 <bt_smp_send_pairing_req>:
{
    c182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c186:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    c188:	f7fd fec2 	bl	9f10 <smp_chan_get>
	if (!smp) {
    c18c:	2800      	cmp	r0, #0
    c18e:	d06b      	beq.n	c268 <bt_smp_send_pairing_req+0xe6>
    c190:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c192:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c196:	f3bf 8f5b 	dmb	ish
    c19a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c19e:	f3bf 8f5b 	dmb	ish
    c1a2:	f013 0f10 	tst.w	r3, #16
    c1a6:	d162      	bne.n	c26e <bt_smp_send_pairing_req+0xec>
    c1a8:	f3bf 8f5b 	dmb	ish
    c1ac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c1b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c1b4:	f013 0f08 	tst.w	r3, #8
    c1b8:	d15c      	bne.n	c274 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    c1ba:	4628      	mov	r0, r5
    c1bc:	f7fd fe5e 	bl	9e7c <sec_level_reachable>
    c1c0:	2800      	cmp	r0, #0
    c1c2:	d05a      	beq.n	c27a <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    c1c4:	4620      	mov	r0, r4
    c1c6:	f7fd feb6 	bl	9f36 <smp_init>
    c1ca:	4680      	mov	r8, r0
    c1cc:	2800      	cmp	r0, #0
    c1ce:	d157      	bne.n	c280 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    c1d0:	2206      	movs	r2, #6
    c1d2:	2101      	movs	r1, #1
    c1d4:	4628      	mov	r0, r5
    c1d6:	f7fd fea0 	bl	9f1a <smp_create_pdu>
	if (!req_buf) {
    c1da:	4607      	mov	r7, r0
    c1dc:	2800      	cmp	r0, #0
    c1de:	d052      	beq.n	c286 <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    c1e0:	2106      	movs	r1, #6
    c1e2:	3008      	adds	r0, #8
    c1e4:	f00d fff6 	bl	1a1d4 <net_buf_simple_add>
    c1e8:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c1ea:	2009      	movs	r0, #9
    c1ec:	f7fd fe30 	bl	9e50 <get_auth>
    c1f0:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    c1f2:	f7fd fdaf 	bl	9d54 <get_io_capa>
    c1f6:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c1f8:	f04f 0900 	mov.w	r9, #0
    c1fc:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c200:	2310      	movs	r3, #16
    c202:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    c204:	2205      	movs	r2, #5
    c206:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    c208:	2307      	movs	r3, #7
    c20a:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    c20c:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    c210:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c214:	2301      	movs	r3, #1
    c216:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c21a:	2206      	movs	r2, #6
    c21c:	4629      	mov	r1, r5
    c21e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c222:	f7f4 f84d 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    c226:	464a      	mov	r2, r9
    c228:	4639      	mov	r1, r7
    c22a:	4620      	mov	r0, r4
    c22c:	f7fd fec8 	bl	9fc0 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    c230:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c232:	f3bf 8f5b 	dmb	ish
    c236:	e854 3f00 	ldrex	r3, [r4]
    c23a:	f043 0304 	orr.w	r3, r3, #4
    c23e:	e844 3200 	strex	r2, r3, [r4]
    c242:	2a00      	cmp	r2, #0
    c244:	d1f7      	bne.n	c236 <bt_smp_send_pairing_req+0xb4>
    c246:	f3bf 8f5b 	dmb	ish
    c24a:	f3bf 8f5b 	dmb	ish
    c24e:	e856 3f00 	ldrex	r3, [r6]
    c252:	f043 0308 	orr.w	r3, r3, #8
    c256:	e846 3200 	strex	r2, r3, [r6]
    c25a:	2a00      	cmp	r2, #0
    c25c:	d1f7      	bne.n	c24e <bt_smp_send_pairing_req+0xcc>
    c25e:	f3bf 8f5b 	dmb	ish
}
    c262:	4640      	mov	r0, r8
    c264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    c268:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    c26c:	e7f9      	b.n	c262 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    c26e:	f06f 0804 	mvn.w	r8, #4
    c272:	e7f6      	b.n	c262 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    c274:	f06f 080f 	mvn.w	r8, #15
    c278:	e7f3      	b.n	c262 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    c27a:	f06f 0815 	mvn.w	r8, #21
    c27e:	e7f0      	b.n	c262 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c280:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c284:	e7ed      	b.n	c262 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c286:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c28a:	e7ea      	b.n	c262 <bt_smp_send_pairing_req+0xe0>

0000c28c <smp_security_request>:
{
    c28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c28e:	b085      	sub	sp, #20
    c290:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c292:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    c294:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    c296:	4a35      	ldr	r2, [pc, #212]	; (c36c <smp_security_request+0xe0>)
    c298:	7812      	ldrb	r2, [r2, #0]
    c29a:	b332      	cbz	r2, c2ea <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    c29c:	781d      	ldrb	r5, [r3, #0]
    c29e:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    c2a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c2a4:	b32b      	cbz	r3, c2f2 <smp_security_request+0x66>
	if (!conn->le.keys) {
    c2a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	d039      	beq.n	c320 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    c2ac:	f015 0f04 	tst.w	r5, #4
    c2b0:	d12e      	bne.n	c310 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    c2b2:	f015 0f08 	tst.w	r5, #8
    c2b6:	d004      	beq.n	c2c2 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    c2b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c2ba:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    c2bc:	f013 0f20 	tst.w	r3, #32
    c2c0:	d02e      	beq.n	c320 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c2c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    c2c4:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    c2c8:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c2ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    c2ce:	9502      	str	r5, [sp, #8]
    c2d0:	9201      	str	r2, [sp, #4]
    c2d2:	8b1b      	ldrh	r3, [r3, #24]
    c2d4:	9300      	str	r3, [sp, #0]
    c2d6:	4602      	mov	r2, r0
    c2d8:	460b      	mov	r3, r1
    c2da:	4620      	mov	r0, r4
    c2dc:	f7f9 ffbc 	bl	6258 <bt_conn_le_start_encryption>
    c2e0:	2800      	cmp	r0, #0
    c2e2:	da24      	bge.n	c32e <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    c2e4:	2008      	movs	r0, #8
}
    c2e6:	b005      	add	sp, #20
    c2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    c2ea:	781d      	ldrb	r5, [r3, #0]
    c2ec:	f005 0507 	and.w	r5, r5, #7
    c2f0:	e7d7      	b.n	c2a2 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    c2f2:	f104 0748 	add.w	r7, r4, #72	; 0x48
    c2f6:	4639      	mov	r1, r7
    c2f8:	2020      	movs	r0, #32
    c2fa:	f000 f98f 	bl	c61c <bt_keys_find>
    c2fe:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    c300:	2800      	cmp	r0, #0
    c302:	d1d0      	bne.n	c2a6 <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c304:	4639      	mov	r1, r7
    c306:	2004      	movs	r0, #4
    c308:	f000 f988 	bl	c61c <bt_keys_find>
    c30c:	6720      	str	r0, [r4, #112]	; 0x70
    c30e:	e7ca      	b.n	c2a6 <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c310:	f3bf 8f5b 	dmb	ish
    c314:	689b      	ldr	r3, [r3, #8]
    c316:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    c31a:	f013 0f01 	tst.w	r3, #1
    c31e:	d1c8      	bne.n	c2b2 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    c320:	4620      	mov	r0, r4
    c322:	f7ff ff2e 	bl	c182 <bt_smp_send_pairing_req>
    c326:	2800      	cmp	r0, #0
    c328:	da10      	bge.n	c34c <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    c32a:	2008      	movs	r0, #8
    c32c:	e7db      	b.n	c2e6 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c32e:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c330:	f3bf 8f5b 	dmb	ish
    c334:	e856 3f00 	ldrex	r3, [r6]
    c338:	f043 0302 	orr.w	r3, r3, #2
    c33c:	e846 3200 	strex	r2, r3, [r6]
    c340:	2a00      	cmp	r2, #0
    c342:	d1f7      	bne.n	c334 <smp_security_request+0xa8>
    c344:	f3bf 8f5b 	dmb	ish
	return 0;
    c348:	2000      	movs	r0, #0
    c34a:	e7cc      	b.n	c2e6 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c34c:	36a0      	adds	r6, #160	; 0xa0
    c34e:	f3bf 8f5b 	dmb	ish
    c352:	e856 3f00 	ldrex	r3, [r6]
    c356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c35a:	e846 3200 	strex	r2, r3, [r6]
    c35e:	2a00      	cmp	r2, #0
    c360:	d1f7      	bne.n	c352 <smp_security_request+0xc6>
    c362:	f3bf 8f5b 	dmb	ish
	return 0;
    c366:	2000      	movs	r0, #0
    c368:	e7bd      	b.n	c2e6 <smp_security_request+0x5a>
    c36a:	bf00      	nop
    c36c:	20000940 	.word	0x20000940

0000c370 <bt_smp_sign_verify>:
{
    c370:	b530      	push	{r4, r5, lr}
    c372:	b085      	sub	sp, #20
    c374:	4605      	mov	r5, r0
    c376:	460c      	mov	r4, r1
	return buf->data + buf->len;
    c378:	6889      	ldr	r1, [r1, #8]
    c37a:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c37c:	3b0c      	subs	r3, #12
    c37e:	220c      	movs	r2, #12
    c380:	4419      	add	r1, r3
    c382:	a801      	add	r0, sp, #4
    c384:	f7f3 ff9c 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c388:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c38c:	2010      	movs	r0, #16
    c38e:	f000 f945 	bl	c61c <bt_keys_find>
	if (!keys) {
    c392:	b320      	cbz	r0, c3de <bt_smp_sign_verify+0x6e>
    c394:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c396:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    c398:	a904      	add	r1, sp, #16
    c39a:	f841 3d10 	str.w	r3, [r1, #-16]!
    c39e:	68a0      	ldr	r0, [r4, #8]
    c3a0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c3a2:	3b0c      	subs	r3, #12
    c3a4:	2204      	movs	r2, #4
    c3a6:	4418      	add	r0, r3
    c3a8:	f7f3 ff8a 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    c3ac:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    c3ae:	3a0c      	subs	r2, #12
    c3b0:	b292      	uxth	r2, r2
    c3b2:	68a1      	ldr	r1, [r4, #8]
    c3b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    c3b8:	f7fd feac 	bl	a114 <smp_sign_buf>
	if (err) {
    c3bc:	b990      	cbnz	r0, c3e4 <bt_smp_sign_verify+0x74>
    c3be:	68a1      	ldr	r1, [r4, #8]
    c3c0:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    c3c2:	3b0c      	subs	r3, #12
    c3c4:	220c      	movs	r2, #12
    c3c6:	4419      	add	r1, r3
    c3c8:	a801      	add	r0, sp, #4
    c3ca:	f01e fae3 	bl	2a994 <memcmp>
    c3ce:	4602      	mov	r2, r0
    c3d0:	b958      	cbnz	r0, c3ea <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    c3d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    c3d4:	3301      	adds	r3, #1
    c3d6:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    c3d8:	4610      	mov	r0, r2
    c3da:	b005      	add	sp, #20
    c3dc:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c3de:	f06f 0201 	mvn.w	r2, #1
    c3e2:	e7f9      	b.n	c3d8 <bt_smp_sign_verify+0x68>
		return -EIO;
    c3e4:	f06f 0204 	mvn.w	r2, #4
    c3e8:	e7f6      	b.n	c3d8 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    c3ea:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    c3ee:	e7f3      	b.n	c3d8 <bt_smp_sign_verify+0x68>

0000c3f0 <bt_smp_sign>:
{
    c3f0:	b530      	push	{r4, r5, lr}
    c3f2:	b083      	sub	sp, #12
    c3f4:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    c3f6:	f100 0148 	add.w	r1, r0, #72	; 0x48
    c3fa:	2008      	movs	r0, #8
    c3fc:	f000 f90e 	bl	c61c <bt_keys_find>
	if (!keys) {
    c400:	b300      	cbz	r0, c444 <bt_smp_sign+0x54>
    c402:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    c404:	210c      	movs	r1, #12
    c406:	f104 0008 	add.w	r0, r4, #8
    c40a:	f00d fee3 	bl	1a1d4 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c40e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c410:	a902      	add	r1, sp, #8
    c412:	f841 3d04 	str.w	r3, [r1, #-4]!
    c416:	68a0      	ldr	r0, [r4, #8]
    c418:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c41a:	3b0c      	subs	r3, #12
    c41c:	2204      	movs	r2, #4
    c41e:	4418      	add	r0, r3
    c420:	f7f3 ff4e 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    c424:	89a2      	ldrh	r2, [r4, #12]
    c426:	3a0c      	subs	r2, #12
    c428:	b292      	uxth	r2, r2
    c42a:	68a1      	ldr	r1, [r4, #8]
    c42c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c430:	f7fd fe70 	bl	a114 <smp_sign_buf>
	if (err) {
    c434:	4602      	mov	r2, r0
    c436:	b940      	cbnz	r0, c44a <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    c438:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c43a:	3301      	adds	r3, #1
    c43c:	65ab      	str	r3, [r5, #88]	; 0x58
}
    c43e:	4610      	mov	r0, r2
    c440:	b003      	add	sp, #12
    c442:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c444:	f06f 0201 	mvn.w	r2, #1
    c448:	e7f9      	b.n	c43e <bt_smp_sign+0x4e>
		return -EIO;
    c44a:	f06f 0204 	mvn.w	r2, #4
    c44e:	e7f6      	b.n	c43e <bt_smp_sign+0x4e>

0000c450 <bt_smp_update_keys>:
{
    c450:	b570      	push	{r4, r5, r6, lr}
    c452:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c454:	f7fd fd5c 	bl	9f10 <smp_chan_get>
	if (!smp) {
    c458:	2800      	cmp	r0, #0
    c45a:	d03d      	beq.n	c4d8 <bt_smp_update_keys+0x88>
    c45c:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c45e:	f3bf 8f5b 	dmb	ish
    c462:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c466:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c46a:	f013 0f08 	tst.w	r3, #8
    c46e:	d033      	beq.n	c4d8 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    c470:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c472:	b108      	cbz	r0, c478 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    c474:	f000 f97f 	bl	c776 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    c478:	f104 0048 	add.w	r0, r4, #72	; 0x48
    c47c:	f000 f8a4 	bl	c5c8 <bt_keys_get_addr>
    c480:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    c482:	b348      	cbz	r0, c4d8 <bt_smp_update_keys+0x88>
    c484:	f3bf 8f5b 	dmb	ish
    c488:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c48c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    c490:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c494:	d121      	bne.n	c4da <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    c496:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    c49a:	3b01      	subs	r3, #1
    c49c:	2b02      	cmp	r3, #2
    c49e:	d82b      	bhi.n	c4f8 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c4a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4a2:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4a4:	f3bf 8f5b 	dmb	ish
    c4a8:	e853 2f00 	ldrex	r2, [r3]
    c4ac:	f042 0201 	orr.w	r2, r2, #1
    c4b0:	e843 2100 	strex	r1, r2, [r3]
    c4b4:	2900      	cmp	r1, #0
    c4b6:	d1f7      	bne.n	c4a8 <bt_smp_update_keys+0x58>
    c4b8:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    c4bc:	6f26      	ldr	r6, [r4, #112]	; 0x70
    c4be:	4628      	mov	r0, r5
    c4c0:	f7fd fc8a 	bl	9dd8 <get_encryption_key_size>
    c4c4:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4c6:	f3bf 8f5b 	dmb	ish
    c4ca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c4ce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c4d2:	f013 0f20 	tst.w	r3, #32
    c4d6:	d11e      	bne.n	c516 <bt_smp_update_keys+0xc6>
    c4d8:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    c4da:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4dc:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4de:	f3bf 8f5b 	dmb	ish
    c4e2:	e853 2f00 	ldrex	r2, [r3]
    c4e6:	f042 0202 	orr.w	r2, r2, #2
    c4ea:	e843 2100 	strex	r1, r2, [r3]
    c4ee:	2900      	cmp	r1, #0
    c4f0:	d1f7      	bne.n	c4e2 <bt_smp_update_keys+0x92>
    c4f2:	f3bf 8f5b 	dmb	ish
    c4f6:	e7ce      	b.n	c496 <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c4f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4fa:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c4fc:	f3bf 8f5b 	dmb	ish
    c500:	e853 2f00 	ldrex	r2, [r3]
    c504:	f022 0201 	bic.w	r2, r2, #1
    c508:	e843 2100 	strex	r1, r2, [r3]
    c50c:	2900      	cmp	r1, #0
    c50e:	d1f7      	bne.n	c500 <bt_smp_update_keys+0xb0>
    c510:	f3bf 8f5b 	dmb	ish
    c514:	e7d2      	b.n	c4bc <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c516:	f3bf 8f5b 	dmb	ish
    c51a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c51e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c522:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c526:	d0d7      	beq.n	c4d8 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    c528:	2120      	movs	r1, #32
    c52a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c52c:	f000 f90c 	bl	c748 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    c530:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c532:	2210      	movs	r2, #16
    c534:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    c538:	301a      	adds	r0, #26
    c53a:	f7f3 fec1 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    c53e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c540:	2000      	movs	r0, #0
    c542:	2100      	movs	r1, #0
    c544:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    c548:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c54a:	2200      	movs	r2, #0
    c54c:	831a      	strh	r2, [r3, #24]
    c54e:	e7c3      	b.n	c4d8 <bt_smp_update_keys+0x88>

0000c550 <bt_smp_get_tk>:
{
    c550:	b570      	push	{r4, r5, r6, lr}
    c552:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    c554:	f7fd fcdc 	bl	9f10 <smp_chan_get>
	if (!smp) {
    c558:	b300      	cbz	r0, c59c <bt_smp_get_tk+0x4c>
    c55a:	4604      	mov	r4, r0
    c55c:	f3bf 8f5b 	dmb	ish
    c560:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c564:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c568:	f013 0f08 	tst.w	r3, #8
    c56c:	d101      	bne.n	c572 <bt_smp_get_tk+0x22>
		return false;
    c56e:	2000      	movs	r0, #0
    c570:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    c572:	f7fd fc31 	bl	9dd8 <get_encryption_key_size>
    c576:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    c578:	4602      	mov	r2, r0
    c57a:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    c57e:	4628      	mov	r0, r5
    c580:	f7f3 fe9e 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    c584:	2e0f      	cmp	r6, #15
    c586:	d901      	bls.n	c58c <bt_smp_get_tk+0x3c>
	return true;
    c588:	2001      	movs	r0, #1
}
    c58a:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    c58c:	f1c6 0210 	rsb	r2, r6, #16
    c590:	2100      	movs	r1, #0
    c592:	19a8      	adds	r0, r5, r6
    c594:	f01e fa92 	bl	2aabc <memset>
	return true;
    c598:	2001      	movs	r0, #1
    c59a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    c59c:	2000      	movs	r0, #0
    c59e:	bd70      	pop	{r4, r5, r6, pc}

0000c5a0 <bt_smp_init>:

int bt_smp_init(void)
{
    c5a0:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    c5a2:	f7fd fca9 	bl	9ef8 <le_sc_supported>
    c5a6:	4b05      	ldr	r3, [pc, #20]	; (c5bc <bt_smp_init+0x1c>)
    c5a8:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    c5aa:	4805      	ldr	r0, [pc, #20]	; (c5c0 <bt_smp_init+0x20>)
    c5ac:	f7fa fe04 	bl	71b8 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    c5b0:	4804      	ldr	r0, [pc, #16]	; (c5c4 <bt_smp_init+0x24>)
    c5b2:	f7f9 fc7f 	bl	5eb4 <bt_pub_key_gen>

	return smp_self_test();
}
    c5b6:	2000      	movs	r0, #0
    c5b8:	bd08      	pop	{r3, pc}
    c5ba:	bf00      	nop
    c5bc:	20000940 	.word	0x20000940
    c5c0:	2000bad4 	.word	0x2000bad4
    c5c4:	2000baf4 	.word	0x2000baf4

0000c5c8 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    c5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ca:	b083      	sub	sp, #12
    c5cc:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c5ce:	2500      	movs	r5, #0
    c5d0:	b11d      	cbz	r5, c5da <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c5d2:	2400      	movs	r4, #0
}
    c5d4:	4620      	mov	r0, r4
    c5d6:	b003      	add	sp, #12
    c5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    c5da:	00eb      	lsls	r3, r5, #3
    c5dc:	442b      	add	r3, r5
    c5de:	011a      	lsls	r2, r3, #4
    c5e0:	4c0d      	ldr	r4, [pc, #52]	; (c618 <bt_keys_get_addr+0x50>)
    c5e2:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    c5e4:	2207      	movs	r2, #7
    c5e6:	4631      	mov	r1, r6
    c5e8:	4620      	mov	r0, r4
    c5ea:	f01e f9d3 	bl	2a994 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    c5ee:	2800      	cmp	r0, #0
    c5f0:	d0f0      	beq.n	c5d4 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c5f2:	2300      	movs	r3, #0
    c5f4:	9300      	str	r3, [sp, #0]
    c5f6:	f8cd 3003 	str.w	r3, [sp, #3]
    c5fa:	2207      	movs	r2, #7
    c5fc:	4669      	mov	r1, sp
    c5fe:	4620      	mov	r0, r4
    c600:	f01e f9c8 	bl	2a994 <memcmp>
    c604:	b108      	cbz	r0, c60a <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c606:	3501      	adds	r5, #1
    c608:	e7e2      	b.n	c5d0 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    c60a:	2207      	movs	r2, #7
    c60c:	4631      	mov	r1, r6
    c60e:	4620      	mov	r0, r4
    c610:	f7f3 fe56 	bl	2c0 <memcpy>
			return keys;
    c614:	e7de      	b.n	c5d4 <bt_keys_get_addr+0xc>
    c616:	bf00      	nop
    c618:	20000948 	.word	0x20000948

0000c61c <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    c61c:	b570      	push	{r4, r5, r6, lr}
    c61e:	4605      	mov	r5, r0
    c620:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c622:	2400      	movs	r4, #0
    c624:	b10c      	cbz	r4, c62a <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c626:	2000      	movs	r0, #0
}
    c628:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    c62a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c62e:	011a      	lsls	r2, r3, #4
    c630:	4b0b      	ldr	r3, [pc, #44]	; (c660 <bt_keys_find+0x44>)
    c632:	4413      	add	r3, r2
    c634:	899b      	ldrh	r3, [r3, #12]
    c636:	422b      	tst	r3, r5
    c638:	d101      	bne.n	c63e <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c63a:	3401      	adds	r4, #1
    c63c:	e7f2      	b.n	c624 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c63e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c642:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c644:	2207      	movs	r2, #7
    c646:	4631      	mov	r1, r6
    c648:	4805      	ldr	r0, [pc, #20]	; (c660 <bt_keys_find+0x44>)
    c64a:	4418      	add	r0, r3
    c64c:	f01e f9a2 	bl	2a994 <memcmp>
		if ((key_pool[i].keys & type) &&
    c650:	2800      	cmp	r0, #0
    c652:	d1f2      	bne.n	c63a <bt_keys_find+0x1e>
			return &key_pool[i];
    c654:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c658:	0123      	lsls	r3, r4, #4
    c65a:	4801      	ldr	r0, [pc, #4]	; (c660 <bt_keys_find+0x44>)
    c65c:	4418      	add	r0, r3
    c65e:	bd70      	pop	{r4, r5, r6, pc}
    c660:	20000948 	.word	0x20000948

0000c664 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c666:	7803      	ldrb	r3, [r0, #0]
    c668:	2b01      	cmp	r3, #1
    c66a:	d004      	beq.n	c676 <bt_keys_find_irk+0x12>
		return false;
    c66c:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    c66e:	b153      	cbz	r3, c686 <bt_keys_find_irk+0x22>
    c670:	4605      	mov	r5, r0
    c672:	2400      	movs	r4, #0
    c674:	e00a      	b.n	c68c <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    c676:	7983      	ldrb	r3, [r0, #6]
    c678:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c67c:	2b40      	cmp	r3, #64	; 0x40
    c67e:	bf14      	ite	ne
    c680:	2300      	movne	r3, #0
    c682:	2301      	moveq	r3, #1
    c684:	e7f3      	b.n	c66e <bt_keys_find_irk+0xa>
		return NULL;
    c686:	2000      	movs	r0, #0
    c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c68a:	3401      	adds	r4, #1
    c68c:	b9c4      	cbnz	r4, c6c0 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c68e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c692:	011a      	lsls	r2, r3, #4
    c694:	4b1e      	ldr	r3, [pc, #120]	; (c710 <bt_keys_find_irk+0xac>)
    c696:	4413      	add	r3, r2
    c698:	899b      	ldrh	r3, [r3, #12]
    c69a:	f013 0f02 	tst.w	r3, #2
    c69e:	d0f4      	beq.n	c68a <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    c6a0:	4611      	mov	r1, r2
    c6a2:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    c6a4:	2206      	movs	r2, #6
    c6a6:	4b1a      	ldr	r3, [pc, #104]	; (c710 <bt_keys_find_irk+0xac>)
    c6a8:	4419      	add	r1, r3
    c6aa:	1c68      	adds	r0, r5, #1
    c6ac:	f01e f972 	bl	2a994 <memcmp>
    c6b0:	2800      	cmp	r0, #0
    c6b2:	d1ea      	bne.n	c68a <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    c6b4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c6b8:	0123      	lsls	r3, r4, #4
    c6ba:	4815      	ldr	r0, [pc, #84]	; (c710 <bt_keys_find_irk+0xac>)
    c6bc:	4418      	add	r0, r3
    c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6c0:	2400      	movs	r4, #0
    c6c2:	e000      	b.n	c6c6 <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c6c4:	3401      	adds	r4, #1
    c6c6:	bb04      	cbnz	r4, c70a <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c6c8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c6cc:	011a      	lsls	r2, r3, #4
    c6ce:	4b10      	ldr	r3, [pc, #64]	; (c710 <bt_keys_find_irk+0xac>)
    c6d0:	4413      	add	r3, r2
    c6d2:	899b      	ldrh	r3, [r3, #12]
    c6d4:	f013 0f02 	tst.w	r3, #2
    c6d8:	d0f4      	beq.n	c6c4 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c6da:	4610      	mov	r0, r2
    c6dc:	3030      	adds	r0, #48	; 0x30
    c6de:	1c6e      	adds	r6, r5, #1
    c6e0:	4631      	mov	r1, r6
    c6e2:	4b0b      	ldr	r3, [pc, #44]	; (c710 <bt_keys_find_irk+0xac>)
    c6e4:	4418      	add	r0, r3
    c6e6:	f7f7 f987 	bl	39f8 <bt_rpa_irk_matches>
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d0ea      	beq.n	c6c4 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    c6ee:	4d08      	ldr	r5, [pc, #32]	; (c710 <bt_keys_find_irk+0xac>)
    c6f0:	00e7      	lsls	r7, r4, #3
    c6f2:	193a      	adds	r2, r7, r4
    c6f4:	0113      	lsls	r3, r2, #4
    c6f6:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    c6f8:	2206      	movs	r2, #6
    c6fa:	4631      	mov	r1, r6
    c6fc:	18e8      	adds	r0, r5, r3
    c6fe:	f7f3 fddf 	bl	2c0 <memcpy>

			return &key_pool[i];
    c702:	443c      	add	r4, r7
    c704:	0120      	lsls	r0, r4, #4
    c706:	4428      	add	r0, r5
    c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    c70a:	2000      	movs	r0, #0
}
    c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c70e:	bf00      	nop
    c710:	20000948 	.word	0x20000948

0000c714 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    c714:	b538      	push	{r3, r4, r5, lr}
    c716:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c718:	2400      	movs	r4, #0
    c71a:	b10c      	cbz	r4, c720 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c71c:	2000      	movs	r0, #0
}
    c71e:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c720:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c724:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c726:	2207      	movs	r2, #7
    c728:	4629      	mov	r1, r5
    c72a:	4806      	ldr	r0, [pc, #24]	; (c744 <bt_keys_find_addr+0x30>)
    c72c:	4418      	add	r0, r3
    c72e:	f01e f931 	bl	2a994 <memcmp>
    c732:	b108      	cbz	r0, c738 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c734:	3401      	adds	r4, #1
    c736:	e7f0      	b.n	c71a <bt_keys_find_addr+0x6>
			return &key_pool[i];
    c738:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c73c:	0123      	lsls	r3, r4, #4
    c73e:	4801      	ldr	r0, [pc, #4]	; (c744 <bt_keys_find_addr+0x30>)
    c740:	4418      	add	r0, r3
    c742:	bd38      	pop	{r3, r4, r5, pc}
    c744:	20000948 	.word	0x20000948

0000c748 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    c748:	8983      	ldrh	r3, [r0, #12]
    c74a:	4319      	orrs	r1, r3
    c74c:	8181      	strh	r1, [r0, #12]
    c74e:	4770      	bx	lr

0000c750 <bt_keys_get_type>:
{
    c750:	b570      	push	{r4, r5, r6, lr}
    c752:	4606      	mov	r6, r0
    c754:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    c756:	f7ff ff61 	bl	c61c <bt_keys_find>
	if (keys) {
    c75a:	4604      	mov	r4, r0
    c75c:	b108      	cbz	r0, c762 <bt_keys_get_type+0x12>
}
    c75e:	4620      	mov	r0, r4
    c760:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    c762:	4628      	mov	r0, r5
    c764:	f7ff ff30 	bl	c5c8 <bt_keys_get_addr>
	if (!keys) {
    c768:	4604      	mov	r4, r0
    c76a:	2800      	cmp	r0, #0
    c76c:	d0f7      	beq.n	c75e <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    c76e:	4631      	mov	r1, r6
    c770:	f7ff ffea 	bl	c748 <bt_keys_add_type>
	return keys;
    c774:	e7f3      	b.n	c75e <bt_keys_get_type+0xe>

0000c776 <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    c776:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    c778:	2290      	movs	r2, #144	; 0x90
    c77a:	2100      	movs	r1, #0
    c77c:	f01e f99e 	bl	2aabc <memset>
    c780:	bd08      	pop	{r3, pc}

0000c782 <status_cmd_handle>:
}
    c782:	f06f 0015 	mvn.w	r0, #21
    c786:	4770      	bx	lr

0000c788 <evt_create>:
{
    c788:	b538      	push	{r3, r4, r5, lr}
    c78a:	460d      	mov	r5, r1
    c78c:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    c78e:	2102      	movs	r1, #2
    c790:	3008      	adds	r0, #8
    c792:	f00d fd1f 	bl	1a1d4 <net_buf_simple_add>
	hdr->evt = evt;
    c796:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    c798:	7044      	strb	r4, [r0, #1]
    c79a:	bd38      	pop	{r3, r4, r5, pc}

0000c79c <cmd_status>:
{
    c79c:	b538      	push	{r3, r4, r5, lr}
    c79e:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7a4:	f7f9 fb5e 	bl	5e64 <bt_buf_get_cmd_complete>
    c7a8:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c7aa:	2204      	movs	r2, #4
    c7ac:	210f      	movs	r1, #15
    c7ae:	f7ff ffeb 	bl	c788 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    c7b2:	2104      	movs	r1, #4
    c7b4:	f104 0008 	add.w	r0, r4, #8
    c7b8:	f00d fd0c 	bl	1a1d4 <net_buf_simple_add>
	cs->status = status;
    c7bc:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    c7be:	2301      	movs	r3, #1
    c7c0:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c7c2:	4b02      	ldr	r3, [pc, #8]	; (c7cc <cmd_status+0x30>)
    c7c4:	881b      	ldrh	r3, [r3, #0]
    c7c6:	8043      	strh	r3, [r0, #2]
}
    c7c8:	4620      	mov	r0, r4
    c7ca:	bd38      	pop	{r3, r4, r5, pc}
    c7cc:	200009d8 	.word	0x200009d8

0000c7d0 <disconnect>:
{
    c7d0:	b510      	push	{r4, lr}
    c7d2:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c7d4:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c7d6:	7899      	ldrb	r1, [r3, #2]
    c7d8:	8818      	ldrh	r0, [r3, #0]
    c7da:	f00b f964 	bl	17aa6 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c7de:	b100      	cbz	r0, c7e2 <disconnect+0x12>
    c7e0:	200c      	movs	r0, #12
    c7e2:	f7ff ffdb 	bl	c79c <cmd_status>
    c7e6:	6020      	str	r0, [r4, #0]
    c7e8:	bd10      	pop	{r4, pc}
	...

0000c7ec <cmd_complete>:
{
    c7ec:	b538      	push	{r3, r4, r5, lr}
    c7ee:	4604      	mov	r4, r0
    c7f0:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7f6:	f7f9 fb35 	bl	5e64 <bt_buf_get_cmd_complete>
    c7fa:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    c7fc:	1cea      	adds	r2, r5, #3
    c7fe:	b2d2      	uxtb	r2, r2
    c800:	210e      	movs	r1, #14
    c802:	f7ff ffc1 	bl	c788 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    c806:	6820      	ldr	r0, [r4, #0]
    c808:	2103      	movs	r1, #3
    c80a:	3008      	adds	r0, #8
    c80c:	f00d fce2 	bl	1a1d4 <net_buf_simple_add>
	cc->ncmd = 1;
    c810:	2301      	movs	r3, #1
    c812:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    c814:	4b04      	ldr	r3, [pc, #16]	; (c828 <cmd_complete+0x3c>)
    c816:	881b      	ldrh	r3, [r3, #0]
    c818:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    c81c:	6820      	ldr	r0, [r4, #0]
    c81e:	4629      	mov	r1, r5
    c820:	3008      	adds	r0, #8
    c822:	f00d fcd7 	bl	1a1d4 <net_buf_simple_add>
}
    c826:	bd38      	pop	{r3, r4, r5, pc}
    c828:	200009d8 	.word	0x200009d8

0000c82c <set_event_mask_page_2>:
{
    c82c:	b570      	push	{r4, r5, r6, lr}
    c82e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    c830:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    c832:	79da      	ldrb	r2, [r3, #7]
    c834:	7999      	ldrb	r1, [r3, #6]
    c836:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    c83a:	7958      	ldrb	r0, [r3, #5]
    c83c:	791a      	ldrb	r2, [r3, #4]
    c83e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c842:	2400      	movs	r4, #0
    c844:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    c848:	78d9      	ldrb	r1, [r3, #3]
    c84a:	789a      	ldrb	r2, [r3, #2]
    c84c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c850:	7859      	ldrb	r1, [r3, #1]
    c852:	781b      	ldrb	r3, [r3, #0]
    c854:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    c858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c85c:	ea44 0003 	orr.w	r0, r4, r3
    c860:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c862:	4b04      	ldr	r3, [pc, #16]	; (c874 <set_event_mask_page_2+0x48>)
    c864:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c868:	2101      	movs	r1, #1
    c86a:	4630      	mov	r0, r6
    c86c:	f7ff ffbe 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    c870:	7004      	strb	r4, [r0, #0]
    c872:	bd70      	pop	{r4, r5, r6, pc}
    c874:	20000a68 	.word	0x20000a68

0000c878 <read_local_version_info>:
{
    c878:	b508      	push	{r3, lr}
    c87a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c87c:	2109      	movs	r1, #9
    c87e:	f7ff ffb5 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    c882:	2300      	movs	r3, #0
    c884:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    c886:	2209      	movs	r2, #9
    c888:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    c88a:	7083      	strb	r3, [r0, #2]
    c88c:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c88e:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c894:	7143      	strb	r3, [r0, #5]
    c896:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c898:	71c3      	strb	r3, [r0, #7]
    c89a:	7203      	strb	r3, [r0, #8]
    c89c:	bd08      	pop	{r3, pc}

0000c89e <le_read_buffer_size>:
{
    c89e:	b508      	push	{r3, lr}
    c8a0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8a2:	2104      	movs	r1, #4
    c8a4:	f7ff ffa2 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    c8a8:	2300      	movs	r3, #0
    c8aa:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c8ac:	221b      	movs	r2, #27
    c8ae:	7042      	strb	r2, [r0, #1]
    c8b0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c8b2:	2302      	movs	r3, #2
    c8b4:	70c3      	strb	r3, [r0, #3]
    c8b6:	bd08      	pop	{r3, pc}

0000c8b8 <le_read_supp_states>:
{
    c8b8:	b508      	push	{r3, lr}
    c8ba:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8bc:	2109      	movs	r1, #9
    c8be:	f7ff ff95 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    c8c2:	2200      	movs	r2, #0
    c8c4:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    c8c6:	23ff      	movs	r3, #255	; 0xff
    c8c8:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    c8ca:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    c8cc:	213f      	movs	r1, #63	; 0x3f
    c8ce:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    c8d0:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    c8d2:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    c8d4:	2303      	movs	r3, #3
    c8d6:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    c8d8:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    c8da:	7202      	strb	r2, [r0, #8]
    c8dc:	bd08      	pop	{r3, pc}

0000c8de <le_read_adv_chan_tx_power>:
{
    c8de:	b508      	push	{r3, lr}
    c8e0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8e2:	2102      	movs	r1, #2
    c8e4:	f7ff ff82 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    c8e8:	2300      	movs	r3, #0
    c8ea:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c8ec:	7043      	strb	r3, [r0, #1]
    c8ee:	bd08      	pop	{r3, pc}

0000c8f0 <vs_read_version_info>:
{
    c8f0:	b508      	push	{r3, lr}
    c8f2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8f4:	210d      	movs	r1, #13
    c8f6:	f7ff ff79 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    c8fa:	2300      	movs	r3, #0
    c8fc:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    c8fe:	2202      	movs	r2, #2
    c900:	7042      	strb	r2, [r0, #1]
    c902:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    c904:	70c2      	strb	r2, [r0, #3]
    c906:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    c908:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c90a:	2201      	movs	r2, #1
    c90c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c90e:	2209      	movs	r2, #9
    c910:	71c2      	strb	r2, [r0, #7]
    c912:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    c914:	2263      	movs	r2, #99	; 0x63
    c916:	7242      	strb	r2, [r0, #9]
    c918:	7283      	strb	r3, [r0, #10]
    c91a:	72c3      	strb	r3, [r0, #11]
    c91c:	7303      	strb	r3, [r0, #12]
    c91e:	bd08      	pop	{r3, pc}

0000c920 <meta_evt>:
{
    c920:	b570      	push	{r4, r5, r6, lr}
    c922:	4604      	mov	r4, r0
    c924:	460e      	mov	r6, r1
    c926:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    c928:	3201      	adds	r2, #1
    c92a:	b2d2      	uxtb	r2, r2
    c92c:	213e      	movs	r1, #62	; 0x3e
    c92e:	f7ff ff2b 	bl	c788 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    c932:	3408      	adds	r4, #8
    c934:	2101      	movs	r1, #1
    c936:	4620      	mov	r0, r4
    c938:	f00d fc4c 	bl	1a1d4 <net_buf_simple_add>
	me->subevent = subevt;
    c93c:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    c93e:	4629      	mov	r1, r5
    c940:	4620      	mov	r0, r4
    c942:	f00d fc47 	bl	1a1d4 <net_buf_simple_add>
}
    c946:	bd70      	pop	{r4, r5, r6, pc}

0000c948 <le_chan_sel_algo>:
{
    c948:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c94a:	4b0f      	ldr	r3, [pc, #60]	; (c988 <le_chan_sel_algo+0x40>)
    c94c:	e9d3 4500 	ldrd	r4, r5, [r3]
    c950:	2400      	movs	r4, #0
    c952:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    c956:	ea54 0305 	orrs.w	r3, r4, r5
    c95a:	d008      	beq.n	c96e <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    c95c:	4b0b      	ldr	r3, [pc, #44]	; (c98c <le_chan_sel_algo+0x44>)
    c95e:	e9d3 4500 	ldrd	r4, r5, [r3]
    c962:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    c966:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c968:	ea54 0305 	orrs.w	r3, r4, r5
    c96c:	d100      	bne.n	c970 <le_chan_sel_algo+0x28>
    c96e:	bd38      	pop	{r3, r4, r5, pc}
    c970:	4613      	mov	r3, r2
    c972:	460d      	mov	r5, r1
    c974:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    c976:	2203      	movs	r2, #3
    c978:	2114      	movs	r1, #20
    c97a:	4618      	mov	r0, r3
    c97c:	f7ff ffd0 	bl	c920 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    c980:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    c982:	78e3      	ldrb	r3, [r4, #3]
    c984:	7083      	strb	r3, [r0, #2]
    c986:	e7f2      	b.n	c96e <le_chan_sel_algo+0x26>
    c988:	2000bb00 	.word	0x2000bb00
    c98c:	2000bb08 	.word	0x2000bb08

0000c990 <disconn_complete>:
{
    c990:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c992:	4b11      	ldr	r3, [pc, #68]	; (c9d8 <disconn_complete+0x48>)
    c994:	e9d3 4500 	ldrd	r4, r5, [r3]
    c998:	f004 0410 	and.w	r4, r4, #16
    c99c:	2500      	movs	r5, #0
    c99e:	ea54 0305 	orrs.w	r3, r4, r5
    c9a2:	d100      	bne.n	c9a6 <disconn_complete+0x16>
    c9a4:	bd70      	pop	{r4, r5, r6, pc}
    c9a6:	4614      	mov	r4, r2
    c9a8:	460e      	mov	r6, r1
    c9aa:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    c9ac:	2204      	movs	r2, #4
    c9ae:	2105      	movs	r1, #5
    c9b0:	4620      	mov	r0, r4
    c9b2:	f7ff fee9 	bl	c788 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c9b6:	2104      	movs	r1, #4
    c9b8:	f104 0008 	add.w	r0, r4, #8
    c9bc:	f00d fc0a 	bl	1a1d4 <net_buf_simple_add>
	ep->status = 0x00;
    c9c0:	2300      	movs	r3, #0
    c9c2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c9c4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    c9c8:	782b      	ldrb	r3, [r5, #0]
    c9ca:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    c9cc:	4a03      	ldr	r2, [pc, #12]	; (c9dc <disconn_complete+0x4c>)
    c9ce:	6813      	ldr	r3, [r2, #0]
    c9d0:	3b01      	subs	r3, #1
    c9d2:	6013      	str	r3, [r2, #0]
    c9d4:	e7e6      	b.n	c9a4 <disconn_complete+0x14>
    c9d6:	bf00      	nop
    c9d8:	2000bb00 	.word	0x2000bb00
    c9dc:	200009dc 	.word	0x200009dc

0000c9e0 <enc_refresh_complete>:
{
    c9e0:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    c9e2:	4b0d      	ldr	r3, [pc, #52]	; (ca18 <enc_refresh_complete+0x38>)
    c9e4:	e9d3 4500 	ldrd	r4, r5, [r3]
    c9e8:	2400      	movs	r4, #0
    c9ea:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    c9ee:	ea54 0305 	orrs.w	r3, r4, r5
    c9f2:	d100      	bne.n	c9f6 <enc_refresh_complete+0x16>
    c9f4:	bd38      	pop	{r3, r4, r5, pc}
    c9f6:	4614      	mov	r4, r2
    c9f8:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    c9fa:	2203      	movs	r2, #3
    c9fc:	2130      	movs	r1, #48	; 0x30
    c9fe:	4620      	mov	r0, r4
    ca00:	f7ff fec2 	bl	c788 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca04:	2103      	movs	r1, #3
    ca06:	f104 0008 	add.w	r0, r4, #8
    ca0a:	f00d fbe3 	bl	1a1d4 <net_buf_simple_add>
	ep->status = 0x00;
    ca0e:	2300      	movs	r3, #0
    ca10:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ca12:	f8a0 5001 	strh.w	r5, [r0, #1]
    ca16:	e7ed      	b.n	c9f4 <enc_refresh_complete+0x14>
    ca18:	2000bb00 	.word	0x2000bb00

0000ca1c <auth_payload_timeout_exp>:
{
    ca1c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    ca1e:	4b0c      	ldr	r3, [pc, #48]	; (ca50 <auth_payload_timeout_exp+0x34>)
    ca20:	e9d3 4500 	ldrd	r4, r5, [r3]
    ca24:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    ca28:	2500      	movs	r5, #0
    ca2a:	ea54 0305 	orrs.w	r3, r4, r5
    ca2e:	d100      	bne.n	ca32 <auth_payload_timeout_exp+0x16>
    ca30:	bd38      	pop	{r3, r4, r5, pc}
    ca32:	4614      	mov	r4, r2
    ca34:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    ca36:	2202      	movs	r2, #2
    ca38:	2157      	movs	r1, #87	; 0x57
    ca3a:	4620      	mov	r0, r4
    ca3c:	f7ff fea4 	bl	c788 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca40:	2102      	movs	r1, #2
    ca42:	f104 0008 	add.w	r0, r4, #8
    ca46:	f00d fbc5 	bl	1a1d4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    ca4a:	8005      	strh	r5, [r0, #0]
    ca4c:	e7f0      	b.n	ca30 <auth_payload_timeout_exp+0x14>
    ca4e:	bf00      	nop
    ca50:	20000a68 	.word	0x20000a68

0000ca54 <remote_version_info>:
{
    ca54:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    ca56:	4b11      	ldr	r3, [pc, #68]	; (ca9c <remote_version_info+0x48>)
    ca58:	e9d3 4500 	ldrd	r4, r5, [r3]
    ca5c:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    ca60:	2500      	movs	r5, #0
    ca62:	ea54 0305 	orrs.w	r3, r4, r5
    ca66:	d100      	bne.n	ca6a <remote_version_info+0x16>
    ca68:	bd70      	pop	{r4, r5, r6, pc}
    ca6a:	4615      	mov	r5, r2
    ca6c:	460e      	mov	r6, r1
    ca6e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    ca70:	2208      	movs	r2, #8
    ca72:	210c      	movs	r1, #12
    ca74:	4628      	mov	r0, r5
    ca76:	f7ff fe87 	bl	c788 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca7a:	2108      	movs	r1, #8
    ca7c:	1868      	adds	r0, r5, r1
    ca7e:	f00d fba9 	bl	1a1d4 <net_buf_simple_add>
	ep->status = 0x00;
    ca82:	2300      	movs	r3, #0
    ca84:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ca86:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    ca8a:	7923      	ldrb	r3, [r4, #4]
    ca8c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    ca8e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    ca92:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    ca94:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ca98:	80c3      	strh	r3, [r0, #6]
    ca9a:	e7e5      	b.n	ca68 <remote_version_info+0x14>
    ca9c:	2000bb00 	.word	0x2000bb00

0000caa0 <encrypt_change>:
{
    caa0:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    caa2:	4b0f      	ldr	r3, [pc, #60]	; (cae0 <encrypt_change+0x40>)
    caa4:	e9d3 4500 	ldrd	r4, r5, [r3]
    caa8:	f004 0480 	and.w	r4, r4, #128	; 0x80
    caac:	2500      	movs	r5, #0
    caae:	ea54 0305 	orrs.w	r3, r4, r5
    cab2:	d100      	bne.n	cab6 <encrypt_change+0x16>
    cab4:	bd70      	pop	{r4, r5, r6, pc}
    cab6:	4615      	mov	r5, r2
    cab8:	460e      	mov	r6, r1
    caba:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    cabc:	2204      	movs	r2, #4
    cabe:	2108      	movs	r1, #8
    cac0:	4628      	mov	r0, r5
    cac2:	f7ff fe61 	bl	c788 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cac6:	2104      	movs	r1, #4
    cac8:	f105 0008 	add.w	r0, r5, #8
    cacc:	f00d fb82 	bl	1a1d4 <net_buf_simple_add>
	ep->status = err;
    cad0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cad2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    cad6:	fab4 f384 	clz	r3, r4
    cada:	095b      	lsrs	r3, r3, #5
    cadc:	70c3      	strb	r3, [r0, #3]
    cade:	e7e9      	b.n	cab4 <encrypt_change+0x14>
    cae0:	2000bb00 	.word	0x2000bb00

0000cae4 <read_remote_ver_info>:
{
    cae4:	b510      	push	{r4, lr}
    cae6:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    cae8:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    caea:	8818      	ldrh	r0, [r3, #0]
    caec:	f00a ffc5 	bl	17a7a <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    caf0:	b100      	cbz	r0, caf4 <read_remote_ver_info+0x10>
    caf2:	200c      	movs	r0, #12
    caf4:	f7ff fe52 	bl	c79c <cmd_status>
    caf8:	6020      	str	r0, [r4, #0]
    cafa:	bd10      	pop	{r4, pc}

0000cafc <link_control_cmd_handle>:
{
    cafc:	b508      	push	{r3, lr}
    cafe:	460b      	mov	r3, r1
	switch (ocf) {
    cb00:	2806      	cmp	r0, #6
    cb02:	d004      	beq.n	cb0e <link_control_cmd_handle+0x12>
    cb04:	281d      	cmp	r0, #29
    cb06:	d008      	beq.n	cb1a <link_control_cmd_handle+0x1e>
		return -EINVAL;
    cb08:	f06f 0015 	mvn.w	r0, #21
}
    cb0c:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    cb0e:	4611      	mov	r1, r2
    cb10:	4618      	mov	r0, r3
    cb12:	f7ff fe5d 	bl	c7d0 <disconnect>
	return 0;
    cb16:	2000      	movs	r0, #0
		break;
    cb18:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    cb1a:	4611      	mov	r1, r2
    cb1c:	4618      	mov	r0, r3
    cb1e:	f7ff ffe1 	bl	cae4 <read_remote_ver_info>
	return 0;
    cb22:	2000      	movs	r0, #0
		break;
    cb24:	bd08      	pop	{r3, pc}
	...

0000cb28 <reset>:
{
    cb28:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    cb2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb2e:	4b0f      	ldr	r3, [pc, #60]	; (cb6c <reset+0x44>)
    cb30:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    cb32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cb36:	f641 75ff 	movw	r5, #8191	; 0x1fff
    cb3a:	4b0d      	ldr	r3, [pc, #52]	; (cb70 <reset+0x48>)
    cb3c:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cb40:	2400      	movs	r4, #0
    cb42:	2500      	movs	r5, #0
    cb44:	4b0b      	ldr	r3, [pc, #44]	; (cb74 <reset+0x4c>)
    cb46:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cb4a:	241f      	movs	r4, #31
    cb4c:	2500      	movs	r5, #0
    cb4e:	4b0a      	ldr	r3, [pc, #40]	; (cb78 <reset+0x50>)
    cb50:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    cb54:	b140      	cbz	r0, cb68 <reset+0x40>
    cb56:	460c      	mov	r4, r1
		ll_reset();
    cb58:	f00a fc8a 	bl	17470 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cb5c:	2101      	movs	r1, #1
    cb5e:	4620      	mov	r0, r4
    cb60:	f7ff fe44 	bl	c7ec <cmd_complete>
		ccst->status = 0x00;
    cb64:	2300      	movs	r3, #0
    cb66:	7003      	strb	r3, [r0, #0]
    cb68:	bd38      	pop	{r3, r4, r5, pc}
    cb6a:	bf00      	nop
    cb6c:	200009e0 	.word	0x200009e0
    cb70:	2000bb00 	.word	0x2000bb00
    cb74:	20000a68 	.word	0x20000a68
    cb78:	2000bb08 	.word	0x2000bb08

0000cb7c <read_tx_power_level>:
{
    cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb7e:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    cb80:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cb82:	881d      	ldrh	r5, [r3, #0]
    cb84:	b2ae      	uxth	r6, r5
	type = cmd->type;
    cb86:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    cb88:	2104      	movs	r1, #4
    cb8a:	4610      	mov	r0, r2
    cb8c:	f7ff fe2e 	bl	c7ec <cmd_complete>
    cb90:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    cb92:	1cc2      	adds	r2, r0, #3
    cb94:	4639      	mov	r1, r7
    cb96:	4630      	mov	r0, r6
    cb98:	f00a ff9b 	bl	17ad2 <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cb9c:	b120      	cbz	r0, cba8 <read_tx_power_level+0x2c>
    cb9e:	2302      	movs	r3, #2
    cba0:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cba2:	f8a4 5001 	strh.w	r5, [r4, #1]
    cba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cba8:	2300      	movs	r3, #0
    cbaa:	e7f9      	b.n	cba0 <read_tx_power_level+0x24>

0000cbac <read_auth_payload_timeout>:
{
    cbac:	b570      	push	{r4, r5, r6, lr}
    cbae:	b082      	sub	sp, #8
    cbb0:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    cbb2:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cbb4:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cbb6:	f10d 0106 	add.w	r1, sp, #6
    cbba:	b2a0      	uxth	r0, r4
    cbbc:	f00a ff98 	bl	17af0 <ll_apto_get>
    cbc0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cbc2:	2105      	movs	r1, #5
    cbc4:	4630      	mov	r0, r6
    cbc6:	f7ff fe11 	bl	c7ec <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cbca:	b14d      	cbz	r5, cbe0 <read_auth_payload_timeout+0x34>
    cbcc:	230c      	movs	r3, #12
    cbce:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cbd0:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cbd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cbd8:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cbdc:	b002      	add	sp, #8
    cbde:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cbe0:	2300      	movs	r3, #0
    cbe2:	e7f4      	b.n	cbce <read_auth_payload_timeout+0x22>

0000cbe4 <write_auth_payload_timeout>:
{
    cbe4:	b570      	push	{r4, r5, r6, lr}
    cbe6:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    cbe8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cbea:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    cbec:	8859      	ldrh	r1, [r3, #2]
    cbee:	b2a0      	uxth	r0, r4
    cbf0:	f00a ff9a 	bl	17b28 <ll_apto_set>
    cbf4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cbf6:	2103      	movs	r1, #3
    cbf8:	4630      	mov	r0, r6
    cbfa:	f7ff fdf7 	bl	c7ec <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cbfe:	b125      	cbz	r5, cc0a <write_auth_payload_timeout+0x26>
    cc00:	230c      	movs	r3, #12
    cc02:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cc04:	f8a0 4001 	strh.w	r4, [r0, #1]
    cc08:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cc0a:	2300      	movs	r3, #0
    cc0c:	e7f9      	b.n	cc02 <write_auth_payload_timeout+0x1e>

0000cc0e <ctrl_bb_cmd_handle>:
{
    cc0e:	b508      	push	{r3, lr}
    cc10:	460b      	mov	r3, r1
	switch (ocf) {
    cc12:	282d      	cmp	r0, #45	; 0x2d
    cc14:	d01f      	beq.n	cc56 <ctrl_bb_cmd_handle+0x48>
    cc16:	d908      	bls.n	cc2a <ctrl_bb_cmd_handle+0x1c>
    cc18:	287b      	cmp	r0, #123	; 0x7b
    cc1a:	d022      	beq.n	cc62 <ctrl_bb_cmd_handle+0x54>
    cc1c:	287c      	cmp	r0, #124	; 0x7c
    cc1e:	d026      	beq.n	cc6e <ctrl_bb_cmd_handle+0x60>
    cc20:	2863      	cmp	r0, #99	; 0x63
    cc22:	d012      	beq.n	cc4a <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    cc24:	f06f 0015 	mvn.w	r0, #21
}
    cc28:	bd08      	pop	{r3, pc}
	switch (ocf) {
    cc2a:	2801      	cmp	r0, #1
    cc2c:	d007      	beq.n	cc3e <ctrl_bb_cmd_handle+0x30>
    cc2e:	2803      	cmp	r0, #3
    cc30:	d1f8      	bne.n	cc24 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    cc32:	4611      	mov	r1, r2
    cc34:	4618      	mov	r0, r3
    cc36:	f7ff ff77 	bl	cb28 <reset>
	return 0;
    cc3a:	2000      	movs	r0, #0
		break;
    cc3c:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    cc3e:	4611      	mov	r1, r2
    cc40:	4618      	mov	r0, r3
    cc42:	f7f7 fd13 	bl	466c <set_event_mask>
	return 0;
    cc46:	2000      	movs	r0, #0
		break;
    cc48:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    cc4a:	4611      	mov	r1, r2
    cc4c:	4618      	mov	r0, r3
    cc4e:	f7ff fded 	bl	c82c <set_event_mask_page_2>
	return 0;
    cc52:	2000      	movs	r0, #0
		break;
    cc54:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    cc56:	4611      	mov	r1, r2
    cc58:	4618      	mov	r0, r3
    cc5a:	f7ff ff8f 	bl	cb7c <read_tx_power_level>
	return 0;
    cc5e:	2000      	movs	r0, #0
		break;
    cc60:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    cc62:	4611      	mov	r1, r2
    cc64:	4618      	mov	r0, r3
    cc66:	f7ff ffa1 	bl	cbac <read_auth_payload_timeout>
	return 0;
    cc6a:	2000      	movs	r0, #0
		break;
    cc6c:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    cc6e:	4611      	mov	r1, r2
    cc70:	4618      	mov	r0, r3
    cc72:	f7ff ffb7 	bl	cbe4 <write_auth_payload_timeout>
	return 0;
    cc76:	2000      	movs	r0, #0
		break;
    cc78:	bd08      	pop	{r3, pc}

0000cc7a <read_supported_commands>:
{
    cc7a:	b510      	push	{r4, lr}
    cc7c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cc7e:	2141      	movs	r1, #65	; 0x41
    cc80:	f7ff fdb4 	bl	c7ec <cmd_complete>
    cc84:	4604      	mov	r4, r0
	rp->status = 0x00;
    cc86:	2100      	movs	r1, #0
    cc88:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cc8c:	2240      	movs	r2, #64	; 0x40
    cc8e:	f01d ff15 	bl	2aabc <memset>
	rp->commands[2] |= BIT(7);
    cc92:	78e3      	ldrb	r3, [r4, #3]
    cc94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cc98:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    cc9a:	79a3      	ldrb	r3, [r4, #6]
    cc9c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cca0:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    cca2:	7ae3      	ldrb	r3, [r4, #11]
    cca4:	f043 0304 	orr.w	r3, r3, #4
    cca8:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    ccaa:	7be3      	ldrb	r3, [r4, #15]
    ccac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    ccb0:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    ccb2:	7c23      	ldrb	r3, [r4, #16]
    ccb4:	f043 0302 	orr.w	r3, r3, #2
    ccb8:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    ccba:	7de3      	ldrb	r3, [r4, #23]
    ccbc:	f043 0304 	orr.w	r3, r3, #4
    ccc0:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    ccc2:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    ccc4:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ccc6:	f062 0208 	orn	r2, r2, #8
    ccca:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    cccc:	22ff      	movs	r2, #255	; 0xff
    ccce:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    ccd0:	f043 030f 	orr.w	r3, r3, #15
    ccd4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    ccd6:	7863      	ldrb	r3, [r4, #1]
    ccd8:	f043 0320 	orr.w	r3, r3, #32
    ccdc:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    ccde:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    cce0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    cce4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    cce8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ccec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ccf0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ccf4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    ccf8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ccfc:	f040 0004 	orr.w	r0, r0, #4
    cd00:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    cd04:	f061 010f 	orn	r1, r1, #15
    cd08:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    cd0c:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    cd10:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    cd14:	f043 030f 	orr.w	r3, r3, #15
    cd18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    cd1c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cd20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cd24:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    cd28:	bd10      	pop	{r4, pc}

0000cd2a <read_local_features>:
{
    cd2a:	b510      	push	{r4, lr}
    cd2c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd2e:	2109      	movs	r1, #9
    cd30:	f7ff fd5c 	bl	c7ec <cmd_complete>
    cd34:	4604      	mov	r4, r0
	rp->status = 0x00;
    cd36:	2100      	movs	r1, #0
    cd38:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd3c:	2208      	movs	r2, #8
    cd3e:	f01d febd 	bl	2aabc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    cd42:	2360      	movs	r3, #96	; 0x60
    cd44:	7163      	strb	r3, [r4, #5]
    cd46:	bd10      	pop	{r4, pc}

0000cd48 <le_read_local_features>:
{
    cd48:	b510      	push	{r4, lr}
    cd4a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd4c:	2109      	movs	r1, #9
    cd4e:	f7ff fd4d 	bl	c7ec <cmd_complete>
    cd52:	4604      	mov	r4, r0
	rp->status = 0x00;
    cd54:	2100      	movs	r1, #0
    cd56:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd5a:	2208      	movs	r2, #8
    cd5c:	f01d feae 	bl	2aabc <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    cd60:	23ff      	movs	r3, #255	; 0xff
    cd62:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    cd64:	2341      	movs	r3, #65	; 0x41
    cd66:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    cd68:	2301      	movs	r3, #1
    cd6a:	70e3      	strb	r3, [r4, #3]
    cd6c:	bd10      	pop	{r4, pc}

0000cd6e <vs_read_supported_commands>:
{
    cd6e:	b510      	push	{r4, lr}
    cd70:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd72:	2141      	movs	r1, #65	; 0x41
    cd74:	f7ff fd3a 	bl	c7ec <cmd_complete>
    cd78:	4604      	mov	r4, r0
	rp->status = 0x00;
    cd7a:	2100      	movs	r1, #0
    cd7c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cd80:	2240      	movs	r2, #64	; 0x40
    cd82:	f01d fe9b 	bl	2aabc <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    cd86:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    cd88:	f063 0358 	orn	r3, r3, #88	; 0x58
    cd8c:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    cd8e:	78a3      	ldrb	r3, [r4, #2]
    cd90:	f043 0303 	orr.w	r3, r3, #3
    cd94:	70a3      	strb	r3, [r4, #2]
    cd96:	bd10      	pop	{r4, pc}

0000cd98 <vs_read_supported_features>:
{
    cd98:	b508      	push	{r3, lr}
    cd9a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd9c:	2109      	movs	r1, #9
    cd9e:	f7ff fd25 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    cda2:	2100      	movs	r1, #0
    cda4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cda8:	2208      	movs	r2, #8
    cdaa:	f01d fe87 	bl	2aabc <memset>
    cdae:	bd08      	pop	{r3, pc}

0000cdb0 <vs_read_static_addrs>:
{
    cdb0:	b510      	push	{r4, lr}
    cdb2:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cdb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cdc0:	d00d      	beq.n	cdde <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    cdc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cdca:	f013 0f01 	tst.w	r3, #1
    cdce:	d110      	bne.n	cdf2 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    cdd0:	2102      	movs	r1, #2
    cdd2:	f7ff fd0b 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    cdd6:	2300      	movs	r3, #0
    cdd8:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    cdda:	7043      	strb	r3, [r0, #1]
    cddc:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cdde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cde2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    cde6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cde8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdec:	4293      	cmp	r3, r2
    cdee:	d1e8      	bne.n	cdc2 <vs_read_static_addrs+0x12>
    cdf0:	e7ee      	b.n	cdd0 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    cdf2:	2118      	movs	r1, #24
    cdf4:	f7ff fcfa 	bl	c7ec <cmd_complete>
		rp->status = 0x00;
    cdf8:	2100      	movs	r1, #0
    cdfa:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    cdfc:	2301      	movs	r3, #1
    cdfe:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    ce00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ce04:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    ce08:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    ce0a:	f3c3 2407 	ubfx	r4, r3, #8, #8
    ce0e:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    ce10:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce12:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    ce14:	0a1b      	lsrs	r3, r3, #8
    ce16:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    ce18:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    ce1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ce20:	b29b      	uxth	r3, r3
	dst[0] = val;
    ce22:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    ce24:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    ce26:	f063 033f 	orn	r3, r3, #63	; 0x3f
    ce2a:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    ce2c:	2210      	movs	r2, #16
    ce2e:	3008      	adds	r0, #8
    ce30:	f01d fe44 	bl	2aabc <memset>
		return;
    ce34:	bd10      	pop	{r4, pc}

0000ce36 <vs_read_key_hierarchy_roots>:
{
    ce36:	b510      	push	{r4, lr}
    ce38:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ce3a:	2121      	movs	r1, #33	; 0x21
    ce3c:	f7ff fcd6 	bl	c7ec <cmd_complete>
    ce40:	4604      	mov	r4, r0
	rp->status = 0x00;
    ce42:	2300      	movs	r3, #0
    ce44:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ce46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce52:	d03f      	beq.n	ced4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ce54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ce5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce60:	d038      	beq.n	ced4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ce62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ce6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce6e:	d031      	beq.n	ced4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    ce70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ce78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce7c:	d02a      	beq.n	ced4 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ce82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    ce86:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    ce88:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce8c:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    ce8e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce90:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    ce92:	0a1b      	lsrs	r3, r3, #8
    ce94:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    ce96:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    ce9a:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    ce9c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cea0:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    cea2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cea4:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    cea6:	0a1b      	lsrs	r3, r3, #8
    cea8:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    ceaa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    ceae:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    ceb0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ceb4:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    ceb6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ceb8:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    ceba:	0a1b      	lsrs	r3, r3, #8
    cebc:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    cebe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    cec2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    cec4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cec8:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    ceca:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cecc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    cece:	0a1b      	lsrs	r3, r3, #8
    ced0:	7403      	strb	r3, [r0, #16]
    ced2:	e004      	b.n	cede <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ced4:	2210      	movs	r2, #16
    ced6:	2100      	movs	r1, #0
    ced8:	1c60      	adds	r0, r4, #1
    ceda:	f01d fdef 	bl	2aabc <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    cede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    cee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ceea:	d040      	beq.n	cf6e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ceec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    cef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cef8:	d039      	beq.n	cf6e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    cefa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cefe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    cf02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cf06:	d032      	beq.n	cf6e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    cf08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cf0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    cf10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cf14:	d02b      	beq.n	cf6e <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    cf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cf1a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    cf1e:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    cf20:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cf24:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    cf26:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf28:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    cf2a:	0a1b      	lsrs	r3, r3, #8
    cf2c:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    cf2e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    cf32:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    cf34:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cf38:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    cf3a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf3c:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    cf3e:	0a1b      	lsrs	r3, r3, #8
    cf40:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    cf42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    cf46:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    cf48:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cf4c:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    cf4e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf50:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    cf52:	0a1b      	lsrs	r3, r3, #8
    cf54:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    cf56:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    cf5a:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    cf5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cf60:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    cf62:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf64:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    cf66:	0a1b      	lsrs	r3, r3, #8
    cf68:	f884 3020 	strb.w	r3, [r4, #32]
    cf6c:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    cf6e:	2210      	movs	r2, #16
    cf70:	2100      	movs	r1, #0
    cf72:	f104 0011 	add.w	r0, r4, #17
    cf76:	f01d fda1 	bl	2aabc <memset>
    cf7a:	bd10      	pop	{r4, pc}

0000cf7c <read_bd_addr>:
{
    cf7c:	b508      	push	{r3, lr}
    cf7e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf80:	2107      	movs	r1, #7
    cf82:	f7ff fc33 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    cf86:	2300      	movs	r3, #0
    cf88:	4601      	mov	r1, r0
    cf8a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    cf8e:	4618      	mov	r0, r3
    cf90:	f00b fd62 	bl	18a58 <ll_addr_get>
    cf94:	bd08      	pop	{r3, pc}

0000cf96 <info_cmd_handle>:
{
    cf96:	b508      	push	{r3, lr}
    cf98:	460b      	mov	r3, r1
	switch (ocf) {
    cf9a:	3801      	subs	r0, #1
    cf9c:	2808      	cmp	r0, #8
    cf9e:	d81e      	bhi.n	cfde <info_cmd_handle+0x48>
    cfa0:	e8df f000 	tbb	[pc, r0]
    cfa4:	1d110b05 	.word	0x1d110b05
    cfa8:	1d1d1d1d 	.word	0x1d1d1d1d
    cfac:	17          	.byte	0x17
    cfad:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    cfae:	4611      	mov	r1, r2
    cfb0:	4618      	mov	r0, r3
    cfb2:	f7ff fc61 	bl	c878 <read_local_version_info>
	return 0;
    cfb6:	2000      	movs	r0, #0
		break;
    cfb8:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    cfba:	4611      	mov	r1, r2
    cfbc:	4618      	mov	r0, r3
    cfbe:	f7ff fe5c 	bl	cc7a <read_supported_commands>
	return 0;
    cfc2:	2000      	movs	r0, #0
		break;
    cfc4:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    cfc6:	4611      	mov	r1, r2
    cfc8:	4618      	mov	r0, r3
    cfca:	f7ff feae 	bl	cd2a <read_local_features>
	return 0;
    cfce:	2000      	movs	r0, #0
		break;
    cfd0:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    cfd2:	4611      	mov	r1, r2
    cfd4:	4618      	mov	r0, r3
    cfd6:	f7ff ffd1 	bl	cf7c <read_bd_addr>
	return 0;
    cfda:	2000      	movs	r0, #0
		break;
    cfdc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cfde:	f06f 0015 	mvn.w	r0, #21
}
    cfe2:	bd08      	pop	{r3, pc}

0000cfe4 <le_set_random_address>:
{
    cfe4:	b510      	push	{r4, lr}
    cfe6:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    cfe8:	6881      	ldr	r1, [r0, #8]
    cfea:	2001      	movs	r0, #1
    cfec:	f00b fd56 	bl	18a9c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cff0:	2101      	movs	r1, #1
    cff2:	4620      	mov	r0, r4
    cff4:	f7ff fbfa 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    cff8:	2300      	movs	r3, #0
    cffa:	7003      	strb	r3, [r0, #0]
    cffc:	bd10      	pop	{r4, pc}

0000cffe <vs_write_bd_addr>:
{
    cffe:	b510      	push	{r4, lr}
    d000:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d002:	6881      	ldr	r1, [r0, #8]
    d004:	2000      	movs	r0, #0
    d006:	f00b fd49 	bl	18a9c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d00a:	2101      	movs	r1, #1
    d00c:	4620      	mov	r0, r4
    d00e:	f7ff fbed 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    d012:	2300      	movs	r3, #0
    d014:	7003      	strb	r3, [r0, #0]
    d016:	bd10      	pop	{r4, pc}

0000d018 <le_read_wl_size>:
{
    d018:	b510      	push	{r4, lr}
    d01a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d01c:	2102      	movs	r1, #2
    d01e:	f7ff fbe5 	bl	c7ec <cmd_complete>
    d022:	4604      	mov	r4, r0
	rp->status = 0x00;
    d024:	2300      	movs	r3, #0
    d026:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    d028:	f00b ff38 	bl	18e9c <ll_wl_size_get>
    d02c:	7060      	strb	r0, [r4, #1]
    d02e:	bd10      	pop	{r4, pc}

0000d030 <le_clear_wl>:
{
    d030:	b510      	push	{r4, lr}
    d032:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d034:	2101      	movs	r1, #1
    d036:	f7ff fbd9 	bl	c7ec <cmd_complete>
    d03a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    d03c:	f00b ff30 	bl	18ea0 <ll_wl_clear>
    d040:	7020      	strb	r0, [r4, #0]
    d042:	bd10      	pop	{r4, pc}

0000d044 <le_add_dev_to_wl>:
{
    d044:	b538      	push	{r3, r4, r5, lr}
    d046:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    d048:	6880      	ldr	r0, [r0, #8]
    d04a:	f00c f81b 	bl	19084 <ll_wl_add>
    d04e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d050:	2101      	movs	r1, #1
    d052:	4628      	mov	r0, r5
    d054:	f7ff fbca 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d058:	7004      	strb	r4, [r0, #0]
    d05a:	bd38      	pop	{r3, r4, r5, pc}

0000d05c <le_rem_dev_from_wl>:
{
    d05c:	b538      	push	{r3, r4, r5, lr}
    d05e:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    d060:	6880      	ldr	r0, [r0, #8]
    d062:	f00b ff33 	bl	18ecc <ll_wl_remove>
    d066:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d068:	2101      	movs	r1, #1
    d06a:	4628      	mov	r0, r5
    d06c:	f7ff fbbe 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d070:	7004      	strb	r4, [r0, #0]
    d072:	bd38      	pop	{r3, r4, r5, pc}

0000d074 <le_encrypt>:
{
    d074:	b510      	push	{r4, lr}
    d076:	b084      	sub	sp, #16
    d078:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    d07a:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d07c:	2300      	movs	r3, #0
    d07e:	466a      	mov	r2, sp
    d080:	f100 0110 	add.w	r1, r0, #16
    d084:	f001 fc9e 	bl	e9c4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    d088:	2111      	movs	r1, #17
    d08a:	4620      	mov	r0, r4
    d08c:	f7ff fbae 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    d090:	2300      	movs	r3, #0
    d092:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d096:	2210      	movs	r2, #16
    d098:	4669      	mov	r1, sp
    d09a:	f7f3 f911 	bl	2c0 <memcpy>
}
    d09e:	b004      	add	sp, #16
    d0a0:	bd10      	pop	{r4, pc}
	...

0000d0a4 <vs_read_build_info>:
{
    d0a4:	b570      	push	{r4, r5, r6, lr}
    d0a6:	b08a      	sub	sp, #40	; 0x28
    d0a8:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    d0aa:	466c      	mov	r4, sp
    d0ac:	4d0c      	ldr	r5, [pc, #48]	; (d0e0 <vs_read_build_info+0x3c>)
    d0ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d0b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d0b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d0b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d0b6:	e895 0003 	ldmia.w	r5, {r0, r1}
    d0ba:	f844 0b04 	str.w	r0, [r4], #4
    d0be:	f824 1b02 	strh.w	r1, [r4], #2
    d0c2:	0c09      	lsrs	r1, r1, #16
    d0c4:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d0c6:	2128      	movs	r1, #40	; 0x28
    d0c8:	4630      	mov	r0, r6
    d0ca:	f7ff fb8f 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    d0ce:	2300      	movs	r3, #0
    d0d0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d0d4:	2227      	movs	r2, #39	; 0x27
    d0d6:	4669      	mov	r1, sp
    d0d8:	f7f3 f8f2 	bl	2c0 <memcpy>
}
    d0dc:	b00a      	add	sp, #40	; 0x28
    d0de:	bd70      	pop	{r4, r5, r6, pc}
    d0e0:	0002f760 	.word	0x0002f760

0000d0e4 <vendor_cmd_handle>:
{
    d0e4:	b508      	push	{r3, lr}
    d0e6:	460b      	mov	r3, r1
	switch (ocf) {
    d0e8:	3801      	subs	r0, #1
    d0ea:	2809      	cmp	r0, #9
    d0ec:	d830      	bhi.n	d150 <vendor_cmd_handle+0x6c>
    d0ee:	e8df f000 	tbb	[pc, r0]
    d0f2:	0b05      	.short	0x0b05
    d0f4:	1d2f2f11 	.word	0x1d2f2f11
    d0f8:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    d0fc:	4611      	mov	r1, r2
    d0fe:	4618      	mov	r0, r3
    d100:	f7ff fbf6 	bl	c8f0 <vs_read_version_info>
	return 0;
    d104:	2000      	movs	r0, #0
		break;
    d106:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    d108:	4611      	mov	r1, r2
    d10a:	4618      	mov	r0, r3
    d10c:	f7ff fe2f 	bl	cd6e <vs_read_supported_commands>
	return 0;
    d110:	2000      	movs	r0, #0
		break;
    d112:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    d114:	4611      	mov	r1, r2
    d116:	4618      	mov	r0, r3
    d118:	f7ff fe3e 	bl	cd98 <vs_read_supported_features>
	return 0;
    d11c:	2000      	movs	r0, #0
		break;
    d11e:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    d120:	4611      	mov	r1, r2
    d122:	4618      	mov	r0, r3
    d124:	f7ff ffbe 	bl	d0a4 <vs_read_build_info>
	return 0;
    d128:	2000      	movs	r0, #0
		break;
    d12a:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    d12c:	4611      	mov	r1, r2
    d12e:	4618      	mov	r0, r3
    d130:	f7ff ff65 	bl	cffe <vs_write_bd_addr>
	return 0;
    d134:	2000      	movs	r0, #0
		break;
    d136:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    d138:	4611      	mov	r1, r2
    d13a:	4618      	mov	r0, r3
    d13c:	f7ff fe38 	bl	cdb0 <vs_read_static_addrs>
	return 0;
    d140:	2000      	movs	r0, #0
		break;
    d142:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    d144:	4611      	mov	r1, r2
    d146:	4618      	mov	r0, r3
    d148:	f7ff fe75 	bl	ce36 <vs_read_key_hierarchy_roots>
	return 0;
    d14c:	2000      	movs	r0, #0
		break;
    d14e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d150:	f06f 0015 	mvn.w	r0, #21
}
    d154:	bd08      	pop	{r3, pc}

0000d156 <le_unknown_rsp>:
{
    d156:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    d158:	7903      	ldrb	r3, [r0, #4]
    d15a:	2b0e      	cmp	r3, #14
    d15c:	d000      	beq.n	d160 <le_unknown_rsp+0xa>
    d15e:	bd08      	pop	{r3, pc}
    d160:	4613      	mov	r3, r2
    d162:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d164:	2100      	movs	r1, #0
    d166:	201a      	movs	r0, #26
    d168:	f7f8 f966 	bl	5438 <le_remote_feat_complete>
}
    d16c:	e7f7      	b.n	d15e <le_unknown_rsp+0x8>

0000d16e <le_rand>:
{
    d16e:	b508      	push	{r3, lr}
    d170:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d172:	2109      	movs	r1, #9
    d174:	f7ff fb3a 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    d178:	2300      	movs	r3, #0
    d17a:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d17e:	2108      	movs	r1, #8
    d180:	f003 fcb2 	bl	10ae8 <bt_rand>
    d184:	bd08      	pop	{r3, pc}

0000d186 <le_set_adv_param>:
{
    d186:	b570      	push	{r4, r5, r6, lr}
    d188:	b08c      	sub	sp, #48	; 0x30
    d18a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    d18c:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    d18e:	460c      	mov	r4, r1
    d190:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    d194:	790b      	ldrb	r3, [r1, #4]
    d196:	2000      	movs	r0, #0
    d198:	900a      	str	r0, [sp, #40]	; 0x28
    d19a:	9009      	str	r0, [sp, #36]	; 0x24
    d19c:	9008      	str	r0, [sp, #32]
    d19e:	9007      	str	r0, [sp, #28]
    d1a0:	9006      	str	r0, [sp, #24]
    d1a2:	9005      	str	r0, [sp, #20]
    d1a4:	7b8e      	ldrb	r6, [r1, #14]
    d1a6:	9604      	str	r6, [sp, #16]
    d1a8:	7b4e      	ldrb	r6, [r1, #13]
    d1aa:	9603      	str	r6, [sp, #12]
    d1ac:	9402      	str	r4, [sp, #8]
    d1ae:	798c      	ldrb	r4, [r1, #6]
    d1b0:	9401      	str	r4, [sp, #4]
    d1b2:	7949      	ldrb	r1, [r1, #5]
    d1b4:	9100      	str	r1, [sp, #0]
    d1b6:	4601      	mov	r1, r0
    d1b8:	f00c fc40 	bl	19a3c <ll_adv_params_set>
    d1bc:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1be:	2101      	movs	r1, #1
    d1c0:	4628      	mov	r0, r5
    d1c2:	f7ff fb13 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d1c6:	7004      	strb	r4, [r0, #0]
}
    d1c8:	b00c      	add	sp, #48	; 0x30
    d1ca:	bd70      	pop	{r4, r5, r6, pc}

0000d1cc <le_set_adv_data>:
{
    d1cc:	b510      	push	{r4, lr}
    d1ce:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    d1d0:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d1d2:	1c59      	adds	r1, r3, #1
    d1d4:	7818      	ldrb	r0, [r3, #0]
    d1d6:	f00c fd55 	bl	19c84 <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1da:	2101      	movs	r1, #1
    d1dc:	4620      	mov	r0, r4
    d1de:	f7ff fb05 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    d1e2:	2300      	movs	r3, #0
    d1e4:	7003      	strb	r3, [r0, #0]
    d1e6:	bd10      	pop	{r4, pc}

0000d1e8 <le_set_scan_rsp_data>:
{
    d1e8:	b510      	push	{r4, lr}
    d1ea:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    d1ec:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d1ee:	1c59      	adds	r1, r3, #1
    d1f0:	7818      	ldrb	r0, [r3, #0]
    d1f2:	f00c fda0 	bl	19d36 <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1f6:	2101      	movs	r1, #1
    d1f8:	4620      	mov	r0, r4
    d1fa:	f7ff faf7 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    d1fe:	2300      	movs	r3, #0
    d200:	7003      	strb	r3, [r0, #0]
    d202:	bd10      	pop	{r4, pc}

0000d204 <le_set_adv_enable>:
{
    d204:	b538      	push	{r3, r4, r5, lr}
    d206:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    d208:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    d20a:	7818      	ldrb	r0, [r3, #0]
    d20c:	f00c fdd8 	bl	19dc0 <ll_adv_enable>
    d210:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d212:	2101      	movs	r1, #1
    d214:	4628      	mov	r0, r5
    d216:	f7ff fae9 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d21a:	b114      	cbz	r4, d222 <le_set_adv_enable+0x1e>
    d21c:	230c      	movs	r3, #12
    d21e:	7003      	strb	r3, [r0, #0]
    d220:	bd38      	pop	{r3, r4, r5, pc}
    d222:	2300      	movs	r3, #0
    d224:	e7fb      	b.n	d21e <le_set_adv_enable+0x1a>

0000d226 <le_set_scan_param>:
{
    d226:	b530      	push	{r4, r5, lr}
    d228:	b083      	sub	sp, #12
    d22a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    d22c:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    d22e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    d232:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d236:	7820      	ldrb	r0, [r4, #0]
    d238:	7963      	ldrb	r3, [r4, #5]
    d23a:	79a4      	ldrb	r4, [r4, #6]
    d23c:	9400      	str	r4, [sp, #0]
    d23e:	f00c fe51 	bl	19ee4 <ll_scan_params_set>
    d242:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d244:	2101      	movs	r1, #1
    d246:	4628      	mov	r0, r5
    d248:	f7ff fad0 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d24c:	b11c      	cbz	r4, d256 <le_set_scan_param+0x30>
    d24e:	230c      	movs	r3, #12
    d250:	7003      	strb	r3, [r0, #0]
}
    d252:	b003      	add	sp, #12
    d254:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d256:	2300      	movs	r3, #0
    d258:	e7fa      	b.n	d250 <le_set_scan_param+0x2a>
	...

0000d25c <le_set_scan_enable>:
{
    d25c:	b538      	push	{r3, r4, r5, lr}
    d25e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    d260:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    d262:	781a      	ldrb	r2, [r3, #0]
    d264:	b13a      	cbz	r2, d276 <le_set_scan_enable+0x1a>
    d266:	785a      	ldrb	r2, [r3, #1]
    d268:	b12a      	cbz	r2, d276 <le_set_scan_enable+0x1a>
		dup_count = 0;
    d26a:	2200      	movs	r2, #0
    d26c:	490b      	ldr	r1, [pc, #44]	; (d29c <le_set_scan_enable+0x40>)
    d26e:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    d270:	490b      	ldr	r1, [pc, #44]	; (d2a0 <le_set_scan_enable+0x44>)
    d272:	600a      	str	r2, [r1, #0]
    d274:	e003      	b.n	d27e <le_set_scan_enable+0x22>
		dup_count = -1;
    d276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d27a:	4a08      	ldr	r2, [pc, #32]	; (d29c <le_set_scan_enable+0x40>)
    d27c:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    d27e:	7818      	ldrb	r0, [r3, #0]
    d280:	f00c fe4c 	bl	19f1c <ll_scan_enable>
    d284:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d286:	2101      	movs	r1, #1
    d288:	4628      	mov	r0, r5
    d28a:	f7ff faaf 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d28e:	b114      	cbz	r4, d296 <le_set_scan_enable+0x3a>
    d290:	230c      	movs	r3, #12
    d292:	7003      	strb	r3, [r0, #0]
    d294:	bd38      	pop	{r3, r4, r5, pc}
    d296:	2300      	movs	r3, #0
    d298:	e7fb      	b.n	d292 <le_set_scan_enable+0x36>
    d29a:	bf00      	nop
    d29c:	200009e0 	.word	0x200009e0
    d2a0:	200009e4 	.word	0x200009e4

0000d2a4 <le_create_connection>:
{
    d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2a6:	b087      	sub	sp, #28
    d2a8:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    d2aa:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    d2ac:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    d2ae:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    d2b0:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    d2b4:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    d2b8:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    d2bc:	7922      	ldrb	r2, [r4, #4]
    d2be:	7963      	ldrb	r3, [r4, #5]
    d2c0:	1da6      	adds	r6, r4, #6
    d2c2:	7b24      	ldrb	r4, [r4, #12]
    d2c4:	f8cd c010 	str.w	ip, [sp, #16]
    d2c8:	f8cd e00c 	str.w	lr, [sp, #12]
    d2cc:	9702      	str	r7, [sp, #8]
    d2ce:	9401      	str	r4, [sp, #4]
    d2d0:	9600      	str	r6, [sp, #0]
    d2d2:	f00c fe63 	bl	19f9c <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d2d6:	b100      	cbz	r0, d2da <le_create_connection+0x36>
    d2d8:	200c      	movs	r0, #12
    d2da:	f7ff fa5f 	bl	c79c <cmd_status>
    d2de:	6028      	str	r0, [r5, #0]
}
    d2e0:	b007      	add	sp, #28
    d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d2e4 <le_create_conn_cancel>:
{
    d2e4:	b538      	push	{r3, r4, r5, lr}
    d2e6:	460d      	mov	r5, r1
	status = ll_connect_disable();
    d2e8:	f00b f9fe 	bl	186e8 <ll_connect_disable>
    d2ec:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d2ee:	2101      	movs	r1, #1
    d2f0:	4628      	mov	r0, r5
    d2f2:	f7ff fa7b 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2f6:	b114      	cbz	r4, d2fe <le_create_conn_cancel+0x1a>
    d2f8:	230c      	movs	r3, #12
    d2fa:	7003      	strb	r3, [r0, #0]
    d2fc:	bd38      	pop	{r3, r4, r5, pc}
    d2fe:	2300      	movs	r3, #0
    d300:	e7fb      	b.n	d2fa <le_create_conn_cancel+0x16>

0000d302 <le_set_host_chan_classif>:
{
    d302:	b538      	push	{r3, r4, r5, lr}
    d304:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    d306:	6880      	ldr	r0, [r0, #8]
    d308:	f00a fb06 	bl	17918 <ll_chm_update>
    d30c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d30e:	2101      	movs	r1, #1
    d310:	4628      	mov	r0, r5
    d312:	f7ff fa6b 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d316:	b114      	cbz	r4, d31e <le_set_host_chan_classif+0x1c>
    d318:	230c      	movs	r3, #12
    d31a:	7003      	strb	r3, [r0, #0]
    d31c:	bd38      	pop	{r3, r4, r5, pc}
    d31e:	2300      	movs	r3, #0
    d320:	e7fb      	b.n	d31a <le_set_host_chan_classif+0x18>

0000d322 <le_start_encryption>:
{
    d322:	b510      	push	{r4, lr}
    d324:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    d326:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d328:	4611      	mov	r1, r2
    d32a:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    d32e:	f102 030c 	add.w	r3, r2, #12
    d332:	320a      	adds	r2, #10
    d334:	f00a fe2a 	bl	17f8c <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d338:	b100      	cbz	r0, d33c <le_start_encryption+0x1a>
    d33a:	200c      	movs	r0, #12
    d33c:	f7ff fa2e 	bl	c79c <cmd_status>
    d340:	6020      	str	r0, [r4, #0]
    d342:	bd10      	pop	{r4, pc}

0000d344 <le_ltk_req_reply>:
{
    d344:	b570      	push	{r4, r5, r6, lr}
    d346:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    d348:	6882      	ldr	r2, [r0, #8]
    d34a:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d34e:	2100      	movs	r1, #0
    d350:	b2a0      	uxth	r0, r4
    d352:	f00a fb34 	bl	179be <ll_start_enc_req_send>
    d356:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d358:	2103      	movs	r1, #3
    d35a:	4630      	mov	r0, r6
    d35c:	f7ff fa46 	bl	c7ec <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d360:	b125      	cbz	r5, d36c <le_ltk_req_reply+0x28>
    d362:	230c      	movs	r3, #12
    d364:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d366:	f8a0 4001 	strh.w	r4, [r0, #1]
    d36a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d36c:	2300      	movs	r3, #0
    d36e:	e7f9      	b.n	d364 <le_ltk_req_reply+0x20>

0000d370 <le_ltk_req_neg_reply>:
{
    d370:	b570      	push	{r4, r5, r6, lr}
    d372:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    d374:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d376:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d378:	2200      	movs	r2, #0
    d37a:	2106      	movs	r1, #6
    d37c:	b2a0      	uxth	r0, r4
    d37e:	f00a fb1e 	bl	179be <ll_start_enc_req_send>
    d382:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d384:	2103      	movs	r1, #3
    d386:	4630      	mov	r0, r6
    d388:	f7ff fa30 	bl	c7ec <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d38c:	b125      	cbz	r5, d398 <le_ltk_req_neg_reply+0x28>
    d38e:	230c      	movs	r3, #12
    d390:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d392:	f8a0 4001 	strh.w	r4, [r0, #1]
    d396:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d398:	2300      	movs	r3, #0
    d39a:	e7f9      	b.n	d390 <le_ltk_req_neg_reply+0x20>

0000d39c <le_read_chan_map>:
{
    d39c:	b570      	push	{r4, r5, r6, lr}
    d39e:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    d3a0:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d3a2:	8815      	ldrh	r5, [r2, #0]
    d3a4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d3a6:	2108      	movs	r1, #8
    d3a8:	4618      	mov	r0, r3
    d3aa:	f7ff fa1f 	bl	c7ec <cmd_complete>
    d3ae:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d3b0:	1cc1      	adds	r1, r0, #3
    d3b2:	4630      	mov	r0, r6
    d3b4:	f00a faee 	bl	17994 <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d3b8:	b120      	cbz	r0, d3c4 <le_read_chan_map+0x28>
    d3ba:	2302      	movs	r3, #2
    d3bc:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d3be:	f8a4 5001 	strh.w	r5, [r4, #1]
    d3c2:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d3c4:	2300      	movs	r3, #0
    d3c6:	e7f9      	b.n	d3bc <le_read_chan_map+0x20>

0000d3c8 <le_read_remote_features>:
{
    d3c8:	b510      	push	{r4, lr}
    d3ca:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    d3cc:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    d3ce:	8818      	ldrh	r0, [r3, #0]
    d3d0:	f00a fb3d 	bl	17a4e <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d3d4:	b100      	cbz	r0, d3d8 <le_read_remote_features+0x10>
    d3d6:	200c      	movs	r0, #12
    d3d8:	f7ff f9e0 	bl	c79c <cmd_status>
    d3dc:	6020      	str	r0, [r4, #0]
    d3de:	bd10      	pop	{r4, pc}

0000d3e0 <le_conn_param_req_neg_reply>:
{
    d3e0:	b570      	push	{r4, r5, r6, lr}
    d3e2:	b082      	sub	sp, #8
    d3e4:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    d3e6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d3e8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    d3ea:	789a      	ldrb	r2, [r3, #2]
    d3ec:	2300      	movs	r3, #0
    d3ee:	9301      	str	r3, [sp, #4]
    d3f0:	9300      	str	r3, [sp, #0]
    d3f2:	2102      	movs	r1, #2
    d3f4:	b2a0      	uxth	r0, r4
    d3f6:	f00a f9ff 	bl	177f8 <ll_conn_update>
    d3fa:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d3fc:	2103      	movs	r1, #3
    d3fe:	4630      	mov	r0, r6
    d400:	f7ff f9f4 	bl	c7ec <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d404:	b12d      	cbz	r5, d412 <le_conn_param_req_neg_reply+0x32>
    d406:	230c      	movs	r3, #12
    d408:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d40a:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    d40e:	b002      	add	sp, #8
    d410:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d412:	2300      	movs	r3, #0
    d414:	e7f8      	b.n	d408 <le_conn_param_req_neg_reply+0x28>

0000d416 <le_set_data_len>:
{
    d416:	b570      	push	{r4, r5, r6, lr}
    d418:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    d41a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d41c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d41e:	889a      	ldrh	r2, [r3, #4]
    d420:	8859      	ldrh	r1, [r3, #2]
    d422:	b2a0      	uxth	r0, r4
    d424:	f00a fb97 	bl	17b56 <ll_length_req_send>
    d428:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d42a:	2103      	movs	r1, #3
    d42c:	4630      	mov	r0, r6
    d42e:	f7ff f9dd 	bl	c7ec <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d432:	b125      	cbz	r5, d43e <le_set_data_len+0x28>
    d434:	230c      	movs	r3, #12
    d436:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d438:	f8a0 4001 	strh.w	r4, [r0, #1]
    d43c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d43e:	2300      	movs	r3, #0
    d440:	e7f9      	b.n	d436 <le_set_data_len+0x20>

0000d442 <le_read_default_data_len>:
{
    d442:	b510      	push	{r4, lr}
    d444:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d446:	2105      	movs	r1, #5
    d448:	f7ff f9d0 	bl	c7ec <cmd_complete>
    d44c:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    d44e:	1cc1      	adds	r1, r0, #3
    d450:	3001      	adds	r0, #1
    d452:	f00a fba7 	bl	17ba4 <ll_length_default_get>
	rp->status = 0x00;
    d456:	2300      	movs	r3, #0
    d458:	7023      	strb	r3, [r4, #0]
    d45a:	bd10      	pop	{r4, pc}

0000d45c <le_write_default_data_len>:
{
    d45c:	b538      	push	{r3, r4, r5, lr}
    d45e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    d460:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    d462:	8859      	ldrh	r1, [r3, #2]
    d464:	8818      	ldrh	r0, [r3, #0]
    d466:	f00a fba7 	bl	17bb8 <ll_length_default_set>
    d46a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d46c:	2101      	movs	r1, #1
    d46e:	4628      	mov	r0, r5
    d470:	f7ff f9bc 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d474:	b114      	cbz	r4, d47c <le_write_default_data_len+0x20>
    d476:	231e      	movs	r3, #30
    d478:	7003      	strb	r3, [r0, #0]
    d47a:	bd38      	pop	{r3, r4, r5, pc}
    d47c:	2300      	movs	r3, #0
    d47e:	e7fb      	b.n	d478 <le_write_default_data_len+0x1c>

0000d480 <le_read_max_data_len>:
{
    d480:	b510      	push	{r4, lr}
    d482:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d484:	2109      	movs	r1, #9
    d486:	f7ff f9b1 	bl	c7ec <cmd_complete>
    d48a:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    d48c:	1dc3      	adds	r3, r0, #7
    d48e:	1d42      	adds	r2, r0, #5
    d490:	1cc1      	adds	r1, r0, #3
    d492:	3001      	adds	r0, #1
    d494:	f00a fb9a 	bl	17bcc <ll_length_max_get>
	rp->status = 0x00;
    d498:	2300      	movs	r3, #0
    d49a:	7023      	strb	r3, [r4, #0]
    d49c:	bd10      	pop	{r4, pc}
	...

0000d4a0 <le_phy_upd_complete>:
{
    d4a0:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4a2:	4b1a      	ldr	r3, [pc, #104]	; (d50c <le_phy_upd_complete+0x6c>)
    d4a4:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4a8:	2400      	movs	r4, #0
    d4aa:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d4ae:	ea54 0305 	orrs.w	r3, r4, r5
    d4b2:	d008      	beq.n	d4c6 <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d4b4:	4b16      	ldr	r3, [pc, #88]	; (d510 <le_phy_upd_complete+0x70>)
    d4b6:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4ba:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d4be:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4c0:	ea54 0305 	orrs.w	r3, r4, r5
    d4c4:	d100      	bne.n	d4c8 <le_phy_upd_complete+0x28>
    d4c6:	bd38      	pop	{r3, r4, r5, pc}
    d4c8:	4613      	mov	r3, r2
    d4ca:	460c      	mov	r4, r1
    d4cc:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d4ce:	2205      	movs	r2, #5
    d4d0:	210c      	movs	r1, #12
    d4d2:	4618      	mov	r0, r3
    d4d4:	f7ff fa24 	bl	c920 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d4d8:	78eb      	ldrb	r3, [r5, #3]
    d4da:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d4dc:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d4e0:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    d4e2:	fa92 f3a2 	rbit	r3, r2
    d4e6:	fab3 f383 	clz	r3, r3
    d4ea:	b90a      	cbnz	r2, d4f0 <le_phy_upd_complete+0x50>
    d4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4f0:	3301      	adds	r3, #1
    d4f2:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d4f4:	796a      	ldrb	r2, [r5, #5]
    d4f6:	fa92 f3a2 	rbit	r3, r2
    d4fa:	fab3 f383 	clz	r3, r3
    d4fe:	b90a      	cbnz	r2, d504 <le_phy_upd_complete+0x64>
    d500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d504:	3301      	adds	r3, #1
    d506:	7103      	strb	r3, [r0, #4]
    d508:	e7dd      	b.n	d4c6 <le_phy_upd_complete+0x26>
    d50a:	bf00      	nop
    d50c:	2000bb00 	.word	0x2000bb00
    d510:	2000bb08 	.word	0x2000bb08

0000d514 <le_read_phy>:
{
    d514:	b570      	push	{r4, r5, r6, lr}
    d516:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    d518:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d51a:	8815      	ldrh	r5, [r2, #0]
    d51c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d51e:	2105      	movs	r1, #5
    d520:	4618      	mov	r0, r3
    d522:	f7ff f963 	bl	c7ec <cmd_complete>
    d526:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d528:	1d02      	adds	r2, r0, #4
    d52a:	1cc1      	adds	r1, r0, #3
    d52c:	4630      	mov	r0, r6
    d52e:	f00a fb57 	bl	17be0 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d532:	b1c0      	cbz	r0, d566 <le_read_phy+0x52>
    d534:	230c      	movs	r3, #12
    d536:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d538:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d53c:	78e2      	ldrb	r2, [r4, #3]
    d53e:	fa92 f3a2 	rbit	r3, r2
    d542:	fab3 f383 	clz	r3, r3
    d546:	b90a      	cbnz	r2, d54c <le_read_phy+0x38>
    d548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d54c:	3301      	adds	r3, #1
    d54e:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d550:	7922      	ldrb	r2, [r4, #4]
    d552:	fa92 f3a2 	rbit	r3, r2
    d556:	fab3 f383 	clz	r3, r3
    d55a:	b90a      	cbnz	r2, d560 <le_read_phy+0x4c>
    d55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d560:	3301      	adds	r3, #1
    d562:	7123      	strb	r3, [r4, #4]
    d564:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d566:	2300      	movs	r3, #0
    d568:	e7e5      	b.n	d536 <le_read_phy+0x22>

0000d56a <le_set_default_phy>:
{
    d56a:	b538      	push	{r3, r4, r5, lr}
    d56c:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    d56e:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d570:	781a      	ldrb	r2, [r3, #0]
    d572:	f012 0f01 	tst.w	r2, #1
    d576:	d001      	beq.n	d57c <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    d578:	2107      	movs	r1, #7
    d57a:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d57c:	f012 0f02 	tst.w	r2, #2
    d580:	d001      	beq.n	d586 <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    d582:	2207      	movs	r2, #7
    d584:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d586:	7899      	ldrb	r1, [r3, #2]
    d588:	7858      	ldrb	r0, [r3, #1]
    d58a:	f00a fb3d 	bl	17c08 <ll_phy_default_set>
    d58e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d590:	2101      	movs	r1, #1
    d592:	4628      	mov	r0, r5
    d594:	f7ff f92a 	bl	c7ec <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d598:	b114      	cbz	r4, d5a0 <le_set_default_phy+0x36>
    d59a:	231e      	movs	r3, #30
    d59c:	7003      	strb	r3, [r0, #0]
    d59e:	bd38      	pop	{r3, r4, r5, pc}
    d5a0:	2300      	movs	r3, #0
    d5a2:	e7fb      	b.n	d59c <le_set_default_phy+0x32>

0000d5a4 <le_set_phy>:
{
    d5a4:	b538      	push	{r3, r4, r5, lr}
    d5a6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    d5a8:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d5aa:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d5ac:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d5b0:	788b      	ldrb	r3, [r1, #2]
    d5b2:	f013 0f01 	tst.w	r3, #1
    d5b6:	d001      	beq.n	d5bc <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    d5b8:	2507      	movs	r5, #7
    d5ba:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d5bc:	f013 0f02 	tst.w	r3, #2
    d5c0:	d001      	beq.n	d5c6 <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    d5c2:	2307      	movs	r3, #7
    d5c4:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    d5c6:	f012 0f03 	tst.w	r2, #3
    d5ca:	d00c      	beq.n	d5e6 <le_set_phy+0x42>
		phy_opts -= 1;
    d5cc:	3a01      	subs	r2, #1
		phy_opts &= 1;
    d5ce:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d5d2:	790b      	ldrb	r3, [r1, #4]
    d5d4:	78c9      	ldrb	r1, [r1, #3]
    d5d6:	f00a fb21 	bl	17c1c <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d5da:	b100      	cbz	r0, d5de <le_set_phy+0x3a>
    d5dc:	200c      	movs	r0, #12
    d5de:	f7ff f8dd 	bl	c79c <cmd_status>
    d5e2:	6020      	str	r0, [r4, #0]
    d5e4:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    d5e6:	2200      	movs	r2, #0
    d5e8:	e7f3      	b.n	d5d2 <le_set_phy+0x2e>

0000d5ea <le_add_dev_to_rl>:
{
    d5ea:	b538      	push	{r3, r4, r5, lr}
    d5ec:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    d5ee:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d5f0:	f100 0217 	add.w	r2, r0, #23
    d5f4:	1dc1      	adds	r1, r0, #7
    d5f6:	f00b fffb 	bl	195f0 <ll_rl_add>
    d5fa:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d5fc:	2101      	movs	r1, #1
    d5fe:	4628      	mov	r0, r5
    d600:	f7ff f8f4 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d604:	7004      	strb	r4, [r0, #0]
    d606:	bd38      	pop	{r3, r4, r5, pc}

0000d608 <le_rem_dev_from_rl>:
{
    d608:	b538      	push	{r3, r4, r5, lr}
    d60a:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    d60c:	6880      	ldr	r0, [r0, #8]
    d60e:	f00c f8ad 	bl	1976c <ll_rl_remove>
    d612:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d614:	2101      	movs	r1, #1
    d616:	4628      	mov	r0, r5
    d618:	f7ff f8e8 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d61c:	7004      	strb	r4, [r0, #0]
    d61e:	bd38      	pop	{r3, r4, r5, pc}

0000d620 <le_clear_rl>:
{
    d620:	b510      	push	{r4, lr}
    d622:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d624:	2101      	movs	r1, #1
    d626:	f7ff f8e1 	bl	c7ec <cmd_complete>
    d62a:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    d62c:	f00b ffd4 	bl	195d8 <ll_rl_clear>
    d630:	7020      	strb	r0, [r4, #0]
    d632:	bd10      	pop	{r4, pc}

0000d634 <le_read_rl_size>:
{
    d634:	b510      	push	{r4, lr}
    d636:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d638:	2102      	movs	r1, #2
    d63a:	f7ff f8d7 	bl	c7ec <cmd_complete>
    d63e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d640:	f00b ffc8 	bl	195d4 <ll_rl_size_get>
    d644:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d646:	2300      	movs	r3, #0
    d648:	7023      	strb	r3, [r4, #0]
    d64a:	bd10      	pop	{r4, pc}

0000d64c <le_read_peer_rpa>:
{
    d64c:	b510      	push	{r4, lr}
    d64e:	b082      	sub	sp, #8
    d650:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    d652:	2207      	movs	r2, #7
    d654:	6881      	ldr	r1, [r0, #8]
    d656:	4668      	mov	r0, sp
    d658:	f7f2 fe32 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d65c:	2107      	movs	r1, #7
    d65e:	4620      	mov	r0, r4
    d660:	f7ff f8c4 	bl	c7ec <cmd_complete>
    d664:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d666:	1c41      	adds	r1, r0, #1
    d668:	4668      	mov	r0, sp
    d66a:	f00c f923 	bl	198b4 <ll_rl_crpa_get>
    d66e:	7020      	strb	r0, [r4, #0]
}
    d670:	b002      	add	sp, #8
    d672:	bd10      	pop	{r4, pc}

0000d674 <le_read_local_rpa>:
{
    d674:	b510      	push	{r4, lr}
    d676:	b082      	sub	sp, #8
    d678:	460c      	mov	r4, r1
    d67a:	2207      	movs	r2, #7
    d67c:	6881      	ldr	r1, [r0, #8]
    d67e:	4668      	mov	r0, sp
    d680:	f7f2 fe1e 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d684:	2107      	movs	r1, #7
    d686:	4620      	mov	r0, r4
    d688:	f7ff f8b0 	bl	c7ec <cmd_complete>
    d68c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d68e:	1c41      	adds	r1, r0, #1
    d690:	4668      	mov	r0, sp
    d692:	f00c f937 	bl	19904 <ll_rl_lrpa_get>
    d696:	7020      	strb	r0, [r4, #0]
}
    d698:	b002      	add	sp, #8
    d69a:	bd10      	pop	{r4, pc}

0000d69c <le_set_addr_res_enable>:
{
    d69c:	b538      	push	{r3, r4, r5, lr}
    d69e:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    d6a0:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    d6a2:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d6a4:	2101      	movs	r1, #1
    d6a6:	4618      	mov	r0, r3
    d6a8:	f7ff f8a0 	bl	c7ec <cmd_complete>
    d6ac:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    d6ae:	4628      	mov	r0, r5
    d6b0:	f00c f942 	bl	19938 <ll_rl_enable>
    d6b4:	7020      	strb	r0, [r4, #0]
    d6b6:	bd38      	pop	{r3, r4, r5, pc}

0000d6b8 <le_set_rpa_timeout>:
{
    d6b8:	b510      	push	{r4, lr}
    d6ba:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    d6bc:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    d6be:	8818      	ldrh	r0, [r3, #0]
    d6c0:	f00c f952 	bl	19968 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d6c4:	2101      	movs	r1, #1
    d6c6:	4620      	mov	r0, r4
    d6c8:	f7ff f890 	bl	c7ec <cmd_complete>
	ccst->status = 0x00;
    d6cc:	2300      	movs	r3, #0
    d6ce:	7003      	strb	r3, [r0, #0]
    d6d0:	bd10      	pop	{r4, pc}

0000d6d2 <le_set_privacy_mode>:
{
    d6d2:	b538      	push	{r3, r4, r5, lr}
    d6d4:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    d6d6:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d6d8:	79c1      	ldrb	r1, [r0, #7]
    d6da:	f00c f94f 	bl	1997c <ll_priv_mode_set>
    d6de:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d6e0:	2101      	movs	r1, #1
    d6e2:	4628      	mov	r0, r5
    d6e4:	f7ff f882 	bl	c7ec <cmd_complete>
	ccst->status = status;
    d6e8:	7004      	strb	r4, [r0, #0]
    d6ea:	bd38      	pop	{r3, r4, r5, pc}

0000d6ec <le_read_tx_power>:
{
    d6ec:	b508      	push	{r3, lr}
    d6ee:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d6f0:	2103      	movs	r1, #3
    d6f2:	f7ff f87b 	bl	c7ec <cmd_complete>
	rp->status = 0x00;
    d6f6:	4601      	mov	r1, r0
    d6f8:	2300      	movs	r3, #0
    d6fa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    d6fe:	3001      	adds	r0, #1
    d700:	f00a f9f1 	bl	17ae6 <ll_tx_power_get>
    d704:	bd08      	pop	{r3, pc}

0000d706 <controller_cmd_handle>:
{
    d706:	b508      	push	{r3, lr}
    d708:	460b      	mov	r3, r1
	switch (ocf) {
    d70a:	3801      	subs	r0, #1
    d70c:	284d      	cmp	r0, #77	; 0x4d
    d70e:	f200 8164 	bhi.w	d9da <controller_cmd_handle+0x2d4>
    d712:	e8df f010 	tbh	[pc, r0, lsl #1]
    d716:	004e      	.short	0x004e
    d718:	005a0054 	.word	0x005a0054
    d71c:	00600162 	.word	0x00600162
    d720:	00960090 	.word	0x00960090
    d724:	00a2009c 	.word	0x00a2009c
    d728:	00ae00a8 	.word	0x00ae00a8
    d72c:	00ba00b4 	.word	0x00ba00b4
    d730:	006600c0 	.word	0x006600c0
    d734:	0072006c 	.word	0x0072006c
    d738:	00ea0078 	.word	0x00ea0078
    d73c:	00de00c6 	.word	0x00de00c6
    d740:	007e00e4 	.word	0x007e00e4
    d744:	00cc0084 	.word	0x00cc0084
    d748:	00d800d2 	.word	0x00d800d2
    d74c:	0162008a 	.word	0x0162008a
    d750:	01620162 	.word	0x01620162
    d754:	00f600f0 	.word	0x00f600f0
    d758:	010200fc 	.word	0x010200fc
    d75c:	01620108 	.word	0x01620108
    d760:	01260162 	.word	0x01260162
    d764:	0132012c 	.word	0x0132012c
    d768:	013e0138 	.word	0x013e0138
    d76c:	014a0144 	.word	0x014a0144
    d770:	010e0150 	.word	0x010e0150
    d774:	011a0114 	.word	0x011a0114
    d778:	01620120 	.word	0x01620120
    d77c:	01620162 	.word	0x01620162
    d780:	01620162 	.word	0x01620162
    d784:	01620162 	.word	0x01620162
    d788:	01620162 	.word	0x01620162
    d78c:	01620162 	.word	0x01620162
    d790:	01620162 	.word	0x01620162
    d794:	01620162 	.word	0x01620162
    d798:	01620162 	.word	0x01620162
    d79c:	01620162 	.word	0x01620162
    d7a0:	01620162 	.word	0x01620162
    d7a4:	01620162 	.word	0x01620162
    d7a8:	015c0162 	.word	0x015c0162
    d7ac:	01620162 	.word	0x01620162
    d7b0:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    d7b2:	4611      	mov	r1, r2
    d7b4:	4618      	mov	r0, r3
    d7b6:	f7f6 fe3f 	bl	4438 <le_set_event_mask>
	return 0;
    d7ba:	2000      	movs	r0, #0
		break;
    d7bc:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    d7be:	4611      	mov	r1, r2
    d7c0:	4618      	mov	r0, r3
    d7c2:	f7ff f86c 	bl	c89e <le_read_buffer_size>
	return 0;
    d7c6:	2000      	movs	r0, #0
		break;
    d7c8:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    d7ca:	4611      	mov	r1, r2
    d7cc:	4618      	mov	r0, r3
    d7ce:	f7ff fabb 	bl	cd48 <le_read_local_features>
	return 0;
    d7d2:	2000      	movs	r0, #0
		break;
    d7d4:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    d7d6:	4611      	mov	r1, r2
    d7d8:	4618      	mov	r0, r3
    d7da:	f7ff fc03 	bl	cfe4 <le_set_random_address>
	return 0;
    d7de:	2000      	movs	r0, #0
		break;
    d7e0:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    d7e2:	4611      	mov	r1, r2
    d7e4:	4618      	mov	r0, r3
    d7e6:	f7ff fc17 	bl	d018 <le_read_wl_size>
	return 0;
    d7ea:	2000      	movs	r0, #0
		break;
    d7ec:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    d7ee:	4611      	mov	r1, r2
    d7f0:	4618      	mov	r0, r3
    d7f2:	f7ff fc1d 	bl	d030 <le_clear_wl>
	return 0;
    d7f6:	2000      	movs	r0, #0
		break;
    d7f8:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    d7fa:	4611      	mov	r1, r2
    d7fc:	4618      	mov	r0, r3
    d7fe:	f7ff fc21 	bl	d044 <le_add_dev_to_wl>
	return 0;
    d802:	2000      	movs	r0, #0
		break;
    d804:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    d806:	4611      	mov	r1, r2
    d808:	4618      	mov	r0, r3
    d80a:	f7ff fc27 	bl	d05c <le_rem_dev_from_wl>
	return 0;
    d80e:	2000      	movs	r0, #0
		break;
    d810:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    d812:	4611      	mov	r1, r2
    d814:	4618      	mov	r0, r3
    d816:	f7ff fc2d 	bl	d074 <le_encrypt>
	return 0;
    d81a:	2000      	movs	r0, #0
		break;
    d81c:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    d81e:	4611      	mov	r1, r2
    d820:	4618      	mov	r0, r3
    d822:	f7ff fca4 	bl	d16e <le_rand>
	return 0;
    d826:	2000      	movs	r0, #0
		break;
    d828:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    d82a:	4611      	mov	r1, r2
    d82c:	4618      	mov	r0, r3
    d82e:	f7ff f843 	bl	c8b8 <le_read_supp_states>
	return 0;
    d832:	2000      	movs	r0, #0
		break;
    d834:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    d836:	4611      	mov	r1, r2
    d838:	4618      	mov	r0, r3
    d83a:	f7ff fca4 	bl	d186 <le_set_adv_param>
	return 0;
    d83e:	2000      	movs	r0, #0
		break;
    d840:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    d842:	4611      	mov	r1, r2
    d844:	4618      	mov	r0, r3
    d846:	f7ff f84a 	bl	c8de <le_read_adv_chan_tx_power>
	return 0;
    d84a:	2000      	movs	r0, #0
		break;
    d84c:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    d84e:	4611      	mov	r1, r2
    d850:	4618      	mov	r0, r3
    d852:	f7ff fcbb 	bl	d1cc <le_set_adv_data>
	return 0;
    d856:	2000      	movs	r0, #0
		break;
    d858:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    d85a:	4611      	mov	r1, r2
    d85c:	4618      	mov	r0, r3
    d85e:	f7ff fcc3 	bl	d1e8 <le_set_scan_rsp_data>
	return 0;
    d862:	2000      	movs	r0, #0
		break;
    d864:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    d866:	4611      	mov	r1, r2
    d868:	4618      	mov	r0, r3
    d86a:	f7ff fccb 	bl	d204 <le_set_adv_enable>
	return 0;
    d86e:	2000      	movs	r0, #0
		break;
    d870:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    d872:	4611      	mov	r1, r2
    d874:	4618      	mov	r0, r3
    d876:	f7ff fcd6 	bl	d226 <le_set_scan_param>
	return 0;
    d87a:	2000      	movs	r0, #0
		break;
    d87c:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    d87e:	4611      	mov	r1, r2
    d880:	4618      	mov	r0, r3
    d882:	f7ff fceb 	bl	d25c <le_set_scan_enable>
	return 0;
    d886:	2000      	movs	r0, #0
		break;
    d888:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    d88a:	4611      	mov	r1, r2
    d88c:	4618      	mov	r0, r3
    d88e:	f7ff fd09 	bl	d2a4 <le_create_connection>
	return 0;
    d892:	2000      	movs	r0, #0
		break;
    d894:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    d896:	4611      	mov	r1, r2
    d898:	4618      	mov	r0, r3
    d89a:	f7ff fd23 	bl	d2e4 <le_create_conn_cancel>
	return 0;
    d89e:	2000      	movs	r0, #0
		break;
    d8a0:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    d8a2:	4611      	mov	r1, r2
    d8a4:	4618      	mov	r0, r3
    d8a6:	f7ff fd2c 	bl	d302 <le_set_host_chan_classif>
	return 0;
    d8aa:	2000      	movs	r0, #0
		break;
    d8ac:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    d8ae:	4611      	mov	r1, r2
    d8b0:	4618      	mov	r0, r3
    d8b2:	f7ff fd36 	bl	d322 <le_start_encryption>
	return 0;
    d8b6:	2000      	movs	r0, #0
		break;
    d8b8:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    d8ba:	4611      	mov	r1, r2
    d8bc:	4618      	mov	r0, r3
    d8be:	f7ff fd41 	bl	d344 <le_ltk_req_reply>
	return 0;
    d8c2:	2000      	movs	r0, #0
		break;
    d8c4:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    d8c6:	4611      	mov	r1, r2
    d8c8:	4618      	mov	r0, r3
    d8ca:	f7ff fd51 	bl	d370 <le_ltk_req_neg_reply>
	return 0;
    d8ce:	2000      	movs	r0, #0
		break;
    d8d0:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    d8d2:	4611      	mov	r1, r2
    d8d4:	4618      	mov	r0, r3
    d8d6:	f7ff fd61 	bl	d39c <le_read_chan_map>
	return 0;
    d8da:	2000      	movs	r0, #0
		break;
    d8dc:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    d8de:	4611      	mov	r1, r2
    d8e0:	4618      	mov	r0, r3
    d8e2:	f7ff fd71 	bl	d3c8 <le_read_remote_features>
	return 0;
    d8e6:	2000      	movs	r0, #0
		break;
    d8e8:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    d8ea:	4611      	mov	r1, r2
    d8ec:	4618      	mov	r0, r3
    d8ee:	f7f9 f9c1 	bl	6c74 <le_conn_update>
	return 0;
    d8f2:	2000      	movs	r0, #0
		break;
    d8f4:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    d8f6:	4611      	mov	r1, r2
    d8f8:	4618      	mov	r0, r3
    d8fa:	f7f7 fe47 	bl	558c <le_conn_param_req_reply>
	return 0;
    d8fe:	2000      	movs	r0, #0
		break;
    d900:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    d902:	4611      	mov	r1, r2
    d904:	4618      	mov	r0, r3
    d906:	f7ff fd6b 	bl	d3e0 <le_conn_param_req_neg_reply>
	return 0;
    d90a:	2000      	movs	r0, #0
		break;
    d90c:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    d90e:	4611      	mov	r1, r2
    d910:	4618      	mov	r0, r3
    d912:	f7ff fd80 	bl	d416 <le_set_data_len>
	return 0;
    d916:	2000      	movs	r0, #0
		break;
    d918:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    d91a:	4611      	mov	r1, r2
    d91c:	4618      	mov	r0, r3
    d91e:	f7ff fd90 	bl	d442 <le_read_default_data_len>
	return 0;
    d922:	2000      	movs	r0, #0
		break;
    d924:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    d926:	4611      	mov	r1, r2
    d928:	4618      	mov	r0, r3
    d92a:	f7ff fd97 	bl	d45c <le_write_default_data_len>
	return 0;
    d92e:	2000      	movs	r0, #0
		break;
    d930:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    d932:	4611      	mov	r1, r2
    d934:	4618      	mov	r0, r3
    d936:	f7ff fda3 	bl	d480 <le_read_max_data_len>
	return 0;
    d93a:	2000      	movs	r0, #0
		break;
    d93c:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    d93e:	4611      	mov	r1, r2
    d940:	4618      	mov	r0, r3
    d942:	f7ff fde7 	bl	d514 <le_read_phy>
	return 0;
    d946:	2000      	movs	r0, #0
		break;
    d948:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    d94a:	4611      	mov	r1, r2
    d94c:	4618      	mov	r0, r3
    d94e:	f7ff fe0c 	bl	d56a <le_set_default_phy>
	return 0;
    d952:	2000      	movs	r0, #0
		break;
    d954:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    d956:	4611      	mov	r1, r2
    d958:	4618      	mov	r0, r3
    d95a:	f7ff fe23 	bl	d5a4 <le_set_phy>
	return 0;
    d95e:	2000      	movs	r0, #0
		break;
    d960:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    d962:	4611      	mov	r1, r2
    d964:	4618      	mov	r0, r3
    d966:	f7ff fe40 	bl	d5ea <le_add_dev_to_rl>
	return 0;
    d96a:	2000      	movs	r0, #0
		break;
    d96c:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    d96e:	4611      	mov	r1, r2
    d970:	4618      	mov	r0, r3
    d972:	f7ff fe49 	bl	d608 <le_rem_dev_from_rl>
	return 0;
    d976:	2000      	movs	r0, #0
		break;
    d978:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    d97a:	4611      	mov	r1, r2
    d97c:	4618      	mov	r0, r3
    d97e:	f7ff fe4f 	bl	d620 <le_clear_rl>
	return 0;
    d982:	2000      	movs	r0, #0
		break;
    d984:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    d986:	4611      	mov	r1, r2
    d988:	4618      	mov	r0, r3
    d98a:	f7ff fe53 	bl	d634 <le_read_rl_size>
	return 0;
    d98e:	2000      	movs	r0, #0
		break;
    d990:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    d992:	4611      	mov	r1, r2
    d994:	4618      	mov	r0, r3
    d996:	f7ff fe59 	bl	d64c <le_read_peer_rpa>
	return 0;
    d99a:	2000      	movs	r0, #0
		break;
    d99c:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    d99e:	4611      	mov	r1, r2
    d9a0:	4618      	mov	r0, r3
    d9a2:	f7ff fe67 	bl	d674 <le_read_local_rpa>
	return 0;
    d9a6:	2000      	movs	r0, #0
		break;
    d9a8:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    d9aa:	4611      	mov	r1, r2
    d9ac:	4618      	mov	r0, r3
    d9ae:	f7ff fe75 	bl	d69c <le_set_addr_res_enable>
	return 0;
    d9b2:	2000      	movs	r0, #0
		break;
    d9b4:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    d9b6:	4611      	mov	r1, r2
    d9b8:	4618      	mov	r0, r3
    d9ba:	f7ff fe7d 	bl	d6b8 <le_set_rpa_timeout>
	return 0;
    d9be:	2000      	movs	r0, #0
		break;
    d9c0:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    d9c2:	4611      	mov	r1, r2
    d9c4:	4618      	mov	r0, r3
    d9c6:	f7ff fe84 	bl	d6d2 <le_set_privacy_mode>
	return 0;
    d9ca:	2000      	movs	r0, #0
		break;
    d9cc:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    d9ce:	4611      	mov	r1, r2
    d9d0:	4618      	mov	r0, r3
    d9d2:	f7ff fe8b 	bl	d6ec <le_read_tx_power>
	return 0;
    d9d6:	2000      	movs	r0, #0
		break;
    d9d8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d9da:	f06f 0015 	mvn.w	r0, #21
}
    d9de:	bd08      	pop	{r3, pc}

0000d9e0 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    d9e0:	4b0e      	ldr	r3, [pc, #56]	; (da1c <data_buf_overflow+0x3c>)
    d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9e6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    d9ea:	2300      	movs	r3, #0
    d9ec:	4313      	orrs	r3, r2
    d9ee:	d100      	bne.n	d9f2 <data_buf_overflow+0x12>
    d9f0:	4770      	bx	lr
{
    d9f2:	b510      	push	{r4, lr}
    d9f4:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d9f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d9fa:	2001      	movs	r0, #1
    d9fc:	f7f8 fa1c 	bl	5e38 <bt_buf_get_rx>
    da00:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    da02:	2201      	movs	r2, #1
    da04:	211a      	movs	r1, #26
    da06:	f7fe febf 	bl	c788 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    da0a:	6820      	ldr	r0, [r4, #0]
    da0c:	2101      	movs	r1, #1
    da0e:	3008      	adds	r0, #8
    da10:	f00c fbe0 	bl	1a1d4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    da14:	2301      	movs	r3, #1
    da16:	7003      	strb	r3, [r0, #0]
    da18:	bd10      	pop	{r4, pc}
    da1a:	bf00      	nop
    da1c:	2000bb00 	.word	0x2000bb00

0000da20 <encode_data_ctrl>:
{
    da20:	b510      	push	{r4, lr}
    da22:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    da24:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    da26:	78e0      	ldrb	r0, [r4, #3]
    da28:	3803      	subs	r0, #3
    da2a:	2812      	cmp	r0, #18
    da2c:	d82e      	bhi.n	da8c <encode_data_ctrl+0x6c>
    da2e:	e8df f000 	tbb	[pc, r0]
    da32:	2d0a      	.short	0x2d0a
    da34:	2d290e2d 	.word	0x2d290e2d
    da38:	192d2d12 	.word	0x192d2d12
    da3c:	2d212d1d 	.word	0x2d212d1d
    da40:	252d2d2d 	.word	0x252d2d2d
    da44:	25          	.byte	0x25
    da45:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    da46:	4620      	mov	r0, r4
    da48:	f7f7 feec 	bl	5824 <le_ltk_request>
		break;
    da4c:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    da4e:	2000      	movs	r0, #0
    da50:	f7ff f826 	bl	caa0 <encrypt_change>
		break;
    da54:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    da56:	4613      	mov	r3, r2
    da58:	460a      	mov	r2, r1
    da5a:	4621      	mov	r1, r4
    da5c:	2000      	movs	r0, #0
    da5e:	f7f7 fceb 	bl	5438 <le_remote_feat_complete>
		break;
    da62:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    da64:	4620      	mov	r0, r4
    da66:	f7fe fff5 	bl	ca54 <remote_version_info>
		break;
    da6a:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    da6c:	7920      	ldrb	r0, [r4, #4]
    da6e:	f7ff f817 	bl	caa0 <encrypt_change>
		break;
    da72:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    da74:	4620      	mov	r0, r4
    da76:	f7f7 fdd7 	bl	5628 <le_conn_param_req>
		break;
    da7a:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    da7c:	4620      	mov	r0, r4
    da7e:	f7f6 fa43 	bl	3f08 <le_data_len_change>
		break;
    da82:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    da84:	4620      	mov	r0, r4
    da86:	f7ff fb66 	bl	d156 <le_unknown_rsp>
		break;
    da8a:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    da8c:	4040      	eors	r0, r0
    da8e:	f380 8811 	msr	BASEPRI, r0
    da92:	f04f 0004 	mov.w	r0, #4
    da96:	df02      	svc	2

0000da98 <le_advertising_report>:
{
    da98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da9c:	b082      	sub	sp, #8
    da9e:	4605      	mov	r5, r0
    daa0:	460e      	mov	r6, r1
    daa2:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    daa4:	4b90      	ldr	r3, [pc, #576]	; (dce8 <le_advertising_report+0x250>)
    daa6:	e893 0003 	ldmia.w	r3, {r0, r1}
    daaa:	9000      	str	r0, [sp, #0]
    daac:	f8ad 1004 	strh.w	r1, [sp, #4]
    dab0:	0c09      	lsrs	r1, r1, #16
    dab2:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    dab6:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dab8:	330b      	adds	r3, #11
    daba:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    dabe:	782b      	ldrb	r3, [r5, #0]
    dac0:	f013 0f40 	tst.w	r3, #64	; 0x40
    dac4:	d125      	bne.n	db12 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    dac6:	4b89      	ldr	r3, [pc, #548]	; (dcec <le_advertising_report+0x254>)
    dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
    dacc:	2200      	movs	r2, #0
    dace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    dad2:	4313      	orrs	r3, r2
    dad4:	f000 80b0 	beq.w	dc38 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    dad8:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dada:	330c      	adds	r3, #12
    dadc:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    dade:	b947      	cbnz	r7, daf2 <le_advertising_report+0x5a>
    dae0:	4b83      	ldr	r3, [pc, #524]	; (dcf0 <le_advertising_report+0x258>)
    dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    dae6:	f002 0202 	and.w	r2, r2, #2
    daea:	2300      	movs	r3, #0
    daec:	4313      	orrs	r3, r2
    daee:	f000 80a3 	beq.w	dc38 <le_advertising_report+0x1a0>
    daf2:	b147      	cbz	r7, db06 <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    daf4:	4b7e      	ldr	r3, [pc, #504]	; (dcf0 <le_advertising_report+0x258>)
    daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    dafa:	f002 020b 	and.w	r2, r2, #11
    dafe:	2300      	movs	r3, #0
    db00:	4313      	orrs	r3, r2
    db02:	f000 8099 	beq.w	dc38 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    db06:	4b7b      	ldr	r3, [pc, #492]	; (dcf4 <le_advertising_report+0x25c>)
    db08:	681b      	ldr	r3, [r3, #0]
    db0a:	2b00      	cmp	r3, #0
    db0c:	db08      	blt.n	db20 <le_advertising_report+0x88>
    db0e:	2400      	movs	r4, #0
    db10:	e009      	b.n	db26 <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    db12:	1cab      	adds	r3, r5, #2
    db14:	4642      	mov	r2, r8
    db16:	2100      	movs	r1, #0
    db18:	4608      	mov	r0, r1
    db1a:	f00b fea7 	bl	1986c <ll_rl_crpa_set>
    db1e:	e7d2      	b.n	dac6 <le_advertising_report+0x2e>
	return false;
    db20:	2300      	movs	r3, #0
    db22:	e054      	b.n	dbce <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    db24:	3401      	adds	r4, #1
    db26:	4b73      	ldr	r3, [pc, #460]	; (dcf4 <le_advertising_report+0x25c>)
    db28:	681b      	ldr	r3, [r3, #0]
    db2a:	429c      	cmp	r4, r3
    db2c:	da26      	bge.n	db7c <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    db2e:	4972      	ldr	r1, [pc, #456]	; (dcf8 <le_advertising_report+0x260>)
    db30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    db34:	2206      	movs	r2, #6
    db36:	3102      	adds	r1, #2
    db38:	1ca8      	adds	r0, r5, #2
    db3a:	f01c ff2b 	bl	2a994 <memcmp>
    db3e:	2800      	cmp	r0, #0
    db40:	d1f0      	bne.n	db24 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    db42:	782b      	ldrb	r3, [r5, #0]
    db44:	f3c3 1380 	ubfx	r3, r3, #6, #1
    db48:	4a6b      	ldr	r2, [pc, #428]	; (dcf8 <le_advertising_report+0x260>)
    db4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    db4e:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    db50:	4293      	cmp	r3, r2
    db52:	d1e7      	bne.n	db24 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    db54:	4b68      	ldr	r3, [pc, #416]	; (dcf8 <le_advertising_report+0x260>)
    db56:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    db5a:	782b      	ldrb	r3, [r5, #0]
    db5c:	f003 030f 	and.w	r3, r3, #15
    db60:	fa22 f103 	lsr.w	r1, r2, r3
    db64:	f011 0f01 	tst.w	r1, #1
    db68:	d171      	bne.n	dc4e <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    db6a:	2101      	movs	r1, #1
    db6c:	fa01 f303 	lsl.w	r3, r1, r3
    db70:	431a      	orrs	r2, r3
    db72:	4b61      	ldr	r3, [pc, #388]	; (dcf8 <le_advertising_report+0x260>)
    db74:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    db78:	2300      	movs	r3, #0
    db7a:	e028      	b.n	dbce <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    db7c:	f8df a17c 	ldr.w	sl, [pc, #380]	; dcfc <le_advertising_report+0x264>
    db80:	f8da 0000 	ldr.w	r0, [sl]
    db84:	4c5c      	ldr	r4, [pc, #368]	; (dcf8 <le_advertising_report+0x260>)
    db86:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    db8a:	2206      	movs	r2, #6
    db8c:	1ca9      	adds	r1, r5, #2
    db8e:	3002      	adds	r0, #2
    db90:	f7f2 fb96 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    db94:	f8da 3000 	ldr.w	r3, [sl]
    db98:	782a      	ldrb	r2, [r5, #0]
    db9a:	f3c2 1280 	ubfx	r2, r2, #6, #1
    db9e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    dba2:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    dba4:	782a      	ldrb	r2, [r5, #0]
    dba6:	f002 010f 	and.w	r1, r2, #15
    dbaa:	2201      	movs	r2, #1
    dbac:	408a      	lsls	r2, r1
    dbae:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    dbb2:	4a50      	ldr	r2, [pc, #320]	; (dcf4 <le_advertising_report+0x25c>)
    dbb4:	6812      	ldr	r2, [r2, #0]
    dbb6:	2a0f      	cmp	r2, #15
    dbb8:	dc41      	bgt.n	dc3e <le_advertising_report+0x1a6>
			dup_count++;
    dbba:	3201      	adds	r2, #1
    dbbc:	4b4d      	ldr	r3, [pc, #308]	; (dcf4 <le_advertising_report+0x25c>)
    dbbe:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    dbc0:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    dbc4:	4b4d      	ldr	r3, [pc, #308]	; (dcfc <le_advertising_report+0x264>)
    dbc6:	681b      	ldr	r3, [r3, #0]
    dbc8:	2b10      	cmp	r3, #16
    dbca:	d03c      	beq.n	dc46 <le_advertising_report+0x1ae>
	return false;
    dbcc:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    dbce:	bb9b      	cbnz	r3, dc38 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    dbd0:	782b      	ldrb	r3, [r5, #0]
    dbd2:	f003 030f 	and.w	r3, r3, #15
    dbd6:	2b01      	cmp	r3, #1
    dbd8:	d03b      	beq.n	dc52 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    dbda:	786c      	ldrb	r4, [r5, #1]
    dbdc:	3c06      	subs	r4, #6
    dbde:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    dbe0:	786a      	ldrb	r2, [r5, #1]
    dbe2:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dbe4:	f816 a002 	ldrb.w	sl, [r6, r2]
    dbe8:	f1ca 0a00 	rsb	sl, sl, #0
    dbec:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    dbf0:	2f00      	cmp	r7, #0
    dbf2:	d041      	beq.n	dc78 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    dbf4:	2b01      	cmp	r3, #1
    dbf6:	d12e      	bne.n	dc56 <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    dbf8:	2211      	movs	r2, #17
    dbfa:	210b      	movs	r1, #11
    dbfc:	4648      	mov	r0, r9
    dbfe:	f7fe fe8f 	bl	c920 <meta_evt>
    dc02:	4604      	mov	r4, r0
		drp->num_reports = 1;
    dc04:	2301      	movs	r3, #1
    dc06:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    dc08:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    dc0a:	f00b fce3 	bl	195d4 <ll_rl_size_get>
    dc0e:	4580      	cmp	r8, r0
    dc10:	d227      	bcs.n	dc62 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    dc12:	1ce2      	adds	r2, r4, #3
    dc14:	1ca1      	adds	r1, r4, #2
    dc16:	4640      	mov	r0, r8
    dc18:	f00b fa84 	bl	19124 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    dc1c:	78a3      	ldrb	r3, [r4, #2]
    dc1e:	3302      	adds	r3, #2
    dc20:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    dc22:	2301      	movs	r3, #1
    dc24:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    dc26:	2206      	movs	r2, #6
    dc28:	f105 0108 	add.w	r1, r5, #8
    dc2c:	f104 000a 	add.w	r0, r4, #10
    dc30:	f7f2 fb46 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    dc34:	f884 a010 	strb.w	sl, [r4, #16]
}
    dc38:	b002      	add	sp, #8
    dc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    dc3e:	3301      	adds	r3, #1
    dc40:	4a2e      	ldr	r2, [pc, #184]	; (dcfc <le_advertising_report+0x264>)
    dc42:	6013      	str	r3, [r2, #0]
    dc44:	e7be      	b.n	dbc4 <le_advertising_report+0x12c>
			dup_curr = 0;
    dc46:	2300      	movs	r3, #0
    dc48:	4a2c      	ldr	r2, [pc, #176]	; (dcfc <le_advertising_report+0x264>)
    dc4a:	6013      	str	r3, [r2, #0]
    dc4c:	e7bf      	b.n	dbce <le_advertising_report+0x136>
					return true;
    dc4e:	2301      	movs	r3, #1
    dc50:	e7bd      	b.n	dbce <le_advertising_report+0x136>
		data_len = 0;
    dc52:	2400      	movs	r4, #0
    dc54:	e7c4      	b.n	dbe0 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    dc56:	4040      	eors	r0, r0
    dc58:	f380 8811 	msr	BASEPRI, r0
    dc5c:	f04f 0004 	mov.w	r0, #4
    dc60:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    dc62:	4629      	mov	r1, r5
    dc64:	f811 3b02 	ldrb.w	r3, [r1], #2
    dc68:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc6c:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    dc6e:	2206      	movs	r2, #6
    dc70:	1ce0      	adds	r0, r4, #3
    dc72:	f7f2 fb25 	bl	2c0 <memcpy>
    dc76:	e7d4      	b.n	dc22 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    dc78:	f104 020b 	add.w	r2, r4, #11
    dc7c:	b2d2      	uxtb	r2, r2
    dc7e:	2102      	movs	r1, #2
    dc80:	4648      	mov	r0, r9
    dc82:	f7fe fe4d 	bl	c920 <meta_evt>
    dc86:	4607      	mov	r7, r0
	sep->num_reports = 1;
    dc88:	2301      	movs	r3, #1
    dc8a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    dc8c:	782b      	ldrb	r3, [r5, #0]
    dc8e:	f003 030f 	and.w	r3, r3, #15
    dc92:	aa02      	add	r2, sp, #8
    dc94:	4413      	add	r3, r2
    dc96:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    dc9a:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    dc9c:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dc9e:	330b      	adds	r3, #11
    dca0:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    dca2:	f00b fc97 	bl	195d4 <ll_rl_size_get>
    dca6:	4286      	cmp	r6, r0
    dca8:	d212      	bcs.n	dcd0 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    dcaa:	1cfa      	adds	r2, r7, #3
    dcac:	1cb9      	adds	r1, r7, #2
    dcae:	4630      	mov	r0, r6
    dcb0:	f00b fa38 	bl	19124 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    dcb4:	78bb      	ldrb	r3, [r7, #2]
    dcb6:	3302      	adds	r3, #2
    dcb8:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    dcba:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    dcbc:	370a      	adds	r7, #10
    dcbe:	4622      	mov	r2, r4
    dcc0:	f105 0108 	add.w	r1, r5, #8
    dcc4:	4638      	mov	r0, r7
    dcc6:	f7f2 fafb 	bl	2c0 <memcpy>
	*prssi = rssi;
    dcca:	f807 a004 	strb.w	sl, [r7, r4]
    dcce:	e7b3      	b.n	dc38 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    dcd0:	4629      	mov	r1, r5
    dcd2:	f811 3b02 	ldrb.w	r3, [r1], #2
    dcd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dcda:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    dcdc:	2206      	movs	r2, #6
    dcde:	1cf8      	adds	r0, r7, #3
    dce0:	f7f2 faee 	bl	2c0 <memcpy>
    dce4:	e7e9      	b.n	dcba <le_advertising_report+0x222>
    dce6:	bf00      	nop
    dce8:	0002ee60 	.word	0x0002ee60
    dcec:	2000bb00 	.word	0x2000bb00
    dcf0:	2000bb08 	.word	0x2000bb08
    dcf4:	200009e0 	.word	0x200009e0
    dcf8:	200009e8 	.word	0x200009e8
    dcfc:	200009e4 	.word	0x200009e4

0000dd00 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    dd00:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    dd02:	7803      	ldrb	r3, [r0, #0]
    dd04:	f003 030f 	and.w	r3, r3, #15
    dd08:	2b07      	cmp	r3, #7
    dd0a:	d000      	beq.n	dd0e <le_adv_ext_report+0xe>
    dd0c:	4770      	bx	lr
    dd0e:	2a00      	cmp	r2, #0
    dd10:	d0fc      	beq.n	dd0c <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    dd12:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    dd14:	7883      	ldrb	r3, [r0, #2]
    dd16:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    dd1a:	d0f7      	beq.n	dd0c <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    dd1c:	78c3      	ldrb	r3, [r0, #3]
    dd1e:	f013 0f01 	tst.w	r3, #1
    dd22:	d0f3      	beq.n	dd0c <le_adv_ext_report+0xc>
{
    dd24:	b570      	push	{r4, r5, r6, lr}
    dd26:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    dd28:	7803      	ldrb	r3, [r0, #0]
    dd2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dd2e:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    dd32:	2206      	movs	r2, #6
    dd34:	f10d 0019 	add.w	r0, sp, #25
    dd38:	f7f2 fac2 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dd3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dd40:	2b03      	cmp	r3, #3
    dd42:	d830      	bhi.n	dda6 <le_adv_ext_report+0xa6>
    dd44:	e8df f003 	tbb	[pc, r3]
    dd48:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dd4c:	4919      	ldr	r1, [pc, #100]	; (ddb4 <le_adv_ext_report+0xb4>)
    dd4e:	a808      	add	r0, sp, #32
    dd50:	f01c ffe2 	bl	2ad18 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    dd54:	f89d 301e 	ldrb.w	r3, [sp, #30]
    dd58:	f89d 201d 	ldrb.w	r2, [sp, #29]
    dd5c:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    dd60:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dd64:	f89d 401a 	ldrb.w	r4, [sp, #26]
    dd68:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dd6c:	ae08      	add	r6, sp, #32
    dd6e:	9605      	str	r6, [sp, #20]
    dd70:	9504      	str	r5, [sp, #16]
    dd72:	9403      	str	r4, [sp, #12]
    dd74:	9002      	str	r0, [sp, #8]
    dd76:	9101      	str	r1, [sp, #4]
    dd78:	9200      	str	r2, [sp, #0]
    dd7a:	4a0f      	ldr	r2, [pc, #60]	; (ddb8 <le_adv_ext_report+0xb8>)
    dd7c:	211b      	movs	r1, #27
    dd7e:	a80b      	add	r0, sp, #44	; 0x2c
    dd80:	f7f5 f90c 	bl	2f9c <snprintk>
}
    dd84:	b012      	add	sp, #72	; 0x48
    dd86:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    dd88:	490c      	ldr	r1, [pc, #48]	; (ddbc <le_adv_ext_report+0xbc>)
    dd8a:	a808      	add	r0, sp, #32
    dd8c:	f01c ffc4 	bl	2ad18 <strcpy>
    dd90:	e7e0      	b.n	dd54 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    dd92:	490b      	ldr	r1, [pc, #44]	; (ddc0 <le_adv_ext_report+0xc0>)
    dd94:	a808      	add	r0, sp, #32
    dd96:	f01c ffbf 	bl	2ad18 <strcpy>
    dd9a:	e7db      	b.n	dd54 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    dd9c:	4909      	ldr	r1, [pc, #36]	; (ddc4 <le_adv_ext_report+0xc4>)
    dd9e:	a808      	add	r0, sp, #32
    dda0:	f01c ffba 	bl	2ad18 <strcpy>
    dda4:	e7d6      	b.n	dd54 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dda6:	4a08      	ldr	r2, [pc, #32]	; (ddc8 <le_adv_ext_report+0xc8>)
    dda8:	210a      	movs	r1, #10
    ddaa:	a808      	add	r0, sp, #32
    ddac:	f7f5 f8f6 	bl	2f9c <snprintk>
    ddb0:	e7d0      	b.n	dd54 <le_adv_ext_report+0x54>
    ddb2:	bf00      	nop
    ddb4:	0002f70c 	.word	0x0002f70c
    ddb8:	0002f73c 	.word	0x0002f73c
    ddbc:	0002f714 	.word	0x0002f714
    ddc0:	0002f71c 	.word	0x0002f71c
    ddc4:	0002f728 	.word	0x0002f728
    ddc8:	0002f734 	.word	0x0002f734

0000ddcc <le_adv_ext_1M_report>:
{
    ddcc:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    ddce:	2301      	movs	r3, #1
    ddd0:	f7ff ff96 	bl	dd00 <le_adv_ext_report>
    ddd4:	bd08      	pop	{r3, pc}

0000ddd6 <le_adv_ext_coded_report>:
{
    ddd6:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    ddd8:	2304      	movs	r3, #4
    ddda:	f7ff ff91 	bl	dd00 <le_adv_ext_report>
    ddde:	bd08      	pop	{r3, pc}

0000dde0 <le_scan_req_received>:
{
    dde0:	b570      	push	{r4, r5, r6, lr}
    dde2:	b092      	sub	sp, #72	; 0x48
    dde4:	4604      	mov	r4, r0
    dde6:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dde8:	4b33      	ldr	r3, [pc, #204]	; (deb8 <le_scan_req_received+0xd8>)
    ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
    ddee:	2200      	movs	r2, #0
    ddf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ddf4:	4313      	orrs	r3, r2
    ddf6:	d007      	beq.n	de08 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    ddf8:	4b30      	ldr	r3, [pc, #192]	; (debc <le_scan_req_received+0xdc>)
    ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    ddfe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    de02:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de04:	4313      	orrs	r3, r2
    de06:	d146      	bne.n	de96 <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    de08:	4621      	mov	r1, r4
    de0a:	f811 3b02 	ldrb.w	r3, [r1], #2
    de0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    de12:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    de16:	2206      	movs	r2, #6
    de18:	f10d 0019 	add.w	r0, sp, #25
    de1c:	f7f2 fa50 	bl	2c0 <memcpy>
	switch (addr->type) {
    de20:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de24:	2b03      	cmp	r3, #3
    de26:	d830      	bhi.n	de8a <le_scan_req_received+0xaa>
    de28:	e8df f003 	tbb	[pc, r3]
    de2c:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    de30:	4923      	ldr	r1, [pc, #140]	; (dec0 <le_scan_req_received+0xe0>)
    de32:	a808      	add	r0, sp, #32
    de34:	f01c ff70 	bl	2ad18 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    de38:	f89d 301e 	ldrb.w	r3, [sp, #30]
    de3c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    de40:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    de44:	f89d 001b 	ldrb.w	r0, [sp, #27]
    de48:	f89d 401a 	ldrb.w	r4, [sp, #26]
    de4c:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    de50:	ae08      	add	r6, sp, #32
    de52:	9605      	str	r6, [sp, #20]
    de54:	9504      	str	r5, [sp, #16]
    de56:	9403      	str	r4, [sp, #12]
    de58:	9002      	str	r0, [sp, #8]
    de5a:	9101      	str	r1, [sp, #4]
    de5c:	9200      	str	r2, [sp, #0]
    de5e:	4a19      	ldr	r2, [pc, #100]	; (dec4 <le_scan_req_received+0xe4>)
    de60:	211b      	movs	r1, #27
    de62:	a80b      	add	r0, sp, #44	; 0x2c
    de64:	f7f5 f89a 	bl	2f9c <snprintk>
}
    de68:	b012      	add	sp, #72	; 0x48
    de6a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    de6c:	4916      	ldr	r1, [pc, #88]	; (dec8 <le_scan_req_received+0xe8>)
    de6e:	a808      	add	r0, sp, #32
    de70:	f01c ff52 	bl	2ad18 <strcpy>
    de74:	e7e0      	b.n	de38 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    de76:	4915      	ldr	r1, [pc, #84]	; (decc <le_scan_req_received+0xec>)
    de78:	a808      	add	r0, sp, #32
    de7a:	f01c ff4d 	bl	2ad18 <strcpy>
    de7e:	e7db      	b.n	de38 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    de80:	4913      	ldr	r1, [pc, #76]	; (ded0 <le_scan_req_received+0xf0>)
    de82:	a808      	add	r0, sp, #32
    de84:	f01c ff48 	bl	2ad18 <strcpy>
    de88:	e7d6      	b.n	de38 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    de8a:	4a12      	ldr	r2, [pc, #72]	; (ded4 <le_scan_req_received+0xf4>)
    de8c:	210a      	movs	r1, #10
    de8e:	a808      	add	r0, sp, #32
    de90:	f7f5 f884 	bl	2f9c <snprintk>
    de94:	e7d0      	b.n	de38 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    de96:	2208      	movs	r2, #8
    de98:	2113      	movs	r1, #19
    de9a:	f7fe fd41 	bl	c920 <meta_evt>
	sep->handle = 0;
    de9e:	2300      	movs	r3, #0
    dea0:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    dea2:	4621      	mov	r1, r4
    dea4:	f811 3b02 	ldrb.w	r3, [r1], #2
    dea8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    deac:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    deae:	2206      	movs	r2, #6
    deb0:	3002      	adds	r0, #2
    deb2:	f7f2 fa05 	bl	2c0 <memcpy>
    deb6:	e7d7      	b.n	de68 <le_scan_req_received+0x88>
    deb8:	2000bb00 	.word	0x2000bb00
    debc:	2000bb08 	.word	0x2000bb08
    dec0:	0002f70c 	.word	0x0002f70c
    dec4:	0002f73c 	.word	0x0002f73c
    dec8:	0002f714 	.word	0x0002f714
    decc:	0002f71c 	.word	0x0002f71c
    ded0:	0002f728 	.word	0x0002f728
    ded4:	0002f734 	.word	0x0002f734

0000ded8 <encode_control>:
{
    ded8:	b510      	push	{r4, lr}
    deda:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    dedc:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    dede:	7903      	ldrb	r3, [r0, #4]
    dee0:	3b02      	subs	r3, #2
    dee2:	2b0a      	cmp	r3, #10
    dee4:	d837      	bhi.n	df56 <encode_control+0x7e>
    dee6:	e8df f003 	tbb	[pc, r3]
    deea:	0b06      	.short	0x0b06
    deec:	1e1a1510 	.word	0x1e1a1510
    def0:	2e2a2622 	.word	0x2e2a2622
    def4:	32          	.byte	0x32
    def5:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    def6:	4601      	mov	r1, r0
    def8:	4620      	mov	r0, r4
    defa:	f7ff fdcd 	bl	da98 <le_advertising_report>
		break;
    defe:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    df00:	4601      	mov	r1, r0
    df02:	4620      	mov	r0, r4
    df04:	f7ff ff62 	bl	ddcc <le_adv_ext_1M_report>
		break;
    df08:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    df0a:	4601      	mov	r1, r0
    df0c:	4620      	mov	r0, r4
    df0e:	f7ff ff62 	bl	ddd6 <le_adv_ext_coded_report>
		break;
    df12:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    df14:	4601      	mov	r1, r0
    df16:	4620      	mov	r0, r4
    df18:	f7ff ff62 	bl	dde0 <le_scan_req_received>
		break;
    df1c:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    df1e:	4620      	mov	r0, r4
    df20:	f7f7 f99e 	bl	5260 <le_conn_complete>
		break;
    df24:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    df26:	4620      	mov	r0, r4
    df28:	f7fe fd32 	bl	c990 <disconn_complete>
		break;
    df2c:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    df2e:	4620      	mov	r0, r4
    df30:	f7f6 f832 	bl	3f98 <le_conn_update_complete>
		break;
    df34:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    df36:	4620      	mov	r0, r4
    df38:	f7fe fd52 	bl	c9e0 <enc_refresh_complete>
		break;
    df3c:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    df3e:	4620      	mov	r0, r4
    df40:	f7fe fd6c 	bl	ca1c <auth_payload_timeout_exp>
		break;
    df44:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    df46:	4620      	mov	r0, r4
    df48:	f7fe fcfe 	bl	c948 <le_chan_sel_algo>
		break;
    df4c:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    df4e:	4620      	mov	r0, r4
    df50:	f7ff faa6 	bl	d4a0 <le_phy_upd_complete>
		return;
    df54:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    df56:	4040      	eors	r0, r0
    df58:	f380 8811 	msr	BASEPRI, r0
    df5c:	f04f 0004 	mov.w	r0, #4
    df60:	df02      	svc	2
	...

0000df64 <hci_cmd_handle>:
{
    df64:	b510      	push	{r4, lr}
    df66:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    df68:	2300      	movs	r3, #0
    df6a:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    df6c:	8983      	ldrh	r3, [r0, #12]
    df6e:	2b02      	cmp	r3, #2
    df70:	d94a      	bls.n	e008 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    df72:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    df74:	8814      	ldrh	r4, [r2, #0]
    df76:	4926      	ldr	r1, [pc, #152]	; (e010 <hci_cmd_handle+0xac>)
    df78:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    df7a:	7892      	ldrb	r2, [r2, #2]
    df7c:	4293      	cmp	r3, r2
    df7e:	d345      	bcc.n	e00c <hci_cmd_handle+0xa8>
    df80:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    df82:	2103      	movs	r1, #3
    df84:	3008      	adds	r0, #8
    df86:	f00c f972 	bl	1a26e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    df8a:	4b21      	ldr	r3, [pc, #132]	; (e010 <hci_cmd_handle+0xac>)
    df8c:	881b      	ldrh	r3, [r3, #0]
    df8e:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    df92:	0a9b      	lsrs	r3, r3, #10
    df94:	2b04      	cmp	r3, #4
    df96:	d01c      	beq.n	dfd2 <hci_cmd_handle+0x6e>
    df98:	d908      	bls.n	dfac <hci_cmd_handle+0x48>
    df9a:	2b08      	cmp	r3, #8
    df9c:	d023      	beq.n	dfe6 <hci_cmd_handle+0x82>
    df9e:	2b3f      	cmp	r3, #63	; 0x3f
    dfa0:	d026      	beq.n	dff0 <hci_cmd_handle+0x8c>
    dfa2:	2b05      	cmp	r3, #5
    dfa4:	d01a      	beq.n	dfdc <hci_cmd_handle+0x78>
		err = -EINVAL;
    dfa6:	f06f 0015 	mvn.w	r0, #21
    dfaa:	e00c      	b.n	dfc6 <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    dfac:	2b01      	cmp	r3, #1
    dfae:	d006      	beq.n	dfbe <hci_cmd_handle+0x5a>
    dfb0:	2b03      	cmp	r3, #3
    dfb2:	d1f8      	bne.n	dfa6 <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    dfb4:	aa01      	add	r2, sp, #4
    dfb6:	4621      	mov	r1, r4
    dfb8:	f7fe fe29 	bl	cc0e <ctrl_bb_cmd_handle>
		break;
    dfbc:	e003      	b.n	dfc6 <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    dfbe:	aa01      	add	r2, sp, #4
    dfc0:	4621      	mov	r1, r4
    dfc2:	f7fe fd9b 	bl	cafc <link_control_cmd_handle>
	if (err == -EINVAL) {
    dfc6:	f110 0f16 	cmn.w	r0, #22
    dfca:	d016      	beq.n	dffa <hci_cmd_handle+0x96>
	return evt;
    dfcc:	9801      	ldr	r0, [sp, #4]
}
    dfce:	b002      	add	sp, #8
    dfd0:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    dfd2:	aa01      	add	r2, sp, #4
    dfd4:	4621      	mov	r1, r4
    dfd6:	f7fe ffde 	bl	cf96 <info_cmd_handle>
		break;
    dfda:	e7f4      	b.n	dfc6 <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    dfdc:	aa01      	add	r2, sp, #4
    dfde:	4621      	mov	r1, r4
    dfe0:	f7fe fbcf 	bl	c782 <status_cmd_handle>
		break;
    dfe4:	e7ef      	b.n	dfc6 <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    dfe6:	aa01      	add	r2, sp, #4
    dfe8:	4621      	mov	r1, r4
    dfea:	f7ff fb8c 	bl	d706 <controller_cmd_handle>
		break;
    dfee:	e7ea      	b.n	dfc6 <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    dff0:	aa01      	add	r2, sp, #4
    dff2:	4621      	mov	r1, r4
    dff4:	f7ff f876 	bl	d0e4 <vendor_cmd_handle>
		break;
    dff8:	e7e5      	b.n	dfc6 <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    dffa:	2101      	movs	r1, #1
    dffc:	a801      	add	r0, sp, #4
    dffe:	f7fe fbf5 	bl	c7ec <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    e002:	2301      	movs	r3, #1
    e004:	7003      	strb	r3, [r0, #0]
    e006:	e7e1      	b.n	dfcc <hci_cmd_handle+0x68>
		return NULL;
    e008:	2000      	movs	r0, #0
    e00a:	e7e0      	b.n	dfce <hci_cmd_handle+0x6a>
		return NULL;
    e00c:	2000      	movs	r0, #0
    e00e:	e7de      	b.n	dfce <hci_cmd_handle+0x6a>
    e010:	200009d8 	.word	0x200009d8

0000e014 <hci_acl_handle>:
{
    e014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    e018:	2300      	movs	r3, #0
    e01a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    e01c:	8983      	ldrh	r3, [r0, #12]
    e01e:	2b03      	cmp	r3, #3
    e020:	d93e      	bls.n	e0a0 <hci_acl_handle+0x8c>
    e022:	4689      	mov	r9, r1
    e024:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    e026:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    e02a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    e02e:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    e030:	2104      	movs	r1, #4
    e032:	f00c f91c 	bl	1a26e <net_buf_simple_pull>
	if (buf->len < len) {
    e036:	89a3      	ldrh	r3, [r4, #12]
    e038:	4598      	cmp	r8, r3
    e03a:	d835      	bhi.n	e0a8 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    e03c:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    e03e:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    e042:	f009 ff1d 	bl	17e80 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    e046:	4605      	mov	r5, r0
    e048:	b140      	cbz	r0, e05c <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    e04a:	b177      	cbz	r7, e06a <hci_acl_handle+0x56>
    e04c:	2f02      	cmp	r7, #2
    e04e:	d00c      	beq.n	e06a <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e050:	7903      	ldrb	r3, [r0, #4]
    e052:	2201      	movs	r2, #1
    e054:	f362 0301 	bfi	r3, r2, #0, #2
    e058:	7103      	strb	r3, [r0, #4]
    e05a:	e00b      	b.n	e074 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    e05c:	4648      	mov	r0, r9
    e05e:	f7ff fcbf 	bl	d9e0 <data_buf_overflow>
		return -ENOBUFS;
    e062:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    e06a:	792b      	ldrb	r3, [r5, #4]
    e06c:	2202      	movs	r2, #2
    e06e:	f362 0301 	bfi	r3, r2, #0, #2
    e072:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    e074:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    e078:	4642      	mov	r2, r8
    e07a:	68a1      	ldr	r1, [r4, #8]
    e07c:	1de8      	adds	r0, r5, #7
    e07e:	f7f2 f91f 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    e082:	4629      	mov	r1, r5
    e084:	4630      	mov	r0, r6
    e086:	f009 ff0b 	bl	17ea0 <radio_tx_mem_enqueue>
    e08a:	b910      	cbnz	r0, e092 <hci_acl_handle+0x7e>
	return 0;
    e08c:	2000      	movs	r0, #0
}
    e08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    e092:	4628      	mov	r0, r5
    e094:	f009 fefc 	bl	17e90 <radio_tx_mem_release>
		return -EINVAL;
    e098:	f06f 0015 	mvn.w	r0, #21
    e09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e0a0:	f06f 0015 	mvn.w	r0, #21
    e0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e0a8:	f06f 0015 	mvn.w	r0, #21
    e0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e0b0 <hci_acl_encode>:
{
    e0b0:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    e0b2:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    e0b4:	7a03      	ldrb	r3, [r0, #8]
    e0b6:	f003 0303 	and.w	r3, r3, #3
    e0ba:	3b01      	subs	r3, #1
    e0bc:	2b01      	cmp	r3, #1
    e0be:	d81d      	bhi.n	e0fc <hci_acl_encode+0x4c>
    e0c0:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    e0c2:	f101 0508 	add.w	r5, r1, #8
    e0c6:	2104      	movs	r1, #4
    e0c8:	4628      	mov	r0, r5
    e0ca:	f00c f883 	bl	1a1d4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    e0ce:	7a23      	ldrb	r3, [r4, #8]
    e0d0:	f003 0303 	and.w	r3, r3, #3
    e0d4:	2b02      	cmp	r3, #2
    e0d6:	d00e      	beq.n	e0f6 <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    e0d8:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    e0dc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    e0de:	7a63      	ldrb	r3, [r4, #9]
    e0e0:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    e0e2:	7a61      	ldrb	r1, [r4, #9]
    e0e4:	4628      	mov	r0, r5
    e0e6:	f00c f875 	bl	1a1d4 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    e0ea:	7a62      	ldrb	r2, [r4, #9]
    e0ec:	f104 010b 	add.w	r1, r4, #11
    e0f0:	f7f2 f8e6 	bl	2c0 <memcpy>
}
    e0f4:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    e0f6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    e0fa:	e7ef      	b.n	e0dc <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    e0fc:	4040      	eors	r0, r0
    e0fe:	f380 8811 	msr	BASEPRI, r0
    e102:	f04f 0004 	mov.w	r0, #4
    e106:	df02      	svc	2

0000e108 <hci_evt_encode>:
{
    e108:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    e10a:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e10e:	7903      	ldrb	r3, [r0, #4]
    e110:	2b01      	cmp	r3, #1
    e112:	d004      	beq.n	e11e <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    e114:	460a      	mov	r2, r1
    e116:	4621      	mov	r1, r4
    e118:	f7ff fede 	bl	ded8 <encode_control>
    e11c:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    e11e:	460a      	mov	r2, r1
    e120:	4621      	mov	r1, r4
    e122:	f7ff fc7d 	bl	da20 <encode_data_ctrl>
    e126:	bd10      	pop	{r4, pc}

0000e128 <hci_num_cmplt_encode>:
{
    e128:	b570      	push	{r4, r5, r6, lr}
    e12a:	4606      	mov	r6, r0
    e12c:	460d      	mov	r5, r1
    e12e:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e130:	2205      	movs	r2, #5
    e132:	2113      	movs	r1, #19
    e134:	f7fe fb28 	bl	c788 <evt_create>
	ep = net_buf_add(buf, len);
    e138:	2105      	movs	r1, #5
    e13a:	f106 0008 	add.w	r0, r6, #8
    e13e:	f00c f849 	bl	1a1d4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    e142:	2301      	movs	r3, #1
    e144:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    e146:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e14a:	f8a0 4003 	strh.w	r4, [r0, #3]
    e14e:	bd70      	pop	{r4, r5, r6, pc}

0000e150 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e150:	7903      	ldrb	r3, [r0, #4]
    e152:	2b01      	cmp	r3, #1
    e154:	d011      	beq.n	e17a <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    e156:	3b02      	subs	r3, #2
    e158:	2b0a      	cmp	r3, #10
    e15a:	d80b      	bhi.n	e174 <hci_get_class+0x24>
    e15c:	e8df f003 	tbb	[pc, r3]
    e160:	06060606 	.word	0x06060606
    e164:	08080816 	.word	0x08080816
    e168:	0808      	.short	0x0808
    e16a:	08          	.byte	0x08
    e16b:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    e16c:	2001      	movs	r0, #1
    e16e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    e170:	2002      	movs	r0, #2
    e172:	4770      	bx	lr
			return -1;
    e174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e178:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e17a:	7a03      	ldrb	r3, [r0, #8]
    e17c:	f003 0303 	and.w	r3, r3, #3
    e180:	2b03      	cmp	r3, #3
    e182:	d001      	beq.n	e188 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    e184:	2003      	movs	r0, #3
}
    e186:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    e188:	2002      	movs	r0, #2
    e18a:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e18c:	2000      	movs	r0, #0
    e18e:	4770      	bx	lr

0000e190 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    e190:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e192:	4802      	ldr	r0, [pc, #8]	; (e19c <_hci_driver_init+0xc>)
    e194:	f7f7 fcec 	bl	5b70 <bt_hci_driver_register>

	return 0;
}
    e198:	2000      	movs	r0, #0
    e19a:	bd08      	pop	{r3, pc}
    e19c:	0002f788 	.word	0x0002f788

0000e1a0 <acl_handle>:
{
    e1a0:	b510      	push	{r4, lr}
    e1a2:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    e1a4:	a901      	add	r1, sp, #4
    e1a6:	f7ff ff35 	bl	e014 <hci_acl_handle>
    e1aa:	4604      	mov	r4, r0
	if (evt) {
    e1ac:	9801      	ldr	r0, [sp, #4]
    e1ae:	b108      	cbz	r0, e1b4 <acl_handle+0x14>
		bt_recv_prio(evt);
    e1b0:	f7f7 fc8c 	bl	5acc <bt_recv_prio>
}
    e1b4:	4620      	mov	r0, r4
    e1b6:	b002      	add	sp, #8
    e1b8:	bd10      	pop	{r4, pc}

0000e1ba <cmd_handle>:
{
    e1ba:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    e1bc:	f7ff fed2 	bl	df64 <hci_cmd_handle>
	if (evt) {
    e1c0:	b108      	cbz	r0, e1c6 <cmd_handle+0xc>
		bt_recv_prio(evt);
    e1c2:	f7f7 fc83 	bl	5acc <bt_recv_prio>
}
    e1c6:	2000      	movs	r0, #0
    e1c8:	bd08      	pop	{r3, pc}

0000e1ca <hci_driver_send>:
{
    e1ca:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    e1cc:	8983      	ldrh	r3, [r0, #12]
    e1ce:	b1cb      	cbz	r3, e204 <hci_driver_send+0x3a>
    e1d0:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e1d2:	f100 0310 	add.w	r3, r0, #16
    e1d6:	89c2      	ldrh	r2, [r0, #14]
    e1d8:	4413      	add	r3, r2
    e1da:	3303      	adds	r3, #3
    e1dc:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    e1e0:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    e1e2:	b13b      	cbz	r3, e1f4 <hci_driver_send+0x2a>
    e1e4:	2b02      	cmp	r3, #2
    e1e6:	d110      	bne.n	e20a <hci_driver_send+0x40>
		err = acl_handle(buf);
    e1e8:	f7ff ffda 	bl	e1a0 <acl_handle>
    e1ec:	4605      	mov	r5, r0
	if (!err) {
    e1ee:	b12d      	cbz	r5, e1fc <hci_driver_send+0x32>
}
    e1f0:	4628      	mov	r0, r5
    e1f2:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    e1f4:	f7ff ffe1 	bl	e1ba <cmd_handle>
    e1f8:	4605      	mov	r5, r0
		break;
    e1fa:	e7f8      	b.n	e1ee <hci_driver_send+0x24>
		net_buf_unref(buf);
    e1fc:	4620      	mov	r0, r4
    e1fe:	f00b ff9d 	bl	1a13c <net_buf_unref>
    e202:	e7f5      	b.n	e1f0 <hci_driver_send+0x26>
		return -EINVAL;
    e204:	f06f 0515 	mvn.w	r5, #21
    e208:	e7f2      	b.n	e1f0 <hci_driver_send+0x26>
		return -EINVAL;
    e20a:	f06f 0515 	mvn.w	r5, #21
    e20e:	e7ef      	b.n	e1f0 <hci_driver_send+0x26>

0000e210 <prio_recv_thread>:
{
    e210:	b530      	push	{r4, r5, lr}
    e212:	b087      	sub	sp, #28
    e214:	e00f      	b.n	e236 <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e216:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e21a:	2001      	movs	r0, #1
    e21c:	f7f7 fe0c 	bl	5e38 <bt_buf_get_rx>
    e220:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e222:	4622      	mov	r2, r4
    e224:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e228:	f7ff ff7e 	bl	e128 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    e22c:	4628      	mov	r0, r5
    e22e:	f7f7 fc4d 	bl	5acc <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e232:	f01a f975 	bl	28520 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e236:	f10d 0112 	add.w	r1, sp, #18
    e23a:	a805      	add	r0, sp, #20
    e23c:	f009 fd20 	bl	17c80 <radio_rx_get>
    e240:	4604      	mov	r4, r0
    e242:	2800      	cmp	r0, #0
    e244:	d1e7      	bne.n	e216 <prio_recv_thread+0x6>
		if (node_rx) {
    e246:	9b05      	ldr	r3, [sp, #20]
    e248:	b133      	cbz	r3, e258 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    e24a:	f00a fa59 	bl	18700 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    e24e:	9905      	ldr	r1, [sp, #20]
    e250:	481a      	ldr	r0, [pc, #104]	; (e2bc <prio_recv_thread+0xac>)
    e252:	f019 ff27 	bl	280a4 <k_queue_append>
    e256:	e7ee      	b.n	e236 <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    e258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e25c:	4818      	ldr	r0, [pc, #96]	; (e2c0 <prio_recv_thread+0xb0>)
    e25e:	f01a facb 	bl	287f8 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e262:	f01a fb15 	bl	28890 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    e266:	4b17      	ldr	r3, [pc, #92]	; (e2c4 <prio_recv_thread+0xb4>)
    e268:	681b      	ldr	r3, [r3, #0]
    e26a:	1ac3      	subs	r3, r0, r3
    e26c:	f241 3288 	movw	r2, #5000	; 0x1388
    e270:	4293      	cmp	r3, r2
    e272:	d9e0      	bls.n	e236 <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    e274:	2200      	movs	r2, #0
	size_t unused = 0;
    e276:	4613      	mov	r3, r2
    e278:	e001      	b.n	e27e <prio_recv_thread+0x6e>
			unused++;
    e27a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e27c:	3201      	adds	r2, #1
    e27e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    e282:	d203      	bcs.n	e28c <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    e284:	4910      	ldr	r1, [pc, #64]	; (e2c8 <prio_recv_thread+0xb8>)
    e286:	5c89      	ldrb	r1, [r1, r2]
    e288:	29aa      	cmp	r1, #170	; 0xaa
    e28a:	d0f6      	beq.n	e27a <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    e28c:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    e290:	2264      	movs	r2, #100	; 0x64
    e292:	fb02 f201 	mul.w	r2, r2, r1
    e296:	0992      	lsrs	r2, r2, #6
    e298:	480c      	ldr	r0, [pc, #48]	; (e2cc <prio_recv_thread+0xbc>)
    e29a:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e29e:	9202      	str	r2, [sp, #8]
    e2a0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e2a4:	9201      	str	r2, [sp, #4]
    e2a6:	9100      	str	r1, [sp, #0]
    e2a8:	4909      	ldr	r1, [pc, #36]	; (e2d0 <prio_recv_thread+0xc0>)
    e2aa:	480a      	ldr	r0, [pc, #40]	; (e2d4 <prio_recv_thread+0xc4>)
    e2ac:	f7f4 fe68 	bl	2f80 <printk>
    e2b0:	f01a faee 	bl	28890 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    e2b4:	4b03      	ldr	r3, [pc, #12]	; (e2c4 <prio_recv_thread+0xb4>)
    e2b6:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e2b8:	e7bd      	b.n	e236 <prio_recv_thread+0x26>
    e2ba:	bf00      	nop
    e2bc:	2000d07c 	.word	0x2000d07c
    e2c0:	2000d00c 	.word	0x2000d00c
    e2c4:	20000a70 	.word	0x20000a70
    e2c8:	20004138 	.word	0x20004138
    e2cc:	2492492d 	.word	0x2492492d
    e2d0:	0002f798 	.word	0x0002f798
    e2d4:	0002f500 	.word	0x0002f500

0000e2d8 <hci_driver_open>:
{
    e2d8:	b530      	push	{r4, r5, lr}
    e2da:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    e2dc:	4814      	ldr	r0, [pc, #80]	; (e330 <hci_driver_open+0x58>)
    e2de:	f00a fb37 	bl	18950 <ll_init>
	if (err) {
    e2e2:	4605      	mov	r5, r0
    e2e4:	b110      	cbz	r0, e2ec <hci_driver_open+0x14>
}
    e2e6:	4628      	mov	r0, r5
    e2e8:	b007      	add	sp, #28
    e2ea:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    e2ec:	f7f6 fc66 	bl	4bbc <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    e2f0:	2400      	movs	r4, #0
    e2f2:	9405      	str	r4, [sp, #20]
    e2f4:	9404      	str	r4, [sp, #16]
    e2f6:	f06f 0309 	mvn.w	r3, #9
    e2fa:	9303      	str	r3, [sp, #12]
    e2fc:	9402      	str	r4, [sp, #8]
    e2fe:	9401      	str	r4, [sp, #4]
    e300:	9400      	str	r4, [sp, #0]
    e302:	4b0c      	ldr	r3, [pc, #48]	; (e334 <hci_driver_open+0x5c>)
    e304:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e308:	490b      	ldr	r1, [pc, #44]	; (e338 <hci_driver_open+0x60>)
    e30a:	480c      	ldr	r0, [pc, #48]	; (e33c <hci_driver_open+0x64>)
    e30c:	f01a fce0 	bl	28cd0 <_impl_k_thread_create>
    e310:	9405      	str	r4, [sp, #20]
    e312:	9404      	str	r4, [sp, #16]
    e314:	f06f 0307 	mvn.w	r3, #7
    e318:	9303      	str	r3, [sp, #12]
    e31a:	9402      	str	r4, [sp, #8]
    e31c:	9401      	str	r4, [sp, #4]
    e31e:	9400      	str	r4, [sp, #0]
    e320:	4b07      	ldr	r3, [pc, #28]	; (e340 <hci_driver_open+0x68>)
    e322:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e326:	4907      	ldr	r1, [pc, #28]	; (e344 <hci_driver_open+0x6c>)
    e328:	4807      	ldr	r0, [pc, #28]	; (e348 <hci_driver_open+0x70>)
    e32a:	f01a fcd1 	bl	28cd0 <_impl_k_thread_create>
	return 0;
    e32e:	e7da      	b.n	e2e6 <hci_driver_open+0xe>
    e330:	2000d00c 	.word	0x2000d00c
    e334:	0000e211 	.word	0x0000e211
    e338:	20004138 	.word	0x20004138
    e33c:	20002a94 	.word	0x20002a94
    e340:	0000e34d 	.word	0x0000e34d
    e344:	200042f8 	.word	0x200042f8
    e348:	20002960 	.word	0x20002960

0000e34c <recv_thread>:
{
    e34c:	b510      	push	{r4, lr}
    e34e:	b086      	sub	sp, #24
    e350:	e029      	b.n	e3a6 <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    e352:	2801      	cmp	r0, #1
    e354:	d042      	beq.n	e3dc <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e35a:	2001      	movs	r0, #1
    e35c:	f7f7 fd6c 	bl	5e38 <bt_buf_get_rx>
    e360:	4604      	mov	r4, r0
		if (buf) {
    e362:	b11c      	cbz	r4, e36c <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    e364:	4621      	mov	r1, r4
    e366:	9805      	ldr	r0, [sp, #20]
    e368:	f7ff fece 	bl	e108 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    e36c:	2100      	movs	r1, #0
    e36e:	9b05      	ldr	r3, [sp, #20]
    e370:	88d8      	ldrh	r0, [r3, #6]
    e372:	f009 fd49 	bl	17e08 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    e376:	a806      	add	r0, sp, #24
    e378:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    e37c:	2200      	movs	r2, #0
    e37e:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    e380:	f009 fcbe 	bl	17d00 <radio_rx_mem_release>
		if (buf) {
    e384:	b124      	cbz	r4, e390 <recv_thread+0x44>
			if (buf->len) {
    e386:	89a3      	ldrh	r3, [r4, #12]
    e388:	b3ab      	cbz	r3, e3f6 <recv_thread+0xaa>
				bt_recv(buf);
    e38a:	4620      	mov	r0, r4
    e38c:	f7f7 fb74 	bl	5a78 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e390:	f01a f8c6 	bl	28520 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e394:	f01a fa7c 	bl	28890 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    e398:	4b29      	ldr	r3, [pc, #164]	; (e440 <recv_thread+0xf4>)
    e39a:	681b      	ldr	r3, [r3, #0]
    e39c:	1ac0      	subs	r0, r0, r3
    e39e:	f241 3388 	movw	r3, #5000	; 0x1388
    e3a2:	4298      	cmp	r0, r3
    e3a4:	d82b      	bhi.n	e3fe <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    e3a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e3aa:	4826      	ldr	r0, [pc, #152]	; (e444 <recv_thread+0xf8>)
    e3ac:	f019 fea2 	bl	280f4 <k_queue_get>
		if (node_rx && !buf) {
    e3b0:	b1f8      	cbz	r0, e3f2 <recv_thread+0xa6>
    e3b2:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    e3b4:	f7ff fecc 	bl	e150 <hci_get_class>
    e3b8:	9405      	str	r4, [sp, #20]
	switch (class) {
    e3ba:	2800      	cmp	r0, #0
    e3bc:	db13      	blt.n	e3e6 <recv_thread+0x9a>
    e3be:	2802      	cmp	r0, #2
    e3c0:	ddc7      	ble.n	e352 <recv_thread+0x6>
    e3c2:	2803      	cmp	r0, #3
    e3c4:	d10f      	bne.n	e3e6 <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e3c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e3ca:	2003      	movs	r0, #3
    e3cc:	f7f7 fd34 	bl	5e38 <bt_buf_get_rx>
    e3d0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    e3d2:	4601      	mov	r1, r0
    e3d4:	9805      	ldr	r0, [sp, #20]
    e3d6:	f7ff fe6b 	bl	e0b0 <hci_acl_encode>
    e3da:	e7c7      	b.n	e36c <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    e3dc:	2100      	movs	r1, #0
    e3de:	f7f7 fd2b 	bl	5e38 <bt_buf_get_rx>
    e3e2:	4604      	mov	r4, r0
    e3e4:	e7bd      	b.n	e362 <recv_thread+0x16>
		LL_ASSERT(0);
    e3e6:	4040      	eors	r0, r0
    e3e8:	f380 8811 	msr	BASEPRI, r0
    e3ec:	f04f 0004 	mov.w	r0, #4
    e3f0:	df02      	svc	2
		struct net_buf *buf = NULL;
    e3f2:	2400      	movs	r4, #0
    e3f4:	e7c6      	b.n	e384 <recv_thread+0x38>
				net_buf_unref(buf);
    e3f6:	4620      	mov	r0, r4
    e3f8:	f00b fea0 	bl	1a13c <net_buf_unref>
    e3fc:	e7c8      	b.n	e390 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    e3fe:	2200      	movs	r2, #0
	size_t unused = 0;
    e400:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    e402:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    e406:	d206      	bcs.n	e416 <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    e408:	490f      	ldr	r1, [pc, #60]	; (e448 <recv_thread+0xfc>)
    e40a:	5c89      	ldrb	r1, [r1, r2]
    e40c:	29aa      	cmp	r1, #170	; 0xaa
    e40e:	d102      	bne.n	e416 <recv_thread+0xca>
			unused++;
    e410:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e412:	3201      	adds	r2, #1
    e414:	e7f5      	b.n	e402 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    e416:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    e41a:	2264      	movs	r2, #100	; 0x64
    e41c:	fb02 f201 	mul.w	r2, r2, r1
    e420:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e422:	9202      	str	r2, [sp, #8]
    e424:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e428:	9201      	str	r2, [sp, #4]
    e42a:	9100      	str	r1, [sp, #0]
    e42c:	4907      	ldr	r1, [pc, #28]	; (e44c <recv_thread+0x100>)
    e42e:	4808      	ldr	r0, [pc, #32]	; (e450 <recv_thread+0x104>)
    e430:	f7f4 fda6 	bl	2f80 <printk>
    e434:	f01a fa2c 	bl	28890 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    e438:	4b01      	ldr	r3, [pc, #4]	; (e440 <recv_thread+0xf4>)
    e43a:	6018      	str	r0, [r3, #0]
    e43c:	e7b3      	b.n	e3a6 <recv_thread+0x5a>
    e43e:	bf00      	nop
    e440:	20000a74 	.word	0x20000a74
    e444:	2000d07c 	.word	0x2000d07c
    e448:	200042f8 	.word	0x200042f8
    e44c:	0002f7b0 	.word	0x0002f7b0
    e450:	0002f500 	.word	0x0002f500

0000e454 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    e456:	2304      	movs	r3, #4
	while (callee_id--) {
    e458:	e01d      	b.n	e496 <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    e45a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e45e:	4911      	ldr	r1, [pc, #68]	; (e4a4 <mayfly_init+0x50>)
    e460:	0065      	lsls	r5, r4, #1
    e462:	192b      	adds	r3, r5, r4
    e464:	009a      	lsls	r2, r3, #2
    e466:	0073      	lsls	r3, r6, #1
    e468:	eb03 0e06 	add.w	lr, r3, r6
    e46c:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e470:	46be      	mov	lr, r7
    e472:	443a      	add	r2, r7
    e474:	440a      	add	r2, r1
    e476:	4425      	add	r5, r4
    e478:	00af      	lsls	r7, r5, #2
    e47a:	4477      	add	r7, lr
    e47c:	3204      	adds	r2, #4
    e47e:	4439      	add	r1, r7
    e480:	4b09      	ldr	r3, [pc, #36]	; (e4a8 <mayfly_init+0x54>)
    e482:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e486:	f000 f9f5 	bl	e874 <memq_init>
		while (caller_id--) {
    e48a:	4623      	mov	r3, r4
    e48c:	1e5c      	subs	r4, r3, #1
    e48e:	b2e4      	uxtb	r4, r4
    e490:	2b00      	cmp	r3, #0
    e492:	d1e2      	bne.n	e45a <mayfly_init+0x6>
	while (callee_id--) {
    e494:	4633      	mov	r3, r6
    e496:	1e5e      	subs	r6, r3, #1
    e498:	b2f6      	uxtb	r6, r6
    e49a:	b10b      	cbz	r3, e4a0 <mayfly_init+0x4c>
    e49c:	2304      	movs	r3, #4
    e49e:	e7f5      	b.n	e48c <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4a2:	bf00      	nop
    e4a4:	20000af8 	.word	0x20000af8
    e4a8:	20000a78 	.word	0x20000a78

0000e4ac <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    e4ac:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    e4ae:	b1ea      	cbz	r2, e4ec <mayfly_enable+0x40>
    e4b0:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    e4b2:	0042      	lsls	r2, r0, #1
    e4b4:	4402      	add	r2, r0
    e4b6:	0093      	lsls	r3, r2, #2
    e4b8:	004c      	lsls	r4, r1, #1
    e4ba:	440c      	add	r4, r1
    e4bc:	0122      	lsls	r2, r4, #4
    e4be:	441a      	add	r2, r3
    e4c0:	4b18      	ldr	r3, [pc, #96]	; (e524 <mayfly_enable+0x78>)
    e4c2:	4413      	add	r3, r2
    e4c4:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e4c6:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    e4c8:	429a      	cmp	r2, r3
    e4ca:	d003      	beq.n	e4d4 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e4cc:	462a      	mov	r2, r5
    e4ce:	f00a f9e6 	bl	1889e <mayfly_enable_cb>
    e4d2:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    e4d4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e4d8:	00a3      	lsls	r3, r4, #2
    e4da:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    e4de:	0134      	lsls	r4, r6, #4
    e4e0:	4423      	add	r3, r4
    e4e2:	4c10      	ldr	r4, [pc, #64]	; (e524 <mayfly_enable+0x78>)
    e4e4:	4423      	add	r3, r4
    e4e6:	3201      	adds	r2, #1
    e4e8:	721a      	strb	r2, [r3, #8]
    e4ea:	e7ef      	b.n	e4cc <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    e4ec:	0042      	lsls	r2, r0, #1
    e4ee:	4402      	add	r2, r0
    e4f0:	0093      	lsls	r3, r2, #2
    e4f2:	004c      	lsls	r4, r1, #1
    e4f4:	440c      	add	r4, r1
    e4f6:	0122      	lsls	r2, r4, #4
    e4f8:	441a      	add	r2, r3
    e4fa:	4b0a      	ldr	r3, [pc, #40]	; (e524 <mayfly_enable+0x78>)
    e4fc:	4413      	add	r3, r2
    e4fe:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e500:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    e502:	429a      	cmp	r2, r3
    e504:	d000      	beq.n	e508 <mayfly_enable+0x5c>
    e506:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    e508:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e50c:	00a3      	lsls	r3, r4, #2
    e50e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e512:	012c      	lsls	r4, r5, #4
    e514:	4423      	add	r3, r4
    e516:	4c03      	ldr	r4, [pc, #12]	; (e524 <mayfly_enable+0x78>)
    e518:	4423      	add	r3, r4
    e51a:	3201      	adds	r2, #1
    e51c:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    e51e:	f00a f9f5 	bl	1890c <mayfly_pend>
		}
	}
}
    e522:	e7f0      	b.n	e506 <mayfly_enable+0x5a>
    e524:	20000af8 	.word	0x20000af8

0000e528 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e52a:	4605      	mov	r5, r0
    e52c:	460e      	mov	r6, r1
    e52e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e530:	b19a      	cbz	r2, e55a <mayfly_enqueue+0x32>
    e532:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e534:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e536:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e538:	7823      	ldrb	r3, [r4, #0]
    e53a:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    e53c:	f013 0303 	ands.w	r3, r3, #3
    e540:	d032      	beq.n	e5a8 <mayfly_enqueue+0x80>
		if (chain) {
    e542:	b371      	cbz	r1, e5a2 <mayfly_enqueue+0x7a>
			if (state != 1) {
    e544:	2b01      	cmp	r3, #1
    e546:	d04c      	beq.n	e5e2 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e548:	3201      	adds	r2, #1
    e54a:	b2d2      	uxtb	r2, r2
    e54c:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    e54e:	4631      	mov	r1, r6
    e550:	4628      	mov	r0, r5
    e552:	f00a f9db 	bl	1890c <mayfly_pend>

				return 0;
    e556:	2000      	movs	r0, #0
    e558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e55a:	f00a f9c4 	bl	188e6 <mayfly_prio_is_equal>
    e55e:	b908      	cbnz	r0, e564 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e560:	2101      	movs	r1, #1
    e562:	e7e7      	b.n	e534 <mayfly_enqueue+0xc>
    e564:	4631      	mov	r1, r6
    e566:	4628      	mov	r0, r5
    e568:	f00a f9ab 	bl	188c2 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e56c:	b1b8      	cbz	r0, e59e <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    e56e:	481e      	ldr	r0, [pc, #120]	; (e5e8 <mayfly_enqueue+0xc0>)
    e570:	0069      	lsls	r1, r5, #1
    e572:	194a      	adds	r2, r1, r5
    e574:	0093      	lsls	r3, r2, #2
    e576:	0072      	lsls	r2, r6, #1
    e578:	eb02 0e06 	add.w	lr, r2, r6
    e57c:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e580:	46be      	mov	lr, r7
    e582:	443b      	add	r3, r7
    e584:	4403      	add	r3, r0
    e586:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    e588:	194b      	adds	r3, r1, r5
    e58a:	0099      	lsls	r1, r3, #2
    e58c:	4471      	add	r1, lr
    e58e:	4408      	add	r0, r1
    e590:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    e592:	429f      	cmp	r7, r3
    e594:	d001      	beq.n	e59a <mayfly_enqueue+0x72>
    e596:	2101      	movs	r1, #1
    e598:	e7cc      	b.n	e534 <mayfly_enqueue+0xc>
    e59a:	2100      	movs	r1, #0
    e59c:	e7ca      	b.n	e534 <mayfly_enqueue+0xc>
    e59e:	2101      	movs	r1, #1
    e5a0:	e7c8      	b.n	e534 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    e5a2:	1c93      	adds	r3, r2, #2
    e5a4:	b2db      	uxtb	r3, r3
    e5a6:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    e5a8:	b1b1      	cbz	r1, e5d8 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    e5aa:	3201      	adds	r2, #1
    e5ac:	b2d2      	uxtb	r2, r2
    e5ae:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    e5b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e5b4:	009a      	lsls	r2, r3, #2
    e5b6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e5ba:	010b      	lsls	r3, r1, #4
    e5bc:	441a      	add	r2, r3
    e5be:	4b0a      	ldr	r3, [pc, #40]	; (e5e8 <mayfly_enqueue+0xc0>)
    e5c0:	441a      	add	r2, r3
    e5c2:	3204      	adds	r2, #4
    e5c4:	6861      	ldr	r1, [r4, #4]
    e5c6:	4620      	mov	r0, r4
    e5c8:	f000 f957 	bl	e87a <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e5cc:	4631      	mov	r1, r6
    e5ce:	4628      	mov	r0, r5
    e5d0:	f00a f99c 	bl	1890c <mayfly_pend>

	return 0;
    e5d4:	2000      	movs	r0, #0
    e5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    e5d8:	68e3      	ldr	r3, [r4, #12]
    e5da:	68a0      	ldr	r0, [r4, #8]
    e5dc:	4798      	blx	r3
		return 0;
    e5de:	2000      	movs	r0, #0
    e5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    e5e2:	2001      	movs	r0, #1
}
    e5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e5e6:	bf00      	nop
    e5e8:	20000af8 	.word	0x20000af8

0000e5ec <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5f0:	b085      	sub	sp, #20
    e5f2:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    e5f4:	2304      	movs	r3, #4
	u8_t enable = 0;
    e5f6:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    e5fa:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    e5fe:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    e602:	fa5f f989 	uxtb.w	r9, r9
    e606:	2b00      	cmp	r3, #0
    e608:	f000 809b 	beq.w	e742 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    e60c:	aa04      	add	r2, sp, #16
    e60e:	2300      	movs	r3, #0
    e610:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    e614:	4657      	mov	r7, sl
    e616:	464e      	mov	r6, r9
    e618:	4850      	ldr	r0, [pc, #320]	; (e75c <mayfly_run+0x170>)
    e61a:	ea4f 0149 	mov.w	r1, r9, lsl #1
    e61e:	4449      	add	r1, r9
    e620:	008b      	lsls	r3, r1, #2
    e622:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e626:	4451      	add	r1, sl
    e628:	010c      	lsls	r4, r1, #4
    e62a:	4423      	add	r3, r4
    e62c:	18c4      	adds	r4, r0, r3
    e62e:	58c1      	ldr	r1, [r0, r3]
    e630:	6860      	ldr	r0, [r4, #4]
    e632:	f000 f929 	bl	e888 <memq_peek>
    e636:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    e638:	e017      	b.n	e66a <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    e63a:	3a01      	subs	r2, #1
    e63c:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e63e:	9b03      	ldr	r3, [sp, #12]
    e640:	68da      	ldr	r2, [r3, #12]
    e642:	6898      	ldr	r0, [r3, #8]
    e644:	4790      	blx	r2
    e646:	e01b      	b.n	e680 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    e648:	4944      	ldr	r1, [pc, #272]	; (e75c <mayfly_run+0x170>)
    e64a:	0072      	lsls	r2, r6, #1
    e64c:	4432      	add	r2, r6
    e64e:	0093      	lsls	r3, r2, #2
    e650:	007a      	lsls	r2, r7, #1
    e652:	443a      	add	r2, r7
    e654:	0110      	lsls	r0, r2, #4
    e656:	4403      	add	r3, r0
    e658:	18c8      	adds	r0, r1, r3
    e65a:	aa03      	add	r2, sp, #12
    e65c:	58c9      	ldr	r1, [r1, r3]
    e65e:	6840      	ldr	r0, [r0, #4]
    e660:	f000 f912 	bl	e888 <memq_peek>
    e664:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    e666:	2c01      	cmp	r4, #1
    e668:	d026      	beq.n	e6b8 <mayfly_run+0xcc>
		while (link) {
    e66a:	f1b8 0f00 	cmp.w	r8, #0
    e66e:	d030      	beq.n	e6d2 <mayfly_run+0xe6>
			req = m->_req;
    e670:	9b03      	ldr	r3, [sp, #12]
    e672:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    e674:	785a      	ldrb	r2, [r3, #1]
    e676:	1aa4      	subs	r4, r4, r2
    e678:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    e67c:	2c01      	cmp	r4, #1
    e67e:	d0dc      	beq.n	e63a <mayfly_run+0x4e>
			req = m->_req;
    e680:	9b03      	ldr	r3, [sp, #12]
    e682:	781d      	ldrb	r5, [r3, #0]
    e684:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    e686:	785b      	ldrb	r3, [r3, #1]
    e688:	1aeb      	subs	r3, r5, r3
    e68a:	f003 0303 	and.w	r3, r3, #3
    e68e:	2b01      	cmp	r3, #1
    e690:	d0da      	beq.n	e648 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    e692:	0072      	lsls	r2, r6, #1
    e694:	4432      	add	r2, r6
    e696:	0093      	lsls	r3, r2, #2
    e698:	0079      	lsls	r1, r7, #1
    e69a:	4439      	add	r1, r7
    e69c:	010a      	lsls	r2, r1, #4
    e69e:	441a      	add	r2, r3
    e6a0:	4b2e      	ldr	r3, [pc, #184]	; (e75c <mayfly_run+0x170>)
    e6a2:	4413      	add	r3, r2
    e6a4:	2200      	movs	r2, #0
    e6a6:	4619      	mov	r1, r3
    e6a8:	6858      	ldr	r0, [r3, #4]
    e6aa:	f000 f8f6 	bl	e89a <memq_dequeue>
				m->_link = link;
    e6ae:	9b03      	ldr	r3, [sp, #12]
    e6b0:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    e6b4:	705d      	strb	r5, [r3, #1]
    e6b6:	e7c7      	b.n	e648 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    e6b8:	f1b9 0f00 	cmp.w	r9, #0
    e6bc:	d006      	beq.n	e6cc <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    e6be:	4651      	mov	r1, sl
    e6c0:	4650      	mov	r0, sl
    e6c2:	f00a f923 	bl	1890c <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    e6c6:	b005      	add	sp, #20
    e6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    e6cc:	2800      	cmp	r0, #0
    e6ce:	d0cc      	beq.n	e66a <mayfly_run+0x7e>
    e6d0:	e7f5      	b.n	e6be <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    e6d2:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e6d6:	444a      	add	r2, r9
    e6d8:	0093      	lsls	r3, r2, #2
    e6da:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e6de:	4451      	add	r1, sl
    e6e0:	010a      	lsls	r2, r1, #4
    e6e2:	441a      	add	r2, r3
    e6e4:	4b1d      	ldr	r3, [pc, #116]	; (e75c <mayfly_run+0x170>)
    e6e6:	4413      	add	r3, r2
    e6e8:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e6ea:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    e6ec:	4299      	cmp	r1, r3
    e6ee:	d00b      	beq.n	e708 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    e6f0:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e6f4:	0093      	lsls	r3, r2, #2
    e6f6:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e6fa:	0102      	lsls	r2, r0, #4
    e6fc:	4413      	add	r3, r2
    e6fe:	4a17      	ldr	r2, [pc, #92]	; (e75c <mayfly_run+0x170>)
    e700:	4413      	add	r3, r2
    e702:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    e704:	2301      	movs	r3, #1
    e706:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    e708:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e70c:	444a      	add	r2, r9
    e70e:	0093      	lsls	r3, r2, #2
    e710:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e714:	4451      	add	r1, sl
    e716:	010a      	lsls	r2, r1, #4
    e718:	441a      	add	r2, r3
    e71a:	4b10      	ldr	r3, [pc, #64]	; (e75c <mayfly_run+0x170>)
    e71c:	4413      	add	r3, r2
    e71e:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e720:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    e722:	4299      	cmp	r1, r3
    e724:	d00b      	beq.n	e73e <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    e726:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e72a:	0093      	lsls	r3, r2, #2
    e72c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e730:	0102      	lsls	r2, r0, #4
    e732:	4413      	add	r3, r2
    e734:	4a09      	ldr	r2, [pc, #36]	; (e75c <mayfly_run+0x170>)
    e736:	4413      	add	r3, r2
    e738:	7259      	strb	r1, [r3, #9]
			enable = 1;
    e73a:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    e73e:	464b      	mov	r3, r9
    e740:	e75d      	b.n	e5fe <mayfly_run+0x12>
	if (disable && !enable) {
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	2b00      	cmp	r3, #0
    e746:	d0be      	beq.n	e6c6 <mayfly_run+0xda>
    e748:	f1bb 0f00 	cmp.w	fp, #0
    e74c:	d1bb      	bne.n	e6c6 <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e74e:	2200      	movs	r2, #0
    e750:	4651      	mov	r1, sl
    e752:	4650      	mov	r0, sl
    e754:	f00a f8a3 	bl	1889e <mayfly_enable_cb>
    e758:	e7b5      	b.n	e6c6 <mayfly_run+0xda>
    e75a:	bf00      	nop
    e75c:	20000af8 	.word	0x20000af8

0000e760 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    e760:	b5f0      	push	{r4, r5, r6, r7, lr}
    e762:	b083      	sub	sp, #12
    e764:	4607      	mov	r7, r0
    e766:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    e768:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e76a:	1dfb      	adds	r3, r7, #7
    e76c:	f023 0303 	bic.w	r3, r3, #3
    e770:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e772:	460e      	mov	r6, r1
    e774:	3a01      	subs	r2, #1
    e776:	b295      	uxth	r5, r2
    e778:	2204      	movs	r2, #4
    e77a:	2100      	movs	r1, #0
    e77c:	fb05 7000 	mla	r0, r5, r0, r7
    e780:	f01c f99c 	bl	2aabc <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    e784:	e00b      	b.n	e79e <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    e786:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    e78a:	443b      	add	r3, r7
    e78c:	a902      	add	r1, sp, #8
    e78e:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    e792:	2204      	movs	r2, #4
    e794:	fb04 7006 	mla	r0, r4, r6, r7
    e798:	f7f1 fd92 	bl	2c0 <memcpy>
	while (mem_count--) {
    e79c:	4625      	mov	r5, r4
    e79e:	1e6c      	subs	r4, r5, #1
    e7a0:	b2a4      	uxth	r4, r4
    e7a2:	2d00      	cmp	r5, #0
    e7a4:	d1ef      	bne.n	e786 <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    e7a6:	b003      	add	sp, #12
    e7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e7aa <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	b082      	sub	sp, #8
	if (*mem_head) {
    e7ae:	6805      	ldr	r5, [r0, #0]
    e7b0:	b1a5      	cbz	r5, e7dc <mem_acquire+0x32>
    e7b2:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e7b4:	1deb      	adds	r3, r5, #7
    e7b6:	f023 0303 	bic.w	r3, r3, #3
    e7ba:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    e7bc:	3b01      	subs	r3, #1
    e7be:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    e7c0:	2204      	movs	r2, #4
    e7c2:	4629      	mov	r1, r5
    e7c4:	eb0d 0002 	add.w	r0, sp, r2
    e7c8:	f7f1 fd7a 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e7cc:	9b01      	ldr	r3, [sp, #4]
    e7ce:	b11b      	cbz	r3, e7d8 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    e7d0:	3307      	adds	r3, #7
    e7d2:	f023 0303 	bic.w	r3, r3, #3
    e7d6:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    e7dc:	4628      	mov	r0, r5
    e7de:	b002      	add	sp, #8
    e7e0:	bd70      	pop	{r4, r5, r6, pc}

0000e7e2 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    e7e2:	b570      	push	{r4, r5, r6, lr}
    e7e4:	4606      	mov	r6, r0
    e7e6:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    e7e8:	680b      	ldr	r3, [r1, #0]
    e7ea:	b183      	cbz	r3, e80e <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e7ec:	3307      	adds	r3, #7
    e7ee:	f023 0303 	bic.w	r3, r3, #3
    e7f2:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    e7f4:	3401      	adds	r4, #1
    e7f6:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    e7f8:	2204      	movs	r2, #4
    e7fa:	4629      	mov	r1, r5
    e7fc:	4630      	mov	r0, r6
    e7fe:	f7f1 fd5f 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    e802:	1df3      	adds	r3, r6, #7
    e804:	f023 0303 	bic.w	r3, r3, #3
    e808:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    e80a:	602e      	str	r6, [r5, #0]
    e80c:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    e80e:	2400      	movs	r4, #0
    e810:	e7f0      	b.n	e7f4 <mem_release+0x12>

0000e812 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    e812:	4603      	mov	r3, r0
    e814:	b120      	cbz	r0, e820 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    e816:	3307      	adds	r3, #7
    e818:	f023 0303 	bic.w	r3, r3, #3
    e81c:	8818      	ldrh	r0, [r3, #0]
    e81e:	4770      	bx	lr
	u16_t free_count = 0;
    e820:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    e822:	4770      	bx	lr

0000e824 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    e824:	fb02 0001 	mla	r0, r2, r1, r0
    e828:	4770      	bx	lr

0000e82a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    e82a:	1a40      	subs	r0, r0, r1
    e82c:	b280      	uxth	r0, r0
}
    e82e:	fbb0 f0f2 	udiv	r0, r0, r2
    e832:	4770      	bx	lr

0000e834 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    e834:	4411      	add	r1, r2
	while (len--) {
    e836:	e004      	b.n	e842 <mem_rcopy+0xe>
		*dst++ = *--src;
    e838:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e83c:	7002      	strb	r2, [r0, #0]
	while (len--) {
    e83e:	461a      	mov	r2, r3
		*dst++ = *--src;
    e840:	3001      	adds	r0, #1
	while (len--) {
    e842:	1e53      	subs	r3, r2, #1
    e844:	b29b      	uxth	r3, r3
    e846:	2a00      	cmp	r2, #0
    e848:	d1f6      	bne.n	e838 <mem_rcopy+0x4>
	}
}
    e84a:	4770      	bx	lr

0000e84c <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    e84c:	1e4b      	subs	r3, r1, #1
    e84e:	b29b      	uxth	r3, r3
    e850:	b171      	cbz	r1, e870 <mem_nz+0x24>
{
    e852:	b410      	push	{r4}
		if (*src++) {
    e854:	1c44      	adds	r4, r0, #1
    e856:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    e858:	4619      	mov	r1, r3
		if (*src++) {
    e85a:	b93a      	cbnz	r2, e86c <mem_nz+0x20>
    e85c:	4620      	mov	r0, r4
	while (len--) {
    e85e:	3b01      	subs	r3, #1
    e860:	b29b      	uxth	r3, r3
    e862:	2900      	cmp	r1, #0
    e864:	d1f6      	bne.n	e854 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    e866:	2000      	movs	r0, #0
}
    e868:	bc10      	pop	{r4}
    e86a:	4770      	bx	lr
			return 1;
    e86c:	2001      	movs	r0, #1
    e86e:	e7fb      	b.n	e868 <mem_nz+0x1c>
	return 0;
    e870:	2000      	movs	r0, #0
}
    e872:	4770      	bx	lr

0000e874 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    e874:	6010      	str	r0, [r2, #0]
    e876:	6008      	str	r0, [r1, #0]

	return link;
}
    e878:	4770      	bx	lr

0000e87a <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    e87a:	6813      	ldr	r3, [r2, #0]
    e87c:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    e87e:	6813      	ldr	r3, [r2, #0]
    e880:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    e882:	6011      	str	r1, [r2, #0]

	return link;
}
    e884:	4608      	mov	r0, r1
    e886:	4770      	bx	lr

0000e888 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    e888:	4281      	cmp	r1, r0
    e88a:	d004      	beq.n	e896 <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    e88c:	b10a      	cbz	r2, e892 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    e88e:	684b      	ldr	r3, [r1, #4]
    e890:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    e892:	4608      	mov	r0, r1
    e894:	4770      	bx	lr
		return 0;
    e896:	2100      	movs	r1, #0
    e898:	e7fb      	b.n	e892 <memq_peek+0xa>

0000e89a <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    e89a:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    e89c:	4283      	cmp	r3, r0
    e89e:	d006      	beq.n	e8ae <memq_dequeue+0x14>
	if (mem) {
    e8a0:	b10a      	cbz	r2, e8a6 <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    e8a2:	6858      	ldr	r0, [r3, #4]
    e8a4:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    e8a6:	681a      	ldr	r2, [r3, #0]
    e8a8:	600a      	str	r2, [r1, #0]

	return link;
}
    e8aa:	4618      	mov	r0, r3
    e8ac:	4770      	bx	lr
		return 0;
    e8ae:	2300      	movs	r3, #0
    e8b0:	e7f9      	b.n	e8a6 <memq_dequeue+0xc>

0000e8b2 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    e8b2:	b410      	push	{r4}
	u8_t one_count = 0;
    e8b4:	2200      	movs	r2, #0

	while (octets_len--) {
    e8b6:	e008      	b.n	e8ca <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    e8b8:	1e59      	subs	r1, r3, #1
    e8ba:	b249      	sxtb	r1, r1
    e8bc:	400b      	ands	r3, r1
			one_count++;
    e8be:	3201      	adds	r2, #1
    e8c0:	b2d2      	uxtb	r2, r2
		while (bite) {
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d1f8      	bne.n	e8b8 <util_ones_count_get+0x6>
		}
		octets++;
    e8c6:	3001      	adds	r0, #1
	while (octets_len--) {
    e8c8:	4621      	mov	r1, r4
    e8ca:	1e4b      	subs	r3, r1, #1
    e8cc:	b2dc      	uxtb	r4, r3
    e8ce:	b109      	cbz	r1, e8d4 <util_ones_count_get+0x22>
		bite = *octets;
    e8d0:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    e8d2:	e7f6      	b.n	e8c2 <util_ones_count_get+0x10>
	}

	return one_count;
}
    e8d4:	4610      	mov	r0, r2
    e8d6:	bc10      	pop	{r4}
    e8d8:	4770      	bx	lr
	...

0000e8dc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    e8dc:	4b05      	ldr	r3, [pc, #20]	; (e8f4 <cntr_init+0x18>)
    e8de:	2200      	movs	r2, #0
    e8e0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    e8e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    e8e8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    e8ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e8f0:	4770      	bx	lr
    e8f2:	bf00      	nop
    e8f4:	4000b000 	.word	0x4000b000

0000e8f8 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    e8f8:	4a05      	ldr	r2, [pc, #20]	; (e910 <cntr_start+0x18>)
    e8fa:	7813      	ldrb	r3, [r2, #0]
    e8fc:	1c59      	adds	r1, r3, #1
    e8fe:	7011      	strb	r1, [r2, #0]
    e900:	b923      	cbnz	r3, e90c <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    e902:	2201      	movs	r2, #1
    e904:	4b03      	ldr	r3, [pc, #12]	; (e914 <cntr_start+0x1c>)
    e906:	601a      	str	r2, [r3, #0]

	return 0;
    e908:	2000      	movs	r0, #0
    e90a:	4770      	bx	lr
		return 1;
    e90c:	2001      	movs	r0, #1
}
    e90e:	4770      	bx	lr
    e910:	20000bb8 	.word	0x20000bb8
    e914:	4000b000 	.word	0x4000b000

0000e918 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    e918:	4b0a      	ldr	r3, [pc, #40]	; (e944 <cntr_stop+0x2c>)
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	b14b      	cbz	r3, e932 <cntr_stop+0x1a>

	if (--_refcount) {
    e91e:	3b01      	subs	r3, #1
    e920:	b2db      	uxtb	r3, r3
    e922:	4a08      	ldr	r2, [pc, #32]	; (e944 <cntr_stop+0x2c>)
    e924:	7013      	strb	r3, [r2, #0]
    e926:	b953      	cbnz	r3, e93e <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    e928:	2201      	movs	r2, #1
    e92a:	4b07      	ldr	r3, [pc, #28]	; (e948 <cntr_stop+0x30>)
    e92c:	605a      	str	r2, [r3, #4]

	return 0;
    e92e:	2000      	movs	r0, #0
    e930:	4770      	bx	lr
	LL_ASSERT(_refcount);
    e932:	4040      	eors	r0, r0
    e934:	f380 8811 	msr	BASEPRI, r0
    e938:	f04f 0004 	mov.w	r0, #4
    e93c:	df02      	svc	2
		return 1;
    e93e:	2001      	movs	r0, #1
}
    e940:	4770      	bx	lr
    e942:	bf00      	nop
    e944:	20000bb8 	.word	0x20000bb8
    e948:	4000b000 	.word	0x4000b000

0000e94c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    e94c:	4b01      	ldr	r3, [pc, #4]	; (e954 <cntr_cnt_get+0x8>)
    e94e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    e952:	4770      	bx	lr
    e954:	4000b000 	.word	0x4000b000

0000e958 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    e958:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e95c:	4b01      	ldr	r3, [pc, #4]	; (e964 <cntr_cmp_set+0xc>)
    e95e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    e962:	4770      	bx	lr
    e964:	4000b000 	.word	0x4000b000

0000e968 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    e968:	e009      	b.n	e97e <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    e96a:	4b15      	ldr	r3, [pc, #84]	; (e9c0 <do_ecb+0x58>)
    e96c:	2201      	movs	r2, #1
    e96e:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    e970:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e974:	b91b      	cbnz	r3, e97e <do_ecb+0x16>
    e976:	4b12      	ldr	r3, [pc, #72]	; (e9c0 <do_ecb+0x58>)
    e978:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    e97c:	b9d3      	cbnz	r3, e9b4 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    e97e:	4b10      	ldr	r3, [pc, #64]	; (e9c0 <do_ecb+0x58>)
    e980:	2201      	movs	r2, #1
    e982:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    e984:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    e988:	2100      	movs	r1, #0
    e98a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    e98e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    e992:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e994:	4b0a      	ldr	r3, [pc, #40]	; (e9c0 <do_ecb+0x58>)
    e996:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    e99a:	2b00      	cmp	r3, #0
    e99c:	d1e5      	bne.n	e96a <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e99e:	4b08      	ldr	r3, [pc, #32]	; (e9c0 <do_ecb+0x58>)
    e9a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d1e0      	bne.n	e96a <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    e9a8:	4b05      	ldr	r3, [pc, #20]	; (e9c0 <do_ecb+0x58>)
    e9aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d1f0      	bne.n	e994 <do_ecb+0x2c>
    e9b2:	e7da      	b.n	e96a <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    e9b4:	2200      	movs	r2, #0
    e9b6:	4b02      	ldr	r3, [pc, #8]	; (e9c0 <do_ecb+0x58>)
    e9b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    e9bc:	4770      	bx	lr
    e9be:	bf00      	nop
    e9c0:	4000e000 	.word	0x4000e000

0000e9c4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    e9c4:	b570      	push	{r4, r5, r6, lr}
    e9c6:	b08c      	sub	sp, #48	; 0x30
    e9c8:	460e      	mov	r6, r1
    e9ca:	4615      	mov	r5, r2
    e9cc:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    e9ce:	2210      	movs	r2, #16
    e9d0:	4601      	mov	r1, r0
    e9d2:	4668      	mov	r0, sp
    e9d4:	f7ff ff2e 	bl	e834 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    e9d8:	2210      	movs	r2, #16
    e9da:	4631      	mov	r1, r6
    e9dc:	eb0d 0002 	add.w	r0, sp, r2
    e9e0:	f7ff ff28 	bl	e834 <mem_rcopy>

	do_ecb(&ecb);
    e9e4:	4668      	mov	r0, sp
    e9e6:	f7ff ffbf 	bl	e968 <do_ecb>

	if (cipher_text_le) {
    e9ea:	b125      	cbz	r5, e9f6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    e9ec:	2210      	movs	r2, #16
    e9ee:	a908      	add	r1, sp, #32
    e9f0:	4628      	mov	r0, r5
    e9f2:	f7ff ff1f 	bl	e834 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    e9f6:	b124      	cbz	r4, ea02 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    e9f8:	2210      	movs	r2, #16
    e9fa:	a908      	add	r1, sp, #32
    e9fc:	4620      	mov	r0, r4
    e9fe:	f7f1 fc5f 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    ea02:	b00c      	add	sp, #48	; 0x30
    ea04:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ea08 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    ea08:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    ea0a:	4b02      	ldr	r3, [pc, #8]	; (ea14 <isr_radio+0xc>)
    ea0c:	681b      	ldr	r3, [r3, #0]
    ea0e:	b103      	cbz	r3, ea12 <isr_radio+0xa>
		sfp_radio_isr();
    ea10:	4798      	blx	r3
    ea12:	bd08      	pop	{r3, pc}
    ea14:	20000dd8 	.word	0x20000dd8

0000ea18 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    ea18:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ea1a:	4b07      	ldr	r3, [pc, #28]	; (ea38 <radio_isr_set+0x20>)
    ea1c:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    ea1e:	2210      	movs	r2, #16
    ea20:	4b06      	ldr	r3, [pc, #24]	; (ea3c <radio_isr_set+0x24>)
    ea22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ea26:	2202      	movs	r2, #2
    ea28:	4b05      	ldr	r3, [pc, #20]	; (ea40 <radio_isr_set+0x28>)
    ea2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    ea2e:	2001      	movs	r0, #1
    ea30:	f018 fa3a 	bl	26ea8 <_arch_irq_enable>
    ea34:	bd08      	pop	{r3, pc}
    ea36:	bf00      	nop
    ea38:	20000dd8 	.word	0x20000dd8
    ea3c:	40001000 	.word	0x40001000
    ea40:	e000e100 	.word	0xe000e100

0000ea44 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ea44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ea48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea4c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    ea50:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ea54:	2100      	movs	r1, #0
    ea56:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    ea5a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    ea5e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    ea62:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    ea66:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    ea6a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    ea6e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    ea72:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    ea76:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    ea7a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    ea7e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    ea82:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    ea86:	4770      	bx	lr

0000ea88 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    ea88:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    ea8a:	2001      	movs	r0, #1
    ea8c:	f018 fa1a 	bl	26ec4 <_arch_irq_disable>

	NRF_RADIO->POWER =
    ea90:	4b03      	ldr	r3, [pc, #12]	; (eaa0 <radio_reset+0x18>)
    ea92:	2200      	movs	r2, #0
    ea94:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    ea98:	2201      	movs	r2, #1
    ea9a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    ea9e:	bd08      	pop	{r3, pc}
    eaa0:	40001000 	.word	0x40001000

0000eaa4 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    eaa4:	2802      	cmp	r0, #2
    eaa6:	d106      	bne.n	eab6 <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    eaa8:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    eaaa:	f003 030f 	and.w	r3, r3, #15
    eaae:	4a03      	ldr	r2, [pc, #12]	; (eabc <radio_phy_set+0x18>)
    eab0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    eab4:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    eab6:	2303      	movs	r3, #3
    eab8:	e7f7      	b.n	eaaa <radio_phy_set+0x6>
    eaba:	bf00      	nop
    eabc:	40001000 	.word	0x40001000

0000eac0 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    eac0:	4b01      	ldr	r3, [pc, #4]	; (eac8 <radio_tx_power_set+0x8>)
    eac2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    eac6:	4770      	bx	lr
    eac8:	40001000 	.word	0x40001000

0000eacc <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    eacc:	4b01      	ldr	r3, [pc, #4]	; (ead4 <radio_freq_chan_set+0x8>)
    eace:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ead2:	4770      	bx	lr
    ead4:	40001000 	.word	0x40001000

0000ead8 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    ead8:	4b07      	ldr	r3, [pc, #28]	; (eaf8 <radio_whiten_iv_set+0x20>)
    eada:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    eade:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    eae2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    eae6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    eaea:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    eaee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    eaf2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    eaf6:	4770      	bx	lr
    eaf8:	40001000 	.word	0x40001000

0000eafc <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    eafc:	4a0a      	ldr	r2, [pc, #40]	; (eb28 <radio_aa_set+0x2c>)
    eafe:	2300      	movs	r3, #0
    eb00:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    eb04:	2301      	movs	r3, #1
    eb06:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    eb0a:	78c3      	ldrb	r3, [r0, #3]
    eb0c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    eb10:	7881      	ldrb	r1, [r0, #2]
    eb12:	7843      	ldrb	r3, [r0, #1]
    eb14:	041b      	lsls	r3, r3, #16
    eb16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    eb1a:	7801      	ldrb	r1, [r0, #0]
    eb1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    eb20:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    eb24:	4770      	bx	lr
    eb26:	bf00      	nop
    eb28:	40001000 	.word	0x40001000

0000eb2c <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    eb2c:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    eb2e:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    eb32:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    eb36:	2a02      	cmp	r2, #2
    eb38:	d020      	beq.n	eb7c <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    eb3a:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    eb3c:	b10c      	cbz	r4, eb42 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    eb3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    eb42:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    eb46:	f1c0 0008 	rsb	r0, r0, #8
    eb4a:	0400      	lsls	r0, r0, #16
    eb4c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    eb50:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    eb52:	4303      	orrs	r3, r0
    eb54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    eb58:	4a0a      	ldr	r2, [pc, #40]	; (eb84 <radio_pkt_configure+0x58>)
    eb5a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    eb5e:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    eb62:	4b09      	ldr	r3, [pc, #36]	; (eb88 <radio_pkt_configure+0x5c>)
    eb64:	4003      	ands	r3, r0
    eb66:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    eb6a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    eb6e:	4319      	orrs	r1, r3
    eb70:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    eb74:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    eb78:	bc10      	pop	{r4}
    eb7a:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    eb7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    eb80:	e7dc      	b.n	eb3c <radio_pkt_configure+0x10>
    eb82:	bf00      	nop
    eb84:	40001000 	.word	0x40001000
    eb88:	fef80000 	.word	0xfef80000

0000eb8c <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    eb8c:	4b01      	ldr	r3, [pc, #4]	; (eb94 <radio_pkt_rx_set+0x8>)
    eb8e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eb92:	4770      	bx	lr
    eb94:	40001000 	.word	0x40001000

0000eb98 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    eb98:	4b01      	ldr	r3, [pc, #4]	; (eba0 <radio_pkt_tx_set+0x8>)
    eb9a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eb9e:	4770      	bx	lr
    eba0:	40001000 	.word	0x40001000

0000eba4 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eba4:	208c      	movs	r0, #140	; 0x8c
    eba6:	4770      	bx	lr

0000eba8 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eba8:	2001      	movs	r0, #1
    ebaa:	4770      	bx	lr

0000ebac <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ebac:	208c      	movs	r0, #140	; 0x8c
    ebae:	4770      	bx	lr

0000ebb0 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    ebb0:	2802      	cmp	r0, #2
    ebb2:	d101      	bne.n	ebb8 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    ebb4:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ebb6:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    ebb8:	200a      	movs	r0, #10
    ebba:	4770      	bx	lr

0000ebbc <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    ebbc:	2201      	movs	r2, #1
    ebbe:	4b01      	ldr	r3, [pc, #4]	; (ebc4 <radio_rx_enable+0x8>)
    ebc0:	605a      	str	r2, [r3, #4]
    ebc2:	4770      	bx	lr
    ebc4:	40001000 	.word	0x40001000

0000ebc8 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    ebc8:	2201      	movs	r2, #1
    ebca:	4b01      	ldr	r3, [pc, #4]	; (ebd0 <radio_tx_enable+0x8>)
    ebcc:	601a      	str	r2, [r3, #0]
    ebce:	4770      	bx	lr
    ebd0:	40001000 	.word	0x40001000

0000ebd4 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    ebd4:	4b03      	ldr	r3, [pc, #12]	; (ebe4 <radio_disable+0x10>)
    ebd6:	2200      	movs	r2, #0
    ebd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    ebdc:	2201      	movs	r2, #1
    ebde:	611a      	str	r2, [r3, #16]
    ebe0:	4770      	bx	lr
    ebe2:	bf00      	nop
    ebe4:	40001000 	.word	0x40001000

0000ebe8 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    ebe8:	4b06      	ldr	r3, [pc, #24]	; (ec04 <radio_status_reset+0x1c>)
    ebea:	2200      	movs	r2, #0
    ebec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    ebf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    ebf4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    ebf8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    ebfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ec00:	4770      	bx	lr
    ec02:	bf00      	nop
    ec04:	40001000 	.word	0x40001000

0000ec08 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    ec08:	4b03      	ldr	r3, [pc, #12]	; (ec18 <radio_is_ready+0x10>)
    ec0a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    ec0e:	3000      	adds	r0, #0
    ec10:	bf18      	it	ne
    ec12:	2001      	movne	r0, #1
    ec14:	4770      	bx	lr
    ec16:	bf00      	nop
    ec18:	40001000 	.word	0x40001000

0000ec1c <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    ec1c:	4b03      	ldr	r3, [pc, #12]	; (ec2c <radio_is_done+0x10>)
    ec1e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    ec22:	3000      	adds	r0, #0
    ec24:	bf18      	it	ne
    ec26:	2001      	movne	r0, #1
    ec28:	4770      	bx	lr
    ec2a:	bf00      	nop
    ec2c:	40001000 	.word	0x40001000

0000ec30 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    ec30:	4b03      	ldr	r3, [pc, #12]	; (ec40 <radio_is_idle+0x10>)
    ec32:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    ec36:	fab0 f080 	clz	r0, r0
    ec3a:	0940      	lsrs	r0, r0, #5
    ec3c:	4770      	bx	lr
    ec3e:	bf00      	nop
    ec40:	40001000 	.word	0x40001000

0000ec44 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    ec44:	4b04      	ldr	r3, [pc, #16]	; (ec58 <radio_crc_configure+0x14>)
    ec46:	f240 1203 	movw	r2, #259	; 0x103
    ec4a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    ec4e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ec52:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ec56:	4770      	bx	lr
    ec58:	40001000 	.word	0x40001000

0000ec5c <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    ec5c:	4b03      	ldr	r3, [pc, #12]	; (ec6c <radio_crc_is_valid+0x10>)
    ec5e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ec62:	3000      	adds	r0, #0
    ec64:	bf18      	it	ne
    ec66:	2001      	movne	r0, #1
    ec68:	4770      	bx	lr
    ec6a:	bf00      	nop
    ec6c:	40001000 	.word	0x40001000

0000ec70 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ec70:	4800      	ldr	r0, [pc, #0]	; (ec74 <radio_pkt_empty_get+0x4>)
    ec72:	4770      	bx	lr
    ec74:	20000ccc 	.word	0x20000ccc

0000ec78 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ec78:	4800      	ldr	r0, [pc, #0]	; (ec7c <radio_pkt_scratch_get+0x4>)
    ec7a:	4770      	bx	lr
    ec7c:	20000cd0 	.word	0x20000cd0

0000ec80 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ec80:	220b      	movs	r2, #11
    ec82:	4b02      	ldr	r3, [pc, #8]	; (ec8c <radio_switch_complete_and_rx+0xc>)
    ec84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec88:	4770      	bx	lr
    ec8a:	bf00      	nop
    ec8c:	40001000 	.word	0x40001000

0000ec90 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ec90:	2207      	movs	r2, #7
    ec92:	4b02      	ldr	r3, [pc, #8]	; (ec9c <radio_switch_complete_and_tx+0xc>)
    ec94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec98:	4770      	bx	lr
    ec9a:	bf00      	nop
    ec9c:	40001000 	.word	0x40001000

0000eca0 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    eca0:	2203      	movs	r2, #3
    eca2:	4b02      	ldr	r3, [pc, #8]	; (ecac <radio_switch_complete_and_disable+0xc>)
    eca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eca8:	4770      	bx	lr
    ecaa:	bf00      	nop
    ecac:	40001000 	.word	0x40001000

0000ecb0 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ecb0:	4a03      	ldr	r2, [pc, #12]	; (ecc0 <radio_rssi_measure+0x10>)
    ecb2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ecb6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ecba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ecbe:	4770      	bx	lr
    ecc0:	40001000 	.word	0x40001000

0000ecc4 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ecc4:	4b01      	ldr	r3, [pc, #4]	; (eccc <radio_rssi_get+0x8>)
    ecc6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ecca:	4770      	bx	lr
    eccc:	40001000 	.word	0x40001000

0000ecd0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ecd0:	2200      	movs	r2, #0
    ecd2:	4b02      	ldr	r3, [pc, #8]	; (ecdc <radio_rssi_status_reset+0xc>)
    ecd4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ecd8:	4770      	bx	lr
    ecda:	bf00      	nop
    ecdc:	40001000 	.word	0x40001000

0000ece0 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ece0:	4b03      	ldr	r3, [pc, #12]	; (ecf0 <radio_rssi_is_ready+0x10>)
    ece2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ece6:	3000      	adds	r0, #0
    ece8:	bf18      	it	ne
    ecea:	2001      	movne	r0, #1
    ecec:	4770      	bx	lr
    ecee:	bf00      	nop
    ecf0:	40001000 	.word	0x40001000

0000ecf4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ecf4:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    ecf6:	2400      	movs	r4, #0
    ecf8:	e019      	b.n	ed2e <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ecfa:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    ecfc:	7893      	ldrb	r3, [r2, #2]
    ecfe:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ed00:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    ed04:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    ed06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    ed0a:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    ed0c:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ed0e:	4d0c      	ldr	r5, [pc, #48]	; (ed40 <radio_filter_configure+0x4c>)
    ed10:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    ed14:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ed18:	7956      	ldrb	r6, [r2, #5]
    ed1a:	7913      	ldrb	r3, [r2, #4]
    ed1c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ed20:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ed24:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    ed28:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    ed2a:	3401      	adds	r4, #1
    ed2c:	b2e4      	uxtb	r4, r4
    ed2e:	2c07      	cmp	r4, #7
    ed30:	d9e3      	bls.n	ecfa <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ed32:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    ed36:	4b02      	ldr	r3, [pc, #8]	; (ed40 <radio_filter_configure+0x4c>)
    ed38:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    ed3c:	bc70      	pop	{r4, r5, r6}
    ed3e:	4770      	bx	lr
    ed40:	40001000 	.word	0x40001000

0000ed44 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    ed44:	4a03      	ldr	r2, [pc, #12]	; (ed54 <radio_filter_disable+0x10>)
    ed46:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    ed4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ed4e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    ed52:	4770      	bx	lr
    ed54:	40001000 	.word	0x40001000

0000ed58 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    ed58:	4b03      	ldr	r3, [pc, #12]	; (ed68 <radio_filter_status_reset+0x10>)
    ed5a:	2200      	movs	r2, #0
    ed5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    ed60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ed64:	4770      	bx	lr
    ed66:	bf00      	nop
    ed68:	40001000 	.word	0x40001000

0000ed6c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ed6c:	4b03      	ldr	r3, [pc, #12]	; (ed7c <radio_filter_has_match+0x10>)
    ed6e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ed72:	3000      	adds	r0, #0
    ed74:	bf18      	it	ne
    ed76:	2001      	movne	r0, #1
    ed78:	4770      	bx	lr
    ed7a:	bf00      	nop
    ed7c:	40001000 	.word	0x40001000

0000ed80 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ed80:	4b01      	ldr	r3, [pc, #4]	; (ed88 <radio_filter_match_get+0x8>)
    ed82:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    ed86:	4770      	bx	lr
    ed88:	40001000 	.word	0x40001000

0000ed8c <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ed8c:	4b04      	ldr	r3, [pc, #16]	; (eda0 <radio_bc_configure+0x14>)
    ed8e:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ed92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ed96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ed9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ed9e:	4770      	bx	lr
    eda0:	40001000 	.word	0x40001000

0000eda4 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    eda4:	2200      	movs	r2, #0
    eda6:	4b02      	ldr	r3, [pc, #8]	; (edb0 <radio_bc_status_reset+0xc>)
    eda8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    edac:	4770      	bx	lr
    edae:	bf00      	nop
    edb0:	40001000 	.word	0x40001000

0000edb4 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    edb4:	4b03      	ldr	r3, [pc, #12]	; (edc4 <radio_bc_has_match+0x10>)
    edb6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    edba:	3000      	adds	r0, #0
    edbc:	bf18      	it	ne
    edbe:	2001      	movne	r0, #1
    edc0:	4770      	bx	lr
    edc2:	bf00      	nop
    edc4:	40001000 	.word	0x40001000

0000edc8 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    edc8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    edcc:	4b04      	ldr	r3, [pc, #16]	; (ede0 <radio_tmr_status_reset+0x18>)
    edce:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    edd2:	f248 027f 	movw	r2, #32895	; 0x807f
    edd6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    edda:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    edde:	4770      	bx	lr
    ede0:	4000b000 	.word	0x4000b000

0000ede4 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    ede4:	4b01      	ldr	r3, [pc, #4]	; (edec <radio_tmr_tifs_set+0x8>)
    ede6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    edea:	4770      	bx	lr
    edec:	40001000 	.word	0x40001000

0000edf0 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    edf0:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    edf2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    edf6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    edfa:	4c21      	ldr	r4, [pc, #132]	; (ee80 <radio_tmr_start+0x90>)
    edfc:	42a3      	cmp	r3, r4
    edfe:	d906      	bls.n	ee0e <radio_tmr_start+0x1e>
		ticks_start--;
    ee00:	3901      	subs	r1, #1
		remainder += 30517578UL;
    ee02:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    ee06:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    ee0a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    ee0e:	4b1d      	ldr	r3, [pc, #116]	; (ee84 <radio_tmr_start+0x94>)
    ee10:	fba3 3202 	umull	r3, r2, r3, r2
    ee14:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    ee16:	4b1c      	ldr	r3, [pc, #112]	; (ee88 <radio_tmr_start+0x98>)
    ee18:	2401      	movs	r4, #1
    ee1a:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    ee1c:	2500      	movs	r5, #0
    ee1e:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    ee22:	2404      	movs	r4, #4
    ee24:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    ee28:	2602      	movs	r6, #2
    ee2a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    ee2e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    ee32:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    ee36:	4c15      	ldr	r4, [pc, #84]	; (ee8c <radio_tmr_start+0x9c>)
    ee38:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    ee3c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    ee40:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    ee44:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    ee48:	4911      	ldr	r1, [pc, #68]	; (ee90 <radio_tmr_start+0xa0>)
    ee4a:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    ee4e:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    ee52:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    ee56:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    ee5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    ee5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    ee62:	b948      	cbnz	r0, ee78 <radio_tmr_start+0x88>
    ee64:	490b      	ldr	r1, [pc, #44]	; (ee94 <radio_tmr_start+0xa4>)
    ee66:	4b0a      	ldr	r3, [pc, #40]	; (ee90 <radio_tmr_start+0xa0>)
    ee68:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    ee6c:	2101      	movs	r1, #1
    ee6e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    ee72:	4610      	mov	r0, r2
    ee74:	bc70      	pop	{r4, r5, r6}
    ee76:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    ee78:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    ee7c:	e7f3      	b.n	ee66 <radio_tmr_start+0x76>
    ee7e:	bf00      	nop
    ee80:	7ff0bdbf 	.word	0x7ff0bdbf
    ee84:	431bde83 	.word	0x431bde83
    ee88:	40008000 	.word	0x40008000
    ee8c:	4000b000 	.word	0x4000b000
    ee90:	4001f000 	.word	0x4001f000
    ee94:	40001004 	.word	0x40001004

0000ee98 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    ee98:	4b02      	ldr	r3, [pc, #8]	; (eea4 <radio_tmr_stop+0xc>)
    ee9a:	2201      	movs	r2, #1
    ee9c:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    ee9e:	611a      	str	r2, [r3, #16]
    eea0:	4770      	bx	lr
    eea2:	bf00      	nop
    eea4:	40008000 	.word	0x40008000

0000eea8 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    eea8:	4b0e      	ldr	r3, [pc, #56]	; (eee4 <radio_tmr_hcto_configure+0x3c>)
    eeaa:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    eeae:	2200      	movs	r2, #0
    eeb0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    eeb4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    eeb8:	4a0b      	ldr	r2, [pc, #44]	; (eee8 <radio_tmr_hcto_configure+0x40>)
    eeba:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    eebe:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eec2:	3240      	adds	r2, #64	; 0x40
    eec4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    eec8:	f502 7280 	add.w	r2, r2, #256	; 0x100
    eecc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    eed0:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    eed4:	3a34      	subs	r2, #52	; 0x34
    eed6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    eeda:	2218      	movs	r2, #24
    eedc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    eee0:	4770      	bx	lr
    eee2:	bf00      	nop
    eee4:	40008000 	.word	0x40008000
    eee8:	40001104 	.word	0x40001104

0000eeec <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    eeec:	4b0b      	ldr	r3, [pc, #44]	; (ef1c <radio_tmr_aa_capture+0x30>)
    eeee:	4a0c      	ldr	r2, [pc, #48]	; (ef20 <radio_tmr_aa_capture+0x34>)
    eef0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    eef4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eef8:	3240      	adds	r2, #64	; 0x40
    eefa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    eefe:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    ef02:	3a3c      	subs	r2, #60	; 0x3c
    ef04:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    ef08:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ef0c:	3240      	adds	r2, #64	; 0x40
    ef0e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    ef12:	220c      	movs	r2, #12
    ef14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ef18:	4770      	bx	lr
    ef1a:	bf00      	nop
    ef1c:	4001f000 	.word	0x4001f000
    ef20:	40001100 	.word	0x40001100

0000ef24 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    ef24:	4b01      	ldr	r3, [pc, #4]	; (ef2c <radio_tmr_aa_get+0x8>)
    ef26:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    ef2a:	4770      	bx	lr
    ef2c:	40008000 	.word	0x40008000

0000ef30 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    ef30:	4b01      	ldr	r3, [pc, #4]	; (ef38 <radio_tmr_aa_save+0x8>)
    ef32:	6018      	str	r0, [r3, #0]
    ef34:	4770      	bx	lr
    ef36:	bf00      	nop
    ef38:	20000dd4 	.word	0x20000dd4

0000ef3c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    ef3c:	4b01      	ldr	r3, [pc, #4]	; (ef44 <radio_tmr_aa_restore+0x8>)
    ef3e:	6818      	ldr	r0, [r3, #0]
    ef40:	4770      	bx	lr
    ef42:	bf00      	nop
    ef44:	20000dd4 	.word	0x20000dd4

0000ef48 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    ef48:	4b01      	ldr	r3, [pc, #4]	; (ef50 <radio_tmr_ready_get+0x8>)
    ef4a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    ef4e:	4770      	bx	lr
    ef50:	40008000 	.word	0x40008000

0000ef54 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    ef54:	4b06      	ldr	r3, [pc, #24]	; (ef70 <radio_tmr_end_capture+0x1c>)
    ef56:	4a07      	ldr	r2, [pc, #28]	; (ef74 <radio_tmr_end_capture+0x20>)
    ef58:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    ef5c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ef60:	323c      	adds	r2, #60	; 0x3c
    ef62:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    ef66:	2220      	movs	r2, #32
    ef68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ef6c:	4770      	bx	lr
    ef6e:	bf00      	nop
    ef70:	4001f000 	.word	0x4001f000
    ef74:	4000110c 	.word	0x4000110c

0000ef78 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    ef78:	4b01      	ldr	r3, [pc, #4]	; (ef80 <radio_tmr_end_get+0x8>)
    ef7a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ef7e:	4770      	bx	lr
    ef80:	40008000 	.word	0x40008000

0000ef84 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    ef84:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ef86:	4b18      	ldr	r3, [pc, #96]	; (efe8 <radio_ccm_rx_pkt_set+0x64>)
    ef88:	2400      	movs	r4, #0
    ef8a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ef8e:	2402      	movs	r4, #2
    ef90:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    ef94:	42a1      	cmp	r1, r4
    ef96:	d125      	bne.n	efe4 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    ef98:	4914      	ldr	r1, [pc, #80]	; (efec <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    ef9a:	4b13      	ldr	r3, [pc, #76]	; (efe8 <radio_ccm_rx_pkt_set+0x64>)
    ef9c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    efa0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    efa4:	4812      	ldr	r0, [pc, #72]	; (eff0 <radio_ccm_rx_pkt_set+0x6c>)
    efa6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    efaa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    efae:	4a11      	ldr	r2, [pc, #68]	; (eff4 <radio_ccm_rx_pkt_set+0x70>)
    efb0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    efb4:	2200      	movs	r2, #0
    efb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    efba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    efbe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    efc2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    efc6:	4a0c      	ldr	r2, [pc, #48]	; (eff8 <radio_ccm_rx_pkt_set+0x74>)
    efc8:	490c      	ldr	r1, [pc, #48]	; (effc <radio_ccm_rx_pkt_set+0x78>)
    efca:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    efce:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    efd2:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    efd6:	2140      	movs	r1, #64	; 0x40
    efd8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    efdc:	2201      	movs	r2, #1
    efde:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    efe0:	bc10      	pop	{r4}
    efe2:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    efe4:	4906      	ldr	r1, [pc, #24]	; (f000 <radio_ccm_rx_pkt_set+0x7c>)
    efe6:	e7d8      	b.n	ef9a <radio_ccm_rx_pkt_set+0x16>
    efe8:	4000f000 	.word	0x4000f000
    efec:	01010001 	.word	0x01010001
    eff0:	20000cd0 	.word	0x20000cd0
    eff4:	20000bc0 	.word	0x20000bc0
    eff8:	4001f000 	.word	0x4001f000
    effc:	40001104 	.word	0x40001104
    f000:	01000001 	.word	0x01000001

0000f004 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    f004:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    f006:	4b10      	ldr	r3, [pc, #64]	; (f048 <radio_ccm_tx_pkt_set+0x44>)
    f008:	2200      	movs	r2, #0
    f00a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    f00e:	2402      	movs	r4, #2
    f010:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    f014:	4c0d      	ldr	r4, [pc, #52]	; (f04c <radio_ccm_tx_pkt_set+0x48>)
    f016:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    f01a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    f01e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    f022:	480b      	ldr	r0, [pc, #44]	; (f050 <radio_ccm_tx_pkt_set+0x4c>)
    f024:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    f028:	490a      	ldr	r1, [pc, #40]	; (f054 <radio_ccm_tx_pkt_set+0x50>)
    f02a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    f02e:	2101      	movs	r1, #1
    f030:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    f034:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    f038:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    f03c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    f040:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    f042:	bc10      	pop	{r4}
    f044:	4770      	bx	lr
    f046:	bf00      	nop
    f048:	4000f000 	.word	0x4000f000
    f04c:	01010000 	.word	0x01010000
    f050:	20000cd0 	.word	0x20000cd0
    f054:	20000bc0 	.word	0x20000bc0

0000f058 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    f058:	2202      	movs	r2, #2
    f05a:	4b0d      	ldr	r3, [pc, #52]	; (f090 <radio_ccm_is_done+0x38>)
    f05c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    f060:	e002      	b.n	f068 <radio_ccm_is_done+0x10>
    f062:	bf20      	wfe
  __ASM volatile ("sev");
    f064:	bf40      	sev
  __ASM volatile ("wfe");
    f066:	bf20      	wfe
    f068:	4b09      	ldr	r3, [pc, #36]	; (f090 <radio_ccm_is_done+0x38>)
    f06a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f06e:	2b00      	cmp	r3, #0
    f070:	d0f7      	beq.n	f062 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    f072:	4b07      	ldr	r3, [pc, #28]	; (f090 <radio_ccm_is_done+0x38>)
    f074:	2202      	movs	r2, #2
    f076:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    f07a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f07e:	4a05      	ldr	r2, [pc, #20]	; (f094 <radio_ccm_is_done+0x3c>)
    f080:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    f084:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    f088:	fab0 f080 	clz	r0, r0
    f08c:	0940      	lsrs	r0, r0, #5
    f08e:	4770      	bx	lr
    f090:	4000f000 	.word	0x4000f000
    f094:	e000e100 	.word	0xe000e100

0000f098 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    f098:	4b03      	ldr	r3, [pc, #12]	; (f0a8 <radio_ccm_mic_is_valid+0x10>)
    f09a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f09e:	3000      	adds	r0, #0
    f0a0:	bf18      	it	ne
    f0a2:	2001      	movne	r0, #1
    f0a4:	4770      	bx	lr
    f0a6:	bf00      	nop
    f0a8:	4000f000 	.word	0x4000f000

0000f0ac <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    f0ac:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    f0ae:	4c13      	ldr	r4, [pc, #76]	; (f0fc <radio_ar_configure+0x50>)
    f0b0:	2303      	movs	r3, #3
    f0b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    f0b6:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    f0ba:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    f0be:	4b10      	ldr	r3, [pc, #64]	; (f100 <radio_ar_configure+0x54>)
    f0c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f0c4:	3b01      	subs	r3, #1
    f0c6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    f0ca:	4b0e      	ldr	r3, [pc, #56]	; (f104 <radio_ar_configure+0x58>)
    f0cc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    f0d0:	2300      	movs	r3, #0
    f0d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    f0d6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    f0da:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    f0de:	2040      	movs	r0, #64	; 0x40
    f0e0:	f7ff fe54 	bl	ed8c <radio_bc_configure>
	radio_bc_status_reset();
    f0e4:	f7ff fe5e 	bl	eda4 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    f0e8:	4b07      	ldr	r3, [pc, #28]	; (f108 <radio_ar_configure+0x5c>)
    f0ea:	4a08      	ldr	r2, [pc, #32]	; (f10c <radio_ar_configure+0x60>)
    f0ec:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    f0f0:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f0f4:	2240      	movs	r2, #64	; 0x40
    f0f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f0fa:	bd10      	pop	{r4, pc}
    f0fc:	4000f000 	.word	0x4000f000
    f100:	40001000 	.word	0x40001000
    f104:	20000bbc 	.word	0x20000bbc
    f108:	4001f000 	.word	0x4001f000
    f10c:	40001128 	.word	0x40001128

0000f110 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    f110:	4b01      	ldr	r3, [pc, #4]	; (f118 <radio_ar_match_get+0x8>)
    f112:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f116:	4770      	bx	lr
    f118:	4000f000 	.word	0x4000f000

0000f11c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    f11c:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    f11e:	f7ff fe41 	bl	eda4 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    f122:	2200      	movs	r2, #0
    f124:	4b01      	ldr	r3, [pc, #4]	; (f12c <radio_ar_status_reset+0x10>)
    f126:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    f12a:	bd08      	pop	{r3, pc}
    f12c:	4000f000 	.word	0x4000f000

0000f130 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    f130:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    f132:	f7ff fe3f 	bl	edb4 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    f136:	b168      	cbz	r0, f154 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    f138:	4b0a      	ldr	r3, [pc, #40]	; (f164 <radio_ar_has_match+0x34>)
    f13a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    f13e:	b15b      	cbz	r3, f158 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    f140:	4b08      	ldr	r3, [pc, #32]	; (f164 <radio_ar_has_match+0x34>)
    f142:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    f146:	b14b      	cbz	r3, f15c <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    f148:	4b06      	ldr	r3, [pc, #24]	; (f164 <radio_ar_has_match+0x34>)
    f14a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    f14e:	b13b      	cbz	r3, f160 <radio_ar_has_match+0x30>
    f150:	2000      	movs	r0, #0
    f152:	bd08      	pop	{r3, pc}
    f154:	2000      	movs	r0, #0
    f156:	bd08      	pop	{r3, pc}
    f158:	2000      	movs	r0, #0
    f15a:	bd08      	pop	{r3, pc}
    f15c:	2000      	movs	r0, #0
    f15e:	bd08      	pop	{r3, pc}
    f160:	2001      	movs	r0, #1
}
    f162:	bd08      	pop	{r3, pc}
    f164:	4000f000 	.word	0x4000f000

0000f168 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    f168:	b1f0      	cbz	r0, f1a8 <isr+0x40>
{
    f16a:	b430      	push	{r4, r5}
    f16c:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    f16e:	78c0      	ldrb	r0, [r0, #3]
    f170:	1c43      	adds	r3, r0, #1
    f172:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f174:	7815      	ldrb	r5, [r2, #0]
    f176:	42ab      	cmp	r3, r5
    f178:	d012      	beq.n	f1a0 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    f17a:	7894      	ldrb	r4, [r2, #2]
    f17c:	42a3      	cmp	r3, r4
    f17e:	d016      	beq.n	f1ae <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    f180:	b1c1      	cbz	r1, f1b4 <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    f182:	490f      	ldr	r1, [pc, #60]	; (f1c0 <isr+0x58>)
    f184:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    f188:	4410      	add	r0, r2
    f18a:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    f18c:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    f18e:	3301      	adds	r3, #1
    f190:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f192:	429d      	cmp	r5, r3
    f194:	d006      	beq.n	f1a4 <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    f196:	42a3      	cmp	r3, r4
    f198:	d10f      	bne.n	f1ba <isr+0x52>
		return 0;
    f19a:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    f19c:	bc30      	pop	{r4, r5}
    f19e:	4770      	bx	lr
		last = 0;
    f1a0:	2300      	movs	r3, #0
    f1a2:	e7ea      	b.n	f17a <isr+0x12>
		last = 0;
    f1a4:	2300      	movs	r3, #0
    f1a6:	e7f6      	b.n	f196 <isr+0x2e>
		return -ENOBUFS;
    f1a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f1ac:	4770      	bx	lr
		return -ENOBUFS;
    f1ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f1b2:	e7f3      	b.n	f19c <isr+0x34>
		return -EBUSY;
    f1b4:	f06f 000f 	mvn.w	r0, #15
    f1b8:	e7f0      	b.n	f19c <isr+0x34>
	return -EBUSY;
    f1ba:	f06f 000f 	mvn.w	r0, #15
    f1be:	e7ed      	b.n	f19c <isr+0x34>
    f1c0:	4000d000 	.word	0x4000d000
    f1c4:	00000000 	.word	0x00000000

0000f1c8 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    f1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1cc:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    f1ce:	f7ff fd25 	bl	ec1c <radio_is_done>
    f1d2:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    f1d4:	b9e4      	cbnz	r4, f210 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f1d6:	46a0      	mov	r8, r4
    f1d8:	46a1      	mov	r9, r4
    f1da:	4627      	mov	r7, r4
    f1dc:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    f1de:	25ff      	movs	r5, #255	; 0xff
    f1e0:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    f1e2:	f7ff fd01 	bl	ebe8 <radio_status_reset>
	radio_tmr_status_reset();
    f1e6:	f7ff fdef 	bl	edc8 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f1ea:	f7ff fdb5 	bl	ed58 <radio_filter_status_reset>
	radio_ar_status_reset();
    f1ee:	f7ff ff95 	bl	f11c <radio_ar_status_reset>
	radio_rssi_status_reset();
    f1f2:	f7ff fd6d 	bl	ecd0 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    f1f6:	4bb6      	ldr	r3, [pc, #728]	; (f4d0 <isr+0x308>)
    f1f8:	7c1b      	ldrb	r3, [r3, #16]
    f1fa:	2b05      	cmp	r3, #5
    f1fc:	f200 8456 	bhi.w	faac <isr+0x8e4>
    f200:	e8df f013 	tbh	[pc, r3, lsl #1]
    f204:	00e801f3 	.word	0x00e801f3
    f208:	016e001c 	.word	0x016e001c
    f20c:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    f210:	f7ff fd24 	bl	ec5c <radio_crc_is_valid>
    f214:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    f216:	f7ff fda9 	bl	ed6c <radio_filter_has_match>
    f21a:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    f21c:	f7ff fdb0 	bl	ed80 <radio_filter_match_get>
    f220:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    f224:	f7ff ff84 	bl	f130 <radio_ar_has_match>
    f228:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    f22c:	f7ff ff70 	bl	f110 <radio_ar_match_get>
    f230:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    f232:	f7ff fd55 	bl	ece0 <radio_rssi_is_ready>
    f236:	fa5f f880 	uxtb.w	r8, r0
    f23a:	e7d2      	b.n	f1e2 <isr+0x1a>
	_radio.state = STATE_RX;
    f23c:	4da4      	ldr	r5, [pc, #656]	; (f4d0 <isr+0x308>)
    f23e:	2301      	movs	r3, #1
    f240:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f242:	f7ff fe99 	bl	ef78 <radio_tmr_end_get>
    f246:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    f24a:	2096      	movs	r0, #150	; 0x96
    f24c:	f7ff fdca 	bl	ede4 <radio_tmr_tifs_set>
	switch (_radio.role) {
    f250:	7beb      	ldrb	r3, [r5, #15]
    f252:	3b01      	subs	r3, #1
    f254:	2b03      	cmp	r3, #3
    f256:	f200 80b7 	bhi.w	f3c8 <isr+0x200>
    f25a:	e8df f003 	tbb	[pc, r3]
    f25e:	3202      	.short	0x3202
    f260:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f262:	2300      	movs	r3, #0
    f264:	461a      	mov	r2, r3
    f266:	4619      	mov	r1, r3
    f268:	4618      	mov	r0, r3
    f26a:	f7ff fd11 	bl	ec90 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f26e:	f7ff fd03 	bl	ec78 <radio_pkt_scratch_get>
    f272:	f7ff fc8b 	bl	eb8c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f276:	f7ff fcc7 	bl	ec08 <radio_is_ready>
    f27a:	b990      	cbnz	r0, f2a2 <isr+0xda>
		if (ctrl_rl_enabled()) {
    f27c:	f00a f802 	bl	19284 <ctrl_rl_enabled>
    f280:	b9a8      	cbnz	r0, f2ae <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    f282:	2100      	movs	r1, #0
    f284:	4608      	mov	r0, r1
    f286:	f7ff fc93 	bl	ebb0 <radio_rx_chain_delay_get>
    f28a:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f28c:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f28e:	2100      	movs	r1, #0
    f290:	4608      	mov	r0, r1
    f292:	f7ff fc89 	bl	eba8 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f296:	1a20      	subs	r0, r4, r0
    f298:	f7ff fe06 	bl	eea8 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f29c:	f7ff fe5a 	bl	ef54 <radio_tmr_end_capture>
    f2a0:	e1a3      	b.n	f5ea <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f2a2:	4040      	eors	r0, r0
    f2a4:	f380 8811 	msr	BASEPRI, r0
    f2a8:	f04f 0004 	mov.w	r0, #4
    f2ac:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f2ae:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f2b2:	f009 fd63 	bl	18d7c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f2b6:	4601      	mov	r1, r0
    f2b8:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f2bc:	f7ff fef6 	bl	f0ac <radio_ar_configure>
    f2c0:	e7df      	b.n	f282 <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f2c2:	2300      	movs	r3, #0
    f2c4:	461a      	mov	r2, r3
    f2c6:	4619      	mov	r1, r3
    f2c8:	4618      	mov	r0, r3
    f2ca:	f7ff fce1 	bl	ec90 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f2ce:	4b80      	ldr	r3, [pc, #512]	; (f4d0 <isr+0x308>)
    f2d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f2d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f2d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f2dc:	3008      	adds	r0, #8
    f2de:	f7ff fc55 	bl	eb8c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f2e2:	f7ff fc91 	bl	ec08 <radio_is_ready>
    f2e6:	b990      	cbnz	r0, f30e <isr+0x146>
		if (ctrl_rl_enabled()) {
    f2e8:	f009 ffcc 	bl	19284 <ctrl_rl_enabled>
    f2ec:	b9a8      	cbnz	r0, f31a <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    f2ee:	2100      	movs	r1, #0
    f2f0:	4608      	mov	r0, r1
    f2f2:	f7ff fc5d 	bl	ebb0 <radio_rx_chain_delay_get>
    f2f6:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f2f8:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f2fa:	2100      	movs	r1, #0
    f2fc:	4608      	mov	r0, r1
    f2fe:	f7ff fc53 	bl	eba8 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f302:	1a20      	subs	r0, r4, r0
    f304:	f7ff fdd0 	bl	eea8 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f308:	f7ff fcd2 	bl	ecb0 <radio_rssi_measure>
    f30c:	e16d      	b.n	f5ea <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f30e:	4040      	eors	r0, r0
    f310:	f380 8811 	msr	BASEPRI, r0
    f314:	f04f 0004 	mov.w	r0, #4
    f318:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f31a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f31e:	f009 fd2d 	bl	18d7c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f322:	4601      	mov	r1, r0
    f324:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f328:	f7ff fec0 	bl	f0ac <radio_ar_configure>
    f32c:	e7df      	b.n	f2ee <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f32e:	4d68      	ldr	r5, [pc, #416]	; (f4d0 <isr+0x308>)
    f330:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f334:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    f338:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f33c:	09d3      	lsrs	r3, r2, #7
    f33e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f342:	2100      	movs	r1, #0
    f344:	f000 0007 	and.w	r0, r0, #7
    f348:	f7ff fca2 	bl	ec90 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f34c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f350:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    f354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f358:	3108      	adds	r1, #8
    f35a:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f35e:	f002 fad3 	bl	11908 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f362:	f7ff fc51 	bl	ec08 <radio_is_ready>
    f366:	bb20      	cbnz	r0, f3b2 <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f368:	4d59      	ldr	r5, [pc, #356]	; (f4d0 <isr+0x308>)
    f36a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f36e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f372:	2101      	movs	r1, #1
    f374:	f000 0007 	and.w	r0, r0, #7
    f378:	f7ff fc1a 	bl	ebb0 <radio_rx_chain_delay_get>
    f37c:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f37e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    f382:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    f386:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f38a:	2b02      	cmp	r3, #2
    f38c:	d01a      	beq.n	f3c4 <isr+0x1fc>
    f38e:	2b04      	cmp	r3, #4
    f390:	d015      	beq.n	f3be <isr+0x1f6>
		return 40;
    f392:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f394:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f396:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    f39a:	09c1      	lsrs	r1, r0, #7
    f39c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f3a0:	f7ff fc02 	bl	eba8 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f3a4:	1a20      	subs	r0, r4, r0
    f3a6:	f7ff fd7f 	bl	eea8 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f3aa:	2001      	movs	r0, #1
    f3ac:	f002 fb0a 	bl	119c4 <packet_tx_enqueue>
    f3b0:	e11b      	b.n	f5ea <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f3b2:	4040      	eors	r0, r0
    f3b4:	f380 8811 	msr	BASEPRI, r0
    f3b8:	f04f 0004 	mov.w	r0, #4
    f3bc:	df02      	svc	2
		return 376;
    f3be:	f44f 74bc 	mov.w	r4, #376	; 0x178
    f3c2:	e7e7      	b.n	f394 <isr+0x1cc>
		return 24;
    f3c4:	2418      	movs	r4, #24
    f3c6:	e7e5      	b.n	f394 <isr+0x1cc>
		LL_ASSERT(0);
    f3c8:	4040      	eors	r0, r0
    f3ca:	f380 8811 	msr	BASEPRI, r0
    f3ce:	f04f 0004 	mov.w	r0, #4
    f3d2:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f3d4:	b144      	cbz	r4, f3e8 <isr+0x220>
	switch (_radio.role) {
    f3d6:	4b3e      	ldr	r3, [pc, #248]	; (f4d0 <isr+0x308>)
    f3d8:	7bdb      	ldrb	r3, [r3, #15]
    f3da:	3b01      	subs	r3, #1
    f3dc:	2b03      	cmp	r3, #3
    f3de:	d879      	bhi.n	f4d4 <isr+0x30c>
    f3e0:	e8df f003 	tbb	[pc, r3]
    f3e4:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    f3e8:	2203      	movs	r2, #3
    f3ea:	4b39      	ldr	r3, [pc, #228]	; (f4d0 <isr+0x308>)
    f3ec:	741a      	strb	r2, [r3, #16]
		radio_disable();
    f3ee:	f7ff fbf1 	bl	ebd4 <radio_disable>
    f3f2:	e0fa      	b.n	f5ea <isr+0x422>
		if (crc_ok) {
    f3f4:	b94e      	cbnz	r6, f40a <isr+0x242>
			err = 1;
    f3f6:	2001      	movs	r0, #1
		if (err) {
    f3f8:	2800      	cmp	r0, #0
    f3fa:	f000 80f6 	beq.w	f5ea <isr+0x422>
			_radio.state = STATE_CLOSE;
    f3fe:	2203      	movs	r2, #3
    f400:	4b33      	ldr	r3, [pc, #204]	; (f4d0 <isr+0x308>)
    f402:	741a      	strb	r2, [r3, #16]
			radio_disable();
    f404:	f7ff fbe6 	bl	ebd4 <radio_disable>
    f408:	e0ef      	b.n	f5ea <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    f40a:	f8cd 8000 	str.w	r8, [sp]
    f40e:	462b      	mov	r3, r5
    f410:	464a      	mov	r2, r9
    f412:	4651      	mov	r1, sl
    f414:	4638      	mov	r0, r7
    f416:	f007 fc37 	bl	16c88 <isr_rx_adv>
    f41a:	e7ed      	b.n	f3f8 <isr+0x230>
		rl_idx = devmatch_ok ?
    f41c:	b9a7      	cbnz	r7, f448 <isr+0x280>
    f41e:	f1b9 0f00 	cmp.w	r9, #0
    f422:	d11b      	bne.n	f45c <isr+0x294>
    f424:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    f426:	b9f6      	cbnz	r6, f466 <isr+0x29e>
			err = 1;
    f428:	2001      	movs	r0, #1
		if (err) {
    f42a:	2800      	cmp	r0, #0
    f42c:	f000 80dd 	beq.w	f5ea <isr+0x422>
			_radio.state = STATE_CLOSE;
    f430:	4c27      	ldr	r4, [pc, #156]	; (f4d0 <isr+0x308>)
    f432:	2303      	movs	r3, #3
    f434:	7423      	strb	r3, [r4, #16]
			radio_disable();
    f436:	f7ff fbcd 	bl	ebd4 <radio_disable>
			_radio.scanner.state = 0;
    f43a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    f43e:	f36f 0341 	bfc	r3, #1, #1
    f442:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    f446:	e0d0      	b.n	f5ea <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f448:	4b21      	ldr	r3, [pc, #132]	; (f4d0 <isr+0x308>)
    f44a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    f44e:	4651      	mov	r1, sl
    f450:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f454:	f009 fc9c 	bl	18d90 <ctrl_rl_idx>
    f458:	4604      	mov	r4, r0
    f45a:	e7e4      	b.n	f426 <isr+0x25e>
    f45c:	4628      	mov	r0, r5
    f45e:	f009 fccd 	bl	18dfc <ctrl_rl_irk_idx>
    f462:	4604      	mov	r4, r0
    f464:	e7df      	b.n	f426 <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f466:	4b1a      	ldr	r3, [pc, #104]	; (f4d0 <isr+0x308>)
    f468:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f46c:	f013 0f10 	tst.w	r3, #16
    f470:	d109      	bne.n	f486 <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f472:	b91f      	cbnz	r7, f47c <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f474:	2301      	movs	r3, #1
		if (crc_ok &&
    f476:	b9db      	cbnz	r3, f4b0 <isr+0x2e8>
			err = 1;
    f478:	2001      	movs	r0, #1
    f47a:	e7d6      	b.n	f42a <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f47c:	4621      	mov	r1, r4
    f47e:	4648      	mov	r0, r9
    f480:	f009 fe1c 	bl	190bc <ctrl_rl_idx_allowed>
    f484:	b980      	cbnz	r0, f4a8 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f486:	4b12      	ldr	r3, [pc, #72]	; (f4d0 <isr+0x308>)
    f488:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f48c:	f013 0f10 	tst.w	r3, #16
    f490:	d00c      	beq.n	f4ac <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f492:	b10f      	cbz	r7, f498 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f494:	2301      	movs	r3, #1
    f496:	e7ee      	b.n	f476 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f498:	4620      	mov	r0, r4
    f49a:	f009 fcd9 	bl	18e50 <ctrl_irk_whitelisted>
    f49e:	b108      	cbz	r0, f4a4 <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f4a0:	2301      	movs	r3, #1
    f4a2:	e7e8      	b.n	f476 <isr+0x2ae>
    f4a4:	2300      	movs	r3, #0
    f4a6:	e7e6      	b.n	f476 <isr+0x2ae>
    f4a8:	2301      	movs	r3, #1
    f4aa:	e7e4      	b.n	f476 <isr+0x2ae>
    f4ac:	2300      	movs	r3, #0
    f4ae:	e7e2      	b.n	f476 <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    f4b0:	f8cd 8004 	str.w	r8, [sp, #4]
    f4b4:	9400      	str	r4, [sp, #0]
    f4b6:	462b      	mov	r3, r5
    f4b8:	464a      	mov	r2, r9
    f4ba:	4651      	mov	r1, sl
    f4bc:	4638      	mov	r0, r7
    f4be:	f006 ffb7 	bl	16430 <isr_rx_scan>
    f4c2:	e7b2      	b.n	f42a <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    f4c4:	4642      	mov	r2, r8
    f4c6:	4621      	mov	r1, r4
    f4c8:	4630      	mov	r0, r6
    f4ca:	f004 fabb 	bl	13a44 <isr_rx_conn>
    f4ce:	e08c      	b.n	f5ea <isr+0x422>
    f4d0:	20000e8c 	.word	0x20000e8c
		LL_ASSERT(0);
    f4d4:	4040      	eors	r0, r0
    f4d6:	f380 8811 	msr	BASEPRI, r0
    f4da:	f04f 0004 	mov.w	r0, #4
    f4de:	df02      	svc	2
	switch (_radio.role) {
    f4e0:	4bb3      	ldr	r3, [pc, #716]	; (f7b0 <isr+0x5e8>)
    f4e2:	7bdb      	ldrb	r3, [r3, #15]
    f4e4:	b2db      	uxtb	r3, r3
    f4e6:	2b04      	cmp	r3, #4
    f4e8:	f200 82b2 	bhi.w	fa50 <isr+0x888>
    f4ec:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4f0:	000502a0 	.word	0x000502a0
    f4f4:	00b5006f 	.word	0x00b5006f
    f4f8:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    f4fa:	4bad      	ldr	r3, [pc, #692]	; (f7b0 <isr+0x5e8>)
    f4fc:	7c1b      	ldrb	r3, [r3, #16]
    f4fe:	2b03      	cmp	r3, #3
    f500:	d00f      	beq.n	f522 <isr+0x35a>
		radio_filter_disable();
    f502:	f7ff fc1f 	bl	ed44 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    f506:	4aaa      	ldr	r2, [pc, #680]	; (f7b0 <isr+0x5e8>)
    f508:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    f50c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f510:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    f514:	3320      	adds	r3, #32
    f516:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    f518:	7c12      	ldrb	r2, [r2, #16]
    f51a:	2a03      	cmp	r2, #3
    f51c:	d00f      	beq.n	f53e <isr+0x376>
	u32_t dont_close = 0;
    f51e:	2300      	movs	r3, #0
    f520:	e060      	b.n	f5e4 <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
    f522:	4ba3      	ldr	r3, [pc, #652]	; (f7b0 <isr+0x5e8>)
    f524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    f528:	f013 0f0e 	tst.w	r3, #14
    f52c:	d0e9      	beq.n	f502 <isr+0x33a>
		adv_setup();
    f52e:	f002 fca5 	bl	11e7c <adv_setup>
		radio_tx_enable();
    f532:	f7ff fb49 	bl	ebc8 <radio_tx_enable>
		radio_tmr_end_capture();
    f536:	f7ff fd0d 	bl	ef54 <radio_tmr_end_capture>
		dont_close = 1;
    f53a:	2301      	movs	r3, #1
    f53c:	e052      	b.n	f5e4 <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    f53e:	79db      	ldrb	r3, [r3, #7]
    f540:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    f544:	2b01      	cmp	r3, #1
    f546:	d040      	beq.n	f5ca <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
    f548:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    f54c:	2001      	movs	r0, #1
    f54e:	f000 fb7d 	bl	fc4c <rand_isr_get>
			random_delay %= 10;
    f552:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f556:	4a97      	ldr	r2, [pc, #604]	; (f7b4 <isr+0x5ec>)
    f558:	fba2 1203 	umull	r1, r2, r2, r3
    f55c:	08d2      	lsrs	r2, r2, #3
    f55e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f562:	0051      	lsls	r1, r2, #1
    f564:	1a5a      	subs	r2, r3, r1
    f566:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    f568:	3201      	adds	r2, #1
    f56a:	b2d2      	uxtb	r2, r2
    f56c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    f570:	b2d2      	uxtb	r2, r2
    f572:	4891      	ldr	r0, [pc, #580]	; (f7b8 <isr+0x5f0>)
    f574:	fba2 0100 	umull	r0, r1, r2, r0
    f578:	23e8      	movs	r3, #232	; 0xe8
    f57a:	fb03 1102 	mla	r1, r3, r2, r1
    f57e:	a38a      	add	r3, pc, #552	; (adr r3, f7a8 <isr+0x5e0>)
    f580:	e9d3 2300 	ldrd	r2, r3, [r3]
    f584:	f7f1 fdba 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
    f588:	f640 63a2 	movw	r3, #3746	; 0xea2
    f58c:	9306      	str	r3, [sp, #24]
    f58e:	4b8b      	ldr	r3, [pc, #556]	; (f7bc <isr+0x5f4>)
    f590:	9305      	str	r3, [sp, #20]
    f592:	2400      	movs	r4, #0
    f594:	9404      	str	r4, [sp, #16]
    f596:	9403      	str	r4, [sp, #12]
    f598:	9402      	str	r4, [sp, #8]
    f59a:	9401      	str	r4, [sp, #4]
    f59c:	9400      	str	r4, [sp, #0]
    f59e:	b283      	uxth	r3, r0
    f5a0:	2205      	movs	r2, #5
    f5a2:	4621      	mov	r1, r4
    f5a4:	4620      	mov	r0, r4
    f5a6:	f000 fe1d 	bl	101e4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f5aa:	b130      	cbz	r0, f5ba <isr+0x3f2>
    f5ac:	2802      	cmp	r0, #2
    f5ae:	d004      	beq.n	f5ba <isr+0x3f2>
    f5b0:	4b7f      	ldr	r3, [pc, #508]	; (f7b0 <isr+0x5e8>)
    f5b2:	7b9b      	ldrb	r3, [r3, #14]
    f5b4:	b2db      	uxtb	r3, r3
    f5b6:	2b05      	cmp	r3, #5
    f5b8:	d101      	bne.n	f5be <isr+0x3f6>
	u32_t dont_close = 0;
    f5ba:	2300      	movs	r3, #0
    f5bc:	e012      	b.n	f5e4 <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f5be:	4040      	eors	r0, r0
    f5c0:	f380 8811 	msr	BASEPRI, r0
    f5c4:	f04f 0004 	mov.w	r0, #4
    f5c8:	df02      	svc	2
	u32_t dont_close = 0;
    f5ca:	2300      	movs	r3, #0
    f5cc:	e00a      	b.n	f5e4 <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
    f5ce:	4b78      	ldr	r3, [pc, #480]	; (f7b0 <isr+0x5e8>)
    f5d0:	7c1b      	ldrb	r3, [r3, #16]
    f5d2:	2b03      	cmp	r3, #3
    f5d4:	d00c      	beq.n	f5f0 <isr+0x428>
		radio_filter_disable();
    f5d6:	f7ff fbb5 	bl	ed44 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f5da:	4b75      	ldr	r3, [pc, #468]	; (f7b0 <isr+0x5e8>)
    f5dc:	7c1b      	ldrb	r3, [r3, #16]
    f5de:	2b05      	cmp	r3, #5
    f5e0:	d031      	beq.n	f646 <isr+0x47e>
	u32_t dont_close = 0;
    f5e2:	2300      	movs	r3, #0
	if (dont_close) {
    f5e4:	2b00      	cmp	r3, #0
    f5e6:	f000 8249 	beq.w	fa7c <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    f5ea:	b00a      	add	sp, #40	; 0x28
    f5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
    f5f0:	2096      	movs	r0, #150	; 0x96
    f5f2:	f7ff fbf7 	bl	ede4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f5f6:	2300      	movs	r3, #0
    f5f8:	461a      	mov	r2, r3
    f5fa:	4619      	mov	r1, r3
    f5fc:	4618      	mov	r0, r3
    f5fe:	f7ff fb47 	bl	ec90 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f602:	4b6b      	ldr	r3, [pc, #428]	; (f7b0 <isr+0x5e8>)
    f604:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f608:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f60c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f610:	3008      	adds	r0, #8
    f612:	f7ff fabb 	bl	eb8c <radio_pkt_rx_set>
		radio_rssi_measure();
    f616:	f7ff fb4b 	bl	ecb0 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f61a:	f009 fe33 	bl	19284 <ctrl_rl_enabled>
    f61e:	b940      	cbnz	r0, f632 <isr+0x46a>
		_radio.state = STATE_RX;
    f620:	2401      	movs	r4, #1
    f622:	4b63      	ldr	r3, [pc, #396]	; (f7b0 <isr+0x5e8>)
    f624:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
    f626:	f7ff fac9 	bl	ebbc <radio_rx_enable>
		radio_tmr_end_capture();
    f62a:	f7ff fc93 	bl	ef54 <radio_tmr_end_capture>
		dont_close = 1;
    f62e:	4623      	mov	r3, r4
    f630:	e7d8      	b.n	f5e4 <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
    f632:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f636:	f009 fba1 	bl	18d7c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f63a:	4601      	mov	r1, r0
    f63c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f640:	f7ff fd34 	bl	f0ac <radio_ar_configure>
    f644:	e7ec      	b.n	f620 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f646:	2400      	movs	r4, #0
    f648:	9400      	str	r4, [sp, #0]
    f64a:	4623      	mov	r3, r4
    f64c:	2204      	movs	r2, #4
    f64e:	4621      	mov	r1, r4
    f650:	4620      	mov	r0, r4
    f652:	f000 fe15 	bl	10280 <ticker_stop>
	u32_t dont_close = 0;
    f656:	4623      	mov	r3, r4
    f658:	e7c4      	b.n	f5e4 <isr+0x41c>
	if (_radio.conn_curr == 0) {
    f65a:	4b55      	ldr	r3, [pc, #340]	; (f7b0 <isr+0x5e8>)
    f65c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f660:	2800      	cmp	r0, #0
    f662:	f000 81fb 	beq.w	fa5c <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f666:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f66a:	b141      	cbz	r1, f67e <isr+0x4b6>
    f66c:	7bdb      	ldrb	r3, [r3, #15]
    f66e:	b2db      	uxtb	r3, r3
    f670:	2b03      	cmp	r3, #3
    f672:	d046      	beq.n	f702 <isr+0x53a>
    f674:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f678:	f013 0f01 	tst.w	r3, #1
    f67c:	d141      	bne.n	f702 <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
    f67e:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
    f682:	f108 0401 	add.w	r4, r8, #1
    f686:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
    f688:	4b49      	ldr	r3, [pc, #292]	; (f7b0 <isr+0x5e8>)
    f68a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
    f68e:	2b00      	cmp	r3, #0
    f690:	f000 80b8 	beq.w	f804 <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
    f694:	4b46      	ldr	r3, [pc, #280]	; (f7b0 <isr+0x5e8>)
    f696:	7bdb      	ldrb	r3, [r3, #15]
    f698:	b2db      	uxtb	r3, r3
    f69a:	2b03      	cmp	r3, #3
    f69c:	d03c      	beq.n	f718 <isr+0x550>
		} else if (reason_peer) {
    f69e:	2900      	cmp	r1, #0
    f6a0:	f000 80ad 	beq.w	f7fe <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
    f6a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f6a8:	f043 0301 	orr.w	r3, r3, #1
    f6ac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f6b0:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f6b2:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
    f6b4:	4b3e      	ldr	r3, [pc, #248]	; (f7b0 <isr+0x5e8>)
    f6b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f6ba:	2200      	movs	r2, #0
    f6bc:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f6be:	4b3c      	ldr	r3, [pc, #240]	; (f7b0 <isr+0x5e8>)
    f6c0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f6c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	f000 80d8 	beq.w	f87e <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f6ce:	429c      	cmp	r4, r3
    f6d0:	f080 80c9 	bcs.w	f866 <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f6d4:	1b1b      	subs	r3, r3, r4
    f6d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f6da:	4b35      	ldr	r3, [pc, #212]	; (f7b0 <isr+0x5e8>)
    f6dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f6e0:	2100      	movs	r1, #0
    f6e2:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f6e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f6e8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    f6ec:	2a06      	cmp	r2, #6
    f6ee:	f240 8130 	bls.w	f952 <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
    f6f2:	4a2f      	ldr	r2, [pc, #188]	; (f7b0 <isr+0x5e8>)
    f6f4:	7bd2      	ldrb	r2, [r2, #15]
    f6f6:	b2d2      	uxtb	r2, r2
    f6f8:	2a03      	cmp	r2, #3
    f6fa:	f000 80a2 	beq.w	f842 <isr+0x67a>
	force = 0;
    f6fe:	2700      	movs	r7, #0
    f700:	e0be      	b.n	f880 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
    f702:	f004 f90b 	bl	1391c <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
    f706:	4c2a      	ldr	r4, [pc, #168]	; (f7b0 <isr+0x5e8>)
    f708:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f70c:	f002 f9b2 	bl	11a74 <connection_release>
		_radio.conn_curr = NULL;
    f710:	2300      	movs	r3, #0
    f712:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f716:	e765      	b.n	f5e4 <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f718:	f7ff fc10 	bl	ef3c <radio_tmr_aa_restore>
    f71c:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
    f71e:	f7ff fc13 	bl	ef48 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f722:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
    f726:	4b22      	ldr	r3, [pc, #136]	; (f7b0 <isr+0x5e8>)
    f728:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
    f72c:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
    f730:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
    f734:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f738:	2b02      	cmp	r3, #2
    f73a:	d031      	beq.n	f7a0 <isr+0x5d8>
    f73c:	2b04      	cmp	r3, #4
    f73e:	d02c      	beq.n	f79a <isr+0x5d2>
		return 40;
    f740:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
    f742:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f744:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
    f746:	45ba      	cmp	sl, r7
    f748:	d83c      	bhi.n	f7c4 <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
    f74a:	4e1d      	ldr	r6, [pc, #116]	; (f7c0 <isr+0x5f8>)
    f74c:	a316      	add	r3, pc, #88	; (adr r3, f7a8 <isr+0x5e0>)
    f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f752:	fba0 0106 	umull	r0, r1, r0, r6
    f756:	f7f1 fcd1 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f75a:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    f75c:	eba7 000a 	sub.w	r0, r7, sl
    f760:	a311      	add	r3, pc, #68	; (adr r3, f7a8 <isr+0x5e0>)
    f762:	e9d3 2300 	ldrd	r2, r3, [r3]
    f766:	fba0 0106 	umull	r0, r1, r0, r6
    f76a:	f7f1 fcc7 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f76e:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f770:	2200      	movs	r2, #0
    f772:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f776:	4b0e      	ldr	r3, [pc, #56]	; (f7b0 <isr+0x5e8>)
    f778:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    f77c:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f77e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f782:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    f786:	b38a      	cbz	r2, f7ec <isr+0x624>
				if (pdu_data_tx->len ||
    f788:	7952      	ldrb	r2, [r2, #5]
    f78a:	b91a      	cbnz	r2, f794 <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
    f78c:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
    f790:	2a00      	cmp	r2, #0
    f792:	d08f      	beq.n	f6b4 <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
    f794:	2200      	movs	r2, #0
    f796:	855a      	strh	r2, [r3, #42]	; 0x2a
    f798:	e78c      	b.n	f6b4 <isr+0x4ec>
		return 376;
    f79a:	f44f 76bc 	mov.w	r6, #376	; 0x178
    f79e:	e7d0      	b.n	f742 <isr+0x57a>
		return 24;
    f7a0:	2618      	movs	r6, #24
    f7a2:	e7ce      	b.n	f742 <isr+0x57a>
    f7a4:	f3af 8000 	nop.w
    f7a8:	1afd498d 	.word	0x1afd498d
    f7ac:	00000007 	.word	0x00000007
    f7b0:	20000e8c 	.word	0x20000e8c
    f7b4:	cccccccd 	.word	0xcccccccd
    f7b8:	d4a51000 	.word	0xd4a51000
    f7bc:	000111c5 	.word	0x000111c5
    f7c0:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
    f7c4:	4faa      	ldr	r7, [pc, #680]	; (fa70 <isr+0x8a8>)
    f7c6:	a3a8      	add	r3, pc, #672	; (adr r3, fa68 <isr+0x8a0>)
    f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7cc:	fbaa 0107 	umull	r0, r1, sl, r7
    f7d0:	f7f1 fc94 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f7d4:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
    f7d6:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f7da:	a3a3      	add	r3, pc, #652	; (adr r3, fa68 <isr+0x8a0>)
    f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7e0:	fba0 0107 	umull	r0, r1, r0, r7
    f7e4:	f7f1 fc8a 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f7e8:	b286      	uxth	r6, r0
    f7ea:	e7c1      	b.n	f770 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f7ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    f7f0:	f012 0f01 	tst.w	r2, #1
    f7f4:	f43f af5e 	beq.w	f6b4 <isr+0x4ec>
					_radio.conn_curr->latency;
    f7f8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
    f7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    f7fc:	e75a      	b.n	f6b4 <isr+0x4ec>
	ticks_drift_minus = 0;
    f7fe:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f800:	4635      	mov	r5, r6
    f802:	e757      	b.n	f6b4 <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
    f804:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f806:	b195      	cbz	r5, f82e <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f808:	42ac      	cmp	r4, r5
    f80a:	d204      	bcs.n	f816 <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f80c:	1b2d      	subs	r5, r5, r4
    f80e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f810:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
    f812:	462e      	mov	r6, r5
    f814:	e753      	b.n	f6be <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f816:	213e      	movs	r1, #62	; 0x3e
    f818:	f004 f880 	bl	1391c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f81c:	4c95      	ldr	r4, [pc, #596]	; (fa74 <isr+0x8ac>)
    f81e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f822:	f002 f927 	bl	11a74 <connection_release>
			_radio.conn_curr = NULL;
    f826:	2300      	movs	r3, #0
    f828:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f82c:	e6da      	b.n	f5e4 <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
    f82e:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
    f832:	b926      	cbnz	r6, f83e <isr+0x676>
				_radio.conn_curr->supervision_reload;
    f834:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
    f836:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f83a:	4635      	mov	r5, r6
    f83c:	e73f      	b.n	f6be <isr+0x4f6>
	ticks_drift_minus = 0;
    f83e:	462e      	mov	r6, r5
    f840:	e73d      	b.n	f6be <isr+0x4f6>
				if (latency_event != 0) {
    f842:	f1b8 0f00 	cmp.w	r8, #0
    f846:	f040 8086 	bne.w	f956 <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
    f84a:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f84c:	087a      	lsrs	r2, r7, #1
    f84e:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
    f850:	f017 0701 	ands.w	r7, r7, #1
    f854:	d014      	beq.n	f880 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
    f856:	4b87      	ldr	r3, [pc, #540]	; (fa74 <isr+0x8ac>)
    f858:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f85c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    f85e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f862:	66d3      	str	r3, [r2, #108]	; 0x6c
    f864:	e00c      	b.n	f880 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f866:	2108      	movs	r1, #8
    f868:	f004 f858 	bl	1391c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f86c:	4c81      	ldr	r4, [pc, #516]	; (fa74 <isr+0x8ac>)
    f86e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f872:	f002 f8ff 	bl	11a74 <connection_release>
			_radio.conn_curr = NULL;
    f876:	2300      	movs	r3, #0
    f878:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f87c:	e6b2      	b.n	f5e4 <isr+0x41c>
	force = 0;
    f87e:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
    f880:	4b7c      	ldr	r3, [pc, #496]	; (fa74 <isr+0x8ac>)
    f882:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f886:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    f88a:	b123      	cbz	r3, f896 <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    f88c:	429c      	cmp	r4, r3
    f88e:	d264      	bcs.n	f95a <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    f890:	1b1b      	subs	r3, r3, r4
    f892:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    f896:	4b77      	ldr	r3, [pc, #476]	; (fa74 <isr+0x8ac>)
    f898:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f89c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f8a0:	b123      	cbz	r3, f8ac <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    f8a2:	429c      	cmp	r4, r3
    f8a4:	d265      	bcs.n	f972 <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
    f8a6:	1b1b      	subs	r3, r3, r4
    f8a8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    f8ac:	4b71      	ldr	r3, [pc, #452]	; (fa74 <isr+0x8ac>)
    f8ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f8b2:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    f8b6:	b12b      	cbz	r3, f8c4 <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    f8b8:	429c      	cmp	r4, r3
    f8ba:	f080 8090 	bcs.w	f9de <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
    f8be:	1b1b      	subs	r3, r3, r4
    f8c0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f8c4:	4b6b      	ldr	r3, [pc, #428]	; (fa74 <isr+0x8ac>)
    f8c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f8ca:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
    f8ce:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
    f8d2:	4299      	cmp	r1, r3
    f8d4:	d006      	beq.n	f8e4 <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    f8d6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    f8da:	3b01      	subs	r3, #1
    f8dc:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f8de:	2b01      	cmp	r3, #1
    f8e0:	f240 809b 	bls.w	fa1a <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    f8e4:	b937      	cbnz	r7, f8f4 <isr+0x72c>
    f8e6:	4b63      	ldr	r3, [pc, #396]	; (fa74 <isr+0x8ac>)
    f8e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f8ee:	4598      	cmp	r8, r3
    f8f0:	f000 8096 	beq.w	fa20 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
    f8f4:	4b5f      	ldr	r3, [pc, #380]	; (fa74 <isr+0x8ac>)
    f8f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f8fc:	3301      	adds	r3, #1
    f8fe:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    f900:	b925      	cbnz	r5, f90c <isr+0x744>
    f902:	b91e      	cbnz	r6, f90c <isr+0x744>
    f904:	b913      	cbnz	r3, f90c <isr+0x744>
	    (lazy != 0) || (force != 0)) {
    f906:	2f00      	cmp	r7, #0
    f908:	f000 80aa 	beq.w	fa60 <isr+0x898>
				    _radio.conn_curr->handle;
    f90c:	4a59      	ldr	r2, [pc, #356]	; (fa74 <isr+0x8ac>)
    f90e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f912:	f892 4020 	ldrb.w	r4, [r2, #32]
    f916:	3407      	adds	r4, #7
    f918:	b2e4      	uxtb	r4, r4
		ticker_status =
    f91a:	9406      	str	r4, [sp, #24]
    f91c:	4a56      	ldr	r2, [pc, #344]	; (fa78 <isr+0x8b0>)
    f91e:	9205      	str	r2, [sp, #20]
    f920:	9704      	str	r7, [sp, #16]
    f922:	9303      	str	r3, [sp, #12]
    f924:	2000      	movs	r0, #0
    f926:	9002      	str	r0, [sp, #8]
    f928:	9001      	str	r0, [sp, #4]
    f92a:	9600      	str	r6, [sp, #0]
    f92c:	462b      	mov	r3, r5
    f92e:	4622      	mov	r2, r4
    f930:	4601      	mov	r1, r0
    f932:	f000 fc57 	bl	101e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f936:	4603      	mov	r3, r0
    f938:	2800      	cmp	r0, #0
    f93a:	f43f ae53 	beq.w	f5e4 <isr+0x41c>
    f93e:	2802      	cmp	r0, #2
    f940:	f000 8090 	beq.w	fa64 <isr+0x89c>
    f944:	4b4b      	ldr	r3, [pc, #300]	; (fa74 <isr+0x8ac>)
    f946:	7b9b      	ldrb	r3, [r3, #14]
    f948:	b2db      	uxtb	r3, r3
    f94a:	429c      	cmp	r4, r3
    f94c:	d16a      	bne.n	fa24 <isr+0x85c>
	u32_t dont_close = 0;
    f94e:	2300      	movs	r3, #0
    f950:	e648      	b.n	f5e4 <isr+0x41c>
				force = 1;
    f952:	2701      	movs	r7, #1
    f954:	e794      	b.n	f880 <isr+0x6b8>
					force = 1;
    f956:	2701      	movs	r7, #1
    f958:	e792      	b.n	f880 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    f95a:	2122      	movs	r1, #34	; 0x22
    f95c:	f003 ffde 	bl	1391c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f960:	4c44      	ldr	r4, [pc, #272]	; (fa74 <isr+0x8ac>)
    f962:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f966:	f002 f885 	bl	11a74 <connection_release>
			_radio.conn_curr = NULL;
    f96a:	2300      	movs	r3, #0
    f96c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f970:	e638      	b.n	f5e4 <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
    f972:	2300      	movs	r3, #0
    f974:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    f978:	4b3e      	ldr	r3, [pc, #248]	; (fa74 <isr+0x8ac>)
    f97a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
    f97e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f982:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
    f984:	429a      	cmp	r2, r3
    f986:	d318      	bcc.n	f9ba <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    f988:	4b3a      	ldr	r3, [pc, #232]	; (fa74 <isr+0x8ac>)
    f98a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
    f98e:	1ad3      	subs	r3, r2, r3
    f990:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
    f992:	2b01      	cmp	r3, #1
    f994:	d91b      	bls.n	f9ce <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    f996:	4b37      	ldr	r3, [pc, #220]	; (fa74 <isr+0x8ac>)
    f998:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f99c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
    f9a4:	b1ab      	cbz	r3, f9d2 <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    f9a6:	4a33      	ldr	r2, [pc, #204]	; (fa74 <isr+0x8ac>)
    f9a8:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    f9ac:	8c12      	ldrh	r2, [r2, #32]
    f9ae:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    f9b0:	220a      	movs	r2, #10
    f9b2:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
    f9b4:	f003 ff3e 	bl	13834 <packet_rx_enqueue>
    f9b8:	e778      	b.n	f8ac <isr+0x6e4>
		return (_radio.packet_rx_count -
    f9ba:	492e      	ldr	r1, [pc, #184]	; (fa74 <isr+0x8ac>)
    f9bc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
    f9c0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
    f9c4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
    f9c6:	fa52 f383 	uxtab	r3, r2, r3
    f9ca:	b2db      	uxtb	r3, r3
    f9cc:	e7e1      	b.n	f992 <isr+0x7ca>
		return 0;
    f9ce:	2300      	movs	r3, #0
    f9d0:	e7e8      	b.n	f9a4 <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
    f9d2:	4040      	eors	r0, r0
    f9d4:	f380 8811 	msr	BASEPRI, r0
    f9d8:	f04f 0004 	mov.w	r0, #4
    f9dc:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
    f9de:	2300      	movs	r3, #0
    f9e0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f9e4:	4b23      	ldr	r3, [pc, #140]	; (fa74 <isr+0x8ac>)
    f9e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f9ea:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    f9ee:	2a00      	cmp	r2, #0
    f9f0:	f47f af68 	bne.w	f8c4 <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
    f9f4:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
    f9f8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f9fc:	4291      	cmp	r1, r2
    f9fe:	f47f af61 	bne.w	f8c4 <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fa02:	2207      	movs	r2, #7
    fa04:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fa08:	4b1a      	ldr	r3, [pc, #104]	; (fa74 <isr+0x8ac>)
    fa0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    fa0e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fa12:	3b01      	subs	r3, #1
    fa14:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fa18:	e754      	b.n	f8c4 <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
    fa1a:	2300      	movs	r3, #0
    fa1c:	8553      	strh	r3, [r2, #42]	; 0x2a
    fa1e:	e761      	b.n	f8e4 <isr+0x71c>
	lazy = 0;
    fa20:	2300      	movs	r3, #0
    fa22:	e76d      	b.n	f900 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fa24:	4040      	eors	r0, r0
    fa26:	f380 8811 	msr	BASEPRI, r0
    fa2a:	f04f 0004 	mov.w	r0, #4
    fa2e:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fa30:	4b10      	ldr	r3, [pc, #64]	; (fa74 <isr+0x8ac>)
    fa32:	7c1b      	ldrb	r3, [r3, #16]
    fa34:	3b04      	subs	r3, #4
    fa36:	b2db      	uxtb	r3, r3
    fa38:	2b01      	cmp	r3, #1
    fa3a:	d803      	bhi.n	fa44 <isr+0x87c>
		_radio.state = STATE_NONE;
    fa3c:	2200      	movs	r2, #0
    fa3e:	4b0d      	ldr	r3, [pc, #52]	; (fa74 <isr+0x8ac>)
    fa40:	741a      	strb	r2, [r3, #16]
    fa42:	e5d2      	b.n	f5ea <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fa44:	4040      	eors	r0, r0
    fa46:	f380 8811 	msr	BASEPRI, r0
    fa4a:	f04f 0004 	mov.w	r0, #4
    fa4e:	df02      	svc	2
		LL_ASSERT(0);
    fa50:	4040      	eors	r0, r0
    fa52:	f380 8811 	msr	BASEPRI, r0
    fa56:	f04f 0004 	mov.w	r0, #4
    fa5a:	df02      	svc	2
	u32_t dont_close = 0;
    fa5c:	2300      	movs	r3, #0
    fa5e:	e5c1      	b.n	f5e4 <isr+0x41c>
    fa60:	2300      	movs	r3, #0
    fa62:	e5bf      	b.n	f5e4 <isr+0x41c>
    fa64:	2300      	movs	r3, #0
    fa66:	e5bd      	b.n	f5e4 <isr+0x41c>
    fa68:	1afd498d 	.word	0x1afd498d
    fa6c:	00000007 	.word	0x00000007
    fa70:	3b9aca00 	.word	0x3b9aca00
    fa74:	20000e8c 	.word	0x20000e8c
    fa78:	000111e5 	.word	0x000111e5
	_radio.role = ROLE_NONE;
    fa7c:	4d0e      	ldr	r5, [pc, #56]	; (fab8 <isr+0x8f0>)
    fa7e:	2400      	movs	r4, #0
    fa80:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    fa82:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    fa84:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    fa86:	f7ff fa07 	bl	ee98 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
    fa8a:	4623      	mov	r3, r4
    fa8c:	4622      	mov	r2, r4
    fa8e:	4621      	mov	r1, r4
    fa90:	4620      	mov	r0, r4
    fa92:	f001 fe29 	bl	116e8 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
    fa96:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    fa98:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
    fa9a:	685b      	ldr	r3, [r3, #4]
    fa9c:	4621      	mov	r1, r4
    fa9e:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    faa0:	2201      	movs	r2, #1
    faa2:	4611      	mov	r1, r2
    faa4:	4620      	mov	r0, r4
    faa6:	f7fe fd01 	bl	e4ac <mayfly_enable>
    faaa:	e59e      	b.n	f5ea <isr+0x422>
		LL_ASSERT(0);
    faac:	4040      	eors	r0, r0
    faae:	f380 8811 	msr	BASEPRI, r0
    fab2:	f04f 0004 	mov.w	r0, #4
    fab6:	df02      	svc	2
    fab8:	20000e8c 	.word	0x20000e8c

0000fabc <init>:
{
    fabc:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fabe:	1d1c      	adds	r4, r3, #4
    fac0:	42a2      	cmp	r2, r4
    fac2:	d90e      	bls.n	fae2 <init+0x26>
	*rng = (struct rand *)context;
    fac4:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
    fac6:	3a04      	subs	r2, #4
    fac8:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
    faca:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    facc:	2300      	movs	r3, #0
    face:	70cb      	strb	r3, [r1, #3]
    fad0:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    fad2:	4b0c      	ldr	r3, [pc, #48]	; (fb04 <init+0x48>)
    fad4:	681b      	ldr	r3, [r3, #0]
    fad6:	b153      	cbz	r3, faee <init+0x32>
    fad8:	4b0b      	ldr	r3, [pc, #44]	; (fb08 <init+0x4c>)
    fada:	681b      	ldr	r3, [r3, #0]
    fadc:	b13b      	cbz	r3, faee <init+0x32>
}
    fade:	bc10      	pop	{r4}
    fae0:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fae2:	4040      	eors	r0, r0
    fae4:	f380 8811 	msr	BASEPRI, r0
    fae8:	f04f 0004 	mov.w	r0, #4
    faec:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    faee:	4b07      	ldr	r3, [pc, #28]	; (fb0c <init+0x50>)
    faf0:	2201      	movs	r2, #1
    faf2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
    faf6:	2100      	movs	r1, #0
    faf8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    fafc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
    fb00:	601a      	str	r2, [r3, #0]
}
    fb02:	e7ec      	b.n	fade <init+0x22>
    fb04:	20000ddc 	.word	0x20000ddc
    fb08:	20000de0 	.word	0x20000de0
    fb0c:	4000d000 	.word	0x4000d000

0000fb10 <get>:
	LL_ASSERT(rng);
    fb10:	b1d0      	cbz	r0, fb48 <get+0x38>
{
    fb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb16:	4607      	mov	r7, r0
	first = rng->first;
    fb18:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
    fb1c:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
    fb1e:	45ae      	cmp	lr, r5
    fb20:	d82e      	bhi.n	fb80 <get+0x70>
		d = &rand[octets];
    fb22:	440a      	add	r2, r1
		s = &rng->rand[first];
    fb24:	eb00 060e 	add.w	r6, r0, lr
    fb28:	3604      	adds	r6, #4
		avail = last - first;
    fb2a:	eba5 040e 	sub.w	r4, r5, lr
    fb2e:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fb30:	42a1      	cmp	r1, r4
    fb32:	d20f      	bcs.n	fb54 <get+0x44>
			remaining = avail - octets;
    fb34:	b2cb      	uxtb	r3, r1
    fb36:	1ae4      	subs	r4, r4, r3
    fb38:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
    fb3c:	461c      	mov	r4, r3
		first += avail;
    fb3e:	44a6      	add	lr, r4
    fb40:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fb44:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fb46:	e00d      	b.n	fb64 <get+0x54>
	LL_ASSERT(rng);
    fb48:	4040      	eors	r0, r0
    fb4a:	f380 8811 	msr	BASEPRI, r0
    fb4e:	f04f 0004 	mov.w	r0, #4
    fb52:	df02      	svc	2
			remaining = 0;
    fb54:	f04f 0c00 	mov.w	ip, #0
    fb58:	e7f1      	b.n	fb3e <get+0x2e>
			*(--d) = *s++;
    fb5a:	7835      	ldrb	r5, [r6, #0]
    fb5c:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
    fb60:	461c      	mov	r4, r3
			*(--d) = *s++;
    fb62:	3601      	adds	r6, #1
		while (avail--) {
    fb64:	1e63      	subs	r3, r4, #1
    fb66:	b2db      	uxtb	r3, r3
    fb68:	2c00      	cmp	r4, #0
    fb6a:	d1f6      	bne.n	fb5a <get+0x4a>
		rng->first = first;
    fb6c:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
    fb70:	787b      	ldrb	r3, [r7, #1]
    fb72:	459c      	cmp	ip, r3
    fb74:	d202      	bcs.n	fb7c <get+0x6c>
		NRF_RNG->TASKS_START = 1;
    fb76:	2201      	movs	r2, #1
    fb78:	4b24      	ldr	r3, [pc, #144]	; (fc0c <get+0xfc>)
    fb7a:	601a      	str	r2, [r3, #0]
}
    fb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
    fb80:	440a      	add	r2, r1
		s = &rng->rand[first];
    fb82:	eb00 080e 	add.w	r8, r0, lr
    fb86:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
    fb8a:	7804      	ldrb	r4, [r0, #0]
    fb8c:	eba4 040e 	sub.w	r4, r4, lr
    fb90:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fb92:	42a1      	cmp	r1, r4
    fb94:	d20d      	bcs.n	fbb2 <get+0xa2>
			remaining = avail + last - octets;
    fb96:	eb05 0c04 	add.w	ip, r5, r4
    fb9a:	fa5f fc8c 	uxtb.w	ip, ip
    fb9e:	b2cc      	uxtb	r4, r1
    fba0:	ebac 0c04 	sub.w	ip, ip, r4
    fba4:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
    fba8:	44a6      	add	lr, r4
    fbaa:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fbae:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fbb0:	e00a      	b.n	fbc8 <get+0xb8>
			remaining = last;
    fbb2:	46ac      	mov	ip, r5
			first = 0;
    fbb4:	f04f 0e00 	mov.w	lr, #0
    fbb8:	e7f9      	b.n	fbae <get+0x9e>
			*(--d) = *s++;
    fbba:	f898 6000 	ldrb.w	r6, [r8]
    fbbe:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
    fbc2:	461c      	mov	r4, r3
			*(--d) = *s++;
    fbc4:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
    fbc8:	1e63      	subs	r3, r4, #1
    fbca:	b2db      	uxtb	r3, r3
    fbcc:	2c00      	cmp	r4, #0
    fbce:	d1f4      	bne.n	fbba <get+0xaa>
		if (octets && last) {
    fbd0:	b1c8      	cbz	r0, fc06 <get+0xf6>
    fbd2:	b1c5      	cbz	r5, fc06 <get+0xf6>
			s = &rng->rand[0];
    fbd4:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
    fbd6:	42a8      	cmp	r0, r5
    fbd8:	d206      	bcs.n	fbe8 <get+0xd8>
				remaining = last - octets;
    fbda:	fa5f fe80 	uxtb.w	lr, r0
    fbde:	eba5 040e 	sub.w	r4, r5, lr
    fbe2:	fa5f fc84 	uxtb.w	ip, r4
    fbe6:	e001      	b.n	fbec <get+0xdc>
				remaining = 0;
    fbe8:	46a4      	mov	ip, r4
	last = rng->last;
    fbea:	46ae      	mov	lr, r5
			octets -= last;
    fbec:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
    fbf0:	4671      	mov	r1, lr
    fbf2:	e004      	b.n	fbfe <get+0xee>
				*(--d) = *s++;
    fbf4:	7831      	ldrb	r1, [r6, #0]
    fbf6:	f802 1d01 	strb.w	r1, [r2, #-1]!
    fbfa:	3601      	adds	r6, #1
			while (last--) {
    fbfc:	4619      	mov	r1, r3
    fbfe:	1e4b      	subs	r3, r1, #1
    fc00:	b2db      	uxtb	r3, r3
    fc02:	2900      	cmp	r1, #0
    fc04:	d1f6      	bne.n	fbf4 <get+0xe4>
		rng->first = first;
    fc06:	f887 e002 	strb.w	lr, [r7, #2]
    fc0a:	e7b1      	b.n	fb70 <get+0x60>
    fc0c:	4000d000 	.word	0x4000d000

0000fc10 <rand_init>:
{
    fc10:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
    fc12:	4613      	mov	r3, r2
    fc14:	460a      	mov	r2, r1
    fc16:	4601      	mov	r1, r0
    fc18:	4801      	ldr	r0, [pc, #4]	; (fc20 <rand_init+0x10>)
    fc1a:	f7ff ff4f 	bl	fabc <init>
    fc1e:	bd08      	pop	{r3, pc}
    fc20:	20000de0 	.word	0x20000de0

0000fc24 <rand_isr_init>:
{
    fc24:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
    fc26:	4613      	mov	r3, r2
    fc28:	460a      	mov	r2, r1
    fc2a:	4601      	mov	r1, r0
    fc2c:	4801      	ldr	r0, [pc, #4]	; (fc34 <rand_isr_init+0x10>)
    fc2e:	f7ff ff45 	bl	fabc <init>
    fc32:	bd08      	pop	{r3, pc}
    fc34:	20000ddc 	.word	0x20000ddc

0000fc38 <rand_get>:
{
    fc38:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
    fc3a:	460a      	mov	r2, r1
    fc3c:	4601      	mov	r1, r0
    fc3e:	4b02      	ldr	r3, [pc, #8]	; (fc48 <rand_get+0x10>)
    fc40:	6818      	ldr	r0, [r3, #0]
    fc42:	f7ff ff65 	bl	fb10 <get>
}
    fc46:	bd08      	pop	{r3, pc}
    fc48:	20000de0 	.word	0x20000de0

0000fc4c <rand_isr_get>:
{
    fc4c:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
    fc4e:	460a      	mov	r2, r1
    fc50:	4601      	mov	r1, r0
    fc52:	4b02      	ldr	r3, [pc, #8]	; (fc5c <rand_isr_get+0x10>)
    fc54:	6818      	ldr	r0, [r3, #0]
    fc56:	f7ff ff5b 	bl	fb10 <get>
}
    fc5a:	bd08      	pop	{r3, pc}
    fc5c:	20000ddc 	.word	0x20000ddc

0000fc60 <isr_rand>:

void isr_rand(void *param)
{
    fc60:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    fc62:	4b10      	ldr	r3, [pc, #64]	; (fca4 <isr_rand+0x44>)
    fc64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fc68:	b903      	cbnz	r3, fc6c <isr_rand+0xc>
    fc6a:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
    fc6c:	2101      	movs	r1, #1
    fc6e:	4b0e      	ldr	r3, [pc, #56]	; (fca8 <isr_rand+0x48>)
    fc70:	6818      	ldr	r0, [r3, #0]
    fc72:	f7ff fa79 	bl	f168 <isr>
		if (ret != -EBUSY) {
    fc76:	f110 0f10 	cmn.w	r0, #16
    fc7a:	d008      	beq.n	fc8e <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    fc7c:	f110 0f69 	cmn.w	r0, #105	; 0x69
    fc80:	bf14      	ite	ne
    fc82:	2100      	movne	r1, #0
    fc84:	2101      	moveq	r1, #1
    fc86:	4b09      	ldr	r3, [pc, #36]	; (fcac <isr_rand+0x4c>)
    fc88:	6818      	ldr	r0, [r3, #0]
    fc8a:	f7ff fa6d 	bl	f168 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    fc8e:	2200      	movs	r2, #0
    fc90:	4b04      	ldr	r3, [pc, #16]	; (fca4 <isr_rand+0x44>)
    fc92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
    fc96:	f110 0f10 	cmn.w	r0, #16
    fc9a:	d0e6      	beq.n	fc6a <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
    fc9c:	2201      	movs	r2, #1
    fc9e:	605a      	str	r2, [r3, #4]
		}
	}
}
    fca0:	e7e3      	b.n	fc6a <isr_rand+0xa>
    fca2:	bf00      	nop
    fca4:	4000d000 	.word	0x4000d000
    fca8:	20000ddc 	.word	0x20000ddc
    fcac:	20000de0 	.word	0x20000de0

0000fcb0 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    fcb0:	29ff      	cmp	r1, #255	; 0xff
    fcb2:	d012      	beq.n	fcda <ticker_by_slot_get+0x2a>
{
    fcb4:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    fcb6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    fcba:	00a3      	lsls	r3, r4, #2
    fcbc:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
    fcbe:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
    fcc0:	42aa      	cmp	r2, r5
    fcc2:	d906      	bls.n	fcd2 <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    fcc4:	8ae4      	ldrh	r4, [r4, #22]
    fcc6:	b92c      	cbnz	r4, fcd4 <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
    fcc8:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
    fcca:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
    fccc:	29ff      	cmp	r1, #255	; 0xff
    fcce:	d1f2      	bne.n	fcb6 <ticker_by_slot_get+0x6>
    fcd0:	e000      	b.n	fcd4 <ticker_by_slot_get+0x24>
			return TICKER_NULL;
    fcd2:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
    fcd4:	4608      	mov	r0, r1
    fcd6:	bc30      	pop	{r4, r5}
    fcd8:	4770      	bx	lr
    fcda:	4608      	mov	r0, r1
    fcdc:	4770      	bx	lr

0000fcde <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
    fcde:	b5f0      	push	{r4, r5, r6, r7, lr}
    fce0:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    fce2:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
    fce4:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
    fce8:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    fcea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    fcee:	d004      	beq.n	fcfa <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
    fcf0:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    fcf2:	f8dc 4000 	ldr.w	r4, [ip]
    fcf6:	4294      	cmp	r4, r2
    fcf8:	d005      	beq.n	fd06 <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
    fcfa:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
    fcfc:	6940      	ldr	r0, [r0, #20]
    fcfe:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
    fd02:	2600      	movs	r6, #0
    fd04:	e00a      	b.n	fd1c <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
    fd06:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    fd0a:	ea4f 028e 	mov.w	r2, lr, lsl #2
    fd0e:	4696      	mov	lr, r2
    fd10:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
    fd12:	5cbc      	ldrb	r4, [r7, r2]
    fd14:	e002      	b.n	fd1c <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    fd16:	68a8      	ldr	r0, [r5, #8]
    fd18:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
    fd1a:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
    fd1c:	2cff      	cmp	r4, #255	; 0xff
    fd1e:	d006      	beq.n	fd2e <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    fd20:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    fd24:	0082      	lsls	r2, r0, #2
    fd26:	18bd      	adds	r5, r7, r2
    fd28:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
    fd2a:	2800      	cmp	r0, #0
    fd2c:	d0f3      	beq.n	fd16 <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
    fd2e:	2cff      	cmp	r4, #255	; 0xff
    fd30:	d001      	beq.n	fd36 <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
    fd32:	68aa      	ldr	r2, [r5, #8]
    fd34:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
    fd36:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
    fd38:	601e      	str	r6, [r3, #0]
    fd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fd3c <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
    fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd40:	b085      	sub	sp, #20
    fd42:	4681      	mov	r9, r0
    fd44:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    fd46:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
    fd48:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    fd4c:	009b      	lsls	r3, r3, #2
    fd4e:	9303      	str	r3, [sp, #12]
    fd50:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    fd54:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    fd58:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    fd5c:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
    fd5e:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
    fd60:	23ff      	movs	r3, #255	; 0xff
    fd62:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
    fd64:	e004      	b.n	fd70 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    fd66:	4297      	cmp	r7, r2
    fd68:	d912      	bls.n	fd90 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
    fd6a:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
    fd6c:	46a0      	mov	r8, r4
		current = ticker_current->next;
    fd6e:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
    fd70:	2cff      	cmp	r4, #255	; 0xff
    fd72:	d00f      	beq.n	fd94 <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    fd74:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    fd78:	0093      	lsls	r3, r2, #2
    fd7a:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
    fd7c:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
    fd7e:	4295      	cmp	r5, r2
    fd80:	d908      	bls.n	fd94 <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
    fd82:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
    fd84:	8ac9      	ldrh	r1, [r1, #22]
    fd86:	2900      	cmp	r1, #0
    fd88:	d0ed      	beq.n	fd66 <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
    fd8a:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
    fd8c:	9401      	str	r4, [sp, #4]
    fd8e:	e7ed      	b.n	fd6c <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
    fd90:	2700      	movs	r7, #0
    fd92:	e7eb      	b.n	fd6c <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    fd94:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
    fd98:	eb05 020b 	add.w	r2, r5, fp
    fd9c:	4621      	mov	r1, r4
    fd9e:	4630      	mov	r0, r6
    fda0:	f7ff ff86 	bl	fcb0 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
    fda4:	f1bb 0f00 	cmp.w	fp, #0
    fda8:	d007      	beq.n	fdba <ticker_enqueue+0x7e>
    fdaa:	42af      	cmp	r7, r5
    fdac:	d801      	bhi.n	fdb2 <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    fdae:	28ff      	cmp	r0, #255	; 0xff
    fdb0:	d003      	beq.n	fdba <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
    fdb2:	42af      	cmp	r7, r5
    fdb4:	d918      	bls.n	fde8 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
    fdb6:	9801      	ldr	r0, [sp, #4]
    fdb8:	e016      	b.n	fde8 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
    fdba:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
    fdbe:	9b03      	ldr	r3, [sp, #12]
    fdc0:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
    fdc2:	45a0      	cmp	r8, r4
    fdc4:	d013      	beq.n	fdee <ticker_enqueue+0xb2>
			node[previous].next = id;
    fdc6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
    fdca:	ea4f 0388 	mov.w	r3, r8, lsl #2
    fdce:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fdd2:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
    fdd4:	2cff      	cmp	r4, #255	; 0xff
    fdd6:	d00f      	beq.n	fdf8 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
    fdd8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    fddc:	00a3      	lsls	r3, r4, #2
    fdde:	441e      	add	r6, r3
    fde0:	68b3      	ldr	r3, [r6, #8]
    fde2:	1b5d      	subs	r5, r3, r5
    fde4:	60b5      	str	r5, [r6, #8]
    fde6:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
    fde8:	b005      	add	sp, #20
    fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
    fdee:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fdf2:	f889 3018 	strb.w	r3, [r9, #24]
    fdf6:	e7ed      	b.n	fdd4 <ticker_enqueue+0x98>
    fdf8:	9802      	ldr	r0, [sp, #8]
    fdfa:	e7f5      	b.n	fde8 <ticker_enqueue+0xac>

0000fdfc <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    fdfc:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    fdfe:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
    fe00:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
    fe02:	463b      	mov	r3, r7
	total = 0;
    fe04:	2500      	movs	r5, #0
	ticker_current = 0;
    fe06:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
    fe08:	2bff      	cmp	r3, #255	; 0xff
    fe0a:	d00a      	beq.n	fe22 <ticker_dequeue+0x26>

		ticker_current = &node[current];
    fe0c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    fe10:	00a2      	lsls	r2, r4, #2
    fe12:	18b4      	adds	r4, r6, r2

		if (current == id) {
    fe14:	428b      	cmp	r3, r1
    fe16:	d004      	beq.n	fe22 <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
    fe18:	68a7      	ldr	r7, [r4, #8]
    fe1a:	443d      	add	r5, r7
		previous = current;
    fe1c:	461f      	mov	r7, r3
		current = ticker_current->next;
    fe1e:	5cb3      	ldrb	r3, [r6, r2]
    fe20:	e7f2      	b.n	fe08 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
    fe22:	2bff      	cmp	r3, #255	; 0xff
    fe24:	d017      	beq.n	fe56 <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
    fe26:	429f      	cmp	r7, r3
    fe28:	d012      	beq.n	fe50 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    fe2a:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    fe2c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    fe30:	00bb      	lsls	r3, r7, #2
    fe32:	7822      	ldrb	r2, [r4, #0]
    fe34:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    fe36:	7823      	ldrb	r3, [r4, #0]
    fe38:	2bff      	cmp	r3, #255	; 0xff
    fe3a:	d006      	beq.n	fe4a <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
    fe3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    fe40:	009a      	lsls	r2, r3, #2
    fe42:	4416      	add	r6, r2
    fe44:	68b3      	ldr	r3, [r6, #8]
    fe46:	4403      	add	r3, r0
    fe48:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
    fe4a:	4428      	add	r0, r5
}
    fe4c:	bcf0      	pop	{r4, r5, r6, r7}
    fe4e:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
    fe50:	7823      	ldrb	r3, [r4, #0]
    fe52:	7603      	strb	r3, [r0, #24]
    fe54:	e7e9      	b.n	fe2a <ticker_dequeue+0x2e>
		return 0;
    fe56:	2000      	movs	r0, #0
    fe58:	e7f8      	b.n	fe4c <ticker_dequeue+0x50>
	...

0000fe5c <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    fe5c:	69c3      	ldr	r3, [r0, #28]
    fe5e:	6a02      	ldr	r2, [r0, #32]
    fe60:	4413      	add	r3, r2
    fe62:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    fe64:	4a05      	ldr	r2, [pc, #20]	; (fe7c <ticker_remainder_inc+0x20>)
    fe66:	441a      	add	r2, r3
    fe68:	4905      	ldr	r1, [pc, #20]	; (fe80 <ticker_remainder_inc+0x24>)
    fe6a:	428a      	cmp	r2, r1
    fe6c:	d804      	bhi.n	fe78 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    fe6e:	4a05      	ldr	r2, [pc, #20]	; (fe84 <ticker_remainder_inc+0x28>)
    fe70:	441a      	add	r2, r3
    fe72:	6202      	str	r2, [r0, #32]
		return 1;
    fe74:	2001      	movs	r0, #1
    fe76:	4770      	bx	lr
	}
	return 0;
    fe78:	2000      	movs	r0, #0
}
    fe7a:	4770      	bx	lr
    fe7c:	ff172b5a 	.word	0xff172b5a
    fe80:	7f172b59 	.word	0x7f172b59
    fe84:	fe2e56b6 	.word	0xfe2e56b6

0000fe88 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
    fe88:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    fe8a:	6a01      	ldr	r1, [r0, #32]
    fe8c:	4a07      	ldr	r2, [pc, #28]	; (feac <ticker_remainder_dec+0x24>)
    fe8e:	440a      	add	r2, r1
    fe90:	4807      	ldr	r0, [pc, #28]	; (feb0 <ticker_remainder_dec+0x28>)
    fe92:	4282      	cmp	r2, r0
    fe94:	d908      	bls.n	fea8 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    fe96:	4a07      	ldr	r2, [pc, #28]	; (feb4 <ticker_remainder_dec+0x2c>)
    fe98:	440a      	add	r2, r1
    fe9a:	621a      	str	r2, [r3, #32]
		decrement++;
    fe9c:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    fe9e:	69d9      	ldr	r1, [r3, #28]
    fea0:	6a1a      	ldr	r2, [r3, #32]
    fea2:	1a52      	subs	r2, r2, r1
    fea4:	621a      	str	r2, [r3, #32]

	return decrement;
}
    fea6:	4770      	bx	lr
	u8_t decrement = 0;
    fea8:	2000      	movs	r0, #0
    feaa:	e7f8      	b.n	fe9e <ticker_remainder_dec+0x16>
    feac:	ff172b5a 	.word	0xff172b5a
    feb0:	7f172b59 	.word	0x7f172b59
    feb4:	01d1a94a 	.word	0x01d1a94a

0000feb8 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    feb8:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    feba:	2300      	movs	r3, #0
    febc:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
    febe:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
    fec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fec2:	b11c      	cbz	r4, fecc <ticker_job_op_cb+0x14>
    fec4:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fec6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fec8:	4610      	mov	r0, r2
    feca:	47a0      	blx	r4
    fecc:	bd10      	pop	{r4, pc}

0000fece <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    fece:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
    fed0:	4601      	mov	r1, r0
    fed2:	2001      	movs	r0, #1
    fed4:	f7fe fd40 	bl	e958 <cntr_cmp_set>
    fed8:	bd08      	pop	{r3, pc}

0000feda <ticker_instance0_cmp_set>:
{
    feda:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
    fedc:	4601      	mov	r1, r0
    fede:	2000      	movs	r0, #0
    fee0:	f7fe fd3a 	bl	e958 <cntr_cmp_set>
    fee4:	bd08      	pop	{r3, pc}
	...

0000fee8 <ticker_instance1_sched>:
{
    fee8:	b508      	push	{r3, lr}
	switch (caller_id) {
    feea:	2803      	cmp	r0, #3
    feec:	d841      	bhi.n	ff72 <ticker_instance1_sched+0x8a>
    feee:	e8df f000 	tbb	[pc, r0]
    fef2:	1002      	.short	0x1002
    fef4:	331d      	.short	0x331d
		switch (callee_id) {
    fef6:	2901      	cmp	r1, #1
    fef8:	d105      	bne.n	ff06 <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    fefa:	4b21      	ldr	r3, [pc, #132]	; (ff80 <ticker_instance1_sched+0x98>)
    fefc:	2102      	movs	r1, #2
    fefe:	2000      	movs	r0, #0
    ff00:	f7fe fb12 	bl	e528 <mayfly_enqueue>
		break;
    ff04:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff06:	4040      	eors	r0, r0
    ff08:	f380 8811 	msr	BASEPRI, r0
    ff0c:	f04f 0004 	mov.w	r0, #4
    ff10:	df02      	svc	2
		switch (callee_id) {
    ff12:	2902      	cmp	r1, #2
    ff14:	d104      	bne.n	ff20 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    ff16:	4b1b      	ldr	r3, [pc, #108]	; (ff84 <ticker_instance1_sched+0x9c>)
    ff18:	4608      	mov	r0, r1
    ff1a:	f7fe fb05 	bl	e528 <mayfly_enqueue>
		break;
    ff1e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff20:	4040      	eors	r0, r0
    ff22:	f380 8811 	msr	BASEPRI, r0
    ff26:	f04f 0004 	mov.w	r0, #4
    ff2a:	df02      	svc	2
		switch (callee_id) {
    ff2c:	2901      	cmp	r1, #1
    ff2e:	d007      	beq.n	ff40 <ticker_instance1_sched+0x58>
    ff30:	2902      	cmp	r1, #2
    ff32:	d00b      	beq.n	ff4c <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
    ff34:	4040      	eors	r0, r0
    ff36:	f380 8811 	msr	BASEPRI, r0
    ff3a:	f04f 0004 	mov.w	r0, #4
    ff3e:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    ff40:	4b11      	ldr	r3, [pc, #68]	; (ff88 <ticker_instance1_sched+0xa0>)
    ff42:	2102      	movs	r1, #2
    ff44:	4608      	mov	r0, r1
    ff46:	f7fe faef 	bl	e528 <mayfly_enqueue>
		break;
    ff4a:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    ff4c:	4b0f      	ldr	r3, [pc, #60]	; (ff8c <ticker_instance1_sched+0xa4>)
    ff4e:	2102      	movs	r1, #2
    ff50:	4608      	mov	r0, r1
    ff52:	f7fe fae9 	bl	e528 <mayfly_enqueue>
		break;
    ff56:	bd08      	pop	{r3, pc}
		switch (callee_id) {
    ff58:	2902      	cmp	r1, #2
    ff5a:	d104      	bne.n	ff66 <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    ff5c:	4b0c      	ldr	r3, [pc, #48]	; (ff90 <ticker_instance1_sched+0xa8>)
    ff5e:	2003      	movs	r0, #3
    ff60:	f7fe fae2 	bl	e528 <mayfly_enqueue>
		break;
    ff64:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff66:	4040      	eors	r0, r0
    ff68:	f380 8811 	msr	BASEPRI, r0
    ff6c:	f04f 0004 	mov.w	r0, #4
    ff70:	df02      	svc	2
		LL_ASSERT(0);
    ff72:	4040      	eors	r0, r0
    ff74:	f380 8811 	msr	BASEPRI, r0
    ff78:	f04f 0004 	mov.w	r0, #4
    ff7c:	df02      	svc	2
    ff7e:	bf00      	nop
    ff80:	2000bb60 	.word	0x2000bb60
    ff84:	2000bb70 	.word	0x2000bb70
    ff88:	2000bb80 	.word	0x2000bb80
    ff8c:	2000bb90 	.word	0x2000bb90
    ff90:	2000bba0 	.word	0x2000bba0

0000ff94 <ticker_instance1_caller_id_get>:
	switch (user_id) {
    ff94:	1e83      	subs	r3, r0, #2
    ff96:	2b01      	cmp	r3, #1
    ff98:	d800      	bhi.n	ff9c <ticker_instance1_caller_id_get+0x8>
}
    ff9a:	4770      	bx	lr
		LL_ASSERT(0);
    ff9c:	4040      	eors	r0, r0
    ff9e:	f380 8811 	msr	BASEPRI, r0
    ffa2:	f04f 0004 	mov.w	r0, #4
    ffa6:	df02      	svc	2

0000ffa8 <ticker_instance0_sched>:
{
    ffa8:	b508      	push	{r3, lr}
	switch (caller_id) {
    ffaa:	2803      	cmp	r0, #3
    ffac:	d843      	bhi.n	10036 <__kernel_ram_size+0x36>
    ffae:	e8df f000 	tbb	[pc, r0]
    ffb2:	1002      	.short	0x1002
    ffb4:	341e      	.short	0x341e
		switch (callee_id) {
    ffb6:	2901      	cmp	r1, #1
    ffb8:	d105      	bne.n	ffc6 <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ffba:	4b22      	ldr	r3, [pc, #136]	; (10044 <__kernel_ram_size+0x44>)
    ffbc:	2100      	movs	r1, #0
    ffbe:	4608      	mov	r0, r1
    ffc0:	f7fe fab2 	bl	e528 <mayfly_enqueue>
		break;
    ffc4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ffc6:	4040      	eors	r0, r0
    ffc8:	f380 8811 	msr	BASEPRI, r0
    ffcc:	f04f 0004 	mov.w	r0, #4
    ffd0:	df02      	svc	2
		switch (callee_id) {
    ffd2:	2902      	cmp	r1, #2
    ffd4:	d105      	bne.n	ffe2 <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ffd6:	4b1c      	ldr	r3, [pc, #112]	; (10048 <__kernel_ram_size+0x48>)
    ffd8:	2101      	movs	r1, #1
    ffda:	2000      	movs	r0, #0
    ffdc:	f7fe faa4 	bl	e528 <mayfly_enqueue>
		break;
    ffe0:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ffe2:	4040      	eors	r0, r0
    ffe4:	f380 8811 	msr	BASEPRI, r0
    ffe8:	f04f 0004 	mov.w	r0, #4
    ffec:	df02      	svc	2
		switch (callee_id) {
    ffee:	2901      	cmp	r1, #1
    fff0:	d007      	beq.n	10002 <__kernel_ram_size+0x2>
    fff2:	2902      	cmp	r1, #2
    fff4:	d00b      	beq.n	1000e <__kernel_ram_size+0xe>
			LL_ASSERT(0);
    fff6:	4040      	eors	r0, r0
    fff8:	f380 8811 	msr	BASEPRI, r0
    fffc:	f04f 0004 	mov.w	r0, #4
   10000:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10002:	4b12      	ldr	r3, [pc, #72]	; (1004c <__kernel_ram_size+0x4c>)
   10004:	2100      	movs	r1, #0
   10006:	2001      	movs	r0, #1
   10008:	f7fe fa8e 	bl	e528 <mayfly_enqueue>
		break;
   1000c:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   1000e:	4b10      	ldr	r3, [pc, #64]	; (10050 <__kernel_ram_size+0x50>)
   10010:	2101      	movs	r1, #1
   10012:	4608      	mov	r0, r1
   10014:	f7fe fa88 	bl	e528 <mayfly_enqueue>
		break;
   10018:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   1001a:	2902      	cmp	r1, #2
   1001c:	d105      	bne.n	1002a <__kernel_ram_size+0x2a>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   1001e:	4b0d      	ldr	r3, [pc, #52]	; (10054 <__kernel_ram_size+0x54>)
   10020:	2101      	movs	r1, #1
   10022:	2003      	movs	r0, #3
   10024:	f7fe fa80 	bl	e528 <mayfly_enqueue>
		break;
   10028:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1002a:	4040      	eors	r0, r0
   1002c:	f380 8811 	msr	BASEPRI, r0
   10030:	f04f 0004 	mov.w	r0, #4
   10034:	df02      	svc	2
		LL_ASSERT(0);
   10036:	4040      	eors	r0, r0
   10038:	f380 8811 	msr	BASEPRI, r0
   1003c:	f04f 0004 	mov.w	r0, #4
   10040:	df02      	svc	2
   10042:	bf00      	nop
   10044:	2000bb10 	.word	0x2000bb10
   10048:	2000bb20 	.word	0x2000bb20
   1004c:	2000bb30 	.word	0x2000bb30
   10050:	2000bb40 	.word	0x2000bb40
   10054:	2000bb50 	.word	0x2000bb50

00010058 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10058:	2801      	cmp	r0, #1
   1005a:	d00a      	beq.n	10072 <ticker_instance0_caller_id_get+0x1a>
   1005c:	b138      	cbz	r0, 1006e <ticker_instance0_caller_id_get+0x16>
   1005e:	2803      	cmp	r0, #3
   10060:	d008      	beq.n	10074 <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10062:	4040      	eors	r0, r0
   10064:	f380 8811 	msr	BASEPRI, r0
   10068:	f04f 0004 	mov.w	r0, #4
   1006c:	df02      	svc	2
		return CALL_ID_WORKER;
   1006e:	2001      	movs	r0, #1
   10070:	4770      	bx	lr
		return CALL_ID_JOB;
   10072:	2002      	movs	r0, #2
}
   10074:	4770      	bx	lr
	...

00010078 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1007a:	9d05      	ldr	r5, [sp, #20]
   1007c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10080:	4606      	mov	r6, r0
   10082:	b118      	cbz	r0, 1008c <ticker_init+0x14>
   10084:	2801      	cmp	r0, #1
   10086:	d019      	beq.n	100bc <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10088:	2001      	movs	r0, #1
   1008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   1008c:	202c      	movs	r0, #44	; 0x2c
   1008e:	4f20      	ldr	r7, [pc, #128]	; (10110 <ticker_init+0x98>)
   10090:	fb00 7006 	mla	r0, r0, r6, r7
   10094:	4f1f      	ldr	r7, [pc, #124]	; (10114 <ticker_init+0x9c>)
   10096:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10098:	4f1f      	ldr	r7, [pc, #124]	; (10118 <ticker_init+0xa0>)
   1009a:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   1009c:	4f1f      	ldr	r7, [pc, #124]	; (1011c <ticker_init+0xa4>)
   1009e:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   100a0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10110 <ticker_init+0x98>
   100a4:	202c      	movs	r0, #44	; 0x2c
   100a6:	fb00 f006 	mul.w	r0, r0, r6
   100aa:	eb0e 0700 	add.w	r7, lr, r0
   100ae:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   100b0:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   100b4:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   100b6:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   100b8:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   100ba:	e015      	b.n	100e8 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   100bc:	202c      	movs	r0, #44	; 0x2c
   100be:	4f14      	ldr	r7, [pc, #80]	; (10110 <ticker_init+0x98>)
   100c0:	fb00 7006 	mla	r0, r0, r6, r7
   100c4:	4f16      	ldr	r7, [pc, #88]	; (10120 <ticker_init+0xa8>)
   100c6:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   100c8:	4f16      	ldr	r7, [pc, #88]	; (10124 <ticker_init+0xac>)
   100ca:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   100cc:	4f16      	ldr	r7, [pc, #88]	; (10128 <ticker_init+0xb0>)
   100ce:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   100d0:	e7e6      	b.n	100a0 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   100d2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   100d6:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   100d8:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   100dc:	202c      	movs	r0, #44	; 0x2c
   100de:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   100e2:	1ae3      	subs	r3, r4, r3
   100e4:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   100e6:	4613      	mov	r3, r2
   100e8:	1e5a      	subs	r2, r3, #1
   100ea:	b2d2      	uxtb	r2, r2
   100ec:	2b00      	cmp	r3, #0
   100ee:	d1f0      	bne.n	100d2 <ticker_init+0x5a>
	}

	if (count_op) {
   100f0:	b964      	cbnz	r4, 1010c <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   100f2:	222c      	movs	r2, #44	; 0x2c
   100f4:	4b06      	ldr	r3, [pc, #24]	; (10110 <ticker_init+0x98>)
   100f6:	fb02 3606 	mla	r6, r2, r6, r3
   100fa:	23ff      	movs	r3, #255	; 0xff
   100fc:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   100fe:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10100:	2000      	movs	r0, #0
   10102:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10104:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10106:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10108:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   1010a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   1010c:	2001      	movs	r0, #1
}
   1010e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10110:	20000de4 	.word	0x20000de4
   10114:	00010059 	.word	0x00010059
   10118:	0000ffa9 	.word	0x0000ffa9
   1011c:	0000fedb 	.word	0x0000fedb
   10120:	0000ff95 	.word	0x0000ff95
   10124:	0000fee9 	.word	0x0000fee9
   10128:	0000fecf 	.word	0x0000fecf

0001012c <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   1012c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   1012e:	232c      	movs	r3, #44	; 0x2c
   10130:	4a04      	ldr	r2, [pc, #16]	; (10144 <ticker_trigger+0x18>)
   10132:	fb03 2000 	mla	r0, r3, r0, r2
   10136:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10138:	b11b      	cbz	r3, 10142 <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   1013a:	2201      	movs	r2, #1
   1013c:	4611      	mov	r1, r2
   1013e:	2000      	movs	r0, #0
   10140:	4798      	blx	r3
   10142:	bd08      	pop	{r3, pc}
   10144:	20000de4 	.word	0x20000de4

00010148 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1014c:	242c      	movs	r4, #44	; 0x2c
   1014e:	4d24      	ldr	r5, [pc, #144]	; (101e0 <ticker_start+0x98>)
   10150:	fb04 5400 	mla	r4, r4, r0, r5
   10154:	6866      	ldr	r6, [r4, #4]
   10156:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1015a:	f89e 4003 	ldrb.w	r4, [lr, #3]
   1015e:	1c65      	adds	r5, r4, #1
   10160:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10162:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10166:	42b5      	cmp	r5, r6
   10168:	d300      	bcc.n	1016c <ticker_start+0x24>
		last = 0;
   1016a:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   1016c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10170:	42b5      	cmp	r5, r6
   10172:	d032      	beq.n	101da <ticker_start+0x92>
   10174:	469c      	mov	ip, r3
   10176:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10178:	f8de 3004 	ldr.w	r3, [lr, #4]
   1017c:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10180:	fb08 f604 	mul.w	r6, r8, r4
   10184:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10186:	2003      	movs	r0, #3
   10188:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   1018a:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1018c:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10190:	9b06      	ldr	r3, [sp, #24]
   10192:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10194:	9b07      	ldr	r3, [sp, #28]
   10196:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10198:	9b08      	ldr	r3, [sp, #32]
   1019a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1019c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   101a0:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   101a2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   101a6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   101a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101aa:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   101ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101ae:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   101b0:	2602      	movs	r6, #2
   101b2:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   101b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   101b6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   101b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101ba:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   101bc:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   101c0:	4b07      	ldr	r3, [pc, #28]	; (101e0 <ticker_start+0x98>)
   101c2:	fb08 3307 	mla	r3, r8, r7, r3
   101c6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   101c8:	6a1b      	ldr	r3, [r3, #32]
   101ca:	4608      	mov	r0, r1
   101cc:	4798      	blx	r3
   101ce:	2200      	movs	r2, #0
   101d0:	4631      	mov	r1, r6
   101d2:	47a8      	blx	r5

	return user_op->status;
   101d4:	6a20      	ldr	r0, [r4, #32]
   101d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   101da:	2001      	movs	r0, #1
}
   101dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101e0:	20000de4 	.word	0x20000de4

000101e4 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   101e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   101e8:	242c      	movs	r4, #44	; 0x2c
   101ea:	4d24      	ldr	r5, [pc, #144]	; (1027c <ticker_update+0x98>)
   101ec:	fb04 5400 	mla	r4, r4, r0, r5
   101f0:	6866      	ldr	r6, [r4, #4]
   101f2:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   101f6:	f89e 4003 	ldrb.w	r4, [lr, #3]
   101fa:	1c65      	adds	r5, r4, #1
   101fc:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   101fe:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10202:	42b5      	cmp	r5, r6
   10204:	d300      	bcc.n	10208 <ticker_update+0x24>
		last = 0;
   10206:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10208:	f89e 6001 	ldrb.w	r6, [lr, #1]
   1020c:	42b5      	cmp	r5, r6
   1020e:	d031      	beq.n	10274 <ticker_update+0x90>
   10210:	469c      	mov	ip, r3
   10212:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10214:	f8de 3004 	ldr.w	r3, [lr, #4]
   10218:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1021c:	fb08 f604 	mul.w	r6, r8, r4
   10220:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10222:	2004      	movs	r0, #4
   10224:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10226:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10228:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1022c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10230:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10232:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10236:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10238:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1023c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   1023e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10242:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10244:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10248:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   1024a:	2602      	movs	r6, #2
   1024c:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   1024e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10250:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10254:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10256:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1025a:	4b08      	ldr	r3, [pc, #32]	; (1027c <ticker_update+0x98>)
   1025c:	fb08 3307 	mla	r3, r8, r7, r3
   10260:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10262:	6a1b      	ldr	r3, [r3, #32]
   10264:	4608      	mov	r0, r1
   10266:	4798      	blx	r3
   10268:	2200      	movs	r2, #0
   1026a:	4631      	mov	r1, r6
   1026c:	47a8      	blx	r5

	return user_op->status;
   1026e:	6a20      	ldr	r0, [r4, #32]
   10270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10274:	2001      	movs	r0, #1
}
   10276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1027a:	bf00      	nop
   1027c:	20000de4 	.word	0x20000de4

00010280 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10284:	242c      	movs	r4, #44	; 0x2c
   10286:	4d1b      	ldr	r5, [pc, #108]	; (102f4 <ticker_stop+0x74>)
   10288:	fb04 5400 	mla	r4, r4, r0, r5
   1028c:	6866      	ldr	r6, [r4, #4]
   1028e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10292:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10296:	1c6c      	adds	r4, r5, #1
   10298:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   1029a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1029e:	42b4      	cmp	r4, r6
   102a0:	d300      	bcc.n	102a4 <ticker_stop+0x24>
		last = 0;
   102a2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   102a4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   102a8:	42b4      	cmp	r4, r6
   102aa:	d020      	beq.n	102ee <ticker_stop+0x6e>
   102ac:	4698      	mov	r8, r3
   102ae:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   102b0:	f8de 3004 	ldr.w	r3, [lr, #4]
   102b4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   102b8:	fb0c f505 	mul.w	r5, ip, r5
   102bc:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   102be:	2005      	movs	r0, #5
   102c0:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   102c2:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   102c4:	2502      	movs	r5, #2
   102c6:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   102c8:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   102cc:	9b06      	ldr	r3, [sp, #24]
   102ce:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   102d0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   102d4:	4b07      	ldr	r3, [pc, #28]	; (102f4 <ticker_stop+0x74>)
   102d6:	fb0c 3307 	mla	r3, ip, r7, r3
   102da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   102dc:	6a1b      	ldr	r3, [r3, #32]
   102de:	4608      	mov	r0, r1
   102e0:	4798      	blx	r3
   102e2:	2200      	movs	r2, #0
   102e4:	4629      	mov	r1, r5
   102e6:	47a0      	blx	r4

	return user_op->status;
   102e8:	6a30      	ldr	r0, [r6, #32]
   102ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   102ee:	2001      	movs	r0, #1
}
   102f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102f4:	20000de4 	.word	0x20000de4

000102f8 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   102f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   102fc:	242c      	movs	r4, #44	; 0x2c
   102fe:	4d1f      	ldr	r5, [pc, #124]	; (1037c <ticker_next_slot_get+0x84>)
   10300:	fb04 5400 	mla	r4, r4, r0, r5
   10304:	6866      	ldr	r6, [r4, #4]
   10306:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1030a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1030e:	1c6c      	adds	r4, r5, #1
   10310:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10312:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10316:	42b4      	cmp	r4, r6
   10318:	d300      	bcc.n	1031c <ticker_next_slot_get+0x24>
		last = 0;
   1031a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1031c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10320:	42b4      	cmp	r4, r6
   10322:	d027      	beq.n	10374 <ticker_next_slot_get+0x7c>
   10324:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10326:	f8de 3004 	ldr.w	r3, [lr, #4]
   1032a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1032e:	fb09 f605 	mul.w	r6, r9, r5
   10332:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10334:	f04f 0802 	mov.w	r8, #2
   10338:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   1033c:	23ff      	movs	r3, #255	; 0xff
   1033e:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10340:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10342:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10346:	9b08      	ldr	r3, [sp, #32]
   10348:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   1034a:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   1034e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10350:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10354:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10356:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1035a:	4b08      	ldr	r3, [pc, #32]	; (1037c <ticker_next_slot_get+0x84>)
   1035c:	fb09 3300 	mla	r3, r9, r0, r3
   10360:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10362:	6a1b      	ldr	r3, [r3, #32]
   10364:	4608      	mov	r0, r1
   10366:	4798      	blx	r3
   10368:	2200      	movs	r2, #0
   1036a:	4641      	mov	r1, r8
   1036c:	47a0      	blx	r4

	return user_op->status;
   1036e:	6a28      	ldr	r0, [r5, #32]
   10370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10374:	2001      	movs	r0, #1
}
   10376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1037a:	bf00      	nop
   1037c:	20000de4 	.word	0x20000de4

00010380 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10384:	242c      	movs	r4, #44	; 0x2c
   10386:	4d1b      	ldr	r5, [pc, #108]	; (103f4 <ticker_job_idle_get+0x74>)
   10388:	fb04 5400 	mla	r4, r4, r0, r5
   1038c:	6866      	ldr	r6, [r4, #4]
   1038e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10392:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10396:	1c6c      	adds	r4, r5, #1
   10398:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   1039a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1039e:	42b4      	cmp	r4, r6
   103a0:	d300      	bcc.n	103a4 <ticker_job_idle_get+0x24>
		last = 0;
   103a2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   103a4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   103a8:	42b4      	cmp	r4, r6
   103aa:	d020      	beq.n	103ee <ticker_job_idle_get+0x6e>
   103ac:	4698      	mov	r8, r3
   103ae:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   103b0:	f8de 3004 	ldr.w	r3, [lr, #4]
   103b4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   103b8:	fb0c f505 	mul.w	r5, ip, r5
   103bc:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   103be:	2001      	movs	r0, #1
   103c0:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   103c2:	23ff      	movs	r3, #255	; 0xff
   103c4:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   103c6:	2502      	movs	r5, #2
   103c8:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   103ca:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   103cc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   103d0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   103d4:	4b07      	ldr	r3, [pc, #28]	; (103f4 <ticker_job_idle_get+0x74>)
   103d6:	fb0c 3307 	mla	r3, ip, r7, r3
   103da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   103dc:	6a1b      	ldr	r3, [r3, #32]
   103de:	4608      	mov	r0, r1
   103e0:	4798      	blx	r3
   103e2:	2200      	movs	r2, #0
   103e4:	4629      	mov	r1, r5
   103e6:	47a0      	blx	r4

	return user_op->status;
   103e8:	6a30      	ldr	r0, [r6, #32]
   103ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   103ee:	2001      	movs	r0, #1
}
   103f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103f4:	20000de4 	.word	0x20000de4

000103f8 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   103f8:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   103fa:	232c      	movs	r3, #44	; 0x2c
   103fc:	4a05      	ldr	r2, [pc, #20]	; (10414 <ticker_job_sched+0x1c>)
   103fe:	fb03 2000 	mla	r0, r3, r0, r2
   10402:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10404:	6a03      	ldr	r3, [r0, #32]
   10406:	4608      	mov	r0, r1
   10408:	4798      	blx	r3
   1040a:	2200      	movs	r2, #0
   1040c:	2102      	movs	r1, #2
   1040e:	47a0      	blx	r4
   10410:	bd10      	pop	{r4, pc}
   10412:	bf00      	nop
   10414:	20000de4 	.word	0x20000de4

00010418 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10418:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   1041a:	f7fe fa97 	bl	e94c <cntr_cnt_get>
}
   1041e:	bd08      	pop	{r3, pc}

00010420 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10420:	1a40      	subs	r0, r0, r1
}
   10422:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10426:	4770      	bx	lr

00010428 <ticker_worker>:
{
   10428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   1042c:	2301      	movs	r3, #1
   1042e:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10430:	f890 901c 	ldrb.w	r9, [r0, #28]
   10434:	f1b9 0f00 	cmp.w	r9, #0
   10438:	d147      	bne.n	104ca <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   1043a:	7e03      	ldrb	r3, [r0, #24]
   1043c:	2bff      	cmp	r3, #255	; 0xff
   1043e:	d030      	beq.n	104a2 <ticker_worker+0x7a>
   10440:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10442:	f7fe fa83 	bl	e94c <cntr_cnt_get>
   10446:	6979      	ldr	r1, [r7, #20]
   10448:	f7ff ffea 	bl	10420 <ticker_ticks_diff_get>
   1044c:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   1044e:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10450:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   10454:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   10456:	2cff      	cmp	r4, #255	; 0xff
   10458:	d027      	beq.n	104aa <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   1045a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1045e:	00a3      	lsls	r3, r4, #2
   10460:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10464:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10466:	4295      	cmp	r5, r2
   10468:	d31f      	bcc.n	104aa <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   1046a:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   1046c:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   1046e:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10472:	784b      	ldrb	r3, [r1, #1]
   10474:	788a      	ldrb	r2, [r1, #2]
   10476:	1a9b      	subs	r3, r3, r2
   10478:	b2db      	uxtb	r3, r3
   1047a:	2b01      	cmp	r3, #1
   1047c:	d1eb      	bne.n	10456 <ticker_worker+0x2e>
		ticker->ack--;
   1047e:	3a01      	subs	r2, #1
   10480:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   10482:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   10486:	f1ba 0f00 	cmp.w	sl, #0
   1048a:	d0e4      	beq.n	10456 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   1048c:	6978      	ldr	r0, [r7, #20]
   1048e:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   10490:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   10492:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   10494:	690b      	ldr	r3, [r1, #16]
   10496:	8b4a      	ldrh	r2, [r1, #26]
   10498:	6a09      	ldr	r1, [r1, #32]
   1049a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1049e:	47d0      	blx	sl
   104a0:	e7d9      	b.n	10456 <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   104a2:	2300      	movs	r3, #0
   104a4:	7743      	strb	r3, [r0, #29]
		return;
   104a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   104aa:	7aba      	ldrb	r2, [r7, #10]
   104ac:	7afb      	ldrb	r3, [r7, #11]
   104ae:	429a      	cmp	r2, r3
   104b0:	d00d      	beq.n	104ce <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   104b2:	7afb      	ldrb	r3, [r7, #11]
   104b4:	3302      	adds	r3, #2
   104b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   104ba:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   104bc:	2300      	movs	r3, #0
   104be:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   104c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104c2:	2201      	movs	r2, #1
   104c4:	2102      	movs	r1, #2
   104c6:	4610      	mov	r0, r2
   104c8:	4798      	blx	r3
   104ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   104ce:	3301      	adds	r3, #1
   104d0:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   104d2:	2b02      	cmp	r3, #2
   104d4:	d001      	beq.n	104da <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   104d6:	72fb      	strb	r3, [r7, #11]
   104d8:	e7eb      	b.n	104b2 <ticker_worker+0x8a>
			last = 0;
   104da:	464b      	mov	r3, r9
   104dc:	e7fb      	b.n	104d6 <ticker_worker+0xae>

000104de <ticks_to_expire_prep>:
{
   104de:	b570      	push	{r4, r5, r6, lr}
   104e0:	4606      	mov	r6, r0
   104e2:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   104e4:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   104e6:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   104e8:	1a51      	subs	r1, r2, r1
   104ea:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   104ee:	d10c      	bne.n	1050a <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   104f0:	4601      	mov	r1, r0
   104f2:	4610      	mov	r0, r2
   104f4:	f7ff ff94 	bl	10420 <ticker_ticks_diff_get>
   104f8:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   104fa:	42a8      	cmp	r0, r5
   104fc:	d812      	bhi.n	10524 <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   104fe:	1a28      	subs	r0, r5, r0
   10500:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   10502:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10504:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10506:	82b5      	strh	r5, [r6, #20]
   10508:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   1050a:	4611      	mov	r1, r2
   1050c:	f7ff ff88 	bl	10420 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   10510:	4284      	cmp	r4, r0
   10512:	d901      	bls.n	10518 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   10514:	1a20      	subs	r0, r4, r0
   10516:	e7f0      	b.n	104fa <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   10518:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   1051a:	fa15 f080 	uxtah	r0, r5, r0
   1051e:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   10520:	2000      	movs	r0, #0
   10522:	e7ea      	b.n	104fa <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   10524:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   10526:	2500      	movs	r5, #0
   10528:	e7ec      	b.n	10504 <ticks_to_expire_prep+0x26>

0001052a <ticker_job>:
{
   1052a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1052e:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   10530:	7f43      	ldrb	r3, [r0, #29]
   10532:	9301      	str	r3, [sp, #4]
   10534:	2b00      	cmp	r3, #0
   10536:	f040 8254 	bne.w	109e2 <ticker_job+0x4b8>
	instance->job_guard = 1;
   1053a:	2301      	movs	r3, #1
   1053c:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   1053e:	6943      	ldr	r3, [r0, #20]
   10540:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10542:	7a83      	ldrb	r3, [r0, #10]
   10544:	7ac2      	ldrb	r2, [r0, #11]
   10546:	4293      	cmp	r3, r2
   10548:	d021      	beq.n	1058e <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   1054a:	3301      	adds	r3, #1
   1054c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1054e:	2b02      	cmp	r3, #2
   10550:	d100      	bne.n	10554 <ticker_job+0x2a>
			first = 0;
   10552:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   10554:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   10556:	3302      	adds	r3, #2
   10558:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1055c:	685b      	ldr	r3, [r3, #4]
   1055e:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10562:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   10564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10568:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   1056a:	2301      	movs	r3, #1
   1056c:	9304      	str	r3, [sp, #16]
   1056e:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   10570:	7e03      	ldrb	r3, [r0, #24]
   10572:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   10574:	6803      	ldr	r3, [r0, #0]
   10576:	4619      	mov	r1, r3
	users = &instance->user[0];
   10578:	6843      	ldr	r3, [r0, #4]
   1057a:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   1057c:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   1057e:	9a01      	ldr	r2, [sp, #4]
   10580:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10582:	f04f 0bff 	mov.w	fp, #255	; 0xff
   10586:	f8cd b01c 	str.w	fp, [sp, #28]
   1058a:	468b      	mov	fp, r1
   1058c:	e0cc      	b.n	10728 <ticker_job+0x1fe>
		flag_elapsed = 0;
   1058e:	9b01      	ldr	r3, [sp, #4]
   10590:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   10592:	2300      	movs	r3, #0
   10594:	9303      	str	r3, [sp, #12]
   10596:	e7ea      	b.n	1056e <ticker_job+0x44>
				middle = 0;
   10598:	9b01      	ldr	r3, [sp, #4]
   1059a:	e01d      	b.n	105d8 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   1059c:	6872      	ldr	r2, [r6, #4]
   1059e:	bb82      	cbnz	r2, 10602 <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   105a0:	68b2      	ldr	r2, [r6, #8]
   105a2:	bb72      	cbnz	r2, 10602 <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   105a4:	68f2      	ldr	r2, [r6, #12]
   105a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   105aa:	d12a      	bne.n	10602 <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   105ac:	2101      	movs	r1, #1
   105ae:	4630      	mov	r0, r6
   105b0:	f7ff fc82 	bl	feb8 <ticker_job_op_cb>
		while (user->middle != user->last) {
   105b4:	f894 a002 	ldrb.w	sl, [r4, #2]
   105b8:	78e3      	ldrb	r3, [r4, #3]
   105ba:	459a      	cmp	sl, r3
   105bc:	f000 80b3 	beq.w	10726 <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   105c0:	f04f 092c 	mov.w	r9, #44	; 0x2c
   105c4:	fb09 f90a 	mul.w	r9, r9, sl
   105c8:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   105cc:	f10a 0301 	add.w	r3, sl, #1
   105d0:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   105d2:	7822      	ldrb	r2, [r4, #0]
   105d4:	4293      	cmp	r3, r2
   105d6:	d0df      	beq.n	10598 <ticker_job+0x6e>
			user->middle = middle;
   105d8:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   105da:	7873      	ldrb	r3, [r6, #1]
   105dc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   105e0:	009f      	lsls	r7, r3, #2
   105e2:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   105e6:	f818 2009 	ldrb.w	r2, [r8, r9]
   105ea:	2a03      	cmp	r2, #3
   105ec:	d9e2      	bls.n	105b4 <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   105ee:	786b      	ldrb	r3, [r5, #1]
   105f0:	78a9      	ldrb	r1, [r5, #2]
   105f2:	1a5b      	subs	r3, r3, r1
   105f4:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   105f6:	2a05      	cmp	r2, #5
   105f8:	d8d8      	bhi.n	105ac <ticker_job+0x82>
   105fa:	2b00      	cmp	r3, #0
   105fc:	d0d6      	beq.n	105ac <ticker_job+0x82>
			    (state == 0) ||
   105fe:	2a04      	cmp	r2, #4
   10600:	d0cc      	beq.n	1059c <ticker_job+0x72>
			if (state == 1) {
   10602:	2b01      	cmp	r3, #1
   10604:	f040 8085 	bne.w	10712 <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10608:	7871      	ldrb	r1, [r6, #1]
   1060a:	9800      	ldr	r0, [sp, #0]
   1060c:	f7ff fbf6 	bl	fdfc <ticker_dequeue>
   10610:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10612:	f818 3009 	ldrb.w	r3, [r8, r9]
   10616:	2b04      	cmp	r3, #4
   10618:	d00b      	beq.n	10632 <ticker_job+0x108>
		ticker->req = ticker->ack;
   1061a:	78ab      	ldrb	r3, [r5, #2]
   1061c:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1061e:	9b00      	ldr	r3, [sp, #0]
   10620:	7e5a      	ldrb	r2, [r3, #25]
   10622:	7873      	ldrb	r3, [r6, #1]
   10624:	429a      	cmp	r2, r3
   10626:	d06e      	beq.n	10706 <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10628:	2100      	movs	r1, #0
   1062a:	4630      	mov	r0, r6
   1062c:	f7ff fc44 	bl	feb8 <ticker_job_op_cb>
   10630:	e7c0      	b.n	105b4 <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10632:	9b00      	ldr	r3, [sp, #0]
   10634:	695b      	ldr	r3, [r3, #20]
   10636:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10638:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   1063a:	f7fe f987 	bl	e94c <cntr_cnt_get>
   1063e:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10640:	9906      	ldr	r1, [sp, #24]
   10642:	f7ff feed 	bl	10420 <ticker_ticks_diff_get>
   10646:	9b03      	ldr	r3, [sp, #12]
   10648:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   1064a:	4581      	cmp	r9, r0
   1064c:	d909      	bls.n	10662 <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   1064e:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   10652:	686b      	ldr	r3, [r5, #4]
   10654:	b37b      	cbz	r3, 106b6 <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   10656:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   10658:	b36b      	cbz	r3, 106b6 <ticker_job+0x18c>
		user_op->params.update.lazy--;
   1065a:	3b01      	subs	r3, #1
   1065c:	81b3      	strh	r3, [r6, #12]
   1065e:	46a2      	mov	sl, r4
   10660:	e011      	b.n	10686 <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10662:	eba0 0909 	sub.w	r9, r0, r9
   10666:	8aab      	ldrh	r3, [r5, #20]
   10668:	fa13 f389 	uxtah	r3, r3, r9
   1066c:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   1066e:	f04f 0900 	mov.w	r9, #0
   10672:	e7ee      	b.n	10652 <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   10674:	4628      	mov	r0, r5
   10676:	f7ff fc07 	bl	fe88 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   1067a:	4420      	add	r0, r4
   1067c:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   10680:	8b6b      	ldrh	r3, [r5, #26]
   10682:	3b01      	subs	r3, #1
   10684:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10686:	686c      	ldr	r4, [r5, #4]
   10688:	454c      	cmp	r4, r9
   1068a:	d237      	bcs.n	106fc <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   1068c:	8b6a      	ldrh	r2, [r5, #26]
   1068e:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10690:	429a      	cmp	r2, r3
   10692:	d8ef      	bhi.n	10674 <ticker_job+0x14a>
   10694:	4654      	mov	r4, sl
   10696:	e009      	b.n	106ac <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   10698:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   1069c:	4628      	mov	r0, r5
   1069e:	f7ff fbdd 	bl	fe5c <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   106a2:	4450      	add	r0, sl
   106a4:	4481      	add	r9, r0
			ticker->lazy_current++;
   106a6:	8b6b      	ldrh	r3, [r5, #26]
   106a8:	3301      	adds	r3, #1
   106aa:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   106ac:	8b6a      	ldrh	r2, [r5, #26]
   106ae:	89b3      	ldrh	r3, [r6, #12]
   106b0:	429a      	cmp	r2, r3
   106b2:	d3f1      	bcc.n	10698 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   106b4:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   106b6:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   106b8:	444b      	add	r3, r9
   106ba:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   106bc:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   106be:	8aaa      	ldrh	r2, [r5, #20]
   106c0:	4413      	add	r3, r2
   106c2:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   106c4:	9a08      	ldr	r2, [sp, #32]
   106c6:	9906      	ldr	r1, [sp, #24]
   106c8:	4628      	mov	r0, r5
   106ca:	f7ff ff08 	bl	104de <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   106ce:	8933      	ldrh	r3, [r6, #8]
   106d0:	8aea      	ldrh	r2, [r5, #22]
   106d2:	4413      	add	r3, r2
   106d4:	b29b      	uxth	r3, r3
   106d6:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   106d8:	8972      	ldrh	r2, [r6, #10]
   106da:	4293      	cmp	r3, r2
   106dc:	d910      	bls.n	10700 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   106de:	1a9b      	subs	r3, r3, r2
   106e0:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   106e2:	7bb3      	ldrb	r3, [r6, #14]
   106e4:	b103      	cbz	r3, 106e8 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   106e6:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   106e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   106ec:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   106f0:	7873      	ldrb	r3, [r6, #1]
   106f2:	9307      	str	r3, [sp, #28]
		ticker->req++;
   106f4:	786b      	ldrb	r3, [r5, #1]
   106f6:	3301      	adds	r3, #1
   106f8:	706b      	strb	r3, [r5, #1]
   106fa:	e795      	b.n	10628 <ticker_job+0xfe>
   106fc:	4654      	mov	r4, sl
   106fe:	e7d5      	b.n	106ac <ticker_job+0x182>
		ticker->ticks_slot = 0;
   10700:	2300      	movs	r3, #0
   10702:	82eb      	strh	r3, [r5, #22]
   10704:	e7ed      	b.n	106e2 <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10706:	23ff      	movs	r3, #255	; 0xff
   10708:	9900      	ldr	r1, [sp, #0]
   1070a:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   1070c:	2300      	movs	r3, #0
   1070e:	834b      	strh	r3, [r1, #26]
   10710:	e78a      	b.n	10628 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   10712:	9b00      	ldr	r3, [sp, #0]
   10714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10716:	2201      	movs	r2, #1
   10718:	2102      	movs	r1, #2
   1071a:	4608      	mov	r0, r1
   1071c:	4798      	blx	r3
				user->middle = prev;
   1071e:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   10722:	2301      	movs	r3, #1
   10724:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10726:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   10728:	1e5a      	subs	r2, r3, #1
   1072a:	b2d2      	uxtb	r2, r2
   1072c:	9202      	str	r2, [sp, #8]
   1072e:	b133      	cbz	r3, 1073e <ticker_job+0x214>
		user = &users[count_user];
   10730:	9b05      	ldr	r3, [sp, #20]
   10732:	9a02      	ldr	r2, [sp, #8]
   10734:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   10738:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1073c:	e73a      	b.n	105b4 <ticker_job+0x8a>
   1073e:	9306      	str	r3, [sp, #24]
   10740:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10744:	9b00      	ldr	r3, [sp, #0]
   10746:	7e1b      	ldrb	r3, [r3, #24]
   10748:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1074a:	429a      	cmp	r2, r3
   1074c:	d00a      	beq.n	10764 <ticker_job+0x23a>
		flag_compare_update = 1;
   1074e:	2301      	movs	r3, #1
   10750:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   10752:	9b04      	ldr	r3, [sp, #16]
   10754:	b94b      	cbnz	r3, 1076a <ticker_job+0x240>
	node = &instance->node[0];
   10756:	9a00      	ldr	r2, [sp, #0]
   10758:	6813      	ldr	r3, [r2, #0]
   1075a:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   1075c:	6853      	ldr	r3, [r2, #4]
   1075e:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   10760:	7a53      	ldrb	r3, [r2, #9]
   10762:	e117      	b.n	10994 <ticker_job+0x46a>
	flag_compare_update = 0;
   10764:	9b06      	ldr	r3, [sp, #24]
   10766:	9308      	str	r3, [sp, #32]
   10768:	e7f3      	b.n	10752 <ticker_job+0x228>
	node = &instance->node[0];
   1076a:	9e00      	ldr	r6, [sp, #0]
   1076c:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   10770:	f04f 0a00 	mov.w	sl, #0
   10774:	f8cd b004 	str.w	fp, [sp, #4]
   10778:	e02f      	b.n	107da <ticker_job+0x2b0>
   1077a:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   1077e:	1a9b      	subs	r3, r3, r2
   10780:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   10782:	9b00      	ldr	r3, [sp, #0]
   10784:	7e1b      	ldrb	r3, [r3, #24]
   10786:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10788:	429a      	cmp	r2, r3
   1078a:	d0e4      	beq.n	10756 <ticker_job+0x22c>
			flag_compare_update = 1;
   1078c:	9b04      	ldr	r3, [sp, #16]
   1078e:	9308      	str	r3, [sp, #32]
   10790:	e7e1      	b.n	10756 <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10792:	23ff      	movs	r3, #255	; 0xff
   10794:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   10796:	2300      	movs	r3, #0
   10798:	8373      	strh	r3, [r6, #26]
   1079a:	e036      	b.n	1080a <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   1079c:	686c      	ldr	r4, [r5, #4]
   1079e:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   107a0:	4628      	mov	r0, r5
   107a2:	f7ff fb5b 	bl	fe5c <ticker_remainder_inc>
   107a6:	4420      	add	r0, r4
			while (count--) {
   107a8:	463b      	mov	r3, r7
   107aa:	1e5f      	subs	r7, r3, #1
   107ac:	2b00      	cmp	r3, #0
   107ae:	d1f5      	bne.n	1079c <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   107b0:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   107b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   107b4:	eb03 020a 	add.w	r2, r3, sl
   107b8:	6971      	ldr	r1, [r6, #20]
   107ba:	4628      	mov	r0, r5
   107bc:	f7ff fe8f 	bl	104de <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   107c0:	8b2b      	ldrh	r3, [r5, #24]
   107c2:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   107c4:	2300      	movs	r3, #0
   107c6:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   107c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   107cc:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   107d0:	786b      	ldrb	r3, [r5, #1]
   107d2:	3301      	adds	r3, #1
   107d4:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   107d6:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   107da:	f896 8018 	ldrb.w	r8, [r6, #24]
   107de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   107e2:	d026      	beq.n	10832 <ticker_job+0x308>
		ticker = &node[id_expired];
   107e4:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   107e8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   107ec:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   107f0:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   107f2:	9a03      	ldr	r2, [sp, #12]
   107f4:	4293      	cmp	r3, r2
   107f6:	d8c0      	bhi.n	1077a <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   107f8:	9a03      	ldr	r2, [sp, #12]
   107fa:	1ad2      	subs	r2, r2, r3
   107fc:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   107fe:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10800:	8b72      	ldrh	r2, [r6, #26]
   10802:	4293      	cmp	r3, r2
   10804:	d2c5      	bcs.n	10792 <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   10806:	1ad3      	subs	r3, r2, r3
   10808:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   1080a:	8aeb      	ldrh	r3, [r5, #22]
   1080c:	b11b      	cbz	r3, 10816 <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   1080e:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   10812:	8aeb      	ldrh	r3, [r5, #22]
   10814:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   10816:	2300      	movs	r3, #0
   10818:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   1081a:	f819 300b 	ldrb.w	r3, [r9, fp]
   1081e:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   10820:	686b      	ldr	r3, [r5, #4]
   10822:	b11b      	cbz	r3, 1082c <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   10824:	8b2b      	ldrh	r3, [r5, #24]
   10826:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   10828:	2000      	movs	r0, #0
   1082a:	e7be      	b.n	107aa <ticker_job+0x280>
			ticker->req = ticker->ack;
   1082c:	78ab      	ldrb	r3, [r5, #2]
   1082e:	706b      	strb	r3, [r5, #1]
   10830:	e7d3      	b.n	107da <ticker_job+0x2b0>
   10832:	f8dd b004 	ldr.w	fp, [sp, #4]
   10836:	e7a4      	b.n	10782 <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   10838:	232c      	movs	r3, #44	; 0x2c
   1083a:	9a03      	ldr	r2, [sp, #12]
   1083c:	fb03 f302 	mul.w	r3, r3, r2
   10840:	9905      	ldr	r1, [sp, #20]
   10842:	4419      	add	r1, r3
   10844:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   10846:	3201      	adds	r2, #1
   10848:	b2d2      	uxtb	r2, r2
   1084a:	4611      	mov	r1, r2
   1084c:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   1084e:	9a04      	ldr	r2, [sp, #16]
   10850:	7812      	ldrb	r2, [r2, #0]
   10852:	4291      	cmp	r1, r2
   10854:	d013      	beq.n	1087e <ticker_job+0x354>
				id_insert = user_op->id;
   10856:	9a01      	ldr	r2, [sp, #4]
   10858:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   1085a:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   1085e:	0094      	lsls	r4, r2, #2
   10860:	9a02      	ldr	r2, [sp, #8]
   10862:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10864:	9a05      	ldr	r2, [sp, #20]
   10866:	5cd3      	ldrb	r3, [r2, r3]
   10868:	2b03      	cmp	r3, #3
   1086a:	d16b      	bne.n	10944 <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   1086c:	7862      	ldrb	r2, [r4, #1]
   1086e:	78a3      	ldrb	r3, [r4, #2]
   10870:	429a      	cmp	r2, r3
   10872:	d007      	beq.n	10884 <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   10874:	2101      	movs	r1, #1
   10876:	9801      	ldr	r0, [sp, #4]
   10878:	f7ff fb1e 	bl	feb8 <ticker_job_op_cb>
   1087c:	e062      	b.n	10944 <ticker_job+0x41a>
					first = 0;
   1087e:	9a06      	ldr	r2, [sp, #24]
   10880:	9203      	str	r2, [sp, #12]
   10882:	e7e8      	b.n	10856 <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   10884:	9b00      	ldr	r3, [sp, #0]
   10886:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   10888:	9801      	ldr	r0, [sp, #4]
   1088a:	68c3      	ldr	r3, [r0, #12]
   1088c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1088e:	6903      	ldr	r3, [r0, #16]
   10890:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   10892:	8a83      	ldrh	r3, [r0, #20]
   10894:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   10896:	8ac3      	ldrh	r3, [r0, #22]
   10898:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   1089a:	6983      	ldr	r3, [r0, #24]
   1089c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1089e:	69c3      	ldr	r3, [r0, #28]
   108a0:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   108a2:	6883      	ldr	r3, [r0, #8]
   108a4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   108a6:	2500      	movs	r5, #0
   108a8:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   108aa:	6842      	ldr	r2, [r0, #4]
   108ac:	4620      	mov	r0, r4
   108ae:	f7ff fe16 	bl	104de <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   108b2:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   108b4:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   108b6:	2301      	movs	r3, #1
   108b8:	70e3      	strb	r3, [r4, #3]
   108ba:	e054      	b.n	10966 <ticker_job+0x43c>
		skip = 0;
   108bc:	f04f 0a00 	mov.w	sl, #0
   108c0:	e00e      	b.n	108e0 <ticker_job+0x3b6>
				skip_collide = 0;
   108c2:	2300      	movs	r3, #0
   108c4:	e021      	b.n	1090a <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   108c6:	6865      	ldr	r5, [r4, #4]
   108c8:	2d00      	cmp	r5, #0
   108ca:	d05b      	beq.n	10984 <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   108cc:	4620      	mov	r0, r4
   108ce:	f7ff fac5 	bl	fe5c <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   108d2:	4428      	add	r0, r5
   108d4:	68a5      	ldr	r5, [r4, #8]
   108d6:	4405      	add	r5, r0
   108d8:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   108da:	8b63      	ldrh	r3, [r4, #26]
   108dc:	3301      	adds	r3, #1
   108de:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   108e0:	4639      	mov	r1, r7
   108e2:	9800      	ldr	r0, [sp, #0]
   108e4:	f7ff fa2a 	bl	fd3c <ticker_enqueue>
   108e8:	4605      	mov	r5, r0
   108ea:	4287      	cmp	r7, r0
   108ec:	d021      	beq.n	10932 <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   108ee:	2dff      	cmp	r5, #255	; 0xff
   108f0:	d0e9      	beq.n	108c6 <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   108f2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   108f6:	ea4f 0883 	mov.w	r8, r3, lsl #2
   108fa:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   108fe:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   10900:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   10902:	4293      	cmp	r3, r2
   10904:	d9dd      	bls.n	108c2 <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   10906:	1a9b      	subs	r3, r3, r2
   10908:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   1090a:	6872      	ldr	r2, [r6, #4]
   1090c:	2a00      	cmp	r2, #0
   1090e:	d0da      	beq.n	108c6 <ticker_job+0x39c>
   10910:	4553      	cmp	r3, sl
   10912:	d8d8      	bhi.n	108c6 <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   10914:	78f2      	ldrb	r2, [r6, #3]
   10916:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   10918:	429a      	cmp	r2, r3
   1091a:	d2d4      	bcs.n	108c6 <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   1091c:	4629      	mov	r1, r5
   1091e:	9800      	ldr	r0, [sp, #0]
   10920:	f7ff fa6c 	bl	fdfc <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   10924:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   10926:	78b3      	ldrb	r3, [r6, #2]
   10928:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   1092a:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   1092e:	46ab      	mov	fp, r5
   10930:	e7d6      	b.n	108e0 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   10932:	78a3      	ldrb	r3, [r4, #2]
   10934:	3301      	adds	r3, #1
   10936:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   10938:	2100      	movs	r1, #0
			if (user_op) {
   1093a:	9b01      	ldr	r3, [sp, #4]
   1093c:	b113      	cbz	r3, 10944 <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   1093e:	4618      	mov	r0, r3
   10940:	f7ff faba 	bl	feb8 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   10944:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10948:	d01e      	beq.n	10988 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   1094a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1094e:	f43f af73 	beq.w	10838 <ticker_job+0x30e>
				ticker = &node[id_insert];
   10952:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   10956:	0093      	lsls	r3, r2, #2
   10958:	9a02      	ldr	r2, [sp, #8]
   1095a:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   1095c:	465f      	mov	r7, fp
				insert_head = ticker->next;
   1095e:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   10962:	2300      	movs	r3, #0
   10964:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   10966:	9b00      	ldr	r3, [sp, #0]
   10968:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   1096c:	23ff      	movs	r3, #255	; 0xff
   1096e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   10970:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   10974:	8b23      	ldrh	r3, [r4, #24]
   10976:	459a      	cmp	sl, r3
   10978:	d9a0      	bls.n	108bc <ticker_job+0x392>
		skip = ticker->lazy_current -
   1097a:	ebaa 0a03 	sub.w	sl, sl, r3
   1097e:	fa1f fa8a 	uxth.w	sl, sl
   10982:	e7ad      	b.n	108e0 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   10984:	2101      	movs	r1, #1
   10986:	e7d8      	b.n	1093a <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   10988:	9b04      	ldr	r3, [sp, #16]
   1098a:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   1098c:	9a03      	ldr	r2, [sp, #12]
   1098e:	429a      	cmp	r2, r3
   10990:	d1db      	bne.n	1094a <ticker_job+0x420>
	while (count_user--) {
   10992:	9b07      	ldr	r3, [sp, #28]
   10994:	1e5a      	subs	r2, r3, #1
   10996:	b2d2      	uxtb	r2, r2
   10998:	9207      	str	r2, [sp, #28]
   1099a:	b153      	cbz	r3, 109b2 <ticker_job+0x488>
		user = &users[count_user];
   1099c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1099e:	9a07      	ldr	r2, [sp, #28]
   109a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   109a4:	461a      	mov	r2, r3
   109a6:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   109a8:	685b      	ldr	r3, [r3, #4]
   109aa:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   109ac:	7853      	ldrb	r3, [r2, #1]
   109ae:	9303      	str	r3, [sp, #12]
   109b0:	e7c8      	b.n	10944 <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   109b2:	9b00      	ldr	r3, [sp, #0]
   109b4:	7e1b      	ldrb	r3, [r3, #24]
   109b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109b8:	429a      	cmp	r2, r3
   109ba:	d001      	beq.n	109c0 <ticker_job+0x496>
		flag_compare_update = 1;
   109bc:	2301      	movs	r3, #1
   109be:	9308      	str	r3, [sp, #32]
	if (!pending) {
   109c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   109c2:	b18b      	cbz	r3, 109e8 <ticker_job+0x4be>
	instance->job_guard = 0;
   109c4:	2300      	movs	r3, #0
   109c6:	9a00      	ldr	r2, [sp, #0]
   109c8:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   109ca:	9b08      	ldr	r3, [sp, #32]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d13f      	bne.n	10a50 <ticker_job+0x526>
	if (instance->worker_trigger) {
   109d0:	9b00      	ldr	r3, [sp, #0]
   109d2:	7f5b      	ldrb	r3, [r3, #29]
   109d4:	b12b      	cbz	r3, 109e2 <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   109d6:	9b00      	ldr	r3, [sp, #0]
   109d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   109da:	2201      	movs	r2, #1
   109dc:	4611      	mov	r1, r2
   109de:	2002      	movs	r0, #2
   109e0:	4798      	blx	r3
}
   109e2:	b00d      	add	sp, #52	; 0x34
   109e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   109e8:	9a00      	ldr	r2, [sp, #0]
   109ea:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   109ee:	7a53      	ldrb	r3, [r2, #9]
   109f0:	e026      	b.n	10a40 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   109f2:	2300      	movs	r3, #0
   109f4:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   109f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   109f8:	b113      	cbz	r3, 10a00 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   109fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   109fc:	6a38      	ldr	r0, [r7, #32]
   109fe:	4798      	blx	r3
			first = user->first + 1;
   10a00:	7863      	ldrb	r3, [r4, #1]
   10a02:	3301      	adds	r3, #1
   10a04:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   10a06:	7822      	ldrb	r2, [r4, #0]
   10a08:	4293      	cmp	r3, r2
   10a0a:	d016      	beq.n	10a3a <ticker_job+0x510>
			user->first = first;
   10a0c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   10a0e:	7862      	ldrb	r2, [r4, #1]
   10a10:	78e3      	ldrb	r3, [r4, #3]
   10a12:	429a      	cmp	r2, r3
   10a14:	d013      	beq.n	10a3e <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10a16:	232c      	movs	r3, #44	; 0x2c
   10a18:	fb03 f302 	mul.w	r3, r3, r2
   10a1c:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   10a1e:	5ceb      	ldrb	r3, [r5, r3]
   10a20:	2b01      	cmp	r3, #1
   10a22:	d0e6      	beq.n	109f2 <ticker_job+0x4c8>
   10a24:	2b02      	cmp	r3, #2
   10a26:	d106      	bne.n	10a36 <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   10a28:	68fb      	ldr	r3, [r7, #12]
   10a2a:	68ba      	ldr	r2, [r7, #8]
   10a2c:	6879      	ldr	r1, [r7, #4]
   10a2e:	9800      	ldr	r0, [sp, #0]
   10a30:	f7ff f955 	bl	fcde <ticker_by_next_slot_get>
   10a34:	e7dd      	b.n	109f2 <ticker_job+0x4c8>
	fp_op_func = NULL;
   10a36:	2300      	movs	r3, #0
   10a38:	e7de      	b.n	109f8 <ticker_job+0x4ce>
				first = 0;
   10a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a3c:	e7e6      	b.n	10a0c <ticker_job+0x4e2>
	while (count_user--) {
   10a3e:	4633      	mov	r3, r6
   10a40:	1e5e      	subs	r6, r3, #1
   10a42:	b2f6      	uxtb	r6, r6
   10a44:	2b00      	cmp	r3, #0
   10a46:	d0bd      	beq.n	109c4 <ticker_job+0x49a>
		user = &users[count_user];
   10a48:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   10a4c:	6865      	ldr	r5, [r4, #4]
   10a4e:	e7de      	b.n	10a0e <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   10a50:	7e13      	ldrb	r3, [r2, #24]
   10a52:	2bff      	cmp	r3, #255	; 0xff
   10a54:	d02f      	beq.n	10ab6 <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   10a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a58:	2bff      	cmp	r3, #255	; 0xff
   10a5a:	d034      	beq.n	10ac6 <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   10a5c:	9800      	ldr	r0, [sp, #0]
   10a5e:	6802      	ldr	r2, [r0, #0]
   10a60:	7e03      	ldrb	r3, [r0, #24]
   10a62:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10a66:	0099      	lsls	r1, r3, #2
   10a68:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   10a6a:	6897      	ldr	r7, [r2, #8]
	i = 10;
   10a6c:	250a      	movs	r5, #10
   10a6e:	4680      	mov	r8, r0
		LL_ASSERT(i);
   10a70:	b39d      	cbz	r5, 10ada <ticker_job+0x5b0>
		i--;
   10a72:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   10a74:	f7fd ff6a 	bl	e94c <cntr_cnt_get>
   10a78:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   10a7a:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10a7e:	4621      	mov	r1, r4
   10a80:	f7ff fcce 	bl	10420 <ticker_ticks_diff_get>
   10a84:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   10a86:	4287      	cmp	r7, r0
   10a88:	bf2c      	ite	cs
   10a8a:	19e4      	addcs	r4, r4, r7
   10a8c:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   10a8e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   10a92:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   10a96:	4620      	mov	r0, r4
   10a98:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10a9a:	f7fd ff57 	bl	e94c <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10a9e:	4631      	mov	r1, r6
   10aa0:	f7ff fcbe 	bl	10420 <ticker_ticks_diff_get>
   10aa4:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   10aa8:	4631      	mov	r1, r6
   10aaa:	4620      	mov	r0, r4
   10aac:	f7ff fcb8 	bl	10420 <ticker_ticks_diff_get>
   10ab0:	4581      	cmp	r9, r0
   10ab2:	d8dd      	bhi.n	10a70 <ticker_job+0x546>
   10ab4:	e78c      	b.n	109d0 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   10ab6:	f7fd ff2f 	bl	e918 <cntr_stop>
   10aba:	2800      	cmp	r0, #0
   10abc:	d188      	bne.n	109d0 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   10abe:	2300      	movs	r3, #0
   10ac0:	9a00      	ldr	r2, [sp, #0]
   10ac2:	8353      	strh	r3, [r2, #26]
   10ac4:	e784      	b.n	109d0 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   10ac6:	f7fd ff41 	bl	e94c <cntr_cnt_get>
   10aca:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10acc:	f7fd ff14 	bl	e8f8 <cntr_start>
   10ad0:	2800      	cmp	r0, #0
   10ad2:	d1c3      	bne.n	10a5c <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   10ad4:	9b00      	ldr	r3, [sp, #0]
   10ad6:	615c      	str	r4, [r3, #20]
   10ad8:	e7c0      	b.n	10a5c <ticker_job+0x532>
		LL_ASSERT(i);
   10ada:	4040      	eors	r0, r0
   10adc:	f380 8811 	msr	BASEPRI, r0
   10ae0:	f04f 0004 	mov.w	r0, #4
   10ae4:	df02      	svc	2
	...

00010ae8 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   10ae8:	b570      	push	{r4, r5, r6, lr}
   10aea:	4606      	mov	r6, r0
   10aec:	460c      	mov	r4, r1
	while (len) {
   10aee:	b19c      	cbz	r4, 10b18 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   10af0:	4d0a      	ldr	r5, [pc, #40]	; (10b1c <bt_rand+0x34>)
   10af2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10af6:	4628      	mov	r0, r5
   10af8:	f016 fe48 	bl	2778c <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   10afc:	4631      	mov	r1, r6
   10afe:	4620      	mov	r0, r4
   10b00:	f7ff f89a 	bl	fc38 <rand_get>
   10b04:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   10b06:	4628      	mov	r0, r5
   10b08:	f016 feaa 	bl	27860 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   10b0c:	2c00      	cmp	r4, #0
   10b0e:	d0ee      	beq.n	10aee <bt_rand+0x6>
   10b10:	bf20      	wfe
  __ASM volatile ("sev");
   10b12:	bf40      	sev
  __ASM volatile ("wfe");
   10b14:	bf20      	wfe
   10b16:	e7ea      	b.n	10aee <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   10b18:	2000      	movs	r0, #0
   10b1a:	bd70      	pop	{r4, r5, r6, pc}
   10b1c:	2000d054 	.word	0x2000d054

00010b20 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   10b20:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   10b22:	2300      	movs	r3, #0
   10b24:	f7fd ff4e 	bl	e9c4 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   10b28:	2000      	movs	r0, #0
   10b2a:	bd08      	pop	{r3, pc}

00010b2c <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   10b2c:	6008      	str	r0, [r1, #0]
   10b2e:	4770      	bx	lr

00010b30 <mayfly_xtal_start>:
{
   10b30:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   10b32:	4b03      	ldr	r3, [pc, #12]	; (10b40 <mayfly_xtal_start+0x10>)
   10b34:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10b36:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   10b38:	681b      	ldr	r3, [r3, #0]
   10b3a:	2100      	movs	r1, #0
   10b3c:	4798      	blx	r3
   10b3e:	bd08      	pop	{r3, pc}
   10b40:	20000e8c 	.word	0x20000e8c

00010b44 <mayfly_xtal_stop>:
{
   10b44:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   10b46:	4b03      	ldr	r3, [pc, #12]	; (10b54 <mayfly_xtal_stop+0x10>)
   10b48:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10b4a:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   10b4c:	685b      	ldr	r3, [r3, #4]
   10b4e:	2100      	movs	r1, #0
   10b50:	4798      	blx	r3
   10b52:	bd08      	pop	{r3, pc}
   10b54:	20000e8c 	.word	0x20000e8c

00010b58 <prepare_reduced>:
	if (status == 0) {
   10b58:	b918      	cbnz	r0, 10b62 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   10b5a:	680b      	ldr	r3, [r1, #0]
   10b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b60:	600b      	str	r3, [r1, #0]
   10b62:	4770      	bx	lr

00010b64 <prepare_normal>:
	if (status == 0) {
   10b64:	b918      	cbnz	r0, 10b6e <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   10b66:	680b      	ldr	r3, [r1, #0]
   10b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10b6c:	600b      	str	r3, [r1, #0]
   10b6e:	4770      	bx	lr

00010b70 <chan_sel_remap>:
{
   10b70:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   10b72:	2405      	movs	r4, #5
	chan_next = 0;
   10b74:	2200      	movs	r2, #0
	while (byte_count--) {
   10b76:	e011      	b.n	10b9c <chan_sel_remap+0x2c>
			chan_next++;
   10b78:	3201      	adds	r2, #1
   10b7a:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   10b7c:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   10b7e:	461c      	mov	r4, r3
   10b80:	1e63      	subs	r3, r4, #1
   10b82:	b2db      	uxtb	r3, r3
   10b84:	b134      	cbz	r4, 10b94 <chan_sel_remap+0x24>
			if (bite & 0x01) {
   10b86:	f015 0f01 	tst.w	r5, #1
   10b8a:	d0f5      	beq.n	10b78 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   10b8c:	b111      	cbz	r1, 10b94 <chan_sel_remap+0x24>
				chan_index--;
   10b8e:	3901      	subs	r1, #1
   10b90:	b2c9      	uxtb	r1, r1
   10b92:	e7f1      	b.n	10b78 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   10b94:	2b07      	cmp	r3, #7
   10b96:	d907      	bls.n	10ba8 <chan_sel_remap+0x38>
		chan_map++;
   10b98:	3001      	adds	r0, #1
	while (byte_count--) {
   10b9a:	4634      	mov	r4, r6
   10b9c:	1e63      	subs	r3, r4, #1
   10b9e:	b2de      	uxtb	r6, r3
   10ba0:	b114      	cbz	r4, 10ba8 <chan_sel_remap+0x38>
		bite = *chan_map;
   10ba2:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   10ba4:	2408      	movs	r4, #8
		while (bit_count--) {
   10ba6:	e7eb      	b.n	10b80 <chan_sel_remap+0x10>
}
   10ba8:	4610      	mov	r0, r2
   10baa:	bc70      	pop	{r4, r5, r6}
   10bac:	4770      	bx	lr
	...

00010bb0 <chan_sel_1>:
{
   10bb0:	b570      	push	{r4, r5, r6, lr}
   10bb2:	4605      	mov	r5, r0
   10bb4:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10bb8:	7804      	ldrb	r4, [r0, #0]
   10bba:	fb02 1101 	mla	r1, r2, r1, r1
   10bbe:	4421      	add	r1, r4
   10bc0:	4c0f      	ldr	r4, [pc, #60]	; (10c00 <chan_sel_1+0x50>)
   10bc2:	fb84 2401 	smull	r2, r4, r4, r1
   10bc6:	1862      	adds	r2, r4, r1
   10bc8:	17cc      	asrs	r4, r1, #31
   10bca:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   10bce:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10bd2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   10bd6:	1b0c      	subs	r4, r1, r4
   10bd8:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   10bda:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10bdc:	08c2      	lsrs	r2, r0, #3
   10bde:	5c9a      	ldrb	r2, [r3, r2]
   10be0:	f004 0407 	and.w	r4, r4, #7
   10be4:	fa42 f404 	asr.w	r4, r2, r4
   10be8:	f014 0f01 	tst.w	r4, #1
   10bec:	d107      	bne.n	10bfe <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   10bee:	fbb0 f1f6 	udiv	r1, r0, r6
   10bf2:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10bf6:	b2c9      	uxtb	r1, r1
   10bf8:	4618      	mov	r0, r3
   10bfa:	f7ff ffb9 	bl	10b70 <chan_sel_remap>
}
   10bfe:	bd70      	pop	{r4, r5, r6, pc}
   10c00:	dd67c8a7 	.word	0xdd67c8a7

00010c04 <chan_rev_8>:
	o = 0;
   10c04:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   10c06:	461a      	mov	r2, r3
   10c08:	e007      	b.n	10c1a <chan_rev_8+0x16>
		o <<= 1;
   10c0a:	005b      	lsls	r3, r3, #1
   10c0c:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   10c0e:	f000 0101 	and.w	r1, r0, #1
   10c12:	430b      	orrs	r3, r1
		i >>= 1;
   10c14:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   10c16:	3201      	adds	r2, #1
   10c18:	b2d2      	uxtb	r2, r2
   10c1a:	2a07      	cmp	r2, #7
   10c1c:	d9f5      	bls.n	10c0a <chan_rev_8+0x6>
}
   10c1e:	4618      	mov	r0, r3
   10c20:	4770      	bx	lr

00010c22 <chan_perm>:
{
   10c22:	b538      	push	{r3, r4, r5, lr}
   10c24:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10c26:	0a00      	lsrs	r0, r0, #8
   10c28:	f7ff ffec 	bl	10c04 <chan_rev_8>
   10c2c:	0205      	lsls	r5, r0, #8
   10c2e:	b2e0      	uxtb	r0, r4
   10c30:	f7ff ffe8 	bl	10c04 <chan_rev_8>
   10c34:	b200      	sxth	r0, r0
   10c36:	4328      	orrs	r0, r5
}
   10c38:	b280      	uxth	r0, r0
   10c3a:	bd38      	pop	{r3, r4, r5, pc}

00010c3c <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   10c3c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   10c40:	fa11 f080 	uxtah	r0, r1, r0
}
   10c44:	b280      	uxth	r0, r0
   10c46:	4770      	bx	lr

00010c48 <chan_prn>:
{
   10c48:	b538      	push	{r3, r4, r5, lr}
   10c4a:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   10c4c:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   10c4e:	2400      	movs	r4, #0
   10c50:	e006      	b.n	10c60 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   10c52:	f7ff ffe6 	bl	10c22 <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   10c56:	4629      	mov	r1, r5
   10c58:	f7ff fff0 	bl	10c3c <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   10c5c:	3401      	adds	r4, #1
   10c5e:	b2e4      	uxtb	r4, r4
   10c60:	2c02      	cmp	r4, #2
   10c62:	d9f6      	bls.n	10c52 <chan_prn+0xa>
	prn_e ^= chan_id;
   10c64:	4068      	eors	r0, r5
}
   10c66:	b280      	uxth	r0, r0
   10c68:	bd38      	pop	{r3, r4, r5, pc}
	...

00010c6c <chan_sel_2>:
{
   10c6c:	b538      	push	{r3, r4, r5, lr}
   10c6e:	4615      	mov	r5, r2
   10c70:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   10c72:	f7ff ffe9 	bl	10c48 <chan_prn>
   10c76:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   10c78:	4a0e      	ldr	r2, [pc, #56]	; (10cb4 <chan_sel_2+0x48>)
   10c7a:	fba2 3200 	umull	r3, r2, r2, r0
   10c7e:	1a80      	subs	r0, r0, r2
   10c80:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   10c84:	0952      	lsrs	r2, r2, #5
   10c86:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   10c8a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   10c8e:	1a8a      	subs	r2, r1, r2
   10c90:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10c92:	08c3      	lsrs	r3, r0, #3
   10c94:	5ceb      	ldrb	r3, [r5, r3]
   10c96:	f000 0207 	and.w	r2, r0, #7
   10c9a:	4113      	asrs	r3, r2
   10c9c:	f013 0f01 	tst.w	r3, #1
   10ca0:	d106      	bne.n	10cb0 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   10ca2:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   10ca6:	f3c1 4107 	ubfx	r1, r1, #16, #8
   10caa:	4628      	mov	r0, r5
   10cac:	f7ff ff60 	bl	10b70 <chan_sel_remap>
}
   10cb0:	bd38      	pop	{r3, r4, r5, pc}
   10cb2:	bf00      	nop
   10cb4:	bacf914d 	.word	0xbacf914d

00010cb8 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   10cb8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   10cc0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10cc4:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   10cc6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10cca:	4770      	bx	lr

00010ccc <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   10ccc:	b538      	push	{r3, r4, r5, lr}
   10cce:	4604      	mov	r4, r0
   10cd0:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   10cd2:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   10cd6:	f013 0f80 	tst.w	r3, #128	; 0x80
   10cda:	d11f      	bne.n	10d1c <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   10cdc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   10ce0:	b1e2      	cbz	r2, 10d1c <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   10ce2:	f013 0f08 	tst.w	r3, #8
   10ce6:	d119      	bne.n	10d1c <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10ce8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   10cec:	429a      	cmp	r2, r3
   10cee:	d007      	beq.n	10d00 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   10cf0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10cf4:	b143      	cbz	r3, 10d08 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10cf6:	4629      	mov	r1, r5
   10cf8:	4620      	mov	r0, r4
   10cfa:	f7ff ffdd 	bl	10cb8 <ctrl_tx_last_enqueue>
   10cfe:	e014      	b.n	10d2a <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10d00:	681b      	ldr	r3, [r3, #0]
   10d02:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   10d06:	e7f3      	b.n	10cf0 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   10d08:	6813      	ldr	r3, [r2, #0]
   10d0a:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   10d0c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10d10:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   10d12:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10d16:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10d1a:	e006      	b.n	10d2a <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   10d1c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10d20:	b133      	cbz	r3, 10d30 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10d22:	4629      	mov	r1, r5
   10d24:	4620      	mov	r0, r4
   10d26:	f7ff ffc7 	bl	10cb8 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   10d2a:	682b      	ldr	r3, [r5, #0]
   10d2c:	b153      	cbz	r3, 10d44 <ctrl_tx_enqueue+0x78>
   10d2e:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   10d30:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10d34:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   10d36:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   10d3a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10d3e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10d42:	e7f2      	b.n	10d2a <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   10d44:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   10d48:	e7f1      	b.n	10d2e <ctrl_tx_enqueue+0x62>

00010d4a <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   10d4a:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   10d4c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   10d50:	f013 0f08 	tst.w	r3, #8
   10d54:	d010      	beq.n	10d78 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   10d56:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   10d5a:	b13b      	cbz	r3, 10d6c <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   10d5c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10d60:	681b      	ldr	r3, [r3, #0]
   10d62:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   10d64:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10d68:	6019      	str	r1, [r3, #0]
   10d6a:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   10d6c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10d70:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   10d72:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   10d76:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   10d78:	f7ff ffa8 	bl	10ccc <ctrl_tx_enqueue>
   10d7c:	bd08      	pop	{r3, pc}
	...

00010d80 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   10d80:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10d84:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   10d88:	428b      	cmp	r3, r1
   10d8a:	d001      	beq.n	10d90 <conn_update_req+0x10>
		return 1;
   10d8c:	2001      	movs	r0, #1
   10d8e:	4770      	bx	lr
{
   10d90:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   10d92:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10d96:	2b00      	cmp	r3, #0
   10d98:	db2a      	blt.n	10df0 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   10d9a:	2401      	movs	r4, #1
   10d9c:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10da0:	2200      	movs	r2, #0
   10da2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   10da6:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   10da8:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   10dac:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   10dae:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   10db2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10db4:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   10db8:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   10dbc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   10dc0:	4d26      	ldr	r5, [pc, #152]	; (10e5c <conn_update_req+0xdc>)
   10dc2:	fb85 e503 	smull	lr, r5, r5, r3
   10dc6:	17db      	asrs	r3, r3, #31
   10dc8:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10dcc:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10dd0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   10dd4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   10dd8:	b2db      	uxtb	r3, r3
   10dda:	f043 0304 	orr.w	r3, r3, #4
   10dde:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   10de2:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   10de6:	3901      	subs	r1, #1
   10de8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   10dec:	4610      	mov	r0, r2
   10dee:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   10df0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10df4:	f013 0f20 	tst.w	r3, #32
   10df8:	d101      	bne.n	10dfe <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   10dfa:	2002      	movs	r0, #2
   10dfc:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   10dfe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   10e02:	f013 0f02 	tst.w	r3, #2
   10e06:	d101      	bne.n	10e0c <conn_update_req+0x8c>
	return 2;
   10e08:	2002      	movs	r0, #2
}
   10e0a:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   10e0c:	2300      	movs	r3, #0
   10e0e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   10e12:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10e14:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   10e18:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   10e1a:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   10e1e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10e20:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   10e24:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   10e28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   10e2c:	490b      	ldr	r1, [pc, #44]	; (10e5c <conn_update_req+0xdc>)
   10e2e:	fb81 4102 	smull	r4, r1, r1, r2
   10e32:	17d2      	asrs	r2, r2, #31
   10e34:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10e38:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   10e3c:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   10e40:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   10e44:	f363 02c3 	bfi	r2, r3, #3, #1
   10e48:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   10e4c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   10e50:	3a01      	subs	r2, #1
   10e52:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   10e56:	4618      	mov	r0, r3
   10e58:	bd30      	pop	{r4, r5, pc}
   10e5a:	bf00      	nop
   10e5c:	10624dd3 	.word	0x10624dd3

00010e60 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   10e60:	4a0d      	ldr	r2, [pc, #52]	; (10e98 <rx_fc_lock+0x38>)
   10e62:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e66:	b2db      	uxtb	r3, r3
   10e68:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   10e6c:	4293      	cmp	r3, r2
   10e6e:	d000      	beq.n	10e72 <rx_fc_lock+0x12>
   10e70:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   10e72:	4a09      	ldr	r2, [pc, #36]	; (10e98 <rx_fc_lock+0x38>)
   10e74:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e78:	33b8      	adds	r3, #184	; 0xb8
   10e7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10e7e:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   10e80:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e84:	3301      	adds	r3, #1
   10e86:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   10e88:	2b03      	cmp	r3, #3
   10e8a:	d003      	beq.n	10e94 <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   10e8c:	4a02      	ldr	r2, [pc, #8]	; (10e98 <rx_fc_lock+0x38>)
   10e8e:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   10e92:	e7ed      	b.n	10e70 <rx_fc_lock+0x10>
			req = 0;
   10e94:	2300      	movs	r3, #0
   10e96:	e7f9      	b.n	10e8c <rx_fc_lock+0x2c>
   10e98:	20000e8c 	.word	0x20000e8c

00010e9c <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10e9c:	b900      	cbnz	r0, 10ea0 <ticker_success_assert+0x4>
   10e9e:	4770      	bx	lr
   10ea0:	4040      	eors	r0, r0
   10ea2:	f380 8811 	msr	BASEPRI, r0
   10ea6:	f04f 0004 	mov.w	r0, #4
   10eaa:	df02      	svc	2

00010eac <start_enc_rsp_send>:
{
   10eac:	b510      	push	{r4, lr}
   10eae:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10eb0:	b171      	cbz	r1, 10ed0 <start_enc_rsp_send+0x24>
   10eb2:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   10eb4:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10eb6:	781a      	ldrb	r2, [r3, #0]
   10eb8:	f042 0203 	orr.w	r2, r2, #3
   10ebc:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   10ebe:	2201      	movs	r2, #1
   10ec0:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   10ec2:	2206      	movs	r2, #6
   10ec4:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   10ec6:	b111      	cbz	r1, 10ece <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   10ec8:	4620      	mov	r0, r4
   10eca:	f7ff feff 	bl	10ccc <ctrl_tx_enqueue>
   10ece:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10ed0:	4806      	ldr	r0, [pc, #24]	; (10eec <start_enc_rsp_send+0x40>)
   10ed2:	f7fd fc6a 	bl	e7aa <mem_acquire>
		LL_ASSERT(node_tx);
   10ed6:	4601      	mov	r1, r0
   10ed8:	b108      	cbz	r0, 10ede <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   10eda:	1d03      	adds	r3, r0, #4
   10edc:	e7eb      	b.n	10eb6 <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   10ede:	4040      	eors	r0, r0
   10ee0:	f380 8811 	msr	BASEPRI, r0
   10ee4:	f04f 0004 	mov.w	r0, #4
   10ee8:	df02      	svc	2
   10eea:	bf00      	nop
   10eec:	20000fe4 	.word	0x20000fe4

00010ef0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10ef0:	2801      	cmp	r0, #1
   10ef2:	d005      	beq.n	10f00 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10ef4:	4b0d      	ldr	r3, [pc, #52]	; (10f2c <ticker_stop_adv_assert+0x3c>)
   10ef6:	7b1b      	ldrb	r3, [r3, #12]
   10ef8:	b2db      	uxtb	r3, r3
   10efa:	2b05      	cmp	r3, #5
   10efc:	d00f      	beq.n	10f1e <ticker_stop_adv_assert+0x2e>
   10efe:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   10f00:	4b0a      	ldr	r3, [pc, #40]	; (10f2c <ticker_stop_adv_assert+0x3c>)
   10f02:	7b9b      	ldrb	r3, [r3, #14]
   10f04:	b2db      	uxtb	r3, r3
   10f06:	2b05      	cmp	r3, #5
   10f08:	d103      	bne.n	10f12 <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   10f0a:	2200      	movs	r2, #0
   10f0c:	4b07      	ldr	r3, [pc, #28]	; (10f2c <ticker_stop_adv_assert+0x3c>)
   10f0e:	739a      	strb	r2, [r3, #14]
   10f10:	4770      	bx	lr
			LL_ASSERT(0);
   10f12:	4040      	eors	r0, r0
   10f14:	f380 8811 	msr	BASEPRI, r0
   10f18:	f04f 0004 	mov.w	r0, #4
   10f1c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10f1e:	4040      	eors	r0, r0
   10f20:	f380 8811 	msr	BASEPRI, r0
   10f24:	f04f 0004 	mov.w	r0, #4
   10f28:	df02      	svc	2
   10f2a:	bf00      	nop
   10f2c:	20000e8c 	.word	0x20000e8c

00010f30 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10f30:	2801      	cmp	r0, #1
   10f32:	d005      	beq.n	10f40 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10f34:	4b0d      	ldr	r3, [pc, #52]	; (10f6c <ticker_stop_scan_assert+0x3c>)
   10f36:	7b1b      	ldrb	r3, [r3, #12]
   10f38:	b2db      	uxtb	r3, r3
   10f3a:	2b06      	cmp	r3, #6
   10f3c:	d00f      	beq.n	10f5e <ticker_stop_scan_assert+0x2e>
   10f3e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   10f40:	4b0a      	ldr	r3, [pc, #40]	; (10f6c <ticker_stop_scan_assert+0x3c>)
   10f42:	7b9b      	ldrb	r3, [r3, #14]
   10f44:	b2db      	uxtb	r3, r3
   10f46:	2b06      	cmp	r3, #6
   10f48:	d103      	bne.n	10f52 <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   10f4a:	2200      	movs	r2, #0
   10f4c:	4b07      	ldr	r3, [pc, #28]	; (10f6c <ticker_stop_scan_assert+0x3c>)
   10f4e:	739a      	strb	r2, [r3, #14]
   10f50:	4770      	bx	lr
			LL_ASSERT(0);
   10f52:	4040      	eors	r0, r0
   10f54:	f380 8811 	msr	BASEPRI, r0
   10f58:	f04f 0004 	mov.w	r0, #4
   10f5c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10f5e:	4040      	eors	r0, r0
   10f60:	f380 8811 	msr	BASEPRI, r0
   10f64:	f04f 0004 	mov.w	r0, #4
   10f68:	df02      	svc	2
   10f6a:	bf00      	nop
   10f6c:	20000e8c 	.word	0x20000e8c

00010f70 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10f70:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   10f74:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   10f76:	1a9b      	subs	r3, r3, r2
   10f78:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f7e:	da5b      	bge.n	11038 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10f80:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10f84:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10f88:	429a      	cmp	r2, r3
   10f8a:	d13d      	bne.n	11008 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   10f8c:	4b2c      	ldr	r3, [pc, #176]	; (11040 <conn_update+0xd0>)
   10f8e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   10f92:	2b00      	cmp	r3, #0
   10f94:	d03e      	beq.n	11014 <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   10f96:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   10f98:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   10f9c:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   10fa0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10fa4:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   10fa8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   10fac:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   10fb0:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   10fb4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   10fb8:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   10fbc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   10fc0:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   10fc4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   10fc8:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   10fcc:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   10fd0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   10fd4:	f36f 0382 	bfc	r3, #2, #1
   10fd8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   10fdc:	2301      	movs	r3, #1
   10fde:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   10fe2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10fe6:	3b01      	subs	r3, #1
   10fe8:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10fec:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   10ff0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   10ff4:	429a      	cmp	r2, r3
   10ff6:	d021      	beq.n	1103c <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   10ff8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10ffc:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11000:	2b04      	cmp	r3, #4
   11002:	d015      	beq.n	11030 <conn_update+0xc0>
	return 0;
   11004:	2000      	movs	r0, #0
}
   11006:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11008:	4040      	eors	r0, r0
   1100a:	f380 8811 	msr	BASEPRI, r0
   1100e:	f04f 0004 	mov.w	r0, #4
   11012:	df02      	svc	2
		LL_ASSERT(conn->role);
   11014:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11018:	2b00      	cmp	r3, #0
   1101a:	da03      	bge.n	11024 <conn_update+0xb4>
		_radio.conn_upd = conn;
   1101c:	4b08      	ldr	r3, [pc, #32]	; (11040 <conn_update+0xd0>)
   1101e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11022:	e7b8      	b.n	10f96 <conn_update+0x26>
		LL_ASSERT(conn->role);
   11024:	4040      	eors	r0, r0
   11026:	f380 8811 	msr	BASEPRI, r0
   1102a:	f04f 0004 	mov.w	r0, #4
   1102e:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11030:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11034:	2000      	movs	r0, #0
   11036:	4770      	bx	lr
		return 1;
   11038:	2001      	movs	r0, #1
   1103a:	4770      	bx	lr
	return 0;
   1103c:	2000      	movs	r0, #0
   1103e:	4770      	bx	lr
   11040:	20000e8c 	.word	0x20000e8c

00011044 <pause_enc_rsp_send>:
{
   11044:	b510      	push	{r4, lr}
   11046:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11048:	480b      	ldr	r0, [pc, #44]	; (11078 <pause_enc_rsp_send+0x34>)
   1104a:	f7fd fbae 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   1104e:	b160      	cbz	r0, 1106a <pause_enc_rsp_send+0x26>
   11050:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11052:	7903      	ldrb	r3, [r0, #4]
   11054:	f043 0303 	orr.w	r3, r3, #3
   11058:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   1105a:	2301      	movs	r3, #1
   1105c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1105e:	230b      	movs	r3, #11
   11060:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11062:	4620      	mov	r0, r4
   11064:	f7ff fe32 	bl	10ccc <ctrl_tx_enqueue>
   11068:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1106a:	4040      	eors	r0, r0
   1106c:	f380 8811 	msr	BASEPRI, r0
   11070:	f04f 0004 	mov.w	r0, #4
   11074:	df02      	svc	2
   11076:	bf00      	nop
   11078:	20000fe4 	.word	0x20000fe4

0001107c <ping_resp_send>:
{
   1107c:	b510      	push	{r4, lr}
   1107e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11080:	480b      	ldr	r0, [pc, #44]	; (110b0 <ping_resp_send+0x34>)
   11082:	f7fd fb92 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   11086:	b160      	cbz	r0, 110a2 <ping_resp_send+0x26>
   11088:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1108a:	7903      	ldrb	r3, [r0, #4]
   1108c:	f043 0303 	orr.w	r3, r3, #3
   11090:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11092:	2301      	movs	r3, #1
   11094:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11096:	2313      	movs	r3, #19
   11098:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1109a:	4620      	mov	r0, r4
   1109c:	f7ff fe16 	bl	10ccc <ctrl_tx_enqueue>
   110a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   110a2:	4040      	eors	r0, r0
   110a4:	f380 8811 	msr	BASEPRI, r0
   110a8:	f04f 0004 	mov.w	r0, #4
   110ac:	df02      	svc	2
   110ae:	bf00      	nop
   110b0:	20000fe4 	.word	0x20000fe4

000110b4 <length_resp_send>:
{
   110b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110b6:	4604      	mov	r4, r0
   110b8:	460f      	mov	r7, r1
   110ba:	4615      	mov	r5, r2
   110bc:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   110be:	480e      	ldr	r0, [pc, #56]	; (110f8 <length_resp_send+0x44>)
   110c0:	f7fd fb73 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   110c4:	b190      	cbz	r0, 110ec <length_resp_send+0x38>
   110c6:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110c8:	7903      	ldrb	r3, [r0, #4]
   110ca:	f043 0303 	orr.w	r3, r3, #3
   110ce:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   110d0:	2309      	movs	r3, #9
   110d2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   110d4:	2315      	movs	r3, #21
   110d6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   110d8:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   110da:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   110dc:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   110de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   110e2:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   110e4:	4620      	mov	r0, r4
   110e6:	f7ff fdf1 	bl	10ccc <ctrl_tx_enqueue>
   110ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   110ec:	4040      	eors	r0, r0
   110ee:	f380 8811 	msr	BASEPRI, r0
   110f2:	f04f 0004 	mov.w	r0, #4
   110f6:	df02      	svc	2
   110f8:	20000fe4 	.word	0x20000fe4

000110fc <reject_ext_ind_send>:
{
   110fc:	b570      	push	{r4, r5, r6, lr}
   110fe:	4604      	mov	r4, r0
   11100:	460e      	mov	r6, r1
   11102:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11104:	480c      	ldr	r0, [pc, #48]	; (11138 <reject_ext_ind_send+0x3c>)
   11106:	f7fd fb50 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   1110a:	b170      	cbz	r0, 1112a <reject_ext_ind_send+0x2e>
   1110c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1110e:	7903      	ldrb	r3, [r0, #4]
   11110:	f043 0303 	orr.w	r3, r3, #3
   11114:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11116:	2303      	movs	r3, #3
   11118:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1111a:	2311      	movs	r3, #17
   1111c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   1111e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11120:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11122:	4620      	mov	r0, r4
   11124:	f7ff fdd2 	bl	10ccc <ctrl_tx_enqueue>
   11128:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   1112a:	4040      	eors	r0, r0
   1112c:	f380 8811 	msr	BASEPRI, r0
   11130:	f04f 0004 	mov.w	r0, #4
   11134:	df02      	svc	2
   11136:	bf00      	nop
   11138:	20000fe4 	.word	0x20000fe4

0001113c <phy_rsp_send>:
{
   1113c:	b510      	push	{r4, lr}
   1113e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11140:	4810      	ldr	r0, [pc, #64]	; (11184 <phy_rsp_send+0x48>)
   11142:	f7fd fb32 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   11146:	b1b0      	cbz	r0, 11176 <phy_rsp_send+0x3a>
   11148:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1114a:	7903      	ldrb	r3, [r0, #4]
   1114c:	f043 0303 	orr.w	r3, r3, #3
   11150:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11152:	2303      	movs	r3, #3
   11154:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11156:	2317      	movs	r3, #23
   11158:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   1115a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1115e:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11162:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11164:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11168:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   1116c:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   1116e:	4620      	mov	r0, r4
   11170:	f7ff fdac 	bl	10ccc <ctrl_tx_enqueue>
   11174:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11176:	4040      	eors	r0, r0
   11178:	f380 8811 	msr	BASEPRI, r0
   1117c:	f04f 0004 	mov.w	r0, #4
   11180:	df02      	svc	2
   11182:	bf00      	nop
   11184:	20000fe4 	.word	0x20000fe4

00011188 <unknown_rsp_send>:
{
   11188:	b538      	push	{r3, r4, r5, lr}
   1118a:	4604      	mov	r4, r0
   1118c:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1118e:	480c      	ldr	r0, [pc, #48]	; (111c0 <unknown_rsp_send+0x38>)
   11190:	f7fd fb0b 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   11194:	b168      	cbz	r0, 111b2 <unknown_rsp_send+0x2a>
   11196:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11198:	7903      	ldrb	r3, [r0, #4]
   1119a:	f043 0303 	orr.w	r3, r3, #3
   1119e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   111a0:	2302      	movs	r3, #2
   111a2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   111a4:	2307      	movs	r3, #7
   111a6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   111a8:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   111aa:	4620      	mov	r0, r4
   111ac:	f7ff fd8e 	bl	10ccc <ctrl_tx_enqueue>
   111b0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   111b2:	4040      	eors	r0, r0
   111b4:	f380 8811 	msr	BASEPRI, r0
   111b8:	f04f 0004 	mov.w	r0, #4
   111bc:	df02      	svc	2
   111be:	bf00      	nop
   111c0:	20000fe4 	.word	0x20000fe4

000111c4 <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   111c4:	b120      	cbz	r0, 111d0 <ticker_update_adv_assert+0xc>
   111c6:	4b06      	ldr	r3, [pc, #24]	; (111e0 <ticker_update_adv_assert+0x1c>)
   111c8:	7b9b      	ldrb	r3, [r3, #14]
   111ca:	b2db      	uxtb	r3, r3
   111cc:	2b05      	cmp	r3, #5
   111ce:	d100      	bne.n	111d2 <ticker_update_adv_assert+0xe>
   111d0:	4770      	bx	lr
   111d2:	4040      	eors	r0, r0
   111d4:	f380 8811 	msr	BASEPRI, r0
   111d8:	f04f 0004 	mov.w	r0, #4
   111dc:	df02      	svc	2
   111de:	bf00      	nop
   111e0:	20000e8c 	.word	0x20000e8c

000111e4 <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   111e4:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   111e6:	b120      	cbz	r0, 111f2 <ticker_update_slave_assert+0xe>
   111e8:	4b05      	ldr	r3, [pc, #20]	; (11200 <ticker_update_slave_assert+0x1c>)
   111ea:	7b9b      	ldrb	r3, [r3, #14]
   111ec:	b2db      	uxtb	r3, r3
   111ee:	4299      	cmp	r1, r3
   111f0:	d100      	bne.n	111f4 <ticker_update_slave_assert+0x10>
   111f2:	4770      	bx	lr
   111f4:	4040      	eors	r0, r0
   111f6:	f380 8811 	msr	BASEPRI, r0
   111fa:	f04f 0004 	mov.w	r0, #4
   111fe:	df02      	svc	2
   11200:	20000e8c 	.word	0x20000e8c

00011204 <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11204:	b930      	cbnz	r0, 11214 <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11206:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1120a:	f36f 0341 	bfc	r3, #1, #1
   1120e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11212:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11214:	4040      	eors	r0, r0
   11216:	f380 8811 	msr	BASEPRI, r0
   1121a:	f04f 0004 	mov.w	r0, #4
   1121e:	df02      	svc	2

00011220 <packet_rx_allocate>:
{
   11220:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11222:	4b22      	ldr	r3, [pc, #136]	; (112ac <packet_rx_allocate+0x8c>)
   11224:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11228:	4283      	cmp	r3, r0
   1122a:	d300      	bcc.n	1122e <packet_rx_allocate+0xe>
   1122c:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   1122e:	4a1f      	ldr	r2, [pc, #124]	; (112ac <packet_rx_allocate+0x8c>)
   11230:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11234:	3401      	adds	r4, #1
   11236:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11238:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   1123c:	4294      	cmp	r4, r2
   1123e:	d10d      	bne.n	1125c <packet_rx_allocate+0x3c>
		acquire = 0;
   11240:	2400      	movs	r4, #0
   11242:	e00b      	b.n	1125c <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11244:	491a      	ldr	r1, [pc, #104]	; (112b0 <packet_rx_allocate+0x90>)
   11246:	4630      	mov	r0, r6
   11248:	f7fd facb 	bl	e7e2 <mem_release>
			break;
   1124c:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   1124e:	4a17      	ldr	r2, [pc, #92]	; (112ac <packet_rx_allocate+0x8c>)
   11250:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11254:	3b01      	subs	r3, #1
   11256:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   1125a:	462b      	mov	r3, r5
   1125c:	1e5d      	subs	r5, r3, #1
   1125e:	b2ed      	uxtb	r5, r5
   11260:	b313      	cbz	r3, 112a8 <packet_rx_allocate+0x88>
   11262:	4b12      	ldr	r3, [pc, #72]	; (112ac <packet_rx_allocate+0x8c>)
   11264:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11268:	b2db      	uxtb	r3, r3
   1126a:	429c      	cmp	r4, r3
   1126c:	d01c      	beq.n	112a8 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   1126e:	4810      	ldr	r0, [pc, #64]	; (112b0 <packet_rx_allocate+0x90>)
   11270:	f7fd fa9b 	bl	e7aa <mem_acquire>
		if (!link) {
   11274:	4606      	mov	r6, r0
   11276:	b1b8      	cbz	r0, 112a8 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11278:	480e      	ldr	r0, [pc, #56]	; (112b4 <packet_rx_allocate+0x94>)
   1127a:	f7fd fa96 	bl	e7aa <mem_acquire>
		if (!radio_pdu_node_rx) {
   1127e:	4602      	mov	r2, r0
   11280:	2800      	cmp	r0, #0
   11282:	d0df      	beq.n	11244 <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11284:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11286:	4b09      	ldr	r3, [pc, #36]	; (112ac <packet_rx_allocate+0x8c>)
   11288:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1128c:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11290:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11294:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11298:	3401      	adds	r4, #1
   1129a:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   1129c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   112a0:	429c      	cmp	r4, r3
   112a2:	d1d4      	bne.n	1124e <packet_rx_allocate+0x2e>
			acquire = 0;
   112a4:	2400      	movs	r4, #0
   112a6:	e7d2      	b.n	1124e <packet_rx_allocate+0x2e>
   112a8:	bd70      	pop	{r4, r5, r6, pc}
   112aa:	bf00      	nop
   112ac:	20000e8c 	.word	0x20000e8c
   112b0:	20000fd0 	.word	0x20000fd0
   112b4:	20000fb8 	.word	0x20000fb8

000112b8 <tx_cmplt_get>:
{
   112b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   112bc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   112be:	4294      	cmp	r4, r2
   112c0:	d043      	beq.n	1134a <tx_cmplt_get+0x92>
   112c2:	4690      	mov	r8, r2
   112c4:	4689      	mov	r9, r1
   112c6:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   112c8:	4b21      	ldr	r3, [pc, #132]	; (11350 <tx_cmplt_get+0x98>)
   112ca:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   112ce:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   112d2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   112d4:	2600      	movs	r6, #0
   112d6:	e00f      	b.n	112f8 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   112d8:	2301      	movs	r3, #1
   112da:	606b      	str	r3, [r5, #4]
			cmplt++;
   112dc:	441e      	add	r6, r3
   112de:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   112e0:	f030 0303 	bics.w	r3, r0, #3
   112e4:	d126      	bne.n	11334 <tx_cmplt_get+0x7c>
		_first = _first + 1;
   112e6:	3401      	adds	r4, #1
   112e8:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   112ea:	4b19      	ldr	r3, [pc, #100]	; (11350 <tx_cmplt_get+0x98>)
   112ec:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   112f0:	429c      	cmp	r4, r3
   112f2:	d023      	beq.n	1133c <tx_cmplt_get+0x84>
	} while (_first != last);
   112f4:	4544      	cmp	r4, r8
   112f6:	d023      	beq.n	11340 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   112f8:	883a      	ldrh	r2, [r7, #0]
   112fa:	4b15      	ldr	r3, [pc, #84]	; (11350 <tx_cmplt_get+0x98>)
   112fc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11300:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11304:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11308:	429a      	cmp	r2, r3
   1130a:	d119      	bne.n	11340 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   1130c:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   1130e:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11310:	2801      	cmp	r0, #1
   11312:	d9e1      	bls.n	112d8 <tx_cmplt_get+0x20>
   11314:	f030 0203 	bics.w	r2, r0, #3
   11318:	d009      	beq.n	1132e <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   1131a:	b143      	cbz	r3, 1132e <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1131c:	7943      	ldrb	r3, [r0, #5]
   1131e:	b133      	cbz	r3, 1132e <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11320:	7903      	ldrb	r3, [r0, #4]
   11322:	f003 0303 	and.w	r3, r3, #3
   11326:	3b01      	subs	r3, #1
   11328:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1132a:	2b01      	cmp	r3, #1
   1132c:	d9d4      	bls.n	112d8 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   1132e:	2302      	movs	r3, #2
   11330:	606b      	str	r3, [r5, #4]
   11332:	e7d5      	b.n	112e0 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11334:	4907      	ldr	r1, [pc, #28]	; (11354 <tx_cmplt_get+0x9c>)
   11336:	f7fd fa54 	bl	e7e2 <mem_release>
   1133a:	e7d4      	b.n	112e6 <tx_cmplt_get+0x2e>
			_first = 0;
   1133c:	2400      	movs	r4, #0
   1133e:	e7d9      	b.n	112f4 <tx_cmplt_get+0x3c>
	*first = _first;
   11340:	f889 4000 	strb.w	r4, [r9]
}
   11344:	4630      	mov	r0, r6
   11346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   1134a:	2600      	movs	r6, #0
   1134c:	e7fa      	b.n	11344 <tx_cmplt_get+0x8c>
   1134e:	bf00      	nop
   11350:	20000e8c 	.word	0x20000e8c
   11354:	20000fec 	.word	0x20000fec

00011358 <ticker_job_disable>:
{
   11358:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   1135a:	4b05      	ldr	r3, [pc, #20]	; (11370 <ticker_job_disable+0x18>)
   1135c:	7c1b      	ldrb	r3, [r3, #16]
   1135e:	b903      	cbnz	r3, 11362 <ticker_job_disable+0xa>
   11360:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11362:	2200      	movs	r2, #0
   11364:	2101      	movs	r1, #1
   11366:	4608      	mov	r0, r1
   11368:	f7fd f8a0 	bl	e4ac <mayfly_enable>
}
   1136c:	e7f8      	b.n	11360 <ticker_job_disable+0x8>
   1136e:	bf00      	nop
   11370:	20000e8c 	.word	0x20000e8c

00011374 <connection_get>:
	if (handle < _radio.connection_count) {
   11374:	4b0d      	ldr	r3, [pc, #52]	; (113ac <connection_get+0x38>)
   11376:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   1137a:	4283      	cmp	r3, r0
   1137c:	d910      	bls.n	113a0 <connection_get+0x2c>
{
   1137e:	b510      	push	{r4, lr}
   11380:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11382:	4602      	mov	r2, r0
   11384:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11388:	4b08      	ldr	r3, [pc, #32]	; (113ac <connection_get+0x38>)
   1138a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1138e:	f7fd fa49 	bl	e824 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11392:	4603      	mov	r3, r0
   11394:	b110      	cbz	r0, 1139c <connection_get+0x28>
   11396:	8c02      	ldrh	r2, [r0, #32]
   11398:	4294      	cmp	r4, r2
   1139a:	d104      	bne.n	113a6 <connection_get+0x32>
}
   1139c:	4618      	mov	r0, r3
   1139e:	bd10      	pop	{r4, pc}
	return 0;
   113a0:	2300      	movs	r3, #0
}
   113a2:	4618      	mov	r0, r3
   113a4:	4770      	bx	lr
	return 0;
   113a6:	2300      	movs	r3, #0
   113a8:	e7f8      	b.n	1139c <connection_get+0x28>
   113aa:	bf00      	nop
   113ac:	20000e8c 	.word	0x20000e8c

000113b0 <role_disable>:
{
   113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113b2:	b087      	sub	sp, #28
   113b4:	4604      	mov	r4, r0
   113b6:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   113b8:	2302      	movs	r3, #2
   113ba:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   113bc:	2805      	cmp	r0, #5
   113be:	d00d      	beq.n	113dc <role_disable+0x2c>
   113c0:	2806      	cmp	r0, #6
   113c2:	d02a      	beq.n	1141a <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   113c4:	2806      	cmp	r0, #6
   113c6:	d957      	bls.n	11478 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   113c8:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   113ca:	b280      	uxth	r0, r0
   113cc:	f7ff ffd2 	bl	11374 <connection_get>
			if (!conn) {
   113d0:	2800      	cmp	r0, #0
   113d2:	f000 8153 	beq.w	1167c <role_disable+0x2cc>
			ticks_xtal_to_start =
   113d6:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   113d8:	6847      	ldr	r7, [r0, #4]
		break;
   113da:	e023      	b.n	11424 <role_disable+0x74>
		ticks_xtal_to_start =
   113dc:	4b9f      	ldr	r3, [pc, #636]	; (1165c <role_disable+0x2ac>)
   113de:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   113e0:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   113e2:	ab05      	add	r3, sp, #20
   113e4:	9300      	str	r3, [sp, #0]
   113e6:	4b9e      	ldr	r3, [pc, #632]	; (11660 <role_disable+0x2b0>)
   113e8:	460a      	mov	r2, r1
   113ea:	2103      	movs	r1, #3
   113ec:	2000      	movs	r0, #0
   113ee:	f7fe ff47 	bl	10280 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   113f2:	2802      	cmp	r0, #2
   113f4:	d00d      	beq.n	11412 <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   113f6:	9b05      	ldr	r3, [sp, #20]
   113f8:	b1a3      	cbz	r3, 11424 <role_disable+0x74>
   113fa:	9b05      	ldr	r3, [sp, #20]
   113fc:	2b01      	cmp	r3, #1
   113fe:	d011      	beq.n	11424 <role_disable+0x74>
   11400:	4040      	eors	r0, r0
   11402:	f380 8811 	msr	BASEPRI, r0
   11406:	f04f 0004 	mov.w	r0, #4
   1140a:	df02      	svc	2
   1140c:	bf20      	wfe
  __ASM volatile ("sev");
   1140e:	bf40      	sev
  __ASM volatile ("wfe");
   11410:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11412:	9b05      	ldr	r3, [sp, #20]
   11414:	2b02      	cmp	r3, #2
   11416:	d0f9      	beq.n	1140c <role_disable+0x5c>
   11418:	e7ed      	b.n	113f6 <role_disable+0x46>
		ticks_xtal_to_start =
   1141a:	4b90      	ldr	r3, [pc, #576]	; (1165c <role_disable+0x2ac>)
   1141c:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11420:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11424:	4b8d      	ldr	r3, [pc, #564]	; (1165c <role_disable+0x2ac>)
   11426:	7b9b      	ldrb	r3, [r3, #14]
   11428:	2b00      	cmp	r3, #0
   1142a:	d12b      	bne.n	11484 <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   1142c:	4b8b      	ldr	r3, [pc, #556]	; (1165c <role_disable+0x2ac>)
   1142e:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11430:	ab06      	add	r3, sp, #24
   11432:	2202      	movs	r2, #2
   11434:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11438:	9300      	str	r3, [sp, #0]
   1143a:	4b89      	ldr	r3, [pc, #548]	; (11660 <role_disable+0x2b0>)
   1143c:	4622      	mov	r2, r4
   1143e:	2103      	movs	r1, #3
   11440:	2000      	movs	r0, #0
   11442:	f7fe ff1d 	bl	10280 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11446:	2802      	cmp	r0, #2
   11448:	d022      	beq.n	11490 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1144a:	9b05      	ldr	r3, [sp, #20]
   1144c:	b973      	cbnz	r3, 1146c <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1144e:	4b83      	ldr	r3, [pc, #524]	; (1165c <role_disable+0x2ac>)
   11450:	7b1b      	ldrb	r3, [r3, #12]
   11452:	b2db      	uxtb	r3, r3
   11454:	429c      	cmp	r4, r3
   11456:	d02d      	beq.n	114b4 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11458:	4b80      	ldr	r3, [pc, #512]	; (1165c <role_disable+0x2ac>)
   1145a:	7b5b      	ldrb	r3, [r3, #13]
   1145c:	b2db      	uxtb	r3, r3
   1145e:	429c      	cmp	r4, r3
   11460:	d028      	beq.n	114b4 <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   11462:	4b7e      	ldr	r3, [pc, #504]	; (1165c <role_disable+0x2ac>)
   11464:	7b9b      	ldrb	r3, [r3, #14]
   11466:	b90b      	cbnz	r3, 1146c <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11468:	2301      	movs	r3, #1
   1146a:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   1146c:	2200      	movs	r2, #0
   1146e:	4b7b      	ldr	r3, [pc, #492]	; (1165c <role_disable+0x2ac>)
   11470:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   11472:	9805      	ldr	r0, [sp, #20]
}
   11474:	b007      	add	sp, #28
   11476:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11478:	4040      	eors	r0, r0
   1147a:	f380 8811 	msr	BASEPRI, r0
   1147e:	f04f 0004 	mov.w	r0, #4
   11482:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   11484:	4040      	eors	r0, r0
   11486:	f380 8811 	msr	BASEPRI, r0
   1148a:	f04f 0004 	mov.w	r0, #4
   1148e:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   11490:	4b72      	ldr	r3, [pc, #456]	; (1165c <role_disable+0x2ac>)
   11492:	7b5b      	ldrb	r3, [r3, #13]
   11494:	b2db      	uxtb	r3, r3
   11496:	429c      	cmp	r4, r3
   11498:	d108      	bne.n	114ac <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1149a:	2201      	movs	r2, #1
   1149c:	4611      	mov	r1, r2
   1149e:	2003      	movs	r0, #3
   114a0:	f7fd f804 	bl	e4ac <mayfly_enable>
   114a4:	e002      	b.n	114ac <role_disable+0xfc>
   114a6:	bf20      	wfe
  __ASM volatile ("sev");
   114a8:	bf40      	sev
  __ASM volatile ("wfe");
   114aa:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   114ac:	9b05      	ldr	r3, [sp, #20]
   114ae:	2b02      	cmp	r3, #2
   114b0:	d0f9      	beq.n	114a6 <role_disable+0xf6>
   114b2:	e7ca      	b.n	1144a <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   114b4:	ab06      	add	r3, sp, #24
   114b6:	2202      	movs	r2, #2
   114b8:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   114bc:	9300      	str	r3, [sp, #0]
   114be:	4b68      	ldr	r3, [pc, #416]	; (11660 <role_disable+0x2b0>)
   114c0:	2200      	movs	r2, #0
   114c2:	2103      	movs	r1, #3
   114c4:	4610      	mov	r0, r2
   114c6:	f7fe fedb 	bl	10280 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   114ca:	2802      	cmp	r0, #2
   114cc:	d029      	beq.n	11522 <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   114ce:	9b02      	ldr	r3, [sp, #8]
   114d0:	2b00      	cmp	r3, #0
   114d2:	d17c      	bne.n	115ce <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   114d4:	2302      	movs	r3, #2
   114d6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   114d8:	4b60      	ldr	r3, [pc, #384]	; (1165c <role_disable+0x2ac>)
   114da:	7b1b      	ldrb	r3, [r3, #12]
   114dc:	2b00      	cmp	r3, #0
   114de:	d02e      	beq.n	1153e <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   114e0:	2000      	movs	r0, #0
   114e2:	4b5e      	ldr	r3, [pc, #376]	; (1165c <role_disable+0x2ac>)
   114e4:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   114e6:	ab03      	add	r3, sp, #12
   114e8:	9300      	str	r3, [sp, #0]
   114ea:	4b5d      	ldr	r3, [pc, #372]	; (11660 <role_disable+0x2b0>)
   114ec:	2201      	movs	r2, #1
   114ee:	2103      	movs	r1, #3
   114f0:	f7fe fec6 	bl	10280 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   114f4:	2802      	cmp	r0, #2
   114f6:	d028      	beq.n	1154a <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   114f8:	9b03      	ldr	r3, [sp, #12]
   114fa:	2b00      	cmp	r3, #0
   114fc:	d142      	bne.n	11584 <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   114fe:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11502:	42b7      	cmp	r7, r6
   11504:	d92f      	bls.n	11566 <role_disable+0x1b6>
				retval = mayfly_enqueue(
   11506:	4b57      	ldr	r3, [pc, #348]	; (11664 <role_disable+0x2b4>)
   11508:	2200      	movs	r2, #0
   1150a:	4611      	mov	r1, r2
   1150c:	2003      	movs	r0, #3
   1150e:	f7fd f80b 	bl	e528 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11512:	2800      	cmp	r0, #0
   11514:	d0a5      	beq.n	11462 <role_disable+0xb2>
   11516:	4040      	eors	r0, r0
   11518:	f380 8811 	msr	BASEPRI, r0
   1151c:	f04f 0004 	mov.w	r0, #4
   11520:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11522:	2201      	movs	r2, #1
   11524:	4611      	mov	r1, r2
   11526:	2003      	movs	r0, #3
   11528:	f7fc ffc0 	bl	e4ac <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1152c:	9b02      	ldr	r3, [sp, #8]
   1152e:	2b02      	cmp	r3, #2
   11530:	d1cd      	bne.n	114ce <role_disable+0x11e>
   11532:	4040      	eors	r0, r0
   11534:	f380 8811 	msr	BASEPRI, r0
   11538:	f04f 0004 	mov.w	r0, #4
   1153c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   1153e:	4040      	eors	r0, r0
   11540:	f380 8811 	msr	BASEPRI, r0
   11544:	f04f 0004 	mov.w	r0, #4
   11548:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1154a:	2201      	movs	r2, #1
   1154c:	4611      	mov	r1, r2
   1154e:	2003      	movs	r0, #3
   11550:	f7fc ffac 	bl	e4ac <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11554:	9b03      	ldr	r3, [sp, #12]
   11556:	2b02      	cmp	r3, #2
   11558:	d1ce      	bne.n	114f8 <role_disable+0x148>
   1155a:	4040      	eors	r0, r0
   1155c:	f380 8811 	msr	BASEPRI, r0
   11560:	f04f 0004 	mov.w	r0, #4
   11564:	df02      	svc	2
				retval = mayfly_enqueue(
   11566:	4b40      	ldr	r3, [pc, #256]	; (11668 <role_disable+0x2b8>)
   11568:	2200      	movs	r2, #0
   1156a:	4611      	mov	r1, r2
   1156c:	2003      	movs	r0, #3
   1156e:	f7fc ffdb 	bl	e528 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11572:	2800      	cmp	r0, #0
   11574:	f43f af75 	beq.w	11462 <role_disable+0xb2>
   11578:	4040      	eors	r0, r0
   1157a:	f380 8811 	msr	BASEPRI, r0
   1157e:	f04f 0004 	mov.w	r0, #4
   11582:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11584:	9b03      	ldr	r3, [sp, #12]
   11586:	2b01      	cmp	r3, #1
   11588:	d11b      	bne.n	115c2 <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1158a:	4b36      	ldr	r3, [pc, #216]	; (11664 <role_disable+0x2b4>)
   1158c:	2200      	movs	r2, #0
   1158e:	4611      	mov	r1, r2
   11590:	2003      	movs	r0, #3
   11592:	f7fc ffc9 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11596:	b970      	cbnz	r0, 115b6 <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11598:	4b33      	ldr	r3, [pc, #204]	; (11668 <role_disable+0x2b8>)
   1159a:	2200      	movs	r2, #0
   1159c:	4611      	mov	r1, r2
   1159e:	2003      	movs	r0, #3
   115a0:	f7fc ffc2 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   115a4:	2800      	cmp	r0, #0
   115a6:	f43f af5c 	beq.w	11462 <role_disable+0xb2>
   115aa:	4040      	eors	r0, r0
   115ac:	f380 8811 	msr	BASEPRI, r0
   115b0:	f04f 0004 	mov.w	r0, #4
   115b4:	df02      	svc	2
			LL_ASSERT(!retval);
   115b6:	4040      	eors	r0, r0
   115b8:	f380 8811 	msr	BASEPRI, r0
   115bc:	f04f 0004 	mov.w	r0, #4
   115c0:	df02      	svc	2
			LL_ASSERT(0);
   115c2:	4040      	eors	r0, r0
   115c4:	f380 8811 	msr	BASEPRI, r0
   115c8:	f04f 0004 	mov.w	r0, #4
   115cc:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   115ce:	9b02      	ldr	r3, [sp, #8]
   115d0:	2b01      	cmp	r3, #1
   115d2:	d14d      	bne.n	11670 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   115d4:	2dff      	cmp	r5, #255	; 0xff
   115d6:	d011      	beq.n	115fc <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   115d8:	ab06      	add	r3, sp, #24
   115da:	2202      	movs	r2, #2
   115dc:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   115e0:	9300      	str	r3, [sp, #0]
   115e2:	4b1f      	ldr	r3, [pc, #124]	; (11660 <role_disable+0x2b0>)
   115e4:	462a      	mov	r2, r5
   115e6:	2103      	movs	r1, #3
   115e8:	2000      	movs	r0, #0
   115ea:	f7fe fe49 	bl	10280 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   115ee:	2802      	cmp	r0, #2
   115f0:	d018      	beq.n	11624 <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   115f2:	9b04      	ldr	r3, [sp, #16]
   115f4:	b113      	cbz	r3, 115fc <role_disable+0x24c>
   115f6:	9b04      	ldr	r3, [sp, #16]
   115f8:	2b01      	cmp	r3, #1
   115fa:	d121      	bne.n	11640 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   115fc:	4b17      	ldr	r3, [pc, #92]	; (1165c <role_disable+0x2ac>)
   115fe:	7bdb      	ldrb	r3, [r3, #15]
   11600:	2b00      	cmp	r3, #0
   11602:	f43f af2e 	beq.w	11462 <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   11606:	4b19      	ldr	r3, [pc, #100]	; (1166c <role_disable+0x2bc>)
   11608:	2204      	movs	r2, #4
   1160a:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1160c:	2200      	movs	r2, #0
   1160e:	4611      	mov	r1, r2
   11610:	2003      	movs	r0, #3
   11612:	f7fc ff89 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11616:	b1e0      	cbz	r0, 11652 <role_disable+0x2a2>
   11618:	4040      	eors	r0, r0
   1161a:	f380 8811 	msr	BASEPRI, r0
   1161e:	f04f 0004 	mov.w	r0, #4
   11622:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11624:	2201      	movs	r2, #1
   11626:	4611      	mov	r1, r2
   11628:	2003      	movs	r0, #3
   1162a:	f7fc ff3f 	bl	e4ac <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1162e:	9b04      	ldr	r3, [sp, #16]
   11630:	2b02      	cmp	r3, #2
   11632:	d1de      	bne.n	115f2 <role_disable+0x242>
   11634:	4040      	eors	r0, r0
   11636:	f380 8811 	msr	BASEPRI, r0
   1163a:	f04f 0004 	mov.w	r0, #4
   1163e:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11640:	4040      	eors	r0, r0
   11642:	f380 8811 	msr	BASEPRI, r0
   11646:	f04f 0004 	mov.w	r0, #4
   1164a:	df02      	svc	2
   1164c:	bf20      	wfe
  __ASM volatile ("sev");
   1164e:	bf40      	sev
  __ASM volatile ("wfe");
   11650:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   11652:	4b02      	ldr	r3, [pc, #8]	; (1165c <role_disable+0x2ac>)
   11654:	7bdb      	ldrb	r3, [r3, #15]
   11656:	2b00      	cmp	r3, #0
   11658:	d1f8      	bne.n	1164c <role_disable+0x29c>
   1165a:	e702      	b.n	11462 <role_disable+0xb2>
   1165c:	20000e8c 	.word	0x20000e8c
   11660:	00010b2d 	.word	0x00010b2d
   11664:	2000bbf0 	.word	0x2000bbf0
   11668:	2000bcb0 	.word	0x2000bcb0
   1166c:	2000bc20 	.word	0x2000bc20
		LL_ASSERT(0);
   11670:	4040      	eors	r0, r0
   11672:	f380 8811 	msr	BASEPRI, r0
   11676:	f04f 0004 	mov.w	r0, #4
   1167a:	df02      	svc	2
				return 1;
   1167c:	2001      	movs	r0, #1
   1167e:	e6f9      	b.n	11474 <role_disable+0xc4>

00011680 <event_stop>:
{
   11680:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   11682:	4a08      	ldr	r2, [pc, #32]	; (116a4 <event_stop+0x24>)
   11684:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   11686:	4613      	mov	r3, r2
   11688:	2200      	movs	r2, #0
   1168a:	4611      	mov	r1, r2
   1168c:	4610      	mov	r0, r2
   1168e:	f7fc ff4b 	bl	e528 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11692:	b900      	cbnz	r0, 11696 <event_stop+0x16>
   11694:	bd08      	pop	{r3, pc}
   11696:	4040      	eors	r0, r0
   11698:	f380 8811 	msr	BASEPRI, r0
   1169c:	f04f 0004 	mov.w	r0, #4
   116a0:	df02      	svc	2
   116a2:	bf00      	nop
   116a4:	2000bc00 	.word	0x2000bc00

000116a8 <event_adv_stop>:
{
   116a8:	b500      	push	{lr}
   116aa:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   116ac:	2305      	movs	r3, #5
   116ae:	2200      	movs	r2, #0
   116b0:	4611      	mov	r1, r2
   116b2:	4610      	mov	r0, r2
   116b4:	f7ff ffe4 	bl	11680 <event_stop>
	ticker_status =
   116b8:	f241 73e4 	movw	r3, #6116	; 0x17e4
   116bc:	9300      	str	r3, [sp, #0]
   116be:	4b09      	ldr	r3, [pc, #36]	; (116e4 <event_adv_stop+0x3c>)
   116c0:	2205      	movs	r2, #5
   116c2:	2100      	movs	r1, #0
   116c4:	4608      	mov	r0, r1
   116c6:	f7fe fddb 	bl	10280 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   116ca:	b108      	cbz	r0, 116d0 <event_adv_stop+0x28>
   116cc:	2802      	cmp	r0, #2
   116ce:	d102      	bne.n	116d6 <event_adv_stop+0x2e>
}
   116d0:	b003      	add	sp, #12
   116d2:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   116d6:	4040      	eors	r0, r0
   116d8:	f380 8811 	msr	BASEPRI, r0
   116dc:	f04f 0004 	mov.w	r0, #4
   116e0:	df02      	svc	2
   116e2:	bf00      	nop
   116e4:	00011f69 	.word	0x00011f69

000116e8 <event_inactive>:
{
   116e8:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   116ea:	4b07      	ldr	r3, [pc, #28]	; (11708 <event_inactive+0x20>)
   116ec:	2200      	movs	r2, #0
   116ee:	4611      	mov	r1, r2
   116f0:	4610      	mov	r0, r2
   116f2:	f7fc ff19 	bl	e528 <mayfly_enqueue>
	LL_ASSERT(!retval);
   116f6:	b900      	cbnz	r0, 116fa <event_inactive+0x12>
   116f8:	bd08      	pop	{r3, pc}
   116fa:	4040      	eors	r0, r0
   116fc:	f380 8811 	msr	BASEPRI, r0
   11700:	f04f 0004 	mov.w	r0, #4
   11704:	df02      	svc	2
   11706:	bf00      	nop
   11708:	2000bbd0 	.word	0x2000bbd0

0001170c <mayfly_xtal_retain>:
{
   1170c:	b508      	push	{r3, lr}
	if (retain) {
   1170e:	b1d1      	cbz	r1, 11746 <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   11710:	4b1c      	ldr	r3, [pc, #112]	; (11784 <mayfly_xtal_retain+0x78>)
   11712:	781b      	ldrb	r3, [r3, #0]
   11714:	b953      	cbnz	r3, 1172c <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   11716:	2801      	cmp	r0, #1
   11718:	d109      	bne.n	1172e <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   1171a:	2201      	movs	r2, #1
   1171c:	4b19      	ldr	r3, [pc, #100]	; (11784 <mayfly_xtal_retain+0x78>)
   1171e:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   11720:	4b19      	ldr	r3, [pc, #100]	; (11788 <mayfly_xtal_retain+0x7c>)
   11722:	2200      	movs	r2, #0
   11724:	4611      	mov	r1, r2
   11726:	f7fc feff 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1172a:	b930      	cbnz	r0, 1173a <mayfly_xtal_retain+0x2e>
   1172c:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1172e:	4040      	eors	r0, r0
   11730:	f380 8811 	msr	BASEPRI, r0
   11734:	f04f 0004 	mov.w	r0, #4
   11738:	df02      	svc	2
			LL_ASSERT(!retval);
   1173a:	4040      	eors	r0, r0
   1173c:	f380 8811 	msr	BASEPRI, r0
   11740:	f04f 0004 	mov.w	r0, #4
   11744:	df02      	svc	2
		if (s_xtal_retained) {
   11746:	4b0f      	ldr	r3, [pc, #60]	; (11784 <mayfly_xtal_retain+0x78>)
   11748:	781b      	ldrb	r3, [r3, #0]
   1174a:	2b00      	cmp	r3, #0
   1174c:	d0ee      	beq.n	1172c <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   1174e:	2200      	movs	r2, #0
   11750:	4b0c      	ldr	r3, [pc, #48]	; (11784 <mayfly_xtal_retain+0x78>)
   11752:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   11754:	b138      	cbz	r0, 11766 <mayfly_xtal_retain+0x5a>
   11756:	2801      	cmp	r0, #1
   11758:	d012      	beq.n	11780 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   1175a:	4040      	eors	r0, r0
   1175c:	f380 8811 	msr	BASEPRI, r0
   11760:	f04f 0004 	mov.w	r0, #4
   11764:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   11766:	4b09      	ldr	r3, [pc, #36]	; (1178c <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   11768:	2200      	movs	r2, #0
   1176a:	4611      	mov	r1, r2
   1176c:	f7fc fedc 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11770:	2800      	cmp	r0, #0
   11772:	d0db      	beq.n	1172c <mayfly_xtal_retain+0x20>
   11774:	4040      	eors	r0, r0
   11776:	f380 8811 	msr	BASEPRI, r0
   1177a:	f04f 0004 	mov.w	r0, #4
   1177e:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   11780:	4b03      	ldr	r3, [pc, #12]	; (11790 <mayfly_xtal_retain+0x84>)
   11782:	e7f1      	b.n	11768 <mayfly_xtal_retain+0x5c>
   11784:	20001404 	.word	0x20001404
   11788:	2000bc70 	.word	0x2000bc70
   1178c:	2000bc80 	.word	0x2000bc80
   11790:	2000bc90 	.word	0x2000bc90

00011794 <event_active>:
{
   11794:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   11796:	4b07      	ldr	r3, [pc, #28]	; (117b4 <event_active+0x20>)
   11798:	2200      	movs	r2, #0
   1179a:	4611      	mov	r1, r2
   1179c:	4610      	mov	r0, r2
   1179e:	f7fc fec3 	bl	e528 <mayfly_enqueue>
	LL_ASSERT(!retval);
   117a2:	b900      	cbnz	r0, 117a6 <event_active+0x12>
   117a4:	bd08      	pop	{r3, pc}
   117a6:	4040      	eors	r0, r0
   117a8:	f380 8811 	msr	BASEPRI, r0
   117ac:	f04f 0004 	mov.w	r0, #4
   117b0:	df02      	svc	2
   117b2:	bf00      	nop
   117b4:	2000bbc0 	.word	0x2000bbc0

000117b8 <event_xtal>:
{
   117b8:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   117ba:	4b07      	ldr	r3, [pc, #28]	; (117d8 <event_xtal+0x20>)
   117bc:	2200      	movs	r2, #0
   117be:	4611      	mov	r1, r2
   117c0:	4610      	mov	r0, r2
   117c2:	f7fc feb1 	bl	e528 <mayfly_enqueue>
	LL_ASSERT(!retval);
   117c6:	b900      	cbnz	r0, 117ca <event_xtal+0x12>
   117c8:	bd08      	pop	{r3, pc}
   117ca:	4040      	eors	r0, r0
   117cc:	f380 8811 	msr	BASEPRI, r0
   117d0:	f04f 0004 	mov.w	r0, #4
   117d4:	df02      	svc	2
   117d6:	bf00      	nop
   117d8:	2000bc60 	.word	0x2000bc60

000117dc <mayfly_radio_active>:
{
   117dc:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   117de:	b148      	cbz	r0, 117f4 <mayfly_radio_active+0x18>
		if (s_active++) {
   117e0:	4a0e      	ldr	r2, [pc, #56]	; (1181c <mayfly_radio_active+0x40>)
   117e2:	7813      	ldrb	r3, [r2, #0]
   117e4:	1c59      	adds	r1, r3, #1
   117e6:	7011      	strb	r1, [r2, #0]
   117e8:	b103      	cbz	r3, 117ec <mayfly_radio_active+0x10>
   117ea:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   117ec:	2001      	movs	r0, #1
   117ee:	f007 f8a5 	bl	1893c <radio_active_callback>
   117f2:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   117f4:	4b09      	ldr	r3, [pc, #36]	; (1181c <mayfly_radio_active+0x40>)
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	b14b      	cbz	r3, 1180e <mayfly_radio_active+0x32>
		if (--s_active) {
   117fa:	3b01      	subs	r3, #1
   117fc:	b2db      	uxtb	r3, r3
   117fe:	4a07      	ldr	r2, [pc, #28]	; (1181c <mayfly_radio_active+0x40>)
   11800:	7013      	strb	r3, [r2, #0]
   11802:	2b00      	cmp	r3, #0
   11804:	d1f1      	bne.n	117ea <mayfly_radio_active+0xe>
		radio_active_callback(0);
   11806:	2000      	movs	r0, #0
   11808:	f007 f898 	bl	1893c <radio_active_callback>
   1180c:	e7ed      	b.n	117ea <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   1180e:	4040      	eors	r0, r0
   11810:	f380 8811 	msr	BASEPRI, r0
   11814:	f04f 0004 	mov.w	r0, #4
   11818:	df02      	svc	2
   1181a:	bf00      	nop
   1181c:	20001370 	.word	0x20001370

00011820 <mayfly_radio_inactive>:
{
   11820:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   11822:	2000      	movs	r0, #0
   11824:	f7ff ffda 	bl	117dc <mayfly_radio_active>
   11828:	bd08      	pop	{r3, pc}
	...

0001182c <mayfly_radio_stop>:
{
   1182c:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   1182e:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   11830:	1f23      	subs	r3, r4, #4
   11832:	b2db      	uxtb	r3, r3
   11834:	2b01      	cmp	r3, #1
   11836:	d808      	bhi.n	1184a <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11838:	4b10      	ldr	r3, [pc, #64]	; (1187c <mayfly_radio_stop+0x50>)
   1183a:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   1183c:	b16b      	cbz	r3, 1185a <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   1183e:	2b04      	cmp	r3, #4
   11840:	d014      	beq.n	1186c <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   11842:	2b05      	cmp	r3, #5
   11844:	d007      	beq.n	11856 <mayfly_radio_stop+0x2a>
   11846:	2301      	movs	r3, #1
   11848:	e008      	b.n	1185c <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   1184a:	4040      	eors	r0, r0
   1184c:	f380 8811 	msr	BASEPRI, r0
   11850:	f04f 0004 	mov.w	r0, #4
   11854:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   11856:	2300      	movs	r3, #0
   11858:	e000      	b.n	1185c <mayfly_radio_stop+0x30>
   1185a:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   1185c:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   1185e:	b13b      	cbz	r3, 11870 <mayfly_radio_stop+0x44>
		if (radio_used) {
   11860:	b10d      	cbz	r5, 11866 <mayfly_radio_stop+0x3a>
			_radio.state = state;
   11862:	4b06      	ldr	r3, [pc, #24]	; (1187c <mayfly_radio_stop+0x50>)
   11864:	741c      	strb	r4, [r3, #16]
		radio_disable();
   11866:	f7fd f9b5 	bl	ebd4 <radio_disable>
   1186a:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   1186c:	2300      	movs	r3, #0
   1186e:	e7f5      	b.n	1185c <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   11870:	f7fd f9de 	bl	ec30 <radio_is_idle>
   11874:	2800      	cmp	r0, #0
   11876:	d0f3      	beq.n	11860 <mayfly_radio_stop+0x34>
   11878:	e7f7      	b.n	1186a <mayfly_radio_stop+0x3e>
   1187a:	bf00      	nop
   1187c:	20000e8c 	.word	0x20000e8c

00011880 <adv_scan_conn_configure>:
{
   11880:	b508      	push	{r3, lr}
	radio_reset();
   11882:	f7fd f901 	bl	ea88 <radio_reset>
	radio_tx_power_set(0);
   11886:	2000      	movs	r0, #0
   11888:	f7fd f91a 	bl	eac0 <radio_tx_power_set>
	radio_isr_set(isr);
   1188c:	4801      	ldr	r0, [pc, #4]	; (11894 <adv_scan_conn_configure+0x14>)
   1188e:	f7fd f8c3 	bl	ea18 <radio_isr_set>
   11892:	bd08      	pop	{r3, pc}
   11894:	0000f1c9 	.word	0x0000f1c9

00011898 <adv_scan_configure>:
{
   11898:	b570      	push	{r4, r5, r6, lr}
   1189a:	b082      	sub	sp, #8
   1189c:	4604      	mov	r4, r0
   1189e:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   118a0:	ad02      	add	r5, sp, #8
   118a2:	4b0d      	ldr	r3, [pc, #52]	; (118d8 <adv_scan_configure+0x40>)
   118a4:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   118a8:	f7ff ffea 	bl	11880 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   118ac:	4631      	mov	r1, r6
   118ae:	4620      	mov	r0, r4
   118b0:	f7fd f8f8 	bl	eaa4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   118b4:	4628      	mov	r0, r5
   118b6:	f7fd f921 	bl	eafc <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   118ba:	0062      	lsls	r2, r4, #1
   118bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   118c0:	2125      	movs	r1, #37	; 0x25
   118c2:	2008      	movs	r0, #8
   118c4:	f7fd f932 	bl	eb2c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   118c8:	4904      	ldr	r1, [pc, #16]	; (118dc <adv_scan_configure+0x44>)
   118ca:	f240 605b 	movw	r0, #1627	; 0x65b
   118ce:	f7fd f9b9 	bl	ec44 <radio_crc_configure>
}
   118d2:	b002      	add	sp, #8
   118d4:	bd70      	pop	{r4, r5, r6, pc}
   118d6:	bf00      	nop
   118d8:	8e89bed6 	.word	0x8e89bed6
   118dc:	00555555 	.word	0x00555555

000118e0 <connection_configure>:
{
   118e0:	b510      	push	{r4, lr}
   118e2:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   118e4:	f7ff ffcc 	bl	11880 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   118e8:	f104 0010 	add.w	r0, r4, #16
   118ec:	f7fd f906 	bl	eafc <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   118f0:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   118f2:	7d63      	ldrb	r3, [r4, #21]
   118f4:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   118f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   118fa:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   118fc:	4319      	orrs	r1, r3
   118fe:	f240 605b 	movw	r0, #1627	; 0x65b
   11902:	f7fd f99f 	bl	ec44 <radio_crc_configure>
   11906:	bd10      	pop	{r4, pc}

00011908 <rx_packet_set>:
{
   11908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1190a:	4605      	mov	r5, r0
   1190c:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   1190e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   11910:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   11914:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   11918:	2100      	movs	r1, #0
   1191a:	4620      	mov	r0, r4
   1191c:	f7fd f8c2 	bl	eaa4 <radio_phy_set>
	if (conn->enc_rx) {
   11920:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11924:	f013 0f10 	tst.w	r3, #16
   11928:	d10a      	bne.n	11940 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1192a:	0062      	lsls	r2, r4, #1
   1192c:	f042 0201 	orr.w	r2, r2, #1
   11930:	b2f1      	uxtb	r1, r6
   11932:	2008      	movs	r0, #8
   11934:	f7fd f8fa 	bl	eb2c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   11938:	4638      	mov	r0, r7
   1193a:	f7fd f927 	bl	eb8c <radio_pkt_rx_set>
   1193e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   11940:	0062      	lsls	r2, r4, #1
   11942:	1d31      	adds	r1, r6, #4
   11944:	f042 0201 	orr.w	r2, r2, #1
   11948:	b2c9      	uxtb	r1, r1
   1194a:	2008      	movs	r0, #8
   1194c:	f7fd f8ee 	bl	eb2c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   11950:	463a      	mov	r2, r7
   11952:	4621      	mov	r1, r4
   11954:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   11958:	f7fd fb14 	bl	ef84 <radio_ccm_rx_pkt_set>
   1195c:	f7fd f916 	bl	eb8c <radio_pkt_rx_set>
   11960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011962 <packet_rx_callback>:
{
   11962:	b508      	push	{r3, lr}
	radio_event_callback();
   11964:	f006 ffec 	bl	18940 <radio_event_callback>
   11968:	bd08      	pop	{r3, pc}
	...

0001196c <pdu_node_tx_release>:
{
   1196c:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   1196e:	4a14      	ldr	r2, [pc, #80]	; (119c0 <pdu_node_tx_release+0x54>)
   11970:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   11974:	3301      	adds	r3, #1
   11976:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   11978:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   1197c:	4293      	cmp	r3, r2
   1197e:	d017      	beq.n	119b0 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   11980:	4a0f      	ldr	r2, [pc, #60]	; (119c0 <pdu_node_tx_release+0x54>)
   11982:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   11986:	4293      	cmp	r3, r2
   11988:	d014      	beq.n	119b4 <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   1198a:	4a0d      	ldr	r2, [pc, #52]	; (119c0 <pdu_node_tx_release+0x54>)
   1198c:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   11990:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   11994:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   11998:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   1199c:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   119a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   119a4:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   119a6:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   119aa:	f7ff ffda 	bl	11962 <packet_rx_callback>
   119ae:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   119b0:	2300      	movs	r3, #0
   119b2:	e7e5      	b.n	11980 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   119b4:	4040      	eors	r0, r0
   119b6:	f380 8811 	msr	BASEPRI, r0
   119ba:	f04f 0004 	mov.w	r0, #4
   119be:	df02      	svc	2
   119c0:	20000e8c 	.word	0x20000e8c

000119c4 <packet_tx_enqueue>:
{
   119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   119c6:	e016      	b.n	119f6 <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   119c8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   119cc:	2b00      	cmp	r3, #0
   119ce:	d040      	beq.n	11a52 <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   119d0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   119d4:	b103      	cbz	r3, 119d8 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   119d6:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   119d8:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   119dc:	4a24      	ldr	r2, [pc, #144]	; (11a70 <packet_tx_enqueue+0xac>)
   119de:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   119e2:	3301      	adds	r3, #1
   119e4:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   119e6:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   119ea:	4293      	cmp	r3, r2
   119ec:	d03c      	beq.n	11a68 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   119ee:	4a20      	ldr	r2, [pc, #128]	; (11a70 <packet_tx_enqueue+0xac>)
   119f0:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   119f4:	4638      	mov	r0, r7
   119f6:	1e47      	subs	r7, r0, #1
   119f8:	b2ff      	uxtb	r7, r7
   119fa:	2800      	cmp	r0, #0
   119fc:	d036      	beq.n	11a6c <packet_tx_enqueue+0xa8>
   119fe:	4a1c      	ldr	r2, [pc, #112]	; (11a70 <packet_tx_enqueue+0xac>)
   11a00:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   11a04:	b2db      	uxtb	r3, r3
   11a06:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   11a0a:	4293      	cmp	r3, r2
   11a0c:	d02e      	beq.n	11a6c <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   11a0e:	4b18      	ldr	r3, [pc, #96]	; (11a70 <packet_tx_enqueue+0xac>)
   11a10:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   11a14:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   11a18:	b2e4      	uxtb	r4, r4
   11a1a:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   11a1e:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   11a20:	2200      	movs	r2, #0
   11a22:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11a24:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   11a28:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11a2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11a30:	f7fc fef8 	bl	e824 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   11a34:	8c02      	ldrh	r2, [r0, #32]
   11a36:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   11a3a:	429a      	cmp	r2, r3
   11a3c:	d0c4      	beq.n	119c8 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11a3e:	792b      	ldrb	r3, [r5, #4]
   11a40:	f36f 0301 	bfc	r3, #0, #2
   11a44:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   11a46:	4629      	mov	r1, r5
   11a48:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   11a4c:	f7ff ff8e 	bl	1196c <pdu_node_tx_release>
   11a50:	e7c4      	b.n	119dc <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   11a52:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   11a56:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	d1b8      	bne.n	119d0 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   11a5e:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   11a62:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   11a66:	e7b3      	b.n	119d0 <packet_tx_enqueue+0xc>
			first = 0;
   11a68:	2300      	movs	r3, #0
   11a6a:	e7c0      	b.n	119ee <packet_tx_enqueue+0x2a>
   11a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a6e:	bf00      	nop
   11a70:	20000e8c 	.word	0x20000e8c

00011a74 <connection_release>:
{
   11a74:	b510      	push	{r4, lr}
   11a76:	b082      	sub	sp, #8
   11a78:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11a7a:	2201      	movs	r2, #1
   11a7c:	4611      	mov	r1, r2
   11a7e:	2000      	movs	r0, #0
   11a80:	f7fc fd14 	bl	e4ac <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   11a84:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a86:	3207      	adds	r2, #7
	ticker_status =
   11a88:	f242 2345 	movw	r3, #8773	; 0x2245
   11a8c:	9300      	str	r3, [sp, #0]
   11a8e:	4b46      	ldr	r3, [pc, #280]	; (11ba8 <connection_release+0x134>)
   11a90:	b2d2      	uxtb	r2, r2
   11a92:	2100      	movs	r1, #0
   11a94:	4608      	mov	r0, r1
   11a96:	f7fe fbf3 	bl	10280 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a9a:	b108      	cbz	r0, 11aa0 <connection_release+0x2c>
   11a9c:	2802      	cmp	r0, #2
   11a9e:	d12a      	bne.n	11af6 <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   11aa0:	4b42      	ldr	r3, [pc, #264]	; (11bac <connection_release+0x138>)
   11aa2:	7c1b      	ldrb	r3, [r3, #16]
   11aa4:	2b05      	cmp	r3, #5
   11aa6:	d13e      	bne.n	11b26 <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11aa8:	4b40      	ldr	r3, [pc, #256]	; (11bac <connection_release+0x138>)
   11aaa:	7b1a      	ldrb	r2, [r3, #12]
   11aac:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   11aae:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11ab0:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   11ab2:	429a      	cmp	r2, r3
   11ab4:	d137      	bne.n	11b26 <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   11ab6:	2000      	movs	r0, #0
   11ab8:	4b3c      	ldr	r3, [pc, #240]	; (11bac <connection_release+0x138>)
   11aba:	7318      	strb	r0, [r3, #12]
		ticker_status =
   11abc:	f242 2356 	movw	r3, #8790	; 0x2256
   11ac0:	9300      	str	r3, [sp, #0]
   11ac2:	4b39      	ldr	r3, [pc, #228]	; (11ba8 <connection_release+0x134>)
   11ac4:	2201      	movs	r2, #1
   11ac6:	4601      	mov	r1, r0
   11ac8:	f7fe fbda 	bl	10280 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11acc:	b108      	cbz	r0, 11ad2 <connection_release+0x5e>
   11ace:	2802      	cmp	r0, #2
   11ad0:	d117      	bne.n	11b02 <connection_release+0x8e>
		ticker_status =
   11ad2:	f242 235d 	movw	r3, #8797	; 0x225d
   11ad6:	9300      	str	r3, [sp, #0]
   11ad8:	4b33      	ldr	r3, [pc, #204]	; (11ba8 <connection_release+0x134>)
   11ada:	2200      	movs	r2, #0
   11adc:	4611      	mov	r1, r2
   11ade:	4610      	mov	r0, r2
   11ae0:	f7fe fbce 	bl	10280 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11ae4:	b1f8      	cbz	r0, 11b26 <connection_release+0xb2>
   11ae6:	2802      	cmp	r0, #2
   11ae8:	d01d      	beq.n	11b26 <connection_release+0xb2>
   11aea:	4040      	eors	r0, r0
   11aec:	f380 8811 	msr	BASEPRI, r0
   11af0:	f04f 0004 	mov.w	r0, #4
   11af4:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11af6:	4040      	eors	r0, r0
   11af8:	f380 8811 	msr	BASEPRI, r0
   11afc:	f04f 0004 	mov.w	r0, #4
   11b00:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b02:	4040      	eors	r0, r0
   11b04:	f380 8811 	msr	BASEPRI, r0
   11b08:	f04f 0004 	mov.w	r0, #4
   11b0c:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11b0e:	790b      	ldrb	r3, [r1, #4]
   11b10:	f36f 0301 	bfc	r3, #0, #2
   11b14:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11b16:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11b1a:	681b      	ldr	r3, [r3, #0]
   11b1c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   11b20:	8c20      	ldrh	r0, [r4, #32]
   11b22:	f7ff ff23 	bl	1196c <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11b26:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11b2a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11b2e:	4299      	cmp	r1, r3
   11b30:	d00c      	beq.n	11b4c <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11b32:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11b36:	4299      	cmp	r1, r3
   11b38:	d1e9      	bne.n	11b0e <connection_release+0x9a>
   11b3a:	e007      	b.n	11b4c <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11b3c:	6803      	ldr	r3, [r0, #0]
   11b3e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   11b42:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   11b46:	491a      	ldr	r1, [pc, #104]	; (11bb0 <connection_release+0x13c>)
   11b48:	f7fc fe4b 	bl	e7e2 <mem_release>
	while ((conn->pkt_tx_head) &&
   11b4c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   11b50:	b118      	cbz	r0, 11b5a <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11b52:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   11b56:	4298      	cmp	r0, r3
   11b58:	d1f0      	bne.n	11b3c <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   11b5a:	2300      	movs	r3, #0
   11b5c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   11b60:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   11b64:	e00d      	b.n	11b82 <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11b66:	790b      	ldrb	r3, [r1, #4]
   11b68:	f36f 0301 	bfc	r3, #0, #2
   11b6c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11b6e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11b72:	681b      	ldr	r3, [r3, #0]
   11b74:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   11b78:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   11b7c:	8c20      	ldrh	r0, [r4, #32]
   11b7e:	f7ff fef5 	bl	1196c <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   11b82:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11b86:	2900      	cmp	r1, #0
   11b88:	d1ed      	bne.n	11b66 <connection_release+0xf2>
	conn->handle = 0xffff;
   11b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b8e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   11b90:	4b06      	ldr	r3, [pc, #24]	; (11bac <connection_release+0x138>)
   11b92:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11b96:	429c      	cmp	r4, r3
   11b98:	d001      	beq.n	11b9e <connection_release+0x12a>
}
   11b9a:	b002      	add	sp, #8
   11b9c:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   11b9e:	2200      	movs	r2, #0
   11ba0:	4b02      	ldr	r3, [pc, #8]	; (11bac <connection_release+0x138>)
   11ba2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   11ba6:	e7f8      	b.n	11b9a <connection_release+0x126>
   11ba8:	00010e9d 	.word	0x00010e9d
   11bac:	20000e8c 	.word	0x20000e8c
   11bb0:	20000fe4 	.word	0x20000fe4

00011bb4 <chan_map_update>:
{
   11bb4:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11bb6:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11bba:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11bbc:	1a9b      	subs	r3, r3, r2
   11bbe:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bc4:	da22      	bge.n	11c0c <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11bc6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11bca:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11bce:	429a      	cmp	r2, r3
   11bd0:	d116      	bne.n	11c00 <chan_map_update+0x4c>
   11bd2:	460d      	mov	r5, r1
   11bd4:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   11bd6:	2205      	movs	r2, #5
   11bd8:	3104      	adds	r1, #4
   11bda:	3079      	adds	r0, #121	; 0x79
   11bdc:	f7ee fb70 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   11be0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   11be4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   11be8:	2000      	movs	r0, #0
   11bea:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   11bee:	2302      	movs	r3, #2
   11bf0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   11bf4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11bf8:	3b01      	subs	r3, #1
   11bfa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   11bfe:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11c00:	4040      	eors	r0, r0
   11c02:	f380 8811 	msr	BASEPRI, r0
   11c06:	f04f 0004 	mov.w	r0, #4
   11c0a:	df02      	svc	2
		return 1;
   11c0c:	2001      	movs	r0, #1
}
   11c0e:	bd38      	pop	{r3, r4, r5, pc}

00011c10 <feature_rsp_send>:
{
   11c10:	b538      	push	{r3, r4, r5, lr}
   11c12:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c14:	4812      	ldr	r0, [pc, #72]	; (11c60 <feature_rsp_send+0x50>)
   11c16:	f7fc fdc8 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   11c1a:	b1d8      	cbz	r0, 11c54 <feature_rsp_send+0x44>
   11c1c:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c1e:	7903      	ldrb	r3, [r0, #4]
   11c20:	f043 0303 	orr.w	r3, r3, #3
   11c24:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11c26:	2309      	movs	r3, #9
   11c28:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11c2a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   11c2c:	2208      	movs	r2, #8
   11c2e:	2100      	movs	r1, #0
   11c30:	4410      	add	r0, r2
   11c32:	f018 ff43 	bl	2aabc <memset>
		conn->llcp_features & 0xFF;
   11c36:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   11c3a:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11c3c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   11c40:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   11c42:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   11c44:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   11c48:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11c4a:	4621      	mov	r1, r4
   11c4c:	4628      	mov	r0, r5
   11c4e:	f7ff f87c 	bl	10d4a <ctrl_tx_sec_enqueue>
   11c52:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11c54:	4040      	eors	r0, r0
   11c56:	f380 8811 	msr	BASEPRI, r0
   11c5a:	f04f 0004 	mov.w	r0, #4
   11c5e:	df02      	svc	2
   11c60:	20000fe4 	.word	0x20000fe4

00011c64 <empty_tx_enqueue>:
{
   11c64:	b510      	push	{r4, lr}
   11c66:	4604      	mov	r4, r0
	conn->empty = 1;
   11c68:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11c70:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   11c74:	f7fc fffc 	bl	ec70 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11c78:	7803      	ldrb	r3, [r0, #0]
   11c7a:	2201      	movs	r2, #1
   11c7c:	f362 0301 	bfi	r3, r2, #0, #2
   11c80:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   11c82:	2300      	movs	r3, #0
   11c84:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   11c86:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11c8a:	b123      	cbz	r3, 11c96 <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   11c8c:	7803      	ldrb	r3, [r0, #0]
   11c8e:	f043 0310 	orr.w	r3, r3, #16
   11c92:	7003      	strb	r3, [r0, #0]
   11c94:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   11c96:	7803      	ldrb	r3, [r0, #0]
   11c98:	f36f 1304 	bfc	r3, #4, #1
   11c9c:	7003      	strb	r3, [r0, #0]
}
   11c9e:	bd10      	pop	{r4, pc}

00011ca0 <prepare_pdu_data_tx>:
{
   11ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ca2:	460c      	mov	r4, r1
	    conn->empty ||
   11ca4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   11ca8:	f012 0f80 	tst.w	r2, #128	; 0x80
   11cac:	d109      	bne.n	11cc2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11cae:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   11cb2:	b133      	cbz	r3, 11cc2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11cb4:	f012 0f08 	tst.w	r2, #8
   11cb8:	d00e      	beq.n	11cd8 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   11cba:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   11cbe:	4293      	cmp	r3, r2
   11cc0:	d00a      	beq.n	11cd8 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   11cc2:	f7ff ffcf 	bl	11c64 <empty_tx_enqueue>
   11cc6:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   11cc8:	7813      	ldrb	r3, [r2, #0]
   11cca:	f36f 1347 	bfc	r3, #5, #3
   11cce:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   11cd0:	2300      	movs	r3, #0
   11cd2:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   11cd4:	6022      	str	r2, [r4, #0]
   11cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11cd8:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   11cda:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11cde:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   11ce0:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   11ce4:	b911      	cbnz	r1, 11cec <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   11ce6:	7851      	ldrb	r1, [r2, #1]
   11ce8:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   11cec:	b126      	cbz	r6, 11cf8 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11cee:	5d99      	ldrb	r1, [r3, r6]
   11cf0:	2501      	movs	r5, #1
   11cf2:	f365 0101 	bfi	r1, r5, #0, #2
   11cf6:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11cf8:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   11cfc:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11d00:	1a6d      	subs	r5, r5, r1
   11d02:	b2ed      	uxtb	r5, r5
   11d04:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   11d06:	5d99      	ldrb	r1, [r3, r6]
   11d08:	f36f 1104 	bfc	r1, #4, #1
   11d0c:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   11d0e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   11d12:	f001 0107 	and.w	r1, r1, #7
   11d16:	2902      	cmp	r1, #2
   11d18:	d02d      	beq.n	11d76 <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   11d1a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11d1c:	08c9      	lsrs	r1, r1, #3
   11d1e:	390a      	subs	r1, #10
   11d20:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   11d22:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   11d26:	f017 0f20 	tst.w	r7, #32
   11d2a:	d001      	beq.n	11d30 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   11d2c:	3904      	subs	r1, #4
   11d2e:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   11d30:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   11d32:	42b9      	cmp	r1, r7
   11d34:	d800      	bhi.n	11d38 <prepare_pdu_data_tx+0x98>
   11d36:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   11d38:	b2ad      	uxth	r5, r5
   11d3a:	42af      	cmp	r7, r5
   11d3c:	d204      	bcs.n	11d48 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   11d3e:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   11d40:	5d99      	ldrb	r1, [r3, r6]
   11d42:	f041 0110 	orr.w	r1, r1, #16
   11d46:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   11d48:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   11d4c:	6809      	ldr	r1, [r1, #0]
   11d4e:	b119      	cbz	r1, 11d58 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   11d50:	5d99      	ldrb	r1, [r3, r6]
   11d52:	f041 0110 	orr.w	r1, r1, #16
   11d56:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   11d58:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11d5c:	2b00      	cmp	r3, #0
   11d5e:	d1b3      	bne.n	11cc8 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11d60:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11d64:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   11d68:	428b      	cmp	r3, r1
   11d6a:	d0ad      	beq.n	11cc8 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   11d6c:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   11d70:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   11d74:	e7a8      	b.n	11cc8 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   11d76:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11d78:	0889      	lsrs	r1, r1, #2
   11d7a:	390b      	subs	r1, #11
   11d7c:	b289      	uxth	r1, r1
			break;
   11d7e:	e7d0      	b.n	11d22 <prepare_pdu_data_tx+0x82>

00011d80 <version_ind_send>:
{
   11d80:	b510      	push	{r4, lr}
   11d82:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d84:	4810      	ldr	r0, [pc, #64]	; (11dc8 <version_ind_send+0x48>)
   11d86:	f7fc fd10 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   11d8a:	b1b8      	cbz	r0, 11dbc <version_ind_send+0x3c>
   11d8c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d8e:	7903      	ldrb	r3, [r0, #4]
   11d90:	f043 0303 	orr.w	r3, r3, #3
   11d94:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d96:	2306      	movs	r3, #6
   11d98:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11d9a:	230c      	movs	r3, #12
   11d9c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   11d9e:	2309      	movs	r3, #9
   11da0:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   11da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11da6:	7243      	strb	r3, [r0, #9]
   11da8:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   11daa:	72c3      	strb	r3, [r0, #11]
   11dac:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11dae:	4620      	mov	r0, r4
   11db0:	f7fe ffcb 	bl	10d4a <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   11db4:	4620      	mov	r0, r4
   11db6:	f7ff ff55 	bl	11c64 <empty_tx_enqueue>
   11dba:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11dbc:	4040      	eors	r0, r0
   11dbe:	f380 8811 	msr	BASEPRI, r0
   11dc2:	f04f 0004 	mov.w	r0, #4
   11dc6:	df02      	svc	2
   11dc8:	20000fe4 	.word	0x20000fe4

00011dcc <tx_packet_set>:
{
   11dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dce:	4605      	mov	r5, r0
   11dd0:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   11dd2:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   11dd4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   11dd8:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   11ddc:	09c9      	lsrs	r1, r1, #7
   11dde:	4620      	mov	r0, r4
   11de0:	f7fc fe60 	bl	eaa4 <radio_phy_set>
	if (conn->enc_tx) {
   11de4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11de8:	f013 0f20 	tst.w	r3, #32
   11dec:	d10a      	bne.n	11e04 <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   11dee:	0062      	lsls	r2, r4, #1
   11df0:	f042 0201 	orr.w	r2, r2, #1
   11df4:	b2f1      	uxtb	r1, r6
   11df6:	2008      	movs	r0, #8
   11df8:	f7fc fe98 	bl	eb2c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11dfc:	4638      	mov	r0, r7
   11dfe:	f7fc fecb 	bl	eb98 <radio_pkt_tx_set>
   11e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   11e04:	0062      	lsls	r2, r4, #1
   11e06:	1d31      	adds	r1, r6, #4
   11e08:	f042 0201 	orr.w	r2, r2, #1
   11e0c:	b2c9      	uxtb	r1, r1
   11e0e:	2008      	movs	r0, #8
   11e10:	f7fc fe8c 	bl	eb2c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   11e14:	4639      	mov	r1, r7
   11e16:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   11e1a:	f7fd f8f3 	bl	f004 <radio_ccm_tx_pkt_set>
   11e1e:	f7fc febb 	bl	eb98 <radio_pkt_tx_set>
   11e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e24 <chan_set>:
{
   11e24:	b510      	push	{r4, lr}
   11e26:	4604      	mov	r4, r0
	switch (chan) {
   11e28:	2826      	cmp	r0, #38	; 0x26
   11e2a:	d013      	beq.n	11e54 <chan_set+0x30>
   11e2c:	2827      	cmp	r0, #39	; 0x27
   11e2e:	d015      	beq.n	11e5c <chan_set+0x38>
   11e30:	2825      	cmp	r0, #37	; 0x25
   11e32:	d008      	beq.n	11e46 <chan_set+0x22>
		if (chan < 11) {
   11e34:	280a      	cmp	r0, #10
   11e36:	d915      	bls.n	11e64 <chan_set+0x40>
		} else if (chan < 40) {
   11e38:	2827      	cmp	r0, #39	; 0x27
   11e3a:	d818      	bhi.n	11e6e <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   11e3c:	3003      	adds	r0, #3
   11e3e:	0040      	lsls	r0, r0, #1
   11e40:	f7fc fe44 	bl	eacc <radio_freq_chan_set>
   11e44:	e002      	b.n	11e4c <chan_set+0x28>
		radio_freq_chan_set(2);
   11e46:	2002      	movs	r0, #2
   11e48:	f7fc fe40 	bl	eacc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11e4c:	4620      	mov	r0, r4
   11e4e:	f7fc fe43 	bl	ead8 <radio_whiten_iv_set>
   11e52:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   11e54:	201a      	movs	r0, #26
   11e56:	f7fc fe39 	bl	eacc <radio_freq_chan_set>
		break;
   11e5a:	e7f7      	b.n	11e4c <chan_set+0x28>
		radio_freq_chan_set(80);
   11e5c:	2050      	movs	r0, #80	; 0x50
   11e5e:	f7fc fe35 	bl	eacc <radio_freq_chan_set>
		break;
   11e62:	e7f3      	b.n	11e4c <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   11e64:	3002      	adds	r0, #2
   11e66:	0040      	lsls	r0, r0, #1
   11e68:	f7fc fe30 	bl	eacc <radio_freq_chan_set>
   11e6c:	e7ee      	b.n	11e4c <chan_set+0x28>
			LL_ASSERT(0);
   11e6e:	4040      	eors	r0, r0
   11e70:	f380 8811 	msr	BASEPRI, r0
   11e74:	f04f 0004 	mov.w	r0, #4
   11e78:	df02      	svc	2
	...

00011e7c <adv_setup>:
{
   11e7c:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   11e7e:	4a39      	ldr	r2, [pc, #228]	; (11f64 <adv_setup+0xe8>)
   11e80:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   11e84:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   11e88:	4293      	cmp	r3, r2
   11e8a:	d037      	beq.n	11efc <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   11e8c:	3301      	adds	r3, #1
   11e8e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11e90:	2b02      	cmp	r3, #2
   11e92:	d031      	beq.n	11ef8 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   11e94:	4a33      	ldr	r2, [pc, #204]	; (11f64 <adv_setup+0xe8>)
   11e96:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   11e9a:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   11e9c:	4a31      	ldr	r2, [pc, #196]	; (11f64 <adv_setup+0xe8>)
   11e9e:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   11ea2:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   11ea6:	4293      	cmp	r3, r2
   11ea8:	d007      	beq.n	11eba <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   11eaa:	3301      	adds	r3, #1
   11eac:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11eae:	2b02      	cmp	r3, #2
   11eb0:	d026      	beq.n	11f00 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   11eb2:	4a2c      	ldr	r2, [pc, #176]	; (11f64 <adv_setup+0xe8>)
   11eb4:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   11eb8:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   11eba:	4c2a      	ldr	r4, [pc, #168]	; (11f64 <adv_setup+0xe8>)
   11ebc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   11ec0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11ec4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11ec8:	3320      	adds	r3, #32
   11eca:	441c      	add	r4, r3
   11ecc:	1de5      	adds	r5, r4, #7
	if (upd) {
   11ece:	b9c9      	cbnz	r1, 11f04 <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   11ed0:	4628      	mov	r0, r5
   11ed2:	f7fc fe61 	bl	eb98 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   11ed6:	79e3      	ldrb	r3, [r4, #7]
   11ed8:	f003 030f 	and.w	r3, r3, #15
   11edc:	2b02      	cmp	r3, #2
   11ede:	d020      	beq.n	11f22 <adv_setup+0xa6>
   11ee0:	2b07      	cmp	r3, #7
   11ee2:	d01e      	beq.n	11f22 <adv_setup+0xa6>
		_radio.state = STATE_TX;
   11ee4:	2202      	movs	r2, #2
   11ee6:	4b1f      	ldr	r3, [pc, #124]	; (11f64 <adv_setup+0xe8>)
   11ee8:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   11eea:	2096      	movs	r0, #150	; 0x96
   11eec:	f7fc ff7a 	bl	ede4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   11ef0:	2000      	movs	r0, #0
   11ef2:	f7fc fec5 	bl	ec80 <radio_switch_complete_and_rx>
   11ef6:	e019      	b.n	11f2c <adv_setup+0xb0>
			first = 0;
   11ef8:	2300      	movs	r3, #0
   11efa:	e7cb      	b.n	11e94 <adv_setup+0x18>
	u8_t upd = 0;
   11efc:	2100      	movs	r1, #0
   11efe:	e7cd      	b.n	11e9c <adv_setup+0x20>
			first = 0;
   11f00:	2300      	movs	r3, #0
   11f02:	e7d6      	b.n	11eb2 <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   11f04:	4817      	ldr	r0, [pc, #92]	; (11f64 <adv_setup+0xe8>)
   11f06:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   11f0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11f0e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11f12:	3370      	adds	r3, #112	; 0x70
   11f14:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   11f16:	2206      	movs	r2, #6
   11f18:	1ca9      	adds	r1, r5, #2
   11f1a:	3009      	adds	r0, #9
   11f1c:	f7ee f9d0 	bl	2c0 <memcpy>
   11f20:	e7d6      	b.n	11ed0 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   11f22:	2203      	movs	r2, #3
   11f24:	4b0f      	ldr	r3, [pc, #60]	; (11f64 <adv_setup+0xe8>)
   11f26:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   11f28:	f7fc feba 	bl	eca0 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   11f2c:	4b0d      	ldr	r3, [pc, #52]	; (11f64 <adv_setup+0xe8>)
   11f2e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   11f32:	f3c2 0142 	ubfx	r1, r2, #1, #3
   11f36:	b2ca      	uxtb	r2, r1
   11f38:	4613      	mov	r3, r2
	chan = 0;
   11f3a:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   11f3c:	e002      	b.n	11f44 <adv_setup+0xc8>
		chan++;
   11f3e:	3001      	adds	r0, #1
   11f40:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   11f42:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   11f44:	f013 0f01 	tst.w	r3, #1
   11f48:	d0f9      	beq.n	11f3e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   11f4a:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   11f4c:	4b05      	ldr	r3, [pc, #20]	; (11f64 <adv_setup+0xe8>)
   11f4e:	400a      	ands	r2, r1
   11f50:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   11f54:	f362 0143 	bfi	r1, r2, #1, #3
   11f58:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   11f5c:	3025      	adds	r0, #37	; 0x25
   11f5e:	f7ff ff61 	bl	11e24 <chan_set>
   11f62:	bd38      	pop	{r3, r4, r5, pc}
   11f64:	20000e8c 	.word	0x20000e8c

00011f68 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   11f68:	b158      	cbz	r0, 11f82 <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   11f6a:	4b6c      	ldr	r3, [pc, #432]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11f6c:	7b9b      	ldrb	r3, [r3, #14]
   11f6e:	b2db      	uxtb	r3, r3
   11f70:	2b05      	cmp	r3, #5
   11f72:	d100      	bne.n	11f76 <ticker_stop_adv_stop+0xe>
   11f74:	4770      	bx	lr
   11f76:	4040      	eors	r0, r0
   11f78:	f380 8811 	msr	BASEPRI, r0
   11f7c:	f04f 0004 	mov.w	r0, #4
   11f80:	df02      	svc	2
{
   11f82:	b500      	push	{lr}
   11f84:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11f86:	4b65      	ldr	r3, [pc, #404]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11f88:	7b1b      	ldrb	r3, [r3, #12]
   11f8a:	b2db      	uxtb	r3, r3
   11f8c:	2b05      	cmp	r3, #5
   11f8e:	d010      	beq.n	11fb2 <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   11f90:	4b62      	ldr	r3, [pc, #392]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11f92:	7b5b      	ldrb	r3, [r3, #13]
   11f94:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11f96:	2b05      	cmp	r3, #5
   11f98:	d00b      	beq.n	11fb2 <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   11f9a:	4b61      	ldr	r3, [pc, #388]	; (12120 <ticker_stop_adv_stop+0x1b8>)
   11f9c:	2200      	movs	r2, #0
   11f9e:	4611      	mov	r1, r2
   11fa0:	2001      	movs	r0, #1
   11fa2:	f7fc fac1 	bl	e528 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11fa6:	2800      	cmp	r0, #0
   11fa8:	f040 80b1 	bne.w	1210e <ticker_stop_adv_stop+0x1a6>
}
   11fac:	b005      	add	sp, #20
   11fae:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11fb2:	ab04      	add	r3, sp, #16
   11fb4:	2202      	movs	r2, #2
   11fb6:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fba:	9300      	str	r3, [sp, #0]
   11fbc:	4b59      	ldr	r3, [pc, #356]	; (12124 <ticker_stop_adv_stop+0x1bc>)
   11fbe:	2200      	movs	r2, #0
   11fc0:	2101      	movs	r1, #1
   11fc2:	4610      	mov	r0, r2
   11fc4:	f7fe f95c 	bl	10280 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11fc8:	2802      	cmp	r0, #2
   11fca:	d02c      	beq.n	12026 <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11fcc:	9b02      	ldr	r3, [sp, #8]
   11fce:	2b00      	cmp	r3, #0
   11fd0:	d17e      	bne.n	120d0 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11fd2:	2302      	movs	r3, #2
   11fd4:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11fd6:	4b51      	ldr	r3, [pc, #324]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11fd8:	7b1b      	ldrb	r3, [r3, #12]
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d031      	beq.n	12042 <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   11fde:	2000      	movs	r0, #0
   11fe0:	4b4e      	ldr	r3, [pc, #312]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11fe2:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fe4:	ab03      	add	r3, sp, #12
   11fe6:	9300      	str	r3, [sp, #0]
   11fe8:	4b4e      	ldr	r3, [pc, #312]	; (12124 <ticker_stop_adv_stop+0x1bc>)
   11fea:	2201      	movs	r2, #1
   11fec:	4611      	mov	r1, r2
   11fee:	f7fe f947 	bl	10280 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11ff2:	2802      	cmp	r0, #2
   11ff4:	d02b      	beq.n	1204e <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11ff6:	9b03      	ldr	r3, [sp, #12]
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d144      	bne.n	12086 <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   11ffc:	4b47      	ldr	r3, [pc, #284]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   11ffe:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12000:	695b      	ldr	r3, [r3, #20]
   12002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12006:	429a      	cmp	r2, r3
   12008:	d92f      	bls.n	1206a <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   1200a:	4b47      	ldr	r3, [pc, #284]	; (12128 <ticker_stop_adv_stop+0x1c0>)
   1200c:	2200      	movs	r2, #0
   1200e:	4611      	mov	r1, r2
   12010:	2001      	movs	r0, #1
   12012:	f7fc fa89 	bl	e528 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12016:	2800      	cmp	r0, #0
   12018:	d0bf      	beq.n	11f9a <ticker_stop_adv_stop+0x32>
   1201a:	4040      	eors	r0, r0
   1201c:	f380 8811 	msr	BASEPRI, r0
   12020:	f04f 0004 	mov.w	r0, #4
   12024:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12026:	2201      	movs	r2, #1
   12028:	4611      	mov	r1, r2
   1202a:	4610      	mov	r0, r2
   1202c:	f7fc fa3e 	bl	e4ac <mayfly_enable>
   12030:	e003      	b.n	1203a <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12032:	2101      	movs	r1, #1
   12034:	2000      	movs	r0, #0
   12036:	f7fe f9df 	bl	103f8 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1203a:	9b02      	ldr	r3, [sp, #8]
   1203c:	2b02      	cmp	r3, #2
   1203e:	d0f8      	beq.n	12032 <ticker_stop_adv_stop+0xca>
   12040:	e7c4      	b.n	11fcc <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12042:	4040      	eors	r0, r0
   12044:	f380 8811 	msr	BASEPRI, r0
   12048:	f04f 0004 	mov.w	r0, #4
   1204c:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1204e:	2201      	movs	r2, #1
   12050:	4611      	mov	r1, r2
   12052:	4610      	mov	r0, r2
   12054:	f7fc fa2a 	bl	e4ac <mayfly_enable>
   12058:	e003      	b.n	12062 <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1205a:	2101      	movs	r1, #1
   1205c:	2000      	movs	r0, #0
   1205e:	f7fe f9cb 	bl	103f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12062:	9b03      	ldr	r3, [sp, #12]
   12064:	2b02      	cmp	r3, #2
   12066:	d0f8      	beq.n	1205a <ticker_stop_adv_stop+0xf2>
   12068:	e7c5      	b.n	11ff6 <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   1206a:	4b30      	ldr	r3, [pc, #192]	; (1212c <ticker_stop_adv_stop+0x1c4>)
   1206c:	2200      	movs	r2, #0
   1206e:	4611      	mov	r1, r2
   12070:	2001      	movs	r0, #1
   12072:	f7fc fa59 	bl	e528 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12076:	2800      	cmp	r0, #0
   12078:	d08f      	beq.n	11f9a <ticker_stop_adv_stop+0x32>
   1207a:	4040      	eors	r0, r0
   1207c:	f380 8811 	msr	BASEPRI, r0
   12080:	f04f 0004 	mov.w	r0, #4
   12084:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12086:	9b03      	ldr	r3, [sp, #12]
   12088:	2b01      	cmp	r3, #1
   1208a:	d11b      	bne.n	120c4 <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1208c:	4b26      	ldr	r3, [pc, #152]	; (12128 <ticker_stop_adv_stop+0x1c0>)
   1208e:	2200      	movs	r2, #0
   12090:	4611      	mov	r1, r2
   12092:	2001      	movs	r0, #1
   12094:	f7fc fa48 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12098:	b970      	cbnz	r0, 120b8 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1209a:	4b24      	ldr	r3, [pc, #144]	; (1212c <ticker_stop_adv_stop+0x1c4>)
   1209c:	2200      	movs	r2, #0
   1209e:	4611      	mov	r1, r2
   120a0:	2001      	movs	r0, #1
   120a2:	f7fc fa41 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   120a6:	2800      	cmp	r0, #0
   120a8:	f43f af77 	beq.w	11f9a <ticker_stop_adv_stop+0x32>
   120ac:	4040      	eors	r0, r0
   120ae:	f380 8811 	msr	BASEPRI, r0
   120b2:	f04f 0004 	mov.w	r0, #4
   120b6:	df02      	svc	2
			LL_ASSERT(!retval);
   120b8:	4040      	eors	r0, r0
   120ba:	f380 8811 	msr	BASEPRI, r0
   120be:	f04f 0004 	mov.w	r0, #4
   120c2:	df02      	svc	2
			LL_ASSERT(0);
   120c4:	4040      	eors	r0, r0
   120c6:	f380 8811 	msr	BASEPRI, r0
   120ca:	f04f 0004 	mov.w	r0, #4
   120ce:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   120d0:	9b02      	ldr	r3, [sp, #8]
   120d2:	2b01      	cmp	r3, #1
   120d4:	d115      	bne.n	12102 <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   120d6:	4b11      	ldr	r3, [pc, #68]	; (1211c <ticker_stop_adv_stop+0x1b4>)
   120d8:	7bdb      	ldrb	r3, [r3, #15]
   120da:	2b00      	cmp	r3, #0
   120dc:	f43f af5d 	beq.w	11f9a <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   120e0:	4b13      	ldr	r3, [pc, #76]	; (12130 <ticker_stop_adv_stop+0x1c8>)
   120e2:	2204      	movs	r2, #4
   120e4:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   120e6:	2200      	movs	r2, #0
   120e8:	4611      	mov	r1, r2
   120ea:	2001      	movs	r0, #1
   120ec:	f7fc fa1c 	bl	e528 <mayfly_enqueue>
			LL_ASSERT(!retval);
   120f0:	2800      	cmp	r0, #0
   120f2:	f43f af52 	beq.w	11f9a <ticker_stop_adv_stop+0x32>
   120f6:	4040      	eors	r0, r0
   120f8:	f380 8811 	msr	BASEPRI, r0
   120fc:	f04f 0004 	mov.w	r0, #4
   12100:	df02      	svc	2
		LL_ASSERT(0);
   12102:	4040      	eors	r0, r0
   12104:	f380 8811 	msr	BASEPRI, r0
   12108:	f04f 0004 	mov.w	r0, #4
   1210c:	df02      	svc	2
	LL_ASSERT(!retval);
   1210e:	4040      	eors	r0, r0
   12110:	f380 8811 	msr	BASEPRI, r0
   12114:	f04f 0004 	mov.w	r0, #4
   12118:	df02      	svc	2
   1211a:	bf00      	nop
   1211c:	20000e8c 	.word	0x20000e8c
   12120:	2000bbb0 	.word	0x2000bbb0
   12124:	00010b2d 	.word	0x00010b2d
   12128:	2000bbe0 	.word	0x2000bbe0
   1212c:	2000bca0 	.word	0x2000bca0
   12130:	2000bc10 	.word	0x2000bc10
   12134:	00000000 	.word	0x00000000

00012138 <sched_free_win_offset_calc>:
{
   12138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1213c:	b091      	sub	sp, #68	; 0x44
   1213e:	9009      	str	r0, [sp, #36]	; 0x24
   12140:	910a      	str	r1, [sp, #40]	; 0x28
   12142:	9207      	str	r2, [sp, #28]
   12144:	469b      	mov	fp, r3
   12146:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12148:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1214c:	6803      	ldr	r3, [r0, #0]
   1214e:	2b00      	cmp	r3, #0
   12150:	db0f      	blt.n	12172 <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12152:	2300      	movs	r3, #0
   12154:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12156:	27ff      	movs	r7, #255	; 0xff
   12158:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1215c:	2300      	movs	r3, #0
   1215e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12162:	930f      	str	r3, [sp, #60]	; 0x3c
   12164:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12166:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12168:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   1216a:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1216c:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1216e:	4698      	mov	r8, r3
   12170:	e06d      	b.n	1224e <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12172:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12174:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1217a:	4291      	cmp	r1, r2
   1217c:	bf2c      	ite	cs
   1217e:	1a5b      	subcs	r3, r3, r1
   12180:	1a9b      	subcc	r3, r3, r2
   12182:	930b      	str	r3, [sp, #44]	; 0x2c
   12184:	e7e7      	b.n	12156 <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12186:	2101      	movs	r1, #1
   12188:	2000      	movs	r0, #0
   1218a:	f7fe f935 	bl	103f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1218e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12190:	2b02      	cmp	r3, #2
   12192:	d0f8      	beq.n	12186 <sched_free_win_offset_calc+0x4e>
   12194:	e06c      	b.n	12270 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12196:	4040      	eors	r0, r0
   12198:	f380 8811 	msr	BASEPRI, r0
   1219c:	f04f 0004 	mov.w	r0, #4
   121a0:	df02      	svc	2
			LL_ASSERT(0);
   121a2:	4040      	eors	r0, r0
   121a4:	f380 8811 	msr	BASEPRI, r0
   121a8:	f04f 0004 	mov.w	r0, #4
   121ac:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   121ae:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   121b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   121b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   121ba:	4291      	cmp	r1, r2
   121bc:	bf2c      	ite	cs
   121be:	ebc3 0301 	rsbcs	r3, r3, r1
   121c2:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   121c6:	9a05      	ldr	r2, [sp, #20]
   121c8:	441a      	add	r2, r3
   121ca:	9205      	str	r2, [sp, #20]
   121cc:	e085      	b.n	122da <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   121ce:	2202      	movs	r2, #2
   121d0:	a90d      	add	r1, sp, #52	; 0x34
   121d2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   121d6:	f7ee f873 	bl	2c0 <memcpy>
					offset_index++;
   121da:	3401      	adds	r4, #1
   121dc:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   121de:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   121e0:	782b      	ldrb	r3, [r5, #0]
   121e2:	429c      	cmp	r4, r3
   121e4:	d21f      	bcs.n	12226 <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   121e6:	4639      	mov	r1, r7
   121e8:	9805      	ldr	r0, [sp, #20]
   121ea:	f7fe f919 	bl	10420 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   121ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   121f2:	4433      	add	r3, r6
   121f4:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   121f6:	4298      	cmp	r0, r3
   121f8:	d315      	bcc.n	12226 <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   121fa:	19bb      	adds	r3, r7, r6
   121fc:	485a      	ldr	r0, [pc, #360]	; (12368 <sched_free_win_offset_calc+0x230>)
   121fe:	fba3 0100 	umull	r0, r1, r3, r0
   12202:	2207      	movs	r2, #7
   12204:	fb02 1103 	mla	r1, r2, r3, r1
   12208:	a355      	add	r3, pc, #340	; (adr r3, 12360 <sched_free_win_offset_calc+0x228>)
   1220a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1220e:	f7ee ff75 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12212:	4b56      	ldr	r3, [pc, #344]	; (1236c <sched_free_win_offset_calc+0x234>)
   12214:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12218:	f3c0 208f 	ubfx	r0, r0, #10, #16
   1221c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12220:	4558      	cmp	r0, fp
   12222:	d3d4      	bcc.n	121ce <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12224:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12226:	9b07      	ldr	r3, [sp, #28]
   12228:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   1222a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1222e:	459b      	cmp	fp, r3
   12230:	d95e      	bls.n	122f0 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12232:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12236:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   1223a:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   1223e:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12240:	9b05      	ldr	r3, [sp, #20]
   12242:	9308      	str	r3, [sp, #32]
   12244:	e000      	b.n	12248 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12246:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12248:	782b      	ldrb	r3, [r5, #0]
   1224a:	429c      	cmp	r4, r3
   1224c:	d251      	bcs.n	122f2 <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1224e:	2302      	movs	r3, #2
   12250:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12252:	ab0c      	add	r3, sp, #48	; 0x30
   12254:	9302      	str	r3, [sp, #8]
   12256:	4b46      	ldr	r3, [pc, #280]	; (12370 <sched_free_win_offset_calc+0x238>)
   12258:	9301      	str	r3, [sp, #4]
   1225a:	ab0e      	add	r3, sp, #56	; 0x38
   1225c:	9300      	str	r3, [sp, #0]
   1225e:	ab0f      	add	r3, sp, #60	; 0x3c
   12260:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12264:	2101      	movs	r1, #1
   12266:	2000      	movs	r0, #0
   12268:	f7fe f846 	bl	102f8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1226c:	2802      	cmp	r0, #2
   1226e:	d08e      	beq.n	1218e <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12272:	2b00      	cmp	r3, #0
   12274:	d18f      	bne.n	12196 <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12276:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1227a:	2aff      	cmp	r2, #255	; 0xff
   1227c:	d039      	beq.n	122f2 <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   1227e:	2fff      	cmp	r7, #255	; 0xff
   12280:	d002      	beq.n	12288 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12284:	4598      	cmp	r8, r3
   12286:	d18c      	bne.n	121a2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12288:	2a05      	cmp	r2, #5
   1228a:	d9dd      	bls.n	12248 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   1228c:	4b39      	ldr	r3, [pc, #228]	; (12374 <sched_free_win_offset_calc+0x23c>)
   1228e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12292:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12294:	429a      	cmp	r2, r3
   12296:	dad7      	bge.n	12248 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12298:	2a06      	cmp	r2, #6
   1229a:	d9d4      	bls.n	12246 <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   1229c:	9b06      	ldr	r3, [sp, #24]
   1229e:	2bff      	cmp	r3, #255	; 0xff
   122a0:	d127      	bne.n	122f2 <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   122a2:	3a07      	subs	r2, #7
   122a4:	b292      	uxth	r2, r2
   122a6:	f44f 71aa 	mov.w	r1, #340	; 0x154
   122aa:	4b32      	ldr	r3, [pc, #200]	; (12374 <sched_free_win_offset_calc+0x23c>)
   122ac:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   122b0:	f7fc fab8 	bl	e824 <mem_get>
   122b4:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   122b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122b8:	4283      	cmp	r3, r0
   122ba:	d0c5      	beq.n	12248 <sched_free_win_offset_calc+0x110>
   122bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122be:	b91b      	cbnz	r3, 122c8 <sched_free_win_offset_calc+0x190>
   122c0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   122c4:	2b00      	cmp	r3, #0
   122c6:	dbbf      	blt.n	12248 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   122c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   122ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   122d0:	f8d9 3000 	ldr.w	r3, [r9]
   122d4:	2b00      	cmp	r3, #0
   122d6:	f6ff af6a 	blt.w	121ae <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   122da:	9b07      	ldr	r3, [sp, #28]
   122dc:	681f      	ldr	r7, [r3, #0]
   122de:	9b05      	ldr	r3, [sp, #20]
   122e0:	42bb      	cmp	r3, r7
   122e2:	d9a6      	bls.n	12232 <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   122e4:	9a08      	ldr	r2, [sp, #32]
   122e6:	42ba      	cmp	r2, r7
   122e8:	f4ff af7a 	bcc.w	121e0 <sched_free_win_offset_calc+0xa8>
   122ec:	4617      	mov	r7, r2
   122ee:	e777      	b.n	121e0 <sched_free_win_offset_calc+0xa8>
   122f0:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   122f2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   122f6:	2bff      	cmp	r3, #255	; 0xff
   122f8:	d003      	beq.n	12302 <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   122fa:	702c      	strb	r4, [r5, #0]
}
   122fc:	b011      	add	sp, #68	; 0x44
   122fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12302:	9b07      	ldr	r3, [sp, #28]
   12304:	681f      	ldr	r7, [r3, #0]
   12306:	9a08      	ldr	r2, [sp, #32]
   12308:	42ba      	cmp	r2, r7
   1230a:	d300      	bcc.n	1230e <sched_free_win_offset_calc+0x1d6>
   1230c:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   1230e:	782b      	ldrb	r3, [r5, #0]
   12310:	429c      	cmp	r4, r3
   12312:	d21f      	bcs.n	12354 <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12314:	19bb      	adds	r3, r7, r6
   12316:	4814      	ldr	r0, [pc, #80]	; (12368 <sched_free_win_offset_calc+0x230>)
   12318:	fba3 0100 	umull	r0, r1, r3, r0
   1231c:	2207      	movs	r2, #7
   1231e:	fb02 1103 	mla	r1, r2, r3, r1
   12322:	a30f      	add	r3, pc, #60	; (adr r3, 12360 <sched_free_win_offset_calc+0x228>)
   12324:	e9d3 2300 	ldrd	r2, r3, [r3]
   12328:	f7ee fee8 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   1232c:	4b0f      	ldr	r3, [pc, #60]	; (1236c <sched_free_win_offset_calc+0x234>)
   1232e:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12332:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12336:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   1233a:	459b      	cmp	fp, r3
   1233c:	d909      	bls.n	12352 <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   1233e:	2202      	movs	r2, #2
   12340:	a90d      	add	r1, sp, #52	; 0x34
   12342:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12346:	f7ed ffbb 	bl	2c0 <memcpy>
			offset_index++;
   1234a:	3401      	adds	r4, #1
   1234c:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   1234e:	3728      	adds	r7, #40	; 0x28
   12350:	e7dd      	b.n	1230e <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12352:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12354:	9b07      	ldr	r3, [sp, #28]
   12356:	601f      	str	r7, [r3, #0]
   12358:	e7cf      	b.n	122fa <sched_free_win_offset_calc+0x1c2>
   1235a:	bf00      	nop
   1235c:	f3af 8000 	nop.w
   12360:	3b9aca00 	.word	0x3b9aca00
   12364:	00000000 	.word	0x00000000
   12368:	1afd498d 	.word	0x1afd498d
   1236c:	d1b71759 	.word	0xd1b71759
   12370:	00010b2d 	.word	0x00010b2d
   12374:	20000e8c 	.word	0x20000e8c

00012378 <mayfly_sched_free_win_offset_calc>:
{
   12378:	b500      	push	{lr}
   1237a:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   1237c:	2300      	movs	r3, #0
   1237e:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12380:	2306      	movs	r3, #6
   12382:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12386:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1238a:	2b00      	cmp	r3, #0
   1238c:	db0e      	blt.n	123ac <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   1238e:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12390:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12394:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12398:	9101      	str	r1, [sp, #4]
   1239a:	f10d 010b 	add.w	r1, sp, #11
   1239e:	9100      	str	r1, [sp, #0]
   123a0:	2100      	movs	r1, #0
   123a2:	f7ff fec9 	bl	12138 <sched_free_win_offset_calc>
}
   123a6:	b005      	add	sp, #20
   123a8:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   123ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   123ae:	4602      	mov	r2, r0
   123b0:	f842 3fe4 	str.w	r3, [r2, #228]!
   123b4:	e7ec      	b.n	12390 <mayfly_sched_free_win_offset_calc+0x18>
	...

000123b8 <mayfly_sched_win_offset_select>:
{
   123b8:	b570      	push	{r4, r5, r6, lr}
   123ba:	b088      	sub	sp, #32
   123bc:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   123be:	ac05      	add	r4, sp, #20
   123c0:	2500      	movs	r5, #0
   123c2:	9505      	str	r5, [sp, #20]
   123c4:	9506      	str	r5, [sp, #24]
   123c6:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   123c8:	2306      	movs	r3, #6
   123ca:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   123ce:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   123d2:	4843      	ldr	r0, [pc, #268]	; (124e0 <mayfly_sched_win_offset_select+0x128>)
   123d4:	fba2 0100 	umull	r0, r1, r2, r0
   123d8:	f240 1323 	movw	r3, #291	; 0x123
   123dc:	fb03 1102 	mla	r1, r3, r2, r1
   123e0:	a33d      	add	r3, pc, #244	; (adr r3, 124d8 <mayfly_sched_win_offset_select+0x120>)
   123e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123e6:	f7ee fe89 	bl	10fc <__aeabi_uldivmod>
   123ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   123ee:	aa08      	add	r2, sp, #32
   123f0:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   123f4:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   123f8:	9401      	str	r4, [sp, #4]
   123fa:	f10d 0113 	add.w	r1, sp, #19
   123fe:	9100      	str	r1, [sp, #0]
   12400:	2101      	movs	r1, #1
   12402:	4630      	mov	r0, r6
   12404:	f7ff fe98 	bl	12138 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12408:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1240a:	e018      	b.n	1243e <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   1240c:	3301      	adds	r3, #1
   1240e:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12410:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12414:	428b      	cmp	r3, r1
   12416:	d20e      	bcs.n	12436 <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12418:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1241c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12420:	4282      	cmp	r2, r0
   12422:	d0f3      	beq.n	1240c <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12424:	a808      	add	r0, sp, #32
   12426:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1242a:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   1242e:	4282      	cmp	r2, r0
   12430:	d001      	beq.n	12436 <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12432:	2401      	movs	r4, #1
   12434:	e7ea      	b.n	1240c <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12436:	428b      	cmp	r3, r1
   12438:	d30e      	bcc.n	12458 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   1243a:	3501      	adds	r5, #1
   1243c:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1243e:	2d05      	cmp	r5, #5
   12440:	d80a      	bhi.n	12458 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   12442:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   12446:	2202      	movs	r2, #2
   12448:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   1244c:	f10d 000a 	add.w	r0, sp, #10
   12450:	f7ed ff36 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   12454:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   12456:	e7db      	b.n	12410 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12458:	2d05      	cmp	r5, #5
   1245a:	d91d      	bls.n	12498 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   1245c:	b35c      	cbz	r4, 124b6 <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   1245e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   12462:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   12466:	2200      	movs	r2, #0
   12468:	4b1e      	ldr	r3, [pc, #120]	; (124e4 <mayfly_sched_win_offset_select+0x12c>)
   1246a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   1246e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12472:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   12476:	f042 0203 	orr.w	r2, r2, #3
   1247a:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   1247e:	2203      	movs	r2, #3
   12480:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   12484:	2211      	movs	r2, #17
   12486:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1248a:	220f      	movs	r2, #15
   1248c:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   12490:	2220      	movs	r2, #32
   12492:	701a      	strb	r2, [r3, #0]
}
   12494:	b008      	add	sp, #32
   12496:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   12498:	a908      	add	r1, sp, #32
   1249a:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   1249e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   124a2:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   124a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   124aa:	2202      	movs	r2, #2
   124ac:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   124b0:	f7ed ff06 	bl	2c0 <memcpy>
   124b4:	e7ee      	b.n	12494 <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   124b6:	a908      	add	r1, sp, #32
   124b8:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   124bc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   124c0:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   124c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   124c8:	2202      	movs	r2, #2
   124ca:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   124ce:	f7ed fef7 	bl	2c0 <memcpy>
   124d2:	e7df      	b.n	12494 <mayfly_sched_win_offset_select+0xdc>
   124d4:	f3af 8000 	nop.w
   124d8:	1afd498d 	.word	0x1afd498d
   124dc:	00000007 	.word	0x00000007
   124e0:	09ce5400 	.word	0x09ce5400
   124e4:	20000e8c 	.word	0x20000e8c

000124e8 <sched_after_mstr_free_slot_get>:
{
   124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124ec:	b08b      	sub	sp, #44	; 0x2c
   124ee:	4604      	mov	r4, r0
   124f0:	468b      	mov	fp, r1
   124f2:	4615      	mov	r5, r2
   124f4:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   124f6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   124fa:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   124fe:	2300      	movs	r3, #0
   12500:	f8ca 3000 	str.w	r3, [sl]
   12504:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   12506:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12508:	9305      	str	r3, [sp, #20]
   1250a:	e01f      	b.n	1254c <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1250c:	4621      	mov	r1, r4
   1250e:	2000      	movs	r0, #0
   12510:	f7fd ff72 	bl	103f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12514:	9b07      	ldr	r3, [sp, #28]
   12516:	2b02      	cmp	r3, #2
   12518:	d0f8      	beq.n	1250c <sched_after_mstr_free_slot_get+0x24>
   1251a:	e028      	b.n	1256e <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1251c:	4040      	eors	r0, r0
   1251e:	f380 8811 	msr	BASEPRI, r0
   12522:	f04f 0004 	mov.w	r0, #4
   12526:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12528:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   1252a:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   1252c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12530:	4291      	cmp	r1, r2
   12532:	bf2c      	ite	cs
   12534:	ebc3 0301 	rsbcs	r3, r3, r1
   12538:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1253c:	4499      	add	r9, r3
   1253e:	e03a      	b.n	125b6 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   12540:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   12544:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   12546:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   12548:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1254c:	2302      	movs	r3, #2
   1254e:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12550:	ab07      	add	r3, sp, #28
   12552:	9302      	str	r3, [sp, #8]
   12554:	4b2c      	ldr	r3, [pc, #176]	; (12608 <sched_after_mstr_free_slot_get+0x120>)
   12556:	9301      	str	r3, [sp, #4]
   12558:	ab08      	add	r3, sp, #32
   1255a:	9300      	str	r3, [sp, #0]
   1255c:	462b      	mov	r3, r5
   1255e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12562:	4621      	mov	r1, r4
   12564:	2000      	movs	r0, #0
   12566:	f7fd fec7 	bl	102f8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1256a:	2802      	cmp	r0, #2
   1256c:	d0d2      	beq.n	12514 <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1256e:	9b07      	ldr	r3, [sp, #28]
   12570:	2b00      	cmp	r3, #0
   12572:	d1d3      	bne.n	1251c <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   12574:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12578:	2aff      	cmp	r2, #255	; 0xff
   1257a:	d028      	beq.n	125ce <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   1257c:	2a06      	cmp	r2, #6
   1257e:	d9e5      	bls.n	1254c <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   12580:	4b22      	ldr	r3, [pc, #136]	; (1260c <sched_after_mstr_free_slot_get+0x124>)
   12582:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12586:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12588:	429a      	cmp	r2, r3
   1258a:	dadf      	bge.n	1254c <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1258c:	3a07      	subs	r2, #7
   1258e:	b292      	uxth	r2, r2
   12590:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12594:	4b1d      	ldr	r3, [pc, #116]	; (1260c <sched_after_mstr_free_slot_get+0x124>)
   12596:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1259a:	f7fc f943 	bl	e824 <mem_get>
		if (conn && !conn->role) {
   1259e:	4606      	mov	r6, r0
   125a0:	2800      	cmp	r0, #0
   125a2:	d0d3      	beq.n	1254c <sched_after_mstr_free_slot_get+0x64>
   125a4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   125a8:	2b00      	cmp	r3, #0
   125aa:	dbcf      	blt.n	1254c <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   125ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   125b0:	6803      	ldr	r3, [r0, #0]
   125b2:	2b00      	cmp	r3, #0
   125b4:	dbb8      	blt.n	12528 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   125b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   125ba:	d0c1      	beq.n	12540 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   125bc:	9905      	ldr	r1, [sp, #20]
   125be:	4648      	mov	r0, r9
   125c0:	f7fd ff2e 	bl	10420 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   125c4:	eb07 030b 	add.w	r3, r7, fp
   125c8:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   125ca:	4298      	cmp	r0, r3
   125cc:	d9b8      	bls.n	12540 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   125ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   125d2:	d010      	beq.n	125f6 <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   125d4:	9b05      	ldr	r3, [sp, #20]
   125d6:	443b      	add	r3, r7
   125d8:	461f      	mov	r7, r3
   125da:	480d      	ldr	r0, [pc, #52]	; (12610 <sched_after_mstr_free_slot_get+0x128>)
   125dc:	fba3 0100 	umull	r0, r1, r3, r0
   125e0:	2307      	movs	r3, #7
   125e2:	fb03 1107 	mla	r1, r3, r7, r1
   125e6:	a306      	add	r3, pc, #24	; (adr r3, 12600 <sched_after_mstr_free_slot_get+0x118>)
   125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   125ec:	f7ee fd86 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   125f0:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   125f2:	f8ca 0000 	str.w	r0, [sl]
}
   125f6:	b00b      	add	sp, #44	; 0x2c
   125f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125fc:	f3af 8000 	nop.w
   12600:	3b9aca00 	.word	0x3b9aca00
   12604:	00000000 	.word	0x00000000
   12608:	00010b2d 	.word	0x00010b2d
   1260c:	20000e8c 	.word	0x20000e8c
   12610:	1afd498d 	.word	0x1afd498d
   12614:	00000000 	.word	0x00000000

00012618 <sched_after_mstr_free_offset_get>:
{
   12618:	b570      	push	{r4, r5, r6, lr}
   1261a:	b082      	sub	sp, #8
   1261c:	4606      	mov	r6, r0
   1261e:	4615      	mov	r5, r2
   12620:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   12622:	aa02      	add	r2, sp, #8
   12624:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   12628:	3127      	adds	r1, #39	; 0x27
   1262a:	2001      	movs	r0, #1
   1262c:	f7ff ff5c 	bl	124e8 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   12630:	9801      	ldr	r0, [sp, #4]
   12632:	4285      	cmp	r5, r0
   12634:	d011      	beq.n	1265a <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   12636:	4629      	mov	r1, r5
   12638:	f7fd fef2 	bl	10420 <ticker_ticks_diff_get>
   1263c:	4602      	mov	r2, r0
   1263e:	4810      	ldr	r0, [pc, #64]	; (12680 <sched_after_mstr_free_offset_get+0x68>)
   12640:	fba2 0100 	umull	r0, r1, r2, r0
   12644:	2307      	movs	r3, #7
   12646:	fb03 1102 	mla	r1, r3, r2, r1
   1264a:	a30b      	add	r3, pc, #44	; (adr r3, 12678 <sched_after_mstr_free_offset_get+0x60>)
   1264c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12650:	f7ee fd54 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   12654:	6823      	ldr	r3, [r4, #0]
   12656:	4418      	add	r0, r3
   12658:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   1265a:	6823      	ldr	r3, [r4, #0]
   1265c:	2b00      	cmp	r3, #0
   1265e:	db09      	blt.n	12674 <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   12660:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12664:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   12668:	e001      	b.n	1266e <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   1266a:	1a1b      	subs	r3, r3, r0
   1266c:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   1266e:	6823      	ldr	r3, [r4, #0]
   12670:	4298      	cmp	r0, r3
   12672:	d3fa      	bcc.n	1266a <sched_after_mstr_free_offset_get+0x52>
}
   12674:	b002      	add	sp, #8
   12676:	bd70      	pop	{r4, r5, r6, pc}
   12678:	3b9aca00 	.word	0x3b9aca00
   1267c:	00000000 	.word	0x00000000
   12680:	1afd498d 	.word	0x1afd498d

00012684 <mayfly_sched_win_offset_use>:
{
   12684:	b510      	push	{r4, lr}
   12686:	b082      	sub	sp, #8
   12688:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   1268a:	f100 0384 	add.w	r3, r0, #132	; 0x84
   1268e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   12692:	68c1      	ldr	r1, [r0, #12]
   12694:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   12696:	f7ff ffbf 	bl	12618 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1269a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1269e:	4a07      	ldr	r2, [pc, #28]	; (126bc <mayfly_sched_win_offset_use+0x38>)
   126a0:	fba2 2303 	umull	r2, r3, r2, r3
   126a4:	0a9b      	lsrs	r3, r3, #10
   126a6:	a902      	add	r1, sp, #8
   126a8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   126ac:	2202      	movs	r2, #2
   126ae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   126b2:	f7ed fe05 	bl	2c0 <memcpy>
}
   126b6:	b002      	add	sp, #8
   126b8:	bd10      	pop	{r4, pc}
   126ba:	bf00      	nop
   126bc:	d1b71759 	.word	0xd1b71759

000126c0 <mayfly_sched_after_mstr_free_offset_get>:
{
   126c0:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   126c2:	4c05      	ldr	r4, [pc, #20]	; (126d8 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   126c4:	f504 7380 	add.w	r3, r4, #256	; 0x100
   126c8:	4602      	mov	r2, r0
   126ca:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   126ce:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   126d2:	f7ff ffa1 	bl	12618 <sched_after_mstr_free_offset_get>
   126d6:	bd10      	pop	{r4, pc}
   126d8:	20000e8c 	.word	0x20000e8c

000126dc <enc_rsp_send>:
{
   126dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126e0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   126e2:	4818      	ldr	r0, [pc, #96]	; (12744 <enc_rsp_send+0x68>)
   126e4:	f7fc f861 	bl	e7aa <mem_acquire>
	LL_ASSERT(node_tx);
   126e8:	b330      	cbz	r0, 12738 <enc_rsp_send+0x5c>
   126ea:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   126ec:	7903      	ldrb	r3, [r0, #4]
   126ee:	f043 0303 	orr.w	r3, r3, #3
   126f2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   126f4:	230d      	movs	r3, #13
   126f6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   126f8:	2604      	movs	r6, #4
   126fa:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   126fc:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   12700:	4641      	mov	r1, r8
   12702:	2008      	movs	r0, #8
   12704:	f7fd faa2 	bl	fc4c <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   12708:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   1270c:	4639      	mov	r1, r7
   1270e:	4630      	mov	r0, r6
   12710:	f7fd fa9c 	bl	fc4c <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   12714:	2208      	movs	r2, #8
   12716:	4641      	mov	r1, r8
   12718:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   1271c:	f7ed fdd0 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   12720:	4632      	mov	r2, r6
   12722:	4639      	mov	r1, r7
   12724:	f505 708b 	add.w	r0, r5, #278	; 0x116
   12728:	f7ed fdca 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   1272c:	4621      	mov	r1, r4
   1272e:	4628      	mov	r0, r5
   12730:	f7fe facc 	bl	10ccc <ctrl_tx_enqueue>
   12734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   12738:	4040      	eors	r0, r0
   1273a:	f380 8811 	msr	BASEPRI, r0
   1273e:	f04f 0004 	mov.w	r0, #4
   12742:	df02      	svc	2
   12744:	20000fe4 	.word	0x20000fe4

00012748 <enc_req_reused_send>:
{
   12748:	b538      	push	{r3, r4, r5, lr}
   1274a:	4605      	mov	r5, r0
   1274c:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1274e:	790b      	ldrb	r3, [r1, #4]
   12750:	f043 0303 	orr.w	r3, r3, #3
   12754:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   12756:	2317      	movs	r3, #23
   12758:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1275a:	2303      	movs	r3, #3
   1275c:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   1275e:	2208      	movs	r2, #8
   12760:	f100 0179 	add.w	r1, r0, #121	; 0x79
   12764:	18a0      	adds	r0, r4, r2
   12766:	f7ed fdab 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   1276a:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   1276e:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   12770:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   12774:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   12776:	f104 0112 	add.w	r1, r4, #18
   1277a:	2008      	movs	r0, #8
   1277c:	f7fd fa66 	bl	fc4c <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   12780:	f104 011a 	add.w	r1, r4, #26
   12784:	2004      	movs	r0, #4
   12786:	f7fd fa61 	bl	fc4c <rand_isr_get>
   1278a:	bd38      	pop	{r3, r4, r5, pc}

0001278c <isr_rx_conn_pkt_ctrl>:
{
   1278c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12790:	b082      	sub	sp, #8
   12792:	4604      	mov	r4, r0
   12794:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   12796:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   1279a:	4ba0      	ldr	r3, [pc, #640]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   1279c:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   127a0:	f995 301d 	ldrsb.w	r3, [r5, #29]
   127a4:	2b00      	cmp	r3, #0
   127a6:	db11      	blt.n	127cc <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   127a8:	7ac1      	ldrb	r1, [r0, #11]
   127aa:	2918      	cmp	r1, #24
   127ac:	d82c      	bhi.n	12808 <isr_rx_conn_pkt_ctrl+0x7c>
   127ae:	e8df f001 	tbb	[pc, r1]
   127b2:	2323      	.short	0x2323
   127b4:	2b2b232b 	.word	0x2b2b232b
   127b8:	2b232b2b 	.word	0x2b232b2b
   127bc:	2b2b2b23 	.word	0x2b2b2b23
   127c0:	2b2b2b2b 	.word	0x2b2b2b2b
   127c4:	2b2b2b2b 	.word	0x2b2b2b2b
   127c8:	2b2b      	.short	0x2b2b
   127ca:	23          	.byte	0x23
   127cb:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   127cc:	7ac1      	ldrb	r1, [r0, #11]
   127ce:	1f0a      	subs	r2, r1, #4
   127d0:	2a15      	cmp	r2, #21
   127d2:	d819      	bhi.n	12808 <isr_rx_conn_pkt_ctrl+0x7c>
   127d4:	e8df f002 	tbb	[pc, r2]
   127d8:	18180b0b 	.word	0x18180b0b
   127dc:	18181818 	.word	0x18181818
   127e0:	180b1818 	.word	0x180b1818
   127e4:	1818180b 	.word	0x1818180b
   127e8:	0b181818 	.word	0x0b181818
   127ec:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   127ee:	4628      	mov	r0, r5
   127f0:	f7fe fcca 	bl	11188 <unknown_rsp_send>
			return 0;
   127f4:	2400      	movs	r4, #0
   127f6:	e003      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   127f8:	4628      	mov	r0, r5
   127fa:	f7fe fcc5 	bl	11188 <unknown_rsp_send>
			return 0;
   127fe:	2400      	movs	r4, #0
}
   12800:	4620      	mov	r0, r4
   12802:	b002      	add	sp, #8
   12804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   12808:	7ae1      	ldrb	r1, [r4, #11]
   1280a:	2919      	cmp	r1, #25
   1280c:	f200 87e6 	bhi.w	137dc <isr_rx_conn_pkt_ctrl+0x1050>
   12810:	e8df f011 	tbh	[pc, r1, lsl #1]
   12814:	002e001a 	.word	0x002e001a
   12818:	0042003d 	.word	0x0042003d
   1281c:	00800065 	.word	0x00800065
   12820:	04c60099 	.word	0x04c60099
   12824:	010600de 	.word	0x010600de
   12828:	014b012d 	.word	0x014b012d
   1282c:	01ad0170 	.word	0x01ad0170
   12830:	01c400de 	.word	0x01c400de
   12834:	0395032d 	.word	0x0395032d
   12838:	04c104bb 	.word	0x04c104bb
   1283c:	05180518 	.word	0x05180518
   12840:	06de0606 	.word	0x06de0606
   12844:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   12848:	4631      	mov	r1, r6
   1284a:	4628      	mov	r0, r5
   1284c:	f7fe fb90 	bl	10f70 <conn_update>
   12850:	b930      	cbnz	r0, 12860 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   12852:	4b72      	ldr	r3, [pc, #456]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12854:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12858:	2400      	movs	r4, #0
   1285a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1285e:	e7cf      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12860:	4b6e      	ldr	r3, [pc, #440]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12862:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12866:	2228      	movs	r2, #40	; 0x28
   12868:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1286c:	2400      	movs	r4, #0
   1286e:	e7c7      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   12870:	4631      	mov	r1, r6
   12872:	4628      	mov	r0, r5
   12874:	f7ff f99e 	bl	11bb4 <chan_map_update>
   12878:	2800      	cmp	r0, #0
   1287a:	f000 87b5 	beq.w	137e8 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1287e:	4b67      	ldr	r3, [pc, #412]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12880:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12884:	2228      	movs	r2, #40	; 0x28
   12886:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1288a:	2400      	movs	r4, #0
   1288c:	e7b8      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   1288e:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   12890:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   12894:	2400      	movs	r4, #0
		break;
   12896:	e7b3      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   12898:	2208      	movs	r2, #8
   1289a:	f104 0116 	add.w	r1, r4, #22
   1289e:	f105 0093 	add.w	r0, r5, #147	; 0x93
   128a2:	f7ed fd0d 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   128a6:	4d5d      	ldr	r5, [pc, #372]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   128a8:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   128ac:	2204      	movs	r2, #4
   128ae:	f104 011e 	add.w	r1, r4, #30
   128b2:	f500 7089 	add.w	r0, r0, #274	; 0x112
   128b6:	f7ed fd03 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   128ba:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   128be:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   128c2:	f043 0304 	orr.w	r3, r3, #4
   128c6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   128ca:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   128ce:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   128d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   128d6:	2301      	movs	r3, #1
   128d8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   128da:	2400      	movs	r4, #0
		break;
   128dc:	e790      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   128de:	2208      	movs	r2, #8
   128e0:	f104 010c 	add.w	r1, r4, #12
   128e4:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   128e8:	f7ed fcea 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   128ec:	4d4b      	ldr	r5, [pc, #300]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   128ee:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   128f2:	2204      	movs	r2, #4
   128f4:	f104 0114 	add.w	r1, r4, #20
   128f8:	f500 708b 	add.w	r0, r0, #278	; 0x116
   128fc:	f7ed fce0 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12900:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   12904:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12908:	f043 0304 	orr.w	r3, r3, #4
   1290c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   12910:	2400      	movs	r4, #0
		break;
   12912:	e775      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   12914:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12918:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1291c:	429a      	cmp	r2, r3
   1291e:	d10c      	bne.n	1293a <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12920:	2303      	movs	r3, #3
   12922:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   12926:	4b3d      	ldr	r3, [pc, #244]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12928:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1292c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   12930:	3b01      	subs	r3, #1
   12932:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   12936:	2400      	movs	r4, #0
		break;
   12938:	e762      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1293a:	4040      	eors	r0, r0
   1293c:	f380 8811 	msr	BASEPRI, r0
   12940:	f04f 0004 	mov.w	r0, #4
   12944:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   12946:	4b35      	ldr	r3, [pc, #212]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12948:	7bdb      	ldrb	r3, [r3, #15]
   1294a:	b2db      	uxtb	r3, r3
   1294c:	2b03      	cmp	r3, #3
   1294e:	d027      	beq.n	129a0 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   12950:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12954:	f36f 0382 	bfc	r3, #2, #1
   12958:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1295c:	4b2f      	ldr	r3, [pc, #188]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   1295e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12962:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12966:	f36f 02c3 	bfc	r2, #3, #1
   1296a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   1296e:	4b2b      	ldr	r3, [pc, #172]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12970:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12974:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12978:	f012 0f40 	tst.w	r2, #64	; 0x40
   1297c:	d007      	beq.n	1298e <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   1297e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12982:	f36f 1286 	bfc	r2, #6, #1
   12986:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1298a:	2309      	movs	r3, #9
   1298c:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   1298e:	2301      	movs	r3, #1
   12990:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   12992:	4b22      	ldr	r3, [pc, #136]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   12994:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12998:	2400      	movs	r4, #0
   1299a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1299e:	e72f      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   129a0:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   129a4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   129a8:	429a      	cmp	r2, r3
   129aa:	d10b      	bne.n	129c4 <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   129ac:	2303      	movs	r3, #3
   129ae:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   129b2:	4b1a      	ldr	r3, [pc, #104]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   129b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   129b8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   129bc:	3b01      	subs	r3, #1
   129be:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   129c2:	e7d4      	b.n	1296e <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   129c4:	4040      	eors	r0, r0
   129c6:	f380 8811 	msr	BASEPRI, r0
   129ca:	f04f 0004 	mov.w	r0, #4
   129ce:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   129d0:	7b23      	ldrb	r3, [r4, #12]
   129d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   129d6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   129da:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   129de:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   129e2:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   129e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   129e8:	7ba2      	ldrb	r2, [r4, #14]
   129ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   129ee:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   129f2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   129f6:	4013      	ands	r3, r2
   129f8:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   129fc:	4a07      	ldr	r2, [pc, #28]	; (12a1c <isr_rx_conn_pkt_ctrl+0x290>)
   129fe:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a02:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12a06:	f043 0320 	orr.w	r3, r3, #32
   12a0a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   12a0e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   12a12:	f7ff f8fd 	bl	11c10 <feature_rsp_send>
	u8_t nack = 0;
   12a16:	2400      	movs	r4, #0
	break;
   12a18:	e6f2      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
   12a1a:	bf00      	nop
   12a1c:	20000e8c 	.word	0x20000e8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12a20:	7b23      	ldrb	r3, [r4, #12]
   12a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12a26:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   12a2a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12a2e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   12a32:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12a38:	7ba2      	ldrb	r2, [r4, #14]
   12a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   12a3e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12a42:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12a46:	4013      	ands	r3, r2
   12a48:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12a4c:	4ad2      	ldr	r2, [pc, #840]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a4e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a52:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12a56:	f043 0320 	orr.w	r3, r3, #32
   12a5a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   12a5e:	2301      	movs	r3, #1
   12a60:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   12a62:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12a66:	2400      	movs	r4, #0
   12a68:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   12a6c:	e6c8      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   12a6e:	4628      	mov	r0, r5
   12a70:	f7fe fae8 	bl	11044 <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   12a74:	4bc8      	ldr	r3, [pc, #800]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a76:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12a7a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12a7e:	f042 0204 	orr.w	r2, r2, #4
   12a82:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   12a86:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12a8a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12a92:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   12a96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12a9e:	f36f 1204 	bfc	r2, #4, #1
   12aa2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12aa6:	2400      	movs	r4, #0
		break;
   12aa8:	e6aa      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   12aaa:	4bbb      	ldr	r3, [pc, #748]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12aac:	7bdb      	ldrb	r3, [r3, #15]
   12aae:	b2db      	uxtb	r3, r3
   12ab0:	2b04      	cmp	r3, #4
   12ab2:	d00a      	beq.n	12aca <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   12ab4:	4bb8      	ldr	r3, [pc, #736]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ab6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12aba:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12abe:	f36f 1245 	bfc	r2, #5, #1
   12ac2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12ac6:	2400      	movs	r4, #0
		break;
   12ac8:	e69a      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   12aca:	4628      	mov	r0, r5
   12acc:	f7fe faba 	bl	11044 <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   12ad0:	4ab1      	ldr	r2, [pc, #708]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ad2:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12ad6:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   12ada:	f043 0304 	orr.w	r3, r3, #4
   12ade:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   12ae2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12ae6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12aea:	f36f 1204 	bfc	r2, #4, #1
   12aee:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   12af2:	e7df      	b.n	12ab4 <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   12af4:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   12af6:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   12afa:	4ba7      	ldr	r3, [pc, #668]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12afc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   12b00:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   12b04:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   12b08:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   12b0c:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   12b10:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   12b14:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b18:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   12b1c:	f003 0303 	and.w	r3, r3, #3
   12b20:	2b01      	cmp	r3, #1
   12b22:	d011      	beq.n	12b48 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   12b24:	4a9c      	ldr	r2, [pc, #624]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b26:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12b2a:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   12b2e:	f043 0302 	orr.w	r3, r3, #2
   12b32:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   12b36:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12b3a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   12b3e:	f012 0f01 	tst.w	r2, #1
   12b42:	d009      	beq.n	12b58 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   12b44:	2400      	movs	r4, #0
   12b46:	e65b      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   12b48:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   12b4a:	4b93      	ldr	r3, [pc, #588]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b50:	2200      	movs	r2, #0
   12b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   12b56:	e7e5      	b.n	12b24 <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   12b58:	f042 0201 	orr.w	r2, r2, #1
   12b5c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   12b60:	4b8d      	ldr	r3, [pc, #564]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b62:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   12b66:	f7ff f90b 	bl	11d80 <version_ind_send>
	u8_t nack = 0;
   12b6a:	2400      	movs	r4, #0
   12b6c:	e648      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   12b6e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12b72:	f36f 0382 	bfc	r3, #2, #1
   12b76:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12b7a:	4b87      	ldr	r3, [pc, #540]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12b80:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   12b84:	f36f 01c3 	bfc	r1, #3, #1
   12b88:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12b8c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b90:	2400      	movs	r4, #0
   12b92:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12b96:	2301      	movs	r3, #1
   12b98:	703b      	strb	r3, [r7, #0]
		break;
   12b9a:	e631      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12b9c:	4a7e      	ldr	r2, [pc, #504]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b9e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12ba2:	b142      	cbz	r2, 12bb6 <isr_rx_conn_pkt_ctrl+0x42a>
   12ba4:	4295      	cmp	r5, r2
   12ba6:	d006      	beq.n	12bb6 <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   12ba8:	2220      	movs	r2, #32
   12baa:	210f      	movs	r1, #15
   12bac:	4628      	mov	r0, r5
   12bae:	f7fe faa5 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12bb2:	2400      	movs	r4, #0
			break;
   12bb4:	e624      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	f2c0 80bc 	blt.w	12d34 <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   12bbc:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   12bc0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   12bc4:	429a      	cmp	r2, r3
   12bc6:	d008      	beq.n	12bda <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   12bc8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12bcc:	f013 0307 	ands.w	r3, r3, #7
   12bd0:	d016      	beq.n	12c00 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   12bd2:	2b04      	cmp	r3, #4
   12bd4:	d014      	beq.n	12c00 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   12bd6:	2b05      	cmp	r3, #5
   12bd8:	d012      	beq.n	12c00 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12bda:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12bde:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12be2:	429a      	cmp	r2, r3
   12be4:	d105      	bne.n	12bf2 <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   12be6:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   12bea:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12bee:	429a      	cmp	r2, r3
   12bf0:	d00d      	beq.n	12c0e <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   12bf2:	222a      	movs	r2, #42	; 0x2a
   12bf4:	210f      	movs	r1, #15
   12bf6:	4628      	mov	r0, r5
   12bf8:	f7fe fa80 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12bfc:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12bfe:	e5ff      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   12c00:	2223      	movs	r2, #35	; 0x23
   12c02:	210f      	movs	r1, #15
   12c04:	4628      	mov	r0, r5
   12c06:	f7fe fa79 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12c0a:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12c0c:	e5f8      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   12c0e:	89a0      	ldrh	r0, [r4, #12]
   12c10:	b282      	uxth	r2, r0
   12c12:	2a05      	cmp	r2, #5
   12c14:	d970      	bls.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12c16:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   12c18:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12c1c:	d86c      	bhi.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12c1e:	429a      	cmp	r2, r3
   12c20:	d86a      	bhi.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   12c22:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   12c24:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12c28:	d266      	bcs.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12c2a:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   12c2c:	2909      	cmp	r1, #9
   12c2e:	d963      	bls.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12c30:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12c34:	d860      	bhi.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   12c36:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   12c3a:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12c3e:	da5b      	bge.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   12c40:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   12c42:	4293      	cmp	r3, r2
   12c44:	d358      	bcc.n	12cf8 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   12c46:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   12c4a:	8a23      	ldrh	r3, [r4, #16]
   12c4c:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   12c50:	8a62      	ldrh	r2, [r4, #18]
   12c52:	b293      	uxth	r3, r2
   12c54:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   12c58:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   12c5a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   12c5e:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   12c62:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   12c66:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12c6a:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   12c6e:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12c72:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   12c76:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12c7a:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   12c7e:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12c82:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   12c86:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12c8a:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   12c8e:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12c92:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   12c96:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12c9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   12c9c:	4291      	cmp	r1, r2
   12c9e:	d10f      	bne.n	12cc0 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12ca0:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12ca2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12ca6:	fb02 f201 	mul.w	r2, r2, r1
   12caa:	f242 7110 	movw	r1, #10000	; 0x2710
   12cae:	fb01 2303 	mla	r3, r1, r3, r2
   12cb2:	3b01      	subs	r3, #1
   12cb4:	fb93 f3f2 	sdiv	r3, r3, r2
   12cb8:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   12cba:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   12cbc:	4293      	cmp	r3, r2
   12cbe:	d02c      	beq.n	12d1a <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   12cc0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12cc4:	f013 0f08 	tst.w	r3, #8
   12cc8:	d01d      	beq.n	12d06 <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   12cca:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12cce:	2202      	movs	r2, #2
   12cd0:	f362 0302 	bfi	r3, r2, #0, #3
   12cd4:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   12cd8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12cdc:	3b01      	subs	r3, #1
   12cde:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   12ce2:	4b2d      	ldr	r3, [pc, #180]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ce4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12ce8:	2b00      	cmp	r3, #0
   12cea:	f040 8580 	bne.w	137ee <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   12cee:	4b2a      	ldr	r3, [pc, #168]	; (12d98 <isr_rx_conn_pkt_ctrl+0x60c>)
   12cf0:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12cf4:	2400      	movs	r4, #0
   12cf6:	e583      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   12cf8:	221e      	movs	r2, #30
   12cfa:	210f      	movs	r1, #15
   12cfc:	4628      	mov	r0, r5
   12cfe:	f7fe f9fd 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12d02:	2400      	movs	r4, #0
					break;
   12d04:	e57c      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   12d06:	2301      	movs	r3, #1
   12d08:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   12d0a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12d0e:	2203      	movs	r2, #3
   12d10:	f362 0302 	bfi	r3, r2, #0, #3
   12d14:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12d18:	e7de      	b.n	12cd8 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   12d1a:	2300      	movs	r3, #0
   12d1c:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   12d20:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   12d24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12d28:	2201      	movs	r2, #1
   12d2a:	f362 0302 	bfi	r3, r2, #0, #3
   12d2e:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12d32:	e7d1      	b.n	12cd8 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12d34:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12d38:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12d3c:	429a      	cmp	r2, r3
   12d3e:	d007      	beq.n	12d50 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   12d40:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12d44:	f013 0307 	ands.w	r3, r3, #7
   12d48:	d002      	beq.n	12d50 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   12d4a:	2b04      	cmp	r3, #4
   12d4c:	f040 8089 	bne.w	12e62 <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   12d50:	89a1      	ldrh	r1, [r4, #12]
   12d52:	b28a      	uxth	r2, r1
   12d54:	2a05      	cmp	r2, #5
   12d56:	d917      	bls.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12d58:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12d5a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12d5e:	d813      	bhi.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12d60:	429a      	cmp	r2, r3
   12d62:	d811      	bhi.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   12d64:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12d66:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12d6a:	d20d      	bcs.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d6c:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   12d6e:	2809      	cmp	r0, #9
   12d70:	d90a      	bls.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d72:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12d76:	d807      	bhi.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12d78:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d7c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   12d80:	da02      	bge.n	12d88 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12d82:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12d84:	4293      	cmp	r3, r2
   12d86:	d209      	bcs.n	12d9c <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   12d88:	221e      	movs	r2, #30
   12d8a:	210f      	movs	r1, #15
   12d8c:	4628      	mov	r0, r5
   12d8e:	f7fe f9b5 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12d92:	2400      	movs	r4, #0
				break;
   12d94:	e534      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
   12d96:	bf00      	nop
   12d98:	20000e8c 	.word	0x20000e8c
			conn->llcp_conn_param.interval = cpr->interval_min;
   12d9c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12da0:	8a23      	ldrh	r3, [r4, #16]
   12da2:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12da6:	8a62      	ldrh	r2, [r4, #18]
   12da8:	b293      	uxth	r3, r2
   12daa:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12dae:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12db0:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12db4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12db8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12dbc:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12dc0:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12dc4:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12dc8:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12dcc:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12dd0:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12dd4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12dd8:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12ddc:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12de0:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12de4:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12de8:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   12dec:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12df0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   12df2:	4291      	cmp	r1, r2
   12df4:	d013      	beq.n	12e1e <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   12df6:	2301      	movs	r3, #1
   12df8:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   12dfa:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12dfe:	2203      	movs	r2, #3
   12e00:	f362 0302 	bfi	r3, r2, #0, #3
   12e04:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   12e08:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12e0c:	3b01      	subs	r3, #1
   12e0e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   12e12:	4bcb      	ldr	r3, [pc, #812]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12e14:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12e18:	b1f3      	cbz	r3, 12e58 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   12e1a:	2400      	movs	r4, #0
   12e1c:	e4f0      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12e1e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12e20:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12e24:	fb02 f201 	mul.w	r2, r2, r1
   12e28:	f242 7110 	movw	r1, #10000	; 0x2710
   12e2c:	fb01 2303 	mla	r3, r1, r3, r2
   12e30:	3b01      	subs	r3, #1
   12e32:	fb93 f3f2 	sdiv	r3, r3, r2
   12e36:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   12e38:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   12e3a:	4293      	cmp	r3, r2
   12e3c:	d1db      	bne.n	12df6 <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   12e3e:	2300      	movs	r3, #0
   12e40:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   12e44:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   12e48:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12e4c:	2201      	movs	r2, #1
   12e4e:	f362 0302 	bfi	r3, r2, #0, #3
   12e52:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12e56:	e7d7      	b.n	12e08 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   12e58:	4bb9      	ldr	r3, [pc, #740]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12e5a:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12e5e:	2400      	movs	r4, #0
   12e60:	e4ce      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   12e62:	4040      	eors	r0, r0
   12e64:	f380 8811 	msr	BASEPRI, r0
   12e68:	f04f 0004 	mov.w	r0, #4
   12e6c:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   12e6e:	2b00      	cmp	r3, #0
   12e70:	f2c0 84c0 	blt.w	137f4 <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   12e74:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12e78:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   12e7c:	429a      	cmp	r2, r3
   12e7e:	f000 84bc 	beq.w	137fa <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   12e82:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12e86:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12e8a:	2b04      	cmp	r3, #4
   12e8c:	d001      	beq.n	12e92 <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   12e8e:	2400      	movs	r4, #0
   12e90:	e4b6      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   12e92:	89a2      	ldrh	r2, [r4, #12]
   12e94:	2a05      	cmp	r2, #5
   12e96:	d917      	bls.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12e98:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12e9a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12e9e:	d813      	bhi.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12ea0:	429a      	cmp	r2, r3
   12ea2:	d811      	bhi.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   12ea4:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12ea6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12eaa:	d20d      	bcs.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12eac:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   12eae:	2909      	cmp	r1, #9
   12eb0:	d90a      	bls.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12eb2:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12eb6:	d807      	bhi.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12eb8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12ebc:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12ec0:	da02      	bge.n	12ec8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12ec2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12ec4:	4293      	cmp	r3, r2
   12ec6:	d206      	bcs.n	12ed6 <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   12ec8:	221e      	movs	r2, #30
   12eca:	2110      	movs	r1, #16
   12ecc:	4628      	mov	r0, r5
   12ece:	f7fe f915 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   12ed2:	2400      	movs	r4, #0
				break;
   12ed4:	e494      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   12ed6:	2300      	movs	r3, #0
   12ed8:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   12edc:	89a2      	ldrh	r2, [r4, #12]
   12ede:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12ee2:	8a22      	ldrh	r2, [r4, #16]
   12ee4:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12ee8:	8a62      	ldrh	r2, [r4, #18]
   12eea:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12eee:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12ef0:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12ef4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12ef8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12efc:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12f00:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12f04:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12f08:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12f0c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12f10:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12f14:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12f18:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12f1c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12f20:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12f24:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12f28:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   12f2c:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   12f30:	2101      	movs	r1, #1
   12f32:	f361 0202 	bfi	r2, r1, #0, #3
   12f36:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   12f3a:	461c      	mov	r4, r3
   12f3c:	e460      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12f3e:	4b80      	ldr	r3, [pc, #512]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f44:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   12f48:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12f4c:	4291      	cmp	r1, r2
   12f4e:	d112      	bne.n	12f76 <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12f50:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   12f54:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12f58:	4291      	cmp	r1, r2
   12f5a:	d14c      	bne.n	12ff6 <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   12f5c:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   12f60:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   12f64:	4291      	cmp	r1, r2
   12f66:	f000 80ef 	beq.w	13148 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   12f6a:	7b21      	ldrb	r1, [r4, #12]
   12f6c:	2914      	cmp	r1, #20
   12f6e:	f000 80cb 	beq.w	13108 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   12f72:	2400      	movs	r4, #0
   12f74:	e444      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   12f76:	7b23      	ldrb	r3, [r4, #12]
   12f78:	2b16      	cmp	r3, #22
   12f7a:	d001      	beq.n	12f80 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   12f7c:	2400      	movs	r4, #0
   12f7e:	e43f      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   12f80:	7b63      	ldrb	r3, [r4, #13]
   12f82:	2b23      	cmp	r3, #35	; 0x23
   12f84:	d017      	beq.n	12fb6 <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   12f86:	4b6e      	ldr	r3, [pc, #440]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f88:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   12f8c:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   12f90:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   12f94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   12f98:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   12f9c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   12fa0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   12fa4:	f361 0002 	bfi	r0, r1, #0, #3
   12fa8:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   12fac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12fb0:	2200      	movs	r2, #0
   12fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   12fb6:	4b62      	ldr	r3, [pc, #392]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12fb8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12fbc:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   12fc0:	f013 0f02 	tst.w	r3, #2
   12fc4:	f000 841c 	beq.w	13800 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12fc8:	230c      	movs	r3, #12
   12fca:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   12fcc:	7b63      	ldrb	r3, [r4, #13]
   12fce:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   12fd0:	4a5b      	ldr	r2, [pc, #364]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12fd2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12fda:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12fde:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   12fe0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12fe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12fe8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12fec:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   12fee:	2301      	movs	r3, #1
   12ff0:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   12ff2:	2400      	movs	r4, #0
   12ff4:	e404      	b.n	12800 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   12ff6:	7b23      	ldrb	r3, [r4, #12]
   12ff8:	2b0f      	cmp	r3, #15
   12ffa:	d002      	beq.n	13002 <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   12ffc:	2400      	movs	r4, #0
   12ffe:	f7ff bbff 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13002:	4b4f      	ldr	r3, [pc, #316]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13004:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13008:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1300c:	2a00      	cmp	r2, #0
   1300e:	db02      	blt.n	13016 <isr_rx_conn_pkt_ctrl+0x88a>
   13010:	7b62      	ldrb	r2, [r4, #13]
   13012:	2a1a      	cmp	r2, #26
   13014:	d037      	beq.n	13086 <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13016:	7b62      	ldrb	r2, [r4, #13]
   13018:	2a23      	cmp	r2, #35	; 0x23
   1301a:	d012      	beq.n	13042 <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   1301c:	4a48      	ldr	r2, [pc, #288]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1301e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13022:	4293      	cmp	r3, r2
   13024:	d166      	bne.n	130f4 <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13026:	2200      	movs	r2, #0
   13028:	4945      	ldr	r1, [pc, #276]	; (13140 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1302a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   1302e:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13032:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   1303a:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1303e:	2a00      	cmp	r2, #0
   13040:	db5e      	blt.n	13100 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13042:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13046:	f012 0f08 	tst.w	r2, #8
   1304a:	f000 83dc 	beq.w	13806 <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1304e:	2208      	movs	r2, #8
   13050:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13052:	7b62      	ldrb	r2, [r4, #13]
   13054:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13056:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13058:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   1305a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1305c:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   1305e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13060:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13062:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13066:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   1306a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1306e:	4a35      	ldr	r2, [pc, #212]	; (13144 <isr_rx_conn_pkt_ctrl+0x9b8>)
   13070:	fb82 1203 	smull	r1, r2, r2, r3
   13074:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13076:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   1307a:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   1307c:	2301      	movs	r3, #1
   1307e:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13080:	2400      	movs	r4, #0
   13082:	f7ff bbbd 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13086:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1308a:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   1308e:	4282      	cmp	r2, r0
   13090:	d12a      	bne.n	130e8 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13092:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13096:	2105      	movs	r1, #5
   13098:	f361 0202 	bfi	r2, r1, #0, #3
   1309c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   130a0:	2501      	movs	r5, #1
   130a2:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   130a6:	2400      	movs	r4, #0
   130a8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   130ac:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   130b0:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   130b4:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   130b8:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   130bc:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   130c0:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   130c4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   130c8:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   130cc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   130d0:	406a      	eors	r2, r5
   130d2:	f362 0182 	bfi	r1, r2, #2, #1
   130d6:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   130da:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   130de:	3801      	subs	r0, #1
   130e0:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   130e4:	f7ff bb8c 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   130e8:	4040      	eors	r0, r0
   130ea:	f380 8811 	msr	BASEPRI, r0
   130ee:	f04f 0004 	mov.w	r0, #4
   130f2:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   130f4:	4040      	eors	r0, r0
   130f6:	f380 8811 	msr	BASEPRI, r0
   130fa:	f04f 0004 	mov.w	r0, #4
   130fe:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13100:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13104:	671a      	str	r2, [r3, #112]	; 0x70
   13106:	e79c      	b.n	13042 <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13108:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   1310c:	2200      	movs	r2, #0
   1310e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13112:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13116:	f362 01c3 	bfi	r1, r2, #3, #1
   1311a:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1311e:	2109      	movs	r1, #9
   13120:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13122:	2115      	movs	r1, #21
   13124:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13126:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13128:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1312a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   1312c:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   1312e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13130:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13132:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13134:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13136:	2301      	movs	r3, #1
   13138:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1313a:	4614      	mov	r4, r2
   1313c:	f7ff bb60 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13140:	20000e8c 	.word	0x20000e8c
   13144:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13148:	7b22      	ldrb	r2, [r4, #12]
   1314a:	2a03      	cmp	r2, #3
   1314c:	f040 835e 	bne.w	1380c <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13150:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13154:	f36f 0282 	bfc	r2, #2, #1
   13158:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1315c:	4bcb      	ldr	r3, [pc, #812]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   1315e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13162:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13166:	f36f 01c3 	bfc	r1, #3, #1
   1316a:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   1316e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13172:	2300      	movs	r3, #0
   13174:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13178:	220d      	movs	r2, #13
   1317a:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   1317c:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   1317e:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13180:	2201      	movs	r2, #1
   13182:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13184:	461c      	mov	r4, r3
   13186:	f7ff bb3b 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   1318a:	4628      	mov	r0, r5
   1318c:	f7fd ff76 	bl	1107c <ping_resp_send>
	u8_t nack = 0;
   13190:	2400      	movs	r4, #0
		break;
   13192:	f7ff bb35 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13196:	2400      	movs	r4, #0
   13198:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   1319c:	f7ff bb30 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   131a0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   131a4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   131a8:	4293      	cmp	r3, r2
   131aa:	d014      	beq.n	131d6 <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   131ac:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   131b0:	4bb6      	ldr	r3, [pc, #728]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   131b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   131b6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   131ba:	f36f 02c3 	bfc	r2, #3, #1
   131be:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   131c2:	2301      	movs	r3, #1
   131c4:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   131c6:	4bb1      	ldr	r3, [pc, #708]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   131c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   131cc:	2400      	movs	r4, #0
   131ce:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   131d2:	f7ff bb15 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   131d6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   131da:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   131de:	4293      	cmp	r3, r2
   131e0:	d02a      	beq.n	13238 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   131e2:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   131e6:	49a9      	ldr	r1, [pc, #676]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   131e8:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   131ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   131f0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   131f4:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   131f8:	f362 0002 	bfi	r0, r2, #0, #3
   131fc:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13200:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13204:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13208:	f013 0f02 	tst.w	r3, #2
   1320c:	d0db      	beq.n	131c6 <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   1320e:	230c      	movs	r3, #12
   13210:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13212:	2300      	movs	r3, #0
   13214:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13216:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   1321a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1321e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13222:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13224:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13228:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1322c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13230:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13232:	2301      	movs	r3, #1
   13234:	703b      	strb	r3, [r7, #0]
   13236:	e7c6      	b.n	131c6 <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13238:	7b23      	ldrb	r3, [r4, #12]
   1323a:	2b12      	cmp	r3, #18
   1323c:	d0c3      	beq.n	131c6 <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   1323e:	2301      	movs	r3, #1
   13240:	703b      	strb	r3, [r7, #0]
				break;
   13242:	e7c0      	b.n	131c6 <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13244:	4b91      	ldr	r3, [pc, #580]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13246:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1324a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   1324c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   1324e:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13252:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13256:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   1325a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   1325e:	429a      	cmp	r2, r3
   13260:	d020      	beq.n	132a4 <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13262:	429a      	cmp	r2, r3
   13264:	d007      	beq.n	13276 <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13266:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   1326a:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   1326e:	2b01      	cmp	r3, #1
   13270:	d960      	bls.n	13334 <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13272:	2b02      	cmp	r3, #2
   13274:	d062      	beq.n	1333c <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13276:	78f3      	ldrb	r3, [r6, #3]
   13278:	2b15      	cmp	r3, #21
   1327a:	f040 80cb 	bne.w	13414 <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   1327e:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13280:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13282:	2b14      	cmp	r3, #20
   13284:	f47f aabc 	bne.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13288:	2c00      	cmp	r4, #0
   1328a:	f47f aab9 	bne.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   1328e:	4b7f      	ldr	r3, [pc, #508]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13290:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13294:	f8cd 8000 	str.w	r8, [sp]
   13298:	462b      	mov	r3, r5
   1329a:	464a      	mov	r2, r9
   1329c:	f7fd ff0a 	bl	110b4 <length_resp_send>
		break;
   132a0:	f7ff baae 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   132a4:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   132a6:	2c14      	cmp	r4, #20
   132a8:	d1db      	bne.n	13262 <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   132aa:	88b3      	ldrh	r3, [r6, #4]
   132ac:	2b1a      	cmp	r3, #26
   132ae:	d903      	bls.n	132b8 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   132b0:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   132b2:	429d      	cmp	r5, r3
   132b4:	bf28      	it	cs
   132b6:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   132b8:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   132bc:	f1ba 0f1a 	cmp.w	sl, #26
   132c0:	d942      	bls.n	13348 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   132c2:	f1ba 0f1b 	cmp.w	sl, #27
   132c6:	bf28      	it	cs
   132c8:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   132cc:	88f3      	ldrh	r3, [r6, #6]
   132ce:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   132d2:	d304      	bcc.n	132de <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   132d4:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   132d8:	4598      	cmp	r8, r3
   132da:	bf28      	it	cs
   132dc:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   132de:	8973      	ldrh	r3, [r6, #10]
   132e0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   132e4:	d305      	bcc.n	132f2 <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   132e6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   132ea:	bf28      	it	cs
   132ec:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   132f0:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   132f2:	4551      	cmp	r1, sl
   132f4:	d066      	beq.n	133c4 <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   132f6:	4b65      	ldr	r3, [pc, #404]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   132f8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   132fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13300:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13302:	429a      	cmp	r2, r3
   13304:	d322      	bcc.n	1334c <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13306:	4b61      	ldr	r3, [pc, #388]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13308:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1330c:	1b14      	subs	r4, r2, r4
   1330e:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13310:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13312:	4b5e      	ldr	r3, [pc, #376]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13314:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13318:	f7fb fa7b 	bl	e812 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   1331c:	1823      	adds	r3, r4, r0
   1331e:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13320:	2bff      	cmp	r3, #255	; 0xff
   13322:	d81d      	bhi.n	13360 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13324:	4a59      	ldr	r2, [pc, #356]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13326:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   1332a:	4293      	cmp	r3, r2
   1332c:	d01e      	beq.n	1336c <isr_rx_conn_pkt_ctrl+0xbe0>
   1332e:	4651      	mov	r1, sl
				nack = 1;
   13330:	2401      	movs	r4, #1
   13332:	e7a5      	b.n	13280 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13334:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13336:	2a14      	cmp	r2, #20
   13338:	d19b      	bne.n	13272 <isr_rx_conn_pkt_ctrl+0xae6>
   1333a:	e7b6      	b.n	132aa <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   1333c:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   1333e:	3b14      	subs	r3, #20
   13340:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13342:	2b01      	cmp	r3, #1
   13344:	d897      	bhi.n	13276 <isr_rx_conn_pkt_ctrl+0xaea>
   13346:	e7b0      	b.n	132aa <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13348:	468a      	mov	sl, r1
   1334a:	e7bf      	b.n	132cc <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   1334c:	4b4f      	ldr	r3, [pc, #316]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   1334e:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13352:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13356:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13358:	fa52 f484 	uxtab	r4, r2, r4
   1335c:	b2e4      	uxtb	r4, r4
   1335e:	e7d7      	b.n	13310 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13360:	4040      	eors	r0, r0
   13362:	f380 8811 	msr	BASEPRI, r0
   13366:	f04f 0004 	mov.w	r0, #4
   1336a:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   1336c:	4b47      	ldr	r3, [pc, #284]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   1336e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13372:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13374:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13378:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   1337c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13380:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13384:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13388:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   1338c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13390:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13394:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13398:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   1339c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   133a0:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   133a4:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   133a6:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   133aa:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   133ae:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   133b2:	f042 0203 	orr.w	r2, r2, #3
   133b6:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   133ba:	2203      	movs	r2, #3
   133bc:	741a      	strb	r2, [r3, #16]
   133be:	4651      	mov	r1, sl
	u8_t nack = 0;
   133c0:	2400      	movs	r4, #0
   133c2:	e75d      	b.n	13280 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   133c4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   133c8:	f36f 03c3 	bfc	r3, #3, #1
   133cc:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   133d0:	4b2e      	ldr	r3, [pc, #184]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   133d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133d6:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   133d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133dc:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   133e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133e4:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   133e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   133ec:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   133f0:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   133f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133f8:	2400      	movs	r4, #0
   133fa:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   133fe:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13402:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13404:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13408:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   1340c:	2301      	movs	r3, #1
   1340e:	703b      	strb	r3, [r7, #0]
   13410:	4651      	mov	r1, sl
   13412:	e735      	b.n	13280 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13414:	4040      	eors	r0, r0
   13416:	f380 8811 	msr	BASEPRI, r0
   1341a:	f04f 0004 	mov.w	r0, #4
   1341e:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13420:	4b1a      	ldr	r3, [pc, #104]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   13422:	7bdb      	ldrb	r3, [r3, #15]
   13424:	b2db      	uxtb	r3, r3
   13426:	2b04      	cmp	r3, #4
   13428:	d032      	beq.n	13490 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   1342a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1342e:	2202      	movs	r2, #2
   13430:	f362 0301 	bfi	r3, r2, #0, #2
   13434:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13438:	4b14      	ldr	r3, [pc, #80]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   1343a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1343e:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   13442:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   13446:	428a      	cmp	r2, r1
   13448:	f000 8099 	beq.w	1357e <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1344c:	4a0f      	ldr	r2, [pc, #60]	; (1348c <isr_rx_conn_pkt_ctrl+0xd00>)
   1344e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13452:	7b61      	ldrb	r1, [r4, #13]
   13454:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13458:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1345c:	4029      	ands	r1, r5
   1345e:	f361 0384 	bfi	r3, r1, #2, #3
   13462:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13466:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1346a:	7b21      	ldrb	r1, [r4, #12]
   1346c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13470:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13474:	f361 1347 	bfi	r3, r1, #5, #3
   13478:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   1347c:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13480:	f7fd fe5c 	bl	1113c <phy_rsp_send>
	u8_t nack = 0;
   13484:	2400      	movs	r4, #0
   13486:	f7ff b9bb 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   1348a:	bf00      	nop
   1348c:	20000e8c 	.word	0x20000e8c
			if ((_radio.conn_curr->llcp_phy.ack !=
   13490:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   13494:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13498:	429a      	cmp	r2, r3
   1349a:	d007      	beq.n	134ac <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   1349c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   134a0:	f003 0303 	and.w	r3, r3, #3
   134a4:	3b01      	subs	r3, #1
   134a6:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   134a8:	2b02      	cmp	r3, #2
   134aa:	d913      	bls.n	134d4 <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   134ac:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   134b0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   134b4:	429a      	cmp	r2, r3
   134b6:	d105      	bne.n	134c4 <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   134b8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   134bc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   134c0:	429a      	cmp	r2, r3
   134c2:	d00f      	beq.n	134e4 <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   134c4:	222a      	movs	r2, #42	; 0x2a
   134c6:	2116      	movs	r1, #22
   134c8:	4628      	mov	r0, r5
   134ca:	f7fd fe17 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   134ce:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   134d0:	f7ff b996 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   134d4:	2223      	movs	r2, #35	; 0x23
   134d6:	2116      	movs	r1, #22
   134d8:	4628      	mov	r0, r5
   134da:	f7fd fe0f 	bl	110fc <reject_ext_ind_send>
	u8_t nack = 0;
   134de:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   134e0:	f7ff b98e 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   134e4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   134e8:	f043 0303 	orr.w	r3, r3, #3
   134ec:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   134f0:	4bce      	ldr	r3, [pc, #824]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   134f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   134f6:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   134fa:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   134fe:	428b      	cmp	r3, r1
   13500:	d01a      	beq.n	13538 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13502:	49ca      	ldr	r1, [pc, #808]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13504:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   13508:	7b62      	ldrb	r2, [r4, #13]
   1350a:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1350e:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13512:	402a      	ands	r2, r5
   13514:	f362 0384 	bfi	r3, r2, #2, #3
   13518:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1351c:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   13520:	7b22      	ldrb	r2, [r4, #12]
   13522:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   13526:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1352a:	f362 1347 	bfi	r3, r2, #5, #3
   1352e:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   13532:	2400      	movs	r4, #0
   13534:	f7ff b964 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13538:	3b01      	subs	r3, #1
   1353a:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   1353e:	4bbb      	ldr	r3, [pc, #748]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13540:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13544:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13548:	f36f 0141 	bfc	r1, #1, #1
   1354c:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   13550:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   13554:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   13558:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   1355c:	f360 0184 	bfi	r1, r0, #2, #3
   13560:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   13564:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   13568:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1356c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   13570:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   13574:	f362 1147 	bfi	r1, r2, #5, #3
   13578:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   1357c:	e7c1      	b.n	13502 <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   1357e:	3a01      	subs	r2, #1
   13580:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   13584:	4ba9      	ldr	r3, [pc, #676]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13586:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1358a:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   1358e:	f36f 0141 	bfc	r1, #1, #1
   13592:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   13596:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   1359a:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   1359e:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   135a2:	f360 0184 	bfi	r1, r0, #2, #3
   135a6:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   135aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   135ae:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   135b2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   135b6:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   135ba:	f361 1047 	bfi	r0, r1, #5, #3
   135be:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   135c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   135c6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   135ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   135ce:	e73d      	b.n	1344c <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   135d0:	4b96      	ldr	r3, [pc, #600]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   135d2:	7bdb      	ldrb	r3, [r3, #15]
   135d4:	b2db      	uxtb	r3, r3
   135d6:	2b04      	cmp	r3, #4
   135d8:	d002      	beq.n	135e0 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   135da:	2400      	movs	r4, #0
   135dc:	f7ff b910 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   135e0:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   135e4:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   135e8:	429a      	cmp	r2, r3
   135ea:	f000 8112 	beq.w	13812 <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   135ee:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   135f2:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   135f6:	2b02      	cmp	r3, #2
   135f8:	d002      	beq.n	13600 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   135fa:	2400      	movs	r4, #0
   135fc:	f7ff b900 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   13600:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13604:	f043 0303 	orr.w	r3, r3, #3
   13608:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1360c:	4a87      	ldr	r2, [pc, #540]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1360e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13612:	7b61      	ldrb	r1, [r4, #13]
   13614:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13618:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1361c:	4029      	ands	r1, r5
   1361e:	f361 0384 	bfi	r3, r1, #2, #3
   13622:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13626:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1362a:	7b21      	ldrb	r1, [r4, #12]
   1362c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13630:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13634:	f361 1347 	bfi	r3, r1, #5, #3
   13638:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   1363c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13640:	2400      	movs	r4, #0
   13642:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   13646:	f7ff b8db 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   1364a:	4b78      	ldr	r3, [pc, #480]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1364c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   13650:	7b23      	ldrb	r3, [r4, #12]
   13652:	7b61      	ldrb	r1, [r4, #13]
   13654:	430b      	orrs	r3, r1
   13656:	f013 0f07 	tst.w	r3, #7
   1365a:	d134      	bne.n	136c6 <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1365c:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   13660:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   13664:	428b      	cmp	r3, r1
   13666:	f000 8086 	beq.w	13776 <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1366a:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   1366e:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13672:	2b02      	cmp	r3, #2
   13674:	d00c      	beq.n	13690 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   13676:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   13678:	2b00      	cmp	r3, #0
   1367a:	f000 80cd 	beq.w	13818 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1367e:	4b6b      	ldr	r3, [pc, #428]	; (1382c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13680:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13684:	2228      	movs	r2, #40	; 0x28
   13686:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1368a:	2400      	movs	r4, #0
   1368c:	f7ff b8b8 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13690:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   13694:	2300      	movs	r3, #0
   13696:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   1369a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1369e:	f013 0f02 	tst.w	r3, #2
   136a2:	d06a      	beq.n	1377a <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   136a4:	230c      	movs	r3, #12
   136a6:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   136a8:	2300      	movs	r3, #0
   136aa:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   136ac:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   136b0:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   136b4:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   136b6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   136ba:	f3c2 0202 	ubfx	r2, r2, #0, #3
   136be:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   136c0:	2201      	movs	r2, #1
   136c2:	703a      	strb	r2, [r7, #0]
   136c4:	e7d8      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   136c6:	89e3      	ldrh	r3, [r4, #14]
   136c8:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   136ca:	1a5b      	subs	r3, r3, r1
   136cc:	b29b      	uxth	r3, r3
   136ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   136d2:	da54      	bge.n	1377e <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   136d4:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   136d8:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   136dc:	428b      	cmp	r3, r1
   136de:	d134      	bne.n	1374a <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   136e0:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   136e4:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   136e8:	4283      	cmp	r3, r0
   136ea:	d005      	beq.n	136f8 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   136ec:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   136f0:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   136f4:	2b02      	cmp	r3, #2
   136f6:	d02e      	beq.n	13756 <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   136f8:	7b60      	ldrb	r0, [r4, #13]
   136fa:	f000 0007 	and.w	r0, r0, #7
   136fe:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13702:	f360 0384 	bfi	r3, r0, #2, #3
   13706:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   1370a:	7b25      	ldrb	r5, [r4, #12]
   1370c:	b2db      	uxtb	r3, r3
   1370e:	f365 1347 	bfi	r3, r5, #5, #3
   13712:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   13716:	89e3      	ldrh	r3, [r4, #14]
   13718:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   1371c:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13720:	f36f 0300 	bfc	r3, #0, #1
   13724:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   13728:	2408      	movs	r4, #8
   1372a:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   1372e:	3901      	subs	r1, #1
   13730:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   13734:	f003 031c 	and.w	r3, r3, #28
   13738:	b31b      	cbz	r3, 13782 <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1373a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1373e:	f360 0302 	bfi	r3, r0, #0, #3
   13742:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   13746:	2300      	movs	r3, #0
   13748:	e796      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1374a:	4040      	eors	r0, r0
   1374c:	f380 8811 	msr	BASEPRI, r0
   13750:	f04f 0004 	mov.w	r0, #4
   13754:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13756:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1375a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1375e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13762:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   13766:	f363 0041 	bfi	r0, r3, #1, #1
   1376a:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   1376e:	2300      	movs	r3, #0
   13770:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   13774:	e7c0      	b.n	136f8 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   13776:	2300      	movs	r3, #0
   13778:	e77e      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   1377a:	2300      	movs	r3, #0
   1377c:	e77c      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   1377e:	2301      	movs	r3, #1
   13780:	e77a      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   13782:	2300      	movs	r3, #0
   13784:	e778      	b.n	13678 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   13786:	2b00      	cmp	r3, #0
   13788:	db49      	blt.n	1381e <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   1378a:	7b21      	ldrb	r1, [r4, #12]
   1378c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13790:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13794:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   13798:	f002 0207 	and.w	r2, r2, #7
   1379c:	4313      	orrs	r3, r2
   1379e:	4219      	tst	r1, r3
   137a0:	d040      	beq.n	13824 <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   137a2:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   137a6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   137aa:	429a      	cmp	r2, r3
   137ac:	d002      	beq.n	137b4 <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   137ae:	2400      	movs	r4, #0
   137b0:	f7ff b826 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   137b4:	2205      	movs	r2, #5
   137b6:	491e      	ldr	r1, [pc, #120]	; (13830 <isr_rx_conn_pkt_ctrl+0x10a4>)
   137b8:	f105 0079 	add.w	r0, r5, #121	; 0x79
   137bc:	f7ec fd80 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   137c0:	2301      	movs	r3, #1
   137c2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   137c6:	2302      	movs	r3, #2
   137c8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   137cc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   137d0:	3b01      	subs	r3, #1
   137d2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   137d6:	2400      	movs	r4, #0
   137d8:	f7ff b812 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   137dc:	4628      	mov	r0, r5
   137de:	f7fd fcd3 	bl	11188 <unknown_rsp_send>
	u8_t nack = 0;
   137e2:	2400      	movs	r4, #0
		break;
   137e4:	f7ff b80c 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   137e8:	2400      	movs	r4, #0
   137ea:	f7ff b809 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   137ee:	2400      	movs	r4, #0
   137f0:	f7ff b806 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   137f4:	2400      	movs	r4, #0
   137f6:	f7ff b803 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   137fa:	2400      	movs	r4, #0
   137fc:	f7ff b800 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13800:	2400      	movs	r4, #0
   13802:	f7fe bffd 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13806:	2400      	movs	r4, #0
   13808:	f7fe bffa 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   1380c:	2400      	movs	r4, #0
   1380e:	f7fe bff7 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13812:	2400      	movs	r4, #0
   13814:	f7fe bff4 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13818:	2400      	movs	r4, #0
   1381a:	f7fe bff1 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   1381e:	2400      	movs	r4, #0
   13820:	f7fe bfee 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   13824:	2400      	movs	r4, #0
   13826:	f7fe bfeb 	b.w	12800 <isr_rx_conn_pkt_ctrl+0x74>
   1382a:	bf00      	nop
   1382c:	20000e8c 	.word	0x20000e8c
   13830:	20000fa2 	.word	0x20000fa2

00013834 <packet_rx_enqueue>:
{
   13834:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   13836:	4a1a      	ldr	r2, [pc, #104]	; (138a0 <packet_rx_enqueue+0x6c>)
   13838:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   1383c:	b2db      	uxtb	r3, r3
   1383e:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   13842:	4293      	cmp	r3, r2
   13844:	d01d      	beq.n	13882 <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13846:	4a16      	ldr	r2, [pc, #88]	; (138a0 <packet_rx_enqueue+0x6c>)
   13848:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   1384c:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   13850:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   13854:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   13856:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   1385a:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   1385c:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   13860:	3301      	adds	r3, #1
   13862:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   13864:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   13868:	4293      	cmp	r3, r2
   1386a:	d010      	beq.n	1388e <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   1386c:	4a0c      	ldr	r2, [pc, #48]	; (138a0 <packet_rx_enqueue+0x6c>)
   1386e:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   13872:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   13876:	f7fb f800 	bl	e87a <memq_enqueue>
	LL_ASSERT(link);
   1387a:	b150      	cbz	r0, 13892 <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   1387c:	f7fe f871 	bl	11962 <packet_rx_callback>
   13880:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   13882:	4040      	eors	r0, r0
   13884:	f380 8811 	msr	BASEPRI, r0
   13888:	f04f 0004 	mov.w	r0, #4
   1388c:	df02      	svc	2
		last = 0;
   1388e:	2300      	movs	r3, #0
   13890:	e7ec      	b.n	1386c <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   13892:	4040      	eors	r0, r0
   13894:	f380 8811 	msr	BASEPRI, r0
   13898:	f04f 0004 	mov.w	r0, #4
   1389c:	df02      	svc	2
   1389e:	bf00      	nop
   138a0:	20000e8c 	.word	0x20000e8c

000138a4 <mayfly_adv_stop>:
{
   138a4:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   138a6:	4b1c      	ldr	r3, [pc, #112]	; (13918 <mayfly_adv_stop+0x74>)
   138a8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   138ac:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   138b0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   138b2:	429a      	cmp	r2, r3
   138b4:	d31d      	bcc.n	138f2 <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   138b6:	4b18      	ldr	r3, [pc, #96]	; (13918 <mayfly_adv_stop+0x74>)
   138b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   138bc:	1ad3      	subs	r3, r2, r3
   138be:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   138c0:	b30b      	cbz	r3, 13906 <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   138c2:	4b15      	ldr	r3, [pc, #84]	; (13918 <mayfly_adv_stop+0x74>)
   138c4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   138c8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   138cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   138d0:	b1dc      	cbz	r4, 1390a <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   138d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   138d6:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   138d8:	2306      	movs	r3, #6
   138da:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   138dc:	221d      	movs	r2, #29
   138de:	2100      	movs	r1, #0
   138e0:	f104 000b 	add.w	r0, r4, #11
   138e4:	f017 f8ea 	bl	2aabc <memset>
	radio_le_conn_cmplt->status = 0x3c;
   138e8:	233c      	movs	r3, #60	; 0x3c
   138ea:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   138ec:	f7ff ffa2 	bl	13834 <packet_rx_enqueue>
   138f0:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   138f2:	4909      	ldr	r1, [pc, #36]	; (13918 <mayfly_adv_stop+0x74>)
   138f4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   138f8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   138fc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   138fe:	fa52 f383 	uxtab	r3, r2, r3
   13902:	b2db      	uxtb	r3, r3
   13904:	e7dc      	b.n	138c0 <mayfly_adv_stop+0x1c>
		return 0;
   13906:	2400      	movs	r4, #0
   13908:	e7e2      	b.n	138d0 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   1390a:	4040      	eors	r0, r0
   1390c:	f380 8811 	msr	BASEPRI, r0
   13910:	f04f 0004 	mov.w	r0, #4
   13914:	df02      	svc	2
   13916:	bf00      	nop
   13918:	20000e8c 	.word	0x20000e8c

0001391c <terminate_ind_rx_enqueue>:
{
   1391c:	b510      	push	{r4, lr}
   1391e:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   13920:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   13924:	b1bc      	cbz	r4, 13956 <terminate_ind_rx_enqueue+0x3a>
   13926:	30b4      	adds	r0, #180	; 0xb4
   13928:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   1392a:	8c19      	ldrh	r1, [r3, #32]
   1392c:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13930:	2107      	movs	r1, #7
   13932:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   13936:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   1393a:	4a0d      	ldr	r2, [pc, #52]	; (13970 <terminate_ind_rx_enqueue+0x54>)
   1393c:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   13940:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   13944:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   13948:	4621      	mov	r1, r4
   1394a:	f7fa ff96 	bl	e87a <memq_enqueue>
	LL_ASSERT(link);
   1394e:	b140      	cbz	r0, 13962 <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   13950:	f7fe f807 	bl	11962 <packet_rx_callback>
   13954:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   13956:	4040      	eors	r0, r0
   13958:	f380 8811 	msr	BASEPRI, r0
   1395c:	f04f 0004 	mov.w	r0, #4
   13960:	df02      	svc	2
	LL_ASSERT(link);
   13962:	4040      	eors	r0, r0
   13964:	f380 8811 	msr	BASEPRI, r0
   13968:	f04f 0004 	mov.w	r0, #4
   1396c:	df02      	svc	2
   1396e:	bf00      	nop
   13970:	20000e8c 	.word	0x20000e8c

00013974 <isr_rx_scan_report>:
{
   13974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   13978:	4b31      	ldr	r3, [pc, #196]	; (13a40 <isr_rx_scan_report+0xcc>)
   1397a:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1397e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13982:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13984:	429c      	cmp	r4, r3
   13986:	d327      	bcc.n	139d8 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   13988:	4b2d      	ldr	r3, [pc, #180]	; (13a40 <isr_rx_scan_report+0xcc>)
   1398a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1398e:	1ae3      	subs	r3, r4, r3
   13990:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13992:	2b02      	cmp	r3, #2
   13994:	d92a      	bls.n	139ec <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   13996:	4b2a      	ldr	r3, [pc, #168]	; (13a40 <isr_rx_scan_report+0xcc>)
   13998:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   1399c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   139a0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   139a4:	2c00      	cmp	r4, #0
   139a6:	d047      	beq.n	13a38 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   139a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   139ac:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   139ae:	4b24      	ldr	r3, [pc, #144]	; (13a40 <isr_rx_scan_report+0xcc>)
   139b0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   139b4:	f013 0f07 	tst.w	r3, #7
   139b8:	d020      	beq.n	139fc <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   139ba:	4b21      	ldr	r3, [pc, #132]	; (13a40 <isr_rx_scan_report+0xcc>)
   139bc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   139c0:	f003 0307 	and.w	r3, r3, #7
   139c4:	2b01      	cmp	r3, #1
   139c6:	d013      	beq.n	139f0 <isr_rx_scan_report+0x7c>
   139c8:	2b04      	cmp	r3, #4
   139ca:	d014      	beq.n	139f6 <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   139cc:	4040      	eors	r0, r0
   139ce:	f380 8811 	msr	BASEPRI, r0
   139d2:	f04f 0004 	mov.w	r0, #4
   139d6:	df02      	svc	2
		return (_radio.packet_rx_count -
   139d8:	4d19      	ldr	r5, [pc, #100]	; (13a40 <isr_rx_scan_report+0xcc>)
   139da:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   139de:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   139e2:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   139e4:	fa54 f383 	uxtab	r3, r4, r3
   139e8:	b2db      	uxtb	r3, r3
   139ea:	e7d2      	b.n	13992 <isr_rx_scan_report+0x1e>
		return 0;
   139ec:	2400      	movs	r4, #0
   139ee:	e7d9      	b.n	139a4 <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   139f0:	2303      	movs	r3, #3
   139f2:	7123      	strb	r3, [r4, #4]
			break;
   139f4:	e004      	b.n	13a00 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   139f6:	2304      	movs	r3, #4
   139f8:	7123      	strb	r3, [r4, #4]
			break;
   139fa:	e001      	b.n	13a00 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   139fc:	2302      	movs	r3, #2
   139fe:	7123      	strb	r3, [r4, #4]
   13a00:	4615      	mov	r5, r2
   13a02:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   13a04:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   13a08:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13a0c:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   13a10:	b968      	cbnz	r0, 13a2e <isr_rx_scan_report+0xba>
   13a12:	207f      	movs	r0, #127	; 0x7f
   13a14:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   13a18:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13a1a:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   13a1c:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   13a1e:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13a20:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   13a22:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   13a24:	f7ff ff06 	bl	13834 <packet_rx_enqueue>
	return 0;
   13a28:	2000      	movs	r0, #0
   13a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   13a2e:	f7fb f949 	bl	ecc4 <radio_rssi_get>
			     pdu_adv_rx->len] =
   13a32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   13a36:	e7ed      	b.n	13a14 <isr_rx_scan_report+0xa0>
		return 1;
   13a38:	2001      	movs	r0, #1
}
   13a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a3e:	bf00      	nop
   13a40:	20000e8c 	.word	0x20000e8c

00013a44 <isr_rx_conn>:
{
   13a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a48:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   13a4a:	2300      	movs	r3, #0
   13a4c:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   13a50:	4bc1      	ldr	r3, [pc, #772]	; (13d58 <isr_rx_conn+0x314>)
   13a52:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   13a56:	3201      	adds	r2, #1
   13a58:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13a5c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13a60:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13a64:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13a68:	2301      	movs	r3, #1
   13a6a:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   13a6c:	4607      	mov	r7, r0
   13a6e:	2800      	cmp	r0, #0
   13a70:	d143      	bne.n	13afa <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   13a72:	4bb9      	ldr	r3, [pc, #740]	; (13d58 <isr_rx_conn+0x314>)
   13a74:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   13a78:	b91b      	cbnz	r3, 13a82 <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   13a7a:	2202      	movs	r2, #2
   13a7c:	4bb6      	ldr	r3, [pc, #728]	; (13d58 <isr_rx_conn+0x314>)
   13a7e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   13a82:	4bb5      	ldr	r3, [pc, #724]	; (13d58 <isr_rx_conn+0x314>)
   13a84:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   13a88:	3c01      	subs	r4, #1
   13a8a:	b2e4      	uxtb	r4, r4
   13a8c:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   13a90:	fab4 f484 	clz	r4, r4
   13a94:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   13a96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a9a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   13a9e:	2a00      	cmp	r2, #0
   13aa0:	f040 8387 	bne.w	141b2 <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   13aa4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   13aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   13aaa:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13aac:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 13d58 <isr_rx_conn+0x314>
   13ab0:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   13ab4:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   13ab8:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13abc:	a903      	add	r1, sp, #12
   13abe:	f7fe f8ef 	bl	11ca0 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13ac2:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   13ac6:	2b03      	cmp	r3, #3
   13ac8:	f000 8376 	beq.w	141b8 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13acc:	2c00      	cmp	r4, #0
   13ace:	f040 8372 	bne.w	141b6 <isr_rx_conn+0x772>
   13ad2:	b147      	cbz	r7, 13ae6 <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13ad4:	7a2b      	ldrb	r3, [r5, #8]
   13ad6:	f013 0f10 	tst.w	r3, #16
   13ada:	d104      	bne.n	13ae6 <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   13adc:	9b03      	ldr	r3, [sp, #12]
   13ade:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	f000 83aa 	beq.w	1423a <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13ae6:	4b9c      	ldr	r3, [pc, #624]	; (13d58 <isr_rx_conn+0x314>)
   13ae8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13aec:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   13af0:	2b00      	cmp	r3, #0
   13af2:	f000 83a4 	beq.w	1423e <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   13af6:	2303      	movs	r3, #3
   13af8:	e35e      	b.n	141b8 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13afa:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   13afe:	7a2a      	ldrb	r2, [r5, #8]
   13b00:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13b04:	4b94      	ldr	r3, [pc, #592]	; (13d58 <isr_rx_conn+0x314>)
   13b06:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13b0a:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13b0e:	f003 0301 	and.w	r3, r3, #1
   13b12:	429a      	cmp	r2, r3
   13b14:	f000 81cd 	beq.w	13eb2 <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   13b18:	f083 0301 	eor.w	r3, r3, #1
   13b1c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13b20:	f363 0200 	bfi	r2, r3, #0, #1
   13b24:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   13b28:	4b8b      	ldr	r3, [pc, #556]	; (13d58 <isr_rx_conn+0x314>)
   13b2a:	7bdb      	ldrb	r3, [r3, #15]
   13b2c:	b2db      	uxtb	r3, r3
   13b2e:	2b03      	cmp	r3, #3
   13b30:	d02c      	beq.n	13b8c <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   13b32:	4b89      	ldr	r3, [pc, #548]	; (13d58 <isr_rx_conn+0x314>)
   13b34:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b38:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13b3c:	f012 0f80 	tst.w	r2, #128	; 0x80
   13b40:	f040 81ae 	bne.w	13ea0 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   13b44:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   13b48:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   13b4c:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   13b50:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   13b54:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   13b58:	2c00      	cmp	r4, #0
   13b5a:	f000 8145 	beq.w	13de8 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   13b5e:	f012 0f20 	tst.w	r2, #32
   13b62:	d00a      	beq.n	13b7a <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   13b64:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   13b68:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   13b6c:	3001      	adds	r0, #1
   13b6e:	f141 0100 	adc.w	r1, r1, #0
   13b72:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   13b76:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13b7a:	f81c 300e 	ldrb.w	r3, [ip, lr]
   13b7e:	f003 0303 	and.w	r3, r3, #3
   13b82:	2b03      	cmp	r3, #3
   13b84:	d00c      	beq.n	13ba0 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   13b86:	f04f 0900 	mov.w	r9, #0
   13b8a:	e12e      	b.n	13dea <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   13b8c:	4b72      	ldr	r3, [pc, #456]	; (13d58 <isr_rx_conn+0x314>)
   13b8e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13b92:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   13b96:	f043 0301 	orr.w	r3, r3, #1
   13b9a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   13b9e:	e7c8      	b.n	13b32 <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   13ba0:	f899 3003 	ldrb.w	r3, [r9, #3]
   13ba4:	3b02      	subs	r3, #2
   13ba6:	2b16      	cmp	r3, #22
   13ba8:	f200 8118 	bhi.w	13ddc <isr_rx_conn+0x398>
   13bac:	e8df f013 	tbh	[pc, r3, lsl #1]
   13bb0:	00330017 	.word	0x00330017
   13bb4:	01160057 	.word	0x01160057
   13bb8:	01160116 	.word	0x01160116
   13bbc:	01160116 	.word	0x01160116
   13bc0:	007d0063 	.word	0x007d0063
   13bc4:	00970116 	.word	0x00970116
   13bc8:	01160116 	.word	0x01160116
   13bcc:	01160116 	.word	0x01160116
   13bd0:	01160116 	.word	0x01160116
   13bd4:	011600af 	.word	0x011600af
   13bd8:	00e000d6 	.word	0x00e000d6
   13bdc:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   13bde:	2203      	movs	r2, #3
   13be0:	4b5d      	ldr	r3, [pc, #372]	; (13d58 <isr_rx_conn+0x314>)
   13be2:	741a      	strb	r2, [r3, #16]
		radio_disable();
   13be4:	f7fa fff6 	bl	ebd4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13be8:	f7fb f80e 	bl	ec08 <radio_is_ready>
   13bec:	b958      	cbnz	r0, 13c06 <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13bee:	4b5a      	ldr	r3, [pc, #360]	; (13d58 <isr_rx_conn+0x314>)
   13bf0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   13bf4:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13bf8:	2913      	cmp	r1, #19
   13bfa:	d00a      	beq.n	13c12 <isr_rx_conn+0x1ce>
   13bfc:	f7ff fe8e 	bl	1391c <terminate_ind_rx_enqueue>
		terminate = 1;
   13c00:	f04f 0901 	mov.w	r9, #1
   13c04:	e0f1      	b.n	13dea <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   13c06:	4040      	eors	r0, r0
   13c08:	f380 8811 	msr	BASEPRI, r0
   13c0c:	f04f 0004 	mov.w	r0, #4
   13c10:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13c12:	2116      	movs	r1, #22
   13c14:	e7f2      	b.n	13bfc <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13c16:	f8df a140 	ldr.w	sl, [pc, #320]	; 13d58 <isr_rx_conn+0x314>
   13c1a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13c1e:	2208      	movs	r2, #8
   13c20:	f109 010e 	add.w	r1, r9, #14
   13c24:	3093      	adds	r0, #147	; 0x93
   13c26:	f7ec fb4b 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13c2a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13c2e:	2204      	movs	r2, #4
   13c30:	f109 0116 	add.w	r1, r9, #22
   13c34:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13c38:	f7ec fb42 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   13c3c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   13c40:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c44:	f043 0308 	orr.w	r3, r3, #8
   13c48:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13c4c:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13c50:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13c58:	f04f 0900 	mov.w	r9, #0
   13c5c:	e0c5      	b.n	13dea <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13c5e:	4b3e      	ldr	r3, [pc, #248]	; (13d58 <isr_rx_conn+0x314>)
   13c60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c64:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c68:	f043 0308 	orr.w	r3, r3, #8
   13c6c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13c70:	f04f 0900 	mov.w	r9, #0
   13c74:	e0b9      	b.n	13dea <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13c76:	4b38      	ldr	r3, [pc, #224]	; (13d58 <isr_rx_conn+0x314>)
   13c78:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13c7c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13c80:	f042 0208 	orr.w	r2, r2, #8
   13c84:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13c88:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13c8c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13c94:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13c98:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13c9c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13ca4:	f04f 0900 	mov.w	r9, #0
   13ca8:	e09f      	b.n	13dea <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   13caa:	4b2b      	ldr	r3, [pc, #172]	; (13d58 <isr_rx_conn+0x314>)
   13cac:	7bdb      	ldrb	r3, [r3, #15]
   13cae:	b2db      	uxtb	r3, r3
   13cb0:	2b04      	cmp	r3, #4
   13cb2:	d00b      	beq.n	13ccc <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   13cb4:	4b28      	ldr	r3, [pc, #160]	; (13d58 <isr_rx_conn+0x314>)
   13cb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13cba:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13cbe:	f043 0308 	orr.w	r3, r3, #8
   13cc2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13cc6:	f04f 0900 	mov.w	r9, #0
   13cca:	e08e      	b.n	13dea <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   13ccc:	4631      	mov	r1, r6
   13cce:	4b22      	ldr	r3, [pc, #136]	; (13d58 <isr_rx_conn+0x314>)
   13cd0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13cd4:	f7fe fd38 	bl	12748 <enc_req_reused_send>
			*node_tx = NULL;
   13cd8:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13cda:	46b1      	mov	r9, r6
   13cdc:	e085      	b.n	13dea <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   13cde:	4b1e      	ldr	r3, [pc, #120]	; (13d58 <isr_rx_conn+0x314>)
   13ce0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13ce4:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13ce8:	f36f 0182 	bfc	r1, #2, #1
   13cec:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13cf0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13cf4:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13cf8:	f36f 01c3 	bfc	r1, #3, #1
   13cfc:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13d00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d04:	f04f 0900 	mov.w	r9, #0
   13d08:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   13d0c:	e06d      	b.n	13dea <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   13d0e:	4b12      	ldr	r3, [pc, #72]	; (13d58 <isr_rx_conn+0x314>)
   13d10:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d14:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   13d18:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   13d1c:	4291      	cmp	r1, r2
   13d1e:	d060      	beq.n	13de2 <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   13d20:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13d24:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   13d28:	2a01      	cmp	r2, #1
   13d2a:	d002      	beq.n	13d32 <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   13d2c:	f04f 0900 	mov.w	r9, #0
   13d30:	e05b      	b.n	13dea <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   13d32:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d36:	f042 0208 	orr.w	r2, r2, #8
   13d3a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   13d3e:	4b06      	ldr	r3, [pc, #24]	; (13d58 <isr_rx_conn+0x314>)
   13d40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d44:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13d48:	2102      	movs	r1, #2
   13d4a:	f361 0201 	bfi	r2, r1, #0, #2
   13d4e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   13d52:	f04f 0900 	mov.w	r9, #0
   13d56:	e048      	b.n	13dea <isr_rx_conn+0x3a6>
   13d58:	20000e8c 	.word	0x20000e8c
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13d5c:	4bbe      	ldr	r3, [pc, #760]	; (14058 <isr_rx_conn+0x614>)
   13d5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d62:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   13d66:	2102      	movs	r1, #2
   13d68:	f361 0201 	bfi	r2, r1, #0, #2
   13d6c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   13d70:	4bb9      	ldr	r3, [pc, #740]	; (14058 <isr_rx_conn+0x614>)
   13d72:	7bdb      	ldrb	r3, [r3, #15]
   13d74:	b2db      	uxtb	r3, r3
   13d76:	2b03      	cmp	r3, #3
   13d78:	d002      	beq.n	13d80 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   13d7a:	f04f 0900 	mov.w	r9, #0
   13d7e:	e034      	b.n	13dea <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   13d80:	4ab6      	ldr	r2, [pc, #728]	; (1405c <isr_rx_conn+0x618>)
   13d82:	e892 0003 	ldmia.w	r2, {r0, r1}
   13d86:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   13d8a:	4bb3      	ldr	r3, [pc, #716]	; (14058 <isr_rx_conn+0x614>)
   13d8c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   13d90:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13d94:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13d98:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13d9c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   13da0:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   13da2:	a904      	add	r1, sp, #16
   13da4:	440b      	add	r3, r1
   13da6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   13daa:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13dae:	f361 0302 	bfi	r3, r1, #0, #3
   13db2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   13db6:	f04f 0900 	mov.w	r9, #0
   13dba:	e016      	b.n	13dea <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   13dbc:	4ba6      	ldr	r3, [pc, #664]	; (14058 <isr_rx_conn+0x614>)
   13dbe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   13dc2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   13dc6:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   13dca:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   13dce:	f362 0102 	bfi	r1, r2, #0, #3
   13dd2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   13dd6:	f04f 0900 	mov.w	r9, #0
   13dda:	e006      	b.n	13dea <isr_rx_conn+0x3a6>
   13ddc:	f04f 0900 	mov.w	r9, #0
   13de0:	e003      	b.n	13dea <isr_rx_conn+0x3a6>
   13de2:	f04f 0900 	mov.w	r9, #0
   13de6:	e000      	b.n	13dea <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   13de8:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13dea:	4b9b      	ldr	r3, [pc, #620]	; (14058 <isr_rx_conn+0x614>)
   13dec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13df0:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   13df4:	4414      	add	r4, r2
   13df6:	b2e4      	uxtb	r4, r4
   13df8:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   13dfc:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   13e00:	429c      	cmp	r4, r3
   13e02:	d01c      	beq.n	13e3e <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   13e04:	2600      	movs	r6, #0
	if (terminate) {
   13e06:	f1b9 0f00 	cmp.w	r9, #0
   13e0a:	d155      	bne.n	13eb8 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13e0c:	7a2a      	ldrb	r2, [r5, #8]
   13e0e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13e12:	4b91      	ldr	r3, [pc, #580]	; (14058 <isr_rx_conn+0x614>)
   13e14:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13e18:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13e1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13e20:	429a      	cmp	r2, r3
   13e22:	d053      	beq.n	13ecc <isr_rx_conn+0x488>
	return 0;
   13e24:	2300      	movs	r3, #0
		if (terminate) {
   13e26:	2b00      	cmp	r3, #0
   13e28:	f040 81f5 	bne.w	14216 <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   13e2c:	4b8a      	ldr	r3, [pc, #552]	; (14058 <isr_rx_conn+0x614>)
   13e2e:	2400      	movs	r4, #0
   13e30:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   13e34:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e38:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   13e3c:	e636      	b.n	13aac <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   13e3e:	4b86      	ldr	r3, [pc, #536]	; (14058 <isr_rx_conn+0x614>)
   13e40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   13e44:	2200      	movs	r2, #0
   13e46:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   13e4a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13e4e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   13e52:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   13e56:	428a      	cmp	r2, r1
   13e58:	d007      	beq.n	13e6a <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   13e5a:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   13e5e:	428a      	cmp	r2, r1
   13e60:	d01a      	beq.n	13e98 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13e62:	6812      	ldr	r2, [r2, #0]
   13e64:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   13e68:	e7cd      	b.n	13e06 <isr_rx_conn+0x3c2>
		if (node_tx) {
   13e6a:	2e00      	cmp	r6, #0
   13e6c:	d0cb      	beq.n	13e06 <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   13e6e:	6812      	ldr	r2, [r2, #0]
   13e70:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   13e74:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   13e78:	4281      	cmp	r1, r0
   13e7a:	d007      	beq.n	13e8c <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13e7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   13e80:	4977      	ldr	r1, [pc, #476]	; (14060 <isr_rx_conn+0x61c>)
   13e82:	4630      	mov	r0, r6
   13e84:	f7fa fcad 	bl	e7e2 <mem_release>
	return NULL;
   13e88:	2600      	movs	r6, #0
   13e8a:	e7bc      	b.n	13e06 <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   13e8c:	2200      	movs	r2, #0
   13e8e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   13e92:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   13e96:	e7f3      	b.n	13e80 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   13e98:	6809      	ldr	r1, [r1, #0]
   13e9a:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   13e9e:	e7e0      	b.n	13e62 <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   13ea0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13ea4:	f36f 12c7 	bfc	r2, #7, #1
   13ea8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   13eac:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13eae:	46b1      	mov	r9, r6
   13eb0:	e7a9      	b.n	13e06 <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   13eb2:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13eb4:	46b1      	mov	r9, r6
   13eb6:	e7a6      	b.n	13e06 <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   13eb8:	4c67      	ldr	r4, [pc, #412]	; (14058 <isr_rx_conn+0x614>)
   13eba:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13ebe:	f7fd fdd9 	bl	11a74 <connection_release>
		_radio.conn_curr = NULL;
   13ec2:	2300      	movs	r3, #0
   13ec4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   13ec8:	464b      	mov	r3, r9
   13eca:	e7ac      	b.n	13e26 <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   13ecc:	4a62      	ldr	r2, [pc, #392]	; (14058 <isr_rx_conn+0x614>)
   13ece:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13ed2:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   13ed6:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   13ed8:	4290      	cmp	r0, r2
   13eda:	d347      	bcc.n	13f6c <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   13edc:	4b5e      	ldr	r3, [pc, #376]	; (14058 <isr_rx_conn+0x614>)
   13ede:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13ee2:	1ac3      	subs	r3, r0, r3
   13ee4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13ee6:	2b02      	cmp	r3, #2
   13ee8:	d94a      	bls.n	13f80 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   13eea:	4b5b      	ldr	r3, [pc, #364]	; (14058 <isr_rx_conn+0x614>)
   13eec:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13ef0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13ef8:	2b00      	cmp	r3, #0
   13efa:	f000 814e 	beq.w	1419a <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   13efe:	4b56      	ldr	r3, [pc, #344]	; (14058 <isr_rx_conn+0x614>)
   13f00:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   13f04:	2b00      	cmp	r3, #0
   13f06:	d045      	beq.n	13f94 <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13f08:	4b53      	ldr	r3, [pc, #332]	; (14058 <isr_rx_conn+0x614>)
   13f0a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   13f0e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   13f12:	429a      	cmp	r2, r3
   13f14:	d036      	beq.n	13f84 <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13f16:	4b50      	ldr	r3, [pc, #320]	; (14058 <isr_rx_conn+0x614>)
   13f18:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   13f1c:	429a      	cmp	r2, r3
   13f1e:	f000 813e 	beq.w	1419e <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   13f22:	4a4d      	ldr	r2, [pc, #308]	; (14058 <isr_rx_conn+0x614>)
   13f24:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   13f28:	b2db      	uxtb	r3, r3
   13f2a:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13f2e:	4293      	cmp	r3, r2
   13f30:	f000 8137 	beq.w	141a2 <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   13f34:	4b48      	ldr	r3, [pc, #288]	; (14058 <isr_rx_conn+0x614>)
   13f36:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   13f3a:	b92b      	cbnz	r3, 13f48 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   13f3c:	4b46      	ldr	r3, [pc, #280]	; (14058 <isr_rx_conn+0x614>)
   13f3e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   13f42:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   13f44:	429a      	cmp	r2, r3
   13f46:	d025      	beq.n	13f94 <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   13f48:	4b43      	ldr	r3, [pc, #268]	; (14058 <isr_rx_conn+0x614>)
   13f4a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   13f4e:	2b00      	cmp	r3, #0
   13f50:	f000 8129 	beq.w	141a6 <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   13f54:	4b40      	ldr	r3, [pc, #256]	; (14058 <isr_rx_conn+0x614>)
   13f56:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   13f5a:	32b7      	adds	r2, #183	; 0xb7
   13f5c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   13f60:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   13f62:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   13f64:	429a      	cmp	r2, r3
   13f66:	d015      	beq.n	13f94 <isr_rx_conn+0x550>
	return 0;
   13f68:	2300      	movs	r3, #0
   13f6a:	e75c      	b.n	13e26 <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   13f6c:	4a3a      	ldr	r2, [pc, #232]	; (14058 <isr_rx_conn+0x614>)
   13f6e:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   13f72:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13f76:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   13f78:	fa50 f383 	uxtab	r3, r0, r3
   13f7c:	b2db      	uxtb	r3, r3
   13f7e:	e7b2      	b.n	13ee6 <isr_rx_conn+0x4a2>
		return 0;
   13f80:	2300      	movs	r3, #0
   13f82:	e7b9      	b.n	13ef8 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   13f84:	4834      	ldr	r0, [pc, #208]	; (14058 <isr_rx_conn+0x614>)
   13f86:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   13f8a:	b2db      	uxtb	r3, r3
   13f8c:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13f90:	4283      	cmp	r3, r0
   13f92:	d1c0      	bne.n	13f16 <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   13f94:	7a68      	ldrb	r0, [r5, #9]
   13f96:	2800      	cmp	r0, #0
   13f98:	f000 80b8 	beq.w	1410c <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   13f9c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13fa0:	f013 0f10 	tst.w	r3, #16
   13fa4:	d133      	bne.n	1400e <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   13fa6:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   13fa8:	4b2b      	ldr	r3, [pc, #172]	; (14058 <isr_rx_conn+0x614>)
   13faa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13fae:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13fb2:	f013 0f10 	tst.w	r3, #16
   13fb6:	d135      	bne.n	14024 <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   13fb8:	4b27      	ldr	r3, [pc, #156]	; (14058 <isr_rx_conn+0x614>)
   13fba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13fbe:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   13fc2:	f012 0f04 	tst.w	r2, #4
   13fc6:	f000 8082 	beq.w	140ce <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   13fca:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13fce:	7a2a      	ldrb	r2, [r5, #8]
   13fd0:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13fd4:	2a03      	cmp	r2, #3
   13fd6:	d02a      	beq.n	1402e <isr_rx_conn+0x5ea>
   13fd8:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   13fda:	2a00      	cmp	r2, #0
   13fdc:	d077      	beq.n	140ce <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   13fde:	2203      	movs	r2, #3
   13fe0:	4b1d      	ldr	r3, [pc, #116]	; (14058 <isr_rx_conn+0x614>)
   13fe2:	741a      	strb	r2, [r3, #16]
				radio_disable();
   13fe4:	f7fa fdf6 	bl	ebd4 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13fe8:	f7fa fe0e 	bl	ec08 <radio_is_ready>
   13fec:	2800      	cmp	r0, #0
   13fee:	d168      	bne.n	140c2 <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   13ff0:	4c19      	ldr	r4, [pc, #100]	; (14058 <isr_rx_conn+0x614>)
   13ff2:	213d      	movs	r1, #61	; 0x3d
   13ff4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13ff8:	f7ff fc90 	bl	1391c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   13ffc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14000:	f7fd fd38 	bl	11a74 <connection_release>
				_radio.conn_curr = NULL;
   14004:	2300      	movs	r3, #0
   14006:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   1400a:	2301      	movs	r3, #1
   1400c:	e70b      	b.n	13e26 <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   1400e:	f7fb f823 	bl	f058 <radio_ccm_is_done>
				LL_ASSERT(done);
   14012:	b108      	cbz	r0, 14018 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14014:	2401      	movs	r4, #1
   14016:	e7c7      	b.n	13fa8 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14018:	4040      	eors	r0, r0
   1401a:	f380 8811 	msr	BASEPRI, r0
   1401e:	f04f 0004 	mov.w	r0, #4
   14022:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14024:	f7fb f838 	bl	f098 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14028:	2800      	cmp	r0, #0
   1402a:	d0d8      	beq.n	13fde <isr_rx_conn+0x59a>
   1402c:	e7c4      	b.n	13fb8 <isr_rx_conn+0x574>
   1402e:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14032:	2a00      	cmp	r2, #0
   14034:	db1d      	blt.n	14072 <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14036:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   1403a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1403e:	d111      	bne.n	14064 <isr_rx_conn+0x620>
		((!conn->refresh &&
   14040:	2902      	cmp	r1, #2
   14042:	d00f      	beq.n	14064 <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14044:	2905      	cmp	r1, #5
   14046:	d014      	beq.n	14072 <isr_rx_conn+0x62e>
   14048:	2906      	cmp	r1, #6
   1404a:	d012      	beq.n	14072 <isr_rx_conn+0x62e>
   1404c:	290d      	cmp	r1, #13
   1404e:	d010      	beq.n	14072 <isr_rx_conn+0x62e>
   14050:	2911      	cmp	r1, #17
   14052:	d00e      	beq.n	14072 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14054:	2201      	movs	r2, #1
   14056:	e7c0      	b.n	13fda <isr_rx_conn+0x596>
   14058:	20000e8c 	.word	0x20000e8c
   1405c:	0002ee78 	.word	0x0002ee78
   14060:	20000fe4 	.word	0x20000fe4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14064:	b128      	cbz	r0, 14072 <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14066:	2902      	cmp	r1, #2
   14068:	d003      	beq.n	14072 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1406a:	290b      	cmp	r1, #11
   1406c:	d001      	beq.n	14072 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1406e:	2904      	cmp	r1, #4
   14070:	d1e8      	bne.n	14044 <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14072:	2a00      	cmp	r2, #0
   14074:	db01      	blt.n	1407a <isr_rx_conn+0x636>
   14076:	2200      	movs	r2, #0
   14078:	e7af      	b.n	13fda <isr_rx_conn+0x596>
		((!conn->refresh &&
   1407a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   1407e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14082:	d109      	bne.n	14098 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14084:	2902      	cmp	r1, #2
   14086:	d007      	beq.n	14098 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14088:	2906      	cmp	r1, #6
   1408a:	d014      	beq.n	140b6 <isr_rx_conn+0x672>
   1408c:	290d      	cmp	r1, #13
   1408e:	d014      	beq.n	140ba <isr_rx_conn+0x676>
   14090:	2911      	cmp	r1, #17
   14092:	d114      	bne.n	140be <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14094:	2200      	movs	r2, #0
   14096:	e7a0      	b.n	13fda <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14098:	b13a      	cbz	r2, 140aa <isr_rx_conn+0x666>
		 (conn->refresh &&
   1409a:	2902      	cmp	r1, #2
   1409c:	d007      	beq.n	140ae <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1409e:	290b      	cmp	r1, #11
   140a0:	d007      	beq.n	140b2 <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   140a2:	2903      	cmp	r1, #3
   140a4:	d1f0      	bne.n	14088 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   140a6:	2200      	movs	r2, #0
   140a8:	e797      	b.n	13fda <isr_rx_conn+0x596>
   140aa:	2200      	movs	r2, #0
   140ac:	e795      	b.n	13fda <isr_rx_conn+0x596>
   140ae:	2200      	movs	r2, #0
   140b0:	e793      	b.n	13fda <isr_rx_conn+0x596>
   140b2:	2200      	movs	r2, #0
   140b4:	e791      	b.n	13fda <isr_rx_conn+0x596>
   140b6:	2200      	movs	r2, #0
   140b8:	e78f      	b.n	13fda <isr_rx_conn+0x596>
   140ba:	2200      	movs	r2, #0
   140bc:	e78d      	b.n	13fda <isr_rx_conn+0x596>
   140be:	2201      	movs	r2, #1
   140c0:	e78b      	b.n	13fda <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   140c2:	4040      	eors	r0, r0
   140c4:	f380 8811 	msr	BASEPRI, r0
   140c8:	f04f 0004 	mov.w	r0, #4
   140cc:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   140ce:	2200      	movs	r2, #0
   140d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   140d4:	4b70      	ldr	r3, [pc, #448]	; (14298 <isr_rx_conn+0x854>)
   140d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   140da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   140de:	7a2b      	ldrb	r3, [r5, #8]
   140e0:	f013 0303 	ands.w	r3, r3, #3
   140e4:	d00c      	beq.n	14100 <isr_rx_conn+0x6bc>
   140e6:	2b02      	cmp	r3, #2
   140e8:	d905      	bls.n	140f6 <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   140ea:	f10d 010b 	add.w	r1, sp, #11
   140ee:	4628      	mov	r0, r5
   140f0:	f7fe fb4c 	bl	1278c <isr_rx_conn_pkt_ctrl>
   140f4:	e030      	b.n	14158 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   140f6:	2301      	movs	r3, #1
   140f8:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   140fc:	4648      	mov	r0, r9
   140fe:	e02b      	b.n	14158 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14100:	4040      	eors	r0, r0
   14102:	f380 8811 	msr	BASEPRI, r0
   14106:	f04f 0004 	mov.w	r0, #4
   1410a:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   1410c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14110:	f013 0f14 	tst.w	r3, #20
   14114:	d01f      	beq.n	14156 <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14116:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   1411a:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   1411c:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   1411e:	42a2      	cmp	r2, r4
   14120:	dd04      	ble.n	1412c <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14122:	1ad3      	subs	r3, r2, r3
   14124:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14126:	3b06      	subs	r3, #6
   14128:	b29b      	uxth	r3, r3
   1412a:	e000      	b.n	1412e <isr_rx_conn+0x6ea>
   1412c:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1412e:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14132:	429c      	cmp	r4, r3
   14134:	d004      	beq.n	14140 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14136:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   1413a:	2300      	movs	r3, #0
   1413c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14140:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14144:	bb3b      	cbnz	r3, 14196 <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14146:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   1414a:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   1414e:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14152:	4604      	mov	r4, r0
   14154:	e000      	b.n	14158 <isr_rx_conn+0x714>
   14156:	4604      	mov	r4, r0
		if (!nack) {
   14158:	bb38      	cbnz	r0, 141aa <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   1415a:	4b4f      	ldr	r3, [pc, #316]	; (14298 <isr_rx_conn+0x854>)
   1415c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14160:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14164:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14168:	f082 0201 	eor.w	r2, r2, #1
   1416c:	f362 0341 	bfi	r3, r2, #1, #1
   14170:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14174:	b1dc      	cbz	r4, 141ae <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14176:	4b48      	ldr	r3, [pc, #288]	; (14298 <isr_rx_conn+0x854>)
   14178:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1417c:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14180:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14184:	3201      	adds	r2, #1
   14186:	f143 0300 	adc.w	r3, r3, #0
   1418a:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   1418e:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14192:	2300      	movs	r3, #0
   14194:	e647      	b.n	13e26 <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14196:	4604      	mov	r4, r0
   14198:	e7de      	b.n	14158 <isr_rx_conn+0x714>
	return 0;
   1419a:	2300      	movs	r3, #0
   1419c:	e643      	b.n	13e26 <isr_rx_conn+0x3e2>
   1419e:	2300      	movs	r3, #0
   141a0:	e641      	b.n	13e26 <isr_rx_conn+0x3e2>
   141a2:	2300      	movs	r3, #0
   141a4:	e63f      	b.n	13e26 <isr_rx_conn+0x3e2>
   141a6:	2300      	movs	r3, #0
   141a8:	e63d      	b.n	13e26 <isr_rx_conn+0x3e2>
   141aa:	2300      	movs	r3, #0
   141ac:	e63b      	b.n	13e26 <isr_rx_conn+0x3e2>
   141ae:	2300      	movs	r3, #0
   141b0:	e639      	b.n	13e26 <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   141b2:	2600      	movs	r6, #0
   141b4:	e47a      	b.n	13aac <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   141b6:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   141b8:	4a37      	ldr	r2, [pc, #220]	; (14298 <isr_rx_conn+0x854>)
   141ba:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   141bc:	2b03      	cmp	r3, #3
   141be:	d040      	beq.n	14242 <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   141c0:	2096      	movs	r0, #150	; 0x96
   141c2:	f7fa fe0f 	bl	ede4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   141c6:	4b34      	ldr	r3, [pc, #208]	; (14298 <isr_rx_conn+0x854>)
   141c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   141cc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   141d0:	f000 0007 	and.w	r0, r0, #7
   141d4:	f7fa fd54 	bl	ec80 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   141d8:	f7fa febc 	bl	ef54 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   141dc:	9a03      	ldr	r2, [sp, #12]
   141de:	4b2e      	ldr	r3, [pc, #184]	; (14298 <isr_rx_conn+0x854>)
   141e0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   141e4:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   141e8:	7811      	ldrb	r1, [r2, #0]
   141ea:	f360 01c3 	bfi	r1, r0, #3, #1
   141ee:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   141f0:	9903      	ldr	r1, [sp, #12]
   141f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   141f6:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   141fa:	f3c2 0240 	ubfx	r2, r2, #1, #1
   141fe:	7808      	ldrb	r0, [r1, #0]
   14200:	f362 0082 	bfi	r0, r2, #2, #1
   14204:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14206:	9903      	ldr	r1, [sp, #12]
   14208:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1420c:	f7fd fdde 	bl	11dcc <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14210:	f7fa fcfa 	bl	ec08 <radio_is_ready>
   14214:	bb38      	cbnz	r0, 14266 <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14216:	f7fa fe91 	bl	ef3c <radio_tmr_aa_restore>
   1421a:	b350      	cbz	r0, 14272 <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   1421c:	4b1e      	ldr	r3, [pc, #120]	; (14298 <isr_rx_conn+0x854>)
   1421e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14222:	b13b      	cbz	r3, 14234 <isr_rx_conn+0x7f0>
	if (tx_release) {
   14224:	b11e      	cbz	r6, 1422e <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14226:	4631      	mov	r1, r6
   14228:	8c18      	ldrh	r0, [r3, #32]
   1422a:	f7fd fb9f 	bl	1196c <pdu_node_tx_release>
	if (rx_enqueue) {
   1422e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14232:	bb1b      	cbnz	r3, 1427c <isr_rx_conn+0x838>
}
   14234:	b004      	add	sp, #16
   14236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   1423a:	2303      	movs	r3, #3
   1423c:	e7bc      	b.n	141b8 <isr_rx_conn+0x774>
   1423e:	2302      	movs	r3, #2
   14240:	e7ba      	b.n	141b8 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14242:	7bd3      	ldrb	r3, [r2, #15]
   14244:	b2db      	uxtb	r3, r3
   14246:	2b04      	cmp	r3, #4
   14248:	d002      	beq.n	14250 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   1424a:	f7fa fd29 	bl	eca0 <radio_switch_complete_and_disable>
   1424e:	e7c5      	b.n	141dc <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14250:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14254:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14258:	f368 12c7 	bfi	r2, r8, #7, #1
   1425c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14260:	f7fa fcb8 	bl	ebd4 <radio_disable>
			goto isr_rx_conn_exit;
   14264:	e7d7      	b.n	14216 <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14266:	4040      	eors	r0, r0
   14268:	f380 8811 	msr	BASEPRI, r0
   1426c:	f04f 0004 	mov.w	r0, #4
   14270:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14272:	f7fa fe57 	bl	ef24 <radio_tmr_aa_get>
   14276:	f7fa fe5b 	bl	ef30 <radio_tmr_aa_save>
   1427a:	e7cf      	b.n	1421c <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   1427c:	4c06      	ldr	r4, [pc, #24]	; (14298 <isr_rx_conn+0x854>)
   1427e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14282:	8c18      	ldrh	r0, [r3, #32]
   14284:	f7fc fdec 	bl	10e60 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14288:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1428c:	8c1b      	ldrh	r3, [r3, #32]
   1428e:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14290:	f7ff fad0 	bl	13834 <packet_rx_enqueue>
	return;
   14294:	e7ce      	b.n	14234 <isr_rx_conn+0x7f0>
   14296:	bf00      	nop
   14298:	20000e8c 	.word	0x20000e8c

0001429c <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1429c:	6803      	ldr	r3, [r0, #0]
   1429e:	2b00      	cmp	r3, #0
   142a0:	db00      	blt.n	142a4 <prepare_normal_set+0x8>
   142a2:	4770      	bx	lr
{
   142a4:	b530      	push	{r4, r5, lr}
   142a6:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   142a8:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   142aa:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   142ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   142b0:	42a5      	cmp	r5, r4
   142b2:	bf2c      	ite	cs
   142b4:	1b5b      	subcs	r3, r3, r5
   142b6:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   142b8:	b29b      	uxth	r3, r3
		ticker_status =
   142ba:	9006      	str	r0, [sp, #24]
   142bc:	480a      	ldr	r0, [pc, #40]	; (142e8 <prepare_normal_set+0x4c>)
   142be:	9005      	str	r0, [sp, #20]
   142c0:	2000      	movs	r0, #0
   142c2:	9004      	str	r0, [sp, #16]
   142c4:	9003      	str	r0, [sp, #12]
   142c6:	9002      	str	r0, [sp, #8]
   142c8:	9301      	str	r3, [sp, #4]
   142ca:	9300      	str	r3, [sp, #0]
   142cc:	4603      	mov	r3, r0
   142ce:	f7fb ff89 	bl	101e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142d2:	b108      	cbz	r0, 142d8 <prepare_normal_set+0x3c>
   142d4:	2802      	cmp	r0, #2
   142d6:	d101      	bne.n	142dc <prepare_normal_set+0x40>
}
   142d8:	b009      	add	sp, #36	; 0x24
   142da:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142dc:	4040      	eors	r0, r0
   142de:	f380 8811 	msr	BASEPRI, r0
   142e2:	f04f 0004 	mov.w	r0, #4
   142e6:	df02      	svc	2
   142e8:	00010b65 	.word	0x00010b65

000142ec <event_common_prepare>:
{
   142ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142f0:	b08a      	sub	sp, #40	; 0x28
   142f2:	4681      	mov	r9, r0
   142f4:	468a      	mov	sl, r1
   142f6:	4616      	mov	r6, r2
   142f8:	461f      	mov	r7, r3
   142fa:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   142fe:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14300:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14304:	2c00      	cmp	r4, #0
   14306:	db25      	blt.n	14354 <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14308:	4544      	cmp	r4, r8
   1430a:	d828      	bhi.n	1435e <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   1430c:	4544      	cmp	r4, r8
   1430e:	d251      	bcs.n	143b4 <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14310:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14314:	2300      	movs	r3, #0
   14316:	461a      	mov	r2, r3
   14318:	4619      	mov	r1, r3
   1431a:	4618      	mov	r0, r3
   1431c:	f7fd fa3a 	bl	11794 <event_active>
		ticker_status =
   14320:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14324:	9308      	str	r3, [sp, #32]
   14326:	4b5e      	ldr	r3, [pc, #376]	; (144a0 <event_common_prepare+0x1b4>)
   14328:	9307      	str	r3, [sp, #28]
   1432a:	2000      	movs	r0, #0
   1432c:	9006      	str	r0, [sp, #24]
   1432e:	4b5d      	ldr	r3, [pc, #372]	; (144a4 <event_common_prepare+0x1b8>)
   14330:	9305      	str	r3, [sp, #20]
   14332:	9004      	str	r0, [sp, #16]
   14334:	9003      	str	r0, [sp, #12]
   14336:	9002      	str	r0, [sp, #8]
   14338:	9001      	str	r0, [sp, #4]
   1433a:	9400      	str	r4, [sp, #0]
   1433c:	464b      	mov	r3, r9
   1433e:	2201      	movs	r2, #1
   14340:	4601      	mov	r1, r0
   14342:	f7fb ff01 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14346:	2800      	cmp	r0, #0
   14348:	f000 8091 	beq.w	1446e <event_common_prepare+0x182>
   1434c:	2802      	cmp	r0, #2
   1434e:	d12b      	bne.n	143a8 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14350:	4644      	mov	r4, r8
   14352:	e03b      	b.n	143cc <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14354:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14356:	4544      	cmp	r4, r8
   14358:	bf38      	it	cc
   1435a:	4644      	movcc	r4, r8
   1435c:	e7d4      	b.n	14308 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   1435e:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14362:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14366:	9208      	str	r2, [sp, #32]
   14368:	4a4d      	ldr	r2, [pc, #308]	; (144a0 <event_common_prepare+0x1b4>)
   1436a:	9207      	str	r2, [sp, #28]
   1436c:	2000      	movs	r0, #0
   1436e:	9006      	str	r0, [sp, #24]
   14370:	4a4d      	ldr	r2, [pc, #308]	; (144a8 <event_common_prepare+0x1bc>)
   14372:	9205      	str	r2, [sp, #20]
   14374:	9004      	str	r0, [sp, #16]
   14376:	9003      	str	r0, [sp, #12]
   14378:	9002      	str	r0, [sp, #8]
   1437a:	9001      	str	r0, [sp, #4]
   1437c:	9300      	str	r3, [sp, #0]
   1437e:	464b      	mov	r3, r9
   14380:	2201      	movs	r2, #1
   14382:	4601      	mov	r1, r0
   14384:	f7fb fee0 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14388:	b108      	cbz	r0, 1438e <event_common_prepare+0xa2>
   1438a:	2802      	cmp	r0, #2
   1438c:	d106      	bne.n	1439c <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   1438e:	2300      	movs	r3, #0
   14390:	461a      	mov	r2, r3
   14392:	4619      	mov	r1, r3
   14394:	4618      	mov	r0, r3
   14396:	f7fd fa0f 	bl	117b8 <event_xtal>
   1439a:	e017      	b.n	143cc <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1439c:	4040      	eors	r0, r0
   1439e:	f380 8811 	msr	BASEPRI, r0
   143a2:	f04f 0004 	mov.w	r0, #4
   143a6:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143a8:	4040      	eors	r0, r0
   143aa:	f380 8811 	msr	BASEPRI, r0
   143ae:	f04f 0004 	mov.w	r0, #4
   143b2:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   143b4:	2300      	movs	r3, #0
   143b6:	461a      	mov	r2, r3
   143b8:	4619      	mov	r1, r3
   143ba:	4618      	mov	r0, r3
   143bc:	f7fd f9ea 	bl	11794 <event_active>
		event_xtal(0, 0, 0, NULL);
   143c0:	2300      	movs	r3, #0
   143c2:	461a      	mov	r2, r3
   143c4:	4619      	mov	r1, r3
   143c6:	4618      	mov	r0, r3
   143c8:	f7fd f9f6 	bl	117b8 <event_xtal>
	_radio.remainder_anchor = remainder;
   143cc:	4b37      	ldr	r3, [pc, #220]	; (144ac <event_common_prepare+0x1c0>)
   143ce:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   143d2:	f241 43e9 	movw	r3, #5353	; 0x14e9
   143d6:	9308      	str	r3, [sp, #32]
   143d8:	4b31      	ldr	r3, [pc, #196]	; (144a0 <event_common_prepare+0x1b4>)
   143da:	9307      	str	r3, [sp, #28]
   143dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   143de:	9306      	str	r3, [sp, #24]
   143e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   143e2:	9305      	str	r3, [sp, #20]
   143e4:	2000      	movs	r0, #0
   143e6:	9004      	str	r0, [sp, #16]
   143e8:	9003      	str	r0, [sp, #12]
   143ea:	9002      	str	r0, [sp, #8]
   143ec:	9001      	str	r0, [sp, #4]
   143ee:	9400      	str	r4, [sp, #0]
   143f0:	464b      	mov	r3, r9
   143f2:	4602      	mov	r2, r0
   143f4:	4601      	mov	r1, r0
   143f6:	f7fb fea7 	bl	10148 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143fa:	b108      	cbz	r0, 14400 <event_common_prepare+0x114>
   143fc:	2802      	cmp	r0, #2
   143fe:	d138      	bne.n	14472 <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14400:	2305      	movs	r3, #5
   14402:	2200      	movs	r2, #0
   14404:	4611      	mov	r1, r2
   14406:	4610      	mov	r0, r2
   14408:	f7fd f93a 	bl	11680 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   1440c:	4b27      	ldr	r3, [pc, #156]	; (144ac <event_common_prepare+0x1c0>)
   1440e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14412:	4598      	cmp	r8, r3
   14414:	d01d      	beq.n	14452 <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14416:	6832      	ldr	r2, [r6, #0]
   14418:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   1441c:	429a      	cmp	r2, r3
   1441e:	bf38      	it	cc
   14420:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14422:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14424:	6833      	ldr	r3, [r6, #0]
   14426:	2b00      	cmp	r3, #0
   14428:	db29      	blt.n	1447e <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1442a:	b2a3      	uxth	r3, r4
   1442c:	b292      	uxth	r2, r2
		ticker_status =
   1442e:	f241 5116 	movw	r1, #5398	; 0x1516
   14432:	9106      	str	r1, [sp, #24]
   14434:	491a      	ldr	r1, [pc, #104]	; (144a0 <event_common_prepare+0x1b4>)
   14436:	9105      	str	r1, [sp, #20]
   14438:	2000      	movs	r0, #0
   1443a:	9004      	str	r0, [sp, #16]
   1443c:	9003      	str	r0, [sp, #12]
   1443e:	9302      	str	r3, [sp, #8]
   14440:	9201      	str	r2, [sp, #4]
   14442:	9200      	str	r2, [sp, #0]
   14444:	462a      	mov	r2, r5
   14446:	4601      	mov	r1, r0
   14448:	f7fb fecc 	bl	101e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1444c:	b108      	cbz	r0, 14452 <event_common_prepare+0x166>
   1444e:	2802      	cmp	r0, #2
   14450:	d119      	bne.n	14486 <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   14452:	20ff      	movs	r0, #255	; 0xff
   14454:	f7fd fab6 	bl	119c4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14458:	4b15      	ldr	r3, [pc, #84]	; (144b0 <event_common_prepare+0x1c4>)
   1445a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1445c:	2201      	movs	r2, #1
   1445e:	4611      	mov	r1, r2
   14460:	2000      	movs	r0, #0
   14462:	f7fa f861 	bl	e528 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14466:	b9a0      	cbnz	r0, 14492 <event_common_prepare+0x1a6>
}
   14468:	b00a      	add	sp, #40	; 0x28
   1446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   1446e:	4644      	mov	r4, r8
   14470:	e7ac      	b.n	143cc <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14472:	4040      	eors	r0, r0
   14474:	f380 8811 	msr	BASEPRI, r0
   14478:	f04f 0004 	mov.w	r0, #4
   1447c:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   1447e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14482:	6033      	str	r3, [r6, #0]
   14484:	e7d1      	b.n	1442a <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14486:	4040      	eors	r0, r0
   14488:	f380 8811 	msr	BASEPRI, r0
   1448c:	f04f 0004 	mov.w	r0, #4
   14490:	df02      	svc	2
		LL_ASSERT(!retval);
   14492:	4040      	eors	r0, r0
   14494:	f380 8811 	msr	BASEPRI, r0
   14498:	f04f 0004 	mov.w	r0, #4
   1449c:	df02      	svc	2
   1449e:	bf00      	nop
   144a0:	00010e9d 	.word	0x00010e9d
   144a4:	000117b9 	.word	0x000117b9
   144a8:	00011795 	.word	0x00011795
   144ac:	20000e8c 	.word	0x20000e8c
   144b0:	2000bcc0 	.word	0x2000bcc0

000144b4 <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   144b4:	4b0d      	ldr	r3, [pc, #52]	; (144ec <radio_event_adv_prepare+0x38>)
   144b6:	7b1b      	ldrb	r3, [r3, #12]
   144b8:	b993      	cbnz	r3, 144e0 <radio_event_adv_prepare+0x2c>
{
   144ba:	b510      	push	{r4, lr}
   144bc:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   144be:	4a0b      	ldr	r2, [pc, #44]	; (144ec <radio_event_adv_prepare+0x38>)
   144c0:	2305      	movs	r3, #5
   144c2:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   144c4:	2400      	movs	r4, #0
   144c6:	9403      	str	r4, [sp, #12]
   144c8:	4c09      	ldr	r4, [pc, #36]	; (144f0 <radio_event_adv_prepare+0x3c>)
   144ca:	9402      	str	r4, [sp, #8]
   144cc:	9301      	str	r3, [sp, #4]
   144ce:	69d3      	ldr	r3, [r2, #28]
   144d0:	9300      	str	r3, [sp, #0]
   144d2:	f102 0318 	add.w	r3, r2, #24
   144d6:	3214      	adds	r2, #20
   144d8:	f7ff ff08 	bl	142ec <event_common_prepare>
}
   144dc:	b004      	add	sp, #16
   144de:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   144e0:	4040      	eors	r0, r0
   144e2:	f380 8811 	msr	BASEPRI, r0
   144e6:	f04f 0004 	mov.w	r0, #4
   144ea:	df02      	svc	2
   144ec:	20000e8c 	.word	0x20000e8c
   144f0:	00015db1 	.word	0x00015db1
   144f4:	00000000 	.word	0x00000000

000144f8 <event_connection_prepare>:
{
   144f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144fc:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   144fe:	4ccb      	ldr	r4, [pc, #812]	; (1482c <event_connection_prepare+0x334>)
   14500:	7b24      	ldrb	r4, [r4, #12]
   14502:	2c00      	cmp	r4, #0
   14504:	d135      	bne.n	14572 <event_connection_prepare+0x7a>
				   conn->handle;
   14506:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14508:	3507      	adds	r5, #7
   1450a:	b2ed      	uxtb	r5, r5
   1450c:	4cc7      	ldr	r4, [pc, #796]	; (1482c <event_connection_prepare+0x334>)
   1450e:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   14510:	f993 401d 	ldrsb.w	r4, [r3, #29]
   14514:	2c00      	cmp	r4, #0
   14516:	db32      	blt.n	1457e <event_connection_prepare+0x86>
   14518:	461c      	mov	r4, r3
   1451a:	910a      	str	r1, [sp, #40]	; 0x28
   1451c:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   1451e:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   14520:	4415      	add	r5, r2
   14522:	b2ad      	uxth	r5, r5
   14524:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14526:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14528:	441d      	add	r5, r3
   1452a:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   1452c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14530:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14534:	429a      	cmp	r2, r3
   14536:	d02d      	beq.n	14594 <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14538:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1453c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14540:	429a      	cmp	r2, r3
   14542:	f000 861a 	beq.w	1517a <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   14546:	2305      	movs	r3, #5
   14548:	2200      	movs	r2, #0
   1454a:	4611      	mov	r1, r2
   1454c:	4610      	mov	r0, r2
   1454e:	f7fd f897 	bl	11680 <event_stop>
		switch (conn->llcp_type) {
   14552:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   14556:	3b01      	subs	r3, #1
   14558:	2b07      	cmp	r3, #7
   1455a:	f201 80d6 	bhi.w	1570a <event_connection_prepare+0x1212>
   1455e:	e8df f013 	tbh	[pc, r3, lsl #1]
   14562:	029f      	.short	0x029f
   14564:	05b1054e 	.word	0x05b1054e
   14568:	072706ee 	.word	0x072706ee
   1456c:	07ac08d4 	.word	0x07ac08d4
   14570:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   14572:	4040      	eors	r0, r0
   14574:	f380 8811 	msr	BASEPRI, r0
   14578:	f04f 0004 	mov.w	r0, #4
   1457c:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1457e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   14580:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   14584:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   14586:	442c      	add	r4, r5
   14588:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   1458a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   1458c:	42ac      	cmp	r4, r5
   1458e:	d9c3      	bls.n	14518 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   14590:	65dd      	str	r5, [r3, #92]	; 0x5c
   14592:	e7c1      	b.n	14518 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14594:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   14598:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1459c:	429a      	cmp	r2, r3
   1459e:	d00b      	beq.n	145b8 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   145a0:	2305      	movs	r3, #5
   145a2:	2200      	movs	r2, #0
   145a4:	4611      	mov	r1, r2
   145a6:	4610      	mov	r0, r2
   145a8:	f7fd f86a 	bl	11680 <event_stop>
	conn_upd = _radio.conn_upd;
   145ac:	4b9f      	ldr	r3, [pc, #636]	; (1482c <event_connection_prepare+0x334>)
   145ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   145b2:	b1fb      	cbz	r3, 145f4 <event_connection_prepare+0xfc>
   145b4:	429c      	cmp	r4, r3
   145b6:	d01d      	beq.n	145f4 <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   145b8:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   145bc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   145c0:	429a      	cmp	r2, r3
   145c2:	d0b9      	beq.n	14538 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   145c4:	2305      	movs	r3, #5
   145c6:	2200      	movs	r2, #0
   145c8:	4611      	mov	r1, r2
   145ca:	4610      	mov	r0, r2
   145cc:	f7fd f858 	bl	11680 <event_stop>
	switch (conn->llcp_phy.state) {
   145d0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   145d4:	f003 0303 	and.w	r3, r3, #3
   145d8:	2b03      	cmp	r3, #3
   145da:	f200 8257 	bhi.w	14a8c <event_connection_prepare+0x594>
   145de:	a201      	add	r2, pc, #4	; (adr r2, 145e4 <event_connection_prepare+0xec>)
   145e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   145e4:	000148dd 	.word	0x000148dd
   145e8:	00014539 	.word	0x00014539
   145ec:	00014539 	.word	0x00014539
   145f0:	00014957 	.word	0x00014957
	switch (conn->llcp_conn_param.state) {
   145f4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   145f8:	f003 0307 	and.w	r3, r3, #7
   145fc:	2b05      	cmp	r3, #5
   145fe:	f200 8167 	bhi.w	148d0 <event_connection_prepare+0x3d8>
   14602:	a201      	add	r2, pc, #4	; (adr r2, 14608 <event_connection_prepare+0x110>)
   14604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14608:	00014621 	.word	0x00014621
   1460c:	000146eb 	.word	0x000146eb
   14610:	00014839 	.word	0x00014839
   14614:	000145b9 	.word	0x000145b9
   14618:	000145b9 	.word	0x000145b9
   1461c:	000145b9 	.word	0x000145b9
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14620:	4883      	ldr	r0, [pc, #524]	; (14830 <event_connection_prepare+0x338>)
   14622:	f7fa f8c2 	bl	e7aa <mem_acquire>
	if (!node_tx) {
   14626:	4680      	mov	r8, r0
   14628:	2800      	cmp	r0, #0
   1462a:	d0c5      	beq.n	145b8 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1462c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14630:	2204      	movs	r2, #4
   14632:	f362 0302 	bfi	r3, r2, #0, #3
   14636:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1463a:	7903      	ldrb	r3, [r0, #4]
   1463c:	f043 0303 	orr.w	r3, r3, #3
   14640:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14642:	2318      	movs	r3, #24
   14644:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14646:	230f      	movs	r3, #15
   14648:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1464a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1464e:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   14650:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14654:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   14656:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1465a:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1465c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14660:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   14662:	2300      	movs	r3, #0
   14664:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   14666:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   1466a:	74c3      	strb	r3, [r0, #19]
   1466c:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   1466e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14672:	7543      	strb	r3, [r0, #21]
   14674:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   14676:	75c3      	strb	r3, [r0, #23]
   14678:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1467a:	7643      	strb	r3, [r0, #25]
   1467c:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   1467e:	76c3      	strb	r3, [r0, #27]
   14680:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   14682:	7743      	strb	r3, [r0, #29]
   14684:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   14686:	4601      	mov	r1, r0
   14688:	4620      	mov	r0, r4
   1468a:	f7fc fb1f 	bl	10ccc <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   1468e:	4b67      	ldr	r3, [pc, #412]	; (1482c <event_connection_prepare+0x334>)
   14690:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   14694:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14698:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   1469c:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   146a0:	6823      	ldr	r3, [r4, #0]
   146a2:	2b00      	cmp	r3, #0
   146a4:	db13      	blt.n	146ce <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   146a6:	f108 0313 	add.w	r3, r8, #19
   146aa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   146ae:	4b61      	ldr	r3, [pc, #388]	; (14834 <event_connection_prepare+0x33c>)
   146b0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   146b2:	2201      	movs	r2, #1
   146b4:	4611      	mov	r1, r2
   146b6:	2000      	movs	r0, #0
   146b8:	f7f9 ff36 	bl	e528 <mayfly_enqueue>
		LL_ASSERT(!retval);
   146bc:	2800      	cmp	r0, #0
   146be:	f43f af7b 	beq.w	145b8 <event_connection_prepare+0xc0>
   146c2:	4040      	eors	r0, r0
   146c4:	f380 8811 	msr	BASEPRI, r0
   146c8:	f04f 0004 	mov.w	r0, #4
   146cc:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   146ce:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   146d0:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   146d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   146d6:	4291      	cmp	r1, r2
   146d8:	bf2c      	ite	cs
   146da:	ebc3 0301 	rsbcs	r3, r3, r1
   146de:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   146e2:	4433      	add	r3, r6
   146e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   146e8:	e7dd      	b.n	146a6 <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   146ea:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   146ee:	bbb3      	cbnz	r3, 1475e <event_connection_prepare+0x266>
	if (!conn->role) {
   146f0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   146f4:	2b00      	cmp	r3, #0
   146f6:	db52      	blt.n	1479e <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   146f8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   146fc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14700:	429a      	cmp	r2, r3
   14702:	f47f af59 	bne.w	145b8 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14706:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1470a:	2105      	movs	r1, #5
   1470c:	f361 0202 	bfi	r2, r1, #0, #3
   14710:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   14714:	2001      	movs	r0, #1
   14716:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1471a:	2100      	movs	r1, #0
   1471c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   14720:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   14724:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   14728:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   1472c:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   14730:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   14734:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   14738:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1473c:	f04f 0e02 	mov.w	lr, #2
   14740:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   14744:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   14748:	4042      	eors	r2, r0
   1474a:	f362 0182 	bfi	r1, r2, #2, #1
   1474e:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   14752:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   14756:	3b01      	subs	r3, #1
   14758:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1475c:	e72c      	b.n	145b8 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1475e:	4834      	ldr	r0, [pc, #208]	; (14830 <event_connection_prepare+0x338>)
   14760:	f7fa f823 	bl	e7aa <mem_acquire>
		if (!node_tx) {
   14764:	4601      	mov	r1, r0
   14766:	2800      	cmp	r0, #0
   14768:	f43f af26 	beq.w	145b8 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1476c:	7903      	ldrb	r3, [r0, #4]
   1476e:	f043 0303 	orr.w	r3, r3, #3
   14772:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   14774:	2311      	movs	r3, #17
   14776:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14778:	2303      	movs	r3, #3
   1477a:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1477c:	230f      	movs	r3, #15
   1477e:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   14780:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   14784:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   14786:	4620      	mov	r0, r4
   14788:	f7fc faa0 	bl	10ccc <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1478c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14790:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   14794:	2200      	movs	r2, #0
   14796:	4b25      	ldr	r3, [pc, #148]	; (1482c <event_connection_prepare+0x334>)
   14798:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1479c:	e70c      	b.n	145b8 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1479e:	4824      	ldr	r0, [pc, #144]	; (14830 <event_connection_prepare+0x338>)
   147a0:	f7fa f803 	bl	e7aa <mem_acquire>
	if (!node_tx) {
   147a4:	4601      	mov	r1, r0
   147a6:	2800      	cmp	r0, #0
   147a8:	f43f af06 	beq.w	145b8 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   147ac:	7903      	ldrb	r3, [r0, #4]
   147ae:	f043 0303 	orr.w	r3, r3, #3
   147b2:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   147b4:	2318      	movs	r3, #24
   147b6:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   147b8:	2310      	movs	r3, #16
   147ba:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   147bc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   147c0:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   147c2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   147c6:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   147c8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   147cc:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   147ce:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   147d2:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   147d4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   147d8:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   147da:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   147de:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   147e2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   147e6:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   147ea:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   147ee:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   147f2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   147f6:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   147fa:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   147fe:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   14802:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   14806:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   1480a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   1480e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   14812:	4620      	mov	r0, r4
   14814:	f7fc fa5a 	bl	10ccc <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14818:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1481c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   14820:	2200      	movs	r2, #0
   14822:	4b02      	ldr	r3, [pc, #8]	; (1482c <event_connection_prepare+0x334>)
   14824:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14828:	e6c6      	b.n	145b8 <event_connection_prepare+0xc0>
   1482a:	bf00      	nop
   1482c:	20000e8c 	.word	0x20000e8c
   14830:	20000fe4 	.word	0x20000fe4
   14834:	2000bc50 	.word	0x2000bc50
	if (conn->pause_tx) {
   14838:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1483c:	f013 0f08 	tst.w	r3, #8
   14840:	f47f aeba 	bne.w	145b8 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   14844:	4b94      	ldr	r3, [pc, #592]	; (14a98 <event_connection_prepare+0x5a0>)
   14846:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1484a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1484e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14850:	429a      	cmp	r2, r3
   14852:	d331      	bcc.n	148b8 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   14854:	4b90      	ldr	r3, [pc, #576]	; (14a98 <event_connection_prepare+0x5a0>)
   14856:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1485a:	1ad3      	subs	r3, r2, r3
   1485c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1485e:	2b01      	cmp	r3, #1
   14860:	d934      	bls.n	148cc <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   14862:	4b8d      	ldr	r3, [pc, #564]	; (14a98 <event_connection_prepare+0x5a0>)
   14864:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14868:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1486c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   14870:	2b00      	cmp	r3, #0
   14872:	f43f aea1 	beq.w	145b8 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   14876:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1487a:	2103      	movs	r1, #3
   1487c:	f361 0202 	bfi	r2, r1, #0, #3
   14880:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   14884:	8c22      	ldrh	r2, [r4, #32]
   14886:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14888:	2201      	movs	r2, #1
   1488a:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1488c:	7a1a      	ldrb	r2, [r3, #8]
   1488e:	430a      	orrs	r2, r1
   14890:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14892:	2218      	movs	r2, #24
   14894:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   14896:	220f      	movs	r2, #15
   14898:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   1489a:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   1489e:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   148a0:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   148a4:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   148a6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   148aa:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   148ac:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   148b0:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   148b2:	f7fe ffbf 	bl	13834 <packet_rx_enqueue>
   148b6:	e67f      	b.n	145b8 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   148b8:	4977      	ldr	r1, [pc, #476]	; (14a98 <event_connection_prepare+0x5a0>)
   148ba:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   148be:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   148c2:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   148c4:	fa52 f383 	uxtab	r3, r2, r3
   148c8:	b2db      	uxtb	r3, r3
   148ca:	e7c8      	b.n	1485e <event_connection_prepare+0x366>
		return 0;
   148cc:	2300      	movs	r3, #0
   148ce:	e7cf      	b.n	14870 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   148d0:	4040      	eors	r0, r0
   148d2:	f380 8811 	msr	BASEPRI, r0
   148d6:	f04f 0004 	mov.w	r0, #4
   148da:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   148dc:	486f      	ldr	r0, [pc, #444]	; (14a9c <event_connection_prepare+0x5a4>)
   148de:	f7f9 ff64 	bl	e7aa <mem_acquire>
		if (!node_tx) {
   148e2:	4601      	mov	r1, r0
   148e4:	2800      	cmp	r0, #0
   148e6:	f43f ae27 	beq.w	14538 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   148ea:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148ee:	2201      	movs	r2, #1
   148f0:	f362 0301 	bfi	r3, r2, #0, #2
   148f4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   148f8:	b2db      	uxtb	r3, r3
   148fa:	f3c3 0082 	ubfx	r0, r3, #2, #3
   148fe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14902:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   14906:	095b      	lsrs	r3, r3, #5
   14908:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   1490c:	f363 00c5 	bfi	r0, r3, #3, #3
   14910:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   14914:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   14918:	4613      	mov	r3, r2
   1491a:	f360 1386 	bfi	r3, r0, #6, #1
   1491e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14922:	790b      	ldrb	r3, [r1, #4]
   14924:	f043 0303 	orr.w	r3, r3, #3
   14928:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1492a:	2303      	movs	r3, #3
   1492c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1492e:	2316      	movs	r3, #22
   14930:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   14932:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14936:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1493a:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1493c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14940:	f3c3 1342 	ubfx	r3, r3, #5, #3
   14944:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   14946:	4620      	mov	r0, r4
   14948:	f7fc f9c0 	bl	10ccc <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1494c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14950:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   14954:	e5f0      	b.n	14538 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14956:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1495a:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   1495e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14962:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14966:	f013 0f02 	tst.w	r3, #2
   1496a:	d047      	beq.n	149fc <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   1496c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14970:	2202      	movs	r2, #2
   14972:	f362 0384 	bfi	r3, r2, #2, #3
   14976:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   1497a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1497e:	095b      	lsrs	r3, r3, #5
   14980:	f013 0f02 	tst.w	r3, #2
   14984:	d057      	beq.n	14a36 <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   14986:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1498a:	2202      	movs	r2, #2
   1498c:	f362 1347 	bfi	r3, r2, #5, #3
   14990:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   14994:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14998:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1499c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   149a0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   149a4:	4293      	cmp	r3, r2
   149a6:	d063      	beq.n	14a70 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   149a8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   149ac:	f363 0284 	bfi	r2, r3, #2, #3
   149b0:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   149b4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149b8:	095b      	lsrs	r3, r3, #5
   149ba:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   149be:	f002 0207 	and.w	r2, r2, #7
   149c2:	4293      	cmp	r3, r2
   149c4:	d05b      	beq.n	14a7e <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   149c6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   149ca:	f363 1247 	bfi	r2, r3, #5, #3
   149ce:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   149d2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   149d6:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   149da:	f3c2 0240 	ubfx	r2, r2, #1, #1
   149de:	f043 0301 	orr.w	r3, r3, #1
   149e2:	f362 0341 	bfi	r3, r2, #1, #1
   149e6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   149ea:	2308      	movs	r3, #8
   149ec:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   149f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   149f4:	3b01      	subs	r3, #1
   149f6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   149fa:	e59d      	b.n	14538 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   149fc:	f013 0f01 	tst.w	r3, #1
   14a00:	d007      	beq.n	14a12 <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   14a02:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a06:	2201      	movs	r2, #1
   14a08:	f362 0384 	bfi	r3, r2, #2, #3
   14a0c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a10:	e7b3      	b.n	1497a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   14a12:	f013 0f04 	tst.w	r3, #4
   14a16:	d007      	beq.n	14a28 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   14a18:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a1c:	2204      	movs	r2, #4
   14a1e:	f362 0384 	bfi	r3, r2, #2, #3
   14a22:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a26:	e7a8      	b.n	1497a <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   14a28:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a2c:	f36f 0384 	bfc	r3, #2, #3
   14a30:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a34:	e7a1      	b.n	1497a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   14a36:	f013 0f01 	tst.w	r3, #1
   14a3a:	d007      	beq.n	14a4c <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   14a3c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a40:	2201      	movs	r2, #1
   14a42:	f362 1347 	bfi	r3, r2, #5, #3
   14a46:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a4a:	e7a3      	b.n	14994 <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   14a4c:	f013 0f04 	tst.w	r3, #4
   14a50:	d007      	beq.n	14a62 <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   14a52:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a56:	2204      	movs	r2, #4
   14a58:	f362 1347 	bfi	r3, r2, #5, #3
   14a5c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a60:	e798      	b.n	14994 <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   14a62:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a66:	f36f 1347 	bfc	r3, #5, #3
   14a6a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a6e:	e791      	b.n	14994 <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   14a70:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a74:	f36f 0384 	bfc	r3, #2, #3
   14a78:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14a7c:	e79a      	b.n	149b4 <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   14a7e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a82:	f36f 1347 	bfc	r3, #5, #3
   14a86:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14a8a:	e7a2      	b.n	149d2 <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   14a8c:	4040      	eors	r0, r0
   14a8e:	f380 8811 	msr	BASEPRI, r0
   14a92:	f04f 0004 	mov.w	r0, #4
   14a96:	df02      	svc	2
   14a98:	20000e8c 	.word	0x20000e8c
   14a9c:	20000fe4 	.word	0x20000fe4
	conn_upd = _radio.conn_upd;
   14aa0:	4bb7      	ldr	r3, [pc, #732]	; (14d80 <event_connection_prepare+0x888>)
   14aa2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	f000 814b 	beq.w	14d42 <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   14aac:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   14ab0:	eba5 0808 	sub.w	r8, r5, r8
   14ab4:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   14ab8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14abc:	f013 0f03 	tst.w	r3, #3
   14ac0:	f040 8143 	bne.w	14d4a <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   14ac4:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   14ac8:	f040 8296 	bne.w	14ff8 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   14acc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14ad0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14ad4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   14ad8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   14adc:	429a      	cmp	r2, r3
   14ade:	d006      	beq.n	14aee <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   14ae0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14ae4:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14ae8:	2b05      	cmp	r3, #5
   14aea:	f000 81bb 	beq.w	14e64 <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   14aee:	4ba4      	ldr	r3, [pc, #656]	; (14d80 <event_connection_prepare+0x888>)
   14af0:	2200      	movs	r2, #0
   14af2:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   14af4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14af8:	429c      	cmp	r4, r3
   14afa:	f000 81b9 	beq.w	14e70 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   14afe:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   14b02:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   14b04:	429a      	cmp	r2, r3
   14b06:	f000 81b7 	beq.w	14e78 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   14b0a:	4b9d      	ldr	r3, [pc, #628]	; (14d80 <event_connection_prepare+0x888>)
   14b0c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14b10:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14b14:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14b16:	429a      	cmp	r2, r3
   14b18:	f0c0 81c7 	bcc.w	14eaa <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   14b1c:	4b98      	ldr	r3, [pc, #608]	; (14d80 <event_connection_prepare+0x888>)
   14b1e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14b22:	1ad3      	subs	r3, r2, r3
   14b24:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14b26:	2b01      	cmp	r3, #1
   14b28:	f240 81c9 	bls.w	14ebe <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   14b2c:	4b94      	ldr	r3, [pc, #592]	; (14d80 <event_connection_prepare+0x888>)
   14b2e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14b32:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	f000 81c1 	beq.w	14ec2 <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   14b40:	8c22      	ldrh	r2, [r4, #32]
   14b42:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14b44:	2208      	movs	r2, #8
   14b46:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   14b48:	2200      	movs	r2, #0
   14b4a:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   14b4c:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14b50:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   14b52:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14b56:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   14b58:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14b5c:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   14b5e:	f7fe fe69 	bl	13834 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14b62:	6823      	ldr	r3, [r4, #0]
   14b64:	2b00      	cmp	r3, #0
   14b66:	f2c0 81b2 	blt.w	14ece <event_connection_prepare+0x9d6>
   14b6a:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   14b6c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   14b6e:	fb18 f303 	smulbb	r3, r8, r3
   14b72:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   14b74:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   14b78:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   14b7c:	fb1a f00b 	smulbb	r0, sl, fp
   14b80:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   14b82:	4283      	cmp	r3, r0
   14b84:	f080 81b1 	bcs.w	14eea <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   14b88:	1ac3      	subs	r3, r0, r3
   14b8a:	17d9      	asrs	r1, r3, #31
   14b8c:	487d      	ldr	r0, [pc, #500]	; (14d84 <event_connection_prepare+0x88c>)
   14b8e:	f240 1223 	movw	r2, #291	; 0x123
   14b92:	fb02 f203 	mul.w	r2, r2, r3
   14b96:	fb00 2201 	mla	r2, r0, r1, r2
   14b9a:	fba3 0100 	umull	r0, r1, r3, r0
   14b9e:	4411      	add	r1, r2
   14ba0:	a375      	add	r3, pc, #468	; (adr r3, 14d78 <event_connection_prepare+0x880>)
   14ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ba6:	f7ec faa9 	bl	10fc <__aeabi_uldivmod>
   14baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   14bae:	eb00 0309 	add.w	r3, r0, r9
   14bb2:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   14bb4:	ebab 0308 	sub.w	r3, fp, r8
   14bb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14bba:	fa12 f383 	uxtah	r3, r2, r3
   14bbe:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   14bc0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   14bc2:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   14bc4:	429a      	cmp	r2, r3
   14bc6:	bf38      	it	cc
   14bc8:	461a      	movcc	r2, r3
   14bca:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14bcc:	f240 49e2 	movw	r9, #1250	; 0x4e2
   14bd0:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   14bd4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14bd8:	2b00      	cmp	r3, #0
   14bda:	f2c0 819d 	blt.w	14f18 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   14bde:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   14be2:	a365      	add	r3, pc, #404	; (adr r3, 14d78 <event_connection_prepare+0x880>)
   14be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14be8:	4967      	ldr	r1, [pc, #412]	; (14d88 <event_connection_prepare+0x890>)
   14bea:	fba0 0101 	umull	r0, r1, r0, r1
   14bee:	f7ec fa85 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   14bf6:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   14bfa:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   14bfc:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   14c00:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14c04:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14c06:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14c0a:	f242 7110 	movw	r1, #10000	; 0x2710
   14c0e:	fb01 9303 	mla	r3, r1, r3, r9
   14c12:	3b01      	subs	r3, #1
   14c14:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   14c18:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14c1a:	4b5c      	ldr	r3, [pc, #368]	; (14d8c <event_connection_prepare+0x894>)
   14c1c:	444b      	add	r3, r9
   14c1e:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   14c22:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14c26:	4b5a      	ldr	r3, [pc, #360]	; (14d90 <event_connection_prepare+0x898>)
   14c28:	444b      	add	r3, r9
   14c2a:	fbb3 f9f9 	udiv	r9, r3, r9
   14c2e:	fa1f f989 	uxth.w	r9, r9
   14c32:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14c36:	1d93      	adds	r3, r2, #6
   14c38:	4599      	cmp	r9, r3
   14c3a:	dd07      	ble.n	14c4c <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   14c3c:	eba9 0902 	sub.w	r9, r9, r2
   14c40:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14c44:	f1a9 0906 	sub.w	r9, r9, #6
   14c48:	fa1f f989 	uxth.w	r9, r9
   14c4c:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   14c50:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14c54:	f013 0f04 	tst.w	r3, #4
   14c58:	d102      	bne.n	14c60 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   14c5a:	2300      	movs	r3, #0
   14c5c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   14c60:	2101      	movs	r1, #1
   14c62:	2000      	movs	r0, #0
   14c64:	f003 fe2d 	bl	188c2 <mayfly_is_enabled>
   14c68:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14c6a:	2200      	movs	r2, #0
   14c6c:	2101      	movs	r1, #1
   14c6e:	4610      	mov	r0, r2
   14c70:	f7f9 fc1c 	bl	e4ac <mayfly_enable>
				    conn->handle, ticker_success_assert,
   14c74:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c76:	3207      	adds	r2, #7
		ticker_status =
   14c78:	f641 13e3 	movw	r3, #6627	; 0x19e3
   14c7c:	9300      	str	r3, [sp, #0]
   14c7e:	4b45      	ldr	r3, [pc, #276]	; (14d94 <event_connection_prepare+0x89c>)
   14c80:	b2d2      	uxtb	r2, r2
   14c82:	2100      	movs	r1, #0
   14c84:	4608      	mov	r0, r1
   14c86:	f7fb fafb 	bl	10280 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14c8a:	b110      	cbz	r0, 14c92 <event_connection_prepare+0x79a>
   14c8c:	2802      	cmp	r0, #2
   14c8e:	f040 819a 	bne.w	14fc6 <event_connection_prepare+0xace>
				     conn->handle,
   14c92:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c96:	f10a 0a07 	add.w	sl, sl, #7
   14c9a:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   14c9e:	4b3a      	ldr	r3, [pc, #232]	; (14d88 <event_connection_prepare+0x890>)
   14ca0:	fba8 2303 	umull	r2, r3, r8, r3
   14ca4:	4617      	mov	r7, r2
   14ca6:	4698      	mov	r8, r3
   14ca8:	a333      	add	r3, pc, #204	; (adr r3, 14d78 <event_connection_prepare+0x880>)
   14caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cae:	4638      	mov	r0, r7
   14cb0:	4641      	mov	r1, r8
   14cb2:	f7ec fa23 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14cb6:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   14cba:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   14cbc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14cc0:	2100      	movs	r1, #0
   14cc2:	4a35      	ldr	r2, [pc, #212]	; (14d98 <event_connection_prepare+0x8a0>)
   14cc4:	2307      	movs	r3, #7
   14cc6:	fb03 f300 	mul.w	r3, r3, r0
   14cca:	fb02 3301 	mla	r3, r2, r1, r3
   14cce:	fba0 0102 	umull	r0, r1, r0, r2
   14cd2:	4419      	add	r1, r3
   14cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14cd8:	2300      	movs	r3, #0
   14cda:	1a3f      	subs	r7, r7, r0
   14cdc:	eb68 0801 	sbc.w	r8, r8, r1
   14ce0:	4638      	mov	r0, r7
   14ce2:	4641      	mov	r1, r8
   14ce4:	f7ec fa0a 	bl	10fc <__aeabi_uldivmod>
   14ce8:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   14cea:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14cec:	990c      	ldr	r1, [sp, #48]	; 0x30
   14cee:	440b      	add	r3, r1
   14cf0:	b29b      	uxth	r3, r3
   14cf2:	f994 101d 	ldrsb.w	r1, [r4, #29]
   14cf6:	2900      	cmp	r1, #0
   14cf8:	f2c0 816b 	blt.w	14fd2 <event_connection_prepare+0xada>
   14cfc:	4927      	ldr	r1, [pc, #156]	; (14d9c <event_connection_prepare+0x8a4>)
		ticker_status =
   14cfe:	f641 10f3 	movw	r0, #6643	; 0x19f3
   14d02:	9008      	str	r0, [sp, #32]
   14d04:	4823      	ldr	r0, [pc, #140]	; (14d94 <event_connection_prepare+0x89c>)
   14d06:	9007      	str	r0, [sp, #28]
   14d08:	9406      	str	r4, [sp, #24]
   14d0a:	9105      	str	r1, [sp, #20]
   14d0c:	9304      	str	r3, [sp, #16]
   14d0e:	2000      	movs	r0, #0
   14d10:	9003      	str	r0, [sp, #12]
   14d12:	9202      	str	r2, [sp, #8]
   14d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d16:	9301      	str	r3, [sp, #4]
   14d18:	f8cd b000 	str.w	fp, [sp]
   14d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14d1e:	4652      	mov	r2, sl
   14d20:	4601      	mov	r1, r0
   14d22:	f7fb fa11 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d26:	b110      	cbz	r0, 14d2e <event_connection_prepare+0x836>
   14d28:	2802      	cmp	r0, #2
   14d2a:	f040 8154 	bne.w	14fd6 <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   14d2e:	f1b9 0f00 	cmp.w	r9, #0
   14d32:	f040 8156 	bne.w	14fe2 <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   14d36:	f1b9 0f00 	cmp.w	r9, #0
   14d3a:	f040 821e 	bne.w	1517a <event_connection_prepare+0xc82>
   14d3e:	f000 be59 	b.w	159f4 <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   14d42:	4b0f      	ldr	r3, [pc, #60]	; (14d80 <event_connection_prepare+0x888>)
   14d44:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   14d48:	e6b0      	b.n	14aac <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14d4a:	4815      	ldr	r0, [pc, #84]	; (14da0 <event_connection_prepare+0x8a8>)
   14d4c:	f7f9 fd2d 	bl	e7aa <mem_acquire>
		if (!node_tx) {
   14d50:	4680      	mov	r8, r0
   14d52:	2800      	cmp	r0, #0
   14d54:	f000 814d 	beq.w	14ff2 <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   14d58:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   14d5a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14d5e:	f002 0203 	and.w	r2, r2, #3
   14d62:	2a01      	cmp	r2, #1
   14d64:	d01e      	beq.n	14da4 <event_connection_prepare+0x8ac>
   14d66:	2a02      	cmp	r2, #2
   14d68:	d066      	beq.n	14e38 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   14d6a:	4040      	eors	r0, r0
   14d6c:	f380 8811 	msr	BASEPRI, r0
   14d70:	f04f 0004 	mov.w	r0, #4
   14d74:	df02      	svc	2
   14d76:	bf00      	nop
   14d78:	1afd498d 	.word	0x1afd498d
   14d7c:	00000007 	.word	0x00000007
   14d80:	20000e8c 	.word	0x20000e8c
   14d84:	09ce5400 	.word	0x09ce5400
   14d88:	3b9aca00 	.word	0x3b9aca00
   14d8c:	026259ff 	.word	0x026259ff
   14d90:	01c9c37f 	.word	0x01c9c37f
   14d94:	00010e9d 	.word	0x00010e9d
   14d98:	1afd498d 	.word	0x1afd498d
   14d9c:	00015a5d 	.word	0x00015a5d
   14da0:	20000fe4 	.word	0x20000fe4
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   14da4:	49bc      	ldr	r1, [pc, #752]	; (15098 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14da6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14daa:	f36f 0201 	bfc	r2, #0, #2
   14dae:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   14db2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   14db4:	442a      	add	r2, r5
   14db6:	b292      	uxth	r2, r2
   14db8:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   14dba:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14dbe:	f898 2004 	ldrb.w	r2, [r8, #4]
   14dc2:	f042 0203 	orr.w	r2, r2, #3
   14dc6:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14dca:	220c      	movs	r2, #12
   14dcc:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14dce:	2200      	movs	r2, #0
   14dd0:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   14dd2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   14dd6:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14dd8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   14ddc:	48af      	ldr	r0, [pc, #700]	; (1509c <event_connection_prepare+0xba4>)
   14dde:	fba0 0202 	umull	r0, r2, r0, r2
   14de2:	0a92      	lsrs	r2, r2, #10
   14de4:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   14de8:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14dec:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   14df0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14df4:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   14df8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14dfc:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   14e00:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   14e04:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   14e08:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14e0c:	6820      	ldr	r0, [r4, #0]
   14e0e:	2800      	cmp	r0, #0
   14e10:	db14      	blt.n	14e3c <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   14e12:	3305      	adds	r3, #5
   14e14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   14e18:	4ba1      	ldr	r3, [pc, #644]	; (150a0 <event_connection_prepare+0xba8>)
   14e1a:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   14e1c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14e1e:	2201      	movs	r2, #1
   14e20:	4611      	mov	r1, r2
   14e22:	2000      	movs	r0, #0
   14e24:	f7f9 fb80 	bl	e528 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14e28:	b9b0      	cbnz	r0, 14e58 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   14e2a:	4641      	mov	r1, r8
   14e2c:	4620      	mov	r0, r4
   14e2e:	f7fb ff4d 	bl	10ccc <ctrl_tx_enqueue>
	return 1;
   14e32:	f04f 0901 	mov.w	r9, #1
   14e36:	e77e      	b.n	14d36 <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   14e38:	499a      	ldr	r1, [pc, #616]	; (150a4 <event_connection_prepare+0xbac>)
   14e3a:	e7b4      	b.n	14da6 <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   14e3c:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14e3e:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   14e40:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   14e44:	4297      	cmp	r7, r2
   14e46:	bf2c      	ite	cs
   14e48:	ebce 0207 	rsbcs	r2, lr, r7
   14e4c:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   14e50:	4432      	add	r2, r6
   14e52:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   14e56:	e7dc      	b.n	14e12 <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   14e58:	4040      	eors	r0, r0
   14e5a:	f380 8811 	msr	BASEPRI, r0
   14e5e:	f04f 0004 	mov.w	r0, #4
   14e62:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14e64:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   14e68:	2300      	movs	r3, #0
   14e6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   14e6e:	e63e      	b.n	14aee <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   14e70:	4b8d      	ldr	r3, [pc, #564]	; (150a8 <event_connection_prepare+0xbb0>)
   14e72:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14e76:	e642      	b.n	14afe <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14e78:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   14e7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   14e7e:	4291      	cmp	r1, r2
   14e80:	f47f ae43 	bne.w	14b0a <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   14e84:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14e88:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14e8c:	fb01 f103 	mul.w	r1, r1, r3
   14e90:	f242 7310 	movw	r3, #10000	; 0x2710
   14e94:	fb03 1302 	mla	r3, r3, r2, r1
   14e98:	3b01      	subs	r3, #1
   14e9a:	fb93 f3f1 	sdiv	r3, r3, r1
   14e9e:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   14ea0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14ea2:	4293      	cmp	r3, r2
   14ea4:	f47f ae31 	bne.w	14b0a <event_connection_prepare+0x612>
   14ea8:	e65b      	b.n	14b62 <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   14eaa:	497f      	ldr	r1, [pc, #508]	; (150a8 <event_connection_prepare+0xbb0>)
   14eac:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14eb0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14eb4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14eb6:	fa52 f383 	uxtab	r3, r2, r3
   14eba:	b2db      	uxtb	r3, r3
   14ebc:	e633      	b.n	14b26 <event_connection_prepare+0x62e>
		return 0;
   14ebe:	2300      	movs	r3, #0
   14ec0:	e63b      	b.n	14b3a <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   14ec2:	4040      	eors	r0, r0
   14ec4:	f380 8811 	msr	BASEPRI, r0
   14ec8:	f04f 0004 	mov.w	r0, #4
   14ecc:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   14ece:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14ed0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   14ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14ed6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   14ed8:	4291      	cmp	r1, r2
   14eda:	bf2c      	ite	cs
   14edc:	ebc3 0301 	rsbcs	r3, r3, r1
   14ee0:	ebc3 0302 	rsbcc	r3, r3, r2
   14ee4:	eb06 0903 	add.w	r9, r6, r3
   14ee8:	e640      	b.n	14b6c <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   14eea:	1a1b      	subs	r3, r3, r0
   14eec:	17d9      	asrs	r1, r3, #31
   14eee:	486f      	ldr	r0, [pc, #444]	; (150ac <event_connection_prepare+0xbb4>)
   14ef0:	f240 1223 	movw	r2, #291	; 0x123
   14ef4:	fb02 f203 	mul.w	r2, r2, r3
   14ef8:	fb00 2201 	mla	r2, r0, r1, r2
   14efc:	fba3 0100 	umull	r0, r1, r3, r0
   14f00:	4411      	add	r1, r2
   14f02:	a363      	add	r3, pc, #396	; (adr r3, 15090 <event_connection_prepare+0xb98>)
   14f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f08:	f7ec f8f8 	bl	10fc <__aeabi_uldivmod>
   14f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14f10:	eba9 0300 	sub.w	r3, r9, r0
   14f14:	930b      	str	r3, [sp, #44]	; 0x2c
   14f16:	e64d      	b.n	14bb4 <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   14f18:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   14f1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14f1c:	fb02 3218 	mls	r2, r2, r8, r3
   14f20:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   14f22:	4b61      	ldr	r3, [pc, #388]	; (150a8 <event_connection_prepare+0xbb0>)
   14f24:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   14f28:	4861      	ldr	r0, [pc, #388]	; (150b0 <event_connection_prepare+0xbb8>)
   14f2a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   14f2e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   14f32:	f3c1 0182 	ubfx	r1, r1, #2, #3
   14f36:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   14f3a:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   14f3c:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   14f40:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   14f44:	f203 233f 	addw	r3, r3, #575	; 0x23f
   14f48:	495a      	ldr	r1, [pc, #360]	; (150b4 <event_connection_prepare+0xbbc>)
   14f4a:	fba1 1303 	umull	r1, r3, r1, r3
   14f4e:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   14f52:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   14f56:	ea4f 0359 	mov.w	r3, r9, lsr #1
   14f5a:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   14f5c:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   14f5e:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   14f62:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14f66:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   14f6a:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   14f6c:	2100      	movs	r1, #0
   14f6e:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   14f70:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   14f74:	4402      	add	r2, r0
   14f76:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   14f78:	4293      	cmp	r3, r2
   14f7a:	d200      	bcs.n	14f7e <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   14f7c:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   14f7e:	f8df b140 	ldr.w	fp, [pc, #320]	; 150c0 <event_connection_prepare+0xbc8>
   14f82:	a343      	add	r3, pc, #268	; (adr r3, 15090 <event_connection_prepare+0xb98>)
   14f84:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f88:	fba0 010b 	umull	r0, r1, r0, fp
   14f8c:	f7ec f8b6 	bl	10fc <__aeabi_uldivmod>
   14f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f96:	1a1b      	subs	r3, r3, r0
   14f98:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   14f9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   14f9e:	4a3f      	ldr	r2, [pc, #252]	; (1509c <event_connection_prepare+0xba4>)
   14fa0:	fba2 2303 	umull	r2, r3, r2, r3
   14fa4:	0a9b      	lsrs	r3, r3, #10
   14fa6:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14faa:	fb00 f003 	mul.w	r0, r0, r3
   14fae:	a338      	add	r3, pc, #224	; (adr r3, 15090 <event_connection_prepare+0xb98>)
   14fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fb4:	fba0 010b 	umull	r0, r1, r0, fp
   14fb8:	f7ec f8a0 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14fbc:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   14fc0:	eba9 0808 	sub.w	r8, r9, r8
   14fc4:	e61a      	b.n	14bfc <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fc6:	4040      	eors	r0, r0
   14fc8:	f380 8811 	msr	BASEPRI, r0
   14fcc:	f04f 0004 	mov.w	r0, #4
   14fd0:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14fd2:	4939      	ldr	r1, [pc, #228]	; (150b8 <event_connection_prepare+0xbc0>)
   14fd4:	e693      	b.n	14cfe <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fd6:	4040      	eors	r0, r0
   14fd8:	f380 8811 	msr	BASEPRI, r0
   14fdc:	f04f 0004 	mov.w	r0, #4
   14fe0:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14fe2:	2201      	movs	r2, #1
   14fe4:	4611      	mov	r1, r2
   14fe6:	2000      	movs	r0, #0
   14fe8:	f7f9 fa60 	bl	e4ac <mayfly_enable>
		return 0;
   14fec:	f04f 0900 	mov.w	r9, #0
   14ff0:	e6a1      	b.n	14d36 <event_connection_prepare+0x83e>
			return 1;
   14ff2:	f04f 0901 	mov.w	r9, #1
   14ff6:	e69e      	b.n	14d36 <event_connection_prepare+0x83e>
	return 1;
   14ff8:	f04f 0901 	mov.w	r9, #1
   14ffc:	e69b      	b.n	14d36 <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   14ffe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15002:	b9f3      	cbnz	r3, 15042 <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15004:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15008:	1aeb      	subs	r3, r5, r3
   1500a:	b29b      	uxth	r3, r3
   1500c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15010:	f280 80b3 	bge.w	1517a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15014:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15018:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   1501c:	f104 0817 	add.w	r8, r4, #23
   15020:	2205      	movs	r2, #5
   15022:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15026:	4640      	mov	r0, r8
   15028:	f7eb f94a 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   1502c:	2105      	movs	r1, #5
   1502e:	4640      	mov	r0, r8
   15030:	f7f9 fc3f 	bl	e8b2 <util_ones_count_get>
		conn->data_chan_count =
   15034:	7f63      	ldrb	r3, [r4, #29]
   15036:	f360 0305 	bfi	r3, r0, #0, #6
   1503a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   1503c:	2301      	movs	r3, #1
   1503e:	7723      	strb	r3, [r4, #28]
   15040:	e09b      	b.n	1517a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15042:	481e      	ldr	r0, [pc, #120]	; (150bc <event_connection_prepare+0xbc4>)
   15044:	f7f9 fbb1 	bl	e7aa <mem_acquire>
		if (node_tx) {
   15048:	4680      	mov	r8, r0
   1504a:	2800      	cmp	r0, #0
   1504c:	f000 8095 	beq.w	1517a <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15050:	2300      	movs	r3, #0
   15052:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15056:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15058:	442b      	add	r3, r5
   1505a:	b29b      	uxth	r3, r3
   1505c:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   1505e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15062:	7903      	ldrb	r3, [r0, #4]
   15064:	f043 0303 	orr.w	r3, r3, #3
   15068:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1506a:	2308      	movs	r3, #8
   1506c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1506e:	2301      	movs	r3, #1
   15070:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15072:	2205      	movs	r2, #5
   15074:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15078:	3008      	adds	r0, #8
   1507a:	f7eb f921 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   1507e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15082:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15086:	4641      	mov	r1, r8
   15088:	4620      	mov	r0, r4
   1508a:	f7fb fe1f 	bl	10ccc <ctrl_tx_enqueue>
   1508e:	e074      	b.n	1517a <event_connection_prepare+0xc82>
   15090:	1afd498d 	.word	0x1afd498d
   15094:	00000007 	.word	0x00000007
   15098:	00012685 	.word	0x00012685
   1509c:	d1b71759 	.word	0xd1b71759
   150a0:	2000bc40 	.word	0x2000bc40
   150a4:	000123b9 	.word	0x000123b9
   150a8:	20000e8c 	.word	0x20000e8c
   150ac:	09ce5400 	.word	0x09ce5400
   150b0:	0002fbf8 	.word	0x0002fbf8
   150b4:	431bde83 	.word	0x431bde83
   150b8:	00015a55 	.word	0x00015a55
   150bc:	20000fe4 	.word	0x20000fe4
   150c0:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   150c4:	48d9      	ldr	r0, [pc, #868]	; (1542c <event_connection_prepare+0xf34>)
   150c6:	f7f9 fb70 	bl	e7aa <mem_acquire>
	if (node_tx) {
   150ca:	4680      	mov	r8, r0
   150cc:	2800      	cmp	r0, #0
   150ce:	d054      	beq.n	1517a <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   150d0:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   150d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   150d8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   150dc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   150e0:	2b00      	cmp	r3, #0
   150e2:	f2c0 808c 	blt.w	151fe <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   150e6:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   150ea:	4653      	mov	r3, sl
   150ec:	2200      	movs	r2, #0
   150ee:	f104 0193 	add.w	r1, r4, #147	; 0x93
   150f2:	f104 0083 	add.w	r0, r4, #131	; 0x83
   150f6:	f7f9 fc65 	bl	e9c4 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   150fa:	2210      	movs	r2, #16
   150fc:	4651      	mov	r1, sl
   150fe:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15102:	f7eb f8dd 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15106:	2208      	movs	r2, #8
   15108:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1510c:	f204 1033 	addw	r0, r4, #307	; 0x133
   15110:	f7eb f8d6 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15114:	2300      	movs	r3, #0
   15116:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   1511a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   1511e:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15122:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15126:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   1512a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   1512e:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15132:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15136:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   1513a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   1513e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15142:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15146:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   1514a:	f363 0200 	bfi	r2, r3, #0, #1
   1514e:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15152:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15156:	f043 0301 	orr.w	r3, r3, #1
   1515a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   1515e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15166:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   1516a:	4649      	mov	r1, r9
   1516c:	4620      	mov	r0, r4
   1516e:	f7fb fe9d 	bl	10eac <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15172:	4641      	mov	r1, r8
   15174:	4620      	mov	r0, r4
   15176:	f7fb fda9 	bl	10ccc <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1517a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   1517e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15182:	429a      	cmp	r2, r3
   15184:	d021      	beq.n	151ca <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15186:	2305      	movs	r3, #5
   15188:	2200      	movs	r2, #0
   1518a:	4611      	mov	r1, r2
   1518c:	4610      	mov	r0, r2
   1518e:	f7fc fa77 	bl	11680 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15192:	48a6      	ldr	r0, [pc, #664]	; (1542c <event_connection_prepare+0xf34>)
   15194:	f7f9 fb09 	bl	e7aa <mem_acquire>
		if (node_tx) {
   15198:	4601      	mov	r1, r0
   1519a:	b1b0      	cbz	r0, 151ca <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   1519c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   151a0:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   151a4:	7903      	ldrb	r3, [r0, #4]
   151a6:	f043 0303 	orr.w	r3, r3, #3
   151aa:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   151ac:	2302      	movs	r3, #2
   151ae:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   151b0:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   151b2:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   151b6:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   151b8:	4620      	mov	r0, r4
   151ba:	f7fb fd87 	bl	10ccc <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   151be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   151c0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   151c4:	2b01      	cmp	r3, #1
   151c6:	f240 82a6 	bls.w	15716 <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   151ca:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   151ce:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   151d2:	429a      	cmp	r2, r3
   151d4:	f000 83f9 	beq.w	159ca <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   151d8:	2305      	movs	r3, #5
   151da:	2200      	movs	r2, #0
   151dc:	4611      	mov	r1, r2
   151de:	4610      	mov	r0, r2
   151e0:	f7fc fa4e 	bl	11680 <event_stop>
	switch (conn->llcp_length.state) {
   151e4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   151e8:	f003 0303 	and.w	r3, r3, #3
   151ec:	2b03      	cmp	r3, #3
   151ee:	f200 8427 	bhi.w	15a40 <event_connection_prepare+0x1548>
   151f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   151f6:	0299      	.short	0x0299
   151f8:	03ea03ea 	.word	0x03ea03ea
   151fc:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   151fe:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15202:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15206:	2b08      	cmp	r3, #8
   15208:	d079      	beq.n	152fe <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1520a:	7903      	ldrb	r3, [r0, #4]
   1520c:	f043 0303 	orr.w	r3, r3, #3
   15210:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15212:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15216:	b333      	cbz	r3, 15266 <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15218:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1521c:	f013 0f20 	tst.w	r3, #32
   15220:	d00e      	beq.n	15240 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15222:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15226:	f013 0f04 	tst.w	r3, #4
   1522a:	d009      	beq.n	15240 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   1522c:	2311      	movs	r3, #17
   1522e:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15230:	2303      	movs	r3, #3
   15232:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15234:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15238:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   1523a:	2302      	movs	r3, #2
   1523c:	7143      	strb	r3, [r0, #5]
   1523e:	e009      	b.n	15254 <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15240:	230d      	movs	r3, #13
   15242:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15246:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1524a:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   1524e:	2301      	movs	r3, #1
   15250:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15254:	f898 3005 	ldrb.w	r3, [r8, #5]
   15258:	3301      	adds	r3, #1
   1525a:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   1525e:	2300      	movs	r3, #0
   15260:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15264:	e785      	b.n	15172 <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15266:	4620      	mov	r0, r4
   15268:	f7fd fa38 	bl	126dc <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1526c:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15270:	464b      	mov	r3, r9
   15272:	2200      	movs	r2, #0
   15274:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15278:	f104 0083 	add.w	r0, r4, #131	; 0x83
   1527c:	f7f9 fba2 	bl	e9c4 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15280:	2210      	movs	r2, #16
   15282:	4649      	mov	r1, r9
   15284:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15288:	f7eb f81a 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   1528c:	2208      	movs	r2, #8
   1528e:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15292:	f204 1033 	addw	r0, r4, #307	; 0x133
   15296:	f7eb f813 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   1529a:	2300      	movs	r3, #0
   1529c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   152a0:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   152a4:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   152a8:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   152ac:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   152b0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   152b4:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   152b8:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   152bc:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   152c0:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   152c4:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   152c8:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   152cc:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   152d0:	f042 0201 	orr.w	r2, r2, #1
   152d4:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   152d8:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   152dc:	f363 0200 	bfi	r2, r3, #0, #1
   152e0:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   152e4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   152e8:	f043 0310 	orr.w	r3, r3, #16
   152ec:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   152f0:	2301      	movs	r3, #1
   152f2:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   152f6:	2305      	movs	r3, #5
   152f8:	f888 3007 	strb.w	r3, [r8, #7]
   152fc:	e739      	b.n	15172 <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   152fe:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15434 <event_connection_prepare+0xf3c>
   15302:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15306:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1530a:	f043 0320 	orr.w	r3, r3, #32
   1530e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15312:	2100      	movs	r1, #0
   15314:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15318:	f7fb fdc8 	bl	10eac <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   1531c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15320:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15324:	f36f 0282 	bfc	r2, #2, #1
   15328:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1532c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15330:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15334:	f36f 02c3 	bfc	r2, #3, #1
   15338:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   1533c:	e719      	b.n	15172 <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1533e:	483b      	ldr	r0, [pc, #236]	; (1542c <event_connection_prepare+0xf34>)
   15340:	f7f9 fa33 	bl	e7aa <mem_acquire>
	if (node_tx) {
   15344:	4680      	mov	r8, r0
   15346:	2800      	cmp	r0, #0
   15348:	f43f af17 	beq.w	1517a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1534c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15350:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15354:	4b36      	ldr	r3, [pc, #216]	; (15430 <event_connection_prepare+0xf38>)
   15356:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1535a:	7903      	ldrb	r3, [r0, #4]
   1535c:	f043 0303 	orr.w	r3, r3, #3
   15360:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15362:	2309      	movs	r3, #9
   15364:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15366:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1536a:	2b00      	cmp	r3, #0
   1536c:	db1e      	blt.n	153ac <event_connection_prepare+0xeb4>
   1536e:	2308      	movs	r3, #8
   15370:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15374:	2208      	movs	r2, #8
   15376:	2100      	movs	r1, #0
   15378:	eb08 0002 	add.w	r0, r8, r2
   1537c:	f015 fb9e 	bl	2aabc <memset>
			conn->llcp_features & 0xFF;
   15380:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15384:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15388:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1538c:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   1538e:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15392:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15396:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   1539a:	4641      	mov	r1, r8
   1539c:	4620      	mov	r0, r4
   1539e:	f7fb fc95 	bl	10ccc <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   153a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   153a6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   153aa:	e6e6      	b.n	1517a <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   153ac:	230e      	movs	r3, #14
   153ae:	e7df      	b.n	15370 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   153b0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   153b4:	f013 0f01 	tst.w	r3, #1
   153b8:	d03e      	beq.n	15438 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   153ba:	f013 0f02 	tst.w	r3, #2
   153be:	d076      	beq.n	154ae <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   153c0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   153c4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   153c8:	4b1a      	ldr	r3, [pc, #104]	; (15434 <event_connection_prepare+0xf3c>)
   153ca:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   153ce:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   153d2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   153d4:	429a      	cmp	r2, r3
   153d6:	d358      	bcc.n	1548a <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   153d8:	4b16      	ldr	r3, [pc, #88]	; (15434 <event_connection_prepare+0xf3c>)
   153da:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   153de:	1ad3      	subs	r3, r2, r3
   153e0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   153e2:	2b01      	cmp	r3, #1
   153e4:	d95b      	bls.n	1549e <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   153e6:	4b13      	ldr	r3, [pc, #76]	; (15434 <event_connection_prepare+0xf3c>)
   153e8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   153ec:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   153f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   153f4:	2b00      	cmp	r3, #0
   153f6:	d054      	beq.n	154a2 <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   153f8:	8c22      	ldrh	r2, [r4, #32]
   153fa:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   153fc:	2201      	movs	r2, #1
   153fe:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15400:	7a1a      	ldrb	r2, [r3, #8]
   15402:	f042 0203 	orr.w	r2, r2, #3
   15406:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15408:	2206      	movs	r2, #6
   1540a:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   1540c:	220c      	movs	r2, #12
   1540e:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15410:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15414:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15416:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1541a:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1541e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15422:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15426:	f7fe fa05 	bl	13834 <packet_rx_enqueue>
   1542a:	e6a6      	b.n	1517a <event_connection_prepare+0xc82>
   1542c:	20000fe4 	.word	0x20000fe4
   15430:	000141ff 	.word	0x000141ff
   15434:	20000e8c 	.word	0x20000e8c
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15438:	48b9      	ldr	r0, [pc, #740]	; (15720 <event_connection_prepare+0x1228>)
   1543a:	f7f9 f9b6 	bl	e7aa <mem_acquire>
		if (node_tx) {
   1543e:	4601      	mov	r1, r0
   15440:	2800      	cmp	r0, #0
   15442:	f43f ae9a 	beq.w	1517a <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   15446:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1544a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1544e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15452:	f043 0301 	orr.w	r3, r3, #1
   15456:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1545a:	7903      	ldrb	r3, [r0, #4]
   1545c:	f043 0303 	orr.w	r3, r3, #3
   15460:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15462:	2306      	movs	r3, #6
   15464:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15466:	230c      	movs	r3, #12
   15468:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   1546a:	2309      	movs	r3, #9
   1546c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   1546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15472:	7243      	strb	r3, [r0, #9]
   15474:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15476:	72c3      	strb	r3, [r0, #11]
   15478:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   1547a:	4620      	mov	r0, r4
   1547c:	f7fb fc26 	bl	10ccc <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   15480:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15484:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15488:	e677      	b.n	1517a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1548a:	49a6      	ldr	r1, [pc, #664]	; (15724 <event_connection_prepare+0x122c>)
   1548c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15490:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15494:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15496:	fa52 f383 	uxtab	r3, r2, r3
   1549a:	b2db      	uxtb	r3, r3
   1549c:	e7a1      	b.n	153e2 <event_connection_prepare+0xeea>
		return 0;
   1549e:	2300      	movs	r3, #0
   154a0:	e7a8      	b.n	153f4 <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   154a2:	4040      	eors	r0, r0
   154a4:	f380 8811 	msr	BASEPRI, r0
   154a8:	f04f 0004 	mov.w	r0, #4
   154ac:	df02      	svc	2
		LL_ASSERT(0);
   154ae:	4040      	eors	r0, r0
   154b0:	f380 8811 	msr	BASEPRI, r0
   154b4:	f04f 0004 	mov.w	r0, #4
   154b8:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   154ba:	4899      	ldr	r0, [pc, #612]	; (15720 <event_connection_prepare+0x1228>)
   154bc:	f7f9 f975 	bl	e7aa <mem_acquire>
	if (node_tx) {
   154c0:	4601      	mov	r1, r0
   154c2:	2800      	cmp	r0, #0
   154c4:	f43f ae59 	beq.w	1517a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   154c8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   154cc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154d0:	7903      	ldrb	r3, [r0, #4]
   154d2:	f043 0303 	orr.w	r3, r3, #3
   154d6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   154d8:	2301      	movs	r3, #1
   154da:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   154dc:	2312      	movs	r3, #18
   154de:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   154e0:	4620      	mov	r0, r4
   154e2:	f7fb fbf3 	bl	10ccc <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   154e6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   154ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   154ee:	e644      	b.n	1517a <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   154f0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   154f4:	f012 0f01 	tst.w	r2, #1
   154f8:	d16b      	bne.n	155d2 <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   154fa:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   154fe:	1aeb      	subs	r3, r5, r3
   15500:	b29b      	uxth	r3, r3
   15502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15506:	f6bf ae38 	bge.w	1517a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1550a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1550e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   15512:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15516:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   1551a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1551e:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15522:	f012 0f1c 	tst.w	r2, #28
   15526:	d009      	beq.n	1553c <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15528:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1552c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15530:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   15534:	f363 0ec5 	bfi	lr, r3, #3, #3
   15538:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   1553c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   15540:	d008      	beq.n	15554 <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   15542:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15546:	095b      	lsrs	r3, r3, #5
   15548:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   1554c:	f363 0e02 	bfi	lr, r3, #0, #3
   15550:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   15554:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15558:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   1555c:	f36e 13c7 	bfi	r3, lr, #7, #1
   15560:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15564:	f012 0f02 	tst.w	r2, #2
   15568:	d105      	bne.n	15576 <event_connection_prepare+0x107e>
   1556a:	b2db      	uxtb	r3, r3
   1556c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15570:	4299      	cmp	r1, r3
   15572:	f000 80b0 	beq.w	156d6 <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   15576:	4b6b      	ldr	r3, [pc, #428]	; (15724 <event_connection_prepare+0x122c>)
   15578:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1557c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15580:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15582:	429a      	cmp	r2, r3
   15584:	f0c0 80af 	bcc.w	156e6 <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   15588:	4b66      	ldr	r3, [pc, #408]	; (15724 <event_connection_prepare+0x122c>)
   1558a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1558e:	1ad3      	subs	r3, r2, r3
   15590:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15592:	2b01      	cmp	r3, #1
   15594:	f240 80b1 	bls.w	156fa <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   15598:	4b62      	ldr	r3, [pc, #392]	; (15724 <event_connection_prepare+0x122c>)
   1559a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1559e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   155a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   155a6:	2b00      	cmp	r3, #0
   155a8:	f000 80a9 	beq.w	156fe <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   155ac:	8c22      	ldrh	r2, [r4, #32]
   155ae:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   155b0:	220c      	movs	r2, #12
   155b2:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   155b4:	2200      	movs	r2, #0
   155b6:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   155b8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   155bc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   155c0:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   155c2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   155c6:	f3c2 0202 	ubfx	r2, r2, #0, #3
   155ca:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   155cc:	f7fe f932 	bl	13834 <packet_rx_enqueue>
   155d0:	e5d3      	b.n	1517a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   155d2:	4853      	ldr	r0, [pc, #332]	; (15720 <event_connection_prepare+0x1228>)
   155d4:	f7f9 f8e9 	bl	e7aa <mem_acquire>
		if (node_tx) {
   155d8:	4680      	mov	r8, r0
   155da:	2800      	cmp	r0, #0
   155dc:	f43f adcd 	beq.w	1517a <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   155e0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   155e4:	f36f 0300 	bfc	r3, #0, #1
   155e8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   155ec:	b2db      	uxtb	r3, r3
   155ee:	f3c3 0282 	ubfx	r2, r3, #2, #3
   155f2:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   155f6:	d147      	bne.n	15688 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   155f8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   155fc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   15600:	2300      	movs	r3, #0
   15602:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   15606:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1560a:	f013 0f02 	tst.w	r3, #2
   1560e:	d041      	beq.n	15694 <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   15610:	4b44      	ldr	r3, [pc, #272]	; (15724 <event_connection_prepare+0x122c>)
   15612:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15616:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1561a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1561c:	429a      	cmp	r2, r3
   1561e:	d321      	bcc.n	15664 <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   15620:	4b40      	ldr	r3, [pc, #256]	; (15724 <event_connection_prepare+0x122c>)
   15622:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15626:	1ad3      	subs	r3, r2, r3
   15628:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1562a:	2b01      	cmp	r3, #1
   1562c:	d924      	bls.n	15678 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   1562e:	4b3d      	ldr	r3, [pc, #244]	; (15724 <event_connection_prepare+0x122c>)
   15630:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15634:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   1563c:	b1f3      	cbz	r3, 1567c <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   1563e:	8c22      	ldrh	r2, [r4, #32]
   15640:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   15642:	220c      	movs	r2, #12
   15644:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   15646:	2200      	movs	r2, #0
   15648:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   1564a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1564e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15652:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   15654:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15658:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1565c:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   1565e:	f7fe f8e9 	bl	13834 <packet_rx_enqueue>
   15662:	e017      	b.n	15694 <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   15664:	492f      	ldr	r1, [pc, #188]	; (15724 <event_connection_prepare+0x122c>)
   15666:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1566a:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1566e:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15670:	fa52 f383 	uxtab	r3, r2, r3
   15674:	b2db      	uxtb	r3, r3
   15676:	e7d8      	b.n	1562a <event_connection_prepare+0x1132>
		return 0;
   15678:	2300      	movs	r3, #0
   1567a:	e7df      	b.n	1563c <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   1567c:	4040      	eors	r0, r0
   1567e:	f380 8811 	msr	BASEPRI, r0
   15682:	f04f 0004 	mov.w	r0, #4
   15686:	df02      	svc	2
								 conn->latency +
   15688:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   1568a:	442b      	add	r3, r5
   1568c:	b29b      	uxth	r3, r3
								 conn->latency +
   1568e:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   15690:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15694:	f898 3004 	ldrb.w	r3, [r8, #4]
   15698:	f043 0303 	orr.w	r3, r3, #3
   1569c:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   156a0:	2305      	movs	r3, #5
   156a2:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   156a6:	2318      	movs	r3, #24
   156a8:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   156ac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   156b4:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   156b8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
   156c0:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   156c4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   156c8:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   156cc:	4641      	mov	r1, r8
   156ce:	4620      	mov	r0, r4
   156d0:	f7fb fafc 	bl	10ccc <ctrl_tx_enqueue>
   156d4:	e551      	b.n	1517a <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   156d6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   156da:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   156de:	4298      	cmp	r0, r3
   156e0:	f47f af49 	bne.w	15576 <event_connection_prepare+0x107e>
   156e4:	e549      	b.n	1517a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   156e6:	490f      	ldr	r1, [pc, #60]	; (15724 <event_connection_prepare+0x122c>)
   156e8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   156ec:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   156f0:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   156f2:	fa52 f383 	uxtab	r3, r2, r3
   156f6:	b2db      	uxtb	r3, r3
   156f8:	e74b      	b.n	15592 <event_connection_prepare+0x109a>
		return 0;
   156fa:	2300      	movs	r3, #0
   156fc:	e753      	b.n	155a6 <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   156fe:	4040      	eors	r0, r0
   15700:	f380 8811 	msr	BASEPRI, r0
   15704:	f04f 0004 	mov.w	r0, #4
   15708:	df02      	svc	2
			LL_ASSERT(0);
   1570a:	4040      	eors	r0, r0
   1570c:	f380 8811 	msr	BASEPRI, r0
   15710:	f04f 0004 	mov.w	r0, #4
   15714:	df02      	svc	2
				conn->procedure_expire++;
   15716:	3301      	adds	r3, #1
   15718:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1571c:	e555      	b.n	151ca <event_connection_prepare+0xcd2>
   1571e:	bf00      	nop
   15720:	20000fe4 	.word	0x20000fe4
   15724:	20000e8c 	.word	0x20000e8c
	if (_radio.packet_rx_acquire >=
   15728:	4bbf      	ldr	r3, [pc, #764]	; (15a28 <event_connection_prepare+0x1530>)
   1572a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1572e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15732:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15734:	429a      	cmp	r2, r3
   15736:	d346      	bcc.n	157c6 <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   15738:	4bbb      	ldr	r3, [pc, #748]	; (15a28 <event_connection_prepare+0x1530>)
   1573a:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1573e:	eba2 0808 	sub.w	r8, r2, r8
   15742:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   15746:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1574a:	4bb7      	ldr	r3, [pc, #732]	; (15a28 <event_connection_prepare+0x1530>)
   1574c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15750:	f7f9 f85f 	bl	e812 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15754:	4440      	add	r0, r8
   15756:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   15758:	28ff      	cmp	r0, #255	; 0xff
   1575a:	d840      	bhi.n	157de <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1575c:	4bb2      	ldr	r3, [pc, #712]	; (15a28 <event_connection_prepare+0x1530>)
   1575e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   15762:	4298      	cmp	r0, r3
   15764:	f040 8131 	bne.w	159ca <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15768:	48b0      	ldr	r0, [pc, #704]	; (15a2c <event_connection_prepare+0x1534>)
   1576a:	f7f9 f81e 	bl	e7aa <mem_acquire>
		if (!node_tx) {
   1576e:	4601      	mov	r1, r0
   15770:	2800      	cmp	r0, #0
   15772:	f000 812a 	beq.w	159ca <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   15776:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1577a:	2201      	movs	r2, #1
   1577c:	f362 0301 	bfi	r3, r2, #0, #2
   15780:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15784:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   15788:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   1578a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1578e:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15790:	7903      	ldrb	r3, [r0, #4]
   15792:	f043 0303 	orr.w	r3, r3, #3
   15796:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15798:	2309      	movs	r3, #9
   1579a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1579c:	2314      	movs	r3, #20
   1579e:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   157a0:	231b      	movs	r3, #27
   157a2:	7203      	strb	r3, [r0, #8]
   157a4:	2300      	movs	r3, #0
   157a6:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   157a8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   157aa:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   157ac:	2348      	movs	r3, #72	; 0x48
   157ae:	7283      	strb	r3, [r0, #10]
   157b0:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   157b2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   157b4:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   157b6:	4620      	mov	r0, r4
   157b8:	f7fb fa88 	bl	10ccc <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   157bc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   157c0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   157c4:	e101      	b.n	159ca <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   157c6:	4b98      	ldr	r3, [pc, #608]	; (15a28 <event_connection_prepare+0x1530>)
   157c8:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   157cc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   157d0:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   157d4:	fa52 f888 	uxtab	r8, r2, r8
   157d8:	fa5f f888 	uxtb.w	r8, r8
   157dc:	e7b3      	b.n	15746 <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   157de:	4040      	eors	r0, r0
   157e0:	f380 8811 	msr	BASEPRI, r0
   157e4:	f04f 0004 	mov.w	r0, #4
   157e8:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   157ea:	4b8f      	ldr	r3, [pc, #572]	; (15a28 <event_connection_prepare+0x1530>)
   157ec:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   157f0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   157f4:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   157f6:	429a      	cmp	r2, r3
   157f8:	d352      	bcc.n	158a0 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   157fa:	4b8b      	ldr	r3, [pc, #556]	; (15a28 <event_connection_prepare+0x1530>)
   157fc:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15800:	eba2 0808 	sub.w	r8, r2, r8
   15804:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   15808:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1580c:	4b86      	ldr	r3, [pc, #536]	; (15a28 <event_connection_prepare+0x1530>)
   1580e:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15812:	f7f8 fffe 	bl	e812 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15816:	4440      	add	r0, r8
   15818:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1581a:	28ff      	cmp	r0, #255	; 0xff
   1581c:	d84c      	bhi.n	158b8 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1581e:	4b82      	ldr	r3, [pc, #520]	; (15a28 <event_connection_prepare+0x1530>)
   15820:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   15824:	4298      	cmp	r0, r3
   15826:	d14d      	bne.n	158c4 <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   15828:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1582c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   15830:	2100      	movs	r1, #0
   15832:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   15836:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 15a28 <event_connection_prepare+0x1530>
   1583a:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   1583e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15842:	f361 02c3 	bfi	r2, r1, #3, #1
   15846:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   1584a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   1584e:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   15850:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   15854:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   15856:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   1585a:	f7f8 ffda 	bl	e812 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   1585e:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   15862:	b10b      	cbz	r3, 15868 <event_connection_prepare+0x1370>
			free_count_conn++;
   15864:	3001      	adds	r0, #1
   15866:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   15868:	4b6f      	ldr	r3, [pc, #444]	; (15a28 <event_connection_prepare+0x1530>)
   1586a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1586e:	b10b      	cbz	r3, 15874 <event_connection_prepare+0x137c>
			free_count_conn++;
   15870:	3001      	adds	r0, #1
   15872:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   15874:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   15878:	f109 090e 	add.w	r9, r9, #14
   1587c:	fa1f f989 	uxth.w	r9, r9
   15880:	f029 0903 	bic.w	r9, r9, #3
   15884:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15888:	3001      	adds	r0, #1
   1588a:	4b67      	ldr	r3, [pc, #412]	; (15a28 <event_connection_prepare+0x1530>)
   1588c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   15890:	4298      	cmp	r0, r3
   15892:	d038      	beq.n	15906 <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   15894:	4b64      	ldr	r3, [pc, #400]	; (15a28 <event_connection_prepare+0x1530>)
   15896:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1589a:	4599      	cmp	r9, r3
   1589c:	d833      	bhi.n	15906 <event_connection_prepare+0x140e>
   1589e:	e066      	b.n	1596e <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   158a0:	4b61      	ldr	r3, [pc, #388]	; (15a28 <event_connection_prepare+0x1530>)
   158a2:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   158a6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   158aa:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   158ae:	fa52 f888 	uxtab	r8, r2, r8
   158b2:	fa5f f888 	uxtb.w	r8, r8
   158b6:	e7a7      	b.n	15808 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   158b8:	4040      	eors	r0, r0
   158ba:	f380 8811 	msr	BASEPRI, r0
   158be:	f04f 0004 	mov.w	r0, #4
   158c2:	df02      	svc	2
			LL_ASSERT(0);
   158c4:	4040      	eors	r0, r0
   158c6:	f380 8811 	msr	BASEPRI, r0
   158ca:	f04f 0004 	mov.w	r0, #4
   158ce:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   158d0:	3b01      	subs	r3, #1
   158d2:	4a55      	ldr	r2, [pc, #340]	; (15a28 <event_connection_prepare+0x1530>)
   158d4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   158d8:	4f53      	ldr	r7, [pc, #332]	; (15a28 <event_connection_prepare+0x1530>)
   158da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   158de:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   158e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   158e6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   158ea:	6818      	ldr	r0, [r3, #0]
   158ec:	f7f8 ff79 	bl	e7e2 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   158f0:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   158f4:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   158f8:	3a01      	subs	r2, #1
   158fa:	4293      	cmp	r3, r2
   158fc:	da14      	bge.n	15928 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   158fe:	3301      	adds	r3, #1
   15900:	4a49      	ldr	r2, [pc, #292]	; (15a28 <event_connection_prepare+0x1530>)
   15902:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   15906:	4a48      	ldr	r2, [pc, #288]	; (15a28 <event_connection_prepare+0x1530>)
   15908:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   1590c:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   15910:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   15912:	4293      	cmp	r3, r2
   15914:	d00e      	beq.n	15934 <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   15916:	2b00      	cmp	r3, #0
   15918:	d1da      	bne.n	158d0 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   1591a:	4a43      	ldr	r2, [pc, #268]	; (15a28 <event_connection_prepare+0x1530>)
   1591c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   15920:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   15922:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   15926:	e7d7      	b.n	158d8 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   15928:	4040      	eors	r0, r0
   1592a:	f380 8811 	msr	BASEPRI, r0
   1592e:	f04f 0004 	mov.w	r0, #4
   15932:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   15934:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   15936:	2b29      	cmp	r3, #41	; 0x29
   15938:	d85f      	bhi.n	159fa <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   1593a:	2234      	movs	r2, #52	; 0x34
   1593c:	4b3a      	ldr	r3, [pc, #232]	; (15a28 <event_connection_prepare+0x1530>)
   1593e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   15942:	4b39      	ldr	r3, [pc, #228]	; (15a28 <event_connection_prepare+0x1530>)
   15944:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   15948:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   1594c:	fbb2 f2f1 	udiv	r2, r2, r1
   15950:	b2d2      	uxtb	r2, r2
   15952:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   15956:	2a00      	cmp	r2, #0
   15958:	d053      	beq.n	15a02 <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   1595a:	4833      	ldr	r0, [pc, #204]	; (15a28 <event_connection_prepare+0x1530>)
   1595c:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   15960:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   15964:	f7f8 fefc 	bl	e760 <mem_init>
			packet_rx_allocate(4);
   15968:	2004      	movs	r0, #4
   1596a:	f7fb fc59 	bl	11220 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   1596e:	4b2e      	ldr	r3, [pc, #184]	; (15a28 <event_connection_prepare+0x1530>)
   15970:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15974:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15978:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1597a:	429a      	cmp	r2, r3
   1597c:	d347      	bcc.n	15a0e <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   1597e:	4b2a      	ldr	r3, [pc, #168]	; (15a28 <event_connection_prepare+0x1530>)
   15980:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15984:	1ad3      	subs	r3, r2, r3
   15986:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15988:	2b01      	cmp	r3, #1
   1598a:	d94a      	bls.n	15a22 <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   1598c:	4b26      	ldr	r3, [pc, #152]	; (15a28 <event_connection_prepare+0x1530>)
   1598e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15992:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   1599a:	2b00      	cmp	r3, #0
   1599c:	d04a      	beq.n	15a34 <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   1599e:	8c22      	ldrh	r2, [r4, #32]
   159a0:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   159a2:	2201      	movs	r2, #1
   159a4:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   159a6:	7a1a      	ldrb	r2, [r3, #8]
   159a8:	f042 0203 	orr.w	r2, r2, #3
   159ac:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   159ae:	2209      	movs	r2, #9
   159b0:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   159b2:	2215      	movs	r2, #21
   159b4:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   159b6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   159b8:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   159ba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   159bc:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   159be:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   159c0:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   159c2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   159c4:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   159c6:	f7fd ff35 	bl	13834 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   159ca:	1d23      	adds	r3, r4, #4
   159cc:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   159ce:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   159d0:	3207      	adds	r2, #7
   159d2:	b2d2      	uxtb	r2, r2
   159d4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   159d8:	2800      	cmp	r0, #0
   159da:	db37      	blt.n	15a4c <event_connection_prepare+0x1554>
   159dc:	4814      	ldr	r0, [pc, #80]	; (15a30 <event_connection_prepare+0x1538>)
   159de:	9403      	str	r4, [sp, #12]
   159e0:	9002      	str	r0, [sp, #8]
   159e2:	9201      	str	r2, [sp, #4]
   159e4:	9100      	str	r1, [sp, #0]
   159e6:	4622      	mov	r2, r4
   159e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   159ea:	4630      	mov	r0, r6
   159ec:	f7fe fc7e 	bl	142ec <event_common_prepare>
	conn->event_counter = event_counter + 1;
   159f0:	3501      	adds	r5, #1
   159f2:	8465      	strh	r5, [r4, #34]	; 0x22
}
   159f4:	b00f      	add	sp, #60	; 0x3c
   159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   159fa:	4b0b      	ldr	r3, [pc, #44]	; (15a28 <event_connection_prepare+0x1530>)
   159fc:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   15a00:	e79f      	b.n	15942 <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   15a02:	4040      	eors	r0, r0
   15a04:	f380 8811 	msr	BASEPRI, r0
   15a08:	f04f 0004 	mov.w	r0, #4
   15a0c:	df02      	svc	2
		return (_radio.packet_rx_count -
   15a0e:	4906      	ldr	r1, [pc, #24]	; (15a28 <event_connection_prepare+0x1530>)
   15a10:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15a14:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15a18:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15a1a:	fa52 f383 	uxtab	r3, r2, r3
   15a1e:	b2db      	uxtb	r3, r3
   15a20:	e7b2      	b.n	15988 <event_connection_prepare+0x1490>
		return 0;
   15a22:	2300      	movs	r3, #0
   15a24:	e7b9      	b.n	1599a <event_connection_prepare+0x14a2>
   15a26:	bf00      	nop
   15a28:	20000e8c 	.word	0x20000e8c
   15a2c:	20000fe4 	.word	0x20000fe4
   15a30:	00015ea9 	.word	0x00015ea9
		LL_ASSERT(node_rx);
   15a34:	4040      	eors	r0, r0
   15a36:	f380 8811 	msr	BASEPRI, r0
   15a3a:	f04f 0004 	mov.w	r0, #4
   15a3e:	df02      	svc	2
		LL_ASSERT(0);
   15a40:	4040      	eors	r0, r0
   15a42:	f380 8811 	msr	BASEPRI, r0
   15a46:	f04f 0004 	mov.w	r0, #4
   15a4a:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   15a4c:	4800      	ldr	r0, [pc, #0]	; (15a50 <event_connection_prepare+0x1558>)
   15a4e:	e7c6      	b.n	159de <event_connection_prepare+0x14e6>
   15a50:	00015fe5 	.word	0x00015fe5

00015a54 <event_slave_prepare>:
{
   15a54:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15a56:	f7fe fd4f 	bl	144f8 <event_connection_prepare>
   15a5a:	bd08      	pop	{r3, pc}

00015a5c <event_master_prepare>:
{
   15a5c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15a5e:	f7fe fd4b 	bl	144f8 <event_connection_prepare>
   15a62:	bd08      	pop	{r3, pc}

00015a64 <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   15a64:	4b20      	ldr	r3, [pc, #128]	; (15ae8 <event_scan_prepare+0x84>)
   15a66:	7b1b      	ldrb	r3, [r3, #12]
   15a68:	bb23      	cbnz	r3, 15ab4 <event_scan_prepare+0x50>
{
   15a6a:	b530      	push	{r4, r5, lr}
   15a6c:	b085      	sub	sp, #20
   15a6e:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   15a70:	4c1d      	ldr	r4, [pc, #116]	; (15ae8 <event_scan_prepare+0x84>)
   15a72:	2306      	movs	r3, #6
   15a74:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   15a76:	2200      	movs	r2, #0
   15a78:	9203      	str	r2, [sp, #12]
   15a7a:	4a1c      	ldr	r2, [pc, #112]	; (15aec <event_scan_prepare+0x88>)
   15a7c:	9202      	str	r2, [sp, #8]
   15a7e:	9301      	str	r3, [sp, #4]
   15a80:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   15a84:	9300      	str	r3, [sp, #0]
   15a86:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   15a8a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   15a8e:	f7fe fc2d 	bl	142ec <event_common_prepare>
	if (_radio.scanner.conn) {
   15a92:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   15a96:	b15b      	cbz	r3, 15ab0 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15a98:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	db0f      	blt.n	15ac0 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   15aa0:	4b13      	ldr	r3, [pc, #76]	; (15af0 <event_scan_prepare+0x8c>)
   15aa2:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15aa4:	2201      	movs	r2, #1
   15aa6:	4611      	mov	r1, r2
   15aa8:	2000      	movs	r0, #0
   15aaa:	f7f8 fd3d 	bl	e528 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15aae:	b9a8      	cbnz	r0, 15adc <event_scan_prepare+0x78>
}
   15ab0:	b005      	add	sp, #20
   15ab2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15ab4:	4040      	eors	r0, r0
   15ab6:	f380 8811 	msr	BASEPRI, r0
   15aba:	f04f 0004 	mov.w	r0, #4
   15abe:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   15ac0:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   15ac4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   15ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15acc:	4291      	cmp	r1, r2
   15ace:	bf2c      	ite	cs
   15ad0:	ebc3 0301 	rsbcs	r3, r3, r1
   15ad4:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   15ad8:	441d      	add	r5, r3
   15ada:	e7e1      	b.n	15aa0 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   15adc:	4040      	eors	r0, r0
   15ade:	f380 8811 	msr	BASEPRI, r0
   15ae2:	f04f 0004 	mov.w	r0, #4
   15ae6:	df02      	svc	2
   15ae8:	20000e8c 	.word	0x20000e8c
   15aec:	00016181 	.word	0x00016181
   15af0:	2000bc30 	.word	0x2000bc30
   15af4:	00000000 	.word	0x00000000

00015af8 <mayfly_xtal_stop_calc>:
{
   15af8:	b530      	push	{r4, r5, lr}
   15afa:	b08d      	sub	sp, #52	; 0x34
   15afc:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   15afe:	2302      	movs	r3, #2
   15b00:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   15b02:	23ff      	movs	r3, #255	; 0xff
   15b04:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   15b08:	2300      	movs	r3, #0
   15b0a:	930a      	str	r3, [sp, #40]	; 0x28
   15b0c:	e012      	b.n	15b34 <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   15b0e:	2101      	movs	r1, #1
   15b10:	2000      	movs	r0, #0
   15b12:	f7fa fc71 	bl	103f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   15b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b18:	2b02      	cmp	r3, #2
   15b1a:	d0f8      	beq.n	15b0e <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b1e:	b9cb      	cbnz	r3, 15b54 <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   15b20:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   15b24:	2aff      	cmp	r2, #255	; 0xff
   15b26:	d01b      	beq.n	15b60 <mayfly_xtal_stop_calc+0x68>
   15b28:	4b8b      	ldr	r3, [pc, #556]	; (15d58 <mayfly_xtal_stop_calc+0x260>)
   15b2a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   15b2e:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   15b30:	429a      	cmp	r2, r3
   15b32:	db15      	blt.n	15b60 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   15b34:	ab0b      	add	r3, sp, #44	; 0x2c
   15b36:	9302      	str	r3, [sp, #8]
   15b38:	4b88      	ldr	r3, [pc, #544]	; (15d5c <mayfly_xtal_stop_calc+0x264>)
   15b3a:	9301      	str	r3, [sp, #4]
   15b3c:	ab0a      	add	r3, sp, #40	; 0x28
   15b3e:	9300      	str	r3, [sp, #0]
   15b40:	ab09      	add	r3, sp, #36	; 0x24
   15b42:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   15b46:	2101      	movs	r1, #1
   15b48:	2000      	movs	r0, #0
   15b4a:	f7fa fbd5 	bl	102f8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   15b4e:	2802      	cmp	r0, #2
   15b50:	d1e4      	bne.n	15b1c <mayfly_xtal_stop_calc+0x24>
   15b52:	e7e0      	b.n	15b16 <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15b54:	4040      	eors	r0, r0
   15b56:	f380 8811 	msr	BASEPRI, r0
   15b5a:	f04f 0004 	mov.w	r0, #4
   15b5e:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   15b60:	2aff      	cmp	r2, #255	; 0xff
   15b62:	d002      	beq.n	15b6a <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   15b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   15b66:	2ba8      	cmp	r3, #168	; 0xa8
   15b68:	d91a      	bls.n	15ba0 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   15b6a:	2100      	movs	r1, #0
   15b6c:	2001      	movs	r0, #1
   15b6e:	f7fb fdcd 	bl	1170c <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   15b72:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15b76:	1f53      	subs	r3, r2, #5
   15b78:	b2db      	uxtb	r3, r3
   15b7a:	2bf9      	cmp	r3, #249	; 0xf9
   15b7c:	d80e      	bhi.n	15b9c <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b7e:	2a06      	cmp	r2, #6
   15b80:	f200 80d1 	bhi.w	15d26 <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15b84:	2a05      	cmp	r2, #5
   15b86:	f000 80de 	beq.w	15d46 <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15b8a:	2a06      	cmp	r2, #6
   15b8c:	f040 80d5 	bne.w	15d3a <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   15b90:	4873      	ldr	r0, [pc, #460]	; (15d60 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   15b92:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15b96:	2101      	movs	r1, #1
   15b98:	f7fe fb80 	bl	1429c <prepare_normal_set>
}
   15b9c:	b00d      	add	sp, #52	; 0x34
   15b9e:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   15ba0:	2101      	movs	r1, #1
   15ba2:	4608      	mov	r0, r1
   15ba4:	f7fb fdb2 	bl	1170c <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   15ba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15bac:	2b04      	cmp	r3, #4
   15bae:	d9f5      	bls.n	15b9c <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   15bb0:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15bb2:	2b06      	cmp	r3, #6
   15bb4:	d82a      	bhi.n	15c0c <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15bb6:	2b05      	cmp	r3, #5
   15bb8:	d03a      	beq.n	15c30 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15bba:	2b06      	cmp	r3, #6
   15bbc:	d132      	bne.n	15c24 <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   15bbe:	4968      	ldr	r1, [pc, #416]	; (15d60 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   15bc0:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   15bc2:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   15bc4:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   15bc6:	429a      	cmp	r2, r3
   15bc8:	bf38      	it	cc
   15bca:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   15bcc:	680b      	ldr	r3, [r1, #0]
   15bce:	2b00      	cmp	r3, #0
   15bd0:	db31      	blt.n	15c36 <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   15bd2:	429a      	cmp	r2, r3
   15bd4:	d336      	bcc.n	15c44 <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15bd6:	2c06      	cmp	r4, #6
   15bd8:	d84e      	bhi.n	15c78 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   15bda:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   15bdc:	2d00      	cmp	r5, #0
   15bde:	d0dd      	beq.n	15b9c <mayfly_xtal_stop_calc+0xa4>
   15be0:	2c00      	cmp	r4, #0
   15be2:	d0db      	beq.n	15b9c <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   15be4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15be6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   15be8:	4293      	cmp	r3, r2
   15bea:	d1d7      	bne.n	15b9c <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   15bec:	b292      	uxth	r2, r2
   15bee:	485d      	ldr	r0, [pc, #372]	; (15d64 <mayfly_xtal_stop_calc+0x26c>)
   15bf0:	fba2 0100 	umull	r0, r1, r2, r0
   15bf4:	f240 1323 	movw	r3, #291	; 0x123
   15bf8:	fb03 1102 	mla	r1, r3, r2, r1
   15bfc:	a354      	add	r3, pc, #336	; (adr r3, 15d50 <mayfly_xtal_stop_calc+0x258>)
   15bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c02:	f7eb fa7b 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   15c06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   15c0a:	e050      	b.n	15cae <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   15c0c:	3b07      	subs	r3, #7
   15c0e:	b29a      	uxth	r2, r3
   15c10:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15c14:	4b50      	ldr	r3, [pc, #320]	; (15d58 <mayfly_xtal_stop_calc+0x260>)
   15c16:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15c1a:	f7f8 fe03 	bl	e824 <mem_get>
   15c1e:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   15c20:	4601      	mov	r1, r0
   15c22:	e7ce      	b.n	15bc2 <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   15c24:	4040      	eors	r0, r0
   15c26:	f380 8811 	msr	BASEPRI, r0
   15c2a:	f04f 0004 	mov.w	r0, #4
   15c2e:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15c30:	494d      	ldr	r1, [pc, #308]	; (15d68 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   15c32:	2500      	movs	r5, #0
   15c34:	e7c5      	b.n	15bc2 <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   15c3a:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15c3e:	4413      	add	r3, r2
   15c40:	930a      	str	r3, [sp, #40]	; 0x28
   15c42:	e7c8      	b.n	15bd6 <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   15c44:	1a9b      	subs	r3, r3, r2
						ticker_update(
   15c46:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15c4a:	b29b      	uxth	r3, r3
					ticker_status =
   15c4c:	9106      	str	r1, [sp, #24]
   15c4e:	4947      	ldr	r1, [pc, #284]	; (15d6c <mayfly_xtal_stop_calc+0x274>)
   15c50:	9105      	str	r1, [sp, #20]
   15c52:	2000      	movs	r0, #0
   15c54:	9004      	str	r0, [sp, #16]
   15c56:	9003      	str	r0, [sp, #12]
   15c58:	9302      	str	r3, [sp, #8]
   15c5a:	9001      	str	r0, [sp, #4]
   15c5c:	9000      	str	r0, [sp, #0]
   15c5e:	2101      	movs	r1, #1
   15c60:	f7fa fac0 	bl	101e4 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   15c64:	2800      	cmp	r0, #0
   15c66:	d0b6      	beq.n	15bd6 <mayfly_xtal_stop_calc+0xde>
   15c68:	2802      	cmp	r0, #2
   15c6a:	d0b4      	beq.n	15bd6 <mayfly_xtal_stop_calc+0xde>
   15c6c:	4040      	eors	r0, r0
   15c6e:	f380 8811 	msr	BASEPRI, r0
   15c72:	f04f 0004 	mov.w	r0, #4
   15c76:	df02      	svc	2
					mem_get(_radio.conn_pool,
   15c78:	3c07      	subs	r4, #7
				conn_curr =
   15c7a:	b2a2      	uxth	r2, r4
   15c7c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15c80:	4b35      	ldr	r3, [pc, #212]	; (15d58 <mayfly_xtal_stop_calc+0x260>)
   15c82:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15c86:	f7f8 fdcd 	bl	e824 <mem_get>
   15c8a:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   15c8c:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   15c8e:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   15c90:	429a      	cmp	r2, r3
   15c92:	bf38      	it	cc
   15c94:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   15c96:	6803      	ldr	r3, [r0, #0]
   15c98:	2b00      	cmp	r3, #0
   15c9a:	da9f      	bge.n	15bdc <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   15c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   15ca0:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   15ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15ca4:	4413      	add	r3, r2
   15ca6:	930a      	str	r3, [sp, #40]	; 0x28
   15ca8:	e798      	b.n	15bdc <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   15caa:	1a1b      	subs	r3, r3, r0
   15cac:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   15cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cb0:	4298      	cmp	r0, r3
   15cb2:	d3fa      	bcc.n	15caa <mayfly_xtal_stop_calc+0x1b2>
   15cb4:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   15cb8:	2900      	cmp	r1, #0
   15cba:	db1c      	blt.n	15cf6 <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   15cbc:	2900      	cmp	r1, #0
   15cbe:	f6ff af6d 	blt.w	15b9c <mayfly_xtal_stop_calc+0xa4>
   15cc2:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15cc6:	2a00      	cmp	r2, #0
   15cc8:	f6bf af68 	bge.w	15b9c <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   15ccc:	68e2      	ldr	r2, [r4, #12]
								625) +
   15cce:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   15cd0:	4293      	cmp	r3, r2
   15cd2:	f4bf af63 	bcs.w	15b9c <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   15cd6:	4628      	mov	r0, r5
   15cd8:	f7fb f852 	bl	10d80 <conn_update_req>
					if ((status == 2) &&
   15cdc:	2802      	cmp	r0, #2
   15cde:	f47f af5d 	bne.w	15b9c <mayfly_xtal_stop_calc+0xa4>
   15ce2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15ce6:	f013 0f02 	tst.w	r3, #2
   15cea:	f43f af57 	beq.w	15b9c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   15cee:	4620      	mov	r0, r4
   15cf0:	f7fb f846 	bl	10d80 <conn_update_req>
   15cf4:	e752      	b.n	15b9c <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   15cf6:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15cfa:	2a00      	cmp	r2, #0
   15cfc:	dbde      	blt.n	15cbc <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   15cfe:	68e2      	ldr	r2, [r4, #12]
							 625) +
   15d00:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   15d02:	4293      	cmp	r3, r2
   15d04:	d2da      	bcs.n	15cbc <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   15d06:	4620      	mov	r0, r4
   15d08:	f7fb f83a 	bl	10d80 <conn_update_req>
					if ((status == 2) &&
   15d0c:	2802      	cmp	r0, #2
   15d0e:	f47f af45 	bne.w	15b9c <mayfly_xtal_stop_calc+0xa4>
   15d12:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   15d16:	f013 0f02 	tst.w	r3, #2
   15d1a:	f43f af3f 	beq.w	15b9c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   15d1e:	4628      	mov	r0, r5
   15d20:	f7fb f82e 	bl	10d80 <conn_update_req>
   15d24:	e73a      	b.n	15b9c <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   15d26:	3a07      	subs	r2, #7
   15d28:	b292      	uxth	r2, r2
   15d2a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15d2e:	4b0a      	ldr	r3, [pc, #40]	; (15d58 <mayfly_xtal_stop_calc+0x260>)
   15d30:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15d34:	f7f8 fd76 	bl	e824 <mem_get>
   15d38:	e72b      	b.n	15b92 <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   15d3a:	4040      	eors	r0, r0
   15d3c:	f380 8811 	msr	BASEPRI, r0
   15d40:	f04f 0004 	mov.w	r0, #4
   15d44:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15d46:	4808      	ldr	r0, [pc, #32]	; (15d68 <mayfly_xtal_stop_calc+0x270>)
   15d48:	e723      	b.n	15b92 <mayfly_xtal_stop_calc+0x9a>
   15d4a:	bf00      	nop
   15d4c:	f3af 8000 	nop.w
   15d50:	1afd498d 	.word	0x1afd498d
   15d54:	00000007 	.word	0x00000007
   15d58:	20000e8c 	.word	0x20000e8c
   15d5c:	00010b2d 	.word	0x00010b2d
   15d60:	20000f58 	.word	0x20000f58
   15d64:	09ce5400 	.word	0x09ce5400
   15d68:	20000ea0 	.word	0x20000ea0
   15d6c:	00010b59 	.word	0x00010b59

00015d70 <preempt_calc>:
{
   15d70:	b570      	push	{r4, r5, r6, lr}
   15d72:	4605      	mov	r5, r0
   15d74:	460e      	mov	r6, r1
   15d76:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   15d78:	f7fa fb4e 	bl	10418 <ticker_ticks_now_get>
	u32_t diff =
   15d7c:	4621      	mov	r1, r4
   15d7e:	f7fa fb4f 	bl	10420 <ticker_ticks_diff_get>
	diff += 3;
   15d82:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   15d84:	2c09      	cmp	r4, #9
   15d86:	d801      	bhi.n	15d8c <preempt_calc+0x1c>
	return 0;
   15d88:	2000      	movs	r0, #0
   15d8a:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   15d8c:	2100      	movs	r1, #0
   15d8e:	4608      	mov	r0, r1
   15d90:	f7fb fcbc 	bl	1170c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   15d94:	4632      	mov	r2, r6
   15d96:	2100      	movs	r1, #0
   15d98:	4628      	mov	r0, r5
   15d9a:	f7fe fa7f 	bl	1429c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   15d9e:	68ab      	ldr	r3, [r5, #8]
   15da0:	441c      	add	r4, r3
		if (diff <
   15da2:	2c26      	cmp	r4, #38	; 0x26
   15da4:	d802      	bhi.n	15dac <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   15da6:	60ac      	str	r4, [r5, #8]
		return 1;
   15da8:	2001      	movs	r0, #1
   15daa:	bd70      	pop	{r4, r5, r6, pc}
   15dac:	2001      	movs	r0, #1
}
   15dae:	bd70      	pop	{r4, r5, r6, pc}

00015db0 <event_adv>:
{
   15db0:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15db2:	4b3b      	ldr	r3, [pc, #236]	; (15ea0 <event_adv+0xf0>)
   15db4:	7bdb      	ldrb	r3, [r3, #15]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d142      	bne.n	15e40 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15dba:	4b39      	ldr	r3, [pc, #228]	; (15ea0 <event_adv+0xf0>)
   15dbc:	7b1b      	ldrb	r3, [r3, #12]
   15dbe:	b2db      	uxtb	r3, r3
   15dc0:	2b05      	cmp	r3, #5
   15dc2:	d143      	bne.n	15e4c <event_adv+0x9c>
   15dc4:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   15dc6:	4c36      	ldr	r4, [pc, #216]	; (15ea0 <event_adv+0xf0>)
   15dc8:	2101      	movs	r1, #1
   15dca:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   15dcc:	2300      	movs	r3, #0
   15dce:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   15dd0:	2305      	movs	r3, #5
   15dd2:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15dd4:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   15dd6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   15dda:	f000 0007 	and.w	r0, r0, #7
   15dde:	f7fb fd5b 	bl	11898 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   15de2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15de6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15dea:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   15dee:	f363 0243 	bfi	r2, r3, #1, #3
   15df2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   15df6:	f7fc f841 	bl	11e7c <adv_setup>
	if (ctrl_rl_enabled()) {
   15dfa:	f003 fa43 	bl	19284 <ctrl_rl_enabled>
   15dfe:	bb58      	cbnz	r0, 15e58 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   15e00:	4b27      	ldr	r3, [pc, #156]	; (15ea0 <event_adv+0xf0>)
   15e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   15e06:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   15e0a:	d134      	bne.n	15e76 <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   15e0c:	4c24      	ldr	r4, [pc, #144]	; (15ea0 <event_adv+0xf0>)
   15e0e:	68a2      	ldr	r2, [r4, #8]
   15e10:	f105 0109 	add.w	r1, r5, #9
   15e14:	2001      	movs	r0, #1
   15e16:	f7f8 ffeb 	bl	edf0 <radio_tmr_start>
	radio_tmr_end_capture();
   15e1a:	f7f9 f89b 	bl	ef54 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   15e1e:	462a      	mov	r2, r5
   15e20:	2105      	movs	r1, #5
   15e22:	f104 0014 	add.w	r0, r4, #20
   15e26:	f7ff ffa3 	bl	15d70 <preempt_calc>
   15e2a:	bb68      	cbnz	r0, 15e88 <event_adv+0xd8>
		ticker_status =
   15e2c:	2300      	movs	r3, #0
   15e2e:	4a1d      	ldr	r2, [pc, #116]	; (15ea4 <event_adv+0xf4>)
   15e30:	4619      	mov	r1, r3
   15e32:	4618      	mov	r0, r3
   15e34:	f7fa faa4 	bl	10380 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15e38:	b108      	cbz	r0, 15e3e <event_adv+0x8e>
   15e3a:	2802      	cmp	r0, #2
   15e3c:	d129      	bne.n	15e92 <event_adv+0xe2>
   15e3e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15e40:	4040      	eors	r0, r0
   15e42:	f380 8811 	msr	BASEPRI, r0
   15e46:	f04f 0004 	mov.w	r0, #4
   15e4a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15e4c:	4040      	eors	r0, r0
   15e4e:	f380 8811 	msr	BASEPRI, r0
   15e52:	f04f 0004 	mov.w	r0, #4
   15e56:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   15e58:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15e5c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   15e60:	bf14      	ite	ne
   15e62:	2001      	movne	r0, #1
   15e64:	2000      	moveq	r0, #0
   15e66:	f003 f80f 	bl	18e88 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   15e6a:	1c82      	adds	r2, r0, #2
   15e6c:	7841      	ldrb	r1, [r0, #1]
   15e6e:	7800      	ldrb	r0, [r0, #0]
   15e70:	f7f8 ff40 	bl	ecf4 <radio_filter_configure>
   15e74:	e7ca      	b.n	15e0c <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   15e76:	2001      	movs	r0, #1
   15e78:	f003 f806 	bl	18e88 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   15e7c:	1c82      	adds	r2, r0, #2
   15e7e:	7841      	ldrb	r1, [r0, #1]
   15e80:	7800      	ldrb	r0, [r0, #0]
   15e82:	f7f8 ff37 	bl	ecf4 <radio_filter_configure>
   15e86:	e7c1      	b.n	15e0c <event_adv+0x5c>
		_radio.state = STATE_STOP;
   15e88:	2204      	movs	r2, #4
   15e8a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   15e8c:	f7f8 fea2 	bl	ebd4 <radio_disable>
   15e90:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15e92:	4040      	eors	r0, r0
   15e94:	f380 8811 	msr	BASEPRI, r0
   15e98:	f04f 0004 	mov.w	r0, #4
   15e9c:	df02      	svc	2
   15e9e:	bf00      	nop
   15ea0:	20000e8c 	.word	0x20000e8c
   15ea4:	00011359 	.word	0x00011359

00015ea8 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15ea8:	4a4c      	ldr	r2, [pc, #304]	; (15fdc <event_master+0x134>)
   15eaa:	7bd2      	ldrb	r2, [r2, #15]
   15eac:	2a00      	cmp	r2, #0
   15eae:	d174      	bne.n	15f9a <event_master+0xf2>
{
   15eb0:	b530      	push	{r4, r5, lr}
   15eb2:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   15eb4:	4a49      	ldr	r2, [pc, #292]	; (15fdc <event_master+0x134>)
   15eb6:	7b12      	ldrb	r2, [r2, #12]
   15eb8:	b2d2      	uxtb	r2, r2
   15eba:	8c19      	ldrh	r1, [r3, #32]
   15ebc:	1dcc      	adds	r4, r1, #7
   15ebe:	42a2      	cmp	r2, r4
   15ec0:	d171      	bne.n	15fa6 <event_master+0xfe>
   15ec2:	461c      	mov	r4, r3
   15ec4:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   15ec6:	4b45      	ldr	r3, [pc, #276]	; (15fdc <event_master+0x134>)
   15ec8:	2204      	movs	r2, #4
   15eca:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   15ecc:	2002      	movs	r0, #2
   15ece:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   15ed0:	2200      	movs	r2, #0
   15ed2:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15ed4:	3107      	adds	r1, #7
   15ed6:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   15ed8:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15eda:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   15edc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   15ee0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   15ee4:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   15ee8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15eea:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15eec:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   15eee:	f7fb fd69 	bl	119c4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   15ef2:	a903      	add	r1, sp, #12
   15ef4:	4620      	mov	r0, r4
   15ef6:	f7fb fed3 	bl	11ca0 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   15efa:	9b03      	ldr	r3, [sp, #12]
   15efc:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   15f00:	781a      	ldrb	r2, [r3, #0]
   15f02:	f361 02c3 	bfi	r2, r1, #3, #1
   15f06:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   15f08:	9a03      	ldr	r2, [sp, #12]
   15f0a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15f0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15f12:	7811      	ldrb	r1, [r2, #0]
   15f14:	f363 0182 	bfi	r1, r3, #2, #1
   15f18:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   15f1a:	4620      	mov	r0, r4
   15f1c:	f7fb fce0 	bl	118e0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15f20:	2096      	movs	r0, #150	; 0x96
   15f22:	f7f8 ff5f 	bl	ede4 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   15f26:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15f2a:	f000 0007 	and.w	r0, r0, #7
   15f2e:	f7f8 fea7 	bl	ec80 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   15f32:	9903      	ldr	r1, [sp, #12]
   15f34:	4620      	mov	r0, r4
   15f36:	f7fb ff49 	bl	11dcc <tx_packet_set>
	if (conn->data_chan_sel) {
   15f3a:	7f63      	ldrb	r3, [r4, #29]
   15f3c:	f013 0f40 	tst.w	r3, #64	; 0x40
   15f40:	d037      	beq.n	15fb2 <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15f42:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15f44:	3801      	subs	r0, #1
   15f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15f4a:	f104 0217 	add.w	r2, r4, #23
   15f4e:	8be1      	ldrh	r1, [r4, #30]
   15f50:	b280      	uxth	r0, r0
   15f52:	f7fa fe8b 	bl	10c6c <chan_sel_2>
	chan_set(data_chan_use);
   15f56:	f7fb ff65 	bl	11e24 <chan_set>
		remainder_us = radio_tmr_start(1,
   15f5a:	4b20      	ldr	r3, [pc, #128]	; (15fdc <event_master+0x134>)
   15f5c:	689a      	ldr	r2, [r3, #8]
   15f5e:	f105 0109 	add.w	r1, r5, #9
   15f62:	2001      	movs	r0, #1
   15f64:	f7f8 ff44 	bl	edf0 <radio_tmr_start>
		radio_tmr_end_capture();
   15f68:	f7f8 fff4 	bl	ef54 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   15f6c:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   15f6e:	3107      	adds	r1, #7
   15f70:	462a      	mov	r2, r5
   15f72:	b2c9      	uxtb	r1, r1
   15f74:	4620      	mov	r0, r4
   15f76:	f7ff fefb 	bl	15d70 <preempt_calc>
	if (0 !=
   15f7a:	bb38      	cbnz	r0, 15fcc <event_master+0x124>
		ticker_status =
   15f7c:	2300      	movs	r3, #0
   15f7e:	4a18      	ldr	r2, [pc, #96]	; (15fe0 <event_master+0x138>)
   15f80:	4619      	mov	r1, r3
   15f82:	4618      	mov	r0, r3
   15f84:	f7fa f9fc 	bl	10380 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15f88:	b328      	cbz	r0, 15fd6 <event_master+0x12e>
   15f8a:	2802      	cmp	r0, #2
   15f8c:	d023      	beq.n	15fd6 <event_master+0x12e>
   15f8e:	4040      	eors	r0, r0
   15f90:	f380 8811 	msr	BASEPRI, r0
   15f94:	f04f 0004 	mov.w	r0, #4
   15f98:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   15f9a:	4040      	eors	r0, r0
   15f9c:	f380 8811 	msr	BASEPRI, r0
   15fa0:	f04f 0004 	mov.w	r0, #4
   15fa4:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   15fa6:	4040      	eors	r0, r0
   15fa8:	f380 8811 	msr	BASEPRI, r0
   15fac:	f04f 0004 	mov.w	r0, #4
   15fb0:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15fb2:	7fa1      	ldrb	r1, [r4, #30]
   15fb4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   15fb6:	7f63      	ldrb	r3, [r4, #29]
   15fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15fbc:	9300      	str	r3, [sp, #0]
   15fbe:	f104 0317 	add.w	r3, r4, #23
   15fc2:	f104 001f 	add.w	r0, r4, #31
   15fc6:	f7fa fdf3 	bl	10bb0 <chan_sel_1>
   15fca:	e7c4      	b.n	15f56 <event_master+0xae>
		_radio.state = STATE_STOP;
   15fcc:	2204      	movs	r2, #4
   15fce:	4b03      	ldr	r3, [pc, #12]	; (15fdc <event_master+0x134>)
   15fd0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   15fd2:	f7f8 fdff 	bl	ebd4 <radio_disable>
}
   15fd6:	b005      	add	sp, #20
   15fd8:	bd30      	pop	{r4, r5, pc}
   15fda:	bf00      	nop
   15fdc:	20000e8c 	.word	0x20000e8c
   15fe0:	00011359 	.word	0x00011359

00015fe4 <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15fe4:	4a64      	ldr	r2, [pc, #400]	; (16178 <event_slave+0x194>)
   15fe6:	7bd2      	ldrb	r2, [r2, #15]
   15fe8:	2a00      	cmp	r2, #0
   15fea:	f040 809d 	bne.w	16128 <event_slave+0x144>
{
   15fee:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ff0:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   15ff2:	4a61      	ldr	r2, [pc, #388]	; (16178 <event_slave+0x194>)
   15ff4:	7b11      	ldrb	r1, [r2, #12]
   15ff6:	b2c9      	uxtb	r1, r1
   15ff8:	8c1a      	ldrh	r2, [r3, #32]
   15ffa:	1dd4      	adds	r4, r2, #7
   15ffc:	42a1      	cmp	r1, r4
   15ffe:	f040 8099 	bne.w	16134 <event_slave+0x150>
   16002:	461c      	mov	r4, r3
   16004:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16006:	4d5c      	ldr	r5, [pc, #368]	; (16178 <event_slave+0x194>)
   16008:	2303      	movs	r3, #3
   1600a:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   1600c:	2301      	movs	r3, #1
   1600e:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16010:	2700      	movs	r7, #0
   16012:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16014:	3207      	adds	r2, #7
   16016:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16018:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   1601a:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   1601c:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16020:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16024:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16028:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1602a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   1602c:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   1602e:	4620      	mov	r0, r4
   16030:	f7fb fc56 	bl	118e0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16034:	2096      	movs	r0, #150	; 0x96
   16036:	f7f8 fed5 	bl	ede4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   1603a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1603e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16042:	09d3      	lsrs	r3, r2, #7
   16044:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16048:	4639      	mov	r1, r7
   1604a:	f000 0007 	and.w	r0, r0, #7
   1604e:	f7f8 fe1f 	bl	ec90 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16052:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16056:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   1605a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   1605e:	3108      	adds	r1, #8
   16060:	4620      	mov	r0, r4
   16062:	f7fb fc51 	bl	11908 <rx_packet_set>
	if (conn->data_chan_sel) {
   16066:	7f63      	ldrb	r3, [r4, #29]
   16068:	f013 0f40 	tst.w	r3, #64	; 0x40
   1606c:	d068      	beq.n	16140 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1606e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16070:	3801      	subs	r0, #1
   16072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16076:	f104 0217 	add.w	r2, r4, #23
   1607a:	8be1      	ldrh	r1, [r4, #30]
   1607c:	b280      	uxth	r0, r0
   1607e:	f7fa fdf5 	bl	10c6c <chan_sel_2>
	chan_set(data_chan_use);
   16082:	f7fb fecf 	bl	11e24 <chan_set>
		conn->slave.window_widening_prepare_us;
   16086:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16088:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1608a:	4413      	add	r3, r2
   1608c:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   1608e:	2200      	movs	r2, #0
   16090:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16092:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16094:	4293      	cmp	r3, r2
   16096:	d900      	bls.n	1609a <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16098:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   1609a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   1609c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1609e:	4413      	add	r3, r2
   160a0:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   160a2:	2700      	movs	r7, #0
   160a4:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   160a6:	4b34      	ldr	r3, [pc, #208]	; (16178 <event_slave+0x194>)
   160a8:	689a      	ldr	r2, [r3, #8]
   160aa:	f106 0109 	add.w	r1, r6, #9
   160ae:	4638      	mov	r0, r7
   160b0:	f7f8 fe9e 	bl	edf0 <radio_tmr_start>
   160b4:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   160b6:	f7f8 ff19 	bl	eeec <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   160ba:	4638      	mov	r0, r7
   160bc:	f7f8 ff38 	bl	ef30 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   160c0:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   160c2:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   160c6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   160c8:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   160ca:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   160cc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   160d0:	f000 0007 	and.w	r0, r0, #7
   160d4:	f7f8 fd6a 	bl	ebac <radio_rx_ready_delay_get>
   160d8:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   160da:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   160de:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   160e2:	2802      	cmp	r0, #2
   160e4:	d03c      	beq.n	16160 <event_slave+0x17c>
   160e6:	2804      	cmp	r0, #4
   160e8:	d037      	beq.n	1615a <event_slave+0x176>
		return 40;
   160ea:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   160ec:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   160ee:	2101      	movs	r1, #1
   160f0:	f7f8 fd5e 	bl	ebb0 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   160f4:	4428      	add	r0, r5
   160f6:	f7f8 fed7 	bl	eea8 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   160fa:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   160fc:	3107      	adds	r1, #7
   160fe:	4632      	mov	r2, r6
   16100:	b2c9      	uxtb	r1, r1
   16102:	4620      	mov	r0, r4
   16104:	f7ff fe34 	bl	15d70 <preempt_calc>
   16108:	bb60      	cbnz	r0, 16164 <event_slave+0x180>
		ticker_status =
   1610a:	2300      	movs	r3, #0
   1610c:	4a1b      	ldr	r2, [pc, #108]	; (1617c <event_slave+0x198>)
   1610e:	4619      	mov	r1, r3
   16110:	4618      	mov	r0, r3
   16112:	f7fa f935 	bl	10380 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16116:	b350      	cbz	r0, 1616e <event_slave+0x18a>
   16118:	2802      	cmp	r0, #2
   1611a:	d028      	beq.n	1616e <event_slave+0x18a>
   1611c:	4040      	eors	r0, r0
   1611e:	f380 8811 	msr	BASEPRI, r0
   16122:	f04f 0004 	mov.w	r0, #4
   16126:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16128:	4040      	eors	r0, r0
   1612a:	f380 8811 	msr	BASEPRI, r0
   1612e:	f04f 0004 	mov.w	r0, #4
   16132:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16134:	4040      	eors	r0, r0
   16136:	f380 8811 	msr	BASEPRI, r0
   1613a:	f04f 0004 	mov.w	r0, #4
   1613e:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16140:	7fa1      	ldrb	r1, [r4, #30]
   16142:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16144:	7f63      	ldrb	r3, [r4, #29]
   16146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   1614a:	9300      	str	r3, [sp, #0]
   1614c:	f104 0317 	add.w	r3, r4, #23
   16150:	f104 001f 	add.w	r0, r4, #31
   16154:	f7fa fd2c 	bl	10bb0 <chan_sel_1>
   16158:	e793      	b.n	16082 <event_slave+0x9e>
		return 376;
   1615a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1615e:	e7c5      	b.n	160ec <event_slave+0x108>
		return 24;
   16160:	2318      	movs	r3, #24
   16162:	e7c3      	b.n	160ec <event_slave+0x108>
		_radio.state = STATE_STOP;
   16164:	2204      	movs	r2, #4
   16166:	4b04      	ldr	r3, [pc, #16]	; (16178 <event_slave+0x194>)
   16168:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1616a:	f7f8 fd33 	bl	ebd4 <radio_disable>
	packet_tx_enqueue(2);
   1616e:	2002      	movs	r0, #2
   16170:	f7fb fc28 	bl	119c4 <packet_tx_enqueue>
}
   16174:	b003      	add	sp, #12
   16176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16178:	20000e8c 	.word	0x20000e8c
   1617c:	00011359 	.word	0x00011359

00016180 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16180:	4b67      	ldr	r3, [pc, #412]	; (16320 <event_scan+0x1a0>)
   16182:	7bdb      	ldrb	r3, [r3, #15]
   16184:	2b00      	cmp	r3, #0
   16186:	f040 808b 	bne.w	162a0 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   1618a:	4b65      	ldr	r3, [pc, #404]	; (16320 <event_scan+0x1a0>)
   1618c:	7b1b      	ldrb	r3, [r3, #12]
   1618e:	b2db      	uxtb	r3, r3
   16190:	2b06      	cmp	r3, #6
   16192:	f040 808b 	bne.w	162ac <event_scan+0x12c>
{
   16196:	b570      	push	{r4, r5, r6, lr}
   16198:	b08c      	sub	sp, #48	; 0x30
   1619a:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   1619c:	4c60      	ldr	r4, [pc, #384]	; (16320 <event_scan+0x1a0>)
   1619e:	2302      	movs	r3, #2
   161a0:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   161a2:	2101      	movs	r1, #1
   161a4:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   161a6:	2200      	movs	r2, #0
   161a8:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   161aa:	2306      	movs	r3, #6
   161ac:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   161ae:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   161b0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   161b4:	f362 0341 	bfi	r3, r2, #1, #1
   161b8:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   161bc:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   161c0:	f000 0007 	and.w	r0, r0, #7
   161c4:	f7fb fb68 	bl	11898 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   161c8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   161cc:	f3c3 0081 	ubfx	r0, r3, #2, #2
   161d0:	1c42      	adds	r2, r0, #1
   161d2:	f362 0383 	bfi	r3, r2, #2, #2
   161d6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   161da:	3025      	adds	r0, #37	; 0x25
   161dc:	f7fb fe22 	bl	11e24 <chan_set>
	if (_radio.scanner.chan == 3) {
   161e0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   161e4:	f003 030c 	and.w	r3, r3, #12
   161e8:	2b0c      	cmp	r3, #12
   161ea:	d065      	beq.n	162b8 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   161ec:	2096      	movs	r0, #150	; 0x96
   161ee:	f7f8 fdf9 	bl	ede4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   161f2:	2300      	movs	r3, #0
   161f4:	461a      	mov	r2, r3
   161f6:	4619      	mov	r1, r3
   161f8:	4618      	mov	r0, r3
   161fa:	f7f8 fd49 	bl	ec90 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   161fe:	4b48      	ldr	r3, [pc, #288]	; (16320 <event_scan+0x1a0>)
   16200:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16204:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16208:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1620c:	3008      	adds	r0, #8
   1620e:	f7f8 fcbd 	bl	eb8c <radio_pkt_rx_set>
	radio_rssi_measure();
   16212:	f7f8 fd4d 	bl	ecb0 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16216:	f003 f835 	bl	19284 <ctrl_rl_enabled>
   1621a:	2800      	cmp	r0, #0
   1621c:	d153      	bne.n	162c6 <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   1621e:	4b40      	ldr	r3, [pc, #256]	; (16320 <event_scan+0x1a0>)
   16220:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16224:	f013 0f30 	tst.w	r3, #48	; 0x30
   16228:	d165      	bne.n	162f6 <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   1622a:	4c3d      	ldr	r4, [pc, #244]	; (16320 <event_scan+0x1a0>)
   1622c:	68a2      	ldr	r2, [r4, #8]
   1622e:	f105 0109 	add.w	r1, r5, #9
   16232:	2000      	movs	r0, #0
   16234:	f7f8 fddc 	bl	edf0 <radio_tmr_start>
	radio_tmr_end_capture();
   16238:	f7f8 fe8c 	bl	ef54 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   1623c:	462a      	mov	r2, r5
   1623e:	2106      	movs	r1, #6
   16240:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16244:	f7ff fd94 	bl	15d70 <preempt_calc>
   16248:	2800      	cmp	r0, #0
   1624a:	d15d      	bne.n	16308 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   1624c:	4b34      	ldr	r3, [pc, #208]	; (16320 <event_scan+0x1a0>)
   1624e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16252:	3309      	adds	r3, #9
		ticker_status =
   16254:	f641 0287 	movw	r2, #6279	; 0x1887
   16258:	9208      	str	r2, [sp, #32]
   1625a:	4a32      	ldr	r2, [pc, #200]	; (16324 <event_scan+0x1a4>)
   1625c:	9207      	str	r2, [sp, #28]
   1625e:	2204      	movs	r2, #4
   16260:	9206      	str	r2, [sp, #24]
   16262:	4931      	ldr	r1, [pc, #196]	; (16328 <event_scan+0x1a8>)
   16264:	9105      	str	r1, [sp, #20]
   16266:	2000      	movs	r0, #0
   16268:	9004      	str	r0, [sp, #16]
   1626a:	9003      	str	r0, [sp, #12]
   1626c:	9002      	str	r0, [sp, #8]
   1626e:	9001      	str	r0, [sp, #4]
   16270:	9300      	str	r3, [sp, #0]
   16272:	462b      	mov	r3, r5
   16274:	4601      	mov	r1, r0
   16276:	f7f9 ff67 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1627a:	b108      	cbz	r0, 16280 <event_scan+0x100>
   1627c:	2802      	cmp	r0, #2
   1627e:	d149      	bne.n	16314 <event_scan+0x194>
			ticker_status =
   16280:	2300      	movs	r3, #0
   16282:	4a2a      	ldr	r2, [pc, #168]	; (1632c <event_scan+0x1ac>)
   16284:	4619      	mov	r1, r3
   16286:	4618      	mov	r0, r3
   16288:	f7fa f87a 	bl	10380 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1628c:	2800      	cmp	r0, #0
   1628e:	d03f      	beq.n	16310 <event_scan+0x190>
   16290:	2802      	cmp	r0, #2
   16292:	d03d      	beq.n	16310 <event_scan+0x190>
   16294:	4040      	eors	r0, r0
   16296:	f380 8811 	msr	BASEPRI, r0
   1629a:	f04f 0004 	mov.w	r0, #4
   1629e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   162a0:	4040      	eors	r0, r0
   162a2:	f380 8811 	msr	BASEPRI, r0
   162a6:	f04f 0004 	mov.w	r0, #4
   162aa:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   162ac:	4040      	eors	r0, r0
   162ae:	f380 8811 	msr	BASEPRI, r0
   162b2:	f04f 0004 	mov.w	r0, #4
   162b6:	df02      	svc	2
		_radio.scanner.chan = 0;
   162b8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   162bc:	f36f 0283 	bfc	r2, #2, #2
   162c0:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   162c4:	e792      	b.n	161ec <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   162c6:	4b16      	ldr	r3, [pc, #88]	; (16320 <event_scan+0x1a0>)
   162c8:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   162cc:	f3c0 1000 	ubfx	r0, r0, #4, #1
   162d0:	f002 fdda 	bl	18e88 <ctrl_filter_get>
   162d4:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   162d6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   162da:	f002 fd4f 	bl	18d7c <ctrl_irks_get>
   162de:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   162e0:	1ca2      	adds	r2, r4, #2
   162e2:	7861      	ldrb	r1, [r4, #1]
   162e4:	7820      	ldrb	r0, [r4, #0]
   162e6:	f7f8 fd05 	bl	ecf4 <radio_filter_configure>
		radio_ar_configure(count, irks);
   162ea:	4631      	mov	r1, r6
   162ec:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   162f0:	f7f8 fedc 	bl	f0ac <radio_ar_configure>
   162f4:	e799      	b.n	1622a <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   162f6:	2001      	movs	r0, #1
   162f8:	f002 fdc6 	bl	18e88 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   162fc:	1c82      	adds	r2, r0, #2
   162fe:	7841      	ldrb	r1, [r0, #1]
   16300:	7800      	ldrb	r0, [r0, #0]
   16302:	f7f8 fcf7 	bl	ecf4 <radio_filter_configure>
   16306:	e790      	b.n	1622a <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16308:	2204      	movs	r2, #4
   1630a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   1630c:	f7f8 fc62 	bl	ebd4 <radio_disable>
}
   16310:	b00c      	add	sp, #48	; 0x30
   16312:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16314:	4040      	eors	r0, r0
   16316:	f380 8811 	msr	BASEPRI, r0
   1631a:	f04f 0004 	mov.w	r0, #4
   1631e:	df02      	svc	2
   16320:	20000e8c 	.word	0x20000e8c
   16324:	00010e9d 	.word	0x00010e9d
   16328:	00011681 	.word	0x00011681
   1632c:	00011359 	.word	0x00011359

00016330 <access_addr_get>:
{
   16330:	b5f0      	push	{r4, r5, r6, r7, lr}
   16332:	b083      	sub	sp, #12
	retry = 3;
   16334:	2403      	movs	r4, #3
   16336:	e059      	b.n	163ec <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16338:	4040      	eors	r0, r0
   1633a:	f380 8811 	msr	BASEPRI, r0
   1633e:	f04f 0004 	mov.w	r0, #4
   16342:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16344:	9900      	ldr	r1, [sp, #0]
   16346:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16348:	4607      	mov	r7, r0
	bit_idx = 31;
   1634a:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   1634c:	2501      	movs	r5, #1
	while (bit_idx--) {
   1634e:	e010      	b.n	16372 <access_addr_get+0x42>
			consecutive_cnt++;
   16350:	3501      	adds	r5, #1
   16352:	b2ed      	uxtb	r5, r5
   16354:	e01c      	b.n	16390 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16356:	b9ff      	cbnz	r7, 16398 <access_addr_get+0x68>
			if (consecutive_bit) {
   16358:	b319      	cbz	r1, 163a2 <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   1635a:	2201      	movs	r2, #1
   1635c:	409a      	lsls	r2, r3
   1635e:	ea26 0602 	bic.w	r6, r6, r2
   16362:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16364:	4601      	mov	r1, r0
			transitions++;
   16366:	3701      	adds	r7, #1
   16368:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   1636a:	2501      	movs	r5, #1
	while (bit_idx--) {
   1636c:	461a      	mov	r2, r3
		if (transitions > 24) {
   1636e:	2f18      	cmp	r7, #24
   16370:	d81d      	bhi.n	163ae <access_addr_get+0x7e>
	while (bit_idx--) {
   16372:	1e53      	subs	r3, r2, #1
   16374:	b2db      	uxtb	r3, r3
   16376:	b32a      	cbz	r2, 163c4 <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16378:	9e00      	ldr	r6, [sp, #0]
   1637a:	469e      	mov	lr, r3
   1637c:	fa26 f203 	lsr.w	r2, r6, r3
   16380:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16384:	4291      	cmp	r1, r2
   16386:	d0e3      	beq.n	16350 <access_addr_get+0x20>
			transitions++;
   16388:	3701      	adds	r7, #1
   1638a:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   1638c:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   1638e:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16390:	2d06      	cmp	r5, #6
   16392:	d8e1      	bhi.n	16358 <access_addr_get+0x28>
   16394:	2b1b      	cmp	r3, #27
   16396:	d9de      	bls.n	16356 <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16398:	2b1a      	cmp	r3, #26
   1639a:	d8e7      	bhi.n	1636c <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   1639c:	2f01      	cmp	r7, #1
   1639e:	d8e5      	bhi.n	1636c <access_addr_get+0x3c>
   163a0:	e7da      	b.n	16358 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   163a2:	2101      	movs	r1, #1
   163a4:	fa01 f203 	lsl.w	r2, r1, r3
   163a8:	4316      	orrs	r6, r2
   163aa:	9600      	str	r6, [sp, #0]
   163ac:	e7db      	b.n	16366 <access_addr_get+0x36>
			if (consecutive_bit) {
   163ae:	2900      	cmp	r1, #0
   163b0:	d02d      	beq.n	1640e <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   163b2:	f10e 0e01 	add.w	lr, lr, #1
   163b6:	2301      	movs	r3, #1
   163b8:	fa03 f30e 	lsl.w	r3, r3, lr
   163bc:	425b      	negs	r3, r3
   163be:	9a00      	ldr	r2, [sp, #0]
   163c0:	4013      	ands	r3, r2
   163c2:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   163c4:	4b19      	ldr	r3, [pc, #100]	; (1642c <access_addr_get+0xfc>)
   163c6:	9a00      	ldr	r2, [sp, #0]
   163c8:	4053      	eors	r3, r2
   163ca:	a802      	add	r0, sp, #8
   163cc:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   163d0:	2104      	movs	r1, #4
   163d2:	f7f8 fa6e 	bl	e8b2 <util_ones_count_get>
   163d6:	2801      	cmp	r0, #1
   163d8:	d908      	bls.n	163ec <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   163da:	9800      	ldr	r0, [sp, #0]
   163dc:	b283      	uxth	r3, r0
   163de:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   163e2:	d120      	bne.n	16426 <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   163e4:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   163e6:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   163ea:	d11c      	bne.n	16426 <access_addr_get+0xf6>
	LL_ASSERT(retry);
   163ec:	2c00      	cmp	r4, #0
   163ee:	d0a3      	beq.n	16338 <access_addr_get+0x8>
	retry--;
   163f0:	3c01      	subs	r4, #1
   163f2:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   163f4:	2004      	movs	r0, #4
	while (len) {
   163f6:	2800      	cmp	r0, #0
   163f8:	d0a4      	beq.n	16344 <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   163fa:	4669      	mov	r1, sp
   163fc:	f7f9 fc1c 	bl	fc38 <rand_get>
   16400:	b2c0      	uxtb	r0, r0
		if (len) {
   16402:	2800      	cmp	r0, #0
   16404:	d0f7      	beq.n	163f6 <access_addr_get+0xc6>
   16406:	bf20      	wfe
  __ASM volatile ("sev");
   16408:	bf40      	sev
  __ASM volatile ("wfe");
   1640a:	bf20      	wfe
   1640c:	e7f3      	b.n	163f6 <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1640e:	f10e 0e01 	add.w	lr, lr, #1
   16412:	2301      	movs	r3, #1
   16414:	fa03 fe0e 	lsl.w	lr, r3, lr
   16418:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1641c:	9b00      	ldr	r3, [sp, #0]
   1641e:	ea43 030e 	orr.w	r3, r3, lr
   16422:	9300      	str	r3, [sp, #0]
   16424:	e7ce      	b.n	163c4 <access_addr_get+0x94>
}
   16426:	b003      	add	sp, #12
   16428:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1642a:	bf00      	nop
   1642c:	8e89bed6 	.word	0x8e89bed6

00016430 <isr_rx_scan>:
{
   16430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16434:	b08f      	sub	sp, #60	; 0x3c
   16436:	4617      	mov	r7, r2
   16438:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   1643c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16440:	4b99      	ldr	r3, [pc, #612]	; (166a8 <isr_rx_scan+0x278>)
   16442:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16446:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   1644a:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   1644e:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16452:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16456:	b15b      	cbz	r3, 16470 <isr_rx_scan+0x40>
   16458:	4b93      	ldr	r3, [pc, #588]	; (166a8 <isr_rx_scan+0x278>)
   1645a:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   1645e:	b34b      	cbz	r3, 164b4 <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16460:	4a91      	ldr	r2, [pc, #580]	; (166a8 <isr_rx_scan+0x278>)
   16462:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16466:	b2db      	uxtb	r3, r3
   16468:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1646c:	4293      	cmp	r3, r2
   1646e:	d021      	beq.n	164b4 <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16470:	7a23      	ldrb	r3, [r4, #8]
   16472:	f013 030f 	ands.w	r3, r3, #15
   16476:	f000 82e9 	beq.w	16a4c <isr_rx_scan+0x61c>
   1647a:	2b06      	cmp	r3, #6
   1647c:	f000 82e6 	beq.w	16a4c <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16480:	2b00      	cmp	r3, #0
   16482:	f000 83d9 	beq.w	16c38 <isr_rx_scan+0x808>
   16486:	2b01      	cmp	r3, #1
   16488:	f000 8355 	beq.w	16b36 <isr_rx_scan+0x706>
	bool dir_report = false;
   1648c:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16490:	7a23      	ldrb	r3, [r4, #8]
   16492:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   16496:	2b02      	cmp	r3, #2
   16498:	f000 83d0 	beq.w	16c3c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1649c:	2b06      	cmp	r3, #6
   1649e:	f000 83cd 	beq.w	16c3c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   164a2:	2b07      	cmp	r3, #7
   164a4:	f000 839f 	beq.w	16be6 <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   164a8:	2b04      	cmp	r3, #4
   164aa:	f000 83a3 	beq.w	16bf4 <isr_rx_scan+0x7c4>
		return 1;
   164ae:	f04f 0a01 	mov.w	sl, #1
   164b2:	e3cb      	b.n	16c4c <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   164b4:	4b7c      	ldr	r3, [pc, #496]	; (166a8 <isr_rx_scan+0x278>)
   164b6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   164ba:	f013 0f10 	tst.w	r3, #16
   164be:	d072      	beq.n	165a6 <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   164c0:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   164c2:	f013 030f 	ands.w	r3, r3, #15
   164c6:	f000 80da 	beq.w	1667e <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   164ca:	2b01      	cmp	r3, #1
   164cc:	f000 808f 	beq.w	165ee <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   164d0:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   164d2:	2b00      	cmp	r3, #0
   164d4:	d0cc      	beq.n	16470 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   164d6:	f7f8 fd4f 	bl	ef78 <radio_tmr_end_get>
   164da:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   164de:	4b72      	ldr	r3, [pc, #456]	; (166a8 <isr_rx_scan+0x278>)
   164e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   164e4:	4871      	ldr	r0, [pc, #452]	; (166ac <isr_rx_scan+0x27c>)
   164e6:	fba3 0100 	umull	r0, r1, r3, r0
   164ea:	2207      	movs	r2, #7
   164ec:	fb02 1103 	mla	r1, r2, r3, r1
   164f0:	a36b      	add	r3, pc, #428	; (adr r3, 166a0 <isr_rx_scan+0x270>)
   164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   164f6:	f7ea fe01 	bl	10fc <__aeabi_uldivmod>
   164fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   164fe:	4581      	cmp	r9, r0
   16500:	d2b6      	bcs.n	16470 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   16502:	4b69      	ldr	r3, [pc, #420]	; (166a8 <isr_rx_scan+0x278>)
   16504:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16508:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1650c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1650e:	429a      	cmp	r2, r3
   16510:	f0c0 80b7 	bcc.w	16682 <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   16514:	4b64      	ldr	r3, [pc, #400]	; (166a8 <isr_rx_scan+0x278>)
   16516:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1651a:	1ad3      	subs	r3, r2, r3
   1651c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1651e:	2b03      	cmp	r3, #3
   16520:	f240 80b9 	bls.w	16696 <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   16524:	4b60      	ldr	r3, [pc, #384]	; (166a8 <isr_rx_scan+0x278>)
   16526:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1652a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1652e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16532:	f1b9 0f00 	cmp.w	r9, #0
   16536:	f000 839a 	beq.w	16c6e <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   1653a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 166a8 <isr_rx_scan+0x278>
   1653e:	2304      	movs	r3, #4
   16540:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   16544:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   16548:	2300      	movs	r3, #0
   1654a:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1654e:	f7f8 fb93 	bl	ec78 <radio_pkt_scratch_get>
   16552:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   16554:	7803      	ldrb	r3, [r0, #0]
   16556:	2205      	movs	r2, #5
   16558:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   1655c:	b2db      	uxtb	r3, r3
   1655e:	f043 0320 	orr.w	r3, r3, #32
   16562:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16564:	7a23      	ldrb	r3, [r4, #8]
   16566:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1656a:	7802      	ldrb	r2, [r0, #0]
   1656c:	f363 12c7 	bfi	r2, r3, #7, #1
   16570:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   16572:	2322      	movs	r3, #34	; 0x22
   16574:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16576:	4628      	mov	r0, r5
   16578:	f002 fbde 	bl	18d38 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1657c:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   16580:	f013 0f01 	tst.w	r3, #1
   16584:	f000 8098 	beq.w	166b8 <isr_rx_scan+0x288>
   16588:	2800      	cmp	r0, #0
   1658a:	f000 8095 	beq.w	166b8 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   1658e:	7832      	ldrb	r2, [r6, #0]
   16590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16594:	4633      	mov	r3, r6
   16596:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   1659a:	2206      	movs	r2, #6
   1659c:	4601      	mov	r1, r0
   1659e:	4618      	mov	r0, r3
   165a0:	f7e9 fe8e 	bl	2c0 <memcpy>
   165a4:	e096      	b.n	166d4 <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   165a6:	2dff      	cmp	r5, #255	; 0xff
   165a8:	d00a      	beq.n	165c0 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   165aa:	4b3f      	ldr	r3, [pc, #252]	; (166a8 <isr_rx_scan+0x278>)
   165ac:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   165b0:	429d      	cmp	r5, r3
   165b2:	bf14      	ite	ne
   165b4:	2300      	movne	r3, #0
   165b6:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   165b8:	2b00      	cmp	r3, #0
   165ba:	d181      	bne.n	164c0 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   165bc:	2300      	movs	r3, #0
   165be:	e788      	b.n	164d2 <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   165c0:	4b39      	ldr	r3, [pc, #228]	; (166a8 <isr_rx_scan+0x278>)
   165c2:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   165c6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   165ca:	7a23      	ldrb	r3, [r4, #8]
   165cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   165d0:	429a      	cmp	r2, r3
   165d2:	d001      	beq.n	165d8 <isr_rx_scan+0x1a8>
   165d4:	2300      	movs	r3, #0
   165d6:	e7ef      	b.n	165b8 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   165d8:	2206      	movs	r2, #6
   165da:	f108 0102 	add.w	r1, r8, #2
   165de:	4834      	ldr	r0, [pc, #208]	; (166b0 <isr_rx_scan+0x280>)
   165e0:	f014 f9d8 	bl	2a994 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   165e4:	b908      	cbnz	r0, 165ea <isr_rx_scan+0x1ba>
   165e6:	2301      	movs	r3, #1
   165e8:	e7e6      	b.n	165b8 <isr_rx_scan+0x188>
   165ea:	2300      	movs	r3, #0
   165ec:	e7e4      	b.n	165b8 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   165ee:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   165f0:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   165f4:	462a      	mov	r2, r5
   165f6:	4651      	mov	r1, sl
   165f8:	09c0      	lsrs	r0, r0, #7
   165fa:	f002 fe17 	bl	1922c <ctrl_rl_addr_resolve>
   165fe:	4681      	mov	r9, r0
   16600:	b9d0      	cbnz	r0, 16638 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   16602:	4b29      	ldr	r3, [pc, #164]	; (166a8 <isr_rx_scan+0x278>)
   16604:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16608:	f013 0f01 	tst.w	r3, #1
   1660c:	d119      	bne.n	16642 <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1660e:	4b26      	ldr	r3, [pc, #152]	; (166a8 <isr_rx_scan+0x278>)
   16610:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16614:	7a23      	ldrb	r3, [r4, #8]
   16616:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16618:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1661c:	d017      	beq.n	1664e <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1661e:	4b22      	ldr	r3, [pc, #136]	; (166a8 <isr_rx_scan+0x278>)
   16620:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16624:	f013 0f20 	tst.w	r3, #32
   16628:	d003      	beq.n	16632 <isr_rx_scan+0x202>
   1662a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1662e:	2b00      	cmp	r3, #0
   16630:	db17      	blt.n	16662 <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   16632:	f1b9 0f00 	cmp.w	r9, #0
   16636:	d11d      	bne.n	16674 <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16638:	f1b9 0f00 	cmp.w	r9, #0
   1663c:	d01d      	beq.n	1667a <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1663e:	2301      	movs	r3, #1
   16640:	e747      	b.n	164d2 <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   16642:	4628      	mov	r0, r5
   16644:	f002 fb78 	bl	18d38 <ctrl_lrpa_get>
   16648:	2800      	cmp	r0, #0
   1664a:	d1f5      	bne.n	16638 <isr_rx_scan+0x208>
   1664c:	e7df      	b.n	1660e <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   1664e:	2206      	movs	r2, #6
   16650:	4651      	mov	r1, sl
   16652:	4818      	ldr	r0, [pc, #96]	; (166b4 <isr_rx_scan+0x284>)
   16654:	f014 f99e 	bl	2a994 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16658:	2800      	cmp	r0, #0
   1665a:	d1e0      	bne.n	1661e <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   1665c:	f04f 0901 	mov.w	r9, #1
   16660:	e7ea      	b.n	16638 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16662:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1666a:	2b40      	cmp	r3, #64	; 0x40
   1666c:	d1e1      	bne.n	16632 <isr_rx_scan+0x202>
		return true;
   1666e:	f04f 0901 	mov.w	r9, #1
   16672:	e7de      	b.n	16632 <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   16674:	f04f 0901 	mov.w	r9, #1
   16678:	e7de      	b.n	16638 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1667a:	2300      	movs	r3, #0
   1667c:	e729      	b.n	164d2 <isr_rx_scan+0xa2>
   1667e:	2301      	movs	r3, #1
   16680:	e727      	b.n	164d2 <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   16682:	4909      	ldr	r1, [pc, #36]	; (166a8 <isr_rx_scan+0x278>)
   16684:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16688:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1668c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1668e:	fa52 f383 	uxtab	r3, r2, r3
   16692:	b2db      	uxtb	r3, r3
   16694:	e743      	b.n	1651e <isr_rx_scan+0xee>
		return 0;
   16696:	f04f 0900 	mov.w	r9, #0
   1669a:	e74a      	b.n	16532 <isr_rx_scan+0x102>
   1669c:	f3af 8000 	nop.w
   166a0:	3b9aca00 	.word	0x3b9aca00
   166a4:	00000000 	.word	0x00000000
   166a8:	20000e8c 	.word	0x20000e8c
   166ac:	1afd498d 	.word	0x1afd498d
   166b0:	20000f72 	.word	0x20000f72
   166b4:	20000f6c 	.word	0x20000f6c
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   166b8:	4962      	ldr	r1, [pc, #392]	; (16844 <isr_rx_scan+0x414>)
   166ba:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   166be:	09db      	lsrs	r3, r3, #7
   166c0:	7832      	ldrb	r2, [r6, #0]
   166c2:	f363 1286 	bfi	r2, r3, #6, #1
   166c6:	4630      	mov	r0, r6
   166c8:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   166cc:	2206      	movs	r2, #6
   166ce:	31e0      	adds	r1, #224	; 0xe0
   166d0:	f7e9 fdf6 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   166d4:	f106 0308 	add.w	r3, r6, #8
   166d8:	930b      	str	r3, [sp, #44]	; 0x2c
   166da:	2206      	movs	r2, #6
   166dc:	f104 010a 	add.w	r1, r4, #10
   166e0:	4618      	mov	r0, r3
   166e2:	f7e9 fded 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   166e6:	2204      	movs	r2, #4
   166e8:	f108 0110 	add.w	r1, r8, #16
   166ec:	f106 000e 	add.w	r0, r6, #14
   166f0:	f7e9 fde6 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   166f4:	2203      	movs	r2, #3
   166f6:	f108 0114 	add.w	r1, r8, #20
   166fa:	f106 0012 	add.w	r0, r6, #18
   166fe:	f7e9 fddf 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   16702:	2301      	movs	r3, #1
   16704:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   16706:	4b4f      	ldr	r3, [pc, #316]	; (16844 <isr_rx_scan+0x414>)
   16708:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   1670c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16710:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   16714:	f7f8 fc30 	bl	ef78 <radio_tmr_end_get>
   16718:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   1671c:	4b49      	ldr	r3, [pc, #292]	; (16844 <isr_rx_scan+0x414>)
   1671e:	689b      	ldr	r3, [r3, #8]
   16720:	2b00      	cmp	r3, #0
   16722:	dd75      	ble.n	16810 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   16724:	4b47      	ldr	r3, [pc, #284]	; (16844 <isr_rx_scan+0x414>)
   16726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1672a:	2b00      	cmp	r3, #0
   1672c:	d174      	bne.n	16818 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   1672e:	75b3      	strb	r3, [r6, #22]
   16730:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   16732:	2100      	movs	r1, #0
   16734:	4608      	mov	r0, r1
   16736:	f7f8 fa35 	bl	eba4 <radio_tx_ready_delay_get>
   1673a:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1673e:	2100      	movs	r1, #0
   16740:	4608      	mov	r0, r1
   16742:	f7f8 fa31 	bl	eba8 <radio_tx_chain_delay_get>
   16746:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   1674a:	f10a 031e 	add.w	r3, sl, #30
   1674e:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   16750:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 16844 <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   16754:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   16758:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   1675a:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   1675e:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   16760:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   16764:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   16766:	2205      	movs	r2, #5
   16768:	f108 0117 	add.w	r1, r8, #23
   1676c:	f106 001e 	add.w	r0, r6, #30
   16770:	f7e9 fda6 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   16774:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   16778:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1677c:	f362 0304 	bfi	r3, r2, #0, #5
   16780:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   16784:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   16788:	b2db      	uxtb	r3, r3
   1678a:	f362 1347 	bfi	r3, r2, #5, #3
   1678e:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   16792:	f7f8 fa85 	bl	eca0 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   16796:	4630      	mov	r0, r6
   16798:	f7f8 f9fe 	bl	eb98 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1679c:	f7f8 fa34 	bl	ec08 <radio_is_ready>
   167a0:	4682      	mov	sl, r0
   167a2:	2800      	cmp	r0, #0
   167a4:	d148      	bne.n	16838 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   167a6:	f44f 72aa 	mov.w	r2, #340	; 0x154
   167aa:	4b26      	ldr	r3, [pc, #152]	; (16844 <isr_rx_scan+0x414>)
   167ac:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   167b0:	4640      	mov	r0, r8
   167b2:	f7f8 f83a 	bl	e82a <mem_index_get>
   167b6:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   167ba:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   167be:	2206      	movs	r2, #6
   167c0:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   167c4:	2300      	movs	r3, #0
   167c6:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   167ca:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   167ce:	4631      	mov	r1, r6
   167d0:	f811 3b02 	ldrb.w	r3, [r1], #2
   167d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   167d8:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   167dc:	f109 001b 	add.w	r0, r9, #27
   167e0:	f7e9 fd6e 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   167e4:	b397      	cbz	r7, 1684c <isr_rx_scan+0x41c>
   167e6:	2dff      	cmp	r5, #255	; 0xff
   167e8:	d030      	beq.n	1684c <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   167ea:	f109 020e 	add.w	r2, r9, #14
   167ee:	f109 010d 	add.w	r1, r9, #13
   167f2:	4628      	mov	r0, r5
   167f4:	f002 fc96 	bl	19124 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   167f8:	f899 300d 	ldrb.w	r3, [r9, #13]
   167fc:	3302      	adds	r3, #2
   167fe:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   16802:	2206      	movs	r2, #6
   16804:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16806:	f109 0014 	add.w	r0, r9, #20
   1680a:	f7e9 fd59 	bl	2c0 <memcpy>
   1680e:	e02e      	b.n	1686e <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   16810:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   16814:	e786      	b.n	16724 <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   16816:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   16818:	2b00      	cmp	r3, #0
   1681a:	dbfc      	blt.n	16816 <isr_rx_scan+0x3e6>
   1681c:	459a      	cmp	sl, r3
   1681e:	d8fa      	bhi.n	16816 <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   16820:	eba3 020a 	sub.w	r2, r3, sl
   16824:	4908      	ldr	r1, [pc, #32]	; (16848 <isr_rx_scan+0x418>)
   16826:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   1682a:	0a92      	lsrs	r2, r2, #10
   1682c:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   1682e:	7d72      	ldrb	r2, [r6, #21]
   16830:	3201      	adds	r2, #1
   16832:	7572      	strb	r2, [r6, #21]
   16834:	469a      	mov	sl, r3
   16836:	e77c      	b.n	16732 <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   16838:	4040      	eors	r0, r0
   1683a:	f380 8811 	msr	BASEPRI, r0
   1683e:	f04f 0004 	mov.w	r0, #4
   16842:	df02      	svc	2
   16844:	20000e8c 	.word	0x20000e8c
   16848:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1684c:	2206      	movs	r2, #6
   1684e:	2100      	movs	r1, #0
   16850:	f109 0014 	add.w	r0, r9, #20
   16854:	f014 f932 	bl	2aabc <memset>
				pdu_adv_tx->rx_addr;
   16858:	7833      	ldrb	r3, [r6, #0]
   1685a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   1685e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   16862:	2206      	movs	r2, #6
   16864:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16866:	f109 000e 	add.w	r0, r9, #14
   1686a:	f7e9 fd29 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   1686e:	4dce      	ldr	r5, [pc, #824]	; (16ba8 <isr_rx_scan+0x778>)
   16870:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   16874:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   16878:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   1687c:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   16880:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   16884:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   16888:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1688c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   16890:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   16894:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   16898:	f7fa fae2 	bl	10e60 <rx_fc_lock>
		packet_rx_enqueue();
   1689c:	f7fc ffca 	bl	13834 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   168a0:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   168a4:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   168a8:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   168aa:	4291      	cmp	r1, r2
   168ac:	f0c0 80b9 	bcc.w	16a22 <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   168b0:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   168b4:	1acb      	subs	r3, r1, r3
   168b6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   168b8:	2b02      	cmp	r3, #2
   168ba:	f240 80bc 	bls.w	16a36 <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   168be:	4bba      	ldr	r3, [pc, #744]	; (16ba8 <isr_rx_scan+0x778>)
   168c0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   168c4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   168c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   168cc:	2b00      	cmp	r3, #0
   168ce:	f000 80b4 	beq.w	16a3a <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   168d2:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   168d6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   168d8:	220b      	movs	r2, #11
   168da:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   168dc:	7a22      	ldrb	r2, [r4, #8]
   168de:	f012 0f20 	tst.w	r2, #32
   168e2:	f000 80b0 	beq.w	16a46 <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   168e6:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   168ea:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   168ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   168f2:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   168f6:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   168fa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   168fe:	f898 001d 	ldrb.w	r0, [r8, #29]
   16902:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   16906:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1690a:	404a      	eors	r2, r1
   1690c:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   16910:	2201      	movs	r2, #1
   16912:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   16914:	f7fc ff8e 	bl	13834 <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   16918:	4ea3      	ldr	r6, [pc, #652]	; (16ba8 <isr_rx_scan+0x778>)
   1691a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   1691e:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   16922:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   16926:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   1692a:	2327      	movs	r3, #39	; 0x27
   1692c:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   16930:	2400      	movs	r4, #0
   16932:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   16936:	429d      	cmp	r5, r3
   16938:	bf38      	it	cc
   1693a:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1693c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   16940:	9300      	str	r3, [sp, #0]
   16942:	4b9a      	ldr	r3, [pc, #616]	; (16bac <isr_rx_scan+0x77c>)
   16944:	2206      	movs	r2, #6
   16946:	4621      	mov	r1, r4
   16948:	4620      	mov	r0, r4
   1694a:	f7f9 fc99 	bl	10280 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   1694e:	f240 6131 	movw	r1, #1585	; 0x631
   16952:	f7fa faed 	bl	10f30 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   16956:	9400      	str	r4, [sp, #0]
   16958:	4623      	mov	r3, r4
   1695a:	2204      	movs	r2, #4
   1695c:	4621      	mov	r1, r4
   1695e:	4620      	mov	r0, r4
   16960:	f7f9 fc8e 	bl	10280 <ticker_stop>
				     conn->handle,
   16964:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16968:	3307      	adds	r3, #7
   1696a:	b2db      	uxtb	r3, r3
   1696c:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   1696e:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16970:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   16972:	4f8f      	ldr	r7, [pc, #572]	; (16bb0 <isr_rx_scan+0x780>)
   16974:	a38a      	add	r3, pc, #552	; (adr r3, 16ba0 <isr_rx_scan+0x770>)
   16976:	e9d3 2300 	ldrd	r2, r3, [r3]
   1697a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1697c:	fba1 0107 	umull	r0, r1, r1, r7
   16980:	f7ea fbbc 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16984:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   16988:	fbab 1207 	umull	r1, r2, fp, r7
   1698c:	468b      	mov	fp, r1
   1698e:	4694      	mov	ip, r2
   16990:	a383      	add	r3, pc, #524	; (adr r3, 16ba0 <isr_rx_scan+0x770>)
   16992:	e9d3 2300 	ldrd	r2, r3, [r3]
   16996:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   1699a:	4658      	mov	r0, fp
   1699c:	4661      	mov	r1, ip
   1699e:	f7ea fbad 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   169a2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   169a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   169aa:	2100      	movs	r1, #0
   169ac:	4a81      	ldr	r2, [pc, #516]	; (16bb4 <isr_rx_scan+0x784>)
   169ae:	2307      	movs	r3, #7
   169b0:	fb03 f300 	mul.w	r3, r3, r0
   169b4:	fb02 3301 	mla	r3, r2, r1, r3
   169b8:	fba0 0102 	umull	r0, r1, r0, r2
   169bc:	4419      	add	r1, r3
   169be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   169c2:	2300      	movs	r3, #0
   169c4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   169c8:	ebbb 0b00 	subs.w	fp, fp, r0
   169cc:	eb6c 0c01 	sbc.w	ip, ip, r1
   169d0:	4658      	mov	r0, fp
   169d2:	4661      	mov	r1, ip
   169d4:	f7ea fb92 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   169d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   169dc:	442b      	add	r3, r5
   169de:	b29b      	uxth	r3, r3
		ticker_status =
   169e0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   169e4:	9208      	str	r2, [sp, #32]
   169e6:	4a74      	ldr	r2, [pc, #464]	; (16bb8 <isr_rx_scan+0x788>)
   169e8:	9207      	str	r2, [sp, #28]
   169ea:	f8cd 8018 	str.w	r8, [sp, #24]
   169ee:	4a73      	ldr	r2, [pc, #460]	; (16bbc <isr_rx_scan+0x78c>)
   169f0:	9205      	str	r2, [sp, #20]
   169f2:	9304      	str	r3, [sp, #16]
   169f4:	9403      	str	r4, [sp, #12]
   169f6:	9002      	str	r0, [sp, #8]
   169f8:	9701      	str	r7, [sp, #4]
   169fa:	f8cd 9000 	str.w	r9, [sp]
   169fe:	4633      	mov	r3, r6
   16a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16a02:	4621      	mov	r1, r4
   16a04:	4620      	mov	r0, r4
   16a06:	f7f9 fb9f 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16a0a:	2800      	cmp	r0, #0
   16a0c:	f000 8132 	beq.w	16c74 <isr_rx_scan+0x844>
   16a10:	2802      	cmp	r0, #2
   16a12:	f000 811b 	beq.w	16c4c <isr_rx_scan+0x81c>
   16a16:	4040      	eors	r0, r0
   16a18:	f380 8811 	msr	BASEPRI, r0
   16a1c:	f04f 0004 	mov.w	r0, #4
   16a20:	df02      	svc	2
		return (_radio.packet_rx_count -
   16a22:	4a61      	ldr	r2, [pc, #388]	; (16ba8 <isr_rx_scan+0x778>)
   16a24:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   16a28:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16a2c:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   16a2e:	fa51 f383 	uxtab	r3, r1, r3
   16a32:	b2db      	uxtb	r3, r3
   16a34:	e740      	b.n	168b8 <isr_rx_scan+0x488>
		return 0;
   16a36:	2300      	movs	r3, #0
   16a38:	e748      	b.n	168cc <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   16a3a:	4040      	eors	r0, r0
   16a3c:	f380 8811 	msr	BASEPRI, r0
   16a40:	f04f 0004 	mov.w	r0, #4
   16a44:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   16a46:	2200      	movs	r2, #0
   16a48:	72da      	strb	r2, [r3, #11]
   16a4a:	e763      	b.n	16914 <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   16a4c:	4a56      	ldr	r2, [pc, #344]	; (16ba8 <isr_rx_scan+0x778>)
   16a4e:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   16a52:	f012 0f08 	tst.w	r2, #8
   16a56:	f43f ad13 	beq.w	16480 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   16a5a:	4a53      	ldr	r2, [pc, #332]	; (16ba8 <isr_rx_scan+0x778>)
   16a5c:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   16a60:	2a00      	cmp	r2, #0
   16a62:	f47f ad0d 	bne.w	16480 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   16a66:	b37f      	cbz	r7, 16ac8 <isr_rx_scan+0x698>
   16a68:	4629      	mov	r1, r5
   16a6a:	2200      	movs	r2, #0
   16a6c:	4630      	mov	r0, r6
   16a6e:	f7fc ff81 	bl	13974 <isr_rx_scan_report>
		if (err) {
   16a72:	4682      	mov	sl, r0
   16a74:	2800      	cmp	r0, #0
   16a76:	f040 80e9 	bne.w	16c4c <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16a7a:	f7f8 f8fd 	bl	ec78 <radio_pkt_scratch_get>
   16a7e:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   16a80:	7803      	ldrb	r3, [r0, #0]
   16a82:	2203      	movs	r2, #3
   16a84:	f362 0303 	bfi	r3, r2, #0, #4
   16a88:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16a8a:	7a23      	ldrb	r3, [r4, #8]
   16a8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16a90:	7802      	ldrb	r2, [r0, #0]
   16a92:	f363 12c7 	bfi	r2, r3, #7, #1
   16a96:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   16a98:	230c      	movs	r3, #12
   16a9a:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16a9c:	4628      	mov	r0, r5
   16a9e:	f002 f94b 	bl	18d38 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16aa2:	4b41      	ldr	r3, [pc, #260]	; (16ba8 <isr_rx_scan+0x778>)
   16aa4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16aa8:	f013 0f01 	tst.w	r3, #1
   16aac:	d00e      	beq.n	16acc <isr_rx_scan+0x69c>
   16aae:	b168      	cbz	r0, 16acc <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   16ab0:	7832      	ldrb	r2, [r6, #0]
   16ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16ab6:	4633      	mov	r3, r6
   16ab8:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16abc:	2206      	movs	r2, #6
   16abe:	4601      	mov	r1, r0
   16ac0:	4618      	mov	r0, r3
   16ac2:	f7e9 fbfd 	bl	2c0 <memcpy>
   16ac6:	e00f      	b.n	16ae8 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   16ac8:	21ff      	movs	r1, #255	; 0xff
   16aca:	e7ce      	b.n	16a6a <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16acc:	4936      	ldr	r1, [pc, #216]	; (16ba8 <isr_rx_scan+0x778>)
   16ace:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   16ad2:	09db      	lsrs	r3, r3, #7
   16ad4:	7832      	ldrb	r2, [r6, #0]
   16ad6:	f363 1286 	bfi	r2, r3, #6, #1
   16ada:	4630      	mov	r0, r6
   16adc:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16ae0:	2206      	movs	r2, #6
   16ae2:	31e0      	adds	r1, #224	; 0xe0
   16ae4:	f7e9 fbec 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   16ae8:	2206      	movs	r2, #6
   16aea:	f104 010a 	add.w	r1, r4, #10
   16aee:	f106 0008 	add.w	r0, r6, #8
   16af2:	f7e9 fbe5 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   16af6:	4b2c      	ldr	r3, [pc, #176]	; (16ba8 <isr_rx_scan+0x778>)
   16af8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   16afc:	f042 0202 	orr.w	r2, r2, #2
   16b00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   16b04:	2202      	movs	r2, #2
   16b06:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   16b08:	2096      	movs	r0, #150	; 0x96
   16b0a:	f7f8 f96b 	bl	ede4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16b0e:	2000      	movs	r0, #0
   16b10:	f7f8 f8b6 	bl	ec80 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   16b14:	4630      	mov	r0, r6
   16b16:	f7f8 f83f 	bl	eb98 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   16b1a:	f7f8 fa1b 	bl	ef54 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   16b1e:	f7f8 f873 	bl	ec08 <radio_is_ready>
   16b22:	4682      	mov	sl, r0
   16b24:	2800      	cmp	r0, #0
   16b26:	f000 8091 	beq.w	16c4c <isr_rx_scan+0x81c>
   16b2a:	4040      	eors	r0, r0
   16b2c:	f380 8811 	msr	BASEPRI, r0
   16b30:	f04f 0004 	mov.w	r0, #4
   16b34:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16b36:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16b38:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16b3c:	462a      	mov	r2, r5
   16b3e:	4649      	mov	r1, r9
   16b40:	09c0      	lsrs	r0, r0, #7
   16b42:	f002 fb73 	bl	1922c <ctrl_rl_addr_resolve>
   16b46:	4682      	mov	sl, r0
   16b48:	2800      	cmp	r0, #0
   16b4a:	d146      	bne.n	16bda <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16b4c:	4b16      	ldr	r3, [pc, #88]	; (16ba8 <isr_rx_scan+0x778>)
   16b4e:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16b52:	7a23      	ldrb	r3, [r4, #8]
   16b54:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16b56:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16b5a:	d00b      	beq.n	16b74 <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   16b5c:	4b12      	ldr	r3, [pc, #72]	; (16ba8 <isr_rx_scan+0x778>)
   16b5e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16b62:	f013 0f20 	tst.w	r3, #32
   16b66:	d02d      	beq.n	16bc4 <isr_rx_scan+0x794>
   16b68:	f994 3008 	ldrsb.w	r3, [r4, #8]
   16b6c:	2b00      	cmp	r3, #0
   16b6e:	db0c      	blt.n	16b8a <isr_rx_scan+0x75a>
	bool dir_report = false;
   16b70:	46d1      	mov	r9, sl
   16b72:	e028      	b.n	16bc6 <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   16b74:	2206      	movs	r2, #6
   16b76:	4649      	mov	r1, r9
   16b78:	4811      	ldr	r0, [pc, #68]	; (16bc0 <isr_rx_scan+0x790>)
   16b7a:	f013 ff0b 	bl	2a994 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16b7e:	2800      	cmp	r0, #0
   16b80:	d1ec      	bne.n	16b5c <isr_rx_scan+0x72c>
	bool dir_report = false;
   16b82:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16b84:	f04f 0a01 	mov.w	sl, #1
   16b88:	e029      	b.n	16bde <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16b8a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16b92:	2b40      	cmp	r3, #64	; 0x40
   16b94:	d01d      	beq.n	16bd2 <isr_rx_scan+0x7a2>
	bool dir_report = false;
   16b96:	46d1      	mov	r9, sl
   16b98:	e015      	b.n	16bc6 <isr_rx_scan+0x796>
   16b9a:	bf00      	nop
   16b9c:	f3af 8000 	nop.w
   16ba0:	1afd498d 	.word	0x1afd498d
   16ba4:	00000007 	.word	0x00000007
   16ba8:	20000e8c 	.word	0x20000e8c
   16bac:	00010f31 	.word	0x00010f31
   16bb0:	3b9aca00 	.word	0x3b9aca00
   16bb4:	1afd498d 	.word	0x1afd498d
   16bb8:	00010e9d 	.word	0x00010e9d
   16bbc:	00015a5d 	.word	0x00015a5d
   16bc0:	20000f6c 	.word	0x20000f6c
   16bc4:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16bc6:	f1ba 0f00 	cmp.w	sl, #0
   16bca:	d008      	beq.n	16bde <isr_rx_scan+0x7ae>
   16bcc:	f04f 0a01 	mov.w	sl, #1
   16bd0:	e005      	b.n	16bde <isr_rx_scan+0x7ae>
			*dir_report = true;
   16bd2:	f04f 0901 	mov.w	r9, #1
		return true;
   16bd6:	46ca      	mov	sl, r9
   16bd8:	e7f5      	b.n	16bc6 <isr_rx_scan+0x796>
	bool dir_report = false;
   16bda:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16bde:	f1ba 0f00 	cmp.w	sl, #0
   16be2:	d12b      	bne.n	16c3c <isr_rx_scan+0x80c>
   16be4:	e454      	b.n	16490 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   16be6:	4a26      	ldr	r2, [pc, #152]	; (16c80 <isr_rx_scan+0x850>)
   16be8:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   16bec:	f012 0f07 	tst.w	r2, #7
   16bf0:	d124      	bne.n	16c3c <isr_rx_scan+0x80c>
   16bf2:	e459      	b.n	164a8 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   16bf4:	4b22      	ldr	r3, [pc, #136]	; (16c80 <isr_rx_scan+0x850>)
   16bf6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   16bfa:	f013 0f02 	tst.w	r3, #2
   16bfe:	d102      	bne.n	16c06 <isr_rx_scan+0x7d6>
		return 1;
   16c00:	f04f 0a01 	mov.w	sl, #1
   16c04:	e022      	b.n	16c4c <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   16c06:	f7f8 f837 	bl	ec78 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16c0a:	7802      	ldrb	r2, [r0, #0]
   16c0c:	7a23      	ldrb	r3, [r4, #8]
   16c0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16c12:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16c16:	d004      	beq.n	16c22 <isr_rx_scan+0x7f2>
   16c18:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   16c1a:	b97b      	cbnz	r3, 16c3c <isr_rx_scan+0x80c>
		return 1;
   16c1c:	f04f 0a01 	mov.w	sl, #1
   16c20:	e014      	b.n	16c4c <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   16c22:	2206      	movs	r2, #6
   16c24:	f108 0102 	add.w	r1, r8, #2
   16c28:	3008      	adds	r0, #8
   16c2a:	f013 feb3 	bl	2a994 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16c2e:	b108      	cbz	r0, 16c34 <isr_rx_scan+0x804>
   16c30:	2300      	movs	r3, #0
   16c32:	e7f2      	b.n	16c1a <isr_rx_scan+0x7ea>
   16c34:	2301      	movs	r3, #1
   16c36:	e7f0      	b.n	16c1a <isr_rx_scan+0x7ea>
	bool dir_report = false;
   16c38:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16c3c:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   16c3e:	b1db      	cbz	r3, 16c78 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16c40:	4b0f      	ldr	r3, [pc, #60]	; (16c80 <isr_rx_scan+0x850>)
   16c42:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16c46:	b12b      	cbz	r3, 16c54 <isr_rx_scan+0x824>
		return 1;
   16c48:	f04f 0a01 	mov.w	sl, #1
}
   16c4c:	4650      	mov	r0, sl
   16c4e:	b00f      	add	sp, #60	; 0x3c
   16c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   16c54:	b907      	cbnz	r7, 16c58 <isr_rx_scan+0x828>
   16c56:	25ff      	movs	r5, #255	; 0xff
   16c58:	464a      	mov	r2, r9
   16c5a:	4629      	mov	r1, r5
   16c5c:	4630      	mov	r0, r6
   16c5e:	f7fc fe89 	bl	13974 <isr_rx_scan_report>
		if (err) {
   16c62:	4682      	mov	sl, r0
   16c64:	2800      	cmp	r0, #0
   16c66:	d1f1      	bne.n	16c4c <isr_rx_scan+0x81c>
	return 1;
   16c68:	f04f 0a01 	mov.w	sl, #1
   16c6c:	e7ee      	b.n	16c4c <isr_rx_scan+0x81c>
			return 1;
   16c6e:	f04f 0a01 	mov.w	sl, #1
   16c72:	e7eb      	b.n	16c4c <isr_rx_scan+0x81c>
		return 0;
   16c74:	4682      	mov	sl, r0
   16c76:	e7e9      	b.n	16c4c <isr_rx_scan+0x81c>
		return 1;
   16c78:	f04f 0a01 	mov.w	sl, #1
   16c7c:	e7e6      	b.n	16c4c <isr_rx_scan+0x81c>
   16c7e:	bf00      	nop
   16c80:	20000e8c 	.word	0x20000e8c
   16c84:	00000000 	.word	0x00000000

00016c88 <isr_rx_adv>:
{
   16c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c8c:	b08f      	sub	sp, #60	; 0x3c
   16c8e:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16c90:	b9fa      	cbnz	r2, 16cd2 <isr_rx_adv+0x4a>
   16c92:	20ff      	movs	r0, #255	; 0xff
   16c94:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   16c98:	f7f7 ffee 	bl	ec78 <radio_pkt_scratch_get>
   16c9c:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   16c9e:	4f9d      	ldr	r7, [pc, #628]	; (16f14 <isr_rx_adv+0x28c>)
   16ca0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   16ca4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16ca8:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16cac:	3320      	adds	r3, #32
   16cae:	441f      	add	r7, r3
   16cb0:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16cb2:	7803      	ldrb	r3, [r0, #0]
   16cb4:	f003 030f 	and.w	r3, r3, #15
   16cb8:	2b03      	cmp	r3, #3
   16cba:	d00e      	beq.n	16cda <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16cbc:	f898 3000 	ldrb.w	r3, [r8]
   16cc0:	f003 030f 	and.w	r3, r3, #15
   16cc4:	2b05      	cmp	r3, #5
   16cc6:	d065      	beq.n	16d94 <isr_rx_adv+0x10c>
	return 1;
   16cc8:	2301      	movs	r3, #1
}
   16cca:	4618      	mov	r0, r3
   16ccc:	b00f      	add	sp, #60	; 0x3c
   16cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16cd2:	4618      	mov	r0, r3
   16cd4:	f002 f892 	bl	18dfc <ctrl_rl_irk_idx>
   16cd8:	e7dc      	b.n	16c94 <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16cda:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16cdc:	2b0c      	cmp	r3, #12
   16cde:	d1ed      	bne.n	16cbc <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16ce0:	4b8c      	ldr	r3, [pc, #560]	; (16f14 <isr_rx_adv+0x28c>)
   16ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
   16cea:	d030      	beq.n	16d4e <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16cec:	4b89      	ldr	r3, [pc, #548]	; (16f14 <isr_rx_adv+0x28c>)
   16cee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16cf2:	f013 0f40 	tst.w	r3, #64	; 0x40
   16cf6:	d04b      	beq.n	16d90 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16cf8:	2c00      	cmp	r4, #0
   16cfa:	d034      	beq.n	16d66 <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   16cfc:	79fb      	ldrb	r3, [r7, #7]
   16cfe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16d02:	f898 2000 	ldrb.w	r2, [r8]
   16d06:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16d0a:	d034      	beq.n	16d76 <isr_rx_adv+0xee>
   16d0c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d0e:	2b00      	cmp	r3, #0
   16d10:	d13c      	bne.n	16d8c <isr_rx_adv+0x104>
   16d12:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16d14:	2b00      	cmp	r3, #0
   16d16:	d0d1      	beq.n	16cbc <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   16d18:	4c7e      	ldr	r4, [pc, #504]	; (16f14 <isr_rx_adv+0x28c>)
   16d1a:	2303      	movs	r3, #3
   16d1c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   16d1e:	f7f7 ffbf 	bl	eca0 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   16d22:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   16d26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16d2a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16d2e:	3370      	adds	r3, #112	; 0x70
   16d30:	4423      	add	r3, r4
   16d32:	1dd8      	adds	r0, r3, #7
   16d34:	f7f7 ff30 	bl	eb98 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16d38:	f7f7 ff66 	bl	ec08 <radio_is_ready>
   16d3c:	4603      	mov	r3, r0
   16d3e:	2800      	cmp	r0, #0
   16d40:	d0c3      	beq.n	16cca <isr_rx_adv+0x42>
   16d42:	4040      	eors	r0, r0
   16d44:	f380 8811 	msr	BASEPRI, r0
   16d48:	f04f 0004 	mov.w	r0, #4
   16d4c:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   16d4e:	4601      	mov	r1, r0
   16d50:	f811 0b02 	ldrb.w	r0, [r1], #2
   16d54:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16d58:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16d5c:	f002 fa0e 	bl	1917c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16d60:	2800      	cmp	r0, #0
   16d62:	d1cb      	bne.n	16cfc <isr_rx_adv+0x74>
   16d64:	e7c2      	b.n	16cec <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d66:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16d6a:	f002 f871 	bl	18e50 <ctrl_irk_whitelisted>
   16d6e:	2800      	cmp	r0, #0
   16d70:	d1c4      	bne.n	16cfc <isr_rx_adv+0x74>
   16d72:	2300      	movs	r3, #0
   16d74:	e7ce      	b.n	16d14 <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   16d76:	2206      	movs	r2, #6
   16d78:	f108 0108 	add.w	r1, r8, #8
   16d7c:	1ca8      	adds	r0, r5, #2
   16d7e:	f013 fe09 	bl	2a994 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   16d82:	b908      	cbnz	r0, 16d88 <isr_rx_adv+0x100>
   16d84:	2301      	movs	r3, #1
   16d86:	e7c2      	b.n	16d0e <isr_rx_adv+0x86>
   16d88:	2300      	movs	r3, #0
   16d8a:	e7c0      	b.n	16d0e <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d8c:	2301      	movs	r3, #1
   16d8e:	e7c1      	b.n	16d14 <isr_rx_adv+0x8c>
   16d90:	2300      	movs	r3, #0
   16d92:	e7bf      	b.n	16d14 <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16d94:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16d98:	2b22      	cmp	r3, #34	; 0x22
   16d9a:	d001      	beq.n	16da0 <isr_rx_adv+0x118>
	return 1;
   16d9c:	2301      	movs	r3, #1
   16d9e:	e794      	b.n	16cca <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16da0:	79fb      	ldrb	r3, [r7, #7]
   16da2:	f003 030f 	and.w	r3, r3, #15
   16da6:	2b01      	cmp	r3, #1
   16da8:	d01a      	beq.n	16de0 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16daa:	4b5a      	ldr	r3, [pc, #360]	; (16f14 <isr_rx_adv+0x28c>)
   16dac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16db0:	09db      	lsrs	r3, r3, #7
   16db2:	d06d      	beq.n	16e90 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16db4:	4b57      	ldr	r3, [pc, #348]	; (16f14 <isr_rx_adv+0x28c>)
   16db6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16dba:	09db      	lsrs	r3, r3, #7
   16dbc:	f000 8096 	beq.w	16eec <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16dc0:	2c00      	cmp	r4, #0
   16dc2:	d071      	beq.n	16ea8 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   16dc4:	79fb      	ldrb	r3, [r7, #7]
   16dc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16dca:	f898 2000 	ldrb.w	r2, [r8]
   16dce:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16dd2:	d071      	beq.n	16eb8 <isr_rx_adv+0x230>
   16dd4:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16dd6:	2b00      	cmp	r3, #0
   16dd8:	f000 809a 	beq.w	16f10 <isr_rx_adv+0x288>
   16ddc:	2301      	movs	r3, #1
   16dde:	e086      	b.n	16eee <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   16de0:	4641      	mov	r1, r8
   16de2:	f811 0b02 	ldrb.w	r0, [r1], #2
   16de6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16dea:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16dee:	f002 f9c5 	bl	1917c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   16df2:	b908      	cbnz	r0, 16df8 <isr_rx_adv+0x170>
   16df4:	2300      	movs	r3, #0
   16df6:	e07a      	b.n	16eee <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   16df8:	79fb      	ldrb	r3, [r7, #7]
   16dfa:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16dfe:	f898 2000 	ldrb.w	r2, [r8]
   16e02:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16e06:	d003      	beq.n	16e10 <isr_rx_adv+0x188>
   16e08:	2300      	movs	r3, #0
					    rl_idx) &&
   16e0a:	b9db      	cbnz	r3, 16e44 <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   16e0c:	2300      	movs	r3, #0
   16e0e:	e06e      	b.n	16eee <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e10:	79fb      	ldrb	r3, [r7, #7]
   16e12:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16e16:	2b01      	cmp	r3, #1
   16e18:	d008      	beq.n	16e2c <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   16e1a:	2206      	movs	r2, #6
   16e1c:	f108 0108 	add.w	r1, r8, #8
   16e20:	1ca8      	adds	r0, r5, #2
   16e22:	f013 fdb7 	bl	2a994 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16e26:	b958      	cbnz	r0, 16e40 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   16e28:	2301      	movs	r3, #1
   16e2a:	e7ee      	b.n	16e0a <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16e2c:	2206      	movs	r2, #6
   16e2e:	f108 0108 	add.w	r1, r8, #8
   16e32:	1ca8      	adds	r0, r5, #2
   16e34:	f013 fdae 	bl	2a994 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e38:	2800      	cmp	r0, #0
   16e3a:	d1ee      	bne.n	16e1a <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   16e3c:	2301      	movs	r3, #1
   16e3e:	e7e4      	b.n	16e0a <isr_rx_adv+0x182>
   16e40:	2300      	movs	r3, #0
   16e42:	e7e2      	b.n	16e0a <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   16e44:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   16e48:	2bff      	cmp	r3, #255	; 0xff
   16e4a:	d009      	beq.n	16e60 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   16e4c:	4a31      	ldr	r2, [pc, #196]	; (16f14 <isr_rx_adv+0x28c>)
   16e4e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   16e52:	4293      	cmp	r3, r2
   16e54:	bf14      	ite	ne
   16e56:	2300      	movne	r3, #0
   16e58:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   16e5a:	b9bb      	cbnz	r3, 16e8c <isr_rx_adv+0x204>
   16e5c:	2300      	movs	r3, #0
   16e5e:	e046      	b.n	16eee <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   16e60:	79fa      	ldrb	r2, [r7, #7]
   16e62:	f898 3000 	ldrb.w	r3, [r8]
   16e66:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16e6a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16e6e:	d001      	beq.n	16e74 <isr_rx_adv+0x1ec>
   16e70:	2300      	movs	r3, #0
   16e72:	e7f2      	b.n	16e5a <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   16e74:	2206      	movs	r2, #6
   16e76:	f108 0102 	add.w	r1, r8, #2
   16e7a:	f105 0008 	add.w	r0, r5, #8
   16e7e:	f013 fd89 	bl	2a994 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   16e82:	b908      	cbnz	r0, 16e88 <isr_rx_adv+0x200>
   16e84:	2301      	movs	r3, #1
   16e86:	e7e8      	b.n	16e5a <isr_rx_adv+0x1d2>
   16e88:	2300      	movs	r3, #0
   16e8a:	e7e6      	b.n	16e5a <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   16e8c:	2301      	movs	r3, #1
   16e8e:	e02e      	b.n	16eee <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   16e90:	4641      	mov	r1, r8
   16e92:	f811 0b02 	ldrb.w	r0, [r1], #2
   16e96:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16e9a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16e9e:	f002 f96d 	bl	1917c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16ea2:	2800      	cmp	r0, #0
   16ea4:	d18e      	bne.n	16dc4 <isr_rx_adv+0x13c>
   16ea6:	e785      	b.n	16db4 <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16ea8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16eac:	f001 ffd0 	bl	18e50 <ctrl_irk_whitelisted>
   16eb0:	2800      	cmp	r0, #0
   16eb2:	d187      	bne.n	16dc4 <isr_rx_adv+0x13c>
   16eb4:	2300      	movs	r3, #0
   16eb6:	e01a      	b.n	16eee <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16eb8:	79fb      	ldrb	r3, [r7, #7]
   16eba:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16ebe:	2b01      	cmp	r3, #1
   16ec0:	d008      	beq.n	16ed4 <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   16ec2:	2206      	movs	r2, #6
   16ec4:	f108 0108 	add.w	r1, r8, #8
   16ec8:	1ca8      	adds	r0, r5, #2
   16eca:	f013 fd63 	bl	2a994 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16ece:	b958      	cbnz	r0, 16ee8 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   16ed0:	2301      	movs	r3, #1
   16ed2:	e780      	b.n	16dd6 <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16ed4:	2206      	movs	r2, #6
   16ed6:	f108 0108 	add.w	r1, r8, #8
   16eda:	1ca8      	adds	r0, r5, #2
   16edc:	f013 fd5a 	bl	2a994 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16ee0:	2800      	cmp	r0, #0
   16ee2:	d1ee      	bne.n	16ec2 <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   16ee4:	2301      	movs	r3, #1
   16ee6:	e776      	b.n	16dd6 <isr_rx_adv+0x14e>
   16ee8:	2300      	movs	r3, #0
   16eea:	e774      	b.n	16dd6 <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16eec:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16eee:	2b00      	cmp	r3, #0
   16ef0:	f000 8232 	beq.w	17358 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16ef4:	4b07      	ldr	r3, [pc, #28]	; (16f14 <isr_rx_adv+0x28c>)
   16ef6:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   16efa:	b16b      	cbz	r3, 16f18 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16efc:	4a05      	ldr	r2, [pc, #20]	; (16f14 <isr_rx_adv+0x28c>)
   16efe:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16f02:	b2db      	uxtb	r3, r3
   16f04:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   16f08:	4293      	cmp	r3, r2
   16f0a:	d005      	beq.n	16f18 <isr_rx_adv+0x290>
	return 1;
   16f0c:	2301      	movs	r3, #1
   16f0e:	e6dc      	b.n	16cca <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16f10:	2300      	movs	r3, #0
   16f12:	e7ec      	b.n	16eee <isr_rx_adv+0x266>
   16f14:	20000e8c 	.word	0x20000e8c
		   (_radio.advertiser.conn)) {
   16f18:	4bd9      	ldr	r3, [pc, #868]	; (17280 <isr_rx_adv+0x5f8>)
   16f1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16f1e:	2b00      	cmp	r3, #0
   16f20:	f000 821c 	beq.w	1735c <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   16f24:	4bd6      	ldr	r3, [pc, #856]	; (17280 <isr_rx_adv+0x5f8>)
   16f26:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16f2a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f2e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16f30:	429a      	cmp	r2, r3
   16f32:	f0c0 81cf 	bcc.w	172d4 <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   16f36:	4bd2      	ldr	r3, [pc, #840]	; (17280 <isr_rx_adv+0x5f8>)
   16f38:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16f3c:	1ad3      	subs	r3, r2, r3
   16f3e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16f40:	2b03      	cmp	r3, #3
   16f42:	f240 81d1 	bls.w	172e8 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   16f46:	4bce      	ldr	r3, [pc, #824]	; (17280 <isr_rx_adv+0x5f8>)
   16f48:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16f4c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f50:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16f54:	2d00      	cmp	r5, #0
   16f56:	f000 8203 	beq.w	17360 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   16f5a:	4ec9      	ldr	r6, [pc, #804]	; (17280 <isr_rx_adv+0x5f8>)
   16f5c:	f04f 0904 	mov.w	r9, #4
   16f60:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   16f64:	f7f7 fe36 	bl	ebd4 <radio_disable>
		conn = _radio.advertiser.conn;
   16f68:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   16f6c:	2300      	movs	r3, #0
   16f6e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   16f72:	f44f 72aa 	mov.w	r2, #340	; 0x154
   16f76:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   16f7a:	4620      	mov	r0, r4
   16f7c:	f7f7 fc55 	bl	e82a <mem_index_get>
   16f80:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   16f82:	2203      	movs	r2, #3
   16f84:	f108 0112 	add.w	r1, r8, #18
   16f88:	f104 0014 	add.w	r0, r4, #20
   16f8c:	f7e9 f998 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   16f90:	f104 0a10 	add.w	sl, r4, #16
   16f94:	464a      	mov	r2, r9
   16f96:	f108 010e 	add.w	r1, r8, #14
   16f9a:	4650      	mov	r0, sl
   16f9c:	f7e9 f990 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   16fa0:	f104 0617 	add.w	r6, r4, #23
   16fa4:	2205      	movs	r2, #5
   16fa6:	f108 011e 	add.w	r1, r8, #30
   16faa:	4630      	mov	r0, r6
   16fac:	f7e9 f988 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   16fb0:	2105      	movs	r1, #5
   16fb2:	4630      	mov	r0, r6
   16fb4:	f7f7 fc7d 	bl	e8b2 <util_ones_count_get>
		conn->data_chan_count =
   16fb8:	7f63      	ldrb	r3, [r4, #29]
   16fba:	f360 0305 	bfi	r3, r0, #0, #6
   16fbe:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   16fc0:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   16fc4:	f3c3 0304 	ubfx	r3, r3, #0, #5
   16fc8:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   16fca:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   16fce:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   16fd0:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   16fd4:	f240 46e2 	movw	r6, #1250	; 0x4e2
   16fd8:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   16fdc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   16fe0:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   16fe2:	464a      	mov	r2, r9
   16fe4:	4651      	mov	r1, sl
   16fe6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   16fea:	f7e9 f969 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   16fee:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   16ff2:	f242 7210 	movw	r2, #10000	; 0x2710
   16ff6:	fb02 6303 	mla	r3, r2, r3, r6
   16ffa:	3b01      	subs	r3, #1
   16ffc:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17000:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17002:	4ba0      	ldr	r3, [pc, #640]	; (17284 <isr_rx_adv+0x5fc>)
   17004:	4433      	add	r3, r6
   17006:	fbb3 f3f6 	udiv	r3, r3, r6
   1700a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1700e:	4b9e      	ldr	r3, [pc, #632]	; (17288 <isr_rx_adv+0x600>)
   17010:	4433      	add	r3, r6
   17012:	fbb3 f3f6 	udiv	r3, r3, r6
   17016:	b29b      	uxth	r3, r3
   17018:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1701c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1701e:	1d91      	adds	r1, r2, #6
   17020:	428b      	cmp	r3, r1
   17022:	dd03      	ble.n	1702c <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17024:	1a9b      	subs	r3, r3, r2
   17026:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17028:	3b06      	subs	r3, #6
   1702a:	b29b      	uxth	r3, r3
   1702c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17030:	8c23      	ldrh	r3, [r4, #32]
   17032:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17034:	2206      	movs	r2, #6
   17036:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17038:	2300      	movs	r3, #0
   1703a:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   1703c:	2301      	movs	r3, #1
   1703e:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17040:	4641      	mov	r1, r8
   17042:	f811 3b08 	ldrb.w	r3, [r1], #8
   17046:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1704a:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1704c:	f105 001b 	add.w	r0, r5, #27
   17050:	f7e9 f936 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17054:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17058:	28ff      	cmp	r0, #255	; 0xff
   1705a:	f000 8147 	beq.w	172ec <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   1705e:	f105 020e 	add.w	r2, r5, #14
   17062:	f105 010d 	add.w	r1, r5, #13
   17066:	f002 f85d 	bl	19124 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   1706a:	7b6b      	ldrb	r3, [r5, #13]
   1706c:	3302      	adds	r3, #2
   1706e:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17070:	2206      	movs	r2, #6
   17072:	f108 0102 	add.w	r1, r8, #2
   17076:	f105 0014 	add.w	r0, r5, #20
   1707a:	f7e9 f921 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   1707e:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17082:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17086:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   1708a:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   1708e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17092:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17096:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   1709a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   1709e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   170a2:	8c20      	ldrh	r0, [r4, #32]
   170a4:	f7f9 fedc 	bl	10e60 <rx_fc_lock>
		packet_rx_enqueue();
   170a8:	f7fc fbc4 	bl	13834 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   170ac:	4b74      	ldr	r3, [pc, #464]	; (17280 <isr_rx_adv+0x5f8>)
   170ae:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   170b2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   170b6:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   170b8:	429a      	cmp	r2, r3
   170ba:	f0c0 8129 	bcc.w	17310 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   170be:	4b70      	ldr	r3, [pc, #448]	; (17280 <isr_rx_adv+0x5f8>)
   170c0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   170c4:	1ad3      	subs	r3, r2, r3
   170c6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   170c8:	2b02      	cmp	r3, #2
   170ca:	f240 812b 	bls.w	17324 <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   170ce:	4b6c      	ldr	r3, [pc, #432]	; (17280 <isr_rx_adv+0x5f8>)
   170d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   170d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   170d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   170dc:	2b00      	cmp	r3, #0
   170de:	f000 8123 	beq.w	17328 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   170e2:	8c22      	ldrh	r2, [r4, #32]
   170e4:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   170e6:	220b      	movs	r2, #11
   170e8:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   170ea:	f898 2000 	ldrb.w	r2, [r8]
   170ee:	f012 0f20 	tst.w	r2, #32
   170f2:	f000 811f 	beq.w	17334 <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   170f6:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   170f8:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   170fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   170fe:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17100:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17102:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17106:	7f60      	ldrb	r0, [r4, #29]
   17108:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1710c:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1710e:	404a      	eors	r2, r1
   17110:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17112:	2201      	movs	r2, #1
   17114:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17116:	f7fc fb8d 	bl	13834 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   1711a:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   1711e:	0952      	lsrs	r2, r2, #5
   17120:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17124:	f362 0384 	bfi	r3, r2, #2, #3
   17128:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1712c:	4d54      	ldr	r5, [pc, #336]	; (17280 <isr_rx_adv+0x5f8>)
   1712e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17132:	4956      	ldr	r1, [pc, #344]	; (1728c <isr_rx_adv+0x604>)
   17134:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17138:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   1713c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1713e:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17142:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17146:	f203 233f 	addw	r3, r3, #575	; 0x23f
   1714a:	4a51      	ldr	r2, [pc, #324]	; (17290 <isr_rx_adv+0x608>)
   1714c:	fba2 2303 	umull	r2, r3, r2, r3
   17150:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17152:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17154:	0873      	lsrs	r3, r6, #1
   17156:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17158:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   1715a:	f898 3015 	ldrb.w	r3, [r8, #21]
   1715e:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17162:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17166:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17168:	f04f 0b00 	mov.w	fp, #0
   1716c:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17170:	4658      	mov	r0, fp
   17172:	f7f7 fd1b 	bl	ebac <radio_rx_ready_delay_get>
   17176:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17178:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1717c:	a33e      	add	r3, pc, #248	; (adr r3, 17278 <isr_rx_adv+0x5f0>)
   1717e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17182:	4944      	ldr	r1, [pc, #272]	; (17294 <isr_rx_adv+0x60c>)
   17184:	fba0 0101 	umull	r0, r1, r0, r1
   17188:	f7e9 ffb8 	bl	10fc <__aeabi_uldivmod>
   1718c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17190:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17192:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17196:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17198:	2327      	movs	r3, #39	; 0x27
   1719a:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   1719c:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   171a0:	429d      	cmp	r5, r3
   171a2:	bf38      	it	cc
   171a4:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   171a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   171a8:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   171aa:	f7f7 fee5 	bl	ef78 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   171ae:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   171b2:	b292      	uxth	r2, r2
		conn_offset_us +=
   171b4:	fb09 9902 	mla	r9, r9, r2, r9
   171b8:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   171ba:	4659      	mov	r1, fp
   171bc:	4658      	mov	r0, fp
   171be:	f7f7 fcf3 	bl	eba8 <radio_tx_chain_delay_get>
   171c2:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   171c6:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   171ca:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   171ce:	f240 4372 	movw	r3, #1138	; 0x472
   171d2:	9300      	str	r3, [sp, #0]
   171d4:	4b30      	ldr	r3, [pc, #192]	; (17298 <isr_rx_adv+0x610>)
   171d6:	2205      	movs	r2, #5
   171d8:	4659      	mov	r1, fp
   171da:	4658      	mov	r0, fp
   171dc:	f7f9 f850 	bl	10280 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   171e0:	f240 4173 	movw	r1, #1139	; 0x473
   171e4:	f7f9 fe84 	bl	10ef0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   171e8:	79fb      	ldrb	r3, [r7, #7]
   171ea:	f003 030f 	and.w	r3, r3, #15
   171ee:	2b01      	cmp	r3, #1
   171f0:	f000 80a3 	beq.w	1733a <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   171f4:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171f6:	3307      	adds	r3, #7
   171f8:	b2db      	uxtb	r3, r3
   171fa:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   171fc:	4b20      	ldr	r3, [pc, #128]	; (17280 <isr_rx_adv+0x5f8>)
   171fe:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17200:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17204:	f04f 0800 	mov.w	r8, #0
   17208:	4f22      	ldr	r7, [pc, #136]	; (17294 <isr_rx_adv+0x60c>)
   1720a:	a31b      	add	r3, pc, #108	; (adr r3, 17278 <isr_rx_adv+0x5f0>)
   1720c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17210:	fbaa 0107 	umull	r0, r1, sl, r7
   17214:	f7e9 ff72 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17218:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   1721c:	fba6 6707 	umull	r6, r7, r6, r7
   17220:	a315      	add	r3, pc, #84	; (adr r3, 17278 <isr_rx_adv+0x5f0>)
   17222:	e9d3 2300 	ldrd	r2, r3, [r3]
   17226:	4630      	mov	r0, r6
   17228:	4639      	mov	r1, r7
   1722a:	f7e9 ff67 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1722e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17236:	2100      	movs	r1, #0
   17238:	4a18      	ldr	r2, [pc, #96]	; (1729c <isr_rx_adv+0x614>)
   1723a:	2307      	movs	r3, #7
   1723c:	fb03 f300 	mul.w	r3, r3, r0
   17240:	fb02 3301 	mla	r3, r2, r1, r3
   17244:	fba0 0102 	umull	r0, r1, r0, r2
   17248:	4419      	add	r1, r3
   1724a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1724e:	2300      	movs	r3, #0
   17250:	1a30      	subs	r0, r6, r0
   17252:	eb67 0101 	sbc.w	r1, r7, r1
   17256:	f7e9 ff51 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   1725a:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1725c:	442b      	add	r3, r5
   1725e:	b29b      	uxth	r3, r3
   17260:	f240 428a 	movw	r2, #1162	; 0x48a
   17264:	9208      	str	r2, [sp, #32]
   17266:	4a0e      	ldr	r2, [pc, #56]	; (172a0 <isr_rx_adv+0x618>)
   17268:	9207      	str	r2, [sp, #28]
   1726a:	9406      	str	r4, [sp, #24]
   1726c:	4a0d      	ldr	r2, [pc, #52]	; (172a4 <isr_rx_adv+0x61c>)
   1726e:	9205      	str	r2, [sp, #20]
   17270:	e01a      	b.n	172a8 <isr_rx_adv+0x620>
   17272:	bf00      	nop
   17274:	f3af 8000 	nop.w
   17278:	1afd498d 	.word	0x1afd498d
   1727c:	00000007 	.word	0x00000007
   17280:	20000e8c 	.word	0x20000e8c
   17284:	026259ff 	.word	0x026259ff
   17288:	01c9c37f 	.word	0x01c9c37f
   1728c:	0002fbf8 	.word	0x0002fbf8
   17290:	431bde83 	.word	0x431bde83
   17294:	3b9aca00 	.word	0x3b9aca00
   17298:	00010ef1 	.word	0x00010ef1
   1729c:	1afd498d 	.word	0x1afd498d
   172a0:	00010e9d 	.word	0x00010e9d
   172a4:	00015a55 	.word	0x00015a55
   172a8:	9304      	str	r3, [sp, #16]
   172aa:	f8cd 800c 	str.w	r8, [sp, #12]
   172ae:	9002      	str	r0, [sp, #8]
   172b0:	f8cd b004 	str.w	fp, [sp, #4]
   172b4:	f8cd a000 	str.w	sl, [sp]
   172b8:	464b      	mov	r3, r9
   172ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   172bc:	4641      	mov	r1, r8
   172be:	4640      	mov	r0, r8
   172c0:	f7f8 ff42 	bl	10148 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   172c4:	4603      	mov	r3, r0
   172c6:	2800      	cmp	r0, #0
   172c8:	f43f acff 	beq.w	16cca <isr_rx_adv+0x42>
   172cc:	2802      	cmp	r0, #2
   172ce:	d13d      	bne.n	1734c <isr_rx_adv+0x6c4>
		return 0;
   172d0:	2300      	movs	r3, #0
   172d2:	e4fa      	b.n	16cca <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   172d4:	4923      	ldr	r1, [pc, #140]	; (17364 <isr_rx_adv+0x6dc>)
   172d6:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   172da:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   172de:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   172e0:	fa52 f383 	uxtab	r3, r2, r3
   172e4:	b2db      	uxtb	r3, r3
   172e6:	e62b      	b.n	16f40 <isr_rx_adv+0x2b8>
		return 0;
   172e8:	2500      	movs	r5, #0
   172ea:	e633      	b.n	16f54 <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   172ec:	2206      	movs	r2, #6
   172ee:	2100      	movs	r1, #0
   172f0:	f105 0014 	add.w	r0, r5, #20
   172f4:	f013 fbe2 	bl	2aabc <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   172f8:	4641      	mov	r1, r8
   172fa:	f811 3b02 	ldrb.w	r3, [r1], #2
   172fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17302:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17304:	2206      	movs	r2, #6
   17306:	f105 000e 	add.w	r0, r5, #14
   1730a:	f7e8 ffd9 	bl	2c0 <memcpy>
   1730e:	e6b6      	b.n	1707e <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17310:	4914      	ldr	r1, [pc, #80]	; (17364 <isr_rx_adv+0x6dc>)
   17312:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17316:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1731a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1731c:	fa52 f383 	uxtab	r3, r2, r3
   17320:	b2db      	uxtb	r3, r3
   17322:	e6d1      	b.n	170c8 <isr_rx_adv+0x440>
		return 0;
   17324:	2300      	movs	r3, #0
   17326:	e6d9      	b.n	170dc <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17328:	4040      	eors	r0, r0
   1732a:	f380 8811 	msr	BASEPRI, r0
   1732e:	f04f 0004 	mov.w	r0, #4
   17332:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17334:	2200      	movs	r2, #0
   17336:	72da      	strb	r2, [r3, #11]
   17338:	e6ed      	b.n	17116 <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1733a:	4658      	mov	r0, fp
   1733c:	f8cd b000 	str.w	fp, [sp]
   17340:	465b      	mov	r3, fp
   17342:	2203      	movs	r2, #3
   17344:	4659      	mov	r1, fp
   17346:	f7f8 ff9b 	bl	10280 <ticker_stop>
   1734a:	e753      	b.n	171f4 <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1734c:	4040      	eors	r0, r0
   1734e:	f380 8811 	msr	BASEPRI, r0
   17352:	f04f 0004 	mov.w	r0, #4
   17356:	df02      	svc	2
	return 1;
   17358:	2301      	movs	r3, #1
   1735a:	e4b6      	b.n	16cca <isr_rx_adv+0x42>
   1735c:	2301      	movs	r3, #1
   1735e:	e4b4      	b.n	16cca <isr_rx_adv+0x42>
			return 1;
   17360:	2301      	movs	r3, #1
   17362:	e4b2      	b.n	16cca <isr_rx_adv+0x42>
   17364:	20000e8c 	.word	0x20000e8c

00017368 <radio_init>:
{
   17368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1736c:	f89d e018 	ldrb.w	lr, [sp, #24]
   17370:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17374:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17376:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   1737a:	4c3b      	ldr	r4, [pc, #236]	; (17468 <radio_init+0x100>)
   1737c:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   1737e:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17382:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17384:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17388:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1738c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17390:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17394:	f103 0803 	add.w	r8, r3, #3
   17398:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   1739c:	f10e 0701 	add.w	r7, lr, #1
   173a0:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   173a2:	3304      	adds	r3, #4
   173a4:	b2dd      	uxtb	r5, r3
   173a6:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   173aa:	f10e 0e02 	add.w	lr, lr, #2
   173ae:	fa5f fe8e 	uxtb.w	lr, lr
   173b2:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   173b6:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   173ba:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   173be:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   173c2:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   173c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   173ca:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   173cc:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   173d0:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   173d2:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   173d6:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   173da:	2b2a      	cmp	r3, #42	; 0x2a
   173dc:	d931      	bls.n	17442 <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   173de:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   173e2:	f02c 0c03 	bic.w	ip, ip, #3
   173e6:	fb1c f808 	smulbb	r8, ip, r8
   173ea:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   173ee:	4c1e      	ldr	r4, [pc, #120]	; (17468 <radio_init+0x100>)
   173f0:	2334      	movs	r3, #52	; 0x34
   173f2:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   173f6:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   173fa:	4b1c      	ldr	r3, [pc, #112]	; (1746c <radio_init+0x104>)
   173fc:	fba3 c30e 	umull	ip, r3, r3, lr
   17400:	091b      	lsrs	r3, r3, #4
   17402:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17406:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   1740a:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   1740c:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17410:	442a      	add	r2, r5
   17412:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17416:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1741a:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1741c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17420:	330a      	adds	r3, #10
   17422:	b29b      	uxth	r3, r3
   17424:	f023 0303 	bic.w	r3, r3, #3
   17428:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   1742a:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   1742e:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17432:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17436:	1a3f      	subs	r7, r7, r0
   17438:	d00d      	beq.n	17456 <radio_init+0xee>
		return (retcode + mem_size);
   1743a:	4437      	add	r7, r6
}
   1743c:	4638      	mov	r0, r7
   1743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   17442:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   17446:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1744a:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   1744e:	4c06      	ldr	r4, [pc, #24]	; (17468 <radio_init+0x100>)
   17450:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   17454:	e7cb      	b.n	173ee <radio_init+0x86>
	_radio.fc_ena = 1;
   17456:	2201      	movs	r2, #1
   17458:	4b03      	ldr	r3, [pc, #12]	; (17468 <radio_init+0x100>)
   1745a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   1745e:	f7ec ff23 	bl	42a8 <common_init>
	radio_setup();
   17462:	f7f7 faef 	bl	ea44 <radio_setup>
	return retcode;
   17466:	e7e9      	b.n	1743c <radio_init+0xd4>
   17468:	20000e8c 	.word	0x20000e8c
   1746c:	4ec4ec4f 	.word	0x4ec4ec4f

00017470 <ll_reset>:
{
   17470:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   17472:	2103      	movs	r1, #3
   17474:	2005      	movs	r0, #5
   17476:	f7f9 ff9b 	bl	113b0 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1747a:	2104      	movs	r1, #4
   1747c:	2006      	movs	r0, #6
   1747e:	f7f9 ff97 	bl	113b0 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17482:	2400      	movs	r4, #0
   17484:	e006      	b.n	17494 <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   17486:	1de0      	adds	r0, r4, #7
   17488:	21ff      	movs	r1, #255	; 0xff
   1748a:	b2c0      	uxtb	r0, r0
   1748c:	f7f9 ff90 	bl	113b0 <role_disable>
	     conn_handle++) {
   17490:	3401      	adds	r4, #1
   17492:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17494:	4b1d      	ldr	r3, [pc, #116]	; (1750c <ll_reset+0x9c>)
   17496:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   1749a:	429c      	cmp	r4, r3
   1749c:	d3f3      	bcc.n	17486 <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   1749e:	4b1b      	ldr	r3, [pc, #108]	; (1750c <ll_reset+0x9c>)
   174a0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   174a4:	f36f 0200 	bfc	r2, #0, #1
   174a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   174ac:	2000      	movs	r0, #0
   174ae:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   174b2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   174b6:	f360 0200 	bfi	r2, r0, #0, #1
   174ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   174be:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   174c2:	2234      	movs	r2, #52	; 0x34
   174c4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   174c8:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   174cc:	4910      	ldr	r1, [pc, #64]	; (17510 <ll_reset+0xa0>)
   174ce:	fba1 1202 	umull	r1, r2, r1, r2
   174d2:	0912      	lsrs	r2, r2, #4
   174d4:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   174d8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   174dc:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   174e0:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   174e4:	3a01      	subs	r2, #1
   174e6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   174ea:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   174ee:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   174f2:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   174f6:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   174fa:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   174fe:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   17502:	f002 fa69 	bl	199d8 <ll_filter_reset>
	common_init();
   17506:	f7ec fecf 	bl	42a8 <common_init>
   1750a:	bd10      	pop	{r4, pc}
   1750c:	20000e8c 	.word	0x20000e8c
   17510:	4ec4ec4f 	.word	0x4ec4ec4f

00017514 <radio_adv_data_get>:
}
   17514:	4800      	ldr	r0, [pc, #0]	; (17518 <radio_adv_data_get+0x4>)
   17516:	4770      	bx	lr
   17518:	20000eb3 	.word	0x20000eb3

0001751c <radio_scan_data_get>:
}
   1751c:	4800      	ldr	r0, [pc, #0]	; (17520 <radio_scan_data_get+0x4>)
   1751e:	4770      	bx	lr
   17520:	20000f03 	.word	0x20000f03

00017524 <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   17524:	4b02      	ldr	r3, [pc, #8]	; (17530 <radio_adv_is_enabled+0xc>)
   17526:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   1752a:	f000 0001 	and.w	r0, r0, #1
   1752e:	4770      	bx	lr
   17530:	20000e8c 	.word	0x20000e8c

00017534 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   17534:	4b06      	ldr	r3, [pc, #24]	; (17550 <radio_adv_filter_pol_get+0x1c>)
   17536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1753a:	f013 0f01 	tst.w	r3, #1
   1753e:	d004      	beq.n	1754a <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   17540:	4b03      	ldr	r3, [pc, #12]	; (17550 <radio_adv_filter_pol_get+0x1c>)
   17542:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   17546:	0980      	lsrs	r0, r0, #6
   17548:	4770      	bx	lr
	return 0;
   1754a:	2000      	movs	r0, #0
}
   1754c:	4770      	bx	lr
   1754e:	bf00      	nop
   17550:	20000e8c 	.word	0x20000e8c

00017554 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   17554:	4b02      	ldr	r3, [pc, #8]	; (17560 <radio_scan_is_enabled+0xc>)
   17556:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   1755a:	f000 0001 	and.w	r0, r0, #1
   1755e:	4770      	bx	lr
   17560:	20000e8c 	.word	0x20000e8c

00017564 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   17564:	4b06      	ldr	r3, [pc, #24]	; (17580 <radio_scan_filter_pol_get+0x1c>)
   17566:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1756a:	f013 0f01 	tst.w	r3, #1
   1756e:	d005      	beq.n	1757c <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   17570:	4b03      	ldr	r3, [pc, #12]	; (17580 <radio_scan_filter_pol_get+0x1c>)
   17572:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   17576:	f3c0 1001 	ubfx	r0, r0, #4, #2
   1757a:	4770      	bx	lr
	return 0;
   1757c:	2000      	movs	r0, #0
}
   1757e:	4770      	bx	lr
   17580:	20000e8c 	.word	0x20000e8c
   17584:	00000000 	.word	0x00000000

00017588 <radio_connect_enable>:
{
   17588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1758c:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   1758e:	4c94      	ldr	r4, [pc, #592]	; (177e0 <radio_connect_enable+0x258>)
   17590:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   17594:	b11c      	cbz	r4, 1759e <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17596:	200c      	movs	r0, #12
}
   17598:	b003      	add	sp, #12
   1759a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1759e:	461f      	mov	r7, r3
   175a0:	4616      	mov	r6, r2
   175a2:	460d      	mov	r5, r1
   175a4:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   175a6:	488f      	ldr	r0, [pc, #572]	; (177e4 <radio_connect_enable+0x25c>)
   175a8:	f7f7 f8ff 	bl	e7aa <mem_acquire>
	if (!link) {
   175ac:	4681      	mov	r9, r0
   175ae:	2800      	cmp	r0, #0
   175b0:	f000 810f 	beq.w	177d2 <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   175b4:	488c      	ldr	r0, [pc, #560]	; (177e8 <radio_connect_enable+0x260>)
   175b6:	f7f7 f8f8 	bl	e7aa <mem_acquire>
   175ba:	9001      	str	r0, [sp, #4]
	if (!conn) {
   175bc:	2800      	cmp	r0, #0
   175be:	f000 8102 	beq.w	177c6 <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   175c2:	f8df 821c 	ldr.w	r8, [pc, #540]	; 177e0 <radio_connect_enable+0x258>
   175c6:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   175ca:	f364 1386 	bfi	r3, r4, #6, #1
   175ce:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   175d2:	2206      	movs	r2, #6
   175d4:	4629      	mov	r1, r5
   175d6:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   175da:	f7e8 fe71 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   175de:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   175e2:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   175e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   175ea:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   175ee:	2100      	movs	r1, #0
   175f0:	4608      	mov	r0, r1
   175f2:	f7f7 fad7 	bl	eba4 <radio_tx_ready_delay_get>
   175f6:	f200 4052 	addw	r0, r0, #1106	; 0x452
   175fa:	2400      	movs	r4, #0
   175fc:	a376      	add	r3, pc, #472	; (adr r3, 177d8 <radio_connect_enable+0x250>)
   175fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   17602:	497a      	ldr	r1, [pc, #488]	; (177ec <radio_connect_enable+0x264>)
   17604:	fba0 0101 	umull	r0, r1, r0, r1
   17608:	f7e9 fd78 	bl	10fc <__aeabi_uldivmod>
   1760c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   17610:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   17614:	9b01      	ldr	r3, [sp, #4]
   17616:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1761a:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   1761c:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   17620:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   17624:	f7fe fe84 	bl	16330 <access_addr_get>
   17628:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1762a:	2204      	movs	r2, #4
   1762c:	4669      	mov	r1, sp
   1762e:	9801      	ldr	r0, [sp, #4]
   17630:	3010      	adds	r0, #16
   17632:	f7e8 fe45 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   17636:	a902      	add	r1, sp, #8
   17638:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1763c:	2203      	movs	r2, #3
   1763e:	3014      	adds	r0, #20
   17640:	f7e8 fe3e 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   17644:	2205      	movs	r2, #5
   17646:	f508 718b 	add.w	r1, r8, #278	; 0x116
   1764a:	9801      	ldr	r0, [sp, #4]
   1764c:	3017      	adds	r0, #23
   1764e:	f7e8 fe37 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   17652:	9b01      	ldr	r3, [sp, #4]
   17654:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   17658:	7f5a      	ldrb	r2, [r3, #29]
   1765a:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   1765e:	f364 1286 	bfi	r2, r4, #6, #1
   17662:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   17664:	2506      	movs	r5, #6
   17666:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   17668:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   1766a:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   1766c:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   17670:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   17672:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   17674:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   17676:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   1767a:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   1767c:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   17680:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   17682:	221b      	movs	r2, #27
   17684:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   17686:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   17688:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   1768c:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1768e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17692:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   17694:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   17696:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   1769a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1769e:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   176a2:	2101      	movs	r1, #1
   176a4:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   176a8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   176ac:	f364 12c7 	bfi	r2, r4, #7, #1
   176b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   176b4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   176b8:	f361 0202 	bfi	r2, r1, #0, #3
   176bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   176c0:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   176c4:	b2d2      	uxtb	r2, r2
   176c6:	f366 02c5 	bfi	r2, r6, #3, #3
   176ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   176ce:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   176d2:	f361 0202 	bfi	r2, r1, #0, #3
   176d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   176da:	7f5a      	ldrb	r2, [r3, #29]
   176dc:	f364 12c7 	bfi	r2, r4, #7, #1
   176e0:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   176e2:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   176e4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   176e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   176ec:	f364 0200 	bfi	r2, r4, #0, #1
   176f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   176f4:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   176f8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   176fc:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   17700:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   17704:	f242 7510 	movw	r5, #10000	; 0x2710
   17708:	fb05 1202 	mla	r2, r5, r2, r1
   1770c:	3a01      	subs	r2, #1
   1770e:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   17712:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   17714:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   17718:	4a35      	ldr	r2, [pc, #212]	; (177f0 <radio_connect_enable+0x268>)
   1771a:	440a      	add	r2, r1
   1771c:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   17720:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   17724:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17728:	4a32      	ldr	r2, [pc, #200]	; (177f4 <radio_connect_enable+0x26c>)
   1772a:	440a      	add	r2, r1
   1772c:	fbb2 f2f1 	udiv	r2, r2, r1
   17730:	b292      	uxth	r2, r2
   17732:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17736:	1d81      	adds	r1, r0, #6
   17738:	428a      	cmp	r2, r1
   1773a:	dd03      	ble.n	17744 <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   1773c:	1a12      	subs	r2, r2, r0
   1773e:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17740:	3a06      	subs	r2, #6
   17742:	b292      	uxth	r2, r2
   17744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   17748:	2000      	movs	r0, #0
   1774a:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   1774e:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   17752:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   17756:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   1775a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   1775e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   17762:	f360 0241 	bfi	r2, r0, #1, #1
   17766:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   1776a:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1776e:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   17772:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   17776:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1777a:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1777e:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   17782:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   17786:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1778a:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1778e:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   17792:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   17796:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1779a:	f360 12c7 	bfi	r2, r0, #7, #1
   1779e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   177a2:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   177a6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   177aa:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   177ae:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   177b2:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   177b6:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   177ba:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   177be:	4a08      	ldr	r2, [pc, #32]	; (177e0 <radio_connect_enable+0x258>)
   177c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   177c4:	e6e8      	b.n	17598 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   177c6:	4907      	ldr	r1, [pc, #28]	; (177e4 <radio_connect_enable+0x25c>)
   177c8:	4648      	mov	r0, r9
   177ca:	f7f7 f80a 	bl	e7e2 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   177ce:	2007      	movs	r0, #7
   177d0:	e6e2      	b.n	17598 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   177d2:	2007      	movs	r0, #7
   177d4:	e6e0      	b.n	17598 <radio_connect_enable+0x10>
   177d6:	bf00      	nop
   177d8:	1afd498d 	.word	0x1afd498d
   177dc:	00000007 	.word	0x00000007
   177e0:	20000e8c 	.word	0x20000e8c
   177e4:	20000fd0 	.word	0x20000fd0
   177e8:	20000f94 	.word	0x20000f94
   177ec:	3b9aca00 	.word	0x3b9aca00
   177f0:	026259ff 	.word	0x026259ff
   177f4:	01c9c37f 	.word	0x01c9c37f

000177f8 <ll_conn_update>:
{
   177f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177fc:	460c      	mov	r4, r1
   177fe:	4690      	mov	r8, r2
   17800:	461f      	mov	r7, r3
   17802:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17806:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   1780a:	f7f9 fdb3 	bl	11374 <connection_get>
	if (!conn) {
   1780e:	2800      	cmp	r0, #0
   17810:	d078      	beq.n	17904 <ll_conn_update+0x10c>
   17812:	4603      	mov	r3, r0
	if (!cmd) {
   17814:	b984      	cbnz	r4, 17838 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   17816:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1781a:	f012 0f20 	tst.w	r2, #32
   1781e:	d007      	beq.n	17830 <ll_conn_update+0x38>
		    (conn->llcp_features &
   17820:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   17824:	f012 0f02 	tst.w	r2, #2
   17828:	d002      	beq.n	17830 <ll_conn_update+0x38>
			cmd++;
   1782a:	3401      	adds	r4, #1
   1782c:	b2e4      	uxtb	r4, r4
   1782e:	e003      	b.n	17838 <ll_conn_update+0x40>
		} else if (conn->role) {
   17830:	f993 201d 	ldrsb.w	r2, [r3, #29]
   17834:	2a00      	cmp	r2, #0
   17836:	db68      	blt.n	1790a <ll_conn_update+0x112>
	if (!cmd) {
   17838:	bb1c      	cbnz	r4, 17882 <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   1783a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1783e:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   17842:	428a      	cmp	r2, r1
   17844:	d002      	beq.n	1784c <ll_conn_update+0x54>
			return 1;
   17846:	2001      	movs	r0, #1
   17848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   1784c:	2401      	movs	r4, #1
   1784e:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   17852:	2000      	movs	r0, #0
   17854:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   17858:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   1785c:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   17860:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   17864:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   17868:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   1786c:	f360 0182 	bfi	r1, r0, #2, #1
   17870:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   17874:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   17878:	4422      	add	r2, r4
   1787a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   1787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   17882:	3c01      	subs	r4, #1
		if (cmd) {
   17884:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17888:	d01c      	beq.n	178c4 <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   1788a:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   1788e:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   17892:	4291      	cmp	r1, r2
   17894:	d03c      	beq.n	17910 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   17896:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1789a:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   1789e:	2a03      	cmp	r2, #3
   178a0:	d002      	beq.n	178a8 <ll_conn_update+0xb0>
				return 1;
   178a2:	2001      	movs	r0, #1
   178a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   178a8:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   178ac:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   178b0:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   178b4:	b2d2      	uxtb	r2, r2
   178b6:	f042 0208 	orr.w	r2, r2, #8
   178ba:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   178be:	2000      	movs	r0, #0
   178c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   178c4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   178c8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   178cc:	428a      	cmp	r2, r1
   178ce:	d002      	beq.n	178d6 <ll_conn_update+0xde>
				return 1;
   178d0:	2001      	movs	r0, #1
}
   178d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   178d6:	2000      	movs	r0, #0
   178d8:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   178dc:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   178e0:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   178e4:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   178e8:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   178ec:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   178f0:	b2c9      	uxtb	r1, r1
   178f2:	f041 0108 	orr.w	r1, r1, #8
   178f6:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   178fa:	3201      	adds	r2, #1
   178fc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   17900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   17904:	2001      	movs	r0, #1
   17906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   1790a:	2001      	movs	r0, #1
   1790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   17910:	2001      	movs	r0, #1
   17912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00017918 <ll_chm_update>:
{
   17918:	b570      	push	{r4, r5, r6, lr}
   1791a:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   1791c:	4c1c      	ldr	r4, [pc, #112]	; (17990 <ll_chm_update+0x78>)
   1791e:	f504 758b 	add.w	r5, r4, #278	; 0x116
   17922:	2205      	movs	r2, #5
   17924:	4601      	mov	r1, r0
   17926:	4628      	mov	r0, r5
   17928:	f7e8 fcca 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   1792c:	2105      	movs	r1, #5
   1792e:	4628      	mov	r0, r5
   17930:	f7f6 ffbf 	bl	e8b2 <util_ones_count_get>
	_radio.data_chan_count =
   17934:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   17938:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   1793c:	e000      	b.n	17940 <ll_chm_update+0x28>
{
   1793e:	462b      	mov	r3, r5
	while (instance--) {
   17940:	1e5d      	subs	r5, r3, #1
   17942:	b2ed      	uxtb	r5, r5
   17944:	b303      	cbz	r3, 17988 <ll_chm_update+0x70>
		conn = connection_get(instance);
   17946:	4628      	mov	r0, r5
   17948:	f7f9 fd14 	bl	11374 <connection_get>
		if (!conn || conn->role) {
   1794c:	4604      	mov	r4, r0
   1794e:	2800      	cmp	r0, #0
   17950:	d0f5      	beq.n	1793e <ll_chm_update+0x26>
   17952:	f990 301d 	ldrsb.w	r3, [r0, #29]
   17956:	2b00      	cmp	r3, #0
   17958:	dbf1      	blt.n	1793e <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   1795a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1795e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   17962:	429a      	cmp	r2, r3
   17964:	d112      	bne.n	1798c <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   17966:	2205      	movs	r2, #5
   17968:	4631      	mov	r1, r6
   1796a:	3079      	adds	r0, #121	; 0x79
   1796c:	f7e8 fca8 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   17970:	2301      	movs	r3, #1
   17972:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   17976:	2302      	movs	r3, #2
   17978:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   1797c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17980:	3301      	adds	r3, #1
   17982:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   17986:	e7da      	b.n	1793e <ll_chm_update+0x26>
	return 0;
   17988:	2000      	movs	r0, #0
   1798a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   1798c:	2001      	movs	r0, #1
}
   1798e:	bd70      	pop	{r4, r5, r6, pc}
   17990:	20000e8c 	.word	0x20000e8c

00017994 <ll_chm_get>:
{
   17994:	b538      	push	{r3, r4, r5, lr}
   17996:	460d      	mov	r5, r1
	conn = connection_get(handle);
   17998:	f7f9 fcec 	bl	11374 <connection_get>
	if (!conn) {
   1799c:	4604      	mov	r4, r0
   1799e:	b160      	cbz	r0, 179ba <ll_chm_get+0x26>
		conn->chm_update = 0;
   179a0:	2300      	movs	r3, #0
   179a2:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   179a4:	2205      	movs	r2, #5
   179a6:	f104 0117 	add.w	r1, r4, #23
   179aa:	4628      	mov	r0, r5
   179ac:	f7e8 fc88 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   179b0:	7f23      	ldrb	r3, [r4, #28]
   179b2:	2b00      	cmp	r3, #0
   179b4:	d1f4      	bne.n	179a0 <ll_chm_get+0xc>
	return 0;
   179b6:	2000      	movs	r0, #0
   179b8:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   179ba:	2001      	movs	r0, #1
}
   179bc:	bd38      	pop	{r3, r4, r5, pc}

000179be <ll_start_enc_req_send>:
{
   179be:	b570      	push	{r4, r5, r6, lr}
   179c0:	460d      	mov	r5, r1
   179c2:	4616      	mov	r6, r2
	conn = connection_get(handle);
   179c4:	f7f9 fcd6 	bl	11374 <connection_get>
	if (!conn) {
   179c8:	2800      	cmp	r0, #0
   179ca:	d03e      	beq.n	17a4a <ll_start_enc_req_send+0x8c>
   179cc:	4604      	mov	r4, r0
	if (error_code) {
   179ce:	b32d      	cbz	r5, 17a1c <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   179d0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   179d4:	f013 0f40 	tst.w	r3, #64	; 0x40
   179d8:	d111      	bne.n	179fe <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   179da:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   179de:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   179e2:	4293      	cmp	r3, r2
   179e4:	d001      	beq.n	179ea <ll_start_enc_req_send+0x2c>
				return 1;
   179e6:	2001      	movs	r0, #1
   179e8:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   179ea:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   179ee:	2203      	movs	r2, #3
   179f0:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   179f4:	3301      	adds	r3, #1
   179f6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   179fa:	2000      	movs	r0, #0
   179fc:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   179fe:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   17a02:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   17a06:	429a      	cmp	r2, r3
   17a08:	d001      	beq.n	17a0e <ll_start_enc_req_send+0x50>
				return 1;
   17a0a:	2001      	movs	r0, #1
   17a0c:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   17a0e:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   17a12:	3301      	adds	r3, #1
   17a14:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   17a18:	2000      	movs	r0, #0
   17a1a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   17a1c:	2210      	movs	r2, #16
   17a1e:	4631      	mov	r1, r6
   17a20:	3083      	adds	r0, #131	; 0x83
   17a22:	f7e8 fc4d 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   17a26:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17a2a:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   17a2e:	4293      	cmp	r3, r2
   17a30:	d001      	beq.n	17a36 <ll_start_enc_req_send+0x78>
			return 1;
   17a32:	2001      	movs	r0, #1
}
   17a34:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   17a36:	2000      	movs	r0, #0
   17a38:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   17a3c:	2203      	movs	r2, #3
   17a3e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   17a42:	3301      	adds	r3, #1
   17a44:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   17a48:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17a4a:	2001      	movs	r0, #1
   17a4c:	bd70      	pop	{r4, r5, r6, pc}

00017a4e <ll_feature_req_send>:
{
   17a4e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17a50:	f7f9 fc90 	bl	11374 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17a54:	b178      	cbz	r0, 17a76 <ll_feature_req_send+0x28>
   17a56:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17a5a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17a5e:	428a      	cmp	r2, r1
   17a60:	d001      	beq.n	17a66 <ll_feature_req_send+0x18>
		return 1;
   17a62:	2001      	movs	r0, #1
}
   17a64:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   17a66:	2104      	movs	r1, #4
   17a68:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17a6c:	3201      	adds	r2, #1
   17a6e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17a72:	2000      	movs	r0, #0
   17a74:	bd08      	pop	{r3, pc}
		return 1;
   17a76:	2001      	movs	r0, #1
   17a78:	bd08      	pop	{r3, pc}

00017a7a <ll_version_ind_send>:
{
   17a7a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17a7c:	f7f9 fc7a 	bl	11374 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17a80:	b178      	cbz	r0, 17aa2 <ll_version_ind_send+0x28>
   17a82:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17a86:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17a8a:	428a      	cmp	r2, r1
   17a8c:	d001      	beq.n	17a92 <ll_version_ind_send+0x18>
		return 1;
   17a8e:	2001      	movs	r0, #1
}
   17a90:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   17a92:	2105      	movs	r1, #5
   17a94:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17a98:	3201      	adds	r2, #1
   17a9a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17a9e:	2000      	movs	r0, #0
   17aa0:	bd08      	pop	{r3, pc}
		return 1;
   17aa2:	2001      	movs	r0, #1
   17aa4:	bd08      	pop	{r3, pc}

00017aa6 <ll_terminate_ind_send>:
{
   17aa6:	b510      	push	{r4, lr}
   17aa8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17aaa:	f7f9 fc63 	bl	11374 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   17aae:	b170      	cbz	r0, 17ace <ll_terminate_ind_send+0x28>
   17ab0:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   17ab4:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   17ab8:	4291      	cmp	r1, r2
   17aba:	d001      	beq.n	17ac0 <ll_terminate_ind_send+0x1a>
		return 1;
   17abc:	2001      	movs	r0, #1
}
   17abe:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   17ac0:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   17ac4:	3201      	adds	r2, #1
   17ac6:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   17aca:	2000      	movs	r0, #0
   17acc:	bd10      	pop	{r4, pc}
		return 1;
   17ace:	2001      	movs	r0, #1
   17ad0:	bd10      	pop	{r4, pc}

00017ad2 <ll_tx_power_level_get>:
{
   17ad2:	b510      	push	{r4, lr}
   17ad4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17ad6:	f7f9 fc4d 	bl	11374 <connection_get>
	if (!conn) {
   17ada:	b110      	cbz	r0, 17ae2 <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   17adc:	2000      	movs	r0, #0
   17ade:	7020      	strb	r0, [r4, #0]
	return 0;
   17ae0:	bd10      	pop	{r4, pc}
		return 1;
   17ae2:	2001      	movs	r0, #1
}
   17ae4:	bd10      	pop	{r4, pc}

00017ae6 <ll_tx_power_get>:
	*min = 0;
   17ae6:	2300      	movs	r3, #0
   17ae8:	7003      	strb	r3, [r0, #0]
	*max = 0;
   17aea:	700b      	strb	r3, [r1, #0]
   17aec:	4770      	bx	lr
	...

00017af0 <ll_apto_get>:
{
   17af0:	b510      	push	{r4, lr}
   17af2:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17af4:	f7f9 fc3e 	bl	11374 <connection_get>
	if (!conn) {
   17af8:	b188      	cbz	r0, 17b1e <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   17afa:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   17afe:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   17b00:	fb03 f301 	mul.w	r3, r3, r1
   17b04:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   17b08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17b0c:	4a05      	ldr	r2, [pc, #20]	; (17b24 <ll_apto_get+0x34>)
   17b0e:	fb82 1203 	smull	r1, r2, r2, r3
   17b12:	17db      	asrs	r3, r3, #31
   17b14:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   17b18:	8023      	strh	r3, [r4, #0]
	return 0;
   17b1a:	2000      	movs	r0, #0
   17b1c:	bd10      	pop	{r4, pc}
		return 1;
   17b1e:	2001      	movs	r0, #1
}
   17b20:	bd10      	pop	{r4, pc}
   17b22:	bf00      	nop
   17b24:	10624dd3 	.word	0x10624dd3

00017b28 <ll_apto_set>:
{
   17b28:	b510      	push	{r4, lr}
   17b2a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17b2c:	f7f9 fc22 	bl	11374 <connection_get>
	if (!conn) {
   17b30:	b178      	cbz	r0, 17b52 <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   17b32:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   17b34:	f240 43e2 	movw	r3, #1250	; 0x4e2
   17b38:	fb03 f301 	mul.w	r3, r3, r1
   17b3c:	f242 7110 	movw	r1, #10000	; 0x2710
   17b40:	fb01 3404 	mla	r4, r1, r4, r3
   17b44:	3c01      	subs	r4, #1
   17b46:	fb94 f4f3 	sdiv	r4, r4, r3
   17b4a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   17b4e:	2000      	movs	r0, #0
   17b50:	bd10      	pop	{r4, pc}
		return 1;
   17b52:	2001      	movs	r0, #1
}
   17b54:	bd10      	pop	{r4, pc}

00017b56 <ll_length_req_send>:
{
   17b56:	b538      	push	{r3, r4, r5, lr}
   17b58:	460d      	mov	r5, r1
   17b5a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17b5c:	f7f9 fc0a 	bl	11374 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17b60:	b1f0      	cbz	r0, 17ba0 <ll_length_req_send+0x4a>
   17b62:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17b66:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17b6a:	4291      	cmp	r1, r2
   17b6c:	d001      	beq.n	17b72 <ll_length_req_send+0x1c>
		return 1;
   17b6e:	2001      	movs	r0, #1
   17b70:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   17b72:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   17b76:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17b7a:	428a      	cmp	r2, r1
   17b7c:	d001      	beq.n	17b82 <ll_length_req_send+0x2c>
		return 1;
   17b7e:	2001      	movs	r0, #1
}
   17b80:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17b82:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   17b86:	f36f 0101 	bfc	r1, #0, #2
   17b8a:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   17b8e:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   17b92:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   17b96:	3201      	adds	r2, #1
   17b98:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   17b9c:	2000      	movs	r0, #0
   17b9e:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17ba0:	2001      	movs	r0, #1
   17ba2:	bd38      	pop	{r3, r4, r5, pc}

00017ba4 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   17ba4:	4b03      	ldr	r3, [pc, #12]	; (17bb4 <ll_length_default_get+0x10>)
   17ba6:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   17baa:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   17bac:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   17bb0:	800b      	strh	r3, [r1, #0]
   17bb2:	4770      	bx	lr
   17bb4:	20000e8c 	.word	0x20000e8c

00017bb8 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   17bb8:	4b03      	ldr	r3, [pc, #12]	; (17bc8 <ll_length_default_set+0x10>)
   17bba:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   17bbe:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   17bc2:	2000      	movs	r0, #0
   17bc4:	4770      	bx	lr
   17bc6:	bf00      	nop
   17bc8:	20000e8c 	.word	0x20000e8c

00017bcc <ll_length_max_get>:
{
   17bcc:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17bce:	241b      	movs	r4, #27
   17bd0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17bd2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   17bd6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17bd8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17bda:	8018      	strh	r0, [r3, #0]
}
   17bdc:	bc10      	pop	{r4}
   17bde:	4770      	bx	lr

00017be0 <ll_phy_get>:
{
   17be0:	b538      	push	{r3, r4, r5, lr}
   17be2:	460d      	mov	r5, r1
   17be4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17be6:	f7f9 fbc5 	bl	11374 <connection_get>
	if (!conn) {
   17bea:	b158      	cbz	r0, 17c04 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   17bec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   17bf0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17bf4:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   17bf6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   17bfa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17bfe:	7023      	strb	r3, [r4, #0]
	return 0;
   17c00:	2000      	movs	r0, #0
   17c02:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17c04:	2001      	movs	r0, #1
}
   17c06:	bd38      	pop	{r3, r4, r5, pc}

00017c08 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   17c08:	4b03      	ldr	r3, [pc, #12]	; (17c18 <ll_phy_default_set+0x10>)
   17c0a:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   17c0e:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   17c12:	2000      	movs	r0, #0
   17c14:	4770      	bx	lr
   17c16:	bf00      	nop
   17c18:	20000e8c 	.word	0x20000e8c

00017c1c <ll_phy_req_send>:
{
   17c1c:	b570      	push	{r4, r5, r6, lr}
   17c1e:	460e      	mov	r6, r1
   17c20:	4615      	mov	r5, r2
   17c22:	461c      	mov	r4, r3
	conn = connection_get(handle);
   17c24:	f7f9 fba6 	bl	11374 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17c28:	b338      	cbz	r0, 17c7a <ll_phy_req_send+0x5e>
   17c2a:	4603      	mov	r3, r0
   17c2c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17c30:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17c34:	4291      	cmp	r1, r2
   17c36:	d001      	beq.n	17c3c <ll_phy_req_send+0x20>
		return 1;
   17c38:	2001      	movs	r0, #1
   17c3a:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   17c3c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   17c40:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17c44:	428a      	cmp	r2, r1
   17c46:	d001      	beq.n	17c4c <ll_phy_req_send+0x30>
		return 1;
   17c48:	2001      	movs	r0, #1
}
   17c4a:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   17c4c:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   17c50:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   17c54:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17c58:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   17c5c:	f040 0002 	orr.w	r0, r0, #2
   17c60:	f365 0000 	bfi	r0, r5, #0, #1
   17c64:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   17c68:	f364 1147 	bfi	r1, r4, #5, #3
   17c6c:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   17c70:	3201      	adds	r2, #1
   17c72:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   17c76:	2000      	movs	r0, #0
   17c78:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17c7a:	2001      	movs	r0, #1
   17c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00017c80 <radio_rx_get>:
{
   17c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c82:	b083      	sub	sp, #12
   17c84:	4606      	mov	r6, r0
   17c86:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   17c88:	4b1b      	ldr	r3, [pc, #108]	; (17cf8 <radio_rx_get+0x78>)
   17c8a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   17c8e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17c92:	429a      	cmp	r2, r3
   17c94:	d024      	beq.n	17ce0 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   17c96:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   17c98:	783a      	ldrb	r2, [r7, #0]
   17c9a:	4918      	ldr	r1, [pc, #96]	; (17cfc <radio_rx_get+0x7c>)
   17c9c:	f7f9 fb0c 	bl	112b8 <tx_cmplt_get>
		if (!cmplt) {
   17ca0:	4605      	mov	r5, r0
   17ca2:	b9d0      	cbnz	r0, 17cda <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   17ca4:	4b14      	ldr	r3, [pc, #80]	; (17cf8 <radio_rx_get+0x78>)
   17ca6:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   17caa:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   17cae:	4604      	mov	r4, r0
   17cb0:	e000      	b.n	17cb4 <radio_rx_get+0x34>
   17cb2:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   17cb4:	4b10      	ldr	r3, [pc, #64]	; (17cf8 <radio_rx_get+0x78>)
   17cb6:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   17cba:	f10d 0105 	add.w	r1, sp, #5
   17cbe:	f10d 0006 	add.w	r0, sp, #6
   17cc2:	f7f9 faf9 	bl	112b8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   17cc6:	2c00      	cmp	r4, #0
   17cc8:	d1f3      	bne.n	17cb2 <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   17cca:	4284      	cmp	r4, r0
   17ccc:	d001      	beq.n	17cd2 <radio_rx_get+0x52>
   17cce:	4604      	mov	r4, r0
   17cd0:	e7f0      	b.n	17cb4 <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   17cd2:	6037      	str	r7, [r6, #0]
}
   17cd4:	4628      	mov	r0, r5
   17cd6:	b003      	add	sp, #12
   17cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   17cda:	2300      	movs	r3, #0
   17cdc:	6033      	str	r3, [r6, #0]
   17cde:	e7f9      	b.n	17cd4 <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   17ce0:	4905      	ldr	r1, [pc, #20]	; (17cf8 <radio_rx_get+0x78>)
   17ce2:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   17ce6:	f201 1173 	addw	r1, r1, #371	; 0x173
   17cea:	f7f9 fae5 	bl	112b8 <tx_cmplt_get>
   17cee:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   17cf0:	2300      	movs	r3, #0
   17cf2:	6033      	str	r3, [r6, #0]
   17cf4:	e7ee      	b.n	17cd4 <radio_rx_get+0x54>
   17cf6:	bf00      	nop
   17cf8:	20000e8c 	.word	0x20000e8c
   17cfc:	20000fff 	.word	0x20000fff

00017d00 <radio_rx_mem_release>:
{
   17d00:	b570      	push	{r4, r5, r6, lr}
   17d02:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   17d04:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   17d06:	e003      	b.n	17d10 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   17d08:	491e      	ldr	r1, [pc, #120]	; (17d84 <radio_rx_mem_release+0x84>)
   17d0a:	f7f6 fd6a 	bl	e7e2 <mem_release>
{
   17d0e:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   17d10:	b398      	cbz	r0, 17d7a <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   17d12:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   17d14:	7903      	ldrb	r3, [r0, #4]
   17d16:	3b01      	subs	r3, #1
   17d18:	2b0b      	cmp	r3, #11
   17d1a:	d828      	bhi.n	17d6e <radio_rx_mem_release+0x6e>
   17d1c:	a201      	add	r2, pc, #4	; (adr r2, 17d24 <radio_rx_mem_release+0x24>)
   17d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d22:	bf00      	nop
   17d24:	00017d09 	.word	0x00017d09
   17d28:	00017d09 	.word	0x00017d09
   17d2c:	00017d09 	.word	0x00017d09
   17d30:	00017d09 	.word	0x00017d09
   17d34:	00017d09 	.word	0x00017d09
   17d38:	00017d09 	.word	0x00017d09
   17d3c:	00017d55 	.word	0x00017d55
   17d40:	00017d09 	.word	0x00017d09
   17d44:	00017d09 	.word	0x00017d09
   17d48:	00017d09 	.word	0x00017d09
   17d4c:	00017d09 	.word	0x00017d09
   17d50:	00017d09 	.word	0x00017d09
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   17d54:	4d0c      	ldr	r5, [pc, #48]	; (17d88 <radio_rx_mem_release+0x88>)
   17d56:	88c2      	ldrh	r2, [r0, #6]
   17d58:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17d5c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17d60:	f7f6 fd60 	bl	e824 <mem_get>
			mem_release(conn, &_radio.conn_free);
   17d64:	f505 7184 	add.w	r1, r5, #264	; 0x108
   17d68:	f7f6 fd3b 	bl	e7e2 <mem_release>
			break;
   17d6c:	e7cf      	b.n	17d0e <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   17d6e:	4040      	eors	r0, r0
   17d70:	f380 8811 	msr	BASEPRI, r0
   17d74:	f04f 0004 	mov.w	r0, #4
   17d78:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   17d7a:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   17d7c:	20ff      	movs	r0, #255	; 0xff
   17d7e:	f7f9 fa4f 	bl	11220 <packet_rx_allocate>
   17d82:	bd70      	pop	{r4, r5, r6, pc}
   17d84:	20000fb8 	.word	0x20000fb8
   17d88:	20000e8c 	.word	0x20000e8c

00017d8c <do_radio_rx_fc_set>:
	if (req == ack) {
   17d8c:	4291      	cmp	r1, r2
   17d8e:	d007      	beq.n	17da0 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   17d90:	bb41      	cbnz	r1, 17de4 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17d92:	4b1c      	ldr	r3, [pc, #112]	; (17e04 <do_radio_rx_fc_set+0x78>)
   17d94:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   17d98:	4298      	cmp	r0, r3
   17d9a:	d023      	beq.n	17de4 <do_radio_rx_fc_set+0x58>
		return 1;
   17d9c:	2001      	movs	r0, #1
   17d9e:	4770      	bx	lr
{
   17da0:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   17da2:	4b18      	ldr	r3, [pc, #96]	; (17e04 <do_radio_rx_fc_set+0x78>)
   17da4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   17da8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17dac:	429c      	cmp	r4, r3
   17dae:	d002      	beq.n	17db6 <do_radio_rx_fc_set+0x2a>
			return 1;
   17db0:	2001      	movs	r0, #1
}
   17db2:	bc30      	pop	{r4, r5}
   17db4:	4770      	bx	lr
			if (ack1 == 0) {
   17db6:	b19a      	cbz	r2, 17de0 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   17db8:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   17dba:	3b01      	subs	r3, #1
   17dbc:	b2db      	uxtb	r3, r3
   17dbe:	4c11      	ldr	r4, [pc, #68]	; (17e04 <do_radio_rx_fc_set+0x78>)
   17dc0:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   17dc4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   17dc8:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   17dca:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   17dce:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   17dd2:	b2db      	uxtb	r3, r3
   17dd4:	4299      	cmp	r1, r3
   17dd6:	d00f      	beq.n	17df8 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   17dd8:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   17ddc:	2001      	movs	r0, #1
   17dde:	e7e8      	b.n	17db2 <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   17de0:	2303      	movs	r3, #3
   17de2:	e7ea      	b.n	17dba <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17de4:	b151      	cbz	r1, 17dfc <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   17de6:	31b7      	adds	r1, #183	; 0xb7
   17de8:	4b06      	ldr	r3, [pc, #24]	; (17e04 <do_radio_rx_fc_set+0x78>)
   17dea:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   17dee:	88cb      	ldrh	r3, [r1, #6]
   17df0:	4298      	cmp	r0, r3
   17df2:	d005      	beq.n	17e00 <do_radio_rx_fc_set+0x74>
		return 1;
   17df4:	2001      	movs	r0, #1
   17df6:	4770      	bx	lr
	return 0;
   17df8:	2000      	movs	r0, #0
   17dfa:	e7da      	b.n	17db2 <do_radio_rx_fc_set+0x26>
   17dfc:	4608      	mov	r0, r1
   17dfe:	4770      	bx	lr
   17e00:	2000      	movs	r0, #0
   17e02:	4770      	bx	lr
   17e04:	20000e8c 	.word	0x20000e8c

00017e08 <radio_rx_fc_set>:
{
   17e08:	b538      	push	{r3, r4, r5, lr}
   17e0a:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   17e0c:	4b1b      	ldr	r3, [pc, #108]	; (17e7c <radio_rx_fc_set+0x74>)
   17e0e:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   17e12:	b338      	cbz	r0, 17e64 <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   17e14:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   17e18:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   17e1a:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   17e1e:	b141      	cbz	r1, 17e32 <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   17e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17e24:	429c      	cmp	r4, r3
   17e26:	d023      	beq.n	17e70 <radio_rx_fc_set+0x68>
   17e28:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   17e2a:	4629      	mov	r1, r5
   17e2c:	f7ff ffae 	bl	17d8c <do_radio_rx_fc_set>
   17e30:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17e32:	4b12      	ldr	r3, [pc, #72]	; (17e7c <radio_rx_fc_set+0x74>)
   17e34:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   17e38:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17e3c:	4298      	cmp	r0, r3
   17e3e:	d001      	beq.n	17e44 <radio_rx_fc_set+0x3c>
	return 0;
   17e40:	4608      	mov	r0, r1
   17e42:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17e44:	4295      	cmp	r5, r2
   17e46:	d015      	beq.n	17e74 <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   17e48:	4b0c      	ldr	r3, [pc, #48]	; (17e7c <radio_rx_fc_set+0x74>)
   17e4a:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17e4e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17e52:	4298      	cmp	r0, r3
   17e54:	d010      	beq.n	17e78 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   17e56:	4b09      	ldr	r3, [pc, #36]	; (17e7c <radio_rx_fc_set+0x74>)
   17e58:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   17e5c:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17e5e:	429d      	cmp	r5, r3
   17e60:	d001      	beq.n	17e66 <radio_rx_fc_set+0x5e>
	return 0;
   17e62:	4608      	mov	r0, r1
}
   17e64:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   17e66:	4b05      	ldr	r3, [pc, #20]	; (17e7c <radio_rx_fc_set+0x74>)
   17e68:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   17e6c:	4608      	mov	r0, r1
   17e6e:	bd38      	pop	{r3, r4, r5, pc}
   17e70:	2000      	movs	r0, #0
   17e72:	bd38      	pop	{r3, r4, r5, pc}
   17e74:	4608      	mov	r0, r1
   17e76:	bd38      	pop	{r3, r4, r5, pc}
   17e78:	4608      	mov	r0, r1
   17e7a:	bd38      	pop	{r3, r4, r5, pc}
   17e7c:	20000e8c 	.word	0x20000e8c

00017e80 <radio_tx_mem_acquire>:
{
   17e80:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   17e82:	4802      	ldr	r0, [pc, #8]	; (17e8c <radio_tx_mem_acquire+0xc>)
   17e84:	f7f6 fc91 	bl	e7aa <mem_acquire>
}
   17e88:	bd08      	pop	{r3, pc}
   17e8a:	bf00      	nop
   17e8c:	20000fec 	.word	0x20000fec

00017e90 <radio_tx_mem_release>:
{
   17e90:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   17e92:	4902      	ldr	r1, [pc, #8]	; (17e9c <radio_tx_mem_release+0xc>)
   17e94:	f7f6 fca5 	bl	e7e2 <mem_release>
   17e98:	bd08      	pop	{r3, pc}
   17e9a:	bf00      	nop
   17e9c:	20000fec 	.word	0x20000fec

00017ea0 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   17ea0:	b570      	push	{r4, r5, r6, lr}
   17ea2:	b088      	sub	sp, #32
   17ea4:	4605      	mov	r5, r0
   17ea6:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   17ea8:	4b36      	ldr	r3, [pc, #216]	; (17f84 <radio_tx_mem_enqueue+0xe4>)
   17eaa:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   17eae:	3401      	adds	r4, #1
   17eb0:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   17eb2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   17eb6:	429c      	cmp	r4, r3
   17eb8:	d02a      	beq.n	17f10 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   17eba:	4628      	mov	r0, r5
   17ebc:	f7f9 fa5a 	bl	11374 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   17ec0:	4601      	mov	r1, r0
   17ec2:	2800      	cmp	r0, #0
   17ec4:	d057      	beq.n	17f76 <radio_tx_mem_enqueue+0xd6>
   17ec6:	4b2f      	ldr	r3, [pc, #188]	; (17f84 <radio_tx_mem_enqueue+0xe4>)
   17ec8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   17ecc:	b2db      	uxtb	r3, r3
   17ece:	429c      	cmp	r4, r3
   17ed0:	d053      	beq.n	17f7a <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17ed2:	7972      	ldrb	r2, [r6, #5]
   17ed4:	4b2b      	ldr	r3, [pc, #172]	; (17f84 <radio_tx_mem_enqueue+0xe4>)
   17ed6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   17eda:	3b07      	subs	r3, #7
   17edc:	429a      	cmp	r2, r3
   17ede:	d819      	bhi.n	17f14 <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   17ee0:	4b28      	ldr	r3, [pc, #160]	; (17f84 <radio_tx_mem_enqueue+0xe4>)
   17ee2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17ee6:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17eea:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   17eee:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17ef2:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17ef6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   17efa:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   17efc:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17f00:	f991 301d 	ldrsb.w	r3, [r1, #29]
   17f04:	2b00      	cmp	r3, #0
   17f06:	db0b      	blt.n	17f20 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   17f08:	2300      	movs	r3, #0
}
   17f0a:	4618      	mov	r0, r3
   17f0c:	b008      	add	sp, #32
   17f0e:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   17f10:	2400      	movs	r4, #0
   17f12:	e7d2      	b.n	17eba <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17f14:	4040      	eors	r0, r0
   17f16:	f380 8811 	msr	BASEPRI, r0
   17f1a:	f04f 0004 	mov.w	r0, #4
   17f1e:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17f20:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   17f22:	b363      	cbz	r3, 17f7e <radio_tx_mem_enqueue+0xde>
   17f24:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   17f28:	f013 0f02 	tst.w	r3, #2
   17f2c:	d001      	beq.n	17f32 <radio_tx_mem_enqueue+0x92>
	return 0;
   17f2e:	2300      	movs	r3, #0
   17f30:	e7eb      	b.n	17f0a <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   17f32:	f043 0302 	orr.w	r3, r3, #2
   17f36:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   17f3a:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f3c:	3207      	adds	r2, #7
   17f3e:	9106      	str	r1, [sp, #24]
   17f40:	4b11      	ldr	r3, [pc, #68]	; (17f88 <radio_tx_mem_enqueue+0xe8>)
   17f42:	9305      	str	r3, [sp, #20]
   17f44:	2000      	movs	r0, #0
   17f46:	9004      	str	r0, [sp, #16]
   17f48:	2301      	movs	r3, #1
   17f4a:	9303      	str	r3, [sp, #12]
   17f4c:	9002      	str	r0, [sp, #8]
   17f4e:	9001      	str	r0, [sp, #4]
   17f50:	9000      	str	r0, [sp, #0]
   17f52:	4603      	mov	r3, r0
   17f54:	b2d2      	uxtb	r2, r2
   17f56:	2103      	movs	r1, #3
   17f58:	f7f8 f944 	bl	101e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f5c:	4603      	mov	r3, r0
   17f5e:	2800      	cmp	r0, #0
   17f60:	d0d3      	beq.n	17f0a <radio_tx_mem_enqueue+0x6a>
   17f62:	2802      	cmp	r0, #2
   17f64:	d101      	bne.n	17f6a <radio_tx_mem_enqueue+0xca>
	return 0;
   17f66:	2300      	movs	r3, #0
   17f68:	e7cf      	b.n	17f0a <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f6a:	4040      	eors	r0, r0
   17f6c:	f380 8811 	msr	BASEPRI, r0
   17f70:	f04f 0004 	mov.w	r0, #4
   17f74:	df02      	svc	2
		return 1;
   17f76:	2301      	movs	r3, #1
   17f78:	e7c7      	b.n	17f0a <radio_tx_mem_enqueue+0x6a>
   17f7a:	2301      	movs	r3, #1
   17f7c:	e7c5      	b.n	17f0a <radio_tx_mem_enqueue+0x6a>
	return 0;
   17f7e:	2300      	movs	r3, #0
   17f80:	e7c3      	b.n	17f0a <radio_tx_mem_enqueue+0x6a>
   17f82:	bf00      	nop
   17f84:	20000e8c 	.word	0x20000e8c
   17f88:	00011205 	.word	0x00011205

00017f8c <ll_enc_req_send>:
{
   17f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f90:	4680      	mov	r8, r0
   17f92:	4689      	mov	r9, r1
   17f94:	4616      	mov	r6, r2
   17f96:	461f      	mov	r7, r3
	conn = connection_get(handle);
   17f98:	f7f9 f9ec 	bl	11374 <connection_get>
	if (!conn) {
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d055      	beq.n	1804c <ll_enc_req_send+0xc0>
   17fa0:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   17fa2:	f7ff ff6d 	bl	17e80 <radio_tx_mem_acquire>
	if (node_tx) {
   17fa6:	4604      	mov	r4, r0
   17fa8:	2800      	cmp	r0, #0
   17faa:	d051      	beq.n	18050 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   17fac:	2210      	movs	r2, #16
   17fae:	4639      	mov	r1, r7
   17fb0:	f105 0083 	add.w	r0, r5, #131	; 0x83
   17fb4:	f7e8 f984 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   17fb8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   17fbc:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   17fc0:	d008      	beq.n	17fd4 <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   17fc2:	2b30      	cmp	r3, #48	; 0x30
   17fc4:	d02d      	beq.n	18022 <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   17fc6:	4620      	mov	r0, r4
   17fc8:	f7ff ff62 	bl	17e90 <radio_tx_mem_release>
			return 1;
   17fcc:	2301      	movs	r3, #1
}
   17fce:	4618      	mov	r0, r3
   17fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   17fd4:	7923      	ldrb	r3, [r4, #4]
   17fd6:	f043 0303 	orr.w	r3, r3, #3
   17fda:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   17fdc:	2317      	movs	r3, #23
   17fde:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   17fe0:	2303      	movs	r3, #3
   17fe2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   17fe4:	2208      	movs	r2, #8
   17fe6:	4649      	mov	r1, r9
   17fe8:	18a0      	adds	r0, r4, r2
   17fea:	f7e8 f969 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   17fee:	7833      	ldrb	r3, [r6, #0]
   17ff0:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   17ff2:	7873      	ldrb	r3, [r6, #1]
   17ff4:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   17ff6:	2108      	movs	r1, #8
   17ff8:	f104 0012 	add.w	r0, r4, #18
   17ffc:	f7f8 fd74 	bl	10ae8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18000:	2104      	movs	r1, #4
   18002:	f104 001a 	add.w	r0, r4, #26
   18006:	f7f8 fd6f 	bl	10ae8 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   1800a:	4621      	mov	r1, r4
   1800c:	4640      	mov	r0, r8
   1800e:	f7ff ff47 	bl	17ea0 <radio_tx_mem_enqueue>
   18012:	4603      	mov	r3, r0
   18014:	2800      	cmp	r0, #0
   18016:	d0da      	beq.n	17fce <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18018:	4620      	mov	r0, r4
   1801a:	f7ff ff39 	bl	17e90 <radio_tx_mem_release>
			return 1;
   1801e:	2301      	movs	r3, #1
   18020:	e7d5      	b.n	17fce <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18022:	2208      	movs	r2, #8
   18024:	4649      	mov	r1, r9
   18026:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1802a:	f7e8 f949 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1802e:	7833      	ldrb	r3, [r6, #0]
   18030:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18034:	7873      	ldrb	r3, [r6, #1]
   18036:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1803a:	7923      	ldrb	r3, [r4, #4]
   1803c:	f043 0303 	orr.w	r3, r3, #3
   18040:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18042:	2301      	movs	r3, #1
   18044:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18046:	230a      	movs	r3, #10
   18048:	71e3      	strb	r3, [r4, #7]
   1804a:	e7de      	b.n	1800a <ll_enc_req_send+0x7e>
		return 1;
   1804c:	2301      	movs	r3, #1
   1804e:	e7be      	b.n	17fce <ll_enc_req_send+0x42>
	return 1;
   18050:	2301      	movs	r3, #1
   18052:	e7bc      	b.n	17fce <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18054:	4770      	bx	lr

00018056 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18056:	b508      	push	{r3, lr}
	if (bm) {
   18058:	b910      	cbnz	r0, 18060 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   1805a:	f000 fe5f 	bl	18d1c <rpa_refresh_stop>
   1805e:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18060:	f000 fe48 	bl	18cf4 <rpa_refresh_start>
   18064:	bd08      	pop	{r3, pc}
	...

00018068 <radio_adv_enable>:
{
   18068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1806c:	b08f      	sub	sp, #60	; 0x3c
   1806e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18072:	2202      	movs	r2, #2
   18074:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18076:	4aca      	ldr	r2, [pc, #808]	; (183a0 <radio_adv_enable+0x338>)
   18078:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1807c:	f012 0f01 	tst.w	r2, #1
   18080:	d003      	beq.n	1808a <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18082:	200c      	movs	r0, #12
}
   18084:	b00f      	add	sp, #60	; 0x3c
   18086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1808a:	461d      	mov	r5, r3
   1808c:	460c      	mov	r4, r1
   1808e:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18090:	4bc3      	ldr	r3, [pc, #780]	; (183a0 <radio_adv_enable+0x338>)
   18092:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18096:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1809a:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   1809e:	3220      	adds	r2, #32
   180a0:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   180a4:	f898 3007 	ldrb.w	r3, [r8, #7]
   180a8:	f003 030f 	and.w	r3, r3, #15
   180ac:	2b01      	cmp	r3, #1
   180ae:	d97f      	bls.n	181b0 <radio_adv_enable+0x148>
		conn = NULL;
   180b0:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   180b2:	4abb      	ldr	r2, [pc, #748]	; (183a0 <radio_adv_enable+0x338>)
   180b4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   180b8:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   180bc:	a80e      	add	r0, sp, #56	; 0x38
   180be:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   180c2:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   180c6:	f365 1387 	bfi	r3, r5, #6, #2
   180ca:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   180ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   180d2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   180d6:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   180da:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   180dc:	2327      	movs	r3, #39	; 0x27
   180de:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   180e0:	2300      	movs	r3, #0
   180e2:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   180e4:	2101      	movs	r1, #1
   180e6:	f7f6 fbe4 	bl	e8b2 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   180ea:	f898 5007 	ldrb.w	r5, [r8, #7]
   180ee:	f005 050f 	and.w	r5, r5, #15
   180f2:	2d01      	cmp	r5, #1
   180f4:	f000 8108 	beq.w	18308 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   180f8:	2d02      	cmp	r5, #2
   180fa:	f000 8111 	beq.w	18320 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   180fe:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18100:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18104:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18108:	0080      	lsls	r0, r0, #2
   1810a:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   1810c:	a3a2      	add	r3, pc, #648	; (adr r3, 18398 <radio_adv_enable+0x330>)
   1810e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18112:	49a4      	ldr	r1, [pc, #656]	; (183a4 <radio_adv_enable+0x33c>)
   18114:	fba0 0101 	umull	r0, r1, r0, r1
   18118:	f7e8 fff0 	bl	10fc <__aeabi_uldivmod>
   1811c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18120:	4a9f      	ldr	r2, [pc, #636]	; (183a0 <radio_adv_enable+0x338>)
   18122:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18124:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18126:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18128:	4299      	cmp	r1, r3
   1812a:	bf38      	it	cc
   1812c:	4619      	movcc	r1, r3
   1812e:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18130:	2d01      	cmp	r5, #1
   18132:	f000 80ff 	beq.w	18334 <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18136:	f7f8 f96f 	bl	10418 <ticker_ticks_now_get>
   1813a:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1813c:	b2a4      	uxth	r4, r4
   1813e:	489a      	ldr	r0, [pc, #616]	; (183a8 <radio_adv_enable+0x340>)
   18140:	fba4 0100 	umull	r0, r1, r4, r0
   18144:	2391      	movs	r3, #145	; 0x91
   18146:	fb03 1104 	mla	r1, r3, r4, r1
   1814a:	a393      	add	r3, pc, #588	; (adr r3, 18398 <radio_adv_enable+0x330>)
   1814c:	e9d3 2300 	ldrd	r2, r3, [r3]
   18150:	f7e8 ffd4 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18154:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18158:	4b91      	ldr	r3, [pc, #580]	; (183a0 <radio_adv_enable+0x338>)
   1815a:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1815c:	4443      	add	r3, r8
   1815e:	b29b      	uxth	r3, r3
		ret =
   18160:	a90d      	add	r1, sp, #52	; 0x34
   18162:	9108      	str	r1, [sp, #32]
   18164:	4991      	ldr	r1, [pc, #580]	; (183ac <radio_adv_enable+0x344>)
   18166:	9107      	str	r1, [sp, #28]
   18168:	2000      	movs	r0, #0
   1816a:	9006      	str	r0, [sp, #24]
   1816c:	4990      	ldr	r1, [pc, #576]	; (183b0 <radio_adv_enable+0x348>)
   1816e:	9105      	str	r1, [sp, #20]
   18170:	9304      	str	r3, [sp, #16]
   18172:	9003      	str	r0, [sp, #12]
   18174:	9002      	str	r0, [sp, #8]
   18176:	9201      	str	r2, [sp, #4]
   18178:	9000      	str	r0, [sp, #0]
   1817a:	463b      	mov	r3, r7
   1817c:	2205      	movs	r2, #5
   1817e:	2103      	movs	r1, #3
   18180:	f7f7 ffe2 	bl	10148 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18184:	2802      	cmp	r0, #2
   18186:	f000 813b 	beq.w	18400 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1818a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1818c:	2b00      	cmp	r3, #0
   1818e:	f040 80f2 	bne.w	18376 <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18192:	4b83      	ldr	r3, [pc, #524]	; (183a0 <radio_adv_enable+0x338>)
   18194:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18198:	f042 0201 	orr.w	r2, r2, #1
   1819c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   181a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   181a4:	f013 0f01 	tst.w	r3, #1
   181a8:	f000 812e 	beq.w	18408 <radio_adv_enable+0x3a0>
		return 0;
   181ac:	2000      	movs	r0, #0
   181ae:	e769      	b.n	18084 <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   181b0:	4b7b      	ldr	r3, [pc, #492]	; (183a0 <radio_adv_enable+0x338>)
   181b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   181b6:	b10b      	cbz	r3, 181bc <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   181b8:	200c      	movs	r0, #12
   181ba:	e763      	b.n	18084 <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   181bc:	487d      	ldr	r0, [pc, #500]	; (183b4 <radio_adv_enable+0x34c>)
   181be:	f7f6 faf4 	bl	e7aa <mem_acquire>
		if (!link) {
   181c2:	4681      	mov	r9, r0
   181c4:	2800      	cmp	r0, #0
   181c6:	f000 8124 	beq.w	18412 <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   181ca:	487b      	ldr	r0, [pc, #492]	; (183b8 <radio_adv_enable+0x350>)
   181cc:	f7f6 faed 	bl	e7aa <mem_acquire>
		if (!conn) {
   181d0:	4606      	mov	r6, r0
   181d2:	2800      	cmp	r0, #0
   181d4:	f000 8092 	beq.w	182fc <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   181d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   181dc:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   181de:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   181e2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   181e6:	7f43      	ldrb	r3, [r0, #29]
   181e8:	f36f 1386 	bfc	r3, #6, #1
   181ec:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   181ee:	2300      	movs	r3, #0
   181f0:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   181f2:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   181f4:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   181f6:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   181f8:	4969      	ldr	r1, [pc, #420]	; (183a0 <radio_adv_enable+0x338>)
   181fa:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   181fe:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18200:	221b      	movs	r2, #27
   18202:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18204:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18206:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   1820a:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   1820c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18210:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18212:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18214:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18218:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   1821c:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18220:	2001      	movs	r0, #1
   18222:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18226:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1822a:	f363 12c7 	bfi	r2, r3, #7, #1
   1822e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18232:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18236:	f360 0202 	bfi	r2, r0, #0, #3
   1823a:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1823e:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18242:	b2d2      	uxtb	r2, r2
   18244:	f36e 02c5 	bfi	r2, lr, #3, #3
   18248:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1824c:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18250:	f360 0202 	bfi	r2, r0, #0, #3
   18254:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18258:	7f72      	ldrb	r2, [r6, #29]
   1825a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1825e:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18260:	2206      	movs	r2, #6
   18262:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18264:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18268:	f002 02de 	and.w	r2, r2, #222	; 0xde
   1826c:	f363 0241 	bfi	r2, r3, #1, #1
   18270:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18274:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18276:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18278:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   1827a:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   1827e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18282:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18286:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   1828a:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   1828e:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18292:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18296:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1829a:	f363 0241 	bfi	r2, r3, #1, #1
   1829e:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   182a2:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   182a6:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   182aa:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   182ae:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   182b2:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   182b6:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   182ba:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   182be:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   182c2:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   182c6:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   182ca:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   182ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
   182d2:	f363 12c7 	bfi	r2, r3, #7, #1
   182d6:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   182da:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   182de:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   182e2:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   182e6:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   182ea:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   182ee:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   182f2:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   182f6:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   182fa:	e6da      	b.n	180b2 <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   182fc:	492d      	ldr	r1, [pc, #180]	; (183b4 <radio_adv_enable+0x34c>)
   182fe:	4648      	mov	r0, r9
   18300:	f7f6 fa6f 	bl	e7e2 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18304:	2007      	movs	r0, #7
   18306:	e6bd      	b.n	18084 <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18308:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1830c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18310:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18314:	0080      	lsls	r0, r0, #2
   18316:	b280      	uxth	r0, r0
   18318:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1831c:	b280      	uxth	r0, r0
   1831e:	e6f5      	b.n	1810c <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18320:	b280      	uxth	r0, r0
   18322:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18326:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1832a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1832e:	0080      	lsls	r0, r0, #2
   18330:	b280      	uxth	r0, r0
   18332:	e6eb      	b.n	1810c <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18334:	2c00      	cmp	r4, #0
   18336:	f47f aefe 	bne.w	18136 <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   1833a:	f7f8 f86d 	bl	10418 <ticker_ticks_now_get>
   1833e:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18340:	4b17      	ldr	r3, [pc, #92]	; (183a0 <radio_adv_enable+0x338>)
   18342:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18344:	eb08 0203 	add.w	r2, r8, r3
   18348:	b293      	uxth	r3, r2
   1834a:	a90d      	add	r1, sp, #52	; 0x34
   1834c:	9108      	str	r1, [sp, #32]
   1834e:	4917      	ldr	r1, [pc, #92]	; (183ac <radio_adv_enable+0x344>)
   18350:	9107      	str	r1, [sp, #28]
   18352:	2000      	movs	r0, #0
   18354:	9006      	str	r0, [sp, #24]
   18356:	4916      	ldr	r1, [pc, #88]	; (183b0 <radio_adv_enable+0x348>)
   18358:	9105      	str	r1, [sp, #20]
   1835a:	9304      	str	r3, [sp, #16]
   1835c:	9003      	str	r0, [sp, #12]
   1835e:	9002      	str	r0, [sp, #8]
   18360:	9201      	str	r2, [sp, #4]
   18362:	9000      	str	r0, [sp, #0]
   18364:	4623      	mov	r3, r4
   18366:	2205      	movs	r2, #5
   18368:	2103      	movs	r1, #3
   1836a:	f7f7 feed 	bl	10148 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1836e:	2802      	cmp	r0, #2
   18370:	d027      	beq.n	183c2 <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18374:	b34b      	cbz	r3, 183ca <radio_adv_enable+0x362>
	if (conn) {
   18376:	2e00      	cmp	r6, #0
   18378:	d04d      	beq.n	18416 <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   1837a:	4c09      	ldr	r4, [pc, #36]	; (183a0 <radio_adv_enable+0x338>)
   1837c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18380:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18384:	f7f6 fa2d 	bl	e7e2 <mem_release>
		mem_release(conn, &_radio.conn_free);
   18388:	f504 7184 	add.w	r1, r4, #264	; 0x108
   1838c:	4630      	mov	r0, r6
   1838e:	f7f6 fa28 	bl	e7e2 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18392:	200c      	movs	r0, #12
   18394:	e676      	b.n	18084 <radio_adv_enable+0x1c>
   18396:	bf00      	nop
   18398:	1afd498d 	.word	0x1afd498d
   1839c:	00000007 	.word	0x00000007
   183a0:	20000e8c 	.word	0x20000e8c
   183a4:	3b9aca00 	.word	0x3b9aca00
   183a8:	84e72a00 	.word	0x84e72a00
   183ac:	00010b2d 	.word	0x00010b2d
   183b0:	000144b5 	.word	0x000144b5
   183b4:	20000fd0 	.word	0x20000fd0
   183b8:	20000f94 	.word	0x20000f94
   183bc:	bf20      	wfe
  __ASM volatile ("sev");
   183be:	bf40      	sev
  __ASM volatile ("wfe");
   183c0:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   183c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   183c4:	2b02      	cmp	r3, #2
   183c6:	d0f9      	beq.n	183bc <radio_adv_enable+0x354>
   183c8:	e7d3      	b.n	18372 <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   183ca:	ab0e      	add	r3, sp, #56	; 0x38
   183cc:	2202      	movs	r2, #2
   183ce:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   183d2:	9308      	str	r3, [sp, #32]
   183d4:	4b11      	ldr	r3, [pc, #68]	; (1841c <radio_adv_enable+0x3b4>)
   183d6:	9307      	str	r3, [sp, #28]
   183d8:	2000      	movs	r0, #0
   183da:	9006      	str	r0, [sp, #24]
   183dc:	4b10      	ldr	r3, [pc, #64]	; (18420 <radio_adv_enable+0x3b8>)
   183de:	9305      	str	r3, [sp, #20]
   183e0:	9004      	str	r0, [sp, #16]
   183e2:	9003      	str	r0, [sp, #12]
   183e4:	9002      	str	r0, [sp, #8]
   183e6:	9001      	str	r0, [sp, #4]
   183e8:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   183ec:	9300      	str	r3, [sp, #0]
   183ee:	4623      	mov	r3, r4
   183f0:	2203      	movs	r2, #3
   183f2:	4611      	mov	r1, r2
   183f4:	f7f7 fea8 	bl	10148 <ticker_start>
	    !interval) {
   183f8:	e6c4      	b.n	18184 <radio_adv_enable+0x11c>
   183fa:	bf20      	wfe
  __ASM volatile ("sev");
   183fc:	bf40      	sev
  __ASM volatile ("wfe");
   183fe:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18402:	2b02      	cmp	r3, #2
   18404:	d0f9      	beq.n	183fa <radio_adv_enable+0x392>
   18406:	e6c0      	b.n	1818a <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18408:	2001      	movs	r0, #1
   1840a:	f7ff fe24 	bl	18056 <ll_adv_scan_state_cb>
		return 0;
   1840e:	2000      	movs	r0, #0
   18410:	e638      	b.n	18084 <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18412:	2007      	movs	r0, #7
   18414:	e636      	b.n	18084 <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18416:	200c      	movs	r0, #12
   18418:	e634      	b.n	18084 <radio_adv_enable+0x1c>
   1841a:	bf00      	nop
   1841c:	00010b2d 	.word	0x00010b2d
   18420:	000116a9 	.word	0x000116a9

00018424 <radio_adv_disable>:
{
   18424:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18426:	2103      	movs	r1, #3
   18428:	2005      	movs	r0, #5
   1842a:	f7f8 ffc1 	bl	113b0 <role_disable>
	if (!status) {
   1842e:	4604      	mov	r4, r0
   18430:	b9f0      	cbnz	r0, 18470 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18432:	4b13      	ldr	r3, [pc, #76]	; (18480 <radio_adv_disable+0x5c>)
   18434:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18438:	f36f 0200 	bfc	r2, #0, #1
   1843c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18440:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18444:	f013 0f01 	tst.w	r3, #1
   18448:	d016      	beq.n	18478 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   1844a:	4b0d      	ldr	r3, [pc, #52]	; (18480 <radio_adv_disable+0x5c>)
   1844c:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18450:	b175      	cbz	r5, 18470 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   18452:	461e      	mov	r6, r3
   18454:	2300      	movs	r3, #0
   18456:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1845a:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1845e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18462:	f7f6 f9be 	bl	e7e2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   18466:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1846a:	4628      	mov	r0, r5
   1846c:	f7f6 f9b9 	bl	e7e2 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18470:	b104      	cbz	r4, 18474 <radio_adv_disable+0x50>
   18472:	240c      	movs	r4, #12
}
   18474:	4620      	mov	r0, r4
   18476:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18478:	f7ff fded 	bl	18056 <ll_adv_scan_state_cb>
   1847c:	e7e5      	b.n	1844a <radio_adv_disable+0x26>
   1847e:	bf00      	nop
   18480:	20000e8c 	.word	0x20000e8c
   18484:	00000000 	.word	0x00000000

00018488 <radio_scan_enable>:
{
   18488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1848c:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1848e:	2402      	movs	r4, #2
   18490:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   18492:	4c77      	ldr	r4, [pc, #476]	; (18670 <radio_scan_enable+0x1e8>)
   18494:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   18498:	f014 0f01 	tst.w	r4, #1
   1849c:	d003      	beq.n	184a6 <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1849e:	200c      	movs	r0, #12
}
   184a0:	b00f      	add	sp, #60	; 0x3c
   184a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a6:	461d      	mov	r5, r3
   184a8:	4617      	mov	r7, r2
   184aa:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   184ac:	4c70      	ldr	r4, [pc, #448]	; (18670 <radio_scan_enable+0x1e8>)
   184ae:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   184b2:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   184b6:	f3c0 0042 	ubfx	r0, r0, #1, #3
   184ba:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   184be:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   184c2:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   184c6:	f361 0200 	bfi	r2, r1, #0, #1
   184ca:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   184ce:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   184d2:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   184d6:	f366 13c7 	bfi	r3, r6, #7, #1
   184da:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   184de:	2206      	movs	r2, #6
   184e0:	4639      	mov	r1, r7
   184e2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   184e6:	f7e7 feeb 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   184ea:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   184ee:	4e61      	ldr	r6, [pc, #388]	; (18674 <radio_scan_enable+0x1ec>)
   184f0:	f04f 0a91 	mov.w	sl, #145	; 0x91
   184f4:	fba2 0106 	umull	r0, r1, r2, r6
   184f8:	fb0a 1102 	mla	r1, sl, r2, r1
   184fc:	a35a      	add	r3, pc, #360	; (adr r3, 18668 <radio_scan_enable+0x1e0>)
   184fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   18502:	f7e8 fdfb 	bl	10fc <__aeabi_uldivmod>
   18506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   1850a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   1850e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18512:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   18516:	f362 1305 	bfi	r3, r2, #4, #2
   1851a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   1851e:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   18522:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   18526:	2327      	movs	r3, #39	; 0x27
   18528:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   1852c:	2300      	movs	r3, #0
   1852e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   18532:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   18536:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   1853a:	b2aa      	uxth	r2, r5
   1853c:	fba2 6706 	umull	r6, r7, r2, r6
   18540:	fb0a 7702 	mla	r7, sl, r2, r7
   18544:	a348      	add	r3, pc, #288	; (adr r3, 18668 <radio_scan_enable+0x1e0>)
   18546:	e9d3 2300 	ldrd	r2, r3, [r3]
   1854a:	4630      	mov	r0, r6
   1854c:	4639      	mov	r1, r7
   1854e:	f7e8 fdd5 	bl	10fc <__aeabi_uldivmod>
   18552:	4604      	mov	r4, r0
   18554:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   18558:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1855c:	4598      	cmp	r8, r3
   1855e:	d902      	bls.n	18566 <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   18560:	4a43      	ldr	r2, [pc, #268]	; (18670 <radio_scan_enable+0x1e8>)
   18562:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   18566:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1856a:	bf38      	it	cc
   1856c:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   18570:	f7f7 ff52 	bl	10418 <ticker_ticks_now_get>
   18574:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   18576:	4b3e      	ldr	r3, [pc, #248]	; (18670 <radio_scan_enable+0x1e8>)
   18578:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1857c:	2b00      	cmp	r3, #0
   1857e:	d045      	beq.n	1860c <radio_scan_enable+0x184>
		us_offset = 0;
   18580:	2300      	movs	r3, #0
   18582:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   18584:	f04f 0800 	mov.w	r8, #0
   18588:	a337      	add	r3, pc, #220	; (adr r3, 18668 <radio_scan_enable+0x1e0>)
   1858a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1858e:	493a      	ldr	r1, [pc, #232]	; (18678 <radio_scan_enable+0x1f0>)
   18590:	980c      	ldr	r0, [sp, #48]	; 0x30
   18592:	fba0 0101 	umull	r0, r1, r0, r1
   18596:	f7e8 fdb1 	bl	10fc <__aeabi_uldivmod>
   1859a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1859e:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   185a0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   185a4:	2500      	movs	r5, #0
   185a6:	4835      	ldr	r0, [pc, #212]	; (1867c <radio_scan_enable+0x1f4>)
   185a8:	2307      	movs	r3, #7
   185aa:	fb03 f304 	mul.w	r3, r3, r4
   185ae:	fb00 3305 	mla	r3, r0, r5, r3
   185b2:	fba4 0100 	umull	r0, r1, r4, r0
   185b6:	4419      	add	r1, r3
   185b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   185bc:	2300      	movs	r3, #0
   185be:	1a30      	subs	r0, r6, r0
   185c0:	eb67 0101 	sbc.w	r1, r7, r1
   185c4:	f7e8 fd9a 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   185c8:	4b29      	ldr	r3, [pc, #164]	; (18670 <radio_scan_enable+0x1e8>)
   185ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   185ce:	4499      	add	r9, r3
   185d0:	fa1f f389 	uxth.w	r3, r9
   185d4:	aa0d      	add	r2, sp, #52	; 0x34
   185d6:	9208      	str	r2, [sp, #32]
   185d8:	4a29      	ldr	r2, [pc, #164]	; (18680 <radio_scan_enable+0x1f8>)
   185da:	9207      	str	r2, [sp, #28]
   185dc:	f8cd 8018 	str.w	r8, [sp, #24]
   185e0:	4a28      	ldr	r2, [pc, #160]	; (18684 <radio_scan_enable+0x1fc>)
   185e2:	9205      	str	r2, [sp, #20]
   185e4:	9304      	str	r3, [sp, #16]
   185e6:	f8cd 800c 	str.w	r8, [sp, #12]
   185ea:	9002      	str	r0, [sp, #8]
   185ec:	f8cd a004 	str.w	sl, [sp, #4]
   185f0:	f8cd 8000 	str.w	r8, [sp]
   185f4:	465b      	mov	r3, fp
   185f6:	2206      	movs	r2, #6
   185f8:	2103      	movs	r1, #3
   185fa:	4640      	mov	r0, r8
   185fc:	f7f7 fda4 	bl	10148 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18600:	2802      	cmp	r0, #2
   18602:	d017      	beq.n	18634 <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   18604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18606:	b1cb      	cbz	r3, 1863c <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18608:	200c      	movs	r0, #12
   1860a:	e749      	b.n	184a0 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   1860c:	2300      	movs	r3, #0
   1860e:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   18610:	4b17      	ldr	r3, [pc, #92]	; (18670 <radio_scan_enable+0x1e8>)
   18612:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   18616:	ab0c      	add	r3, sp, #48	; 0x30
   18618:	aa0b      	add	r2, sp, #44	; 0x2c
   1861a:	4449      	add	r1, r9
   1861c:	2003      	movs	r0, #3
   1861e:	f7f9 ff63 	bl	124e8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   18622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18624:	2b00      	cmp	r3, #0
   18626:	d0ad      	beq.n	18584 <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   18628:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1862c:	e7aa      	b.n	18584 <radio_scan_enable+0xfc>
   1862e:	bf20      	wfe
  __ASM volatile ("sev");
   18630:	bf40      	sev
  __ASM volatile ("wfe");
   18632:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18636:	2b02      	cmp	r3, #2
   18638:	d0f9      	beq.n	1862e <radio_scan_enable+0x1a6>
   1863a:	e7e3      	b.n	18604 <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   1863c:	4b0c      	ldr	r3, [pc, #48]	; (18670 <radio_scan_enable+0x1e8>)
   1863e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18642:	f042 0201 	orr.w	r2, r2, #1
   18646:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   1864a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1864e:	f013 0f01 	tst.w	r3, #1
   18652:	d001      	beq.n	18658 <radio_scan_enable+0x1d0>
	return 0;
   18654:	2000      	movs	r0, #0
   18656:	e723      	b.n	184a0 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   18658:	2002      	movs	r0, #2
   1865a:	f7ff fcfc 	bl	18056 <ll_adv_scan_state_cb>
	return 0;
   1865e:	2000      	movs	r0, #0
   18660:	e71e      	b.n	184a0 <radio_scan_enable+0x18>
   18662:	bf00      	nop
   18664:	f3af 8000 	nop.w
   18668:	1afd498d 	.word	0x1afd498d
   1866c:	00000007 	.word	0x00000007
   18670:	20000e8c 	.word	0x20000e8c
   18674:	84e72a00 	.word	0x84e72a00
   18678:	3b9aca00 	.word	0x3b9aca00
   1867c:	1afd498d 	.word	0x1afd498d
   18680:	00010b2d 	.word	0x00010b2d
   18684:	00015a65 	.word	0x00015a65

00018688 <radio_scan_disable>:
{
   18688:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1868a:	2104      	movs	r1, #4
   1868c:	2006      	movs	r0, #6
   1868e:	f7f8 fe8f 	bl	113b0 <role_disable>
	if (!status) {
   18692:	4604      	mov	r4, r0
   18694:	b9f0      	cbnz	r0, 186d4 <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   18696:	4b13      	ldr	r3, [pc, #76]	; (186e4 <radio_scan_disable+0x5c>)
   18698:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1869c:	f36f 0200 	bfc	r2, #0, #1
   186a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   186a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   186a8:	f013 0f01 	tst.w	r3, #1
   186ac:	d016      	beq.n	186dc <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   186ae:	4b0d      	ldr	r3, [pc, #52]	; (186e4 <radio_scan_disable+0x5c>)
   186b0:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   186b4:	b175      	cbz	r5, 186d4 <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   186b6:	461e      	mov	r6, r3
   186b8:	2300      	movs	r3, #0
   186ba:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   186be:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   186c2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   186c6:	f7f6 f88c 	bl	e7e2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   186ca:	f506 7184 	add.w	r1, r6, #264	; 0x108
   186ce:	4628      	mov	r0, r5
   186d0:	f7f6 f887 	bl	e7e2 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   186d4:	b104      	cbz	r4, 186d8 <radio_scan_disable+0x50>
   186d6:	240c      	movs	r4, #12
}
   186d8:	4620      	mov	r0, r4
   186da:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   186dc:	f7ff fcbb 	bl	18056 <ll_adv_scan_state_cb>
   186e0:	e7e5      	b.n	186ae <radio_scan_disable+0x26>
   186e2:	bf00      	nop
   186e4:	20000e8c 	.word	0x20000e8c

000186e8 <ll_connect_disable>:
{
   186e8:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   186ea:	4b04      	ldr	r3, [pc, #16]	; (186fc <ll_connect_disable+0x14>)
   186ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   186f0:	b113      	cbz	r3, 186f8 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   186f2:	f7ff ffc9 	bl	18688 <radio_scan_disable>
	return status;
   186f6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   186f8:	200c      	movs	r0, #12
}
   186fa:	bd08      	pop	{r3, pc}
   186fc:	20000e8c 	.word	0x20000e8c

00018700 <radio_rx_dequeue>:
{
   18700:	b530      	push	{r4, r5, lr}
   18702:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   18704:	aa02      	add	r2, sp, #8
   18706:	2300      	movs	r3, #0
   18708:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1870c:	4947      	ldr	r1, [pc, #284]	; (1882c <radio_rx_dequeue+0x12c>)
   1870e:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   18712:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   18716:	f7f6 f8c0 	bl	e89a <memq_dequeue>
	LL_ASSERT(link);
   1871a:	b178      	cbz	r0, 1873c <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   1871c:	4944      	ldr	r1, [pc, #272]	; (18830 <radio_rx_dequeue+0x130>)
   1871e:	f7f6 f860 	bl	e7e2 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   18722:	9a01      	ldr	r2, [sp, #4]
   18724:	7913      	ldrb	r3, [r2, #4]
   18726:	3b01      	subs	r3, #1
   18728:	2b0b      	cmp	r3, #11
   1872a:	d824      	bhi.n	18776 <radio_rx_dequeue+0x76>
   1872c:	e8df f003 	tbb	[pc, r3]
   18730:	0c0c0c0c 	.word	0x0c0c0c0c
   18734:	0c180c0c 	.word	0x0c180c0c
   18738:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   1873c:	4040      	eors	r0, r0
   1873e:	f380 8811 	msr	BASEPRI, r0
   18742:	f04f 0004 	mov.w	r0, #4
   18746:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   18748:	4938      	ldr	r1, [pc, #224]	; (1882c <radio_rx_dequeue+0x12c>)
   1874a:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   1874e:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   18752:	3901      	subs	r1, #1
   18754:	428b      	cmp	r3, r1
   18756:	da08      	bge.n	1876a <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   18758:	3301      	adds	r3, #1
   1875a:	4934      	ldr	r1, [pc, #208]	; (1882c <radio_rx_dequeue+0x12c>)
   1875c:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   18760:	7913      	ldrb	r3, [r2, #4]
   18762:	2b06      	cmp	r3, #6
   18764:	d00d      	beq.n	18782 <radio_rx_dequeue+0x82>
}
   18766:	b003      	add	sp, #12
   18768:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   1876a:	4040      	eors	r0, r0
   1876c:	f380 8811 	msr	BASEPRI, r0
   18770:	f04f 0004 	mov.w	r0, #4
   18774:	df02      	svc	2
		LL_ASSERT(0);
   18776:	4040      	eors	r0, r0
   18778:	f380 8811 	msr	BASEPRI, r0
   1877c:	f04f 0004 	mov.w	r0, #4
   18780:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   18782:	7ad3      	ldrb	r3, [r2, #11]
   18784:	2b3c      	cmp	r3, #60	; 0x3c
   18786:	d002      	beq.n	1878e <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   18788:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1878a:	2a00      	cmp	r2, #0
   1878c:	d039      	beq.n	18802 <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   1878e:	2b3c      	cmp	r3, #60	; 0x3c
   18790:	d02a      	beq.n	187e8 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   18792:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   18794:	4b25      	ldr	r3, [pc, #148]	; (1882c <radio_rx_dequeue+0x12c>)
   18796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1879a:	f013 0f01 	tst.w	r3, #1
   1879e:	d02a      	beq.n	187f6 <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   187a0:	4b22      	ldr	r3, [pc, #136]	; (1882c <radio_rx_dequeue+0x12c>)
   187a2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   187a6:	f36f 0200 	bfc	r2, #0, #1
   187aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   187ae:	b15c      	cbz	r4, 187c8 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   187b0:	4d1e      	ldr	r5, [pc, #120]	; (1882c <radio_rx_dequeue+0x12c>)
   187b2:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   187b6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   187ba:	f7f6 f812 	bl	e7e2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   187be:	f505 7184 	add.w	r1, r5, #264	; 0x108
   187c2:	4620      	mov	r0, r4
   187c4:	f7f6 f80d 	bl	e7e2 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   187c8:	4b18      	ldr	r3, [pc, #96]	; (1882c <radio_rx_dequeue+0x12c>)
   187ca:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   187ce:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   187d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   187d6:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   187da:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   187de:	d1c2      	bne.n	18766 <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   187e0:	2000      	movs	r0, #0
   187e2:	f7ff fc38 	bl	18056 <ll_adv_scan_state_cb>
}
   187e6:	e7be      	b.n	18766 <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   187e8:	4b10      	ldr	r3, [pc, #64]	; (1882c <radio_rx_dequeue+0x12c>)
   187ea:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   187ee:	2200      	movs	r2, #0
   187f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   187f4:	e7ce      	b.n	18794 <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   187f6:	4040      	eors	r0, r0
   187f8:	f380 8811 	msr	BASEPRI, r0
   187fc:	f04f 0004 	mov.w	r0, #4
   18800:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   18802:	4b0a      	ldr	r3, [pc, #40]	; (1882c <radio_rx_dequeue+0x12c>)
   18804:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18808:	f013 0f01 	tst.w	r3, #1
   1880c:	d008      	beq.n	18820 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   1880e:	4b07      	ldr	r3, [pc, #28]	; (1882c <radio_rx_dequeue+0x12c>)
   18810:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18814:	f36f 0200 	bfc	r2, #0, #1
   18818:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   1881c:	2400      	movs	r4, #0
   1881e:	e7c6      	b.n	187ae <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   18820:	4040      	eors	r0, r0
   18822:	f380 8811 	msr	BASEPRI, r0
   18826:	f04f 0004 	mov.w	r0, #4
   1882a:	df02      	svc	2
   1882c:	20000e8c 	.word	0x20000e8c
   18830:	20000fd0 	.word	0x20000fd0

00018834 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18834:	4668      	mov	r0, sp
   18836:	f020 0107 	bic.w	r1, r0, #7
   1883a:	468d      	mov	sp, r1
   1883c:	b501      	push	{r0, lr}
{
	isr_radio();
   1883e:	f7f6 f8e3 	bl	ea08 <isr_radio>

	ISR_DIRECT_PM();
   18842:	f00e fb75 	bl	26f30 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   18846:	f00e f90f 	bl	26a68 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1884a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1884e:	4685      	mov	sp, r0
   18850:	4770      	bx	lr
	...

00018854 <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   18854:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   18856:	4b0c      	ldr	r3, [pc, #48]	; (18888 <rtc0_nrf5_isr+0x34>)
   18858:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1885c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   18860:	b922      	cbnz	r2, 1886c <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   18862:	b94c      	cbnz	r4, 18878 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   18864:	2000      	movs	r0, #0
   18866:	f7f5 fec1 	bl	e5ec <mayfly_run>
   1886a:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1886c:	2000      	movs	r0, #0
   1886e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   18872:	f7f7 fc5b 	bl	1012c <ticker_trigger>
   18876:	e7f4      	b.n	18862 <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   18878:	2200      	movs	r2, #0
   1887a:	4b03      	ldr	r3, [pc, #12]	; (18888 <rtc0_nrf5_isr+0x34>)
   1887c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   18880:	2001      	movs	r0, #1
   18882:	f7f7 fc53 	bl	1012c <ticker_trigger>
   18886:	e7ed      	b.n	18864 <rtc0_nrf5_isr+0x10>
   18888:	4000b000 	.word	0x4000b000

0001888c <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   1888c:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   1888e:	2001      	movs	r0, #1
   18890:	f7f5 feac 	bl	e5ec <mayfly_run>
   18894:	bd08      	pop	{r3, pc}

00018896 <rng_nrf5_isr>:
{
   18896:	b508      	push	{r3, lr}
	isr_rand(arg);
   18898:	f7f7 f9e2 	bl	fc60 <isr_rand>
   1889c:	bd08      	pop	{r3, pc}

0001889e <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1889e:	2901      	cmp	r1, #1
   188a0:	d105      	bne.n	188ae <mayfly_enable_cb+0x10>
{
   188a2:	b508      	push	{r3, lr}
	if (enable) {
   188a4:	b94a      	cbnz	r2, 188ba <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   188a6:	2018      	movs	r0, #24
   188a8:	f00e fb0c 	bl	26ec4 <_arch_irq_disable>
   188ac:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   188ae:	4040      	eors	r0, r0
   188b0:	f380 8811 	msr	BASEPRI, r0
   188b4:	f04f 0004 	mov.w	r0, #4
   188b8:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   188ba:	2018      	movs	r0, #24
   188bc:	f00e faf4 	bl	26ea8 <_arch_irq_enable>
   188c0:	bd08      	pop	{r3, pc}

000188c2 <mayfly_is_enabled>:
{
   188c2:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   188c4:	b129      	cbz	r1, 188d2 <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   188c6:	2901      	cmp	r1, #1
   188c8:	d107      	bne.n	188da <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   188ca:	2018      	movs	r0, #24
   188cc:	f00e fb08 	bl	26ee0 <_arch_irq_is_enabled>
   188d0:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   188d2:	200b      	movs	r0, #11
   188d4:	f00e fb04 	bl	26ee0 <_arch_irq_is_enabled>
   188d8:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   188da:	4040      	eors	r0, r0
   188dc:	f380 8811 	msr	BASEPRI, r0
   188e0:	f04f 0004 	mov.w	r0, #4
   188e4:	df02      	svc	2

000188e6 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188e6:	4288      	cmp	r0, r1
   188e8:	d009      	beq.n	188fe <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   188ea:	b908      	cbnz	r0, 188f0 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   188ec:	2901      	cmp	r1, #1
   188ee:	d008      	beq.n	18902 <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188f0:	2801      	cmp	r0, #1
   188f2:	d001      	beq.n	188f8 <mayfly_prio_is_equal+0x12>
   188f4:	2000      	movs	r0, #0
   188f6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   188f8:	b129      	cbz	r1, 18906 <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188fa:	2000      	movs	r0, #0
   188fc:	4770      	bx	lr
   188fe:	2001      	movs	r0, #1
   18900:	4770      	bx	lr
   18902:	2001      	movs	r0, #1
   18904:	4770      	bx	lr
   18906:	2001      	movs	r0, #1
}
   18908:	4770      	bx	lr
	...

0001890c <mayfly_pend>:
	switch (callee_id) {
   1890c:	b139      	cbz	r1, 1891e <mayfly_pend+0x12>
   1890e:	2901      	cmp	r1, #1
   18910:	d00b      	beq.n	1892a <mayfly_pend+0x1e>
		LL_ASSERT(0);
   18912:	4040      	eors	r0, r0
   18914:	f380 8811 	msr	BASEPRI, r0
   18918:	f04f 0004 	mov.w	r0, #4
   1891c:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1891e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18922:	4b05      	ldr	r3, [pc, #20]	; (18938 <mayfly_pend+0x2c>)
   18924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18928:	4770      	bx	lr
   1892a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1892e:	4b02      	ldr	r3, [pc, #8]	; (18938 <mayfly_pend+0x2c>)
   18930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18934:	4770      	bx	lr
   18936:	bf00      	nop
   18938:	e000e100 	.word	0xe000e100

0001893c <radio_active_callback>:
{
   1893c:	4770      	bx	lr
	...

00018940 <radio_event_callback>:
{
   18940:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   18942:	4b02      	ldr	r3, [pc, #8]	; (1894c <radio_event_callback+0xc>)
   18944:	6818      	ldr	r0, [r3, #0]
   18946:	f00f ff44 	bl	287d2 <_impl_k_sem_give>
   1894a:	bd08      	pop	{r3, pc}
   1894c:	200017b0 	.word	0x200017b0

00018950 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   18950:	b510      	push	{r4, lr}
   18952:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   18954:	4b37      	ldr	r3, [pc, #220]	; (18a34 <ll_init+0xe4>)
   18956:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   18958:	2204      	movs	r2, #4
   1895a:	2109      	movs	r1, #9
   1895c:	4836      	ldr	r0, [pc, #216]	; (18a38 <ll_init+0xe8>)
   1895e:	f7f7 f957 	bl	fc10 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   18962:	220c      	movs	r2, #12
   18964:	2111      	movs	r1, #17
   18966:	4835      	ldr	r0, [pc, #212]	; (18a3c <ll_init+0xec>)
   18968:	f7f7 f95c 	bl	fc24 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1896c:	4834      	ldr	r0, [pc, #208]	; (18a40 <ll_init+0xf0>)
   1896e:	f00e fc69 	bl	27244 <device_get_binding>
	if (!clk_k32) {
   18972:	2800      	cmp	r0, #0
   18974:	d054      	beq.n	18a20 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   18976:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   18978:	6812      	ldr	r2, [r2, #0]
   1897a:	2101      	movs	r1, #1
   1897c:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   1897e:	f7f5 ffad 	bl	e8dc <cntr_init>

	mayfly_init();
   18982:	f7f5 fd67 	bl	e454 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   18986:	4b2f      	ldr	r3, [pc, #188]	; (18a44 <ll_init+0xf4>)
   18988:	2108      	movs	r1, #8
   1898a:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1898c:	2203      	movs	r2, #3
   1898e:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   18990:	2000      	movs	r0, #0
   18992:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   18994:	2202      	movs	r2, #2
   18996:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   18998:	4a2b      	ldr	r2, [pc, #172]	; (18a48 <ll_init+0xf8>)
   1899a:	9202      	str	r2, [sp, #8]
   1899c:	220d      	movs	r2, #13
   1899e:	9201      	str	r2, [sp, #4]
   189a0:	9300      	str	r3, [sp, #0]
   189a2:	2304      	movs	r3, #4
   189a4:	4a29      	ldr	r2, [pc, #164]	; (18a4c <ll_init+0xfc>)
   189a6:	f7f7 fb67 	bl	10078 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   189aa:	4829      	ldr	r0, [pc, #164]	; (18a50 <ll_init+0x100>)
   189ac:	f00e fc4a 	bl	27244 <device_get_binding>
	if (!clk_m16) {
   189b0:	2800      	cmp	r0, #0
   189b2:	d038      	beq.n	18a26 <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   189b4:	f44f 7357 	mov.w	r3, #860	; 0x35c
   189b8:	9304      	str	r3, [sp, #16]
   189ba:	4b26      	ldr	r3, [pc, #152]	; (18a54 <ll_init+0x104>)
   189bc:	9303      	str	r3, [sp, #12]
   189be:	231b      	movs	r3, #27
   189c0:	9302      	str	r3, [sp, #8]
   189c2:	9301      	str	r3, [sp, #4]
   189c4:	2302      	movs	r3, #2
   189c6:	9300      	str	r3, [sp, #0]
   189c8:	2301      	movs	r3, #1
   189ca:	461a      	mov	r2, r3
   189cc:	2107      	movs	r1, #7
   189ce:	f7fe fccb 	bl	17368 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   189d2:	bb58      	cbnz	r0, 18a2c <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   189d4:	2001      	movs	r0, #1
   189d6:	f000 ffff 	bl	199d8 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   189da:	2200      	movs	r2, #0
   189dc:	4611      	mov	r1, r2
   189de:	2001      	movs	r0, #1
   189e0:	f00e fa8c 	bl	26efc <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   189e4:	2200      	movs	r2, #0
   189e6:	4611      	mov	r1, r2
   189e8:	200b      	movs	r0, #11
   189ea:	f00e fa87 	bl	26efc <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   189ee:	2200      	movs	r2, #0
   189f0:	4611      	mov	r1, r2
   189f2:	2018      	movs	r0, #24
   189f4:	f00e fa82 	bl	26efc <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   189f8:	2200      	movs	r2, #0
   189fa:	2101      	movs	r1, #1
   189fc:	200d      	movs	r0, #13
   189fe:	f00e fa7d 	bl	26efc <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   18a02:	2001      	movs	r0, #1
   18a04:	f00e fa50 	bl	26ea8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   18a08:	200b      	movs	r0, #11
   18a0a:	f00e fa4d 	bl	26ea8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   18a0e:	2018      	movs	r0, #24
   18a10:	f00e fa4a 	bl	26ea8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   18a14:	200d      	movs	r0, #13
   18a16:	f00e fa47 	bl	26ea8 <_arch_irq_enable>

	return 0;
   18a1a:	2000      	movs	r0, #0
}
   18a1c:	b006      	add	sp, #24
   18a1e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18a20:	f06f 0012 	mvn.w	r0, #18
   18a24:	e7fa      	b.n	18a1c <ll_init+0xcc>
		return -ENODEV;
   18a26:	f06f 0012 	mvn.w	r0, #18
   18a2a:	e7f7      	b.n	18a1c <ll_init+0xcc>
		return -ENOMEM;
   18a2c:	f06f 000b 	mvn.w	r0, #11
   18a30:	e7f4      	b.n	18a1c <ll_init+0xcc>
   18a32:	bf00      	nop
   18a34:	200017b0 	.word	0x200017b0
   18a38:	20001790 	.word	0x20001790
   18a3c:	2000179c 	.word	0x2000179c
   18a40:	0002f160 	.word	0x0002f160
   18a44:	20001770 	.word	0x20001770
   18a48:	20001534 	.word	0x20001534
   18a4c:	20001414 	.word	0x20001414
   18a50:	0002f16c 	.word	0x0002f16c
   18a54:	20001014 	.word	0x20001014

00018a58 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   18a58:	2801      	cmp	r0, #1
   18a5a:	d814      	bhi.n	18a86 <ll_addr_get+0x2e>
{
   18a5c:	b538      	push	{r3, r4, r5, lr}
   18a5e:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   18a60:	b140      	cbz	r0, 18a74 <ll_addr_get+0x1c>
		if (bdaddr) {
   18a62:	b191      	cbz	r1, 18a8a <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   18a64:	4d0b      	ldr	r5, [pc, #44]	; (18a94 <ll_addr_get+0x3c>)
   18a66:	2206      	movs	r2, #6
   18a68:	4629      	mov	r1, r5
   18a6a:	4620      	mov	r0, r4
   18a6c:	f7e7 fc28 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   18a70:	4628      	mov	r0, r5
   18a72:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   18a74:	b159      	cbz	r1, 18a8e <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   18a76:	4d08      	ldr	r5, [pc, #32]	; (18a98 <ll_addr_get+0x40>)
   18a78:	2206      	movs	r2, #6
   18a7a:	4629      	mov	r1, r5
   18a7c:	4620      	mov	r0, r4
   18a7e:	f7e7 fc1f 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   18a82:	4628      	mov	r0, r5
   18a84:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   18a86:	2000      	movs	r0, #0
   18a88:	4770      	bx	lr
		return _ll_context.rnd_addr;
   18a8a:	4802      	ldr	r0, [pc, #8]	; (18a94 <ll_addr_get+0x3c>)
   18a8c:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   18a8e:	4802      	ldr	r0, [pc, #8]	; (18a98 <ll_addr_get+0x40>)
}
   18a90:	bd38      	pop	{r3, r4, r5, pc}
   18a92:	bf00      	nop
   18a94:	2000140e 	.word	0x2000140e
   18a98:	20001408 	.word	0x20001408

00018a9c <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   18a9c:	b508      	push	{r3, lr}
	if (addr_type) {
   18a9e:	b920      	cbnz	r0, 18aaa <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   18aa0:	2206      	movs	r2, #6
   18aa2:	4804      	ldr	r0, [pc, #16]	; (18ab4 <ll_addr_set+0x18>)
   18aa4:	f7e7 fc0c 	bl	2c0 <memcpy>
   18aa8:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   18aaa:	2206      	movs	r2, #6
   18aac:	4802      	ldr	r0, [pc, #8]	; (18ab8 <ll_addr_set+0x1c>)
   18aae:	f7e7 fc07 	bl	2c0 <memcpy>
   18ab2:	bd08      	pop	{r3, pc}
   18ab4:	20001408 	.word	0x20001408
   18ab8:	2000140e 	.word	0x2000140e

00018abc <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   18abc:	2300      	movs	r3, #0
   18abe:	e007      	b.n	18ad0 <wl_clear+0x14>
		wl[i].taken = 0;
   18ac0:	4a05      	ldr	r2, [pc, #20]	; (18ad8 <wl_clear+0x1c>)
   18ac2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18ac6:	f36f 0100 	bfc	r1, #0, #1
   18aca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18ace:	3301      	adds	r3, #1
   18ad0:	2b07      	cmp	r3, #7
   18ad2:	ddf5      	ble.n	18ac0 <wl_clear+0x4>
}
   18ad4:	4770      	bx	lr
   18ad6:	bf00      	nop
   18ad8:	200019e8 	.word	0x200019e8

00018adc <filter_clear>:
	filter->enable_bitmask = 0;
   18adc:	2300      	movs	r3, #0
   18ade:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   18ae0:	7043      	strb	r3, [r0, #1]
   18ae2:	4770      	bx	lr

00018ae4 <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ae4:	2300      	movs	r3, #0
   18ae6:	e009      	b.n	18afc <rl_clear+0x18>
		rl[i].taken = 0;
   18ae8:	4907      	ldr	r1, [pc, #28]	; (18b08 <rl_clear+0x24>)
   18aea:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18aee:	00c2      	lsls	r2, r0, #3
   18af0:	5c88      	ldrb	r0, [r1, r2]
   18af2:	f36f 0000 	bfc	r0, #0, #1
   18af6:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18af8:	3301      	adds	r3, #1
   18afa:	b2db      	uxtb	r3, r3
   18afc:	2b07      	cmp	r3, #7
   18afe:	d9f3      	bls.n	18ae8 <rl_clear+0x4>
	peer_irk_count = 0;
   18b00:	2200      	movs	r2, #0
   18b02:	4b02      	ldr	r3, [pc, #8]	; (18b0c <rl_clear+0x28>)
   18b04:	701a      	strb	r2, [r3, #0]
   18b06:	4770      	bx	lr
   18b08:	20001870 	.word	0x20001870
   18b0c:	200017e4 	.word	0x200017e4

00018b10 <wl_find>:
{
   18b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b12:	4606      	mov	r6, r0
   18b14:	460f      	mov	r7, r1
	if (free) {
   18b16:	4615      	mov	r5, r2
   18b18:	b10a      	cbz	r2, 18b1e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18b1a:	23ff      	movs	r3, #255	; 0xff
   18b1c:	7013      	strb	r3, [r2, #0]
{
   18b1e:	2400      	movs	r4, #0
   18b20:	e00c      	b.n	18b3c <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18b22:	4816      	ldr	r0, [pc, #88]	; (18b7c <wl_find+0x6c>)
   18b24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   18b28:	2206      	movs	r2, #6
   18b2a:	4639      	mov	r1, r7
   18b2c:	3002      	adds	r0, #2
   18b2e:	f011 ff31 	bl	2a994 <memcmp>
   18b32:	b9a0      	cbnz	r0, 18b5e <wl_find+0x4e>
			return i;
   18b34:	b2e0      	uxtb	r0, r4
   18b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   18b38:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   18b3a:	3401      	adds	r4, #1
   18b3c:	2c07      	cmp	r4, #7
   18b3e:	dc1a      	bgt.n	18b76 <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18b40:	4b0e      	ldr	r3, [pc, #56]	; (18b7c <wl_find+0x6c>)
   18b42:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b46:	f013 0f01 	tst.w	r3, #1
   18b4a:	d008      	beq.n	18b5e <wl_find+0x4e>
   18b4c:	4b0b      	ldr	r3, [pc, #44]	; (18b7c <wl_find+0x6c>)
   18b4e:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b52:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18b56:	f006 0201 	and.w	r2, r6, #1
   18b5a:	4293      	cmp	r3, r2
   18b5c:	d0e1      	beq.n	18b22 <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18b5e:	2d00      	cmp	r5, #0
   18b60:	d0eb      	beq.n	18b3a <wl_find+0x2a>
   18b62:	4b06      	ldr	r3, [pc, #24]	; (18b7c <wl_find+0x6c>)
   18b64:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b68:	f013 0f01 	tst.w	r3, #1
   18b6c:	d1e5      	bne.n	18b3a <wl_find+0x2a>
   18b6e:	782b      	ldrb	r3, [r5, #0]
   18b70:	2bff      	cmp	r3, #255	; 0xff
   18b72:	d1e2      	bne.n	18b3a <wl_find+0x2a>
   18b74:	e7e0      	b.n	18b38 <wl_find+0x28>
	return FILTER_IDX_NONE;
   18b76:	20ff      	movs	r0, #255	; 0xff
}
   18b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b7a:	bf00      	nop
   18b7c:	200019e8 	.word	0x200019e8

00018b80 <wl_remove>:
{
   18b80:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18b82:	4601      	mov	r1, r0
   18b84:	f811 0b01 	ldrb.w	r0, [r1], #1
   18b88:	2200      	movs	r2, #0
   18b8a:	f7ff ffc1 	bl	18b10 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18b8e:	2807      	cmp	r0, #7
   18b90:	d901      	bls.n	18b96 <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18b92:	2002      	movs	r0, #2
}
   18b94:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   18b96:	4b0b      	ldr	r3, [pc, #44]	; (18bc4 <wl_remove+0x44>)
   18b98:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18b9c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18b9e:	2b07      	cmp	r3, #7
   18ba0:	d807      	bhi.n	18bb2 <wl_remove+0x32>
			rl[j].wl = 0;
   18ba2:	4909      	ldr	r1, [pc, #36]	; (18bc8 <wl_remove+0x48>)
   18ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18ba8:	00da      	lsls	r2, r3, #3
   18baa:	5c8b      	ldrb	r3, [r1, r2]
   18bac:	f36f 1345 	bfc	r3, #5, #1
   18bb0:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   18bb2:	4b04      	ldr	r3, [pc, #16]	; (18bc4 <wl_remove+0x44>)
   18bb4:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18bb8:	f36f 0200 	bfc	r2, #0, #1
   18bbc:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   18bc0:	2000      	movs	r0, #0
   18bc2:	bd08      	pop	{r3, pc}
   18bc4:	200019e8 	.word	0x200019e8
   18bc8:	20001870 	.word	0x20001870

00018bcc <filter_insert>:
{
   18bcc:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   18bce:	2401      	movs	r4, #1
   18bd0:	fa04 f501 	lsl.w	r5, r4, r1
   18bd4:	7804      	ldrb	r4, [r0, #0]
   18bd6:	432c      	orrs	r4, r5
   18bd8:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18bda:	f002 0201 	and.w	r2, r2, #1
   18bde:	fa02 f401 	lsl.w	r4, r2, r1
   18be2:	7842      	ldrb	r2, [r0, #1]
   18be4:	4322      	orrs	r2, r4
   18be6:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18be8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   18bec:	004a      	lsls	r2, r1, #1
   18bee:	4410      	add	r0, r2
   18bf0:	2206      	movs	r2, #6
   18bf2:	4619      	mov	r1, r3
   18bf4:	3002      	adds	r0, #2
   18bf6:	f7e7 fb63 	bl	2c0 <memcpy>
   18bfa:	bd38      	pop	{r3, r4, r5, pc}

00018bfc <filter_wl_update>:
{
   18bfc:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   18bfe:	481b      	ldr	r0, [pc, #108]	; (18c6c <filter_wl_update+0x70>)
   18c00:	f7ff ff6c 	bl	18adc <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   18c04:	2400      	movs	r4, #0
   18c06:	e00c      	b.n	18c22 <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18c08:	4b19      	ldr	r3, [pc, #100]	; (18c70 <filter_wl_update+0x74>)
   18c0a:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   18c0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18c12:	3302      	adds	r3, #2
   18c14:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18c18:	4814      	ldr	r0, [pc, #80]	; (18c6c <filter_wl_update+0x70>)
   18c1a:	f7ff ffd7 	bl	18bcc <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   18c1e:	3401      	adds	r4, #1
   18c20:	b2e4      	uxtb	r4, r4
   18c22:	2c07      	cmp	r4, #7
   18c24:	d820      	bhi.n	18c68 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   18c26:	4621      	mov	r1, r4
   18c28:	4b11      	ldr	r3, [pc, #68]	; (18c70 <filter_wl_update+0x74>)
   18c2a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18c2e:	f013 0f01 	tst.w	r3, #1
   18c32:	d0f4      	beq.n	18c1e <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   18c34:	4b0e      	ldr	r3, [pc, #56]	; (18c70 <filter_wl_update+0x74>)
   18c36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18c3a:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18c3c:	4a0d      	ldr	r2, [pc, #52]	; (18c74 <filter_wl_update+0x78>)
   18c3e:	7812      	ldrb	r2, [r2, #0]
   18c40:	2a00      	cmp	r2, #0
   18c42:	d0e1      	beq.n	18c08 <filter_wl_update+0xc>
   18c44:	2b07      	cmp	r3, #7
   18c46:	d8df      	bhi.n	18c08 <filter_wl_update+0xc>
   18c48:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18c4c:	00c2      	lsls	r2, r0, #3
   18c4e:	480a      	ldr	r0, [pc, #40]	; (18c78 <filter_wl_update+0x7c>)
   18c50:	5c82      	ldrb	r2, [r0, r2]
   18c52:	f012 0f04 	tst.w	r2, #4
   18c56:	d0d7      	beq.n	18c08 <filter_wl_update+0xc>
		    rl[j].dev) {
   18c58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18c5c:	00da      	lsls	r2, r3, #3
   18c5e:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18c60:	f013 0f10 	tst.w	r3, #16
   18c64:	d0db      	beq.n	18c1e <filter_wl_update+0x22>
   18c66:	e7cf      	b.n	18c08 <filter_wl_update+0xc>
}
   18c68:	bd10      	pop	{r4, pc}
   18c6a:	bf00      	nop
   18c6c:	20001a28 	.word	0x20001a28
   18c70:	200019e8 	.word	0x200019e8
   18c74:	200019b0 	.word	0x200019b0
   18c78:	20001870 	.word	0x20001870

00018c7c <filter_rl_update>:
{
   18c7c:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   18c7e:	4810      	ldr	r0, [pc, #64]	; (18cc0 <filter_rl_update+0x44>)
   18c80:	f7ff ff2c 	bl	18adc <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18c84:	2400      	movs	r4, #0
   18c86:	e001      	b.n	18c8c <filter_rl_update+0x10>
   18c88:	3401      	adds	r4, #1
   18c8a:	b2e4      	uxtb	r4, r4
   18c8c:	2c07      	cmp	r4, #7
   18c8e:	d815      	bhi.n	18cbc <filter_rl_update+0x40>
		if (rl[i].taken) {
   18c90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18c94:	00d3      	lsls	r3, r2, #3
   18c96:	4a0b      	ldr	r2, [pc, #44]	; (18cc4 <filter_rl_update+0x48>)
   18c98:	5cd3      	ldrb	r3, [r2, r3]
   18c9a:	f013 0f01 	tst.w	r3, #1
   18c9e:	d0f3      	beq.n	18c88 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18ca0:	4611      	mov	r1, r2
   18ca2:	00a3      	lsls	r3, r4, #2
   18ca4:	4423      	add	r3, r4
   18ca6:	00da      	lsls	r2, r3, #3
   18ca8:	188b      	adds	r3, r1, r2
   18caa:	5c8a      	ldrb	r2, [r1, r2]
   18cac:	3301      	adds	r3, #1
   18cae:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18cb2:	4621      	mov	r1, r4
   18cb4:	4802      	ldr	r0, [pc, #8]	; (18cc0 <filter_rl_update+0x44>)
   18cb6:	f7ff ff89 	bl	18bcc <filter_insert>
   18cba:	e7e5      	b.n	18c88 <filter_rl_update+0xc>
}
   18cbc:	bd10      	pop	{r4, pc}
   18cbe:	bf00      	nop
   18cc0:	200019b4 	.word	0x200019b4
   18cc4:	20001870 	.word	0x20001870

00018cc8 <rl_access_check>:
{
   18cc8:	b508      	push	{r3, lr}
	if (check_ar) {
   18cca:	b110      	cbz	r0, 18cd2 <rl_access_check+0xa>
		if (!rl_enable) {
   18ccc:	4b08      	ldr	r3, [pc, #32]	; (18cf0 <rl_access_check+0x28>)
   18cce:	781b      	ldrb	r3, [r3, #0]
   18cd0:	b15b      	cbz	r3, 18cea <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18cd2:	f7fe fc27 	bl	17524 <radio_adv_is_enabled>
   18cd6:	b108      	cbz	r0, 18cdc <rl_access_check+0x14>
   18cd8:	2000      	movs	r0, #0
   18cda:	bd08      	pop	{r3, pc}
   18cdc:	f7fe fc3a 	bl	17554 <radio_scan_is_enabled>
   18ce0:	b108      	cbz	r0, 18ce6 <rl_access_check+0x1e>
   18ce2:	2000      	movs	r0, #0
}
   18ce4:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18ce6:	2001      	movs	r0, #1
   18ce8:	bd08      	pop	{r3, pc}
			return -1;
   18cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18cee:	bd08      	pop	{r3, pc}
   18cf0:	200019b0 	.word	0x200019b0

00018cf4 <rpa_refresh_start>:
{
   18cf4:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18cf6:	4b05      	ldr	r3, [pc, #20]	; (18d0c <rpa_refresh_start+0x18>)
   18cf8:	781b      	ldrb	r3, [r3, #0]
   18cfa:	b903      	cbnz	r3, 18cfe <rpa_refresh_start+0xa>
   18cfc:	bd08      	pop	{r3, pc}
   18cfe:	4b04      	ldr	r3, [pc, #16]	; (18d10 <rpa_refresh_start+0x1c>)
   18d00:	681a      	ldr	r2, [r3, #0]
   18d02:	4904      	ldr	r1, [pc, #16]	; (18d14 <rpa_refresh_start+0x20>)
   18d04:	4804      	ldr	r0, [pc, #16]	; (18d18 <rpa_refresh_start+0x24>)
   18d06:	f010 fbad 	bl	29464 <k_delayed_work_submit_to_queue>
   18d0a:	e7f7      	b.n	18cfc <rpa_refresh_start+0x8>
   18d0c:	200019b0 	.word	0x200019b0
   18d10:	20002afc 	.word	0x20002afc
   18d14:	200029c8 	.word	0x200029c8
   18d18:	20002b10 	.word	0x20002b10

00018d1c <rpa_refresh_stop>:
{
   18d1c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18d1e:	4b04      	ldr	r3, [pc, #16]	; (18d30 <rpa_refresh_stop+0x14>)
   18d20:	781b      	ldrb	r3, [r3, #0]
   18d22:	b903      	cbnz	r3, 18d26 <rpa_refresh_stop+0xa>
   18d24:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   18d26:	4803      	ldr	r0, [pc, #12]	; (18d34 <rpa_refresh_stop+0x18>)
   18d28:	f010 fb42 	bl	293b0 <k_delayed_work_cancel>
   18d2c:	e7fa      	b.n	18d24 <rpa_refresh_stop+0x8>
   18d2e:	bf00      	nop
   18d30:	200019b0 	.word	0x200019b0
   18d34:	200029c8 	.word	0x200029c8

00018d38 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18d38:	2807      	cmp	r0, #7
   18d3a:	d816      	bhi.n	18d6a <ctrl_lrpa_get+0x32>
   18d3c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18d40:	00d3      	lsls	r3, r2, #3
   18d42:	4a0d      	ldr	r2, [pc, #52]	; (18d78 <ctrl_lrpa_get+0x40>)
   18d44:	5cd3      	ldrb	r3, [r2, r3]
   18d46:	f013 0f08 	tst.w	r3, #8
   18d4a:	d010      	beq.n	18d6e <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   18d4c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18d50:	00d3      	lsls	r3, r2, #3
   18d52:	4a09      	ldr	r2, [pc, #36]	; (18d78 <ctrl_lrpa_get+0x40>)
   18d54:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18d56:	f013 0f02 	tst.w	r3, #2
   18d5a:	d00a      	beq.n	18d72 <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   18d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18d60:	00c2      	lsls	r2, r0, #3
   18d62:	4b05      	ldr	r3, [pc, #20]	; (18d78 <ctrl_lrpa_get+0x40>)
   18d64:	4413      	add	r3, r2
   18d66:	6a58      	ldr	r0, [r3, #36]	; 0x24
   18d68:	4770      	bx	lr
		return NULL;
   18d6a:	2000      	movs	r0, #0
   18d6c:	4770      	bx	lr
   18d6e:	2000      	movs	r0, #0
   18d70:	4770      	bx	lr
   18d72:	2000      	movs	r0, #0
}
   18d74:	4770      	bx	lr
   18d76:	bf00      	nop
   18d78:	20001870 	.word	0x20001870

00018d7c <ctrl_irks_get>:
	*count = peer_irk_count;
   18d7c:	4b02      	ldr	r3, [pc, #8]	; (18d88 <ctrl_irks_get+0xc>)
   18d7e:	781b      	ldrb	r3, [r3, #0]
   18d80:	7003      	strb	r3, [r0, #0]
}
   18d82:	4802      	ldr	r0, [pc, #8]	; (18d8c <ctrl_irks_get+0x10>)
   18d84:	4770      	bx	lr
   18d86:	bf00      	nop
   18d88:	200017e4 	.word	0x200017e4
   18d8c:	200017f0 	.word	0x200017f0

00018d90 <ctrl_rl_idx>:
	if (whitelist) {
   18d90:	b1c8      	cbz	r0, 18dc6 <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18d92:	2907      	cmp	r1, #7
   18d94:	d80b      	bhi.n	18dae <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   18d96:	4b17      	ldr	r3, [pc, #92]	; (18df4 <ctrl_rl_idx+0x64>)
   18d98:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   18d9c:	f013 0f01 	tst.w	r3, #1
   18da0:	d00b      	beq.n	18dba <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   18da2:	4b14      	ldr	r3, [pc, #80]	; (18df4 <ctrl_rl_idx+0x64>)
   18da4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18da8:	7849      	ldrb	r1, [r1, #1]
}
   18daa:	4608      	mov	r0, r1
   18dac:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18dae:	4040      	eors	r0, r0
   18db0:	f380 8811 	msr	BASEPRI, r0
   18db4:	f04f 0004 	mov.w	r0, #4
   18db8:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   18dba:	4040      	eors	r0, r0
   18dbc:	f380 8811 	msr	BASEPRI, r0
   18dc0:	f04f 0004 	mov.w	r0, #4
   18dc4:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18dc6:	2907      	cmp	r1, #7
   18dc8:	d80d      	bhi.n	18de6 <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   18dca:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18dce:	00d3      	lsls	r3, r2, #3
   18dd0:	4a09      	ldr	r2, [pc, #36]	; (18df8 <ctrl_rl_idx+0x68>)
   18dd2:	5cd3      	ldrb	r3, [r2, r3]
   18dd4:	f013 0f01 	tst.w	r3, #1
   18dd8:	d1e7      	bne.n	18daa <ctrl_rl_idx+0x1a>
   18dda:	4040      	eors	r0, r0
   18ddc:	f380 8811 	msr	BASEPRI, r0
   18de0:	f04f 0004 	mov.w	r0, #4
   18de4:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18de6:	4040      	eors	r0, r0
   18de8:	f380 8811 	msr	BASEPRI, r0
   18dec:	f04f 0004 	mov.w	r0, #4
   18df0:	df02      	svc	2
   18df2:	bf00      	nop
   18df4:	200019e8 	.word	0x200019e8
   18df8:	20001870 	.word	0x20001870

00018dfc <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18dfc:	4b11      	ldr	r3, [pc, #68]	; (18e44 <ctrl_rl_irk_idx+0x48>)
   18dfe:	781b      	ldrb	r3, [r3, #0]
   18e00:	4283      	cmp	r3, r0
   18e02:	d90c      	bls.n	18e1e <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   18e04:	4b10      	ldr	r3, [pc, #64]	; (18e48 <ctrl_rl_irk_idx+0x4c>)
   18e06:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18e08:	2807      	cmp	r0, #7
   18e0a:	d80e      	bhi.n	18e2a <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   18e0c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18e10:	00d3      	lsls	r3, r2, #3
   18e12:	4a0e      	ldr	r2, [pc, #56]	; (18e4c <ctrl_rl_irk_idx+0x50>)
   18e14:	5cd3      	ldrb	r3, [r2, r3]
   18e16:	f013 0f01 	tst.w	r3, #1
   18e1a:	d00c      	beq.n	18e36 <ctrl_rl_irk_idx+0x3a>
}
   18e1c:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18e1e:	4040      	eors	r0, r0
   18e20:	f380 8811 	msr	BASEPRI, r0
   18e24:	f04f 0004 	mov.w	r0, #4
   18e28:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18e2a:	4040      	eors	r0, r0
   18e2c:	f380 8811 	msr	BASEPRI, r0
   18e30:	f04f 0004 	mov.w	r0, #4
   18e34:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   18e36:	4040      	eors	r0, r0
   18e38:	f380 8811 	msr	BASEPRI, r0
   18e3c:	f04f 0004 	mov.w	r0, #4
   18e40:	df02      	svc	2
   18e42:	bf00      	nop
   18e44:	200017e4 	.word	0x200017e4
   18e48:	200017e8 	.word	0x200017e8
   18e4c:	20001870 	.word	0x20001870

00018e50 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   18e50:	2807      	cmp	r0, #7
   18e52:	d815      	bhi.n	18e80 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   18e54:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18e58:	00d3      	lsls	r3, r2, #3
   18e5a:	4a0a      	ldr	r2, [pc, #40]	; (18e84 <ctrl_irk_whitelisted+0x34>)
   18e5c:	5cd3      	ldrb	r3, [r2, r3]
   18e5e:	f013 0f01 	tst.w	r3, #1
   18e62:	d007      	beq.n	18e74 <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   18e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18e68:	00c3      	lsls	r3, r0, #3
   18e6a:	4a06      	ldr	r2, [pc, #24]	; (18e84 <ctrl_irk_whitelisted+0x34>)
   18e6c:	5cd0      	ldrb	r0, [r2, r3]
   18e6e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18e72:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   18e74:	4040      	eors	r0, r0
   18e76:	f380 8811 	msr	BASEPRI, r0
   18e7a:	f04f 0004 	mov.w	r0, #4
   18e7e:	df02      	svc	2
		return false;
   18e80:	2000      	movs	r0, #0
}
   18e82:	4770      	bx	lr
   18e84:	20001870 	.word	0x20001870

00018e88 <ctrl_filter_get>:
	if (whitelist) {
   18e88:	b908      	cbnz	r0, 18e8e <ctrl_filter_get+0x6>
	return &rl_filter;
   18e8a:	4802      	ldr	r0, [pc, #8]	; (18e94 <ctrl_filter_get+0xc>)
}
   18e8c:	4770      	bx	lr
		return &wl_filter;
   18e8e:	4802      	ldr	r0, [pc, #8]	; (18e98 <ctrl_filter_get+0x10>)
   18e90:	4770      	bx	lr
   18e92:	bf00      	nop
   18e94:	200019b4 	.word	0x200019b4
   18e98:	20001a28 	.word	0x20001a28

00018e9c <ll_wl_size_get>:
}
   18e9c:	2008      	movs	r0, #8
   18e9e:	4770      	bx	lr

00018ea0 <ll_wl_clear>:
{
   18ea0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18ea2:	f7fe fb47 	bl	17534 <radio_adv_filter_pol_get>
   18ea6:	b110      	cbz	r0, 18eae <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ea8:	240c      	movs	r4, #12
}
   18eaa:	4620      	mov	r0, r4
   18eac:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18eae:	f7fe fb59 	bl	17564 <radio_scan_filter_pol_get>
   18eb2:	f010 0401 	ands.w	r4, r0, #1
   18eb6:	d001      	beq.n	18ebc <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18eb8:	240c      	movs	r4, #12
   18eba:	e7f6      	b.n	18eaa <ll_wl_clear+0xa>
	wl_clear();
   18ebc:	f7ff fdfe 	bl	18abc <wl_clear>
	wl_anon = 0;
   18ec0:	2200      	movs	r2, #0
   18ec2:	4b01      	ldr	r3, [pc, #4]	; (18ec8 <ll_wl_clear+0x28>)
   18ec4:	701a      	strb	r2, [r3, #0]
	return 0;
   18ec6:	e7f0      	b.n	18eaa <ll_wl_clear+0xa>
   18ec8:	20002958 	.word	0x20002958

00018ecc <ll_wl_remove>:
{
   18ecc:	b510      	push	{r4, lr}
   18ece:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18ed0:	f7fe fb30 	bl	17534 <radio_adv_filter_pol_get>
   18ed4:	b108      	cbz	r0, 18eda <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ed6:	200c      	movs	r0, #12
   18ed8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18eda:	f7fe fb43 	bl	17564 <radio_scan_filter_pol_get>
   18ede:	f010 0001 	ands.w	r0, r0, #1
   18ee2:	d001      	beq.n	18ee8 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ee4:	200c      	movs	r0, #12
}
   18ee6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   18ee8:	7823      	ldrb	r3, [r4, #0]
   18eea:	2bff      	cmp	r3, #255	; 0xff
   18eec:	d003      	beq.n	18ef6 <ll_wl_remove+0x2a>
	return wl_remove(addr);
   18eee:	4620      	mov	r0, r4
   18ef0:	f7ff fe46 	bl	18b80 <wl_remove>
   18ef4:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   18ef6:	2200      	movs	r2, #0
   18ef8:	4b01      	ldr	r3, [pc, #4]	; (18f00 <ll_wl_remove+0x34>)
   18efa:	701a      	strb	r2, [r3, #0]
		return 0;
   18efc:	bd10      	pop	{r4, pc}
   18efe:	bf00      	nop
   18f00:	20002958 	.word	0x20002958

00018f04 <ll_filters_adv_update>:
{
   18f04:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18f06:	b918      	cbnz	r0, 18f10 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   18f08:	4b09      	ldr	r3, [pc, #36]	; (18f30 <ll_filters_adv_update+0x2c>)
   18f0a:	781b      	ldrb	r3, [r3, #0]
   18f0c:	b943      	cbnz	r3, 18f20 <ll_filters_adv_update+0x1c>
   18f0e:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18f10:	f7fe fb28 	bl	17564 <radio_scan_filter_pol_get>
   18f14:	f010 0f01 	tst.w	r0, #1
   18f18:	d1f6      	bne.n	18f08 <ll_filters_adv_update+0x4>
		filter_wl_update();
   18f1a:	f7ff fe6f 	bl	18bfc <filter_wl_update>
   18f1e:	e7f3      	b.n	18f08 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   18f20:	f7fe fb18 	bl	17554 <radio_scan_is_enabled>
   18f24:	2800      	cmp	r0, #0
   18f26:	d1f2      	bne.n	18f0e <ll_filters_adv_update+0xa>
		filter_rl_update();
   18f28:	f7ff fea8 	bl	18c7c <filter_rl_update>
}
   18f2c:	e7ef      	b.n	18f0e <ll_filters_adv_update+0xa>
   18f2e:	bf00      	nop
   18f30:	200019b0 	.word	0x200019b0

00018f34 <ll_filters_scan_update>:
{
   18f34:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18f36:	f010 0f01 	tst.w	r0, #1
   18f3a:	d103      	bne.n	18f44 <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   18f3c:	4b08      	ldr	r3, [pc, #32]	; (18f60 <ll_filters_scan_update+0x2c>)
   18f3e:	781b      	ldrb	r3, [r3, #0]
   18f40:	b93b      	cbnz	r3, 18f52 <ll_filters_scan_update+0x1e>
   18f42:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18f44:	f7fe faf6 	bl	17534 <radio_adv_filter_pol_get>
   18f48:	2800      	cmp	r0, #0
   18f4a:	d1f7      	bne.n	18f3c <ll_filters_scan_update+0x8>
		filter_wl_update();
   18f4c:	f7ff fe56 	bl	18bfc <filter_wl_update>
   18f50:	e7f4      	b.n	18f3c <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   18f52:	f7fe fae7 	bl	17524 <radio_adv_is_enabled>
   18f56:	2800      	cmp	r0, #0
   18f58:	d1f3      	bne.n	18f42 <ll_filters_scan_update+0xe>
		filter_rl_update();
   18f5a:	f7ff fe8f 	bl	18c7c <filter_rl_update>
}
   18f5e:	e7f0      	b.n	18f42 <ll_filters_scan_update+0xe>
   18f60:	200019b0 	.word	0x200019b0

00018f64 <ll_rl_find>:
{
   18f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f68:	4607      	mov	r7, r0
   18f6a:	4688      	mov	r8, r1
	if (free) {
   18f6c:	4616      	mov	r6, r2
   18f6e:	b10a      	cbz	r2, 18f74 <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   18f70:	23ff      	movs	r3, #255	; 0xff
   18f72:	7013      	strb	r3, [r2, #0]
{
   18f74:	2400      	movs	r4, #0
   18f76:	e00e      	b.n	18f96 <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f78:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f7c:	00d3      	lsls	r3, r2, #3
   18f7e:	481a      	ldr	r0, [pc, #104]	; (18fe8 <ll_rl_find+0x84>)
   18f80:	4418      	add	r0, r3
   18f82:	2206      	movs	r2, #6
   18f84:	4641      	mov	r1, r8
   18f86:	3001      	adds	r0, #1
   18f88:	f011 fd04 	bl	2a994 <memcmp>
   18f8c:	b9c8      	cbnz	r0, 18fc2 <ll_rl_find+0x5e>
   18f8e:	e027      	b.n	18fe0 <ll_rl_find+0x7c>
			*free = i;
   18f90:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18f92:	3401      	adds	r4, #1
   18f94:	b2e4      	uxtb	r4, r4
   18f96:	2c07      	cmp	r4, #7
   18f98:	d821      	bhi.n	18fde <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f9a:	4625      	mov	r5, r4
   18f9c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18fa0:	00d3      	lsls	r3, r2, #3
   18fa2:	4a11      	ldr	r2, [pc, #68]	; (18fe8 <ll_rl_find+0x84>)
   18fa4:	5cd3      	ldrb	r3, [r2, r3]
   18fa6:	f013 0f01 	tst.w	r3, #1
   18faa:	d00a      	beq.n	18fc2 <ll_rl_find+0x5e>
   18fac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18fb0:	00d3      	lsls	r3, r2, #3
   18fb2:	4a0d      	ldr	r2, [pc, #52]	; (18fe8 <ll_rl_find+0x84>)
   18fb4:	5cd3      	ldrb	r3, [r2, r3]
   18fb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18fba:	f007 0201 	and.w	r2, r7, #1
   18fbe:	4293      	cmp	r3, r2
   18fc0:	d0da      	beq.n	18f78 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18fc2:	2e00      	cmp	r6, #0
   18fc4:	d0e5      	beq.n	18f92 <ll_rl_find+0x2e>
   18fc6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   18fca:	00eb      	lsls	r3, r5, #3
   18fcc:	4a06      	ldr	r2, [pc, #24]	; (18fe8 <ll_rl_find+0x84>)
   18fce:	5cd3      	ldrb	r3, [r2, r3]
   18fd0:	f013 0f01 	tst.w	r3, #1
   18fd4:	d1dd      	bne.n	18f92 <ll_rl_find+0x2e>
   18fd6:	7833      	ldrb	r3, [r6, #0]
   18fd8:	2bff      	cmp	r3, #255	; 0xff
   18fda:	d1da      	bne.n	18f92 <ll_rl_find+0x2e>
   18fdc:	e7d8      	b.n	18f90 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   18fde:	24ff      	movs	r4, #255	; 0xff
}
   18fe0:	4620      	mov	r0, r4
   18fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18fe6:	bf00      	nop
   18fe8:	20001870 	.word	0x20001870

00018fec <wl_add>:
{
   18fec:	b570      	push	{r4, r5, r6, lr}
   18fee:	b082      	sub	sp, #8
   18ff0:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   18ff2:	4604      	mov	r4, r0
   18ff4:	f814 0b01 	ldrb.w	r0, [r4], #1
   18ff8:	f10d 0207 	add.w	r2, sp, #7
   18ffc:	4621      	mov	r1, r4
   18ffe:	f7ff fd87 	bl	18b10 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19002:	2807      	cmp	r0, #7
   19004:	d802      	bhi.n	1900c <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19006:	2012      	movs	r0, #18
}
   19008:	b002      	add	sp, #8
   1900a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   1900c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19010:	2e07      	cmp	r6, #7
   19012:	d901      	bls.n	19018 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19014:	2007      	movs	r0, #7
   19016:	e7f7      	b.n	19008 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19018:	4629      	mov	r1, r5
   1901a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1901e:	4817      	ldr	r0, [pc, #92]	; (1907c <wl_add+0x90>)
   19020:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19024:	f362 0341 	bfi	r3, r2, #1, #1
   19028:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1902c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19030:	2206      	movs	r2, #6
   19032:	3002      	adds	r0, #2
   19034:	f7e7 f944 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19038:	2200      	movs	r2, #0
   1903a:	4621      	mov	r1, r4
   1903c:	7828      	ldrb	r0, [r5, #0]
   1903e:	f7ff ff91 	bl	18f64 <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19042:	2807      	cmp	r0, #7
   19044:	d814      	bhi.n	19070 <wl_add+0x84>
		wl[i].rl_idx = j;
   19046:	4b0d      	ldr	r3, [pc, #52]	; (1907c <wl_add+0x90>)
   19048:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1904c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1904e:	490c      	ldr	r1, [pc, #48]	; (19080 <wl_add+0x94>)
   19050:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19054:	00c3      	lsls	r3, r0, #3
   19056:	5cca      	ldrb	r2, [r1, r3]
   19058:	f042 0220 	orr.w	r2, r2, #32
   1905c:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   1905e:	4a07      	ldr	r2, [pc, #28]	; (1907c <wl_add+0x90>)
   19060:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19064:	f043 0301 	orr.w	r3, r3, #1
   19068:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   1906c:	2000      	movs	r0, #0
   1906e:	e7cb      	b.n	19008 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19070:	4b02      	ldr	r3, [pc, #8]	; (1907c <wl_add+0x90>)
   19072:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19076:	22ff      	movs	r2, #255	; 0xff
   19078:	705a      	strb	r2, [r3, #1]
   1907a:	e7f0      	b.n	1905e <wl_add+0x72>
   1907c:	200019e8 	.word	0x200019e8
   19080:	20001870 	.word	0x20001870

00019084 <ll_wl_add>:
{
   19084:	b510      	push	{r4, lr}
   19086:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19088:	f7fe fa54 	bl	17534 <radio_adv_filter_pol_get>
   1908c:	b108      	cbz	r0, 19092 <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1908e:	200c      	movs	r0, #12
   19090:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19092:	f7fe fa67 	bl	17564 <radio_scan_filter_pol_get>
   19096:	f010 0001 	ands.w	r0, r0, #1
   1909a:	d001      	beq.n	190a0 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1909c:	200c      	movs	r0, #12
}
   1909e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   190a0:	7823      	ldrb	r3, [r4, #0]
   190a2:	2bff      	cmp	r3, #255	; 0xff
   190a4:	d003      	beq.n	190ae <ll_wl_add+0x2a>
	return wl_add(addr);
   190a6:	4620      	mov	r0, r4
   190a8:	f7ff ffa0 	bl	18fec <wl_add>
   190ac:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   190ae:	2201      	movs	r2, #1
   190b0:	4b01      	ldr	r3, [pc, #4]	; (190b8 <ll_wl_add+0x34>)
   190b2:	701a      	strb	r2, [r3, #0]
		return 0;
   190b4:	bd10      	pop	{r4, pc}
   190b6:	bf00      	nop
   190b8:	20002958 	.word	0x20002958

000190bc <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   190bc:	4b17      	ldr	r3, [pc, #92]	; (1911c <ctrl_rl_idx_allowed+0x60>)
   190be:	781b      	ldrb	r3, [r3, #0]
   190c0:	b32b      	cbz	r3, 1910e <ctrl_rl_idx_allowed+0x52>
   190c2:	2907      	cmp	r1, #7
   190c4:	d825      	bhi.n	19112 <ctrl_rl_idx_allowed+0x56>
   190c6:	bb30      	cbnz	r0, 19116 <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   190c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   190cc:	00d3      	lsls	r3, r2, #3
   190ce:	4a14      	ldr	r2, [pc, #80]	; (19120 <ctrl_rl_idx_allowed+0x64>)
   190d0:	5cd3      	ldrb	r3, [r2, r3]
   190d2:	f013 0f01 	tst.w	r3, #1
   190d6:	d010      	beq.n	190fa <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   190d8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   190dc:	00d3      	lsls	r3, r2, #3
   190de:	4a10      	ldr	r2, [pc, #64]	; (19120 <ctrl_rl_idx_allowed+0x64>)
   190e0:	5cd3      	ldrb	r3, [r2, r3]
   190e2:	f013 0f04 	tst.w	r3, #4
   190e6:	d00e      	beq.n	19106 <ctrl_rl_idx_allowed+0x4a>
   190e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   190ec:	00cb      	lsls	r3, r1, #3
   190ee:	5cd3      	ldrb	r3, [r2, r3]
   190f0:	f013 0f10 	tst.w	r3, #16
   190f4:	d009      	beq.n	1910a <ctrl_rl_idx_allowed+0x4e>
   190f6:	2001      	movs	r0, #1
   190f8:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   190fa:	4040      	eors	r0, r0
   190fc:	f380 8811 	msr	BASEPRI, r0
   19100:	f04f 0004 	mov.w	r0, #4
   19104:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19106:	2001      	movs	r0, #1
   19108:	4770      	bx	lr
   1910a:	2000      	movs	r0, #0
   1910c:	4770      	bx	lr
		return true;
   1910e:	2001      	movs	r0, #1
   19110:	4770      	bx	lr
   19112:	2001      	movs	r0, #1
   19114:	4770      	bx	lr
   19116:	2001      	movs	r0, #1
}
   19118:	4770      	bx	lr
   1911a:	bf00      	nop
   1911c:	200019b0 	.word	0x200019b0
   19120:	20001870 	.word	0x20001870

00019124 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19124:	2807      	cmp	r0, #7
   19126:	d81a      	bhi.n	1915e <ll_rl_id_addr_get+0x3a>
{
   19128:	b570      	push	{r4, r5, r6, lr}
   1912a:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   1912c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19130:	00ec      	lsls	r4, r5, #3
   19132:	4811      	ldr	r0, [pc, #68]	; (19178 <ll_rl_id_addr_get+0x54>)
   19134:	5d00      	ldrb	r0, [r0, r4]
   19136:	f010 0f01 	tst.w	r0, #1
   1913a:	d016      	beq.n	1916a <ll_rl_id_addr_get+0x46>
   1913c:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   1913e:	4d0e      	ldr	r5, [pc, #56]	; (19178 <ll_rl_id_addr_get+0x54>)
   19140:	009c      	lsls	r4, r3, #2
   19142:	18e6      	adds	r6, r4, r3
   19144:	00f2      	lsls	r2, r6, #3
   19146:	4616      	mov	r6, r2
   19148:	5caa      	ldrb	r2, [r5, r2]
   1914a:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1914e:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19150:	4631      	mov	r1, r6
   19152:	4429      	add	r1, r5
   19154:	2206      	movs	r2, #6
   19156:	3101      	adds	r1, #1
   19158:	f7e7 f8b2 	bl	2c0 <memcpy>
   1915c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1915e:	4040      	eors	r0, r0
   19160:	f380 8811 	msr	BASEPRI, r0
   19164:	f04f 0004 	mov.w	r0, #4
   19168:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   1916a:	4040      	eors	r0, r0
   1916c:	f380 8811 	msr	BASEPRI, r0
   19170:	f04f 0004 	mov.w	r0, #4
   19174:	df02      	svc	2
   19176:	bf00      	nop
   19178:	20001870 	.word	0x20001870

0001917c <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1917c:	4b29      	ldr	r3, [pc, #164]	; (19224 <ctrl_rl_addr_allowed+0xa8>)
   1917e:	781b      	ldrb	r3, [r3, #0]
   19180:	2b00      	cmp	r3, #0
   19182:	d04a      	beq.n	1921a <ctrl_rl_addr_allowed+0x9e>
   19184:	7813      	ldrb	r3, [r2, #0]
   19186:	2bff      	cmp	r3, #255	; 0xff
   19188:	d001      	beq.n	1918e <ctrl_rl_addr_allowed+0x12>
		return true;
   1918a:	2001      	movs	r0, #1
   1918c:	4770      	bx	lr
   1918e:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19190:	2b07      	cmp	r3, #7
   19192:	d844      	bhi.n	1921e <ctrl_rl_addr_allowed+0xa2>
{
   19194:	b5f0      	push	{r4, r5, r6, r7, lr}
   19196:	e005      	b.n	191a4 <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19198:	2c06      	cmp	r4, #6
   1919a:	d026      	beq.n	191ea <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1919c:	3301      	adds	r3, #1
   1919e:	b2db      	uxtb	r3, r3
   191a0:	2b07      	cmp	r3, #7
   191a2:	d838      	bhi.n	19216 <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   191a4:	461e      	mov	r6, r3
   191a6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   191aa:	00ec      	lsls	r4, r5, #3
   191ac:	4d1e      	ldr	r5, [pc, #120]	; (19228 <ctrl_rl_addr_allowed+0xac>)
   191ae:	5d2c      	ldrb	r4, [r5, r4]
   191b0:	f014 0f01 	tst.w	r4, #1
   191b4:	d0f2      	beq.n	1919c <ctrl_rl_addr_allowed+0x20>
   191b6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   191ba:	00ec      	lsls	r4, r5, #3
   191bc:	4d1a      	ldr	r5, [pc, #104]	; (19228 <ctrl_rl_addr_allowed+0xac>)
   191be:	5d2c      	ldrb	r4, [r5, r4]
   191c0:	f3c4 1480 	ubfx	r4, r4, #6, #1
   191c4:	4284      	cmp	r4, r0
   191c6:	d1e9      	bne.n	1919c <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   191c8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   191cc:	00ec      	lsls	r4, r5, #3
   191ce:	4d16      	ldr	r5, [pc, #88]	; (19228 <ctrl_rl_addr_allowed+0xac>)
   191d0:	4425      	add	r5, r4
   191d2:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   191d4:	2400      	movs	r4, #0
   191d6:	2c05      	cmp	r4, #5
   191d8:	d8de      	bhi.n	19198 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   191da:	f815 e004 	ldrb.w	lr, [r5, r4]
   191de:	5d0f      	ldrb	r7, [r1, r4]
   191e0:	45be      	cmp	lr, r7
   191e2:	d1d9      	bne.n	19198 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   191e4:	3401      	adds	r4, #1
   191e6:	b2e4      	uxtb	r4, r4
   191e8:	e7f5      	b.n	191d6 <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   191ea:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   191ec:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   191f0:	00d3      	lsls	r3, r2, #3
   191f2:	4a0d      	ldr	r2, [pc, #52]	; (19228 <ctrl_rl_addr_allowed+0xac>)
   191f4:	5cd3      	ldrb	r3, [r2, r3]
   191f6:	f013 0f04 	tst.w	r3, #4
   191fa:	d00a      	beq.n	19212 <ctrl_rl_addr_allowed+0x96>
   191fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19200:	00f3      	lsls	r3, r6, #3
   19202:	5cd3      	ldrb	r3, [r2, r3]
   19204:	f013 0f10 	tst.w	r3, #16
   19208:	d101      	bne.n	1920e <ctrl_rl_addr_allowed+0x92>
   1920a:	2000      	movs	r0, #0
   1920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1920e:	2001      	movs	r0, #1
   19210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19212:	2001      	movs	r0, #1
   19214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19216:	2001      	movs	r0, #1
   19218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   1921a:	2001      	movs	r0, #1
   1921c:	4770      	bx	lr
	return true;
   1921e:	2001      	movs	r0, #1
}
   19220:	4770      	bx	lr
   19222:	bf00      	nop
   19224:	200019b0 	.word	0x200019b0
   19228:	20001870 	.word	0x20001870

0001922c <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1922c:	4b13      	ldr	r3, [pc, #76]	; (1927c <ctrl_rl_addr_resolve+0x50>)
   1922e:	781b      	ldrb	r3, [r3, #0]
   19230:	b1db      	cbz	r3, 1926a <ctrl_rl_addr_resolve+0x3e>
   19232:	2a07      	cmp	r2, #7
   19234:	d81b      	bhi.n	1926e <ctrl_rl_addr_resolve+0x42>
{
   19236:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19238:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1923c:	00e3      	lsls	r3, r4, #3
   1923e:	4c10      	ldr	r4, [pc, #64]	; (19280 <ctrl_rl_addr_resolve+0x54>)
   19240:	5ce3      	ldrb	r3, [r4, r3]
   19242:	f013 0f08 	tst.w	r3, #8
   19246:	d014      	beq.n	19272 <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19248:	b1a8      	cbz	r0, 19276 <ctrl_rl_addr_resolve+0x4a>
   1924a:	794b      	ldrb	r3, [r1, #5]
   1924c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19250:	2b40      	cmp	r3, #64	; 0x40
   19252:	d001      	beq.n	19258 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19254:	2000      	movs	r0, #0
}
   19256:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19258:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1925c:	00d3      	lsls	r3, r2, #3
   1925e:	4620      	mov	r0, r4
   19260:	4418      	add	r0, r3
   19262:	3007      	adds	r0, #7
   19264:	f7ea fbc8 	bl	39f8 <bt_rpa_irk_matches>
   19268:	bd10      	pop	{r4, pc}
		return false;
   1926a:	2000      	movs	r0, #0
   1926c:	4770      	bx	lr
   1926e:	2000      	movs	r0, #0
   19270:	4770      	bx	lr
   19272:	2000      	movs	r0, #0
   19274:	bd10      	pop	{r4, pc}
	return false;
   19276:	2000      	movs	r0, #0
   19278:	bd10      	pop	{r4, pc}
   1927a:	bf00      	nop
   1927c:	200019b0 	.word	0x200019b0
   19280:	20001870 	.word	0x20001870

00019284 <ctrl_rl_enabled>:
	return rl_enable;
   19284:	4b02      	ldr	r3, [pc, #8]	; (19290 <ctrl_rl_enabled+0xc>)
   19286:	7818      	ldrb	r0, [r3, #0]
}
   19288:	3000      	adds	r0, #0
   1928a:	bf18      	it	ne
   1928c:	2001      	movne	r0, #1
   1928e:	4770      	bx	lr
   19290:	200019b0 	.word	0x200019b0

00019294 <ll_rl_pdu_adv_update>:
{
   19294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19296:	4605      	mov	r5, r0
   19298:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   1929a:	780b      	ldrb	r3, [r1, #0]
   1929c:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   192a0:	2b04      	cmp	r3, #4
   192a2:	d024      	beq.n	192ee <ll_rl_pdu_adv_update+0x5a>
   192a4:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   192a6:	f000 fbc5 	bl	19a34 <ll_adv_set_get>
   192aa:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   192ac:	2d07      	cmp	r5, #7
   192ae:	d826      	bhi.n	192fe <ll_rl_pdu_adv_update+0x6a>
   192b0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   192b4:	00d3      	lsls	r3, r2, #3
   192b6:	4a30      	ldr	r2, [pc, #192]	; (19378 <ll_rl_pdu_adv_update+0xe4>)
   192b8:	5cd3      	ldrb	r3, [r2, r3]
   192ba:	f013 0f08 	tst.w	r3, #8
   192be:	d01e      	beq.n	192fe <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   192c0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   192c4:	00d3      	lsls	r3, r2, #3
   192c6:	4a2c      	ldr	r2, [pc, #176]	; (19378 <ll_rl_pdu_adv_update+0xe4>)
   192c8:	5cd3      	ldrb	r3, [r2, r3]
   192ca:	f013 0f02 	tst.w	r3, #2
   192ce:	d010      	beq.n	192f2 <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   192d0:	7823      	ldrb	r3, [r4, #0]
   192d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   192d6:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   192d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   192dc:	00da      	lsls	r2, r3, #3
   192de:	4b26      	ldr	r3, [pc, #152]	; (19378 <ll_rl_pdu_adv_update+0xe4>)
   192e0:	4413      	add	r3, r2
   192e2:	2206      	movs	r2, #6
   192e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   192e6:	4638      	mov	r0, r7
   192e8:	f7e6 ffea 	bl	2c0 <memcpy>
   192ec:	e014      	b.n	19318 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   192ee:	1c8f      	adds	r7, r1, #2
   192f0:	e7d9      	b.n	192a6 <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   192f2:	4040      	eors	r0, r0
   192f4:	f380 8811 	msr	BASEPRI, r0
   192f8:	f04f 0004 	mov.w	r0, #4
   192fc:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   192fe:	7833      	ldrb	r3, [r6, #0]
   19300:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19304:	7822      	ldrb	r2, [r4, #0]
   19306:	f363 1286 	bfi	r2, r3, #6, #1
   1930a:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1930c:	7830      	ldrb	r0, [r6, #0]
   1930e:	4639      	mov	r1, r7
   19310:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19314:	f7ff fba0 	bl	18a58 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19318:	7823      	ldrb	r3, [r4, #0]
   1931a:	f003 030f 	and.w	r3, r3, #15
   1931e:	2b01      	cmp	r3, #1
   19320:	d000      	beq.n	19324 <ll_rl_pdu_adv_update+0x90>
   19322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19324:	2d07      	cmp	r5, #7
   19326:	d807      	bhi.n	19338 <ll_rl_pdu_adv_update+0xa4>
   19328:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1932c:	00d3      	lsls	r3, r2, #3
   1932e:	4a12      	ldr	r2, [pc, #72]	; (19378 <ll_rl_pdu_adv_update+0xe4>)
   19330:	5cd3      	ldrb	r3, [r2, r3]
   19332:	f013 0f04 	tst.w	r3, #4
   19336:	d10d      	bne.n	19354 <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19338:	4631      	mov	r1, r6
   1933a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1933e:	09db      	lsrs	r3, r3, #7
   19340:	7822      	ldrb	r2, [r4, #0]
   19342:	f363 12c7 	bfi	r2, r3, #7, #1
   19346:	4620      	mov	r0, r4
   19348:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1934c:	2206      	movs	r2, #6
   1934e:	f7e6 ffb7 	bl	2c0 <memcpy>
}
   19352:	e7e6      	b.n	19322 <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19354:	7823      	ldrb	r3, [r4, #0]
   19356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1935a:	4620      	mov	r0, r4
   1935c:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19360:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19364:	00eb      	lsls	r3, r5, #3
   19366:	3318      	adds	r3, #24
   19368:	4611      	mov	r1, r2
   1936a:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1936c:	2206      	movs	r2, #6
   1936e:	4411      	add	r1, r2
   19370:	f7e6 ffa6 	bl	2c0 <memcpy>
   19374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19376:	bf00      	nop
   19378:	20001870 	.word	0x20001870

0001937c <rpa_adv_refresh>:
{
   1937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19380:	f000 fb58 	bl	19a34 <ll_adv_set_get>
   19384:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19386:	7803      	ldrb	r3, [r0, #0]
   19388:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1938c:	2b40      	cmp	r3, #64	; 0x40
   1938e:	d003      	beq.n	19398 <rpa_adv_refresh+0x1c>
   19390:	2b60      	cmp	r3, #96	; 0x60
   19392:	d001      	beq.n	19398 <rpa_adv_refresh+0x1c>
   19394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19398:	f7fe f8bc 	bl	17514 <radio_adv_data_get>
   1939c:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1939e:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   193a2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   193a6:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   193aa:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   193ac:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   193b0:	429d      	cmp	r5, r3
   193b2:	d02d      	beq.n	19410 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   193b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   193b8:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   193bc:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   193c0:	5ca0      	ldrb	r0, [r4, r2]
   193c2:	5ce1      	ldrb	r1, [r4, r3]
   193c4:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   193c8:	f36f 1104 	bfc	r1, #4, #1
   193cc:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   193ce:	5ca2      	ldrb	r2, [r4, r2]
   193d0:	f3c2 1240 	ubfx	r2, r2, #5, #1
   193d4:	b2c9      	uxtb	r1, r1
   193d6:	f362 1145 	bfi	r1, r2, #5, #1
   193da:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   193dc:	4631      	mov	r1, r6
   193de:	f811 0b02 	ldrb.w	r0, [r1], #2
   193e2:	2200      	movs	r2, #0
   193e4:	09c0      	lsrs	r0, r0, #7
   193e6:	f7ff fdbd 	bl	18f64 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   193ea:	2807      	cmp	r0, #7
   193ec:	d816      	bhi.n	1941c <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   193ee:	4641      	mov	r1, r8
   193f0:	f7ff ff50 	bl	19294 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   193f4:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   193f6:	3a06      	subs	r2, #6
   193f8:	f107 0108 	add.w	r1, r7, #8
   193fc:	f108 0008 	add.w	r0, r8, #8
   19400:	f7e6 ff5e 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19404:	787b      	ldrb	r3, [r7, #1]
   19406:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1940a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1940e:	e7c1      	b.n	19394 <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19410:	3501      	adds	r5, #1
   19412:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19414:	2d02      	cmp	r5, #2
   19416:	d1cd      	bne.n	193b4 <rpa_adv_refresh+0x38>
			last = 0;
   19418:	2500      	movs	r5, #0
   1941a:	e7cb      	b.n	193b4 <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1941c:	4040      	eors	r0, r0
   1941e:	f380 8811 	msr	BASEPRI, r0
   19422:	f04f 0004 	mov.w	r0, #4
   19426:	df02      	svc	2

00019428 <ll_rl_rpa_update>:
{
   19428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1942c:	b085      	sub	sp, #20
   1942e:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19430:	f00f fa44 	bl	288bc <_impl_k_uptime_get>
   19434:	4606      	mov	r6, r0
   19436:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19438:	f1b9 0f00 	cmp.w	r9, #0
   1943c:	d115      	bne.n	1946a <ll_rl_rpa_update+0x42>
   1943e:	4b57      	ldr	r3, [pc, #348]	; (1959c <ll_rl_rpa_update+0x174>)
   19440:	e9d3 0100 	ldrd	r0, r1, [r3]
   19444:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19448:	bf08      	it	eq
   1944a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1944e:	d010      	beq.n	19472 <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19450:	1a30      	subs	r0, r6, r0
   19452:	eb67 0101 	sbc.w	r1, r7, r1
   19456:	4b52      	ldr	r3, [pc, #328]	; (195a0 <ll_rl_rpa_update+0x178>)
   19458:	681a      	ldr	r2, [r3, #0]
   1945a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1945c:	4290      	cmp	r0, r2
   1945e:	eb71 0303 	sbcs.w	r3, r1, r3
   19462:	db09      	blt.n	19478 <ll_rl_rpa_update+0x50>
   19464:	f04f 0801 	mov.w	r8, #1
   19468:	e001      	b.n	1946e <ll_rl_rpa_update+0x46>
   1946a:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1946e:	2400      	movs	r4, #0
   19470:	e02a      	b.n	194c8 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   19472:	f04f 0801 	mov.w	r8, #1
   19476:	e7fa      	b.n	1946e <ll_rl_rpa_update+0x46>
   19478:	f04f 0800 	mov.w	r8, #0
   1947c:	e7f7      	b.n	1946e <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1947e:	7818      	ldrb	r0, [r3, #0]
   19480:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   19482:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   19484:	3b01      	subs	r3, #1
   19486:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   19488:	2a00      	cmp	r2, #0
   1948a:	d1f8      	bne.n	1947e <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1948c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19490:	00d3      	lsls	r3, r2, #3
   19492:	3318      	adds	r3, #24
   19494:	4943      	ldr	r1, [pc, #268]	; (195a4 <ll_rl_rpa_update+0x17c>)
   19496:	4419      	add	r1, r3
   19498:	3106      	adds	r1, #6
   1949a:	4668      	mov	r0, sp
   1949c:	f7ea fac0 	bl	3a20 <bt_rpa_create>
				LL_ASSERT(!err);
   194a0:	2800      	cmp	r0, #0
   194a2:	d13c      	bne.n	1951e <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   194a4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194a8:	00d3      	lsls	r3, r2, #3
   194aa:	4a3e      	ldr	r2, [pc, #248]	; (195a4 <ll_rl_rpa_update+0x17c>)
   194ac:	5cd3      	ldrb	r3, [r2, r3]
   194ae:	f013 0f08 	tst.w	r3, #8
   194b2:	d13a      	bne.n	1952a <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   194b4:	493b      	ldr	r1, [pc, #236]	; (195a4 <ll_rl_rpa_update+0x17c>)
   194b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   194ba:	00eb      	lsls	r3, r5, #3
   194bc:	5cca      	ldrb	r2, [r1, r3]
   194be:	f042 0202 	orr.w	r2, r2, #2
   194c2:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   194c4:	3401      	adds	r4, #1
   194c6:	b2e4      	uxtb	r4, r4
   194c8:	2c07      	cmp	r4, #7
   194ca:	d854      	bhi.n	19576 <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   194cc:	4625      	mov	r5, r4
   194ce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   194d2:	00d3      	lsls	r3, r2, #3
   194d4:	4a33      	ldr	r2, [pc, #204]	; (195a4 <ll_rl_rpa_update+0x17c>)
   194d6:	5cd3      	ldrb	r3, [r2, r3]
   194d8:	f013 0f01 	tst.w	r3, #1
   194dc:	d0f2      	beq.n	194c4 <ll_rl_rpa_update+0x9c>
   194de:	f1b8 0f00 	cmp.w	r8, #0
   194e2:	d107      	bne.n	194f4 <ll_rl_rpa_update+0xcc>
   194e4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   194e8:	00d3      	lsls	r3, r2, #3
   194ea:	4a2e      	ldr	r2, [pc, #184]	; (195a4 <ll_rl_rpa_update+0x17c>)
   194ec:	5cd3      	ldrb	r3, [r2, r3]
   194ee:	f013 0f02 	tst.w	r3, #2
   194f2:	d1e7      	bne.n	194c4 <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   194f4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194f8:	00d3      	lsls	r3, r2, #3
   194fa:	4a2a      	ldr	r2, [pc, #168]	; (195a4 <ll_rl_rpa_update+0x17c>)
   194fc:	5cd3      	ldrb	r3, [r2, r3]
   194fe:	f013 0f04 	tst.w	r3, #4
   19502:	d0cf      	beq.n	194a4 <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   19504:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19508:	00da      	lsls	r2, r3, #3
   1950a:	4b26      	ldr	r3, [pc, #152]	; (195a4 <ll_rl_rpa_update+0x17c>)
   1950c:	4413      	add	r3, r2
   1950e:	7dda      	ldrb	r2, [r3, #23]
   19510:	4b25      	ldr	r3, [pc, #148]	; (195a8 <ll_rl_rpa_update+0x180>)
   19512:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   19516:	330f      	adds	r3, #15
   19518:	2210      	movs	r2, #16
   1951a:	4669      	mov	r1, sp
   1951c:	e7b4      	b.n	19488 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1951e:	4040      	eors	r0, r0
   19520:	f380 8811 	msr	BASEPRI, r0
   19524:	f04f 0004 	mov.w	r0, #4
   19528:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1952a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1952e:	00d3      	lsls	r3, r2, #3
   19530:	481c      	ldr	r0, [pc, #112]	; (195a4 <ll_rl_rpa_update+0x17c>)
   19532:	4418      	add	r0, r3
   19534:	4669      	mov	r1, sp
   19536:	3007      	adds	r0, #7
   19538:	f7ea fa72 	bl	3a20 <bt_rpa_create>
				LL_ASSERT(!err);
   1953c:	b9a8      	cbnz	r0, 1956a <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1953e:	00ab      	lsls	r3, r5, #2
   19540:	442b      	add	r3, r5
   19542:	00da      	lsls	r2, r3, #3
   19544:	4b17      	ldr	r3, [pc, #92]	; (195a4 <ll_rl_rpa_update+0x17c>)
   19546:	eb03 0a02 	add.w	sl, r3, r2
   1954a:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1954e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19552:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   19556:	4b15      	ldr	r3, [pc, #84]	; (195ac <ll_rl_rpa_update+0x184>)
   19558:	449b      	add	fp, r3
   1955a:	2206      	movs	r2, #6
   1955c:	4669      	mov	r1, sp
   1955e:	4658      	mov	r0, fp
   19560:	f7e6 feae 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19564:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   19568:	e7a4      	b.n	194b4 <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1956a:	4040      	eors	r0, r0
   1956c:	f380 8811 	msr	BASEPRI, r0
   19570:	f04f 0004 	mov.w	r0, #4
   19574:	df02      	svc	2
	if (all) {
   19576:	f1b8 0f00 	cmp.w	r8, #0
   1957a:	d002      	beq.n	19582 <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1957c:	4b07      	ldr	r3, [pc, #28]	; (1959c <ll_rl_rpa_update+0x174>)
   1957e:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   19582:	f1b9 0f00 	cmp.w	r9, #0
   19586:	d102      	bne.n	1958e <ll_rl_rpa_update+0x166>
}
   19588:	b005      	add	sp, #20
   1958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1958e:	f7fd ffc9 	bl	17524 <radio_adv_is_enabled>
   19592:	2800      	cmp	r0, #0
   19594:	d0f8      	beq.n	19588 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   19596:	f7ff fef1 	bl	1937c <rpa_adv_refresh>
}
   1959a:	e7f5      	b.n	19588 <ll_rl_rpa_update+0x160>
   1959c:	20002950 	.word	0x20002950
   195a0:	20002afc 	.word	0x20002afc
   195a4:	20001870 	.word	0x20001870
   195a8:	200017f0 	.word	0x200017f0
   195ac:	200017b4 	.word	0x200017b4

000195b0 <rpa_timeout>:
{
   195b0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   195b2:	2001      	movs	r0, #1
   195b4:	f7ff ff38 	bl	19428 <ll_rl_rpa_update>
   195b8:	4b03      	ldr	r3, [pc, #12]	; (195c8 <rpa_timeout+0x18>)
   195ba:	681a      	ldr	r2, [r3, #0]
   195bc:	4903      	ldr	r1, [pc, #12]	; (195cc <rpa_timeout+0x1c>)
   195be:	4804      	ldr	r0, [pc, #16]	; (195d0 <rpa_timeout+0x20>)
   195c0:	f00f ff50 	bl	29464 <k_delayed_work_submit_to_queue>
   195c4:	bd08      	pop	{r3, pc}
   195c6:	bf00      	nop
   195c8:	20002afc 	.word	0x20002afc
   195cc:	200029c8 	.word	0x200029c8
   195d0:	20002b10 	.word	0x20002b10

000195d4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   195d4:	2008      	movs	r0, #8
   195d6:	4770      	bx	lr

000195d8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   195d8:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   195da:	2000      	movs	r0, #0
   195dc:	f7ff fb74 	bl	18cc8 <rl_access_check>
   195e0:	b908      	cbnz	r0, 195e6 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   195e2:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   195e4:	bd08      	pop	{r3, pc}
	rl_clear();
   195e6:	f7ff fa7d 	bl	18ae4 <rl_clear>
	return 0;
   195ea:	2000      	movs	r0, #0
   195ec:	bd08      	pop	{r3, pc}
	...

000195f0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   195f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   195f4:	b082      	sub	sp, #8
   195f6:	4605      	mov	r5, r0
   195f8:	460c      	mov	r4, r1
   195fa:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   195fc:	2000      	movs	r0, #0
   195fe:	f7ff fb63 	bl	18cc8 <rl_access_check>
   19602:	b918      	cbnz	r0, 1960c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19604:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   19606:	b002      	add	sp, #8
   19608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1960c:	462f      	mov	r7, r5
   1960e:	f817 0b01 	ldrb.w	r0, [r7], #1
   19612:	f10d 0207 	add.w	r2, sp, #7
   19616:	4639      	mov	r1, r7
   19618:	f7ff fca4 	bl	18f64 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1961c:	2807      	cmp	r0, #7
   1961e:	d801      	bhi.n	19624 <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   19620:	2012      	movs	r0, #18
   19622:	e7f0      	b.n	19606 <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   19624:	f89d 8007 	ldrb.w	r8, [sp, #7]
   19628:	f1b8 0f07 	cmp.w	r8, #7
   1962c:	d901      	bls.n	19632 <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1962e:	2007      	movs	r0, #7
   19630:	e7e9      	b.n	19606 <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19632:	f8df a130 	ldr.w	sl, [pc, #304]	; 19764 <ll_rl_add+0x174>
   19636:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1963a:	4443      	add	r3, r8
   1963c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   19640:	eb0a 0009 	add.w	r0, sl, r9
   19644:	2206      	movs	r2, #6
   19646:	4639      	mov	r1, r7
   19648:	3001      	adds	r0, #1
   1964a:	f7e6 fe39 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1964e:	782a      	ldrb	r2, [r5, #0]
   19650:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19654:	f362 1386 	bfi	r3, r2, #6, #1
   19658:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1965c:	2110      	movs	r1, #16
   1965e:	4620      	mov	r0, r4
   19660:	f7f5 f8f4 	bl	e84c <mem_nz>
   19664:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19668:	f360 0382 	bfi	r3, r0, #2, #1
   1966c:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   19670:	2110      	movs	r1, #16
   19672:	4630      	mov	r0, r6
   19674:	f7f5 f8ea 	bl	e84c <mem_nz>
   19678:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1967c:	f360 03c3 	bfi	r3, r0, #3, #1
   19680:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   19684:	f013 0f04 	tst.w	r3, #4
   19688:	d016      	beq.n	196b8 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1968a:	4933      	ldr	r1, [pc, #204]	; (19758 <ll_rl_add+0x168>)
   1968c:	780a      	ldrb	r2, [r1, #0]
   1968e:	4653      	mov	r3, sl
   19690:	444b      	add	r3, r9
   19692:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   19694:	4b31      	ldr	r3, [pc, #196]	; (1975c <ll_rl_add+0x16c>)
   19696:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1969a:	1c53      	adds	r3, r2, #1
   1969c:	700b      	strb	r3, [r1, #0]
   1969e:	340f      	adds	r4, #15
   196a0:	4b2f      	ldr	r3, [pc, #188]	; (19760 <ll_rl_add+0x170>)
   196a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   196a6:	2210      	movs	r2, #16
   196a8:	e004      	b.n	196b4 <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   196aa:	7821      	ldrb	r1, [r4, #0]
   196ac:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   196ae:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   196b0:	3c01      	subs	r4, #1
   196b2:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   196b4:	2a00      	cmp	r2, #0
   196b6:	d1f8      	bne.n	196aa <ll_rl_add+0xba>
	if (rl[i].lirk) {
   196b8:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   196bc:	00d3      	lsls	r3, r2, #3
   196be:	4a29      	ldr	r2, [pc, #164]	; (19764 <ll_rl_add+0x174>)
   196c0:	5cd3      	ldrb	r3, [r2, r3]
   196c2:	f013 0f08 	tst.w	r3, #8
   196c6:	d12f      	bne.n	19728 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   196c8:	4e26      	ldr	r6, [pc, #152]	; (19764 <ll_rl_add+0x174>)
   196ca:	ea4f 0488 	mov.w	r4, r8, lsl #2
   196ce:	eb04 0208 	add.w	r2, r4, r8
   196d2:	00d3      	lsls	r3, r2, #3
   196d4:	3318      	adds	r3, #24
   196d6:	2206      	movs	r2, #6
   196d8:	2100      	movs	r1, #0
   196da:	18f0      	adds	r0, r6, r3
   196dc:	f011 f9ee 	bl	2aabc <memset>
	rl[i].rpas_ready = 0;
   196e0:	4444      	add	r4, r8
   196e2:	00e2      	lsls	r2, r4, #3
   196e4:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   196e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   196ea:	f36f 1304 	bfc	r3, #4, #1
   196ee:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   196f0:	2200      	movs	r2, #0
   196f2:	4639      	mov	r1, r7
   196f4:	7828      	ldrb	r0, [r5, #0]
   196f6:	f7ff fa0b 	bl	18b10 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   196fa:	2807      	cmp	r0, #7
   196fc:	d822      	bhi.n	19744 <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   196fe:	4b1a      	ldr	r3, [pc, #104]	; (19768 <ll_rl_add+0x178>)
   19700:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19704:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   19708:	00e3      	lsls	r3, r4, #3
   1970a:	5cf2      	ldrb	r2, [r6, r3]
   1970c:	f042 0220 	orr.w	r2, r2, #32
   19710:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   19712:	4914      	ldr	r1, [pc, #80]	; (19764 <ll_rl_add+0x174>)
   19714:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   19718:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1971c:	5cca      	ldrb	r2, [r1, r3]
   1971e:	f042 0201 	orr.w	r2, r2, #1
   19722:	54ca      	strb	r2, [r1, r3]
	return 0;
   19724:	2000      	movs	r0, #0
   19726:	e76e      	b.n	19606 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   19728:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1972c:	4443      	add	r3, r8
   1972e:	00da      	lsls	r2, r3, #3
   19730:	4c0c      	ldr	r4, [pc, #48]	; (19764 <ll_rl_add+0x174>)
   19732:	4414      	add	r4, r2
   19734:	2210      	movs	r2, #16
   19736:	4631      	mov	r1, r6
   19738:	1de0      	adds	r0, r4, #7
   1973a:	f7e6 fdc1 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1973e:	2300      	movs	r3, #0
   19740:	6263      	str	r3, [r4, #36]	; 0x24
   19742:	e7c1      	b.n	196c8 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   19744:	4a07      	ldr	r2, [pc, #28]	; (19764 <ll_rl_add+0x174>)
   19746:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1974a:	00cb      	lsls	r3, r1, #3
   1974c:	5cd1      	ldrb	r1, [r2, r3]
   1974e:	f36f 1145 	bfc	r1, #5, #1
   19752:	54d1      	strb	r1, [r2, r3]
   19754:	e7dd      	b.n	19712 <ll_rl_add+0x122>
   19756:	bf00      	nop
   19758:	200017e4 	.word	0x200017e4
   1975c:	200017e8 	.word	0x200017e8
   19760:	200017f0 	.word	0x200017f0
   19764:	20001870 	.word	0x20001870
   19768:	200019e8 	.word	0x200019e8

0001976c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1976c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19770:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   19772:	2000      	movs	r0, #0
   19774:	f7ff faa8 	bl	18cc8 <rl_access_check>
   19778:	b910      	cbnz	r0, 19780 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1977a:	200c      	movs	r0, #12
   1977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19780:	4626      	mov	r6, r4
   19782:	f816 0b01 	ldrb.w	r0, [r6], #1
   19786:	2200      	movs	r2, #0
   19788:	4631      	mov	r1, r6
   1978a:	f7ff fbeb 	bl	18f64 <ll_rl_find>
   1978e:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   19790:	2807      	cmp	r0, #7
   19792:	d902      	bls.n	1979a <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19794:	2002      	movs	r0, #2
}
   19796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1979a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1979e:	00d3      	lsls	r3, r2, #3
   197a0:	4a2d      	ldr	r2, [pc, #180]	; (19858 <ll_rl_remove+0xec>)
   197a2:	5cd3      	ldrb	r3, [r2, r3]
   197a4:	f013 0f04 	tst.w	r3, #4
   197a8:	d03e      	beq.n	19828 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   197aa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   197ae:	00da      	lsls	r2, r3, #3
   197b0:	4b29      	ldr	r3, [pc, #164]	; (19858 <ll_rl_remove+0xec>)
   197b2:	4413      	add	r3, r2
   197b4:	7ddf      	ldrb	r7, [r3, #23]
   197b6:	4b29      	ldr	r3, [pc, #164]	; (1985c <ll_rl_remove+0xf0>)
   197b8:	781b      	ldrb	r3, [r3, #0]
   197ba:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   197bc:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   197c0:	d02e      	beq.n	19820 <ll_rl_remove+0xb4>
   197c2:	4547      	cmp	r7, r8
   197c4:	d02c      	beq.n	19820 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   197c6:	4826      	ldr	r0, [pc, #152]	; (19860 <ll_rl_remove+0xf4>)
   197c8:	2210      	movs	r2, #16
   197ca:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   197ce:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   197d2:	f7e6 fd75 	bl	2c0 <memcpy>
				for (k = 0;
   197d6:	2300      	movs	r3, #0
   197d8:	e001      	b.n	197de <ll_rl_remove+0x72>
				     k++) {
   197da:	3301      	adds	r3, #1
   197dc:	b2db      	uxtb	r3, r3
				for (k = 0;
   197de:	2b07      	cmp	r3, #7
   197e0:	d81e      	bhi.n	19820 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   197e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   197e6:	00ca      	lsls	r2, r1, #3
   197e8:	491b      	ldr	r1, [pc, #108]	; (19858 <ll_rl_remove+0xec>)
   197ea:	5c8a      	ldrb	r2, [r1, r2]
   197ec:	f012 0f01 	tst.w	r2, #1
   197f0:	d0f3      	beq.n	197da <ll_rl_remove+0x6e>
   197f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   197f6:	00ca      	lsls	r2, r1, #3
   197f8:	4917      	ldr	r1, [pc, #92]	; (19858 <ll_rl_remove+0xec>)
   197fa:	5c8a      	ldrb	r2, [r1, r2]
   197fc:	f012 0f04 	tst.w	r2, #4
   19800:	d0eb      	beq.n	197da <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   19802:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19806:	00d1      	lsls	r1, r2, #3
   19808:	4a13      	ldr	r2, [pc, #76]	; (19858 <ll_rl_remove+0xec>)
   1980a:	440a      	add	r2, r1
   1980c:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1980e:	4590      	cmp	r8, r2
   19810:	d1e3      	bne.n	197da <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   19812:	2128      	movs	r1, #40	; 0x28
   19814:	4a10      	ldr	r2, [pc, #64]	; (19858 <ll_rl_remove+0xec>)
   19816:	fb01 2003 	mla	r0, r1, r3, r2
   1981a:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1981c:	4a11      	ldr	r2, [pc, #68]	; (19864 <ll_rl_remove+0xf8>)
   1981e:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   19820:	4a0e      	ldr	r2, [pc, #56]	; (1985c <ll_rl_remove+0xf0>)
   19822:	7813      	ldrb	r3, [r2, #0]
   19824:	3b01      	subs	r3, #1
   19826:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19828:	2200      	movs	r2, #0
   1982a:	4631      	mov	r1, r6
   1982c:	7820      	ldrb	r0, [r4, #0]
   1982e:	f7ff f96f 	bl	18b10 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   19832:	2807      	cmp	r0, #7
   19834:	d804      	bhi.n	19840 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19836:	4b0c      	ldr	r3, [pc, #48]	; (19868 <ll_rl_remove+0xfc>)
   19838:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1983c:	23ff      	movs	r3, #255	; 0xff
   1983e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   19840:	4a05      	ldr	r2, [pc, #20]	; (19858 <ll_rl_remove+0xec>)
   19842:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19846:	00eb      	lsls	r3, r5, #3
   19848:	5cd1      	ldrb	r1, [r2, r3]
   1984a:	f36f 0100 	bfc	r1, #0, #1
   1984e:	54d1      	strb	r1, [r2, r3]
		return 0;
   19850:	2000      	movs	r0, #0
   19852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19856:	bf00      	nop
   19858:	20001870 	.word	0x20001870
   1985c:	200017e4 	.word	0x200017e4
   19860:	200017f0 	.word	0x200017f0
   19864:	200017e8 	.word	0x200017e8
   19868:	200019e8 	.word	0x200019e8

0001986c <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1986c:	b510      	push	{r4, lr}
   1986e:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   19870:	795b      	ldrb	r3, [r3, #5]
   19872:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19876:	2b40      	cmp	r3, #64	; 0x40
   19878:	d000      	beq.n	1987c <ll_rl_crpa_set+0x10>
   1987a:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1987c:	b119      	cbz	r1, 19886 <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1987e:	2200      	movs	r2, #0
   19880:	f7ff fb70 	bl	18f64 <ll_rl_find>
   19884:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19886:	2a07      	cmp	r2, #7
   19888:	d8f7      	bhi.n	1987a <ll_rl_crpa_set+0xe>
   1988a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1988e:	00cb      	lsls	r3, r1, #3
   19890:	4907      	ldr	r1, [pc, #28]	; (198b0 <ll_rl_crpa_set+0x44>)
   19892:	5ccb      	ldrb	r3, [r1, r3]
   19894:	f013 0f01 	tst.w	r3, #1
   19898:	d0ef      	beq.n	1987a <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1989a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1989e:	00d0      	lsls	r0, r2, #3
   198a0:	3018      	adds	r0, #24
   198a2:	2206      	movs	r2, #6
   198a4:	4621      	mov	r1, r4
   198a6:	4b02      	ldr	r3, [pc, #8]	; (198b0 <ll_rl_crpa_set+0x44>)
   198a8:	4418      	add	r0, r3
   198aa:	f7e6 fd09 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   198ae:	e7e4      	b.n	1987a <ll_rl_crpa_set+0xe>
   198b0:	20001870 	.word	0x20001870

000198b4 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   198b4:	b538      	push	{r3, r4, r5, lr}
   198b6:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   198b8:	4601      	mov	r1, r0
   198ba:	f811 0b01 	ldrb.w	r0, [r1], #1
   198be:	2200      	movs	r2, #0
   198c0:	f7ff fb50 	bl	18f64 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   198c4:	2807      	cmp	r0, #7
   198c6:	d901      	bls.n	198cc <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198c8:	2002      	movs	r0, #2
   198ca:	bd38      	pop	{r3, r4, r5, pc}
   198cc:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   198ce:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   198d2:	00d8      	lsls	r0, r3, #3
   198d4:	3018      	adds	r0, #24
   198d6:	2106      	movs	r1, #6
   198d8:	4b09      	ldr	r3, [pc, #36]	; (19900 <ll_rl_crpa_get+0x4c>)
   198da:	4418      	add	r0, r3
   198dc:	f7f4 ffb6 	bl	e84c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   198e0:	b908      	cbnz	r0, 198e6 <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198e2:	2002      	movs	r0, #2
}
   198e4:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   198e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   198ea:	00e1      	lsls	r1, r4, #3
   198ec:	3118      	adds	r1, #24
   198ee:	2206      	movs	r2, #6
   198f0:	4b03      	ldr	r3, [pc, #12]	; (19900 <ll_rl_crpa_get+0x4c>)
   198f2:	4419      	add	r1, r3
   198f4:	4628      	mov	r0, r5
   198f6:	f7e6 fce3 	bl	2c0 <memcpy>
			return 0;
   198fa:	2000      	movs	r0, #0
   198fc:	bd38      	pop	{r3, r4, r5, pc}
   198fe:	bf00      	nop
   19900:	20001870 	.word	0x20001870

00019904 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   19904:	b510      	push	{r4, lr}
   19906:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19908:	4601      	mov	r1, r0
   1990a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1990e:	2200      	movs	r2, #0
   19910:	f7ff fb28 	bl	18f64 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19914:	2807      	cmp	r0, #7
   19916:	d901      	bls.n	1991c <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19918:	2002      	movs	r0, #2
}
   1991a:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1991c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19920:	00c2      	lsls	r2, r0, #3
   19922:	4b04      	ldr	r3, [pc, #16]	; (19934 <ll_rl_lrpa_get+0x30>)
   19924:	4413      	add	r3, r2
   19926:	2206      	movs	r2, #6
   19928:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1992a:	4620      	mov	r0, r4
   1992c:	f7e6 fcc8 	bl	2c0 <memcpy>
		return 0;
   19930:	2000      	movs	r0, #0
   19932:	bd10      	pop	{r4, pc}
   19934:	20001870 	.word	0x20001870

00019938 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   19938:	b510      	push	{r4, lr}
   1993a:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1993c:	2000      	movs	r0, #0
   1993e:	f7ff f9c3 	bl	18cc8 <rl_access_check>
   19942:	b908      	cbnz	r0, 19948 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19944:	200c      	movs	r0, #12
   19946:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   19948:	b11c      	cbz	r4, 19952 <ll_rl_enable+0x1a>
   1994a:	2c01      	cmp	r4, #1
   1994c:	d005      	beq.n	1995a <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1994e:	2012      	movs	r0, #18
	}

	return 0;
}
   19950:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   19952:	2000      	movs	r0, #0
   19954:	4b03      	ldr	r3, [pc, #12]	; (19964 <ll_rl_enable+0x2c>)
   19956:	7018      	strb	r0, [r3, #0]
		break;
   19958:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1995a:	2201      	movs	r2, #1
   1995c:	4b01      	ldr	r3, [pc, #4]	; (19964 <ll_rl_enable+0x2c>)
   1995e:	701a      	strb	r2, [r3, #0]
	return 0;
   19960:	2000      	movs	r0, #0
		break;
   19962:	bd10      	pop	{r4, pc}
   19964:	200019b0 	.word	0x200019b0

00019968 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   19968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1996c:	fb03 f000 	mul.w	r0, r3, r0
   19970:	4b01      	ldr	r3, [pc, #4]	; (19978 <ll_rl_timeout_set+0x10>)
   19972:	6018      	str	r0, [r3, #0]
   19974:	4770      	bx	lr
   19976:	bf00      	nop
   19978:	20002afc 	.word	0x20002afc

0001997c <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1997c:	b538      	push	{r3, r4, r5, lr}
   1997e:	4604      	mov	r4, r0
   19980:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   19982:	2000      	movs	r0, #0
   19984:	f7ff f9a0 	bl	18cc8 <rl_access_check>
   19988:	b908      	cbnz	r0, 1998e <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1998a:	200c      	movs	r0, #12
   1998c:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1998e:	4621      	mov	r1, r4
   19990:	f811 0b01 	ldrb.w	r0, [r1], #1
   19994:	2200      	movs	r2, #0
   19996:	f7ff fae5 	bl	18f64 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1999a:	2807      	cmp	r0, #7
   1999c:	d901      	bls.n	199a2 <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1999e:	2002      	movs	r0, #2
   199a0:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   199a2:	b11d      	cbz	r5, 199ac <ll_priv_mode_set+0x30>
   199a4:	2d01      	cmp	r5, #1
   199a6:	d00b      	beq.n	199c0 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   199a8:	2012      	movs	r0, #18
	}

	return 0;
}
   199aa:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   199ac:	4a09      	ldr	r2, [pc, #36]	; (199d4 <ll_priv_mode_set+0x58>)
   199ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   199b2:	00c3      	lsls	r3, r0, #3
   199b4:	5cd1      	ldrb	r1, [r2, r3]
   199b6:	f36f 1104 	bfc	r1, #4, #1
   199ba:	54d1      	strb	r1, [r2, r3]
	return 0;
   199bc:	2000      	movs	r0, #0
			break;
   199be:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   199c0:	4904      	ldr	r1, [pc, #16]	; (199d4 <ll_priv_mode_set+0x58>)
   199c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   199c6:	00c3      	lsls	r3, r0, #3
   199c8:	5cca      	ldrb	r2, [r1, r3]
   199ca:	f042 0210 	orr.w	r2, r2, #16
   199ce:	54ca      	strb	r2, [r1, r3]
	return 0;
   199d0:	2000      	movs	r0, #0
			break;
   199d2:	bd38      	pop	{r3, r4, r5, pc}
   199d4:	20001870 	.word	0x20001870

000199d8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   199d8:	b538      	push	{r3, r4, r5, lr}
   199da:	4605      	mov	r5, r0
	wl_anon = 0;
   199dc:	2400      	movs	r4, #0
   199de:	4b0e      	ldr	r3, [pc, #56]	; (19a18 <ll_filter_reset+0x40>)
   199e0:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   199e2:	f7ff f86b 	bl	18abc <wl_clear>

	rl_enable = 0;
   199e6:	4b0d      	ldr	r3, [pc, #52]	; (19a1c <ll_filter_reset+0x44>)
   199e8:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   199ea:	4a0d      	ldr	r2, [pc, #52]	; (19a20 <ll_filter_reset+0x48>)
   199ec:	4b0d      	ldr	r3, [pc, #52]	; (19a24 <ll_filter_reset+0x4c>)
   199ee:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   199f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   199f8:	4b0b      	ldr	r3, [pc, #44]	; (19a28 <ll_filter_reset+0x50>)
   199fa:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   199fe:	f7ff f871 	bl	18ae4 <rl_clear>
	if (init) {
   19a02:	b91d      	cbnz	r5, 19a0c <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   19a04:	4809      	ldr	r0, [pc, #36]	; (19a2c <ll_filter_reset+0x54>)
   19a06:	f00f fcd3 	bl	293b0 <k_delayed_work_cancel>
   19a0a:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   19a0c:	4908      	ldr	r1, [pc, #32]	; (19a30 <ll_filter_reset+0x58>)
   19a0e:	4807      	ldr	r0, [pc, #28]	; (19a2c <ll_filter_reset+0x54>)
   19a10:	f00f fcb0 	bl	29374 <k_delayed_work_init>
   19a14:	bd38      	pop	{r3, r4, r5, pc}
   19a16:	bf00      	nop
   19a18:	20002958 	.word	0x20002958
   19a1c:	200019b0 	.word	0x200019b0
   19a20:	000dbba0 	.word	0x000dbba0
   19a24:	20002afc 	.word	0x20002afc
   19a28:	20002950 	.word	0x20002950
   19a2c:	200029c8 	.word	0x200029c8
   19a30:	000195b1 	.word	0x000195b1

00019a34 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   19a34:	4800      	ldr	r0, [pc, #0]	; (19a38 <ll_adv_set_get+0x4>)
   19a36:	4770      	bx	lr
   19a38:	20001a5c 	.word	0x20001a5c

00019a3c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   19a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a40:	b087      	sub	sp, #28
   19a42:	4689      	mov	r9, r1
   19a44:	4614      	mov	r4, r2
   19a46:	461e      	mov	r6, r3
   19a48:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   19a4c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   19a50:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19a54:	4b89      	ldr	r3, [pc, #548]	; (19c7c <ll_adv_params_set+0x240>)
   19a56:	e893 0003 	ldmia.w	r3, {r0, r1}
   19a5a:	9004      	str	r0, [sp, #16]
   19a5c:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   19a60:	f7fd fd60 	bl	17524 <radio_adv_is_enabled>
   19a64:	9001      	str	r0, [sp, #4]
   19a66:	b128      	cbz	r0, 19a74 <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a68:	230c      	movs	r3, #12
   19a6a:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   19a6c:	9801      	ldr	r0, [sp, #4]
   19a6e:	b007      	add	sp, #28
   19a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   19a74:	4b82      	ldr	r3, [pc, #520]	; (19c80 <ll_adv_params_set+0x244>)
   19a76:	7a1a      	ldrb	r2, [r3, #8]
   19a78:	2101      	movs	r1, #1
   19a7a:	f361 0202 	bfi	r2, r1, #0, #3
   19a7e:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   19a80:	2e04      	cmp	r6, #4
   19a82:	d90f      	bls.n	19aa4 <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   19a84:	f019 0f10 	tst.w	r9, #16
   19a88:	d071      	beq.n	19b6e <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   19a8a:	4b7c      	ldr	r3, [pc, #496]	; (19c7c <ll_adv_params_set+0x240>)
   19a8c:	689b      	ldr	r3, [r3, #8]
   19a8e:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   19a90:	f009 0303 	and.w	r3, r9, #3
   19a94:	aa06      	add	r2, sp, #24
   19a96:	4413      	add	r3, r2
   19a98:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   19a9c:	f019 0f08 	tst.w	r9, #8
   19aa0:	d000      	beq.n	19aa4 <ll_adv_params_set+0x68>
				adv_type = 0x01;
   19aa2:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   19aa4:	2e01      	cmp	r6, #1
   19aa6:	d071      	beq.n	19b8c <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   19aa8:	4b75      	ldr	r3, [pc, #468]	; (19c80 <ll_adv_params_set+0x244>)
   19aaa:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   19aac:	4a74      	ldr	r2, [pc, #464]	; (19c80 <ll_adv_params_set+0x244>)
   19aae:	7813      	ldrb	r3, [r2, #0]
   19ab0:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   19ab4:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   19ab8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   19abc:	f361 03c4 	bfi	r3, r1, #3, #2
   19ac0:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   19ac2:	f7fd fd27 	bl	17514 <radio_adv_data_get>
   19ac6:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19ac8:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   19acc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19ad0:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   19ad4:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   19ad8:	ab06      	add	r3, sp, #24
   19ada:	441e      	add	r6, r3
   19adc:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   19ae0:	5d03      	ldrb	r3, [r0, r4]
   19ae2:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   19ae6:	f36f 1304 	bfc	r3, #4, #1
   19aea:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19aec:	f003 030f 	and.w	r3, r3, #15
   19af0:	2b01      	cmp	r3, #1
   19af2:	d94f      	bls.n	19b94 <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   19af4:	5d03      	ldrb	r3, [r0, r4]
   19af6:	f36f 1345 	bfc	r3, #5, #1
   19afa:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   19afc:	4a60      	ldr	r2, [pc, #384]	; (19c80 <ll_adv_params_set+0x244>)
   19afe:	7813      	ldrb	r3, [r2, #0]
   19b00:	f368 1346 	bfi	r3, r8, #5, #2
   19b04:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19b0a:	2b40      	cmp	r3, #64	; 0x40
   19b0c:	d047      	beq.n	19b9e <ll_adv_params_set+0x162>
   19b0e:	2b60      	cmp	r3, #96	; 0x60
   19b10:	d045      	beq.n	19b9e <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   19b12:	f008 0801 	and.w	r8, r8, #1
   19b16:	5d3b      	ldrb	r3, [r7, r4]
   19b18:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19b1c:	f36f 13c7 	bfc	r3, #7, #1
   19b20:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19b22:	f003 030f 	and.w	r3, r3, #15
   19b26:	2b01      	cmp	r3, #1
   19b28:	d044      	beq.n	19bb4 <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   19b2a:	2b07      	cmp	r3, #7
   19b2c:	d050      	beq.n	19bd0 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   19b2e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   19b32:	b913      	cbnz	r3, 19b3a <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   19b34:	2306      	movs	r3, #6
   19b36:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   19b3a:	f7fd fcef 	bl	1751c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19b3e:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   19b42:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   19b46:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   19b4a:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19b4c:	5c83      	ldrb	r3, [r0, r2]
   19b4e:	2404      	movs	r4, #4
   19b50:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   19b54:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   19b58:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19b5c:	f36f 13c7 	bfc	r3, #7, #1
   19b60:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   19b62:	784b      	ldrb	r3, [r1, #1]
   19b64:	2b00      	cmp	r3, #0
   19b66:	d181      	bne.n	19a6c <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   19b68:	2306      	movs	r3, #6
   19b6a:	704b      	strb	r3, [r1, #1]
   19b6c:	e77e      	b.n	19a6c <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   19b6e:	f009 0303 	and.w	r3, r9, #3
   19b72:	2b03      	cmp	r3, #3
   19b74:	d07c      	beq.n	19c70 <ll_adv_params_set+0x234>
   19b76:	f009 030c 	and.w	r3, r9, #12
   19b7a:	2b0c      	cmp	r3, #12
   19b7c:	d07b      	beq.n	19c76 <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   19b7e:	4b40      	ldr	r3, [pc, #256]	; (19c80 <ll_adv_params_set+0x244>)
   19b80:	7a1a      	ldrb	r2, [r3, #8]
   19b82:	f365 0202 	bfi	r2, r5, #0, #3
   19b86:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   19b88:	2605      	movs	r6, #5
   19b8a:	e78b      	b.n	19aa4 <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   19b8c:	2200      	movs	r2, #0
   19b8e:	4b3c      	ldr	r3, [pc, #240]	; (19c80 <ll_adv_params_set+0x244>)
   19b90:	60da      	str	r2, [r3, #12]
   19b92:	e78b      	b.n	19aac <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   19b94:	5d03      	ldrb	r3, [r0, r4]
   19b96:	f043 0320 	orr.w	r3, r3, #32
   19b9a:	5503      	strb	r3, [r0, r4]
   19b9c:	e7ae      	b.n	19afc <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   19b9e:	4838      	ldr	r0, [pc, #224]	; (19c80 <ll_adv_params_set+0x244>)
   19ba0:	7803      	ldrb	r3, [r0, #0]
   19ba2:	f36b 13c7 	bfi	r3, fp, #7, #1
   19ba6:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   19baa:	2206      	movs	r2, #6
   19bac:	9912      	ldr	r1, [sp, #72]	; 0x48
   19bae:	f7e6 fb87 	bl	2c0 <memcpy>
   19bb2:	e7ae      	b.n	19b12 <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   19bb4:	5d3b      	ldrb	r3, [r7, r4]
   19bb6:	f36b 13c7 	bfi	r3, fp, #7, #1
   19bba:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   19bbc:	2206      	movs	r2, #6
   19bbe:	9912      	ldr	r1, [sp, #72]	; 0x48
   19bc0:	f10a 0008 	add.w	r0, sl, #8
   19bc4:	f7e6 fb7c 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   19bc8:	230c      	movs	r3, #12
   19bca:	f88a 3001 	strb.w	r3, [sl, #1]
   19bce:	e7b4      	b.n	19b3a <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   19bd0:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   19bd4:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   19bd8:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   19bdc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19be0:	f369 1287 	bfi	r2, r9, #6, #2
   19be4:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   19be8:	2200      	movs	r2, #0
   19bea:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   19bee:	f019 0f20 	tst.w	r9, #32
   19bf2:	d10e      	bne.n	19c12 <ll_adv_params_set+0x1d6>
   19bf4:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19bf8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   19bfc:	d109      	bne.n	19c12 <ll_adv_params_set+0x1d6>
   19bfe:	2d04      	cmp	r5, #4
   19c00:	d007      	beq.n	19c12 <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   19c02:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19c06:	f042 0201 	orr.w	r2, r2, #1
   19c0a:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   19c0e:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   19c12:	f019 0f40 	tst.w	r9, #64	; 0x40
   19c16:	d006      	beq.n	19c26 <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   19c18:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19c20:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   19c24:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   19c26:	1acb      	subs	r3, r1, r3
   19c28:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   19c2a:	2b02      	cmp	r3, #2
   19c2c:	d916      	bls.n	19c5c <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   19c2e:	1e58      	subs	r0, r3, #1
   19c30:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19c34:	f360 0205 	bfi	r2, r0, #0, #6
   19c38:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   19c3c:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   19c40:	f89a 3003 	ldrb.w	r3, [sl, #3]
   19c44:	f013 0f40 	tst.w	r3, #64	; 0x40
   19c48:	f43f af77 	beq.w	19b3a <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   19c4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19c4e:	b16b      	cbz	r3, 19c6c <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   19c50:	781b      	ldrb	r3, [r3, #0]
   19c52:	2b7f      	cmp	r3, #127	; 0x7f
   19c54:	d006      	beq.n	19c64 <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   19c56:	f801 3c01 	strb.w	r3, [r1, #-1]
   19c5a:	e76e      	b.n	19b3a <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   19c5c:	2301      	movs	r3, #1
   19c5e:	f88a 3001 	strb.w	r3, [sl, #1]
   19c62:	e7ed      	b.n	19c40 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   19c64:	2300      	movs	r3, #0
   19c66:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19c68:	7013      	strb	r3, [r2, #0]
   19c6a:	e7f4      	b.n	19c56 <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   19c6c:	2300      	movs	r3, #0
   19c6e:	e7f2      	b.n	19c56 <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   19c70:	2312      	movs	r3, #18
   19c72:	9301      	str	r3, [sp, #4]
   19c74:	e6fa      	b.n	19a6c <ll_adv_params_set+0x30>
   19c76:	2312      	movs	r3, #18
   19c78:	9301      	str	r3, [sp, #4]
   19c7a:	e6f7      	b.n	19a6c <ll_adv_params_set+0x30>
   19c7c:	0002ee80 	.word	0x0002ee80
   19c80:	20001a5c 	.word	0x20001a5c

00019c84 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   19c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c88:	4606      	mov	r6, r0
   19c8a:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   19c8c:	f7fd fc42 	bl	17514 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19c90:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19c94:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19c98:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19c9c:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19c9e:	5c83      	ldrb	r3, [r0, r2]
   19ca0:	f003 030f 	and.w	r3, r3, #15
   19ca4:	2b01      	cmp	r3, #1
   19ca6:	d03e      	beq.n	19d26 <ll_adv_data_set+0xa2>
   19ca8:	4604      	mov	r4, r0
   19caa:	2b07      	cmp	r3, #7
   19cac:	d03b      	beq.n	19d26 <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   19cae:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19cb2:	429d      	cmp	r5, r3
   19cb4:	d039      	beq.n	19d2a <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19cb6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19cba:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19cbe:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19cc2:	f814 e002 	ldrb.w	lr, [r4, r2]
   19cc6:	5ce0      	ldrb	r0, [r4, r3]
   19cc8:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   19ccc:	f36f 1004 	bfc	r0, #4, #1
   19cd0:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   19cd2:	5ca0      	ldrb	r0, [r4, r2]
   19cd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19cd8:	f814 e003 	ldrb.w	lr, [r4, r3]
   19cdc:	f360 1e45 	bfi	lr, r0, #5, #1
   19ce0:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   19ce4:	5ca0      	ldrb	r0, [r4, r2]
   19ce6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19cea:	fa5f fe8e 	uxtb.w	lr, lr
   19cee:	f360 1e86 	bfi	lr, r0, #6, #1
   19cf2:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   19cf6:	5ca2      	ldrb	r2, [r4, r2]
   19cf8:	09d2      	lsrs	r2, r2, #7
   19cfa:	fa5f f08e 	uxtb.w	r0, lr
   19cfe:	f362 10c7 	bfi	r0, r2, #7, #1
   19d02:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   19d04:	2206      	movs	r2, #6
   19d06:	3102      	adds	r1, #2
   19d08:	f108 0002 	add.w	r0, r8, #2
   19d0c:	f7e6 fad8 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   19d10:	4632      	mov	r2, r6
   19d12:	4639      	mov	r1, r7
   19d14:	f108 0008 	add.w	r0, r8, #8
   19d18:	f7e6 fad2 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19d1c:	3606      	adds	r6, #6
   19d1e:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   19d22:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   19d2a:	3501      	adds	r5, #1
   19d2c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19d2e:	2d02      	cmp	r5, #2
   19d30:	d1c1      	bne.n	19cb6 <ll_adv_data_set+0x32>
			last = 0;
   19d32:	2500      	movs	r5, #0
   19d34:	e7bf      	b.n	19cb6 <ll_adv_data_set+0x32>

00019d36 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   19d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d3a:	4606      	mov	r6, r0
   19d3c:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   19d3e:	f7fd fbed 	bl	1751c <radio_scan_data_get>
   19d42:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   19d44:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   19d48:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19d4c:	429a      	cmp	r2, r3
   19d4e:	d031      	beq.n	19db4 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   19d50:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   19d52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19d56:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19d5a:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   19d5c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d60:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19d64:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19d68:	5ca0      	ldrb	r0, [r4, r2]
   19d6a:	f04f 0e04 	mov.w	lr, #4
   19d6e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   19d72:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   19d76:	f36f 1045 	bfc	r0, #5, #1
   19d7a:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   19d7c:	5ce0      	ldrb	r0, [r4, r3]
   19d7e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19d82:	5ca3      	ldrb	r3, [r4, r2]
   19d84:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   19d88:	f36f 13c7 	bfc	r3, #7, #1
   19d8c:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   19d8e:	1db3      	adds	r3, r6, #6
   19d90:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   19d94:	2206      	movs	r2, #6
   19d96:	3102      	adds	r1, #2
   19d98:	f108 0002 	add.w	r0, r8, #2
   19d9c:	f7e6 fa90 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   19da0:	4632      	mov	r2, r6
   19da2:	4639      	mov	r1, r7
   19da4:	f108 0008 	add.w	r0, r8, #8
   19da8:	f7e6 fa8a 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   19dac:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   19db4:	1c5d      	adds	r5, r3, #1
   19db6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19db8:	2d02      	cmp	r5, #2
   19dba:	d1ca      	bne.n	19d52 <ll_scan_data_set+0x1c>
			last = 0;
   19dbc:	2500      	movs	r5, #0
   19dbe:	e7c8      	b.n	19d52 <ll_scan_data_set+0x1c>

00019dc0 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   19dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19dc4:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   19dc6:	b120      	cbz	r0, 19dd2 <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   19dc8:	f7fd fbac 	bl	17524 <radio_adv_is_enabled>
   19dcc:	b130      	cbz	r0, 19ddc <ll_adv_enable+0x1c>
		return 0;
   19dce:	2000      	movs	r0, #0
   19dd0:	e001      	b.n	19dd6 <ll_adv_enable+0x16>
		return radio_adv_disable();
   19dd2:	f7fe fb27 	bl	18424 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   19dd6:	b002      	add	sp, #8
   19dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19ddc:	f7fd fb9a 	bl	17514 <radio_adv_data_get>
   19de0:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   19de2:	f7fd fb9b 	bl	1751c <radio_scan_data_get>
			[radio_adv_data->last][0];
   19de6:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   19dea:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19dee:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   19df2:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   19df4:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   19df8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19dfc:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19e00:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   19e02:	5d2b      	ldrb	r3, [r5, r4]
   19e04:	f003 030f 	and.w	r3, r3, #15
   19e08:	2b07      	cmp	r3, #7
   19e0a:	d023      	beq.n	19e54 <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   19e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 19ee0 <ll_adv_enable+0x120>
   19e10:	f898 0000 	ldrb.w	r0, [r8]
   19e14:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   19e18:	f7ff f874 	bl	18f04 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19e1c:	f898 3000 	ldrb.w	r3, [r8]
   19e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19e24:	2b40      	cmp	r3, #64	; 0x40
   19e26:	d02b      	beq.n	19e80 <ll_adv_enable+0xc0>
   19e28:	2b60      	cmp	r3, #96	; 0x60
   19e2a:	d029      	beq.n	19e80 <ll_adv_enable+0xc0>
		bool priv = false;
   19e2c:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   19e2e:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   19e32:	2b00      	cmp	r3, #0
   19e34:	d03b      	beq.n	19eae <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19e36:	4b2a      	ldr	r3, [pc, #168]	; (19ee0 <ll_adv_enable+0x120>)
   19e38:	7a18      	ldrb	r0, [r3, #8]
   19e3a:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   19e3c:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19e3e:	f8cd 8000 	str.w	r8, [sp]
   19e42:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   19e46:	f002 0207 	and.w	r2, r2, #7
   19e4a:	f000 0007 	and.w	r0, r0, #7
   19e4e:	f7fe f90b 	bl	18068 <radio_adv_enable>
	return status;
   19e52:	e7c0      	b.n	19dd6 <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   19e54:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   19e56:	78f3      	ldrb	r3, [r6, #3]
   19e58:	f013 0f01 	tst.w	r3, #1
   19e5c:	d102      	bne.n	19e64 <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19e5e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19e62:	e7e8      	b.n	19e36 <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   19e64:	5d28      	ldrb	r0, [r5, r4]
   19e66:	2100      	movs	r1, #0
   19e68:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e6c:	f7fe fdf4 	bl	18a58 <ll_addr_get>
   19e70:	2206      	movs	r2, #6
   19e72:	4601      	mov	r1, r0
   19e74:	4638      	mov	r0, r7
   19e76:	f7e6 fa23 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19e7a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19e7e:	e7da      	b.n	19e36 <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   19e80:	4917      	ldr	r1, [pc, #92]	; (19ee0 <ll_adv_enable+0x120>)
   19e82:	f811 0b02 	ldrb.w	r0, [r1], #2
   19e86:	2200      	movs	r2, #0
   19e88:	09c0      	lsrs	r0, r0, #7
   19e8a:	f7ff f86b 	bl	18f64 <ll_rl_find>
   19e8e:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   19e90:	28ff      	cmp	r0, #255	; 0xff
   19e92:	d002      	beq.n	19e9a <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   19e94:	2000      	movs	r0, #0
   19e96:	f7ff fac7 	bl	19428 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   19e9a:	4631      	mov	r1, r6
   19e9c:	4640      	mov	r0, r8
   19e9e:	f7ff f9f9 	bl	19294 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   19ea2:	4639      	mov	r1, r7
   19ea4:	4640      	mov	r0, r8
   19ea6:	f7ff f9f5 	bl	19294 <ll_rl_pdu_adv_update>
			priv = true;
   19eaa:	2301      	movs	r3, #1
   19eac:	e7c1      	b.n	19e32 <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19eae:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19eb0:	5d28      	ldrb	r0, [r5, r4]
   19eb2:	2100      	movs	r1, #0
   19eb4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19eb8:	f7fe fdce 	bl	18a58 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19ebc:	2206      	movs	r2, #6
   19ebe:	4601      	mov	r1, r0
   19ec0:	4630      	mov	r0, r6
   19ec2:	f7e6 f9fd 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19ec6:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19ec8:	5d28      	ldrb	r0, [r5, r4]
   19eca:	2100      	movs	r1, #0
   19ecc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19ed0:	f7fe fdc2 	bl	18a58 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19ed4:	2206      	movs	r2, #6
   19ed6:	4601      	mov	r1, r0
   19ed8:	4638      	mov	r0, r7
   19eda:	f7e6 f9f1 	bl	2c0 <memcpy>
   19ede:	e7aa      	b.n	19e36 <ll_adv_enable+0x76>
   19ee0:	20001a5c 	.word	0x20001a5c

00019ee4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   19ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ee6:	4607      	mov	r7, r0
   19ee8:	460e      	mov	r6, r1
   19eea:	4615      	mov	r5, r2
   19eec:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   19eee:	f7fd fb31 	bl	17554 <radio_scan_is_enabled>
   19ef2:	b110      	cbz	r0, 19efa <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ef4:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   19ef6:	4610      	mov	r0, r2
   19ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19efa:	4602      	mov	r2, r0
	ll_scan.type = type;
   19efc:	4906      	ldr	r1, [pc, #24]	; (19f18 <ll_scan_params_set+0x34>)
   19efe:	790b      	ldrb	r3, [r1, #4]
   19f00:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   19f04:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   19f06:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   19f08:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   19f0c:	f89d 0018 	ldrb.w	r0, [sp, #24]
   19f10:	f360 1387 	bfi	r3, r0, #6, #2
   19f14:	710b      	strb	r3, [r1, #4]
	return 0;
   19f16:	e7ee      	b.n	19ef6 <ll_scan_params_set+0x12>
   19f18:	20001a6c 	.word	0x20001a6c

00019f1c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   19f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f1e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   19f20:	b120      	cbz	r0, 19f2c <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   19f22:	f7fd fb17 	bl	17554 <radio_scan_is_enabled>
   19f26:	b128      	cbz	r0, 19f34 <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   19f28:	2000      	movs	r0, #0
   19f2a:	e001      	b.n	19f30 <ll_scan_enable+0x14>
		return radio_scan_disable();
   19f2c:	f7fe fbac 	bl	18688 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   19f30:	b005      	add	sp, #20
   19f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   19f34:	4c18      	ldr	r4, [pc, #96]	; (19f98 <ll_scan_enable+0x7c>)
   19f36:	7920      	ldrb	r0, [r4, #4]
   19f38:	0980      	lsrs	r0, r0, #6
   19f3a:	f7fe fffb 	bl	18f34 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   19f3e:	7923      	ldrb	r3, [r4, #4]
   19f40:	f013 0f01 	tst.w	r3, #1
   19f44:	d00d      	beq.n	19f62 <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19f46:	7923      	ldrb	r3, [r4, #4]
   19f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   19f4c:	2b20      	cmp	r3, #32
   19f4e:	d003      	beq.n	19f58 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19f50:	2b30      	cmp	r3, #48	; 0x30
   19f52:	d001      	beq.n	19f58 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   19f54:	2700      	movs	r7, #0
   19f56:	e005      	b.n	19f64 <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   19f58:	2000      	movs	r0, #0
   19f5a:	f7ff fa65 	bl	19428 <ll_rl_rpa_update>
		rpa_gen = 1;
   19f5e:	2701      	movs	r7, #1
   19f60:	e000      	b.n	19f64 <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   19f62:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19f64:	4d0c      	ldr	r5, [pc, #48]	; (19f98 <ll_scan_enable+0x7c>)
   19f66:	792c      	ldrb	r4, [r5, #4]
   19f68:	f004 060f 	and.w	r6, r4, #15
   19f6c:	f3c4 1400 	ubfx	r4, r4, #4, #1
   19f70:	2100      	movs	r1, #0
   19f72:	4620      	mov	r0, r4
   19f74:	f7fe fd70 	bl	18a58 <ll_addr_get>
   19f78:	882b      	ldrh	r3, [r5, #0]
   19f7a:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   19f7c:	792a      	ldrb	r2, [r5, #4]
   19f7e:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19f80:	25ff      	movs	r5, #255	; 0xff
   19f82:	9503      	str	r5, [sp, #12]
   19f84:	9702      	str	r7, [sp, #8]
   19f86:	9201      	str	r2, [sp, #4]
   19f88:	9100      	str	r1, [sp, #0]
   19f8a:	4602      	mov	r2, r0
   19f8c:	4621      	mov	r1, r4
   19f8e:	4630      	mov	r0, r6
   19f90:	f7fe fa7a 	bl	18488 <radio_scan_enable>
	return status;
   19f94:	e7cc      	b.n	19f30 <ll_scan_enable+0x14>
   19f96:	bf00      	nop
   19f98:	20001a6c 	.word	0x20001a6c

00019f9c <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   19f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19fa0:	b085      	sub	sp, #20
   19fa2:	4607      	mov	r7, r0
   19fa4:	4688      	mov	r8, r1
   19fa6:	4615      	mov	r5, r2
   19fa8:	461e      	mov	r6, r3
   19faa:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   19fae:	f7fd fad1 	bl	17554 <radio_scan_is_enabled>
   19fb2:	b120      	cbz	r0, 19fbe <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fb4:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   19fb6:	4618      	mov	r0, r3
   19fb8:	b005      	add	sp, #20
   19fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   19fbe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   19fc2:	9300      	str	r3, [sp, #0]
   19fc4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   19fc8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   19fcc:	990c      	ldr	r1, [sp, #48]	; 0x30
   19fce:	4630      	mov	r0, r6
   19fd0:	f7fd fada 	bl	17588 <radio_connect_enable>
	if (status) {
   19fd4:	4603      	mov	r3, r0
   19fd6:	2800      	cmp	r0, #0
   19fd8:	d1ed      	bne.n	19fb6 <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   19fda:	4628      	mov	r0, r5
   19fdc:	f7fe ffaa 	bl	18f34 <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   19fe0:	b1c5      	cbz	r5, 1a014 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   19fe2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19fe6:	1ea3      	subs	r3, r4, #2
   19fe8:	b2db      	uxtb	r3, r3
   19fea:	2b01      	cmp	r3, #1
   19fec:	d91f      	bls.n	1a02e <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   19fee:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   19ff0:	2100      	movs	r1, #0
   19ff2:	4620      	mov	r0, r4
   19ff4:	f7fe fd30 	bl	18a58 <ll_addr_get>
   19ff8:	f8cd 900c 	str.w	r9, [sp, #12]
   19ffc:	9602      	str	r6, [sp, #8]
   19ffe:	9501      	str	r5, [sp, #4]
   1a000:	f8cd 8000 	str.w	r8, [sp]
   1a004:	463b      	mov	r3, r7
   1a006:	4602      	mov	r2, r0
   1a008:	4621      	mov	r1, r4
   1a00a:	2000      	movs	r0, #0
   1a00c:	f7fe fa3c 	bl	18488 <radio_scan_enable>
   1a010:	4603      	mov	r3, r0
   1a012:	e7d0      	b.n	19fb6 <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1a014:	f7ff f936 	bl	19284 <ctrl_rl_enabled>
   1a018:	b910      	cbnz	r0, 1a020 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1a01a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1a01e:	e7e2      	b.n	19fe6 <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1a020:	2200      	movs	r2, #0
   1a022:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a024:	4630      	mov	r0, r6
   1a026:	f7fe ff9d 	bl	18f64 <ll_rl_find>
   1a02a:	4681      	mov	r9, r0
   1a02c:	e7db      	b.n	19fe6 <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1a02e:	2000      	movs	r0, #0
   1a030:	f7ff f9fa 	bl	19428 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1a034:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1a038:	2601      	movs	r6, #1
   1a03a:	e7d9      	b.n	19ff0 <ll_create_connection+0x54>

0001a03c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1a03c:	4b01      	ldr	r3, [pc, #4]	; (1a044 <pool_id+0x8>)
   1a03e:	1ac0      	subs	r0, r0, r3
}
   1a040:	1140      	asrs	r0, r0, #5
   1a042:	4770      	bx	lr
   1a044:	2000d08c 	.word	0x2000d08c

0001a048 <net_buf_pool_get>:
}
   1a048:	4b01      	ldr	r3, [pc, #4]	; (1a050 <net_buf_pool_get+0x8>)
   1a04a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a04e:	4770      	bx	lr
   1a050:	2000d08c 	.word	0x2000d08c

0001a054 <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1a054:	2300      	movs	r3, #0
   1a056:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1a058:	f100 0310 	add.w	r3, r0, #16
   1a05c:	6083      	str	r3, [r0, #8]
   1a05e:	4770      	bx	lr

0001a060 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1a060:	b570      	push	{r4, r5, r6, lr}
   1a062:	4605      	mov	r5, r0
	__asm__ volatile(
   1a064:	f04f 0320 	mov.w	r3, #32
   1a068:	f3ef 8611 	mrs	r6, BASEPRI
   1a06c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a070:	8a43      	ldrh	r3, [r0, #18]
   1a072:	b373      	cbz	r3, 1a0d2 <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a074:	8a02      	ldrh	r2, [r0, #16]
   1a076:	4293      	cmp	r3, r2
   1a078:	d207      	bcs.n	1a08a <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1a07a:	2100      	movs	r1, #0
   1a07c:	f00e f83a 	bl	280f4 <k_queue_get>
			if (buf) {
   1a080:	4604      	mov	r4, r0
   1a082:	b110      	cbz	r0, 1a08a <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1a084:	f386 8811 	msr	BASEPRI, r6
   1a088:	e019      	b.n	1a0be <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1a08a:	8a6b      	ldrh	r3, [r5, #18]
   1a08c:	1e5a      	subs	r2, r3, #1
   1a08e:	826a      	strh	r2, [r5, #18]
   1a090:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1a094:	69ea      	ldr	r2, [r5, #28]
   1a096:	8a2c      	ldrh	r4, [r5, #16]
   1a098:	1ae4      	subs	r4, r4, r3
   1a09a:	8aab      	ldrh	r3, [r5, #20]
   1a09c:	3303      	adds	r3, #3
   1a09e:	f023 0303 	bic.w	r3, r3, #3
   1a0a2:	8ae9      	ldrh	r1, [r5, #22]
   1a0a4:	3103      	adds	r1, #3
   1a0a6:	f021 0103 	bic.w	r1, r1, #3
   1a0aa:	440b      	add	r3, r1
   1a0ac:	3310      	adds	r3, #16
   1a0ae:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1a0b2:	4628      	mov	r0, r5
   1a0b4:	f7ff ffc2 	bl	1a03c <pool_id>
   1a0b8:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1a0ba:	8aab      	ldrh	r3, [r5, #20]
   1a0bc:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1a0be:	2301      	movs	r3, #1
   1a0c0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1a0c2:	2300      	movs	r3, #0
   1a0c4:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1a0c6:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	f7ff ffc3 	bl	1a054 <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	bd70      	pop	{r4, r5, r6, pc}
   1a0d2:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1a0d6:	f00e f80d 	bl	280f4 <k_queue_get>
	if (!buf) {
   1a0da:	4604      	mov	r4, r0
   1a0dc:	2800      	cmp	r0, #0
   1a0de:	d1ee      	bne.n	1a0be <net_buf_alloc+0x5e>
   1a0e0:	e7f5      	b.n	1a0ce <net_buf_alloc+0x6e>

0001a0e2 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1a0e2:	b570      	push	{r4, r5, r6, lr}
   1a0e4:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1a0e6:	f00e f805 	bl	280f4 <k_queue_get>
	if (!buf) {
   1a0ea:	4606      	mov	r6, r0
   1a0ec:	b188      	cbz	r0, 1a112 <net_buf_get+0x30>
   1a0ee:	4604      	mov	r4, r0
   1a0f0:	e009      	b.n	1a106 <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1a0f2:	2100      	movs	r1, #0
   1a0f4:	4628      	mov	r0, r5
   1a0f6:	f00d fffd 	bl	280f4 <k_queue_get>
   1a0fa:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1a0fc:	7963      	ldrb	r3, [r4, #5]
   1a0fe:	f023 0301 	bic.w	r3, r3, #1
   1a102:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a104:	4604      	mov	r4, r0
   1a106:	7963      	ldrb	r3, [r4, #5]
   1a108:	f013 0f01 	tst.w	r3, #1
   1a10c:	d1f1      	bne.n	1a0f2 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1a10e:	2300      	movs	r3, #0
   1a110:	6023      	str	r3, [r4, #0]

	return buf;
}
   1a112:	4630      	mov	r0, r6
   1a114:	bd70      	pop	{r4, r5, r6, pc}

0001a116 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a116:	f100 0310 	add.w	r3, r0, #16
   1a11a:	4419      	add	r1, r3
   1a11c:	6081      	str	r1, [r0, #8]
   1a11e:	4770      	bx	lr

0001a120 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a120:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1a122:	460a      	mov	r2, r1
   1a124:	e004      	b.n	1a130 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1a126:	7953      	ldrb	r3, [r2, #5]
   1a128:	f043 0301 	orr.w	r3, r3, #1
   1a12c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1a12e:	4622      	mov	r2, r4
   1a130:	6814      	ldr	r4, [r2, #0]
   1a132:	2c00      	cmp	r4, #0
   1a134:	d1f7      	bne.n	1a126 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1a136:	f00d ffc1 	bl	280bc <k_queue_append_list>
   1a13a:	bd10      	pop	{r4, pc}

0001a13c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a13c:	b538      	push	{r3, r4, r5, lr}
   1a13e:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1a140:	e006      	b.n	1a150 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a142:	79a0      	ldrb	r0, [r4, #6]
   1a144:	f7ff ff80 	bl	1a048 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a148:	4621      	mov	r1, r4
   1a14a:	f00d ffb1 	bl	280b0 <k_queue_prepend>
{
   1a14e:	462c      	mov	r4, r5
	while (buf) {
   1a150:	b17c      	cbz	r4, 1a172 <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1a152:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1a154:	7923      	ldrb	r3, [r4, #4]
   1a156:	3b01      	subs	r3, #1
   1a158:	b2db      	uxtb	r3, r3
   1a15a:	7123      	strb	r3, [r4, #4]
   1a15c:	b94b      	cbnz	r3, 1a172 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1a15e:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1a160:	79a0      	ldrb	r0, [r4, #6]
   1a162:	f7ff ff71 	bl	1a048 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a166:	6983      	ldr	r3, [r0, #24]
   1a168:	2b00      	cmp	r3, #0
   1a16a:	d0ea      	beq.n	1a142 <net_buf_unref+0x6>
			pool->destroy(buf);
   1a16c:	4620      	mov	r0, r4
   1a16e:	4798      	blx	r3
   1a170:	e7ed      	b.n	1a14e <net_buf_unref+0x12>
   1a172:	bd38      	pop	{r3, r4, r5, pc}

0001a174 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a174:	7903      	ldrb	r3, [r0, #4]
   1a176:	3301      	adds	r3, #1
   1a178:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1a17a:	4770      	bx	lr

0001a17c <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1a17c:	e000      	b.n	1a180 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1a17e:	4618      	mov	r0, r3
	while (buf->frags) {
   1a180:	6803      	ldr	r3, [r0, #0]
   1a182:	2b00      	cmp	r3, #0
   1a184:	d1fb      	bne.n	1a17e <net_buf_frag_last+0x2>
	}

	return buf;
}
   1a186:	4770      	bx	lr

0001a188 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a188:	b570      	push	{r4, r5, r6, lr}
   1a18a:	4604      	mov	r4, r0
   1a18c:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1a18e:	6806      	ldr	r6, [r0, #0]
   1a190:	b11e      	cbz	r6, 1a19a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a192:	4608      	mov	r0, r1
   1a194:	f7ff fff2 	bl	1a17c <net_buf_frag_last>
   1a198:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a19a:	6025      	str	r5, [r4, #0]
   1a19c:	bd70      	pop	{r4, r5, r6, pc}

0001a19e <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a19e:	b538      	push	{r3, r4, r5, lr}
   1a1a0:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1a1a2:	b138      	cbz	r0, 1a1b4 <net_buf_frag_add+0x16>
   1a1a4:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a1a6:	f7ff ffe9 	bl	1a17c <net_buf_frag_last>
   1a1aa:	4629      	mov	r1, r5
   1a1ac:	f7ff ffec 	bl	1a188 <net_buf_frag_insert>

	return head;
   1a1b0:	4620      	mov	r0, r4
}
   1a1b2:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1a1b4:	4608      	mov	r0, r1
   1a1b6:	f7ff ffdd 	bl	1a174 <net_buf_ref>
   1a1ba:	bd38      	pop	{r3, r4, r5, pc}

0001a1bc <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1a1bc:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1a1be:	b108      	cbz	r0, 1a1c4 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1a1c0:	680a      	ldr	r2, [r1, #0]
   1a1c2:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1a1c4:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1a1c6:	2300      	movs	r3, #0
   1a1c8:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1a1ca:	4608      	mov	r0, r1
   1a1cc:	f7ff ffb6 	bl	1a13c <net_buf_unref>
#endif

	return next_frag;
}
   1a1d0:	4620      	mov	r0, r4
   1a1d2:	bd10      	pop	{r4, pc}

0001a1d4 <net_buf_simple_add>:
	return buf->data + buf->len;
   1a1d4:	6802      	ldr	r2, [r0, #0]
   1a1d6:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1a1d8:	4419      	add	r1, r3
   1a1da:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1a1dc:	18d0      	adds	r0, r2, r3
   1a1de:	4770      	bx	lr

0001a1e0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1a1e0:	b538      	push	{r3, r4, r5, lr}
   1a1e2:	460d      	mov	r5, r1
   1a1e4:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1a1e6:	4611      	mov	r1, r2
   1a1e8:	f7ff fff4 	bl	1a1d4 <net_buf_simple_add>
   1a1ec:	4622      	mov	r2, r4
   1a1ee:	4629      	mov	r1, r5
   1a1f0:	f7e6 f866 	bl	2c0 <memcpy>
}
   1a1f4:	bd38      	pop	{r3, r4, r5, pc}

0001a1f6 <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1a1f6:	b510      	push	{r4, lr}
   1a1f8:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1a1fa:	2101      	movs	r1, #1
   1a1fc:	f7ff ffea 	bl	1a1d4 <net_buf_simple_add>
	*u8 = val;
   1a200:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1a202:	bd10      	pop	{r4, pc}

0001a204 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1a204:	b510      	push	{r4, lr}
   1a206:	b082      	sub	sp, #8
   1a208:	ac02      	add	r4, sp, #8
   1a20a:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a20e:	2102      	movs	r1, #2
   1a210:	f7ff ffe0 	bl	1a1d4 <net_buf_simple_add>
   1a214:	2202      	movs	r2, #2
   1a216:	4621      	mov	r1, r4
   1a218:	f7e6 f852 	bl	2c0 <memcpy>
}
   1a21c:	b002      	add	sp, #8
   1a21e:	bd10      	pop	{r4, pc}

0001a220 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1a220:	b510      	push	{r4, lr}
   1a222:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1a224:	0a0b      	lsrs	r3, r1, #8
   1a226:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1a22a:	ac02      	add	r4, sp, #8
   1a22c:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a230:	2102      	movs	r1, #2
   1a232:	f7ff ffcf 	bl	1a1d4 <net_buf_simple_add>
   1a236:	2202      	movs	r2, #2
   1a238:	4621      	mov	r1, r4
   1a23a:	f7e6 f841 	bl	2c0 <memcpy>
}
   1a23e:	b002      	add	sp, #8
   1a240:	bd10      	pop	{r4, pc}

0001a242 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1a242:	6803      	ldr	r3, [r0, #0]
   1a244:	1a5b      	subs	r3, r3, r1
   1a246:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1a248:	8882      	ldrh	r2, [r0, #4]
   1a24a:	4411      	add	r1, r2
   1a24c:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1a24e:	4618      	mov	r0, r3
   1a250:	4770      	bx	lr

0001a252 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1a252:	b510      	push	{r4, lr}
   1a254:	b082      	sub	sp, #8
   1a256:	ac02      	add	r4, sp, #8
   1a258:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1a25c:	2102      	movs	r1, #2
   1a25e:	f7ff fff0 	bl	1a242 <net_buf_simple_push>
   1a262:	2202      	movs	r2, #2
   1a264:	4621      	mov	r1, r4
   1a266:	f7e6 f82b 	bl	2c0 <memcpy>
}
   1a26a:	b002      	add	sp, #8
   1a26c:	bd10      	pop	{r4, pc}

0001a26e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1a26e:	8883      	ldrh	r3, [r0, #4]
   1a270:	1a5b      	subs	r3, r3, r1
   1a272:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1a274:	6803      	ldr	r3, [r0, #0]
   1a276:	4419      	add	r1, r3
   1a278:	6001      	str	r1, [r0, #0]
}
   1a27a:	4608      	mov	r0, r1
   1a27c:	4770      	bx	lr

0001a27e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1a27e:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1a280:	6803      	ldr	r3, [r0, #0]
   1a282:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1a284:	2101      	movs	r1, #1
   1a286:	f7ff fff2 	bl	1a26e <net_buf_simple_pull>

	return val;
}
   1a28a:	4620      	mov	r0, r4
   1a28c:	bd10      	pop	{r4, pc}

0001a28e <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1a28e:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1a290:	6803      	ldr	r3, [r0, #0]
   1a292:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1a294:	2102      	movs	r1, #2
   1a296:	f7ff ffea 	bl	1a26e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1a29a:	4620      	mov	r0, r4
   1a29c:	bd10      	pop	{r4, pc}

0001a29e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a29e:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1a2a2:	1a18      	subs	r0, r3, r0
   1a2a4:	4770      	bx	lr

0001a2a6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1a2a6:	b538      	push	{r3, r4, r5, lr}
   1a2a8:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1a2aa:	88c4      	ldrh	r4, [r0, #6]
   1a2ac:	f7ff fff7 	bl	1a29e <net_buf_simple_headroom>
   1a2b0:	1a20      	subs	r0, r4, r0
   1a2b2:	88ab      	ldrh	r3, [r5, #4]
}
   1a2b4:	1ac0      	subs	r0, r0, r3
   1a2b6:	bd38      	pop	{r3, r4, r5, pc}

0001a2b8 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a2b8:	b510      	push	{r4, lr}
   1a2ba:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a2bc:	6883      	ldr	r3, [r0, #8]
   1a2be:	b18b      	cbz	r3, 1a2e4 <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1a2c0:	b1b1      	cbz	r1, 1a2f0 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1a2c2:	68a3      	ldr	r3, [r4, #8]
   1a2c4:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a2c6:	781b      	ldrb	r3, [r3, #0]
   1a2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a2cc:	2b60      	cmp	r3, #96	; 0x60
   1a2ce:	d01d      	beq.n	1a30c <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1a2d0:	4b18      	ldr	r3, [pc, #96]	; (1a334 <processing_data+0x7c>)
   1a2d2:	6a1a      	ldr	r2, [r3, #32]
   1a2d4:	3201      	adds	r2, #1
   1a2d6:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1a2d8:	68da      	ldr	r2, [r3, #12]
   1a2da:	3201      	adds	r2, #1
   1a2dc:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1a2de:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1a2e0:	bb18      	cbnz	r0, 1a32a <processing_data+0x72>
   1a2e2:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1a2e4:	4a13      	ldr	r2, [pc, #76]	; (1a334 <processing_data+0x7c>)
   1a2e6:	6813      	ldr	r3, [r2, #0]
   1a2e8:	3301      	adds	r3, #1
   1a2ea:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1a2ec:	2002      	movs	r0, #2
   1a2ee:	e7f7      	b.n	1a2e0 <processing_data+0x28>
	return pkt->iface;
   1a2f0:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a2f2:	6843      	ldr	r3, [r0, #4]
   1a2f4:	681b      	ldr	r3, [r3, #0]
   1a2f6:	4621      	mov	r1, r4
   1a2f8:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a2fa:	2801      	cmp	r0, #1
   1a2fc:	d0e1      	beq.n	1a2c2 <processing_data+0xa>
			if (ret == NET_DROP) {
   1a2fe:	2802      	cmp	r0, #2
   1a300:	d1ee      	bne.n	1a2e0 <processing_data+0x28>
   1a302:	4a0c      	ldr	r2, [pc, #48]	; (1a334 <processing_data+0x7c>)
   1a304:	6813      	ldr	r3, [r2, #0]
   1a306:	3301      	adds	r3, #1
   1a308:	6013      	str	r3, [r2, #0]
   1a30a:	e7e9      	b.n	1a2e0 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1a30c:	4a09      	ldr	r2, [pc, #36]	; (1a334 <processing_data+0x7c>)
   1a30e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1a310:	3301      	adds	r3, #1
   1a312:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1a314:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a318:	220a      	movs	r2, #10
   1a31a:	f362 03c6 	bfi	r3, r2, #3, #4
   1a31e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1a322:	4620      	mov	r0, r4
   1a324:	f006 fd1e 	bl	20d64 <net_ipv6_process_pkt>
   1a328:	e7da      	b.n	1a2e0 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a32a:	4620      	mov	r0, r4
   1a32c:	f002 fc75 	bl	1cc1a <net_pkt_unref>
		break;
	}
}
   1a330:	e7d7      	b.n	1a2e2 <processing_data+0x2a>
   1a332:	bf00      	nop
   1a334:	200029f0 	.word	0x200029f0

0001a338 <net_rx_thread>:

static void net_rx_thread(void)
{
   1a338:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1a33a:	4c16      	ldr	r4, [pc, #88]	; (1a394 <net_rx_thread+0x5c>)
   1a33c:	4620      	mov	r0, r4
   1a33e:	f001 faaf 	bl	1b8a0 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a346:	4620      	mov	r0, r4
   1a348:	f00e fa56 	bl	287f8 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1a34c:	f001 faee 	bl	1b92c <net_if_post_init>
   1a350:	e010      	b.n	1a374 <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1a352:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1a354:	2200      	movs	r2, #0
   1a356:	e002      	b.n	1a35e <net_rx_thread+0x26>
		bytes += buf->len;
   1a358:	8999      	ldrh	r1, [r3, #12]
   1a35a:	440a      	add	r2, r1
		buf = buf->frags;
   1a35c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a35e:	2b00      	cmp	r3, #0
   1a360:	d1fa      	bne.n	1a358 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1a362:	490d      	ldr	r1, [pc, #52]	; (1a398 <net_rx_thread+0x60>)
   1a364:	688b      	ldr	r3, [r1, #8]
   1a366:	441a      	add	r2, r3
   1a368:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1a36a:	2100      	movs	r1, #0
   1a36c:	f7ff ffa4 	bl	1a2b8 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a370:	f00e f8d6 	bl	28520 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a378:	4808      	ldr	r0, [pc, #32]	; (1a39c <net_rx_thread+0x64>)
   1a37a:	f00d febb 	bl	280f4 <k_queue_get>
	for (i = 0; i < size; i++) {
   1a37e:	2300      	movs	r3, #0
   1a380:	f240 52db 	movw	r2, #1499	; 0x5db
   1a384:	4293      	cmp	r3, r2
   1a386:	d8e4      	bhi.n	1a352 <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1a388:	4a05      	ldr	r2, [pc, #20]	; (1a3a0 <net_rx_thread+0x68>)
   1a38a:	5cd2      	ldrb	r2, [r2, r3]
   1a38c:	2aaa      	cmp	r2, #170	; 0xaa
   1a38e:	d1e0      	bne.n	1a352 <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1a390:	3301      	adds	r3, #1
   1a392:	e7f5      	b.n	1a380 <net_rx_thread+0x48>
   1a394:	2000d024 	.word	0x2000d024
   1a398:	200029f0 	.word	0x200029f0
   1a39c:	20001a74 	.word	0x20001a74
   1a3a0:	200046f8 	.word	0x200046f8

0001a3a4 <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1a3a4:	b500      	push	{lr}
   1a3a6:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1a3a8:	480b      	ldr	r0, [pc, #44]	; (1a3d8 <init_rx_queue+0x34>)
   1a3aa:	f00d fe48 	bl	2803e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1a3ae:	2300      	movs	r3, #0
   1a3b0:	9305      	str	r3, [sp, #20]
   1a3b2:	2201      	movs	r2, #1
   1a3b4:	9204      	str	r2, [sp, #16]
   1a3b6:	f06f 0207 	mvn.w	r2, #7
   1a3ba:	9203      	str	r2, [sp, #12]
   1a3bc:	9302      	str	r3, [sp, #8]
   1a3be:	9301      	str	r3, [sp, #4]
   1a3c0:	9300      	str	r3, [sp, #0]
   1a3c2:	4b06      	ldr	r3, [pc, #24]	; (1a3dc <init_rx_queue+0x38>)
   1a3c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a3c8:	4905      	ldr	r1, [pc, #20]	; (1a3e0 <init_rx_queue+0x3c>)
   1a3ca:	4806      	ldr	r0, [pc, #24]	; (1a3e4 <init_rx_queue+0x40>)
   1a3cc:	f00e fc80 	bl	28cd0 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1a3d0:	b007      	add	sp, #28
   1a3d2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a3d6:	bf00      	nop
   1a3d8:	20001a74 	.word	0x20001a74
   1a3dc:	0001a339 	.word	0x0001a339
   1a3e0:	200046f8 	.word	0x200046f8
   1a3e4:	20001a84 	.word	0x20001a84

0001a3e8 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a3e8:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a3ea:	f002 ffb2 	bl	1d352 <net_pkt_init>

	net_context_init();
   1a3ee:	f002 faf1 	bl	1c9d4 <net_context_init>
	net_icmpv6_init();
   1a3f2:	f004 fa0b 	bl	1e80c <net_icmpv6_init>
	net_ipv6_init();
   1a3f6:	f006 fe89 	bl	2110c <net_ipv6_init>
	net_conn_init();
   1a3fa:	f00a fb55 	bl	24aa8 <net_conn_init>
	net_udp_init();
   1a3fe:	f008 fa6b 	bl	228d8 <net_udp_init>
	net_tcp_init();
   1a402:	f008 fc4f 	bl	22ca4 <net_tcp_init>
	net_route_init();
   1a406:	f007 ffca 	bl	2239e <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a40a:	f008 f8b3 	bl	22574 <net_mgmt_event_init>

	init_rx_queue();
   1a40e:	f7ff ffc9 	bl	1a3a4 <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1a412:	2000      	movs	r0, #0
   1a414:	bd08      	pop	{r3, pc}
	...

0001a418 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1a418:	2800      	cmp	r0, #0
   1a41a:	f000 80bc 	beq.w	1a596 <net_send_data+0x17e>
{
   1a41e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a420:	b091      	sub	sp, #68	; 0x44
   1a422:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1a424:	6883      	ldr	r3, [r0, #8]
   1a426:	2b00      	cmp	r3, #0
   1a428:	f000 80b8 	beq.w	1a59c <net_send_data+0x184>
	return pkt->iface;
   1a42c:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1a42e:	2b00      	cmp	r3, #0
   1a430:	f000 80b7 	beq.w	1a5a2 <net_send_data+0x18a>
	return pkt->family;
   1a434:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1a438:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1a43c:	2b0a      	cmp	r3, #10
   1a43e:	d103      	bne.n	1a448 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1a440:	4a59      	ldr	r2, [pc, #356]	; (1a5a8 <net_send_data+0x190>)
   1a442:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1a444:	3301      	adds	r3, #1
   1a446:	6293      	str	r3, [r2, #40]	; 0x28
   1a448:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a44c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1a450:	2b0a      	cmp	r3, #10
   1a452:	d00b      	beq.n	1a46c <net_send_data+0x54>
	return 0;
   1a454:	2000      	movs	r0, #0
	if (status < 0) {
   1a456:	2800      	cmp	r0, #0
   1a458:	db06      	blt.n	1a468 <net_send_data+0x50>
	} else if (status > 0) {
   1a45a:	f340 8091 	ble.w	1a580 <net_send_data+0x168>
		processing_data(pkt, true);
   1a45e:	2101      	movs	r1, #1
   1a460:	4620      	mov	r0, r4
   1a462:	f7ff ff29 	bl	1a2b8 <processing_data>
		return 0;
   1a466:	2000      	movs	r0, #0
}
   1a468:	b011      	add	sp, #68	; 0x44
   1a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1a46c:	68a3      	ldr	r3, [r4, #8]
   1a46e:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a470:	3518      	adds	r5, #24
   1a472:	f004 fd93 	bl	1ef9c <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a476:	2210      	movs	r2, #16
   1a478:	4601      	mov	r1, r0
   1a47a:	4628      	mov	r0, r5
   1a47c:	f010 fa8a 	bl	2a994 <memcmp>
   1a480:	2800      	cmp	r0, #0
   1a482:	d07a      	beq.n	1a57a <net_send_data+0x162>
   1a484:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a486:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a488:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a48c:	b9ab      	cbnz	r3, 1a4ba <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a48e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a490:	2b00      	cmp	r3, #0
   1a492:	d141      	bne.n	1a518 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a494:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a496:	2b00      	cmp	r3, #0
   1a498:	d140      	bne.n	1a51c <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a49a:	68c2      	ldr	r2, [r0, #12]
   1a49c:	0a13      	lsrs	r3, r2, #8
   1a49e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a4a2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a4a6:	0211      	lsls	r1, r2, #8
   1a4a8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a4ac:	430b      	orrs	r3, r1
   1a4ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a4b2:	2b01      	cmp	r3, #1
   1a4b4:	d034      	beq.n	1a520 <net_send_data+0x108>
   1a4b6:	2300      	movs	r3, #0
   1a4b8:	e000      	b.n	1a4bc <net_send_data+0xa4>
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	b393      	cbz	r3, 1a524 <net_send_data+0x10c>
   1a4be:	68a3      	ldr	r3, [r4, #8]
   1a4c0:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a4c4:	ae0c      	add	r6, sp, #48	; 0x30
   1a4c6:	4675      	mov	r5, lr
   1a4c8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1a4cc:	6869      	ldr	r1, [r5, #4]
   1a4ce:	68aa      	ldr	r2, [r5, #8]
   1a4d0:	68eb      	ldr	r3, [r5, #12]
   1a4d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a4d4:	ab10      	add	r3, sp, #64	; 0x40
   1a4d6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a4da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a4de:	af08      	add	r7, sp, #32
   1a4e0:	4673      	mov	r3, lr
   1a4e2:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1a4e6:	6859      	ldr	r1, [r3, #4]
   1a4e8:	689a      	ldr	r2, [r3, #8]
   1a4ea:	68db      	ldr	r3, [r3, #12]
   1a4ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1a4ee:	af08      	add	r7, sp, #32
   1a4f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a4f2:	f8ce 0008 	str.w	r0, [lr, #8]
   1a4f6:	6069      	str	r1, [r5, #4]
   1a4f8:	60aa      	str	r2, [r5, #8]
   1a4fa:	60eb      	str	r3, [r5, #12]
   1a4fc:	68a3      	ldr	r3, [r4, #8]
   1a4fe:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a500:	ad04      	add	r5, sp, #16
   1a502:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1a506:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a50c:	61b8      	str	r0, [r7, #24]
   1a50e:	61f9      	str	r1, [r7, #28]
   1a510:	623a      	str	r2, [r7, #32]
   1a512:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1a514:	2001      	movs	r0, #1
   1a516:	e79e      	b.n	1a456 <net_send_data+0x3e>
   1a518:	2300      	movs	r3, #0
   1a51a:	e7cf      	b.n	1a4bc <net_send_data+0xa4>
   1a51c:	2300      	movs	r3, #0
   1a51e:	e7cd      	b.n	1a4bc <net_send_data+0xa4>
   1a520:	2301      	movs	r3, #1
   1a522:	e7cb      	b.n	1a4bc <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a524:	2100      	movs	r1, #0
   1a526:	f000 f9c5 	bl	1a8b4 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a52a:	2800      	cmp	r0, #0
   1a52c:	d1c7      	bne.n	1a4be <net_send_data+0xa6>
   1a52e:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a530:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a532:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a536:	b99a      	cbnz	r2, 1a560 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a538:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a53a:	b9aa      	cbnz	r2, 1a568 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a53c:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a53e:	b9aa      	cbnz	r2, 1a56c <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a540:	68da      	ldr	r2, [r3, #12]
   1a542:	0a13      	lsrs	r3, r2, #8
   1a544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a548:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a54c:	0211      	lsls	r1, r2, #8
   1a54e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a552:	430b      	orrs	r3, r1
   1a554:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a558:	2b01      	cmp	r3, #1
   1a55a:	d009      	beq.n	1a570 <net_send_data+0x158>
   1a55c:	2300      	movs	r3, #0
   1a55e:	e000      	b.n	1a562 <net_send_data+0x14a>
   1a560:	2300      	movs	r3, #0
   1a562:	b93b      	cbnz	r3, 1a574 <net_send_data+0x15c>
	return 0;
   1a564:	2000      	movs	r0, #0
   1a566:	e776      	b.n	1a456 <net_send_data+0x3e>
   1a568:	2300      	movs	r3, #0
   1a56a:	e7fa      	b.n	1a562 <net_send_data+0x14a>
   1a56c:	2300      	movs	r3, #0
   1a56e:	e7f8      	b.n	1a562 <net_send_data+0x14a>
   1a570:	2301      	movs	r3, #1
   1a572:	e7f6      	b.n	1a562 <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1a574:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a578:	e76d      	b.n	1a456 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1a57a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a57e:	e76a      	b.n	1a456 <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a580:	4621      	mov	r1, r4
   1a582:	6960      	ldr	r0, [r4, #20]
   1a584:	f000 ffe0 	bl	1b548 <net_if_send_data>
   1a588:	2802      	cmp	r0, #2
   1a58a:	d001      	beq.n	1a590 <net_send_data+0x178>
	return 0;
   1a58c:	2000      	movs	r0, #0
   1a58e:	e76b      	b.n	1a468 <net_send_data+0x50>
		return -EIO;
   1a590:	f06f 0004 	mvn.w	r0, #4
   1a594:	e768      	b.n	1a468 <net_send_data+0x50>
		return -ENODATA;
   1a596:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a59a:	4770      	bx	lr
   1a59c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a5a0:	e762      	b.n	1a468 <net_send_data+0x50>
		return -EINVAL;
   1a5a2:	f06f 0015 	mvn.w	r0, #21
   1a5a6:	e75f      	b.n	1a468 <net_send_data+0x50>
   1a5a8:	200029f0 	.word	0x200029f0

0001a5ac <net_recv_data>:
{
   1a5ac:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a5ae:	688b      	ldr	r3, [r1, #8]
   1a5b0:	b19b      	cbz	r3, 1a5da <net_recv_data+0x2e>
   1a5b2:	f3bf 8f5b 	dmb	ish
   1a5b6:	68c3      	ldr	r3, [r0, #12]
   1a5b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a5bc:	f013 0f01 	tst.w	r3, #1
   1a5c0:	d00e      	beq.n	1a5e0 <net_recv_data+0x34>
	pkt->iface = iface;
   1a5c2:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a5c4:	7d43      	ldrb	r3, [r0, #21]
   1a5c6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a5ca:	7d43      	ldrb	r3, [r0, #21]
   1a5cc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a5d0:	4805      	ldr	r0, [pc, #20]	; (1a5e8 <net_recv_data+0x3c>)
   1a5d2:	f00d fd67 	bl	280a4 <k_queue_append>
	return 0;
   1a5d6:	2000      	movs	r0, #0
   1a5d8:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a5da:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a5de:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a5e0:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1a5e4:	bd08      	pop	{r3, pc}
   1a5e6:	bf00      	nop
   1a5e8:	20001a74 	.word	0x20001a74

0001a5ec <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a5ec:	2302      	movs	r3, #2
   1a5ee:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a5f2:	4770      	bx	lr

0001a5f4 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a5f4:	2300      	movs	r3, #0
   1a5f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a5fa:	4770      	bx	lr

0001a5fc <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a602:	4770      	bx	lr

0001a604 <ipv6_addr_find>:
{
   1a604:	b570      	push	{r4, r5, r6, lr}
   1a606:	4605      	mov	r5, r0
   1a608:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a60a:	2400      	movs	r4, #0
   1a60c:	e000      	b.n	1a610 <ipv6_addr_find+0xc>
   1a60e:	3401      	adds	r4, #1
   1a610:	2c02      	cmp	r4, #2
   1a612:	dc19      	bgt.n	1a648 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1a614:	236c      	movs	r3, #108	; 0x6c
   1a616:	fb03 5304 	mla	r3, r3, r4, r5
   1a61a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a61e:	2b00      	cmp	r3, #0
   1a620:	d0f5      	beq.n	1a60e <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1a622:	216c      	movs	r1, #108	; 0x6c
   1a624:	fb01 f104 	mul.w	r1, r1, r4
   1a628:	3120      	adds	r1, #32
   1a62a:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a62c:	2210      	movs	r2, #16
   1a62e:	4411      	add	r1, r2
   1a630:	4630      	mov	r0, r6
   1a632:	f010 f9af 	bl	2a994 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1a636:	2800      	cmp	r0, #0
   1a638:	d1e9      	bne.n	1a60e <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1a63a:	206c      	movs	r0, #108	; 0x6c
   1a63c:	fb00 f004 	mul.w	r0, r0, r4
   1a640:	3020      	adds	r0, #32
   1a642:	4428      	add	r0, r5
   1a644:	300c      	adds	r0, #12
   1a646:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a648:	2000      	movs	r0, #0
}
   1a64a:	bd70      	pop	{r4, r5, r6, pc}

0001a64c <ipv6_prefix_find>:
{
   1a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a64e:	4605      	mov	r5, r0
   1a650:	460e      	mov	r6, r1
   1a652:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1a654:	2400      	movs	r4, #0
   1a656:	e000      	b.n	1a65a <ipv6_prefix_find+0xe>
   1a658:	3401      	adds	r4, #1
   1a65a:	2c01      	cmp	r4, #1
   1a65c:	dc21      	bgt.n	1a6a2 <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1a65e:	236c      	movs	r3, #108	; 0x6c
   1a660:	fb03 5304 	mla	r3, r3, r4, r5
   1a664:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a668:	2b00      	cmp	r3, #0
   1a66a:	d0f5      	beq.n	1a658 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a66c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a670:	0099      	lsls	r1, r3, #2
   1a672:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1a676:	4429      	add	r1, r5
   1a678:	2210      	movs	r2, #16
   1a67a:	4411      	add	r1, r2
   1a67c:	4630      	mov	r0, r6
   1a67e:	f010 f989 	bl	2a994 <memcmp>
   1a682:	2800      	cmp	r0, #0
   1a684:	d1e8      	bne.n	1a658 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1a686:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1a68a:	0093      	lsls	r3, r2, #2
   1a68c:	461a      	mov	r2, r3
   1a68e:	442b      	add	r3, r5
   1a690:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a694:	42bb      	cmp	r3, r7
   1a696:	d1df      	bne.n	1a658 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1a698:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1a69c:	4428      	add	r0, r5
   1a69e:	3010      	adds	r0, #16
   1a6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1a6a2:	2000      	movs	r0, #0
}
   1a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a6a8 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a6a8:	2300      	movs	r3, #0
   1a6aa:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1a6ae:	f3bf 8f5b 	dmb	ish
   1a6b2:	68c3      	ldr	r3, [r0, #12]
   1a6b4:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1a6b8:	f013 0f01 	tst.w	r3, #1
   1a6bc:	d100      	bne.n	1a6c0 <net_if_ipv6_start_dad+0x18>
   1a6be:	4770      	bx	lr
{
   1a6c0:	b510      	push	{r4, lr}
   1a6c2:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1a6c4:	2301      	movs	r3, #1
   1a6c6:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a6ca:	f006 f969 	bl	209a0 <net_ipv6_start_dad>
   1a6ce:	b100      	cbz	r0, 1a6d2 <net_if_ipv6_start_dad+0x2a>
   1a6d0:	bd10      	pop	{r4, pc}
   1a6d2:	2264      	movs	r2, #100	; 0x64
   1a6d4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1a6d8:	4801      	ldr	r0, [pc, #4]	; (1a6e0 <net_if_ipv6_start_dad+0x38>)
   1a6da:	f00e fec3 	bl	29464 <k_delayed_work_submit_to_queue>
}
   1a6de:	e7f7      	b.n	1a6d0 <net_if_ipv6_start_dad+0x28>
   1a6e0:	20002b10 	.word	0x20002b10

0001a6e4 <net_if_ipv6_prefix_init>:
{
   1a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6e6:	b085      	sub	sp, #20
   1a6e8:	4605      	mov	r5, r0
   1a6ea:	460e      	mov	r6, r1
   1a6ec:	461f      	mov	r7, r3
	prefix->is_used = true;
   1a6ee:	2301      	movs	r3, #1
   1a6f0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1a6f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1a6f8:	466c      	mov	r4, sp
   1a6fa:	6808      	ldr	r0, [r1, #0]
   1a6fc:	6849      	ldr	r1, [r1, #4]
   1a6fe:	68b2      	ldr	r2, [r6, #8]
   1a700:	68f3      	ldr	r3, [r6, #12]
   1a702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a704:	466c      	mov	r4, sp
   1a706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a708:	62a8      	str	r0, [r5, #40]	; 0x28
   1a70a:	62e9      	str	r1, [r5, #44]	; 0x2c
   1a70c:	632a      	str	r2, [r5, #48]	; 0x30
   1a70e:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1a710:	4907      	ldr	r1, [pc, #28]	; (1a730 <net_if_ipv6_prefix_init+0x4c>)
   1a712:	4628      	mov	r0, r5
   1a714:	f00e fe2e 	bl	29374 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1a718:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1a71c:	d004      	beq.n	1a728 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1a71e:	2300      	movs	r3, #0
   1a720:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1a724:	b005      	add	sp, #20
   1a726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1a728:	2301      	movs	r3, #1
   1a72a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1a72e:	e7f9      	b.n	1a724 <net_if_ipv6_prefix_init+0x40>
   1a730:	0001a5f5 	.word	0x0001a5f5

0001a734 <join_mcast_allnodes>:
{
   1a734:	b500      	push	{lr}
   1a736:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1a738:	f240 23ff 	movw	r3, #767	; 0x2ff
   1a73c:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1a740:	2300      	movs	r3, #0
   1a742:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1a746:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1a74a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1a74e:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1a752:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1a756:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1a75a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a75e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a762:	4669      	mov	r1, sp
   1a764:	f006 faa4 	bl	20cb0 <net_ipv6_mld_join>
}
   1a768:	b005      	add	sp, #20
   1a76a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a76e <join_mcast_solicit_node>:
{
   1a76e:	b500      	push	{lr}
   1a770:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1a772:	22ff      	movs	r2, #255	; 0xff
   1a774:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1a778:	2302      	movs	r3, #2
   1a77a:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1a77e:	2300      	movs	r3, #0
   1a780:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1a784:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1a788:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1a78c:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1a790:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1a794:	2301      	movs	r3, #1
   1a796:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1a79a:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1a79e:	7b4b      	ldrb	r3, [r1, #13]
   1a7a0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1a7a4:	89cb      	ldrh	r3, [r1, #14]
   1a7a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a7aa:	4669      	mov	r1, sp
   1a7ac:	f006 fa80 	bl	20cb0 <net_ipv6_mld_join>
}
   1a7b0:	b005      	add	sp, #20
   1a7b2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a7b6 <leave_mcast_all>:
{
   1a7b6:	b538      	push	{r3, r4, r5, lr}
   1a7b8:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1a7ba:	2400      	movs	r4, #0
   1a7bc:	e000      	b.n	1a7c0 <leave_mcast_all+0xa>
   1a7be:	3401      	adds	r4, #1
   1a7c0:	2c04      	cmp	r4, #4
   1a7c2:	dc1a      	bgt.n	1a7fa <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1a7c4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a7c8:	00d3      	lsls	r3, r2, #3
   1a7ca:	442b      	add	r3, r5
   1a7cc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1a7d0:	f013 0f01 	tst.w	r3, #1
   1a7d4:	d0f3      	beq.n	1a7be <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1a7d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a7da:	00d3      	lsls	r3, r2, #3
   1a7dc:	461a      	mov	r2, r3
   1a7de:	442b      	add	r3, r5
   1a7e0:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1a7e4:	f013 0f02 	tst.w	r3, #2
   1a7e8:	d0e9      	beq.n	1a7be <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1a7ea:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1a7ee:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1a7f0:	3118      	adds	r1, #24
   1a7f2:	4628      	mov	r0, r5
   1a7f4:	f006 fa96 	bl	20d24 <net_ipv6_mld_leave>
   1a7f8:	e7e1      	b.n	1a7be <leave_mcast_all+0x8>
}
   1a7fa:	bd38      	pop	{r3, r4, r5, pc}

0001a7fc <net_if_prepare_events>:
{
   1a7fc:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1a7fe:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a800:	4d0a      	ldr	r5, [pc, #40]	; (1a82c <net_if_prepare_events+0x30>)
   1a802:	e00d      	b.n	1a820 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1a804:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a808:	0098      	lsls	r0, r3, #2
   1a80a:	f105 0318 	add.w	r3, r5, #24
   1a80e:	2200      	movs	r2, #0
   1a810:	2104      	movs	r1, #4
   1a812:	4e07      	ldr	r6, [pc, #28]	; (1a830 <net_if_prepare_events+0x34>)
   1a814:	4430      	add	r0, r6
   1a816:	f00d f927 	bl	27a68 <k_poll_event_init>
		ev_count++;
   1a81a:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a81c:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a820:	4b04      	ldr	r3, [pc, #16]	; (1a834 <net_if_prepare_events+0x38>)
   1a822:	429d      	cmp	r5, r3
   1a824:	d1ee      	bne.n	1a804 <net_if_prepare_events+0x8>
}
   1a826:	4620      	mov	r0, r4
   1a828:	bd70      	pop	{r4, r5, r6, pc}
   1a82a:	bf00      	nop
   1a82c:	2000d160 	.word	0x2000d160
   1a830:	2000d400 	.word	0x2000d400
   1a834:	2000d400 	.word	0x2000d400

0001a838 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a838:	4b06      	ldr	r3, [pc, #24]	; (1a854 <net_if_lookup_by_dev+0x1c>)
   1a83a:	4a07      	ldr	r2, [pc, #28]	; (1a858 <net_if_lookup_by_dev+0x20>)
   1a83c:	4293      	cmp	r3, r2
   1a83e:	d005      	beq.n	1a84c <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1a840:	681a      	ldr	r2, [r3, #0]
   1a842:	4282      	cmp	r2, r0
   1a844:	d003      	beq.n	1a84e <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a846:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1a84a:	e7f6      	b.n	1a83a <net_if_lookup_by_dev+0x2>
	return NULL;
   1a84c:	2300      	movs	r3, #0
}
   1a84e:	4618      	mov	r0, r3
   1a850:	4770      	bx	lr
   1a852:	bf00      	nop
   1a854:	2000d160 	.word	0x2000d160
   1a858:	2000d400 	.word	0x2000d400

0001a85c <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1a85c:	4b03      	ldr	r3, [pc, #12]	; (1a86c <net_if_get_default+0x10>)
   1a85e:	4a04      	ldr	r2, [pc, #16]	; (1a870 <net_if_get_default+0x14>)
   1a860:	429a      	cmp	r2, r3
   1a862:	d001      	beq.n	1a868 <net_if_get_default+0xc>
	return __net_if_start;
   1a864:	4802      	ldr	r0, [pc, #8]	; (1a870 <net_if_get_default+0x14>)
}
   1a866:	4770      	bx	lr
		return NULL;
   1a868:	2000      	movs	r0, #0
   1a86a:	4770      	bx	lr
   1a86c:	2000d400 	.word	0x2000d400
   1a870:	2000d160 	.word	0x2000d160

0001a874 <net_if_start_rs>:
{
   1a874:	b510      	push	{r4, lr}
   1a876:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1a878:	f006 fa16 	bl	20ca8 <net_ipv6_start_rs>
   1a87c:	b100      	cbz	r0, 1a880 <net_if_start_rs+0xc>
   1a87e:	bd10      	pop	{r4, pc}
   1a880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a884:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1a888:	4801      	ldr	r0, [pc, #4]	; (1a890 <net_if_start_rs+0x1c>)
   1a88a:	f00e fdeb 	bl	29464 <k_delayed_work_submit_to_queue>
}
   1a88e:	e7f6      	b.n	1a87e <net_if_start_rs+0xa>
   1a890:	20002b10 	.word	0x20002b10

0001a894 <rs_timeout>:
{
   1a894:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1a896:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1a89a:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1a89e:	3301      	adds	r3, #1
   1a8a0:	b2db      	uxtb	r3, r3
   1a8a2:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a8a6:	2b02      	cmp	r3, #2
   1a8a8:	d900      	bls.n	1a8ac <rs_timeout+0x18>
   1a8aa:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1a8ac:	f7ff ffe2 	bl	1a874 <net_if_start_rs>
}
   1a8b0:	e7fb      	b.n	1a8aa <rs_timeout+0x16>
	...

0001a8b4 <net_if_ipv6_addr_lookup>:
{
   1a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8b8:	4607      	mov	r7, r0
   1a8ba:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8bc:	4d1b      	ldr	r5, [pc, #108]	; (1a92c <net_if_ipv6_addr_lookup+0x78>)
   1a8be:	e02d      	b.n	1a91c <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1a8c0:	b9ee      	cbnz	r6, 1a8fe <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a8c2:	3401      	adds	r4, #1
   1a8c4:	2c02      	cmp	r4, #2
   1a8c6:	dc27      	bgt.n	1a918 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1a8c8:	236c      	movs	r3, #108	; 0x6c
   1a8ca:	fb03 5304 	mla	r3, r3, r4, r5
   1a8ce:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1a8d2:	2e00      	cmp	r6, #0
   1a8d4:	d0f5      	beq.n	1a8c2 <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1a8d6:	236c      	movs	r3, #108	; 0x6c
   1a8d8:	fb03 5304 	mla	r3, r3, r4, r5
   1a8dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1a8de:	2b0a      	cmp	r3, #10
   1a8e0:	d1ef      	bne.n	1a8c2 <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1a8e2:	216c      	movs	r1, #108	; 0x6c
   1a8e4:	fb01 f104 	mul.w	r1, r1, r4
   1a8e8:	3120      	adds	r1, #32
   1a8ea:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1a8ec:	2210      	movs	r2, #16
   1a8ee:	4411      	add	r1, r2
   1a8f0:	4638      	mov	r0, r7
   1a8f2:	f010 f84f 	bl	2a994 <memcmp>
   1a8f6:	2800      	cmp	r0, #0
   1a8f8:	d0e2      	beq.n	1a8c0 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1a8fa:	2600      	movs	r6, #0
   1a8fc:	e7e0      	b.n	1a8c0 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1a8fe:	f1b8 0f00 	cmp.w	r8, #0
   1a902:	d001      	beq.n	1a908 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1a904:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1a908:	206c      	movs	r0, #108	; 0x6c
   1a90a:	fb00 f004 	mul.w	r0, r0, r4
   1a90e:	3020      	adds	r0, #32
   1a910:	4428      	add	r0, r5
   1a912:	300c      	adds	r0, #12
   1a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a918:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a91c:	4b04      	ldr	r3, [pc, #16]	; (1a930 <net_if_ipv6_addr_lookup+0x7c>)
   1a91e:	429d      	cmp	r5, r3
   1a920:	d001      	beq.n	1a926 <net_if_ipv6_addr_lookup+0x72>
   1a922:	2400      	movs	r4, #0
   1a924:	e7ce      	b.n	1a8c4 <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1a926:	2000      	movs	r0, #0
}
   1a928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a92c:	2000d160 	.word	0x2000d160
   1a930:	2000d400 	.word	0x2000d400

0001a934 <dad_timeout>:
{
   1a934:	b530      	push	{r4, r5, lr}
   1a936:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1a938:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1a93c:	a902      	add	r1, sp, #8
   1a93e:	2300      	movs	r3, #0
   1a940:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1a944:	2301      	movs	r3, #1
   1a946:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a94a:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1a94e:	4620      	mov	r0, r4
   1a950:	f7ff ffb0 	bl	1a8b4 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1a954:	4285      	cmp	r5, r0
   1a956:	d001      	beq.n	1a95c <dad_timeout+0x28>
}
   1a958:	b003      	add	sp, #12
   1a95a:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1a95c:	2300      	movs	r3, #0
   1a95e:	461a      	mov	r2, r3
   1a960:	9901      	ldr	r1, [sp, #4]
   1a962:	4807      	ldr	r0, [pc, #28]	; (1a980 <dad_timeout+0x4c>)
   1a964:	f007 fdcc 	bl	22500 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1a968:	4621      	mov	r1, r4
   1a96a:	9801      	ldr	r0, [sp, #4]
   1a96c:	f004 faf6 	bl	1ef5c <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1a970:	9801      	ldr	r0, [sp, #4]
   1a972:	f7ff fedf 	bl	1a734 <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1a976:	4621      	mov	r1, r4
   1a978:	9801      	ldr	r0, [sp, #4]
   1a97a:	f7ff fef8 	bl	1a76e <join_mcast_solicit_node>
}
   1a97e:	e7eb      	b.n	1a958 <dad_timeout+0x24>
   1a980:	f060000d 	.word	0xf060000d

0001a984 <net_if_ipv6_addr_update_lifetime>:
{
   1a984:	b508      	push	{r3, lr}
   1a986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a98a:	fb02 f201 	mul.w	r2, r2, r1
   1a98e:	f100 0114 	add.w	r1, r0, #20
   1a992:	4802      	ldr	r0, [pc, #8]	; (1a99c <net_if_ipv6_addr_update_lifetime+0x18>)
   1a994:	f00e fd66 	bl	29464 <k_delayed_work_submit_to_queue>
   1a998:	bd08      	pop	{r3, pc}
   1a99a:	bf00      	nop
   1a99c:	20002b10 	.word	0x20002b10

0001a9a0 <net_if_ipv6_addr_add>:
{
   1a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9a4:	b084      	sub	sp, #16
   1a9a6:	4605      	mov	r5, r0
   1a9a8:	460e      	mov	r6, r1
   1a9aa:	4690      	mov	r8, r2
   1a9ac:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1a9ae:	f7ff fe29 	bl	1a604 <ipv6_addr_find>
	if (ifaddr) {
   1a9b2:	4604      	mov	r4, r0
   1a9b4:	b118      	cbz	r0, 1a9be <net_if_ipv6_addr_add+0x1e>
}
   1a9b6:	4620      	mov	r0, r4
   1a9b8:	b004      	add	sp, #16
   1a9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9be:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9c0:	2b02      	cmp	r3, #2
   1a9c2:	dcf8      	bgt.n	1a9b6 <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1a9c4:	226c      	movs	r2, #108	; 0x6c
   1a9c6:	fb02 5203 	mla	r2, r2, r3, r5
   1a9ca:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1a9ce:	b10a      	cbz	r2, 1a9d4 <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9d0:	3301      	adds	r3, #1
   1a9d2:	e7f5      	b.n	1a9c0 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a9d4:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1a9d8:	fb0e fe03 	mul.w	lr, lr, r3
   1a9dc:	f10e 0e20 	add.w	lr, lr, #32
   1a9e0:	44ae      	add	lr, r5
   1a9e2:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1a9e6:	2301      	movs	r3, #1
   1a9e8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1a9ec:	230a      	movs	r3, #10
   1a9ee:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1a9f2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9f6:	46ec      	mov	ip, sp
   1a9f8:	6830      	ldr	r0, [r6, #0]
   1a9fa:	6871      	ldr	r1, [r6, #4]
   1a9fc:	68b2      	ldr	r2, [r6, #8]
   1a9fe:	68f3      	ldr	r3, [r6, #12]
   1aa00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1aa04:	466e      	mov	r6, sp
   1aa06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1aa08:	f8ce 0010 	str.w	r0, [lr, #16]
   1aa0c:	f8ce 1014 	str.w	r1, [lr, #20]
   1aa10:	f8ce 2018 	str.w	r2, [lr, #24]
   1aa14:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1aa18:	4910      	ldr	r1, [pc, #64]	; (1aa5c <net_if_ipv6_addr_add+0xbc>)
   1aa1a:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1aa1e:	f00e fca9 	bl	29374 <k_delayed_work_init>
	if (vlifetime) {
   1aa22:	b96f      	cbnz	r7, 1aa40 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1aa24:	2301      	movs	r3, #1
   1aa26:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1aa2a:	4621      	mov	r1, r4
   1aa2c:	4628      	mov	r0, r5
   1aa2e:	f7ff fe3b 	bl	1a6a8 <net_if_ipv6_start_dad>
   1aa32:	2300      	movs	r3, #0
   1aa34:	461a      	mov	r2, r3
   1aa36:	4629      	mov	r1, r5
   1aa38:	4809      	ldr	r0, [pc, #36]	; (1aa60 <net_if_ipv6_addr_add+0xc0>)
   1aa3a:	f007 fd61 	bl	22500 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1aa3e:	e7ba      	b.n	1a9b6 <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1aa40:	2300      	movs	r3, #0
   1aa42:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa46:	4907      	ldr	r1, [pc, #28]	; (1aa64 <net_if_ipv6_addr_add+0xc4>)
   1aa48:	f104 0014 	add.w	r0, r4, #20
   1aa4c:	f00e fc92 	bl	29374 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1aa50:	4639      	mov	r1, r7
   1aa52:	4620      	mov	r0, r4
   1aa54:	f7ff ff96 	bl	1a984 <net_if_ipv6_addr_update_lifetime>
   1aa58:	e7e7      	b.n	1aa2a <net_if_ipv6_addr_add+0x8a>
   1aa5a:	bf00      	nop
   1aa5c:	0001a935 	.word	0x0001a935
   1aa60:	f0600001 	.word	0xf0600001
   1aa64:	0001a5ed 	.word	0x0001a5ed

0001aa68 <net_if_start_dad>:
{
   1aa68:	b570      	push	{r4, r5, r6, lr}
   1aa6a:	b084      	sub	sp, #16
   1aa6c:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1aa6e:	2300      	movs	r3, #0
   1aa70:	9302      	str	r3, [sp, #8]
   1aa72:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1aa74:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1aa78:	22fe      	movs	r2, #254	; 0xfe
   1aa7a:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1aa7e:	2280      	movs	r2, #128	; 0x80
   1aa80:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1aa84:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1aa88:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1aa8a:	7922      	ldrb	r2, [r4, #4]
   1aa8c:	2a06      	cmp	r2, #6
   1aa8e:	d020      	beq.n	1aad2 <net_if_start_dad+0x6a>
   1aa90:	2a08      	cmp	r2, #8
   1aa92:	d044      	beq.n	1ab1e <net_if_start_dad+0xb6>
   1aa94:	2a02      	cmp	r2, #2
   1aa96:	d008      	beq.n	1aaaa <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1aa98:	2300      	movs	r3, #0
   1aa9a:	2201      	movs	r2, #1
   1aa9c:	4669      	mov	r1, sp
   1aa9e:	4628      	mov	r0, r5
   1aaa0:	f7ff ff7e 	bl	1a9a0 <net_if_ipv6_addr_add>
   1aaa4:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aaa6:	2400      	movs	r4, #0
   1aaa8:	e045      	b.n	1ab36 <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1aaaa:	7963      	ldrb	r3, [r4, #5]
   1aaac:	2b01      	cmp	r3, #1
   1aaae:	d1f3      	bne.n	1aa98 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1aab0:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1aab2:	22ff      	movs	r2, #255	; 0xff
   1aab4:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1aab8:	22fe      	movs	r2, #254	; 0xfe
   1aaba:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1aabe:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1aac2:	6903      	ldr	r3, [r0, #16]
   1aac4:	781a      	ldrb	r2, [r3, #0]
   1aac6:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1aaca:	785b      	ldrb	r3, [r3, #1]
   1aacc:	f88d 300f 	strb.w	r3, [sp, #15]
   1aad0:	e7e2      	b.n	1aa98 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1aad2:	2203      	movs	r2, #3
   1aad4:	6901      	ldr	r1, [r0, #16]
   1aad6:	a802      	add	r0, sp, #8
   1aad8:	f7e5 fbf2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1aadc:	23ff      	movs	r3, #255	; 0xff
   1aade:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1aae2:	23fe      	movs	r3, #254	; 0xfe
   1aae4:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aae8:	6929      	ldr	r1, [r5, #16]
   1aaea:	2203      	movs	r2, #3
   1aaec:	4411      	add	r1, r2
   1aaee:	f10d 000d 	add.w	r0, sp, #13
   1aaf2:	f7e5 fbe5 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1aaf6:	7963      	ldrb	r3, [r4, #5]
   1aaf8:	2b02      	cmp	r3, #2
   1aafa:	d009      	beq.n	1ab10 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1aafc:	7963      	ldrb	r3, [r4, #5]
   1aafe:	2b03      	cmp	r3, #3
   1ab00:	d1ca      	bne.n	1aa98 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1ab02:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ab06:	f083 0302 	eor.w	r3, r3, #2
   1ab0a:	f88d 3008 	strb.w	r3, [sp, #8]
   1ab0e:	e7c3      	b.n	1aa98 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1ab10:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ab14:	f083 0302 	eor.w	r3, r3, #2
   1ab18:	f88d 3008 	strb.w	r3, [sp, #8]
   1ab1c:	e7ee      	b.n	1aafc <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1ab1e:	6901      	ldr	r1, [r0, #16]
   1ab20:	a802      	add	r0, sp, #8
   1ab22:	f7e5 fbcd 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1ab26:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ab2a:	f083 0302 	eor.w	r3, r3, #2
   1ab2e:	f88d 3008 	strb.w	r3, [sp, #8]
   1ab32:	e7b1      	b.n	1aa98 <net_if_start_dad+0x30>
   1ab34:	3401      	adds	r4, #1
   1ab36:	2c02      	cmp	r4, #2
   1ab38:	dc18      	bgt.n	1ab6c <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1ab3a:	236c      	movs	r3, #108	; 0x6c
   1ab3c:	fb03 5304 	mla	r3, r3, r4, r5
   1ab40:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ab44:	2b00      	cmp	r3, #0
   1ab46:	d0f5      	beq.n	1ab34 <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab48:	236c      	movs	r3, #108	; 0x6c
   1ab4a:	fb03 5304 	mla	r3, r3, r4, r5
   1ab4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1ab50:	2b0a      	cmp	r3, #10
   1ab52:	d1ef      	bne.n	1ab34 <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1ab54:	216c      	movs	r1, #108	; 0x6c
   1ab56:	fb01 f104 	mul.w	r1, r1, r4
   1ab5a:	3120      	adds	r1, #32
   1ab5c:	4429      	add	r1, r5
   1ab5e:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab60:	428e      	cmp	r6, r1
   1ab62:	d0e7      	beq.n	1ab34 <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ab64:	4628      	mov	r0, r5
   1ab66:	f7ff fd9f 	bl	1a6a8 <net_if_ipv6_start_dad>
   1ab6a:	e7e3      	b.n	1ab34 <net_if_start_dad+0xcc>
}
   1ab6c:	b004      	add	sp, #16
   1ab6e:	bd70      	pop	{r4, r5, r6, pc}

0001ab70 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1ab70:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1ab72:	2bff      	cmp	r3, #255	; 0xff
   1ab74:	d134      	bne.n	1abe0 <net_if_ipv6_maddr_add+0x70>
{
   1ab76:	b570      	push	{r4, r5, r6, lr}
   1ab78:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ab7a:	2c04      	cmp	r4, #4
   1ab7c:	dc2e      	bgt.n	1abdc <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1ab7e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ab82:	00d3      	lsls	r3, r2, #3
   1ab84:	4403      	add	r3, r0
   1ab86:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ab8a:	f013 0f01 	tst.w	r3, #1
   1ab8e:	d001      	beq.n	1ab94 <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ab90:	3401      	adds	r4, #1
   1ab92:	e7f2      	b.n	1ab7a <net_if_ipv6_maddr_add+0xa>
   1ab94:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1ab96:	0066      	lsls	r6, r4, #1
   1ab98:	1932      	adds	r2, r6, r4
   1ab9a:	00d3      	lsls	r3, r2, #3
   1ab9c:	4403      	add	r3, r0
   1ab9e:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1aba2:	f042 0201 	orr.w	r2, r2, #1
   1aba6:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1abaa:	220a      	movs	r2, #10
   1abac:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1abb0:	1933      	adds	r3, r6, r4
   1abb2:	00d8      	lsls	r0, r3, #3
   1abb4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1abb8:	4428      	add	r0, r5
   1abba:	2210      	movs	r2, #16
   1abbc:	3018      	adds	r0, #24
   1abbe:	f7e5 fb7f 	bl	2c0 <memcpy>
   1abc2:	2300      	movs	r3, #0
   1abc4:	461a      	mov	r2, r3
   1abc6:	4629      	mov	r1, r5
   1abc8:	4806      	ldr	r0, [pc, #24]	; (1abe4 <net_if_ipv6_maddr_add+0x74>)
   1abca:	f007 fc99 	bl	22500 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1abce:	4434      	add	r4, r6
   1abd0:	00e0      	lsls	r0, r4, #3
   1abd2:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1abd6:	4428      	add	r0, r5
   1abd8:	3010      	adds	r0, #16
   1abda:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1abdc:	2000      	movs	r0, #0
   1abde:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1abe0:	2000      	movs	r0, #0
   1abe2:	4770      	bx	lr
   1abe4:	f0600003 	.word	0xf0600003

0001abe8 <net_if_ipv6_maddr_rm>:
{
   1abe8:	b570      	push	{r4, r5, r6, lr}
   1abea:	4605      	mov	r5, r0
   1abec:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1abee:	2400      	movs	r4, #0
   1abf0:	e000      	b.n	1abf4 <net_if_ipv6_maddr_rm+0xc>
   1abf2:	3401      	adds	r4, #1
   1abf4:	2c04      	cmp	r4, #4
   1abf6:	dc25      	bgt.n	1ac44 <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1abf8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1abfc:	00d3      	lsls	r3, r2, #3
   1abfe:	461a      	mov	r2, r3
   1ac00:	442b      	add	r3, r5
   1ac02:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ac06:	f013 0f01 	tst.w	r3, #1
   1ac0a:	d0f2      	beq.n	1abf2 <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1ac0c:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1ac10:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ac12:	2210      	movs	r2, #16
   1ac14:	4631      	mov	r1, r6
   1ac16:	3018      	adds	r0, #24
   1ac18:	f00f febc 	bl	2a994 <memcmp>
		if (!net_ipv6_addr_cmp(
   1ac1c:	2800      	cmp	r0, #0
   1ac1e:	d1e8      	bne.n	1abf2 <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1ac20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ac24:	00e3      	lsls	r3, r4, #3
   1ac26:	442b      	add	r3, r5
   1ac28:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ac2c:	f36f 0200 	bfc	r2, #0, #1
   1ac30:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1ac34:	2300      	movs	r3, #0
   1ac36:	461a      	mov	r2, r3
   1ac38:	4629      	mov	r1, r5
   1ac3a:	4803      	ldr	r0, [pc, #12]	; (1ac48 <net_if_ipv6_maddr_rm+0x60>)
   1ac3c:	f007 fc60 	bl	22500 <net_mgmt_event_notify_with_info>
		return true;
   1ac40:	2001      	movs	r0, #1
   1ac42:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1ac44:	2000      	movs	r0, #0
}
   1ac46:	bd70      	pop	{r4, r5, r6, pc}
   1ac48:	f0600004 	.word	0xf0600004

0001ac4c <net_if_ipv6_addr_rm>:
{
   1ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac50:	b084      	sub	sp, #16
   1ac52:	4606      	mov	r6, r0
   1ac54:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac56:	2400      	movs	r4, #0
   1ac58:	e009      	b.n	1ac6e <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1ac5a:	206c      	movs	r0, #108	; 0x6c
   1ac5c:	fb00 f004 	mul.w	r0, r0, r4
   1ac60:	3030      	adds	r0, #48	; 0x30
   1ac62:	4430      	add	r0, r6
   1ac64:	3010      	adds	r0, #16
   1ac66:	f00e fba3 	bl	293b0 <k_delayed_work_cancel>
   1ac6a:	e01c      	b.n	1aca6 <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac6c:	3401      	adds	r4, #1
   1ac6e:	2c02      	cmp	r4, #2
   1ac70:	dc46      	bgt.n	1ad00 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1ac72:	236c      	movs	r3, #108	; 0x6c
   1ac74:	fb03 6304 	mla	r3, r3, r4, r6
   1ac78:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1ac7c:	2d00      	cmp	r5, #0
   1ac7e:	d0f5      	beq.n	1ac6c <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1ac80:	206c      	movs	r0, #108	; 0x6c
   1ac82:	fb00 f004 	mul.w	r0, r0, r4
   1ac86:	3020      	adds	r0, #32
   1ac88:	4430      	add	r0, r6
   1ac8a:	2210      	movs	r2, #16
   1ac8c:	4639      	mov	r1, r7
   1ac8e:	4410      	add	r0, r2
   1ac90:	f00f fe80 	bl	2a994 <memcmp>
		if (!net_ipv6_addr_cmp(
   1ac94:	2800      	cmp	r0, #0
   1ac96:	d1e9      	bne.n	1ac6c <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1ac98:	236c      	movs	r3, #108	; 0x6c
   1ac9a:	fb03 6304 	mla	r3, r3, r4, r6
   1ac9e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1aca2:	2b00      	cmp	r3, #0
   1aca4:	d0d9      	beq.n	1ac5a <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1aca6:	236c      	movs	r3, #108	; 0x6c
   1aca8:	fb03 6404 	mla	r4, r3, r4, r6
   1acac:	f04f 0800 	mov.w	r8, #0
   1acb0:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1acb4:	23ff      	movs	r3, #255	; 0xff
   1acb6:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1acba:	2202      	movs	r2, #2
   1acbc:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1acc0:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1acc4:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1acc8:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1accc:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1acd0:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1acd4:	2201      	movs	r2, #1
   1acd6:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1acda:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1acde:	7b7b      	ldrb	r3, [r7, #13]
   1ace0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ace4:	89fb      	ldrh	r3, [r7, #14]
   1ace6:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1acea:	4669      	mov	r1, sp
   1acec:	4630      	mov	r0, r6
   1acee:	f7ff ff7b 	bl	1abe8 <net_if_ipv6_maddr_rm>
   1acf2:	4643      	mov	r3, r8
   1acf4:	4642      	mov	r2, r8
   1acf6:	4631      	mov	r1, r6
   1acf8:	4804      	ldr	r0, [pc, #16]	; (1ad0c <net_if_ipv6_addr_rm+0xc0>)
   1acfa:	f007 fc01 	bl	22500 <net_mgmt_event_notify_with_info>
   1acfe:	e000      	b.n	1ad02 <net_if_ipv6_addr_rm+0xb6>
	return false;
   1ad00:	2500      	movs	r5, #0
}
   1ad02:	4628      	mov	r0, r5
   1ad04:	b004      	add	sp, #16
   1ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad0a:	bf00      	nop
   1ad0c:	f0600002 	.word	0xf0600002

0001ad10 <net_if_ipv6_dad_failed>:
{
   1ad10:	b510      	push	{r4, lr}
   1ad12:	b082      	sub	sp, #8
   1ad14:	ab02      	add	r3, sp, #8
   1ad16:	f843 0d04 	str.w	r0, [r3, #-4]!
   1ad1a:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ad1c:	4619      	mov	r1, r3
   1ad1e:	4620      	mov	r0, r4
   1ad20:	f7ff fdc8 	bl	1a8b4 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1ad24:	b160      	cbz	r0, 1ad40 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1ad26:	303c      	adds	r0, #60	; 0x3c
   1ad28:	f00e fb42 	bl	293b0 <k_delayed_work_cancel>
   1ad2c:	2300      	movs	r3, #0
   1ad2e:	461a      	mov	r2, r3
   1ad30:	9901      	ldr	r1, [sp, #4]
   1ad32:	4804      	ldr	r0, [pc, #16]	; (1ad44 <net_if_ipv6_dad_failed+0x34>)
   1ad34:	f007 fbe4 	bl	22500 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1ad38:	4621      	mov	r1, r4
   1ad3a:	9801      	ldr	r0, [sp, #4]
   1ad3c:	f7ff ff86 	bl	1ac4c <net_if_ipv6_addr_rm>
}
   1ad40:	b002      	add	sp, #8
   1ad42:	bd10      	pop	{r4, pc}
   1ad44:	f060000e 	.word	0xf060000e

0001ad48 <net_if_ipv6_maddr_lookup>:
{
   1ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad4a:	4607      	mov	r7, r0
   1ad4c:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad4e:	4d22      	ldr	r5, [pc, #136]	; (1add8 <net_if_ipv6_maddr_lookup+0x90>)
   1ad50:	e034      	b.n	1adbc <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1ad52:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ad54:	bb13      	cbnz	r3, 1ad9c <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ad56:	3401      	adds	r4, #1
   1ad58:	2c04      	cmp	r4, #4
   1ad5a:	dc2d      	bgt.n	1adb8 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1ad5c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad60:	00d3      	lsls	r3, r2, #3
   1ad62:	442b      	add	r3, r5
   1ad64:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ad68:	f013 0f01 	tst.w	r3, #1
   1ad6c:	d0f3      	beq.n	1ad56 <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1ad6e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad72:	00d3      	lsls	r3, r2, #3
   1ad74:	442b      	add	r3, r5
   1ad76:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1ad7a:	2b0a      	cmp	r3, #10
   1ad7c:	d1eb      	bne.n	1ad56 <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1ad7e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad82:	00d3      	lsls	r3, r2, #3
   1ad84:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1ad88:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1ad8a:	2210      	movs	r2, #16
   1ad8c:	3118      	adds	r1, #24
   1ad8e:	4638      	mov	r0, r7
   1ad90:	f00f fe00 	bl	2a994 <memcmp>
   1ad94:	2800      	cmp	r0, #0
   1ad96:	d1dc      	bne.n	1ad52 <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1ad98:	2301      	movs	r3, #1
   1ad9a:	e7db      	b.n	1ad54 <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1ad9c:	b106      	cbz	r6, 1ada0 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1ad9e:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1ada0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ada4:	00e3      	lsls	r3, r4, #3
   1ada6:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1adaa:	4428      	add	r0, r5
   1adac:	3010      	adds	r0, #16
   1adae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1adb0:	2400      	movs	r4, #0
   1adb2:	e7d1      	b.n	1ad58 <net_if_ipv6_maddr_lookup+0x10>
   1adb4:	2400      	movs	r4, #0
   1adb6:	e7cf      	b.n	1ad58 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1adb8:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1adbc:	4b07      	ldr	r3, [pc, #28]	; (1addc <net_if_ipv6_maddr_lookup+0x94>)
   1adbe:	429d      	cmp	r5, r3
   1adc0:	d008      	beq.n	1add4 <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1adc2:	2e00      	cmp	r6, #0
   1adc4:	d0f4      	beq.n	1adb0 <net_if_ipv6_maddr_lookup+0x68>
   1adc6:	6833      	ldr	r3, [r6, #0]
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d0f3      	beq.n	1adb4 <net_if_ipv6_maddr_lookup+0x6c>
   1adcc:	429d      	cmp	r5, r3
   1adce:	d1f3      	bne.n	1adb8 <net_if_ipv6_maddr_lookup+0x70>
   1add0:	2400      	movs	r4, #0
   1add2:	e7c1      	b.n	1ad58 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1add4:	2000      	movs	r0, #0
}
   1add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1add8:	2000d160 	.word	0x2000d160
   1addc:	2000d400 	.word	0x2000d400

0001ade0 <net_if_mcast_monitor>:
{
   1ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ade2:	4605      	mov	r5, r0
   1ade4:	460e      	mov	r6, r1
   1ade6:	4617      	mov	r7, r2
	return list->head;
   1ade8:	4b13      	ldr	r3, [pc, #76]	; (1ae38 <net_if_mcast_monitor+0x58>)
   1adea:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1adec:	b11b      	cbz	r3, 1adf6 <net_if_mcast_monitor+0x16>
   1adee:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1adf0:	b173      	cbz	r3, 1ae10 <net_if_mcast_monitor+0x30>
	return node->next;
   1adf2:	681c      	ldr	r4, [r3, #0]
   1adf4:	e00c      	b.n	1ae10 <net_if_mcast_monitor+0x30>
   1adf6:	461c      	mov	r4, r3
   1adf8:	e00a      	b.n	1ae10 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1adfa:	689b      	ldr	r3, [r3, #8]
   1adfc:	463a      	mov	r2, r7
   1adfe:	4631      	mov	r1, r6
   1ae00:	4628      	mov	r0, r5
   1ae02:	4798      	blx	r3
   1ae04:	e008      	b.n	1ae18 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ae06:	4623      	mov	r3, r4
   1ae08:	e00c      	b.n	1ae24 <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ae0a:	4622      	mov	r2, r4
   1ae0c:	4623      	mov	r3, r4
   1ae0e:	4614      	mov	r4, r2
   1ae10:	b183      	cbz	r3, 1ae34 <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1ae12:	685a      	ldr	r2, [r3, #4]
   1ae14:	42aa      	cmp	r2, r5
   1ae16:	d0f0      	beq.n	1adfa <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ae18:	2c00      	cmp	r4, #0
   1ae1a:	d0f6      	beq.n	1ae0a <net_if_mcast_monitor+0x2a>
   1ae1c:	4622      	mov	r2, r4
   1ae1e:	2c00      	cmp	r4, #0
   1ae20:	d0f1      	beq.n	1ae06 <net_if_mcast_monitor+0x26>
	return node->next;
   1ae22:	6823      	ldr	r3, [r4, #0]
   1ae24:	b113      	cbz	r3, 1ae2c <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ae26:	b11a      	cbz	r2, 1ae30 <net_if_mcast_monitor+0x50>
	return node->next;
   1ae28:	6822      	ldr	r2, [r4, #0]
   1ae2a:	e7ef      	b.n	1ae0c <net_if_mcast_monitor+0x2c>
   1ae2c:	2200      	movs	r2, #0
   1ae2e:	e7ed      	b.n	1ae0c <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ae30:	2200      	movs	r2, #0
   1ae32:	e7eb      	b.n	1ae0c <net_if_mcast_monitor+0x2c>
}
   1ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae36:	bf00      	nop
   1ae38:	20001af4 	.word	0x20001af4

0001ae3c <net_if_ipv6_prefix_add>:
{
   1ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae40:	4605      	mov	r5, r0
   1ae42:	460e      	mov	r6, r1
   1ae44:	4617      	mov	r7, r2
   1ae46:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1ae48:	f7ff fc00 	bl	1a64c <ipv6_prefix_find>
	if (if_prefix) {
   1ae4c:	4604      	mov	r4, r0
   1ae4e:	b110      	cbz	r0, 1ae56 <net_if_ipv6_prefix_add+0x1a>
}
   1ae50:	4620      	mov	r0, r4
   1ae52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae56:	2300      	movs	r3, #0
   1ae58:	e000      	b.n	1ae5c <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae5a:	3301      	adds	r3, #1
   1ae5c:	2b01      	cmp	r3, #1
   1ae5e:	dcf7      	bgt.n	1ae50 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1ae60:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1ae64:	008a      	lsls	r2, r1, #2
   1ae66:	442a      	add	r2, r5
   1ae68:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1ae6c:	2a00      	cmp	r2, #0
   1ae6e:	d1f4      	bne.n	1ae5a <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae70:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ae74:	009a      	lsls	r2, r3, #2
   1ae76:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1ae7a:	442c      	add	r4, r5
   1ae7c:	3410      	adds	r4, #16
   1ae7e:	4643      	mov	r3, r8
   1ae80:	463a      	mov	r2, r7
   1ae82:	4631      	mov	r1, r6
   1ae84:	4620      	mov	r0, r4
   1ae86:	f7ff fc2d 	bl	1a6e4 <net_if_ipv6_prefix_init>
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	461a      	mov	r2, r3
   1ae8e:	4629      	mov	r1, r5
   1ae90:	4801      	ldr	r0, [pc, #4]	; (1ae98 <net_if_ipv6_prefix_add+0x5c>)
   1ae92:	f007 fb35 	bl	22500 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1ae96:	e7db      	b.n	1ae50 <net_if_ipv6_prefix_add+0x14>
   1ae98:	f0600005 	.word	0xf0600005

0001ae9c <net_if_ipv6_prefix_lookup>:
{
   1ae9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aea0:	4605      	mov	r5, r0
   1aea2:	4688      	mov	r8, r1
   1aea4:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1aea6:	2400      	movs	r4, #0
   1aea8:	e01d      	b.n	1aee6 <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1aeaa:	4652      	mov	r2, sl
   1aeac:	4641      	mov	r1, r8
   1aeae:	4648      	mov	r0, r9
   1aeb0:	f00f fd70 	bl	2a994 <memcmp>
   1aeb4:	b9a0      	cbnz	r0, 1aee0 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1aeb6:	f1bb 0f00 	cmp.w	fp, #0
   1aeba:	d012      	beq.n	1aee2 <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1aebc:	f1cb 0208 	rsb	r2, fp, #8
   1aec0:	23ff      	movs	r3, #255	; 0xff
   1aec2:	4093      	lsls	r3, r2
   1aec4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1aec8:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1aecc:	f819 200a 	ldrb.w	r2, [r9, sl]
   1aed0:	f818 100a 	ldrb.w	r1, [r8, sl]
   1aed4:	404a      	eors	r2, r1
   1aed6:	4213      	tst	r3, r2
   1aed8:	bf0c      	ite	eq
   1aeda:	2601      	moveq	r6, #1
   1aedc:	2600      	movne	r6, #0
   1aede:	e000      	b.n	1aee2 <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1aee0:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1aee2:	b9e6      	cbnz	r6, 1af1e <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1aee4:	3401      	adds	r4, #1
   1aee6:	2c01      	cmp	r4, #1
   1aee8:	dc22      	bgt.n	1af30 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1aeea:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1aeee:	0093      	lsls	r3, r2, #2
   1aef0:	442b      	add	r3, r5
   1aef2:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1aef6:	2e00      	cmp	r6, #0
   1aef8:	d0f4      	beq.n	1aee4 <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1aefa:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1aefe:	0093      	lsls	r3, r2, #2
   1af00:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1af04:	442b      	add	r3, r5
   1af06:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1af0a:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1af0e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1af12:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1af16:	2f80      	cmp	r7, #128	; 0x80
   1af18:	d9c7      	bls.n	1aeaa <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1af1a:	2600      	movs	r6, #0
   1af1c:	e7e1      	b.n	1aee2 <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1af1e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1af22:	00a3      	lsls	r3, r4, #2
   1af24:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1af28:	4428      	add	r0, r5
   1af2a:	3010      	adds	r0, #16
   1af2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1af30:	2000      	movs	r0, #0
}
   1af32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001af38 <net_if_ipv6_addr_onlink>:
{
   1af38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af3c:	4606      	mov	r6, r0
   1af3e:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af40:	4d2d      	ldr	r5, [pc, #180]	; (1aff8 <net_if_ipv6_addr_onlink+0xc0>)
   1af42:	e048      	b.n	1afd6 <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1af44:	465a      	mov	r2, fp
   1af46:	4641      	mov	r1, r8
   1af48:	4648      	mov	r0, r9
   1af4a:	f00f fd23 	bl	2a994 <memcmp>
   1af4e:	b9a8      	cbnz	r0, 1af7c <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1af50:	f1ba 0f00 	cmp.w	sl, #0
   1af54:	d013      	beq.n	1af7e <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1af56:	f1ca 0208 	rsb	r2, sl, #8
   1af5a:	23ff      	movs	r3, #255	; 0xff
   1af5c:	4093      	lsls	r3, r2
   1af5e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1af62:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1af66:	f819 300b 	ldrb.w	r3, [r9, fp]
   1af6a:	f818 200b 	ldrb.w	r2, [r8, fp]
   1af6e:	4053      	eors	r3, r2
   1af70:	ea1a 0f03 	tst.w	sl, r3
   1af74:	bf0c      	ite	eq
   1af76:	2701      	moveq	r7, #1
   1af78:	2700      	movne	r7, #0
   1af7a:	e000      	b.n	1af7e <net_if_ipv6_addr_onlink+0x46>
		return false;
   1af7c:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1af7e:	bb0f      	cbnz	r7, 1afc4 <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1af80:	3401      	adds	r4, #1
   1af82:	2c01      	cmp	r4, #1
   1af84:	dc25      	bgt.n	1afd2 <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1af86:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1af8a:	0093      	lsls	r3, r2, #2
   1af8c:	442b      	add	r3, r5
   1af8e:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1af92:	2f00      	cmp	r7, #0
   1af94:	d0f4      	beq.n	1af80 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af96:	0122      	lsls	r2, r4, #4
   1af98:	1b11      	subs	r1, r2, r4
   1af9a:	008b      	lsls	r3, r1, #2
   1af9c:	4619      	mov	r1, r3
   1af9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1afa2:	442b      	add	r3, r5
   1afa4:	f103 0910 	add.w	r9, r3, #16
   1afa8:	460a      	mov	r2, r1
   1afaa:	442a      	add	r2, r5
   1afac:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1afb0:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1afb4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1afb8:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1afbc:	2b80      	cmp	r3, #128	; 0x80
   1afbe:	d9c1      	bls.n	1af44 <net_if_ipv6_addr_onlink+0xc>
		return false;
   1afc0:	2700      	movs	r7, #0
   1afc2:	e7dc      	b.n	1af7e <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1afc4:	b1a6      	cbz	r6, 1aff0 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1afc6:	6035      	str	r5, [r6, #0]
   1afc8:	e012      	b.n	1aff0 <net_if_ipv6_addr_onlink+0xb8>
   1afca:	2400      	movs	r4, #0
   1afcc:	e7d9      	b.n	1af82 <net_if_ipv6_addr_onlink+0x4a>
   1afce:	2400      	movs	r4, #0
   1afd0:	e7d7      	b.n	1af82 <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1afd2:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1afd6:	4b09      	ldr	r3, [pc, #36]	; (1affc <net_if_ipv6_addr_onlink+0xc4>)
   1afd8:	429d      	cmp	r5, r3
   1afda:	d008      	beq.n	1afee <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1afdc:	2e00      	cmp	r6, #0
   1afde:	d0f4      	beq.n	1afca <net_if_ipv6_addr_onlink+0x92>
   1afe0:	6833      	ldr	r3, [r6, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d0f3      	beq.n	1afce <net_if_ipv6_addr_onlink+0x96>
   1afe6:	429d      	cmp	r5, r3
   1afe8:	d1f3      	bne.n	1afd2 <net_if_ipv6_addr_onlink+0x9a>
   1afea:	2400      	movs	r4, #0
   1afec:	e7c9      	b.n	1af82 <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1afee:	2700      	movs	r7, #0
}
   1aff0:	4638      	mov	r0, r7
   1aff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff6:	bf00      	nop
   1aff8:	2000d160 	.word	0x2000d160
   1affc:	2000d400 	.word	0x2000d400

0001b000 <net_if_ipv6_prefix_set_timer>:
{
   1b000:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1b002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b006:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1b00a:	4b05      	ldr	r3, [pc, #20]	; (1b020 <net_if_ipv6_prefix_set_timer+0x20>)
   1b00c:	4299      	cmp	r1, r3
   1b00e:	d901      	bls.n	1b014 <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1b010:	f06f 0201 	mvn.w	r2, #1
   1b014:	4601      	mov	r1, r0
   1b016:	4803      	ldr	r0, [pc, #12]	; (1b024 <net_if_ipv6_prefix_set_timer+0x24>)
   1b018:	f00e fa24 	bl	29464 <k_delayed_work_submit_to_queue>
   1b01c:	bd08      	pop	{r3, pc}
   1b01e:	bf00      	nop
   1b020:	00418937 	.word	0x00418937
   1b024:	20002b10 	.word	0x20002b10

0001b028 <net_if_ipv6_prefix_unset_timer>:
{
   1b028:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1b02a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1b02e:	b903      	cbnz	r3, 1b032 <net_if_ipv6_prefix_unset_timer+0xa>
   1b030:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1b032:	f00e f9bd 	bl	293b0 <k_delayed_work_cancel>
   1b036:	e7fb      	b.n	1b030 <net_if_ipv6_prefix_unset_timer+0x8>

0001b038 <net_if_ipv6_prefix_rm>:
{
   1b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b03c:	4606      	mov	r6, r0
   1b03e:	460f      	mov	r7, r1
   1b040:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b042:	2400      	movs	r4, #0
   1b044:	e000      	b.n	1b048 <net_if_ipv6_prefix_rm+0x10>
   1b046:	3401      	adds	r4, #1
   1b048:	2c01      	cmp	r4, #1
   1b04a:	dc2f      	bgt.n	1b0ac <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1b04c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b050:	0093      	lsls	r3, r2, #2
   1b052:	461a      	mov	r2, r3
   1b054:	4433      	add	r3, r6
   1b056:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1b05a:	2d00      	cmp	r5, #0
   1b05c:	d0f3      	beq.n	1b046 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b05e:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1b062:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b064:	2210      	movs	r2, #16
   1b066:	4639      	mov	r1, r7
   1b068:	4410      	add	r0, r2
   1b06a:	f00f fc93 	bl	2a994 <memcmp>
   1b06e:	2800      	cmp	r0, #0
   1b070:	d1e9      	bne.n	1b046 <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1b072:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b076:	0093      	lsls	r3, r2, #2
   1b078:	4433      	add	r3, r6
   1b07a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b07e:	4543      	cmp	r3, r8
   1b080:	d1e1      	bne.n	1b046 <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1b082:	0127      	lsls	r7, r4, #4
   1b084:	1b3a      	subs	r2, r7, r4
   1b086:	0093      	lsls	r3, r2, #2
   1b088:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1b08c:	18f0      	adds	r0, r6, r3
   1b08e:	3010      	adds	r0, #16
   1b090:	f7ff ffca 	bl	1b028 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1b094:	1b3c      	subs	r4, r7, r4
   1b096:	00a3      	lsls	r3, r4, #2
   1b098:	4433      	add	r3, r6
   1b09a:	2200      	movs	r2, #0
   1b09c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1b0a0:	4613      	mov	r3, r2
   1b0a2:	4631      	mov	r1, r6
   1b0a4:	4803      	ldr	r0, [pc, #12]	; (1b0b4 <net_if_ipv6_prefix_rm+0x7c>)
   1b0a6:	f007 fa2b 	bl	22500 <net_mgmt_event_notify_with_info>
		return true;
   1b0aa:	e000      	b.n	1b0ae <net_if_ipv6_prefix_rm+0x76>
	return false;
   1b0ac:	2500      	movs	r5, #0
}
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0b4:	f0600006 	.word	0xf0600006

0001b0b8 <net_if_ipv6_router_lookup>:
{
   1b0b8:	b570      	push	{r4, r5, r6, lr}
   1b0ba:	4605      	mov	r5, r0
   1b0bc:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0be:	2400      	movs	r4, #0
   1b0c0:	2c00      	cmp	r4, #0
   1b0c2:	dd01      	ble.n	1b0c8 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1b0c4:	2000      	movs	r0, #0
}
   1b0c6:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1b0c8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b0cc:	009a      	lsls	r2, r3, #2
   1b0ce:	4b11      	ldr	r3, [pc, #68]	; (1b114 <net_if_ipv6_router_lookup+0x5c>)
   1b0d0:	4413      	add	r3, r2
   1b0d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b0d6:	b123      	cbz	r3, 1b0e2 <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1b0d8:	4b0e      	ldr	r3, [pc, #56]	; (1b114 <net_if_ipv6_router_lookup+0x5c>)
   1b0da:	4413      	add	r3, r2
   1b0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1b0de:	2b0a      	cmp	r3, #10
   1b0e0:	d001      	beq.n	1b0e6 <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0e2:	3401      	adds	r4, #1
   1b0e4:	e7ec      	b.n	1b0c0 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1b0e6:	4b0b      	ldr	r3, [pc, #44]	; (1b114 <net_if_ipv6_router_lookup+0x5c>)
   1b0e8:	4413      	add	r3, r2
   1b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1b0ec:	42ab      	cmp	r3, r5
   1b0ee:	d1f8      	bne.n	1b0e2 <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b0f0:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1b0f4:	0093      	lsls	r3, r2, #2
   1b0f6:	3328      	adds	r3, #40	; 0x28
   1b0f8:	4a06      	ldr	r2, [pc, #24]	; (1b114 <net_if_ipv6_router_lookup+0x5c>)
   1b0fa:	4413      	add	r3, r2
   1b0fc:	2210      	movs	r2, #16
   1b0fe:	4631      	mov	r1, r6
   1b100:	1d18      	adds	r0, r3, #4
   1b102:	f00f fc47 	bl	2a994 <memcmp>
   1b106:	2800      	cmp	r0, #0
   1b108:	d1eb      	bne.n	1b0e2 <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1b10a:	2344      	movs	r3, #68	; 0x44
   1b10c:	4801      	ldr	r0, [pc, #4]	; (1b114 <net_if_ipv6_router_lookup+0x5c>)
   1b10e:	fb03 0004 	mla	r0, r3, r4, r0
   1b112:	bd70      	pop	{r4, r5, r6, pc}
   1b114:	20001afc 	.word	0x20001afc

0001b118 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b118:	2300      	movs	r3, #0
   1b11a:	2b00      	cmp	r3, #0
   1b11c:	dd01      	ble.n	1b122 <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1b11e:	2000      	movs	r0, #0
}
   1b120:	4770      	bx	lr
		if (!routers[i].is_used ||
   1b122:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1b126:	0091      	lsls	r1, r2, #2
   1b128:	4a0e      	ldr	r2, [pc, #56]	; (1b164 <net_if_ipv6_router_find_default+0x4c>)
   1b12a:	440a      	add	r2, r1
   1b12c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1b130:	b14a      	cbz	r2, 1b146 <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1b132:	4a0c      	ldr	r2, [pc, #48]	; (1b164 <net_if_ipv6_router_find_default+0x4c>)
   1b134:	440a      	add	r2, r1
   1b136:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1b13a:	b122      	cbz	r2, 1b146 <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1b13c:	4a09      	ldr	r2, [pc, #36]	; (1b164 <net_if_ipv6_router_find_default+0x4c>)
   1b13e:	440a      	add	r2, r1
   1b140:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1b142:	2a0a      	cmp	r2, #10
   1b144:	d001      	beq.n	1b14a <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b146:	3301      	adds	r3, #1
   1b148:	e7e7      	b.n	1b11a <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1b14a:	b120      	cbz	r0, 1b156 <net_if_ipv6_router_find_default+0x3e>
   1b14c:	4a05      	ldr	r2, [pc, #20]	; (1b164 <net_if_ipv6_router_find_default+0x4c>)
   1b14e:	440a      	add	r2, r1
   1b150:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1b152:	4290      	cmp	r0, r2
   1b154:	d1f7      	bne.n	1b146 <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1b156:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b15a:	009a      	lsls	r2, r3, #2
   1b15c:	4801      	ldr	r0, [pc, #4]	; (1b164 <net_if_ipv6_router_find_default+0x4c>)
   1b15e:	4410      	add	r0, r2
   1b160:	4770      	bx	lr
   1b162:	bf00      	nop
   1b164:	20001afc 	.word	0x20001afc

0001b168 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1b168:	b508      	push	{r3, lr}
   1b16a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b16e:	fb02 f201 	mul.w	r2, r2, r1
   1b172:	4601      	mov	r1, r0
   1b174:	4801      	ldr	r0, [pc, #4]	; (1b17c <net_if_ipv6_router_update_lifetime+0x14>)
   1b176:	f00e f975 	bl	29464 <k_delayed_work_submit_to_queue>
   1b17a:	bd08      	pop	{r3, pc}
   1b17c:	20002b10 	.word	0x20002b10

0001b180 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b184:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b186:	2300      	movs	r3, #0
   1b188:	2b00      	cmp	r3, #0
   1b18a:	dd04      	ble.n	1b196 <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1b18c:	2400      	movs	r4, #0
}
   1b18e:	4620      	mov	r0, r4
   1b190:	b004      	add	sp, #16
   1b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1b196:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1b19a:	00a5      	lsls	r5, r4, #2
   1b19c:	4c20      	ldr	r4, [pc, #128]	; (1b220 <net_if_ipv6_router_add+0xa0>)
   1b19e:	442c      	add	r4, r5
   1b1a0:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1b1a4:	b10c      	cbz	r4, 1b1aa <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b1a6:	3301      	adds	r3, #1
   1b1a8:	e7ee      	b.n	1b188 <net_if_ipv6_router_add+0x8>
   1b1aa:	4616      	mov	r6, r2
   1b1ac:	460f      	mov	r7, r1
   1b1ae:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1b1b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b1b4:	009a      	lsls	r2, r3, #2
   1b1b6:	4c1a      	ldr	r4, [pc, #104]	; (1b220 <net_if_ipv6_router_add+0xa0>)
   1b1b8:	4414      	add	r4, r2
	router->is_used = true;
   1b1ba:	2301      	movs	r3, #1
   1b1bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1b1c0:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1b1c2:	230a      	movs	r3, #10
   1b1c4:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b1c6:	466d      	mov	r5, sp
   1b1c8:	6808      	ldr	r0, [r1, #0]
   1b1ca:	6849      	ldr	r1, [r1, #4]
   1b1cc:	68ba      	ldr	r2, [r7, #8]
   1b1ce:	68fb      	ldr	r3, [r7, #12]
   1b1d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1b1d2:	466d      	mov	r5, sp
   1b1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b1d6:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b1d8:	6321      	str	r1, [r4, #48]	; 0x30
   1b1da:	6362      	str	r2, [r4, #52]	; 0x34
   1b1dc:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1b1de:	b966      	cbnz	r6, 1b1fa <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1b1e0:	2300      	movs	r3, #0
   1b1e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b1e6:	2301      	movs	r3, #1
   1b1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b1ec:	2300      	movs	r3, #0
   1b1ee:	461a      	mov	r2, r3
   1b1f0:	4641      	mov	r1, r8
   1b1f2:	480c      	ldr	r0, [pc, #48]	; (1b224 <net_if_ipv6_router_add+0xa4>)
   1b1f4:	f007 f984 	bl	22500 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1b1f8:	e7c9      	b.n	1b18e <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1b1fa:	2301      	movs	r3, #1
   1b1fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1b200:	2300      	movs	r3, #0
   1b202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b206:	4908      	ldr	r1, [pc, #32]	; (1b228 <net_if_ipv6_router_add+0xa8>)
   1b208:	4620      	mov	r0, r4
   1b20a:	f00e f8b3 	bl	29374 <k_delayed_work_init>
   1b20e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b212:	fb02 f206 	mul.w	r2, r2, r6
   1b216:	4621      	mov	r1, r4
   1b218:	4804      	ldr	r0, [pc, #16]	; (1b22c <net_if_ipv6_router_add+0xac>)
   1b21a:	f00e f923 	bl	29464 <k_delayed_work_submit_to_queue>
   1b21e:	e7e5      	b.n	1b1ec <net_if_ipv6_router_add+0x6c>
   1b220:	20001afc 	.word	0x20001afc
   1b224:	f0600009 	.word	0xf0600009
   1b228:	0001a5fd 	.word	0x0001a5fd
   1b22c:	20002b10 	.word	0x20002b10

0001b230 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1b230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b234:	2400      	movs	r4, #0
   1b236:	2c00      	cmp	r4, #0
   1b238:	dd03      	ble.n	1b242 <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1b23a:	2500      	movs	r5, #0
}
   1b23c:	4628      	mov	r0, r5
   1b23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1b242:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b246:	009a      	lsls	r2, r3, #2
   1b248:	4b0d      	ldr	r3, [pc, #52]	; (1b280 <net_if_ipv6_router_rm+0x50>)
   1b24a:	4413      	add	r3, r2
   1b24c:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1b250:	b11d      	cbz	r5, 1b25a <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1b252:	4b0b      	ldr	r3, [pc, #44]	; (1b280 <net_if_ipv6_router_rm+0x50>)
   1b254:	4413      	add	r3, r2
   1b256:	4283      	cmp	r3, r0
   1b258:	d001      	beq.n	1b25e <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b25a:	3401      	adds	r4, #1
   1b25c:	e7eb      	b.n	1b236 <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b25e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1b280 <net_if_ipv6_router_rm+0x50>
   1b262:	4617      	mov	r7, r2
   1b264:	4447      	add	r7, r8
   1b266:	4638      	mov	r0, r7
   1b268:	f00e f8a2 	bl	293b0 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b26c:	2200      	movs	r2, #0
   1b26e:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1b272:	4613      	mov	r3, r2
   1b274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b276:	4803      	ldr	r0, [pc, #12]	; (1b284 <net_if_ipv6_router_rm+0x54>)
   1b278:	f007 f942 	bl	22500 <net_mgmt_event_notify_with_info>
		return true;
   1b27c:	e7de      	b.n	1b23c <net_if_ipv6_router_rm+0xc>
   1b27e:	bf00      	nop
   1b280:	20001afc 	.word	0x20001afc
   1b284:	f060000a 	.word	0xf060000a

0001b288 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1b288:	b430      	push	{r4, r5}
   1b28a:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b28c:	2300      	movs	r3, #0
   1b28e:	e006      	b.n	1b29e <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b290:	226c      	movs	r2, #108	; 0x6c
   1b292:	fb02 4203 	mla	r2, r2, r3, r4
   1b296:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b298:	2a0a      	cmp	r2, #10
   1b29a:	d014      	beq.n	1b2c6 <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b29c:	3301      	adds	r3, #1
   1b29e:	2b02      	cmp	r3, #2
   1b2a0:	dc1d      	bgt.n	1b2de <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1b2a2:	226c      	movs	r2, #108	; 0x6c
   1b2a4:	fb02 4203 	mla	r2, r2, r3, r4
   1b2a8:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b2ac:	2a00      	cmp	r2, #0
   1b2ae:	d0f5      	beq.n	1b29c <net_if_ipv6_get_ll+0x14>
   1b2b0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b2b4:	d0ec      	beq.n	1b290 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b2b6:	226c      	movs	r2, #108	; 0x6c
   1b2b8:	fb02 4203 	mla	r2, r2, r3, r4
   1b2bc:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b2c0:	4291      	cmp	r1, r2
   1b2c2:	d1eb      	bne.n	1b29c <net_if_ipv6_get_ll+0x14>
   1b2c4:	e7e4      	b.n	1b290 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b2c6:	206c      	movs	r0, #108	; 0x6c
   1b2c8:	fb00 f003 	mul.w	r0, r0, r3
   1b2cc:	3020      	adds	r0, #32
   1b2ce:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b2d0:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1b2d4:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b2d8:	4295      	cmp	r5, r2
   1b2da:	d1df      	bne.n	1b29c <net_if_ipv6_get_ll+0x14>
   1b2dc:	e000      	b.n	1b2e0 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1b2de:	2000      	movs	r0, #0
}
   1b2e0:	bc30      	pop	{r4, r5}
   1b2e2:	4770      	bx	lr

0001b2e4 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2e8:	4607      	mov	r7, r0
   1b2ea:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b2ec:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1b2f0:	429a      	cmp	r2, r3
   1b2f2:	f000 80d7 	beq.w	1b4a4 <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1b2f6:	780b      	ldrb	r3, [r1, #0]
   1b2f8:	2bff      	cmp	r3, #255	; 0xff
   1b2fa:	d004      	beq.n	1b306 <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1b2fc:	f04f 0900 	mov.w	r9, #0
   1b300:	4e74      	ldr	r6, [pc, #464]	; (1b4d4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b302:	46c8      	mov	r8, r9
   1b304:	e05b      	b.n	1b3be <net_if_ipv6_select_src_addr+0xda>
   1b306:	4c73      	ldr	r4, [pc, #460]	; (1b4d4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b308:	e0c0      	b.n	1b48c <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1b30a:	246c      	movs	r4, #108	; 0x6c
   1b30c:	fb04 640e 	mla	r4, r4, lr, r6
   1b310:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b312:	2c0a      	cmp	r4, #10
   1b314:	d01e      	beq.n	1b354 <net_if_ipv6_select_src_addr+0x70>
	return false;
   1b316:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b318:	bb8b      	cbnz	r3, 1b37e <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b31a:	f10e 0e01 	add.w	lr, lr, #1
   1b31e:	fa5f fe8e 	uxtb.w	lr, lr
   1b322:	f1be 0f02 	cmp.w	lr, #2
   1b326:	d846      	bhi.n	1b3b6 <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b328:	46f4      	mov	ip, lr
   1b32a:	236c      	movs	r3, #108	; 0x6c
   1b32c:	fb03 f30e 	mul.w	r3, r3, lr
   1b330:	f103 0220 	add.w	r2, r3, #32
   1b334:	4432      	add	r2, r6
   1b336:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b338:	4433      	add	r3, r6
   1b33a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b33e:	2b00      	cmp	r3, #0
   1b340:	d0ea      	beq.n	1b318 <net_if_ipv6_select_src_addr+0x34>
   1b342:	246c      	movs	r4, #108	; 0x6c
   1b344:	fb04 640e 	mla	r4, r4, lr, r6
   1b348:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1b34c:	2c01      	cmp	r4, #1
   1b34e:	d0dc      	beq.n	1b30a <net_if_ipv6_select_src_addr+0x26>
	return false;
   1b350:	2300      	movs	r3, #0
   1b352:	e7e1      	b.n	1b318 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b354:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b356:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b35a:	4294      	cmp	r4, r2
   1b35c:	d1dc      	bne.n	1b318 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1b35e:	2300      	movs	r3, #0
   1b360:	e7da      	b.n	1b318 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b362:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1b364:	2300      	movs	r3, #0
   1b366:	2b07      	cmp	r3, #7
   1b368:	d81b      	bhi.n	1b3a2 <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1b36a:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b36e:	d118      	bne.n	1b3a2 <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1b370:	3401      	adds	r4, #1
   1b372:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1b374:	006d      	lsls	r5, r5, #1
   1b376:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1b378:	3301      	adds	r3, #1
   1b37a:	b2db      	uxtb	r3, r3
   1b37c:	e7f3      	b.n	1b366 <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b37e:	2400      	movs	r4, #0
   1b380:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1b382:	2b0f      	cmp	r3, #15
   1b384:	d80d      	bhi.n	1b3a2 <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b386:	5ccd      	ldrb	r5, [r1, r3]
   1b388:	226c      	movs	r2, #108	; 0x6c
   1b38a:	fb02 620c 	mla	r2, r2, ip, r6
   1b38e:	441a      	add	r2, r3
   1b390:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b394:	4295      	cmp	r5, r2
   1b396:	d1e4      	bne.n	1b362 <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1b398:	3408      	adds	r4, #8
   1b39a:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1b39c:	3301      	adds	r3, #1
   1b39e:	b2db      	uxtb	r3, r3
   1b3a0:	e7ef      	b.n	1b382 <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1b3a2:	454c      	cmp	r4, r9
   1b3a4:	d3b9      	bcc.n	1b31a <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b3a6:	206c      	movs	r0, #108	; 0x6c
   1b3a8:	fb00 f00c 	mul.w	r0, r0, ip
   1b3ac:	3020      	adds	r0, #32
   1b3ae:	4430      	add	r0, r6
   1b3b0:	3010      	adds	r0, #16
			*best_so_far = len;
   1b3b2:	46a1      	mov	r9, r4
   1b3b4:	e7b1      	b.n	1b31a <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1b3b6:	b150      	cbz	r0, 1b3ce <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1b3b8:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1b3bc:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1b3be:	b947      	cbnz	r7, 1b3d2 <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1b3c0:	4b45      	ldr	r3, [pc, #276]	; (1b4d8 <net_if_ipv6_select_src_addr+0x1f4>)
   1b3c2:	429e      	cmp	r6, r3
   1b3c4:	d005      	beq.n	1b3d2 <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3c6:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1b3ca:	4670      	mov	r0, lr
   1b3cc:	e7a9      	b.n	1b322 <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1b3ce:	4640      	mov	r0, r8
   1b3d0:	e7f2      	b.n	1b3b8 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1b3d2:	2f00      	cmp	r7, #0
   1b3d4:	d073      	beq.n	1b4be <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3d6:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1b3d8:	46a8      	mov	r8, r5
   1b3da:	e009      	b.n	1b3f0 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1b3dc:	206c      	movs	r0, #108	; 0x6c
   1b3de:	fb00 7005 	mla	r0, r0, r5, r7
   1b3e2:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b3e4:	280a      	cmp	r0, #10
   1b3e6:	d01b      	beq.n	1b420 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1b3e8:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b3ea:	bb73      	cbnz	r3, 1b44a <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3ec:	3501      	adds	r5, #1
   1b3ee:	b2ed      	uxtb	r5, r5
   1b3f0:	2d02      	cmp	r5, #2
   1b3f2:	d864      	bhi.n	1b4be <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b3f4:	462e      	mov	r6, r5
   1b3f6:	236c      	movs	r3, #108	; 0x6c
   1b3f8:	fb03 f305 	mul.w	r3, r3, r5
   1b3fc:	f103 0220 	add.w	r2, r3, #32
   1b400:	443a      	add	r2, r7
   1b402:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b404:	443b      	add	r3, r7
   1b406:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d0ed      	beq.n	1b3ea <net_if_ipv6_select_src_addr+0x106>
   1b40e:	206c      	movs	r0, #108	; 0x6c
   1b410:	fb00 7005 	mla	r0, r0, r5, r7
   1b414:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1b418:	2801      	cmp	r0, #1
   1b41a:	d0df      	beq.n	1b3dc <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1b41c:	2300      	movs	r3, #0
   1b41e:	e7e4      	b.n	1b3ea <net_if_ipv6_select_src_addr+0x106>
   1b420:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b422:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b426:	4290      	cmp	r0, r2
   1b428:	d1df      	bne.n	1b3ea <net_if_ipv6_select_src_addr+0x106>
	return false;
   1b42a:	2300      	movs	r3, #0
   1b42c:	e7dd      	b.n	1b3ea <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b42e:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1b430:	2300      	movs	r3, #0
   1b432:	2b07      	cmp	r3, #7
   1b434:	d81b      	bhi.n	1b46e <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1b436:	f014 0f80 	tst.w	r4, #128	; 0x80
   1b43a:	d118      	bne.n	1b46e <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1b43c:	3001      	adds	r0, #1
   1b43e:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1b440:	0064      	lsls	r4, r4, #1
   1b442:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1b444:	3301      	adds	r3, #1
   1b446:	b2db      	uxtb	r3, r3
   1b448:	e7f3      	b.n	1b432 <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b44a:	2000      	movs	r0, #0
   1b44c:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1b44e:	2b0f      	cmp	r3, #15
   1b450:	d80d      	bhi.n	1b46e <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b452:	5ccc      	ldrb	r4, [r1, r3]
   1b454:	226c      	movs	r2, #108	; 0x6c
   1b456:	fb02 7206 	mla	r2, r2, r6, r7
   1b45a:	441a      	add	r2, r3
   1b45c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b460:	4294      	cmp	r4, r2
   1b462:	d1e4      	bne.n	1b42e <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1b464:	3008      	adds	r0, #8
   1b466:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1b468:	3301      	adds	r3, #1
   1b46a:	b2db      	uxtb	r3, r3
   1b46c:	e7ef      	b.n	1b44e <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1b46e:	4548      	cmp	r0, r9
   1b470:	d3bc      	bcc.n	1b3ec <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b472:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1b476:	fb08 f806 	mul.w	r8, r8, r6
   1b47a:	f108 0820 	add.w	r8, r8, #32
   1b47e:	44b8      	add	r8, r7
   1b480:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1b484:	4681      	mov	r9, r0
   1b486:	e7b1      	b.n	1b3ec <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1b488:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1b48c:	b97f      	cbnz	r7, 1b4ae <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1b48e:	4b12      	ldr	r3, [pc, #72]	; (1b4d8 <net_if_ipv6_select_src_addr+0x1f4>)
   1b490:	429c      	cmp	r4, r3
   1b492:	d009      	beq.n	1b4a8 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b494:	2101      	movs	r1, #1
   1b496:	4620      	mov	r0, r4
   1b498:	f7ff fef6 	bl	1b288 <net_if_ipv6_get_ll>
			if (addr) {
   1b49c:	4680      	mov	r8, r0
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d0f2      	beq.n	1b488 <net_if_ipv6_select_src_addr+0x1a4>
   1b4a2:	e006      	b.n	1b4b2 <net_if_ipv6_select_src_addr+0x1ce>
   1b4a4:	4c0b      	ldr	r4, [pc, #44]	; (1b4d4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b4a6:	e7f1      	b.n	1b48c <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1b4a8:	f04f 0800 	mov.w	r8, #0
   1b4ac:	e001      	b.n	1b4b2 <net_if_ipv6_select_src_addr+0x1ce>
   1b4ae:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1b4b2:	b127      	cbz	r7, 1b4be <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b4b4:	2101      	movs	r1, #1
   1b4b6:	4638      	mov	r0, r7
   1b4b8:	f7ff fee6 	bl	1b288 <net_if_ipv6_get_ll>
   1b4bc:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1b4be:	f1b8 0f00 	cmp.w	r8, #0
   1b4c2:	d002      	beq.n	1b4ca <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1b4c4:	4640      	mov	r0, r8
}
   1b4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1b4ca:	f003 fd67 	bl	1ef9c <net_ipv6_unspecified_address>
   1b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b4d2:	bf00      	nop
   1b4d4:	2000d160 	.word	0x2000d160
   1b4d8:	2000d400 	.word	0x2000d400

0001b4dc <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b4dc:	b510      	push	{r4, lr}
   1b4de:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1b4e0:	f7e6 fdb4 	bl	204c <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1b4e4:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1b4e8:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1b4ec:	fb03 0012 	mls	r0, r3, r2, r0
   1b4f0:	bd10      	pop	{r4, pc}
	...

0001b4f4 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4f6:	4605      	mov	r5, r0
   1b4f8:	460e      	mov	r6, r1
   1b4fa:	4617      	mov	r7, r2
	return list->head;
   1b4fc:	4b11      	ldr	r3, [pc, #68]	; (1b544 <net_if_call_link_cb+0x50>)
   1b4fe:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b500:	b11b      	cbz	r3, 1b50a <net_if_call_link_cb+0x16>
   1b502:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b504:	b143      	cbz	r3, 1b518 <net_if_call_link_cb+0x24>
	return node->next;
   1b506:	681c      	ldr	r4, [r3, #0]
   1b508:	e006      	b.n	1b518 <net_if_call_link_cb+0x24>
   1b50a:	461c      	mov	r4, r3
   1b50c:	e004      	b.n	1b518 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b50e:	4623      	mov	r3, r4
   1b510:	e00e      	b.n	1b530 <net_if_call_link_cb+0x3c>
   1b512:	4622      	mov	r2, r4
   1b514:	4623      	mov	r3, r4
   1b516:	4614      	mov	r4, r2
   1b518:	b193      	cbz	r3, 1b540 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1b51a:	685b      	ldr	r3, [r3, #4]
   1b51c:	463a      	mov	r2, r7
   1b51e:	4631      	mov	r1, r6
   1b520:	4628      	mov	r0, r5
   1b522:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b524:	2c00      	cmp	r4, #0
   1b526:	d0f4      	beq.n	1b512 <net_if_call_link_cb+0x1e>
   1b528:	4622      	mov	r2, r4
   1b52a:	2c00      	cmp	r4, #0
   1b52c:	d0ef      	beq.n	1b50e <net_if_call_link_cb+0x1a>
	return node->next;
   1b52e:	6823      	ldr	r3, [r4, #0]
   1b530:	b113      	cbz	r3, 1b538 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b532:	b11a      	cbz	r2, 1b53c <net_if_call_link_cb+0x48>
	return node->next;
   1b534:	6822      	ldr	r2, [r4, #0]
   1b536:	e7ed      	b.n	1b514 <net_if_call_link_cb+0x20>
   1b538:	2200      	movs	r2, #0
   1b53a:	e7eb      	b.n	1b514 <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b53c:	2200      	movs	r2, #0
   1b53e:	e7e9      	b.n	1b514 <net_if_call_link_cb+0x20>
	}
}
   1b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b542:	bf00      	nop
   1b544:	20001aec 	.word	0x20001aec

0001b548 <net_if_send_data>:
{
   1b548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b54c:	4606      	mov	r6, r0
   1b54e:	460c      	mov	r4, r1
	return pkt->context;
   1b550:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b552:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1b556:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1b55a:	f3bf 8f5b 	dmb	ish
   1b55e:	68c3      	ldr	r3, [r0, #12]
   1b560:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b564:	f013 0f01 	tst.w	r3, #1
   1b568:	d10a      	bne.n	1b580 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1b56a:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1b56e:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1b570:	b10f      	cbz	r7, 1b576 <net_if_send_data+0x2e>
   1b572:	2d02      	cmp	r5, #2
   1b574:	d02e      	beq.n	1b5d4 <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1b576:	2d02      	cmp	r5, #2
   1b578:	d050      	beq.n	1b61c <net_if_send_data+0xd4>
}
   1b57a:	4628      	mov	r0, r5
   1b57c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b580:	f3bf 8f5b 	dmb	ish
   1b584:	68c3      	ldr	r3, [r0, #12]
   1b586:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b58a:	f013 0f02 	tst.w	r3, #2
   1b58e:	d101      	bne.n	1b594 <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1b590:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b592:	b173      	cbz	r3, 1b5b2 <net_if_send_data+0x6a>
	return pkt->family;
   1b594:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b598:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b59c:	2b0a      	cmp	r3, #10
   1b59e:	d00f      	beq.n	1b5c0 <net_if_send_data+0x78>
   1b5a0:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b5a2:	6873      	ldr	r3, [r6, #4]
   1b5a4:	685b      	ldr	r3, [r3, #4]
   1b5a6:	4630      	mov	r0, r6
   1b5a8:	4798      	blx	r3
   1b5aa:	4605      	mov	r5, r0
	int status = -EIO;
   1b5ac:	f06f 0804 	mvn.w	r8, #4
   1b5b0:	e7de      	b.n	1b570 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1b5b2:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b5b4:	691a      	ldr	r2, [r3, #16]
   1b5b6:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b5b8:	7d1b      	ldrb	r3, [r3, #20]
   1b5ba:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1b5be:	e7e9      	b.n	1b594 <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b5c0:	4620      	mov	r0, r4
   1b5c2:	f005 f9fb 	bl	209bc <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b5c6:	4601      	mov	r1, r0
   1b5c8:	2800      	cmp	r0, #0
   1b5ca:	d1ea      	bne.n	1b5a2 <net_if_send_data+0x5a>
	int status = -EIO;
   1b5cc:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1b5d0:	2501      	movs	r5, #1
   1b5d2:	e7cd      	b.n	1b570 <net_if_send_data+0x28>
	if (!context) {
   1b5d4:	2f00      	cmp	r7, #0
   1b5d6:	d0ce      	beq.n	1b576 <net_if_send_data+0x2e>
	if (context->send_cb) {
   1b5d8:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1b5dc:	f1bb 0f00 	cmp.w	fp, #0
   1b5e0:	d004      	beq.n	1b5ec <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1b5e2:	683b      	ldr	r3, [r7, #0]
   1b5e4:	4652      	mov	r2, sl
   1b5e6:	4641      	mov	r1, r8
   1b5e8:	4638      	mov	r0, r7
   1b5ea:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1b5ec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b5f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b5f4:	d009      	beq.n	1b60a <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1b5f6:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b5f8:	2b11      	cmp	r3, #17
   1b5fa:	d008      	beq.n	1b60e <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b5fc:	2b06      	cmp	r3, #6
   1b5fe:	d1ba      	bne.n	1b576 <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1b600:	4a0b      	ldr	r2, [pc, #44]	; (1b630 <net_if_send_data+0xe8>)
   1b602:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b604:	3301      	adds	r3, #1
   1b606:	6593      	str	r3, [r2, #88]	; 0x58
   1b608:	e7b5      	b.n	1b576 <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1b60a:	2311      	movs	r3, #17
   1b60c:	e7f4      	b.n	1b5f8 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1b60e:	4a08      	ldr	r2, [pc, #32]	; (1b630 <net_if_send_data+0xe8>)
   1b610:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b614:	3301      	adds	r3, #1
   1b616:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b61a:	e7ac      	b.n	1b576 <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1b61c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d0ab      	beq.n	1b57a <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1b622:	4642      	mov	r2, r8
   1b624:	4649      	mov	r1, r9
   1b626:	4630      	mov	r0, r6
   1b628:	f7ff ff64 	bl	1b4f4 <net_if_call_link_cb>
   1b62c:	e7a5      	b.n	1b57a <net_if_send_data+0x32>
   1b62e:	bf00      	nop
   1b630:	200029f0 	.word	0x200029f0

0001b634 <net_if_tx>:
{
   1b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b638:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b63a:	f850 3b18 	ldr.w	r3, [r0], #24
   1b63e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b642:	2100      	movs	r1, #0
   1b644:	f00c fd56 	bl	280f4 <k_queue_get>
	if (!pkt) {
   1b648:	2800      	cmp	r0, #0
   1b64a:	d062      	beq.n	1b712 <net_if_tx+0xde>
   1b64c:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1b64e:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1b652:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1b654:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1b658:	f3bf 8f5b 	dmb	ish
   1b65c:	68f3      	ldr	r3, [r6, #12]
   1b65e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b662:	f013 0f01 	tst.w	r3, #1
   1b666:	d039      	beq.n	1b6dc <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1b668:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b66a:	2400      	movs	r4, #0
   1b66c:	e002      	b.n	1b674 <net_if_tx+0x40>
		bytes += buf->len;
   1b66e:	899a      	ldrh	r2, [r3, #12]
   1b670:	4414      	add	r4, r2
		buf = buf->frags;
   1b672:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b674:	2b00      	cmp	r3, #0
   1b676:	d1fa      	bne.n	1b66e <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1b678:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1b67c:	f043 0301 	orr.w	r3, r3, #1
   1b680:	f36f 0341 	bfc	r3, #1, #1
   1b684:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1b688:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b68c:	4629      	mov	r1, r5
   1b68e:	4630      	mov	r0, r6
   1b690:	4798      	blx	r3
   1b692:	4681      	mov	r9, r0
	if (status < 0) {
   1b694:	f1b9 0f00 	cmp.w	r9, #0
   1b698:	db23      	blt.n	1b6e2 <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1b69a:	4a21      	ldr	r2, [pc, #132]	; (1b720 <net_if_tx+0xec>)
   1b69c:	6853      	ldr	r3, [r2, #4]
   1b69e:	441c      	add	r4, r3
   1b6a0:	6054      	str	r4, [r2, #4]
	if (context) {
   1b6a2:	b18f      	cbz	r7, 1b6c8 <net_if_tx+0x94>
	if (!context) {
   1b6a4:	b187      	cbz	r7, 1b6c8 <net_if_tx+0x94>
	if (context->send_cb) {
   1b6a6:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1b6a8:	b124      	cbz	r4, 1b6b4 <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b6aa:	683b      	ldr	r3, [r7, #0]
   1b6ac:	4652      	mov	r2, sl
   1b6ae:	4649      	mov	r1, r9
   1b6b0:	4638      	mov	r0, r7
   1b6b2:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1b6b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b6b8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b6bc:	d01b      	beq.n	1b6f6 <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1b6be:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b6c0:	2b11      	cmp	r3, #17
   1b6c2:	d01a      	beq.n	1b6fa <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b6c4:	2b06      	cmp	r3, #6
   1b6c6:	d01f      	beq.n	1b708 <net_if_tx+0xd4>
	if (dst->addr) {
   1b6c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b6ca:	b32b      	cbz	r3, 1b718 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1b6cc:	464a      	mov	r2, r9
   1b6ce:	4641      	mov	r1, r8
   1b6d0:	4630      	mov	r0, r6
   1b6d2:	f7ff ff0f 	bl	1b4f4 <net_if_call_link_cb>
	return true;
   1b6d6:	2001      	movs	r0, #1
   1b6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b6dc:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1b6e0:	e7d8      	b.n	1b694 <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1b6e2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1b6e6:	f36f 0300 	bfc	r3, #0, #1
   1b6ea:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1b6ee:	4628      	mov	r0, r5
   1b6f0:	f001 fa93 	bl	1cc1a <net_pkt_unref>
   1b6f4:	e7d5      	b.n	1b6a2 <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1b6f6:	2311      	movs	r3, #17
   1b6f8:	e7e2      	b.n	1b6c0 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1b6fa:	4a09      	ldr	r2, [pc, #36]	; (1b720 <net_if_tx+0xec>)
   1b6fc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b700:	3301      	adds	r3, #1
   1b702:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b706:	e7df      	b.n	1b6c8 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1b708:	4a05      	ldr	r2, [pc, #20]	; (1b720 <net_if_tx+0xec>)
   1b70a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b70c:	3301      	adds	r3, #1
   1b70e:	6593      	str	r3, [r2, #88]	; 0x58
   1b710:	e7da      	b.n	1b6c8 <net_if_tx+0x94>
		return false;
   1b712:	2000      	movs	r0, #0
   1b714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1b718:	2001      	movs	r0, #1
}
   1b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b71e:	bf00      	nop
   1b720:	200029f0 	.word	0x200029f0

0001b724 <net_if_flush_tx>:
	return (!list->head);
   1b724:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b726:	b14b      	cbz	r3, 1b73c <net_if_flush_tx+0x18>
{
   1b728:	b510      	push	{r4, lr}
   1b72a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b72c:	f00c fef8 	bl	28520 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b730:	4620      	mov	r0, r4
   1b732:	f7ff ff7f 	bl	1b634 <net_if_tx>
   1b736:	2800      	cmp	r0, #0
   1b738:	d1fa      	bne.n	1b730 <net_if_flush_tx+0xc>
   1b73a:	bd10      	pop	{r4, pc}
   1b73c:	4770      	bx	lr

0001b73e <net_if_process_events>:
{
   1b73e:	b538      	push	{r3, r4, r5, lr}
   1b740:	4604      	mov	r4, r0
   1b742:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1b744:	e001      	b.n	1b74a <net_if_process_events+0xc>
   1b746:	3414      	adds	r4, #20
   1b748:	3d01      	subs	r5, #1
   1b74a:	b145      	cbz	r5, 1b75e <net_if_process_events+0x20>
		switch (event->state) {
   1b74c:	7b63      	ldrb	r3, [r4, #13]
   1b74e:	091b      	lsrs	r3, r3, #4
   1b750:	2b04      	cmp	r3, #4
   1b752:	d1f8      	bne.n	1b746 <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b754:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1b756:	3818      	subs	r0, #24
   1b758:	f7ff ff6c 	bl	1b634 <net_if_tx>
			break;
   1b75c:	e7f3      	b.n	1b746 <net_if_process_events+0x8>
}
   1b75e:	bd38      	pop	{r3, r4, r5, pc}

0001b760 <net_if_tx_thread>:
{
   1b760:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b762:	f00d f836 	bl	287d2 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1b766:	f7ff f849 	bl	1a7fc <net_if_prepare_events>
   1b76a:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b76c:	4c06      	ldr	r4, [pc, #24]	; (1b788 <net_if_tx_thread+0x28>)
   1b76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b772:	4601      	mov	r1, r0
   1b774:	4620      	mov	r0, r4
   1b776:	f00c f98b 	bl	27a90 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1b77a:	4629      	mov	r1, r5
   1b77c:	4620      	mov	r0, r4
   1b77e:	f7ff ffde 	bl	1b73e <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b782:	f00c fecd 	bl	28520 <_impl_k_yield>
   1b786:	e7ee      	b.n	1b766 <net_if_tx_thread+0x6>
   1b788:	2000d400 	.word	0x2000d400

0001b78c <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b78c:	4a05      	ldr	r2, [pc, #20]	; (1b7a4 <net_if_get_by_index+0x18>)
   1b78e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1b792:	fb03 2000 	mla	r0, r3, r0, r2
   1b796:	4b04      	ldr	r3, [pc, #16]	; (1b7a8 <net_if_get_by_index+0x1c>)
   1b798:	4298      	cmp	r0, r3
   1b79a:	d200      	bcs.n	1b79e <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b79c:	4770      	bx	lr
		return NULL;
   1b79e:	2000      	movs	r0, #0
   1b7a0:	e7fc      	b.n	1b79c <net_if_get_by_index+0x10>
   1b7a2:	bf00      	nop
   1b7a4:	2000d160 	.word	0x2000d160
   1b7a8:	2000d400 	.word	0x2000d400

0001b7ac <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b7ac:	4b03      	ldr	r3, [pc, #12]	; (1b7bc <net_if_get_by_iface+0x10>)
   1b7ae:	1ac0      	subs	r0, r0, r3
   1b7b0:	1140      	asrs	r0, r0, #5
   1b7b2:	4b03      	ldr	r3, [pc, #12]	; (1b7c0 <net_if_get_by_iface+0x14>)
   1b7b4:	fb03 f000 	mul.w	r0, r3, r0
}
   1b7b8:	b2c0      	uxtb	r0, r0
   1b7ba:	4770      	bx	lr
   1b7bc:	2000d160 	.word	0x2000d160
   1b7c0:	3cf3cf3d 	.word	0x3cf3cf3d

0001b7c4 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1b7c4:	b570      	push	{r4, r5, r6, lr}
   1b7c6:	4606      	mov	r6, r0
   1b7c8:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b7ca:	4c05      	ldr	r4, [pc, #20]	; (1b7e0 <net_if_foreach+0x1c>)
   1b7cc:	e004      	b.n	1b7d8 <net_if_foreach+0x14>
		cb(iface, user_data);
   1b7ce:	4629      	mov	r1, r5
   1b7d0:	4620      	mov	r0, r4
   1b7d2:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b7d4:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b7d8:	4b02      	ldr	r3, [pc, #8]	; (1b7e4 <net_if_foreach+0x20>)
   1b7da:	429c      	cmp	r4, r3
   1b7dc:	d1f7      	bne.n	1b7ce <net_if_foreach+0xa>
	}
}
   1b7de:	bd70      	pop	{r4, r5, r6, pc}
   1b7e0:	2000d160 	.word	0x2000d160
   1b7e4:	2000d400 	.word	0x2000d400

0001b7e8 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1b7e8:	b570      	push	{r4, r5, r6, lr}
   1b7ea:	f3bf 8f5b 	dmb	ish
   1b7ee:	68c5      	ldr	r5, [r0, #12]
   1b7f0:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b7f4:	f015 0501 	ands.w	r5, r5, #1
   1b7f8:	d123      	bne.n	1b842 <net_if_up+0x5a>
   1b7fa:	f100 060c 	add.w	r6, r0, #12
   1b7fe:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1b800:	6843      	ldr	r3, [r0, #4]
   1b802:	68db      	ldr	r3, [r3, #12]
   1b804:	b11b      	cbz	r3, 1b80e <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1b806:	2101      	movs	r1, #1
   1b808:	4798      	blx	r3
	if (status < 0) {
   1b80a:	2800      	cmp	r0, #0
   1b80c:	db1b      	blt.n	1b846 <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b80e:	f3bf 8f5b 	dmb	ish
   1b812:	e856 3f00 	ldrex	r3, [r6]
   1b816:	f043 0301 	orr.w	r3, r3, #1
   1b81a:	e846 3200 	strex	r2, r3, [r6]
   1b81e:	2a00      	cmp	r2, #0
   1b820:	d1f7      	bne.n	1b812 <net_if_up+0x2a>
   1b822:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1b826:	4620      	mov	r0, r4
   1b828:	f7ff f91e 	bl	1aa68 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1b82c:	4620      	mov	r0, r4
   1b82e:	f7ff f821 	bl	1a874 <net_if_start_rs>
   1b832:	2300      	movs	r3, #0
   1b834:	461a      	mov	r2, r3
   1b836:	4621      	mov	r1, r4
   1b838:	4804      	ldr	r0, [pc, #16]	; (1b84c <net_if_up+0x64>)
   1b83a:	f006 fe61 	bl	22500 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1b83e:	4628      	mov	r0, r5
   1b840:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1b842:	2500      	movs	r5, #0
   1b844:	e7fb      	b.n	1b83e <net_if_up+0x56>
		return status;
   1b846:	4605      	mov	r5, r0
   1b848:	e7f9      	b.n	1b83e <net_if_up+0x56>
   1b84a:	bf00      	nop
   1b84c:	d0010002 	.word	0xd0010002

0001b850 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1b850:	b510      	push	{r4, lr}
   1b852:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1b854:	f7fe ffaf 	bl	1a7b6 <leave_mcast_all>

	net_if_flush_tx(iface);
   1b858:	4620      	mov	r0, r4
   1b85a:	f7ff ff63 	bl	1b724 <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1b85e:	6863      	ldr	r3, [r4, #4]
   1b860:	68db      	ldr	r3, [r3, #12]
   1b862:	b123      	cbz	r3, 1b86e <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1b864:	2100      	movs	r1, #0
   1b866:	4620      	mov	r0, r4
   1b868:	4798      	blx	r3
	if (status < 0) {
   1b86a:	2800      	cmp	r0, #0
   1b86c:	db14      	blt.n	1b898 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1b86e:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b872:	f3bf 8f5b 	dmb	ish
   1b876:	e853 2f00 	ldrex	r2, [r3]
   1b87a:	f022 0201 	bic.w	r2, r2, #1
   1b87e:	e843 2100 	strex	r1, r2, [r3]
   1b882:	2900      	cmp	r1, #0
   1b884:	d1f7      	bne.n	1b876 <net_if_down+0x26>
   1b886:	f3bf 8f5b 	dmb	ish
   1b88a:	2300      	movs	r3, #0
   1b88c:	461a      	mov	r2, r3
   1b88e:	4621      	mov	r1, r4
   1b890:	4802      	ldr	r0, [pc, #8]	; (1b89c <net_if_down+0x4c>)
   1b892:	f006 fe35 	bl	22500 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1b896:	2000      	movs	r0, #0
}
   1b898:	bd10      	pop	{r4, pc}
   1b89a:	bf00      	nop
   1b89c:	d0010001 	.word	0xd0010001

0001b8a0 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1b8a0:	b570      	push	{r4, r5, r6, lr}
   1b8a2:	b086      	sub	sp, #24
   1b8a4:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b8a6:	4c1b      	ldr	r4, [pc, #108]	; (1b914 <net_if_init+0x74>)
   1b8a8:	e01b      	b.n	1b8e2 <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1b8aa:	4620      	mov	r0, r4
   1b8ac:	f850 3b18 	ldr.w	r3, [r0], #24
   1b8b0:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1b8b2:	f00c fbc4 	bl	2803e <k_queue_init>
	api->init(iface);
   1b8b6:	682b      	ldr	r3, [r5, #0]
   1b8b8:	4620      	mov	r0, r4
   1b8ba:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b8bc:	2340      	movs	r3, #64	; 0x40
   1b8be:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1b8c2:	f247 5330 	movw	r3, #30000	; 0x7530
   1b8c6:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f7ff fe06 	bl	1b4dc <net_if_ipv6_calc_reachable_time>
   1b8d0:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b8d4:	4910      	ldr	r1, [pc, #64]	; (1b918 <net_if_init+0x78>)
   1b8d6:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1b8da:	f00d fd4b 	bl	29374 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b8de:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b8e2:	4b0e      	ldr	r3, [pc, #56]	; (1b91c <net_if_init+0x7c>)
   1b8e4:	429c      	cmp	r4, r3
   1b8e6:	d1e0      	bne.n	1b8aa <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1b8e8:	4b0a      	ldr	r3, [pc, #40]	; (1b914 <net_if_init+0x74>)
   1b8ea:	429c      	cmp	r4, r3
   1b8ec:	d010      	beq.n	1b910 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	9305      	str	r3, [sp, #20]
   1b8f2:	2201      	movs	r2, #1
   1b8f4:	9204      	str	r2, [sp, #16]
   1b8f6:	f06f 0208 	mvn.w	r2, #8
   1b8fa:	9203      	str	r2, [sp, #12]
   1b8fc:	9302      	str	r3, [sp, #8]
   1b8fe:	9301      	str	r3, [sp, #4]
   1b900:	9600      	str	r6, [sp, #0]
   1b902:	4b07      	ldr	r3, [pc, #28]	; (1b920 <net_if_init+0x80>)
   1b904:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1b908:	4906      	ldr	r1, [pc, #24]	; (1b924 <net_if_init+0x84>)
   1b90a:	4807      	ldr	r0, [pc, #28]	; (1b928 <net_if_init+0x88>)
   1b90c:	f00d f9e0 	bl	28cd0 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1b910:	b006      	add	sp, #24
   1b912:	bd70      	pop	{r4, r5, r6, pc}
   1b914:	2000d160 	.word	0x2000d160
   1b918:	0001a895 	.word	0x0001a895
   1b91c:	2000d400 	.word	0x2000d400
   1b920:	0001b761 	.word	0x0001b761
   1b924:	20004cd8 	.word	0x20004cd8
   1b928:	2000032c 	.word	0x2000032c

0001b92c <net_if_post_init>:

void net_if_post_init(void)
{
   1b92c:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b92e:	4c05      	ldr	r4, [pc, #20]	; (1b944 <net_if_post_init+0x18>)
   1b930:	e004      	b.n	1b93c <net_if_post_init+0x10>
		net_if_up(iface);
   1b932:	4620      	mov	r0, r4
   1b934:	f7ff ff58 	bl	1b7e8 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b938:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b93c:	4b02      	ldr	r3, [pc, #8]	; (1b948 <net_if_post_init+0x1c>)
   1b93e:	429c      	cmp	r4, r3
   1b940:	d1f7      	bne.n	1b932 <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1b942:	bd10      	pop	{r4, pc}
   1b944:	2000d160 	.word	0x2000d160
   1b948:	2000d400 	.word	0x2000d400

0001b94c <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b94e:	4605      	mov	r5, r0
   1b950:	460e      	mov	r6, r1
   1b952:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b954:	2400      	movs	r4, #0
   1b956:	e003      	b.n	1b960 <check_used_port+0x14>
   1b958:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b95a:	42ab      	cmp	r3, r5
   1b95c:	d010      	beq.n	1b980 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b95e:	3401      	adds	r4, #1
   1b960:	2c05      	cmp	r4, #5
   1b962:	dc2b      	bgt.n	1b9bc <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1b964:	2368      	movs	r3, #104	; 0x68
   1b966:	4a16      	ldr	r2, [pc, #88]	; (1b9c0 <check_used_port+0x74>)
   1b968:	fb03 2304 	mla	r3, r3, r4, r2
   1b96c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1b970:	f013 0f01 	tst.w	r3, #1
   1b974:	d0f3      	beq.n	1b95e <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1b976:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b97a:	d0ed      	beq.n	1b958 <check_used_port+0xc>
		return IPPROTO_TCP;
   1b97c:	2306      	movs	r3, #6
   1b97e:	e7ec      	b.n	1b95a <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1b980:	2368      	movs	r3, #104	; 0x68
   1b982:	fb03 f304 	mul.w	r3, r3, r4
   1b986:	3308      	adds	r3, #8
   1b988:	4a0d      	ldr	r2, [pc, #52]	; (1b9c0 <check_used_port+0x74>)
   1b98a:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1b98c:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b98e:	42b2      	cmp	r2, r6
   1b990:	d1e5      	bne.n	1b95e <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1b992:	883a      	ldrh	r2, [r7, #0]
   1b994:	2a0a      	cmp	r2, #10
   1b996:	d007      	beq.n	1b9a8 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1b998:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b99a:	681a      	ldr	r2, [r3, #0]
   1b99c:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1b99e:	429a      	cmp	r2, r3
   1b9a0:	d1dd      	bne.n	1b95e <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1b9a2:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b9a8:	2210      	movs	r2, #16
   1b9aa:	1d39      	adds	r1, r7, #4
   1b9ac:	6858      	ldr	r0, [r3, #4]
   1b9ae:	f00e fff1 	bl	2a994 <memcmp>
			if (net_ipv6_addr_cmp(
   1b9b2:	2800      	cmp	r0, #0
   1b9b4:	d1d3      	bne.n	1b95e <check_used_port+0x12>
				return -EEXIST;
   1b9b6:	f06f 0010 	mvn.w	r0, #16
   1b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1b9bc:	2000      	movs	r0, #0
   1b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9c0:	20001b40 	.word	0x20001b40

0001b9c4 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1b9c4:	b570      	push	{r4, r5, r6, lr}
   1b9c6:	4606      	mov	r6, r0
   1b9c8:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1b9ca:	884c      	ldrh	r4, [r1, #2]
   1b9cc:	b16c      	cbz	r4, 1b9ea <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1b9d2:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1b9d4:	0a1c      	lsrs	r4, r3, #8
   1b9d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1b9da:	b29c      	uxth	r4, r3
   1b9dc:	462a      	mov	r2, r5
   1b9de:	4621      	mov	r1, r4
   1b9e0:	f7ff ffb4 	bl	1b94c <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1b9e4:	f110 0f11 	cmn.w	r0, #17
   1b9e8:	d1f1      	bne.n	1b9ce <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1b9ea:	f7e6 fb2f 	bl	204c <sys_rand32_get>
   1b9ee:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1b9f2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1b9f6:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1b9f8:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1b9fc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ba00:	d0e7      	beq.n	1b9d2 <find_available_port+0xe>
		return IPPROTO_TCP;
   1ba02:	2006      	movs	r0, #6
   1ba04:	e7e6      	b.n	1b9d4 <find_available_port+0x10>

0001ba06 <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1ba06:	b500      	push	{lr}
   1ba08:	b087      	sub	sp, #28
   1ba0a:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1ba0c:	2200      	movs	r2, #0
   1ba0e:	a906      	add	r1, sp, #24
   1ba10:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1ba14:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1ba16:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1ba18:	9102      	str	r1, [sp, #8]
   1ba1a:	9301      	str	r3, [sp, #4]
   1ba1c:	9200      	str	r2, [sp, #0]
   1ba1e:	4613      	mov	r3, r2
   1ba20:	2101      	movs	r1, #1
   1ba22:	f007 f9dd 	bl	22de0 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1ba26:	b928      	cbnz	r0, 1ba34 <queue_fin+0x2e>
   1ba28:	9805      	ldr	r0, [sp, #20]
   1ba2a:	b118      	cbz	r0, 1ba34 <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1ba2c:	f007 fcdc 	bl	233e8 <net_tcp_send_pkt>
	if (ret < 0) {
   1ba30:	2800      	cmp	r0, #0
   1ba32:	db02      	blt.n	1ba3a <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1ba34:	b007      	add	sp, #28
   1ba36:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1ba3a:	9805      	ldr	r0, [sp, #20]
   1ba3c:	f001 f8ed 	bl	1cc1a <net_pkt_unref>
   1ba40:	e7f8      	b.n	1ba34 <queue_fin+0x2e>

0001ba42 <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1ba42:	b500      	push	{lr}
   1ba44:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1ba46:	a901      	add	r1, sp, #4
   1ba48:	f007 fb1c 	bl	23084 <net_tcp_get_hdr>
	if (tcp_hdr) {
   1ba4c:	b128      	cbz	r0, 1ba5a <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1ba4e:	7b00      	ldrb	r0, [r0, #12]
   1ba50:	0900      	lsrs	r0, r0, #4
   1ba52:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1ba54:	b007      	add	sp, #28
   1ba56:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1ba5a:	2000      	movs	r0, #0
   1ba5c:	e7fa      	b.n	1ba54 <tcp_hdr_len+0x12>

0001ba5e <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1ba5e:	b570      	push	{r4, r5, r6, lr}
   1ba60:	b082      	sub	sp, #8
   1ba62:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1ba64:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1ba66:	2400      	movs	r4, #0
   1ba68:	e002      	b.n	1ba70 <set_appdata_values+0x12>
		bytes += buf->len;
   1ba6a:	899a      	ldrh	r2, [r3, #12]
   1ba6c:	4414      	add	r4, r2
		buf = buf->frags;
   1ba6e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d1fa      	bne.n	1ba6a <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1ba74:	2911      	cmp	r1, #17
   1ba76:	d020      	beq.n	1baba <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1ba78:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1ba7a:	2906      	cmp	r1, #6
   1ba7c:	d01f      	beq.n	1babe <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ba7e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ba82:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ba86:	4419      	add	r1, r3
   1ba88:	4431      	add	r1, r6
   1ba8a:	f10d 0206 	add.w	r2, sp, #6
   1ba8e:	b289      	uxth	r1, r1
   1ba90:	4628      	mov	r0, r5
   1ba92:	f001 fb91 	bl	1d1b8 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1ba96:	b120      	cbz	r0, 1baa2 <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1ba98:	6883      	ldr	r3, [r0, #8]
   1ba9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ba9e:	4413      	add	r3, r2
	pkt->appdata = data;
   1baa0:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1baa2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1baa6:	1ae3      	subs	r3, r4, r3
   1baa8:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1baaa:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1baae:	1b1b      	subs	r3, r3, r4
   1bab0:	b29b      	uxth	r3, r3
   1bab2:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1bab4:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1bab6:	b002      	add	sp, #8
   1bab8:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1baba:	2608      	movs	r6, #8
   1babc:	e7dd      	b.n	1ba7a <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1babe:	4628      	mov	r0, r5
   1bac0:	f7ff ffbf 	bl	1ba42 <tcp_hdr_len>
   1bac4:	b286      	uxth	r6, r0
   1bac6:	e7da      	b.n	1ba7e <set_appdata_values+0x20>

0001bac8 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1baca:	460d      	mov	r5, r1
   1bacc:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bace:	2300      	movs	r3, #0
   1bad0:	e000      	b.n	1bad4 <packet_received+0xc>
   1bad2:	3301      	adds	r3, #1
   1bad4:	2b05      	cmp	r3, #5
   1bad6:	dc12      	bgt.n	1bafe <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1bad8:	2268      	movs	r2, #104	; 0x68
   1bada:	4926      	ldr	r1, [pc, #152]	; (1bb74 <packet_received+0xac>)
   1badc:	fb02 1203 	mla	r2, r2, r3, r1
   1bae0:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1bae4:	f012 0f01 	tst.w	r2, #1
   1bae8:	d0f3      	beq.n	1bad2 <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1baea:	2268      	movs	r2, #104	; 0x68
   1baec:	fb02 1203 	mla	r2, r2, r3, r1
   1baf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1baf2:	4290      	cmp	r0, r2
   1baf4:	d1ed      	bne.n	1bad2 <packet_received+0xa>
			return &contexts[i];
   1baf6:	2268      	movs	r2, #104	; 0x68
   1baf8:	fb02 1403 	mla	r4, r2, r3, r1
   1bafc:	e000      	b.n	1bb00 <packet_received+0x38>
	return NULL;
   1bafe:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1bb00:	6968      	ldr	r0, [r5, #20]
   1bb02:	f7ff fe53 	bl	1b7ac <net_if_get_by_iface>
   1bb06:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1bb0a:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1bb0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bb0e:	b373      	cbz	r3, 1bb6e <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1bb10:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1bb14:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bb18:	d017      	beq.n	1bb4a <packet_received+0x82>
		return IPPROTO_TCP;
   1bb1a:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1bb1c:	2a06      	cmp	r2, #6
   1bb1e:	d016      	beq.n	1bb4e <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1bb20:	2111      	movs	r1, #17
   1bb22:	4628      	mov	r0, r5
   1bb24:	f7ff ff9b 	bl	1ba5e <set_appdata_values>
	return pkt->appdatalen;
   1bb28:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1bb2a:	4a13      	ldr	r2, [pc, #76]	; (1bb78 <packet_received+0xb0>)
   1bb2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1bb2e:	440b      	add	r3, r1
   1bb30:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1bb32:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1bb34:	4633      	mov	r3, r6
   1bb36:	2200      	movs	r2, #0
   1bb38:	4629      	mov	r1, r5
   1bb3a:	4620      	mov	r0, r4
   1bb3c:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bb3e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1bb42:	f00c fe46 	bl	287d2 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1bb46:	2000      	movs	r0, #0
   1bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1bb4a:	2211      	movs	r2, #17
   1bb4c:	e7e6      	b.n	1bb1c <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1bb4e:	f013 0f20 	tst.w	r3, #32
   1bb52:	d00a      	beq.n	1bb6a <packet_received+0xa2>
		return SOCK_STREAM;
   1bb54:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1bb56:	2b01      	cmp	r3, #1
   1bb58:	d1e6      	bne.n	1bb28 <packet_received+0x60>
   1bb5a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1bb5c:	2b00      	cmp	r3, #0
   1bb5e:	d1e3      	bne.n	1bb28 <packet_received+0x60>
			net_pkt_unref(pkt);
   1bb60:	4628      	mov	r0, r5
   1bb62:	f001 f85a 	bl	1cc1a <net_pkt_unref>
			return NET_OK;
   1bb66:	2000      	movs	r0, #0
   1bb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1bb6a:	2302      	movs	r3, #2
   1bb6c:	e7f3      	b.n	1bb56 <packet_received+0x8e>
		return NET_DROP;
   1bb6e:	2002      	movs	r0, #2
}
   1bb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb72:	bf00      	nop
   1bb74:	20001b40 	.word	0x20001b40
   1bb78:	200029f0 	.word	0x200029f0

0001bb7c <send_reset>:
{
   1bb7c:	b510      	push	{r4, lr}
   1bb7e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bb80:	aa02      	add	r2, sp, #8
   1bb82:	2300      	movs	r3, #0
   1bb84:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1bb88:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bb8a:	f007 f85a 	bl	22c42 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1bb8e:	4604      	mov	r4, r0
   1bb90:	b928      	cbnz	r0, 1bb9e <send_reset+0x22>
   1bb92:	9801      	ldr	r0, [sp, #4]
   1bb94:	b118      	cbz	r0, 1bb9e <send_reset+0x22>
	ret = net_send_data(pkt);
   1bb96:	f7fe fc3f 	bl	1a418 <net_send_data>
	if (ret < 0) {
   1bb9a:	1e04      	subs	r4, r0, #0
   1bb9c:	db02      	blt.n	1bba4 <send_reset+0x28>
}
   1bb9e:	4620      	mov	r0, r4
   1bba0:	b002      	add	sp, #8
   1bba2:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1bba4:	9801      	ldr	r0, [sp, #4]
   1bba6:	f001 f838 	bl	1cc1a <net_pkt_unref>
   1bbaa:	e7f8      	b.n	1bb9e <send_reset+0x22>

0001bbac <send_ack>:
{
   1bbac:	b510      	push	{r4, lr}
   1bbae:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bbb0:	2300      	movs	r3, #0
   1bbb2:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1bbb4:	b932      	cbnz	r2, 1bbc4 <send_ack+0x18>
   1bbb6:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1bbb8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1bbbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1bbc0:	429a      	cmp	r2, r3
   1bbc2:	d011      	beq.n	1bbe8 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1bbc4:	aa01      	add	r2, sp, #4
   1bbc6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bbc8:	f007 f99c 	bl	22f04 <net_tcp_prepare_ack>
	if (ret) {
   1bbcc:	4604      	mov	r4, r0
   1bbce:	b110      	cbz	r0, 1bbd6 <send_ack+0x2a>
}
   1bbd0:	4620      	mov	r0, r4
   1bbd2:	b002      	add	sp, #8
   1bbd4:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1bbd6:	9801      	ldr	r0, [sp, #4]
   1bbd8:	f007 fc06 	bl	233e8 <net_tcp_send_pkt>
	if (ret < 0) {
   1bbdc:	1e04      	subs	r4, r0, #0
   1bbde:	daf7      	bge.n	1bbd0 <send_ack+0x24>
		net_pkt_unref(pkt);
   1bbe0:	9801      	ldr	r0, [sp, #4]
   1bbe2:	f001 f81a 	bl	1cc1a <net_pkt_unref>
   1bbe6:	e7f3      	b.n	1bbd0 <send_ack+0x24>
		return 0;
   1bbe8:	2400      	movs	r4, #0
   1bbea:	e7f1      	b.n	1bbd0 <send_ack+0x24>

0001bbec <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1bbec:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1bbee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1bbf2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1bbf6:	2b02      	cmp	r3, #2
   1bbf8:	d001      	beq.n	1bbfe <_tcp_synack_received+0x12>
}
   1bbfa:	2002      	movs	r0, #2
   1bbfc:	4770      	bx	lr
{
   1bbfe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc00:	b09f      	sub	sp, #124	; 0x7c
   1bc02:	4615      	mov	r5, r2
   1bc04:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1bc06:	6948      	ldr	r0, [r1, #20]
   1bc08:	f7ff fdd0 	bl	1b7ac <net_if_get_by_iface>
   1bc0c:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1bc10:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1bc12:	a911      	add	r1, sp, #68	; 0x44
   1bc14:	4620      	mov	r0, r4
   1bc16:	f007 fa35 	bl	23084 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1bc1a:	4606      	mov	r6, r0
   1bc1c:	b1f8      	cbz	r0, 1bc5e <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bc1e:	7b43      	ldrb	r3, [r0, #13]
   1bc20:	f013 0f04 	tst.w	r3, #4
   1bc24:	d11e      	bne.n	1bc64 <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1bc26:	f013 0f02 	tst.w	r3, #2
   1bc2a:	d013      	beq.n	1bc54 <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1bc2c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1bc2e:	7901      	ldrb	r1, [r0, #4]
   1bc30:	7943      	ldrb	r3, [r0, #5]
   1bc32:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1bc36:	7980      	ldrb	r0, [r0, #6]
   1bc38:	79f3      	ldrb	r3, [r6, #7]
   1bc3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1bc3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1bc42:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1bc44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1bc48:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1bc4a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1bc4e:	3301      	adds	r3, #1
   1bc50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1bc54:	7b73      	ldrb	r3, [r6, #13]
   1bc56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bc5a:	2b12      	cmp	r3, #18
   1bc5c:	d019      	beq.n	1bc92 <_tcp_synack_received+0xa6>
}
   1bc5e:	2002      	movs	r0, #2
   1bc60:	b01f      	add	sp, #124	; 0x7c
   1bc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1bc64:	4621      	mov	r1, r4
   1bc66:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bc68:	f007 fa87 	bl	2317a <net_tcp_validate_seq>
   1bc6c:	b160      	cbz	r0, 1bc88 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1bc6e:	4a40      	ldr	r2, [pc, #256]	; (1bd70 <_tcp_synack_received+0x184>)
   1bc70:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1bc72:	3301      	adds	r3, #1
   1bc74:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1bc76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bc78:	2b00      	cmp	r3, #0
   1bc7a:	d0f0      	beq.n	1bc5e <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1bc7c:	682a      	ldr	r2, [r5, #0]
   1bc7e:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1bc82:	4628      	mov	r0, r5
   1bc84:	4798      	blx	r3
   1bc86:	e7ea      	b.n	1bc5e <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1bc88:	4a39      	ldr	r2, [pc, #228]	; (1bd70 <_tcp_synack_received+0x184>)
   1bc8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1bc8c:	3301      	adds	r3, #1
   1bc8e:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1bc90:	e7e5      	b.n	1bc5e <_tcp_synack_received+0x72>
	return pkt->family;
   1bc92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1bc96:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1bc9a:	2b0a      	cmp	r3, #10
   1bc9c:	d1df      	bne.n	1bc5e <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1bc9e:	f04f 0e0a 	mov.w	lr, #10
   1bca2:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1bca6:	8833      	ldrh	r3, [r6, #0]
   1bca8:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1bcac:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1bcae:	ac16      	add	r4, sp, #88	; 0x58
   1bcb0:	68bb      	ldr	r3, [r7, #8]
   1bcb2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1bcb6:	6859      	ldr	r1, [r3, #4]
   1bcb8:	689a      	ldr	r2, [r3, #8]
   1bcba:	68db      	ldr	r3, [r3, #12]
   1bcbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bcbe:	ac06      	add	r4, sp, #24
   1bcc0:	ab16      	add	r3, sp, #88	; 0x58
   1bcc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bcc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1bcc8:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1bccc:	8872      	ldrh	r2, [r6, #2]
   1bcce:	0a13      	lsrs	r3, r2, #8
   1bcd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bcd4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1bcd8:	ac1a      	add	r4, sp, #104	; 0x68
   1bcda:	68bb      	ldr	r3, [r7, #8]
   1bcdc:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1bce0:	6859      	ldr	r1, [r3, #4]
   1bce2:	689a      	ldr	r2, [r3, #8]
   1bce4:	68db      	ldr	r3, [r3, #12]
   1bce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bce8:	ac0c      	add	r4, sp, #48	; 0x30
   1bcea:	ab1e      	add	r3, sp, #120	; 0x78
   1bcec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1bcf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1bcf4:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1bcf6:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1bcfa:	f008 fcdb 	bl	246b4 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1bcfe:	8832      	ldrh	r2, [r6, #0]
   1bd00:	0a13      	lsrs	r3, r2, #8
   1bd02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1bd06:	8871      	ldrh	r1, [r6, #2]
   1bd08:	0a0a      	lsrs	r2, r1, #8
   1bd0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1bd0e:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1bd10:	9403      	str	r4, [sp, #12]
   1bd12:	9502      	str	r5, [sp, #8]
   1bd14:	4917      	ldr	r1, [pc, #92]	; (1bd74 <_tcp_synack_received+0x188>)
   1bd16:	9101      	str	r1, [sp, #4]
   1bd18:	9200      	str	r2, [sp, #0]
   1bd1a:	b29b      	uxth	r3, r3
   1bd1c:	aa0b      	add	r2, sp, #44	; 0x2c
   1bd1e:	a905      	add	r1, sp, #20
   1bd20:	2006      	movs	r0, #6
   1bd22:	f008 fce5 	bl	246f0 <net_conn_register>
		if (ret < 0) {
   1bd26:	2800      	cmp	r0, #0
   1bd28:	db1c      	blt.n	1bd64 <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bd2a:	2104      	movs	r1, #4
   1bd2c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bd2e:	f006 ffba 	bl	22ca6 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1bd32:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1bd36:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1bd3a:	f043 0304 	orr.w	r3, r3, #4
   1bd3e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1bd42:	2200      	movs	r2, #0
   1bd44:	a905      	add	r1, sp, #20
   1bd46:	4628      	mov	r0, r5
   1bd48:	f7ff ff30 	bl	1bbac <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1bd4c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bd4e:	30ac      	adds	r0, #172	; 0xac
   1bd50:	f00c fd3f 	bl	287d2 <_impl_k_sem_give>
		if (context->connect_cb) {
   1bd54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	d081      	beq.n	1bc5e <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1bd5a:	682a      	ldr	r2, [r5, #0]
   1bd5c:	2100      	movs	r1, #0
   1bd5e:	4628      	mov	r0, r5
   1bd60:	4798      	blx	r3
   1bd62:	e77c      	b.n	1bc5e <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1bd64:	a905      	add	r1, sp, #20
   1bd66:	4628      	mov	r0, r5
   1bd68:	f7ff ff08 	bl	1bb7c <send_reset>
			return NET_DROP;
   1bd6c:	e777      	b.n	1bc5e <_tcp_synack_received+0x72>
   1bd6e:	bf00      	nop
   1bd70:	200029f0 	.word	0x200029f0
   1bd74:	0001c2cd 	.word	0x0001c2cd

0001bd78 <create_udp_packet>:
{
   1bd78:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1bd7a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1bd7e:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bd82:	2c0a      	cmp	r4, #10
   1bd84:	d118      	bne.n	1bdb8 <create_udp_packet+0x40>
   1bd86:	461e      	mov	r6, r3
   1bd88:	4615      	mov	r5, r2
   1bd8a:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1bd8c:	1d13      	adds	r3, r2, #4
   1bd8e:	2200      	movs	r2, #0
   1bd90:	f003 f9a4 	bl	1f0dc <net_ipv6_create>
   1bd94:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1bd96:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1bd9a:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1bd9e:	886b      	ldrh	r3, [r5, #2]
   1bda0:	4402      	add	r2, r0
   1bda2:	4620      	mov	r0, r4
   1bda4:	f006 fd90 	bl	228c8 <net_udp_insert>
		if (!tmp) {
   1bda8:	4605      	mov	r5, r0
   1bdaa:	b140      	cbz	r0, 1bdbe <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1bdac:	4601      	mov	r1, r0
   1bdae:	4620      	mov	r0, r4
   1bdb0:	f003 fbf0 	bl	1f594 <net_ipv6_finalize>
	*out_pkt = pkt;
   1bdb4:	6035      	str	r5, [r6, #0]
	return r;
   1bdb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1bdb8:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1bdbc:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1bdbe:	f06f 000b 	mvn.w	r0, #11
}
   1bdc2:	bd70      	pop	{r4, r5, r6, pc}

0001bdc4 <send_data>:
{
   1bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdc8:	4604      	mov	r4, r0
   1bdca:	4615      	mov	r5, r2
   1bdcc:	9e06      	ldr	r6, [sp, #24]
   1bdce:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1bdd0:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1bdd2:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1bdd4:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1bdd6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1bdda:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bdde:	d011      	beq.n	1be04 <send_data+0x40>
		return IPPROTO_TCP;
   1bde0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1bde2:	2b11      	cmp	r3, #17
   1bde4:	d010      	beq.n	1be08 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1bde6:	2b06      	cmp	r3, #6
   1bde8:	d113      	bne.n	1be12 <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1bdea:	4620      	mov	r0, r4
   1bdec:	f007 fbf8 	bl	235e0 <net_tcp_send_data>
   1bdf0:	4680      	mov	r8, r0
		if (cb) {
   1bdf2:	b125      	cbz	r5, 1bdfe <send_data+0x3a>
			cb(context, ret, token, user_data);
   1bdf4:	463b      	mov	r3, r7
   1bdf6:	4632      	mov	r2, r6
   1bdf8:	4601      	mov	r1, r0
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	47a8      	blx	r5
}
   1bdfe:	4640      	mov	r0, r8
   1be00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1be04:	2311      	movs	r3, #17
   1be06:	e7ec      	b.n	1bde2 <send_data+0x1e>
		return net_send_data(pkt);
   1be08:	4608      	mov	r0, r1
   1be0a:	f7fe fb05 	bl	1a418 <net_send_data>
   1be0e:	4680      	mov	r8, r0
   1be10:	e7f5      	b.n	1bdfe <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1be12:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1be16:	e7f2      	b.n	1bdfe <send_data+0x3a>

0001be18 <net_context_get>:
{
   1be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1be1c:	2802      	cmp	r0, #2
   1be1e:	f000 80e9 	beq.w	1bff4 <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1be22:	280a      	cmp	r0, #10
   1be24:	f040 80e9 	bne.w	1bffa <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1be28:	1e4c      	subs	r4, r1, #1
   1be2a:	b2e4      	uxtb	r4, r4
   1be2c:	2c01      	cmp	r4, #1
   1be2e:	f200 80e7 	bhi.w	1c000 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1be32:	2a11      	cmp	r2, #17
   1be34:	d002      	beq.n	1be3c <net_context_get+0x24>
   1be36:	2a06      	cmp	r2, #6
   1be38:	f040 80e5 	bne.w	1c006 <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1be3c:	2901      	cmp	r1, #1
   1be3e:	d01c      	beq.n	1be7a <net_context_get+0x62>
   1be40:	2902      	cmp	r1, #2
   1be42:	d01f      	beq.n	1be84 <net_context_get+0x6c>
	if (!context) {
   1be44:	2b00      	cmp	r3, #0
   1be46:	f000 80e1 	beq.w	1c00c <net_context_get+0x1f4>
   1be4a:	461f      	mov	r7, r3
   1be4c:	4690      	mov	r8, r2
   1be4e:	460e      	mov	r6, r1
   1be50:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1be52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1be56:	4870      	ldr	r0, [pc, #448]	; (1c018 <net_context_get+0x200>)
   1be58:	f00c fcce 	bl	287f8 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1be5c:	2400      	movs	r4, #0
   1be5e:	2c05      	cmp	r4, #5
   1be60:	f300 80c5 	bgt.w	1bfee <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1be64:	2568      	movs	r5, #104	; 0x68
   1be66:	4b6d      	ldr	r3, [pc, #436]	; (1c01c <net_context_get+0x204>)
   1be68:	fb05 3504 	mla	r5, r5, r4, r3
   1be6c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1be70:	f013 0f01 	tst.w	r3, #1
   1be74:	d00b      	beq.n	1be8e <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1be76:	3401      	adds	r4, #1
   1be78:	e7f1      	b.n	1be5e <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1be7a:	2a11      	cmp	r2, #17
   1be7c:	d1e0      	bne.n	1be40 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1be7e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1be82:	e076      	b.n	1bf72 <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1be84:	2a06      	cmp	r2, #6
   1be86:	d1dd      	bne.n	1be44 <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1be88:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1be8c:	e071      	b.n	1bf72 <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1be8e:	f1b8 0f06 	cmp.w	r8, #6
   1be92:	d071      	beq.n	1bf78 <net_context_get+0x160>
		contexts[i].flags = 0;
   1be94:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1be98:	4b60      	ldr	r3, [pc, #384]	; (1c01c <net_context_get+0x204>)
   1be9a:	fb0a 3a04 	mla	sl, sl, r4, r3
   1be9e:	2300      	movs	r3, #0
   1bea0:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1bea4:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bea8:	2201      	movs	r2, #1
   1beaa:	f3bf 8f5b 	dmb	ish
   1beae:	e853 1f00 	ldrex	r1, [r3]
   1beb2:	e843 2000 	strex	r0, r2, [r3]
   1beb6:	2800      	cmp	r0, #0
   1beb8:	d1f9      	bne.n	1beae <net_context_get+0x96>
   1beba:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1bebe:	f1b9 0f0a 	cmp.w	r9, #10
   1bec2:	d06d      	beq.n	1bfa0 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1bec4:	2368      	movs	r3, #104	; 0x68
   1bec6:	4a55      	ldr	r2, [pc, #340]	; (1c01c <net_context_get+0x204>)
   1bec8:	fb03 2304 	mla	r3, r3, r4, r2
   1becc:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bed0:	f022 0210 	bic.w	r2, r2, #16
   1bed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1bed8:	2e01      	cmp	r6, #1
   1beda:	d068      	beq.n	1bfae <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1bedc:	2368      	movs	r3, #104	; 0x68
   1bede:	4a4f      	ldr	r2, [pc, #316]	; (1c01c <net_context_get+0x204>)
   1bee0:	fb03 2304 	mla	r3, r3, r4, r2
   1bee4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bee8:	f022 0220 	bic.w	r2, r2, #32
   1beec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1bef0:	f1b8 0f06 	cmp.w	r8, #6
   1bef4:	d066      	beq.n	1bfc4 <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1bef6:	2368      	movs	r3, #104	; 0x68
   1bef8:	4a48      	ldr	r2, [pc, #288]	; (1c01c <net_context_get+0x204>)
   1befa:	fb03 2304 	mla	r3, r3, r4, r2
   1befe:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1bf06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1bf0a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1c01c <net_context_get+0x204>
   1bf0e:	2568      	movs	r5, #104	; 0x68
   1bf10:	fb05 f504 	mul.w	r5, r5, r4
   1bf14:	eb08 0305 	add.w	r3, r8, r5
   1bf18:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf1c:	f042 0201 	orr.w	r2, r2, #1
   1bf20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1bf24:	2600      	movs	r6, #0
   1bf26:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1bf2a:	f105 0010 	add.w	r0, r5, #16
   1bf2e:	4440      	add	r0, r8
   1bf30:	2218      	movs	r2, #24
   1bf32:	4631      	mov	r1, r6
   1bf34:	3004      	adds	r0, #4
   1bf36:	f00e fdc1 	bl	2aabc <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1bf3a:	3508      	adds	r5, #8
   1bf3c:	4445      	add	r5, r8
   1bf3e:	220c      	movs	r2, #12
   1bf40:	4631      	mov	r1, r6
   1bf42:	4628      	mov	r0, r5
   1bf44:	f00e fdba 	bl	2aabc <memset>
		if (family == AF_INET6) {
   1bf48:	f1b9 0f0a 	cmp.w	r9, #10
   1bf4c:	d045      	beq.n	1bfda <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1bf4e:	2068      	movs	r0, #104	; 0x68
   1bf50:	fb00 f404 	mul.w	r4, r0, r4
   1bf54:	3440      	adds	r4, #64	; 0x40
   1bf56:	4831      	ldr	r0, [pc, #196]	; (1c01c <net_context_get+0x204>)
   1bf58:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1bf5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bf5e:	2101      	movs	r1, #1
   1bf60:	3004      	adds	r0, #4
   1bf62:	f00c fc2d 	bl	287c0 <_impl_k_sem_init>
		*context = &contexts[i];
   1bf66:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1bf6a:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bf6c:	482a      	ldr	r0, [pc, #168]	; (1c018 <net_context_get+0x200>)
   1bf6e:	f00c fc30 	bl	287d2 <_impl_k_sem_give>
}
   1bf72:	4620      	mov	r0, r4
   1bf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1bf78:	2568      	movs	r5, #104	; 0x68
   1bf7a:	4b28      	ldr	r3, [pc, #160]	; (1c01c <net_context_get+0x204>)
   1bf7c:	fb05 3504 	mla	r5, r5, r4, r3
   1bf80:	4628      	mov	r0, r5
   1bf82:	f006 fdab 	bl	22adc <net_tcp_alloc>
   1bf86:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1bf88:	2800      	cmp	r0, #0
   1bf8a:	d042      	beq.n	1c012 <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1bf8c:	4924      	ldr	r1, [pc, #144]	; (1c020 <net_context_get+0x208>)
   1bf8e:	3008      	adds	r0, #8
   1bf90:	f00d f9f0 	bl	29374 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1bf94:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bf96:	4923      	ldr	r1, [pc, #140]	; (1c024 <net_context_get+0x20c>)
   1bf98:	3030      	adds	r0, #48	; 0x30
   1bf9a:	f00d f9eb 	bl	29374 <k_delayed_work_init>
   1bf9e:	e779      	b.n	1be94 <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1bfa0:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1bfa4:	f042 0210 	orr.w	r2, r2, #16
   1bfa8:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1bfac:	e794      	b.n	1bed8 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1bfae:	2368      	movs	r3, #104	; 0x68
   1bfb0:	4a1a      	ldr	r2, [pc, #104]	; (1c01c <net_context_get+0x204>)
   1bfb2:	fb03 2304 	mla	r3, r3, r4, r2
   1bfb6:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bfba:	f042 0220 	orr.w	r2, r2, #32
   1bfbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bfc2:	e795      	b.n	1bef0 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1bfc4:	2368      	movs	r3, #104	; 0x68
   1bfc6:	4a15      	ldr	r2, [pc, #84]	; (1c01c <net_context_get+0x204>)
   1bfc8:	fb03 2304 	mla	r3, r3, r4, r2
   1bfcc:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bfd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bfd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bfd8:	e797      	b.n	1bf0a <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1bfda:	4629      	mov	r1, r5
   1bfdc:	4650      	mov	r0, sl
   1bfde:	f7ff fcf1 	bl	1b9c4 <find_available_port>
   1bfe2:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1bfe4:	2800      	cmp	r0, #0
   1bfe6:	d1b2      	bne.n	1bf4e <net_context_get+0x136>
				return -EADDRINUSE;
   1bfe8:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1bfec:	e7c1      	b.n	1bf72 <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1bfee:	f06f 0401 	mvn.w	r4, #1
   1bff2:	e7bb      	b.n	1bf6c <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1bff4:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1bff8:	e7bb      	b.n	1bf72 <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1bffa:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1bffe:	e7b8      	b.n	1bf72 <net_context_get+0x15a>
		return -EPROTOTYPE;
   1c000:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1c004:	e7b5      	b.n	1bf72 <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1c006:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1c00a:	e7b2      	b.n	1bf72 <net_context_get+0x15a>
		return -EINVAL;
   1c00c:	f06f 0415 	mvn.w	r4, #21
   1c010:	e7af      	b.n	1bf72 <net_context_get+0x15a>
				return -ENOBUFS;
   1c012:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c016:	e7ac      	b.n	1bf72 <net_context_get+0x15a>
   1c018:	20001db0 	.word	0x20001db0
   1c01c:	20001b40 	.word	0x20001b40
   1c020:	0001c0f1 	.word	0x0001c0f1
   1c024:	0001c0e5 	.word	0x0001c0e5

0001c028 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1c028:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c02a:	f3bf 8f5b 	dmb	ish
   1c02e:	e853 0f00 	ldrex	r0, [r3]
   1c032:	1c42      	adds	r2, r0, #1
   1c034:	e843 2100 	strex	r1, r2, [r3]
   1c038:	2900      	cmp	r1, #0
   1c03a:	d1f8      	bne.n	1c02e <net_context_ref+0x6>
   1c03c:	f3bf 8f5b 	dmb	ish
}
   1c040:	3001      	adds	r0, #1
   1c042:	4770      	bx	lr

0001c044 <net_context_unref>:
{
   1c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1c046:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c048:	f3bf 8f5b 	dmb	ish
   1c04c:	e852 3f00 	ldrex	r3, [r2]
   1c050:	1e59      	subs	r1, r3, #1
   1c052:	e842 1400 	strex	r4, r1, [r2]
   1c056:	2c00      	cmp	r4, #0
   1c058:	d1f8      	bne.n	1c04c <net_context_unref+0x8>
   1c05a:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1c05e:	2b01      	cmp	r3, #1
   1c060:	d001      	beq.n	1c066 <net_context_unref+0x22>
		return old_rc - 1;
   1c062:	1e58      	subs	r0, r3, #1
   1c064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c066:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c06c:	481b      	ldr	r0, [pc, #108]	; (1c0dc <net_context_unref+0x98>)
   1c06e:	f00c fbc3 	bl	287f8 <_impl_k_sem_take>
	if (context->tcp) {
   1c072:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c074:	b13b      	cbz	r3, 1c086 <net_context_unref+0x42>
   1c076:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c078:	2d00      	cmp	r5, #0
   1c07a:	dd15      	ble.n	1c0a8 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1c07c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c07e:	f006 fe3d 	bl	22cfc <net_tcp_release>
		context->tcp = NULL;
   1c082:	2300      	movs	r3, #0
   1c084:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1c086:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c088:	b118      	cbz	r0, 1c092 <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1c08a:	f008 fb13 	bl	246b4 <net_conn_unregister>
		context->conn_handler = NULL;
   1c08e:	2300      	movs	r3, #0
   1c090:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c092:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1c096:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1c09a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c09e:	480f      	ldr	r0, [pc, #60]	; (1c0dc <net_context_unref+0x98>)
   1c0a0:	f00c fb97 	bl	287d2 <_impl_k_sem_give>
	return 0;
   1c0a4:	2000      	movs	r0, #0
}
   1c0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1c0a8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1c0ac:	0113      	lsls	r3, r2, #4
   1c0ae:	4a0c      	ldr	r2, [pc, #48]	; (1c0e0 <net_context_unref+0x9c>)
   1c0b0:	58d2      	ldr	r2, [r2, r3]
   1c0b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c0b4:	429a      	cmp	r2, r3
   1c0b6:	d001      	beq.n	1c0bc <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c0b8:	3501      	adds	r5, #1
   1c0ba:	e7dd      	b.n	1c078 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c0bc:	4f08      	ldr	r7, [pc, #32]	; (1c0e0 <net_context_unref+0x9c>)
   1c0be:	00ae      	lsls	r6, r5, #2
   1c0c0:	1972      	adds	r2, r6, r5
   1c0c2:	0113      	lsls	r3, r2, #4
   1c0c4:	3328      	adds	r3, #40	; 0x28
   1c0c6:	18f8      	adds	r0, r7, r3
   1c0c8:	f00d f972 	bl	293b0 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c0cc:	442e      	add	r6, r5
   1c0ce:	0130      	lsls	r0, r6, #4
   1c0d0:	2250      	movs	r2, #80	; 0x50
   1c0d2:	2100      	movs	r1, #0
   1c0d4:	4438      	add	r0, r7
   1c0d6:	f00e fcf1 	bl	2aabc <memset>
   1c0da:	e7ed      	b.n	1c0b8 <net_context_unref+0x74>
   1c0dc:	20001db0 	.word	0x20001db0
   1c0e0:	20001dc8 	.word	0x20001dc8

0001c0e4 <handle_fin_timeout>:
{
   1c0e4:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1c0e6:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1c0ea:	f7ff ffab 	bl	1c044 <net_context_unref>
   1c0ee:	bd08      	pop	{r3, pc}

0001c0f0 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1c0f0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1c0f4:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1c0f8:	2b06      	cmp	r3, #6
   1c0fa:	d000      	beq.n	1c0fe <handle_ack_timeout+0xe>
   1c0fc:	4770      	bx	lr
{
   1c0fe:	b510      	push	{r4, lr}
   1c100:	f1a0 0208 	sub.w	r2, r0, #8
   1c104:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1c106:	2100      	movs	r1, #0
   1c108:	4610      	mov	r0, r2
   1c10a:	f006 fdcc 	bl	22ca6 <net_tcp_change_state>
		net_context_unref(tcp->context);
   1c10e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1c112:	f7ff ff97 	bl	1c044 <net_context_unref>
   1c116:	bd10      	pop	{r4, pc}

0001c118 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1c118:	b570      	push	{r4, r5, r6, lr}
   1c11a:	4605      	mov	r5, r0
   1c11c:	460e      	mov	r6, r1
   1c11e:	4614      	mov	r4, r2
   1c120:	4610      	mov	r0, r2
   1c122:	f7ff ff81 	bl	1c028 <net_context_ref>
   1c126:	4622      	mov	r2, r4
   1c128:	4631      	mov	r1, r6
   1c12a:	4628      	mov	r0, r5
   1c12c:	f7ff fd5e 	bl	1bbec <_tcp_synack_received>
   1c130:	4605      	mov	r5, r0
   1c132:	4620      	mov	r0, r4
   1c134:	f7ff ff86 	bl	1c044 <net_context_unref>
   1c138:	4628      	mov	r0, r5
   1c13a:	bd70      	pop	{r4, r5, r6, pc}

0001c13c <_tcp_established>:
{
   1c13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c140:	b087      	sub	sp, #28
   1c142:	4607      	mov	r7, r0
   1c144:	460e      	mov	r6, r1
   1c146:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c148:	a901      	add	r1, sp, #4
   1c14a:	4630      	mov	r0, r6
   1c14c:	f006 ff9a 	bl	23084 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c150:	2800      	cmp	r0, #0
   1c152:	f000 80b5 	beq.w	1c2c0 <_tcp_established+0x184>
   1c156:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1c158:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c15a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c15e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c162:	2b03      	cmp	r3, #3
   1c164:	d804      	bhi.n	1c170 <_tcp_established+0x34>
		return NET_DROP;
   1c166:	2502      	movs	r5, #2
}
   1c168:	4628      	mov	r0, r5
   1c16a:	b007      	add	sp, #28
   1c16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1c170:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1c174:	f018 0f10 	tst.w	r8, #16
   1c178:	d116      	bne.n	1c1a8 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1c17a:	f018 0f04 	tst.w	r8, #4
   1c17e:	d121      	bne.n	1c1c4 <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1c180:	792a      	ldrb	r2, [r5, #4]
   1c182:	796b      	ldrb	r3, [r5, #5]
   1c184:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1c188:	79a9      	ldrb	r1, [r5, #6]
   1c18a:	79eb      	ldrb	r3, [r5, #7]
   1c18c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1c194:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1c196:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1c19a:	1a99      	subs	r1, r3, r2
   1c19c:	2900      	cmp	r1, #0
   1c19e:	db2e      	blt.n	1c1fe <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1c1a0:	429a      	cmp	r2, r3
   1c1a2:	d033      	beq.n	1c20c <_tcp_established+0xd0>
		return NET_DROP;
   1c1a4:	2502      	movs	r5, #2
   1c1a6:	e7df      	b.n	1c168 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1c1a8:	7a03      	ldrb	r3, [r0, #8]
   1c1aa:	7a41      	ldrb	r1, [r0, #9]
   1c1ac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c1b0:	7a82      	ldrb	r2, [r0, #10]
   1c1b2:	7ac3      	ldrb	r3, [r0, #11]
   1c1b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1c1b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c1bc:	4620      	mov	r0, r4
   1c1be:	f007 fa49 	bl	23654 <net_tcp_ack_received>
   1c1c2:	e7da      	b.n	1c17a <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c1c4:	4631      	mov	r1, r6
   1c1c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c1c8:	f006 ffd7 	bl	2317a <net_tcp_validate_seq>
   1c1cc:	b928      	cbnz	r0, 1c1da <_tcp_established+0x9e>
   1c1ce:	4a3d      	ldr	r2, [pc, #244]	; (1c2c4 <_tcp_established+0x188>)
   1c1d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c1d2:	3301      	adds	r3, #1
   1c1d4:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c1d6:	2502      	movs	r5, #2
   1c1d8:	e7c6      	b.n	1c168 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1c1da:	4a3a      	ldr	r2, [pc, #232]	; (1c2c4 <_tcp_established+0x188>)
   1c1dc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c1de:	3301      	adds	r3, #1
   1c1e0:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1c1e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1c1e4:	b135      	cbz	r5, 1c1f4 <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1c1e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1c1e8:	685b      	ldr	r3, [r3, #4]
   1c1ea:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1c1ee:	2100      	movs	r1, #0
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	47a8      	blx	r5
		net_context_unref(context);
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f7ff ff25 	bl	1c044 <net_context_unref>
		return NET_DROP;
   1c1fa:	2502      	movs	r5, #2
   1c1fc:	e7b4      	b.n	1c168 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1c1fe:	2201      	movs	r2, #1
   1c200:	4639      	mov	r1, r7
   1c202:	4620      	mov	r0, r4
   1c204:	f7ff fcd2 	bl	1bbac <send_ack>
		return NET_DROP;
   1c208:	2502      	movs	r5, #2
   1c20a:	e7ad      	b.n	1c168 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1c20c:	2106      	movs	r1, #6
   1c20e:	4630      	mov	r0, r6
   1c210:	f7ff fc25 	bl	1ba5e <set_appdata_values>
	return pkt->appdatalen;
   1c214:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1c218:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c21a:	f006 fcc5 	bl	22ba8 <net_tcp_get_recv_wnd>
   1c21e:	4581      	cmp	r9, r0
   1c220:	d901      	bls.n	1c226 <_tcp_established+0xea>
		return NET_DROP;
   1c222:	2502      	movs	r5, #2
   1c224:	e7a0      	b.n	1c168 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1c226:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c228:	685a      	ldr	r2, [r3, #4]
   1c22a:	4631      	mov	r1, r6
   1c22c:	4638      	mov	r0, r7
   1c22e:	f7ff fc4b 	bl	1bac8 <packet_received>
   1c232:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1c234:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c236:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c23a:	444b      	add	r3, r9
   1c23c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1c240:	f018 0f01 	tst.w	r8, #1
   1c244:	d022      	beq.n	1c28c <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1c246:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c248:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1c24c:	f043 0304 	orr.w	r3, r3, #4
   1c250:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1c254:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c256:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1c25a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c25e:	2b04      	cmp	r3, #4
   1c260:	d02a      	beq.n	1c2b8 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1c262:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c264:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c268:	3301      	adds	r3, #1
   1c26a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1c26e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1c270:	b12e      	cbz	r6, 1c27e <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1c272:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1c274:	685b      	ldr	r3, [r3, #4]
   1c276:	2200      	movs	r2, #0
   1c278:	4611      	mov	r1, r2
   1c27a:	4620      	mov	r0, r4
   1c27c:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1c27e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c284:	3108      	adds	r1, #8
   1c286:	4810      	ldr	r0, [pc, #64]	; (1c2c8 <_tcp_established+0x18c>)
   1c288:	f00d f8ec 	bl	29464 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1c28c:	2200      	movs	r2, #0
   1c28e:	4639      	mov	r1, r7
   1c290:	4620      	mov	r0, r4
   1c292:	f7ff fc8b 	bl	1bbac <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1c296:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c298:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1c29c:	2a00      	cmp	r2, #0
   1c29e:	f47f af63 	bne.w	1c168 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1c2a2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1c2a6:	f003 0306 	and.w	r3, r3, #6
   1c2aa:	2b06      	cmp	r3, #6
   1c2ac:	f47f af5c 	bne.w	1c168 <_tcp_established+0x2c>
		net_context_unref(context);
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	f7ff fec7 	bl	1c044 <net_context_unref>
   1c2b6:	e757      	b.n	1c168 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1c2b8:	2105      	movs	r1, #5
   1c2ba:	f006 fcf4 	bl	22ca6 <net_tcp_change_state>
   1c2be:	e7d0      	b.n	1c262 <_tcp_established+0x126>
		return NET_DROP;
   1c2c0:	2502      	movs	r5, #2
   1c2c2:	e751      	b.n	1c168 <_tcp_established+0x2c>
   1c2c4:	200029f0 	.word	0x200029f0
   1c2c8:	20002b10 	.word	0x20002b10

0001c2cc <tcp_established>:
NET_CONN_CB(tcp_established)
   1c2cc:	b570      	push	{r4, r5, r6, lr}
   1c2ce:	4605      	mov	r5, r0
   1c2d0:	460e      	mov	r6, r1
   1c2d2:	4614      	mov	r4, r2
   1c2d4:	4610      	mov	r0, r2
   1c2d6:	f7ff fea7 	bl	1c028 <net_context_ref>
   1c2da:	4622      	mov	r2, r4
   1c2dc:	4631      	mov	r1, r6
   1c2de:	4628      	mov	r0, r5
   1c2e0:	f7ff ff2c 	bl	1c13c <_tcp_established>
   1c2e4:	4605      	mov	r5, r0
   1c2e6:	4620      	mov	r0, r4
   1c2e8:	f7ff feac 	bl	1c044 <net_context_unref>
   1c2ec:	4628      	mov	r0, r5
   1c2ee:	bd70      	pop	{r4, r5, r6, pc}

0001c2f0 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1c2f0:	b390      	cbz	r0, 1c358 <net_context_put+0x68>
{
   1c2f2:	b510      	push	{r4, lr}
   1c2f4:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1c2f6:	4a1d      	ldr	r2, [pc, #116]	; (1c36c <net_context_put+0x7c>)
   1c2f8:	4290      	cmp	r0, r2
   1c2fa:	d330      	bcc.n	1c35e <net_context_put+0x6e>
   1c2fc:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1c300:	4290      	cmp	r0, r2
   1c302:	d22f      	bcs.n	1c364 <net_context_put+0x74>
	context->connect_cb = NULL;
   1c304:	2200      	movs	r2, #0
   1c306:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1c308:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1c30a:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1c30c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1c310:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c314:	d007      	beq.n	1c326 <net_context_put+0x36>
		return IPPROTO_TCP;
   1c316:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c318:	2906      	cmp	r1, #6
   1c31a:	d006      	beq.n	1c32a <net_context_put+0x3a>
	net_context_unref(context);
   1c31c:	4620      	mov	r0, r4
   1c31e:	f7ff fe91 	bl	1c044 <net_context_unref>
	return 0;
   1c322:	2000      	movs	r0, #0
   1c324:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c326:	2111      	movs	r1, #17
   1c328:	e7f6      	b.n	1c318 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c32a:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1c32e:	2a02      	cmp	r2, #2
   1c330:	d001      	beq.n	1c336 <net_context_put+0x46>
   1c332:	2a03      	cmp	r2, #3
   1c334:	d1f2      	bne.n	1c31c <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1c336:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c338:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1c33c:	f013 0f04 	tst.w	r3, #4
   1c340:	d1ec      	bne.n	1c31c <net_context_put+0x2c>
   1c342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c346:	3130      	adds	r1, #48	; 0x30
   1c348:	4809      	ldr	r0, [pc, #36]	; (1c370 <net_context_put+0x80>)
   1c34a:	f00d f88b 	bl	29464 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1c34e:	4620      	mov	r0, r4
   1c350:	f7ff fb59 	bl	1ba06 <queue_fin>
			return 0;
   1c354:	2000      	movs	r0, #0
   1c356:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c358:	f06f 0015 	mvn.w	r0, #21
   1c35c:	4770      	bx	lr
   1c35e:	f06f 0015 	mvn.w	r0, #21
   1c362:	bd10      	pop	{r4, pc}
   1c364:	f06f 0015 	mvn.w	r0, #21
}
   1c368:	bd10      	pop	{r4, pc}
   1c36a:	bf00      	nop
   1c36c:	20001b40 	.word	0x20001b40
   1c370:	20002b10 	.word	0x20002b10

0001c374 <net_context_bind>:
	if (context->conn_handler) {
   1c374:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c376:	2b00      	cmp	r3, #0
   1c378:	d15c      	bne.n	1c434 <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1c37a:	880b      	ldrh	r3, [r1, #0]
   1c37c:	2b0a      	cmp	r3, #10
   1c37e:	d15d      	bne.n	1c43c <net_context_bind+0xc8>
{
   1c380:	b570      	push	{r4, r5, r6, lr}
   1c382:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1c384:	2300      	movs	r3, #0
   1c386:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c388:	2a17      	cmp	r2, #23
   1c38a:	d945      	bls.n	1c418 <net_context_bind+0xa4>
   1c38c:	460d      	mov	r5, r1
   1c38e:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1c390:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c392:	2bff      	cmp	r3, #255	; 0xff
   1c394:	d009      	beq.n	1c3aa <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c396:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c398:	b983      	cbnz	r3, 1c3bc <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c39a:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c39c:	bb2b      	cbnz	r3, 1c3ea <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c39e:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c3a0:	bb2b      	cbnz	r3, 1c3ee <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c3a2:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c3a4:	b32b      	cbz	r3, 1c3f2 <net_context_bind+0x7e>
   1c3a6:	2300      	movs	r3, #0
   1c3a8:	e009      	b.n	1c3be <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1c3aa:	a901      	add	r1, sp, #4
   1c3ac:	1d28      	adds	r0, r5, #4
   1c3ae:	f7fe fccb 	bl	1ad48 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1c3b2:	4606      	mov	r6, r0
   1c3b4:	2800      	cmp	r0, #0
   1c3b6:	d034      	beq.n	1c422 <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1c3b8:	3608      	adds	r6, #8
   1c3ba:	e007      	b.n	1c3cc <net_context_bind+0x58>
   1c3bc:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c3be:	b1d3      	cbz	r3, 1c3f6 <net_context_bind+0x82>
			iface = net_if_get_default();
   1c3c0:	f7fe fa4c 	bl	1a85c <net_if_get_default>
   1c3c4:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1c3c6:	f002 fde9 	bl	1ef9c <net_ipv6_unspecified_address>
   1c3ca:	4606      	mov	r6, r0
		if (!iface) {
   1c3cc:	9801      	ldr	r0, [sp, #4]
   1c3ce:	b370      	cbz	r0, 1c42e <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1c3d0:	f7ff f9ec 	bl	1b7ac <net_if_get_by_iface>
   1c3d4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c3d8:	230a      	movs	r3, #10
   1c3da:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1c3dc:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1c3de:	8869      	ldrh	r1, [r5, #2]
   1c3e0:	b989      	cbnz	r1, 1c406 <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1c3e2:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1c3e4:	806b      	strh	r3, [r5, #2]
		return 0;
   1c3e6:	2300      	movs	r3, #0
   1c3e8:	e018      	b.n	1c41c <net_context_bind+0xa8>
   1c3ea:	2300      	movs	r3, #0
   1c3ec:	e7e7      	b.n	1c3be <net_context_bind+0x4a>
   1c3ee:	2300      	movs	r3, #0
   1c3f0:	e7e5      	b.n	1c3be <net_context_bind+0x4a>
   1c3f2:	2301      	movs	r3, #1
   1c3f4:	e7e3      	b.n	1c3be <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1c3f6:	a901      	add	r1, sp, #4
   1c3f8:	1d28      	adds	r0, r5, #4
   1c3fa:	f7fe fa5b 	bl	1a8b4 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1c3fe:	4606      	mov	r6, r0
   1c400:	b190      	cbz	r0, 1c428 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1c402:	3604      	adds	r6, #4
   1c404:	e7e2      	b.n	1c3cc <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1c406:	462a      	mov	r2, r5
   1c408:	4618      	mov	r0, r3
   1c40a:	f7ff fa9f 	bl	1b94c <check_used_port>
			if (!ret) {
   1c40e:	4603      	mov	r3, r0
   1c410:	b920      	cbnz	r0, 1c41c <net_context_bind+0xa8>
					addr6->sin6_port;
   1c412:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1c414:	8162      	strh	r2, [r4, #10]
   1c416:	e001      	b.n	1c41c <net_context_bind+0xa8>
			return -EINVAL;
   1c418:	f06f 0315 	mvn.w	r3, #21
}
   1c41c:	4618      	mov	r0, r3
   1c41e:	b002      	add	sp, #8
   1c420:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1c422:	f06f 0301 	mvn.w	r3, #1
   1c426:	e7f9      	b.n	1c41c <net_context_bind+0xa8>
				return -ENOENT;
   1c428:	f06f 0301 	mvn.w	r3, #1
   1c42c:	e7f6      	b.n	1c41c <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1c42e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1c432:	e7f3      	b.n	1c41c <net_context_bind+0xa8>
		return -EISCONN;
   1c434:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1c438:	4618      	mov	r0, r3
   1c43a:	4770      	bx	lr
	return -EINVAL;
   1c43c:	f06f 0315 	mvn.w	r3, #21
   1c440:	e7fa      	b.n	1c438 <net_context_bind+0xc4>

0001c442 <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c442:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c446:	f013 0f10 	tst.w	r3, #16
   1c44a:	d006      	beq.n	1c45a <bind_default+0x18>
		return AF_INET6;
   1c44c:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1c44e:	2b0a      	cmp	r3, #10
   1c450:	d120      	bne.n	1c494 <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c452:	68c3      	ldr	r3, [r0, #12]
   1c454:	b11b      	cbz	r3, 1c45e <bind_default+0x1c>
			return 0;
   1c456:	2000      	movs	r0, #0
   1c458:	4770      	bx	lr
	return AF_INET;
   1c45a:	2302      	movs	r3, #2
   1c45c:	e7f7      	b.n	1c44e <bind_default+0xc>
{
   1c45e:	b530      	push	{r4, r5, lr}
   1c460:	b087      	sub	sp, #28
   1c462:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1c464:	ad06      	add	r5, sp, #24
   1c466:	230a      	movs	r3, #10
   1c468:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1c46c:	f002 fd96 	bl	1ef9c <net_ipv6_unspecified_address>
   1c470:	2210      	movs	r2, #16
   1c472:	4601      	mov	r1, r0
   1c474:	a801      	add	r0, sp, #4
   1c476:	f7e3 ff23 	bl	2c0 <memcpy>
			find_available_port(context,
   1c47a:	4629      	mov	r1, r5
   1c47c:	4620      	mov	r0, r4
   1c47e:	f7ff faa1 	bl	1b9c4 <find_available_port>
		addr6.sin6_port =
   1c482:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1c486:	2218      	movs	r2, #24
   1c488:	4629      	mov	r1, r5
   1c48a:	4620      	mov	r0, r4
   1c48c:	f7ff ff72 	bl	1c374 <net_context_bind>
}
   1c490:	b007      	add	sp, #28
   1c492:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1c494:	f06f 0015 	mvn.w	r0, #21
   1c498:	4770      	bx	lr

0001c49a <sendto>:
{
   1c49a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c49c:	b085      	sub	sp, #20
   1c49e:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1c4a0:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1c4a2:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c4a6:	f010 0f01 	tst.w	r0, #1
   1c4aa:	d072      	beq.n	1c592 <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c4ac:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c4b0:	d01f      	beq.n	1c4f2 <sendto+0x58>
		return IPPROTO_TCP;
   1c4b2:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c4b6:	f1be 0f06 	cmp.w	lr, #6
   1c4ba:	d01d      	beq.n	1c4f8 <sendto+0x5e>
   1c4bc:	461f      	mov	r7, r3
   1c4be:	4616      	mov	r6, r2
   1c4c0:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c4c2:	f1be 0f11 	cmp.w	lr, #17
   1c4c6:	d024      	beq.n	1c512 <sendto+0x78>
	if (!dst_addr) {
   1c4c8:	2c00      	cmp	r4, #0
   1c4ca:	d068      	beq.n	1c59e <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1c4cc:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1c4ce:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1c4d2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c4d6:	2b0a      	cmp	r3, #10
   1c4d8:	d164      	bne.n	1c5a4 <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c4da:	2e17      	cmp	r6, #23
   1c4dc:	d965      	bls.n	1c5aa <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c4de:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4e0:	b9f3      	cbnz	r3, 1c520 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c4e2:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c4e4:	bb63      	cbnz	r3, 1c540 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4e6:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c4e8:	bb63      	cbnz	r3, 1c544 <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c4ea:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4ec:	b363      	cbz	r3, 1c548 <sendto+0xae>
   1c4ee:	2300      	movs	r3, #0
   1c4f0:	e017      	b.n	1c522 <sendto+0x88>
	return IPPROTO_UDP;
   1c4f2:	f04f 0e11 	mov.w	lr, #17
   1c4f6:	e7de      	b.n	1c4b6 <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c4f8:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c4fc:	2802      	cmp	r0, #2
   1c4fe:	d14b      	bne.n	1c598 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c500:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c502:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1c506:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c50a:	d0d7      	beq.n	1c4bc <sendto+0x22>
			return -ESHUTDOWN;
   1c50c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1c510:	e03c      	b.n	1c58c <sendto+0xf2>
		ret = bind_default(context);
   1c512:	4628      	mov	r0, r5
   1c514:	f7ff ff95 	bl	1c442 <bind_default>
		if (ret) {
   1c518:	4603      	mov	r3, r0
   1c51a:	2800      	cmp	r0, #0
   1c51c:	d0d4      	beq.n	1c4c8 <sendto+0x2e>
   1c51e:	e035      	b.n	1c58c <sendto+0xf2>
   1c520:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c522:	2b00      	cmp	r3, #0
   1c524:	d144      	bne.n	1c5b0 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c526:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c52a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c52e:	d00d      	beq.n	1c54c <sendto+0xb2>
		return IPPROTO_TCP;
   1c530:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c532:	2b11      	cmp	r3, #17
   1c534:	d00c      	beq.n	1c550 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c536:	2b06      	cmp	r3, #6
   1c538:	d13d      	bne.n	1c5b6 <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1c53a:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1c53c:	2000      	movs	r0, #0
   1c53e:	e011      	b.n	1c564 <sendto+0xca>
   1c540:	2300      	movs	r3, #0
   1c542:	e7ee      	b.n	1c522 <sendto+0x88>
   1c544:	2300      	movs	r3, #0
   1c546:	e7ec      	b.n	1c522 <sendto+0x88>
   1c548:	2301      	movs	r3, #1
   1c54a:	e7ea      	b.n	1c522 <sendto+0x88>
	return IPPROTO_UDP;
   1c54c:	2311      	movs	r3, #17
   1c54e:	e7f0      	b.n	1c532 <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1c550:	ab03      	add	r3, sp, #12
   1c552:	4622      	mov	r2, r4
   1c554:	4628      	mov	r0, r5
   1c556:	f7ff fc0f 	bl	1bd78 <create_udp_packet>
   1c55a:	4603      	mov	r3, r0
   1c55c:	e009      	b.n	1c572 <sendto+0xd8>
		bytes += buf->len;
   1c55e:	8994      	ldrh	r4, [r2, #12]
   1c560:	4420      	add	r0, r4
		buf = buf->frags;
   1c562:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1c564:	2a00      	cmp	r2, #0
   1c566:	d1fa      	bne.n	1c55e <sendto+0xc4>
	pkt->appdatalen = len;
   1c568:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1c56a:	4628      	mov	r0, r5
   1c56c:	f006 fd08 	bl	22f80 <net_tcp_queue_data>
   1c570:	4603      	mov	r3, r0
	if (ret < 0) {
   1c572:	2b00      	cmp	r3, #0
   1c574:	db0a      	blt.n	1c58c <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1c576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c578:	9301      	str	r3, [sp, #4]
   1c57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c57c:	9300      	str	r3, [sp, #0]
   1c57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c580:	463a      	mov	r2, r7
   1c582:	9903      	ldr	r1, [sp, #12]
   1c584:	4628      	mov	r0, r5
   1c586:	f7ff fc1d 	bl	1bdc4 <send_data>
   1c58a:	4603      	mov	r3, r0
}
   1c58c:	4618      	mov	r0, r3
   1c58e:	b005      	add	sp, #20
   1c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1c592:	f06f 0308 	mvn.w	r3, #8
   1c596:	e7f9      	b.n	1c58c <sendto+0xf2>
			return -ENOTCONN;
   1c598:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c59c:	e7f6      	b.n	1c58c <sendto+0xf2>
		return -EDESTADDRREQ;
   1c59e:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c5a2:	e7f3      	b.n	1c58c <sendto+0xf2>
		return -EINVAL;
   1c5a4:	f06f 0315 	mvn.w	r3, #21
   1c5a8:	e7f0      	b.n	1c58c <sendto+0xf2>
			return -EINVAL;
   1c5aa:	f06f 0315 	mvn.w	r3, #21
   1c5ae:	e7ed      	b.n	1c58c <sendto+0xf2>
			return -EDESTADDRREQ;
   1c5b0:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c5b4:	e7ea      	b.n	1c58c <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1c5b6:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1c5ba:	e7e7      	b.n	1c58c <sendto+0xf2>

0001c5bc <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5be:	b08f      	sub	sp, #60	; 0x3c
   1c5c0:	4604      	mov	r4, r0
   1c5c2:	460d      	mov	r5, r1
   1c5c4:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1c5c6:	2300      	movs	r3, #0
   1c5c8:	9304      	str	r3, [sp, #16]
   1c5ca:	9305      	str	r3, [sp, #20]
   1c5cc:	9306      	str	r3, [sp, #24]
   1c5ce:	9307      	str	r3, [sp, #28]
   1c5d0:	9308      	str	r3, [sp, #32]
   1c5d2:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c5d4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c5d8:	f013 0f10 	tst.w	r3, #16
   1c5dc:	d037      	beq.n	1c64e <recv_udp+0x92>
		return AF_INET6;
   1c5de:	230a      	movs	r3, #10
   1c5e0:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1c5e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c5e6:	b118      	cbz	r0, 1c5f0 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1c5e8:	f008 f864 	bl	246b4 <net_conn_unregister>
		context->conn_handler = NULL;
   1c5ec:	2300      	movs	r3, #0
   1c5ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1c5f0:	4620      	mov	r0, r4
   1c5f2:	f7ff ff26 	bl	1c442 <bind_default>
	if (ret) {
   1c5f6:	4603      	mov	r3, r0
   1c5f8:	bb30      	cbnz	r0, 1c648 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c5fa:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1c5fe:	f017 0f10 	tst.w	r7, #16
   1c602:	d026      	beq.n	1c652 <recv_udp+0x96>
		return AF_INET6;
   1c604:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1c606:	2b0a      	cmp	r3, #10
   1c608:	d025      	beq.n	1c656 <recv_udp+0x9a>
	u16_t lport = 0;
   1c60a:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1c60e:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1c610:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1c612:	f017 0f40 	tst.w	r7, #64	; 0x40
   1c616:	d037      	beq.n	1c688 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1c618:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1c61a:	f017 0f80 	tst.w	r7, #128	; 0x80
   1c61e:	d135      	bne.n	1c68c <recv_udp+0xd0>
   1c620:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1c622:	8ae5      	ldrh	r5, [r4, #22]
   1c624:	022b      	lsls	r3, r5, #8
   1c626:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1c62a:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1c62e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c632:	b2ad      	uxth	r5, r5
   1c634:	342c      	adds	r4, #44	; 0x2c
   1c636:	9403      	str	r4, [sp, #12]
   1c638:	9602      	str	r6, [sp, #8]
   1c63a:	4c16      	ldr	r4, [pc, #88]	; (1c694 <recv_udp+0xd8>)
   1c63c:	9401      	str	r4, [sp, #4]
   1c63e:	9500      	str	r5, [sp, #0]
   1c640:	b29b      	uxth	r3, r3
   1c642:	f008 f855 	bl	246f0 <net_conn_register>
   1c646:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1c648:	4618      	mov	r0, r3
   1c64a:	b00f      	add	sp, #60	; 0x3c
   1c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1c64e:	2302      	movs	r3, #2
   1c650:	e7c6      	b.n	1c5e0 <recv_udp+0x24>
   1c652:	2302      	movs	r3, #2
   1c654:	e7d7      	b.n	1c606 <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c656:	68e3      	ldr	r3, [r4, #12]
   1c658:	b1a3      	cbz	r3, 1c684 <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c65a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1c65e:	6818      	ldr	r0, [r3, #0]
   1c660:	6859      	ldr	r1, [r3, #4]
   1c662:	689a      	ldr	r2, [r3, #8]
   1c664:	68db      	ldr	r3, [r3, #12]
   1c666:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1c66a:	f10d 0e14 	add.w	lr, sp, #20
   1c66e:	ab0e      	add	r3, sp, #56	; 0x38
   1c670:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c674:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c678:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1c67a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1c67e:	f8ad e012 	strh.w	lr, [sp, #18]
   1c682:	e7c5      	b.n	1c610 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1c684:	2200      	movs	r2, #0
   1c686:	e7f8      	b.n	1c67a <recv_udp+0xbe>
	return IPPROTO_UDP;
   1c688:	2011      	movs	r0, #17
   1c68a:	e7c6      	b.n	1c61a <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c68c:	f104 0114 	add.w	r1, r4, #20
   1c690:	e7c7      	b.n	1c622 <recv_udp+0x66>
   1c692:	bf00      	nop
   1c694:	0001bac9 	.word	0x0001bac9

0001c698 <net_context_connect>:
{
   1c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c69c:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1c69e:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c6a2:	f014 0f01 	tst.w	r4, #1
   1c6a6:	f000 80c9 	beq.w	1c83c <net_context_connect+0x1a4>
   1c6aa:	461f      	mov	r7, r3
   1c6ac:	4615      	mov	r5, r2
   1c6ae:	460e      	mov	r6, r1
   1c6b0:	4604      	mov	r4, r0
	ret = bind_default(context);
   1c6b2:	f7ff fec6 	bl	1c442 <bind_default>
	if (ret) {
   1c6b6:	4680      	mov	r8, r0
   1c6b8:	2800      	cmp	r0, #0
   1c6ba:	f040 80c1 	bne.w	1c840 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1c6be:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c6c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c6c4:	f013 0f10 	tst.w	r3, #16
   1c6c8:	d02b      	beq.n	1c722 <net_context_connect+0x8a>
		return AF_INET6;
   1c6ca:	220a      	movs	r2, #10
   1c6cc:	4291      	cmp	r1, r2
   1c6ce:	f040 80bb 	bne.w	1c848 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c6d2:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1c6d6:	2b03      	cmp	r3, #3
   1c6d8:	f000 80b9 	beq.w	1c84e <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1c6dc:	2a0a      	cmp	r2, #10
   1c6de:	f040 80b9 	bne.w	1c854 <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c6e2:	2d17      	cmp	r5, #23
   1c6e4:	f240 80b9 	bls.w	1c85a <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1c6e8:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c6ea:	2bff      	cmp	r3, #255	; 0xff
   1c6ec:	f000 80b8 	beq.w	1c860 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1c6f0:	2210      	movs	r2, #16
   1c6f2:	1d31      	adds	r1, r6, #4
   1c6f4:	f104 0018 	add.w	r0, r4, #24
   1c6f8:	f7e3 fde2 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1c6fc:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1c700:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1c704:	230a      	movs	r3, #10
   1c706:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c708:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c70a:	b963      	cbnz	r3, 1c726 <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c70c:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c70e:	2b00      	cmp	r3, #0
   1c710:	d174      	bne.n	1c7fc <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c712:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c714:	2b00      	cmp	r3, #0
   1c716:	d173      	bne.n	1c800 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c718:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c71a:	2b00      	cmp	r3, #0
   1c71c:	d072      	beq.n	1c804 <net_context_connect+0x16c>
   1c71e:	4643      	mov	r3, r8
   1c720:	e002      	b.n	1c728 <net_context_connect+0x90>
	return AF_INET;
   1c722:	2202      	movs	r2, #2
   1c724:	e7d2      	b.n	1c6cc <net_context_connect+0x34>
   1c726:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c728:	f013 0f01 	tst.w	r3, #1
   1c72c:	d16c      	bne.n	1c808 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1c72e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c732:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c736:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c73a:	230a      	movs	r3, #10
   1c73c:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1c73e:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1c742:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1c746:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c74a:	68e3      	ldr	r3, [r4, #12]
   1c74c:	2b00      	cmp	r3, #0
   1c74e:	d062      	beq.n	1c816 <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c750:	ad0c      	add	r5, sp, #48	; 0x30
   1c752:	6818      	ldr	r0, [r3, #0]
   1c754:	6859      	ldr	r1, [r3, #4]
   1c756:	689a      	ldr	r2, [r3, #8]
   1c758:	68db      	ldr	r3, [r3, #12]
   1c75a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c75c:	ad07      	add	r5, sp, #28
   1c75e:	ab10      	add	r3, sp, #64	; 0x40
   1c760:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c764:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c768:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1c76a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c76e:	f013 0f20 	tst.w	r3, #32
   1c772:	d052      	beq.n	1c81a <net_context_connect+0x182>
		return SOCK_STREAM;
   1c774:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1c776:	2b02      	cmp	r3, #2
   1c778:	d051      	beq.n	1c81e <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1c77a:	2b01      	cmp	r3, #1
   1c77c:	d173      	bne.n	1c866 <net_context_connect+0x1ce>
			       ntohs(rport),
   1c77e:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1c782:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1c786:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1c78a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1c78e:	b289      	uxth	r1, r1
   1c790:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c794:	9003      	str	r0, [sp, #12]
   1c796:	9402      	str	r4, [sp, #8]
   1c798:	4835      	ldr	r0, [pc, #212]	; (1c870 <net_context_connect+0x1d8>)
   1c79a:	9001      	str	r0, [sp, #4]
   1c79c:	9100      	str	r1, [sp, #0]
   1c79e:	b29b      	uxth	r3, r3
   1c7a0:	4631      	mov	r1, r6
   1c7a2:	2006      	movs	r0, #6
   1c7a4:	f007 ffa4 	bl	246f0 <net_conn_register>
	if (ret < 0) {
   1c7a8:	2800      	cmp	r0, #0
   1c7aa:	db5f      	blt.n	1c86c <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1c7ac:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c7ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c7b0:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c7b2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c7b6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c7ba:	f043 0302 	orr.w	r3, r3, #2
   1c7be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c7c2:	2102      	movs	r1, #2
   1c7c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c7c6:	f006 fa6e 	bl	22ca6 <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1c7ca:	2200      	movs	r2, #0
   1c7cc:	ab10      	add	r3, sp, #64	; 0x40
   1c7ce:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1c7d2:	9302      	str	r3, [sp, #8]
   1c7d4:	9601      	str	r6, [sp, #4]
   1c7d6:	9200      	str	r2, [sp, #0]
   1c7d8:	4613      	mov	r3, r2
   1c7da:	2102      	movs	r1, #2
   1c7dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c7de:	f006 faff 	bl	22de0 <net_tcp_prepare_segment>
	if (ret) {
   1c7e2:	b310      	cbz	r0, 1c82a <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1c7e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c7e6:	b35b      	cbz	r3, 1c840 <net_context_connect+0x1a8>
   1c7e8:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c7ea:	4619      	mov	r1, r3
   1c7ec:	30ac      	adds	r0, #172	; 0xac
   1c7ee:	f00c f803 	bl	287f8 <_impl_k_sem_take>
   1c7f2:	4680      	mov	r8, r0
   1c7f4:	b320      	cbz	r0, 1c840 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1c7f6:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1c7fa:	e021      	b.n	1c840 <net_context_connect+0x1a8>
   1c7fc:	4643      	mov	r3, r8
   1c7fe:	e793      	b.n	1c728 <net_context_connect+0x90>
   1c800:	4643      	mov	r3, r8
   1c802:	e791      	b.n	1c728 <net_context_connect+0x90>
   1c804:	2301      	movs	r3, #1
   1c806:	e78f      	b.n	1c728 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1c808:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c810:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1c814:	e791      	b.n	1c73a <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1c816:	2200      	movs	r2, #0
   1c818:	e7a7      	b.n	1c76a <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1c81a:	2302      	movs	r3, #2
   1c81c:	e7ab      	b.n	1c776 <net_context_connect+0xde>
		if (cb) {
   1c81e:	b17f      	cbz	r7, 1c840 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1c820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c822:	2100      	movs	r1, #0
   1c824:	4620      	mov	r0, r4
   1c826:	47b8      	blx	r7
   1c828:	e00a      	b.n	1c840 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1c82a:	9805      	ldr	r0, [sp, #20]
   1c82c:	f7fd fdf4 	bl	1a418 <net_send_data>
	if (ret < 0) {
   1c830:	2800      	cmp	r0, #0
   1c832:	dad7      	bge.n	1c7e4 <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1c834:	9805      	ldr	r0, [sp, #20]
   1c836:	f000 f9f0 	bl	1cc1a <net_pkt_unref>
   1c83a:	e7d3      	b.n	1c7e4 <net_context_connect+0x14c>
		return -EBADF;
   1c83c:	f06f 0808 	mvn.w	r8, #8
}
   1c840:	4640      	mov	r0, r8
   1c842:	b010      	add	sp, #64	; 0x40
   1c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1c848:	f06f 0815 	mvn.w	r8, #21
   1c84c:	e7f8      	b.n	1c840 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1c84e:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1c852:	e7f5      	b.n	1c840 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1c854:	f06f 0815 	mvn.w	r8, #21
   1c858:	e7f2      	b.n	1c840 <net_context_connect+0x1a8>
			return -EINVAL;
   1c85a:	f06f 0815 	mvn.w	r8, #21
   1c85e:	e7ef      	b.n	1c840 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1c860:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1c864:	e7ec      	b.n	1c840 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1c866:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1c86a:	e7e9      	b.n	1c840 <net_context_connect+0x1a8>
		return ret;
   1c86c:	4680      	mov	r8, r0
   1c86e:	e7e7      	b.n	1c840 <net_context_connect+0x1a8>
   1c870:	0001c119 	.word	0x0001c119

0001c874 <net_context_send>:
{
   1c874:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c876:	b085      	sub	sp, #20
	return pkt->context;
   1c878:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c87a:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1c87e:	2d00      	cmp	r5, #0
   1c880:	da17      	bge.n	1c8b2 <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1c882:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c884:	b1c5      	cbz	r5, 1c8b8 <net_context_send+0x44>
	return pkt->family;
   1c886:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1c88a:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c88e:	2d0a      	cmp	r5, #10
   1c890:	d00d      	beq.n	1c8ae <net_context_send+0x3a>
		addrlen = 0;
   1c892:	2700      	movs	r7, #0
   1c894:	461e      	mov	r6, r3
   1c896:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1c898:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c89a:	9102      	str	r1, [sp, #8]
   1c89c:	9601      	str	r6, [sp, #4]
   1c89e:	9200      	str	r2, [sp, #0]
   1c8a0:	463a      	mov	r2, r7
   1c8a2:	f104 0114 	add.w	r1, r4, #20
   1c8a6:	f7ff fdf8 	bl	1c49a <sendto>
}
   1c8aa:	b005      	add	sp, #20
   1c8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1c8ae:	2718      	movs	r7, #24
   1c8b0:	e7f0      	b.n	1c894 <net_context_send+0x20>
		return -EDESTADDRREQ;
   1c8b2:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c8b6:	e7f8      	b.n	1c8aa <net_context_send+0x36>
   1c8b8:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c8bc:	e7f5      	b.n	1c8aa <net_context_send+0x36>

0001c8be <net_context_sendto>:
{
   1c8be:	b510      	push	{r4, lr}
   1c8c0:	b084      	sub	sp, #16
   1c8c2:	461c      	mov	r4, r3
	return pkt->context;
   1c8c4:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c8c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1c8ca:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c8ce:	d00d      	beq.n	1c8ec <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1c8d0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c8d2:	2b06      	cmp	r3, #6
   1c8d4:	d00c      	beq.n	1c8f0 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1c8d6:	9b08      	ldr	r3, [sp, #32]
   1c8d8:	9302      	str	r3, [sp, #8]
   1c8da:	9b07      	ldr	r3, [sp, #28]
   1c8dc:	9301      	str	r3, [sp, #4]
   1c8de:	9b06      	ldr	r3, [sp, #24]
   1c8e0:	9300      	str	r3, [sp, #0]
   1c8e2:	4623      	mov	r3, r4
   1c8e4:	f7ff fdd9 	bl	1c49a <sendto>
}
   1c8e8:	b004      	add	sp, #16
   1c8ea:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c8ec:	2311      	movs	r3, #17
   1c8ee:	e7f0      	b.n	1c8d2 <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1c8f0:	9b08      	ldr	r3, [sp, #32]
   1c8f2:	9300      	str	r3, [sp, #0]
   1c8f4:	9b07      	ldr	r3, [sp, #28]
   1c8f6:	9a06      	ldr	r2, [sp, #24]
   1c8f8:	4621      	mov	r1, r4
   1c8fa:	f7ff ffbb 	bl	1c874 <net_context_send>
   1c8fe:	e7f3      	b.n	1c8e8 <net_context_sendto+0x2a>

0001c900 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1c902:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1c906:	f014 0f01 	tst.w	r4, #1
   1c90a:	d030      	beq.n	1c96e <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c90c:	f014 0f40 	tst.w	r4, #64	; 0x40
   1c910:	d023      	beq.n	1c95a <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1c912:	2606      	movs	r6, #6
   1c914:	4617      	mov	r7, r2
   1c916:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c918:	2e11      	cmp	r6, #17
   1c91a:	d020      	beq.n	1c95e <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c91c:	2e06      	cmp	r6, #6
   1c91e:	d129      	bne.n	1c974 <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c920:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1c922:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1c926:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c92a:	d126      	bne.n	1c97a <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c92c:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1c930:	2c02      	cmp	r4, #2
   1c932:	d125      	bne.n	1c980 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1c934:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1c936:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1c938:	b32f      	cbz	r7, 1c986 <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1c93a:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1c93e:	2100      	movs	r1, #0
   1c940:	4620      	mov	r0, r4
   1c942:	f00b ff59 	bl	287f8 <_impl_k_sem_take>
   1c946:	4606      	mov	r6, r0
   1c948:	2800      	cmp	r0, #0
   1c94a:	d1f6      	bne.n	1c93a <net_context_recv+0x3a>
   1c94c:	4639      	mov	r1, r7
   1c94e:	4620      	mov	r0, r4
   1c950:	f00b ff52 	bl	287f8 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1c954:	b140      	cbz	r0, 1c968 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1c956:	4630      	mov	r0, r6
   1c958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c95a:	2611      	movs	r6, #17
   1c95c:	e7da      	b.n	1c914 <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1c95e:	f7ff fe2d 	bl	1c5bc <recv_udp>
		if (ret < 0) {
   1c962:	1e06      	subs	r6, r0, #0
   1c964:	dae8      	bge.n	1c938 <net_context_recv+0x38>
   1c966:	e7f6      	b.n	1c956 <net_context_recv+0x56>
			return -ETIMEDOUT;
   1c968:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1c96c:	e7f3      	b.n	1c956 <net_context_recv+0x56>
		return -EBADF;
   1c96e:	f06f 0608 	mvn.w	r6, #8
   1c972:	e7f0      	b.n	1c956 <net_context_recv+0x56>
		return -EPROTOTYPE;
   1c974:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1c978:	e7ed      	b.n	1c956 <net_context_recv+0x56>
			return -ESHUTDOWN;
   1c97a:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1c97e:	e7ea      	b.n	1c956 <net_context_recv+0x56>
			return -ENOTCONN;
   1c980:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1c984:	e7e7      	b.n	1c956 <net_context_recv+0x56>
	return 0;
   1c986:	2600      	movs	r6, #0
   1c988:	e7e5      	b.n	1c956 <net_context_recv+0x56>
	...

0001c98c <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1c98c:	b570      	push	{r4, r5, r6, lr}
   1c98e:	4606      	mov	r6, r0
   1c990:	460d      	mov	r5, r1
   1c992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c996:	480d      	ldr	r0, [pc, #52]	; (1c9cc <net_context_foreach+0x40>)
   1c998:	f00b ff2e 	bl	287f8 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c99c:	2400      	movs	r4, #0
   1c99e:	e000      	b.n	1c9a2 <net_context_foreach+0x16>
   1c9a0:	3401      	adds	r4, #1
   1c9a2:	2c05      	cmp	r4, #5
   1c9a4:	dc0e      	bgt.n	1c9c4 <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1c9a6:	2368      	movs	r3, #104	; 0x68
   1c9a8:	4a09      	ldr	r2, [pc, #36]	; (1c9d0 <net_context_foreach+0x44>)
   1c9aa:	fb03 2304 	mla	r3, r3, r4, r2
   1c9ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c9b2:	f013 0f01 	tst.w	r3, #1
   1c9b6:	d0f3      	beq.n	1c9a0 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1c9b8:	4629      	mov	r1, r5
   1c9ba:	2068      	movs	r0, #104	; 0x68
   1c9bc:	fb00 2004 	mla	r0, r0, r4, r2
   1c9c0:	47b0      	blx	r6
   1c9c2:	e7ed      	b.n	1c9a0 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c9c4:	4801      	ldr	r0, [pc, #4]	; (1c9cc <net_context_foreach+0x40>)
   1c9c6:	f00b ff04 	bl	287d2 <_impl_k_sem_give>
   1c9ca:	bd70      	pop	{r4, r5, r6, pc}
   1c9cc:	20001db0 	.word	0x20001db0
   1c9d0:	20001b40 	.word	0x20001b40

0001c9d4 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1c9d4:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c9d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9da:	2101      	movs	r1, #1
   1c9dc:	4801      	ldr	r0, [pc, #4]	; (1c9e4 <net_context_init+0x10>)
   1c9de:	f00b feef 	bl	287c0 <_impl_k_sem_init>
   1c9e2:	bd08      	pop	{r3, pc}
   1c9e4:	20001db0 	.word	0x20001db0

0001c9e8 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1c9e8:	b570      	push	{r4, r5, r6, lr}
   1c9ea:	b082      	sub	sp, #8
   1c9ec:	4604      	mov	r4, r0
   1c9ee:	460d      	mov	r5, r1
   1c9f0:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1c9f2:	f00c f863 	bl	28abc <k_is_in_isr>
   1c9f6:	b198      	cbz	r0, 1ca20 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1c9f8:	2200      	movs	r2, #0
   1c9fa:	a901      	add	r1, sp, #4
   1c9fc:	4620      	mov	r0, r4
   1c9fe:	f00a fde9 	bl	275d4 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1ca02:	b998      	cbnz	r0, 1ca2c <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1ca04:	2244      	movs	r2, #68	; 0x44
   1ca06:	2100      	movs	r1, #0
   1ca08:	9801      	ldr	r0, [sp, #4]
   1ca0a:	f00e f857 	bl	2aabc <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1ca0e:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1ca10:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1ca14:	2301      	movs	r3, #1
   1ca16:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1ca1a:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1ca1c:	b002      	add	sp, #8
   1ca1e:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1ca20:	4632      	mov	r2, r6
   1ca22:	a901      	add	r1, sp, #4
   1ca24:	4620      	mov	r0, r4
   1ca26:	f00a fdd5 	bl	275d4 <k_mem_slab_alloc>
   1ca2a:	e7ea      	b.n	1ca02 <net_pkt_get_reserve+0x1a>
		return NULL;
   1ca2c:	2000      	movs	r0, #0
   1ca2e:	e7f5      	b.n	1ca1c <net_pkt_get_reserve+0x34>

0001ca30 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1ca32:	2900      	cmp	r1, #0
   1ca34:	d038      	beq.n	1caa8 <net_pkt_get+0x78>
   1ca36:	460c      	mov	r4, r1
   1ca38:	4617      	mov	r7, r2
   1ca3a:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1ca3c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1ca40:	f7fe fea4 	bl	1b78c <net_if_get_by_index>
   1ca44:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ca46:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ca4a:	f013 0f10 	tst.w	r3, #16
   1ca4e:	d024      	beq.n	1ca9a <net_pkt_get+0x6a>
		return AF_INET6;
   1ca50:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1ca52:	2b0a      	cmp	r3, #10
   1ca54:	d023      	beq.n	1ca9e <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1ca56:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1ca58:	686b      	ldr	r3, [r5, #4]
   1ca5a:	689b      	ldr	r3, [r3, #8]
   1ca5c:	4628      	mov	r0, r5
   1ca5e:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1ca60:	463a      	mov	r2, r7
   1ca62:	4601      	mov	r1, r0
   1ca64:	4630      	mov	r0, r6
   1ca66:	f7ff ffbf 	bl	1c9e8 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1ca6a:	4603      	mov	r3, r0
   1ca6c:	b198      	cbz	r0, 1ca96 <net_pkt_get+0x66>
	pkt->context = ctx;
   1ca6e:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1ca70:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ca72:	7d6a      	ldrb	r2, [r5, #21]
   1ca74:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ca78:	7d6a      	ldrb	r2, [r5, #21]
   1ca7a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ca7e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1ca82:	f012 0f10 	tst.w	r2, #16
   1ca86:	d00d      	beq.n	1caa4 <net_pkt_get+0x74>
		return AF_INET6;
   1ca88:	210a      	movs	r1, #10
	pkt->family = family;
   1ca8a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1ca8e:	f361 02c6 	bfi	r2, r1, #3, #4
   1ca92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1ca96:	4618      	mov	r0, r3
   1ca98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1ca9a:	2302      	movs	r3, #2
   1ca9c:	e7d9      	b.n	1ca52 <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ca9e:	f104 0118 	add.w	r1, r4, #24
   1caa2:	e7d9      	b.n	1ca58 <net_pkt_get+0x28>
   1caa4:	2102      	movs	r1, #2
   1caa6:	e7f0      	b.n	1ca8a <net_pkt_get+0x5a>
		return NULL;
   1caa8:	2300      	movs	r3, #0
   1caaa:	e7f4      	b.n	1ca96 <net_pkt_get+0x66>

0001caac <net_pkt_get_reserve_data>:
{
   1caac:	b570      	push	{r4, r5, r6, lr}
   1caae:	4604      	mov	r4, r0
   1cab0:	460d      	mov	r5, r1
   1cab2:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1cab4:	f00c f802 	bl	28abc <k_is_in_isr>
   1cab8:	b158      	cbz	r0, 1cad2 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1caba:	2100      	movs	r1, #0
   1cabc:	4620      	mov	r0, r4
   1cabe:	f7fd facf 	bl	1a060 <net_buf_alloc>
   1cac2:	4604      	mov	r4, r0
	if (!frag) {
   1cac4:	b11c      	cbz	r4, 1cace <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1cac6:	4629      	mov	r1, r5
   1cac8:	4620      	mov	r0, r4
   1caca:	f7fd fb24 	bl	1a116 <net_buf_reserve>
}
   1cace:	4620      	mov	r0, r4
   1cad0:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1cad2:	4631      	mov	r1, r6
   1cad4:	4620      	mov	r0, r4
   1cad6:	f7fd fac3 	bl	1a060 <net_buf_alloc>
   1cada:	4604      	mov	r4, r0
   1cadc:	e7f2      	b.n	1cac4 <net_pkt_get_reserve_data+0x18>

0001cade <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1cade:	b1f1      	cbz	r1, 1cb1e <_pkt_get_data+0x40>
{
   1cae0:	b570      	push	{r4, r5, r6, lr}
   1cae2:	460c      	mov	r4, r1
   1cae4:	4616      	mov	r6, r2
   1cae6:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1cae8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1caec:	f7fe fe4e 	bl	1b78c <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1caf0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1caf4:	f013 0f10 	tst.w	r3, #16
   1caf8:	d00c      	beq.n	1cb14 <_pkt_get_data+0x36>
		return AF_INET6;
   1cafa:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1cafc:	2b0a      	cmp	r3, #10
   1cafe:	d00b      	beq.n	1cb18 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1cb00:	2100      	movs	r1, #0
   1cb02:	6843      	ldr	r3, [r0, #4]
   1cb04:	689b      	ldr	r3, [r3, #8]
   1cb06:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1cb08:	4632      	mov	r2, r6
   1cb0a:	4601      	mov	r1, r0
   1cb0c:	4628      	mov	r0, r5
   1cb0e:	f7ff ffcd 	bl	1caac <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1cb12:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1cb14:	2302      	movs	r3, #2
   1cb16:	e7f1      	b.n	1cafc <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1cb18:	f104 0118 	add.w	r1, r4, #24
   1cb1c:	e7f1      	b.n	1cb02 <_pkt_get_data+0x24>
		return NULL;
   1cb1e:	2000      	movs	r0, #0
   1cb20:	4770      	bx	lr
	...

0001cb24 <net_pkt_get_reserve_rx>:
{
   1cb24:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1cb26:	460a      	mov	r2, r1
   1cb28:	4601      	mov	r1, r0
   1cb2a:	4802      	ldr	r0, [pc, #8]	; (1cb34 <net_pkt_get_reserve_rx+0x10>)
   1cb2c:	f7ff ff5c 	bl	1c9e8 <net_pkt_get_reserve>
}
   1cb30:	bd08      	pop	{r3, pc}
   1cb32:	bf00      	nop
   1cb34:	2000cf8c 	.word	0x2000cf8c

0001cb38 <net_pkt_get_reserve_tx>:
{
   1cb38:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1cb3a:	460a      	mov	r2, r1
   1cb3c:	4601      	mov	r1, r0
   1cb3e:	4802      	ldr	r0, [pc, #8]	; (1cb48 <net_pkt_get_reserve_tx+0x10>)
   1cb40:	f7ff ff52 	bl	1c9e8 <net_pkt_get_reserve>
}
   1cb44:	bd08      	pop	{r3, pc}
   1cb46:	bf00      	nop
   1cb48:	2000cfa8 	.word	0x2000cfa8

0001cb4c <net_pkt_get_reserve_rx_data>:
{
   1cb4c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1cb4e:	460a      	mov	r2, r1
   1cb50:	4601      	mov	r1, r0
   1cb52:	4802      	ldr	r0, [pc, #8]	; (1cb5c <net_pkt_get_reserve_rx_data+0x10>)
   1cb54:	f7ff ffaa 	bl	1caac <net_pkt_get_reserve_data>
}
   1cb58:	bd08      	pop	{r3, pc}
   1cb5a:	bf00      	nop
   1cb5c:	2000d10c 	.word	0x2000d10c

0001cb60 <net_pkt_get_reserve_tx_data>:
{
   1cb60:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1cb62:	460a      	mov	r2, r1
   1cb64:	4601      	mov	r1, r0
   1cb66:	4802      	ldr	r0, [pc, #8]	; (1cb70 <net_pkt_get_reserve_tx_data+0x10>)
   1cb68:	f7ff ffa0 	bl	1caac <net_pkt_get_reserve_data>
}
   1cb6c:	bd08      	pop	{r3, pc}
   1cb6e:	bf00      	nop
   1cb70:	2000d12c 	.word	0x2000d12c

0001cb74 <net_pkt_get_frag>:
{
   1cb74:	b538      	push	{r3, r4, r5, lr}
   1cb76:	4604      	mov	r4, r0
   1cb78:	460d      	mov	r5, r1
	return pkt->context;
   1cb7a:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1cb7c:	b143      	cbz	r3, 1cb90 <net_pkt_get_frag+0x1c>
   1cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb80:	b133      	cbz	r3, 1cb90 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1cb82:	4798      	blx	r3
   1cb84:	462a      	mov	r2, r5
   1cb86:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1cb8a:	f7ff ff8f 	bl	1caac <net_pkt_get_reserve_data>
   1cb8e:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1cb90:	6862      	ldr	r2, [r4, #4]
   1cb92:	4b07      	ldr	r3, [pc, #28]	; (1cbb0 <net_pkt_get_frag+0x3c>)
   1cb94:	429a      	cmp	r2, r3
   1cb96:	d005      	beq.n	1cba4 <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1cb98:	4629      	mov	r1, r5
   1cb9a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cb9e:	f7ff ffdf 	bl	1cb60 <net_pkt_get_reserve_tx_data>
}
   1cba2:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1cba4:	4629      	mov	r1, r5
   1cba6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cbaa:	f7ff ffcf 	bl	1cb4c <net_pkt_get_reserve_rx_data>
   1cbae:	bd38      	pop	{r3, r4, r5, pc}
   1cbb0:	2000cf8c 	.word	0x2000cf8c

0001cbb4 <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1cbb4:	b538      	push	{r3, r4, r5, lr}
   1cbb6:	4604      	mov	r4, r0
   1cbb8:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1cbba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1cbbc:	b133      	cbz	r3, 1cbcc <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1cbbe:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cbc0:	b130      	cbz	r0, 1cbd0 <net_pkt_get_tx+0x1c>
   1cbc2:	462a      	mov	r2, r5
   1cbc4:	4621      	mov	r1, r4
   1cbc6:	f7ff ff33 	bl	1ca30 <net_pkt_get>
}
   1cbca:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cbcc:	2000      	movs	r0, #0
   1cbce:	e7f7      	b.n	1cbc0 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cbd0:	4800      	ldr	r0, [pc, #0]	; (1cbd4 <net_pkt_get_tx+0x20>)
   1cbd2:	e7f6      	b.n	1cbc2 <net_pkt_get_tx+0xe>
   1cbd4:	2000cfa8 	.word	0x2000cfa8

0001cbd8 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1cbd8:	b538      	push	{r3, r4, r5, lr}
   1cbda:	4604      	mov	r4, r0
   1cbdc:	460d      	mov	r5, r1
	if (context->data_pool) {
   1cbde:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1cbe0:	b133      	cbz	r3, 1cbf0 <net_pkt_get_data+0x18>
		return context->data_pool();
   1cbe2:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cbe4:	b130      	cbz	r0, 1cbf4 <net_pkt_get_data+0x1c>
   1cbe6:	462a      	mov	r2, r5
   1cbe8:	4621      	mov	r1, r4
   1cbea:	f7ff ff78 	bl	1cade <_pkt_get_data>
}
   1cbee:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cbf0:	2000      	movs	r0, #0
   1cbf2:	e7f7      	b.n	1cbe4 <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cbf4:	4800      	ldr	r0, [pc, #0]	; (1cbf8 <net_pkt_get_data+0x20>)
   1cbf6:	e7f6      	b.n	1cbe6 <net_pkt_get_data+0xe>
   1cbf8:	2000d12c 	.word	0x2000d12c

0001cbfc <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1cbfc:	4603      	mov	r3, r0
   1cbfe:	b120      	cbz	r0, 1cc0a <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1cc00:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1cc04:	3201      	adds	r2, #1
   1cc06:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1cc0a:	4618      	mov	r0, r3
   1cc0c:	4770      	bx	lr

0001cc0e <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1cc0e:	b118      	cbz	r0, 1cc18 <net_pkt_frag_unref+0xa>
{
   1cc10:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1cc12:	f7fd fa93 	bl	1a13c <net_buf_unref>
   1cc16:	bd08      	pop	{r3, pc}
   1cc18:	4770      	bx	lr

0001cc1a <net_pkt_unref>:
{
   1cc1a:	b500      	push	{lr}
   1cc1c:	b083      	sub	sp, #12
   1cc1e:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1cc20:	b188      	cbz	r0, 1cc46 <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1cc22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1cc26:	b173      	cbz	r3, 1cc46 <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1cc28:	3b01      	subs	r3, #1
   1cc2a:	b2db      	uxtb	r3, r3
   1cc2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1cc30:	b94b      	cbnz	r3, 1cc46 <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1cc32:	6880      	ldr	r0, [r0, #8]
   1cc34:	b108      	cbz	r0, 1cc3a <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1cc36:	f7ff ffea 	bl	1cc0e <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1cc3a:	a902      	add	r1, sp, #8
   1cc3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1cc40:	6858      	ldr	r0, [r3, #4]
   1cc42:	f00a fcf5 	bl	27630 <k_mem_slab_free>
}
   1cc46:	b003      	add	sp, #12
   1cc48:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc4c <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1cc4c:	b510      	push	{r4, lr}
   1cc4e:	4604      	mov	r4, r0
   1cc50:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1cc52:	68a3      	ldr	r3, [r4, #8]
   1cc54:	4293      	cmp	r3, r2
   1cc56:	d003      	beq.n	1cc60 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1cc58:	4611      	mov	r1, r2
   1cc5a:	f7fd faaf 	bl	1a1bc <net_buf_frag_del>
}
   1cc5e:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1cc60:	2900      	cmp	r1, #0
   1cc62:	d1f9      	bne.n	1cc58 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1cc64:	4611      	mov	r1, r2
   1cc66:	f7fd faa9 	bl	1a1bc <net_buf_frag_del>
		pkt->frags = tmp;
   1cc6a:	60a0      	str	r0, [r4, #8]
		return tmp;
   1cc6c:	bd10      	pop	{r4, pc}

0001cc6e <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1cc6e:	6883      	ldr	r3, [r0, #8]
   1cc70:	b143      	cbz	r3, 1cc84 <net_pkt_frag_add+0x16>
{
   1cc72:	b510      	push	{r4, lr}
   1cc74:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1cc76:	4618      	mov	r0, r3
   1cc78:	f7fd fa80 	bl	1a17c <net_buf_frag_last>
   1cc7c:	4621      	mov	r1, r4
   1cc7e:	f7fd fa83 	bl	1a188 <net_buf_frag_insert>
   1cc82:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1cc84:	6081      	str	r1, [r0, #8]
		return;
   1cc86:	4770      	bx	lr

0001cc88 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1cc88:	b538      	push	{r3, r4, r5, lr}
   1cc8a:	4604      	mov	r4, r0
   1cc8c:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1cc8e:	4608      	mov	r0, r1
   1cc90:	f7fd fa74 	bl	1a17c <net_buf_frag_last>
   1cc94:	68a3      	ldr	r3, [r4, #8]
   1cc96:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1cc98:	60a5      	str	r5, [r4, #8]
   1cc9a:	bd38      	pop	{r3, r4, r5, pc}

0001cc9c <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cca0:	b085      	sub	sp, #20
   1cca2:	9002      	str	r0, [sp, #8]
   1cca4:	460d      	mov	r5, r1
   1cca6:	4614      	mov	r4, r2
   1cca8:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1ccaa:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1ccae:	4619      	mov	r1, r3
   1ccb0:	f7ff ff60 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   1ccb4:	9001      	str	r0, [sp, #4]
   1ccb6:	b1b8      	cbz	r0, 1cce8 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1ccb8:	f100 0608 	add.w	r6, r0, #8
   1ccbc:	4630      	mov	r0, r6
   1ccbe:	f7fd faf2 	bl	1a2a6 <net_buf_simple_tailroom>
   1ccc2:	42a0      	cmp	r0, r4
   1ccc4:	d30b      	bcc.n	1ccde <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1ccc6:	4621      	mov	r1, r4
   1ccc8:	4630      	mov	r0, r6
   1ccca:	f7fd fa83 	bl	1a1d4 <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1ccce:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1ccd2:	b14f      	cbz	r7, 1cce8 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1ccd4:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1ccd8:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1ccdc:	e01c      	b.n	1cd18 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1ccde:	9801      	ldr	r0, [sp, #4]
   1cce0:	f7ff ff95 	bl	1cc0e <net_pkt_frag_unref>
		return NULL;
   1cce4:	2300      	movs	r3, #0
   1cce6:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1cce8:	9801      	ldr	r0, [sp, #4]
   1ccea:	b005      	add	sp, #20
   1ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1ccf0:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1ccf2:	eba8 0304 	sub.w	r3, r8, r4
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	db2e      	blt.n	1cd58 <net_pkt_copy+0xbc>
			amount -= left_len;
   1ccfa:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1ccfc:	4621      	mov	r1, r4
   1ccfe:	4630      	mov	r0, r6
   1cd00:	f7fd fa68 	bl	1a1d4 <net_buf_simple_add>
   1cd04:	4622      	mov	r2, r4
   1cd06:	4649      	mov	r1, r9
   1cd08:	f7e3 fada 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1cd0c:	4630      	mov	r0, r6
   1cd0e:	f7fd faca 	bl	1a2a6 <net_buf_simple_tailroom>
   1cd12:	b180      	cbz	r0, 1cd36 <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1cd14:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1cd16:	44a1      	add	r9, r4
	while (orig && amount) {
   1cd18:	f1ba 0f00 	cmp.w	sl, #0
   1cd1c:	d0e4      	beq.n	1cce8 <net_pkt_copy+0x4c>
   1cd1e:	2d00      	cmp	r5, #0
   1cd20:	d0e2      	beq.n	1cce8 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1cd22:	f10b 0608 	add.w	r6, fp, #8
   1cd26:	4630      	mov	r0, r6
   1cd28:	f7fd fabd 	bl	1a2a6 <net_buf_simple_tailroom>
   1cd2c:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1cd2e:	42bd      	cmp	r5, r7
   1cd30:	d9de      	bls.n	1ccf0 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1cd32:	46b8      	mov	r8, r7
   1cd34:	e7dd      	b.n	1ccf2 <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1cd36:	9903      	ldr	r1, [sp, #12]
   1cd38:	9802      	ldr	r0, [sp, #8]
   1cd3a:	f7ff ff1b 	bl	1cb74 <net_pkt_get_frag>
				if (!new_frag) {
   1cd3e:	4606      	mov	r6, r0
   1cd40:	b128      	cbz	r0, 1cd4e <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1cd42:	4601      	mov	r1, r0
   1cd44:	4658      	mov	r0, fp
   1cd46:	f7fd fa2a 	bl	1a19e <net_buf_frag_add>
				frag = new_frag;
   1cd4a:	46b3      	mov	fp, r6
   1cd4c:	e7e2      	b.n	1cd14 <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1cd4e:	9801      	ldr	r0, [sp, #4]
   1cd50:	f7ff ff5d 	bl	1cc0e <net_pkt_frag_unref>
					return NULL;
   1cd54:	9601      	str	r6, [sp, #4]
   1cd56:	e7c7      	b.n	1cce8 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1cd58:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1cd5c:	4641      	mov	r1, r8
   1cd5e:	4630      	mov	r0, r6
   1cd60:	f7fd fa38 	bl	1a1d4 <net_buf_simple_add>
   1cd64:	4642      	mov	r2, r8
   1cd66:	4649      	mov	r1, r9
   1cd68:	f7e3 faaa 	bl	2c0 <memcpy>
		orig = orig->frags;
   1cd6c:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1cd70:	f1ba 0f00 	cmp.w	sl, #0
   1cd74:	d0d0      	beq.n	1cd18 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1cd76:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1cd7a:	f8da 9008 	ldr.w	r9, [sl, #8]
   1cd7e:	e7cb      	b.n	1cd18 <net_pkt_copy+0x7c>

0001cd80 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cd84:	4680      	mov	r8, r0
   1cd86:	460e      	mov	r6, r1
   1cd88:	4615      	mov	r5, r2
   1cd8a:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1cd8c:	89c3      	ldrh	r3, [r0, #14]
   1cd8e:	454b      	cmp	r3, r9
   1cd90:	d206      	bcs.n	1cda0 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1cd92:	f06f 000b 	mvn.w	r0, #11
   1cd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1cd9a:	1a6d      	subs	r5, r5, r1
   1cd9c:	b2ad      	uxth	r5, r5
		src = src->frags;
   1cd9e:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1cda0:	b336      	cbz	r6, 1cdf0 <net_frag_linear_copy+0x70>
   1cda2:	89b1      	ldrh	r1, [r6, #12]
   1cda4:	428d      	cmp	r5, r1
   1cda6:	d2f8      	bcs.n	1cd9a <net_frag_linear_copy+0x1a>
   1cda8:	2700      	movs	r7, #0
   1cdaa:	e015      	b.n	1cdd8 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1cdac:	89b4      	ldrh	r4, [r6, #12]
   1cdae:	1b64      	subs	r4, r4, r5
   1cdb0:	454c      	cmp	r4, r9
   1cdb2:	bfa8      	it	ge
   1cdb4:	464c      	movge	r4, r9
   1cdb6:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1cdb8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1cdbc:	68b1      	ldr	r1, [r6, #8]
   1cdbe:	4622      	mov	r2, r4
   1cdc0:	4429      	add	r1, r5
   1cdc2:	4438      	add	r0, r7
   1cdc4:	f7e3 fa7c 	bl	2c0 <memcpy>

		copied += to_copy;
   1cdc8:	4427      	add	r7, r4
   1cdca:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1cdcc:	eba9 0404 	sub.w	r4, r9, r4
   1cdd0:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1cdd4:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1cdd6:	2500      	movs	r5, #0
	while (src && len > 0) {
   1cdd8:	b116      	cbz	r6, 1cde0 <net_frag_linear_copy+0x60>
   1cdda:	f1b9 0f00 	cmp.w	r9, #0
   1cdde:	d1e5      	bne.n	1cdac <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1cde0:	f1b9 0f00 	cmp.w	r9, #0
   1cde4:	d106      	bne.n	1cdf4 <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1cde6:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1cdea:	2000      	movs	r0, #0
   1cdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cdf0:	2700      	movs	r7, #0
   1cdf2:	e7f1      	b.n	1cdd8 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1cdf4:	f06f 000b 	mvn.w	r0, #11
}
   1cdf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cdfc <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce00:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1ce02:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1ce04:	2700      	movs	r7, #0

	while (frag) {
   1ce06:	e009      	b.n	1ce1c <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1ce08:	4630      	mov	r0, r6
   1ce0a:	f7fd fa4c 	bl	1a2a6 <net_buf_simple_tailroom>
   1ce0e:	4605      	mov	r5, r0
   1ce10:	e011      	b.n	1ce36 <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1ce12:	89a3      	ldrh	r3, [r4, #12]
   1ce14:	2b00      	cmp	r3, #0
   1ce16:	d030      	beq.n	1ce7a <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1ce18:	4627      	mov	r7, r4
		frag = frag->frags;
   1ce1a:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1ce1c:	2c00      	cmp	r4, #0
   1ce1e:	d031      	beq.n	1ce84 <net_pkt_compact+0x88>
		if (frag->frags) {
   1ce20:	6823      	ldr	r3, [r4, #0]
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	d0f5      	beq.n	1ce12 <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1ce26:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1ce28:	f104 0608 	add.w	r6, r4, #8
   1ce2c:	4630      	mov	r0, r6
   1ce2e:	f7fd fa3a 	bl	1a2a6 <net_buf_simple_tailroom>
   1ce32:	4285      	cmp	r5, r0
   1ce34:	d8e8      	bhi.n	1ce08 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1ce36:	68a0      	ldr	r0, [r4, #8]
   1ce38:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1ce3a:	6821      	ldr	r1, [r4, #0]
   1ce3c:	462a      	mov	r2, r5
   1ce3e:	6889      	ldr	r1, [r1, #8]
   1ce40:	4418      	add	r0, r3
   1ce42:	f7e3 fa3d 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1ce46:	4629      	mov	r1, r5
   1ce48:	4630      	mov	r0, r6
   1ce4a:	f7fd f9c3 	bl	1a1d4 <net_buf_simple_add>
			memmove(frag->frags->data,
   1ce4e:	6823      	ldr	r3, [r4, #0]
   1ce50:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1ce52:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1ce54:	1b52      	subs	r2, r2, r5
   1ce56:	1941      	adds	r1, r0, r5
   1ce58:	f00d fdcc 	bl	2a9f4 <memmove>
			frag->frags->len -= copy_len;
   1ce5c:	6822      	ldr	r2, [r4, #0]
   1ce5e:	8993      	ldrh	r3, [r2, #12]
   1ce60:	1b5d      	subs	r5, r3, r5
   1ce62:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1ce64:	4630      	mov	r0, r6
   1ce66:	f7fd fa1e 	bl	1a2a6 <net_buf_simple_tailroom>
   1ce6a:	2800      	cmp	r0, #0
   1ce6c:	d0d4      	beq.n	1ce18 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1ce6e:	6822      	ldr	r2, [r4, #0]
   1ce70:	4621      	mov	r1, r4
   1ce72:	4640      	mov	r0, r8
   1ce74:	f7ff feea 	bl	1cc4c <net_pkt_frag_del>
				continue;
   1ce78:	e7d0      	b.n	1ce1c <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1ce7a:	4622      	mov	r2, r4
   1ce7c:	4639      	mov	r1, r7
   1ce7e:	4640      	mov	r0, r8
   1ce80:	f7ff fee4 	bl	1cc4c <net_pkt_frag_del>
	}

	return true;
}
   1ce84:	2001      	movs	r0, #1
   1ce86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce8a <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1ce8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1ce8e:	b3d0      	cbz	r0, 1cf06 <net_pkt_append+0x7c>
   1ce90:	460c      	mov	r4, r1
   1ce92:	4690      	mov	r8, r2
   1ce94:	469a      	mov	sl, r3
   1ce96:	4681      	mov	r9, r0
   1ce98:	b3ca      	cbz	r2, 1cf0e <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1ce9a:	6883      	ldr	r3, [r0, #8]
   1ce9c:	b133      	cbz	r3, 1ceac <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1ce9e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1cea2:	f7fd f96b 	bl	1a17c <net_buf_frag_last>
   1cea6:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1cea8:	2700      	movs	r7, #0
   1ceaa:	e024      	b.n	1cef6 <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1ceac:	4651      	mov	r1, sl
   1ceae:	f7ff fe61 	bl	1cb74 <net_pkt_get_frag>
		if (!frag) {
   1ceb2:	4601      	mov	r1, r0
   1ceb4:	b368      	cbz	r0, 1cf12 <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1ceb6:	4648      	mov	r0, r9
   1ceb8:	f7ff fed9 	bl	1cc6e <net_pkt_frag_add>
   1cebc:	e7ef      	b.n	1ce9e <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1cebe:	4628      	mov	r0, r5
   1cec0:	f7fd f9f1 	bl	1a2a6 <net_buf_simple_tailroom>
   1cec4:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1cec6:	4631      	mov	r1, r6
   1cec8:	4628      	mov	r0, r5
   1ceca:	f7fd f983 	bl	1a1d4 <net_buf_simple_add>
		memcpy(data, value, count);
   1cece:	4632      	mov	r2, r6
   1ced0:	4641      	mov	r1, r8
   1ced2:	f7e3 f9f5 	bl	2c0 <memcpy>
		len -= count;
   1ced6:	1ba4      	subs	r4, r4, r6
   1ced8:	b2a4      	uxth	r4, r4
		added_len += count;
   1ceda:	4437      	add	r7, r6
   1cedc:	b2bf      	uxth	r7, r7
		value += count;
   1cede:	44b0      	add	r8, r6
		if (len == 0) {
   1cee0:	b194      	cbz	r4, 1cf08 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1cee2:	4651      	mov	r1, sl
   1cee4:	4648      	mov	r0, r9
   1cee6:	f7ff fe45 	bl	1cb74 <net_pkt_get_frag>
		if (!frag) {
   1ceea:	4605      	mov	r5, r0
   1ceec:	b160      	cbz	r0, 1cf08 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1ceee:	4601      	mov	r1, r0
   1cef0:	4648      	mov	r0, r9
   1cef2:	f7ff febc 	bl	1cc6e <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1cef6:	3508      	adds	r5, #8
   1cef8:	4628      	mov	r0, r5
   1cefa:	f7fd f9d4 	bl	1a2a6 <net_buf_simple_tailroom>
   1cefe:	4284      	cmp	r4, r0
   1cf00:	d2dd      	bcs.n	1cebe <net_pkt_append+0x34>
   1cf02:	4626      	mov	r6, r4
   1cf04:	e7df      	b.n	1cec6 <net_pkt_append+0x3c>
		return 0;
   1cf06:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1cf08:	4638      	mov	r0, r7
   1cf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1cf0e:	2700      	movs	r7, #0
   1cf10:	e7fa      	b.n	1cf08 <net_pkt_append+0x7e>
			return 0;
   1cf12:	2700      	movs	r7, #0
   1cf14:	e7f8      	b.n	1cf08 <net_pkt_append+0x7e>

0001cf16 <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1cf16:	b4f0      	push	{r4, r5, r6, r7}
   1cf18:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	b188      	cbz	r0, 1cf42 <net_frag_read+0x2c>
	while (frag) {
   1cf1e:	b17c      	cbz	r4, 1cf40 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1cf20:	89a0      	ldrh	r0, [r4, #12]
   1cf22:	4288      	cmp	r0, r1
   1cf24:	d005      	beq.n	1cf32 <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1cf26:	4288      	cmp	r0, r1
   1cf28:	d807      	bhi.n	1cf3a <net_frag_read+0x24>
		offset -= frag->len;
   1cf2a:	1a09      	subs	r1, r1, r0
   1cf2c:	b289      	uxth	r1, r1
		frag = frag->frags;
   1cf2e:	6824      	ldr	r4, [r4, #0]
   1cf30:	e7f5      	b.n	1cf1e <net_frag_read+0x8>
			*pos = 0;
   1cf32:	2100      	movs	r1, #0
   1cf34:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1cf36:	6820      	ldr	r0, [r4, #0]
   1cf38:	e003      	b.n	1cf42 <net_frag_read+0x2c>
			*pos = offset;
   1cf3a:	8011      	strh	r1, [r2, #0]
			return frag;
   1cf3c:	4620      	mov	r0, r4
   1cf3e:	e000      	b.n	1cf42 <net_frag_read+0x2c>
	return NULL;
   1cf40:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1cf42:	b350      	cbz	r0, 1cf9a <net_frag_read+0x84>
   1cf44:	2500      	movs	r5, #0
   1cf46:	e00d      	b.n	1cf64 <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1cf48:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1cf4a:	3301      	adds	r3, #1
   1cf4c:	b29b      	uxth	r3, r3
   1cf4e:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1cf50:	8984      	ldrh	r4, [r0, #12]
   1cf52:	42a3      	cmp	r3, r4
   1cf54:	d304      	bcc.n	1cf60 <net_frag_read+0x4a>
		*pos = 0;
   1cf56:	2300      	movs	r3, #0
   1cf58:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1cf5a:	6800      	ldr	r0, [r0, #0]
   1cf5c:	e000      	b.n	1cf60 <net_frag_read+0x4a>
						  pos, data + copy++);
   1cf5e:	4625      	mov	r5, r4
   1cf60:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1cf62:	b1c0      	cbz	r0, 1cf96 <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1cf64:	1e59      	subs	r1, r3, #1
   1cf66:	b289      	uxth	r1, r1
   1cf68:	b1db      	cbz	r3, 1cfa2 <net_frag_read+0x8c>
   1cf6a:	b1d0      	cbz	r0, 1cfa2 <net_frag_read+0x8c>
		if (data) {
   1cf6c:	2e00      	cmp	r6, #0
   1cf6e:	d0eb      	beq.n	1cf48 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1cf70:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1cf72:	1c6c      	adds	r4, r5, #1
   1cf74:	b2a4      	uxth	r4, r4
	if (data) {
   1cf76:	42ee      	cmn	r6, r5
   1cf78:	d002      	beq.n	1cf80 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1cf7a:	6887      	ldr	r7, [r0, #8]
   1cf7c:	5cff      	ldrb	r7, [r7, r3]
   1cf7e:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1cf80:	3301      	adds	r3, #1
   1cf82:	b29b      	uxth	r3, r3
   1cf84:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1cf86:	8985      	ldrh	r5, [r0, #12]
   1cf88:	42ab      	cmp	r3, r5
   1cf8a:	d3e8      	bcc.n	1cf5e <net_frag_read+0x48>
		*pos = 0;
   1cf8c:	2300      	movs	r3, #0
   1cf8e:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1cf90:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1cf92:	4625      	mov	r5, r4
   1cf94:	e7e4      	b.n	1cf60 <net_frag_read+0x4a>
		if (!frag && len) {
   1cf96:	2900      	cmp	r1, #0
   1cf98:	d0e4      	beq.n	1cf64 <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1cf9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf9e:	8013      	strh	r3, [r2, #0]

	return NULL;
   1cfa0:	2000      	movs	r0, #0
}
   1cfa2:	bcf0      	pop	{r4, r5, r6, r7}
   1cfa4:	4770      	bx	lr

0001cfa6 <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1cfa6:	b510      	push	{r4, lr}
   1cfa8:	b084      	sub	sp, #16
   1cfaa:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1cfac:	ab03      	add	r3, sp, #12
   1cfae:	9300      	str	r3, [sp, #0]
   1cfb0:	2302      	movs	r3, #2
   1cfb2:	f7ff ffb0 	bl	1cf16 <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1cfb6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cfba:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cfbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cfc2:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1cfc4:	b004      	add	sp, #16
   1cfc6:	bd10      	pop	{r4, pc}

0001cfc8 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1cfc8:	b510      	push	{r4, lr}
   1cfca:	b084      	sub	sp, #16
   1cfcc:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1cfce:	ab03      	add	r3, sp, #12
   1cfd0:	9300      	str	r3, [sp, #0]
   1cfd2:	2304      	movs	r3, #4
   1cfd4:	f7ff ff9f 	bl	1cf16 <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1cfd8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cfdc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cfe0:	041b      	lsls	r3, r3, #16
   1cfe2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1cfe6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1cfea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cfee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1cff2:	4313      	orrs	r3, r2
   1cff4:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1cff6:	b004      	add	sp, #16
   1cff8:	bd10      	pop	{r4, pc}

0001cffa <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1cffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cffe:	b083      	sub	sp, #12
   1d000:	9201      	str	r2, [sp, #4]
   1d002:	469b      	mov	fp, r3
   1d004:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1d008:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1d00a:	2800      	cmp	r0, #0
   1d00c:	d06d      	beq.n	1d0ea <net_pkt_write+0xf0>
   1d00e:	460c      	mov	r4, r1
   1d010:	4682      	mov	sl, r0
   1d012:	4615      	mov	r5, r2
	if (data) {
   1d014:	b364      	cbz	r4, 1d070 <net_pkt_write+0x76>
		if (!frag) {
   1d016:	2c00      	cmp	r4, #0
   1d018:	d065      	beq.n	1d0e6 <net_pkt_write+0xec>
		if (offset < frag->len) {
   1d01a:	89a3      	ldrh	r3, [r4, #12]
   1d01c:	42ab      	cmp	r3, r5
   1d01e:	d863      	bhi.n	1d0e8 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1d020:	d032      	beq.n	1d088 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1d022:	42ab      	cmp	r3, r5
   1d024:	d2f6      	bcs.n	1d014 <net_pkt_write+0x1a>
			offset -= frag->len;
   1d026:	1aed      	subs	r5, r5, r3
   1d028:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1d02a:	f104 0908 	add.w	r9, r4, #8
   1d02e:	4648      	mov	r0, r9
   1d030:	f7fd f939 	bl	1a2a6 <net_buf_simple_tailroom>
   1d034:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1d038:	4545      	cmp	r5, r8
   1d03a:	d33a      	bcc.n	1d0b2 <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1d03c:	4545      	cmp	r5, r8
   1d03e:	d03e      	beq.n	1d0be <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1d040:	4545      	cmp	r5, r8
   1d042:	d9e7      	bls.n	1d014 <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1d044:	b281      	uxth	r1, r0
   1d046:	4648      	mov	r0, r9
   1d048:	f7fd f8c4 	bl	1a1d4 <net_buf_simple_add>
				offset -= tailroom;
   1d04c:	eba5 0508 	sub.w	r5, r5, r8
   1d050:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1d052:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d054:	2c00      	cmp	r4, #0
   1d056:	d1dd      	bne.n	1d014 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d058:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d05a:	4650      	mov	r0, sl
   1d05c:	f7ff fd8a 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   1d060:	4604      	mov	r4, r0
   1d062:	2800      	cmp	r0, #0
   1d064:	d0d6      	beq.n	1d014 <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1d066:	4601      	mov	r1, r0
   1d068:	4650      	mov	r0, sl
   1d06a:	f7ff fe00 	bl	1cc6e <net_pkt_frag_add>
   1d06e:	e7d1      	b.n	1d014 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d070:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d072:	4650      	mov	r0, sl
   1d074:	f7ff fd7e 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   1d078:	4604      	mov	r4, r0
   1d07a:	2800      	cmp	r0, #0
   1d07c:	d0cb      	beq.n	1d016 <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1d07e:	4601      	mov	r1, r0
   1d080:	4650      	mov	r0, sl
   1d082:	f7ff fdf4 	bl	1cc6e <net_pkt_frag_add>
   1d086:	e7c6      	b.n	1d016 <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1d088:	f104 0008 	add.w	r0, r4, #8
   1d08c:	f7fd f90b 	bl	1a2a6 <net_buf_simple_tailroom>
   1d090:	bb50      	cbnz	r0, 1d0e8 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1d092:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d094:	b10c      	cbz	r4, 1d09a <net_pkt_write+0xa0>
			*pos = 0;
   1d096:	2500      	movs	r5, #0
   1d098:	e026      	b.n	1d0e8 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d09a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d09c:	4650      	mov	r0, sl
   1d09e:	f7ff fd69 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   1d0a2:	4604      	mov	r4, r0
   1d0a4:	2800      	cmp	r0, #0
   1d0a6:	d0f6      	beq.n	1d096 <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1d0a8:	4601      	mov	r1, r0
   1d0aa:	4650      	mov	r0, sl
   1d0ac:	f7ff fddf 	bl	1cc6e <net_pkt_frag_add>
   1d0b0:	e7f1      	b.n	1d096 <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1d0b2:	4629      	mov	r1, r5
   1d0b4:	4648      	mov	r0, r9
   1d0b6:	f7fd f88d 	bl	1a1d4 <net_buf_simple_add>
				*pos = frag->len;
   1d0ba:	89a5      	ldrh	r5, [r4, #12]
   1d0bc:	e014      	b.n	1d0e8 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1d0be:	b281      	uxth	r1, r0
   1d0c0:	4648      	mov	r0, r9
   1d0c2:	f7fd f887 	bl	1a1d4 <net_buf_simple_add>
				return check_and_create_data(pkt,
   1d0c6:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d0c8:	b10c      	cbz	r4, 1d0ce <net_pkt_write+0xd4>
				*pos = 0;
   1d0ca:	2500      	movs	r5, #0
   1d0cc:	e00c      	b.n	1d0e8 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d0ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d0d0:	4650      	mov	r0, sl
   1d0d2:	f7ff fd4f 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   1d0d6:	4604      	mov	r4, r0
   1d0d8:	2800      	cmp	r0, #0
   1d0da:	d0f6      	beq.n	1d0ca <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1d0dc:	4601      	mov	r1, r0
   1d0de:	4650      	mov	r0, sl
   1d0e0:	f7ff fdc5 	bl	1cc6e <net_pkt_frag_add>
   1d0e4:	e7f1      	b.n	1d0ca <net_pkt_write+0xd0>
		if (!frag) {
   1d0e6:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1d0e8:	b96c      	cbnz	r4, 1d106 <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1d0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d0ee:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1d0f2:	2000      	movs	r0, #0
   1d0f4:	e02d      	b.n	1d152 <net_pkt_write+0x158>
		len -= count;
   1d0f6:	eba6 0608 	sub.w	r6, r6, r8
   1d0fa:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1d0fc:	b32e      	cbz	r6, 1d14a <net_pkt_write+0x150>
		data += count;
   1d0fe:	4447      	add	r7, r8
		frag = frag->frags;
   1d100:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1d102:	b34c      	cbz	r4, 1d158 <net_pkt_write+0x15e>
		offset = 0;
   1d104:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1d106:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1d10a:	f104 0908 	add.w	r9, r4, #8
   1d10e:	4648      	mov	r0, r9
   1d110:	f7fd f8c5 	bl	1a29e <net_buf_simple_headroom>
   1d114:	eba8 0800 	sub.w	r8, r8, r0
   1d118:	fa1f f888 	uxth.w	r8, r8
   1d11c:	eba8 0805 	sub.w	r8, r8, r5
   1d120:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1d124:	45b0      	cmp	r8, r6
   1d126:	bf28      	it	cs
   1d128:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1d12a:	68a0      	ldr	r0, [r4, #8]
   1d12c:	4642      	mov	r2, r8
   1d12e:	4639      	mov	r1, r7
   1d130:	4428      	add	r0, r5
   1d132:	f7e3 f8c5 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1d136:	eb05 0108 	add.w	r1, r5, r8
   1d13a:	89a3      	ldrh	r3, [r4, #12]
   1d13c:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1d13e:	2900      	cmp	r1, #0
   1d140:	ddd9      	ble.n	1d0f6 <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1d142:	4648      	mov	r0, r9
   1d144:	f7fd f846 	bl	1a1d4 <net_buf_simple_add>
   1d148:	e7d5      	b.n	1d0f6 <net_pkt_write+0xfc>
			*pos = offset + count;
   1d14a:	4445      	add	r5, r8
   1d14c:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1d150:	4620      	mov	r0, r4
}
   1d152:	b003      	add	sp, #12
   1d154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1d158:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d15a:	4650      	mov	r0, sl
   1d15c:	f7ff fd0a 	bl	1cb74 <net_pkt_get_frag>
			if (!frag) {
   1d160:	4604      	mov	r4, r0
   1d162:	2800      	cmp	r0, #0
   1d164:	d0c1      	beq.n	1d0ea <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1d166:	4601      	mov	r1, r0
   1d168:	4650      	mov	r0, sl
   1d16a:	f7ff fd80 	bl	1cc6e <net_pkt_frag_add>
   1d16e:	e7c9      	b.n	1d104 <net_pkt_write+0x10a>

0001d170 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1d170:	b170      	cbz	r0, 1d190 <net_pkt_get_info+0x20>
{
   1d172:	b410      	push	{r4}
   1d174:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1d176:	480c      	ldr	r0, [pc, #48]	; (1d1a8 <net_pkt_get_info+0x38>)
   1d178:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1d17a:	b109      	cbz	r1, 1d180 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1d17c:	480b      	ldr	r0, [pc, #44]	; (1d1ac <net_pkt_get_info+0x3c>)
   1d17e:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1d180:	b10a      	cbz	r2, 1d186 <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1d182:	490b      	ldr	r1, [pc, #44]	; (1d1b0 <net_pkt_get_info+0x40>)
   1d184:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1d186:	b10b      	cbz	r3, 1d18c <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1d188:	4a0a      	ldr	r2, [pc, #40]	; (1d1b4 <net_pkt_get_info+0x44>)
   1d18a:	601a      	str	r2, [r3, #0]
	}
}
   1d18c:	bc10      	pop	{r4}
   1d18e:	4770      	bx	lr
	if (tx) {
   1d190:	b109      	cbz	r1, 1d196 <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1d192:	4806      	ldr	r0, [pc, #24]	; (1d1ac <net_pkt_get_info+0x3c>)
   1d194:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1d196:	b10a      	cbz	r2, 1d19c <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1d198:	4905      	ldr	r1, [pc, #20]	; (1d1b0 <net_pkt_get_info+0x40>)
   1d19a:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1d19c:	2b00      	cmp	r3, #0
   1d19e:	d0f6      	beq.n	1d18e <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1d1a0:	4a04      	ldr	r2, [pc, #16]	; (1d1b4 <net_pkt_get_info+0x44>)
   1d1a2:	601a      	str	r2, [r3, #0]
   1d1a4:	4770      	bx	lr
   1d1a6:	bf00      	nop
   1d1a8:	2000cf8c 	.word	0x2000cf8c
   1d1ac:	2000cfa8 	.word	0x2000cfa8
   1d1b0:	2000d10c 	.word	0x2000d10c
   1d1b4:	2000d12c 	.word	0x2000d12c

0001d1b8 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1d1b8:	b500      	push	{lr}
   1d1ba:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1d1bc:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1d1be:	2300      	movs	r3, #0
   1d1c0:	9300      	str	r3, [sp, #0]
   1d1c2:	f7ff fea8 	bl	1cf16 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1d1c6:	b003      	add	sp, #12
   1d1c8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1cc <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1d1cc:	b500      	push	{lr}
   1d1ce:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d1d0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d1d4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d1d8:	f10d 0206 	add.w	r2, sp, #6
   1d1dc:	4419      	add	r1, r3
   1d1de:	f7ff ffeb 	bl	1d1b8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d1e2:	b130      	cbz	r0, 1d1f2 <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1d1e4:	6880      	ldr	r0, [r0, #8]
   1d1e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d1ea:	4418      	add	r0, r3
}
   1d1ec:	b003      	add	sp, #12
   1d1ee:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d1f2:	2000      	movs	r0, #0
   1d1f4:	e7fa      	b.n	1d1ec <net_pkt_icmp_data+0x20>

0001d1f6 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1d1f6:	b500      	push	{lr}
   1d1f8:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d1fa:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1d1fe:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1d202:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1d204:	4419      	add	r1, r3
   1d206:	f10d 0206 	add.w	r2, sp, #6
   1d20a:	b289      	uxth	r1, r1
   1d20c:	f7ff ffd4 	bl	1d1b8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d210:	b130      	cbz	r0, 1d220 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1d212:	6880      	ldr	r0, [r0, #8]
   1d214:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d218:	4418      	add	r0, r3
}
   1d21a:	b003      	add	sp, #12
   1d21c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d220:	2000      	movs	r0, #0
   1d222:	e7fa      	b.n	1d21a <net_pkt_icmp_opt_data+0x24>

0001d224 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1d224:	b500      	push	{lr}
   1d226:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d228:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d22c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d230:	f10d 0206 	add.w	r2, sp, #6
   1d234:	4419      	add	r1, r3
   1d236:	f7ff ffbf 	bl	1d1b8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d23a:	b130      	cbz	r0, 1d24a <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1d23c:	6880      	ldr	r0, [r0, #8]
   1d23e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d242:	4418      	add	r0, r3
}
   1d244:	b003      	add	sp, #12
   1d246:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d24a:	2000      	movs	r0, #0
   1d24c:	e7fa      	b.n	1d244 <net_pkt_udp_data+0x20>

0001d24e <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1d24e:	b500      	push	{lr}
   1d250:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d252:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d256:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d25a:	f10d 0206 	add.w	r2, sp, #6
   1d25e:	4419      	add	r1, r3
   1d260:	f7ff ffaa 	bl	1d1b8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d264:	b130      	cbz	r0, 1d274 <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1d266:	6880      	ldr	r0, [r0, #8]
   1d268:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d26c:	4418      	add	r0, r3
}
   1d26e:	b003      	add	sp, #12
   1d270:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d274:	2000      	movs	r0, #0
   1d276:	e7fa      	b.n	1d26e <net_pkt_tcp_data+0x20>

0001d278 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1d278:	b570      	push	{r4, r5, r6, lr}
   1d27a:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1d27c:	4605      	mov	r5, r0
   1d27e:	2800      	cmp	r0, #0
   1d280:	d065      	beq.n	1d34e <net_pkt_clone+0xd6>
   1d282:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1d284:	460a      	mov	r2, r1
   1d286:	2100      	movs	r1, #0
   1d288:	6840      	ldr	r0, [r0, #4]
   1d28a:	f7ff fbad 	bl	1c9e8 <net_pkt_get_reserve>
	if (!clone) {
   1d28e:	4604      	mov	r4, r0
   1d290:	2800      	cmp	r0, #0
   1d292:	d054      	beq.n	1d33e <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1d294:	2300      	movs	r3, #0
   1d296:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1d298:	68ab      	ldr	r3, [r5, #8]
   1d29a:	b173      	cbz	r3, 1d2ba <net_pkt_clone+0x42>
   1d29c:	2100      	movs	r1, #0
   1d29e:	e002      	b.n	1d2a6 <net_pkt_clone+0x2e>
		bytes += buf->len;
   1d2a0:	899a      	ldrh	r2, [r3, #12]
   1d2a2:	4411      	add	r1, r2
		buf = buf->frags;
   1d2a4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1d2a6:	2b00      	cmp	r3, #0
   1d2a8:	d1fa      	bne.n	1d2a0 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1d2aa:	4633      	mov	r3, r6
   1d2ac:	2200      	movs	r2, #0
   1d2ae:	4628      	mov	r0, r5
   1d2b0:	f7ff fcf4 	bl	1cc9c <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1d2b4:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1d2b6:	2800      	cmp	r0, #0
   1d2b8:	d044      	beq.n	1d344 <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1d2ba:	68eb      	ldr	r3, [r5, #12]
   1d2bc:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1d2be:	692b      	ldr	r3, [r5, #16]
   1d2c0:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1d2c2:	696b      	ldr	r3, [r5, #20]
   1d2c4:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1d2c6:	68a3      	ldr	r3, [r4, #8]
   1d2c8:	b1db      	cbz	r3, 1d302 <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1d2ca:	f10d 0206 	add.w	r2, sp, #6
   1d2ce:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1d2d2:	4620      	mov	r0, r4
   1d2d4:	f7ff ff70 	bl	1d1b8 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1d2d8:	6883      	ldr	r3, [r0, #8]
   1d2da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d2de:	4413      	add	r3, r2
	pkt->appdata = data;
   1d2e0:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1d2e2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1d2e4:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1d2e6:	2208      	movs	r2, #8
   1d2e8:	f105 0120 	add.w	r1, r5, #32
   1d2ec:	f104 0020 	add.w	r0, r4, #32
   1d2f0:	f7e2 ffe6 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1d2f4:	2208      	movs	r2, #8
   1d2f6:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1d2fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d2fe:	f7e2 ffdf 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1d302:	2300      	movs	r3, #0
   1d304:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1d306:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1d30a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1d30e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1d312:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1d316:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1d31a:	f363 02c6 	bfi	r2, r3, #3, #4
   1d31e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1d322:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1d326:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1d32a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1d32e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1d332:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1d336:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1d33a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1d33c:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1d33e:	4620      	mov	r0, r4
   1d340:	b002      	add	sp, #8
   1d342:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1d344:	4620      	mov	r0, r4
   1d346:	f7ff fc68 	bl	1cc1a <net_pkt_unref>
			return NULL;
   1d34a:	2400      	movs	r4, #0
   1d34c:	e7f7      	b.n	1d33e <net_pkt_clone+0xc6>
		return NULL;
   1d34e:	4604      	mov	r4, r0
   1d350:	e7f5      	b.n	1d33e <net_pkt_clone+0xc6>

0001d352 <net_pkt_init>:

void net_pkt_init(void)
{
   1d352:	4770      	bx	lr

0001d354 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1d354:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1d356:	2a00      	cmp	r2, #0
   1d358:	db03      	blt.n	1d362 <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1d35a:	4606      	mov	r6, r0
   1d35c:	2409      	movs	r4, #9
   1d35e:	4b0e      	ldr	r3, [pc, #56]	; (1d398 <net_value_to_udec+0x44>)
   1d360:	e00a      	b.n	1d378 <net_value_to_udec+0x24>
		precision = 1;
   1d362:	2201      	movs	r2, #1
   1d364:	e7f9      	b.n	1d35a <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1d366:	3530      	adds	r5, #48	; 0x30
   1d368:	7035      	strb	r5, [r6, #0]
			precision = i;
   1d36a:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1d36c:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1d36e:	3c01      	subs	r4, #1
   1d370:	4d0a      	ldr	r5, [pc, #40]	; (1d39c <net_value_to_udec+0x48>)
   1d372:	fba5 5303 	umull	r5, r3, r5, r3
   1d376:	08db      	lsrs	r3, r3, #3
   1d378:	2c00      	cmp	r4, #0
   1d37a:	db08      	blt.n	1d38e <net_value_to_udec+0x3a>
		temp = value / divisor;
   1d37c:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1d380:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1d384:	42a2      	cmp	r2, r4
   1d386:	dcee      	bgt.n	1d366 <net_value_to_udec+0x12>
   1d388:	2d00      	cmp	r5, #0
   1d38a:	d0f0      	beq.n	1d36e <net_value_to_udec+0x1a>
   1d38c:	e7eb      	b.n	1d366 <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1d38e:	2300      	movs	r3, #0
   1d390:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1d392:	1a30      	subs	r0, r6, r0
   1d394:	bc70      	pop	{r4, r5, r6}
   1d396:	4770      	bx	lr
   1d398:	3b9aca00 	.word	0x3b9aca00
   1d39c:	cccccccd 	.word	0xcccccccd

0001d3a0 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1d3a0:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1d3a2:	3a01      	subs	r2, #1
   1d3a4:	440a      	add	r2, r1

	while (ptr < end) {
   1d3a6:	e000      	b.n	1d3aa <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1d3a8:	3102      	adds	r1, #2
	while (ptr < end) {
   1d3aa:	4291      	cmp	r1, r2
   1d3ac:	d20b      	bcs.n	1d3c6 <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1d3ae:	780c      	ldrb	r4, [r1, #0]
   1d3b0:	784b      	ldrb	r3, [r1, #1]
   1d3b2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d3b6:	b29b      	uxth	r3, r3
		sum += tmp;
   1d3b8:	4418      	add	r0, r3
   1d3ba:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d3bc:	4283      	cmp	r3, r0
   1d3be:	d9f3      	bls.n	1d3a8 <calc_chksum+0x8>
			sum++;
   1d3c0:	3001      	adds	r0, #1
   1d3c2:	b280      	uxth	r0, r0
   1d3c4:	e7f0      	b.n	1d3a8 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1d3c6:	d001      	beq.n	1d3cc <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1d3c8:	bc10      	pop	{r4}
   1d3ca:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1d3cc:	780b      	ldrb	r3, [r1, #0]
   1d3ce:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1d3d0:	4418      	add	r0, r3
   1d3d2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d3d4:	4283      	cmp	r3, r0
   1d3d6:	d9f7      	bls.n	1d3c8 <calc_chksum+0x28>
			sum++;
   1d3d8:	3001      	adds	r0, #1
   1d3da:	b280      	uxth	r0, r0
   1d3dc:	e7f4      	b.n	1d3c8 <calc_chksum+0x28>

0001d3de <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1d3de:	b530      	push	{r4, r5, lr}
   1d3e0:	b083      	sub	sp, #12
   1d3e2:	4604      	mov	r4, r0
   1d3e4:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1d3e6:	220a      	movs	r2, #10
   1d3e8:	a901      	add	r1, sp, #4
   1d3ea:	f00e f93b 	bl	2b664 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1d3ee:	9b01      	ldr	r3, [sp, #4]
   1d3f0:	429c      	cmp	r4, r3
   1d3f2:	d008      	beq.n	1d406 <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3f4:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1d3f6:	b16a      	cbz	r2, 1d414 <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3f8:	781b      	ldrb	r3, [r3, #0]
   1d3fa:	b973      	cbnz	r3, 1d41a <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1d3fc:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3fe:	4298      	cmp	r0, r3
   1d400:	d005      	beq.n	1d40e <convert_port+0x30>
		return false;
   1d402:	2000      	movs	r0, #0
   1d404:	e007      	b.n	1d416 <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1d406:	2800      	cmp	r0, #0
   1d408:	d1f4      	bne.n	1d3f4 <convert_port+0x16>
		return false;
   1d40a:	2000      	movs	r0, #0
   1d40c:	e003      	b.n	1d416 <convert_port+0x38>
	}

	*port = tmp;
   1d40e:	802b      	strh	r3, [r5, #0]

	return true;
   1d410:	2001      	movs	r0, #1
   1d412:	e000      	b.n	1d416 <convert_port+0x38>
		return false;
   1d414:	2000      	movs	r0, #0
}
   1d416:	b003      	add	sp, #12
   1d418:	bd30      	pop	{r4, r5, pc}
		return false;
   1d41a:	2000      	movs	r0, #0
   1d41c:	e7fb      	b.n	1d416 <convert_port+0x38>

0001d41e <net_byte_to_hex>:
{
   1d41e:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d420:	090c      	lsrs	r4, r1, #4
   1d422:	2500      	movs	r5, #0
   1d424:	e00a      	b.n	1d43c <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1d426:	b96b      	cbnz	r3, 1d444 <net_byte_to_hex+0x26>
   1d428:	b12c      	cbz	r4, 1d436 <net_byte_to_hex+0x18>
   1d42a:	e00b      	b.n	1d444 <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1d42c:	4414      	add	r4, r2
   1d42e:	b2e4      	uxtb	r4, r4
   1d430:	3c0a      	subs	r4, #10
   1d432:	7004      	strb	r4, [r0, #0]
   1d434:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d436:	3501      	adds	r5, #1
   1d438:	f001 040f 	and.w	r4, r1, #15
   1d43c:	2d01      	cmp	r5, #1
   1d43e:	dc07      	bgt.n	1d450 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1d440:	2d00      	cmp	r5, #0
   1d442:	d0f0      	beq.n	1d426 <net_byte_to_hex+0x8>
		if (val < 10) {
   1d444:	2c09      	cmp	r4, #9
   1d446:	dcf1      	bgt.n	1d42c <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1d448:	3430      	adds	r4, #48	; 0x30
   1d44a:	7004      	strb	r4, [r0, #0]
   1d44c:	3001      	adds	r0, #1
   1d44e:	e7f2      	b.n	1d436 <net_byte_to_hex+0x18>
	*ptr = '\0';
   1d450:	2300      	movs	r3, #0
   1d452:	7003      	strb	r3, [r0, #0]
}
   1d454:	bc30      	pop	{r4, r5}
   1d456:	4770      	bx	lr

0001d458 <net_sprint_ll_addr_buf>:
{
   1d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d45c:	4607      	mov	r7, r0
   1d45e:	460e      	mov	r6, r1
   1d460:	4690      	mov	r8, r2
	switch (ll_len) {
   1d462:	2906      	cmp	r1, #6
   1d464:	d002      	beq.n	1d46c <net_sprint_ll_addr_buf+0x14>
   1d466:	2908      	cmp	r1, #8
   1d468:	d000      	beq.n	1d46c <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1d46a:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d46c:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1d46e:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d470:	2400      	movs	r4, #0
   1d472:	e00c      	b.n	1d48e <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1d474:	2301      	movs	r3, #1
   1d476:	2241      	movs	r2, #65	; 0x41
   1d478:	5d39      	ldrb	r1, [r7, r4]
   1d47a:	f7ff ffd0 	bl	1d41e <net_byte_to_hex>
   1d47e:	4602      	mov	r2, r0
		*ptr++ = ':';
   1d480:	3001      	adds	r0, #1
   1d482:	233a      	movs	r3, #58	; 0x3a
   1d484:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1d486:	3d03      	subs	r5, #3
   1d488:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d48a:	3401      	adds	r4, #1
   1d48c:	b2e4      	uxtb	r4, r4
   1d48e:	42b4      	cmp	r4, r6
   1d490:	d201      	bcs.n	1d496 <net_sprint_ll_addr_buf+0x3e>
   1d492:	2d00      	cmp	r5, #0
   1d494:	d1ee      	bne.n	1d474 <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1d496:	4540      	cmp	r0, r8
   1d498:	d005      	beq.n	1d4a6 <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1d49a:	2300      	movs	r3, #0
   1d49c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1d4a0:	4640      	mov	r0, r8
   1d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1d4a6:	2000      	movs	r0, #0
}
   1d4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d4ac <net_addr_ntop>:
{
   1d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4b0:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1d4b2:	2300      	movs	r3, #0
   1d4b4:	9304      	str	r3, [sp, #16]
   1d4b6:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1d4b8:	280a      	cmp	r0, #10
   1d4ba:	d011      	beq.n	1d4e0 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1d4bc:	2802      	cmp	r0, #2
   1d4be:	f040 80c8 	bne.w	1d652 <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1d4c2:	9101      	str	r1, [sp, #4]
		len = 4;
   1d4c4:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1d4c8:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1d4cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1d4d0:	f04f 0a01 	mov.w	sl, #1
   1d4d4:	9202      	str	r2, [sp, #8]
   1d4d6:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1d4d8:	4616      	mov	r6, r2
	bool needcolon = false;
   1d4da:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1d4dc:	462c      	mov	r4, r5
   1d4de:	e072      	b.n	1d5c6 <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1d4e0:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1d4e2:	461d      	mov	r5, r3
   1d4e4:	e001      	b.n	1d4ea <net_addr_ntop+0x3e>
   1d4e6:	3501      	adds	r5, #1
   1d4e8:	b2ed      	uxtb	r5, r5
   1d4ea:	2d07      	cmp	r5, #7
   1d4ec:	d810      	bhi.n	1d510 <net_addr_ntop+0x64>
   1d4ee:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1d4f0:	2b07      	cmp	r3, #7
   1d4f2:	d8f8      	bhi.n	1d4e6 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1d4f4:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1d4f8:	2900      	cmp	r1, #0
   1d4fa:	d1f4      	bne.n	1d4e6 <net_addr_ntop+0x3a>
				zeros[i]++;
   1d4fc:	a906      	add	r1, sp, #24
   1d4fe:	194c      	adds	r4, r1, r5
   1d500:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1d504:	3101      	adds	r1, #1
   1d506:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1d50a:	3301      	adds	r3, #1
   1d50c:	b2db      	uxtb	r3, r3
   1d50e:	e7ef      	b.n	1d4f0 <net_addr_ntop+0x44>
   1d510:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d514:	f04f 0a01 	mov.w	sl, #1
   1d518:	2300      	movs	r3, #0
   1d51a:	e001      	b.n	1d520 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1d51c:	3301      	adds	r3, #1
   1d51e:	b2db      	uxtb	r3, r3
   1d520:	2b07      	cmp	r3, #7
   1d522:	d809      	bhi.n	1d538 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1d524:	a906      	add	r1, sp, #24
   1d526:	4419      	add	r1, r3
   1d528:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1d52c:	458a      	cmp	sl, r1
   1d52e:	d2f5      	bcs.n	1d51c <net_addr_ntop+0x70>
				pos = i;
   1d530:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1d534:	468a      	mov	sl, r1
   1d536:	e7f1      	b.n	1d51c <net_addr_ntop+0x70>
		if (longest == 1) {
   1d538:	f1ba 0f01 	cmp.w	sl, #1
   1d53c:	d004      	beq.n	1d548 <net_addr_ntop+0x9c>
		len = 8;
   1d53e:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d542:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1d546:	e7c5      	b.n	1d4d4 <net_addr_ntop+0x28>
		len = 8;
   1d548:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d54c:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1d550:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d554:	e7be      	b.n	1d4d4 <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1d556:	9a01      	ldr	r2, [sp, #4]
   1d558:	5cd1      	ldrb	r1, [r2, r3]
   1d55a:	b28b      	uxth	r3, r1
			if (value == 0) {
   1d55c:	b93b      	cbnz	r3, 1d56e <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1d55e:	4633      	mov	r3, r6
   1d560:	2230      	movs	r2, #48	; 0x30
   1d562:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1d566:	f886 b001 	strb.w	fp, [r6, #1]
   1d56a:	461e      	mov	r6, r3
				continue;
   1d56c:	e029      	b.n	1d5c2 <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1d56e:	2200      	movs	r2, #0
   1d570:	4630      	mov	r0, r6
   1d572:	f7ff feef 	bl	1d354 <net_value_to_udec>
			ptr += l;
   1d576:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1d57a:	1c46      	adds	r6, r0, #1
   1d57c:	f880 b000 	strb.w	fp, [r0]
			continue;
   1d580:	e01f      	b.n	1d5c2 <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1d582:	b905      	cbnz	r5, 1d586 <net_addr_ntop+0xda>
   1d584:	b95c      	cbnz	r4, 1d59e <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1d586:	1c73      	adds	r3, r6, #1
   1d588:	223a      	movs	r2, #58	; 0x3a
   1d58a:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1d58c:	1c5e      	adds	r6, r3, #1
   1d58e:	223a      	movs	r2, #58	; 0x3a
   1d590:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1d592:	4454      	add	r4, sl
   1d594:	b2e4      	uxtb	r4, r4
   1d596:	3c01      	subs	r4, #1
   1d598:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1d59a:	2500      	movs	r5, #0
			continue;
   1d59c:	e011      	b.n	1d5c2 <net_addr_ntop+0x116>
   1d59e:	4633      	mov	r3, r6
   1d5a0:	e7f4      	b.n	1d58c <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1d5a2:	2300      	movs	r3, #0
   1d5a4:	2261      	movs	r2, #97	; 0x61
   1d5a6:	4630      	mov	r0, r6
   1d5a8:	f7ff ff39 	bl	1d41e <net_byte_to_hex>
   1d5ac:	e002      	b.n	1d5b4 <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1d5ae:	1c70      	adds	r0, r6, #1
   1d5b0:	3157      	adds	r1, #87	; 0x57
   1d5b2:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1d5b4:	2301      	movs	r3, #1
   1d5b6:	2261      	movs	r2, #97	; 0x61
   1d5b8:	4629      	mov	r1, r5
   1d5ba:	f7ff ff30 	bl	1d41e <net_byte_to_hex>
   1d5be:	4606      	mov	r6, r0
		needcolon = true;
   1d5c0:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1d5c2:	3401      	adds	r4, #1
   1d5c4:	b2e4      	uxtb	r4, r4
   1d5c6:	4623      	mov	r3, r4
   1d5c8:	45a0      	cmp	r8, r4
   1d5ca:	dd31      	ble.n	1d630 <net_addr_ntop+0x184>
		if (len == 4) {
   1d5cc:	f1b8 0f04 	cmp.w	r8, #4
   1d5d0:	d0c1      	beq.n	1d556 <net_addr_ntop+0xaa>
		if (i == pos) {
   1d5d2:	454b      	cmp	r3, r9
   1d5d4:	d0d5      	beq.n	1d582 <net_addr_ntop+0xd6>
		if (needcolon) {
   1d5d6:	b115      	cbz	r5, 1d5de <net_addr_ntop+0x132>
			*ptr++ = ':';
   1d5d8:	233a      	movs	r3, #58	; 0x3a
   1d5da:	7033      	strb	r3, [r6, #0]
   1d5dc:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1d5de:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1d5e2:	021d      	lsls	r5, r3, #8
   1d5e4:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1d5e8:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1d5ea:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1d5ee:	b2ed      	uxtb	r5, r5
		if (bh) {
   1d5f0:	b139      	cbz	r1, 1d602 <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1d5f2:	290f      	cmp	r1, #15
   1d5f4:	d8d5      	bhi.n	1d5a2 <net_addr_ntop+0xf6>
				if (bh < 10) {
   1d5f6:	2909      	cmp	r1, #9
   1d5f8:	d8d9      	bhi.n	1d5ae <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1d5fa:	1c70      	adds	r0, r6, #1
   1d5fc:	3130      	adds	r1, #48	; 0x30
   1d5fe:	7031      	strb	r1, [r6, #0]
   1d600:	e7d8      	b.n	1d5b4 <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1d602:	2d0f      	cmp	r5, #15
   1d604:	d806      	bhi.n	1d614 <net_addr_ntop+0x168>
			if (bl < 10) {
   1d606:	2d09      	cmp	r5, #9
   1d608:	d80d      	bhi.n	1d626 <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1d60a:	3530      	adds	r5, #48	; 0x30
   1d60c:	7035      	strb	r5, [r6, #0]
   1d60e:	3601      	adds	r6, #1
		needcolon = true;
   1d610:	2501      	movs	r5, #1
   1d612:	e7d6      	b.n	1d5c2 <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1d614:	2300      	movs	r3, #0
   1d616:	2261      	movs	r2, #97	; 0x61
   1d618:	4629      	mov	r1, r5
   1d61a:	4630      	mov	r0, r6
   1d61c:	f7ff feff 	bl	1d41e <net_byte_to_hex>
   1d620:	4606      	mov	r6, r0
		needcolon = true;
   1d622:	2501      	movs	r5, #1
   1d624:	e7cd      	b.n	1d5c2 <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1d626:	3557      	adds	r5, #87	; 0x57
   1d628:	7035      	strb	r5, [r6, #0]
   1d62a:	3601      	adds	r6, #1
		needcolon = true;
   1d62c:	2501      	movs	r5, #1
   1d62e:	e7c8      	b.n	1d5c2 <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1d630:	9b02      	ldr	r3, [sp, #8]
   1d632:	429e      	cmp	r6, r3
   1d634:	d00f      	beq.n	1d656 <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1d636:	9b03      	ldr	r3, [sp, #12]
   1d638:	2b02      	cmp	r3, #2
   1d63a:	d005      	beq.n	1d648 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1d63c:	2300      	movs	r3, #0
   1d63e:	7033      	strb	r3, [r6, #0]
	return dst;
   1d640:	9802      	ldr	r0, [sp, #8]
}
   1d642:	b007      	add	sp, #28
   1d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1d648:	2300      	movs	r3, #0
   1d64a:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1d64e:	9802      	ldr	r0, [sp, #8]
   1d650:	e7f7      	b.n	1d642 <net_addr_ntop+0x196>
		return NULL;
   1d652:	2000      	movs	r0, #0
   1d654:	e7f5      	b.n	1d642 <net_addr_ntop+0x196>
		return NULL;
   1d656:	2000      	movs	r0, #0
   1d658:	e7f3      	b.n	1d642 <net_addr_ntop+0x196>

0001d65a <net_addr_pton>:
{
   1d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d65e:	b082      	sub	sp, #8
   1d660:	460d      	mov	r5, r1
   1d662:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d664:	2802      	cmp	r0, #2
   1d666:	d010      	beq.n	1d68a <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1d668:	280a      	cmp	r0, #10
   1d66a:	f040 80c6 	bne.w	1d7fa <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d66e:	212e      	movs	r1, #46	; 0x2e
   1d670:	4628      	mov	r0, r5
   1d672:	f00d fadd 	bl	2ac30 <strchr>
   1d676:	b378      	cbz	r0, 1d6d8 <net_addr_pton+0x7e>
   1d678:	2706      	movs	r7, #6
		if (*src == ':') {
   1d67a:	782b      	ldrb	r3, [r5, #0]
   1d67c:	2b3a      	cmp	r3, #58	; 0x3a
   1d67e:	d02d      	beq.n	1d6dc <net_addr_pton+0x82>
		len = strlen(src);
   1d680:	4628      	mov	r0, r5
   1d682:	f7e3 f83d 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d686:	2300      	movs	r3, #0
   1d688:	e02b      	b.n	1d6e2 <net_addr_pton+0x88>
		len = strlen(src);
   1d68a:	4608      	mov	r0, r1
   1d68c:	f7e3 f838 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d690:	2300      	movs	r3, #0
   1d692:	e000      	b.n	1d696 <net_addr_pton+0x3c>
   1d694:	3301      	adds	r3, #1
   1d696:	4283      	cmp	r3, r0
   1d698:	d20a      	bcs.n	1d6b0 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d69a:	5ce9      	ldrb	r1, [r5, r3]
   1d69c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d6a0:	b2d2      	uxtb	r2, r2
   1d6a2:	2a09      	cmp	r2, #9
   1d6a4:	d9f6      	bls.n	1d694 <net_addr_pton+0x3a>
   1d6a6:	292e      	cmp	r1, #46	; 0x2e
   1d6a8:	d0f4      	beq.n	1d694 <net_addr_pton+0x3a>
				return -EINVAL;
   1d6aa:	f06f 0015 	mvn.w	r0, #21
   1d6ae:	e0a9      	b.n	1d804 <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1d6b0:	2204      	movs	r2, #4
   1d6b2:	2100      	movs	r1, #0
   1d6b4:	4630      	mov	r0, r6
   1d6b6:	f00d fa01 	bl	2aabc <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d6ba:	2400      	movs	r4, #0
   1d6bc:	e008      	b.n	1d6d0 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d6be:	220a      	movs	r2, #10
   1d6c0:	a901      	add	r1, sp, #4
   1d6c2:	4628      	mov	r0, r5
   1d6c4:	f00d ff14 	bl	2b4f0 <strtol>
   1d6c8:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d6ca:	3401      	adds	r4, #1
			src = ++endptr;
   1d6cc:	9d01      	ldr	r5, [sp, #4]
   1d6ce:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d6d0:	2c03      	cmp	r4, #3
   1d6d2:	d9f4      	bls.n	1d6be <net_addr_pton+0x64>
	return 0;
   1d6d4:	2000      	movs	r0, #0
   1d6d6:	e095      	b.n	1d804 <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d6d8:	2708      	movs	r7, #8
   1d6da:	e7ce      	b.n	1d67a <net_addr_pton+0x20>
			src++;
   1d6dc:	3501      	adds	r5, #1
   1d6de:	e7cf      	b.n	1d680 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1d6e0:	3301      	adds	r3, #1
   1d6e2:	4283      	cmp	r3, r0
   1d6e4:	da16      	bge.n	1d714 <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d6e6:	5ce9      	ldrb	r1, [r5, r3]
   1d6e8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d6ec:	b2d2      	uxtb	r2, r2
   1d6ee:	2a09      	cmp	r2, #9
   1d6f0:	d9f6      	bls.n	1d6e0 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d6f2:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1d6f6:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d6f8:	2a05      	cmp	r2, #5
   1d6fa:	d9f1      	bls.n	1d6e0 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d6fc:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1d700:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d702:	2a05      	cmp	r2, #5
   1d704:	d9ec      	bls.n	1d6e0 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d706:	292e      	cmp	r1, #46	; 0x2e
   1d708:	d0ea      	beq.n	1d6e0 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1d70a:	293a      	cmp	r1, #58	; 0x3a
   1d70c:	d0e8      	beq.n	1d6e0 <net_addr_pton+0x86>
				return -EINVAL;
   1d70e:	f06f 0015 	mvn.w	r0, #21
   1d712:	e077      	b.n	1d804 <net_addr_pton+0x1aa>
   1d714:	2400      	movs	r4, #0
   1d716:	e001      	b.n	1d71c <net_addr_pton+0xc2>
				src++;
   1d718:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1d71a:	3401      	adds	r4, #1
   1d71c:	42bc      	cmp	r4, r7
   1d71e:	da3c      	bge.n	1d79a <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1d720:	2d00      	cmp	r5, #0
   1d722:	d06d      	beq.n	1d800 <net_addr_pton+0x1a6>
   1d724:	782b      	ldrb	r3, [r5, #0]
   1d726:	2b00      	cmp	r3, #0
   1d728:	d06f      	beq.n	1d80a <net_addr_pton+0x1b0>
			if (*src != ':') {
   1d72a:	2b3a      	cmp	r3, #58	; 0x3a
   1d72c:	d023      	beq.n	1d776 <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d72e:	2210      	movs	r2, #16
   1d730:	2100      	movs	r1, #0
   1d732:	4628      	mov	r0, r5
   1d734:	f00d fedc 	bl	2b4f0 <strtol>
   1d738:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1d73c:	2210      	movs	r2, #16
   1d73e:	2100      	movs	r1, #0
   1d740:	4628      	mov	r0, r5
   1d742:	f00d fed5 	bl	2b4f0 <strtol>
   1d746:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1d74a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1d74e:	213a      	movs	r1, #58	; 0x3a
   1d750:	4628      	mov	r0, r5
   1d752:	f00d fa6d 	bl	2ac30 <strchr>
				if (!src && i < expected_groups - 1) {
   1d756:	4605      	mov	r5, r0
   1d758:	2800      	cmp	r0, #0
   1d75a:	d1dd      	bne.n	1d718 <net_addr_pton+0xbe>
   1d75c:	1e7b      	subs	r3, r7, #1
   1d75e:	429c      	cmp	r4, r3
   1d760:	dada      	bge.n	1d718 <net_addr_pton+0xbe>
					return -EINVAL;
   1d762:	f06f 0015 	mvn.w	r0, #21
   1d766:	e04d      	b.n	1d804 <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d768:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1d76c:	2300      	movs	r3, #0
   1d76e:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1d772:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1d774:	3401      	adds	r4, #1
   1d776:	42bc      	cmp	r4, r7
   1d778:	dbf6      	blt.n	1d768 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1d77a:	213a      	movs	r1, #58	; 0x3a
   1d77c:	4628      	mov	r0, r5
   1d77e:	f00d fbad 	bl	2aedc <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d782:	4285      	cmp	r5, r0
   1d784:	d003      	beq.n	1d78e <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1d786:	2f06      	cmp	r7, #6
   1d788:	d00b      	beq.n	1d7a2 <net_addr_pton+0x148>
			i = expected_groups - 1;
   1d78a:	1e7c      	subs	r4, r7, #1
   1d78c:	e00f      	b.n	1d7ae <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d78e:	2f06      	cmp	r7, #6
   1d790:	d002      	beq.n	1d798 <net_addr_pton+0x13e>
   1d792:	786b      	ldrb	r3, [r5, #1]
   1d794:	2b00      	cmp	r3, #0
   1d796:	d1f6      	bne.n	1d786 <net_addr_pton+0x12c>
				src++;
   1d798:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1d79a:	2f06      	cmp	r7, #6
   1d79c:	d029      	beq.n	1d7f2 <net_addr_pton+0x198>
	return 0;
   1d79e:	2000      	movs	r0, #0
   1d7a0:	e030      	b.n	1d804 <net_addr_pton+0x1aa>
				tmp--;
   1d7a2:	3801      	subs	r0, #1
   1d7a4:	e7f1      	b.n	1d78a <net_addr_pton+0x130>
			} while (tmp-- != src);
   1d7a6:	1e43      	subs	r3, r0, #1
   1d7a8:	4285      	cmp	r5, r0
   1d7aa:	d005      	beq.n	1d7b8 <net_addr_pton+0x15e>
   1d7ac:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1d7ae:	7803      	ldrb	r3, [r0, #0]
   1d7b0:	2b3a      	cmp	r3, #58	; 0x3a
   1d7b2:	d1f8      	bne.n	1d7a6 <net_addr_pton+0x14c>
					i--;
   1d7b4:	3c01      	subs	r4, #1
   1d7b6:	e7f6      	b.n	1d7a6 <net_addr_pton+0x14c>
			src++;
   1d7b8:	3501      	adds	r5, #1
   1d7ba:	e7ae      	b.n	1d71a <net_addr_pton+0xc0>
				src++;
   1d7bc:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1d7be:	3401      	adds	r4, #1
   1d7c0:	2c03      	cmp	r4, #3
   1d7c2:	dc18      	bgt.n	1d7f6 <net_addr_pton+0x19c>
				if (!src || !*src) {
   1d7c4:	b325      	cbz	r5, 1d810 <net_addr_pton+0x1b6>
   1d7c6:	782b      	ldrb	r3, [r5, #0]
   1d7c8:	b32b      	cbz	r3, 1d816 <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d7ca:	f104 070c 	add.w	r7, r4, #12
   1d7ce:	220a      	movs	r2, #10
   1d7d0:	2100      	movs	r1, #0
   1d7d2:	4628      	mov	r0, r5
   1d7d4:	f00d fe8c 	bl	2b4f0 <strtol>
   1d7d8:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1d7da:	212e      	movs	r1, #46	; 0x2e
   1d7dc:	4628      	mov	r0, r5
   1d7de:	f00d fa27 	bl	2ac30 <strchr>
				if (!src && i < 3) {
   1d7e2:	4605      	mov	r5, r0
   1d7e4:	2800      	cmp	r0, #0
   1d7e6:	d1e9      	bne.n	1d7bc <net_addr_pton+0x162>
   1d7e8:	2c02      	cmp	r4, #2
   1d7ea:	dce7      	bgt.n	1d7bc <net_addr_pton+0x162>
					return -EINVAL;
   1d7ec:	f06f 0015 	mvn.w	r0, #21
   1d7f0:	e008      	b.n	1d804 <net_addr_pton+0x1aa>
   1d7f2:	2400      	movs	r4, #0
   1d7f4:	e7e4      	b.n	1d7c0 <net_addr_pton+0x166>
	return 0;
   1d7f6:	2000      	movs	r0, #0
   1d7f8:	e004      	b.n	1d804 <net_addr_pton+0x1aa>
		return -EINVAL;
   1d7fa:	f06f 0015 	mvn.w	r0, #21
   1d7fe:	e001      	b.n	1d804 <net_addr_pton+0x1aa>
				return -EINVAL;
   1d800:	f06f 0015 	mvn.w	r0, #21
}
   1d804:	b002      	add	sp, #8
   1d806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1d80a:	f06f 0015 	mvn.w	r0, #21
   1d80e:	e7f9      	b.n	1d804 <net_addr_pton+0x1aa>
					return -EINVAL;
   1d810:	f06f 0015 	mvn.w	r0, #21
   1d814:	e7f6      	b.n	1d804 <net_addr_pton+0x1aa>
   1d816:	f06f 0015 	mvn.w	r0, #21
   1d81a:	e7f3      	b.n	1d804 <net_addr_pton+0x1aa>

0001d81c <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1d81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d820:	b08f      	sub	sp, #60	; 0x3c
   1d822:	4605      	mov	r5, r0
   1d824:	4688      	mov	r8, r1
   1d826:	4617      	mov	r7, r2
   1d828:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1d82a:	460c      	mov	r4, r1
   1d82c:	292e      	cmp	r1, #46	; 0x2e
   1d82e:	bf28      	it	cs
   1d830:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1d832:	2300      	movs	r3, #0
   1d834:	42a3      	cmp	r3, r4
   1d836:	da04      	bge.n	1d842 <parse_ipv6+0x26>
		if (!str[i]) {
   1d838:	5cea      	ldrb	r2, [r5, r3]
   1d83a:	b10a      	cbz	r2, 1d840 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1d83c:	3301      	adds	r3, #1
   1d83e:	e7f9      	b.n	1d834 <parse_ipv6+0x18>
			len = i;
   1d840:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1d842:	b18e      	cbz	r6, 1d868 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1d844:	4622      	mov	r2, r4
   1d846:	215d      	movs	r1, #93	; 0x5d
   1d848:	4628      	mov	r0, r5
   1d84a:	f7e2 fce9 	bl	220 <memchr>
		if (!ptr) {
   1d84e:	4681      	mov	r9, r0
   1d850:	2800      	cmp	r0, #0
   1d852:	d043      	beq.n	1d8dc <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1d854:	1c69      	adds	r1, r5, #1
   1d856:	1a43      	subs	r3, r0, r1
   1d858:	429c      	cmp	r4, r3
   1d85a:	bfa8      	it	ge
   1d85c:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1d85e:	4622      	mov	r2, r4
   1d860:	a802      	add	r0, sp, #8
   1d862:	f7e2 fd2d 	bl	2c0 <memcpy>
   1d866:	e006      	b.n	1d876 <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1d868:	4622      	mov	r2, r4
   1d86a:	4629      	mov	r1, r5
   1d86c:	a802      	add	r0, sp, #8
   1d86e:	f7e2 fd27 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1d872:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1d876:	2200      	movs	r2, #0
   1d878:	ab0e      	add	r3, sp, #56	; 0x38
   1d87a:	4423      	add	r3, r4
   1d87c:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1d880:	1d3a      	adds	r2, r7, #4
   1d882:	a902      	add	r1, sp, #8
   1d884:	200a      	movs	r0, #10
   1d886:	f7ff fee8 	bl	1d65a <net_addr_pton>
	if (ret < 0) {
   1d88a:	2800      	cmp	r0, #0
   1d88c:	db28      	blt.n	1d8e0 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1d88e:	230a      	movs	r3, #10
   1d890:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1d892:	b33e      	cbz	r6, 1d8e4 <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1d894:	f109 0301 	add.w	r3, r9, #1
   1d898:	4445      	add	r5, r8
   1d89a:	42ab      	cmp	r3, r5
   1d89c:	d223      	bcs.n	1d8e6 <parse_ipv6+0xca>
   1d89e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1d8a2:	2b3a      	cmp	r3, #58	; 0x3a
   1d8a4:	d11f      	bne.n	1d8e6 <parse_ipv6+0xca>
		len = str_len - end;
   1d8a6:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1d8aa:	4622      	mov	r2, r4
   1d8ac:	f109 0102 	add.w	r1, r9, #2
   1d8b0:	a802      	add	r0, sp, #8
   1d8b2:	f7e2 fd05 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1d8b6:	ab0e      	add	r3, sp, #56	; 0x38
   1d8b8:	441c      	add	r4, r3
   1d8ba:	2300      	movs	r3, #0
   1d8bc:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1d8c0:	f10d 0106 	add.w	r1, sp, #6
   1d8c4:	a802      	add	r0, sp, #8
   1d8c6:	f7ff fd8a 	bl	1d3de <convert_port>
		if (!ret) {
   1d8ca:	4606      	mov	r6, r0
   1d8cc:	b158      	cbz	r0, 1d8e6 <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1d8ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d8d2:	0a13      	lsrs	r3, r2, #8
   1d8d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d8d8:	807b      	strh	r3, [r7, #2]
   1d8da:	e004      	b.n	1d8e6 <parse_ipv6+0xca>
			return false;
   1d8dc:	2600      	movs	r6, #0
   1d8de:	e002      	b.n	1d8e6 <parse_ipv6+0xca>
		return false;
   1d8e0:	2600      	movs	r6, #0
   1d8e2:	e000      	b.n	1d8e6 <parse_ipv6+0xca>
		return true;
   1d8e4:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1d8e6:	4630      	mov	r0, r6
   1d8e8:	b00f      	add	sp, #60	; 0x3c
   1d8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d8ee <net_calc_chksum>:
	return pkt->family;
   1d8ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1d8f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1d8f6:	2b0a      	cmp	r3, #10
   1d8f8:	d001      	beq.n	1d8fe <net_calc_chksum+0x10>
		return 0;
   1d8fa:	2000      	movs	r0, #0
   1d8fc:	4770      	bx	lr
{
   1d8fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d900:	b085      	sub	sp, #20
   1d902:	4604      	mov	r4, r0
	return pkt->frags->data;
   1d904:	6885      	ldr	r5, [r0, #8]
   1d906:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d908:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d90a:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d90c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1d910:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d912:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d916:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1d918:	fa11 f383 	uxtah	r3, r1, r3
   1d91c:	2220      	movs	r2, #32
   1d91e:	f100 0108 	add.w	r1, r0, #8
   1d922:	b298      	uxth	r0, r3
   1d924:	f7ff fd3c 	bl	1d3a0 <calc_chksum>
   1d928:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1d92a:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1d92e:	2300      	movs	r3, #0
   1d930:	9300      	str	r3, [sp, #0]
   1d932:	f10d 020e 	add.w	r2, sp, #14
   1d936:	4439      	add	r1, r7
   1d938:	4628      	mov	r0, r5
   1d93a:	f7ff faec 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1d93e:	4605      	mov	r5, r0
   1d940:	b318      	cbz	r0, 1d98a <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1d942:	6881      	ldr	r1, [r0, #8]
   1d944:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d948:	4419      	add	r1, r3
	len = frag->len - offset;
   1d94a:	8984      	ldrh	r4, [r0, #12]
   1d94c:	1ae4      	subs	r4, r4, r3
   1d94e:	b224      	sxth	r4, r4
   1d950:	e003      	b.n	1d95a <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1d952:	89ac      	ldrh	r4, [r5, #12]
   1d954:	3c01      	subs	r4, #1
   1d956:	b224      	sxth	r4, r4
			ptr++;
   1d958:	3101      	adds	r1, #1
	while (frag) {
   1d95a:	b1bd      	cbz	r5, 1d98c <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1d95c:	b2a4      	uxth	r4, r4
   1d95e:	4622      	mov	r2, r4
   1d960:	4630      	mov	r0, r6
   1d962:	f7ff fd1d 	bl	1d3a0 <calc_chksum>
   1d966:	4606      	mov	r6, r0
		frag = frag->frags;
   1d968:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1d96a:	b17d      	cbz	r5, 1d98c <net_calc_chksum+0x9e>
		ptr = frag->data;
   1d96c:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1d96e:	f014 0f01 	tst.w	r4, #1
   1d972:	d007      	beq.n	1d984 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1d974:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1d976:	441e      	add	r6, r3
   1d978:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1d97a:	42b3      	cmp	r3, r6
   1d97c:	d9e9      	bls.n	1d952 <net_calc_chksum+0x64>
				sum++;
   1d97e:	3601      	adds	r6, #1
   1d980:	b2b6      	uxth	r6, r6
   1d982:	e7e6      	b.n	1d952 <net_calc_chksum+0x64>
			len = frag->len;
   1d984:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1d988:	e7e7      	b.n	1d95a <net_calc_chksum+0x6c>
		return 0;
   1d98a:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d98c:	b91e      	cbnz	r6, 1d996 <net_calc_chksum+0xa8>
   1d98e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1d992:	b005      	add	sp, #20
   1d994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d996:	0a30      	lsrs	r0, r6, #8
   1d998:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1d99c:	b280      	uxth	r0, r0
   1d99e:	e7f8      	b.n	1d992 <net_calc_chksum+0xa4>

0001d9a0 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1d9a0:	460b      	mov	r3, r1
   1d9a2:	b151      	cbz	r1, 1d9ba <net_header_fits+0x1a>
   1d9a4:	6880      	ldr	r0, [r0, #8]
   1d9a6:	6881      	ldr	r1, [r0, #8]
   1d9a8:	428b      	cmp	r3, r1
   1d9aa:	d908      	bls.n	1d9be <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1d9ac:	4413      	add	r3, r2
   1d9ae:	8982      	ldrh	r2, [r0, #12]
   1d9b0:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1d9b2:	428b      	cmp	r3, r1
   1d9b4:	d905      	bls.n	1d9c2 <net_header_fits+0x22>
	return false;
   1d9b6:	2000      	movs	r0, #0
   1d9b8:	4770      	bx	lr
   1d9ba:	2000      	movs	r0, #0
   1d9bc:	4770      	bx	lr
   1d9be:	2000      	movs	r0, #0
   1d9c0:	4770      	bx	lr
		return true;
   1d9c2:	2001      	movs	r0, #1
}
   1d9c4:	4770      	bx	lr

0001d9c6 <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1d9c6:	b1d8      	cbz	r0, 1da00 <net_ipaddr_parse+0x3a>
{
   1d9c8:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1d9ca:	b1d9      	cbz	r1, 1da04 <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1d9cc:	7804      	ldrb	r4, [r0, #0]
   1d9ce:	b1dc      	cbz	r4, 1da08 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1d9d0:	2c5b      	cmp	r4, #91	; 0x5b
   1d9d2:	d002      	beq.n	1d9da <net_ipaddr_parse+0x14>
   1d9d4:	2500      	movs	r5, #0
   1d9d6:	462b      	mov	r3, r5
   1d9d8:	e004      	b.n	1d9e4 <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1d9da:	2301      	movs	r3, #1
   1d9dc:	f7ff ff1e 	bl	1d81c <parse_ipv6>
   1d9e0:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1d9e2:	3301      	adds	r3, #1
   1d9e4:	5cc4      	ldrb	r4, [r0, r3]
   1d9e6:	b12c      	cbz	r4, 1d9f4 <net_ipaddr_parse+0x2e>
   1d9e8:	4299      	cmp	r1, r3
   1d9ea:	d903      	bls.n	1d9f4 <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1d9ec:	2c3a      	cmp	r4, #58	; 0x3a
   1d9ee:	d1f8      	bne.n	1d9e2 <net_ipaddr_parse+0x1c>
			count++;
   1d9f0:	3501      	adds	r5, #1
   1d9f2:	e7f6      	b.n	1d9e2 <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1d9f4:	2d01      	cmp	r5, #1
   1d9f6:	d009      	beq.n	1da0c <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1d9f8:	2300      	movs	r3, #0
   1d9fa:	f7ff ff0f 	bl	1d81c <parse_ipv6>
   1d9fe:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1da00:	2000      	movs	r0, #0
   1da02:	4770      	bx	lr
   1da04:	2000      	movs	r0, #0
   1da06:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1da08:	2000      	movs	r0, #0
   1da0a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1da0c:	2000      	movs	r0, #0
#endif
}
   1da0e:	bd38      	pop	{r3, r4, r5, pc}

0001da10 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1da10:	2000      	movs	r0, #0
   1da12:	4770      	bx	lr

0001da14 <net_bt_enable>:
	return iface->dev;
   1da14:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1da16:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1da18:	b129      	cbz	r1, 1da26 <net_bt_enable+0x12>
   1da1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1da1e:	2b03      	cmp	r3, #3
   1da20:	d103      	bne.n	1da2a <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1da22:	2000      	movs	r0, #0
   1da24:	4770      	bx	lr
   1da26:	2000      	movs	r0, #0
   1da28:	4770      	bx	lr
		return -ENETDOWN;
   1da2a:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1da2e:	4770      	bx	lr

0001da30 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1da30:	4b04      	ldr	r3, [pc, #16]	; (1da44 <ipsp_accept+0x14>)
   1da32:	685b      	ldr	r3, [r3, #4]
   1da34:	b91b      	cbnz	r3, 1da3e <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1da36:	4b04      	ldr	r3, [pc, #16]	; (1da48 <ipsp_accept+0x18>)
   1da38:	600b      	str	r3, [r1, #0]

	return 0;
   1da3a:	2000      	movs	r0, #0
   1da3c:	4770      	bx	lr
		return -ENOMEM;
   1da3e:	f06f 000b 	mvn.w	r0, #11
}
   1da42:	4770      	bx	lr
   1da44:	2000bcd0 	.word	0x2000bcd0
   1da48:	2000bcd4 	.word	0x2000bcd4

0001da4c <net_bt_send>:
{
   1da4c:	b538      	push	{r3, r4, r5, lr}
   1da4e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1da50:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1da52:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1da56:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1da5a:	2b0a      	cmp	r3, #10
   1da5c:	d001      	beq.n	1da62 <net_bt_send+0x16>
		return NET_DROP;
   1da5e:	2002      	movs	r0, #2
   1da60:	bd38      	pop	{r3, r4, r5, pc}
   1da62:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1da64:	2200      	movs	r2, #0
   1da66:	2101      	movs	r1, #1
   1da68:	4620      	mov	r0, r4
   1da6a:	f003 fe95 	bl	21798 <net_6lo_compress>
   1da6e:	b908      	cbnz	r0, 1da74 <net_bt_send+0x28>
		return NET_DROP;
   1da70:	2002      	movs	r0, #2
}
   1da72:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1da74:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1da76:	4621      	mov	r1, r4
   1da78:	3018      	adds	r0, #24
   1da7a:	f00a fb13 	bl	280a4 <k_queue_append>
	return NET_OK;
   1da7e:	2000      	movs	r0, #0
   1da80:	bd38      	pop	{r3, r4, r5, pc}

0001da82 <net_bt_recv>:
{
   1da82:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1da84:	4608      	mov	r0, r1
   1da86:	f004 fad4 	bl	22032 <net_6lo_uncompress>
   1da8a:	b908      	cbnz	r0, 1da90 <net_bt_recv+0xe>
		return NET_DROP;
   1da8c:	2002      	movs	r0, #2
   1da8e:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1da90:	2001      	movs	r0, #1
}
   1da92:	bd08      	pop	{r3, pc}

0001da94 <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1da94:	b951      	cbnz	r1, 1daac <connected+0x18>
{
   1da96:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1da98:	4b05      	ldr	r3, [pc, #20]	; (1dab0 <connected+0x1c>)
   1da9a:	681b      	ldr	r3, [r3, #0]
   1da9c:	4283      	cmp	r3, r0
   1da9e:	d000      	beq.n	1daa2 <connected+0xe>
   1daa0:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1daa2:	2223      	movs	r2, #35	; 0x23
   1daa4:	4903      	ldr	r1, [pc, #12]	; (1dab4 <connected+0x20>)
   1daa6:	f7ea f907 	bl	7cb8 <bt_l2cap_chan_connect>
   1daaa:	e7f9      	b.n	1daa0 <connected+0xc>
   1daac:	4770      	bx	lr
   1daae:	bf00      	nop
   1dab0:	20001e18 	.word	0x20001e18
   1dab4:	2000bcd4 	.word	0x2000bcd4

0001dab8 <ipsp_recv>:
{
   1dab8:	b570      	push	{r4, r5, r6, lr}
   1daba:	4605      	mov	r5, r0
   1dabc:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1dabe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dac2:	2000      	movs	r0, #0
   1dac4:	f7ff f82e 	bl	1cb24 <net_pkt_get_reserve_rx>
   1dac8:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1daca:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1dace:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1dad0:	2206      	movs	r2, #6
   1dad2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1dad6:	2302      	movs	r3, #2
   1dad8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1dadc:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1dae0:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1dae2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1dae6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1daea:	4630      	mov	r0, r6
   1daec:	f7fc fb42 	bl	1a174 <net_buf_ref>
   1daf0:	4601      	mov	r1, r0
   1daf2:	4620      	mov	r0, r4
   1daf4:	f7ff f8bb 	bl	1cc6e <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1daf8:	4621      	mov	r1, r4
   1dafa:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1dafe:	f7fc fd55 	bl	1a5ac <net_recv_data>
   1db02:	2800      	cmp	r0, #0
   1db04:	db00      	blt.n	1db08 <ipsp_recv+0x50>
   1db06:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1db08:	4620      	mov	r0, r4
   1db0a:	f7ff f886 	bl	1cc1a <net_pkt_unref>
}
   1db0e:	e7fa      	b.n	1db06 <ipsp_recv+0x4e>

0001db10 <ipsp_alloc_buf>:
{
   1db10:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1db12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db16:	2000      	movs	r0, #0
   1db18:	f7ff f818 	bl	1cb4c <net_pkt_get_reserve_rx_data>
}
   1db1c:	bd08      	pop	{r3, pc}
	...

0001db20 <ipsp_disconnected>:
{
   1db20:	b510      	push	{r4, lr}
   1db22:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1db24:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1db28:	f7fd fe92 	bl	1b850 <net_if_down>
	if (chan->conn != default_conn) {
   1db2c:	6823      	ldr	r3, [r4, #0]
   1db2e:	4a05      	ldr	r2, [pc, #20]	; (1db44 <ipsp_disconnected+0x24>)
   1db30:	6810      	ldr	r0, [r2, #0]
   1db32:	4283      	cmp	r3, r0
   1db34:	d000      	beq.n	1db38 <ipsp_disconnected+0x18>
   1db36:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1db38:	f7e8 fe2a 	bl	6790 <bt_conn_unref>
	default_conn = NULL;
   1db3c:	2200      	movs	r2, #0
   1db3e:	4b01      	ldr	r3, [pc, #4]	; (1db44 <ipsp_disconnected+0x24>)
   1db40:	601a      	str	r2, [r3, #0]
   1db42:	e7f8      	b.n	1db36 <ipsp_disconnected+0x16>
   1db44:	20001e18 	.word	0x20001e18

0001db48 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1db48:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1db4a:	4b06      	ldr	r3, [pc, #24]	; (1db64 <disconnected+0x1c>)
   1db4c:	681b      	ldr	r3, [r3, #0]
   1db4e:	4283      	cmp	r3, r0
   1db50:	d000      	beq.n	1db54 <disconnected+0xc>
   1db52:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1db54:	4618      	mov	r0, r3
   1db56:	f7e8 fe1b 	bl	6790 <bt_conn_unref>
	default_conn = NULL;
   1db5a:	2200      	movs	r2, #0
   1db5c:	4b01      	ldr	r3, [pc, #4]	; (1db64 <disconnected+0x1c>)
   1db5e:	601a      	str	r2, [r3, #0]
   1db60:	e7f7      	b.n	1db52 <disconnected+0xa>
   1db62:	bf00      	nop
   1db64:	20001e18 	.word	0x20001e18

0001db68 <ipsp_connected>:
{
   1db68:	b570      	push	{r4, r5, r6, lr}
   1db6a:	b08e      	sub	sp, #56	; 0x38
   1db6c:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1db6e:	a909      	add	r1, sp, #36	; 0x24
   1db70:	6800      	ldr	r0, [r0, #0]
   1db72:	f7e8 ff43 	bl	69fc <bt_conn_get_info>
   1db76:	2800      	cmp	r0, #0
   1db78:	db06      	blt.n	1db88 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1db7a:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1db7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1db80:	3306      	adds	r3, #6
   1db82:	4631      	mov	r1, r6
   1db84:	2206      	movs	r2, #6
   1db86:	e008      	b.n	1db9a <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1db88:	4620      	mov	r0, r4
   1db8a:	f7ea f8b4 	bl	7cf6 <bt_l2cap_chan_disconnect>
   1db8e:	e05a      	b.n	1dc46 <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db90:	7818      	ldrb	r0, [r3, #0]
   1db92:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1db94:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db96:	3b01      	subs	r3, #1
   1db98:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1db9a:	2a00      	cmp	r2, #0
   1db9c:	d1f8      	bne.n	1db90 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1db9e:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1dba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1dba4:	3306      	adds	r3, #6
   1dba6:	4608      	mov	r0, r1
   1dba8:	2206      	movs	r2, #6
   1dbaa:	e004      	b.n	1dbb6 <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1dbac:	781d      	ldrb	r5, [r3, #0]
   1dbae:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1dbb0:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1dbb2:	3b01      	subs	r3, #1
   1dbb4:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1dbb6:	2a00      	cmp	r2, #0
   1dbb8:	d1f8      	bne.n	1dbac <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1dbba:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dbbe:	f3bf 8f5b 	dmb	ish
   1dbc2:	68da      	ldr	r2, [r3, #12]
   1dbc4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1dbc8:	f012 0f01 	tst.w	r2, #1
   1dbcc:	d104      	bne.n	1dbd8 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1dbce:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1dbd0:	2206      	movs	r2, #6
   1dbd2:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1dbd4:	2202      	movs	r2, #2
   1dbd6:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1dbd8:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1dbda:	2306      	movs	r3, #6
   1dbdc:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1dbe0:	2302      	movs	r3, #2
   1dbe2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1dbe6:	23fe      	movs	r3, #254	; 0xfe
   1dbe8:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1dbec:	2380      	movs	r3, #128	; 0x80
   1dbee:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1dbf8:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1dbfa:	2203      	movs	r2, #3
   1dbfc:	a805      	add	r0, sp, #20
   1dbfe:	f7e2 fb5f 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1dc02:	23ff      	movs	r3, #255	; 0xff
   1dc04:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1dc08:	23fe      	movs	r3, #254	; 0xfe
   1dc0a:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1dc0e:	2203      	movs	r2, #3
   1dc10:	9907      	ldr	r1, [sp, #28]
   1dc12:	4411      	add	r1, r2
   1dc14:	f10d 0019 	add.w	r0, sp, #25
   1dc18:	f7e2 fb52 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1dc1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1dc20:	2b02      	cmp	r3, #2
   1dc22:	d012      	beq.n	1dc4a <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1dc24:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1dc28:	2b03      	cmp	r3, #3
   1dc2a:	d015      	beq.n	1dc58 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1dc2c:	2305      	movs	r3, #5
   1dc2e:	9300      	str	r3, [sp, #0]
   1dc30:	2300      	movs	r3, #0
   1dc32:	aa07      	add	r2, sp, #28
   1dc34:	a903      	add	r1, sp, #12
   1dc36:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dc3a:	f002 f903 	bl	1fe44 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1dc3e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dc42:	f7fd fdd1 	bl	1b7e8 <net_if_up>
}
   1dc46:	b00e      	add	sp, #56	; 0x38
   1dc48:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1dc4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dc4e:	f083 0302 	eor.w	r3, r3, #2
   1dc52:	f88d 3014 	strb.w	r3, [sp, #20]
   1dc56:	e7e5      	b.n	1dc24 <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1dc58:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dc5c:	f083 0302 	eor.w	r3, r3, #2
   1dc60:	f88d 3014 	strb.w	r3, [sp, #20]
   1dc64:	e7e2      	b.n	1dc2c <ipsp_connected+0xc4>
	...

0001dc68 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1dc68:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1dc6a:	4804      	ldr	r0, [pc, #16]	; (1dc7c <net_bt_init+0x14>)
   1dc6c:	f7e8 fbb8 	bl	63e0 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1dc70:	4803      	ldr	r0, [pc, #12]	; (1dc80 <net_bt_init+0x18>)
   1dc72:	f7e9 ffc7 	bl	7c04 <bt_l2cap_server_register>

	return 0;
}
   1dc76:	2000      	movs	r0, #0
   1dc78:	bd08      	pop	{r3, pc}
   1dc7a:	bf00      	nop
   1dc7c:	2000bd84 	.word	0x2000bd84
   1dc80:	2000bdb4 	.word	0x2000bdb4

0001dc84 <bt_iface_send>:
{
   1dc84:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1dc86:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc88:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1dc8a:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1dc8c:	2300      	movs	r3, #0
   1dc8e:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1dc90:	4608      	mov	r0, r1
   1dc92:	f7fe ffc2 	bl	1cc1a <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1dc96:	4629      	mov	r1, r5
   1dc98:	1d20      	adds	r0, r4, #4
   1dc9a:	f7ea f9bd 	bl	8018 <bt_l2cap_chan_send>
}
   1dc9e:	bd38      	pop	{r3, r4, r5, pc}

0001dca0 <bt_iface_init>:
   1dca0:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dca2:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1dca4:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1dca6:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dca8:	f3bf 8f5b 	dmb	ish
   1dcac:	e850 3f00 	ldrex	r3, [r0]
   1dcb0:	f043 0302 	orr.w	r3, r3, #2
   1dcb4:	e840 3200 	strex	r2, r3, [r0]
   1dcb8:	2a00      	cmp	r2, #0
   1dcba:	d1f7      	bne.n	1dcac <bt_iface_init+0xc>
   1dcbc:	f3bf 8f5b 	dmb	ish
   1dcc0:	4770      	bx	lr
	...

0001dcc4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1dcc4:	b510      	push	{r4, lr}
   1dcc6:	b086      	sub	sp, #24
   1dcc8:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1dcca:	4913      	ldr	r1, [pc, #76]	; (1dd18 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1dccc:	4610      	mov	r0, r2
   1dcce:	f7e2 fb9b 	bl	408 <strcmp>
   1dcd2:	b140      	cbz	r0, 1dce6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1dcd4:	4911      	ldr	r1, [pc, #68]	; (1dd1c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	f7e2 fb96 	bl	408 <strcmp>
   1dcdc:	b9c0      	cbnz	r0, 1dd10 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1dcde:	f7e8 f87b 	bl	5dd8 <bt_le_adv_stop>
}
   1dce2:	b006      	add	sp, #24
   1dce4:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1dce6:	2300      	movs	r3, #0
   1dce8:	9303      	str	r3, [sp, #12]
   1dcea:	9304      	str	r3, [sp, #16]
   1dcec:	9305      	str	r3, [sp, #20]
   1dcee:	2301      	movs	r3, #1
   1dcf0:	f88d 300c 	strb.w	r3, [sp, #12]
   1dcf4:	22a0      	movs	r2, #160	; 0xa0
   1dcf6:	f8ad 200e 	strh.w	r2, [sp, #14]
   1dcfa:	22f0      	movs	r2, #240	; 0xf0
   1dcfc:	f8ad 2010 	strh.w	r2, [sp, #16]
   1dd00:	9300      	str	r3, [sp, #0]
   1dd02:	4b07      	ldr	r3, [pc, #28]	; (1dd20 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1dd04:	2202      	movs	r2, #2
   1dd06:	4907      	ldr	r1, [pc, #28]	; (1dd24 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1dd08:	a803      	add	r0, sp, #12
   1dd0a:	f7e7 ffbb 	bl	5c84 <bt_le_adv_start>
   1dd0e:	e7e8      	b.n	1dce2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1dd10:	f06f 0015 	mvn.w	r0, #21
   1dd14:	e7e5      	b.n	1dce2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1dd16:	bf00      	nop
   1dd18:	0002fc18 	.word	0x0002fc18
   1dd1c:	0002fc1c 	.word	0x0002fc1c
   1dd20:	0002fc20 	.word	0x0002fc20
   1dd24:	0002fc08 	.word	0x0002fc08

0001dd28 <net_icmpv6_register_handler>:
	node->next = list->head;
   1dd28:	4b04      	ldr	r3, [pc, #16]	; (1dd3c <net_icmpv6_register_handler+0x14>)
   1dd2a:	681a      	ldr	r2, [r3, #0]
   1dd2c:	6002      	str	r2, [r0, #0]
	list->head = node;
   1dd2e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1dd30:	685b      	ldr	r3, [r3, #4]
   1dd32:	b103      	cbz	r3, 1dd36 <net_icmpv6_register_handler+0xe>
   1dd34:	4770      	bx	lr
		list->tail = list->head;
   1dd36:	4b01      	ldr	r3, [pc, #4]	; (1dd3c <net_icmpv6_register_handler+0x14>)
   1dd38:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1dd3a:	e7fb      	b.n	1dd34 <net_icmpv6_register_handler+0xc>
   1dd3c:	20001e1c 	.word	0x20001e1c

0001dd40 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1dd40:	4601      	mov	r1, r0
	return list->head;
   1dd42:	4b10      	ldr	r3, [pc, #64]	; (1dd84 <net_icmpv6_unregister_handler+0x44>)
   1dd44:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1dd46:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dd48:	b1d3      	cbz	r3, 1dd80 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1dd4a:	4299      	cmp	r1, r3
   1dd4c:	d002      	beq.n	1dd54 <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1dd4e:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dd50:	681b      	ldr	r3, [r3, #0]
   1dd52:	e7f9      	b.n	1dd48 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1dd54:	b142      	cbz	r2, 1dd68 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1dd56:	6803      	ldr	r3, [r0, #0]
   1dd58:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1dd5a:	4b0a      	ldr	r3, [pc, #40]	; (1dd84 <net_icmpv6_unregister_handler+0x44>)
   1dd5c:	685b      	ldr	r3, [r3, #4]
   1dd5e:	4298      	cmp	r0, r3
   1dd60:	d00b      	beq.n	1dd7a <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1dd62:	2300      	movs	r3, #0
   1dd64:	6003      	str	r3, [r0, #0]
   1dd66:	4770      	bx	lr
		list->head = node->next;
   1dd68:	6802      	ldr	r2, [r0, #0]
   1dd6a:	4b06      	ldr	r3, [pc, #24]	; (1dd84 <net_icmpv6_unregister_handler+0x44>)
   1dd6c:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1dd6e:	685b      	ldr	r3, [r3, #4]
   1dd70:	4298      	cmp	r0, r3
   1dd72:	d1f6      	bne.n	1dd62 <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1dd74:	4b03      	ldr	r3, [pc, #12]	; (1dd84 <net_icmpv6_unregister_handler+0x44>)
   1dd76:	605a      	str	r2, [r3, #4]
   1dd78:	e7f3      	b.n	1dd62 <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1dd7a:	4b02      	ldr	r3, [pc, #8]	; (1dd84 <net_icmpv6_unregister_handler+0x44>)
   1dd7c:	605a      	str	r2, [r3, #4]
   1dd7e:	e7f0      	b.n	1dd62 <net_icmpv6_unregister_handler+0x22>
   1dd80:	4770      	bx	lr
   1dd82:	bf00      	nop
   1dd84:	20001e1c 	.word	0x20001e1c

0001dd88 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd8c:	b086      	sub	sp, #24
   1dd8e:	4606      	mov	r6, r0
   1dd90:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1dd92:	2300      	movs	r3, #0
   1dd94:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1dd98:	f7ff fa18 	bl	1d1cc <net_pkt_icmp_data>
   1dd9c:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1dd9e:	2204      	movs	r2, #4
   1dda0:	4601      	mov	r1, r0
   1dda2:	4630      	mov	r0, r6
   1dda4:	f7ff fdfc 	bl	1d9a0 <net_header_fits>
   1dda8:	b170      	cbz	r0, 1ddc8 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1ddaa:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1ddac:	b173      	cbz	r3, 1ddcc <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1ddae:	2300      	movs	r3, #0
   1ddb0:	70a3      	strb	r3, [r4, #2]
   1ddb2:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ddb4:	213a      	movs	r1, #58	; 0x3a
   1ddb6:	4630      	mov	r0, r6
   1ddb8:	f7ff fd99 	bl	1d8ee <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1ddbc:	43c0      	mvns	r0, r0
   1ddbe:	8060      	strh	r0, [r4, #2]

		return frag;
   1ddc0:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1ddc2:	b006      	add	sp, #24
   1ddc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ddc8:	2300      	movs	r3, #0
   1ddca:	e7ef      	b.n	1ddac <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ddcc:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ddd0:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ddd4:	441a      	add	r2, r3
   1ddd6:	3202      	adds	r2, #2
   1ddd8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1dddc:	f8cd 8008 	str.w	r8, [sp, #8]
   1dde0:	f10d 0416 	add.w	r4, sp, #22
   1dde4:	9401      	str	r4, [sp, #4]
   1dde6:	2702      	movs	r7, #2
   1dde8:	9700      	str	r7, [sp, #0]
   1ddea:	ab05      	add	r3, sp, #20
   1ddec:	b292      	uxth	r2, r2
   1ddee:	4629      	mov	r1, r5
   1ddf0:	4630      	mov	r0, r6
   1ddf2:	f7ff f902 	bl	1cffa <net_pkt_write>
   1ddf6:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ddf8:	213a      	movs	r1, #58	; 0x3a
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	f7ff fd77 	bl	1d8ee <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1de00:	43c0      	mvns	r0, r0
   1de02:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1de06:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1de0a:	3a02      	subs	r2, #2
   1de0c:	f8cd 8008 	str.w	r8, [sp, #8]
   1de10:	9401      	str	r4, [sp, #4]
   1de12:	9700      	str	r7, [sp, #0]
   1de14:	ab05      	add	r3, sp, #20
   1de16:	b292      	uxth	r2, r2
   1de18:	4629      	mov	r1, r5
   1de1a:	4630      	mov	r0, r6
   1de1c:	f7ff f8ed 	bl	1cffa <net_pkt_write>
	return frag;
   1de20:	e7cf      	b.n	1ddc2 <net_icmpv6_set_chksum+0x3a>

0001de22 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1de22:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de24:	b085      	sub	sp, #20
   1de26:	4605      	mov	r5, r0
   1de28:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1de2a:	f7ff f9cf 	bl	1d1cc <net_pkt_icmp_data>
   1de2e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1de30:	2204      	movs	r2, #4
   1de32:	4601      	mov	r1, r0
   1de34:	4628      	mov	r0, r5
   1de36:	f7ff fdb3 	bl	1d9a0 <net_header_fits>
   1de3a:	b120      	cbz	r0, 1de46 <net_icmpv6_get_hdr+0x24>
		return hdr;
   1de3c:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1de3e:	b126      	cbz	r6, 1de4a <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1de40:	4620      	mov	r0, r4
   1de42:	b005      	add	sp, #20
   1de44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1de46:	2600      	movs	r6, #0
   1de48:	e7f9      	b.n	1de3e <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de4a:	68a8      	ldr	r0, [r5, #8]
   1de4c:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1de50:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1de54:	9700      	str	r7, [sp, #0]
   1de56:	2301      	movs	r3, #1
   1de58:	f10d 020e 	add.w	r2, sp, #14
   1de5c:	4421      	add	r1, r4
   1de5e:	f7ff f85a 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1de62:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1de66:	1c7b      	adds	r3, r7, #1
   1de68:	9300      	str	r3, [sp, #0]
   1de6a:	2301      	movs	r3, #1
   1de6c:	f10d 020e 	add.w	r2, sp, #14
   1de70:	f7ff f851 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1de74:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1de78:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1de7a:	9300      	str	r3, [sp, #0]
   1de7c:	2302      	movs	r3, #2
   1de7e:	f10d 020e 	add.w	r2, sp, #14
   1de82:	f7ff f848 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1de86:	b108      	cbz	r0, 1de8c <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1de88:	463c      	mov	r4, r7
   1de8a:	e7d9      	b.n	1de40 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1de8c:	4634      	mov	r4, r6
   1de8e:	e7d7      	b.n	1de40 <net_icmpv6_get_hdr+0x1e>

0001de90 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de94:	b086      	sub	sp, #24
   1de96:	4606      	mov	r6, r0
   1de98:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1de9a:	2204      	movs	r2, #4
   1de9c:	f7ff fd80 	bl	1d9a0 <net_header_fits>
   1dea0:	b128      	cbz	r0, 1deae <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1dea2:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1dea4:	b12d      	cbz	r5, 1deb2 <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1dea6:	4620      	mov	r0, r4
   1dea8:	b006      	add	sp, #24
   1deaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1deae:	2500      	movs	r5, #0
   1deb0:	e7f8      	b.n	1dea4 <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1deb2:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1deb6:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1deba:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1debe:	9702      	str	r7, [sp, #8]
   1dec0:	9401      	str	r4, [sp, #4]
   1dec2:	f04f 0801 	mov.w	r8, #1
   1dec6:	f8cd 8000 	str.w	r8, [sp]
   1deca:	f10d 0316 	add.w	r3, sp, #22
   1dece:	440a      	add	r2, r1
   1ded0:	68b1      	ldr	r1, [r6, #8]
   1ded2:	4630      	mov	r0, r6
   1ded4:	f7ff f891 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1ded8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dedc:	eb04 0308 	add.w	r3, r4, r8
   1dee0:	9702      	str	r7, [sp, #8]
   1dee2:	9301      	str	r3, [sp, #4]
   1dee4:	f8cd 8000 	str.w	r8, [sp]
   1dee8:	f10d 0316 	add.w	r3, sp, #22
   1deec:	4601      	mov	r1, r0
   1deee:	4630      	mov	r0, r6
   1def0:	f7ff f883 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1def4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1def8:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1defa:	9702      	str	r7, [sp, #8]
   1defc:	9301      	str	r3, [sp, #4]
   1defe:	2302      	movs	r3, #2
   1df00:	9300      	str	r3, [sp, #0]
   1df02:	f10d 0316 	add.w	r3, sp, #22
   1df06:	4601      	mov	r1, r0
   1df08:	4630      	mov	r0, r6
   1df0a:	f7ff f876 	bl	1cffa <net_pkt_write>
	if (!frag) {
   1df0e:	2800      	cmp	r0, #0
   1df10:	d1c9      	bne.n	1dea6 <net_icmpv6_set_hdr+0x16>
		return NULL;
   1df12:	462c      	mov	r4, r5
   1df14:	e7c7      	b.n	1dea6 <net_icmpv6_set_hdr+0x16>
	...

0001df18 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df1c:	b09a      	sub	sp, #104	; 0x68
   1df1e:	4606      	mov	r6, r0
	return pkt->iface;
   1df20:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1df22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1df26:	2000      	movs	r0, #0
   1df28:	f7fe fe06 	bl	1cb38 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1df2c:	2800      	cmp	r0, #0
   1df2e:	f000 80a1 	beq.w	1e074 <handle_echo_request+0x15c>
   1df32:	4604      	mov	r4, r0
	return pkt->frags->data;
   1df34:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1df36:	2100      	movs	r1, #0
   1df38:	e002      	b.n	1df40 <handle_echo_request+0x28>
		bytes += buf->len;
   1df3a:	899a      	ldrh	r2, [r3, #12]
   1df3c:	4411      	add	r1, r2
		buf = buf->frags;
   1df3e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1df40:	2b00      	cmp	r3, #0
   1df42:	d1fa      	bne.n	1df3a <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1df44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1df48:	2200      	movs	r2, #0
   1df4a:	4630      	mov	r0, r6
   1df4c:	f7fe fea6 	bl	1cc9c <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1df50:	4607      	mov	r7, r0
   1df52:	2800      	cmp	r0, #0
   1df54:	f000 808b 	beq.w	1e06e <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1df58:	4601      	mov	r1, r0
   1df5a:	4620      	mov	r0, r4
   1df5c:	f7fe fe87 	bl	1cc6e <net_pkt_frag_add>
	pkt->family = family;
   1df60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1df64:	220a      	movs	r2, #10
   1df66:	f362 03c6 	bfi	r3, r2, #3, #4
   1df6a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1df6e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1df70:	7d6b      	ldrb	r3, [r5, #21]
   1df72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1df76:	7d6b      	ldrb	r3, [r5, #21]
   1df78:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1df7c:	f107 0008 	add.w	r0, r7, #8
   1df80:	f7fc f98d 	bl	1a29e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1df84:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1df88:	2328      	movs	r3, #40	; 0x28
   1df8a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1df8e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1df92:	2b00      	cmp	r3, #0
   1df94:	d076      	beq.n	1e084 <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1df96:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1df9a:	68a3      	ldr	r3, [r4, #8]
   1df9c:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1df9e:	2260      	movs	r2, #96	; 0x60
   1dfa0:	701a      	strb	r2, [r3, #0]
   1dfa2:	68a3      	ldr	r3, [r4, #8]
   1dfa4:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	7053      	strb	r3, [r2, #1]
   1dfaa:	68a2      	ldr	r2, [r4, #8]
   1dfac:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1dfae:	7093      	strb	r3, [r2, #2]
   1dfb0:	70d3      	strb	r3, [r2, #3]
   1dfb2:	68a3      	ldr	r3, [r4, #8]
   1dfb4:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1dfb6:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1dfba:	71da      	strb	r2, [r3, #7]
   1dfbc:	68a3      	ldr	r3, [r4, #8]
   1dfbe:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1dfc2:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1dfc6:	2bff      	cmp	r3, #255	; 0xff
   1dfc8:	d060      	beq.n	1e08c <handle_echo_request+0x174>
   1dfca:	68b3      	ldr	r3, [r6, #8]
   1dfcc:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1dfce:	af0e      	add	r7, sp, #56	; 0x38
   1dfd0:	462b      	mov	r3, r5
   1dfd2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1dfd6:	6859      	ldr	r1, [r3, #4]
   1dfd8:	689a      	ldr	r2, [r3, #8]
   1dfda:	68db      	ldr	r3, [r3, #12]
   1dfdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1dfde:	af01      	add	r7, sp, #4
   1dfe0:	ab0e      	add	r3, sp, #56	; 0x38
   1dfe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1dfe4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1dfe8:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1dfec:	462b      	mov	r3, r5
   1dfee:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1dff2:	6859      	ldr	r1, [r3, #4]
   1dff4:	689a      	ldr	r2, [r3, #8]
   1dff6:	68db      	ldr	r3, [r3, #12]
   1dff8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1dffc:	ad12      	add	r5, sp, #72	; 0x48
   1dffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e000:	f8cc 0008 	str.w	r0, [ip, #8]
   1e004:	f8cc 100c 	str.w	r1, [ip, #12]
   1e008:	f8cc 2010 	str.w	r2, [ip, #16]
   1e00c:	f8cc 3014 	str.w	r3, [ip, #20]
   1e010:	68a3      	ldr	r3, [r4, #8]
   1e012:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e016:	ad16      	add	r5, sp, #88	; 0x58
   1e018:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e01c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1e020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e022:	f8ce 0018 	str.w	r0, [lr, #24]
   1e026:	f8ce 101c 	str.w	r1, [lr, #28]
   1e02a:	f8ce 2020 	str.w	r2, [lr, #32]
   1e02e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e032:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e034:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e036:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1e03a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1e03e:	2500      	movs	r5, #0
   1e040:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1e042:	a905      	add	r1, sp, #20
   1e044:	4620      	mov	r0, r4
   1e046:	f7ff feec 	bl	1de22 <net_icmpv6_get_hdr>
   1e04a:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1e04c:	2381      	movs	r3, #129	; 0x81
   1e04e:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1e050:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1e052:	7085      	strb	r5, [r0, #2]
   1e054:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1e056:	4620      	mov	r0, r4
   1e058:	f7ff ff1a 	bl	1de90 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e05c:	68a1      	ldr	r1, [r4, #8]
   1e05e:	4620      	mov	r0, r4
   1e060:	f7ff fe92 	bl	1dd88 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1e064:	4620      	mov	r0, r4
   1e066:	f7fc f9d7 	bl	1a418 <net_send_data>
   1e06a:	42a8      	cmp	r0, r5
   1e06c:	da3c      	bge.n	1e0e8 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1e06e:	4620      	mov	r0, r4
   1e070:	f7fe fdd3 	bl	1cc1a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e074:	4a21      	ldr	r2, [pc, #132]	; (1e0fc <handle_echo_request+0x1e4>)
   1e076:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e078:	3301      	adds	r3, #1
   1e07a:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1e07c:	2002      	movs	r0, #2
}
   1e07e:	b01a      	add	sp, #104	; 0x68
   1e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1e084:	2300      	movs	r3, #0
   1e086:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1e08a:	e786      	b.n	1df9a <handle_echo_request+0x82>
	return pkt->frags->data;
   1e08c:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e08e:	af06      	add	r7, sp, #24
   1e090:	689b      	ldr	r3, [r3, #8]
   1e092:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e096:	6859      	ldr	r1, [r3, #4]
   1e098:	689a      	ldr	r2, [r3, #8]
   1e09a:	68db      	ldr	r3, [r3, #12]
   1e09c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e09e:	af06      	add	r7, sp, #24
   1e0a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1e0a2:	f8cc 0018 	str.w	r0, [ip, #24]
   1e0a6:	f8cc 101c 	str.w	r1, [ip, #28]
   1e0aa:	f8cc 2020 	str.w	r2, [ip, #32]
   1e0ae:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e0b2:	68a3      	ldr	r3, [r4, #8]
   1e0b4:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e0b8:	68b3      	ldr	r3, [r6, #8]
   1e0ba:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e0bc:	3118      	adds	r1, #24
   1e0be:	4628      	mov	r0, r5
   1e0c0:	f7fd f910 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1e0c4:	4603      	mov	r3, r0
   1e0c6:	ad0a      	add	r5, sp, #40	; 0x28
   1e0c8:	6800      	ldr	r0, [r0, #0]
   1e0ca:	6859      	ldr	r1, [r3, #4]
   1e0cc:	689a      	ldr	r2, [r3, #8]
   1e0ce:	68db      	ldr	r3, [r3, #12]
   1e0d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e0d2:	ad0a      	add	r5, sp, #40	; 0x28
   1e0d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e0d6:	f8c8 0008 	str.w	r0, [r8, #8]
   1e0da:	f8c8 100c 	str.w	r1, [r8, #12]
   1e0de:	f8c8 2010 	str.w	r2, [r8, #16]
   1e0e2:	f8c8 3014 	str.w	r3, [r8, #20]
   1e0e6:	e7a4      	b.n	1e032 <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1e0e8:	4630      	mov	r0, r6
   1e0ea:	f7fe fd96 	bl	1cc1a <net_pkt_unref>
	net_stats.icmp.sent++;
   1e0ee:	4a03      	ldr	r2, [pc, #12]	; (1e0fc <handle_echo_request+0x1e4>)
   1e0f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e0f2:	3301      	adds	r3, #1
   1e0f4:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1e0f6:	4628      	mov	r0, r5
   1e0f8:	e7c1      	b.n	1e07e <handle_echo_request+0x166>
   1e0fa:	bf00      	nop
   1e0fc:	200029f0 	.word	0x200029f0

0001e100 <net_icmpv6_get_ns_hdr>:
{
   1e100:	b570      	push	{r4, r5, r6, lr}
   1e102:	b084      	sub	sp, #16
   1e104:	4605      	mov	r5, r0
   1e106:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e108:	2104      	movs	r1, #4
   1e10a:	f7ff f874 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e10e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e110:	2214      	movs	r2, #20
   1e112:	4601      	mov	r1, r0
   1e114:	4628      	mov	r0, r5
   1e116:	f7ff fc43 	bl	1d9a0 <net_header_fits>
   1e11a:	b110      	cbz	r0, 1e122 <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e11c:	4620      	mov	r0, r4
}
   1e11e:	b004      	add	sp, #16
   1e120:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1e122:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1e124:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e128:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e12c:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1e12e:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1e130:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1e132:	9300      	str	r3, [sp, #0]
   1e134:	2310      	movs	r3, #16
   1e136:	f10d 020e 	add.w	r2, sp, #14
   1e13a:	b289      	uxth	r1, r1
   1e13c:	f7fe feeb 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1e140:	2800      	cmp	r0, #0
   1e142:	d0ec      	beq.n	1e11e <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1e144:	4630      	mov	r0, r6
   1e146:	e7ea      	b.n	1e11e <net_icmpv6_get_ns_hdr+0x1e>

0001e148 <net_icmpv6_set_ns_hdr>:
{
   1e148:	b570      	push	{r4, r5, r6, lr}
   1e14a:	b086      	sub	sp, #24
   1e14c:	4605      	mov	r5, r0
   1e14e:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1e150:	2300      	movs	r3, #0
   1e152:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e154:	2104      	movs	r1, #4
   1e156:	f7ff f84e 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e15a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e15c:	2214      	movs	r2, #20
   1e15e:	4601      	mov	r1, r0
   1e160:	4628      	mov	r0, r5
   1e162:	f7ff fc1d 	bl	1d9a0 <net_header_fits>
   1e166:	b110      	cbz	r0, 1e16e <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e168:	4620      	mov	r0, r4
}
   1e16a:	b006      	add	sp, #24
   1e16c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e16e:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e172:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e176:	441a      	add	r2, r3
   1e178:	3204      	adds	r2, #4
   1e17a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e17e:	9402      	str	r4, [sp, #8]
   1e180:	ab05      	add	r3, sp, #20
   1e182:	9301      	str	r3, [sp, #4]
   1e184:	2304      	movs	r3, #4
   1e186:	9300      	str	r3, [sp, #0]
   1e188:	f10d 0312 	add.w	r3, sp, #18
   1e18c:	b292      	uxth	r2, r2
   1e18e:	68a9      	ldr	r1, [r5, #8]
   1e190:	4628      	mov	r0, r5
   1e192:	f7fe ff32 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e196:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e19a:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e19c:	9402      	str	r4, [sp, #8]
   1e19e:	9301      	str	r3, [sp, #4]
   1e1a0:	2310      	movs	r3, #16
   1e1a2:	9300      	str	r3, [sp, #0]
   1e1a4:	f10d 0312 	add.w	r3, sp, #18
   1e1a8:	4601      	mov	r1, r0
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	f7fe ff25 	bl	1cffa <net_pkt_write>
	if (!frag) {
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d0da      	beq.n	1e16a <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1e1b4:	4630      	mov	r0, r6
   1e1b6:	e7d8      	b.n	1e16a <net_icmpv6_set_ns_hdr+0x22>

0001e1b8 <net_icmpv6_get_nd_opt_hdr>:
{
   1e1b8:	b570      	push	{r4, r5, r6, lr}
   1e1ba:	b084      	sub	sp, #16
   1e1bc:	4605      	mov	r5, r0
   1e1be:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1e1c0:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1e1c4:	3104      	adds	r1, #4
   1e1c6:	f7ff f816 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e1ca:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e1cc:	2202      	movs	r2, #2
   1e1ce:	4601      	mov	r1, r0
   1e1d0:	4628      	mov	r0, r5
   1e1d2:	f7ff fbe5 	bl	1d9a0 <net_header_fits>
   1e1d6:	b110      	cbz	r0, 1e1de <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1e1d8:	4620      	mov	r0, r4
}
   1e1da:	b004      	add	sp, #16
   1e1dc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1e1de:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1e1e0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e1e4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1e1e8:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1e1ea:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1e1ee:	4419      	add	r1, r3
   1e1f0:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1e1f2:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e1f4:	9600      	str	r6, [sp, #0]
   1e1f6:	2301      	movs	r3, #1
   1e1f8:	f10d 020e 	add.w	r2, sp, #14
   1e1fc:	b289      	uxth	r1, r1
   1e1fe:	f7fe fe8a 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1e202:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e206:	1c73      	adds	r3, r6, #1
   1e208:	9300      	str	r3, [sp, #0]
   1e20a:	2301      	movs	r3, #1
   1e20c:	f10d 020e 	add.w	r2, sp, #14
   1e210:	f7fe fe81 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1e214:	2800      	cmp	r0, #0
   1e216:	d0e0      	beq.n	1e1da <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1e218:	4630      	mov	r0, r6
   1e21a:	e7de      	b.n	1e1da <net_icmpv6_get_nd_opt_hdr+0x22>

0001e21c <net_icmpv6_get_na_hdr>:
{
   1e21c:	b570      	push	{r4, r5, r6, lr}
   1e21e:	b084      	sub	sp, #16
   1e220:	4605      	mov	r5, r0
   1e222:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e224:	2104      	movs	r1, #4
   1e226:	f7fe ffe6 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e22a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e22c:	2214      	movs	r2, #20
   1e22e:	4601      	mov	r1, r0
   1e230:	4628      	mov	r0, r5
   1e232:	f7ff fbb5 	bl	1d9a0 <net_header_fits>
   1e236:	b110      	cbz	r0, 1e23e <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e238:	4620      	mov	r0, r4
}
   1e23a:	b004      	add	sp, #16
   1e23c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e23e:	68a8      	ldr	r0, [r5, #8]
   1e240:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e244:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e248:	4419      	add	r1, r3
   1e24a:	3104      	adds	r1, #4
   1e24c:	9600      	str	r6, [sp, #0]
   1e24e:	2301      	movs	r3, #1
   1e250:	f10d 020e 	add.w	r2, sp, #14
   1e254:	b289      	uxth	r1, r1
   1e256:	f7fe fe5e 	bl	1cf16 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1e25a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1e25e:	2300      	movs	r3, #0
   1e260:	9300      	str	r3, [sp, #0]
   1e262:	2303      	movs	r3, #3
   1e264:	f10d 020e 	add.w	r2, sp, #14
   1e268:	f7fe fe55 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e26c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1e270:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e272:	9300      	str	r3, [sp, #0]
   1e274:	2310      	movs	r3, #16
   1e276:	f10d 020e 	add.w	r2, sp, #14
   1e27a:	f7fe fe4c 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1e27e:	2800      	cmp	r0, #0
   1e280:	d0db      	beq.n	1e23a <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1e282:	4630      	mov	r0, r6
   1e284:	e7d9      	b.n	1e23a <net_icmpv6_get_na_hdr+0x1e>

0001e286 <net_icmpv6_set_na_hdr>:
{
   1e286:	b570      	push	{r4, r5, r6, lr}
   1e288:	b086      	sub	sp, #24
   1e28a:	4605      	mov	r5, r0
   1e28c:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1e28e:	2300      	movs	r3, #0
   1e290:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e294:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e298:	2104      	movs	r1, #4
   1e29a:	f7fe ffac 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e29e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e2a0:	2214      	movs	r2, #20
   1e2a2:	4601      	mov	r1, r0
   1e2a4:	4628      	mov	r0, r5
   1e2a6:	f7ff fb7b 	bl	1d9a0 <net_header_fits>
   1e2aa:	b110      	cbz	r0, 1e2b2 <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e2ac:	4620      	mov	r0, r4
}
   1e2ae:	b006      	add	sp, #24
   1e2b0:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1e2b2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e2b6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e2ba:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1e2bc:	3204      	adds	r2, #4
   1e2be:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e2c2:	9402      	str	r4, [sp, #8]
   1e2c4:	9601      	str	r6, [sp, #4]
   1e2c6:	2301      	movs	r3, #1
   1e2c8:	9300      	str	r3, [sp, #0]
   1e2ca:	f10d 0312 	add.w	r3, sp, #18
   1e2ce:	b292      	uxth	r2, r2
   1e2d0:	68a9      	ldr	r1, [r5, #8]
   1e2d2:	4628      	mov	r0, r5
   1e2d4:	f7fe fe91 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1e2d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1e2dc:	9402      	str	r4, [sp, #8]
   1e2de:	ab05      	add	r3, sp, #20
   1e2e0:	9301      	str	r3, [sp, #4]
   1e2e2:	2303      	movs	r3, #3
   1e2e4:	9300      	str	r3, [sp, #0]
   1e2e6:	f10d 0312 	add.w	r3, sp, #18
   1e2ea:	4601      	mov	r1, r0
   1e2ec:	4628      	mov	r0, r5
   1e2ee:	f7fe fe84 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e2f2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e2f6:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e2f8:	9402      	str	r4, [sp, #8]
   1e2fa:	9301      	str	r3, [sp, #4]
   1e2fc:	2310      	movs	r3, #16
   1e2fe:	9300      	str	r3, [sp, #0]
   1e300:	f10d 0312 	add.w	r3, sp, #18
   1e304:	4601      	mov	r1, r0
   1e306:	4628      	mov	r0, r5
   1e308:	f7fe fe77 	bl	1cffa <net_pkt_write>
	if (!frag) {
   1e30c:	2800      	cmp	r0, #0
   1e30e:	d0ce      	beq.n	1e2ae <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1e310:	4630      	mov	r0, r6
   1e312:	e7cc      	b.n	1e2ae <net_icmpv6_set_na_hdr+0x28>

0001e314 <net_icmpv6_get_ra_hdr>:
{
   1e314:	b570      	push	{r4, r5, r6, lr}
   1e316:	b084      	sub	sp, #16
   1e318:	4606      	mov	r6, r0
   1e31a:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e31c:	2104      	movs	r1, #4
   1e31e:	f7fe ff6a 	bl	1d1f6 <net_pkt_icmp_opt_data>
   1e322:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e324:	220c      	movs	r2, #12
   1e326:	4601      	mov	r1, r0
   1e328:	4630      	mov	r0, r6
   1e32a:	f7ff fb39 	bl	1d9a0 <net_header_fits>
   1e32e:	b110      	cbz	r0, 1e336 <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1e330:	4620      	mov	r0, r4
}
   1e332:	b004      	add	sp, #16
   1e334:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e336:	68b0      	ldr	r0, [r6, #8]
   1e338:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e33c:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e340:	4419      	add	r1, r3
   1e342:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e344:	9500      	str	r5, [sp, #0]
   1e346:	2301      	movs	r3, #1
   1e348:	f10d 020e 	add.w	r2, sp, #14
   1e34c:	b289      	uxth	r1, r1
   1e34e:	f7fe fde2 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1e352:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e356:	1c6b      	adds	r3, r5, #1
   1e358:	9300      	str	r3, [sp, #0]
   1e35a:	2301      	movs	r3, #1
   1e35c:	f10d 020e 	add.w	r2, sp, #14
   1e360:	f7fe fdd9 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e364:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1e368:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e36a:	9300      	str	r3, [sp, #0]
   1e36c:	2302      	movs	r3, #2
   1e36e:	f10d 020e 	add.w	r2, sp, #14
   1e372:	f7fe fdd0 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e376:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1e37a:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e37c:	9300      	str	r3, [sp, #0]
   1e37e:	2304      	movs	r3, #4
   1e380:	f10d 020e 	add.w	r2, sp, #14
   1e384:	f7fe fdc7 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e388:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1e38c:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e390:	9300      	str	r3, [sp, #0]
   1e392:	2304      	movs	r3, #4
   1e394:	f10d 020e 	add.w	r2, sp, #14
   1e398:	f7fe fdbd 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1e39c:	2800      	cmp	r0, #0
   1e39e:	d0c8      	beq.n	1e332 <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1e3a0:	4628      	mov	r0, r5
   1e3a2:	e7c6      	b.n	1e332 <net_icmpv6_get_ra_hdr+0x1e>

0001e3a4 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3a8:	b09f      	sub	sp, #124	; 0x7c
   1e3aa:	4605      	mov	r5, r0
   1e3ac:	4688      	mov	r8, r1
   1e3ae:	4692      	mov	sl, r2
   1e3b0:	4699      	mov	r9, r3
	return pkt->frags->data;
   1e3b2:	6883      	ldr	r3, [r0, #8]
   1e3b4:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1e3b6:	799b      	ldrb	r3, [r3, #6]
   1e3b8:	2b3a      	cmp	r3, #58	; 0x3a
   1e3ba:	d01d      	beq.n	1e3f8 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1e3bc:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e3be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e3c2:	2000      	movs	r0, #0
   1e3c4:	f7fe fbb8 	bl	1cb38 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e3c8:	4604      	mov	r4, r0
   1e3ca:	2800      	cmp	r0, #0
   1e3cc:	f000 8141 	beq.w	1e652 <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1e3d0:	68ab      	ldr	r3, [r5, #8]
   1e3d2:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1e3d4:	798b      	ldrb	r3, [r1, #6]
   1e3d6:	2b11      	cmp	r3, #17
   1e3d8:	d019      	beq.n	1e40e <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1e3da:	2b06      	cmp	r3, #6
   1e3dc:	d019      	beq.n	1e412 <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e3de:	687b      	ldr	r3, [r7, #4]
   1e3e0:	689b      	ldr	r3, [r3, #8]
   1e3e2:	3118      	adds	r1, #24
   1e3e4:	4638      	mov	r0, r7
   1e3e6:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1e3e8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1e3ec:	282f      	cmp	r0, #47	; 0x2f
   1e3ee:	f240 80de 	bls.w	1e5ae <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1e3f2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1e3f6:	e00d      	b.n	1e414 <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e3f8:	a906      	add	r1, sp, #24
   1e3fa:	f7ff fd12 	bl	1de22 <net_icmpv6_get_hdr>
   1e3fe:	b118      	cbz	r0, 1e408 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1e400:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e404:	2b00      	cmp	r3, #0
   1e406:	dbd9      	blt.n	1e3bc <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1e408:	f06f 0515 	mvn.w	r5, #21
   1e40c:	e119      	b.n	1e642 <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e40e:	2630      	movs	r6, #48	; 0x30
   1e410:	e000      	b.n	1e414 <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e412:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1e414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e418:	2230      	movs	r2, #48	; 0x30
   1e41a:	4631      	mov	r1, r6
   1e41c:	4628      	mov	r0, r5
   1e41e:	f7fe fc3d 	bl	1cc9c <net_pkt_copy>
	if (!frag) {
   1e422:	4683      	mov	fp, r0
   1e424:	2800      	cmp	r0, #0
   1e426:	f000 8104 	beq.w	1e632 <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e42a:	4601      	mov	r1, r0
   1e42c:	4620      	mov	r0, r4
   1e42e:	f7fe fc1e 	bl	1cc6e <net_pkt_frag_add>
	pkt->family = family;
   1e432:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e436:	220a      	movs	r2, #10
   1e438:	f362 03c6 	bfi	r3, r2, #3, #4
   1e43c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e440:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e442:	7d7b      	ldrb	r3, [r7, #21]
   1e444:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e448:	7d7b      	ldrb	r3, [r7, #21]
   1e44a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e44e:	f10b 0008 	add.w	r0, fp, #8
   1e452:	f7fb ff24 	bl	1a29e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e456:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1e45a:	2000      	movs	r0, #0
   1e45c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1e460:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1e462:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1e466:	f88d 8014 	strb.w	r8, [sp, #20]
   1e46a:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1e46e:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1e470:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1e472:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e474:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1e478:	f882 e000 	strb.w	lr, [r2]
   1e47c:	68a2      	ldr	r2, [r4, #8]
   1e47e:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e480:	7050      	strb	r0, [r2, #1]
   1e482:	68a2      	ldr	r2, [r4, #8]
   1e484:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e486:	7090      	strb	r0, [r2, #2]
   1e488:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1e48a:	3608      	adds	r6, #8
   1e48c:	b2b6      	uxth	r6, r6
   1e48e:	68a2      	ldr	r2, [r4, #8]
   1e490:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1e492:	0a30      	lsrs	r0, r6, #8
   1e494:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1e496:	7156      	strb	r6, [r2, #5]
   1e498:	68a2      	ldr	r2, [r4, #8]
   1e49a:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1e49c:	203a      	movs	r0, #58	; 0x3a
   1e49e:	7190      	strb	r0, [r2, #6]
   1e4a0:	68a2      	ldr	r2, [r4, #8]
   1e4a2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1e4a4:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1e4a6:	2228      	movs	r2, #40	; 0x28
   1e4a8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1e4ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e4b0:	9602      	str	r6, [sp, #8]
   1e4b2:	ab05      	add	r3, sp, #20
   1e4b4:	9301      	str	r3, [sp, #4]
   1e4b6:	f04f 0a01 	mov.w	sl, #1
   1e4ba:	f8cd a000 	str.w	sl, [sp]
   1e4be:	f10d 0316 	add.w	r3, sp, #22
   1e4c2:	4620      	mov	r0, r4
   1e4c4:	f7fe fd99 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1e4c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e4cc:	9602      	str	r6, [sp, #8]
   1e4ce:	f10d 0315 	add.w	r3, sp, #21
   1e4d2:	9301      	str	r3, [sp, #4]
   1e4d4:	f8cd a000 	str.w	sl, [sp]
   1e4d8:	f10d 0316 	add.w	r3, sp, #22
   1e4dc:	4601      	mov	r1, r0
   1e4de:	4620      	mov	r0, r4
   1e4e0:	f7fe fd8b 	bl	1cffa <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1e4e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e4e8:	9602      	str	r6, [sp, #8]
   1e4ea:	ab06      	add	r3, sp, #24
   1e4ec:	9301      	str	r3, [sp, #4]
   1e4ee:	2304      	movs	r3, #4
   1e4f0:	9300      	str	r3, [sp, #0]
   1e4f2:	f10d 0316 	add.w	r3, sp, #22
   1e4f6:	4601      	mov	r1, r0
   1e4f8:	4620      	mov	r0, r4
   1e4fa:	f7fe fd7e 	bl	1cffa <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1e4fe:	f1b8 0f04 	cmp.w	r8, #4
   1e502:	d056      	beq.n	1e5b2 <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1e504:	68ab      	ldr	r3, [r5, #8]
   1e506:	689e      	ldr	r6, [r3, #8]
   1e508:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1e50a:	2bff      	cmp	r3, #255	; 0xff
   1e50c:	d05f      	beq.n	1e5ce <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e50e:	af12      	add	r7, sp, #72	; 0x48
   1e510:	4633      	mov	r3, r6
   1e512:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e516:	6859      	ldr	r1, [r3, #4]
   1e518:	689a      	ldr	r2, [r3, #8]
   1e51a:	68db      	ldr	r3, [r3, #12]
   1e51c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e51e:	af06      	add	r7, sp, #24
   1e520:	ab12      	add	r3, sp, #72	; 0x48
   1e522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e524:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1e528:	68a3      	ldr	r3, [r4, #8]
   1e52a:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e52e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1e532:	4633      	mov	r3, r6
   1e534:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e538:	6859      	ldr	r1, [r3, #4]
   1e53a:	689a      	ldr	r2, [r3, #8]
   1e53c:	68db      	ldr	r3, [r3, #12]
   1e53e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e542:	ae16      	add	r6, sp, #88	; 0x58
   1e544:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e546:	f8cc 0008 	str.w	r0, [ip, #8]
   1e54a:	f8cc 100c 	str.w	r1, [ip, #12]
   1e54e:	f8cc 2010 	str.w	r2, [ip, #16]
   1e552:	f8cc 3014 	str.w	r3, [ip, #20]
   1e556:	68a3      	ldr	r3, [r4, #8]
   1e558:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e55c:	ae1a      	add	r6, sp, #104	; 0x68
   1e55e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e562:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1e566:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e568:	f8ce 0018 	str.w	r0, [lr, #24]
   1e56c:	f8ce 101c 	str.w	r1, [lr, #28]
   1e570:	f8ce 2020 	str.w	r2, [lr, #32]
   1e574:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e578:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e57a:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e57c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e580:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1e584:	6a2b      	ldr	r3, [r5, #32]
   1e586:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1e588:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e58c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1e590:	68a1      	ldr	r1, [r4, #8]
   1e592:	4620      	mov	r0, r4
   1e594:	f7ff fbf8 	bl	1dd88 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e598:	4620      	mov	r0, r4
   1e59a:	f7fb ff3d 	bl	1a418 <net_send_data>
   1e59e:	2800      	cmp	r0, #0
   1e5a0:	db4a      	blt.n	1e638 <net_icmpv6_send_error+0x294>
   1e5a2:	4a2d      	ldr	r2, [pc, #180]	; (1e658 <net_icmpv6_send_error+0x2b4>)
   1e5a4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e5a6:	3301      	adds	r3, #1
   1e5a8:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e5aa:	2500      	movs	r5, #0
   1e5ac:	e04d      	b.n	1e64a <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1e5ae:	2600      	movs	r6, #0
   1e5b0:	e730      	b.n	1e414 <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	f7fe fe0a 	bl	1d1cc <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1e5b8:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1e5bc:	0a1a      	lsrs	r2, r3, #8
   1e5be:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1e5c0:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1e5c2:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1e5c6:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1e5c8:	f880 9007 	strb.w	r9, [r0, #7]
   1e5cc:	e79a      	b.n	1e504 <net_icmpv6_send_error+0x160>
   1e5ce:	68a3      	ldr	r3, [r4, #8]
   1e5d0:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e5d4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1e5d8:	4633      	mov	r3, r6
   1e5da:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e5de:	6859      	ldr	r1, [r3, #4]
   1e5e0:	689a      	ldr	r2, [r3, #8]
   1e5e2:	68db      	ldr	r3, [r3, #12]
   1e5e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e5e8:	ae0a      	add	r6, sp, #40	; 0x28
   1e5ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e5ec:	f8cc 0018 	str.w	r0, [ip, #24]
   1e5f0:	f8cc 101c 	str.w	r1, [ip, #28]
   1e5f4:	f8cc 2020 	str.w	r2, [ip, #32]
   1e5f8:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e5fc:	68a3      	ldr	r3, [r4, #8]
   1e5fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e602:	68ab      	ldr	r3, [r5, #8]
   1e604:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e606:	3118      	adds	r1, #24
   1e608:	4638      	mov	r0, r7
   1e60a:	f7fc fe6b 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1e60e:	4603      	mov	r3, r0
   1e610:	ae0e      	add	r6, sp, #56	; 0x38
   1e612:	6800      	ldr	r0, [r0, #0]
   1e614:	6859      	ldr	r1, [r3, #4]
   1e616:	689a      	ldr	r2, [r3, #8]
   1e618:	68db      	ldr	r3, [r3, #12]
   1e61a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1e61c:	ae0e      	add	r6, sp, #56	; 0x38
   1e61e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e620:	f8c8 0008 	str.w	r0, [r8, #8]
   1e624:	f8c8 100c 	str.w	r1, [r8, #12]
   1e628:	f8c8 2010 	str.w	r2, [r8, #16]
   1e62c:	f8c8 3014 	str.w	r3, [r8, #20]
   1e630:	e7a2      	b.n	1e578 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1e632:	f06f 050b 	mvn.w	r5, #11
   1e636:	e001      	b.n	1e63c <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1e638:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1e63c:	4620      	mov	r0, r4
   1e63e:	f7fe faec 	bl	1cc1a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e642:	4a05      	ldr	r2, [pc, #20]	; (1e658 <net_icmpv6_send_error+0x2b4>)
   1e644:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e646:	3301      	adds	r3, #1
   1e648:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1e64a:	4628      	mov	r0, r5
   1e64c:	b01f      	add	sp, #124	; 0x7c
   1e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1e652:	f06f 050b 	mvn.w	r5, #11
   1e656:	e7f4      	b.n	1e642 <net_icmpv6_send_error+0x29e>
   1e658:	200029f0 	.word	0x200029f0

0001e65c <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e660:	b08d      	sub	sp, #52	; 0x34
   1e662:	4605      	mov	r5, r0
   1e664:	460e      	mov	r6, r1
   1e666:	4692      	mov	sl, r2
   1e668:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1e66a:	f7fc fe3b 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1e66e:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e670:	686b      	ldr	r3, [r5, #4]
   1e672:	689b      	ldr	r3, [r3, #8]
   1e674:	4631      	mov	r1, r6
   1e676:	4628      	mov	r0, r5
   1e678:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e67a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e67e:	f7fe fa5b 	bl	1cb38 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1e682:	273a      	movs	r7, #58	; 0x3a
   1e684:	9700      	str	r7, [sp, #0]
   1e686:	462b      	mov	r3, r5
   1e688:	4632      	mov	r2, r6
   1e68a:	4641      	mov	r1, r8
   1e68c:	f000 fcc1 	bl	1f012 <net_ipv6_create_raw>
   1e690:	4604      	mov	r4, r0
	pkt->family = family;
   1e692:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e696:	220a      	movs	r2, #10
   1e698:	f362 03c6 	bfi	r3, r2, #3, #4
   1e69c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1e6a0:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e6a2:	7d6b      	ldrb	r3, [r5, #21]
   1e6a4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e6a8:	7d6b      	ldrb	r3, [r5, #21]
   1e6aa:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1e6ae:	aa0c      	add	r2, sp, #48	; 0x30
   1e6b0:	2380      	movs	r3, #128	; 0x80
   1e6b2:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6ba:	2101      	movs	r1, #1
   1e6bc:	f7fe fbe5 	bl	1ce8a <net_pkt_append>
   1e6c0:	f04f 0b00 	mov.w	fp, #0
   1e6c4:	aa0c      	add	r2, sp, #48	; 0x30
   1e6c6:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1e6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6ce:	2101      	movs	r1, #1
   1e6d0:	4620      	mov	r0, r4
   1e6d2:	f7fe fbda 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e6d6:	ad0c      	add	r5, sp, #48	; 0x30
   1e6d8:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6e0:	462a      	mov	r2, r5
   1e6e2:	2102      	movs	r1, #2
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	f7fe fbd0 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e6ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1e6ee:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1e6f2:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6fa:	462a      	mov	r2, r5
   1e6fc:	2102      	movs	r1, #2
   1e6fe:	4620      	mov	r0, r4
   1e700:	f7fe fbc3 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e704:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1e708:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1e70c:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e714:	462a      	mov	r2, r5
   1e716:	2102      	movs	r1, #2
   1e718:	4620      	mov	r0, r4
   1e71a:	f7fe fbb6 	bl	1ce8a <net_pkt_append>
	return pkt->frags->data;
   1e71e:	68a3      	ldr	r3, [r4, #8]
   1e720:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e724:	ad04      	add	r5, sp, #16
   1e726:	f8d8 0000 	ldr.w	r0, [r8]
   1e72a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e72e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e732:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e738:	ad04      	add	r5, sp, #16
   1e73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e73c:	f8cc 0008 	str.w	r0, [ip, #8]
   1e740:	f8cc 100c 	str.w	r1, [ip, #12]
   1e744:	f8cc 2010 	str.w	r2, [ip, #16]
   1e748:	f8cc 3014 	str.w	r3, [ip, #20]
   1e74c:	68a3      	ldr	r3, [r4, #8]
   1e74e:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e752:	ad08      	add	r5, sp, #32
   1e754:	6830      	ldr	r0, [r6, #0]
   1e756:	6871      	ldr	r1, [r6, #4]
   1e758:	68b2      	ldr	r2, [r6, #8]
   1e75a:	68f3      	ldr	r3, [r6, #12]
   1e75c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e75e:	ad08      	add	r5, sp, #32
   1e760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e762:	f8ce 0018 	str.w	r0, [lr, #24]
   1e766:	f8ce 101c 	str.w	r1, [lr, #28]
   1e76a:	f8ce 2020 	str.w	r2, [lr, #32]
   1e76e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e772:	68a1      	ldr	r1, [r4, #8]
   1e774:	4620      	mov	r0, r4
   1e776:	f7ff fb07 	bl	1dd88 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1e77a:	4639      	mov	r1, r7
   1e77c:	4620      	mov	r0, r4
   1e77e:	f000 fce6 	bl	1f14e <net_ipv6_finalize_raw>
   1e782:	4558      	cmp	r0, fp
   1e784:	db0c      	blt.n	1e7a0 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e786:	4620      	mov	r0, r4
   1e788:	f7fb fe46 	bl	1a418 <net_send_data>
   1e78c:	4558      	cmp	r0, fp
   1e78e:	db07      	blt.n	1e7a0 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1e790:	4a08      	ldr	r2, [pc, #32]	; (1e7b4 <net_icmpv6_send_echo_request+0x158>)
   1e792:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e794:	3301      	adds	r3, #1
   1e796:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e798:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1e79a:	b00d      	add	sp, #52	; 0x34
   1e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1e7a0:	4620      	mov	r0, r4
   1e7a2:	f7fe fa3a 	bl	1cc1a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e7a6:	4a03      	ldr	r2, [pc, #12]	; (1e7b4 <net_icmpv6_send_echo_request+0x158>)
   1e7a8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e7aa:	3301      	adds	r3, #1
   1e7ac:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1e7ae:	f06f 0004 	mvn.w	r0, #4
   1e7b2:	e7f2      	b.n	1e79a <net_icmpv6_send_echo_request+0x13e>
   1e7b4:	200029f0 	.word	0x200029f0

0001e7b8 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1e7b8:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1e7ba:	4c12      	ldr	r4, [pc, #72]	; (1e804 <net_icmpv6_input+0x4c>)
   1e7bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e7be:	3301      	adds	r3, #1
   1e7c0:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1e7c2:	4b11      	ldr	r3, [pc, #68]	; (1e808 <net_icmpv6_input+0x50>)
   1e7c4:	681b      	ldr	r3, [r3, #0]
   1e7c6:	e005      	b.n	1e7d4 <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e7c8:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e7ca:	b17b      	cbz	r3, 1e7ec <net_icmpv6_input+0x34>
	return node->next;
   1e7cc:	681c      	ldr	r4, [r3, #0]
   1e7ce:	b18c      	cbz	r4, 1e7f4 <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e7d0:	b175      	cbz	r5, 1e7f0 <net_icmpv6_input+0x38>
	return node->next;
   1e7d2:	681b      	ldr	r3, [r3, #0]
   1e7d4:	b183      	cbz	r3, 1e7f8 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1e7d6:	791c      	ldrb	r4, [r3, #4]
   1e7d8:	428c      	cmp	r4, r1
   1e7da:	d1f5      	bne.n	1e7c8 <net_icmpv6_input+0x10>
   1e7dc:	795c      	ldrb	r4, [r3, #5]
   1e7de:	4294      	cmp	r4, r2
   1e7e0:	d001      	beq.n	1e7e6 <net_icmpv6_input+0x2e>
   1e7e2:	2c00      	cmp	r4, #0
   1e7e4:	d1f0      	bne.n	1e7c8 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1e7e6:	689b      	ldr	r3, [r3, #8]
   1e7e8:	4798      	blx	r3
   1e7ea:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e7ec:	461c      	mov	r4, r3
   1e7ee:	e7ee      	b.n	1e7ce <net_icmpv6_input+0x16>
   1e7f0:	2300      	movs	r3, #0
   1e7f2:	e7ef      	b.n	1e7d4 <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e7f4:	2300      	movs	r3, #0
   1e7f6:	e7ed      	b.n	1e7d4 <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1e7f8:	4a02      	ldr	r2, [pc, #8]	; (1e804 <net_icmpv6_input+0x4c>)
   1e7fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e7fc:	3301      	adds	r3, #1
   1e7fe:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1e800:	2002      	movs	r0, #2
}
   1e802:	bd38      	pop	{r3, r4, r5, pc}
   1e804:	200029f0 	.word	0x200029f0
   1e808:	20001e1c 	.word	0x20001e1c

0001e80c <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1e80c:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1e80e:	4802      	ldr	r0, [pc, #8]	; (1e818 <net_icmpv6_init+0xc>)
   1e810:	f7ff fa8a 	bl	1dd28 <net_icmpv6_register_handler>
   1e814:	bd08      	pop	{r3, pc}
   1e816:	bf00      	nop
   1e818:	2000bdc0 	.word	0x2000bdc0

0001e81c <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1e81c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1e81e:	7803      	ldrb	r3, [r0, #0]
   1e820:	3b01      	subs	r3, #1
   1e822:	b2db      	uxtb	r3, r3
   1e824:	7003      	strb	r3, [r0, #0]
   1e826:	b913      	cbnz	r3, 1e82e <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1e828:	6903      	ldr	r3, [r0, #16]
   1e82a:	b103      	cbz	r3, 1e82e <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1e82c:	4798      	blx	r3
   1e82e:	bd08      	pop	{r3, pc}

0001e830 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1e830:	7803      	ldrb	r3, [r0, #0]
   1e832:	3301      	adds	r3, #1
   1e834:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1e836:	4770      	bx	lr

0001e838 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1e838:	2100      	movs	r1, #0
   1e83a:	8903      	ldrh	r3, [r0, #8]
   1e83c:	4299      	cmp	r1, r3
   1e83e:	da17      	bge.n	1e870 <net_nbr_get+0x38>
{
   1e840:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1e842:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1e844:	8853      	ldrh	r3, [r2, #2]
   1e846:	8894      	ldrh	r4, [r2, #4]
   1e848:	4423      	add	r3, r4
   1e84a:	3314      	adds	r3, #20
   1e84c:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1e850:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1e852:	5cd3      	ldrb	r3, [r2, r3]
   1e854:	b12b      	cbz	r3, 1e862 <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1e856:	3101      	adds	r1, #1
   1e858:	8903      	ldrh	r3, [r0, #8]
   1e85a:	4299      	cmp	r1, r3
   1e85c:	dbf1      	blt.n	1e842 <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1e85e:	2000      	movs	r0, #0
}
   1e860:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1e862:	f104 0314 	add.w	r3, r4, #20
   1e866:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1e868:	4620      	mov	r0, r4
   1e86a:	f7ff ffe1 	bl	1e830 <net_nbr_ref>
   1e86e:	bd10      	pop	{r4, pc}
	return NULL;
   1e870:	2000      	movs	r0, #0
   1e872:	4770      	bx	lr

0001e874 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1e874:	7843      	ldrb	r3, [r0, #1]
   1e876:	2bff      	cmp	r3, #255	; 0xff
   1e878:	d158      	bne.n	1e92c <net_nbr_link+0xb8>
{
   1e87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e87e:	4690      	mov	r8, r2
   1e880:	460f      	mov	r7, r1
   1e882:	4606      	mov	r6, r0
   1e884:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e888:	2400      	movs	r4, #0
   1e88a:	e008      	b.n	1e89e <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e88c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e890:	4b2a      	ldr	r3, [pc, #168]	; (1e93c <net_nbr_link+0xc8>)
   1e892:	4413      	add	r3, r2
   1e894:	7a1b      	ldrb	r3, [r3, #8]
   1e896:	b933      	cbnz	r3, 1e8a6 <net_nbr_link+0x32>
			avail = i;
   1e898:	4625      	mov	r5, r4
   1e89a:	e004      	b.n	1e8a6 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e89c:	3401      	adds	r4, #1
   1e89e:	2c07      	cmp	r4, #7
   1e8a0:	dc1e      	bgt.n	1e8e0 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e8a2:	2d00      	cmp	r5, #0
   1e8a4:	dbf2      	blt.n	1e88c <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1e8a6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e8aa:	4b24      	ldr	r3, [pc, #144]	; (1e93c <net_nbr_link+0xc8>)
   1e8ac:	4413      	add	r3, r2
   1e8ae:	7a1b      	ldrb	r3, [r3, #8]
   1e8b0:	2b00      	cmp	r3, #0
   1e8b2:	d0f3      	beq.n	1e89c <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1e8b4:	4921      	ldr	r1, [pc, #132]	; (1e93c <net_nbr_link+0xc8>)
   1e8b6:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1e8b8:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e8bc:	3102      	adds	r1, #2
   1e8be:	f8d8 0000 	ldr.w	r0, [r8]
   1e8c2:	f00c f867 	bl	2a994 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1e8c6:	4603      	mov	r3, r0
   1e8c8:	2800      	cmp	r0, #0
   1e8ca:	d1e7      	bne.n	1e89c <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1e8cc:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1e8d0:	4a1a      	ldr	r2, [pc, #104]	; (1e93c <net_nbr_link+0xc8>)
   1e8d2:	440a      	add	r2, r1
   1e8d4:	7a11      	ldrb	r1, [r2, #8]
   1e8d6:	3101      	adds	r1, #1
   1e8d8:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1e8da:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1e8dc:	60b7      	str	r7, [r6, #8]

			return 0;
   1e8de:	e019      	b.n	1e914 <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1e8e0:	2d00      	cmp	r5, #0
   1e8e2:	db27      	blt.n	1e934 <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1e8e4:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1e8e8:	4b14      	ldr	r3, [pc, #80]	; (1e93c <net_nbr_link+0xc8>)
   1e8ea:	4413      	add	r3, r2
   1e8ec:	7a1a      	ldrb	r2, [r3, #8]
   1e8ee:	3201      	adds	r2, #1
   1e8f0:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1e8f2:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1e8f4:	f8d8 1000 	ldr.w	r1, [r8]
   1e8f8:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1e8fc:	b109      	cbz	r1, 1e902 <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1e8fe:	2a06      	cmp	r2, #6
   1e900:	d90b      	bls.n	1e91a <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1e902:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e906:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1e90a:	4b0c      	ldr	r3, [pc, #48]	; (1e93c <net_nbr_link+0xc8>)
   1e90c:	441d      	add	r5, r3
   1e90e:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1e910:	60b7      	str	r7, [r6, #8]

	return 0;
   1e912:	2300      	movs	r3, #0
}
   1e914:	4618      	mov	r0, r3
   1e916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1e91a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1e91e:	4807      	ldr	r0, [pc, #28]	; (1e93c <net_nbr_link+0xc8>)
   1e920:	4418      	add	r0, r3
   1e922:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1e924:	3002      	adds	r0, #2
   1e926:	f7e1 fccb 	bl	2c0 <memcpy>
   1e92a:	e7ea      	b.n	1e902 <net_nbr_link+0x8e>
		return -EALREADY;
   1e92c:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1e930:	4618      	mov	r0, r3
   1e932:	4770      	bx	lr
		return -ENOENT;
   1e934:	f06f 0301 	mvn.w	r3, #1
   1e938:	e7ec      	b.n	1e914 <net_nbr_link+0xa0>
   1e93a:	bf00      	nop
   1e93c:	20001e24 	.word	0x20001e24

0001e940 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1e940:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1e944:	4b01      	ldr	r3, [pc, #4]	; (1e94c <net_nbr_get_lladdr+0xc>)
   1e946:	4418      	add	r0, r3
   1e948:	4770      	bx	lr
   1e94a:	bf00      	nop
   1e94c:	20001e24 	.word	0x20001e24

0001e950 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1e950:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1e952:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1e956:	428b      	cmp	r3, r1
   1e958:	d003      	beq.n	1e962 <ipv6_nbr_set_state+0x12>
   1e95a:	2b05      	cmp	r3, #5
   1e95c:	d001      	beq.n	1e962 <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1e95e:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1e962:	4770      	bx	lr

0001e964 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e964:	b570      	push	{r4, r5, r6, lr}
   1e966:	4605      	mov	r5, r0
   1e968:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e96a:	2400      	movs	r4, #0
   1e96c:	e000      	b.n	1e970 <iface_cb+0xc>
   1e96e:	3401      	adds	r4, #1
   1e970:	2c07      	cmp	r4, #7
   1e972:	dc0c      	bgt.n	1e98e <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1e974:	4a06      	ldr	r2, [pc, #24]	; (1e990 <iface_cb+0x2c>)
   1e976:	01e3      	lsls	r3, r4, #7
   1e978:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1e97a:	5cd3      	ldrb	r3, [r2, r3]
   1e97c:	2b00      	cmp	r3, #0
   1e97e:	d0f6      	beq.n	1e96e <iface_cb+0xa>
   1e980:	6883      	ldr	r3, [r0, #8]
   1e982:	42ab      	cmp	r3, r5
   1e984:	d1f3      	bne.n	1e96e <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1e986:	6833      	ldr	r3, [r6, #0]
   1e988:	6871      	ldr	r1, [r6, #4]
   1e98a:	4798      	blx	r3
   1e98c:	e7ef      	b.n	1e96e <iface_cb+0xa>
	}
}
   1e98e:	bd70      	pop	{r4, r5, r6, pc}
   1e990:	2000bdf0 	.word	0x2000bdf0

0001e994 <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e994:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e996:	b085      	sub	sp, #20
   1e998:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e99a:	a903      	add	r1, sp, #12
   1e99c:	f004 ff0a 	bl	237b4 <iface2str>
   1e9a0:	4602      	mov	r2, r0
   1e9a2:	4629      	mov	r1, r5
   1e9a4:	4885      	ldr	r0, [pc, #532]	; (1ebbc <iface_cb+0x228>)
   1e9a6:	f7e4 faeb 	bl	2f80 <printk>
	printk("=======================%s\n", extra);
   1e9aa:	9903      	ldr	r1, [sp, #12]
   1e9ac:	4884      	ldr	r0, [pc, #528]	; (1ebc0 <iface_cb+0x22c>)
   1e9ae:	f7e4 fae7 	bl	2f80 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e9b2:	f3bf 8f5b 	dmb	ish
   1e9b6:	68eb      	ldr	r3, [r5, #12]
   1e9b8:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1e9bc:	f013 0f01 	tst.w	r3, #1
   1e9c0:	d014      	beq.n	1e9ec <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1e9c2:	2318      	movs	r3, #24
   1e9c4:	4a7f      	ldr	r2, [pc, #508]	; (1ebc4 <iface_cb+0x230>)
   1e9c6:	7d29      	ldrb	r1, [r5, #20]
   1e9c8:	6928      	ldr	r0, [r5, #16]
   1e9ca:	f7fe fd45 	bl	1d458 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1e9ce:	4601      	mov	r1, r0
   1e9d0:	487d      	ldr	r0, [pc, #500]	; (1ebc8 <iface_cb+0x234>)
   1e9d2:	f7e4 fad5 	bl	2f80 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1e9d6:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1e9d8:	487c      	ldr	r0, [pc, #496]	; (1ebcc <iface_cb+0x238>)
   1e9da:	f7e4 fad1 	bl	2f80 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1e9de:	2103      	movs	r1, #3
   1e9e0:	487b      	ldr	r0, [pc, #492]	; (1ebd0 <iface_cb+0x23c>)
   1e9e2:	f7e4 facd 	bl	2f80 <printk>
	count = 0;
   1e9e6:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1e9e8:	463c      	mov	r4, r7
   1e9ea:	e02e      	b.n	1ea4a <iface_cb+0xb6>
		printk("Interface is down.\n");
   1e9ec:	4879      	ldr	r0, [pc, #484]	; (1ebd4 <iface_cb+0x240>)
   1e9ee:	f7e4 fac7 	bl	2f80 <printk>
   1e9f2:	e0db      	b.n	1ebac <iface_cb+0x218>
		return "<unknown type>";
   1e9f4:	4a78      	ldr	r2, [pc, #480]	; (1ebd8 <iface_cb+0x244>)
   1e9f6:	e006      	b.n	1ea06 <iface_cb+0x72>
		return "DHCP";
   1e9f8:	4a78      	ldr	r2, [pc, #480]	; (1ebdc <iface_cb+0x248>)
   1e9fa:	e004      	b.n	1ea06 <iface_cb+0x72>
		return "manual";
   1e9fc:	4a78      	ldr	r2, [pc, #480]	; (1ebe0 <iface_cb+0x24c>)
   1e9fe:	e002      	b.n	1ea06 <iface_cb+0x72>
	return "<invalid type>";
   1ea00:	4a78      	ldr	r2, [pc, #480]	; (1ebe4 <iface_cb+0x250>)
   1ea02:	e000      	b.n	1ea06 <iface_cb+0x72>
		return "autoconf";
   1ea04:	4a78      	ldr	r2, [pc, #480]	; (1ebe8 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1ea06:	236c      	movs	r3, #108	; 0x6c
   1ea08:	fb03 5304 	mla	r3, r3, r4, r5
   1ea0c:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1ea10:	3301      	adds	r3, #1
   1ea12:	2b03      	cmp	r3, #3
   1ea14:	d809      	bhi.n	1ea2a <iface_cb+0x96>
   1ea16:	e8df f003 	tbb	[pc, r3]
   1ea1a:	0a02      	.short	0x0a02
   1ea1c:	0604      	.short	0x0604
		return "<unknown state>";
   1ea1e:	4b73      	ldr	r3, [pc, #460]	; (1ebec <iface_cb+0x258>)
   1ea20:	e006      	b.n	1ea30 <iface_cb+0x9c>
		return "preferred";
   1ea22:	4b73      	ldr	r3, [pc, #460]	; (1ebf0 <iface_cb+0x25c>)
   1ea24:	e004      	b.n	1ea30 <iface_cb+0x9c>
		return "deprecated";
   1ea26:	4b73      	ldr	r3, [pc, #460]	; (1ebf4 <iface_cb+0x260>)
   1ea28:	e002      	b.n	1ea30 <iface_cb+0x9c>
	return "<invalid state>";
   1ea2a:	4b73      	ldr	r3, [pc, #460]	; (1ebf8 <iface_cb+0x264>)
   1ea2c:	e000      	b.n	1ea30 <iface_cb+0x9c>
		return "tentative";
   1ea2e:	4b73      	ldr	r3, [pc, #460]	; (1ebfc <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1ea30:	266c      	movs	r6, #108	; 0x6c
   1ea32:	fb06 5604 	mla	r6, r6, r4, r5
   1ea36:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1ea3a:	b368      	cbz	r0, 1ea98 <iface_cb+0x104>
   1ea3c:	4870      	ldr	r0, [pc, #448]	; (1ec00 <iface_cb+0x26c>)
   1ea3e:	9000      	str	r0, [sp, #0]
   1ea40:	4870      	ldr	r0, [pc, #448]	; (1ec04 <iface_cb+0x270>)
   1ea42:	f7e4 fa9d 	bl	2f80 <printk>
		count++;
   1ea46:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ea48:	3401      	adds	r4, #1
   1ea4a:	2c02      	cmp	r4, #2
   1ea4c:	dc26      	bgt.n	1ea9c <iface_cb+0x108>
		if (!unicast->is_used) {
   1ea4e:	236c      	movs	r3, #108	; 0x6c
   1ea50:	fb03 5304 	mla	r3, r3, r4, r5
   1ea54:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ea58:	2b00      	cmp	r3, #0
   1ea5a:	d0f5      	beq.n	1ea48 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1ea5c:	266c      	movs	r6, #108	; 0x6c
   1ea5e:	fb06 f604 	mul.w	r6, r6, r4
   1ea62:	f106 0120 	add.w	r1, r6, #32
   1ea66:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1ea68:	2328      	movs	r3, #40	; 0x28
   1ea6a:	4a67      	ldr	r2, [pc, #412]	; (1ec08 <iface_cb+0x274>)
   1ea6c:	3110      	adds	r1, #16
   1ea6e:	200a      	movs	r0, #10
   1ea70:	f7fe fd1c 	bl	1d4ac <net_addr_ntop>
   1ea74:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1ea76:	442e      	add	r6, r5
   1ea78:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1ea7c:	2b03      	cmp	r3, #3
   1ea7e:	d8bf      	bhi.n	1ea00 <iface_cb+0x6c>
   1ea80:	a201      	add	r2, pc, #4	; (adr r2, 1ea88 <iface_cb+0xf4>)
   1ea82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea86:	bf00      	nop
   1ea88:	0001e9f5 	.word	0x0001e9f5
   1ea8c:	0001ea05 	.word	0x0001ea05
   1ea90:	0001e9f9 	.word	0x0001e9f9
   1ea94:	0001e9fd 	.word	0x0001e9fd
		printk("\t%s %s %s%s\n",
   1ea98:	485c      	ldr	r0, [pc, #368]	; (1ec0c <iface_cb+0x278>)
   1ea9a:	e7d0      	b.n	1ea3e <iface_cb+0xaa>
	}

	if (count == 0) {
   1ea9c:	b137      	cbz	r7, 1eaac <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1ea9e:	2105      	movs	r1, #5
   1eaa0:	485b      	ldr	r0, [pc, #364]	; (1ec10 <iface_cb+0x27c>)
   1eaa2:	f7e4 fa6d 	bl	2f80 <printk>
	count = 0;
   1eaa6:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1eaa8:	4634      	mov	r4, r6
   1eaaa:	e004      	b.n	1eab6 <iface_cb+0x122>
		printk("\t<none>\n");
   1eaac:	4859      	ldr	r0, [pc, #356]	; (1ec14 <iface_cb+0x280>)
   1eaae:	f7e4 fa67 	bl	2f80 <printk>
   1eab2:	e7f4      	b.n	1ea9e <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1eab4:	3401      	adds	r4, #1
   1eab6:	2c04      	cmp	r4, #4
   1eab8:	dc18      	bgt.n	1eaec <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1eaba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1eabe:	00d3      	lsls	r3, r2, #3
   1eac0:	461a      	mov	r2, r3
   1eac2:	442b      	add	r3, r5
   1eac4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1eac8:	f013 0f01 	tst.w	r3, #1
   1eacc:	d0f2      	beq.n	1eab4 <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1eace:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1ead2:	4429      	add	r1, r5
   1ead4:	2328      	movs	r3, #40	; 0x28
   1ead6:	4a4c      	ldr	r2, [pc, #304]	; (1ec08 <iface_cb+0x274>)
   1ead8:	3118      	adds	r1, #24
   1eada:	200a      	movs	r0, #10
   1eadc:	f7fe fce6 	bl	1d4ac <net_addr_ntop>
		printk("\t%s\n",
   1eae0:	4601      	mov	r1, r0
   1eae2:	484d      	ldr	r0, [pc, #308]	; (1ec18 <iface_cb+0x284>)
   1eae4:	f7e4 fa4c 	bl	2f80 <printk>

		count++;
   1eae8:	3601      	adds	r6, #1
   1eaea:	e7e3      	b.n	1eab4 <iface_cb+0x120>
	}

	if (count == 0) {
   1eaec:	b136      	cbz	r6, 1eafc <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1eaee:	2102      	movs	r1, #2
   1eaf0:	484a      	ldr	r0, [pc, #296]	; (1ec1c <iface_cb+0x288>)
   1eaf2:	f7e4 fa45 	bl	2f80 <printk>
	count = 0;
   1eaf6:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1eaf8:	4634      	mov	r4, r6
   1eafa:	e009      	b.n	1eb10 <iface_cb+0x17c>
		printk("\t<none>\n");
   1eafc:	4845      	ldr	r0, [pc, #276]	; (1ec14 <iface_cb+0x280>)
   1eafe:	f7e4 fa3f 	bl	2f80 <printk>
   1eb02:	e7f4      	b.n	1eaee <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1eb04:	4b41      	ldr	r3, [pc, #260]	; (1ec0c <iface_cb+0x278>)
   1eb06:	4846      	ldr	r0, [pc, #280]	; (1ec20 <iface_cb+0x28c>)
   1eb08:	f7e4 fa3a 	bl	2f80 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1eb0c:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1eb0e:	3401      	adds	r4, #1
   1eb10:	2c01      	cmp	r4, #1
   1eb12:	dc1e      	bgt.n	1eb52 <iface_cb+0x1be>
		if (!prefix->is_used) {
   1eb14:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1eb18:	0093      	lsls	r3, r2, #2
   1eb1a:	461a      	mov	r2, r3
   1eb1c:	442b      	add	r3, r5
   1eb1e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1eb22:	2b00      	cmp	r3, #0
   1eb24:	d0f3      	beq.n	1eb0e <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1eb26:	0127      	lsls	r7, r4, #4
   1eb28:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1eb2c:	4429      	add	r1, r5
   1eb2e:	2328      	movs	r3, #40	; 0x28
   1eb30:	4a35      	ldr	r2, [pc, #212]	; (1ec08 <iface_cb+0x274>)
   1eb32:	3110      	adds	r1, #16
   1eb34:	200a      	movs	r0, #10
   1eb36:	f7fe fcb9 	bl	1d4ac <net_addr_ntop>
   1eb3a:	4601      	mov	r1, r0
		       prefix->len,
   1eb3c:	1b3f      	subs	r7, r7, r4
   1eb3e:	00bb      	lsls	r3, r7, #2
   1eb40:	442b      	add	r3, r5
   1eb42:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1eb46:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1eb4a:	2b00      	cmp	r3, #0
   1eb4c:	d0da      	beq.n	1eb04 <iface_cb+0x170>
   1eb4e:	4b2c      	ldr	r3, [pc, #176]	; (1ec00 <iface_cb+0x26c>)
   1eb50:	e7d9      	b.n	1eb06 <iface_cb+0x172>
	}

	if (count == 0) {
   1eb52:	b36e      	cbz	r6, 1ebb0 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1eb54:	2100      	movs	r1, #0
   1eb56:	4628      	mov	r0, r5
   1eb58:	f7fc fade 	bl	1b118 <net_if_ipv6_router_find_default>
	if (router) {
   1eb5c:	4604      	mov	r4, r0
   1eb5e:	b188      	cbz	r0, 1eb84 <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1eb60:	4830      	ldr	r0, [pc, #192]	; (1ec24 <iface_cb+0x290>)
   1eb62:	f7e4 fa0d 	bl	2f80 <printk>
   1eb66:	2328      	movs	r3, #40	; 0x28
   1eb68:	4a27      	ldr	r2, [pc, #156]	; (1ec08 <iface_cb+0x274>)
   1eb6a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1eb6e:	200a      	movs	r0, #10
   1eb70:	f7fe fc9c 	bl	1d4ac <net_addr_ntop>
   1eb74:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1eb76:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1eb7a:	b1eb      	cbz	r3, 1ebb8 <iface_cb+0x224>
   1eb7c:	4a20      	ldr	r2, [pc, #128]	; (1ec00 <iface_cb+0x26c>)
   1eb7e:	482a      	ldr	r0, [pc, #168]	; (1ec28 <iface_cb+0x294>)
   1eb80:	f7e4 f9fe 	bl	2f80 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1eb84:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1eb88:	4828      	ldr	r0, [pc, #160]	; (1ec2c <iface_cb+0x298>)
   1eb8a:	f7e4 f9f9 	bl	2f80 <printk>
	printk("IPv6 base reachable time : %d\n",
   1eb8e:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1eb92:	4827      	ldr	r0, [pc, #156]	; (1ec30 <iface_cb+0x29c>)
   1eb94:	f7e4 f9f4 	bl	2f80 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1eb98:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1eb9c:	4825      	ldr	r0, [pc, #148]	; (1ec34 <iface_cb+0x2a0>)
   1eb9e:	f7e4 f9ef 	bl	2f80 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1eba2:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1eba6:	4824      	ldr	r0, [pc, #144]	; (1ec38 <iface_cb+0x2a4>)
   1eba8:	f7e4 f9ea 	bl	2f80 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1ebac:	b005      	add	sp, #20
   1ebae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1ebb0:	4818      	ldr	r0, [pc, #96]	; (1ec14 <iface_cb+0x280>)
   1ebb2:	f7e4 f9e5 	bl	2f80 <printk>
   1ebb6:	e7cd      	b.n	1eb54 <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1ebb8:	4a14      	ldr	r2, [pc, #80]	; (1ec0c <iface_cb+0x278>)
   1ebba:	e7e0      	b.n	1eb7e <iface_cb+0x1ea>
   1ebbc:	0002fdbc 	.word	0x0002fdbc
   1ebc0:	0002ff6c 	.word	0x0002ff6c
   1ebc4:	200023b0 	.word	0x200023b0
   1ebc8:	0002fde4 	.word	0x0002fde4
   1ebcc:	0002fdf4 	.word	0x0002fdf4
   1ebd0:	0002fe04 	.word	0x0002fe04
   1ebd4:	0002fdd0 	.word	0x0002fdd0
   1ebd8:	0002fd24 	.word	0x0002fd24
   1ebdc:	0002fd5c 	.word	0x0002fd5c
   1ebe0:	0002fd64 	.word	0x0002fd64
   1ebe4:	0002fd6c 	.word	0x0002fd6c
   1ebe8:	0002fd50 	.word	0x0002fd50
   1ebec:	0002fd7c 	.word	0x0002fd7c
   1ebf0:	0002fd98 	.word	0x0002fd98
   1ebf4:	0002fda4 	.word	0x0002fda4
   1ebf8:	0002fc70 	.word	0x0002fc70
   1ebfc:	0002fd8c 	.word	0x0002fd8c
   1ec00:	0002fdb0 	.word	0x0002fdb0
   1ec04:	0002fe28 	.word	0x0002fe28
   1ec08:	200023c8 	.word	0x200023c8
   1ec0c:	0002f448 	.word	0x0002f448
   1ec10:	0002fe44 	.word	0x0002fe44
   1ec14:	0002fe38 	.word	0x0002fe38
   1ec18:	0002fe68 	.word	0x0002fe68
   1ec1c:	0002fe70 	.word	0x0002fe70
   1ec20:	0002fe8c 	.word	0x0002fe8c
   1ec24:	0002fe98 	.word	0x0002fe98
   1ec28:	0002feb0 	.word	0x0002feb0
   1ec2c:	0002feb8 	.word	0x0002feb8
   1ec30:	0002fed8 	.word	0x0002fed8
   1ec34:	0002fef8 	.word	0x0002fef8
   1ec38:	0002ff18 	.word	0x0002ff18

0001ec3c <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1ec3c:	4770      	bx	lr

0001ec3e <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1ec3e:	4770      	bx	lr

0001ec40 <nbr_lookup>:
{
   1ec40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec42:	460e      	mov	r6, r1
   1ec44:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec46:	2400      	movs	r4, #0
   1ec48:	e000      	b.n	1ec4c <nbr_lookup+0xc>
   1ec4a:	3401      	adds	r4, #1
   1ec4c:	2c07      	cmp	r4, #7
   1ec4e:	dc11      	bgt.n	1ec74 <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1ec50:	4a0a      	ldr	r2, [pc, #40]	; (1ec7c <nbr_lookup+0x3c>)
   1ec52:	01e3      	lsls	r3, r4, #7
   1ec54:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1ec56:	5cd3      	ldrb	r3, [r2, r3]
   1ec58:	2b00      	cmp	r3, #0
   1ec5a:	d0f6      	beq.n	1ec4a <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1ec5c:	68ab      	ldr	r3, [r5, #8]
   1ec5e:	42b3      	cmp	r3, r6
   1ec60:	d1f3      	bne.n	1ec4a <nbr_lookup+0xa>
   1ec62:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ec64:	2210      	movs	r2, #16
   1ec66:	4639      	mov	r1, r7
   1ec68:	3004      	adds	r0, #4
   1ec6a:	f00b fe93 	bl	2a994 <memcmp>
   1ec6e:	2800      	cmp	r0, #0
   1ec70:	d1eb      	bne.n	1ec4a <nbr_lookup+0xa>
   1ec72:	e000      	b.n	1ec76 <nbr_lookup+0x36>
	return NULL;
   1ec74:	2500      	movs	r5, #0
}
   1ec76:	4628      	mov	r0, r5
   1ec78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec7a:	bf00      	nop
   1ec7c:	2000bdf0 	.word	0x2000bdf0

0001ec80 <nbr_clear_ns_pending>:
{
   1ec80:	b510      	push	{r4, lr}
   1ec82:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1ec84:	303c      	adds	r0, #60	; 0x3c
   1ec86:	f00a fb93 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   1ec8a:	6820      	ldr	r0, [r4, #0]
   1ec8c:	b118      	cbz	r0, 1ec96 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1ec8e:	f7fd ffc4 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   1ec92:	2300      	movs	r3, #0
   1ec94:	6023      	str	r3, [r4, #0]
   1ec96:	bd10      	pop	{r4, pc}

0001ec98 <ns_reply_timeout>:
{
   1ec98:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1ec9a:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec9e:	2300      	movs	r3, #0
   1eca0:	2b07      	cmp	r3, #7
   1eca2:	dc07      	bgt.n	1ecb4 <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1eca4:	4c0d      	ldr	r4, [pc, #52]	; (1ecdc <ns_reply_timeout+0x44>)
   1eca6:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1ecaa:	68e2      	ldr	r2, [r4, #12]
   1ecac:	4291      	cmp	r1, r2
   1ecae:	d002      	beq.n	1ecb6 <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ecb0:	3301      	adds	r3, #1
   1ecb2:	e7f5      	b.n	1eca0 <ns_reply_timeout+0x8>
	return NULL;
   1ecb4:	2400      	movs	r4, #0
	if (!nbr) {
   1ecb6:	b184      	cbz	r4, 1ecda <ns_reply_timeout+0x42>
	if (!data->pending) {
   1ecb8:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1ecbc:	b16b      	cbz	r3, 1ecda <ns_reply_timeout+0x42>
   1ecbe:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1ecc0:	4618      	mov	r0, r3
   1ecc2:	f7fd ffaa 	bl	1cc1a <net_pkt_unref>
	net_pkt_unref(data->pending);
   1ecc6:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1ecca:	f7fd ffa6 	bl	1cc1a <net_pkt_unref>
	data->pending = NULL;
   1ecce:	2300      	movs	r3, #0
   1ecd0:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1ecd4:	4620      	mov	r0, r4
   1ecd6:	f7ff fda1 	bl	1e81c <net_nbr_unref>
   1ecda:	bd38      	pop	{r3, r4, r5, pc}
   1ecdc:	2000bdf0 	.word	0x2000bdf0

0001ece0 <nbr_init>:
{
   1ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ece4:	b084      	sub	sp, #16
   1ece6:	4604      	mov	r4, r0
   1ece8:	4616      	mov	r6, r2
   1ecea:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ecec:	23ff      	movs	r3, #255	; 0xff
   1ecee:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1ecf0:	6081      	str	r1, [r0, #8]
   1ecf2:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1ecf4:	466d      	mov	r5, sp
   1ecf6:	6810      	ldr	r0, [r2, #0]
   1ecf8:	6851      	ldr	r1, [r2, #4]
   1ecfa:	6892      	ldr	r2, [r2, #8]
   1ecfc:	68f3      	ldr	r3, [r6, #12]
   1ecfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ed00:	466d      	mov	r5, sp
   1ed02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ed04:	6078      	str	r0, [r7, #4]
   1ed06:	60b9      	str	r1, [r7, #8]
   1ed08:	60fa      	str	r2, [r7, #12]
   1ed0a:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1ed0c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1ed10:	4620      	mov	r0, r4
   1ed12:	f7ff fe1d 	bl	1e950 <ipv6_nbr_set_state>
   1ed16:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1ed18:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1ed1c:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1ed1e:	2200      	movs	r2, #0
   1ed20:	601a      	str	r2, [r3, #0]
   1ed22:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1ed24:	4905      	ldr	r1, [pc, #20]	; (1ed3c <nbr_init+0x5c>)
   1ed26:	3014      	adds	r0, #20
   1ed28:	f00a fb24 	bl	29374 <k_delayed_work_init>
   1ed2c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1ed2e:	4904      	ldr	r1, [pc, #16]	; (1ed40 <nbr_init+0x60>)
   1ed30:	303c      	adds	r0, #60	; 0x3c
   1ed32:	f00a fb1f 	bl	29374 <k_delayed_work_init>
}
   1ed36:	b004      	add	sp, #16
   1ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed3c:	0002086d 	.word	0x0002086d
   1ed40:	0001ec99 	.word	0x0001ec99

0001ed44 <nbr_new>:
{
   1ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed46:	b083      	sub	sp, #12
   1ed48:	4605      	mov	r5, r0
   1ed4a:	460e      	mov	r6, r1
   1ed4c:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1ed4e:	4807      	ldr	r0, [pc, #28]	; (1ed6c <nbr_new+0x28>)
   1ed50:	f7ff fd72 	bl	1e838 <net_nbr_get>
	if (!nbr) {
   1ed54:	4604      	mov	r4, r0
   1ed56:	b128      	cbz	r0, 1ed64 <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1ed58:	9700      	str	r7, [sp, #0]
   1ed5a:	2301      	movs	r3, #1
   1ed5c:	4632      	mov	r2, r6
   1ed5e:	4629      	mov	r1, r5
   1ed60:	f7ff ffbe 	bl	1ece0 <nbr_init>
}
   1ed64:	4620      	mov	r0, r4
   1ed66:	b003      	add	sp, #12
   1ed68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed6a:	bf00      	nop
   1ed6c:	2000bde4 	.word	0x2000bde4

0001ed70 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed74:	b084      	sub	sp, #16
   1ed76:	4604      	mov	r4, r0
   1ed78:	460e      	mov	r6, r1
   1ed7a:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1ed7c:	480c      	ldr	r0, [pc, #48]	; (1edb0 <nbr_new+0x40>)
   1ed7e:	f7ff fd5b 	bl	1e838 <net_nbr_get>

	if (!nbr) {
   1ed82:	4605      	mov	r5, r0
   1ed84:	b180      	cbz	r0, 1eda8 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1ed86:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1ed88:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1ed8a:	466c      	mov	r4, sp
   1ed8c:	6830      	ldr	r0, [r6, #0]
   1ed8e:	6871      	ldr	r1, [r6, #4]
   1ed90:	68b2      	ldr	r2, [r6, #8]
   1ed92:	68f3      	ldr	r3, [r6, #12]
   1ed94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ed96:	466c      	mov	r4, sp
   1ed98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ed9a:	6138      	str	r0, [r7, #16]
   1ed9c:	6179      	str	r1, [r7, #20]
   1ed9e:	61ba      	str	r2, [r7, #24]
   1eda0:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1eda2:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1eda4:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1eda8:	4628      	mov	r0, r5
   1edaa:	b004      	add	sp, #16
   1edac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1edb0:	2000c208 	.word	0x2000c208

0001edb4 <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1edb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1edb8:	4682      	mov	sl, r0
	return pkt->forwarding;
   1edba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1edbe:	f013 0f04 	tst.w	r3, #4
   1edc2:	d002      	beq.n	1edca <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1edc4:	4650      	mov	r0, sl
   1edc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1edca:	6940      	ldr	r0, [r0, #20]
   1edcc:	6843      	ldr	r3, [r0, #4]
   1edce:	689b      	ldr	r3, [r3, #8]
   1edd0:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1edd2:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1edd6:	4283      	cmp	r3, r0
   1edd8:	d0f4      	beq.n	1edc4 <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1edda:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1edde:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1ede2:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1ede4:	2400      	movs	r4, #0
   1ede6:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1edea:	46a1      	mov	r9, r4
	pos = 0;
   1edec:	46a0      	mov	r8, r4
	while (orig_frag) {
   1edee:	e020      	b.n	1ee32 <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1edf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1edf4:	4650      	mov	r0, sl
   1edf6:	f7fd febd 	bl	1cb74 <net_pkt_get_frag>
   1edfa:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1edfc:	4601      	mov	r1, r0
   1edfe:	4650      	mov	r0, sl
   1ee00:	f7fd ff35 	bl	1cc6e <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1ee04:	f109 0008 	add.w	r0, r9, #8
   1ee08:	f7fb fa4d 	bl	1a2a6 <net_buf_simple_tailroom>
   1ee0c:	b284      	uxth	r4, r0
   1ee0e:	e014      	b.n	1ee3a <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1ee10:	4621      	mov	r1, r4
   1ee12:	f109 0008 	add.w	r0, r9, #8
   1ee16:	f7fb f9dd 	bl	1a1d4 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1ee1a:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1ee1c:	4622      	mov	r2, r4
   1ee1e:	4441      	add	r1, r8
   1ee20:	f7e1 fa4e 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1ee24:	1b36      	subs	r6, r6, r4
   1ee26:	b2b6      	uxth	r6, r6
			pos += room_len;
   1ee28:	4444      	add	r4, r8
   1ee2a:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1ee2e:	2400      	movs	r4, #0
		if (!copy_len) {
   1ee30:	b19e      	cbz	r6, 1ee5a <update_ll_reserve+0xa6>
	while (orig_frag) {
   1ee32:	2f00      	cmp	r7, #0
   1ee34:	d0c6      	beq.n	1edc4 <update_ll_reserve+0x10>
		if (!room_len) {
   1ee36:	2c00      	cmp	r4, #0
   1ee38:	d0da      	beq.n	1edf0 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1ee3a:	42b4      	cmp	r4, r6
   1ee3c:	d3e8      	bcc.n	1ee10 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1ee3e:	4631      	mov	r1, r6
   1ee40:	f109 0008 	add.w	r0, r9, #8
   1ee44:	f7fb f9c6 	bl	1a1d4 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1ee48:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1ee4a:	4632      	mov	r2, r6
   1ee4c:	4441      	add	r1, r8
   1ee4e:	f7e1 fa37 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1ee52:	1ba4      	subs	r4, r4, r6
   1ee54:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1ee56:	2600      	movs	r6, #0
   1ee58:	e7ea      	b.n	1ee30 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1ee5a:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1ee5c:	2300      	movs	r3, #0
   1ee5e:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1ee60:	4638      	mov	r0, r7
   1ee62:	f7fd fed4 	bl	1cc0e <net_pkt_frag_unref>
			if (!orig_frag) {
   1ee66:	2d00      	cmp	r5, #0
   1ee68:	d0ac      	beq.n	1edc4 <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1ee6a:	462f      	mov	r7, r5
			pos = 0;
   1ee6c:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1ee6e:	89ae      	ldrh	r6, [r5, #12]
   1ee70:	e7df      	b.n	1ee32 <update_ll_reserve+0x7e>

0001ee72 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1ee72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee74:	4604      	mov	r4, r0
   1ee76:	460e      	mov	r6, r1
   1ee78:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1ee7a:	6880      	ldr	r0, [r0, #8]
   1ee7c:	212c      	movs	r1, #44	; 0x2c
   1ee7e:	3008      	adds	r0, #8
   1ee80:	f7fb f9a8 	bl	1a1d4 <net_buf_simple_add>
	return pkt->frags->data;
   1ee84:	68a3      	ldr	r3, [r4, #8]
   1ee86:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ee88:	2260      	movs	r2, #96	; 0x60
   1ee8a:	701a      	strb	r2, [r3, #0]
   1ee8c:	68a3      	ldr	r3, [r4, #8]
   1ee8e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1ee90:	2500      	movs	r5, #0
   1ee92:	705d      	strb	r5, [r3, #1]
   1ee94:	68a3      	ldr	r3, [r4, #8]
   1ee96:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1ee98:	709d      	strb	r5, [r3, #2]
   1ee9a:	70dd      	strb	r5, [r3, #3]
   1ee9c:	68a3      	ldr	r3, [r4, #8]
   1ee9e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1eea0:	711d      	strb	r5, [r3, #4]
   1eea2:	68a3      	ldr	r3, [r4, #8]
   1eea4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1eea6:	3604      	adds	r6, #4
   1eea8:	715e      	strb	r6, [r3, #5]
   1eeaa:	68a3      	ldr	r3, [r4, #8]
   1eeac:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1eeae:	223a      	movs	r2, #58	; 0x3a
   1eeb0:	719a      	strb	r2, [r3, #6]
   1eeb2:	68a3      	ldr	r3, [r4, #8]
   1eeb4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1eeb6:	22ff      	movs	r2, #255	; 0xff
   1eeb8:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1eeba:	4620      	mov	r0, r4
   1eebc:	f7fe f986 	bl	1d1cc <net_pkt_icmp_data>
   1eec0:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1eec2:	4620      	mov	r0, r4
   1eec4:	f7fe f982 	bl	1d1cc <net_pkt_icmp_data>
   1eec8:	7045      	strb	r5, [r0, #1]
   1eeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eecc <nbr_free>:
{
   1eecc:	b538      	push	{r3, r4, r5, lr}
   1eece:	4604      	mov	r4, r0
   1eed0:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1eed2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1eed6:	f00a fa6b 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   1eeda:	6828      	ldr	r0, [r5, #0]
   1eedc:	b118      	cbz	r0, 1eee6 <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1eede:	f7fd fe9c 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   1eee2:	2300      	movs	r3, #0
   1eee4:	602b      	str	r3, [r5, #0]
   1eee6:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1eee8:	3014      	adds	r0, #20
   1eeea:	f00a fa61 	bl	293b0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1eeee:	4620      	mov	r0, r4
   1eef0:	f7ff fc94 	bl	1e81c <net_nbr_unref>
   1eef4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001eef8 <net_ipv6_nbr_state2str>:
	switch (state) {
   1eef8:	2805      	cmp	r0, #5
   1eefa:	d80e      	bhi.n	1ef1a <net_ipv6_nbr_state2str+0x22>
   1eefc:	e8df f000 	tbb	[pc, r0]
   1ef00:	07050f03 	.word	0x07050f03
   1ef04:	0b09      	.short	0x0b09
		return "incomplete";
   1ef06:	4807      	ldr	r0, [pc, #28]	; (1ef24 <net_ipv6_nbr_state2str+0x2c>)
   1ef08:	4770      	bx	lr
		return "stale";
   1ef0a:	4807      	ldr	r0, [pc, #28]	; (1ef28 <net_ipv6_nbr_state2str+0x30>)
   1ef0c:	4770      	bx	lr
		return "delay";
   1ef0e:	4807      	ldr	r0, [pc, #28]	; (1ef2c <net_ipv6_nbr_state2str+0x34>)
   1ef10:	4770      	bx	lr
		return "probe";
   1ef12:	4807      	ldr	r0, [pc, #28]	; (1ef30 <net_ipv6_nbr_state2str+0x38>)
   1ef14:	4770      	bx	lr
		return "static";
   1ef16:	4807      	ldr	r0, [pc, #28]	; (1ef34 <net_ipv6_nbr_state2str+0x3c>)
   1ef18:	4770      	bx	lr
	return "<invalid state>";
   1ef1a:	4807      	ldr	r0, [pc, #28]	; (1ef38 <net_ipv6_nbr_state2str+0x40>)
   1ef1c:	4770      	bx	lr
		return "reachable";
   1ef1e:	4807      	ldr	r0, [pc, #28]	; (1ef3c <net_ipv6_nbr_state2str+0x44>)
}
   1ef20:	4770      	bx	lr
   1ef22:	bf00      	nop
   1ef24:	0002fc38 	.word	0x0002fc38
   1ef28:	0002fc50 	.word	0x0002fc50
   1ef2c:	0002fc58 	.word	0x0002fc58
   1ef30:	0002fc60 	.word	0x0002fc60
   1ef34:	0002fc68 	.word	0x0002fc68
   1ef38:	0002fc70 	.word	0x0002fc70
   1ef3c:	0002fc44 	.word	0x0002fc44

0001ef40 <net_ipv6_nbr_foreach>:
{
   1ef40:	b500      	push	{lr}
   1ef42:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1ef44:	9000      	str	r0, [sp, #0]
   1ef46:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1ef48:	4669      	mov	r1, sp
   1ef4a:	4803      	ldr	r0, [pc, #12]	; (1ef58 <net_ipv6_nbr_foreach+0x18>)
   1ef4c:	f7fc fc3a 	bl	1b7c4 <net_if_foreach>
}
   1ef50:	b003      	add	sp, #12
   1ef52:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef56:	bf00      	nop
   1ef58:	0001e965 	.word	0x0001e965

0001ef5c <net_ipv6_nbr_rm>:
{
   1ef5c:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1ef5e:	460a      	mov	r2, r1
   1ef60:	4601      	mov	r1, r0
   1ef62:	480d      	ldr	r0, [pc, #52]	; (1ef98 <net_ipv6_nbr_rm+0x3c>)
   1ef64:	f7ff fe6c 	bl	1ec40 <nbr_lookup>
	if (!nbr) {
   1ef68:	b1a0      	cbz	r0, 1ef94 <net_ipv6_nbr_rm+0x38>
   1ef6a:	4604      	mov	r4, r0
   1ef6c:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1ef6e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1ef72:	f00a fa1d 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   1ef76:	6828      	ldr	r0, [r5, #0]
   1ef78:	b118      	cbz	r0, 1ef82 <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1ef7a:	f7fd fe4e 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   1ef7e:	2300      	movs	r3, #0
   1ef80:	602b      	str	r3, [r5, #0]
   1ef82:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1ef84:	3014      	adds	r0, #20
   1ef86:	f00a fa13 	bl	293b0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1ef8a:	4620      	mov	r0, r4
   1ef8c:	f7ff fc46 	bl	1e81c <net_nbr_unref>
	return true;
   1ef90:	2001      	movs	r0, #1
   1ef92:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1ef94:	2000      	movs	r0, #0
}
   1ef96:	bd38      	pop	{r3, r4, r5, pc}
   1ef98:	2000bde4 	.word	0x2000bde4

0001ef9c <net_ipv6_unspecified_address>:
}
   1ef9c:	4800      	ldr	r0, [pc, #0]	; (1efa0 <net_ipv6_unspecified_address+0x4>)
   1ef9e:	4770      	bx	lr
   1efa0:	0002fc28 	.word	0x0002fc28

0001efa4 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1efa4:	b570      	push	{r4, r5, r6, lr}
   1efa6:	b082      	sub	sp, #8
   1efa8:	4604      	mov	r4, r0
   1efaa:	460e      	mov	r6, r1
   1efac:	461d      	mov	r5, r3
   1efae:	a902      	add	r1, sp, #8
   1efb0:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1efb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efb8:	460a      	mov	r2, r1
   1efba:	2101      	movs	r1, #1
   1efbc:	f7fd ff65 	bl	1ce8a <net_pkt_append>
   1efc0:	aa02      	add	r2, sp, #8
   1efc2:	2300      	movs	r3, #0
   1efc4:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1efc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efcc:	2101      	movs	r1, #1
   1efce:	4620      	mov	r0, r4
   1efd0:	f7fd ff5b 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1efd4:	022b      	lsls	r3, r5, #8
   1efd6:	aa02      	add	r2, sp, #8
   1efd8:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1efdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efe0:	2102      	movs	r1, #2
   1efe2:	4620      	mov	r0, r4
   1efe4:	f7fd ff51 	bl	1ce8a <net_pkt_append>
   1efe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efec:	4632      	mov	r2, r6
   1efee:	2110      	movs	r1, #16
   1eff0:	4620      	mov	r0, r4
   1eff2:	f7fd ff4a 	bl	1ce8a <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1eff6:	b915      	cbnz	r5, 1effe <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1eff8:	4620      	mov	r0, r4
   1effa:	b002      	add	sp, #8
   1effc:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1effe:	f7ff ffcd 	bl	1ef9c <net_ipv6_unspecified_address>
   1f002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f006:	4602      	mov	r2, r0
   1f008:	2110      	movs	r1, #16
   1f00a:	4620      	mov	r0, r4
   1f00c:	f7fd ff3d 	bl	1ce8a <net_pkt_append>
   1f010:	e7f2      	b.n	1eff8 <create_mldv2+0x54>

0001f012 <net_ipv6_create_raw>:
{
   1f012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f016:	b088      	sub	sp, #32
   1f018:	4604      	mov	r4, r0
   1f01a:	460e      	mov	r6, r1
   1f01c:	4617      	mov	r7, r2
   1f01e:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1f020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f024:	f7fd fda6 	bl	1cb74 <net_pkt_get_frag>
   1f028:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1f02a:	4601      	mov	r1, r0
   1f02c:	4620      	mov	r0, r4
   1f02e:	f7fd fe2b 	bl	1cc88 <net_pkt_frag_insert>
	return pkt->frags->data;
   1f032:	68a3      	ldr	r3, [r4, #8]
   1f034:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f036:	2260      	movs	r2, #96	; 0x60
   1f038:	701a      	strb	r2, [r3, #0]
   1f03a:	68a3      	ldr	r3, [r4, #8]
   1f03c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f03e:	2300      	movs	r3, #0
   1f040:	7053      	strb	r3, [r2, #1]
   1f042:	68a2      	ldr	r2, [r4, #8]
   1f044:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f046:	7093      	strb	r3, [r2, #2]
   1f048:	70d3      	strb	r3, [r2, #3]
   1f04a:	68a2      	ldr	r2, [r4, #8]
   1f04c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1f04e:	7193      	strb	r3, [r2, #6]
   1f050:	68a3      	ldr	r3, [r4, #8]
   1f052:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1f054:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1f058:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1f05a:	68a3      	ldr	r3, [r4, #8]
   1f05c:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1f05e:	79da      	ldrb	r2, [r3, #7]
   1f060:	b912      	cbnz	r2, 1f068 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1f062:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1f066:	71da      	strb	r2, [r3, #7]
   1f068:	68a3      	ldr	r3, [r4, #8]
   1f06a:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f06e:	466d      	mov	r5, sp
   1f070:	6838      	ldr	r0, [r7, #0]
   1f072:	6879      	ldr	r1, [r7, #4]
   1f074:	68ba      	ldr	r2, [r7, #8]
   1f076:	68fb      	ldr	r3, [r7, #12]
   1f078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f07a:	466d      	mov	r5, sp
   1f07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f07e:	f8ce 0018 	str.w	r0, [lr, #24]
   1f082:	f8ce 101c 	str.w	r1, [lr, #28]
   1f086:	f8ce 2020 	str.w	r2, [lr, #32]
   1f08a:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1f08e:	68a3      	ldr	r3, [r4, #8]
   1f090:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f092:	6830      	ldr	r0, [r6, #0]
   1f094:	6871      	ldr	r1, [r6, #4]
   1f096:	68b2      	ldr	r2, [r6, #8]
   1f098:	68f3      	ldr	r3, [r6, #12]
   1f09a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f09c:	ad04      	add	r5, sp, #16
   1f09e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f0a0:	60b8      	str	r0, [r7, #8]
   1f0a2:	60f9      	str	r1, [r7, #12]
   1f0a4:	613a      	str	r2, [r7, #16]
   1f0a6:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1f0a8:	2300      	movs	r3, #0
   1f0aa:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1f0ae:	68a3      	ldr	r3, [r4, #8]
   1f0b0:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1f0b2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1f0b6:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1f0b8:	2128      	movs	r1, #40	; 0x28
   1f0ba:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1f0be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f0c2:	220a      	movs	r2, #10
   1f0c4:	f362 03c6 	bfi	r3, r2, #3, #4
   1f0c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1f0cc:	f108 0008 	add.w	r0, r8, #8
   1f0d0:	f7fb f880 	bl	1a1d4 <net_buf_simple_add>
}
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	b008      	add	sp, #32
   1f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f0dc <net_ipv6_create>:
{
   1f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0de:	b083      	sub	sp, #12
   1f0e0:	4605      	mov	r5, r0
   1f0e2:	460e      	mov	r6, r1
   1f0e4:	461f      	mov	r7, r3
	if (!src) {
   1f0e6:	4614      	mov	r4, r2
   1f0e8:	b14a      	cbz	r2, 1f0fe <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f0ea:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0ec:	b94b      	cbnz	r3, 1f102 <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f0ee:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f0f0:	b9fb      	cbnz	r3, 1f132 <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0f2:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f0f4:	b9fb      	cbnz	r3, 1f136 <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f0f6:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0f8:	b1fb      	cbz	r3, 1f13a <net_ipv6_create+0x5e>
   1f0fa:	2300      	movs	r3, #0
   1f0fc:	e002      	b.n	1f104 <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1f0fe:	68c4      	ldr	r4, [r0, #12]
   1f100:	e7f3      	b.n	1f0ea <net_ipv6_create+0xe>
   1f102:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1f104:	b9db      	cbnz	r3, 1f13e <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1f106:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1f108:	2bff      	cmp	r3, #255	; 0xff
   1f10a:	d018      	beq.n	1f13e <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1f10c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1f110:	f7fc fb3c 	bl	1b78c <net_if_get_by_index>
   1f114:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1f116:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1f11a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f11e:	d114      	bne.n	1f14a <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1f120:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1f122:	9200      	str	r2, [sp, #0]
   1f124:	463a      	mov	r2, r7
   1f126:	4621      	mov	r1, r4
   1f128:	4630      	mov	r0, r6
   1f12a:	f7ff ff72 	bl	1f012 <net_ipv6_create_raw>
}
   1f12e:	b003      	add	sp, #12
   1f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f132:	2300      	movs	r3, #0
   1f134:	e7e6      	b.n	1f104 <net_ipv6_create+0x28>
   1f136:	2300      	movs	r3, #0
   1f138:	e7e4      	b.n	1f104 <net_ipv6_create+0x28>
   1f13a:	2301      	movs	r3, #1
   1f13c:	e7e2      	b.n	1f104 <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1f13e:	4639      	mov	r1, r7
   1f140:	6970      	ldr	r0, [r6, #20]
   1f142:	f7fc f8cf 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1f146:	4604      	mov	r4, r0
   1f148:	e7e0      	b.n	1f10c <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1f14a:	2206      	movs	r2, #6
   1f14c:	e7e9      	b.n	1f122 <net_ipv6_create+0x46>

0001f14e <net_ipv6_finalize_raw>:
{
   1f14e:	b538      	push	{r3, r4, r5, lr}
   1f150:	4605      	mov	r5, r0
   1f152:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1f154:	f7fd fe52 	bl	1cdfc <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1f158:	68a8      	ldr	r0, [r5, #8]
   1f15a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f15c:	2200      	movs	r2, #0
   1f15e:	e002      	b.n	1f166 <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1f160:	8999      	ldrh	r1, [r3, #12]
   1f162:	440a      	add	r2, r1
		buf = buf->frags;
   1f164:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f166:	2b00      	cmp	r3, #0
   1f168:	d1fa      	bne.n	1f160 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1f16a:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1f16c:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1f16e:	0a11      	lsrs	r1, r2, #8
   1f170:	7119      	strb	r1, [r3, #4]
   1f172:	68ab      	ldr	r3, [r5, #8]
   1f174:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1f176:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1f178:	2c11      	cmp	r4, #17
   1f17a:	d005      	beq.n	1f188 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1f17c:	2c06      	cmp	r4, #6
   1f17e:	d008      	beq.n	1f192 <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1f180:	2c3a      	cmp	r4, #58	; 0x3a
   1f182:	d00b      	beq.n	1f19c <net_ipv6_finalize_raw+0x4e>
}
   1f184:	2000      	movs	r0, #0
   1f186:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1f188:	68a9      	ldr	r1, [r5, #8]
   1f18a:	4628      	mov	r0, r5
   1f18c:	f003 fa9b 	bl	226c6 <net_udp_set_chksum>
   1f190:	e7f8      	b.n	1f184 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1f192:	68a9      	ldr	r1, [r5, #8]
   1f194:	4628      	mov	r0, r5
   1f196:	f004 f8da 	bl	2334e <net_tcp_set_chksum>
   1f19a:	e7f3      	b.n	1f184 <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1f19c:	68a9      	ldr	r1, [r5, #8]
   1f19e:	4628      	mov	r0, r5
   1f1a0:	f7fe fdf2 	bl	1dd88 <net_icmpv6_set_chksum>
   1f1a4:	e7ee      	b.n	1f184 <net_ipv6_finalize_raw+0x36>
	...

0001f1a8 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1f1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f1ac:	b08d      	sub	sp, #52	; 0x34
   1f1ae:	4680      	mov	r8, r0
   1f1b0:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f1b2:	f240 23ff 	movw	r3, #767	; 0x2ff
   1f1b6:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f1ba:	2500      	movs	r5, #0
   1f1bc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f1c0:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f1c4:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f1c8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f1cc:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f1d0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f1d4:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1f1d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f1dc:	6843      	ldr	r3, [r0, #4]
   1f1de:	689b      	ldr	r3, [r3, #8]
   1f1e0:	a908      	add	r1, sp, #32
   1f1e2:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1f1e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f1e8:	f7fd fca6 	bl	1cb38 <net_pkt_get_reserve_tx>
   1f1ec:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1f1ee:	a908      	add	r1, sp, #32
   1f1f0:	4640      	mov	r0, r8
   1f1f2:	f7fc f877 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1f1f6:	9500      	str	r5, [sp, #0]
   1f1f8:	4643      	mov	r3, r8
   1f1fa:	aa08      	add	r2, sp, #32
   1f1fc:	4601      	mov	r1, r0
   1f1fe:	4620      	mov	r0, r4
   1f200:	f7ff ff07 	bl	1f012 <net_ipv6_create_raw>
   1f204:	4604      	mov	r4, r0
   1f206:	6883      	ldr	r3, [r0, #8]
   1f208:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1f20a:	2601      	movs	r6, #1
   1f20c:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1f20e:	6883      	ldr	r3, [r0, #8]
   1f210:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1f212:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1f214:	aa0c      	add	r2, sp, #48	; 0x30
   1f216:	233a      	movs	r3, #58	; 0x3a
   1f218:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f220:	4631      	mov	r1, r6
   1f222:	f7fd fe32 	bl	1ce8a <net_pkt_append>
   1f226:	aa0c      	add	r2, sp, #48	; 0x30
   1f228:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1f22c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f230:	4631      	mov	r1, r6
   1f232:	4620      	mov	r0, r4
   1f234:	f7fd fe29 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f238:	af0c      	add	r7, sp, #48	; 0x30
   1f23a:	f240 2305 	movw	r3, #517	; 0x205
   1f23e:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f246:	463a      	mov	r2, r7
   1f248:	2102      	movs	r1, #2
   1f24a:	4620      	mov	r0, r4
   1f24c:	f7fd fe1d 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f250:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f258:	463a      	mov	r2, r7
   1f25a:	2102      	movs	r1, #2
   1f25c:	4620      	mov	r0, r4
   1f25e:	f7fd fe14 	bl	1ce8a <net_pkt_append>
   1f262:	aa0c      	add	r2, sp, #48	; 0x30
   1f264:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1f268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f26c:	4631      	mov	r1, r6
   1f26e:	4620      	mov	r0, r4
   1f270:	f7fd fe0b 	bl	1ce8a <net_pkt_append>
   1f274:	aa0c      	add	r2, sp, #48	; 0x30
   1f276:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1f27a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f27e:	4631      	mov	r1, r6
   1f280:	4620      	mov	r0, r4
   1f282:	f7fd fe02 	bl	1ce8a <net_pkt_append>
   1f286:	aa0c      	add	r2, sp, #48	; 0x30
   1f288:	238f      	movs	r3, #143	; 0x8f
   1f28a:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1f28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f292:	4631      	mov	r1, r6
   1f294:	4620      	mov	r0, r4
   1f296:	f7fd fdf8 	bl	1ce8a <net_pkt_append>
   1f29a:	aa0c      	add	r2, sp, #48	; 0x30
   1f29c:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1f2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2a4:	4631      	mov	r1, r6
   1f2a6:	4620      	mov	r0, r4
   1f2a8:	f7fd fdef 	bl	1ce8a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f2ac:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2b4:	463a      	mov	r2, r7
   1f2b6:	2102      	movs	r1, #2
   1f2b8:	4620      	mov	r0, r4
   1f2ba:	f7fd fde6 	bl	1ce8a <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1f2be:	68a3      	ldr	r3, [r4, #8]
   1f2c0:	2234      	movs	r2, #52	; 0x34
   1f2c2:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1f2c4:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f2c8:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f2cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f2d0:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f2d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1f2d8:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2e0:	463a      	mov	r2, r7
   1f2e2:	2102      	movs	r1, #2
   1f2e4:	4620      	mov	r0, r4
   1f2e6:	f7fd fdd0 	bl	1ce8a <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1f2ea:	4649      	mov	r1, r9
   1f2ec:	4620      	mov	r0, r4
   1f2ee:	f7fd fcbe 	bl	1cc6e <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1f2f2:	4629      	mov	r1, r5
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	f7ff ff2a 	bl	1f14e <net_ipv6_finalize_raw>
	if (ret < 0) {
   1f2fa:	1e05      	subs	r5, r0, #0
   1f2fc:	db35      	blt.n	1f36a <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1f2fe:	2308      	movs	r3, #8
   1f300:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1f304:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f306:	213a      	movs	r1, #58	; 0x3a
   1f308:	4620      	mov	r0, r4
   1f30a:	f7fe faf0 	bl	1d8ee <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1f30e:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1f312:	b2c5      	uxtb	r5, r0
   1f314:	213a      	movs	r1, #58	; 0x3a
   1f316:	4620      	mov	r0, r4
   1f318:	f7fe fae9 	bl	1d8ee <net_calc_chksum>
   1f31c:	43c0      	mvns	r0, r0
   1f31e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1f322:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1f324:	0a03      	lsrs	r3, r0, #8
   1f326:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1f32a:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1f32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f332:	9302      	str	r3, [sp, #8]
   1f334:	ab07      	add	r3, sp, #28
   1f336:	9301      	str	r3, [sp, #4]
   1f338:	2302      	movs	r3, #2
   1f33a:	9300      	str	r3, [sp, #0]
   1f33c:	f10d 031e 	add.w	r3, sp, #30
   1f340:	2232      	movs	r2, #50	; 0x32
   1f342:	4631      	mov	r1, r6
   1f344:	4620      	mov	r0, r4
   1f346:	f7fd fe58 	bl	1cffa <net_pkt_write>

	ret = net_send_data(pkt);
   1f34a:	4620      	mov	r0, r4
   1f34c:	f7fb f864 	bl	1a418 <net_send_data>
	if (ret < 0) {
   1f350:	1e05      	subs	r5, r0, #0
   1f352:	db0a      	blt.n	1f36a <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1f354:	4b0d      	ldr	r3, [pc, #52]	; (1f38c <send_mldv2_raw+0x1e4>)
   1f356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f358:	3201      	adds	r2, #1
   1f35a:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1f35c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1f360:	3201      	adds	r2, #1
   1f362:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1f366:	2500      	movs	r5, #0
   1f368:	e00b      	b.n	1f382 <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1f36a:	4620      	mov	r0, r4
   1f36c:	f7fd fc55 	bl	1cc1a <net_pkt_unref>
	net_stats.icmp.drop++;
   1f370:	4b06      	ldr	r3, [pc, #24]	; (1f38c <send_mldv2_raw+0x1e4>)
   1f372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1f374:	3201      	adds	r2, #1
   1f376:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1f378:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f37c:	3201      	adds	r2, #1
   1f37e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1f382:	4628      	mov	r0, r5
   1f384:	b00d      	add	sp, #52	; 0x34
   1f386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f38a:	bf00      	nop
   1f38c:	200029f0 	.word	0x200029f0

0001f390 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1f390:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f392:	b083      	sub	sp, #12
   1f394:	4605      	mov	r5, r0
   1f396:	460e      	mov	r6, r1
   1f398:	4617      	mov	r7, r2
   1f39a:	6843      	ldr	r3, [r0, #4]
   1f39c:	689b      	ldr	r3, [r3, #8]
   1f39e:	2100      	movs	r1, #0
   1f3a0:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f3a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3a6:	f7fd fbc7 	bl	1cb38 <net_pkt_get_reserve_tx>
   1f3aa:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1f3ac:	aa02      	add	r2, sp, #8
   1f3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f3b2:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f3b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3ba:	2102      	movs	r1, #2
   1f3bc:	f7fd fd65 	bl	1ce8a <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1f3c0:	2301      	movs	r3, #1
   1f3c2:	463a      	mov	r2, r7
   1f3c4:	4631      	mov	r1, r6
   1f3c6:	4620      	mov	r0, r4
   1f3c8:	f7ff fdec 	bl	1efa4 <create_mldv2>
   1f3cc:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1f3ce:	6881      	ldr	r1, [r0, #8]
   1f3d0:	4628      	mov	r0, r5
   1f3d2:	f7ff fee9 	bl	1f1a8 <send_mldv2_raw>
   1f3d6:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1f3d8:	2300      	movs	r3, #0
   1f3da:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1f3dc:	4620      	mov	r0, r4
   1f3de:	f7fd fc1c 	bl	1cc1a <net_pkt_unref>

	return ret;
}
   1f3e2:	4628      	mov	r0, r5
   1f3e4:	b003      	add	sp, #12
   1f3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f3e8 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1f3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ea:	b087      	sub	sp, #28
   1f3ec:	4605      	mov	r5, r0
   1f3ee:	6843      	ldr	r3, [r0, #4]
   1f3f0:	689b      	ldr	r3, [r3, #8]
   1f3f2:	2100      	movs	r1, #0
   1f3f4:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f3f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3fa:	f7fd fb9d 	bl	1cb38 <net_pkt_get_reserve_tx>
   1f3fe:	4606      	mov	r6, r0
   1f400:	2400      	movs	r4, #0
   1f402:	aa06      	add	r2, sp, #24
   1f404:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1f408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f40c:	2101      	movs	r1, #1
   1f40e:	f7fd fd3c 	bl	1ce8a <net_pkt_append>
	int i, count = 0;
   1f412:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f414:	e000      	b.n	1f418 <send_mld_report+0x30>
   1f416:	3401      	adds	r4, #1
   1f418:	2c04      	cmp	r4, #4
   1f41a:	dc1e      	bgt.n	1f45a <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1f41c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f420:	00d3      	lsls	r3, r2, #3
   1f422:	442b      	add	r3, r5
   1f424:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f428:	f013 0f01 	tst.w	r3, #1
   1f42c:	d0f3      	beq.n	1f416 <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1f42e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f432:	00d3      	lsls	r3, r2, #3
   1f434:	461a      	mov	r2, r3
   1f436:	442b      	add	r3, r5
   1f438:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1f43c:	f013 0f02 	tst.w	r3, #2
   1f440:	d0e9      	beq.n	1f416 <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1f442:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f446:	4429      	add	r1, r5
   1f448:	2300      	movs	r3, #0
   1f44a:	2202      	movs	r2, #2
   1f44c:	3118      	adds	r1, #24
   1f44e:	4630      	mov	r0, r6
   1f450:	f7ff fda8 	bl	1efa4 <create_mldv2>
   1f454:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1f456:	3701      	adds	r7, #1
   1f458:	e7dd      	b.n	1f416 <send_mld_report+0x2e>
	}

	if (count > 0) {
   1f45a:	2f00      	cmp	r7, #0
   1f45c:	dd16      	ble.n	1f48c <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1f45e:	68b1      	ldr	r1, [r6, #8]
   1f460:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1f464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f468:	9302      	str	r3, [sp, #8]
   1f46a:	f10d 0315 	add.w	r3, sp, #21
   1f46e:	9301      	str	r3, [sp, #4]
   1f470:	2301      	movs	r3, #1
   1f472:	9300      	str	r3, [sp, #0]
   1f474:	f10d 0316 	add.w	r3, sp, #22
   1f478:	2200      	movs	r2, #0
   1f47a:	4630      	mov	r0, r6
   1f47c:	f7fd fdbd 	bl	1cffa <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1f480:	68b1      	ldr	r1, [r6, #8]
   1f482:	4628      	mov	r0, r5
   1f484:	f7ff fe90 	bl	1f1a8 <send_mldv2_raw>

		pkt->frags = NULL;
   1f488:	2300      	movs	r3, #0
   1f48a:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1f48c:	4630      	mov	r0, r6
   1f48e:	f7fd fbc4 	bl	1cc1a <net_pkt_unref>
}
   1f492:	b007      	add	sp, #28
   1f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001f498 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1f498:	b570      	push	{r4, r5, r6, lr}
   1f49a:	b08a      	sub	sp, #40	; 0x28
   1f49c:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1f49e:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f4a0:	2200      	movs	r2, #0
   1f4a2:	e002      	b.n	1f4aa <handle_mld_query+0x12>
		bytes += buf->len;
   1f4a4:	8999      	ldrh	r1, [r3, #12]
   1f4a6:	440a      	add	r2, r1
		buf = buf->frags;
   1f4a8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d1fa      	bne.n	1f4a4 <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1f4ae:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1f4b0:	4a37      	ldr	r2, [pc, #220]	; (1f590 <handle_mld_query+0xf8>)
   1f4b2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1f4b6:	3301      	adds	r3, #1
   1f4b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f4bc:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f4c0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f4c4:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1f4c6:	3104      	adds	r1, #4
   1f4c8:	f10d 0212 	add.w	r2, sp, #18
   1f4cc:	b289      	uxth	r1, r1
   1f4ce:	4628      	mov	r0, r5
   1f4d0:	f7fd fe72 	bl	1d1b8 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1f4d4:	f10d 0316 	add.w	r3, sp, #22
   1f4d8:	aa04      	add	r2, sp, #16
   1f4da:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1f4de:	f7fd fd62 	bl	1cfa6 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1f4e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1f4e6:	2600      	movs	r6, #0
   1f4e8:	9600      	str	r6, [sp, #0]
   1f4ea:	2302      	movs	r3, #2
   1f4ec:	aa04      	add	r2, sp, #16
   1f4ee:	f7fd fd12 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1f4f2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f4f6:	ab06      	add	r3, sp, #24
   1f4f8:	9300      	str	r3, [sp, #0]
   1f4fa:	2310      	movs	r3, #16
   1f4fc:	eb0d 0203 	add.w	r2, sp, r3
   1f500:	f7fd fd09 	bl	1cf16 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1f504:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f508:	9600      	str	r6, [sp, #0]
   1f50a:	2302      	movs	r3, #2
   1f50c:	aa04      	add	r2, sp, #16
   1f50e:	f7fd fd02 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1f512:	ab05      	add	r3, sp, #20
   1f514:	aa04      	add	r2, sp, #16
   1f516:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f51a:	68a8      	ldr	r0, [r5, #8]
   1f51c:	f7fd fd43 	bl	1cfa6 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1f520:	b358      	cbz	r0, 1f57a <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f522:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1f526:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f52a:	0112      	lsls	r2, r2, #4
   1f52c:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1f52e:	4413      	add	r3, r2
   1f530:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f532:	3344      	adds	r3, #68	; 0x44
   1f534:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f536:	429c      	cmp	r4, r3
   1f538:	d307      	bcc.n	1f54a <handle_mld_query+0xb2>
   1f53a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1f53e:	d804      	bhi.n	1f54a <handle_mld_query+0xb2>
	return pkt->frags->data;
   1f540:	68ab      	ldr	r3, [r5, #8]
   1f542:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1f544:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f546:	2b01      	cmp	r3, #1
   1f548:	d006      	beq.n	1f558 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f54a:	a903      	add	r1, sp, #12
   1f54c:	4628      	mov	r0, r5
   1f54e:	f7fe fc68 	bl	1de22 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f552:	b148      	cbz	r0, 1f568 <handle_mld_query+0xd0>
   1f554:	7843      	ldrb	r3, [r0, #1]
   1f556:	b93b      	cbnz	r3, 1f568 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1f558:	f7ff fd20 	bl	1ef9c <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f55c:	2210      	movs	r2, #16
   1f55e:	4601      	mov	r1, r0
   1f560:	a806      	add	r0, sp, #24
   1f562:	f00b fa17 	bl	2a994 <memcmp>
   1f566:	b178      	cbz	r0, 1f588 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1f568:	4a09      	ldr	r2, [pc, #36]	; (1f590 <handle_mld_query+0xf8>)
   1f56a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1f56e:	3301      	adds	r3, #1
   1f570:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1f574:	2002      	movs	r0, #2
   1f576:	b00a      	add	sp, #40	; 0x28
   1f578:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1f57a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f57e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f582:	429a      	cmp	r2, r3
   1f584:	d1cd      	bne.n	1f522 <handle_mld_query+0x8a>
   1f586:	e7ef      	b.n	1f568 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1f588:	6968      	ldr	r0, [r5, #20]
   1f58a:	f7ff ff2d 	bl	1f3e8 <send_mld_report>
   1f58e:	e7eb      	b.n	1f568 <handle_mld_query+0xd0>
   1f590:	200029f0 	.word	0x200029f0

0001f594 <net_ipv6_finalize>:
{
   1f594:	b508      	push	{r3, lr}
   1f596:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1f598:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1f59c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f5a0:	d104      	bne.n	1f5ac <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1f5a2:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1f5a4:	4618      	mov	r0, r3
   1f5a6:	f7ff fdd2 	bl	1f14e <net_ipv6_finalize_raw>
}
   1f5aa:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   1f5ac:	2106      	movs	r1, #6
   1f5ae:	e7f9      	b.n	1f5a4 <net_ipv6_finalize+0x10>

0001f5b0 <net_ipv6_nbr_lookup>:
{
   1f5b0:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1f5b2:	460a      	mov	r2, r1
   1f5b4:	4601      	mov	r1, r0
   1f5b6:	4802      	ldr	r0, [pc, #8]	; (1f5c0 <net_ipv6_nbr_lookup+0x10>)
   1f5b8:	f7ff fb42 	bl	1ec40 <nbr_lookup>
}
   1f5bc:	bd08      	pop	{r3, pc}
   1f5be:	bf00      	nop
   1f5c0:	2000bde4 	.word	0x2000bde4

0001f5c4 <net_ipv6_send_na>:
{
   1f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5c8:	b093      	sub	sp, #76	; 0x4c
   1f5ca:	4605      	mov	r5, r0
   1f5cc:	468b      	mov	fp, r1
   1f5ce:	4692      	mov	sl, r2
   1f5d0:	4699      	mov	r9, r3
   1f5d2:	6843      	ldr	r3, [r0, #4]
   1f5d4:	689b      	ldr	r3, [r3, #8]
   1f5d6:	4611      	mov	r1, r2
   1f5d8:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f5da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5de:	f7fd faab 	bl	1cb38 <net_pkt_get_reserve_tx>
   1f5e2:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f5e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5e8:	f7fd fac4 	bl	1cb74 <net_pkt_get_frag>
   1f5ec:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   1f5ee:	4601      	mov	r1, r0
   1f5f0:	4620      	mov	r0, r4
   1f5f2:	f7fd fb3c 	bl	1cc6e <net_pkt_frag_add>
	pkt->iface = iface;
   1f5f6:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f5f8:	7d6b      	ldrb	r3, [r5, #21]
   1f5fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f5fe:	7d6b      	ldrb	r3, [r5, #21]
   1f600:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1f604:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f608:	220a      	movs	r2, #10
   1f60a:	f362 03c6 	bfi	r3, r2, #3, #4
   1f60e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1f612:	2328      	movs	r3, #40	; 0x28
   1f614:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   1f618:	68a3      	ldr	r3, [r4, #8]
   1f61a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1f61c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1f620:	461a      	mov	r2, r3
   1f622:	2100      	movs	r1, #0
   1f624:	1ac0      	subs	r0, r0, r3
   1f626:	f00b fa49 	bl	2aabc <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1f62a:	2300      	movs	r3, #0
   1f62c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1f62e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   1f632:	7d2b      	ldrb	r3, [r5, #20]
   1f634:	2b06      	cmp	r3, #6
   1f636:	f000 8092 	beq.w	1f75e <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   1f63a:	2b08      	cmp	r3, #8
   1f63c:	f000 808d 	beq.w	1f75a <net_ipv6_send_na+0x196>
	return 0;
   1f640:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   1f642:	f04f 0800 	mov.w	r8, #0
   1f646:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1f64a:	f106 0514 	add.w	r5, r6, #20
   1f64e:	2288      	movs	r2, #136	; 0x88
   1f650:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   1f654:	4620      	mov	r0, r4
   1f656:	f7ff fc0c 	bl	1ee72 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1f65a:	4629      	mov	r1, r5
   1f65c:	f107 0008 	add.w	r0, r7, #8
   1f660:	f7fa fdb8 	bl	1a1d4 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f664:	a901      	add	r1, sp, #4
   1f666:	4620      	mov	r0, r4
   1f668:	f7fe fdd8 	bl	1e21c <net_icmpv6_get_na_hdr>
   1f66c:	4607      	mov	r7, r0
	return pkt->frags->data;
   1f66e:	68a3      	ldr	r3, [r4, #8]
   1f670:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f674:	ad06      	add	r5, sp, #24
   1f676:	f8db 0000 	ldr.w	r0, [fp]
   1f67a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1f67e:	f8db 2008 	ldr.w	r2, [fp, #8]
   1f682:	f8db 300c 	ldr.w	r3, [fp, #12]
   1f686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f688:	ad06      	add	r5, sp, #24
   1f68a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f68c:	f8ce 0008 	str.w	r0, [lr, #8]
   1f690:	f8ce 100c 	str.w	r1, [lr, #12]
   1f694:	f8ce 2010 	str.w	r2, [lr, #16]
   1f698:	f8ce 3014 	str.w	r3, [lr, #20]
   1f69c:	68a3      	ldr	r3, [r4, #8]
   1f69e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f6a2:	ad0a      	add	r5, sp, #40	; 0x28
   1f6a4:	f8da 0000 	ldr.w	r0, [sl]
   1f6a8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f6ac:	f8da 2008 	ldr.w	r2, [sl, #8]
   1f6b0:	f8da 300c 	ldr.w	r3, [sl, #12]
   1f6b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f6b6:	ad0a      	add	r5, sp, #40	; 0x28
   1f6b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f6ba:	f8cc 0018 	str.w	r0, [ip, #24]
   1f6be:	f8cc 101c 	str.w	r1, [ip, #28]
   1f6c2:	f8cc 2020 	str.w	r2, [ip, #32]
   1f6c6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1f6ca:	ad0e      	add	r5, sp, #56	; 0x38
   1f6cc:	f8d9 0000 	ldr.w	r0, [r9]
   1f6d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1f6d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1f6d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1f6dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f6de:	ad0e      	add	r5, sp, #56	; 0x38
   1f6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f6e2:	6078      	str	r0, [r7, #4]
   1f6e4:	60b9      	str	r1, [r7, #8]
   1f6e6:	60fa      	str	r2, [r7, #12]
   1f6e8:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   1f6ea:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f7fd fd6c 	bl	1d1cc <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1f6f4:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1f6f8:	2302      	movs	r3, #2
   1f6fa:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1f6fc:	08f3      	lsrs	r3, r6, #3
   1f6fe:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1f700:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f704:	f8da 1010 	ldr.w	r1, [sl, #16]
   1f708:	301a      	adds	r0, #26
   1f70a:	f7e0 fdd9 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f70e:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f712:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1f714:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f716:	3a02      	subs	r2, #2
   1f718:	4641      	mov	r1, r8
   1f71a:	4428      	add	r0, r5
   1f71c:	f00b f9ce 	bl	2aabc <memset>
	na_hdr->flags = flags;
   1f720:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1f724:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1f726:	4639      	mov	r1, r7
   1f728:	4620      	mov	r0, r4
   1f72a:	f7fe fdac 	bl	1e286 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f72e:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1f730:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f732:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f734:	68a1      	ldr	r1, [r4, #8]
   1f736:	4620      	mov	r0, r4
   1f738:	f7fe fb26 	bl	1dd88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f73c:	4620      	mov	r0, r4
   1f73e:	f7fa fe6b 	bl	1a418 <net_send_data>
   1f742:	4540      	cmp	r0, r8
   1f744:	db0d      	blt.n	1f762 <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   1f746:	4a0d      	ldr	r2, [pc, #52]	; (1f77c <net_ipv6_send_na+0x1b8>)
   1f748:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f74c:	3301      	adds	r3, #1
   1f74e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1f752:	4640      	mov	r0, r8
}
   1f754:	b013      	add	sp, #76	; 0x4c
   1f756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1f75a:	2610      	movs	r6, #16
   1f75c:	e771      	b.n	1f642 <net_ipv6_send_na+0x7e>
		return 8;
   1f75e:	2608      	movs	r6, #8
   1f760:	e76f      	b.n	1f642 <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   1f762:	4620      	mov	r0, r4
   1f764:	f7fd fa59 	bl	1cc1a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1f768:	4a04      	ldr	r2, [pc, #16]	; (1f77c <net_ipv6_send_na+0x1b8>)
   1f76a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f76e:	3301      	adds	r3, #1
   1f770:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1f774:	f06f 0015 	mvn.w	r0, #21
   1f778:	e7ec      	b.n	1f754 <net_ipv6_send_na+0x190>
   1f77a:	bf00      	nop
   1f77c:	200029f0 	.word	0x200029f0

0001f780 <net_ipv6_nbr_set_reachable_timer>:
{
   1f780:	b508      	push	{r3, lr}
   1f782:	68c9      	ldr	r1, [r1, #12]
   1f784:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   1f788:	3114      	adds	r1, #20
   1f78a:	4802      	ldr	r0, [pc, #8]	; (1f794 <net_ipv6_nbr_set_reachable_timer+0x14>)
   1f78c:	f009 fe6a 	bl	29464 <k_delayed_work_submit_to_queue>
   1f790:	bd08      	pop	{r3, pc}
   1f792:	bf00      	nop
   1f794:	20002b10 	.word	0x20002b10

0001f798 <handle_na_input>:
{
   1f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f79c:	b090      	sub	sp, #64	; 0x40
   1f79e:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1f7a0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f7a2:	2200      	movs	r2, #0
   1f7a4:	e002      	b.n	1f7ac <handle_na_input+0x14>
		bytes += buf->len;
   1f7a6:	8999      	ldrh	r1, [r3, #12]
   1f7a8:	440a      	add	r2, r1
		buf = buf->frags;
   1f7aa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f7ac:	2b00      	cmp	r3, #0
   1f7ae:	d1fa      	bne.n	1f7a6 <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1f7b0:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1f7b2:	a90a      	add	r1, sp, #40	; 0x28
   1f7b4:	4620      	mov	r0, r4
   1f7b6:	f7fe fd31 	bl	1e21c <net_icmpv6_get_na_hdr>
   1f7ba:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   1f7bc:	4aaf      	ldr	r2, [pc, #700]	; (1fa7c <handle_na_input+0x2e4>)
   1f7be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f7c2:	3301      	adds	r3, #1
   1f7c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1f7c8:	2d41      	cmp	r5, #65	; 0x41
   1f7ca:	d904      	bls.n	1f7d6 <handle_na_input+0x3e>
	return pkt->frags->data;
   1f7cc:	68a3      	ldr	r3, [r4, #8]
   1f7ce:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f7d0:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1f7d2:	2bff      	cmp	r3, #255	; 0xff
   1f7d4:	d010      	beq.n	1f7f8 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f7d6:	a905      	add	r1, sp, #20
   1f7d8:	4620      	mov	r0, r4
   1f7da:	f7fe fb22 	bl	1de22 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f7de:	b108      	cbz	r0, 1f7e4 <handle_na_input+0x4c>
   1f7e0:	7843      	ldrb	r3, [r0, #1]
   1f7e2:	b1cb      	cbz	r3, 1f818 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   1f7e4:	4aa5      	ldr	r2, [pc, #660]	; (1fa7c <handle_na_input+0x2e4>)
   1f7e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f7ea:	3301      	adds	r3, #1
   1f7ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1f7f0:	2002      	movs	r0, #2
}
   1f7f2:	b010      	add	sp, #64	; 0x40
   1f7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   1f7f8:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f7fa:	2bff      	cmp	r3, #255	; 0xff
   1f7fc:	d0eb      	beq.n	1f7d6 <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f7fe:	a905      	add	r1, sp, #20
   1f800:	4620      	mov	r0, r4
   1f802:	f7fe fd0b 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f806:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1f808:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f80c:	d004      	beq.n	1f818 <handle_na_input+0x80>
   1f80e:	68a3      	ldr	r3, [r4, #8]
   1f810:	689b      	ldr	r3, [r3, #8]
   1f812:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   1f814:	2bff      	cmp	r3, #255	; 0xff
   1f816:	d0de      	beq.n	1f7d6 <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   1f818:	2314      	movs	r3, #20
   1f81a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f81e:	a90f      	add	r1, sp, #60	; 0x3c
   1f820:	4620      	mov	r0, r4
   1f822:	f7fe fcc9 	bl	1e1b8 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   1f826:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1f828:	2600      	movs	r6, #0
	while (buf) {
   1f82a:	b11b      	cbz	r3, 1f834 <handle_na_input+0x9c>
		bytes += buf->len;
   1f82c:	899a      	ldrh	r2, [r3, #12]
   1f82e:	4416      	add	r6, r2
		buf = buf->frags;
   1f830:	681b      	ldr	r3, [r3, #0]
   1f832:	e7fa      	b.n	1f82a <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1f834:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   1f836:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f838:	e00b      	b.n	1f852 <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   1f83a:	00db      	lsls	r3, r3, #3
   1f83c:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1f83e:	4413      	add	r3, r2
   1f840:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   1f842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1f846:	4293      	cmp	r3, r2
   1f848:	d9cc      	bls.n	1f7e4 <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f84a:	a90f      	add	r1, sp, #60	; 0x3c
   1f84c:	4620      	mov	r0, r4
   1f84e:	f7fe fcb3 	bl	1e1b8 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f852:	b190      	cbz	r0, 1f87a <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   1f854:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   1f858:	4296      	cmp	r6, r2
   1f85a:	d90e      	bls.n	1f87a <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   1f85c:	7843      	ldrb	r3, [r0, #1]
   1f85e:	b163      	cbz	r3, 1f87a <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   1f860:	7801      	ldrb	r1, [r0, #0]
   1f862:	2902      	cmp	r1, #2
   1f864:	d1e9      	bne.n	1f83a <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f866:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f86a:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f86e:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   1f870:	4415      	add	r5, r2
   1f872:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f874:	3506      	adds	r5, #6
   1f876:	b2ad      	uxth	r5, r5
			break;
   1f878:	e7df      	b.n	1f83a <handle_na_input+0xa2>
	return pkt->iface;
   1f87a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1f87e:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f882:	2600      	movs	r6, #0
   1f884:	e003      	b.n	1f88e <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   1f886:	f1ba 0f00 	cmp.w	sl, #0
   1f88a:	d11f      	bne.n	1f8cc <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f88c:	3601      	adds	r6, #1
   1f88e:	2e02      	cmp	r6, #2
   1f890:	dc23      	bgt.n	1f8da <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   1f892:	236c      	movs	r3, #108	; 0x6c
   1f894:	fb03 8306 	mla	r3, r3, r6, r8
   1f898:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   1f89c:	f1ba 0f00 	cmp.w	sl, #0
   1f8a0:	d0f4      	beq.n	1f88c <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1f8a2:	236c      	movs	r3, #108	; 0x6c
   1f8a4:	fb03 8306 	mla	r3, r3, r6, r8
   1f8a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1f8aa:	2b0a      	cmp	r3, #10
   1f8ac:	d1ee      	bne.n	1f88c <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1f8ae:	216c      	movs	r1, #108	; 0x6c
   1f8b0:	fb01 f106 	mul.w	r1, r1, r6
   1f8b4:	3120      	adds	r1, #32
   1f8b6:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   1f8b8:	2210      	movs	r2, #16
   1f8ba:	4411      	add	r1, r2
   1f8bc:	4648      	mov	r0, r9
   1f8be:	f00b f869 	bl	2a994 <memcmp>
   1f8c2:	2800      	cmp	r0, #0
   1f8c4:	d0df      	beq.n	1f886 <handle_na_input+0xee>
		return false;
   1f8c6:	f04f 0a00 	mov.w	sl, #0
   1f8ca:	e7dc      	b.n	1f886 <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   1f8cc:	236c      	movs	r3, #108	; 0x6c
   1f8ce:	fb03 f306 	mul.w	r3, r3, r6
   1f8d2:	3320      	adds	r3, #32
   1f8d4:	4443      	add	r3, r8
   1f8d6:	330c      	adds	r3, #12
   1f8d8:	e000      	b.n	1f8dc <handle_na_input+0x144>
	return NULL;
   1f8da:	2300      	movs	r3, #0
	if (ifaddr) {
   1f8dc:	b17b      	cbz	r3, 1f8fe <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1f8de:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   1f8e2:	2b00      	cmp	r3, #0
   1f8e4:	f47f af7e 	bne.w	1f7e4 <handle_na_input+0x4c>
   1f8e8:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1f8ea:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   1f8ec:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1f8f0:	429a      	cmp	r2, r3
   1f8f2:	f43f af77 	beq.w	1f7e4 <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   1f8f6:	4649      	mov	r1, r9
   1f8f8:	f7fb fa0a 	bl	1ad10 <net_if_ipv6_dad_failed>
   1f8fc:	e772      	b.n	1f7e4 <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   1f8fe:	2300      	movs	r3, #0
   1f900:	9303      	str	r3, [sp, #12]
   1f902:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1f904:	1d3a      	adds	r2, r7, #4
   1f906:	6961      	ldr	r1, [r4, #20]
   1f908:	485d      	ldr	r0, [pc, #372]	; (1fa80 <handle_na_input+0x2e8>)
   1f90a:	f7ff f999 	bl	1ec40 <nbr_lookup>
	if (!nbr) {
   1f90e:	4606      	mov	r6, r0
   1f910:	2800      	cmp	r0, #0
   1f912:	f000 8107 	beq.w	1fb24 <handle_na_input+0x38c>
	if (tllao_offset) {
   1f916:	b995      	cbnz	r5, 1f93e <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f918:	7873      	ldrb	r3, [r6, #1]
   1f91a:	2bff      	cmp	r3, #255	; 0xff
   1f91c:	d135      	bne.n	1f98a <handle_na_input+0x1f2>
		if (!tllao_offset) {
   1f91e:	bb2d      	cbnz	r5, 1f96c <handle_na_input+0x1d4>
			return false;
   1f920:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   1f922:	2b00      	cmp	r3, #0
   1f924:	f43f af5e 	beq.w	1f7e4 <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   1f928:	4620      	mov	r0, r4
   1f92a:	f7fd f976 	bl	1cc1a <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   1f92e:	4a53      	ldr	r2, [pc, #332]	; (1fa7c <handle_na_input+0x2e4>)
   1f930:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f934:	3301      	adds	r3, #1
   1f936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   1f93a:	2000      	movs	r0, #0
   1f93c:	e759      	b.n	1f7f2 <handle_na_input+0x5a>
   1f93e:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1f940:	7d1b      	ldrb	r3, [r3, #20]
   1f942:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1f946:	f10d 020e 	add.w	r2, sp, #14
   1f94a:	9200      	str	r2, [sp, #0]
   1f94c:	f10d 020a 	add.w	r2, sp, #10
   1f950:	4629      	mov	r1, r5
   1f952:	68a0      	ldr	r0, [r4, #8]
   1f954:	f7fd fadf 	bl	1cf16 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1f958:	2800      	cmp	r0, #0
   1f95a:	d1dd      	bne.n	1f918 <handle_na_input+0x180>
   1f95c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1f960:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f964:	429a      	cmp	r2, r3
   1f966:	d1d7      	bne.n	1f918 <handle_na_input+0x180>
			return false;
   1f968:	2300      	movs	r3, #0
   1f96a:	e7da      	b.n	1f922 <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   1f96c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f970:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1f974:	aa10      	add	r2, sp, #64	; 0x40
   1f976:	f10d 030e 	add.w	r3, sp, #14
   1f97a:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1f97e:	6961      	ldr	r1, [r4, #20]
   1f980:	4630      	mov	r0, r6
   1f982:	f7fe ff77 	bl	1e874 <net_nbr_link>
   1f986:	2800      	cmp	r0, #0
   1f988:	d14a      	bne.n	1fa20 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1f98a:	7870      	ldrb	r0, [r6, #1]
   1f98c:	f7fe ffd8 	bl	1e940 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1f990:	4680      	mov	r8, r0
   1f992:	2800      	cmp	r0, #0
   1f994:	f000 80c8 	beq.w	1fb28 <handle_na_input+0x390>
	if (tllao_offset) {
   1f998:	2d00      	cmp	r5, #0
   1f99a:	d145      	bne.n	1fa28 <handle_na_input+0x290>
	bool lladdr_changed = false;
   1f99c:	2700      	movs	r7, #0
   1f99e:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1f9a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1f9a4:	2b00      	cmp	r3, #0
   1f9a6:	d155      	bne.n	1fa54 <handle_na_input+0x2bc>
		if (!tllao_offset) {
   1f9a8:	2d00      	cmp	r5, #0
   1f9aa:	f000 80bf 	beq.w	1fb2c <handle_na_input+0x394>
		if (lladdr_changed) {
   1f9ae:	b11f      	cbz	r7, 1f9b8 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1f9b0:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f9b4:	2a06      	cmp	r2, #6
   1f9b6:	d941      	bls.n	1fa3c <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f9b8:	a905      	add	r1, sp, #20
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	f7fe fc2e 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f9c0:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1f9c2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f9c6:	d040      	beq.n	1fa4a <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1f9c8:	2101      	movs	r1, #1
   1f9ca:	4630      	mov	r0, r6
   1f9cc:	f7fe ffc0 	bl	1e950 <ipv6_nbr_set_state>
   1f9d0:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1f9d2:	2200      	movs	r2, #0
   1f9d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   1f9d8:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1f9da:	3014      	adds	r0, #20
   1f9dc:	f009 fce8 	bl	293b0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1f9e0:	4631      	mov	r1, r6
   1f9e2:	6960      	ldr	r0, [r4, #20]
   1f9e4:	f7ff fecc 	bl	1f780 <net_ipv6_nbr_set_reachable_timer>
   1f9e8:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f9ea:	a905      	add	r1, sp, #20
   1f9ec:	4620      	mov	r0, r4
   1f9ee:	f7fe fc15 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1f9f2:	7803      	ldrb	r3, [r0, #0]
   1f9f4:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1f9f6:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1f9fa:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   1f9fc:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   1f9fe:	2d00      	cmp	r5, #0
   1fa00:	f000 8098 	beq.w	1fb34 <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   1fa04:	4628      	mov	r0, r5
   1fa06:	f7fa fd07 	bl	1a418 <net_send_data>
   1fa0a:	2800      	cmp	r0, #0
   1fa0c:	f2c0 8086 	blt.w	1fb1c <handle_na_input+0x384>
   1fa10:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1fa12:	2200      	movs	r2, #0
   1fa14:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   1fa16:	4628      	mov	r0, r5
   1fa18:	f7fd f8ff 	bl	1cc1a <net_pkt_unref>
	return true;
   1fa1c:	2301      	movs	r3, #1
   1fa1e:	e780      	b.n	1f922 <handle_na_input+0x18a>
			nbr_free(nbr);
   1fa20:	4630      	mov	r0, r6
   1fa22:	f7ff fa53 	bl	1eecc <nbr_free>
   1fa26:	e77b      	b.n	1f920 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   1fa28:	7842      	ldrb	r2, [r0, #1]
   1fa2a:	1c81      	adds	r1, r0, #2
   1fa2c:	f10d 000e 	add.w	r0, sp, #14
   1fa30:	f00a ffb0 	bl	2a994 <memcmp>
   1fa34:	1c07      	adds	r7, r0, #0
   1fa36:	bf18      	it	ne
   1fa38:	2701      	movne	r7, #1
   1fa3a:	e7b0      	b.n	1f99e <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fa3c:	f10d 010e 	add.w	r1, sp, #14
   1fa40:	f108 0002 	add.w	r0, r8, #2
   1fa44:	f7e0 fc3c 	bl	2c0 <memcpy>
   1fa48:	e7b6      	b.n	1f9b8 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fa4a:	2102      	movs	r1, #2
   1fa4c:	4630      	mov	r0, r6
   1fa4e:	f7fe ff7f 	bl	1e950 <ipv6_nbr_set_state>
   1fa52:	e7c9      	b.n	1f9e8 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa54:	a905      	add	r1, sp, #20
   1fa56:	4620      	mov	r0, r4
   1fa58:	f7fe fbe0 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa5c:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   1fa5e:	f013 0f20 	tst.w	r3, #32
   1fa62:	d10f      	bne.n	1fa84 <handle_na_input+0x2ec>
   1fa64:	b177      	cbz	r7, 1fa84 <handle_na_input+0x2ec>
   1fa66:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   1fa68:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fa6c:	2b01      	cmp	r3, #1
   1fa6e:	d15f      	bne.n	1fb30 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fa70:	2102      	movs	r1, #2
   1fa72:	4630      	mov	r0, r6
   1fa74:	f7fe ff6c 	bl	1e950 <ipv6_nbr_set_state>
		return false;
   1fa78:	2300      	movs	r3, #0
   1fa7a:	e752      	b.n	1f922 <handle_na_input+0x18a>
   1fa7c:	200029f0 	.word	0x200029f0
   1fa80:	2000bde4 	.word	0x2000bde4
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa84:	a905      	add	r1, sp, #20
   1fa86:	4620      	mov	r0, r4
   1fa88:	f7fe fbc8 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa8c:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fa8e:	f013 0f20 	tst.w	r3, #32
   1fa92:	d018      	beq.n	1fac6 <handle_na_input+0x32e>
		if (lladdr_changed) {
   1fa94:	b14f      	cbz	r7, 1faaa <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1fa96:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fa9a:	2a06      	cmp	r2, #6
   1fa9c:	d805      	bhi.n	1faaa <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fa9e:	f10d 010e 	add.w	r1, sp, #14
   1faa2:	f108 0002 	add.w	r0, r8, #2
   1faa6:	f7e0 fc0b 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1faaa:	a905      	add	r1, sp, #20
   1faac:	4620      	mov	r0, r4
   1faae:	f7fe fbb5 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fab2:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1fab4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fab8:	d11e      	bne.n	1faf8 <handle_na_input+0x360>
			if (lladdr_changed) {
   1faba:	b17f      	cbz	r7, 1fadc <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   1fabc:	2102      	movs	r1, #2
   1fabe:	4630      	mov	r0, r6
   1fac0:	f7fe ff46 	bl	1e950 <ipv6_nbr_set_state>
   1fac4:	e00a      	b.n	1fadc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fac6:	a905      	add	r1, sp, #20
   1fac8:	4620      	mov	r0, r4
   1faca:	f7fe fba7 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1face:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fad0:	f013 0f20 	tst.w	r3, #32
   1fad4:	d102      	bne.n	1fadc <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1fad6:	b10d      	cbz	r5, 1fadc <handle_na_input+0x344>
   1fad8:	2f00      	cmp	r7, #0
   1fada:	d0db      	beq.n	1fa94 <handle_na_input+0x2fc>
   1fadc:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1fade:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1fae2:	b9b3      	cbnz	r3, 1fb12 <handle_na_input+0x37a>
   1fae4:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fae6:	a905      	add	r1, sp, #20
   1fae8:	4620      	mov	r0, r4
   1faea:	f7fe fb97 	bl	1e21c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1faee:	7803      	ldrb	r3, [r0, #0]
   1faf0:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1faf2:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1faf6:	e780      	b.n	1f9fa <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1faf8:	2101      	movs	r1, #1
   1fafa:	4630      	mov	r0, r6
   1fafc:	f7fe ff28 	bl	1e950 <ipv6_nbr_set_state>
   1fb00:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1fb02:	3014      	adds	r0, #20
   1fb04:	f009 fc54 	bl	293b0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1fb08:	4631      	mov	r1, r6
   1fb0a:	6960      	ldr	r0, [r4, #20]
   1fb0c:	f7ff fe38 	bl	1f780 <net_ipv6_nbr_set_reachable_timer>
   1fb10:	e7e4      	b.n	1fadc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fb12:	a905      	add	r1, sp, #20
   1fb14:	4620      	mov	r0, r4
   1fb16:	f7fe fb81 	bl	1e21c <net_icmpv6_get_na_hdr>
   1fb1a:	e7e3      	b.n	1fae4 <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1fb1c:	68f0      	ldr	r0, [r6, #12]
   1fb1e:	f7ff f8af 	bl	1ec80 <nbr_clear_ns_pending>
   1fb22:	e778      	b.n	1fa16 <handle_na_input+0x27e>
		return false;
   1fb24:	2300      	movs	r3, #0
   1fb26:	e6fc      	b.n	1f922 <handle_na_input+0x18a>
		return false;
   1fb28:	2300      	movs	r3, #0
   1fb2a:	e6fa      	b.n	1f922 <handle_na_input+0x18a>
			return false;
   1fb2c:	2300      	movs	r3, #0
   1fb2e:	e6f8      	b.n	1f922 <handle_na_input+0x18a>
		return false;
   1fb30:	2300      	movs	r3, #0
   1fb32:	e6f6      	b.n	1f922 <handle_na_input+0x18a>
	return true;
   1fb34:	2301      	movs	r3, #1
   1fb36:	e6f4      	b.n	1f922 <handle_na_input+0x18a>

0001fb38 <net_ipv6_send_ns>:
{
   1fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb3c:	b09d      	sub	sp, #116	; 0x74
   1fb3e:	4605      	mov	r5, r0
   1fb40:	9101      	str	r1, [sp, #4]
   1fb42:	4691      	mov	r9, r2
   1fb44:	461e      	mov	r6, r3
   1fb46:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1fb48:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fb4c:	6843      	ldr	r3, [r0, #4]
   1fb4e:	689b      	ldr	r3, [r3, #8]
   1fb50:	4631      	mov	r1, r6
   1fb52:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1fb54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb58:	f7fc ffee 	bl	1cb38 <net_pkt_get_reserve_tx>
   1fb5c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1fb5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb62:	f7fd f807 	bl	1cb74 <net_pkt_get_frag>
   1fb66:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   1fb68:	4601      	mov	r1, r0
   1fb6a:	4620      	mov	r0, r4
   1fb6c:	f7fd f87f 	bl	1cc6e <net_pkt_frag_add>
	pkt->iface = iface;
   1fb70:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fb72:	7d6b      	ldrb	r3, [r5, #21]
   1fb74:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fb78:	7d6b      	ldrb	r3, [r5, #21]
   1fb7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1fb7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fb82:	220a      	movs	r2, #10
   1fb84:	f362 03c6 	bfi	r3, r2, #3, #4
   1fb88:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1fb8c:	2328      	movs	r3, #40	; 0x28
   1fb8e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   1fb92:	2500      	movs	r5, #0
   1fb94:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fb98:	68a3      	ldr	r3, [r4, #8]
   1fb9a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1fb9c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1fba0:	461a      	mov	r2, r3
   1fba2:	4629      	mov	r1, r5
   1fba4:	1ac0      	subs	r0, r0, r3
   1fba6:	f00a ff89 	bl	2aabc <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1fbaa:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1fbac:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   1fbb0:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   1fbb2:	7d1b      	ldrb	r3, [r3, #20]
   1fbb4:	2b06      	cmp	r3, #6
   1fbb6:	f000 808b 	beq.w	1fcd0 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   1fbba:	2b08      	cmp	r3, #8
   1fbbc:	f000 8085 	beq.w	1fcca <net_ipv6_send_ns+0x192>
	return 0;
   1fbc0:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1fbc4:	2287      	movs	r2, #135	; 0x87
   1fbc6:	f108 0114 	add.w	r1, r8, #20
   1fbca:	4620      	mov	r0, r4
   1fbcc:	f7ff f951 	bl	1ee72 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1fbd0:	f10a 0a08 	add.w	sl, sl, #8
   1fbd4:	2114      	movs	r1, #20
   1fbd6:	4650      	mov	r0, sl
   1fbd8:	f7fa fafc 	bl	1a1d4 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1fbdc:	a903      	add	r1, sp, #12
   1fbde:	4620      	mov	r0, r4
   1fbe0:	f7fe fa8e 	bl	1e100 <net_icmpv6_get_ns_hdr>
   1fbe4:	4605      	mov	r5, r0
	if (!dst) {
   1fbe6:	2e00      	cmp	r6, #0
   1fbe8:	d075      	beq.n	1fcd6 <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   1fbea:	68a3      	ldr	r3, [r4, #8]
   1fbec:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fbf0:	f10d 0c20 	add.w	ip, sp, #32
   1fbf4:	6830      	ldr	r0, [r6, #0]
   1fbf6:	6871      	ldr	r1, [r6, #4]
   1fbf8:	68b2      	ldr	r2, [r6, #8]
   1fbfa:	68f3      	ldr	r3, [r6, #12]
   1fbfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1fc00:	ae08      	add	r6, sp, #32
   1fc02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fc04:	f8ce 0018 	str.w	r0, [lr, #24]
   1fc08:	f8ce 101c 	str.w	r1, [lr, #28]
   1fc0c:	f8ce 2020 	str.w	r2, [lr, #32]
   1fc10:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1fc14:	ae0c      	add	r6, sp, #48	; 0x30
   1fc16:	6838      	ldr	r0, [r7, #0]
   1fc18:	6879      	ldr	r1, [r7, #4]
   1fc1a:	68ba      	ldr	r2, [r7, #8]
   1fc1c:	68fb      	ldr	r3, [r7, #12]
   1fc1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fc20:	1d2f      	adds	r7, r5, #4
   1fc22:	ae0c      	add	r6, sp, #48	; 0x30
   1fc24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fc26:	6068      	str	r0, [r5, #4]
   1fc28:	6079      	str	r1, [r7, #4]
   1fc2a:	60ba      	str	r2, [r7, #8]
   1fc2c:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1fc2e:	4629      	mov	r1, r5
   1fc30:	4620      	mov	r0, r4
   1fc32:	f7fe fa89 	bl	1e148 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1fc36:	f1bb 0f00 	cmp.w	fp, #0
   1fc3a:	d06a      	beq.n	1fd12 <net_ipv6_send_ns+0x1da>
   1fc3c:	68a3      	ldr	r3, [r4, #8]
   1fc3e:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fc40:	f7ff f9ac 	bl	1ef9c <net_ipv6_unspecified_address>
   1fc44:	4603      	mov	r3, r0
   1fc46:	ae10      	add	r6, sp, #64	; 0x40
   1fc48:	6800      	ldr	r0, [r0, #0]
   1fc4a:	6859      	ldr	r1, [r3, #4]
   1fc4c:	689a      	ldr	r2, [r3, #8]
   1fc4e:	68db      	ldr	r3, [r3, #12]
   1fc50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fc52:	ae10      	add	r6, sp, #64	; 0x40
   1fc54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fc56:	60b8      	str	r0, [r7, #8]
   1fc58:	60f9      	str	r1, [r7, #12]
   1fc5a:	613a      	str	r2, [r7, #16]
   1fc5c:	617b      	str	r3, [r7, #20]
   1fc5e:	68a3      	ldr	r3, [r4, #8]
   1fc60:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1fc62:	795a      	ldrb	r2, [r3, #5]
   1fc64:	eba2 0808 	sub.w	r8, r2, r8
   1fc68:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1fc6c:	68a1      	ldr	r1, [r4, #8]
   1fc6e:	4620      	mov	r0, r4
   1fc70:	f7fe f88a 	bl	1dd88 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1fc74:	3504      	adds	r5, #4
   1fc76:	462a      	mov	r2, r5
   1fc78:	6961      	ldr	r1, [r4, #20]
   1fc7a:	486f      	ldr	r0, [pc, #444]	; (1fe38 <net_ipv6_send_ns+0x300>)
   1fc7c:	f7fe ffe0 	bl	1ec40 <nbr_lookup>
	if (!nbr) {
   1fc80:	4606      	mov	r6, r0
   1fc82:	2800      	cmp	r0, #0
   1fc84:	f000 80ad 	beq.w	1fde2 <net_ipv6_send_ns+0x2aa>
	if (pending) {
   1fc88:	9801      	ldr	r0, [sp, #4]
   1fc8a:	b170      	cbz	r0, 1fcaa <net_ipv6_send_ns+0x172>
   1fc8c:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1fc8e:	682b      	ldr	r3, [r5, #0]
   1fc90:	2b00      	cmp	r3, #0
   1fc92:	f040 80b1 	bne.w	1fdf8 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1fc96:	f7fc ffb1 	bl	1cbfc <net_pkt_ref>
   1fc9a:	6028      	str	r0, [r5, #0]
   1fc9c:	68f1      	ldr	r1, [r6, #12]
   1fc9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fca2:	313c      	adds	r1, #60	; 0x3c
   1fca4:	4865      	ldr	r0, [pc, #404]	; (1fe3c <net_ipv6_send_ns+0x304>)
   1fca6:	f009 fbdd 	bl	29464 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1fcaa:	4620      	mov	r0, r4
   1fcac:	f7fa fbb4 	bl	1a418 <net_send_data>
   1fcb0:	2800      	cmp	r0, #0
   1fcb2:	f2c0 80b0 	blt.w	1fe16 <net_ipv6_send_ns+0x2de>
   1fcb6:	4a62      	ldr	r2, [pc, #392]	; (1fe40 <net_ipv6_send_ns+0x308>)
   1fcb8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1fcbc:	3301      	adds	r3, #1
   1fcbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1fcc2:	2000      	movs	r0, #0
}
   1fcc4:	b01d      	add	sp, #116	; 0x74
   1fcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1fcca:	f04f 0810 	mov.w	r8, #16
   1fcce:	e779      	b.n	1fbc4 <net_ipv6_send_ns+0x8c>
		return 8;
   1fcd0:	f04f 0808 	mov.w	r8, #8
   1fcd4:	e776      	b.n	1fbc4 <net_ipv6_send_ns+0x8c>
   1fcd6:	68a3      	ldr	r3, [r4, #8]
   1fcd8:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   1fcda:	21ff      	movs	r1, #255	; 0xff
   1fcdc:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   1fcde:	2202      	movs	r2, #2
   1fce0:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1fce2:	2200      	movs	r2, #0
   1fce4:	769a      	strb	r2, [r3, #26]
   1fce6:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1fce8:	771a      	strb	r2, [r3, #28]
   1fcea:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1fcec:	779a      	strb	r2, [r3, #30]
   1fcee:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1fcf0:	f883 2020 	strb.w	r2, [r3, #32]
   1fcf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   1fcf8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1fcfc:	2201      	movs	r2, #1
   1fcfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1fd02:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   1fd06:	7b7a      	ldrb	r2, [r7, #13]
   1fd08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1fd0c:	89fa      	ldrh	r2, [r7, #14]
   1fd0e:	84da      	strh	r2, [r3, #38]	; 0x26
   1fd10:	e780      	b.n	1fc14 <net_ipv6_send_ns+0xdc>
		if (src) {
   1fd12:	f1b9 0f00 	cmp.w	r9, #0
   1fd16:	d025      	beq.n	1fd64 <net_ipv6_send_ns+0x22c>
   1fd18:	68a3      	ldr	r3, [r4, #8]
   1fd1a:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fd1e:	ae14      	add	r6, sp, #80	; 0x50
   1fd20:	f8d9 0000 	ldr.w	r0, [r9]
   1fd24:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1fd28:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1fd2c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1fd30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fd32:	ae14      	add	r6, sp, #80	; 0x50
   1fd34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fd36:	f8ce 0008 	str.w	r0, [lr, #8]
   1fd3a:	f8ce 100c 	str.w	r1, [lr, #12]
   1fd3e:	f8ce 2010 	str.w	r2, [lr, #16]
   1fd42:	f8ce 3014 	str.w	r3, [lr, #20]
   1fd46:	68a3      	ldr	r3, [r4, #8]
   1fd48:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd4a:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd4c:	b9fa      	cbnz	r2, 1fd8e <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd4e:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd50:	2a00      	cmp	r2, #0
   1fd52:	d140      	bne.n	1fdd6 <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd54:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd56:	2a00      	cmp	r2, #0
   1fd58:	d13f      	bne.n	1fdda <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fd5a:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd5c:	2b00      	cmp	r3, #0
   1fd5e:	d03e      	beq.n	1fdde <net_ipv6_send_ns+0x2a6>
   1fd60:	2300      	movs	r3, #0
   1fd62:	e015      	b.n	1fd90 <net_ipv6_send_ns+0x258>
   1fd64:	68a3      	ldr	r3, [r4, #8]
   1fd66:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fd68:	f107 0118 	add.w	r1, r7, #24
   1fd6c:	6960      	ldr	r0, [r4, #20]
   1fd6e:	f7fb fab9 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   1fd72:	4603      	mov	r3, r0
   1fd74:	ae18      	add	r6, sp, #96	; 0x60
   1fd76:	6800      	ldr	r0, [r0, #0]
   1fd78:	6859      	ldr	r1, [r3, #4]
   1fd7a:	689a      	ldr	r2, [r3, #8]
   1fd7c:	68db      	ldr	r3, [r3, #12]
   1fd7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fd80:	ae18      	add	r6, sp, #96	; 0x60
   1fd82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fd84:	60b8      	str	r0, [r7, #8]
   1fd86:	60f9      	str	r1, [r7, #12]
   1fd88:	613a      	str	r2, [r7, #16]
   1fd8a:	617b      	str	r3, [r7, #20]
   1fd8c:	e7db      	b.n	1fd46 <net_ipv6_send_ns+0x20e>
   1fd8e:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1fd90:	bbab      	cbnz	r3, 1fdfe <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   1fd92:	4641      	mov	r1, r8
   1fd94:	4650      	mov	r0, sl
   1fd96:	f7fa fa1d 	bl	1a1d4 <net_buf_simple_add>
	return pkt->iface;
   1fd9a:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1fd9e:	4620      	mov	r0, r4
   1fda0:	f7fd fa14 	bl	1d1cc <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1fda4:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1fda8:	2301      	movs	r3, #1
   1fdaa:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1fdac:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   1fdb0:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1fdb2:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fdb6:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1fdba:	301a      	adds	r0, #26
   1fdbc:	f7e0 fa80 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fdc0:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fdc4:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1fdc6:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fdca:	3a02      	subs	r2, #2
   1fdcc:	2100      	movs	r1, #0
   1fdce:	4430      	add	r0, r6
   1fdd0:	f00a fe74 	bl	2aabc <memset>
   1fdd4:	e74a      	b.n	1fc6c <net_ipv6_send_ns+0x134>
   1fdd6:	2300      	movs	r3, #0
   1fdd8:	e7da      	b.n	1fd90 <net_ipv6_send_ns+0x258>
   1fdda:	2300      	movs	r3, #0
   1fddc:	e7d8      	b.n	1fd90 <net_ipv6_send_ns+0x258>
   1fdde:	2301      	movs	r3, #1
   1fde0:	e7d6      	b.n	1fd90 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1fde2:	2300      	movs	r3, #0
   1fde4:	461a      	mov	r2, r3
   1fde6:	4629      	mov	r1, r5
   1fde8:	6960      	ldr	r0, [r4, #20]
   1fdea:	f7fe ffab 	bl	1ed44 <nbr_new>
		if (!nbr) {
   1fdee:	4606      	mov	r6, r0
   1fdf0:	2800      	cmp	r0, #0
   1fdf2:	f47f af49 	bne.w	1fc88 <net_ipv6_send_ns+0x150>
   1fdf6:	e002      	b.n	1fdfe <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   1fdf8:	9801      	ldr	r0, [sp, #4]
   1fdfa:	f7fc ff0e 	bl	1cc1a <net_pkt_unref>
	net_pkt_unref(pkt);
   1fdfe:	4620      	mov	r0, r4
   1fe00:	f7fc ff0b 	bl	1cc1a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1fe04:	4a0e      	ldr	r2, [pc, #56]	; (1fe40 <net_ipv6_send_ns+0x308>)
   1fe06:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1fe0a:	3301      	adds	r3, #1
   1fe0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1fe10:	f06f 0015 	mvn.w	r0, #21
   1fe14:	e756      	b.n	1fcc4 <net_ipv6_send_ns+0x18c>
		if (pending) {
   1fe16:	9b01      	ldr	r3, [sp, #4]
   1fe18:	2b00      	cmp	r3, #0
   1fe1a:	d0f0      	beq.n	1fdfe <net_ipv6_send_ns+0x2c6>
   1fe1c:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fe1e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fe22:	f009 fac5 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   1fe26:	6828      	ldr	r0, [r5, #0]
   1fe28:	2800      	cmp	r0, #0
   1fe2a:	d0e8      	beq.n	1fdfe <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   1fe2c:	f7fc fef5 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   1fe30:	2300      	movs	r3, #0
   1fe32:	602b      	str	r3, [r5, #0]
   1fe34:	e7e3      	b.n	1fdfe <net_ipv6_send_ns+0x2c6>
   1fe36:	bf00      	nop
   1fe38:	2000bde4 	.word	0x2000bde4
   1fe3c:	20002b10 	.word	0x20002b10
   1fe40:	200029f0 	.word	0x200029f0

0001fe44 <net_ipv6_nbr_add>:
{
   1fe44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fe48:	b083      	sub	sp, #12
   1fe4a:	4605      	mov	r5, r0
   1fe4c:	460e      	mov	r6, r1
   1fe4e:	4617      	mov	r7, r2
   1fe50:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fe52:	460a      	mov	r2, r1
   1fe54:	4601      	mov	r1, r0
   1fe56:	482c      	ldr	r0, [pc, #176]	; (1ff08 <net_ipv6_nbr_add+0xc4>)
   1fe58:	f7fe fef2 	bl	1ec40 <nbr_lookup>
	if (!nbr) {
   1fe5c:	4604      	mov	r4, r0
   1fe5e:	b180      	cbz	r0, 1fe82 <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fe60:	463a      	mov	r2, r7
   1fe62:	4629      	mov	r1, r5
   1fe64:	4620      	mov	r0, r4
   1fe66:	f7fe fd05 	bl	1e874 <net_nbr_link>
   1fe6a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1fe6e:	d013      	beq.n	1fe98 <net_ipv6_nbr_add+0x54>
   1fe70:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1fe72:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fe76:	2b00      	cmp	r3, #0
   1fe78:	d03c      	beq.n	1fef4 <net_ipv6_nbr_add+0xb0>
}
   1fe7a:	4620      	mov	r0, r4
   1fe7c:	b003      	add	sp, #12
   1fe7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   1fe82:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1fe86:	4642      	mov	r2, r8
   1fe88:	4631      	mov	r1, r6
   1fe8a:	4628      	mov	r0, r5
   1fe8c:	f7fe ff5a 	bl	1ed44 <nbr_new>
		if (!nbr) {
   1fe90:	4604      	mov	r4, r0
   1fe92:	2800      	cmp	r0, #0
   1fe94:	d1e4      	bne.n	1fe60 <net_ipv6_nbr_add+0x1c>
   1fe96:	e7f0      	b.n	1fe7a <net_ipv6_nbr_add+0x36>
   1fe98:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1fe9a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fe9e:	2b05      	cmp	r3, #5
   1fea0:	d0e6      	beq.n	1fe70 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1fea2:	7860      	ldrb	r0, [r4, #1]
   1fea4:	f7fe fd4c 	bl	1e940 <net_nbr_get_lladdr>
   1fea8:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1feaa:	f100 0902 	add.w	r9, r0, #2
   1feae:	793a      	ldrb	r2, [r7, #4]
   1feb0:	6839      	ldr	r1, [r7, #0]
   1feb2:	4648      	mov	r0, r9
   1feb4:	f00a fd6e 	bl	2a994 <memcmp>
   1feb8:	b190      	cbz	r0, 1fee0 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1feba:	6839      	ldr	r1, [r7, #0]
   1febc:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   1febe:	f1b8 0f00 	cmp.w	r8, #0
   1fec2:	d002      	beq.n	1feca <net_ipv6_nbr_add+0x86>
   1fec4:	b109      	cbz	r1, 1feca <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fec6:	2a06      	cmp	r2, #6
   1fec8:	d904      	bls.n	1fed4 <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1feca:	2102      	movs	r1, #2
   1fecc:	4620      	mov	r0, r4
   1fece:	f7fe fd3f 	bl	1e950 <ipv6_nbr_set_state>
   1fed2:	e7cd      	b.n	1fe70 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   1fed4:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fed8:	4648      	mov	r0, r9
   1feda:	f7e0 f9f1 	bl	2c0 <memcpy>
   1fede:	e7f4      	b.n	1feca <net_ipv6_nbr_add+0x86>
   1fee0:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1fee2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fee6:	2b00      	cmp	r3, #0
   1fee8:	d1c2      	bne.n	1fe70 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1feea:	2102      	movs	r1, #2
   1feec:	4620      	mov	r0, r4
   1feee:	f7fe fd2f 	bl	1e950 <ipv6_nbr_set_state>
   1fef2:	e7bd      	b.n	1fe70 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1fef4:	2100      	movs	r1, #0
   1fef6:	9101      	str	r1, [sp, #4]
   1fef8:	9600      	str	r6, [sp, #0]
   1fefa:	460b      	mov	r3, r1
   1fefc:	460a      	mov	r2, r1
   1fefe:	4628      	mov	r0, r5
   1ff00:	f7ff fe1a 	bl	1fb38 <net_ipv6_send_ns>
   1ff04:	e7b9      	b.n	1fe7a <net_ipv6_nbr_add+0x36>
   1ff06:	bf00      	nop
   1ff08:	2000bde4 	.word	0x2000bde4

0001ff0c <handle_ra_input>:
{
   1ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff10:	b098      	sub	sp, #96	; 0x60
   1ff12:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   1ff14:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1ff16:	2200      	movs	r2, #0
   1ff18:	e002      	b.n	1ff20 <handle_ra_input+0x14>
		bytes += buf->len;
   1ff1a:	8999      	ldrh	r1, [r3, #12]
   1ff1c:	440a      	add	r2, r1
		buf = buf->frags;
   1ff1e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ff20:	2b00      	cmp	r3, #0
   1ff22:	d1fa      	bne.n	1ff1a <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1ff24:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   1ff26:	49b7      	ldr	r1, [pc, #732]	; (20204 <handle_ra_input+0x2f8>)
   1ff28:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1ff2c:	3301      	adds	r3, #1
   1ff2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1ff32:	2a39      	cmp	r2, #57	; 0x39
   1ff34:	d904      	bls.n	1ff40 <handle_ra_input+0x34>
	return pkt->frags->data;
   1ff36:	68b3      	ldr	r3, [r6, #8]
   1ff38:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1ff3a:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1ff3c:	2aff      	cmp	r2, #255	; 0xff
   1ff3e:	d010      	beq.n	1ff62 <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1ff40:	a907      	add	r1, sp, #28
   1ff42:	4630      	mov	r0, r6
   1ff44:	f7fd ff6d 	bl	1de22 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1ff48:	b108      	cbz	r0, 1ff4e <handle_ra_input+0x42>
   1ff4a:	7843      	ldrb	r3, [r0, #1]
   1ff4c:	b173      	cbz	r3, 1ff6c <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   1ff4e:	4aad      	ldr	r2, [pc, #692]	; (20204 <handle_ra_input+0x2f8>)
   1ff50:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1ff54:	3301      	adds	r3, #1
   1ff56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1ff5a:	2002      	movs	r0, #2
}
   1ff5c:	b018      	add	sp, #96	; 0x60
   1ff5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1ff62:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1ff64:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ff68:	429a      	cmp	r2, r3
   1ff6a:	d1e9      	bne.n	1ff40 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1ff6c:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   1ff70:	312c      	adds	r1, #44	; 0x2c
   1ff72:	ac18      	add	r4, sp, #96	; 0x60
   1ff74:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   1ff78:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   1ff7c:	9300      	str	r3, [sp, #0]
   1ff7e:	2301      	movs	r3, #1
   1ff80:	4622      	mov	r2, r4
   1ff82:	68b0      	ldr	r0, [r6, #8]
   1ff84:	f7fc ffc7 	bl	1cf16 <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   1ff88:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   1ff8c:	2300      	movs	r3, #0
   1ff8e:	9300      	str	r3, [sp, #0]
   1ff90:	2301      	movs	r3, #1
   1ff92:	4622      	mov	r2, r4
   1ff94:	f7fc ffbf 	bl	1cf16 <net_frag_read>
	if (!frag) {
   1ff98:	4604      	mov	r4, r0
   1ff9a:	2800      	cmp	r0, #0
   1ff9c:	d0d7      	beq.n	1ff4e <handle_ra_input+0x42>
	if (hop_limit) {
   1ff9e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1ffa2:	b113      	cbz	r3, 1ffaa <handle_ra_input+0x9e>
	return pkt->iface;
   1ffa4:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   1ffa6:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1ffaa:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   1ffae:	aa11      	add	r2, sp, #68	; 0x44
   1ffb0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ffb4:	4620      	mov	r0, r4
   1ffb6:	f7fc fff6 	bl	1cfa6 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1ffba:	ab13      	add	r3, sp, #76	; 0x4c
   1ffbc:	aa11      	add	r2, sp, #68	; 0x44
   1ffbe:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ffc2:	f7fd f801 	bl	1cfc8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1ffc6:	ab12      	add	r3, sp, #72	; 0x48
   1ffc8:	aa11      	add	r2, sp, #68	; 0x44
   1ffca:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ffce:	f7fc fffb 	bl	1cfc8 <net_frag_read_be32>
	if (!frag) {
   1ffd2:	4605      	mov	r5, r0
   1ffd4:	2800      	cmp	r0, #0
   1ffd6:	d0ba      	beq.n	1ff4e <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1ffd8:	a915      	add	r1, sp, #84	; 0x54
   1ffda:	4630      	mov	r0, r6
   1ffdc:	f7fe f99a 	bl	1e314 <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   1ffe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ffe2:	b16b      	cbz	r3, 20000 <handle_ra_input+0xf4>
   1ffe4:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   1ffe6:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   1ffea:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   1ffec:	428c      	cmp	r4, r1
   1ffee:	d007      	beq.n	20000 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   1fff0:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   1fff4:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1fff6:	4620      	mov	r0, r4
   1fff8:	f7fb fa70 	bl	1b4dc <net_if_ipv6_calc_reachable_time>
   1fffc:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20000:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20002:	b113      	cbz	r3, 2000a <handle_ra_input+0xfe>
   20004:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20006:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   2000a:	2700      	movs	r7, #0
   2000c:	e060      	b.n	200d0 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   2000e:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20012:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20016:	2306      	movs	r3, #6
   20018:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   2001c:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20020:	f10d 031e 	add.w	r3, sp, #30
   20024:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20026:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   2002a:	2b05      	cmp	r3, #5
   2002c:	d801      	bhi.n	20032 <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   2002e:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20032:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20036:	f10d 021e 	add.w	r2, sp, #30
   2003a:	9200      	str	r2, [sp, #0]
   2003c:	aa11      	add	r2, sp, #68	; 0x44
   2003e:	4641      	mov	r1, r8
   20040:	4628      	mov	r0, r5
   20042:	f7fc ff68 	bl	1cf16 <net_frag_read>
	if (!frag && offset) {
   20046:	4605      	mov	r5, r0
   20048:	b318      	cbz	r0, 20092 <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   2004a:	00e3      	lsls	r3, r4, #3
   2004c:	b2db      	uxtb	r3, r3
   2004e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20052:	1a9b      	subs	r3, r3, r2
   20054:	b2db      	uxtb	r3, r3
   20056:	3b02      	subs	r3, #2
	if (padding) {
   20058:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   2005c:	d009      	beq.n	20072 <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   2005e:	aa18      	add	r2, sp, #96	; 0x60
   20060:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20064:	2000      	movs	r0, #0
   20066:	9000      	str	r0, [sp, #0]
   20068:	4628      	mov	r0, r5
   2006a:	f7fc ff54 	bl	1cf16 <net_frag_read>
		if (!frag && *pos) {
   2006e:	4605      	mov	r5, r0
   20070:	b198      	cbz	r0, 2009a <handle_ra_input+0x18e>
	return pkt->frags->data;
   20072:	68b3      	ldr	r3, [r6, #8]
   20074:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20076:	2302      	movs	r3, #2
   20078:	9300      	str	r3, [sp, #0]
   2007a:	2301      	movs	r3, #1
   2007c:	aa03      	add	r2, sp, #12
   2007e:	3108      	adds	r1, #8
   20080:	6970      	ldr	r0, [r6, #20]
   20082:	f7ff fedf 	bl	1fe44 <net_ipv6_nbr_add>
   20086:	4607      	mov	r7, r0
			if (!frag && offset) {
   20088:	bb15      	cbnz	r5, 200d0 <handle_ra_input+0x1c4>
   2008a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2008e:	b1fb      	cbz	r3, 200d0 <handle_ra_input+0x1c4>
   20090:	e75d      	b.n	1ff4e <handle_ra_input+0x42>
	if (!frag && offset) {
   20092:	f1b8 0f00 	cmp.w	r8, #0
   20096:	d0d8      	beq.n	2004a <handle_ra_input+0x13e>
   20098:	e7f6      	b.n	20088 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   2009a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2009e:	2b00      	cmp	r3, #0
   200a0:	d0e7      	beq.n	20072 <handle_ra_input+0x166>
   200a2:	e7f1      	b.n	20088 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   200a4:	ac18      	add	r4, sp, #96	; 0x60
   200a6:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   200aa:	2300      	movs	r3, #0
   200ac:	9300      	str	r3, [sp, #0]
   200ae:	2302      	movs	r3, #2
   200b0:	4622      	mov	r2, r4
   200b2:	f7fc ff30 	bl	1cf16 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   200b6:	ab0f      	add	r3, sp, #60	; 0x3c
   200b8:	4622      	mov	r2, r4
   200ba:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200be:	f7fc ff83 	bl	1cfc8 <net_frag_read_be32>
			if (!frag && offset) {
   200c2:	4605      	mov	r5, r0
   200c4:	2800      	cmp	r0, #0
   200c6:	d03b      	beq.n	20140 <handle_ra_input+0x234>
	return pkt->iface;
   200c8:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   200ca:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   200ce:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   200d0:	2d00      	cmp	r5, #0
   200d2:	f000 8170 	beq.w	203b6 <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   200d6:	ac18      	add	r4, sp, #96	; 0x60
   200d8:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   200dc:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   200e0:	9300      	str	r3, [sp, #0]
   200e2:	2301      	movs	r3, #1
   200e4:	4622      	mov	r2, r4
   200e6:	4628      	mov	r0, r5
   200e8:	f7fc ff15 	bl	1cf16 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   200ec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200f0:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   200f4:	9300      	str	r3, [sp, #0]
   200f6:	2301      	movs	r3, #1
   200f8:	4622      	mov	r2, r4
   200fa:	f7fc ff0c 	bl	1cf16 <net_frag_read>
		if (!frag) {
   200fe:	4605      	mov	r5, r0
   20100:	2800      	cmp	r0, #0
   20102:	f43f af24 	beq.w	1ff4e <handle_ra_input+0x42>
		switch (type) {
   20106:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2010a:	2b03      	cmp	r3, #3
   2010c:	d01d      	beq.n	2014a <handle_ra_input+0x23e>
   2010e:	2b05      	cmp	r3, #5
   20110:	d0c8      	beq.n	200a4 <handle_ra_input+0x198>
   20112:	2b01      	cmp	r3, #1
   20114:	f43f af7b 	beq.w	2000e <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20118:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   2011c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20120:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20122:	3b02      	subs	r3, #2
   20124:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20126:	2200      	movs	r2, #0
   20128:	9200      	str	r2, [sp, #0]
   2012a:	aa11      	add	r2, sp, #68	; 0x44
   2012c:	f7fc fef3 	bl	1cf16 <net_frag_read>
			if (!frag && offset) {
   20130:	4605      	mov	r5, r0
   20132:	2800      	cmp	r0, #0
   20134:	d1cc      	bne.n	200d0 <handle_ra_input+0x1c4>
   20136:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2013a:	2b00      	cmp	r3, #0
   2013c:	d0c8      	beq.n	200d0 <handle_ra_input+0x1c4>
   2013e:	e706      	b.n	1ff4e <handle_ra_input+0x42>
			if (!frag && offset) {
   20140:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20144:	2b00      	cmp	r3, #0
   20146:	d0bf      	beq.n	200c8 <handle_ra_input+0x1bc>
   20148:	e701      	b.n	1ff4e <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   2014a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   2014e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20152:	2203      	movs	r2, #3
   20154:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20158:	4093      	lsls	r3, r2
   2015a:	b2db      	uxtb	r3, r3
   2015c:	3b02      	subs	r3, #2
   2015e:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20162:	f10d 031e 	add.w	r3, sp, #30
   20166:	9300      	str	r3, [sp, #0]
   20168:	2301      	movs	r3, #1
   2016a:	aa11      	add	r2, sp, #68	; 0x44
   2016c:	f7fc fed3 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20170:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20174:	f10d 031f 	add.w	r3, sp, #31
   20178:	9300      	str	r3, [sp, #0]
   2017a:	2301      	movs	r3, #1
   2017c:	aa11      	add	r2, sp, #68	; 0x44
   2017e:	f7fc feca 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20182:	ab08      	add	r3, sp, #32
   20184:	aa11      	add	r2, sp, #68	; 0x44
   20186:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2018a:	f7fc ff1d 	bl	1cfc8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   2018e:	ab09      	add	r3, sp, #36	; 0x24
   20190:	aa11      	add	r2, sp, #68	; 0x44
   20192:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20196:	f7fc ff17 	bl	1cfc8 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   2019a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2019e:	2300      	movs	r3, #0
   201a0:	9300      	str	r3, [sp, #0]
   201a2:	2304      	movs	r3, #4
   201a4:	aa11      	add	r2, sp, #68	; 0x44
   201a6:	f7fc feb6 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   201aa:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   201ae:	ab0b      	add	r3, sp, #44	; 0x2c
   201b0:	9300      	str	r3, [sp, #0]
   201b2:	2310      	movs	r3, #16
   201b4:	aa11      	add	r2, sp, #68	; 0x44
   201b6:	f7fc feae 	bl	1cf16 <net_frag_read>
	if (!frag && *pos) {
   201ba:	4605      	mov	r5, r0
   201bc:	b320      	cbz	r0, 20208 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   201be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   201c0:	9a08      	ldr	r2, [sp, #32]
   201c2:	429a      	cmp	r2, r3
   201c4:	d314      	bcc.n	201f0 <handle_ra_input+0x2e4>
   201c6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   201ca:	f248 03fe 	movw	r3, #33022	; 0x80fe
   201ce:	429a      	cmp	r2, r3
   201d0:	d00e      	beq.n	201f0 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   201d2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   201d6:	2b00      	cmp	r3, #0
   201d8:	db1b      	blt.n	20212 <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   201da:	f89d 301f 	ldrb.w	r3, [sp, #31]
   201de:	f013 0f40 	tst.w	r3, #64	; 0x40
   201e2:	d005      	beq.n	201f0 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   201e4:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   201e6:	b11b      	cbz	r3, 201f0 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   201e8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   201ec:	2b40      	cmp	r3, #64	; 0x40
   201ee:	d03e      	beq.n	2026e <handle_ra_input+0x362>
			if (!frag && offset) {
   201f0:	2d00      	cmp	r5, #0
   201f2:	f47f af6d 	bne.w	200d0 <handle_ra_input+0x1c4>
   201f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   201fa:	2b00      	cmp	r3, #0
   201fc:	f43f af68 	beq.w	200d0 <handle_ra_input+0x1c4>
   20200:	e6a5      	b.n	1ff4e <handle_ra_input+0x42>
   20202:	bf00      	nop
   20204:	200029f0 	.word	0x200029f0
	if (!frag && *pos) {
   20208:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2020c:	2b00      	cmp	r3, #0
   2020e:	d0d6      	beq.n	201be <handle_ra_input+0x2b2>
   20210:	e7ee      	b.n	201f0 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20212:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20216:	a90b      	add	r1, sp, #44	; 0x2c
   20218:	6970      	ldr	r0, [r6, #20]
   2021a:	f7fa fe3f 	bl	1ae9c <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   2021e:	4603      	mov	r3, r0
   20220:	b160      	cbz	r0, 2023c <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20222:	9a08      	ldr	r2, [sp, #32]
   20224:	b1ba      	cbz	r2, 20256 <handle_ra_input+0x34a>
   20226:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2022a:	d01c      	beq.n	20266 <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   2022c:	2200      	movs	r2, #0
   2022e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20232:	9908      	ldr	r1, [sp, #32]
   20234:	4618      	mov	r0, r3
   20236:	f7fa fee3 	bl	1b000 <net_if_ipv6_prefix_set_timer>
   2023a:	e7ce      	b.n	201da <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   2023c:	9b08      	ldr	r3, [sp, #32]
   2023e:	2b00      	cmp	r3, #0
   20240:	d0cb      	beq.n	201da <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20242:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20246:	a90b      	add	r1, sp, #44	; 0x2c
   20248:	6970      	ldr	r0, [r6, #20]
   2024a:	f7fa fdf7 	bl	1ae3c <net_if_ipv6_prefix_add>
		if (prefix) {
   2024e:	4603      	mov	r3, r0
   20250:	2800      	cmp	r0, #0
   20252:	d1e6      	bne.n	20222 <handle_ra_input+0x316>
   20254:	e7c1      	b.n	201da <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20256:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2025a:	f103 0128 	add.w	r1, r3, #40	; 0x28
   2025e:	6970      	ldr	r0, [r6, #20]
   20260:	f7fa feea 	bl	1b038 <net_if_ipv6_prefix_rm>
   20264:	e7b9      	b.n	201da <handle_ra_input+0x2ce>
   20266:	2201      	movs	r2, #1
   20268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   2026c:	e7b5      	b.n	201da <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   2026e:	2300      	movs	r3, #0
   20270:	9305      	str	r3, [sp, #20]
   20272:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20274:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20276:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   2027a:	22fe      	movs	r2, #254	; 0xfe
   2027c:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20280:	2280      	movs	r2, #128	; 0x80
   20282:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20286:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   2028a:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   2028c:	f898 2004 	ldrb.w	r2, [r8, #4]
   20290:	2a06      	cmp	r2, #6
   20292:	d032      	beq.n	202fa <handle_ra_input+0x3ee>
   20294:	2a08      	cmp	r2, #8
   20296:	d058      	beq.n	2034a <handle_ra_input+0x43e>
   20298:	2a02      	cmp	r2, #2
   2029a:	d018      	beq.n	202ce <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   2029c:	2208      	movs	r2, #8
   2029e:	a90b      	add	r1, sp, #44	; 0x2c
   202a0:	a803      	add	r0, sp, #12
   202a2:	f7e0 f80d 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   202a6:	2100      	movs	r1, #0
   202a8:	a803      	add	r0, sp, #12
   202aa:	f7fa fb03 	bl	1a8b4 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   202ae:	4604      	mov	r4, r0
   202b0:	b118      	cbz	r0, 202ba <handle_ra_input+0x3ae>
   202b2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   202b6:	2b01      	cmp	r3, #1
   202b8:	d052      	beq.n	20360 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   202ba:	9b08      	ldr	r3, [sp, #32]
   202bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   202c0:	d072      	beq.n	203a8 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   202c2:	2201      	movs	r2, #1
   202c4:	a903      	add	r1, sp, #12
   202c6:	6970      	ldr	r0, [r6, #20]
   202c8:	f7fa fb6a 	bl	1a9a0 <net_if_ipv6_addr_add>
   202cc:	e790      	b.n	201f0 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   202ce:	f898 3005 	ldrb.w	r3, [r8, #5]
   202d2:	2b01      	cmp	r3, #1
   202d4:	d1e2      	bne.n	2029c <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   202d6:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   202d8:	22ff      	movs	r2, #255	; 0xff
   202da:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   202de:	22fe      	movs	r2, #254	; 0xfe
   202e0:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   202e4:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   202e8:	6923      	ldr	r3, [r4, #16]
   202ea:	781b      	ldrb	r3, [r3, #0]
   202ec:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   202f0:	6923      	ldr	r3, [r4, #16]
   202f2:	785b      	ldrb	r3, [r3, #1]
   202f4:	f88d 301b 	strb.w	r3, [sp, #27]
   202f8:	e7d0      	b.n	2029c <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   202fa:	2203      	movs	r2, #3
   202fc:	6921      	ldr	r1, [r4, #16]
   202fe:	a805      	add	r0, sp, #20
   20300:	f7df ffde 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20304:	23ff      	movs	r3, #255	; 0xff
   20306:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   2030a:	23fe      	movs	r3, #254	; 0xfe
   2030c:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20310:	6921      	ldr	r1, [r4, #16]
   20312:	2203      	movs	r2, #3
   20314:	4411      	add	r1, r2
   20316:	f10d 0019 	add.w	r0, sp, #25
   2031a:	f7df ffd1 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2031e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20322:	2b02      	cmp	r3, #2
   20324:	d00a      	beq.n	2033c <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20326:	f898 3005 	ldrb.w	r3, [r8, #5]
   2032a:	2b03      	cmp	r3, #3
   2032c:	d1b6      	bne.n	2029c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2032e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20332:	f083 0302 	eor.w	r3, r3, #2
   20336:	f88d 3014 	strb.w	r3, [sp, #20]
   2033a:	e7af      	b.n	2029c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2033c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20340:	f083 0302 	eor.w	r3, r3, #2
   20344:	f88d 3014 	strb.w	r3, [sp, #20]
   20348:	e7ed      	b.n	20326 <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2034a:	6921      	ldr	r1, [r4, #16]
   2034c:	a805      	add	r0, sp, #20
   2034e:	f7df ffb7 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20352:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20356:	f083 0302 	eor.w	r3, r3, #2
   2035a:	f88d 3014 	strb.w	r3, [sp, #20]
   2035e:	e79d      	b.n	2029c <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20360:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20364:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20368:	d015      	beq.n	20396 <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   2036a:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   2036e:	d80a      	bhi.n	20386 <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20370:	3020      	adds	r0, #32
   20372:	f008 ff79 	bl	29268 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20376:	4a30      	ldr	r2, [pc, #192]	; (20438 <handle_ra_input+0x52c>)
   20378:	fb82 3200 	smull	r3, r2, r2, r0
   2037c:	17c3      	asrs	r3, r0, #31
   2037e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20382:	4598      	cmp	r8, r3
   20384:	d90a      	bls.n	2039c <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20386:	9908      	ldr	r1, [sp, #32]
   20388:	4620      	mov	r0, r4
   2038a:	f7fa fafb 	bl	1a984 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   2038e:	2300      	movs	r3, #0
   20390:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20394:	e72c      	b.n	201f0 <handle_ra_input+0x2e4>
   20396:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   2039a:	e729      	b.n	201f0 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   2039c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   203a0:	4620      	mov	r0, r4
   203a2:	f7fa faef 	bl	1a984 <net_if_ipv6_addr_update_lifetime>
   203a6:	e7f2      	b.n	2038e <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   203a8:	2300      	movs	r3, #0
   203aa:	2201      	movs	r2, #1
   203ac:	a903      	add	r1, sp, #12
   203ae:	6970      	ldr	r0, [r6, #20]
   203b0:	f7fa faf6 	bl	1a9a0 <net_if_ipv6_addr_add>
   203b4:	e71c      	b.n	201f0 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   203b6:	68b3      	ldr	r3, [r6, #8]
   203b8:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   203ba:	3108      	adds	r1, #8
   203bc:	6970      	ldr	r0, [r6, #20]
   203be:	f7fa fe7b 	bl	1b0b8 <net_if_ipv6_router_lookup>
	if (router) {
   203c2:	4603      	mov	r3, r0
   203c4:	b350      	cbz	r0, 2041c <handle_ra_input+0x510>
		if (!router_lifetime) {
   203c6:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   203ca:	b321      	cbz	r1, 20416 <handle_ra_input+0x50a>
			if (nbr) {
   203cc:	b11f      	cbz	r7, 203d6 <handle_ra_input+0x4ca>
   203ce:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   203d0:	2001      	movs	r0, #1
   203d2:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   203d6:	4618      	mov	r0, r3
   203d8:	f7fa fec6 	bl	1b168 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   203dc:	b18f      	cbz	r7, 20402 <handle_ra_input+0x4f6>
   203de:	68fb      	ldr	r3, [r7, #12]
   203e0:	6818      	ldr	r0, [r3, #0]
   203e2:	b170      	cbz	r0, 20402 <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   203e4:	f7fa f818 	bl	1a418 <net_send_data>
   203e8:	2800      	cmp	r0, #0
   203ea:	db20      	blt.n	2042e <handle_ra_input+0x522>
   203ec:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   203ee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   203f2:	f008 ffdd 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   203f6:	6820      	ldr	r0, [r4, #0]
   203f8:	b118      	cbz	r0, 20402 <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   203fa:	f7fc fc0e 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   203fe:	2300      	movs	r3, #0
   20400:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20402:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20404:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20408:	f008 ffd2 	bl	293b0 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   2040c:	4630      	mov	r0, r6
   2040e:	f7fc fc04 	bl	1cc1a <net_pkt_unref>
	return NET_OK;
   20412:	2000      	movs	r0, #0
   20414:	e5a2      	b.n	1ff5c <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20416:	f7fa ff0b 	bl	1b230 <net_if_ipv6_router_rm>
   2041a:	e7df      	b.n	203dc <handle_ra_input+0x4d0>
	return pkt->frags->data;
   2041c:	68b3      	ldr	r3, [r6, #8]
   2041e:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20420:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20424:	3108      	adds	r1, #8
   20426:	6970      	ldr	r0, [r6, #20]
   20428:	f7fa feaa 	bl	1b180 <net_if_ipv6_router_add>
   2042c:	e7d6      	b.n	203dc <handle_ra_input+0x4d0>
   2042e:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20430:	6818      	ldr	r0, [r3, #0]
   20432:	f7fc fbf2 	bl	1cc1a <net_pkt_unref>
   20436:	e7d9      	b.n	203ec <handle_ra_input+0x4e0>
   20438:	10624dd3 	.word	0x10624dd3

0002043c <handle_ns_input>:
{
   2043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20440:	b0a5      	sub	sp, #148	; 0x94
   20442:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20444:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20446:	2200      	movs	r2, #0
   20448:	e002      	b.n	20450 <handle_ns_input+0x14>
		bytes += buf->len;
   2044a:	8999      	ldrh	r1, [r3, #12]
   2044c:	440a      	add	r2, r1
		buf = buf->frags;
   2044e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20450:	2b00      	cmp	r3, #0
   20452:	d1fa      	bne.n	2044a <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20454:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   20456:	a90a      	add	r1, sp, #40	; 0x28
   20458:	4620      	mov	r0, r4
   2045a:	f7fd fe51 	bl	1e100 <net_icmpv6_get_ns_hdr>
   2045e:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20460:	4aa6      	ldr	r2, [pc, #664]	; (206fc <handle_ns_input+0x2c0>)
   20462:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20466:	3301      	adds	r3, #1
   20468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2046c:	2d3f      	cmp	r5, #63	; 0x3f
   2046e:	d904      	bls.n	2047a <handle_ns_input+0x3e>
	return pkt->frags->data;
   20470:	68a3      	ldr	r3, [r4, #8]
   20472:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   20474:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   20476:	2bff      	cmp	r3, #255	; 0xff
   20478:	d002      	beq.n	20480 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   2047a:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   2047c:	2bff      	cmp	r3, #255	; 0xff
   2047e:	d00a      	beq.n	20496 <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   20480:	2314      	movs	r3, #20
   20482:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20486:	a90f      	add	r1, sp, #60	; 0x3c
   20488:	4620      	mov	r0, r4
   2048a:	f7fd fe95 	bl	1e1b8 <net_icmpv6_get_nd_opt_hdr>
   2048e:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   20490:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20492:	2500      	movs	r5, #0
   20494:	e00e      	b.n	204b4 <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20496:	a908      	add	r1, sp, #32
   20498:	4620      	mov	r0, r4
   2049a:	f7fd fcc2 	bl	1de22 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   2049e:	2800      	cmp	r0, #0
   204a0:	f000 80b7 	beq.w	20612 <handle_ns_input+0x1d6>
   204a4:	7843      	ldrb	r3, [r0, #1]
   204a6:	2b00      	cmp	r3, #0
   204a8:	f040 80b3 	bne.w	20612 <handle_ns_input+0x1d6>
   204ac:	e7e8      	b.n	20480 <handle_ns_input+0x44>
		bytes += buf->len;
   204ae:	899a      	ldrh	r2, [r3, #12]
   204b0:	4415      	add	r5, r2
		buf = buf->frags;
   204b2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   204b4:	2b00      	cmp	r3, #0
   204b6:	d1fa      	bne.n	204ae <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   204b8:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   204ba:	e042      	b.n	20542 <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   204bc:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   204be:	2900      	cmp	r1, #0
   204c0:	f040 80a7 	bne.w	20612 <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   204c4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   204c8:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   204cc:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   204ce:	4411      	add	r1, r2
   204d0:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   204d2:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   204d4:	00db      	lsls	r3, r3, #3
   204d6:	b2db      	uxtb	r3, r3
   204d8:	3b02      	subs	r3, #2
   204da:	b2db      	uxtb	r3, r3
   204dc:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   204e0:	f10d 021a 	add.w	r2, sp, #26
   204e4:	9200      	str	r2, [sp, #0]
   204e6:	f10d 0216 	add.w	r2, sp, #22
   204ea:	b289      	uxth	r1, r1
   204ec:	68a0      	ldr	r0, [r4, #8]
   204ee:	f7fc fd12 	bl	1cf16 <net_frag_read>
	if (!frag && pos == 0xffff) {
   204f2:	2800      	cmp	r0, #0
   204f4:	d042      	beq.n	2057c <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   204f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   204fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   204fe:	f10d 021a 	add.w	r2, sp, #26
   20502:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   20504:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20508:	4293      	cmp	r3, r2
   2050a:	d901      	bls.n	20510 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   2050c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   20510:	68a3      	ldr	r3, [r4, #8]
   20512:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20514:	2300      	movs	r3, #0
   20516:	9300      	str	r3, [sp, #0]
   20518:	aa08      	add	r2, sp, #32
   2051a:	3108      	adds	r1, #8
   2051c:	6960      	ldr	r0, [r4, #20]
   2051e:	f7ff fc91 	bl	1fe44 <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   20522:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   20526:	787b      	ldrb	r3, [r7, #1]
   20528:	00db      	lsls	r3, r3, #3
   2052a:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2052c:	4413      	add	r3, r2
   2052e:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20530:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20534:	429a      	cmp	r2, r3
   20536:	d26c      	bcs.n	20612 <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20538:	a90f      	add	r1, sp, #60	; 0x3c
   2053a:	4620      	mov	r0, r4
   2053c:	f7fd fe3c 	bl	1e1b8 <net_icmpv6_get_nd_opt_hdr>
   20540:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20542:	b317      	cbz	r7, 2058a <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   20544:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20548:	4295      	cmp	r5, r2
   2054a:	d91e      	bls.n	2058a <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   2054c:	787b      	ldrb	r3, [r7, #1]
   2054e:	b1e3      	cbz	r3, 2058a <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   20550:	7839      	ldrb	r1, [r7, #0]
   20552:	2901      	cmp	r1, #1
   20554:	d1e5      	bne.n	20522 <handle_ns_input+0xe6>
	return pkt->frags->data;
   20556:	68a1      	ldr	r1, [r4, #8]
   20558:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2055a:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2055c:	2800      	cmp	r0, #0
   2055e:	d1ad      	bne.n	204bc <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20560:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20562:	b928      	cbnz	r0, 20570 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20564:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20566:	b928      	cbnz	r0, 20574 <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20568:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2056a:	b129      	cbz	r1, 20578 <handle_ns_input+0x13c>
   2056c:	2100      	movs	r1, #0
   2056e:	e7a6      	b.n	204be <handle_ns_input+0x82>
   20570:	2100      	movs	r1, #0
   20572:	e7a4      	b.n	204be <handle_ns_input+0x82>
   20574:	2100      	movs	r1, #0
   20576:	e7a2      	b.n	204be <handle_ns_input+0x82>
   20578:	2101      	movs	r1, #1
   2057a:	e7a0      	b.n	204be <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   2057c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20580:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20584:	429a      	cmp	r2, r3
   20586:	d1b6      	bne.n	204f6 <handle_ns_input+0xba>
   20588:	e7cb      	b.n	20522 <handle_ns_input+0xe6>
	return pkt->iface;
   2058a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2058e:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20592:	2500      	movs	r5, #0
   20594:	e001      	b.n	2059a <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20596:	b9ef      	cbnz	r7, 205d4 <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20598:	3501      	adds	r5, #1
   2059a:	2d02      	cmp	r5, #2
   2059c:	dc21      	bgt.n	205e2 <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   2059e:	236c      	movs	r3, #108	; 0x6c
   205a0:	fb03 8305 	mla	r3, r3, r5, r8
   205a4:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   205a8:	2f00      	cmp	r7, #0
   205aa:	d0f5      	beq.n	20598 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   205ac:	236c      	movs	r3, #108	; 0x6c
   205ae:	fb03 8305 	mla	r3, r3, r5, r8
   205b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   205b4:	2b0a      	cmp	r3, #10
   205b6:	d1ef      	bne.n	20598 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   205b8:	216c      	movs	r1, #108	; 0x6c
   205ba:	fb01 f105 	mul.w	r1, r1, r5
   205be:	3120      	adds	r1, #32
   205c0:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   205c2:	2210      	movs	r2, #16
   205c4:	4411      	add	r1, r2
   205c6:	4648      	mov	r0, r9
   205c8:	f00a f9e4 	bl	2a994 <memcmp>
   205cc:	2800      	cmp	r0, #0
   205ce:	d0e2      	beq.n	20596 <handle_ns_input+0x15a>
		return false;
   205d0:	2700      	movs	r7, #0
   205d2:	e7e0      	b.n	20596 <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   205d4:	236c      	movs	r3, #108	; 0x6c
   205d6:	fb03 f505 	mul.w	r5, r3, r5
   205da:	3520      	adds	r5, #32
   205dc:	4445      	add	r5, r8
   205de:	350c      	adds	r5, #12
   205e0:	e000      	b.n	205e4 <handle_ns_input+0x1a8>
	return NULL;
   205e2:	2500      	movs	r5, #0
	if (!ifaddr) {
   205e4:	b1ad      	cbz	r5, 20612 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   205e6:	68a3      	ldr	r3, [r4, #8]
   205e8:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   205ea:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205ec:	b93b      	cbnz	r3, 205fe <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   205ee:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   205f0:	b9cb      	cbnz	r3, 20626 <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205f2:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   205f4:	b9cb      	cbnz	r3, 2062a <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   205f6:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205f8:	b1cb      	cbz	r3, 2062e <handle_ns_input+0x1f2>
   205fa:	2300      	movs	r3, #0
   205fc:	e000      	b.n	20600 <handle_ns_input+0x1c4>
   205fe:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20600:	2b00      	cmp	r3, #0
   20602:	d07d      	beq.n	20700 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20604:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20606:	f240 23ff 	movw	r3, #767	; 0x2ff
   2060a:	429a      	cmp	r2, r3
   2060c:	d011      	beq.n	20632 <handle_ns_input+0x1f6>
   2060e:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20610:	bb0b      	cbnz	r3, 20656 <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   20612:	4a3a      	ldr	r2, [pc, #232]	; (206fc <handle_ns_input+0x2c0>)
   20614:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20618:	3301      	adds	r3, #1
   2061a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   2061e:	2002      	movs	r0, #2
}
   20620:	b025      	add	sp, #148	; 0x94
   20622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20626:	2300      	movs	r3, #0
   20628:	e7ea      	b.n	20600 <handle_ns_input+0x1c4>
   2062a:	2300      	movs	r3, #0
   2062c:	e7e8      	b.n	20600 <handle_ns_input+0x1c4>
   2062e:	2301      	movs	r3, #1
   20630:	e7e6      	b.n	20600 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20632:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20634:	b95b      	cbnz	r3, 2064e <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20636:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2063c:	d001      	beq.n	20642 <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2063e:	2300      	movs	r3, #0
   20640:	e7e6      	b.n	20610 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   20642:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20644:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20646:	2bff      	cmp	r3, #255	; 0xff
   20648:	d003      	beq.n	20652 <handle_ns_input+0x216>
   2064a:	2300      	movs	r3, #0
   2064c:	e7e0      	b.n	20610 <handle_ns_input+0x1d4>
   2064e:	2300      	movs	r3, #0
   20650:	e7de      	b.n	20610 <handle_ns_input+0x1d4>
   20652:	2301      	movs	r3, #1
   20654:	e7dc      	b.n	20610 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   20656:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   2065a:	b94b      	cbnz	r3, 20670 <handle_ns_input+0x234>
	return pkt->iface;
   2065c:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   2065e:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20660:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   20662:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20666:	429a      	cmp	r2, r3
   20668:	d0d3      	beq.n	20612 <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   2066a:	f7fa fb51 	bl	1ad10 <net_if_ipv6_dad_failed>
   2066e:	e7d0      	b.n	20612 <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20674:	7603      	strb	r3, [r0, #24]
   20676:	2300      	movs	r3, #0
   20678:	2202      	movs	r2, #2
   2067a:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2067c:	7683      	strb	r3, [r0, #26]
   2067e:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20680:	7703      	strb	r3, [r0, #28]
   20682:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20684:	7783      	strb	r3, [r0, #30]
   20686:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20688:	f880 3020 	strb.w	r3, [r0, #32]
   2068c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20690:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   20694:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20698:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   2069c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   206a0:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   206a4:	2301      	movs	r3, #1
   206a6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   206aa:	68a3      	ldr	r3, [r4, #8]
   206ac:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   206b0:	f108 0118 	add.w	r1, r8, #24
   206b4:	6960      	ldr	r0, [r4, #20]
   206b6:	f7fa fe15 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   206ba:	4603      	mov	r3, r0
   206bc:	ae10      	add	r6, sp, #64	; 0x40
   206be:	6800      	ldr	r0, [r0, #0]
   206c0:	6859      	ldr	r1, [r3, #4]
   206c2:	689a      	ldr	r2, [r3, #8]
   206c4:	68db      	ldr	r3, [r3, #12]
   206c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   206c8:	ae10      	add	r6, sp, #64	; 0x40
   206ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206cc:	f8c8 0008 	str.w	r0, [r8, #8]
   206d0:	f8c8 100c 	str.w	r1, [r8, #12]
   206d4:	f8c8 2010 	str.w	r2, [r8, #16]
   206d8:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   206dc:	2320      	movs	r3, #32
   206de:	68a2      	ldr	r2, [r4, #8]
   206e0:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   206e2:	9300      	str	r3, [sp, #0]
   206e4:	1d2b      	adds	r3, r5, #4
   206e6:	f101 0218 	add.w	r2, r1, #24
   206ea:	3108      	adds	r1, #8
   206ec:	6960      	ldr	r0, [r4, #20]
   206ee:	f7fe ff69 	bl	1f5c4 <net_ipv6_send_na>
	if (!ret) {
   206f2:	2800      	cmp	r0, #0
   206f4:	f000 80b5 	beq.w	20862 <handle_ns_input+0x426>
	return NET_DROP;
   206f8:	2002      	movs	r0, #2
   206fa:	e791      	b.n	20620 <handle_ns_input+0x1e4>
   206fc:	200029f0 	.word	0x200029f0
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20700:	2100      	movs	r1, #0
   20702:	3008      	adds	r0, #8
   20704:	f7fa f8d6 	bl	1a8b4 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   20708:	4607      	mov	r7, r0
   2070a:	2800      	cmp	r0, #0
   2070c:	d181      	bne.n	20612 <handle_ns_input+0x1d6>
   2070e:	68a3      	ldr	r3, [r4, #8]
   20710:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20714:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20718:	f240 23ff 	movw	r3, #767	; 0x2ff
   2071c:	429a      	cmp	r2, r3
   2071e:	d02b      	beq.n	20778 <handle_ns_input+0x33c>
   20720:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20722:	9303      	str	r3, [sp, #12]
   20724:	2b00      	cmp	r3, #0
   20726:	d03c      	beq.n	207a2 <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20728:	af14      	add	r7, sp, #80	; 0x50
   2072a:	4643      	mov	r3, r8
   2072c:	f853 0f08 	ldr.w	r0, [r3, #8]!
   20730:	6859      	ldr	r1, [r3, #4]
   20732:	689a      	ldr	r2, [r3, #8]
   20734:	68db      	ldr	r3, [r3, #12]
   20736:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20738:	af14      	add	r7, sp, #80	; 0x50
   2073a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2073c:	f8c8 0018 	str.w	r0, [r8, #24]
   20740:	f8c8 101c 	str.w	r1, [r8, #28]
   20744:	f8c8 2020 	str.w	r2, [r8, #32]
   20748:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   2074c:	68a3      	ldr	r3, [r4, #8]
   2074e:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   20752:	af18      	add	r7, sp, #96	; 0x60
   20754:	f856 0f04 	ldr.w	r0, [r6, #4]!
   20758:	6871      	ldr	r1, [r6, #4]
   2075a:	68b2      	ldr	r2, [r6, #8]
   2075c:	68f3      	ldr	r3, [r6, #12]
   2075e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20760:	ae18      	add	r6, sp, #96	; 0x60
   20762:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20764:	f8ce 0008 	str.w	r0, [lr, #8]
   20768:	f8ce 100c 	str.w	r1, [lr, #12]
   2076c:	f8ce 2010 	str.w	r2, [lr, #16]
   20770:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   20774:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   20776:	e7b2      	b.n	206de <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20778:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2077c:	b96b      	cbnz	r3, 2079a <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2077e:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   20786:	d001      	beq.n	2078c <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20788:	2300      	movs	r3, #0
   2078a:	e7ca      	b.n	20722 <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2078c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   20790:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20792:	2bff      	cmp	r3, #255	; 0xff
   20794:	d003      	beq.n	2079e <handle_ns_input+0x362>
   20796:	2300      	movs	r3, #0
   20798:	e7c3      	b.n	20722 <handle_ns_input+0x2e6>
   2079a:	2300      	movs	r3, #0
   2079c:	e7c1      	b.n	20722 <handle_ns_input+0x2e6>
   2079e:	2301      	movs	r3, #1
   207a0:	e7bf      	b.n	20722 <handle_ns_input+0x2e6>
	return pkt->iface;
   207a2:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   207a6:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   207aa:	f04f 0900 	mov.w	r9, #0
   207ae:	e004      	b.n	207ba <handle_ns_input+0x37e>
		return false;
   207b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   207b4:	e01e      	b.n	207f4 <handle_ns_input+0x3b8>
   207b6:	f109 0901 	add.w	r9, r9, #1
   207ba:	f1b9 0f02 	cmp.w	r9, #2
   207be:	dc22      	bgt.n	20806 <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   207c0:	236c      	movs	r3, #108	; 0x6c
   207c2:	fb03 a309 	mla	r3, r3, r9, sl
   207c6:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   207ca:	f1bb 0f00 	cmp.w	fp, #0
   207ce:	d0f2      	beq.n	207b6 <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   207d0:	236c      	movs	r3, #108	; 0x6c
   207d2:	fb03 a309 	mla	r3, r3, r9, sl
   207d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   207d8:	2b0a      	cmp	r3, #10
   207da:	d1ec      	bne.n	207b6 <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   207dc:	216c      	movs	r1, #108	; 0x6c
   207de:	fb01 f109 	mul.w	r1, r1, r9
   207e2:	3120      	adds	r1, #32
   207e4:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   207e6:	2210      	movs	r2, #16
   207e8:	4411      	add	r1, r2
   207ea:	4640      	mov	r0, r8
   207ec:	f00a f8d2 	bl	2a994 <memcmp>
   207f0:	2800      	cmp	r0, #0
   207f2:	d1dd      	bne.n	207b0 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   207f4:	f1bb 0f00 	cmp.w	fp, #0
   207f8:	d0dd      	beq.n	207b6 <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   207fa:	276c      	movs	r7, #108	; 0x6c
   207fc:	fb07 f709 	mul.w	r7, r7, r9
   20800:	3720      	adds	r7, #32
   20802:	4457      	add	r7, sl
   20804:	370c      	adds	r7, #12
   20806:	2f00      	cmp	r7, #0
   20808:	f43f af03 	beq.w	20612 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2080c:	68a3      	ldr	r3, [r4, #8]
   2080e:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20812:	af1c      	add	r7, sp, #112	; 0x70
   20814:	4663      	mov	r3, ip
   20816:	f853 0f08 	ldr.w	r0, [r3, #8]!
   2081a:	6859      	ldr	r1, [r3, #4]
   2081c:	689a      	ldr	r2, [r3, #8]
   2081e:	68db      	ldr	r3, [r3, #12]
   20820:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20822:	af1c      	add	r7, sp, #112	; 0x70
   20824:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20826:	f8cc 0018 	str.w	r0, [ip, #24]
   2082a:	f8cc 101c 	str.w	r1, [ip, #28]
   2082e:	f8cc 2020 	str.w	r2, [ip, #32]
   20832:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   20836:	68a3      	ldr	r3, [r4, #8]
   20838:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2083c:	af20      	add	r7, sp, #128	; 0x80
   2083e:	f856 0f04 	ldr.w	r0, [r6, #4]!
   20842:	6871      	ldr	r1, [r6, #4]
   20844:	68b2      	ldr	r2, [r6, #8]
   20846:	68f3      	ldr	r3, [r6, #12]
   20848:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2084a:	ae20      	add	r6, sp, #128	; 0x80
   2084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2084e:	f8ce 0008 	str.w	r0, [lr, #8]
   20852:	f8ce 100c 	str.w	r1, [lr, #12]
   20856:	f8ce 2010 	str.w	r2, [lr, #16]
   2085a:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   2085e:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   20860:	e73d      	b.n	206de <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   20862:	4620      	mov	r0, r4
   20864:	f7fc f9d9 	bl	1cc1a <net_pkt_unref>
		return NET_OK;
   20868:	2000      	movs	r0, #0
   2086a:	e6d9      	b.n	20620 <handle_ns_input+0x1e4>

0002086c <nd_reachable_timeout>:
{
   2086c:	b530      	push	{r4, r5, lr}
   2086e:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   20870:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20874:	2300      	movs	r3, #0
   20876:	2b07      	cmp	r3, #7
   20878:	dc07      	bgt.n	2088a <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   2087a:	4c47      	ldr	r4, [pc, #284]	; (20998 <nd_reachable_timeout+0x12c>)
   2087c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   20880:	68e2      	ldr	r2, [r4, #12]
   20882:	4295      	cmp	r5, r2
   20884:	d002      	beq.n	2088c <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20886:	3301      	adds	r3, #1
   20888:	e7f5      	b.n	20876 <nd_reachable_timeout+0xa>
	return NULL;
   2088a:	2400      	movs	r4, #0
	if (!data || !nbr) {
   2088c:	b38d      	cbz	r5, 208f2 <nd_reachable_timeout+0x86>
   2088e:	b384      	cbz	r4, 208f2 <nd_reachable_timeout+0x86>
   20890:	4603      	mov	r3, r0
	switch (data->state) {
   20892:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   20896:	2a04      	cmp	r2, #4
   20898:	d82b      	bhi.n	208f2 <nd_reachable_timeout+0x86>
   2089a:	e8df f002 	tbb	[pc, r2]
   2089e:	2703      	.short	0x2703
   208a0:	3f2c      	.short	0x3f2c
   208a2:	45          	.byte	0x45
   208a3:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   208a4:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   208a8:	2a02      	cmp	r2, #2
   208aa:	d912      	bls.n	208d2 <nd_reachable_timeout+0x66>
   208ac:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   208ae:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   208b2:	f008 fd7d 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   208b6:	6828      	ldr	r0, [r5, #0]
   208b8:	b118      	cbz	r0, 208c2 <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   208ba:	f7fc f9ae 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   208be:	2300      	movs	r3, #0
   208c0:	602b      	str	r3, [r5, #0]
   208c2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   208c4:	3014      	adds	r0, #20
   208c6:	f008 fd73 	bl	293b0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   208ca:	4620      	mov	r0, r4
   208cc:	f7fd ffa6 	bl	1e81c <net_nbr_unref>
   208d0:	e00f      	b.n	208f2 <nd_reachable_timeout+0x86>
			data->ns_count++;
   208d2:	3201      	adds	r2, #1
   208d4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   208d8:	68a0      	ldr	r0, [r4, #8]
   208da:	2100      	movs	r1, #0
   208dc:	9101      	str	r1, [sp, #4]
   208de:	3b10      	subs	r3, #16
   208e0:	9300      	str	r3, [sp, #0]
   208e2:	460b      	mov	r3, r1
   208e4:	460a      	mov	r2, r1
   208e6:	f7ff f927 	bl	1fb38 <net_ipv6_send_ns>
   208ea:	e002      	b.n	208f2 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   208ec:	2202      	movs	r2, #2
   208ee:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   208f2:	b003      	add	sp, #12
   208f4:	bd30      	pop	{r4, r5, pc}
   208f6:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   208f8:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   208fc:	f008 fd58 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   20900:	6828      	ldr	r0, [r5, #0]
   20902:	b118      	cbz	r0, 2090c <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   20904:	f7fc f989 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   20908:	2300      	movs	r3, #0
   2090a:	602b      	str	r3, [r5, #0]
   2090c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2090e:	3014      	adds	r0, #20
   20910:	f008 fd4e 	bl	293b0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20914:	4620      	mov	r0, r4
   20916:	f7fd ff81 	bl	1e81c <net_nbr_unref>
   2091a:	e7ea      	b.n	208f2 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   2091c:	2204      	movs	r2, #4
   2091e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   20922:	2200      	movs	r2, #0
   20924:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   20928:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   2092c:	2a02      	cmp	r2, #2
   2092e:	d91f      	bls.n	20970 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   20930:	f1a3 0110 	sub.w	r1, r3, #16
   20934:	68a0      	ldr	r0, [r4, #8]
   20936:	f7fa fbbf 	bl	1b0b8 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   2093a:	2800      	cmp	r0, #0
   2093c:	d0d9      	beq.n	208f2 <nd_reachable_timeout+0x86>
   2093e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   20942:	2a00      	cmp	r2, #0
   20944:	d1d5      	bne.n	208f2 <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   20946:	f7fa fc73 	bl	1b230 <net_if_ipv6_router_rm>
   2094a:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   2094c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20950:	f008 fd2e 	bl	293b0 <k_delayed_work_cancel>
	if (data->pending) {
   20954:	6828      	ldr	r0, [r5, #0]
   20956:	b118      	cbz	r0, 20960 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   20958:	f7fc f95f 	bl	1cc1a <net_pkt_unref>
		data->pending = NULL;
   2095c:	2300      	movs	r3, #0
   2095e:	602b      	str	r3, [r5, #0]
   20960:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   20962:	3014      	adds	r0, #20
   20964:	f008 fd24 	bl	293b0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20968:	4620      	mov	r0, r4
   2096a:	f7fd ff57 	bl	1e81c <net_nbr_unref>
   2096e:	e7c0      	b.n	208f2 <nd_reachable_timeout+0x86>
			data->ns_count++;
   20970:	3201      	adds	r2, #1
   20972:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   20976:	68a0      	ldr	r0, [r4, #8]
   20978:	2100      	movs	r1, #0
   2097a:	9101      	str	r1, [sp, #4]
   2097c:	3b10      	subs	r3, #16
   2097e:	9300      	str	r3, [sp, #0]
   20980:	460b      	mov	r3, r1
   20982:	460a      	mov	r2, r1
   20984:	f7ff f8d8 	bl	1fb38 <net_ipv6_send_ns>
   20988:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2098a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2098e:	3114      	adds	r1, #20
   20990:	4802      	ldr	r0, [pc, #8]	; (2099c <nd_reachable_timeout+0x130>)
   20992:	f008 fd67 	bl	29464 <k_delayed_work_submit_to_queue>
   20996:	e7ac      	b.n	208f2 <nd_reachable_timeout+0x86>
   20998:	2000bdf0 	.word	0x2000bdf0
   2099c:	20002b10 	.word	0x20002b10

000209a0 <net_ipv6_start_dad>:
{
   209a0:	b500      	push	{lr}
   209a2:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   209a4:	2301      	movs	r3, #1
   209a6:	9301      	str	r3, [sp, #4]
   209a8:	3104      	adds	r1, #4
   209aa:	9100      	str	r1, [sp, #0]
   209ac:	2300      	movs	r3, #0
   209ae:	461a      	mov	r2, r3
   209b0:	4619      	mov	r1, r3
   209b2:	f7ff f8c1 	bl	1fb38 <net_ipv6_send_ns>
}
   209b6:	b003      	add	sp, #12
   209b8:	f85d fb04 	ldr.w	pc, [sp], #4

000209bc <net_ipv6_prepare_for_send>:
{
   209bc:	b570      	push	{r4, r5, r6, lr}
   209be:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   209c0:	2300      	movs	r3, #0
   209c2:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   209c4:	6943      	ldr	r3, [r0, #20]
   209c6:	f3bf 8f5b 	dmb	ish
   209ca:	68db      	ldr	r3, [r3, #12]
   209cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   209d0:	f013 0f02 	tst.w	r3, #2
   209d4:	d108      	bne.n	209e8 <net_ipv6_prepare_for_send+0x2c>
   209d6:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   209d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   209da:	b13b      	cbz	r3, 209ec <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   209dc:	68a3      	ldr	r3, [r4, #8]
   209de:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   209e0:	3118      	adds	r1, #24
   209e2:	4620      	mov	r0, r4
   209e4:	f7fe f9e6 	bl	1edb4 <update_ll_reserve>
}
   209e8:	b004      	add	sp, #16
   209ea:	bd70      	pop	{r4, r5, r6, pc}
   209ec:	6883      	ldr	r3, [r0, #8]
   209ee:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   209f0:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   209f2:	2bff      	cmp	r3, #255	; 0xff
   209f4:	d0f2      	beq.n	209dc <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   209f6:	3118      	adds	r1, #24
   209f8:	a803      	add	r0, sp, #12
   209fa:	f7fa fa9d 	bl	1af38 <net_if_ipv6_addr_onlink>
   209fe:	b348      	cbz	r0, 20a54 <net_ipv6_prepare_for_send+0x98>
   20a00:	68a3      	ldr	r3, [r4, #8]
   20a02:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   20a04:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   20a06:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20a08:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20a0a:	7d5a      	ldrb	r2, [r3, #21]
   20a0c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20a10:	7d5b      	ldrb	r3, [r3, #21]
   20a12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   20a16:	9b03      	ldr	r3, [sp, #12]
   20a18:	2b00      	cmp	r3, #0
   20a1a:	d03e      	beq.n	20a9a <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   20a1c:	462a      	mov	r2, r5
   20a1e:	6961      	ldr	r1, [r4, #20]
   20a20:	4832      	ldr	r0, [pc, #200]	; (20aec <net_ipv6_prepare_for_send+0x130>)
   20a22:	f7fe f90d 	bl	1ec40 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   20a26:	4606      	mov	r6, r0
   20a28:	2800      	cmp	r0, #0
   20a2a:	d051      	beq.n	20ad0 <net_ipv6_prepare_for_send+0x114>
   20a2c:	7840      	ldrb	r0, [r0, #1]
   20a2e:	28ff      	cmp	r0, #255	; 0xff
   20a30:	d04e      	beq.n	20ad0 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   20a32:	f7fd ff85 	bl	1e940 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   20a36:	1c83      	adds	r3, r0, #2
   20a38:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   20a3a:	7843      	ldrb	r3, [r0, #1]
   20a3c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   20a40:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   20a42:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20a46:	2b02      	cmp	r3, #2
   20a48:	d036      	beq.n	20ab8 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   20a4a:	4629      	mov	r1, r5
   20a4c:	4620      	mov	r0, r4
   20a4e:	f7fe f9b1 	bl	1edb4 <update_ll_reserve>
   20a52:	e7c9      	b.n	209e8 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   20a54:	68a3      	ldr	r3, [r4, #8]
   20a56:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   20a58:	3118      	adds	r1, #24
   20a5a:	2000      	movs	r0, #0
   20a5c:	f001 fb26 	bl	220ac <net_route_lookup>
		if (route) {
   20a60:	4606      	mov	r6, r0
   20a62:	b160      	cbz	r0, 20a7e <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   20a64:	f001 fc06 	bl	22274 <net_route_get_nexthop>
			if (!nexthop) {
   20a68:	4605      	mov	r5, r0
   20a6a:	2800      	cmp	r0, #0
   20a6c:	d1d3      	bne.n	20a16 <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   20a6e:	4630      	mov	r0, r6
   20a70:	f001 fbac 	bl	221cc <net_route_del>
				net_pkt_unref(pkt);
   20a74:	4620      	mov	r0, r4
   20a76:	f7fc f8d0 	bl	1cc1a <net_pkt_unref>
				return NULL;
   20a7a:	2000      	movs	r0, #0
   20a7c:	e7b4      	b.n	209e8 <net_ipv6_prepare_for_send+0x2c>
   20a7e:	68a3      	ldr	r3, [r4, #8]
   20a80:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   20a82:	3118      	adds	r1, #24
   20a84:	2000      	movs	r0, #0
   20a86:	f7fa fb47 	bl	1b118 <net_if_ipv6_router_find_default>
			if (!router) {
   20a8a:	4605      	mov	r5, r0
   20a8c:	b108      	cbz	r0, 20a92 <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   20a8e:	352c      	adds	r5, #44	; 0x2c
   20a90:	e7c1      	b.n	20a16 <net_ipv6_prepare_for_send+0x5a>
   20a92:	68a3      	ldr	r3, [r4, #8]
   20a94:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   20a96:	3518      	adds	r5, #24
				goto try_send;
   20a98:	e7c0      	b.n	20a1c <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   20a9a:	4629      	mov	r1, r5
   20a9c:	a803      	add	r0, sp, #12
   20a9e:	f7fa fa4b 	bl	1af38 <net_if_ipv6_addr_onlink>
   20aa2:	2800      	cmp	r0, #0
   20aa4:	d0ba      	beq.n	20a1c <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   20aa6:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20aa8:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20aaa:	7d5a      	ldrb	r2, [r3, #21]
   20aac:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20ab0:	7d5b      	ldrb	r3, [r3, #21]
   20ab2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   20ab6:	e7b1      	b.n	20a1c <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   20ab8:	2103      	movs	r1, #3
   20aba:	4630      	mov	r0, r6
   20abc:	f7fd ff48 	bl	1e950 <ipv6_nbr_set_state>
   20ac0:	68f1      	ldr	r1, [r6, #12]
   20ac2:	f241 3288 	movw	r2, #5000	; 0x1388
   20ac6:	3114      	adds	r1, #20
   20ac8:	4809      	ldr	r0, [pc, #36]	; (20af0 <net_ipv6_prepare_for_send+0x134>)
   20aca:	f008 fccb 	bl	29464 <k_delayed_work_submit_to_queue>
   20ace:	e7bc      	b.n	20a4a <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   20ad0:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   20ad2:	68a3      	ldr	r3, [r4, #8]
   20ad4:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   20ad6:	2600      	movs	r6, #0
   20ad8:	9601      	str	r6, [sp, #4]
   20ada:	9500      	str	r5, [sp, #0]
   20adc:	4633      	mov	r3, r6
   20ade:	3208      	adds	r2, #8
   20ae0:	4621      	mov	r1, r4
   20ae2:	f7ff f829 	bl	1fb38 <net_ipv6_send_ns>
		return NULL;
   20ae6:	4630      	mov	r0, r6
   20ae8:	e77e      	b.n	209e8 <net_ipv6_prepare_for_send+0x2c>
   20aea:	bf00      	nop
   20aec:	2000bde4 	.word	0x2000bde4
   20af0:	20002b10 	.word	0x20002b10

00020af4 <net_ipv6_send_rs>:
{
   20af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20af8:	b084      	sub	sp, #16
   20afa:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20afc:	6843      	ldr	r3, [r0, #4]
   20afe:	689b      	ldr	r3, [r3, #8]
   20b00:	2100      	movs	r1, #0
   20b02:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   20b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b08:	f7fc f816 	bl	1cb38 <net_pkt_get_reserve_tx>
   20b0c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20b0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b12:	f7fc f82f 	bl	1cb74 <net_pkt_get_frag>
   20b16:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   20b18:	4601      	mov	r1, r0
   20b1a:	4620      	mov	r0, r4
   20b1c:	f7fc f8a7 	bl	1cc6e <net_pkt_frag_add>
	pkt->iface = iface;
   20b20:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20b22:	7d6b      	ldrb	r3, [r5, #21]
   20b24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20b28:	7d6b      	ldrb	r3, [r5, #21]
   20b2a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20b2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20b32:	220a      	movs	r2, #10
   20b34:	f362 03c6 	bfi	r3, r2, #3, #4
   20b38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20b3c:	2328      	movs	r3, #40	; 0x28
   20b3e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20b42:	68a3      	ldr	r3, [r4, #8]
   20b44:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20b46:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20b4a:	461a      	mov	r2, r3
   20b4c:	2100      	movs	r1, #0
   20b4e:	1ac0      	subs	r0, r0, r3
   20b50:	f009 ffb4 	bl	2aabc <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20b54:	2200      	movs	r2, #0
   20b56:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20b58:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   20b5c:	68a3      	ldr	r3, [r4, #8]
   20b5e:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b64:	7619      	strb	r1, [r3, #24]
   20b66:	2102      	movs	r1, #2
   20b68:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20b6a:	769a      	strb	r2, [r3, #26]
   20b6c:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20b6e:	771a      	strb	r2, [r3, #28]
   20b70:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20b72:	779a      	strb	r2, [r3, #30]
   20b74:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20b76:	f883 2020 	strb.w	r2, [r3, #32]
   20b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20b7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   20b82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   20b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20b8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   20b92:	2201      	movs	r2, #1
   20b94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   20b98:	68a3      	ldr	r3, [r4, #8]
   20b9a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20b9e:	f108 0118 	add.w	r1, r8, #24
   20ba2:	4628      	mov	r0, r5
   20ba4:	f7fa fb9e 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   20ba8:	4603      	mov	r3, r0
   20baa:	466d      	mov	r5, sp
   20bac:	6800      	ldr	r0, [r0, #0]
   20bae:	6859      	ldr	r1, [r3, #4]
   20bb0:	689a      	ldr	r2, [r3, #8]
   20bb2:	68db      	ldr	r3, [r3, #12]
   20bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20bb6:	466d      	mov	r5, sp
   20bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20bba:	f8c8 0008 	str.w	r0, [r8, #8]
   20bbe:	f8c8 100c 	str.w	r1, [r8, #12]
   20bc2:	f8c8 2010 	str.w	r2, [r8, #16]
   20bc6:	f8c8 3014 	str.w	r3, [r8, #20]
   20bca:	68a3      	ldr	r3, [r4, #8]
   20bcc:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20bce:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20bd0:	b93a      	cbnz	r2, 20be2 <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20bd2:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20bd4:	b982      	cbnz	r2, 20bf8 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20bd6:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20bd8:	b982      	cbnz	r2, 20bfc <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20bda:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20bdc:	b183      	cbz	r3, 20c00 <net_ipv6_send_rs+0x10c>
   20bde:	2300      	movs	r3, #0
   20be0:	e000      	b.n	20be4 <net_ipv6_send_rs+0xf0>
   20be2:	2300      	movs	r3, #0
	if (!unspec_src) {
   20be4:	461f      	mov	r7, r3
   20be6:	b97b      	cbnz	r3, 20c08 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   20be8:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20bea:	7d1b      	ldrb	r3, [r3, #20]
   20bec:	2b06      	cmp	r3, #6
   20bee:	d02a      	beq.n	20c46 <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   20bf0:	2b08      	cmp	r3, #8
   20bf2:	d007      	beq.n	20c04 <net_ipv6_send_rs+0x110>
	return 0;
   20bf4:	2500      	movs	r5, #0
   20bf6:	e008      	b.n	20c0a <net_ipv6_send_rs+0x116>
   20bf8:	2300      	movs	r3, #0
   20bfa:	e7f3      	b.n	20be4 <net_ipv6_send_rs+0xf0>
   20bfc:	2300      	movs	r3, #0
   20bfe:	e7f1      	b.n	20be4 <net_ipv6_send_rs+0xf0>
   20c00:	2301      	movs	r3, #1
   20c02:	e7ef      	b.n	20be4 <net_ipv6_send_rs+0xf0>
		return 16;
   20c04:	2510      	movs	r5, #16
   20c06:	e000      	b.n	20c0a <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   20c08:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   20c0a:	2285      	movs	r2, #133	; 0x85
   20c0c:	1d29      	adds	r1, r5, #4
   20c0e:	4620      	mov	r0, r4
   20c10:	f7fe f92f 	bl	1ee72 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   20c14:	3608      	adds	r6, #8
   20c16:	2104      	movs	r1, #4
   20c18:	4630      	mov	r0, r6
   20c1a:	f7f9 fadb 	bl	1a1d4 <net_buf_simple_add>
	if (!unspec_src) {
   20c1e:	b1a7      	cbz	r7, 20c4a <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20c20:	68a1      	ldr	r1, [r4, #8]
   20c22:	4620      	mov	r0, r4
   20c24:	f7fd f8b0 	bl	1dd88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20c28:	4620      	mov	r0, r4
   20c2a:	f7f9 fbf5 	bl	1a418 <net_send_data>
   20c2e:	2800      	cmp	r0, #0
   20c30:	db2b      	blt.n	20c8a <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   20c32:	4a1c      	ldr	r2, [pc, #112]	; (20ca4 <net_ipv6_send_rs+0x1b0>)
   20c34:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20c38:	3301      	adds	r3, #1
   20c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20c3e:	2000      	movs	r0, #0
}
   20c40:	b004      	add	sp, #16
   20c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   20c46:	2508      	movs	r5, #8
   20c48:	e7df      	b.n	20c0a <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   20c4a:	4629      	mov	r1, r5
   20c4c:	4630      	mov	r0, r6
   20c4e:	f7f9 fac1 	bl	1a1d4 <net_buf_simple_add>
   20c52:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   20c56:	4620      	mov	r0, r4
   20c58:	f7fc fab8 	bl	1d1cc <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20c5c:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20c60:	2301      	movs	r3, #1
   20c62:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20c64:	08eb      	lsrs	r3, r5, #3
   20c66:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20c68:	f898 2014 	ldrb.w	r2, [r8, #20]
   20c6c:	f8d8 1010 	ldr.w	r1, [r8, #16]
   20c70:	300a      	adds	r0, #10
   20c72:	f7df fb25 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20c76:	f898 2014 	ldrb.w	r2, [r8, #20]
   20c7a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20c7c:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20c7e:	3a02      	subs	r2, #2
   20c80:	2100      	movs	r1, #0
   20c82:	4430      	add	r0, r6
   20c84:	f009 ff1a 	bl	2aabc <memset>
   20c88:	e7ca      	b.n	20c20 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   20c8a:	4620      	mov	r0, r4
   20c8c:	f7fb ffc5 	bl	1cc1a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20c90:	4a04      	ldr	r2, [pc, #16]	; (20ca4 <net_ipv6_send_rs+0x1b0>)
   20c92:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20c96:	3301      	adds	r3, #1
   20c98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20c9c:	f06f 0015 	mvn.w	r0, #21
   20ca0:	e7ce      	b.n	20c40 <net_ipv6_send_rs+0x14c>
   20ca2:	bf00      	nop
   20ca4:	200029f0 	.word	0x200029f0

00020ca8 <net_ipv6_start_rs>:
{
   20ca8:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   20caa:	f7ff ff23 	bl	20af4 <net_ipv6_send_rs>
}
   20cae:	bd08      	pop	{r3, pc}

00020cb0 <net_ipv6_mld_join>:
{
   20cb0:	b570      	push	{r4, r5, r6, lr}
   20cb2:	b082      	sub	sp, #8
   20cb4:	ab02      	add	r3, sp, #8
   20cb6:	f843 0d04 	str.w	r0, [r3, #-4]!
   20cba:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   20cbc:	4619      	mov	r1, r3
   20cbe:	4628      	mov	r0, r5
   20cc0:	f7fa f842 	bl	1ad48 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   20cc4:	4604      	mov	r4, r0
   20cc6:	b118      	cbz	r0, 20cd0 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   20cc8:	7803      	ldrb	r3, [r0, #0]
   20cca:	f013 0f02 	tst.w	r3, #2
   20cce:	d123      	bne.n	20d18 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   20cd0:	b1c4      	cbz	r4, 20d04 <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   20cd2:	2202      	movs	r2, #2
   20cd4:	4629      	mov	r1, r5
   20cd6:	9801      	ldr	r0, [sp, #4]
   20cd8:	f7fe fb5a 	bl	1f390 <send_mldv2>
	if (ret < 0) {
   20cdc:	1e06      	subs	r6, r0, #0
   20cde:	db0e      	blt.n	20cfe <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   20ce0:	7823      	ldrb	r3, [r4, #0]
   20ce2:	f043 0302 	orr.w	r3, r3, #2
   20ce6:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   20ce8:	2201      	movs	r2, #1
   20cea:	4629      	mov	r1, r5
   20cec:	9801      	ldr	r0, [sp, #4]
   20cee:	f7fa f877 	bl	1ade0 <net_if_mcast_monitor>
   20cf2:	2300      	movs	r3, #0
   20cf4:	461a      	mov	r2, r3
   20cf6:	9901      	ldr	r1, [sp, #4]
   20cf8:	4809      	ldr	r0, [pc, #36]	; (20d20 <net_ipv6_mld_join+0x70>)
   20cfa:	f001 fc01 	bl	22500 <net_mgmt_event_notify_with_info>
}
   20cfe:	4630      	mov	r0, r6
   20d00:	b002      	add	sp, #8
   20d02:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   20d04:	4629      	mov	r1, r5
   20d06:	9801      	ldr	r0, [sp, #4]
   20d08:	f7f9 ff32 	bl	1ab70 <net_if_ipv6_maddr_add>
		if (!maddr) {
   20d0c:	4604      	mov	r4, r0
   20d0e:	2800      	cmp	r0, #0
   20d10:	d1df      	bne.n	20cd2 <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   20d12:	f06f 060b 	mvn.w	r6, #11
   20d16:	e7f2      	b.n	20cfe <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   20d18:	f06f 0677 	mvn.w	r6, #119	; 0x77
   20d1c:	e7ef      	b.n	20cfe <net_ipv6_mld_join+0x4e>
   20d1e:	bf00      	nop
   20d20:	f0600007 	.word	0xf0600007

00020d24 <net_ipv6_mld_leave>:
{
   20d24:	b570      	push	{r4, r5, r6, lr}
   20d26:	4604      	mov	r4, r0
   20d28:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   20d2a:	f7f9 ff5d 	bl	1abe8 <net_if_ipv6_maddr_rm>
   20d2e:	b198      	cbz	r0, 20d58 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   20d30:	2201      	movs	r2, #1
   20d32:	4629      	mov	r1, r5
   20d34:	4620      	mov	r0, r4
   20d36:	f7fe fb2b 	bl	1f390 <send_mldv2>
	if (ret < 0) {
   20d3a:	1e06      	subs	r6, r0, #0
   20d3c:	db0a      	blt.n	20d54 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   20d3e:	2200      	movs	r2, #0
   20d40:	4629      	mov	r1, r5
   20d42:	4620      	mov	r0, r4
   20d44:	f7fa f84c 	bl	1ade0 <net_if_mcast_monitor>
   20d48:	2300      	movs	r3, #0
   20d4a:	461a      	mov	r2, r3
   20d4c:	4621      	mov	r1, r4
   20d4e:	4804      	ldr	r0, [pc, #16]	; (20d60 <net_ipv6_mld_leave+0x3c>)
   20d50:	f001 fbd6 	bl	22500 <net_mgmt_event_notify_with_info>
}
   20d54:	4630      	mov	r0, r6
   20d56:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20d58:	f06f 0615 	mvn.w	r6, #21
   20d5c:	e7fa      	b.n	20d54 <net_ipv6_mld_leave+0x30>
   20d5e:	bf00      	nop
   20d60:	f0600008 	.word	0xf0600008

00020d64 <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   20d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d68:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   20d6a:	6884      	ldr	r4, [r0, #8]
   20d6c:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   20d6e:	2300      	movs	r3, #0
   20d70:	e002      	b.n	20d78 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   20d72:	89a2      	ldrh	r2, [r4, #12]
   20d74:	4413      	add	r3, r2
		buf = buf->frags;
   20d76:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   20d78:	2c00      	cmp	r4, #0
   20d7a:	d1fa      	bne.n	20d72 <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   20d7c:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   20d7e:	7939      	ldrb	r1, [r7, #4]
   20d80:	797a      	ldrb	r2, [r7, #5]
   20d82:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   20d86:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   20d88:	4293      	cmp	r3, r2
   20d8a:	d007      	beq.n	20d9c <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   20d8c:	4abd      	ldr	r2, [pc, #756]	; (21084 <net_ipv6_process_pkt+0x320>)
   20d8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20d90:	3301      	adds	r3, #1
   20d92:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   20d94:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   20d96:	b009      	add	sp, #36	; 0x24
   20d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   20d9c:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   20d9e:	2bff      	cmp	r3, #255	; 0xff
   20da0:	d105      	bne.n	20dae <net_ipv6_process_pkt+0x4a>
   20da2:	4ab8      	ldr	r2, [pc, #736]	; (21084 <net_ipv6_process_pkt+0x320>)
   20da4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20da6:	3301      	adds	r3, #1
   20da8:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20daa:	2002      	movs	r0, #2
   20dac:	e7f3      	b.n	20d96 <net_ipv6_process_pkt+0x32>
   20dae:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20db0:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20db4:	2100      	movs	r1, #0
   20db6:	4640      	mov	r0, r8
   20db8:	f7f9 fd7c 	bl	1a8b4 <net_if_ipv6_addr_lookup>
   20dbc:	2800      	cmp	r0, #0
   20dbe:	d06f      	beq.n	20ea0 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   20dc0:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   20dc2:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   20dc4:	2300      	movs	r3, #0
   20dc6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   20dca:	2328      	movs	r3, #40	; 0x28
   20dcc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   20dd0:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20dd4:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   20dd8:	f000 80b0 	beq.w	20f3c <net_ipv6_process_pkt+0x1d8>
   20ddc:	f1b9 0f11 	cmp.w	r9, #17
   20de0:	f000 80ae 	beq.w	20f40 <net_ipv6_process_pkt+0x1dc>
   20de4:	f1b9 0f06 	cmp.w	r9, #6
   20de8:	f000 80a6 	beq.w	20f38 <net_ipv6_process_pkt+0x1d4>
   20dec:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   20dee:	2b00      	cmp	r3, #0
   20df0:	f040 8166 	bne.w	210c0 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   20df4:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   20df8:	2328      	movs	r3, #40	; 0x28
   20dfa:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   20dfe:	464f      	mov	r7, r9
	ext_bitmap = 0;
   20e00:	2300      	movs	r3, #0
   20e02:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   20e04:	9302      	str	r3, [sp, #8]
   20e06:	46a3      	mov	fp, r4
   20e08:	4654      	mov	r4, sl
	while (frag) {
   20e0a:	2c00      	cmp	r4, #0
   20e0c:	f000 8156 	beq.w	210bc <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20e10:	2f3a      	cmp	r7, #58	; 0x3a
   20e12:	f000 8099 	beq.w	20f48 <net_ipv6_process_pkt+0x1e4>
   20e16:	2f11      	cmp	r7, #17
   20e18:	f000 8098 	beq.w	20f4c <net_ipv6_process_pkt+0x1e8>
   20e1c:	2f06      	cmp	r7, #6
   20e1e:	f000 8091 	beq.w	20f44 <net_ipv6_process_pkt+0x1e0>
   20e22:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   20e24:	2b00      	cmp	r3, #0
   20e26:	f040 8093 	bne.w	20f50 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   20e2a:	f10d 0820 	add.w	r8, sp, #32
   20e2e:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   20e32:	f10d 031f 	add.w	r3, sp, #31
   20e36:	9300      	str	r3, [sp, #0]
   20e38:	2301      	movs	r3, #1
   20e3a:	4642      	mov	r2, r8
   20e3c:	4620      	mov	r0, r4
   20e3e:	f7fc f86a 	bl	1cf16 <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   20e42:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   20e46:	f10d 031e 	add.w	r3, sp, #30
   20e4a:	9300      	str	r3, [sp, #0]
   20e4c:	2301      	movs	r3, #1
   20e4e:	4642      	mov	r2, r8
   20e50:	f7fc f861 	bl	1cf16 <net_frag_read>
		if (!frag && offset == 0xffff) {
   20e54:	4604      	mov	r4, r0
   20e56:	2800      	cmp	r0, #0
   20e58:	f000 8081 	beq.w	20f5e <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   20e5c:	f89d 801e 	ldrb.w	r8, [sp, #30]
   20e60:	f108 0801 	add.w	r8, r8, #1
   20e64:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   20e68:	fa5f f888 	uxtb.w	r8, r8
   20e6c:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   20e70:	fa1f f888 	uxth.w	r8, r8
   20e74:	9b02      	ldr	r3, [sp, #8]
   20e76:	4443      	add	r3, r8
   20e78:	b29b      	uxth	r3, r3
   20e7a:	9302      	str	r3, [sp, #8]
		switch (next) {
   20e7c:	2f00      	cmp	r7, #0
   20e7e:	d077      	beq.n	20f70 <net_ipv6_process_pkt+0x20c>
   20e80:	2f3b      	cmp	r7, #59	; 0x3b
   20e82:	d073      	beq.n	20f6c <net_ipv6_process_pkt+0x208>
			      offset - 1);
   20e84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   20e88:	3b01      	subs	r3, #1
   20e8a:	2201      	movs	r2, #1
   20e8c:	2104      	movs	r1, #4
   20e8e:	4628      	mov	r0, r5
   20e90:	f7fd fa88 	bl	1e3a4 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   20e94:	4a7b      	ldr	r2, [pc, #492]	; (21084 <net_ipv6_process_pkt+0x320>)
   20e96:	6a13      	ldr	r3, [r2, #32]
   20e98:	3301      	adds	r3, #1
   20e9a:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   20e9c:	2002      	movs	r0, #2
   20e9e:	e77a      	b.n	20d96 <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   20ea0:	2100      	movs	r1, #0
   20ea2:	4640      	mov	r0, r8
   20ea4:	f7f9 ff50 	bl	1ad48 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20ea8:	2800      	cmp	r0, #0
   20eaa:	d189      	bne.n	20dc0 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   20eac:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   20eae:	2bff      	cmp	r3, #255	; 0xff
   20eb0:	d086      	beq.n	20dc0 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20eb2:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20eb6:	bb8b      	cbnz	r3, 20f1c <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20eb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20ebc:	bb83      	cbnz	r3, 20f20 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20ec2:	bb7b      	cbnz	r3, 20f24 <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   20ec4:	f8d8 200c 	ldr.w	r2, [r8, #12]
   20ec8:	0a13      	lsrs	r3, r2, #8
   20eca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   20ece:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20ed2:	0211      	lsls	r1, r2, #8
   20ed4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   20ed8:	430b      	orrs	r3, r1
   20eda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ede:	2b01      	cmp	r3, #1
   20ee0:	d022      	beq.n	20f28 <net_ipv6_process_pkt+0x1c4>
   20ee2:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   20ee4:	2b00      	cmp	r3, #0
   20ee6:	f47f af6b 	bne.w	20dc0 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   20eea:	ab06      	add	r3, sp, #24
   20eec:	aa05      	add	r2, sp, #20
   20eee:	4641      	mov	r1, r8
   20ef0:	6968      	ldr	r0, [r5, #20]
   20ef2:	f001 f9f5 	bl	222e0 <net_route_get_info>
   20ef6:	b1c8      	cbz	r0, 20f2c <net_ipv6_process_pkt+0x1c8>
			if (route) {
   20ef8:	9b05      	ldr	r3, [sp, #20]
   20efa:	b13b      	cbz	r3, 20f0c <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   20efc:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   20efe:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20f00:	7d5a      	ldrb	r2, [r3, #21]
   20f02:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20f06:	7d5b      	ldrb	r3, [r3, #21]
   20f08:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   20f0c:	9906      	ldr	r1, [sp, #24]
   20f0e:	4628      	mov	r0, r5
   20f10:	f001 fa0c 	bl	2232c <net_route_packet>
			if (ret < 0) {
   20f14:	2800      	cmp	r0, #0
   20f16:	db09      	blt.n	20f2c <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   20f18:	2000      	movs	r0, #0
   20f1a:	e73c      	b.n	20d96 <net_ipv6_process_pkt+0x32>
   20f1c:	2300      	movs	r3, #0
   20f1e:	e7e1      	b.n	20ee4 <net_ipv6_process_pkt+0x180>
   20f20:	2300      	movs	r3, #0
   20f22:	e7df      	b.n	20ee4 <net_ipv6_process_pkt+0x180>
   20f24:	2300      	movs	r3, #0
   20f26:	e7dd      	b.n	20ee4 <net_ipv6_process_pkt+0x180>
   20f28:	2301      	movs	r3, #1
   20f2a:	e7db      	b.n	20ee4 <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   20f2c:	4a55      	ldr	r2, [pc, #340]	; (21084 <net_ipv6_process_pkt+0x320>)
   20f2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20f30:	3301      	adds	r3, #1
   20f32:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20f34:	2002      	movs	r0, #2
   20f36:	e72e      	b.n	20d96 <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20f38:	2301      	movs	r3, #1
   20f3a:	e758      	b.n	20dee <net_ipv6_process_pkt+0x8a>
   20f3c:	2301      	movs	r3, #1
   20f3e:	e756      	b.n	20dee <net_ipv6_process_pkt+0x8a>
   20f40:	2301      	movs	r3, #1
   20f42:	e754      	b.n	20dee <net_ipv6_process_pkt+0x8a>
   20f44:	2301      	movs	r3, #1
   20f46:	e76d      	b.n	20e24 <net_ipv6_process_pkt+0xc0>
   20f48:	2301      	movs	r3, #1
   20f4a:	e76b      	b.n	20e24 <net_ipv6_process_pkt+0xc0>
   20f4c:	2301      	movs	r3, #1
   20f4e:	e769      	b.n	20e24 <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   20f50:	f89d 301c 	ldrb.w	r3, [sp, #28]
   20f54:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   20f56:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   20f5a:	46b9      	mov	r9, r7
   20f5c:	e0b2      	b.n	210c4 <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   20f5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   20f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f66:	429a      	cmp	r2, r3
   20f68:	f47f af78 	bne.w	20e5c <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   20f6c:	2002      	movs	r0, #2
   20f6e:	e712      	b.n	20d96 <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   20f70:	f1b9 0f00 	cmp.w	r9, #0
   20f74:	d186      	bne.n	20e84 <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   20f76:	9a03      	ldr	r2, [sp, #12]
   20f78:	f012 0f01 	tst.w	r2, #1
   20f7c:	d182      	bne.n	20e84 <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   20f7e:	f042 0301 	orr.w	r3, r2, #1
   20f82:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   20f84:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   20f88:	4546      	cmp	r6, r8
   20f8a:	f2c0 8094 	blt.w	210b6 <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   20f8e:	f10d 0313 	add.w	r3, sp, #19
   20f92:	9300      	str	r3, [sp, #0]
   20f94:	2301      	movs	r3, #1
   20f96:	aa06      	add	r2, sp, #24
   20f98:	4620      	mov	r0, r4
   20f9a:	f7fb ffbc 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20f9e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20fa2:	ab05      	add	r3, sp, #20
   20fa4:	9300      	str	r3, [sp, #0]
   20fa6:	2301      	movs	r3, #1
   20fa8:	aa06      	add	r2, sp, #24
   20faa:	f7fb ffb4 	bl	1cf16 <net_frag_read>
	if (!frag && loc == 0xffff) {
   20fae:	4604      	mov	r4, r0
   20fb0:	b108      	cbz	r0, 20fb6 <net_ipv6_process_pkt+0x252>
   20fb2:	2702      	movs	r7, #2
   20fb4:	e027      	b.n	21006 <net_ipv6_process_pkt+0x2a2>
   20fb6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20fbe:	429a      	cmp	r2, r3
   20fc0:	d068      	beq.n	21094 <net_ipv6_process_pkt+0x330>
   20fc2:	2702      	movs	r7, #2
   20fc4:	e01f      	b.n	21006 <net_ipv6_process_pkt+0x2a2>
			length++;
   20fc6:	3701      	adds	r7, #1
   20fc8:	b2bf      	uxth	r7, r7
			loc--;
   20fca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   20fce:	3b01      	subs	r3, #1
   20fd0:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   20fd4:	45b8      	cmp	r8, r7
   20fd6:	d960      	bls.n	2109a <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   20fd8:	f10d 0a20 	add.w	sl, sp, #32
   20fdc:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   20fe0:	f10d 0313 	add.w	r3, sp, #19
   20fe4:	9300      	str	r3, [sp, #0]
   20fe6:	2301      	movs	r3, #1
   20fe8:	4652      	mov	r2, sl
   20fea:	4620      	mov	r0, r4
   20fec:	f7fb ff93 	bl	1cf16 <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20ff0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20ff4:	ab05      	add	r3, sp, #20
   20ff6:	9300      	str	r3, [sp, #0]
   20ff8:	2301      	movs	r3, #1
   20ffa:	4652      	mov	r2, sl
   20ffc:	f7fb ff8b 	bl	1cf16 <net_frag_read>
		if (!frag && loc == 0xffff) {
   21000:	4604      	mov	r4, r0
   21002:	2800      	cmp	r0, #0
   21004:	d040      	beq.n	21088 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21006:	2c00      	cmp	r4, #0
   21008:	d047      	beq.n	2109a <net_ipv6_process_pkt+0x336>
   2100a:	45b8      	cmp	r8, r7
   2100c:	d945      	bls.n	2109a <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   2100e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21012:	2b00      	cmp	r3, #0
   21014:	d0d7      	beq.n	20fc6 <net_ipv6_process_pkt+0x262>
   21016:	2b01      	cmp	r3, #1
   21018:	d009      	beq.n	2102e <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   2101a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2101e:	2b80      	cmp	r3, #128	; 0x80
   21020:	d019      	beq.n	21056 <net_ipv6_process_pkt+0x2f2>
   21022:	2bc0      	cmp	r3, #192	; 0xc0
   21024:	d012      	beq.n	2104c <net_ipv6_process_pkt+0x2e8>
   21026:	2b40      	cmp	r3, #64	; 0x40
   21028:	d00e      	beq.n	21048 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   2102a:	462b      	mov	r3, r5
   2102c:	e01a      	b.n	21064 <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   2102e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21032:	441f      	add	r7, r3
   21034:	b2bf      	uxth	r7, r7
   21036:	3702      	adds	r7, #2
   21038:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   2103a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2103e:	4413      	add	r3, r2
   21040:	3302      	adds	r3, #2
   21042:	f8ad 3018 	strh.w	r3, [sp, #24]
   21046:	e7c5      	b.n	20fd4 <net_ipv6_process_pkt+0x270>
		return NULL;
   21048:	2300      	movs	r3, #0
   2104a:	e00b      	b.n	21064 <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   2104c:	68ab      	ldr	r3, [r5, #8]
   2104e:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21050:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21052:	2bff      	cmp	r3, #255	; 0xff
   21054:	d013      	beq.n	2107e <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21056:	463b      	mov	r3, r7
   21058:	2202      	movs	r2, #2
   2105a:	2104      	movs	r1, #4
   2105c:	4628      	mov	r0, r5
   2105e:	f7fd f9a1 	bl	1e3a4 <net_icmpv6_send_error>
		return NULL;
   21062:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21064:	b1b3      	cbz	r3, 21094 <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21066:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2106a:	441f      	add	r7, r3
   2106c:	b2bf      	uxth	r7, r7
   2106e:	3702      	adds	r7, #2
   21070:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21072:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21076:	4413      	add	r3, r2
   21078:	f8ad 3018 	strh.w	r3, [sp, #24]
   2107c:	e7aa      	b.n	20fd4 <net_ipv6_process_pkt+0x270>
			return NULL;
   2107e:	2300      	movs	r3, #0
   21080:	e7f0      	b.n	21064 <net_ipv6_process_pkt+0x300>
   21082:	bf00      	nop
   21084:	200029f0 	.word	0x200029f0
		if (!frag && loc == 0xffff) {
   21088:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21090:	429a      	cmp	r2, r3
   21092:	d1b8      	bne.n	21006 <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21094:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21096:	2302      	movs	r3, #2
   21098:	e007      	b.n	210aa <net_ipv6_process_pkt+0x346>
	if (length != len) {
   2109a:	45b8      	cmp	r8, r7
   2109c:	d1fa      	bne.n	21094 <net_ipv6_process_pkt+0x330>
	*pos += length;
   2109e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   210a2:	441f      	add	r7, r3
   210a4:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   210a8:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   210aa:	2b02      	cmp	r3, #2
   210ac:	f43f af5e 	beq.w	20f6c <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   210b0:	f89d 701f 	ldrb.w	r7, [sp, #31]
   210b4:	e6a9      	b.n	20e0a <net_ipv6_process_pkt+0xa6>
		return NULL;
   210b6:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   210b8:	2302      	movs	r3, #2
   210ba:	e7f6      	b.n	210aa <net_ipv6_process_pkt+0x346>
   210bc:	46b9      	mov	r9, r7
   210be:	e001      	b.n	210c4 <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   210c0:	2300      	movs	r3, #0
   210c2:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   210c4:	9b02      	ldr	r3, [sp, #8]
   210c6:	b10b      	cbz	r3, 210cc <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   210c8:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   210cc:	f1b9 0f11 	cmp.w	r9, #17
   210d0:	d011      	beq.n	210f6 <net_ipv6_process_pkt+0x392>
   210d2:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   210d6:	d004      	beq.n	210e2 <net_ipv6_process_pkt+0x37e>
   210d8:	f1b9 0f06 	cmp.w	r9, #6
   210dc:	d010      	beq.n	21100 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   210de:	2002      	movs	r0, #2
   210e0:	e659      	b.n	20d96 <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   210e2:	a906      	add	r1, sp, #24
   210e4:	4628      	mov	r0, r5
   210e6:	f7fc fe9c 	bl	1de22 <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   210ea:	7842      	ldrb	r2, [r0, #1]
   210ec:	7801      	ldrb	r1, [r0, #0]
   210ee:	4628      	mov	r0, r5
   210f0:	f7fd fb62 	bl	1e7b8 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   210f4:	e64f      	b.n	20d96 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   210f6:	4629      	mov	r1, r5
   210f8:	2011      	movs	r0, #17
   210fa:	f003 fbd3 	bl	248a4 <net_conn_input>
   210fe:	e64a      	b.n	20d96 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21100:	4629      	mov	r1, r5
   21102:	2006      	movs	r0, #6
   21104:	f003 fbce 	bl	248a4 <net_conn_input>
   21108:	e645      	b.n	20d96 <net_ipv6_process_pkt+0x32>
   2110a:	bf00      	nop

0002110c <net_ipv6_init>:

void net_ipv6_init(void)
{
   2110c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   2110e:	4806      	ldr	r0, [pc, #24]	; (21128 <net_ipv6_init+0x1c>)
   21110:	f7fc fe0a 	bl	1dd28 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21114:	4805      	ldr	r0, [pc, #20]	; (2112c <net_ipv6_init+0x20>)
   21116:	f7fc fe07 	bl	1dd28 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   2111a:	4805      	ldr	r0, [pc, #20]	; (21130 <net_ipv6_init+0x24>)
   2111c:	f7fc fe04 	bl	1dd28 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21120:	4804      	ldr	r0, [pc, #16]	; (21134 <net_ipv6_init+0x28>)
   21122:	f7fc fe01 	bl	1dd28 <net_icmpv6_register_handler>
   21126:	bd08      	pop	{r3, pc}
   21128:	2000c1f0 	.word	0x2000c1f0
   2112c:	2000bdd8 	.word	0x2000bdd8
   21130:	2000c1fc 	.word	0x2000c1fc
   21134:	2000bdcc 	.word	0x2000bdcc

00021138 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   2113c:	6883      	ldr	r3, [r0, #8]
   2113e:	689b      	ldr	r3, [r3, #8]
   21140:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21144:	2b00      	cmp	r3, #0
   21146:	f2c0 831e 	blt.w	21786 <uncompress_IPHC_header+0x64e>
   2114a:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   2114c:	2164      	movs	r1, #100	; 0x64
   2114e:	f7fb fd11 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   21152:	4607      	mov	r7, r0
   21154:	2800      	cmp	r0, #0
   21156:	f000 8319 	beq.w	2178c <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   2115a:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   2115c:	2360      	movs	r3, #96	; 0x60
   2115e:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21160:	2328      	movs	r3, #40	; 0x28
   21162:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21166:	68a3      	ldr	r3, [r4, #8]
   21168:	689a      	ldr	r2, [r3, #8]
   2116a:	7813      	ldrb	r3, [r2, #0]
   2116c:	f003 0318 	and.w	r3, r3, #24
   21170:	2b18      	cmp	r3, #24
   21172:	d863      	bhi.n	2123c <uncompress_IPHC_header+0x104>
   21174:	e8df f003 	tbb	[pc, r3]
   21178:	6262620d 	.word	0x6262620d
   2117c:	62626262 	.word	0x62626262
   21180:	6262623c 	.word	0x6262623c
   21184:	62626262 	.word	0x62626262
   21188:	6262624c 	.word	0x6262624c
   2118c:	62626262 	.word	0x62626262
   21190:	5c          	.byte	0x5c
   21191:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21192:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21194:	0993      	lsrs	r3, r2, #6
   21196:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2119a:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   2119c:	7832      	ldrb	r2, [r6, #0]
   2119e:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   211a2:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   211a4:	68a2      	ldr	r2, [r4, #8]
   211a6:	6892      	ldr	r2, [r2, #8]
   211a8:	f992 2003 	ldrsb.w	r2, [r2, #3]
   211ac:	f002 020f 	and.w	r2, r2, #15
   211b0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   211b4:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   211b6:	68a3      	ldr	r3, [r4, #8]
   211b8:	6899      	ldr	r1, [r3, #8]
   211ba:	2202      	movs	r2, #2
   211bc:	3104      	adds	r1, #4
   211be:	18b0      	adds	r0, r6, r2
   211c0:	f7df f87e 	bl	2c0 <memcpy>
		offset += 2;
   211c4:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   211c6:	68a3      	ldr	r3, [r4, #8]
   211c8:	689b      	ldr	r3, [r3, #8]
   211ca:	781a      	ldrb	r2, [r3, #0]
   211cc:	f012 0f04 	tst.w	r2, #4
   211d0:	d103      	bne.n	211da <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   211d2:	5d5b      	ldrb	r3, [r3, r5]
   211d4:	71b3      	strb	r3, [r6, #6]
		offset++;
   211d6:	3501      	adds	r5, #1
   211d8:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   211da:	68a3      	ldr	r3, [r4, #8]
   211dc:	689a      	ldr	r2, [r3, #8]
   211de:	7813      	ldrb	r3, [r2, #0]
   211e0:	f003 0303 	and.w	r3, r3, #3
   211e4:	2b03      	cmp	r3, #3
   211e6:	d82f      	bhi.n	21248 <uncompress_IPHC_header+0x110>
   211e8:	e8df f003 	tbb	[pc, r3]
   211ec:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   211f0:	7893      	ldrb	r3, [r2, #2]
   211f2:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   211f4:	f003 030f 	and.w	r3, r3, #15
   211f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   211fc:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   211fe:	68a3      	ldr	r3, [r4, #8]
   21200:	6899      	ldr	r1, [r3, #8]
   21202:	2202      	movs	r2, #2
   21204:	3103      	adds	r1, #3
   21206:	18b0      	adds	r0, r6, r2
   21208:	f7df f85a 	bl	2c0 <memcpy>
		offset += 2;
   2120c:	2505      	movs	r5, #5
   2120e:	e7da      	b.n	211c6 <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21210:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21212:	0993      	lsrs	r3, r2, #6
   21214:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21218:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   2121a:	7832      	ldrb	r2, [r6, #0]
   2121c:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21220:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21222:	011b      	lsls	r3, r3, #4
   21224:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21226:	2300      	movs	r3, #0
   21228:	70b3      	strb	r3, [r6, #2]
   2122a:	70f3      	strb	r3, [r6, #3]
		offset++;
   2122c:	2503      	movs	r5, #3
   2122e:	e7ca      	b.n	211c6 <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21230:	2300      	movs	r3, #0
   21232:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21234:	70b3      	strb	r3, [r6, #2]
   21236:	70f3      	strb	r3, [r6, #3]
   21238:	2502      	movs	r5, #2
   2123a:	e7c4      	b.n	211c6 <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2123c:	2502      	movs	r5, #2
   2123e:	e7c2      	b.n	211c6 <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21240:	1c6b      	adds	r3, r5, #1
   21242:	5d52      	ldrb	r2, [r2, r5]
   21244:	71f2      	strb	r2, [r6, #7]
   21246:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21248:	2210      	movs	r2, #16
   2124a:	2100      	movs	r1, #0
   2124c:	f106 0008 	add.w	r0, r6, #8
   21250:	f009 fc34 	bl	2aabc <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21254:	2210      	movs	r2, #16
   21256:	2100      	movs	r1, #0
   21258:	f106 0018 	add.w	r0, r6, #24
   2125c:	f009 fc2e 	bl	2aabc <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21260:	68a3      	ldr	r3, [r4, #8]
   21262:	689b      	ldr	r3, [r3, #8]
   21264:	785b      	ldrb	r3, [r3, #1]
   21266:	f013 0f40 	tst.w	r3, #64	; 0x40
   2126a:	d011      	beq.n	21290 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   2126c:	f013 0f30 	tst.w	r3, #48	; 0x30
   21270:	d05e      	beq.n	21330 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21272:	4638      	mov	r0, r7
   21274:	f7fb fccb 	bl	1cc0e <net_pkt_frag_unref>
	return false;
   21278:	2000      	movs	r0, #0
   2127a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   2127e:	2301      	movs	r3, #1
   21280:	71f3      	strb	r3, [r6, #7]
   21282:	e7e1      	b.n	21248 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21284:	2340      	movs	r3, #64	; 0x40
   21286:	71f3      	strb	r3, [r6, #7]
   21288:	e7de      	b.n	21248 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   2128a:	23ff      	movs	r3, #255	; 0xff
   2128c:	71f3      	strb	r3, [r6, #7]
   2128e:	e7db      	b.n	21248 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21290:	68a3      	ldr	r3, [r4, #8]
   21292:	6899      	ldr	r1, [r3, #8]
   21294:	784b      	ldrb	r3, [r1, #1]
   21296:	f003 0330 	and.w	r3, r3, #48	; 0x30
   2129a:	2b10      	cmp	r3, #16
   2129c:	d059      	beq.n	21352 <uncompress_IPHC_header+0x21a>
   2129e:	d93e      	bls.n	2131e <uncompress_IPHC_header+0x1e6>
   212a0:	2b20      	cmp	r3, #32
   212a2:	d065      	beq.n	21370 <uncompress_IPHC_header+0x238>
   212a4:	2b30      	cmp	r3, #48	; 0x30
   212a6:	d143      	bne.n	21330 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   212a8:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   212ac:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   212b0:	23fe      	movs	r3, #254	; 0xfe
   212b2:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   212b4:	2380      	movs	r3, #128	; 0x80
   212b6:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   212ba:	2300      	movs	r3, #0
   212bc:	f888 3002 	strb.w	r3, [r8, #2]
   212c0:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   212c4:	f888 3004 	strb.w	r3, [r8, #4]
   212c8:	f888 3005 	strb.w	r3, [r8, #5]
   212cc:	f888 3006 	strb.w	r3, [r8, #6]
   212d0:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   212d4:	f899 2004 	ldrb.w	r2, [r9, #4]
   212d8:	2a06      	cmp	r2, #6
   212da:	d05b      	beq.n	21394 <uncompress_IPHC_header+0x25c>
   212dc:	2a08      	cmp	r2, #8
   212de:	f000 8082 	beq.w	213e6 <uncompress_IPHC_header+0x2ae>
   212e2:	2a02      	cmp	r2, #2
   212e4:	d124      	bne.n	21330 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   212e6:	f899 3005 	ldrb.w	r3, [r9, #5]
   212ea:	2b01      	cmp	r3, #1
   212ec:	d120      	bne.n	21330 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   212ee:	2300      	movs	r3, #0
   212f0:	f888 3008 	strb.w	r3, [r8, #8]
   212f4:	f888 3009 	strb.w	r3, [r8, #9]
   212f8:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   212fc:	22ff      	movs	r2, #255	; 0xff
   212fe:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21302:	22fe      	movs	r2, #254	; 0xfe
   21304:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21308:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2130c:	6a23      	ldr	r3, [r4, #32]
   2130e:	781b      	ldrb	r3, [r3, #0]
   21310:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21314:	6a23      	ldr	r3, [r4, #32]
   21316:	785b      	ldrb	r3, [r3, #1]
   21318:	f888 300f 	strb.w	r3, [r8, #15]
   2131c:	e008      	b.n	21330 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   2131e:	b93b      	cbnz	r3, 21330 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21320:	2210      	movs	r2, #16
   21322:	4429      	add	r1, r5
   21324:	f106 0008 	add.w	r0, r6, #8
   21328:	f7de ffca 	bl	2c0 <memcpy>
		offset += 16;
   2132c:	3510      	adds	r5, #16
   2132e:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21330:	68a3      	ldr	r3, [r4, #8]
   21332:	6899      	ldr	r1, [r3, #8]
   21334:	784b      	ldrb	r3, [r1, #1]
   21336:	f013 0f08 	tst.w	r3, #8
   2133a:	d160      	bne.n	213fe <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   2133c:	f003 0303 	and.w	r3, r3, #3
   21340:	2b03      	cmp	r3, #3
   21342:	f200 80ad 	bhi.w	214a0 <uncompress_IPHC_header+0x368>
   21346:	e8df f013 	tbh	[pc, r3, lsl #1]
   2134a:	00a3      	.short	0x00a3
   2134c:	00e500d6 	.word	0x00e500d6
   21350:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21352:	23fe      	movs	r3, #254	; 0xfe
   21354:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21356:	2380      	movs	r3, #128	; 0x80
   21358:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   2135a:	68a3      	ldr	r3, [r4, #8]
   2135c:	6899      	ldr	r1, [r3, #8]
   2135e:	2208      	movs	r2, #8
   21360:	4429      	add	r1, r5
   21362:	f106 0010 	add.w	r0, r6, #16
   21366:	f7de ffab 	bl	2c0 <memcpy>
		offset += 8;
   2136a:	3508      	adds	r5, #8
   2136c:	b2ed      	uxtb	r5, r5
   2136e:	e7df      	b.n	21330 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21370:	23fe      	movs	r3, #254	; 0xfe
   21372:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21374:	2280      	movs	r2, #128	; 0x80
   21376:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21378:	22ff      	movs	r2, #255	; 0xff
   2137a:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   2137c:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   2137e:	68a3      	ldr	r3, [r4, #8]
   21380:	6899      	ldr	r1, [r3, #8]
   21382:	2202      	movs	r2, #2
   21384:	4429      	add	r1, r5
   21386:	f106 0016 	add.w	r0, r6, #22
   2138a:	f7de ff99 	bl	2c0 <memcpy>
		offset += 2;
   2138e:	3502      	adds	r5, #2
   21390:	b2ed      	uxtb	r5, r5
   21392:	e7cd      	b.n	21330 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21394:	2203      	movs	r2, #3
   21396:	6a21      	ldr	r1, [r4, #32]
   21398:	f108 0008 	add.w	r0, r8, #8
   2139c:	f7de ff90 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   213a0:	23ff      	movs	r3, #255	; 0xff
   213a2:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   213a6:	23fe      	movs	r3, #254	; 0xfe
   213a8:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   213ac:	6a21      	ldr	r1, [r4, #32]
   213ae:	2203      	movs	r2, #3
   213b0:	4411      	add	r1, r2
   213b2:	f108 000d 	add.w	r0, r8, #13
   213b6:	f7de ff83 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   213ba:	f899 3005 	ldrb.w	r3, [r9, #5]
   213be:	2b02      	cmp	r3, #2
   213c0:	d00a      	beq.n	213d8 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   213c2:	f899 3005 	ldrb.w	r3, [r9, #5]
   213c6:	2b03      	cmp	r3, #3
   213c8:	d1b2      	bne.n	21330 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   213ca:	f898 3008 	ldrb.w	r3, [r8, #8]
   213ce:	f083 0302 	eor.w	r3, r3, #2
   213d2:	f888 3008 	strb.w	r3, [r8, #8]
   213d6:	e7ab      	b.n	21330 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   213d8:	f898 3008 	ldrb.w	r3, [r8, #8]
   213dc:	f083 0302 	eor.w	r3, r3, #2
   213e0:	f888 3008 	strb.w	r3, [r8, #8]
   213e4:	e7ed      	b.n	213c2 <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   213e6:	6a21      	ldr	r1, [r4, #32]
   213e8:	f108 0008 	add.w	r0, r8, #8
   213ec:	f7de ff68 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   213f0:	f898 3008 	ldrb.w	r3, [r8, #8]
   213f4:	f083 0302 	eor.w	r3, r3, #2
   213f8:	f888 3008 	strb.w	r3, [r8, #8]
   213fc:	e798      	b.n	21330 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   213fe:	784b      	ldrb	r3, [r1, #1]
   21400:	f013 0f04 	tst.w	r3, #4
   21404:	d142      	bne.n	2148c <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21406:	f003 0303 	and.w	r3, r3, #3
   2140a:	2b03      	cmp	r3, #3
   2140c:	d848      	bhi.n	214a0 <uncompress_IPHC_header+0x368>
   2140e:	e8df f003 	tbb	[pc, r3]
   21412:	0b02      	.short	0x0b02
   21414:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21416:	2210      	movs	r2, #16
   21418:	4429      	add	r1, r5
   2141a:	f106 0018 	add.w	r0, r6, #24
   2141e:	f7de ff4f 	bl	2c0 <memcpy>
		offset += 16;
   21422:	3510      	adds	r5, #16
   21424:	b2ed      	uxtb	r5, r5
   21426:	e03b      	b.n	214a0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21428:	23ff      	movs	r3, #255	; 0xff
   2142a:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2142c:	68a3      	ldr	r3, [r4, #8]
   2142e:	689b      	ldr	r3, [r3, #8]
   21430:	1c69      	adds	r1, r5, #1
   21432:	5d5b      	ldrb	r3, [r3, r5]
   21434:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21436:	68a3      	ldr	r3, [r4, #8]
   21438:	689b      	ldr	r3, [r3, #8]
   2143a:	2205      	movs	r2, #5
   2143c:	fa53 f181 	uxtab	r1, r3, r1
   21440:	f106 0023 	add.w	r0, r6, #35	; 0x23
   21444:	f7de ff3c 	bl	2c0 <memcpy>
		offset += 5;
   21448:	3506      	adds	r5, #6
   2144a:	b2ed      	uxtb	r5, r5
   2144c:	e028      	b.n	214a0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   2144e:	23ff      	movs	r3, #255	; 0xff
   21450:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21452:	68a3      	ldr	r3, [r4, #8]
   21454:	689b      	ldr	r3, [r3, #8]
   21456:	1c69      	adds	r1, r5, #1
   21458:	5d5b      	ldrb	r3, [r3, r5]
   2145a:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   2145c:	68a3      	ldr	r3, [r4, #8]
   2145e:	689b      	ldr	r3, [r3, #8]
   21460:	2203      	movs	r2, #3
   21462:	fa53 f181 	uxtab	r1, r3, r1
   21466:	f106 0025 	add.w	r0, r6, #37	; 0x25
   2146a:	f7de ff29 	bl	2c0 <memcpy>
		offset += 3;
   2146e:	3504      	adds	r5, #4
   21470:	b2ed      	uxtb	r5, r5
   21472:	e015      	b.n	214a0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21474:	23ff      	movs	r3, #255	; 0xff
   21476:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21478:	2302      	movs	r3, #2
   2147a:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   2147c:	68a3      	ldr	r3, [r4, #8]
   2147e:	689a      	ldr	r2, [r3, #8]
   21480:	1c6b      	adds	r3, r5, #1
   21482:	5d52      	ldrb	r2, [r2, r5]
   21484:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   21488:	b2dd      	uxtb	r5, r3
   2148a:	e009      	b.n	214a0 <uncompress_IPHC_header+0x368>
		return 0;
   2148c:	2500      	movs	r5, #0
   2148e:	e007      	b.n	214a0 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21490:	2210      	movs	r2, #16
   21492:	4429      	add	r1, r5
   21494:	f106 0018 	add.w	r0, r6, #24
   21498:	f7de ff12 	bl	2c0 <memcpy>
		offset += 16;
   2149c:	3510      	adds	r5, #16
   2149e:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   214a0:	f107 0a08 	add.w	sl, r7, #8
   214a4:	2128      	movs	r1, #40	; 0x28
   214a6:	4650      	mov	r0, sl
   214a8:	f7f8 fe94 	bl	1a1d4 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   214ac:	68a3      	ldr	r3, [r4, #8]
   214ae:	689b      	ldr	r3, [r3, #8]
   214b0:	781a      	ldrb	r2, [r3, #0]
   214b2:	f012 0f04 	tst.w	r2, #4
   214b6:	f000 8114 	beq.w	216e2 <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   214ba:	5d5b      	ldrb	r3, [r3, r5]
   214bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   214c0:	2bf0      	cmp	r3, #240	; 0xf0
   214c2:	f47f aed6 	bne.w	21272 <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   214c6:	2311      	movs	r3, #17
   214c8:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   214ca:	f8d7 b008 	ldr.w	fp, [r7, #8]
   214ce:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   214d2:	68a3      	ldr	r3, [r4, #8]
   214d4:	6898      	ldr	r0, [r3, #8]
   214d6:	f810 8005 	ldrb.w	r8, [r0, r5]
   214da:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   214de:	1c69      	adds	r1, r5, #1
   214e0:	b2c9      	uxtb	r1, r1
   214e2:	5d43      	ldrb	r3, [r0, r5]
   214e4:	f003 0303 	and.w	r3, r3, #3
   214e8:	2b03      	cmp	r3, #3
   214ea:	f200 80ed 	bhi.w	216c8 <uncompress_IPHC_header+0x590>
   214ee:	e8df f003 	tbb	[pc, r3]
   214f2:	ae95      	.short	0xae95
   214f4:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   214f6:	23fe      	movs	r3, #254	; 0xfe
   214f8:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   214fa:	2380      	movs	r3, #128	; 0x80
   214fc:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   214fe:	68a3      	ldr	r3, [r4, #8]
   21500:	6899      	ldr	r1, [r3, #8]
   21502:	2208      	movs	r2, #8
   21504:	4429      	add	r1, r5
   21506:	f106 0020 	add.w	r0, r6, #32
   2150a:	f7de fed9 	bl	2c0 <memcpy>
		offset += 8;
   2150e:	3508      	adds	r5, #8
   21510:	b2ed      	uxtb	r5, r5
   21512:	e7c5      	b.n	214a0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   21514:	23fe      	movs	r3, #254	; 0xfe
   21516:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21518:	2280      	movs	r2, #128	; 0x80
   2151a:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   2151c:	22ff      	movs	r2, #255	; 0xff
   2151e:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   21522:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   21526:	68a3      	ldr	r3, [r4, #8]
   21528:	6899      	ldr	r1, [r3, #8]
   2152a:	2202      	movs	r2, #2
   2152c:	4429      	add	r1, r5
   2152e:	f106 0026 	add.w	r0, r6, #38	; 0x26
   21532:	f7de fec5 	bl	2c0 <memcpy>
		offset += 2;
   21536:	3502      	adds	r5, #2
   21538:	b2ed      	uxtb	r5, r5
   2153a:	e7b1      	b.n	214a0 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   2153c:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   21540:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   21544:	23fe      	movs	r3, #254	; 0xfe
   21546:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   21548:	2380      	movs	r3, #128	; 0x80
   2154a:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2154e:	2300      	movs	r3, #0
   21550:	f888 3002 	strb.w	r3, [r8, #2]
   21554:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21558:	f888 3004 	strb.w	r3, [r8, #4]
   2155c:	f888 3005 	strb.w	r3, [r8, #5]
   21560:	f888 3006 	strb.w	r3, [r8, #6]
   21564:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21568:	f899 2004 	ldrb.w	r2, [r9, #4]
   2156c:	2a06      	cmp	r2, #6
   2156e:	d01f      	beq.n	215b0 <uncompress_IPHC_header+0x478>
   21570:	2a08      	cmp	r2, #8
   21572:	d047      	beq.n	21604 <uncompress_IPHC_header+0x4cc>
   21574:	2a02      	cmp	r2, #2
   21576:	d193      	bne.n	214a0 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21578:	f899 3005 	ldrb.w	r3, [r9, #5]
   2157c:	2b01      	cmp	r3, #1
   2157e:	d18f      	bne.n	214a0 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21580:	2300      	movs	r3, #0
   21582:	f888 3008 	strb.w	r3, [r8, #8]
   21586:	f888 3009 	strb.w	r3, [r8, #9]
   2158a:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   2158e:	22ff      	movs	r2, #255	; 0xff
   21590:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21594:	22fe      	movs	r2, #254	; 0xfe
   21596:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   2159a:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2159e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215a0:	781b      	ldrb	r3, [r3, #0]
   215a2:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   215a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215a8:	785b      	ldrb	r3, [r3, #1]
   215aa:	f888 300f 	strb.w	r3, [r8, #15]
   215ae:	e777      	b.n	214a0 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   215b0:	2203      	movs	r2, #3
   215b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   215b4:	f108 0008 	add.w	r0, r8, #8
   215b8:	f7de fe82 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   215bc:	23ff      	movs	r3, #255	; 0xff
   215be:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   215c2:	23fe      	movs	r3, #254	; 0xfe
   215c4:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   215c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   215ca:	2203      	movs	r2, #3
   215cc:	4411      	add	r1, r2
   215ce:	f108 000d 	add.w	r0, r8, #13
   215d2:	f7de fe75 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   215d6:	f899 3005 	ldrb.w	r3, [r9, #5]
   215da:	2b02      	cmp	r3, #2
   215dc:	d00b      	beq.n	215f6 <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   215de:	f899 3005 	ldrb.w	r3, [r9, #5]
   215e2:	2b03      	cmp	r3, #3
   215e4:	f47f af5c 	bne.w	214a0 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   215e8:	f898 3008 	ldrb.w	r3, [r8, #8]
   215ec:	f083 0302 	eor.w	r3, r3, #2
   215f0:	f888 3008 	strb.w	r3, [r8, #8]
   215f4:	e754      	b.n	214a0 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   215f6:	f898 3008 	ldrb.w	r3, [r8, #8]
   215fa:	f083 0302 	eor.w	r3, r3, #2
   215fe:	f888 3008 	strb.w	r3, [r8, #8]
   21602:	e7ec      	b.n	215de <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21604:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21606:	f108 0008 	add.w	r0, r8, #8
   2160a:	f7de fe59 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2160e:	f898 3008 	ldrb.w	r3, [r8, #8]
   21612:	f083 0302 	eor.w	r3, r3, #2
   21616:	f888 3008 	strb.w	r3, [r8, #8]
   2161a:	e741      	b.n	214a0 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2161c:	2202      	movs	r2, #2
   2161e:	4401      	add	r1, r0
   21620:	4648      	mov	r0, r9
   21622:	f7de fe4d 	bl	2c0 <memcpy>
		offset += 2;
   21626:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   21628:	68a3      	ldr	r3, [r4, #8]
   2162a:	689b      	ldr	r3, [r3, #8]
   2162c:	2202      	movs	r2, #2
   2162e:	fa53 f181 	uxtab	r1, r3, r1
   21632:	eb09 0002 	add.w	r0, r9, r2
   21636:	f7de fe43 	bl	2c0 <memcpy>
		offset += 2;
   2163a:	3505      	adds	r5, #5
   2163c:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   2163e:	f1b8 0f00 	cmp.w	r8, #0
   21642:	d043      	beq.n	216cc <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   21644:	2108      	movs	r1, #8
   21646:	4650      	mov	r0, sl
   21648:	f7f8 fdc4 	bl	1a1d4 <net_buf_simple_add>
   2164c:	e04c      	b.n	216e8 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2164e:	2202      	movs	r2, #2
   21650:	4401      	add	r1, r0
   21652:	4648      	mov	r0, r9
   21654:	f7de fe34 	bl	2c0 <memcpy>
		offset += 2;
   21658:	1ceb      	adds	r3, r5, #3
   2165a:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2165c:	68a2      	ldr	r2, [r4, #8]
   2165e:	6892      	ldr	r2, [r2, #8]
   21660:	5cd3      	ldrb	r3, [r2, r3]
   21662:	021b      	lsls	r3, r3, #8
   21664:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21668:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2166c:	3504      	adds	r5, #4
   2166e:	b2ed      	uxtb	r5, r5
   21670:	e7e5      	b.n	2163e <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   21672:	5c43      	ldrb	r3, [r0, r1]
   21674:	021b      	lsls	r3, r3, #8
   21676:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2167a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   2167e:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   21680:	68a3      	ldr	r3, [r4, #8]
   21682:	689b      	ldr	r3, [r3, #8]
   21684:	2202      	movs	r2, #2
   21686:	fa53 f181 	uxtab	r1, r3, r1
   2168a:	eb09 0002 	add.w	r0, r9, r2
   2168e:	f7de fe17 	bl	2c0 <memcpy>
		offset += 2;
   21692:	3504      	adds	r5, #4
   21694:	b2ed      	uxtb	r5, r5
   21696:	e7d2      	b.n	2163e <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   21698:	5c43      	ldrb	r3, [r0, r1]
   2169a:	091b      	lsrs	r3, r3, #4
   2169c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   216a0:	021b      	lsls	r3, r3, #8
   216a2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   216a6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   216aa:	68a3      	ldr	r3, [r4, #8]
   216ac:	689b      	ldr	r3, [r3, #8]
   216ae:	5c5b      	ldrb	r3, [r3, r1]
   216b0:	021b      	lsls	r3, r3, #8
   216b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   216b6:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   216ba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   216be:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   216c2:	3502      	adds	r5, #2
   216c4:	b2ed      	uxtb	r5, r5
   216c6:	e7ba      	b.n	2163e <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   216c8:	460d      	mov	r5, r1
   216ca:	e7b8      	b.n	2163e <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   216cc:	68a3      	ldr	r3, [r4, #8]
   216ce:	6899      	ldr	r1, [r3, #8]
   216d0:	2202      	movs	r2, #2
   216d2:	4429      	add	r1, r5
   216d4:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   216d8:	f7de fdf2 	bl	2c0 <memcpy>
		offset += 2;
   216dc:	3502      	adds	r5, #2
   216de:	b2ed      	uxtb	r5, r5
   216e0:	e7b0      	b.n	21644 <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   216e2:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   216e6:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   216e8:	68a3      	ldr	r3, [r4, #8]
   216ea:	899a      	ldrh	r2, [r3, #12]
   216ec:	fa1f fa85 	uxth.w	sl, r5
   216f0:	4552      	cmp	r2, sl
   216f2:	f4ff adbe 	bcc.w	21272 <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   216f6:	6898      	ldr	r0, [r3, #8]
   216f8:	1b52      	subs	r2, r2, r5
   216fa:	1941      	adds	r1, r0, r5
   216fc:	f009 f97a 	bl	2a9f4 <memmove>
	pkt->frags->len -= offset;
   21700:	68a2      	ldr	r2, [r4, #8]
   21702:	8993      	ldrh	r3, [r2, #12]
   21704:	eba3 0a0a 	sub.w	sl, r3, sl
   21708:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   2170c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   21710:	b94a      	cbnz	r2, 21726 <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   21712:	4639      	mov	r1, r7
   21714:	4620      	mov	r0, r4
   21716:	f7fb fab7 	bl	1cc88 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2171a:	4620      	mov	r0, r4
   2171c:	f7fb fb6e 	bl	1cdfc <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   21720:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21722:	2200      	movs	r2, #0
   21724:	e00b      	b.n	2173e <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   21726:	68bb      	ldr	r3, [r7, #8]
   21728:	4250      	negs	r0, r2
	return pkt->frags->data;
   2172a:	68a1      	ldr	r1, [r4, #8]
   2172c:	6889      	ldr	r1, [r1, #8]
   2172e:	4401      	add	r1, r0
   21730:	4418      	add	r0, r3
   21732:	f7de fdc5 	bl	2c0 <memcpy>
   21736:	e7ec      	b.n	21712 <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   21738:	8999      	ldrh	r1, [r3, #12]
   2173a:	440a      	add	r2, r1
		buf = buf->frags;
   2173c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2173e:	2b00      	cmp	r3, #0
   21740:	d1fa      	bne.n	21738 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   21742:	b293      	uxth	r3, r2
   21744:	3b28      	subs	r3, #40	; 0x28
   21746:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   21748:	0a1a      	lsrs	r2, r3, #8
   2174a:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   2174c:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2174e:	79b1      	ldrb	r1, [r6, #6]
   21750:	2911      	cmp	r1, #17
   21752:	d002      	beq.n	2175a <uncompress_IPHC_header+0x622>
	return true;
   21754:	2001      	movs	r0, #1
   21756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2175a:	f1b9 0f00 	cmp.w	r9, #0
   2175e:	d018      	beq.n	21792 <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   21760:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   21764:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   21768:	f1b8 0f00 	cmp.w	r8, #0
   2176c:	d102      	bne.n	21774 <uncompress_IPHC_header+0x63c>
	return true;
   2176e:	2001      	movs	r0, #1
}
   21770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   21774:	4620      	mov	r0, r4
   21776:	f7fc f8ba 	bl	1d8ee <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   2177a:	43c0      	mvns	r0, r0
   2177c:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   21780:	2001      	movs	r0, #1
   21782:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   21786:	2000      	movs	r0, #0
   21788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   2178c:	2000      	movs	r0, #0
   2178e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   21792:	2001      	movs	r0, #1
   21794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021798 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   21798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2179c:	b085      	sub	sp, #20
   2179e:	4604      	mov	r4, r0
   217a0:	4617      	mov	r7, r2
	if (iphc) {
   217a2:	460d      	mov	r5, r1
   217a4:	b9f9      	cbnz	r1, 217e6 <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   217a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217aa:	f7fb f9e3 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   217ae:	4606      	mov	r6, r0
   217b0:	2800      	cmp	r0, #0
   217b2:	f000 8438 	beq.w	22026 <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   217b6:	f850 3f08 	ldr.w	r3, [r0, #8]!
   217ba:	2241      	movs	r2, #65	; 0x41
   217bc:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   217be:	2101      	movs	r1, #1
   217c0:	f7f8 fd08 	bl	1a1d4 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   217c4:	4631      	mov	r1, r6
   217c6:	4620      	mov	r0, r4
   217c8:	f7fb fa5e 	bl	1cc88 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   217cc:	4620      	mov	r0, r4
   217ce:	f7fb fb15 	bl	1cdfc <net_pkt_compact>
	if (fragment) {
   217d2:	2f00      	cmp	r7, #0
   217d4:	f000 842a 	beq.w	2202c <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   217d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217dc:	4620      	mov	r0, r4
   217de:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   217e0:	b005      	add	sp, #20
   217e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217e6:	6883      	ldr	r3, [r0, #8]
   217e8:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   217ea:	899b      	ldrh	r3, [r3, #12]
   217ec:	2b27      	cmp	r3, #39	; 0x27
   217ee:	f240 8411 	bls.w	22014 <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   217f2:	79b2      	ldrb	r2, [r6, #6]
   217f4:	2a11      	cmp	r2, #17
   217f6:	d02f      	beq.n	21858 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   217f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217fc:	4620      	mov	r0, r4
   217fe:	f7fb f9b9 	bl	1cb74 <net_pkt_get_frag>
	if (!frag) {
   21802:	4680      	mov	r8, r0
   21804:	2800      	cmp	r0, #0
   21806:	f000 8408 	beq.w	2201a <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   2180a:	6883      	ldr	r3, [r0, #8]
   2180c:	2260      	movs	r2, #96	; 0x60
   2180e:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   21810:	6883      	ldr	r3, [r0, #8]
   21812:	2200      	movs	r2, #0
   21814:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   21816:	7830      	ldrb	r0, [r6, #0]
   21818:	7871      	ldrb	r1, [r6, #1]
   2181a:	090b      	lsrs	r3, r1, #4
   2181c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   21820:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   21822:	089a      	lsrs	r2, r3, #2
   21824:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   21828:	b25b      	sxtb	r3, r3
   2182a:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   2182c:	f011 0f0f 	tst.w	r1, #15
   21830:	d121      	bne.n	21876 <net_6lo_compress+0xde>
   21832:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   21836:	f1be 0f00 	cmp.w	lr, #0
   2183a:	d11c      	bne.n	21876 <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   2183c:	f010 0f0f 	tst.w	r0, #15
   21840:	d10e      	bne.n	21860 <net_6lo_compress+0xc8>
   21842:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   21846:	d10b      	bne.n	21860 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   21848:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2184c:	7813      	ldrb	r3, [r2, #0]
   2184e:	f043 0318 	orr.w	r3, r3, #24
   21852:	7013      	strb	r3, [r2, #0]
   21854:	2202      	movs	r2, #2
   21856:	e025      	b.n	218a4 <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   21858:	2b2f      	cmp	r3, #47	; 0x2f
   2185a:	d8cd      	bhi.n	217f8 <net_6lo_compress+0x60>
		return false;
   2185c:	2000      	movs	r0, #0
   2185e:	e7bf      	b.n	217e0 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   21860:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21864:	780b      	ldrb	r3, [r1, #0]
   21866:	f043 0310 	orr.w	r3, r3, #16
   2186a:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   2186c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21870:	709a      	strb	r2, [r3, #2]
   21872:	2203      	movs	r2, #3
   21874:	e016      	b.n	218a4 <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   21876:	f010 0f0f 	tst.w	r0, #15
   2187a:	d102      	bne.n	21882 <net_6lo_compress+0xea>
   2187c:	f011 0f30 	tst.w	r1, #48	; 0x30
   21880:	d128      	bne.n	218d4 <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   21882:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   21886:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   21888:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2188c:	7873      	ldrb	r3, [r6, #1]
   2188e:	f003 030f 	and.w	r3, r3, #15
   21892:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   21894:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21898:	2202      	movs	r2, #2
   2189a:	18b1      	adds	r1, r6, r2
   2189c:	3004      	adds	r0, #4
   2189e:	f7de fd0f 	bl	2c0 <memcpy>
			offset += 2;
   218a2:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   218a4:	79b3      	ldrb	r3, [r6, #6]
   218a6:	2b11      	cmp	r3, #17
   218a8:	d02d      	beq.n	21906 <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   218aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
   218ae:	f102 0901 	add.w	r9, r2, #1
   218b2:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   218b4:	79f3      	ldrb	r3, [r6, #7]
   218b6:	2b40      	cmp	r3, #64	; 0x40
   218b8:	d040      	beq.n	2193c <net_6lo_compress+0x1a4>
   218ba:	2bff      	cmp	r3, #255	; 0xff
   218bc:	d045      	beq.n	2194a <net_6lo_compress+0x1b2>
   218be:	2b01      	cmp	r3, #1
   218c0:	d029      	beq.n	21916 <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   218c2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   218c6:	f109 0201 	add.w	r2, r9, #1
   218ca:	f801 3009 	strb.w	r3, [r1, r9]
   218ce:	fa5f f982 	uxtb.w	r9, r2
   218d2:	e026      	b.n	21922 <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   218d4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   218d8:	780a      	ldrb	r2, [r1, #0]
   218da:	f042 0208 	orr.w	r2, r2, #8
   218de:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   218e0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   218e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   218e8:	f996 1001 	ldrsb.w	r1, [r6, #1]
   218ec:	f001 010f 	and.w	r1, r1, #15
   218f0:	430b      	orrs	r3, r1
   218f2:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   218f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   218f8:	2202      	movs	r2, #2
   218fa:	18b1      	adds	r1, r6, r2
   218fc:	3003      	adds	r0, #3
   218fe:	f7de fcdf 	bl	2c0 <memcpy>
			offset += 2;
   21902:	2205      	movs	r2, #5
   21904:	e7ce      	b.n	218a4 <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   21906:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2190a:	780b      	ldrb	r3, [r1, #0]
   2190c:	f043 0304 	orr.w	r3, r3, #4
   21910:	700b      	strb	r3, [r1, #0]
   21912:	4691      	mov	r9, r2
   21914:	e7ce      	b.n	218b4 <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   21916:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2191a:	7813      	ldrb	r3, [r2, #0]
   2191c:	f043 0301 	orr.w	r3, r3, #1
   21920:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21922:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21924:	b9c3      	cbnz	r3, 21958 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21926:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21928:	2b00      	cmp	r3, #0
   2192a:	d176      	bne.n	21a1a <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2192c:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2192e:	2b00      	cmp	r3, #0
   21930:	d175      	bne.n	21a1e <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21932:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21934:	2b00      	cmp	r3, #0
   21936:	d074      	beq.n	21a22 <net_6lo_compress+0x28a>
   21938:	2300      	movs	r3, #0
   2193a:	e00e      	b.n	2195a <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   2193c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21940:	7813      	ldrb	r3, [r2, #0]
   21942:	f043 0302 	orr.w	r3, r3, #2
   21946:	7013      	strb	r3, [r2, #0]
   21948:	e7eb      	b.n	21922 <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   2194a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2194e:	7813      	ldrb	r3, [r2, #0]
   21950:	f043 0303 	orr.w	r3, r3, #3
   21954:	7013      	strb	r3, [r2, #0]
   21956:	e7e4      	b.n	21922 <net_6lo_compress+0x18a>
   21958:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   2195a:	2b00      	cmp	r3, #0
   2195c:	d163      	bne.n	21a26 <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2195e:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21960:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21964:	429a      	cmp	r2, r3
   21966:	d065      	beq.n	21a34 <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   21968:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   2196c:	2210      	movs	r2, #16
   2196e:	f106 0108 	add.w	r1, r6, #8
   21972:	4448      	add	r0, r9
   21974:	f7de fca4 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   21978:	f109 0910 	add.w	r9, r9, #16
   2197c:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   21980:	f1b9 0f00 	cmp.w	r9, #0
   21984:	f000 812d 	beq.w	21be2 <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   21988:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   2198a:	2bff      	cmp	r3, #255	; 0xff
   2198c:	f000 812e 	beq.w	21bec <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21990:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21992:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21996:	429a      	cmp	r2, r3
   21998:	f000 81bf 	beq.w	21d1a <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   2199c:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   219a0:	2210      	movs	r2, #16
   219a2:	f106 0118 	add.w	r1, r6, #24
   219a6:	4448      	add	r0, r9
   219a8:	f7de fc8a 	bl	2c0 <memcpy>
		offset += 16;
   219ac:	f109 0910 	add.w	r9, r9, #16
   219b0:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   219b4:	f1b9 0f00 	cmp.w	r9, #0
   219b8:	f000 8287 	beq.w	21eca <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   219bc:	79b3      	ldrb	r3, [r6, #6]
   219be:	2b11      	cmp	r3, #17
   219c0:	f000 8288 	beq.w	21ed4 <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   219c4:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   219c6:	f108 0a08 	add.w	sl, r8, #8
   219ca:	4649      	mov	r1, r9
   219cc:	4650      	mov	r0, sl
   219ce:	f7f8 fc01 	bl	1a1d4 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   219d2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   219d6:	68a3      	ldr	r3, [r4, #8]
   219d8:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   219da:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   219dc:	1b92      	subs	r2, r2, r6
   219de:	4431      	add	r1, r6
   219e0:	4448      	add	r0, r9
   219e2:	f7de fc6d 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   219e6:	68a3      	ldr	r3, [r4, #8]
   219e8:	8999      	ldrh	r1, [r3, #12]
   219ea:	1b89      	subs	r1, r1, r6
   219ec:	4650      	mov	r0, sl
   219ee:	f7f8 fbf1 	bl	1a1d4 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   219f2:	68a2      	ldr	r2, [r4, #8]
   219f4:	2100      	movs	r1, #0
   219f6:	4620      	mov	r0, r4
   219f8:	f7fb f928 	bl	1cc4c <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   219fc:	4641      	mov	r1, r8
   219fe:	4620      	mov	r0, r4
   21a00:	f7fb f942 	bl	1cc88 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   21a04:	4620      	mov	r0, r4
   21a06:	f7fb f9f9 	bl	1cdfc <net_pkt_compact>
	if (fragment) {
   21a0a:	2f00      	cmp	r7, #0
   21a0c:	f000 8308 	beq.w	22020 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   21a10:	eba6 0109 	sub.w	r1, r6, r9
   21a14:	4620      	mov	r0, r4
   21a16:	47b8      	blx	r7
   21a18:	e6e2      	b.n	217e0 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a1a:	2300      	movs	r3, #0
   21a1c:	e79d      	b.n	2195a <net_6lo_compress+0x1c2>
   21a1e:	2300      	movs	r3, #0
   21a20:	e79b      	b.n	2195a <net_6lo_compress+0x1c2>
   21a22:	2301      	movs	r3, #1
   21a24:	e799      	b.n	2195a <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   21a26:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a2a:	7853      	ldrb	r3, [r2, #1]
   21a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21a30:	7053      	strb	r3, [r2, #1]
   21a32:	e7a5      	b.n	21980 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21a34:	8973      	ldrh	r3, [r6, #10]
   21a36:	b91b      	cbnz	r3, 21a40 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21a38:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21a3a:	b33b      	cbz	r3, 21a8c <net_6lo_compress+0x2f4>
   21a3c:	2300      	movs	r3, #0
   21a3e:	e000      	b.n	21a42 <net_6lo_compress+0x2aa>
   21a40:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21a42:	9301      	str	r3, [sp, #4]
   21a44:	2b00      	cmp	r3, #0
   21a46:	d08f      	beq.n	21968 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21a48:	6933      	ldr	r3, [r6, #16]
   21a4a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21a4e:	d01f      	beq.n	21a90 <net_6lo_compress+0x2f8>
   21a50:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   21a52:	469a      	mov	sl, r3
   21a54:	bb1b      	cbnz	r3, 21a9e <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   21a56:	f114 0320 	adds.w	r3, r4, #32
   21a5a:	f000 80bf 	beq.w	21bdc <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   21a5e:	f116 0b08 	adds.w	fp, r6, #8
   21a62:	d008      	beq.n	21a76 <net_6lo_compress+0x2de>
   21a64:	b13b      	cbz	r3, 21a76 <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   21a66:	791a      	ldrb	r2, [r3, #4]
   21a68:	2a06      	cmp	r2, #6
   21a6a:	d03e      	beq.n	21aea <net_6lo_compress+0x352>
   21a6c:	2a08      	cmp	r2, #8
   21a6e:	f000 808c 	beq.w	21b8a <net_6lo_compress+0x3f2>
   21a72:	2a02      	cmp	r2, #2
   21a74:	d026      	beq.n	21ac4 <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   21a76:	f1ba 0f00 	cmp.w	sl, #0
   21a7a:	f000 809c 	beq.w	21bb6 <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   21a7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a82:	7853      	ldrb	r3, [r2, #1]
   21a84:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21a88:	7053      	strb	r3, [r2, #1]
   21a8a:	e779      	b.n	21980 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21a8c:	2301      	movs	r3, #1
   21a8e:	e7d8      	b.n	21a42 <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21a90:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21a92:	2bfe      	cmp	r3, #254	; 0xfe
   21a94:	d001      	beq.n	21a9a <net_6lo_compress+0x302>
   21a96:	2300      	movs	r3, #0
   21a98:	e7db      	b.n	21a52 <net_6lo_compress+0x2ba>
   21a9a:	2301      	movs	r3, #1
   21a9c:	e7d9      	b.n	21a52 <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   21a9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21aa2:	7853      	ldrb	r3, [r2, #1]
   21aa4:	f043 0320 	orr.w	r3, r3, #32
   21aa8:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   21aaa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21aae:	2202      	movs	r2, #2
   21ab0:	f106 0116 	add.w	r1, r6, #22
   21ab4:	4448      	add	r0, r9
   21ab6:	f7de fc03 	bl	2c0 <memcpy>
			offset += 2;
   21aba:	f109 0902 	add.w	r9, r9, #2
   21abe:	fa5f f989 	uxtb.w	r9, r9
   21ac2:	e75d      	b.n	21980 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21ac4:	6a21      	ldr	r1, [r4, #32]
   21ac6:	f10b 000e 	add.w	r0, fp, #14
   21aca:	f008 ff63 	bl	2a994 <memcmp>
   21ace:	2800      	cmp	r0, #0
   21ad0:	d1d1      	bne.n	21a76 <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   21ad2:	f8db 3008 	ldr.w	r3, [fp, #8]
   21ad6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21ada:	d1cc      	bne.n	21a76 <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   21adc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21ae0:	2bfe      	cmp	r3, #254	; 0xfe
   21ae2:	d1c8      	bne.n	21a76 <net_6lo_compress+0x2de>
			return true;
   21ae4:	f8dd a004 	ldr.w	sl, [sp, #4]
   21ae8:	e7c5      	b.n	21a76 <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21aea:	795b      	ldrb	r3, [r3, #5]
   21aec:	2b03      	cmp	r3, #3
   21aee:	d026      	beq.n	21b3e <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21af0:	2b02      	cmp	r3, #2
   21af2:	d1c0      	bne.n	21a76 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21af4:	6a21      	ldr	r1, [r4, #32]
   21af6:	2202      	movs	r2, #2
   21af8:	3101      	adds	r1, #1
   21afa:	f10b 0009 	add.w	r0, fp, #9
   21afe:	f008 ff49 	bl	2a994 <memcmp>
   21b02:	2800      	cmp	r0, #0
   21b04:	d1b7      	bne.n	21a76 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b06:	6a21      	ldr	r1, [r4, #32]
   21b08:	2203      	movs	r2, #3
   21b0a:	4411      	add	r1, r2
   21b0c:	f10b 000d 	add.w	r0, fp, #13
   21b10:	f008 ff40 	bl	2a994 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21b14:	2800      	cmp	r0, #0
   21b16:	d1ae      	bne.n	21a76 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21b18:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b1c:	2bff      	cmp	r3, #255	; 0xff
   21b1e:	d1aa      	bne.n	21a76 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   21b20:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21b24:	2bfe      	cmp	r3, #254	; 0xfe
   21b26:	d1a6      	bne.n	21a76 <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21b28:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21b2c:	f083 0302 	eor.w	r3, r3, #2
   21b30:	6a22      	ldr	r2, [r4, #32]
   21b32:	7812      	ldrb	r2, [r2, #0]
   21b34:	4293      	cmp	r3, r2
   21b36:	d19e      	bne.n	21a76 <net_6lo_compress+0x2de>
				return true;
   21b38:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b3c:	e79b      	b.n	21a76 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21b3e:	6a21      	ldr	r1, [r4, #32]
   21b40:	2202      	movs	r2, #2
   21b42:	3101      	adds	r1, #1
   21b44:	f10b 0009 	add.w	r0, fp, #9
   21b48:	f008 ff24 	bl	2a994 <memcmp>
   21b4c:	2800      	cmp	r0, #0
   21b4e:	d192      	bne.n	21a76 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b50:	6a21      	ldr	r1, [r4, #32]
   21b52:	2203      	movs	r2, #3
   21b54:	4411      	add	r1, r2
   21b56:	f10b 000d 	add.w	r0, fp, #13
   21b5a:	f008 ff1b 	bl	2a994 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21b5e:	2800      	cmp	r0, #0
   21b60:	d189      	bne.n	21a76 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21b62:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b66:	2bff      	cmp	r3, #255	; 0xff
   21b68:	d185      	bne.n	21a76 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   21b6a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21b6e:	2bfe      	cmp	r3, #254	; 0xfe
   21b70:	d181      	bne.n	21a76 <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21b72:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21b76:	f083 0302 	eor.w	r3, r3, #2
   21b7a:	6a22      	ldr	r2, [r4, #32]
   21b7c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21b7e:	4293      	cmp	r3, r2
   21b80:	f47f af79 	bne.w	21a76 <net_6lo_compress+0x2de>
				return true;
   21b84:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b88:	e775      	b.n	21a76 <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21b8a:	6a21      	ldr	r1, [r4, #32]
   21b8c:	3a01      	subs	r2, #1
   21b8e:	3101      	adds	r1, #1
   21b90:	f10b 0009 	add.w	r0, fp, #9
   21b94:	f008 fefe 	bl	2a994 <memcmp>
   21b98:	2800      	cmp	r0, #0
   21b9a:	f47f af6c 	bne.w	21a76 <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21b9e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21ba2:	f083 0302 	eor.w	r3, r3, #2
   21ba6:	6a22      	ldr	r2, [r4, #32]
   21ba8:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21baa:	4293      	cmp	r3, r2
   21bac:	f47f af63 	bne.w	21a76 <net_6lo_compress+0x2de>
			return true;
   21bb0:	f8dd a004 	ldr.w	sl, [sp, #4]
   21bb4:	e75f      	b.n	21a76 <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   21bb6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21bba:	7853      	ldrb	r3, [r2, #1]
   21bbc:	f043 0310 	orr.w	r3, r3, #16
   21bc0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   21bc2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21bc6:	2208      	movs	r2, #8
   21bc8:	f106 0110 	add.w	r1, r6, #16
   21bcc:	4448      	add	r0, r9
   21bce:	f7de fb77 	bl	2c0 <memcpy>
				offset += 8;
   21bd2:	f109 0908 	add.w	r9, r9, #8
   21bd6:	fa5f f989 	uxtb.w	r9, r9
   21bda:	e6d1      	b.n	21980 <net_6lo_compress+0x1e8>
				return 0;
   21bdc:	f04f 0900 	mov.w	r9, #0
   21be0:	e6ce      	b.n	21980 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   21be2:	4640      	mov	r0, r8
   21be4:	f7fb f813 	bl	1cc0e <net_pkt_frag_unref>
		return false;
   21be8:	2000      	movs	r0, #0
   21bea:	e5f9      	b.n	217e0 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   21bec:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21bf0:	7853      	ldrb	r3, [r2, #1]
   21bf2:	f043 0308 	orr.w	r3, r3, #8
   21bf6:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   21bf8:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bfa:	2b02      	cmp	r3, #2
   21bfc:	d00a      	beq.n	21c14 <net_6lo_compress+0x47c>
   21bfe:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   21c00:	b9db      	cbnz	r3, 21c3a <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c02:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c04:	bb63      	cbnz	r3, 21c60 <net_6lo_compress+0x4c8>
   21c06:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c08:	bba2      	cbnz	r2, 21c74 <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   21c0a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c0e:	b39a      	cbz	r2, 21c78 <net_6lo_compress+0x4e0>
   21c10:	2200      	movs	r2, #0
   21c12:	e026      	b.n	21c62 <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c14:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   21c16:	b943      	cbnz	r3, 21c2a <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c18:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c1a:	b943      	cbnz	r3, 21c2e <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c1c:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c1e:	b943      	cbnz	r3, 21c32 <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   21c20:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c24:	b13b      	cbz	r3, 21c36 <net_6lo_compress+0x49e>
   21c26:	2300      	movs	r3, #0
   21c28:	e7ea      	b.n	21c00 <net_6lo_compress+0x468>
   21c2a:	2300      	movs	r3, #0
   21c2c:	e7e8      	b.n	21c00 <net_6lo_compress+0x468>
   21c2e:	2300      	movs	r3, #0
   21c30:	e7e6      	b.n	21c00 <net_6lo_compress+0x468>
   21c32:	2300      	movs	r3, #0
   21c34:	e7e4      	b.n	21c00 <net_6lo_compress+0x468>
   21c36:	2301      	movs	r3, #1
   21c38:	e7e2      	b.n	21c00 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21c3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c3e:	7853      	ldrb	r3, [r2, #1]
   21c40:	f043 0303 	orr.w	r3, r3, #3
   21c44:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   21c46:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c4a:	2201      	movs	r2, #1
   21c4c:	f106 0127 	add.w	r1, r6, #39	; 0x27
   21c50:	4448      	add	r0, r9
   21c52:	f7de fb35 	bl	2c0 <memcpy>
		offset++;
   21c56:	f109 0901 	add.w	r9, r9, #1
   21c5a:	fa5f f989 	uxtb.w	r9, r9
   21c5e:	e6a9      	b.n	219b4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c60:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   21c62:	b95a      	cbnz	r2, 21c7c <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c64:	bb43      	cbnz	r3, 21cb8 <net_6lo_compress+0x520>
   21c66:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c68:	bbab      	cbnz	r3, 21cd6 <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   21c6a:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c6e:	b3a3      	cbz	r3, 21cda <net_6lo_compress+0x542>
   21c70:	2300      	movs	r3, #0
   21c72:	e022      	b.n	21cba <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c74:	2200      	movs	r2, #0
   21c76:	e7f4      	b.n	21c62 <net_6lo_compress+0x4ca>
   21c78:	2201      	movs	r2, #1
   21c7a:	e7f2      	b.n	21c62 <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21c7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c80:	7853      	ldrb	r3, [r2, #1]
   21c82:	f043 0302 	orr.w	r3, r3, #2
   21c86:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21c88:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c8c:	2201      	movs	r2, #1
   21c8e:	f106 0119 	add.w	r1, r6, #25
   21c92:	4448      	add	r0, r9
   21c94:	f7de fb14 	bl	2c0 <memcpy>
		offset++;
   21c98:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   21c9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21ca0:	2203      	movs	r2, #3
   21ca2:	f106 0125 	add.w	r1, r6, #37	; 0x25
   21ca6:	fa53 f080 	uxtab	r0, r3, r0
   21caa:	f7de fb09 	bl	2c0 <memcpy>
		offset += 3;
   21cae:	f109 0904 	add.w	r9, r9, #4
   21cb2:	fa5f f989 	uxtb.w	r9, r9
   21cb6:	e67d      	b.n	219b4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21cb8:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   21cba:	b983      	cbnz	r3, 21cde <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21cbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21cc0:	2210      	movs	r2, #16
   21cc2:	f106 0118 	add.w	r1, r6, #24
   21cc6:	4448      	add	r0, r9
   21cc8:	f7de fafa 	bl	2c0 <memcpy>
		offset += 16;
   21ccc:	f109 0910 	add.w	r9, r9, #16
   21cd0:	fa5f f989 	uxtb.w	r9, r9
   21cd4:	e66e      	b.n	219b4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21cd6:	2300      	movs	r3, #0
   21cd8:	e7ef      	b.n	21cba <net_6lo_compress+0x522>
   21cda:	2301      	movs	r3, #1
   21cdc:	e7ed      	b.n	21cba <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21cde:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ce2:	7853      	ldrb	r3, [r2, #1]
   21ce4:	f043 0301 	orr.w	r3, r3, #1
   21ce8:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21cea:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21cee:	2201      	movs	r2, #1
   21cf0:	f106 0119 	add.w	r1, r6, #25
   21cf4:	4448      	add	r0, r9
   21cf6:	f7de fae3 	bl	2c0 <memcpy>
		offset++;
   21cfa:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   21cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21d02:	2205      	movs	r2, #5
   21d04:	f106 0123 	add.w	r1, r6, #35	; 0x23
   21d08:	fa53 f080 	uxtab	r0, r3, r0
   21d0c:	f7de fad8 	bl	2c0 <memcpy>
		offset += 5;
   21d10:	f109 0906 	add.w	r9, r9, #6
   21d14:	fa5f f989 	uxtb.w	r9, r9
   21d18:	e64c      	b.n	219b4 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21d1a:	8b73      	ldrh	r3, [r6, #26]
   21d1c:	b91b      	cbnz	r3, 21d26 <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21d1e:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21d20:	b343      	cbz	r3, 21d74 <net_6lo_compress+0x5dc>
   21d22:	2300      	movs	r3, #0
   21d24:	e000      	b.n	21d28 <net_6lo_compress+0x590>
   21d26:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21d28:	9301      	str	r3, [sp, #4]
   21d2a:	2b00      	cmp	r3, #0
   21d2c:	f43f ae36 	beq.w	2199c <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21d30:	6a33      	ldr	r3, [r6, #32]
   21d32:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21d36:	d01f      	beq.n	21d78 <net_6lo_compress+0x5e0>
   21d38:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   21d3a:	469a      	mov	sl, r3
   21d3c:	bb1b      	cbnz	r3, 21d86 <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   21d3e:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   21d42:	f000 80bf 	beq.w	21ec4 <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   21d46:	f116 0b18 	adds.w	fp, r6, #24
   21d4a:	d008      	beq.n	21d5e <net_6lo_compress+0x5c6>
   21d4c:	b13b      	cbz	r3, 21d5e <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   21d4e:	791a      	ldrb	r2, [r3, #4]
   21d50:	2a06      	cmp	r2, #6
   21d52:	d03e      	beq.n	21dd2 <net_6lo_compress+0x63a>
   21d54:	2a08      	cmp	r2, #8
   21d56:	f000 808c 	beq.w	21e72 <net_6lo_compress+0x6da>
   21d5a:	2a02      	cmp	r2, #2
   21d5c:	d026      	beq.n	21dac <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   21d5e:	f1ba 0f00 	cmp.w	sl, #0
   21d62:	f000 809c 	beq.w	21e9e <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21d66:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21d6a:	7853      	ldrb	r3, [r2, #1]
   21d6c:	f043 0303 	orr.w	r3, r3, #3
   21d70:	7053      	strb	r3, [r2, #1]
   21d72:	e61f      	b.n	219b4 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21d74:	2301      	movs	r3, #1
   21d76:	e7d7      	b.n	21d28 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21d78:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21d7a:	2bfe      	cmp	r3, #254	; 0xfe
   21d7c:	d001      	beq.n	21d82 <net_6lo_compress+0x5ea>
   21d7e:	2300      	movs	r3, #0
   21d80:	e7db      	b.n	21d3a <net_6lo_compress+0x5a2>
   21d82:	2301      	movs	r3, #1
   21d84:	e7d9      	b.n	21d3a <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21d86:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21d8a:	7853      	ldrb	r3, [r2, #1]
   21d8c:	f043 0302 	orr.w	r3, r3, #2
   21d90:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   21d92:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21d96:	2202      	movs	r2, #2
   21d98:	f106 0126 	add.w	r1, r6, #38	; 0x26
   21d9c:	4448      	add	r0, r9
   21d9e:	f7de fa8f 	bl	2c0 <memcpy>
			offset += 2;
   21da2:	f109 0902 	add.w	r9, r9, #2
   21da6:	fa5f f989 	uxtb.w	r9, r9
   21daa:	e603      	b.n	219b4 <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21dac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21dae:	f10b 000e 	add.w	r0, fp, #14
   21db2:	f008 fdef 	bl	2a994 <memcmp>
   21db6:	2800      	cmp	r0, #0
   21db8:	d1d1      	bne.n	21d5e <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   21dba:	f8db 3008 	ldr.w	r3, [fp, #8]
   21dbe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21dc2:	d1cc      	bne.n	21d5e <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   21dc4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21dc8:	2bfe      	cmp	r3, #254	; 0xfe
   21dca:	d1c8      	bne.n	21d5e <net_6lo_compress+0x5c6>
			return true;
   21dcc:	f8dd a004 	ldr.w	sl, [sp, #4]
   21dd0:	e7c5      	b.n	21d5e <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21dd2:	795b      	ldrb	r3, [r3, #5]
   21dd4:	2b03      	cmp	r3, #3
   21dd6:	d026      	beq.n	21e26 <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21dd8:	2b02      	cmp	r3, #2
   21dda:	d1c0      	bne.n	21d5e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21ddc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21dde:	2202      	movs	r2, #2
   21de0:	3101      	adds	r1, #1
   21de2:	f10b 0009 	add.w	r0, fp, #9
   21de6:	f008 fdd5 	bl	2a994 <memcmp>
   21dea:	2800      	cmp	r0, #0
   21dec:	d1b7      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21df0:	2203      	movs	r2, #3
   21df2:	4411      	add	r1, r2
   21df4:	f10b 000d 	add.w	r0, fp, #13
   21df8:	f008 fdcc 	bl	2a994 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21dfc:	2800      	cmp	r0, #0
   21dfe:	d1ae      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21e00:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21e04:	2bff      	cmp	r3, #255	; 0xff
   21e06:	d1aa      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   21e08:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21e0c:	2bfe      	cmp	r3, #254	; 0xfe
   21e0e:	d1a6      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21e10:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21e14:	f083 0302 	eor.w	r3, r3, #2
   21e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21e1a:	7812      	ldrb	r2, [r2, #0]
   21e1c:	4293      	cmp	r3, r2
   21e1e:	d19e      	bne.n	21d5e <net_6lo_compress+0x5c6>
				return true;
   21e20:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e24:	e79b      	b.n	21d5e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21e26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21e28:	2202      	movs	r2, #2
   21e2a:	3101      	adds	r1, #1
   21e2c:	f10b 0009 	add.w	r0, fp, #9
   21e30:	f008 fdb0 	bl	2a994 <memcmp>
   21e34:	2800      	cmp	r0, #0
   21e36:	d192      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21e38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21e3a:	2203      	movs	r2, #3
   21e3c:	4411      	add	r1, r2
   21e3e:	f10b 000d 	add.w	r0, fp, #13
   21e42:	f008 fda7 	bl	2a994 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21e46:	2800      	cmp	r0, #0
   21e48:	d189      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21e4a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21e4e:	2bff      	cmp	r3, #255	; 0xff
   21e50:	d185      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   21e52:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21e56:	2bfe      	cmp	r3, #254	; 0xfe
   21e58:	d181      	bne.n	21d5e <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21e5a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21e5e:	f083 0302 	eor.w	r3, r3, #2
   21e62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21e64:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21e66:	4293      	cmp	r3, r2
   21e68:	f47f af79 	bne.w	21d5e <net_6lo_compress+0x5c6>
				return true;
   21e6c:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e70:	e775      	b.n	21d5e <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21e72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21e74:	3a01      	subs	r2, #1
   21e76:	3101      	adds	r1, #1
   21e78:	f10b 0009 	add.w	r0, fp, #9
   21e7c:	f008 fd8a 	bl	2a994 <memcmp>
   21e80:	2800      	cmp	r0, #0
   21e82:	f47f af6c 	bne.w	21d5e <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21e86:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21e8a:	f083 0302 	eor.w	r3, r3, #2
   21e8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21e90:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21e92:	4293      	cmp	r3, r2
   21e94:	f47f af63 	bne.w	21d5e <net_6lo_compress+0x5c6>
			return true;
   21e98:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e9c:	e75f      	b.n	21d5e <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21e9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ea2:	7853      	ldrb	r3, [r2, #1]
   21ea4:	f043 0301 	orr.w	r3, r3, #1
   21ea8:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   21eaa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21eae:	2208      	movs	r2, #8
   21eb0:	f106 0120 	add.w	r1, r6, #32
   21eb4:	4448      	add	r0, r9
   21eb6:	f7de fa03 	bl	2c0 <memcpy>
				offset += 8;
   21eba:	f109 0908 	add.w	r9, r9, #8
   21ebe:	fa5f f989 	uxtb.w	r9, r9
   21ec2:	e577      	b.n	219b4 <net_6lo_compress+0x21c>
				return 0;
   21ec4:	f04f 0900 	mov.w	r9, #0
   21ec8:	e574      	b.n	219b4 <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   21eca:	4640      	mov	r0, r8
   21ecc:	f7fa fe9f 	bl	1cc0e <net_pkt_frag_unref>
		return false;
   21ed0:	2000      	movs	r0, #0
   21ed2:	e485      	b.n	217e0 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   21ed4:	a902      	add	r1, sp, #8
   21ed6:	4620      	mov	r0, r4
   21ed8:	f000 fc68 	bl	227ac <net_udp_get_hdr>
   21edc:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   21ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21ee2:	22f0      	movs	r2, #240	; 0xf0
   21ee4:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   21ee8:	8802      	ldrh	r2, [r0, #0]
   21eea:	0a13      	lsrs	r3, r2, #8
   21eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21ef0:	b29b      	uxth	r3, r3
   21ef2:	f640 720b 	movw	r2, #3851	; 0xf0b
   21ef6:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   21efa:	d025      	beq.n	21f48 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   21efc:	8872      	ldrh	r2, [r6, #2]
   21efe:	b2d2      	uxtb	r2, r2
   21f00:	2af0      	cmp	r2, #240	; 0xf0
   21f02:	d046      	beq.n	21f92 <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   21f04:	0a1b      	lsrs	r3, r3, #8
   21f06:	2bf0      	cmp	r3, #240	; 0xf0
   21f08:	d062      	beq.n	21fd0 <net_6lo_compress+0x838>
		offset++;
   21f0a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   21f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f12:	2204      	movs	r2, #4
   21f14:	4631      	mov	r1, r6
   21f16:	fa53 f080 	uxtab	r0, r3, r0
   21f1a:	f7de f9d1 	bl	2c0 <memcpy>
		offset += 4;
   21f1e:	f109 0905 	add.w	r9, r9, #5
   21f22:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   21f26:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21f2a:	2202      	movs	r2, #2
   21f2c:	1db1      	adds	r1, r6, #6
   21f2e:	4448      	add	r0, r9
   21f30:	f7de f9c6 	bl	2c0 <memcpy>
	offset += 2;
   21f34:	f109 0902 	add.w	r9, r9, #2
   21f38:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   21f3c:	4631      	mov	r1, r6
   21f3e:	4620      	mov	r0, r4
   21f40:	f000 fc74 	bl	2282c <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   21f44:	2630      	movs	r6, #48	; 0x30
   21f46:	e53e      	b.n	219c6 <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   21f48:	8841      	ldrh	r1, [r0, #2]
   21f4a:	0a0a      	lsrs	r2, r1, #8
   21f4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   21f50:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   21f54:	f640 710b 	movw	r1, #3851	; 0xf0b
   21f58:	428a      	cmp	r2, r1
   21f5a:	d1cf      	bne.n	21efc <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   21f5c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f60:	f812 3009 	ldrb.w	r3, [r2, r9]
   21f64:	f043 0303 	orr.w	r3, r3, #3
   21f68:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21f6c:	f109 0101 	add.w	r1, r9, #1
   21f70:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   21f72:	8803      	ldrh	r3, [r0, #0]
   21f74:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   21f76:	011b      	lsls	r3, r3, #4
   21f78:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   21f7a:	8842      	ldrh	r2, [r0, #2]
   21f7c:	f3c2 2203 	ubfx	r2, r2, #8, #4
   21f80:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   21f82:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f86:	f109 0902 	add.w	r9, r9, #2
   21f8a:	fa5f f989 	uxtb.w	r9, r9
   21f8e:	5453      	strb	r3, [r2, r1]
   21f90:	e7c9      	b.n	21f26 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   21f92:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f96:	f812 3009 	ldrb.w	r3, [r2, r9]
   21f9a:	f043 0301 	orr.w	r3, r3, #1
   21f9e:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21fa2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   21fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21faa:	2202      	movs	r2, #2
   21fac:	4631      	mov	r1, r6
   21fae:	fa53 f080 	uxtab	r0, r3, r0
   21fb2:	f7de f985 	bl	2c0 <memcpy>
		offset += 2;
   21fb6:	f109 0303 	add.w	r3, r9, #3
   21fba:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   21fbc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21fc0:	f109 0904 	add.w	r9, r9, #4
   21fc4:	fa5f f989 	uxtb.w	r9, r9
   21fc8:	8872      	ldrh	r2, [r6, #2]
   21fca:	0a12      	lsrs	r2, r2, #8
   21fcc:	54ca      	strb	r2, [r1, r3]
   21fce:	e7aa      	b.n	21f26 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   21fd0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21fd4:	f812 3009 	ldrb.w	r3, [r2, r9]
   21fd8:	f043 0302 	orr.w	r3, r3, #2
   21fdc:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21fe0:	f109 0301 	add.w	r3, r9, #1
   21fe4:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   21fe8:	f109 0002 	add.w	r0, r9, #2
   21fec:	4631      	mov	r1, r6
   21fee:	f831 2b02 	ldrh.w	r2, [r1], #2
   21ff2:	0a12      	lsrs	r2, r2, #8
   21ff4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21ff8:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   21ffc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22000:	2202      	movs	r2, #2
   22002:	fa53 f080 	uxtab	r0, r3, r0
   22006:	f7de f95b 	bl	2c0 <memcpy>
		offset += 2;
   2200a:	f109 0904 	add.w	r9, r9, #4
   2200e:	fa5f f989 	uxtb.w	r9, r9
   22012:	e788      	b.n	21f26 <net_6lo_compress+0x78e>
		return false;
   22014:	2000      	movs	r0, #0
   22016:	f7ff bbe3 	b.w	217e0 <net_6lo_compress+0x48>
		return false;
   2201a:	2000      	movs	r0, #0
   2201c:	f7ff bbe0 	b.w	217e0 <net_6lo_compress+0x48>
	return true;
   22020:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22022:	f7ff bbdd 	b.w	217e0 <net_6lo_compress+0x48>
		return false;
   22026:	4628      	mov	r0, r5
   22028:	f7ff bbda 	b.w	217e0 <net_6lo_compress+0x48>
	return true;
   2202c:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   2202e:	f7ff bbd7 	b.w	217e0 <net_6lo_compress+0x48>

00022032 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22032:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22034:	6883      	ldr	r3, [r0, #8]
   22036:	689b      	ldr	r3, [r3, #8]
   22038:	781b      	ldrb	r3, [r3, #0]
   2203a:	f003 0260 	and.w	r2, r3, #96	; 0x60
   2203e:	2a60      	cmp	r2, #96	; 0x60
   22040:	d005      	beq.n	2204e <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22042:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22046:	2b41      	cmp	r3, #65	; 0x41
   22048:	d004      	beq.n	22054 <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   2204a:	2001      	movs	r0, #1
}
   2204c:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   2204e:	f7ff f873 	bl	21138 <uncompress_IPHC_header>
   22052:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22054:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22056:	68a0      	ldr	r0, [r4, #8]
   22058:	89a2      	ldrh	r2, [r4, #12]
   2205a:	3a01      	subs	r2, #1
   2205c:	1c41      	adds	r1, r0, #1
   2205e:	f008 fcc9 	bl	2a9f4 <memmove>
	frag->len -= 1;
   22062:	89a3      	ldrh	r3, [r4, #12]
   22064:	3b01      	subs	r3, #1
   22066:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22068:	2001      	movs	r0, #1
   2206a:	bd10      	pop	{r4, pc}

0002206c <net_route_entry_remove>:
{
   2206c:	4770      	bx	lr

0002206e <net_route_entries_table_clear>:
{
   2206e:	4770      	bx	lr

00022070 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22070:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22072:	f7fc fbd3 	bl	1e81c <net_nbr_unref>

	return 0;
}
   22076:	2000      	movs	r0, #0
   22078:	bd08      	pop	{r3, pc}
	...

0002207c <net_route_get_nbr>:
{
   2207c:	b430      	push	{r4, r5}
   2207e:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22080:	2300      	movs	r3, #0
   22082:	e000      	b.n	22086 <net_route_get_nbr+0xa>
   22084:	3301      	adds	r3, #1
   22086:	2b07      	cmp	r3, #7
   22088:	dc0b      	bgt.n	220a2 <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   2208a:	4c07      	ldr	r4, [pc, #28]	; (220a8 <net_route_get_nbr+0x2c>)
   2208c:	00da      	lsls	r2, r3, #3
   2208e:	1ad2      	subs	r2, r2, r3
   22090:	00d1      	lsls	r1, r2, #3
   22092:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22094:	5c62      	ldrb	r2, [r4, r1]
   22096:	2a00      	cmp	r2, #0
   22098:	d0f4      	beq.n	22084 <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   2209a:	68c2      	ldr	r2, [r0, #12]
   2209c:	42aa      	cmp	r2, r5
   2209e:	d1f1      	bne.n	22084 <net_route_get_nbr+0x8>
   220a0:	e000      	b.n	220a4 <net_route_get_nbr+0x28>
	return NULL;
   220a2:	2000      	movs	r0, #0
}
   220a4:	bc30      	pop	{r4, r5}
   220a6:	4770      	bx	lr
   220a8:	2000c214 	.word	0x2000c214

000220ac <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   220ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220b0:	b083      	sub	sp, #12
   220b2:	4606      	mov	r6, r0
   220b4:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   220b6:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   220b8:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   220ba:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   220bc:	e00b      	b.n	220d6 <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   220be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   220c2:	00da      	lsls	r2, r3, #3
   220c4:	4b3f      	ldr	r3, [pc, #252]	; (221c4 <net_route_lookup+0x118>)
   220c6:	4413      	add	r3, r2
   220c8:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   220cc:	f898 3020 	ldrb.w	r3, [r8, #32]
   220d0:	429d      	cmp	r5, r3
   220d2:	d917      	bls.n	22104 <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   220d4:	3401      	adds	r4, #1
   220d6:	2c07      	cmp	r4, #7
   220d8:	dc46      	bgt.n	22168 <net_route_lookup+0xbc>
   220da:	f015 0f80 	tst.w	r5, #128	; 0x80
   220de:	d143      	bne.n	22168 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   220e0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   220e4:	00d3      	lsls	r3, r2, #3
   220e6:	4a37      	ldr	r2, [pc, #220]	; (221c4 <net_route_lookup+0x118>)
   220e8:	5cd3      	ldrb	r3, [r2, r3]
   220ea:	2b00      	cmp	r3, #0
   220ec:	d0f2      	beq.n	220d4 <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   220ee:	2e00      	cmp	r6, #0
   220f0:	d0e5      	beq.n	220be <net_route_lookup+0x12>
   220f2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   220f6:	00da      	lsls	r2, r3, #3
   220f8:	4b32      	ldr	r3, [pc, #200]	; (221c4 <net_route_lookup+0x118>)
   220fa:	4413      	add	r3, r2
   220fc:	689b      	ldr	r3, [r3, #8]
   220fe:	429e      	cmp	r6, r3
   22100:	d1e8      	bne.n	220d4 <net_route_lookup+0x28>
   22102:	e7dc      	b.n	220be <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22104:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22108:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   2210c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22110:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22114:	2b80      	cmp	r3, #128	; 0x80
   22116:	d906      	bls.n	22126 <net_route_lookup+0x7a>
		return false;
   22118:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   2211a:	2b00      	cmp	r3, #0
   2211c:	d0da      	beq.n	220d4 <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   2211e:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22122:	4647      	mov	r7, r8
   22124:	e7d6      	b.n	220d4 <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22126:	465a      	mov	r2, fp
   22128:	4649      	mov	r1, r9
   2212a:	9801      	ldr	r0, [sp, #4]
   2212c:	f008 fc32 	bl	2a994 <memcmp>
   22130:	b9b0      	cbnz	r0, 22160 <net_route_lookup+0xb4>
	if (!remain) {
   22132:	f1ba 0f00 	cmp.w	sl, #0
   22136:	d015      	beq.n	22164 <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22138:	f1ca 0208 	rsb	r2, sl, #8
   2213c:	23ff      	movs	r3, #255	; 0xff
   2213e:	4093      	lsls	r3, r2
   22140:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22144:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22148:	9b01      	ldr	r3, [sp, #4]
   2214a:	f813 300b 	ldrb.w	r3, [r3, fp]
   2214e:	f819 200b 	ldrb.w	r2, [r9, fp]
   22152:	4053      	eors	r3, r2
   22154:	ea1a 0f03 	tst.w	sl, r3
   22158:	bf0c      	ite	eq
   2215a:	2301      	moveq	r3, #1
   2215c:	2300      	movne	r3, #0
   2215e:	e7dc      	b.n	2211a <net_route_lookup+0x6e>
		return false;
   22160:	2300      	movs	r3, #0
   22162:	e7da      	b.n	2211a <net_route_lookup+0x6e>
		return true;
   22164:	2301      	movs	r3, #1
   22166:	e7d8      	b.n	2211a <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22168:	b1c7      	cbz	r7, 2219c <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   2216a:	463a      	mov	r2, r7
	return list->head;
   2216c:	4b16      	ldr	r3, [pc, #88]	; (221c8 <net_route_lookup+0x11c>)
   2216e:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22170:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22172:	b16b      	cbz	r3, 22190 <net_route_lookup+0xe4>
		if (test == node) {
   22174:	429a      	cmp	r2, r3
   22176:	d002      	beq.n	2217e <net_route_lookup+0xd2>
		prev = test;
   22178:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2217a:	681b      	ldr	r3, [r3, #0]
   2217c:	e7f9      	b.n	22172 <net_route_lookup+0xc6>
	if (!prev_node) {
   2217e:	b189      	cbz	r1, 221a4 <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22180:	683b      	ldr	r3, [r7, #0]
   22182:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22184:	4b10      	ldr	r3, [pc, #64]	; (221c8 <net_route_lookup+0x11c>)
   22186:	685b      	ldr	r3, [r3, #4]
   22188:	429a      	cmp	r2, r3
   2218a:	d014      	beq.n	221b6 <net_route_lookup+0x10a>
	node->next = NULL;
   2218c:	2300      	movs	r3, #0
   2218e:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22190:	4b0d      	ldr	r3, [pc, #52]	; (221c8 <net_route_lookup+0x11c>)
   22192:	6819      	ldr	r1, [r3, #0]
   22194:	6039      	str	r1, [r7, #0]
	list->head = node;
   22196:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22198:	685b      	ldr	r3, [r3, #4]
   2219a:	b17b      	cbz	r3, 221bc <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   2219c:	4638      	mov	r0, r7
   2219e:	b003      	add	sp, #12
   221a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   221a4:	6839      	ldr	r1, [r7, #0]
   221a6:	4b08      	ldr	r3, [pc, #32]	; (221c8 <net_route_lookup+0x11c>)
   221a8:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   221aa:	685b      	ldr	r3, [r3, #4]
   221ac:	429a      	cmp	r2, r3
   221ae:	d1ed      	bne.n	2218c <net_route_lookup+0xe0>
			list->tail = list->head;
   221b0:	4b05      	ldr	r3, [pc, #20]	; (221c8 <net_route_lookup+0x11c>)
   221b2:	6059      	str	r1, [r3, #4]
   221b4:	e7ea      	b.n	2218c <net_route_lookup+0xe0>
			list->tail = prev_node;
   221b6:	4b04      	ldr	r3, [pc, #16]	; (221c8 <net_route_lookup+0x11c>)
   221b8:	6059      	str	r1, [r3, #4]
   221ba:	e7e7      	b.n	2218c <net_route_lookup+0xe0>
		list->tail = list->head;
   221bc:	4b02      	ldr	r3, [pc, #8]	; (221c8 <net_route_lookup+0x11c>)
   221be:	605a      	str	r2, [r3, #4]
	return found;
   221c0:	e7ec      	b.n	2219c <net_route_lookup+0xf0>
   221c2:	bf00      	nop
   221c4:	2000c214 	.word	0x2000c214
   221c8:	20001e6c 	.word	0x20001e6c

000221cc <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   221cc:	2800      	cmp	r0, #0
   221ce:	d046      	beq.n	2225e <net_route_del+0x92>
{
   221d0:	b538      	push	{r3, r4, r5, lr}
   221d2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   221d4:	4601      	mov	r1, r0
	return list->head;
   221d6:	4b25      	ldr	r3, [pc, #148]	; (2226c <net_route_del+0xa0>)
   221d8:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   221da:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   221dc:	b16b      	cbz	r3, 221fa <net_route_del+0x2e>
		if (test == node) {
   221de:	4299      	cmp	r1, r3
   221e0:	d002      	beq.n	221e8 <net_route_del+0x1c>
		prev = test;
   221e2:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   221e4:	681b      	ldr	r3, [r3, #0]
   221e6:	e7f9      	b.n	221dc <net_route_del+0x10>
	if (!prev_node) {
   221e8:	b1aa      	cbz	r2, 22216 <net_route_del+0x4a>
		prev_node->next = node->next;
   221ea:	6823      	ldr	r3, [r4, #0]
   221ec:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   221ee:	4b1f      	ldr	r3, [pc, #124]	; (2226c <net_route_del+0xa0>)
   221f0:	685b      	ldr	r3, [r3, #4]
   221f2:	429c      	cmp	r4, r3
   221f4:	d018      	beq.n	22228 <net_route_del+0x5c>
	node->next = NULL;
   221f6:	2300      	movs	r3, #0
   221f8:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   221fa:	4620      	mov	r0, r4
   221fc:	f7ff ff3e 	bl	2207c <net_route_get_nbr>
	if (!nbr) {
   22200:	4605      	mov	r5, r0
   22202:	2800      	cmp	r0, #0
   22204:	d02e      	beq.n	22264 <net_route_del+0x98>
   22206:	2300      	movs	r3, #0
   22208:	461a      	mov	r2, r3
   2220a:	6881      	ldr	r1, [r0, #8]
   2220c:	4818      	ldr	r0, [pc, #96]	; (22270 <net_route_del+0xa4>)
   2220e:	f000 f977 	bl	22500 <net_mgmt_event_notify_with_info>
	return list->head;
   22212:	6864      	ldr	r4, [r4, #4]
   22214:	e011      	b.n	2223a <net_route_del+0x6e>
		list->head = node->next;
   22216:	6822      	ldr	r2, [r4, #0]
   22218:	4b14      	ldr	r3, [pc, #80]	; (2226c <net_route_del+0xa0>)
   2221a:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   2221c:	685b      	ldr	r3, [r3, #4]
   2221e:	429c      	cmp	r4, r3
   22220:	d1e9      	bne.n	221f6 <net_route_del+0x2a>
			list->tail = list->head;
   22222:	4b12      	ldr	r3, [pc, #72]	; (2226c <net_route_del+0xa0>)
   22224:	605a      	str	r2, [r3, #4]
   22226:	e7e6      	b.n	221f6 <net_route_del+0x2a>
			list->tail = prev_node;
   22228:	4b10      	ldr	r3, [pc, #64]	; (2226c <net_route_del+0xa0>)
   2222a:	605a      	str	r2, [r3, #4]
   2222c:	e7e3      	b.n	221f6 <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2222e:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22230:	b154      	cbz	r4, 22248 <net_route_del+0x7c>
	return node->next;
   22232:	6823      	ldr	r3, [r4, #0]
   22234:	b153      	cbz	r3, 2224c <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22236:	b15a      	cbz	r2, 22250 <net_route_del+0x84>
	return node->next;
   22238:	6824      	ldr	r4, [r4, #0]
   2223a:	b15c      	cbz	r4, 22254 <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   2223c:	6860      	ldr	r0, [r4, #4]
   2223e:	2800      	cmp	r0, #0
   22240:	d0f5      	beq.n	2222e <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22242:	f7ff ff15 	bl	22070 <nbr_nexthop_put>
   22246:	e7f2      	b.n	2222e <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22248:	4623      	mov	r3, r4
   2224a:	e7f3      	b.n	22234 <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2224c:	2400      	movs	r4, #0
   2224e:	e7f4      	b.n	2223a <net_route_del+0x6e>
   22250:	2400      	movs	r4, #0
   22252:	e7f2      	b.n	2223a <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22254:	4628      	mov	r0, r5
   22256:	f7fc fae1 	bl	1e81c <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   2225a:	2000      	movs	r0, #0
   2225c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2225e:	f06f 0015 	mvn.w	r0, #21
   22262:	4770      	bx	lr
		return -ENOENT;
   22264:	f06f 0001 	mvn.w	r0, #1
}
   22268:	bd38      	pop	{r3, r4, r5, pc}
   2226a:	bf00      	nop
   2226c:	20001e6c 	.word	0x20001e6c
   22270:	f060000c 	.word	0xf060000c

00022274 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22274:	b1b8      	cbz	r0, 222a6 <net_route_get_nexthop+0x32>
	return list->head;
   22276:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22278:	b19b      	cbz	r3, 222a2 <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   2227a:	685a      	ldr	r2, [r3, #4]
   2227c:	7851      	ldrb	r1, [r2, #1]
   2227e:	29ff      	cmp	r1, #255	; 0xff
   22280:	d002      	beq.n	22288 <net_route_get_nexthop+0x14>
   22282:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22284:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22286:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22288:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2228a:	b123      	cbz	r3, 22296 <net_route_get_nexthop+0x22>
	return node->next;
   2228c:	681a      	ldr	r2, [r3, #0]
   2228e:	b132      	cbz	r2, 2229e <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22290:	b119      	cbz	r1, 2229a <net_route_get_nexthop+0x26>
	return node->next;
   22292:	681b      	ldr	r3, [r3, #0]
   22294:	e7f0      	b.n	22278 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22296:	461a      	mov	r2, r3
   22298:	e7f9      	b.n	2228e <net_route_get_nexthop+0x1a>
   2229a:	2300      	movs	r3, #0
   2229c:	e7ec      	b.n	22278 <net_route_get_nexthop+0x4>
   2229e:	2300      	movs	r3, #0
   222a0:	e7ea      	b.n	22278 <net_route_get_nexthop+0x4>
	}

	return NULL;
   222a2:	2000      	movs	r0, #0
   222a4:	4770      	bx	lr
		return NULL;
   222a6:	2000      	movs	r0, #0
}
   222a8:	4770      	bx	lr
	...

000222ac <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   222ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222ae:	4607      	mov	r7, r0
   222b0:	460e      	mov	r6, r1
	int i, ret = 0;
   222b2:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   222b4:	462c      	mov	r4, r5
   222b6:	e000      	b.n	222ba <net_route_foreach+0xe>
   222b8:	3401      	adds	r4, #1
   222ba:	2c07      	cmp	r4, #7
   222bc:	dc0b      	bgt.n	222d6 <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   222be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   222c2:	00da      	lsls	r2, r3, #3
   222c4:	4b05      	ldr	r3, [pc, #20]	; (222dc <net_route_foreach+0x30>)
   222c6:	4413      	add	r3, r2
   222c8:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   222ca:	2800      	cmp	r0, #0
   222cc:	d0f4      	beq.n	222b8 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   222ce:	4631      	mov	r1, r6
   222d0:	47b8      	blx	r7

		ret++;
   222d2:	3501      	adds	r5, #1
   222d4:	e7f0      	b.n	222b8 <net_route_foreach+0xc>
	}

	return ret;
}
   222d6:	4628      	mov	r0, r5
   222d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   222da:	bf00      	nop
   222dc:	2000c214 	.word	0x2000c214

000222e0 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   222e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222e2:	4607      	mov	r7, r0
   222e4:	460c      	mov	r4, r1
   222e6:	4615      	mov	r5, r2
   222e8:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   222ea:	f7fd f961 	bl	1f5b0 <net_ipv6_nbr_lookup>
   222ee:	b120      	cbz	r0, 222fa <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   222f0:	2300      	movs	r3, #0
   222f2:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   222f4:	6034      	str	r4, [r6, #0]

		return true;
   222f6:	2001      	movs	r0, #1
   222f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   222fa:	4621      	mov	r1, r4
   222fc:	4638      	mov	r0, r7
   222fe:	f7ff fed5 	bl	220ac <net_route_lookup>
   22302:	6028      	str	r0, [r5, #0]
	if (*route) {
   22304:	b130      	cbz	r0, 22314 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22306:	f7ff ffb5 	bl	22274 <net_route_get_nexthop>
   2230a:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   2230c:	b108      	cbz	r0, 22312 <net_route_get_info+0x32>
			return false;
		}

		return true;
   2230e:	2001      	movs	r0, #1
   22310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22314:	4621      	mov	r1, r4
   22316:	2000      	movs	r0, #0
   22318:	f7f8 fefe 	bl	1b118 <net_if_ipv6_router_find_default>
		if (!router) {
   2231c:	4603      	mov	r3, r0
   2231e:	b118      	cbz	r0, 22328 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22320:	332c      	adds	r3, #44	; 0x2c
   22322:	6033      	str	r3, [r6, #0]

		return true;
   22324:	2001      	movs	r0, #1
   22326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22328:	2000      	movs	r0, #0
	}

	return false;
}
   2232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002232c <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   2232c:	b570      	push	{r4, r5, r6, lr}
   2232e:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22330:	6940      	ldr	r0, [r0, #20]
   22332:	f7fd f93d 	bl	1f5b0 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22336:	b330      	cbz	r0, 22386 <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22338:	7840      	ldrb	r0, [r0, #1]
   2233a:	f7fc fb01 	bl	1e940 <net_nbr_get_lladdr>
	if (!lladdr) {
   2233e:	4605      	mov	r5, r0
   22340:	b320      	cbz	r0, 2238c <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22342:	6a20      	ldr	r0, [r4, #32]
   22344:	b328      	cbz	r0, 22392 <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22346:	1cae      	adds	r6, r5, #2
   22348:	786a      	ldrb	r2, [r5, #1]
   2234a:	4631      	mov	r1, r6
   2234c:	f008 fb22 	bl	2a994 <memcmp>
   22350:	b310      	cbz	r0, 22398 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22352:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22356:	f043 0304 	orr.w	r3, r3, #4
   2235a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   2235e:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22360:	691a      	ldr	r2, [r3, #16]
   22362:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22364:	7d5a      	ldrb	r2, [r3, #21]
   22366:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   2236a:	7d1b      	ldrb	r3, [r3, #20]
   2236c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22370:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22372:	782b      	ldrb	r3, [r5, #0]
   22374:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22378:	786b      	ldrb	r3, [r5, #1]
   2237a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   2237e:	4620      	mov	r0, r4
   22380:	f7f8 f84a 	bl	1a418 <net_send_data>
   22384:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22386:	f06f 0001 	mvn.w	r0, #1
   2238a:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   2238c:	f06f 0002 	mvn.w	r0, #2
   22390:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22392:	f06f 0015 	mvn.w	r0, #21
   22396:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22398:	f06f 0015 	mvn.w	r0, #21
}
   2239c:	bd70      	pop	{r4, r5, r6, pc}

0002239e <net_route_init>:

void net_route_init(void)
{
   2239e:	4770      	bx	lr

000223a0 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   223a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223a2:	e079      	b.n	22498 <mgmt_thread+0xf8>
		out_event = 0;
   223a4:	2100      	movs	r1, #0
   223a6:	4a48      	ldr	r2, [pc, #288]	; (224c8 <mgmt_thread+0x128>)
   223a8:	8011      	strh	r1, [r2, #0]
   223aa:	e089      	b.n	224c0 <mgmt_thread+0x120>
		return NULL;
   223ac:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   223ae:	b13e      	cbz	r6, 223c0 <mgmt_thread+0x20>
	return list->head;
   223b0:	4b46      	ldr	r3, [pc, #280]	; (224cc <mgmt_thread+0x12c>)
   223b2:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   223b4:	b15d      	cbz	r5, 223ce <mgmt_thread+0x2e>
   223b6:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223b8:	b105      	cbz	r5, 223bc <mgmt_thread+0x1c>
	return node->next;
   223ba:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223bc:	2700      	movs	r7, #0
   223be:	e01f      	b.n	22400 <mgmt_thread+0x60>
   223c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   223c4:	2100      	movs	r1, #0
   223c6:	4842      	ldr	r0, [pc, #264]	; (224d0 <mgmt_thread+0x130>)
   223c8:	f006 f9fa 	bl	287c0 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   223cc:	e064      	b.n	22498 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   223ce:	462c      	mov	r4, r5
   223d0:	e7f4      	b.n	223bc <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   223d2:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   223d6:	d04c      	beq.n	22472 <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   223d8:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   223da:	6993      	ldr	r3, [r2, #24]
   223dc:	2b00      	cmp	r3, #0
   223de:	d02c      	beq.n	2243a <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   223e0:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   223e2:	4283      	cmp	r3, r0
   223e4:	d029      	beq.n	2243a <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   223e6:	2c00      	cmp	r4, #0
   223e8:	d04b      	beq.n	22482 <mgmt_thread+0xe2>
   223ea:	4622      	mov	r2, r4
   223ec:	2c00      	cmp	r4, #0
   223ee:	d046      	beq.n	2247e <mgmt_thread+0xde>
	return node->next;
   223f0:	6823      	ldr	r3, [r4, #0]
   223f2:	2b00      	cmp	r3, #0
   223f4:	d047      	beq.n	22486 <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223f6:	2a00      	cmp	r2, #0
   223f8:	d047      	beq.n	2248a <mgmt_thread+0xea>
	return node->next;
   223fa:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223fc:	4625      	mov	r5, r4
   223fe:	461c      	mov	r4, r3
   22400:	2d00      	cmp	r5, #0
   22402:	d044      	beq.n	2248e <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22404:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22406:	68aa      	ldr	r2, [r5, #8]
   22408:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   2240a:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   2240e:	f013 0f03 	tst.w	r3, #3
   22412:	d0e8      	beq.n	223e6 <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22414:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22416:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   2241a:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2241e:	2b00      	cmp	r3, #0
   22420:	d0e1      	beq.n	223e6 <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22422:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22424:	2b00      	cmp	r3, #0
   22426:	d0d4      	beq.n	223d2 <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22428:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2242a:	2b00      	cmp	r3, #0
   2242c:	d0d1      	beq.n	223d2 <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   2242e:	ea01 0302 	and.w	r3, r1, r2
   22432:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22434:	2b00      	cmp	r3, #0
   22436:	d0d6      	beq.n	223e6 <mgmt_thread+0x46>
   22438:	e7cb      	b.n	223d2 <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   2243a:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   2243c:	6873      	ldr	r3, [r6, #4]
   2243e:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22440:	b15f      	cbz	r7, 2245a <mgmt_thread+0xba>
		prev_node->next = node->next;
   22442:	682b      	ldr	r3, [r5, #0]
   22444:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   22446:	4b21      	ldr	r3, [pc, #132]	; (224cc <mgmt_thread+0x12c>)
   22448:	685b      	ldr	r3, [r3, #4]
   2244a:	429d      	cmp	r5, r3
   2244c:	d00e      	beq.n	2246c <mgmt_thread+0xcc>
	node->next = NULL;
   2244e:	2300      	movs	r3, #0
   22450:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22452:	6868      	ldr	r0, [r5, #4]
   22454:	f006 f9bd 	bl	287d2 <_impl_k_sem_give>
   22458:	e7c5      	b.n	223e6 <mgmt_thread+0x46>
		list->head = node->next;
   2245a:	682a      	ldr	r2, [r5, #0]
   2245c:	4b1b      	ldr	r3, [pc, #108]	; (224cc <mgmt_thread+0x12c>)
   2245e:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22460:	685b      	ldr	r3, [r3, #4]
   22462:	429d      	cmp	r5, r3
   22464:	d1f3      	bne.n	2244e <mgmt_thread+0xae>
			list->tail = list->head;
   22466:	4b19      	ldr	r3, [pc, #100]	; (224cc <mgmt_thread+0x12c>)
   22468:	605a      	str	r2, [r3, #4]
   2246a:	e7f0      	b.n	2244e <mgmt_thread+0xae>
			list->tail = prev_node;
   2246c:	4b17      	ldr	r3, [pc, #92]	; (224cc <mgmt_thread+0x12c>)
   2246e:	605f      	str	r7, [r3, #4]
   22470:	e7ed      	b.n	2244e <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   22472:	686b      	ldr	r3, [r5, #4]
   22474:	6872      	ldr	r2, [r6, #4]
   22476:	4628      	mov	r0, r5
   22478:	4798      	blx	r3
			prev = &cb->node;
   2247a:	462f      	mov	r7, r5
   2247c:	e7b3      	b.n	223e6 <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2247e:	4623      	mov	r3, r4
   22480:	e7b7      	b.n	223f2 <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22482:	4623      	mov	r3, r4
   22484:	e7ba      	b.n	223fc <mgmt_thread+0x5c>
   22486:	2300      	movs	r3, #0
   22488:	e7b8      	b.n	223fc <mgmt_thread+0x5c>
   2248a:	2300      	movs	r3, #0
   2248c:	e7b6      	b.n	223fc <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   2248e:	2300      	movs	r3, #0
   22490:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   22492:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   22494:	f006 f844 	bl	28520 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   22498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2249c:	480c      	ldr	r0, [pc, #48]	; (224d0 <mgmt_thread+0x130>)
   2249e:	f006 f9ab 	bl	287f8 <_impl_k_sem_take>
	if (!events[out_event].event) {
   224a2:	4b09      	ldr	r3, [pc, #36]	; (224c8 <mgmt_thread+0x128>)
   224a4:	881b      	ldrh	r3, [r3, #0]
   224a6:	4a0b      	ldr	r2, [pc, #44]	; (224d4 <mgmt_thread+0x134>)
   224a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   224ac:	2a00      	cmp	r2, #0
   224ae:	f43f af7d 	beq.w	223ac <mgmt_thread+0xc>
	out_event++;
   224b2:	1c5a      	adds	r2, r3, #1
   224b4:	b292      	uxth	r2, r2
   224b6:	4904      	ldr	r1, [pc, #16]	; (224c8 <mgmt_thread+0x128>)
   224b8:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   224ba:	2a02      	cmp	r2, #2
   224bc:	f43f af72 	beq.w	223a4 <mgmt_thread+0x4>
	return &events[o_idx];
   224c0:	4e04      	ldr	r6, [pc, #16]	; (224d4 <mgmt_thread+0x134>)
   224c2:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   224c6:	e772      	b.n	223ae <mgmt_thread+0xe>
   224c8:	20001efc 	.word	0x20001efc
   224cc:	20001e74 	.word	0x20001e74
   224d0:	2000cfc4 	.word	0x2000cfc4
   224d4:	20001e7c 	.word	0x20001e7c

000224d8 <net_mgmt_add_event_callback>:
	node->next = list->head;
   224d8:	4b07      	ldr	r3, [pc, #28]	; (224f8 <net_mgmt_add_event_callback+0x20>)
   224da:	681a      	ldr	r2, [r3, #0]
   224dc:	6002      	str	r2, [r0, #0]
	list->head = node;
   224de:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   224e0:	685b      	ldr	r3, [r3, #4]
   224e2:	b12b      	cbz	r3, 224f0 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   224e4:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   224e6:	4a05      	ldr	r2, [pc, #20]	; (224fc <net_mgmt_add_event_callback+0x24>)
   224e8:	6813      	ldr	r3, [r2, #0]
   224ea:	430b      	orrs	r3, r1
   224ec:	6013      	str	r3, [r2, #0]
   224ee:	4770      	bx	lr
		list->tail = list->head;
   224f0:	4b01      	ldr	r3, [pc, #4]	; (224f8 <net_mgmt_add_event_callback+0x20>)
   224f2:	6058      	str	r0, [r3, #4]
   224f4:	e7f6      	b.n	224e4 <net_mgmt_add_event_callback+0xc>
   224f6:	bf00      	nop
   224f8:	20001e74 	.word	0x20001e74
   224fc:	20001e8c 	.word	0x20001e8c

00022500 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   22500:	4b17      	ldr	r3, [pc, #92]	; (22560 <net_mgmt_event_notify_with_info+0x60>)
   22502:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   22504:	ea30 0303 	bics.w	r3, r0, r3
   22508:	d000      	beq.n	2250c <net_mgmt_event_notify_with_info+0xc>
   2250a:	4770      	bx	lr
{
   2250c:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   2250e:	4c15      	ldr	r4, [pc, #84]	; (22564 <net_mgmt_event_notify_with_info+0x64>)
   22510:	8823      	ldrh	r3, [r4, #0]
   22512:	4a15      	ldr	r2, [pc, #84]	; (22568 <net_mgmt_event_notify_with_info+0x68>)
   22514:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   22518:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2251c:	6051      	str	r1, [r2, #4]
	in_event++;
   2251e:	3301      	adds	r3, #1
   22520:	b29b      	uxth	r3, r3
   22522:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22524:	2b02      	cmp	r3, #2
   22526:	d009      	beq.n	2253c <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   22528:	4b0e      	ldr	r3, [pc, #56]	; (22564 <net_mgmt_event_notify_with_info+0x64>)
   2252a:	881a      	ldrh	r2, [r3, #0]
   2252c:	4b0f      	ldr	r3, [pc, #60]	; (2256c <net_mgmt_event_notify_with_info+0x6c>)
   2252e:	881b      	ldrh	r3, [r3, #0]
   22530:	429a      	cmp	r2, r3
   22532:	d006      	beq.n	22542 <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22534:	480e      	ldr	r0, [pc, #56]	; (22570 <net_mgmt_event_notify_with_info+0x70>)
   22536:	f006 f94c 	bl	287d2 <_impl_k_sem_give>
   2253a:	bd10      	pop	{r4, pc}
		in_event = 0;
   2253c:	2200      	movs	r2, #0
   2253e:	8022      	strh	r2, [r4, #0]
   22540:	e7f2      	b.n	22528 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   22542:	3301      	adds	r3, #1
   22544:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22546:	2b02      	cmp	r3, #2
   22548:	d007      	beq.n	2255a <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   2254a:	4a07      	ldr	r2, [pc, #28]	; (22568 <net_mgmt_event_notify_with_info+0x68>)
   2254c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22550:	2a00      	cmp	r2, #0
   22552:	d0ef      	beq.n	22534 <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   22554:	4a05      	ldr	r2, [pc, #20]	; (2256c <net_mgmt_event_notify_with_info+0x6c>)
   22556:	8013      	strh	r3, [r2, #0]
   22558:	e7ec      	b.n	22534 <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   2255a:	2300      	movs	r3, #0
   2255c:	e7f5      	b.n	2254a <net_mgmt_event_notify_with_info+0x4a>
   2255e:	bf00      	nop
   22560:	20001e8c 	.word	0x20001e8c
   22564:	20001e90 	.word	0x20001e90
   22568:	20001e7c 	.word	0x20001e7c
   2256c:	20001efc 	.word	0x20001efc
   22570:	2000cfc4 	.word	0x2000cfc4

00022574 <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   22574:	b510      	push	{r4, lr}
   22576:	b086      	sub	sp, #24
	list->head = NULL;
   22578:	4b0f      	ldr	r3, [pc, #60]	; (225b8 <net_mgmt_event_init+0x44>)
   2257a:	2400      	movs	r4, #0
   2257c:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   2257e:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   22580:	4b0e      	ldr	r3, [pc, #56]	; (225bc <net_mgmt_event_init+0x48>)
   22582:	601c      	str	r4, [r3, #0]

	in_event = 0;
   22584:	4b0e      	ldr	r3, [pc, #56]	; (225c0 <net_mgmt_event_init+0x4c>)
   22586:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   22588:	4b0e      	ldr	r3, [pc, #56]	; (225c4 <net_mgmt_event_init+0x50>)
   2258a:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   2258c:	2210      	movs	r2, #16
   2258e:	4621      	mov	r1, r4
   22590:	480d      	ldr	r0, [pc, #52]	; (225c8 <net_mgmt_event_init+0x54>)
   22592:	f008 fa93 	bl	2aabc <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   22596:	9405      	str	r4, [sp, #20]
   22598:	9404      	str	r4, [sp, #16]
   2259a:	f06f 0308 	mvn.w	r3, #8
   2259e:	9303      	str	r3, [sp, #12]
   225a0:	9402      	str	r4, [sp, #8]
   225a2:	9401      	str	r4, [sp, #4]
   225a4:	9400      	str	r4, [sp, #0]
   225a6:	4b09      	ldr	r3, [pc, #36]	; (225cc <net_mgmt_event_init+0x58>)
   225a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   225ac:	4908      	ldr	r1, [pc, #32]	; (225d0 <net_mgmt_event_init+0x5c>)
   225ae:	4809      	ldr	r0, [pc, #36]	; (225d4 <net_mgmt_event_init+0x60>)
   225b0:	f006 fb8e 	bl	28cd0 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   225b4:	b006      	add	sp, #24
   225b6:	bd10      	pop	{r4, pc}
   225b8:	20001e74 	.word	0x20001e74
   225bc:	20001e8c 	.word	0x20001e8c
   225c0:	20001e90 	.word	0x20001e90
   225c4:	20001efc 	.word	0x20001efc
   225c8:	20001e7c 	.word	0x20001e7c
   225cc:	000223a1 	.word	0x000223a1
   225d0:	20009860 	.word	0x20009860
   225d4:	20001e94 	.word	0x20001e94

000225d8 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   225d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   225da:	b085      	sub	sp, #20
   225dc:	4605      	mov	r5, r0
   225de:	f8ad 2006 	strh.w	r2, [sp, #6]
   225e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   225e6:	f10d 020e 	add.w	r2, sp, #14
   225ea:	f7fa fde5 	bl	1d1b8 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   225ee:	4602      	mov	r2, r0
   225f0:	b168      	cbz	r0, 2260e <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   225f2:	b11a      	cbz	r2, 225fc <net_udp_insert_raw+0x24>
   225f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   225f8:	2b00      	cmp	r3, #0
   225fa:	d15c      	bne.n	226b6 <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   225fc:	68ab      	ldr	r3, [r5, #8]
   225fe:	429a      	cmp	r2, r3
   22600:	d00d      	beq.n	2261e <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   22602:	681c      	ldr	r4, [r3, #0]
   22604:	b174      	cbz	r4, 22624 <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   22606:	42a2      	cmp	r2, r4
   22608:	d00b      	beq.n	22622 <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   2260a:	4623      	mov	r3, r4
   2260c:	e7f9      	b.n	22602 <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   2260e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   22612:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22616:	4299      	cmp	r1, r3
   22618:	d1eb      	bne.n	225f2 <net_udp_insert_raw+0x1a>
		return NULL;
   2261a:	2000      	movs	r0, #0
   2261c:	e049      	b.n	226b2 <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   2261e:	461c      	mov	r4, r3
   22620:	e000      	b.n	22624 <net_udp_insert_raw+0x4c>
				prev = tmp;
   22622:	461c      	mov	r4, r3
	}

	if (!prev) {
   22624:	2c00      	cmp	r4, #0
   22626:	d048      	beq.n	226ba <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   22628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2262c:	4628      	mov	r0, r5
   2262e:	f7fa faa1 	bl	1cb74 <net_pkt_get_frag>
	if (!udp) {
   22632:	4607      	mov	r7, r0
   22634:	2800      	cmp	r0, #0
   22636:	d042      	beq.n	226be <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   22638:	f100 0608 	add.w	r6, r0, #8
   2263c:	2202      	movs	r2, #2
   2263e:	f10d 0106 	add.w	r1, sp, #6
   22642:	4630      	mov	r0, r6
   22644:	f7f7 fdcc 	bl	1a1e0 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   22648:	2202      	movs	r2, #2
   2264a:	a901      	add	r1, sp, #4
   2264c:	4630      	mov	r0, r6
   2264e:	f7f7 fdc7 	bl	1a1e0 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   22652:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   22654:	2200      	movs	r2, #0
   22656:	e002      	b.n	2265e <net_udp_insert_raw+0x86>
		bytes += buf->len;
   22658:	8999      	ldrh	r1, [r3, #12]
   2265a:	440a      	add	r2, r1
		buf = buf->frags;
   2265c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2265e:	2b00      	cmp	r3, #0
   22660:	d1fa      	bne.n	22658 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   22662:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   22666:	1a51      	subs	r1, r2, r1
   22668:	b289      	uxth	r1, r1
   2266a:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   2266e:	1a89      	subs	r1, r1, r2
   22670:	b289      	uxth	r1, r1
   22672:	3108      	adds	r1, #8
   22674:	b289      	uxth	r1, r1
   22676:	4630      	mov	r0, r6
   22678:	f7f7 fdd2 	bl	1a220 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   2267c:	2100      	movs	r1, #0
   2267e:	4630      	mov	r0, r6
   22680:	f7f7 fdce 	bl	1a220 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   22684:	4639      	mov	r1, r7
   22686:	4620      	mov	r0, r4
   22688:	f7f7 fd7e 	bl	1a188 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2268c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   22690:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   22694:	4419      	add	r1, r3
   22696:	3108      	adds	r1, #8
   22698:	f10d 020e 	add.w	r2, sp, #14
   2269c:	b289      	uxth	r1, r1
   2269e:	4628      	mov	r0, r5
   226a0:	f7fa fd8a 	bl	1d1b8 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   226a4:	b168      	cbz	r0, 226c2 <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   226a6:	6883      	ldr	r3, [r0, #8]
   226a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   226ac:	4413      	add	r3, r2
	pkt->appdata = data;
   226ae:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   226b0:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   226b2:	b005      	add	sp, #20
   226b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   226b6:	2000      	movs	r0, #0
   226b8:	e7fb      	b.n	226b2 <net_udp_insert_raw+0xda>
	return NULL;
   226ba:	2000      	movs	r0, #0
   226bc:	e7f9      	b.n	226b2 <net_udp_insert_raw+0xda>
   226be:	2000      	movs	r0, #0
   226c0:	e7f7      	b.n	226b2 <net_udp_insert_raw+0xda>
	return pkt;
   226c2:	4628      	mov	r0, r5
   226c4:	e7f5      	b.n	226b2 <net_udp_insert_raw+0xda>

000226c6 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   226c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226ca:	b086      	sub	sp, #24
   226cc:	4606      	mov	r6, r0
   226ce:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   226d0:	2300      	movs	r3, #0
   226d2:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   226d6:	f7fa fda5 	bl	1d224 <net_pkt_udp_data>
   226da:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   226dc:	2208      	movs	r2, #8
   226de:	4601      	mov	r1, r0
   226e0:	4630      	mov	r0, r6
   226e2:	f7fb f95d 	bl	1d9a0 <net_header_fits>
   226e6:	b170      	cbz	r0, 22706 <net_udp_set_chksum+0x40>
		return hdr;
   226e8:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   226ea:	b173      	cbz	r3, 2270a <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   226ec:	2300      	movs	r3, #0
   226ee:	71a3      	strb	r3, [r4, #6]
   226f0:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   226f2:	2111      	movs	r1, #17
   226f4:	4630      	mov	r0, r6
   226f6:	f7fb f8fa 	bl	1d8ee <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   226fa:	43c0      	mvns	r0, r0
   226fc:	80e0      	strh	r0, [r4, #6]

		return frag;
   226fe:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   22700:	b006      	add	sp, #24
   22702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   22706:	2300      	movs	r3, #0
   22708:	e7ef      	b.n	226ea <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2270a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2270e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   22712:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   22714:	3206      	adds	r2, #6
   22716:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2271a:	f8cd 8008 	str.w	r8, [sp, #8]
   2271e:	f10d 0416 	add.w	r4, sp, #22
   22722:	9401      	str	r4, [sp, #4]
   22724:	2702      	movs	r7, #2
   22726:	9700      	str	r7, [sp, #0]
   22728:	ab05      	add	r3, sp, #20
   2272a:	b292      	uxth	r2, r2
   2272c:	4629      	mov	r1, r5
   2272e:	4630      	mov	r0, r6
   22730:	f7fa fc63 	bl	1cffa <net_pkt_write>
   22734:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22736:	2111      	movs	r1, #17
   22738:	4630      	mov	r0, r6
   2273a:	f7fb f8d8 	bl	1d8ee <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   2273e:	43c0      	mvns	r0, r0
   22740:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   22744:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   22748:	3a02      	subs	r2, #2
   2274a:	f8cd 8008 	str.w	r8, [sp, #8]
   2274e:	9401      	str	r4, [sp, #4]
   22750:	9700      	str	r7, [sp, #0]
   22752:	ab05      	add	r3, sp, #20
   22754:	b292      	uxth	r2, r2
   22756:	4629      	mov	r1, r5
   22758:	4630      	mov	r0, r6
   2275a:	f7fa fc4e 	bl	1cffa <net_pkt_write>
	return frag;
   2275e:	e7cf      	b.n	22700 <net_udp_set_chksum+0x3a>

00022760 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   22760:	b570      	push	{r4, r5, r6, lr}
   22762:	b084      	sub	sp, #16
   22764:	4605      	mov	r5, r0
   22766:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   22768:	f7fa fd5c 	bl	1d224 <net_pkt_udp_data>
   2276c:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2276e:	2208      	movs	r2, #8
   22770:	4601      	mov	r1, r0
   22772:	4628      	mov	r0, r5
   22774:	f7fb f914 	bl	1d9a0 <net_header_fits>
   22778:	b120      	cbz	r0, 22784 <net_udp_get_chksum+0x24>
		return hdr;
   2277a:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2277c:	b123      	cbz	r3, 22788 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   2277e:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   22780:	b004      	add	sp, #16
   22782:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   22784:	2300      	movs	r3, #0
   22786:	e7f9      	b.n	2277c <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   22788:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2278c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   22790:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   22792:	3106      	adds	r1, #6
   22794:	f10d 030e 	add.w	r3, sp, #14
   22798:	9300      	str	r3, [sp, #0]
   2279a:	2302      	movs	r3, #2
   2279c:	aa03      	add	r2, sp, #12
   2279e:	b289      	uxth	r1, r1
   227a0:	4630      	mov	r0, r6
   227a2:	f7fa fbb8 	bl	1cf16 <net_frag_read>
	return chksum;
   227a6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   227aa:	e7e9      	b.n	22780 <net_udp_get_chksum+0x20>

000227ac <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   227ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   227ae:	b085      	sub	sp, #20
   227b0:	4605      	mov	r5, r0
   227b2:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   227b4:	f7fa fd36 	bl	1d224 <net_pkt_udp_data>
   227b8:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   227ba:	2208      	movs	r2, #8
   227bc:	4601      	mov	r1, r0
   227be:	4628      	mov	r0, r5
   227c0:	f7fb f8ee 	bl	1d9a0 <net_header_fits>
   227c4:	b120      	cbz	r0, 227d0 <net_udp_get_hdr+0x24>
		return hdr;
   227c6:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   227c8:	b126      	cbz	r6, 227d4 <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   227ca:	4620      	mov	r0, r4
   227cc:	b005      	add	sp, #20
   227ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   227d0:	2600      	movs	r6, #0
   227d2:	e7f9      	b.n	227c8 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   227d4:	68a8      	ldr	r0, [r5, #8]
   227d6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   227da:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   227de:	9700      	str	r7, [sp, #0]
   227e0:	2302      	movs	r3, #2
   227e2:	f10d 020e 	add.w	r2, sp, #14
   227e6:	4421      	add	r1, r4
   227e8:	f7fa fb95 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   227ec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   227f0:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   227f2:	9300      	str	r3, [sp, #0]
   227f4:	2302      	movs	r3, #2
   227f6:	f10d 020e 	add.w	r2, sp, #14
   227fa:	f7fa fb8c 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   227fe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   22802:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   22804:	9300      	str	r3, [sp, #0]
   22806:	2302      	movs	r3, #2
   22808:	f10d 020e 	add.w	r2, sp, #14
   2280c:	f7fa fb83 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22810:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   22814:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22816:	9300      	str	r3, [sp, #0]
   22818:	2302      	movs	r3, #2
   2281a:	f10d 020e 	add.w	r2, sp, #14
   2281e:	f7fa fb7a 	bl	1cf16 <net_frag_read>
	if (!frag) {
   22822:	b108      	cbz	r0, 22828 <net_udp_get_hdr+0x7c>
	return hdr;
   22824:	463c      	mov	r4, r7
   22826:	e7d0      	b.n	227ca <net_udp_get_hdr+0x1e>
		return NULL;
   22828:	4634      	mov	r4, r6
   2282a:	e7ce      	b.n	227ca <net_udp_get_hdr+0x1e>

0002282c <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22830:	b086      	sub	sp, #24
   22832:	4606      	mov	r6, r0
   22834:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22836:	2208      	movs	r2, #8
   22838:	f7fb f8b2 	bl	1d9a0 <net_header_fits>
   2283c:	b128      	cbz	r0, 2284a <net_udp_set_hdr+0x1e>
		return hdr;
   2283e:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   22840:	b12d      	cbz	r5, 2284e <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   22842:	4620      	mov	r0, r4
   22844:	b006      	add	sp, #24
   22846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2284a:	2500      	movs	r5, #0
   2284c:	e7f8      	b.n	22840 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2284e:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   22852:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   22856:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2285a:	f8cd 8008 	str.w	r8, [sp, #8]
   2285e:	9401      	str	r4, [sp, #4]
   22860:	2702      	movs	r7, #2
   22862:	9700      	str	r7, [sp, #0]
   22864:	f10d 0316 	add.w	r3, sp, #22
   22868:	440a      	add	r2, r1
   2286a:	68b1      	ldr	r1, [r6, #8]
   2286c:	4630      	mov	r0, r6
   2286e:	f7fa fbc4 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   22872:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   22876:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   22878:	f8cd 8008 	str.w	r8, [sp, #8]
   2287c:	9301      	str	r3, [sp, #4]
   2287e:	9700      	str	r7, [sp, #0]
   22880:	f10d 0316 	add.w	r3, sp, #22
   22884:	4601      	mov	r1, r0
   22886:	4630      	mov	r0, r6
   22888:	f7fa fbb7 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2288c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   22890:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   22892:	f8cd 8008 	str.w	r8, [sp, #8]
   22896:	9301      	str	r3, [sp, #4]
   22898:	9700      	str	r7, [sp, #0]
   2289a:	f10d 0316 	add.w	r3, sp, #22
   2289e:	4601      	mov	r1, r0
   228a0:	4630      	mov	r0, r6
   228a2:	f7fa fbaa 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   228a6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   228aa:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   228ac:	f8cd 8008 	str.w	r8, [sp, #8]
   228b0:	9301      	str	r3, [sp, #4]
   228b2:	9700      	str	r7, [sp, #0]
   228b4:	f10d 0316 	add.w	r3, sp, #22
   228b8:	4601      	mov	r1, r0
   228ba:	4630      	mov	r0, r6
   228bc:	f7fa fb9d 	bl	1cffa <net_pkt_write>
	if (!frag) {
   228c0:	2800      	cmp	r0, #0
   228c2:	d1be      	bne.n	22842 <net_udp_set_hdr+0x16>
		return NULL;
   228c4:	462c      	mov	r4, r5
   228c6:	e7bc      	b.n	22842 <net_udp_set_hdr+0x16>

000228c8 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   228c8:	b510      	push	{r4, lr}
   228ca:	460c      	mov	r4, r1
   228cc:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   228ce:	8942      	ldrh	r2, [r0, #10]
   228d0:	4620      	mov	r0, r4
   228d2:	f7ff fe81 	bl	225d8 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   228d6:	bd10      	pop	{r4, pc}

000228d8 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   228d8:	4770      	bx	lr

000228da <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   228da:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   228dc:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   228de:	6b25      	ldr	r5, [r4, #48]	; 0x30
   228e0:	b12d      	cbz	r5, 228ee <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   228e2:	6843      	ldr	r3, [r0, #4]
   228e4:	f06f 0267 	mvn.w	r2, #103	; 0x67
   228e8:	2100      	movs	r1, #0
   228ea:	4620      	mov	r0, r4
   228ec:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   228ee:	4620      	mov	r0, r4
   228f0:	f7f9 fba8 	bl	1c044 <net_context_unref>
   228f4:	bd38      	pop	{r3, r4, r5, pc}

000228f6 <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   228f6:	b510      	push	{r4, lr}
   228f8:	4604      	mov	r4, r0
	return (!list->head);
   228fa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   228fe:	b17b      	cbz	r3, 22920 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   22900:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22908:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   2290c:	f36f 0304 	bfc	r3, #0, #5
   22910:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   22914:	2200      	movs	r2, #0
   22916:	21c8      	movs	r1, #200	; 0xc8
   22918:	3058      	adds	r0, #88	; 0x58
   2291a:	f006 fb63 	bl	28fe4 <_impl_k_timer_start>
   2291e:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22920:	3058      	adds	r0, #88	; 0x58
   22922:	f006 fc17 	bl	29154 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   22926:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   2292a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2292e:	f022 0210 	bic.w	r2, r2, #16
   22932:	f362 134c 	bfi	r3, r2, #5, #8
   22936:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   2293a:	bd10      	pop	{r4, pc}

0002293c <ack_timer_cancel>:
{
   2293c:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   2293e:	3008      	adds	r0, #8
   22940:	f006 fd36 	bl	293b0 <k_delayed_work_cancel>
   22944:	bd08      	pop	{r3, pc}

00022946 <fin_timer_cancel>:
{
   22946:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   22948:	3030      	adds	r0, #48	; 0x30
   2294a:	f006 fd31 	bl	293b0 <k_delayed_work_cancel>
   2294e:	bd08      	pop	{r3, pc}

00022950 <finalize_segment>:
{
   22950:	b508      	push	{r3, lr}
	return pkt->family;
   22952:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   22956:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   2295a:	2b0a      	cmp	r3, #10
   2295c:	d001      	beq.n	22962 <finalize_segment+0x12>
	return 0;
   2295e:	2000      	movs	r0, #0
}
   22960:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   22962:	f7fc fe17 	bl	1f594 <net_ipv6_finalize>
   22966:	bd08      	pop	{r3, pc}

00022968 <prepare_segment>:
{
   22968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2296c:	b085      	sub	sp, #20
   2296e:	4606      	mov	r6, r0
   22970:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   22972:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   22974:	b192      	cbz	r2, 2299c <prepare_segment+0x34>
   22976:	4614      	mov	r4, r2
		tail = pkt->frags;
   22978:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   2297c:	2300      	movs	r3, #0
   2297e:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   22980:	469a      	mov	sl, r3
   22982:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22986:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   2298a:	2b0a      	cmp	r3, #10
   2298c:	d013      	beq.n	229b6 <prepare_segment+0x4e>
		if (pkt_allocated) {
   2298e:	f1ba 0f00 	cmp.w	sl, #0
   22992:	d174      	bne.n	22a7e <prepare_segment+0x116>
		return NULL;
   22994:	2000      	movs	r0, #0
}
   22996:	b005      	add	sp, #20
   22998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   2299c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   229a0:	4638      	mov	r0, r7
   229a2:	f7fa f907 	bl	1cbb4 <net_pkt_get_tx>
		if (!pkt) {
   229a6:	4604      	mov	r4, r0
   229a8:	2800      	cmp	r0, #0
   229aa:	d0f4      	beq.n	22996 <prepare_segment+0x2e>
		pkt_allocated = true;
   229ac:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   229b0:	f04f 0800 	mov.w	r8, #0
   229b4:	e7e5      	b.n	22982 <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   229b6:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   229b8:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   229ba:	3304      	adds	r3, #4
   229bc:	6852      	ldr	r2, [r2, #4]
   229be:	4621      	mov	r1, r4
   229c0:	6830      	ldr	r0, [r6, #0]
   229c2:	f7fc fb8b 	bl	1f0dc <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   229c6:	696b      	ldr	r3, [r5, #20]
   229c8:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   229cc:	897b      	ldrh	r3, [r7, #10]
   229ce:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   229d0:	68a3      	ldr	r3, [r4, #8]
   229d2:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   229d4:	2206      	movs	r2, #6
   229d6:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   229d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   229dc:	4638      	mov	r0, r7
   229de:	f7fa f8fb 	bl	1cbd8 <net_pkt_get_data>
	if (!header) {
   229e2:	9001      	str	r0, [sp, #4]
   229e4:	2800      	cmp	r0, #0
   229e6:	d04f      	beq.n	22a88 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   229e8:	9e01      	ldr	r6, [sp, #4]
   229ea:	4631      	mov	r1, r6
   229ec:	4620      	mov	r0, r4
   229ee:	f7fa f93e 	bl	1cc6e <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   229f2:	2114      	movs	r1, #20
   229f4:	f106 0008 	add.w	r0, r6, #8
   229f8:	f7f7 fbec 	bl	1a1d4 <net_buf_simple_add>
   229fc:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   229fe:	68eb      	ldr	r3, [r5, #12]
   22a00:	9303      	str	r3, [sp, #12]
   22a02:	2b00      	cmp	r3, #0
   22a04:	d05d      	beq.n	22ac2 <prepare_segment+0x15a>
   22a06:	f895 900b 	ldrb.w	r9, [r5, #11]
   22a0a:	f1b9 0f00 	cmp.w	r9, #0
   22a0e:	d145      	bne.n	22a9c <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   22a10:	f109 0914 	add.w	r9, r9, #20
   22a14:	fa5f f989 	uxtb.w	r9, r9
   22a18:	ea4f 0989 	mov.w	r9, r9, lsl #2
   22a1c:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   22a20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22a24:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   22a26:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   22a2a:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   22a2c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   22a2e:	0a11      	lsrs	r1, r2, #8
   22a30:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   22a32:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   22a34:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22a38:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   22a3a:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   22a3c:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   22a3e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   22a40:	0a11      	lsrs	r1, r2, #8
   22a42:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   22a44:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   22a46:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22a4a:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   22a4c:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   22a4e:	7aab      	ldrb	r3, [r5, #10]
   22a50:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   22a52:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   22a54:	0a1a      	lsrs	r2, r3, #8
   22a56:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   22a58:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   22a5a:	2300      	movs	r3, #0
   22a5c:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   22a5e:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   22a60:	f1b8 0f00 	cmp.w	r8, #0
   22a64:	d003      	beq.n	22a6e <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   22a66:	4641      	mov	r1, r8
   22a68:	4620      	mov	r0, r4
   22a6a:	f7fa f900 	bl	1cc6e <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   22a6e:	4621      	mov	r1, r4
   22a70:	4638      	mov	r0, r7
   22a72:	f7ff ff6d 	bl	22950 <finalize_segment>
   22a76:	2800      	cmp	r0, #0
   22a78:	db26      	blt.n	22ac8 <prepare_segment+0x160>
	return pkt;
   22a7a:	4620      	mov	r0, r4
   22a7c:	e78b      	b.n	22996 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a7e:	4620      	mov	r0, r4
   22a80:	f7fa f8cb 	bl	1cc1a <net_pkt_unref>
		return NULL;
   22a84:	2000      	movs	r0, #0
   22a86:	e786      	b.n	22996 <prepare_segment+0x2e>
		if (pkt_allocated) {
   22a88:	f1ba 0f00 	cmp.w	sl, #0
   22a8c:	d101      	bne.n	22a92 <prepare_segment+0x12a>
		return NULL;
   22a8e:	2000      	movs	r0, #0
   22a90:	e781      	b.n	22996 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a92:	4620      	mov	r0, r4
   22a94:	f7fa f8c1 	bl	1cc1a <net_pkt_unref>
		return NULL;
   22a98:	2000      	movs	r0, #0
   22a9a:	e77c      	b.n	22996 <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   22a9c:	4649      	mov	r1, r9
   22a9e:	9801      	ldr	r0, [sp, #4]
   22aa0:	3008      	adds	r0, #8
   22aa2:	f7f7 fb97 	bl	1a1d4 <net_buf_simple_add>
   22aa6:	464a      	mov	r2, r9
   22aa8:	9903      	ldr	r1, [sp, #12]
   22aaa:	f7dd fc09 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   22aae:	f019 0f03 	tst.w	r9, #3
   22ab2:	d0ad      	beq.n	22a10 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   22ab4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   22ab8:	f109 0904 	add.w	r9, r9, #4
   22abc:	fa5f f989 	uxtb.w	r9, r9
   22ac0:	e7a6      	b.n	22a10 <prepare_segment+0xa8>
	u8_t optlen = 0;
   22ac2:	f04f 0900 	mov.w	r9, #0
   22ac6:	e7a3      	b.n	22a10 <prepare_segment+0xa8>
		if (pkt_allocated) {
   22ac8:	f1ba 0f00 	cmp.w	sl, #0
   22acc:	d101      	bne.n	22ad2 <prepare_segment+0x16a>
		return NULL;
   22ace:	2000      	movs	r0, #0
   22ad0:	e761      	b.n	22996 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22ad2:	4620      	mov	r0, r4
   22ad4:	f7fa f8a1 	bl	1cc1a <net_pkt_unref>
		return NULL;
   22ad8:	2000      	movs	r0, #0
   22ada:	e75c      	b.n	22996 <prepare_segment+0x2e>

00022adc <net_tcp_alloc>:
{
   22adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22ade:	f04f 0320 	mov.w	r3, #32
   22ae2:	f3ef 8411 	mrs	r4, BASEPRI
   22ae6:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22aea:	2300      	movs	r3, #0
   22aec:	2b05      	cmp	r3, #5
   22aee:	dc18      	bgt.n	22b22 <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   22af0:	22c8      	movs	r2, #200	; 0xc8
   22af2:	492b      	ldr	r1, [pc, #172]	; (22ba0 <net_tcp_alloc+0xc4>)
   22af4:	fb02 1203 	mla	r2, r2, r3, r1
   22af8:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   22afc:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   22b00:	f012 0f01 	tst.w	r2, #1
   22b04:	d001      	beq.n	22b0a <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22b06:	3301      	adds	r3, #1
   22b08:	e7f0      	b.n	22aec <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   22b0a:	21c8      	movs	r1, #200	; 0xc8
   22b0c:	4d24      	ldr	r5, [pc, #144]	; (22ba0 <net_tcp_alloc+0xc4>)
   22b0e:	fb01 5103 	mla	r1, r1, r3, r5
   22b12:	f042 0201 	orr.w	r2, r2, #1
   22b16:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   22b1a:	f362 154c 	bfi	r5, r2, #5, #8
   22b1e:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22b22:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   22b26:	2b05      	cmp	r3, #5
   22b28:	dc37      	bgt.n	22b9a <net_tcp_alloc+0xbe>
   22b2a:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   22b2c:	4e1c      	ldr	r6, [pc, #112]	; (22ba0 <net_tcp_alloc+0xc4>)
   22b2e:	22c8      	movs	r2, #200	; 0xc8
   22b30:	fb02 f403 	mul.w	r4, r2, r3
   22b34:	1935      	adds	r5, r6, r4
   22b36:	2100      	movs	r1, #0
   22b38:	4628      	mov	r0, r5
   22b3a:	f007 ffbf 	bl	2aabc <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   22b3e:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   22b42:	2101      	movs	r1, #1
   22b44:	f361 124c 	bfi	r2, r1, #5, #8
   22b48:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   22b4c:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   22b50:	f36f 3250 	bfc	r2, #13, #4
   22b54:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   22b58:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   22b5a:	f7df fa77 	bl	204c <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   22b5e:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   22b62:	3001      	adds	r0, #1
   22b64:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   22b68:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   22b6c:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   22b70:	2700      	movs	r7, #0
   22b72:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   22b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22b7a:	463a      	mov	r2, r7
   22b7c:	4909      	ldr	r1, [pc, #36]	; (22ba4 <net_tcp_alloc+0xc8>)
   22b7e:	4430      	add	r0, r6
   22b80:	f006 fa1c 	bl	28fbc <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   22b84:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   22b88:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   22b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b8e:	4639      	mov	r1, r7
   22b90:	3004      	adds	r0, #4
   22b92:	f005 fe15 	bl	287c0 <_impl_k_sem_init>
}
   22b96:	4628      	mov	r0, r5
   22b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   22b9a:	2500      	movs	r5, #0
   22b9c:	e7fb      	b.n	22b96 <net_tcp_alloc+0xba>
   22b9e:	bf00      	nop
   22ba0:	20001f00 	.word	0x20001f00
   22ba4:	00023519 	.word	0x00023519

00022ba8 <net_tcp_get_recv_wnd>:
}
   22ba8:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   22bac:	4770      	bx	lr

00022bae <net_tcp_get_recv_mss>:
{
   22bae:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   22bb0:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   22bb2:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   22bb6:	f013 0f10 	tst.w	r3, #16
   22bba:	d006      	beq.n	22bca <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   22bbc:	230a      	movs	r3, #10
	if (family == AF_INET) {
   22bbe:	2b02      	cmp	r3, #2
   22bc0:	d019      	beq.n	22bf6 <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   22bc2:	2b0a      	cmp	r3, #10
   22bc4:	d003      	beq.n	22bce <net_tcp_get_recv_mss+0x20>
	return 0;
   22bc6:	2000      	movs	r0, #0
}
   22bc8:	bd08      	pop	{r3, pc}
	return AF_INET;
   22bca:	2302      	movs	r3, #2
   22bcc:	e7f7      	b.n	22bbe <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   22bce:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   22bd2:	f7f8 fddb 	bl	1b78c <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   22bd6:	b120      	cbz	r0, 22be2 <net_tcp_get_recv_mss+0x34>
   22bd8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   22bda:	283b      	cmp	r0, #59	; 0x3b
   22bdc:	d903      	bls.n	22be6 <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   22bde:	383c      	subs	r0, #60	; 0x3c
   22be0:	e002      	b.n	22be8 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   22be2:	2000      	movs	r0, #0
   22be4:	e000      	b.n	22be8 <net_tcp_get_recv_mss+0x3a>
   22be6:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   22be8:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   22bec:	da01      	bge.n	22bf2 <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   22bee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   22bf2:	b280      	uxth	r0, r0
   22bf4:	bd08      	pop	{r3, pc}
		return 0;
   22bf6:	2000      	movs	r0, #0
   22bf8:	bd08      	pop	{r3, pc}

00022bfa <net_tcp_set_syn_opt>:
{
   22bfa:	b570      	push	{r4, r5, r6, lr}
   22bfc:	460e      	mov	r6, r1
   22bfe:	4614      	mov	r4, r2
	*optionlen = 0;
   22c00:	2300      	movs	r3, #0
   22c02:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   22c04:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22c08:	f413 6f80 	tst.w	r3, #1024	; 0x400
   22c0c:	d00f      	beq.n	22c2e <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   22c0e:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   22c10:	7822      	ldrb	r2, [r4, #0]
   22c12:	0203      	lsls	r3, r0, #8
   22c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   22c18:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   22c1c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22c20:	f040 0002 	orr.w	r0, r0, #2
   22c24:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   22c26:	7823      	ldrb	r3, [r4, #0]
   22c28:	3304      	adds	r3, #4
   22c2a:	7023      	strb	r3, [r4, #0]
   22c2c:	bd70      	pop	{r4, r5, r6, pc}
   22c2e:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   22c30:	f7ff ffbd 	bl	22bae <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   22c34:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22c3c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   22c40:	e7e6      	b.n	22c10 <net_tcp_set_syn_opt+0x16>

00022c42 <net_tcp_prepare_reset>:
{
   22c42:	b510      	push	{r4, lr}
   22c44:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   22c46:	2300      	movs	r3, #0
   22c48:	9300      	str	r3, [sp, #0]
   22c4a:	9301      	str	r3, [sp, #4]
   22c4c:	9302      	str	r3, [sp, #8]
   22c4e:	9303      	str	r3, [sp, #12]
   22c50:	9304      	str	r3, [sp, #16]
   22c52:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   22c54:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   22c56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   22c5a:	f013 0f06 	tst.w	r3, #6
   22c5e:	d01a      	beq.n	22c96 <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   22c60:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c64:	f3c3 3343 	ubfx	r3, r3, #13, #4
   22c68:	2b02      	cmp	r3, #2
   22c6a:	d014      	beq.n	22c96 <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   22c6c:	2b09      	cmp	r3, #9
   22c6e:	d012      	beq.n	22c96 <net_tcp_prepare_reset+0x54>
   22c70:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   22c72:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22c76:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   22c78:	2314      	movs	r3, #20
   22c7a:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   22c7e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22c82:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   22c84:	6803      	ldr	r3, [r0, #0]
   22c86:	3308      	adds	r3, #8
   22c88:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   22c8a:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   22c8c:	2200      	movs	r2, #0
   22c8e:	4669      	mov	r1, sp
   22c90:	f7ff fe6a 	bl	22968 <prepare_segment>
   22c94:	6020      	str	r0, [r4, #0]
}
   22c96:	2000      	movs	r0, #0
   22c98:	b006      	add	sp, #24
   22c9a:	bd10      	pop	{r4, pc}

00022c9c <net_tcp_state_str>:
}
   22c9c:	4800      	ldr	r0, [pc, #0]	; (22ca0 <net_tcp_state_str+0x4>)
   22c9e:	4770      	bx	lr
   22ca0:	0002f448 	.word	0x0002f448

00022ca4 <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   22ca4:	4770      	bx	lr

00022ca6 <net_tcp_change_state>:
   22ca6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22caa:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   22cae:	428b      	cmp	r3, r1
   22cb0:	d022      	beq.n	22cf8 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   22cb2:	f001 010f 	and.w	r1, r1, #15
   22cb6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22cba:	f361 3350 	bfi	r3, r1, #13, #4
   22cbe:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   22cc2:	b9c9      	cbnz	r1, 22cf8 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   22cc4:	6803      	ldr	r3, [r0, #0]
   22cc6:	b1bb      	cbz	r3, 22cf8 <net_tcp_change_state+0x52>
{
   22cc8:	b530      	push	{r4, r5, lr}
   22cca:	b083      	sub	sp, #12
   22ccc:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   22cce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   22cd0:	b120      	cbz	r0, 22cdc <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   22cd2:	f001 fcef 	bl	246b4 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   22cd6:	6823      	ldr	r3, [r4, #0]
   22cd8:	2200      	movs	r2, #0
   22cda:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   22cdc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   22ce0:	b145      	cbz	r5, 22cf4 <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   22ce2:	6820      	ldr	r0, [r4, #0]
   22ce4:	6803      	ldr	r3, [r0, #0]
   22ce6:	9300      	str	r3, [sp, #0]
   22ce8:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   22cec:	2218      	movs	r2, #24
   22cee:	f100 0114 	add.w	r1, r0, #20
   22cf2:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   22cf4:	b003      	add	sp, #12
   22cf6:	bd30      	pop	{r4, r5, pc}
   22cf8:	4770      	bx	lr
	...

00022cfc <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22cfc:	2800      	cmp	r0, #0
   22cfe:	d064      	beq.n	22dca <net_tcp_release+0xce>
{
   22d00:	b538      	push	{r3, r4, r5, lr}
   22d02:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22d04:	4b35      	ldr	r3, [pc, #212]	; (22ddc <net_tcp_release+0xe0>)
   22d06:	4298      	cmp	r0, r3
   22d08:	d362      	bcc.n	22dd0 <net_tcp_release+0xd4>
   22d0a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   22d0e:	4298      	cmp	r0, r3
   22d10:	d261      	bcs.n	22dd6 <net_tcp_release+0xda>
	return list->head;
   22d12:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22d16:	b140      	cbz	r0, 22d2a <net_tcp_release+0x2e>
   22d18:	3834      	subs	r0, #52	; 0x34
   22d1a:	b140      	cbz	r0, 22d2e <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d1c:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   22d20:	d000      	beq.n	22d24 <net_tcp_release+0x28>
	return node->next;
   22d22:	6b44      	ldr	r4, [r0, #52]	; 0x34
   22d24:	b12c      	cbz	r4, 22d32 <net_tcp_release+0x36>
   22d26:	3c34      	subs	r4, #52	; 0x34
   22d28:	e00d      	b.n	22d46 <net_tcp_release+0x4a>
   22d2a:	2000      	movs	r0, #0
   22d2c:	e7f5      	b.n	22d1a <net_tcp_release+0x1e>
   22d2e:	4604      	mov	r4, r0
   22d30:	e009      	b.n	22d46 <net_tcp_release+0x4a>
   22d32:	2400      	movs	r4, #0
   22d34:	e007      	b.n	22d46 <net_tcp_release+0x4a>
			list->tail = list->head;
   22d36:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   22d3a:	e00e      	b.n	22d5a <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d3c:	461a      	mov	r2, r3
   22d3e:	e015      	b.n	22d6c <net_tcp_release+0x70>
   22d40:	3b34      	subs	r3, #52	; 0x34
   22d42:	4620      	mov	r0, r4
   22d44:	461c      	mov	r4, r3
   22d46:	b1d0      	cbz	r0, 22d7e <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   22d48:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   22d4c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   22d4e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   22d52:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   22d56:	428b      	cmp	r3, r1
   22d58:	d0ed      	beq.n	22d36 <net_tcp_release+0x3a>
	node->next = NULL;
   22d5a:	2300      	movs	r3, #0
   22d5c:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   22d5e:	f7f9 ff5c 	bl	1cc1a <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22d62:	b144      	cbz	r4, 22d76 <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d64:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   22d68:	d0e8      	beq.n	22d3c <net_tcp_release+0x40>
	return node->next;
   22d6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22d6c:	b12a      	cbz	r2, 22d7a <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d6e:	2b00      	cmp	r3, #0
   22d70:	d0e6      	beq.n	22d40 <net_tcp_release+0x44>
	return node->next;
   22d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22d74:	e7e4      	b.n	22d40 <net_tcp_release+0x44>
   22d76:	4623      	mov	r3, r4
   22d78:	e7e3      	b.n	22d42 <net_tcp_release+0x46>
   22d7a:	2300      	movs	r3, #0
   22d7c:	e7e1      	b.n	22d42 <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22d7e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   22d82:	f006 f9e7 	bl	29154 <_impl_k_timer_stop>
	sem->count = 0;
   22d86:	2400      	movs	r4, #0
   22d88:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   22d8c:	4628      	mov	r0, r5
   22d8e:	f7ff fdd5 	bl	2293c <ack_timer_cancel>
	fin_timer_cancel(tcp);
   22d92:	4628      	mov	r0, r5
   22d94:	f7ff fdd7 	bl	22946 <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   22d98:	4621      	mov	r1, r4
   22d9a:	4628      	mov	r0, r5
   22d9c:	f7ff ff83 	bl	22ca6 <net_tcp_change_state>
	tcp->context = NULL;
   22da0:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   22da2:	f04f 0320 	mov.w	r3, #32
   22da6:	f3ef 8111 	mrs	r1, BASEPRI
   22daa:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   22dae:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22db2:	f3c3 1247 	ubfx	r2, r3, #5, #8
   22db6:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   22dba:	f362 134c 	bfi	r3, r2, #5, #8
   22dbe:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22dc2:	f381 8811 	msr	BASEPRI, r1
	return 0;
   22dc6:	4620      	mov	r0, r4
   22dc8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22dca:	f06f 0015 	mvn.w	r0, #21
   22dce:	4770      	bx	lr
   22dd0:	f06f 0015 	mvn.w	r0, #21
   22dd4:	bd38      	pop	{r3, r4, r5, pc}
   22dd6:	f06f 0015 	mvn.w	r0, #21
}
   22dda:	bd38      	pop	{r3, r4, r5, pc}
   22ddc:	20001f00 	.word	0x20001f00

00022de0 <net_tcp_prepare_segment>:
{
   22de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22de4:	b086      	sub	sp, #24
   22de6:	4604      	mov	r4, r0
   22de8:	460d      	mov	r5, r1
   22dea:	4692      	mov	sl, r2
   22dec:	4699      	mov	r9, r3
   22dee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   22df0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   22df4:	2300      	movs	r3, #0
   22df6:	9300      	str	r3, [sp, #0]
   22df8:	9301      	str	r3, [sp, #4]
   22dfa:	9302      	str	r3, [sp, #8]
   22dfc:	9303      	str	r3, [sp, #12]
   22dfe:	9304      	str	r3, [sp, #16]
   22e00:	9305      	str	r3, [sp, #20]
	if (!local) {
   22e02:	2f00      	cmp	r7, #0
   22e04:	d050      	beq.n	22ea8 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   22e06:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   22e0a:	f015 0f10 	tst.w	r5, #16
   22e0e:	d009      	beq.n	22e24 <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   22e10:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22e14:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   22e18:	2b07      	cmp	r3, #7
   22e1a:	d048      	beq.n	22eae <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   22e1c:	2b08      	cmp	r3, #8
   22e1e:	d055      	beq.n	22ecc <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   22e20:	2b05      	cmp	r3, #5
   22e22:	d058      	beq.n	22ed6 <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   22e24:	f015 0f01 	tst.w	r5, #1
   22e28:	d010      	beq.n	22e4c <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   22e2a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e32:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   22e36:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   22e3a:	3602      	adds	r6, #2
   22e3c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22e40:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   22e44:	2b04      	cmp	r3, #4
   22e46:	d053      	beq.n	22ef0 <net_tcp_prepare_segment+0x110>
   22e48:	2b03      	cmp	r3, #3
   22e4a:	d051      	beq.n	22ef0 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   22e4c:	f015 0f02 	tst.w	r5, #2
   22e50:	d000      	beq.n	22e54 <net_tcp_prepare_segment+0x74>
		seq++;
   22e52:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   22e54:	4620      	mov	r0, r4
   22e56:	f7ff fea7 	bl	22ba8 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   22e5a:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   22e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22e5e:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   22e60:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22e64:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   22e66:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   22e6a:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   22e6c:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   22e70:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   22e74:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   22e78:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   22e7c:	f8d8 2000 	ldr.w	r2, [r8]
   22e80:	4669      	mov	r1, sp
   22e82:	4620      	mov	r0, r4
   22e84:	f7ff fd70 	bl	22968 <prepare_segment>
   22e88:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   22e8c:	b3a8      	cbz	r0, 22efa <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   22e8e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   22e92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   22e96:	1af3      	subs	r3, r6, r3
   22e98:	2b00      	cmp	r3, #0
   22e9a:	dd31      	ble.n	22f00 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   22e9c:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   22ea0:	2000      	movs	r0, #0
}
   22ea2:	b006      	add	sp, #24
   22ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   22ea8:	6807      	ldr	r7, [r0, #0]
   22eaa:	3708      	adds	r7, #8
   22eac:	e7ab      	b.n	22e06 <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   22eae:	f015 0f01 	tst.w	r5, #1
   22eb2:	d006      	beq.n	22ec2 <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   22eb4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22eb8:	2109      	movs	r1, #9
   22eba:	4620      	mov	r0, r4
   22ebc:	f7ff fef3 	bl	22ca6 <net_tcp_change_state>
   22ec0:	e7b0      	b.n	22e24 <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   22ec2:	210a      	movs	r1, #10
   22ec4:	4620      	mov	r0, r4
   22ec6:	f7ff feee 	bl	22ca6 <net_tcp_change_state>
   22eca:	e7ab      	b.n	22e24 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22ecc:	2109      	movs	r1, #9
   22ece:	4620      	mov	r0, r4
   22ed0:	f7ff fee9 	bl	22ca6 <net_tcp_change_state>
   22ed4:	e7a6      	b.n	22e24 <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   22ed6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22ede:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   22ee2:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   22ee6:	2106      	movs	r1, #6
   22ee8:	4620      	mov	r0, r4
   22eea:	f7ff fedc 	bl	22ca6 <net_tcp_change_state>
   22eee:	e799      	b.n	22e24 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   22ef0:	2107      	movs	r1, #7
   22ef2:	4620      	mov	r0, r4
   22ef4:	f7ff fed7 	bl	22ca6 <net_tcp_change_state>
   22ef8:	e7a8      	b.n	22e4c <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   22efa:	f06f 0015 	mvn.w	r0, #21
   22efe:	e7d0      	b.n	22ea2 <net_tcp_prepare_segment+0xc2>
	return 0;
   22f00:	2000      	movs	r0, #0
   22f02:	e7ce      	b.n	22ea2 <net_tcp_prepare_segment+0xc2>

00022f04 <net_tcp_prepare_ack>:
{
   22f04:	b570      	push	{r4, r5, r6, lr}
   22f06:	b088      	sub	sp, #32
   22f08:	4604      	mov	r4, r0
   22f0a:	460d      	mov	r5, r1
   22f0c:	4616      	mov	r6, r2
   22f0e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22f12:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   22f16:	2b03      	cmp	r3, #3
   22f18:	d011      	beq.n	22f3e <net_tcp_prepare_ack+0x3a>
   22f1a:	d327      	bcc.n	22f6c <net_tcp_prepare_ack+0x68>
   22f1c:	3b06      	subs	r3, #6
   22f1e:	2b01      	cmp	r3, #1
   22f20:	d824      	bhi.n	22f6c <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   22f22:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22f26:	3b01      	subs	r3, #1
   22f28:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   22f2c:	9202      	str	r2, [sp, #8]
   22f2e:	9101      	str	r1, [sp, #4]
   22f30:	2200      	movs	r2, #0
   22f32:	9200      	str	r2, [sp, #0]
   22f34:	4613      	mov	r3, r2
   22f36:	2111      	movs	r1, #17
   22f38:	f7ff ff52 	bl	22de0 <net_tcp_prepare_segment>
   22f3c:	e014      	b.n	22f68 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   22f3e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22f42:	3b01      	subs	r3, #1
   22f44:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   22f48:	f10d 0217 	add.w	r2, sp, #23
   22f4c:	a906      	add	r1, sp, #24
   22f4e:	f7ff fe54 	bl	22bfa <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   22f52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   22f56:	9602      	str	r6, [sp, #8]
   22f58:	9501      	str	r5, [sp, #4]
   22f5a:	2200      	movs	r2, #0
   22f5c:	9200      	str	r2, [sp, #0]
   22f5e:	aa06      	add	r2, sp, #24
   22f60:	2112      	movs	r1, #18
   22f62:	4620      	mov	r0, r4
   22f64:	f7ff ff3c 	bl	22de0 <net_tcp_prepare_segment>
}
   22f68:	b008      	add	sp, #32
   22f6a:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   22f6c:	9602      	str	r6, [sp, #8]
   22f6e:	9501      	str	r5, [sp, #4]
   22f70:	2200      	movs	r2, #0
   22f72:	9200      	str	r2, [sp, #0]
   22f74:	4613      	mov	r3, r2
   22f76:	2110      	movs	r1, #16
   22f78:	4620      	mov	r0, r4
   22f7a:	f7ff ff31 	bl	22de0 <net_tcp_prepare_segment>
   22f7e:	e7f3      	b.n	22f68 <net_tcp_prepare_ack+0x64>

00022f80 <net_tcp_queue_data>:
{
   22f80:	b570      	push	{r4, r5, r6, lr}
   22f82:	b086      	sub	sp, #24
   22f84:	4605      	mov	r5, r0
   22f86:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   22f88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   22f8a:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   22f8c:	2400      	movs	r4, #0
   22f8e:	e002      	b.n	22f96 <net_tcp_queue_data+0x16>
		bytes += buf->len;
   22f90:	899a      	ldrh	r2, [r3, #12]
   22f92:	4414      	add	r4, r2
		buf = buf->frags;
   22f94:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22f96:	2b00      	cmp	r3, #0
   22f98:	d1fa      	bne.n	22f90 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   22f9a:	ab05      	add	r3, sp, #20
   22f9c:	9302      	str	r3, [sp, #8]
   22f9e:	9001      	str	r0, [sp, #4]
   22fa0:	2200      	movs	r2, #0
   22fa2:	9200      	str	r2, [sp, #0]
   22fa4:	4613      	mov	r3, r2
   22fa6:	2118      	movs	r1, #24
   22fa8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   22faa:	f7ff ff19 	bl	22de0 <net_tcp_prepare_segment>
	if (ret) {
   22fae:	4606      	mov	r6, r0
   22fb0:	bb10      	cbnz	r0, 22ff8 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   22fb2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   22fb4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   22fb8:	4423      	add	r3, r4
   22fba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   22fbe:	4a1b      	ldr	r2, [pc, #108]	; (2302c <net_tcp_queue_data+0xac>)
   22fc0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   22fc2:	441c      	add	r4, r3
   22fc4:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   22fc6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22fc8:	9905      	ldr	r1, [sp, #20]
   22fca:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   22fce:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   22fd0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   22fd4:	b199      	cbz	r1, 22ffe <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   22fd6:	600a      	str	r2, [r1, #0]
		list->tail = node;
   22fd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   22fdc:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   22fde:	3058      	adds	r0, #88	; 0x58
   22fe0:	f006 f942 	bl	29268 <_timeout_remaining_get>
   22fe4:	b180      	cbz	r0, 23008 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   22fe6:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   22fe8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   22fec:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   22ff0:	2b0a      	cmp	r3, #10
   22ff2:	d015      	beq.n	23020 <net_tcp_queue_data+0xa0>
   22ff4:	f7f9 fe02 	bl	1cbfc <net_pkt_ref>
}
   22ff8:	4630      	mov	r0, r6
   22ffa:	b006      	add	sp, #24
   22ffc:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   22ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23006:	e7e9      	b.n	22fdc <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23008:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   2300a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   2300e:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23012:	2200      	movs	r2, #0
   23014:	21c8      	movs	r1, #200	; 0xc8
   23016:	4099      	lsls	r1, r3
   23018:	3058      	adds	r0, #88	; 0x58
   2301a:	f005 ffe3 	bl	28fe4 <_impl_k_timer_start>
   2301e:	e7e2      	b.n	22fe6 <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23020:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23024:	2b02      	cmp	r3, #2
   23026:	d1e5      	bne.n	22ff4 <net_tcp_queue_data+0x74>
   23028:	e7e6      	b.n	22ff8 <net_tcp_queue_data+0x78>
   2302a:	bf00      	nop
   2302c:	200029f0 	.word	0x200029f0

00023030 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23030:	b570      	push	{r4, r5, r6, lr}
   23032:	4606      	mov	r6, r0
   23034:	460d      	mov	r5, r1
	__asm__ volatile(
   23036:	f04f 0320 	mov.w	r3, #32
   2303a:	f3ef 8111 	mrs	r1, BASEPRI
   2303e:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23042:	2400      	movs	r4, #0
   23044:	e000      	b.n	23048 <net_tcp_foreach+0x18>
   23046:	3401      	adds	r4, #1
   23048:	2c05      	cmp	r4, #5
   2304a:	dc16      	bgt.n	2307a <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   2304c:	23c8      	movs	r3, #200	; 0xc8
   2304e:	4a0c      	ldr	r2, [pc, #48]	; (23080 <net_tcp_foreach+0x50>)
   23050:	fb03 2304 	mla	r3, r3, r4, r2
   23054:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23058:	f013 0f20 	tst.w	r3, #32
   2305c:	d0f3      	beq.n	23046 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2305e:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23062:	4629      	mov	r1, r5
   23064:	20c8      	movs	r0, #200	; 0xc8
   23066:	fb00 2004 	mla	r0, r0, r4, r2
   2306a:	47b0      	blx	r6
	__asm__ volatile(
   2306c:	f04f 0320 	mov.w	r3, #32
   23070:	f3ef 8111 	mrs	r1, BASEPRI
   23074:	f383 8811 	msr	BASEPRI, r3
   23078:	e7e5      	b.n	23046 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2307a:	f381 8811 	msr	BASEPRI, r1
   2307e:	bd70      	pop	{r4, r5, r6, pc}
   23080:	20001f00 	.word	0x20001f00

00023084 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23084:	b5f0      	push	{r4, r5, r6, r7, lr}
   23086:	b085      	sub	sp, #20
   23088:	4605      	mov	r5, r0
   2308a:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   2308c:	f7fa f8df 	bl	1d24e <net_pkt_tcp_data>
   23090:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23092:	2214      	movs	r2, #20
   23094:	4601      	mov	r1, r0
   23096:	4628      	mov	r0, r5
   23098:	f7fa fc82 	bl	1d9a0 <net_header_fits>
   2309c:	b120      	cbz	r0, 230a8 <net_tcp_get_hdr+0x24>
		return hdr;
   2309e:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   230a0:	b127      	cbz	r7, 230ac <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   230a2:	4620      	mov	r0, r4
   230a4:	b005      	add	sp, #20
   230a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   230a8:	2700      	movs	r7, #0
   230aa:	e7f9      	b.n	230a0 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   230ac:	68a8      	ldr	r0, [r5, #8]
   230ae:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   230b2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   230b6:	9600      	str	r6, [sp, #0]
   230b8:	2302      	movs	r3, #2
   230ba:	f10d 020e 	add.w	r2, sp, #14
   230be:	4421      	add	r1, r4
   230c0:	f7f9 ff29 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   230c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   230c8:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   230ca:	9300      	str	r3, [sp, #0]
   230cc:	2302      	movs	r3, #2
   230ce:	f10d 020e 	add.w	r2, sp, #14
   230d2:	f7f9 ff20 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   230d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230da:	1d33      	adds	r3, r6, #4
   230dc:	9300      	str	r3, [sp, #0]
   230de:	2304      	movs	r3, #4
   230e0:	f10d 020e 	add.w	r2, sp, #14
   230e4:	f7f9 ff17 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   230e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230ec:	f106 0308 	add.w	r3, r6, #8
   230f0:	9300      	str	r3, [sp, #0]
   230f2:	2304      	movs	r3, #4
   230f4:	f10d 020e 	add.w	r2, sp, #14
   230f8:	f7f9 ff0d 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   230fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23100:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23104:	9300      	str	r3, [sp, #0]
   23106:	2301      	movs	r3, #1
   23108:	f10d 020e 	add.w	r2, sp, #14
   2310c:	f7f9 ff03 	bl	1cf16 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23110:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23114:	f106 030d 	add.w	r3, r6, #13
   23118:	9300      	str	r3, [sp, #0]
   2311a:	2301      	movs	r3, #1
   2311c:	f10d 020e 	add.w	r2, sp, #14
   23120:	f7f9 fef9 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23124:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23128:	f106 030e 	add.w	r3, r6, #14
   2312c:	9300      	str	r3, [sp, #0]
   2312e:	2302      	movs	r3, #2
   23130:	f10d 020e 	add.w	r2, sp, #14
   23134:	f7f9 feef 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23138:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2313c:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23140:	9300      	str	r3, [sp, #0]
   23142:	2302      	movs	r3, #2
   23144:	f10d 020e 	add.w	r2, sp, #14
   23148:	f7f9 fee5 	bl	1cf16 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   2314c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23150:	f106 0312 	add.w	r3, r6, #18
   23154:	9300      	str	r3, [sp, #0]
   23156:	2302      	movs	r3, #2
   23158:	f10d 020e 	add.w	r2, sp, #14
   2315c:	f7f9 fedb 	bl	1cf16 <net_frag_read>
	if (!frag && pos == 0xffff) {
   23160:	b108      	cbz	r0, 23166 <net_tcp_get_hdr+0xe2>
	return hdr;
   23162:	4634      	mov	r4, r6
   23164:	e79d      	b.n	230a2 <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23166:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2316a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2316e:	429a      	cmp	r2, r3
   23170:	d001      	beq.n	23176 <net_tcp_get_hdr+0xf2>
	return hdr;
   23172:	4634      	mov	r4, r6
   23174:	e795      	b.n	230a2 <net_tcp_get_hdr+0x1e>
		return NULL;
   23176:	463c      	mov	r4, r7
   23178:	e793      	b.n	230a2 <net_tcp_get_hdr+0x1e>

0002317a <net_tcp_validate_seq>:
{
   2317a:	b570      	push	{r4, r5, r6, lr}
   2317c:	b086      	sub	sp, #24
   2317e:	4606      	mov	r6, r0
   23180:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23182:	a901      	add	r1, sp, #4
   23184:	f7ff ff7e 	bl	23084 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23188:	b1e8      	cbz	r0, 231c6 <net_tcp_validate_seq+0x4c>
   2318a:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   2318c:	7900      	ldrb	r0, [r0, #4]
   2318e:	795c      	ldrb	r4, [r3, #5]
   23190:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23194:	799a      	ldrb	r2, [r3, #6]
   23196:	79dc      	ldrb	r4, [r3, #7]
   23198:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2319c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   231a0:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   231a4:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   231a6:	2b00      	cmp	r3, #0
   231a8:	db0b      	blt.n	231c2 <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   231aa:	4630      	mov	r0, r6
   231ac:	f7ff fcfc 	bl	22ba8 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   231b0:	4428      	add	r0, r5
   231b2:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   231b4:	2c00      	cmp	r4, #0
   231b6:	db02      	blt.n	231be <net_tcp_validate_seq+0x44>
   231b8:	2000      	movs	r0, #0
}
   231ba:	b006      	add	sp, #24
   231bc:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   231be:	2001      	movs	r0, #1
   231c0:	e7fb      	b.n	231ba <net_tcp_validate_seq+0x40>
   231c2:	2000      	movs	r0, #0
   231c4:	e7f9      	b.n	231ba <net_tcp_validate_seq+0x40>
		return false;
   231c6:	2000      	movs	r0, #0
   231c8:	e7f7      	b.n	231ba <net_tcp_validate_seq+0x40>

000231ca <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   231ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231ce:	b087      	sub	sp, #28
   231d0:	4605      	mov	r5, r0
   231d2:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   231d4:	2214      	movs	r2, #20
   231d6:	f7fa fbe3 	bl	1d9a0 <net_header_fits>
   231da:	b128      	cbz	r0, 231e8 <net_tcp_set_hdr+0x1e>
		return hdr;
   231dc:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   231de:	b12e      	cbz	r6, 231ec <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   231e0:	4620      	mov	r0, r4
   231e2:	b007      	add	sp, #28
   231e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   231e8:	2600      	movs	r6, #0
   231ea:	e7f8      	b.n	231de <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231ec:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   231f0:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231f4:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   231f8:	9702      	str	r7, [sp, #8]
   231fa:	9401      	str	r4, [sp, #4]
   231fc:	f04f 0802 	mov.w	r8, #2
   23200:	f8cd 8000 	str.w	r8, [sp]
   23204:	f10d 0316 	add.w	r3, sp, #22
   23208:	440a      	add	r2, r1
   2320a:	68a9      	ldr	r1, [r5, #8]
   2320c:	4628      	mov	r0, r5
   2320e:	f7f9 fef4 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23212:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23216:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2321a:	9702      	str	r7, [sp, #8]
   2321c:	9301      	str	r3, [sp, #4]
   2321e:	f8cd 8000 	str.w	r8, [sp]
   23222:	f10d 0316 	add.w	r3, sp, #22
   23226:	4601      	mov	r1, r0
   23228:	4628      	mov	r0, r5
   2322a:	f7f9 fee6 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   2322e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23232:	1d23      	adds	r3, r4, #4
   23234:	9702      	str	r7, [sp, #8]
   23236:	9301      	str	r3, [sp, #4]
   23238:	f04f 0904 	mov.w	r9, #4
   2323c:	f8cd 9000 	str.w	r9, [sp]
   23240:	f10d 0316 	add.w	r3, sp, #22
   23244:	4601      	mov	r1, r0
   23246:	4628      	mov	r0, r5
   23248:	f7f9 fed7 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   2324c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23250:	f104 0308 	add.w	r3, r4, #8
   23254:	9702      	str	r7, [sp, #8]
   23256:	9301      	str	r3, [sp, #4]
   23258:	f8cd 9000 	str.w	r9, [sp]
   2325c:	f10d 0316 	add.w	r3, sp, #22
   23260:	4601      	mov	r1, r0
   23262:	4628      	mov	r0, r5
   23264:	f7f9 fec9 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23268:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2326c:	f104 030c 	add.w	r3, r4, #12
   23270:	9702      	str	r7, [sp, #8]
   23272:	9301      	str	r3, [sp, #4]
   23274:	f04f 0901 	mov.w	r9, #1
   23278:	f8cd 9000 	str.w	r9, [sp]
   2327c:	f10d 0316 	add.w	r3, sp, #22
   23280:	4601      	mov	r1, r0
   23282:	4628      	mov	r0, r5
   23284:	f7f9 feb9 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23288:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2328c:	f104 030d 	add.w	r3, r4, #13
   23290:	9702      	str	r7, [sp, #8]
   23292:	9301      	str	r3, [sp, #4]
   23294:	f8cd 9000 	str.w	r9, [sp]
   23298:	f10d 0316 	add.w	r3, sp, #22
   2329c:	4601      	mov	r1, r0
   2329e:	4628      	mov	r0, r5
   232a0:	f7f9 feab 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   232a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   232a8:	f104 030e 	add.w	r3, r4, #14
   232ac:	9702      	str	r7, [sp, #8]
   232ae:	9301      	str	r3, [sp, #4]
   232b0:	f8cd 8000 	str.w	r8, [sp]
   232b4:	f10d 0316 	add.w	r3, sp, #22
   232b8:	4601      	mov	r1, r0
   232ba:	4628      	mov	r0, r5
   232bc:	f7f9 fe9d 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   232c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   232c4:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   232c8:	9702      	str	r7, [sp, #8]
   232ca:	9301      	str	r3, [sp, #4]
   232cc:	f8cd 8000 	str.w	r8, [sp]
   232d0:	f10d 0316 	add.w	r3, sp, #22
   232d4:	4601      	mov	r1, r0
   232d6:	4628      	mov	r0, r5
   232d8:	f7f9 fe8f 	bl	1cffa <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   232dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   232e0:	f104 0312 	add.w	r3, r4, #18
   232e4:	9702      	str	r7, [sp, #8]
   232e6:	9301      	str	r3, [sp, #4]
   232e8:	f8cd 8000 	str.w	r8, [sp]
   232ec:	f10d 0316 	add.w	r3, sp, #22
   232f0:	4601      	mov	r1, r0
   232f2:	4628      	mov	r0, r5
   232f4:	f7f9 fe81 	bl	1cffa <net_pkt_write>
	if (!frag) {
   232f8:	2800      	cmp	r0, #0
   232fa:	f47f af71 	bne.w	231e0 <net_tcp_set_hdr+0x16>
		return NULL;
   232fe:	4634      	mov	r4, r6
   23300:	e76e      	b.n	231e0 <net_tcp_set_hdr+0x16>

00023302 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23302:	b570      	push	{r4, r5, r6, lr}
   23304:	b084      	sub	sp, #16
   23306:	4605      	mov	r5, r0
   23308:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   2330a:	f7f9 ffa0 	bl	1d24e <net_pkt_tcp_data>
   2330e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23310:	2214      	movs	r2, #20
   23312:	4601      	mov	r1, r0
   23314:	4628      	mov	r0, r5
   23316:	f7fa fb43 	bl	1d9a0 <net_header_fits>
   2331a:	b120      	cbz	r0, 23326 <net_tcp_get_chksum+0x24>
		return hdr;
   2331c:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   2331e:	b123      	cbz	r3, 2332a <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23320:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23322:	b004      	add	sp, #16
   23324:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23326:	2300      	movs	r3, #0
   23328:	e7f9      	b.n	2331e <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   2332a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2332e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23332:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23334:	3110      	adds	r1, #16
   23336:	f10d 030e 	add.w	r3, sp, #14
   2333a:	9300      	str	r3, [sp, #0]
   2333c:	2302      	movs	r3, #2
   2333e:	aa03      	add	r2, sp, #12
   23340:	b289      	uxth	r1, r1
   23342:	4630      	mov	r0, r6
   23344:	f7f9 fde7 	bl	1cf16 <net_frag_read>
	return chksum;
   23348:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2334c:	e7e9      	b.n	23322 <net_tcp_get_chksum+0x20>

0002334e <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23352:	b086      	sub	sp, #24
   23354:	4606      	mov	r6, r0
   23356:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23358:	2300      	movs	r3, #0
   2335a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   2335e:	f7f9 ff76 	bl	1d24e <net_pkt_tcp_data>
   23362:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23364:	2214      	movs	r2, #20
   23366:	4601      	mov	r1, r0
   23368:	4630      	mov	r0, r6
   2336a:	f7fa fb19 	bl	1d9a0 <net_header_fits>
   2336e:	b170      	cbz	r0, 2338e <net_tcp_set_chksum+0x40>
		return hdr;
   23370:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23372:	b173      	cbz	r3, 23392 <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23374:	2300      	movs	r3, #0
   23376:	7423      	strb	r3, [r4, #16]
   23378:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   2337a:	2106      	movs	r1, #6
   2337c:	4630      	mov	r0, r6
   2337e:	f7fa fab6 	bl	1d8ee <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23382:	43c0      	mvns	r0, r0
   23384:	8220      	strh	r0, [r4, #16]

		return frag;
   23386:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23388:	b006      	add	sp, #24
   2338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2338e:	2300      	movs	r3, #0
   23390:	e7ef      	b.n	23372 <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23392:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23396:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2339a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   2339c:	3210      	adds	r2, #16
   2339e:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   233a2:	f8cd 8008 	str.w	r8, [sp, #8]
   233a6:	f10d 0416 	add.w	r4, sp, #22
   233aa:	9401      	str	r4, [sp, #4]
   233ac:	2702      	movs	r7, #2
   233ae:	9700      	str	r7, [sp, #0]
   233b0:	ab05      	add	r3, sp, #20
   233b2:	b292      	uxth	r2, r2
   233b4:	4629      	mov	r1, r5
   233b6:	4630      	mov	r0, r6
   233b8:	f7f9 fe1f 	bl	1cffa <net_pkt_write>
   233bc:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   233be:	2106      	movs	r1, #6
   233c0:	4630      	mov	r0, r6
   233c2:	f7fa fa94 	bl	1d8ee <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   233c6:	43c0      	mvns	r0, r0
   233c8:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   233cc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   233d0:	3a02      	subs	r2, #2
   233d2:	f8cd 8008 	str.w	r8, [sp, #8]
   233d6:	9401      	str	r4, [sp, #4]
   233d8:	9700      	str	r7, [sp, #0]
   233da:	ab05      	add	r3, sp, #20
   233dc:	b292      	uxth	r2, r2
   233de:	4629      	mov	r1, r5
   233e0:	4630      	mov	r0, r6
   233e2:	f7f9 fe0a 	bl	1cffa <net_pkt_write>
	return frag;
   233e6:	e7cf      	b.n	23388 <net_tcp_set_chksum+0x3a>

000233e8 <net_tcp_send_pkt>:
{
   233e8:	b570      	push	{r4, r5, r6, lr}
   233ea:	b086      	sub	sp, #24
   233ec:	4605      	mov	r5, r0
	return pkt->context;
   233ee:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   233f0:	a901      	add	r1, sp, #4
   233f2:	f7ff fe47 	bl	23084 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   233f6:	2800      	cmp	r0, #0
   233f8:	f000 8086 	beq.w	23508 <net_tcp_send_pkt+0x120>
   233fc:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   233fe:	7a02      	ldrb	r2, [r0, #8]
   23400:	7a43      	ldrb	r3, [r0, #9]
   23402:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23406:	7a81      	ldrb	r1, [r0, #10]
   23408:	7ac3      	ldrb	r3, [r0, #11]
   2340a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2340e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23412:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23414:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23418:	429a      	cmp	r2, r3
   2341a:	d039      	beq.n	23490 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   2341c:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   2341e:	0a19      	lsrs	r1, r3, #8
   23420:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23422:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23424:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23428:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   2342a:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   2342c:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2342e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23430:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23438:	4299      	cmp	r1, r3
   2343a:	d007      	beq.n	2344c <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   2343c:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2343e:	f013 0f10 	tst.w	r3, #16
   23442:	d103      	bne.n	2344c <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   23444:	f043 0310 	orr.w	r3, r3, #16
   23448:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   2344a:	2201      	movs	r2, #1
	if (calc_chksum) {
   2344c:	bb12      	cbnz	r2, 23494 <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   2344e:	7b63      	ldrb	r3, [r4, #13]
   23450:	f013 0f01 	tst.w	r3, #1
   23454:	d006      	beq.n	23464 <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   23456:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23458:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   2345c:	f043 0302 	orr.w	r3, r3, #2
   23460:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   23464:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23466:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   2346a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   2346e:	4621      	mov	r1, r4
   23470:	4628      	mov	r0, r5
   23472:	f7ff feaa 	bl	231ca <net_tcp_set_hdr>
	return pkt->family;
   23476:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2347a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   2347e:	2b0a      	cmp	r3, #10
   23480:	d00d      	beq.n	2349e <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   23482:	4628      	mov	r0, r5
   23484:	f7f6 ffc8 	bl	1a418 <net_send_data>
   23488:	4604      	mov	r4, r0
}
   2348a:	4620      	mov	r0, r4
   2348c:	b006      	add	sp, #24
   2348e:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   23490:	2200      	movs	r2, #0
   23492:	e7cc      	b.n	2342e <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   23494:	68a9      	ldr	r1, [r5, #8]
   23496:	4628      	mov	r0, r5
   23498:	f7ff ff59 	bl	2334e <net_tcp_set_chksum>
   2349c:	e7d7      	b.n	2344e <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   2349e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   234a2:	2b02      	cmp	r3, #2
   234a4:	d1ed      	bne.n	23482 <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   234a6:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   234a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   234ac:	b10b      	cbz	r3, 234b2 <net_tcp_send_pkt+0xca>
   234ae:	3b34      	subs	r3, #52	; 0x34
   234b0:	e006      	b.n	234c0 <net_tcp_send_pkt+0xd8>
   234b2:	2300      	movs	r3, #0
   234b4:	e004      	b.n	234c0 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   234b6:	4611      	mov	r1, r2
   234b8:	e009      	b.n	234ce <net_tcp_send_pkt+0xe6>
	return node->next;
   234ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   234bc:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   234c0:	b163      	cbz	r3, 234dc <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   234c2:	42ab      	cmp	r3, r5
   234c4:	d009      	beq.n	234da <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   234c6:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   234ca:	d0f4      	beq.n	234b6 <net_tcp_send_pkt+0xce>
	return node->next;
   234cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   234ce:	b111      	cbz	r1, 234d6 <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   234d0:	2a00      	cmp	r2, #0
   234d2:	d1f2      	bne.n	234ba <net_tcp_send_pkt+0xd2>
   234d4:	e7f2      	b.n	234bc <net_tcp_send_pkt+0xd4>
   234d6:	2300      	movs	r3, #0
   234d8:	e7f2      	b.n	234c0 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   234da:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   234dc:	2b00      	cmp	r3, #0
   234de:	d0d0      	beq.n	23482 <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   234e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   234e4:	4628      	mov	r0, r5
   234e6:	f7f9 fec7 	bl	1d278 <net_pkt_clone>
			if (!new_pkt) {
   234ea:	4605      	mov	r5, r0
   234ec:	b178      	cbz	r0, 2350e <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   234ee:	f7f6 ff93 	bl	1a418 <net_send_data>
			if (ret < 0) {
   234f2:	1e04      	subs	r4, r0, #0
   234f4:	db04      	blt.n	23500 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   234f6:	4a07      	ldr	r2, [pc, #28]	; (23514 <net_tcp_send_pkt+0x12c>)
   234f8:	6f13      	ldr	r3, [r2, #112]	; 0x70
   234fa:	3301      	adds	r3, #1
   234fc:	6713      	str	r3, [r2, #112]	; 0x70
   234fe:	e7c4      	b.n	2348a <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   23500:	4628      	mov	r0, r5
   23502:	f7f9 fb8a 	bl	1cc1a <net_pkt_unref>
   23506:	e7c0      	b.n	2348a <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   23508:	f06f 0479 	mvn.w	r4, #121	; 0x79
   2350c:	e7bd      	b.n	2348a <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   2350e:	f06f 040b 	mvn.w	r4, #11
   23512:	e7ba      	b.n	2348a <net_tcp_send_pkt+0xa2>
   23514:	200029f0 	.word	0x200029f0

00023518 <tcp_retry_expired>:
	return (!list->head);
   23518:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2351a:	2b00      	cmp	r3, #0
   2351c:	d05c      	beq.n	235d8 <tcp_retry_expired+0xc0>
{
   2351e:	b510      	push	{r4, lr}
   23520:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   23524:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   23526:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   2352a:	f002 031f 	and.w	r3, r2, #31
   2352e:	3301      	adds	r3, #1
   23530:	f003 031f 	and.w	r3, r3, #31
   23534:	f363 0204 	bfi	r2, r3, #0, #5
   23538:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2353c:	2b09      	cmp	r3, #9
   2353e:	dc2f      	bgt.n	235a0 <tcp_retry_expired+0x88>
   23540:	2200      	movs	r2, #0
   23542:	21c8      	movs	r1, #200	; 0xc8
   23544:	4099      	lsls	r1, r3
   23546:	f005 fd4d 	bl	28fe4 <_impl_k_timer_start>
	return list->head;
   2354a:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   2354c:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   23550:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   23552:	f012 0f01 	tst.w	r2, #1
   23556:	d00d      	beq.n	23574 <tcp_retry_expired+0x5c>
	return pkt->family;
   23558:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   2355c:	2a0a      	cmp	r2, #10
   2355e:	d023      	beq.n	235a8 <tcp_retry_expired+0x90>
   23560:	4620      	mov	r0, r4
   23562:	f7f9 fb4b 	bl	1cbfc <net_pkt_ref>
   23566:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   23568:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2356c:	f36f 0300 	bfc	r3, #0, #1
   23570:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   23574:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23578:	f043 0302 	orr.w	r3, r3, #2
   2357c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23580:	4620      	mov	r0, r4
   23582:	f7ff ff31 	bl	233e8 <net_tcp_send_pkt>
   23586:	2800      	cmp	r0, #0
   23588:	db13      	blt.n	235b2 <tcp_retry_expired+0x9a>
	return pkt->family;
   2358a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2358e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23592:	2b0a      	cmp	r3, #10
   23594:	d01b      	beq.n	235ce <tcp_retry_expired+0xb6>
   23596:	4a11      	ldr	r2, [pc, #68]	; (235dc <tcp_retry_expired+0xc4>)
   23598:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2359a:	3301      	adds	r3, #1
   2359c:	6713      	str	r3, [r2, #112]	; 0x70
   2359e:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   235a0:	4608      	mov	r0, r1
   235a2:	f7ff f99a 	bl	228da <abort_connection>
			return;
   235a6:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   235a8:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   235ac:	2b02      	cmp	r3, #2
   235ae:	d1d7      	bne.n	23560 <tcp_retry_expired+0x48>
   235b0:	e7da      	b.n	23568 <tcp_retry_expired+0x50>
   235b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   235b6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   235ba:	2b0a      	cmp	r3, #10
   235bc:	d103      	bne.n	235c6 <tcp_retry_expired+0xae>
   235be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   235c2:	2b02      	cmp	r3, #2
   235c4:	d0e1      	beq.n	2358a <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   235c6:	4620      	mov	r0, r4
   235c8:	f7f9 fb27 	bl	1cc1a <net_pkt_unref>
   235cc:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   235ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   235d2:	2b02      	cmp	r3, #2
   235d4:	d1df      	bne.n	23596 <tcp_retry_expired+0x7e>
   235d6:	e7e2      	b.n	2359e <tcp_retry_expired+0x86>
   235d8:	4770      	bx	lr
   235da:	bf00      	nop
   235dc:	200029f0 	.word	0x200029f0

000235e0 <net_tcp_send_data>:
{
   235e0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   235e2:	6e03      	ldr	r3, [r0, #96]	; 0x60
   235e4:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   235e8:	b10c      	cbz	r4, 235ee <net_tcp_send_data+0xe>
   235ea:	3c34      	subs	r4, #52	; 0x34
   235ec:	e013      	b.n	23616 <net_tcp_send_data+0x36>
   235ee:	2400      	movs	r4, #0
   235f0:	e011      	b.n	23616 <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   235f2:	4620      	mov	r0, r4
   235f4:	f7f9 fb11 	bl	1cc1a <net_pkt_unref>
	pkt->pkt_queued = send;
   235f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   235fc:	f043 0302 	orr.w	r3, r3, #2
   23600:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23604:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   23608:	d01e      	beq.n	23648 <net_tcp_send_data+0x68>
	return node->next;
   2360a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2360c:	b1f2      	cbz	r2, 2364c <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2360e:	b103      	cbz	r3, 23612 <net_tcp_send_data+0x32>
	return node->next;
   23610:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23612:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   23616:	b1dc      	cbz	r4, 23650 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   23618:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   2361c:	f013 0f02 	tst.w	r3, #2
   23620:	d1f0      	bne.n	23604 <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   23622:	f013 0f01 	tst.w	r3, #1
   23626:	d1ed      	bne.n	23604 <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   23628:	4620      	mov	r0, r4
   2362a:	f7ff fedd 	bl	233e8 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   2362e:	2800      	cmp	r0, #0
   23630:	dae2      	bge.n	235f8 <net_tcp_send_data+0x18>
	return pkt->family;
   23632:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23636:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2363a:	2b0a      	cmp	r3, #10
   2363c:	d1d9      	bne.n	235f2 <net_tcp_send_data+0x12>
   2363e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23642:	2b02      	cmp	r3, #2
   23644:	d1d5      	bne.n	235f2 <net_tcp_send_data+0x12>
   23646:	e7d7      	b.n	235f8 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23648:	461a      	mov	r2, r3
   2364a:	e7df      	b.n	2360c <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2364c:	2400      	movs	r4, #0
   2364e:	e7e2      	b.n	23616 <net_tcp_send_data+0x36>
}
   23650:	2000      	movs	r0, #0
   23652:	bd10      	pop	{r4, pc}

00023654 <net_tcp_ack_received>:
{
   23654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23658:	b087      	sub	sp, #28
   2365a:	4681      	mov	r9, r0
   2365c:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   2365e:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   23660:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23664:	b10b      	cbz	r3, 2366a <net_tcp_ack_received+0x16>
		valid_ack = true;
   23666:	2700      	movs	r7, #0
   23668:	e033      	b.n	236d2 <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   2366a:	4a51      	ldr	r2, [pc, #324]	; (237b0 <net_tcp_ack_received+0x15c>)
   2366c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2366e:	3301      	adds	r3, #1
   23670:	6653      	str	r3, [r2, #100]	; 0x64
   23672:	e7f8      	b.n	23666 <net_tcp_ack_received+0x12>
		list->head = node->next;
   23674:	6823      	ldr	r3, [r4, #0]
   23676:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2367a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2367e:	42a2      	cmp	r2, r4
   23680:	d005      	beq.n	2368e <net_tcp_ack_received+0x3a>
	node->next = NULL;
   23682:	2300      	movs	r3, #0
   23684:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   23686:	4630      	mov	r0, r6
   23688:	f7f9 fac7 	bl	1cc1a <net_pkt_unref>
   2368c:	e021      	b.n	236d2 <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   2368e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   23692:	e7f6      	b.n	23682 <net_tcp_ack_received+0x2e>
   23694:	4a46      	ldr	r2, [pc, #280]	; (237b0 <net_tcp_ack_received+0x15c>)
   23696:	6e53      	ldr	r3, [r2, #100]	; 0x64
   23698:	3301      	adds	r3, #1
   2369a:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   2369c:	b12f      	cbz	r7, 236aa <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   2369e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   236a2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   236a6:	2b04      	cmp	r3, #4
   236a8:	d046      	beq.n	23738 <net_tcp_ack_received+0xe4>
}
   236aa:	b007      	add	sp, #28
   236ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   236b0:	2108      	movs	r1, #8
   236b2:	4628      	mov	r0, r5
   236b4:	f7ff faf7 	bl	22ca6 <net_tcp_change_state>
		list->head = node->next;
   236b8:	6823      	ldr	r3, [r4, #0]
   236ba:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   236be:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   236c2:	42a2      	cmp	r2, r4
   236c4:	d035      	beq.n	23732 <net_tcp_ack_received+0xde>
	node->next = NULL;
   236c6:	2300      	movs	r3, #0
   236c8:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   236ca:	4630      	mov	r0, r6
   236cc:	f7f9 faa5 	bl	1cc1a <net_pkt_unref>
		valid_ack = true;
   236d0:	2701      	movs	r7, #1
	return (!list->head);
   236d2:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   236d6:	2c00      	cmp	r4, #0
   236d8:	d0e0      	beq.n	2369c <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   236da:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   236de:	a901      	add	r1, sp, #4
   236e0:	4630      	mov	r0, r6
   236e2:	f7ff fccf 	bl	23084 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   236e6:	4602      	mov	r2, r0
   236e8:	2800      	cmp	r0, #0
   236ea:	d0c3      	beq.n	23674 <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   236ec:	7903      	ldrb	r3, [r0, #4]
   236ee:	7941      	ldrb	r1, [r0, #5]
   236f0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   236f4:	7980      	ldrb	r0, [r0, #6]
   236f6:	79d3      	ldrb	r3, [r2, #7]
   236f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   236fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   23700:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   23704:	440b      	add	r3, r1
   23706:	3b01      	subs	r3, #1
   23708:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   2370c:	2b00      	cmp	r3, #0
   2370e:	ddc1      	ble.n	23694 <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   23710:	7b53      	ldrb	r3, [r2, #13]
   23712:	f013 0f01 	tst.w	r3, #1
   23716:	d0cf      	beq.n	236b8 <net_tcp_ack_received+0x64>
   23718:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2371c:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   23720:	2b07      	cmp	r3, #7
   23722:	d0c5      	beq.n	236b0 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   23724:	2b0a      	cmp	r3, #10
   23726:	d1c7      	bne.n	236b8 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23728:	2109      	movs	r1, #9
   2372a:	4628      	mov	r0, r5
   2372c:	f7ff fabb 	bl	22ca6 <net_tcp_change_state>
   23730:	e7c2      	b.n	236b8 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   23732:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   23736:	e7c6      	b.n	236c6 <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   23738:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   2373c:	f7ff f8db 	bl	228f6 <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   23740:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   23744:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   23748:	f412 7f00 	tst.w	r2, #512	; 0x200
   2374c:	d0ad      	beq.n	236aa <net_tcp_ack_received+0x56>
	return list->head;
   2374e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   23752:	b108      	cbz	r0, 23758 <net_tcp_ack_received+0x104>
   23754:	3834      	subs	r0, #52	; 0x34
   23756:	e013      	b.n	23780 <net_tcp_ack_received+0x12c>
   23758:	2000      	movs	r0, #0
   2375a:	e011      	b.n	23780 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   2375c:	f7f9 fa4e 	bl	1cbfc <net_pkt_ref>
	pkt->sent_or_eof = sent;
   23760:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23764:	f36f 0300 	bfc	r3, #0, #1
   23768:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2376c:	b140      	cbz	r0, 23780 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2376e:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   23772:	d014      	beq.n	2379e <net_tcp_ack_received+0x14a>
	return node->next;
   23774:	6b42      	ldr	r2, [r0, #52]	; 0x34
   23776:	b1a2      	cbz	r2, 237a2 <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23778:	b103      	cbz	r3, 2377c <net_tcp_ack_received+0x128>
	return node->next;
   2377a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2377c:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   23780:	b188      	cbz	r0, 237a6 <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   23782:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   23786:	f013 0f01 	tst.w	r3, #1
   2378a:	d0ef      	beq.n	2376c <net_tcp_ack_received+0x118>
	return pkt->family;
   2378c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   23790:	2b0a      	cmp	r3, #10
   23792:	d1e3      	bne.n	2375c <net_tcp_ack_received+0x108>
   23794:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23798:	2b02      	cmp	r3, #2
   2379a:	d1df      	bne.n	2375c <net_tcp_ack_received+0x108>
   2379c:	e7e0      	b.n	23760 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2379e:	461a      	mov	r2, r3
   237a0:	e7e9      	b.n	23776 <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   237a2:	2000      	movs	r0, #0
   237a4:	e7ec      	b.n	23780 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   237a6:	4648      	mov	r0, r9
   237a8:	f7ff ff1a 	bl	235e0 <net_tcp_send_data>
}
   237ac:	e77d      	b.n	236aa <net_tcp_ack_received+0x56>
   237ae:	bf00      	nop
   237b0:	200029f0 	.word	0x200029f0

000237b4 <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   237b4:	6842      	ldr	r2, [r0, #4]
   237b6:	4b08      	ldr	r3, [pc, #32]	; (237d8 <iface2str+0x24>)
   237b8:	429a      	cmp	r2, r3
   237ba:	d004      	beq.n	237c6 <iface2str+0x12>
	if (extra) {
   237bc:	b151      	cbz	r1, 237d4 <iface2str+0x20>
		*extra = "==============";
   237be:	4b07      	ldr	r3, [pc, #28]	; (237dc <iface2str+0x28>)
   237c0:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   237c2:	4807      	ldr	r0, [pc, #28]	; (237e0 <iface2str+0x2c>)
   237c4:	4770      	bx	lr
		if (extra) {
   237c6:	b119      	cbz	r1, 237d0 <iface2str+0x1c>
			*extra = "=========";
   237c8:	4b06      	ldr	r3, [pc, #24]	; (237e4 <iface2str+0x30>)
   237ca:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   237cc:	4806      	ldr	r0, [pc, #24]	; (237e8 <iface2str+0x34>)
   237ce:	4770      	bx	lr
   237d0:	4805      	ldr	r0, [pc, #20]	; (237e8 <iface2str+0x34>)
   237d2:	4770      	bx	lr
	return "<unknown type>";
   237d4:	4802      	ldr	r0, [pc, #8]	; (237e0 <iface2str+0x2c>)
}
   237d6:	4770      	bx	lr
   237d8:	0002ee14 	.word	0x0002ee14
   237dc:	0002fd40 	.word	0x0002fd40
   237e0:	0002fd24 	.word	0x0002fd24
   237e4:	0002fd34 	.word	0x0002fd34
   237e8:	0002fd18 	.word	0x0002fd18

000237ec <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   237ec:	2300      	movs	r3, #0
   237ee:	2b05      	cmp	r3, #5
   237f0:	dc18      	bgt.n	23824 <slab_pool_found_already+0x38>
{
   237f2:	b410      	push	{r4}
   237f4:	e008      	b.n	23808 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   237f6:	f103 0408 	add.w	r4, r3, #8
   237fa:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   237fe:	4294      	cmp	r4, r2
   23800:	d00e      	beq.n	23820 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   23802:	3301      	adds	r3, #1
   23804:	2b05      	cmp	r3, #5
   23806:	dc08      	bgt.n	2381a <slab_pool_found_already+0x2e>
		if (slab) {
   23808:	2900      	cmp	r1, #0
   2380a:	d0f4      	beq.n	237f6 <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   2380c:	1c9c      	adds	r4, r3, #2
   2380e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   23812:	42a1      	cmp	r1, r4
   23814:	d1f5      	bne.n	23802 <slab_pool_found_already+0x16>
				return true;
   23816:	2001      	movs	r0, #1
   23818:	e000      	b.n	2381c <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   2381a:	2000      	movs	r0, #0
}
   2381c:	bc10      	pop	{r4}
   2381e:	4770      	bx	lr
				return true;
   23820:	2001      	movs	r0, #1
   23822:	e7fb      	b.n	2381c <slab_pool_found_already+0x30>
	return false;
   23824:	2000      	movs	r0, #0
}
   23826:	4770      	bx	lr

00023828 <net_shell_cmd_allocs>:
{
   23828:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   2382a:	4802      	ldr	r0, [pc, #8]	; (23834 <net_shell_cmd_allocs+0xc>)
   2382c:	f7df fba8 	bl	2f80 <printk>
}
   23830:	2000      	movs	r0, #0
   23832:	bd08      	pop	{r3, pc}
   23834:	0003001c 	.word	0x0003001c

00023838 <net_shell_cmd_app>:
{
   23838:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   2383a:	4802      	ldr	r0, [pc, #8]	; (23844 <net_shell_cmd_app+0xc>)
   2383c:	f7df fba0 	bl	2f80 <printk>
}
   23840:	2000      	movs	r0, #0
   23842:	bd08      	pop	{r3, pc}
   23844:	00030054 	.word	0x00030054

00023848 <net_shell_cmd_arp>:
{
   23848:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   2384a:	4802      	ldr	r0, [pc, #8]	; (23854 <net_shell_cmd_arp+0xc>)
   2384c:	f7df fb98 	bl	2f80 <printk>
}
   23850:	2000      	movs	r0, #0
   23852:	bd08      	pop	{r3, pc}
   23854:	000300d8 	.word	0x000300d8

00023858 <net_shell_cmd_dns>:
{
   23858:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   2385a:	4802      	ldr	r0, [pc, #8]	; (23864 <net_shell_cmd_dns+0xc>)
   2385c:	f7df fb90 	bl	2f80 <printk>
}
   23860:	2000      	movs	r0, #0
   23862:	bd08      	pop	{r3, pc}
   23864:	000301d8 	.word	0x000301d8

00023868 <net_shell_cmd_http>:
{
   23868:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   2386a:	4802      	ldr	r0, [pc, #8]	; (23874 <net_shell_cmd_http+0xc>)
   2386c:	f7df fb88 	bl	2f80 <printk>
}
   23870:	2000      	movs	r0, #0
   23872:	bd08      	pop	{r3, pc}
   23874:	000301f8 	.word	0x000301f8

00023878 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   23878:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   2387c:	f013 0f01 	tst.w	r3, #1
   23880:	d032      	beq.n	238e8 <context_info+0x70>
{
   23882:	b570      	push	{r4, r5, r6, lr}
   23884:	460d      	mov	r5, r1
   23886:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   23888:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2388a:	b19b      	cbz	r3, 238b4 <context_info+0x3c>
		slab = context->tx_slab();
   2388c:	4798      	blx	r3
   2388e:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   23890:	2200      	movs	r2, #0
   23892:	4601      	mov	r1, r0
   23894:	4628      	mov	r0, r5
   23896:	f7ff ffa9 	bl	237ec <slab_pool_found_already>
   2389a:	b100      	cbz	r0, 2389e <context_info+0x26>
   2389c:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   2389e:	68b2      	ldr	r2, [r6, #8]
   238a0:	4631      	mov	r1, r6
   238a2:	4812      	ldr	r0, [pc, #72]	; (238ec <context_info+0x74>)
   238a4:	f7df fb6c 	bl	2f80 <printk>
#endif
		info->are_external_pools = true;
   238a8:	2301      	movs	r3, #1
   238aa:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   238ac:	682b      	ldr	r3, [r5, #0]
   238ae:	3302      	adds	r3, #2
   238b0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   238b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   238b6:	b19b      	cbz	r3, 238e0 <context_info+0x68>
		pool = context->data_pool();
   238b8:	4798      	blx	r3
   238ba:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   238bc:	4602      	mov	r2, r0
   238be:	2100      	movs	r1, #0
   238c0:	4628      	mov	r0, r5
   238c2:	f7ff ff93 	bl	237ec <slab_pool_found_already>
   238c6:	2800      	cmp	r0, #0
   238c8:	d1e8      	bne.n	2389c <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   238ca:	8a22      	ldrh	r2, [r4, #16]
   238cc:	4621      	mov	r1, r4
   238ce:	4808      	ldr	r0, [pc, #32]	; (238f0 <context_info+0x78>)
   238d0:	f7df fb56 	bl	2f80 <printk>
#endif
		info->are_external_pools = true;
   238d4:	2301      	movs	r3, #1
   238d6:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   238d8:	682b      	ldr	r3, [r5, #0]
   238da:	3308      	adds	r3, #8
   238dc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   238e0:	682b      	ldr	r3, [r5, #0]
   238e2:	3301      	adds	r3, #1
   238e4:	602b      	str	r3, [r5, #0]
   238e6:	e7d9      	b.n	2389c <context_info+0x24>
   238e8:	4770      	bx	lr
   238ea:	bf00      	nop
   238ec:	0002fcdc 	.word	0x0002fcdc
   238f0:	0002fce8 	.word	0x0002fce8

000238f4 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   238f4:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   238f6:	4802      	ldr	r0, [pc, #8]	; (23900 <net_shell_cmd_rpl+0xc>)
   238f8:	f7df fb42 	bl	2f80 <printk>
#endif

	return 0;
}
   238fc:	2000      	movs	r0, #0
   238fe:	bd08      	pop	{r3, pc}
   23900:	00030408 	.word	0x00030408

00023904 <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   23904:	b530      	push	{r4, r5, lr}
   23906:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   23908:	4d3f      	ldr	r5, [pc, #252]	; (23a08 <net_shell_cmd_stacks+0x104>)
   2390a:	e011      	b.n	23930 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   2390c:	1a81      	subs	r1, r0, r2
   2390e:	2364      	movs	r3, #100	; 0x64
   23910:	fb03 f301 	mul.w	r3, r3, r1
   23914:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   23918:	9304      	str	r3, [sp, #16]
   2391a:	9003      	str	r0, [sp, #12]
   2391c:	9102      	str	r1, [sp, #8]
   2391e:	9201      	str	r2, [sp, #4]
   23920:	9000      	str	r0, [sp, #0]
   23922:	68eb      	ldr	r3, [r5, #12]
   23924:	68aa      	ldr	r2, [r5, #8]
   23926:	6869      	ldr	r1, [r5, #4]
   23928:	4838      	ldr	r0, [pc, #224]	; (23a0c <net_shell_cmd_stacks+0x108>)
   2392a:	f7df fb29 	bl	2f80 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   2392e:	3514      	adds	r5, #20
   23930:	4b37      	ldr	r3, [pc, #220]	; (23a10 <net_shell_cmd_stacks+0x10c>)
   23932:	429d      	cmp	r5, r3
   23934:	d00b      	beq.n	2394e <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   23936:	682c      	ldr	r4, [r5, #0]
   23938:	6928      	ldr	r0, [r5, #16]
   2393a:	2300      	movs	r3, #0
	size_t unused = 0;
   2393c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2393e:	4298      	cmp	r0, r3
   23940:	d9e4      	bls.n	2390c <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   23942:	5ce1      	ldrb	r1, [r4, r3]
   23944:	29aa      	cmp	r1, #170	; 0xaa
   23946:	d1e1      	bne.n	2390c <net_shell_cmd_stacks+0x8>
			unused++;
   23948:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2394a:	3301      	adds	r3, #1
   2394c:	e7f7      	b.n	2393e <net_shell_cmd_stacks+0x3a>
   2394e:	2300      	movs	r3, #0
   23950:	461a      	mov	r2, r3
   23952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23956:	d206      	bcs.n	23966 <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   23958:	492e      	ldr	r1, [pc, #184]	; (23a14 <net_shell_cmd_stacks+0x110>)
   2395a:	5cc9      	ldrb	r1, [r1, r3]
   2395c:	29aa      	cmp	r1, #170	; 0xaa
   2395e:	d102      	bne.n	23966 <net_shell_cmd_stacks+0x62>
			unused++;
   23960:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23962:	3301      	adds	r3, #1
   23964:	e7f5      	b.n	23952 <net_shell_cmd_stacks+0x4e>
   23966:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   2396a:	2364      	movs	r3, #100	; 0x64
   2396c:	fb03 f301 	mul.w	r3, r3, r1
   23970:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   23972:	9304      	str	r3, [sp, #16]
   23974:	f44f 6300 	mov.w	r3, #2048	; 0x800
   23978:	9303      	str	r3, [sp, #12]
   2397a:	9102      	str	r1, [sp, #8]
   2397c:	9201      	str	r2, [sp, #4]
   2397e:	9300      	str	r3, [sp, #0]
   23980:	4a25      	ldr	r2, [pc, #148]	; (23a18 <net_shell_cmd_stacks+0x114>)
   23982:	4926      	ldr	r1, [pc, #152]	; (23a1c <net_shell_cmd_stacks+0x118>)
   23984:	4826      	ldr	r0, [pc, #152]	; (23a20 <net_shell_cmd_stacks+0x11c>)
   23986:	f7df fafb 	bl	2f80 <printk>
   2398a:	2300      	movs	r3, #0
	size_t unused = 0;
   2398c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23992:	d206      	bcs.n	239a2 <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   23994:	4923      	ldr	r1, [pc, #140]	; (23a24 <net_shell_cmd_stacks+0x120>)
   23996:	5cc9      	ldrb	r1, [r1, r3]
   23998:	29aa      	cmp	r1, #170	; 0xaa
   2399a:	d102      	bne.n	239a2 <net_shell_cmd_stacks+0x9e>
			unused++;
   2399c:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2399e:	3301      	adds	r3, #1
   239a0:	e7f5      	b.n	2398e <net_shell_cmd_stacks+0x8a>
   239a2:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   239a6:	2364      	movs	r3, #100	; 0x64
   239a8:	fb03 f301 	mul.w	r3, r3, r1
   239ac:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   239ae:	9304      	str	r3, [sp, #16]
   239b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   239b4:	9303      	str	r3, [sp, #12]
   239b6:	9102      	str	r1, [sp, #8]
   239b8:	9201      	str	r2, [sp, #4]
   239ba:	9300      	str	r3, [sp, #0]
   239bc:	4a1a      	ldr	r2, [pc, #104]	; (23a28 <net_shell_cmd_stacks+0x124>)
   239be:	491b      	ldr	r1, [pc, #108]	; (23a2c <net_shell_cmd_stacks+0x128>)
   239c0:	4817      	ldr	r0, [pc, #92]	; (23a20 <net_shell_cmd_stacks+0x11c>)
   239c2:	f7df fadd 	bl	2f80 <printk>
   239c6:	2300      	movs	r3, #0
	size_t unused = 0;
   239c8:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   239ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   239ce:	d206      	bcs.n	239de <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   239d0:	4917      	ldr	r1, [pc, #92]	; (23a30 <net_shell_cmd_stacks+0x12c>)
   239d2:	5cc9      	ldrb	r1, [r1, r3]
   239d4:	29aa      	cmp	r1, #170	; 0xaa
   239d6:	d102      	bne.n	239de <net_shell_cmd_stacks+0xda>
			unused++;
   239d8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   239da:	3301      	adds	r3, #1
   239dc:	e7f5      	b.n	239ca <net_shell_cmd_stacks+0xc6>
   239de:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   239e2:	2364      	movs	r3, #100	; 0x64
   239e4:	fb03 f301 	mul.w	r3, r3, r1
   239e8:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   239ea:	9304      	str	r3, [sp, #16]
   239ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   239f0:	9303      	str	r3, [sp, #12]
   239f2:	9102      	str	r1, [sp, #8]
   239f4:	9201      	str	r2, [sp, #4]
   239f6:	9300      	str	r3, [sp, #0]
   239f8:	4a0e      	ldr	r2, [pc, #56]	; (23a34 <net_shell_cmd_stacks+0x130>)
   239fa:	490f      	ldr	r1, [pc, #60]	; (23a38 <net_shell_cmd_stacks+0x134>)
   239fc:	4808      	ldr	r0, [pc, #32]	; (23a20 <net_shell_cmd_stacks+0x11c>)
   239fe:	f7df fabf 	bl	2f80 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   23a02:	2000      	movs	r0, #0
   23a04:	b007      	add	sp, #28
   23a06:	bd30      	pop	{r4, r5, pc}
   23a08:	2000d414 	.word	0x2000d414
   23a0c:	0003043c 	.word	0x0003043c
   23a10:	2000d450 	.word	0x2000d450
   23a14:	2000a2c0 	.word	0x2000a2c0
   23a18:	00030480 	.word	0x00030480
   23a1c:	0003048c 	.word	0x0003048c
   23a20:	00030494 	.word	0x00030494
   23a24:	2000ac00 	.word	0x2000ac00
   23a28:	000304d4 	.word	0x000304d4
   23a2c:	000304e8 	.word	0x000304e8
   23a30:	2000b400 	.word	0x2000b400
   23a34:	000304ec 	.word	0x000304ec
   23a38:	00030500 	.word	0x00030500

00023a3c <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   23a3c:	b510      	push	{r4, lr}
   23a3e:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   23a40:	4c34      	ldr	r4, [pc, #208]	; (23b14 <net_shell_cmd_stats+0xd8>)
   23a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23a44:	9300      	str	r3, [sp, #0]
   23a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23a4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23a4c:	4832      	ldr	r0, [pc, #200]	; (23b18 <net_shell_cmd_stats+0xdc>)
   23a4e:	f7df fa97 	bl	2f80 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   23a52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   23a56:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   23a5a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   23a5e:	482f      	ldr	r0, [pc, #188]	; (23b1c <net_shell_cmd_stats+0xe0>)
   23a60:	f7df fa8e 	bl	2f80 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   23a64:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   23a68:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   23a6c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   23a70:	482b      	ldr	r0, [pc, #172]	; (23b20 <net_shell_cmd_stats+0xe4>)
   23a72:	f7df fa85 	bl	2f80 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   23a76:	6963      	ldr	r3, [r4, #20]
   23a78:	6922      	ldr	r2, [r4, #16]
   23a7a:	68e1      	ldr	r1, [r4, #12]
   23a7c:	4829      	ldr	r0, [pc, #164]	; (23b24 <net_shell_cmd_stats+0xe8>)
   23a7e:	f7df fa7f 	bl	2f80 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   23a82:	6a23      	ldr	r3, [r4, #32]
   23a84:	69e2      	ldr	r2, [r4, #28]
   23a86:	69a1      	ldr	r1, [r4, #24]
   23a88:	4827      	ldr	r0, [pc, #156]	; (23b28 <net_shell_cmd_stats+0xec>)
   23a8a:	f7df fa79 	bl	2f80 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   23a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23a90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23a94:	4825      	ldr	r0, [pc, #148]	; (23b2c <net_shell_cmd_stats+0xf0>)
   23a96:	f7df fa73 	bl	2f80 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   23a9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23a9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   23a9e:	4824      	ldr	r0, [pc, #144]	; (23b30 <net_shell_cmd_stats+0xf4>)
   23aa0:	f7df fa6e 	bl	2f80 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   23aa4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   23aa6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   23aaa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   23aae:	4821      	ldr	r0, [pc, #132]	; (23b34 <net_shell_cmd_stats+0xf8>)
   23ab0:	f7df fa66 	bl	2f80 <printk>
	printk("UDP chkerr     %d\n",
   23ab4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   23ab8:	481f      	ldr	r0, [pc, #124]	; (23b38 <net_shell_cmd_stats+0xfc>)
   23aba:	f7df fa61 	bl	2f80 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   23abe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23ac0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   23ac2:	481e      	ldr	r0, [pc, #120]	; (23b3c <net_shell_cmd_stats+0x100>)
   23ac4:	f7df fa5c 	bl	2f80 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   23ac8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   23aca:	6da2      	ldr	r2, [r4, #88]	; 0x58
   23acc:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23ace:	481c      	ldr	r0, [pc, #112]	; (23b40 <net_shell_cmd_stats+0x104>)
   23ad0:	f7df fa56 	bl	2f80 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   23ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23ad6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23ad8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   23ada:	481a      	ldr	r0, [pc, #104]	; (23b44 <net_shell_cmd_stats+0x108>)
   23adc:	f7df fa50 	bl	2f80 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   23ae0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   23ae2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   23ae4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23ae6:	4818      	ldr	r0, [pc, #96]	; (23b48 <net_shell_cmd_stats+0x10c>)
   23ae8:	f7df fa4a 	bl	2f80 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   23aec:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   23aee:	6f61      	ldr	r1, [r4, #116]	; 0x74
   23af0:	4816      	ldr	r0, [pc, #88]	; (23b4c <net_shell_cmd_stats+0x110>)
   23af2:	f7df fa45 	bl	2f80 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   23af6:	68a1      	ldr	r1, [r4, #8]
   23af8:	4815      	ldr	r0, [pc, #84]	; (23b50 <net_shell_cmd_stats+0x114>)
   23afa:	f7df fa41 	bl	2f80 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   23afe:	6861      	ldr	r1, [r4, #4]
   23b00:	4814      	ldr	r0, [pc, #80]	; (23b54 <net_shell_cmd_stats+0x118>)
   23b02:	f7df fa3d 	bl	2f80 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   23b06:	6821      	ldr	r1, [r4, #0]
   23b08:	4813      	ldr	r0, [pc, #76]	; (23b58 <net_shell_cmd_stats+0x11c>)
   23b0a:	f7df fa39 	bl	2f80 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   23b0e:	2000      	movs	r0, #0
   23b10:	b002      	add	sp, #8
   23b12:	bd10      	pop	{r4, pc}
   23b14:	200029f0 	.word	0x200029f0
   23b18:	00030508 	.word	0x00030508
   23b1c:	00030538 	.word	0x00030538
   23b20:	0003055c 	.word	0x0003055c
   23b24:	00030580 	.word	0x00030580
   23b28:	000305ac 	.word	0x000305ac
   23b2c:	000305d4 	.word	0x000305d4
   23b30:	000305f8 	.word	0x000305f8
   23b34:	00030618 	.word	0x00030618
   23b38:	0003063c 	.word	0x0003063c
   23b3c:	00030650 	.word	0x00030650
   23b40:	0003066c 	.word	0x0003066c
   23b44:	00030690 	.word	0x00030690
   23b48:	000306b8 	.word	0x000306b8
   23b4c:	000306e0 	.word	0x000306e0
   23b50:	00030700 	.word	0x00030700
   23b54:	00030714 	.word	0x00030714
   23b58:	00030728 	.word	0x00030728

00023b5c <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   23b5c:	b508      	push	{r3, lr}
	printk("Message sent\n");
   23b5e:	4802      	ldr	r0, [pc, #8]	; (23b68 <tcp_sent_cb+0xc>)
   23b60:	f7df fa0e 	bl	2f80 <printk>
   23b64:	bd08      	pop	{r3, pc}
   23b66:	bf00      	nop
   23b68:	000309e8 	.word	0x000309e8

00023b6c <net_shell_cmd_conn>:
{
   23b6c:	b510      	push	{r4, lr}
   23b6e:	b082      	sub	sp, #8
	int count = 0;
   23b70:	ac02      	add	r4, sp, #8
   23b72:	2300      	movs	r3, #0
   23b74:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   23b78:	4810      	ldr	r0, [pc, #64]	; (23bbc <net_shell_cmd_conn+0x50>)
   23b7a:	f7df fa01 	bl	2f80 <printk>
	net_context_foreach(context_cb, &count);
   23b7e:	4621      	mov	r1, r4
   23b80:	480f      	ldr	r0, [pc, #60]	; (23bc0 <net_shell_cmd_conn+0x54>)
   23b82:	f7f8 ff03 	bl	1c98c <net_context_foreach>
	if (count == 0) {
   23b86:	9b01      	ldr	r3, [sp, #4]
   23b88:	b17b      	cbz	r3, 23baa <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   23b8a:	490e      	ldr	r1, [pc, #56]	; (23bc4 <net_shell_cmd_conn+0x58>)
   23b8c:	480e      	ldr	r0, [pc, #56]	; (23bc8 <net_shell_cmd_conn+0x5c>)
   23b8e:	f7df f9f7 	bl	2f80 <printk>
	count = 0;
   23b92:	a902      	add	r1, sp, #8
   23b94:	2300      	movs	r3, #0
   23b96:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   23b9a:	480c      	ldr	r0, [pc, #48]	; (23bcc <net_shell_cmd_conn+0x60>)
   23b9c:	f7ff fa48 	bl	23030 <net_tcp_foreach>
	if (count == 0) {
   23ba0:	9b01      	ldr	r3, [sp, #4]
   23ba2:	b133      	cbz	r3, 23bb2 <net_shell_cmd_conn+0x46>
}
   23ba4:	2000      	movs	r0, #0
   23ba6:	b002      	add	sp, #8
   23ba8:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   23baa:	4809      	ldr	r0, [pc, #36]	; (23bd0 <net_shell_cmd_conn+0x64>)
   23bac:	f7df f9e8 	bl	2f80 <printk>
   23bb0:	e7eb      	b.n	23b8a <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   23bb2:	4808      	ldr	r0, [pc, #32]	; (23bd4 <net_shell_cmd_conn+0x68>)
   23bb4:	f7df f9e4 	bl	2f80 <printk>
   23bb8:	e7f4      	b.n	23ba4 <net_shell_cmd_conn+0x38>
   23bba:	bf00      	nop
   23bbc:	00030134 	.word	0x00030134
   23bc0:	00023d49 	.word	0x00023d49
   23bc4:	0002f448 	.word	0x0002f448
   23bc8:	00030184 	.word	0x00030184
   23bcc:	00023bd9 	.word	0x00023bd9
   23bd0:	00030174 	.word	0x00030174
   23bd4:	000301c4 	.word	0x000301c4

00023bd8 <tcp_cb>:
{
   23bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23bdc:	b084      	sub	sp, #16
   23bde:	4604      	mov	r4, r0
   23be0:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   23be2:	f7fe ffe4 	bl	22bae <net_tcp_get_recv_mss>
   23be6:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   23be8:	6823      	ldr	r3, [r4, #0]
   23bea:	895a      	ldrh	r2, [r3, #10]
   23bec:	0215      	lsls	r5, r2, #8
   23bee:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   23bf2:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   23bf4:	8adb      	ldrh	r3, [r3, #22]
   23bf6:	021e      	lsls	r6, r3, #8
   23bf8:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   23bfc:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   23bfe:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   23c02:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   23c06:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   23c0a:	f3c0 3043 	ubfx	r0, r0, #13, #4
   23c0e:	f7ff f845 	bl	22c9c <net_tcp_state_str>
   23c12:	9003      	str	r0, [sp, #12]
   23c14:	f8cd 8008 	str.w	r8, [sp, #8]
   23c18:	f8cd a004 	str.w	sl, [sp, #4]
   23c1c:	f8cd 9000 	str.w	r9, [sp]
   23c20:	4633      	mov	r3, r6
   23c22:	462a      	mov	r2, r5
   23c24:	4621      	mov	r1, r4
   23c26:	4804      	ldr	r0, [pc, #16]	; (23c38 <tcp_cb+0x60>)
   23c28:	f7df f9aa 	bl	2f80 <printk>
	(*count)++;
   23c2c:	683b      	ldr	r3, [r7, #0]
   23c2e:	3301      	adds	r3, #1
   23c30:	603b      	str	r3, [r7, #0]
}
   23c32:	b004      	add	sp, #16
   23c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c38:	00030944 	.word	0x00030944

00023c3c <get_addresses>:
{
   23c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c40:	b083      	sub	sp, #12
   23c42:	460d      	mov	r5, r1
   23c44:	4616      	mov	r6, r2
   23c46:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   23c48:	8903      	ldrh	r3, [r0, #8]
   23c4a:	2b0a      	cmp	r3, #10
   23c4c:	d008      	beq.n	23c60 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   23c4e:	b393      	cbz	r3, 23cb6 <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   23c50:	4a1c      	ldr	r2, [pc, #112]	; (23cc4 <get_addresses+0x88>)
   23c52:	4631      	mov	r1, r6
   23c54:	4628      	mov	r0, r5
   23c56:	f7df f9a1 	bl	2f9c <snprintk>
}
   23c5a:	b003      	add	sp, #12
   23c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c60:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   23c62:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23ccc <get_addresses+0x90>
   23c66:	2328      	movs	r3, #40	; 0x28
   23c68:	464a      	mov	r2, r9
   23c6a:	68c1      	ldr	r1, [r0, #12]
   23c6c:	200a      	movs	r0, #10
   23c6e:	f7f9 fc1d 	bl	1d4ac <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   23c72:	8962      	ldrh	r2, [r4, #10]
   23c74:	0213      	lsls	r3, r2, #8
   23c76:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23c7a:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   23c7c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 23cd0 <get_addresses+0x94>
   23c80:	9300      	str	r3, [sp, #0]
   23c82:	4603      	mov	r3, r0
   23c84:	4642      	mov	r2, r8
   23c86:	4631      	mov	r1, r6
   23c88:	4628      	mov	r0, r5
   23c8a:	f7df f987 	bl	2f9c <snprintk>
   23c8e:	2328      	movs	r3, #40	; 0x28
   23c90:	464a      	mov	r2, r9
   23c92:	f104 0118 	add.w	r1, r4, #24
   23c96:	200a      	movs	r0, #10
   23c98:	f7f9 fc08 	bl	1d4ac <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   23c9c:	8ae2      	ldrh	r2, [r4, #22]
   23c9e:	0213      	lsls	r3, r2, #8
   23ca0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23ca4:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   23ca6:	9300      	str	r3, [sp, #0]
   23ca8:	4603      	mov	r3, r0
   23caa:	4642      	mov	r2, r8
   23cac:	990a      	ldr	r1, [sp, #40]	; 0x28
   23cae:	4638      	mov	r0, r7
   23cb0:	f7df f974 	bl	2f9c <snprintk>
   23cb4:	e7d1      	b.n	23c5a <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   23cb6:	4a04      	ldr	r2, [pc, #16]	; (23cc8 <get_addresses+0x8c>)
   23cb8:	4631      	mov	r1, r6
   23cba:	4628      	mov	r0, r5
   23cbc:	f7df f96e 	bl	2f9c <snprintk>
   23cc0:	e7cb      	b.n	23c5a <get_addresses+0x1e>
   23cc2:	bf00      	nop
   23cc4:	0002fd0c 	.word	0x0002fd0c
   23cc8:	0002fd00 	.word	0x0002fd00
   23ccc:	200023c8 	.word	0x200023c8
   23cd0:	0002fcf8 	.word	0x0002fcf8

00023cd4 <print_connect_info>:
{
   23cd4:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   23cd6:	2802      	cmp	r0, #2
   23cd8:	d008      	beq.n	23cec <print_connect_info+0x18>
   23cda:	460d      	mov	r5, r1
   23cdc:	4614      	mov	r4, r2
   23cde:	280a      	cmp	r0, #10
   23ce0:	d008      	beq.n	23cf4 <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   23ce2:	4601      	mov	r1, r0
   23ce4:	4813      	ldr	r0, [pc, #76]	; (23d34 <print_connect_info+0x60>)
   23ce6:	f7df f94b 	bl	2f80 <printk>
   23cea:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   23cec:	4812      	ldr	r0, [pc, #72]	; (23d38 <print_connect_info+0x64>)
   23cee:	f7df f947 	bl	2f80 <printk>
		break;
   23cf2:	bd70      	pop	{r4, r5, r6, pc}
   23cf4:	4e11      	ldr	r6, [pc, #68]	; (23d3c <print_connect_info+0x68>)
   23cf6:	2328      	movs	r3, #40	; 0x28
   23cf8:	4632      	mov	r2, r6
   23cfa:	3104      	adds	r1, #4
   23cfc:	200a      	movs	r0, #10
   23cfe:	f7f9 fbd5 	bl	1d4ac <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   23d02:	886b      	ldrh	r3, [r5, #2]
   23d04:	021a      	lsls	r2, r3, #8
   23d06:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   23d0a:	b292      	uxth	r2, r2
   23d0c:	4601      	mov	r1, r0
   23d0e:	480c      	ldr	r0, [pc, #48]	; (23d40 <print_connect_info+0x6c>)
   23d10:	f7df f936 	bl	2f80 <printk>
   23d14:	2328      	movs	r3, #40	; 0x28
   23d16:	4632      	mov	r2, r6
   23d18:	1d21      	adds	r1, r4, #4
   23d1a:	200a      	movs	r0, #10
   23d1c:	f7f9 fbc6 	bl	1d4ac <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   23d20:	8863      	ldrh	r3, [r4, #2]
   23d22:	021a      	lsls	r2, r3, #8
   23d24:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   23d28:	b292      	uxth	r2, r2
   23d2a:	4601      	mov	r1, r0
   23d2c:	4805      	ldr	r0, [pc, #20]	; (23d44 <print_connect_info+0x70>)
   23d2e:	f7df f927 	bl	2f80 <printk>
		break;
   23d32:	bd70      	pop	{r4, r5, r6, pc}
   23d34:	000308dc 	.word	0x000308dc
   23d38:	000308a0 	.word	0x000308a0
   23d3c:	200023c8 	.word	0x200023c8
   23d40:	000308b4 	.word	0x000308b4
   23d44:	000308d0 	.word	0x000308d0

00023d48 <context_cb>:
{
   23d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   23d4a:	b09f      	sub	sp, #124	; 0x7c
   23d4c:	4604      	mov	r4, r0
   23d4e:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   23d50:	2100      	movs	r1, #0
   23d52:	9106      	str	r1, [sp, #24]
   23d54:	222b      	movs	r2, #43	; 0x2b
   23d56:	a807      	add	r0, sp, #28
   23d58:	f006 feb0 	bl	2aabc <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   23d5c:	222f      	movs	r2, #47	; 0x2f
   23d5e:	9200      	str	r2, [sp, #0]
   23d60:	ab06      	add	r3, sp, #24
   23d62:	a912      	add	r1, sp, #72	; 0x48
   23d64:	4620      	mov	r0, r4
   23d66:	f7ff ff69 	bl	23c3c <get_addresses>
	       (*count) + 1, context,
   23d6a:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23d6c:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   23d6e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   23d72:	f7f7 fd0b 	bl	1b78c <net_if_get_by_index>
   23d76:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   23d78:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   23d7c:	f012 0f10 	tst.w	r2, #16
   23d80:	d022      	beq.n	23dc8 <context_cb+0x80>
		return AF_INET6;
   23d82:	210a      	movs	r1, #10
   23d84:	290a      	cmp	r1, #10
   23d86:	d021      	beq.n	23dcc <context_cb+0x84>
   23d88:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   23d8a:	f012 0f20 	tst.w	r2, #32
   23d8e:	d01f      	beq.n	23dd0 <context_cb+0x88>
		return SOCK_STREAM;
   23d90:	2001      	movs	r0, #1
   23d92:	2802      	cmp	r0, #2
   23d94:	d01e      	beq.n	23dd4 <context_cb+0x8c>
   23d96:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   23d98:	f012 0f40 	tst.w	r2, #64	; 0x40
   23d9c:	d01c      	beq.n	23dd8 <context_cb+0x90>
		return IPPROTO_TCP;
   23d9e:	2206      	movs	r2, #6
   23da0:	2a11      	cmp	r2, #17
   23da2:	d01b      	beq.n	23ddc <context_cb+0x94>
   23da4:	2754      	movs	r7, #84	; 0x54
   23da6:	aa06      	add	r2, sp, #24
   23da8:	9204      	str	r2, [sp, #16]
   23daa:	aa12      	add	r2, sp, #72	; 0x48
   23dac:	9203      	str	r2, [sp, #12]
   23dae:	9702      	str	r7, [sp, #8]
   23db0:	9001      	str	r0, [sp, #4]
   23db2:	9100      	str	r1, [sp, #0]
   23db4:	4622      	mov	r2, r4
   23db6:	4631      	mov	r1, r6
   23db8:	4809      	ldr	r0, [pc, #36]	; (23de0 <context_cb+0x98>)
   23dba:	f7df f8e1 	bl	2f80 <printk>
	(*count)++;
   23dbe:	682b      	ldr	r3, [r5, #0]
   23dc0:	3301      	adds	r3, #1
   23dc2:	602b      	str	r3, [r5, #0]
}
   23dc4:	b01f      	add	sp, #124	; 0x7c
   23dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   23dc8:	2102      	movs	r1, #2
   23dca:	e7db      	b.n	23d84 <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23dcc:	2136      	movs	r1, #54	; 0x36
   23dce:	e7dc      	b.n	23d8a <context_cb+0x42>
	return SOCK_DGRAM;
   23dd0:	2002      	movs	r0, #2
   23dd2:	e7de      	b.n	23d92 <context_cb+0x4a>
   23dd4:	2044      	movs	r0, #68	; 0x44
   23dd6:	e7df      	b.n	23d98 <context_cb+0x50>
	return IPPROTO_UDP;
   23dd8:	2211      	movs	r2, #17
   23dda:	e7e1      	b.n	23da0 <context_cb+0x58>
   23ddc:	2755      	movs	r7, #85	; 0x55
   23dde:	e7e2      	b.n	23da6 <context_cb+0x5e>
   23de0:	0002fcb8 	.word	0x0002fcb8

00023de4 <net_shell_cmd_iface>:
{
   23de4:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   23de6:	2100      	movs	r1, #0
   23de8:	4802      	ldr	r0, [pc, #8]	; (23df4 <net_shell_cmd_iface+0x10>)
   23dea:	f7f7 fceb 	bl	1b7c4 <net_if_foreach>
}
   23dee:	2000      	movs	r0, #0
   23df0:	bd08      	pop	{r3, pc}
   23df2:	bf00      	nop
   23df4:	0001e995 	.word	0x0001e995

00023df8 <net_shell_cmd_route>:
{
   23df8:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   23dfa:	2100      	movs	r1, #0
   23dfc:	4802      	ldr	r0, [pc, #8]	; (23e08 <net_shell_cmd_route+0x10>)
   23dfe:	f7f7 fce1 	bl	1b7c4 <net_if_foreach>
}
   23e02:	2000      	movs	r0, #0
   23e04:	bd08      	pop	{r3, pc}
   23e06:	bf00      	nop
   23e08:	00024235 	.word	0x00024235

00023e0c <net_shell_cmd_mem>:
{
   23e0c:	b500      	push	{lr}
   23e0e:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   23e10:	ab0e      	add	r3, sp, #56	; 0x38
   23e12:	aa0f      	add	r2, sp, #60	; 0x3c
   23e14:	a910      	add	r1, sp, #64	; 0x40
   23e16:	a811      	add	r0, sp, #68	; 0x44
   23e18:	f7f9 f9aa 	bl	1d170 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   23e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
   23e20:	4819      	ldr	r0, [pc, #100]	; (23e88 <net_shell_cmd_mem+0x7c>)
   23e22:	f7df f8ad 	bl	2f80 <printk>
	printk("Network buffer pools:\n");
   23e26:	4819      	ldr	r0, [pc, #100]	; (23e8c <net_shell_cmd_mem+0x80>)
   23e28:	f7df f8aa 	bl	2f80 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   23e2c:	4818      	ldr	r0, [pc, #96]	; (23e90 <net_shell_cmd_mem+0x84>)
   23e2e:	f7df f8a7 	bl	2f80 <printk>
	printk("Address\t\tTotal\tName\n");
   23e32:	4818      	ldr	r0, [pc, #96]	; (23e94 <net_shell_cmd_mem+0x88>)
   23e34:	f7df f8a4 	bl	2f80 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   23e38:	9911      	ldr	r1, [sp, #68]	; 0x44
   23e3a:	688a      	ldr	r2, [r1, #8]
   23e3c:	4816      	ldr	r0, [pc, #88]	; (23e98 <net_shell_cmd_mem+0x8c>)
   23e3e:	f7df f89f 	bl	2f80 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   23e42:	9910      	ldr	r1, [sp, #64]	; 0x40
   23e44:	688a      	ldr	r2, [r1, #8]
   23e46:	4815      	ldr	r0, [pc, #84]	; (23e9c <net_shell_cmd_mem+0x90>)
   23e48:	f7df f89a 	bl	2f80 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   23e4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23e4e:	8a0a      	ldrh	r2, [r1, #16]
   23e50:	4813      	ldr	r0, [pc, #76]	; (23ea0 <net_shell_cmd_mem+0x94>)
   23e52:	f7df f895 	bl	2f80 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   23e56:	990e      	ldr	r1, [sp, #56]	; 0x38
   23e58:	8a0a      	ldrh	r2, [r1, #16]
   23e5a:	4812      	ldr	r0, [pc, #72]	; (23ea4 <net_shell_cmd_mem+0x98>)
   23e5c:	f7df f890 	bl	2f80 <printk>
		memset(&info, 0, sizeof(info));
   23e60:	2238      	movs	r2, #56	; 0x38
   23e62:	2100      	movs	r1, #0
   23e64:	4668      	mov	r0, sp
   23e66:	f006 fe29 	bl	2aabc <memset>
		net_context_foreach(context_info, &info);
   23e6a:	4669      	mov	r1, sp
   23e6c:	480e      	ldr	r0, [pc, #56]	; (23ea8 <net_shell_cmd_mem+0x9c>)
   23e6e:	f7f8 fd8d 	bl	1c98c <net_context_foreach>
		if (!info.are_external_pools) {
   23e72:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23e76:	b11b      	cbz	r3, 23e80 <net_shell_cmd_mem+0x74>
}
   23e78:	2000      	movs	r0, #0
   23e7a:	b013      	add	sp, #76	; 0x4c
   23e7c:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   23e80:	480a      	ldr	r0, [pc, #40]	; (23eac <net_shell_cmd_mem+0xa0>)
   23e82:	f7df f87d 	bl	2f80 <printk>
   23e86:	e7f7      	b.n	23e78 <net_shell_cmd_mem+0x6c>
   23e88:	0003025c 	.word	0x0003025c
   23e8c:	00030278 	.word	0x00030278
   23e90:	00030290 	.word	0x00030290
   23e94:	000302bc 	.word	0x000302bc
   23e98:	000302d4 	.word	0x000302d4
   23e9c:	000302e0 	.word	0x000302e0
   23ea0:	000302ec 	.word	0x000302ec
   23ea4:	000302fc 	.word	0x000302fc
   23ea8:	00023879 	.word	0x00023879
   23eac:	0003030c 	.word	0x0003030c

00023eb0 <net_shell_cmd_nbr>:
{
   23eb0:	b510      	push	{r4, lr}
   23eb2:	b086      	sub	sp, #24
	int count = 0;
   23eb4:	2300      	movs	r3, #0
   23eb6:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   23eb8:	6848      	ldr	r0, [r1, #4]
   23eba:	b1d8      	cbz	r0, 23ef4 <net_shell_cmd_nbr+0x44>
   23ebc:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   23ebe:	4920      	ldr	r1, [pc, #128]	; (23f40 <net_shell_cmd_nbr+0x90>)
   23ec0:	f7dc faa2 	bl	408 <strcmp>
   23ec4:	b9f8      	cbnz	r0, 23f06 <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   23ec6:	68a1      	ldr	r1, [r4, #8]
   23ec8:	b311      	cbz	r1, 23f10 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   23eca:	aa01      	add	r2, sp, #4
   23ecc:	200a      	movs	r0, #10
   23ece:	f7f9 fbc4 	bl	1d65a <net_addr_pton>
		if (ret < 0) {
   23ed2:	2800      	cmp	r0, #0
   23ed4:	db20      	blt.n	23f18 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   23ed6:	a901      	add	r1, sp, #4
   23ed8:	2000      	movs	r0, #0
   23eda:	f7fb f83f 	bl	1ef5c <net_ipv6_nbr_rm>
   23ede:	bb00      	cbnz	r0, 23f22 <net_shell_cmd_nbr+0x72>
   23ee0:	2328      	movs	r3, #40	; 0x28
   23ee2:	4a18      	ldr	r2, [pc, #96]	; (23f44 <net_shell_cmd_nbr+0x94>)
   23ee4:	a901      	add	r1, sp, #4
   23ee6:	200a      	movs	r0, #10
   23ee8:	f7f9 fae0 	bl	1d4ac <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   23eec:	4601      	mov	r1, r0
   23eee:	4816      	ldr	r0, [pc, #88]	; (23f48 <net_shell_cmd_nbr+0x98>)
   23ef0:	f7df f846 	bl	2f80 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   23ef4:	a905      	add	r1, sp, #20
   23ef6:	4815      	ldr	r0, [pc, #84]	; (23f4c <net_shell_cmd_nbr+0x9c>)
   23ef8:	f7fb f822 	bl	1ef40 <net_ipv6_nbr_foreach>
	if (count == 0) {
   23efc:	9b05      	ldr	r3, [sp, #20]
   23efe:	b1db      	cbz	r3, 23f38 <net_shell_cmd_nbr+0x88>
}
   23f00:	2000      	movs	r0, #0
   23f02:	b006      	add	sp, #24
   23f04:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   23f06:	6861      	ldr	r1, [r4, #4]
   23f08:	4811      	ldr	r0, [pc, #68]	; (23f50 <net_shell_cmd_nbr+0xa0>)
   23f0a:	f7df f839 	bl	2f80 <printk>
			return 0;
   23f0e:	e7f7      	b.n	23f00 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   23f10:	4810      	ldr	r0, [pc, #64]	; (23f54 <net_shell_cmd_nbr+0xa4>)
   23f12:	f7df f835 	bl	2f80 <printk>
			return 0;
   23f16:	e7f3      	b.n	23f00 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   23f18:	68a1      	ldr	r1, [r4, #8]
   23f1a:	480f      	ldr	r0, [pc, #60]	; (23f58 <net_shell_cmd_nbr+0xa8>)
   23f1c:	f7df f830 	bl	2f80 <printk>
			return 0;
   23f20:	e7ee      	b.n	23f00 <net_shell_cmd_nbr+0x50>
   23f22:	2328      	movs	r3, #40	; 0x28
   23f24:	4a07      	ldr	r2, [pc, #28]	; (23f44 <net_shell_cmd_nbr+0x94>)
   23f26:	a901      	add	r1, sp, #4
   23f28:	200a      	movs	r0, #10
   23f2a:	f7f9 fabf 	bl	1d4ac <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   23f2e:	4601      	mov	r1, r0
   23f30:	480a      	ldr	r0, [pc, #40]	; (23f5c <net_shell_cmd_nbr+0xac>)
   23f32:	f7df f825 	bl	2f80 <printk>
   23f36:	e7dd      	b.n	23ef4 <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   23f38:	4809      	ldr	r0, [pc, #36]	; (23f60 <net_shell_cmd_nbr+0xb0>)
   23f3a:	f7df f821 	bl	2f80 <printk>
   23f3e:	e7df      	b.n	23f00 <net_shell_cmd_nbr+0x50>
   23f40:	00030330 	.word	0x00030330
   23f44:	200023c8 	.word	0x200023c8
   23f48:	00030380 	.word	0x00030380
   23f4c:	00024009 	.word	0x00024009
   23f50:	00030334 	.word	0x00030334
   23f54:	0003034c 	.word	0x0003034c
   23f58:	0003036c 	.word	0x0003036c
   23f5c:	0003039c 	.word	0x0003039c
   23f60:	000303b4 	.word	0x000303b4

00023f64 <route_cb>:
{
   23f64:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   23f66:	68c3      	ldr	r3, [r0, #12]
   23f68:	428b      	cmp	r3, r1
   23f6a:	d000      	beq.n	23f6e <route_cb+0xa>
   23f6c:	bd38      	pop	{r3, r4, r5, pc}
   23f6e:	4604      	mov	r4, r0
   23f70:	2328      	movs	r3, #40	; 0x28
   23f72:	4a1e      	ldr	r2, [pc, #120]	; (23fec <route_cb+0x88>)
   23f74:	f100 0110 	add.w	r1, r0, #16
   23f78:	200a      	movs	r0, #10
   23f7a:	f7f9 fa97 	bl	1d4ac <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   23f7e:	f894 2020 	ldrb.w	r2, [r4, #32]
   23f82:	4601      	mov	r1, r0
   23f84:	481a      	ldr	r0, [pc, #104]	; (23ff0 <route_cb+0x8c>)
   23f86:	f7de fffb 	bl	2f80 <printk>
	return list->head;
   23f8a:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f8c:	2500      	movs	r5, #0
   23f8e:	e009      	b.n	23fa4 <route_cb+0x40>
			printk("addr : <unknown>\n");
   23f90:	4818      	ldr	r0, [pc, #96]	; (23ff4 <route_cb+0x90>)
   23f92:	f7de fff5 	bl	2f80 <printk>
		count++;
   23f96:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23f98:	4622      	mov	r2, r4
   23f9a:	b1dc      	cbz	r4, 23fd4 <route_cb+0x70>
	return node->next;
   23f9c:	6823      	ldr	r3, [r4, #0]
   23f9e:	b1db      	cbz	r3, 23fd8 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23fa0:	b1e2      	cbz	r2, 23fdc <route_cb+0x78>
	return node->next;
   23fa2:	6824      	ldr	r4, [r4, #0]
   23fa4:	b1e4      	cbz	r4, 23fe0 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   23fa6:	6861      	ldr	r1, [r4, #4]
   23fa8:	2900      	cmp	r1, #0
   23faa:	d0f5      	beq.n	23f98 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   23fac:	4812      	ldr	r0, [pc, #72]	; (23ff8 <route_cb+0x94>)
   23fae:	f7de ffe7 	bl	2f80 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23fb2:	6863      	ldr	r3, [r4, #4]
   23fb4:	7858      	ldrb	r0, [r3, #1]
   23fb6:	28ff      	cmp	r0, #255	; 0xff
   23fb8:	d0ea      	beq.n	23f90 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   23fba:	f7fa fcc1 	bl	1e940 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   23fbe:	2318      	movs	r3, #24
   23fc0:	4a0e      	ldr	r2, [pc, #56]	; (23ffc <route_cb+0x98>)
   23fc2:	7841      	ldrb	r1, [r0, #1]
   23fc4:	3002      	adds	r0, #2
   23fc6:	f7f9 fa47 	bl	1d458 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   23fca:	4601      	mov	r1, r0
   23fcc:	480c      	ldr	r0, [pc, #48]	; (24000 <route_cb+0x9c>)
   23fce:	f7de ffd7 	bl	2f80 <printk>
   23fd2:	e7e0      	b.n	23f96 <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23fd4:	4623      	mov	r3, r4
   23fd6:	e7e2      	b.n	23f9e <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23fd8:	2400      	movs	r4, #0
   23fda:	e7e3      	b.n	23fa4 <route_cb+0x40>
   23fdc:	2400      	movs	r4, #0
   23fde:	e7e1      	b.n	23fa4 <route_cb+0x40>
	if (count == 0) {
   23fe0:	2d00      	cmp	r5, #0
   23fe2:	d1c3      	bne.n	23f6c <route_cb+0x8>
		printk("\t<none>\n");
   23fe4:	4807      	ldr	r0, [pc, #28]	; (24004 <route_cb+0xa0>)
   23fe6:	f7de ffcb 	bl	2f80 <printk>
   23fea:	e7bf      	b.n	23f6c <route_cb+0x8>
   23fec:	200023c8 	.word	0x200023c8
   23ff0:	000308fc 	.word	0x000308fc
   23ff4:	00030924 	.word	0x00030924
   23ff8:	00030914 	.word	0x00030914
   23ffc:	200023b0 	.word	0x200023b0
   24000:	00030938 	.word	0x00030938
   24004:	0002fe38 	.word	0x0002fe38

00024008 <nbr_cb>:
{
   24008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2400c:	b08f      	sub	sp, #60	; 0x3c
   2400e:	4604      	mov	r4, r0
   24010:	460d      	mov	r5, r1
	if (*count == 0) {
   24012:	680b      	ldr	r3, [r1, #0]
   24014:	2b00      	cmp	r3, #0
   24016:	d052      	beq.n	240be <nbr_cb+0xb6>
	(*count)++;
   24018:	682b      	ldr	r3, [r5, #0]
   2401a:	3301      	adds	r3, #1
   2401c:	602b      	str	r3, [r5, #0]
   2401e:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24020:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24024:	f7fa ff68 	bl	1eef8 <net_ipv6_nbr_state2str>
   24028:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   2402a:	f7dc fb69 	bl	700 <strlen>
   2402e:	2805      	cmp	r0, #5
   24030:	d04a      	beq.n	240c8 <nbr_cb+0xc0>
	char *state_pad = "";
   24032:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 240dc <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24036:	682b      	ldr	r3, [r5, #0]
   24038:	930c      	str	r3, [sp, #48]	; 0x30
   2403a:	68a3      	ldr	r3, [r4, #8]
   2403c:	930d      	str	r3, [sp, #52]	; 0x34
   2403e:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24040:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24044:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24046:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   2404a:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   2404e:	3020      	adds	r0, #32
   24050:	f005 f90a 	bl	29268 <_timeout_remaining_get>
   24054:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24056:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24058:	28ff      	cmp	r0, #255	; 0xff
   2405a:	d038      	beq.n	240ce <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   2405c:	f7fa fc70 	bl	1e940 <net_nbr_get_lladdr>
   24060:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24064:	7860      	ldrb	r0, [r4, #1]
   24066:	f7fa fc6b 	bl	1e940 <net_nbr_get_lladdr>
   2406a:	2318      	movs	r3, #24
   2406c:	4a19      	ldr	r2, [pc, #100]	; (240d4 <nbr_cb+0xcc>)
   2406e:	7841      	ldrb	r1, [r0, #1]
   24070:	4658      	mov	r0, fp
   24072:	f7f9 f9f1 	bl	1d458 <net_sprint_ll_addr_buf>
   24076:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24078:	7860      	ldrb	r0, [r4, #1]
   2407a:	f7fa fc61 	bl	1e940 <net_nbr_get_lladdr>
   2407e:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24080:	2328      	movs	r3, #40	; 0x28
   24082:	4a15      	ldr	r2, [pc, #84]	; (240d8 <nbr_cb+0xd0>)
   24084:	3104      	adds	r1, #4
   24086:	200a      	movs	r0, #10
   24088:	f7f9 fa10 	bl	1d4ac <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   2408c:	9009      	str	r0, [sp, #36]	; 0x24
   2408e:	4b13      	ldr	r3, [pc, #76]	; (240dc <nbr_cb+0xd4>)
   24090:	9308      	str	r3, [sp, #32]
   24092:	f8cd b01c 	str.w	fp, [sp, #28]
   24096:	f8cd a018 	str.w	sl, [sp, #24]
   2409a:	f8cd 9014 	str.w	r9, [sp, #20]
   2409e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   240a0:	9304      	str	r3, [sp, #16]
   240a2:	f8cd 800c 	str.w	r8, [sp, #12]
   240a6:	9702      	str	r7, [sp, #8]
   240a8:	9601      	str	r6, [sp, #4]
   240aa:	9500      	str	r5, [sp, #0]
   240ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   240ae:	4622      	mov	r2, r4
   240b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   240b2:	480b      	ldr	r0, [pc, #44]	; (240e0 <nbr_cb+0xd8>)
   240b4:	f7de ff64 	bl	2f80 <printk>
}
   240b8:	b00f      	add	sp, #60	; 0x3c
   240ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   240be:	4907      	ldr	r1, [pc, #28]	; (240dc <nbr_cb+0xd4>)
   240c0:	4808      	ldr	r0, [pc, #32]	; (240e4 <nbr_cb+0xdc>)
   240c2:	f7de ff5d 	bl	2f80 <printk>
   240c6:	e7a7      	b.n	24018 <nbr_cb+0x10>
		state_pad = "    ";
   240c8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 240e8 <nbr_cb+0xe0>
   240cc:	e7b3      	b.n	24036 <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   240ce:	f8df b01c 	ldr.w	fp, [pc, #28]	; 240ec <nbr_cb+0xe4>
   240d2:	e7d1      	b.n	24078 <nbr_cb+0x70>
   240d4:	200023b0 	.word	0x200023b0
   240d8:	200023c8 	.word	0x200023c8
   240dc:	0002f448 	.word	0x0002f448
   240e0:	0002ffec 	.word	0x0002ffec
   240e4:	0002ff94 	.word	0x0002ff94
   240e8:	0002ff88 	.word	0x0002ff88
   240ec:	0002ff90 	.word	0x0002ff90

000240f0 <_ping_ipv6>:
{
   240f0:	b570      	push	{r4, r5, r6, lr}
   240f2:	b084      	sub	sp, #16
   240f4:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   240f6:	f7f6 fbb1 	bl	1a85c <net_if_get_default>
   240fa:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   240fc:	466a      	mov	r2, sp
   240fe:	4629      	mov	r1, r5
   24100:	200a      	movs	r0, #10
   24102:	f7f9 faaa 	bl	1d65a <net_addr_pton>
   24106:	2800      	cmp	r0, #0
   24108:	db26      	blt.n	24158 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   2410a:	4815      	ldr	r0, [pc, #84]	; (24160 <_ping_ipv6+0x70>)
   2410c:	f7f9 fe0c 	bl	1dd28 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24110:	4669      	mov	r1, sp
   24112:	2000      	movs	r0, #0
   24114:	f7fb fa4c 	bl	1f5b0 <net_ipv6_nbr_lookup>
	if (nbr) {
   24118:	b100      	cbz	r0, 2411c <_ping_ipv6+0x2c>
		iface = nbr->iface;
   2411a:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   2411c:	4669      	mov	r1, sp
   2411e:	2000      	movs	r0, #0
   24120:	f7fd ffc4 	bl	220ac <net_route_lookup>
	if (route) {
   24124:	b100      	cbz	r0, 24128 <_ping_ipv6+0x38>
		iface = route->iface;
   24126:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24128:	f7dd ff90 	bl	204c <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   2412c:	b286      	uxth	r6, r0
					   sys_rand32_get());
   2412e:	f7dd ff8d 	bl	204c <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24132:	b283      	uxth	r3, r0
   24134:	4632      	mov	r2, r6
   24136:	4669      	mov	r1, sp
   24138:	4620      	mov	r0, r4
   2413a:	f7fa fa8f 	bl	1e65c <net_icmpv6_send_echo_request>
	if (ret) {
   2413e:	4604      	mov	r4, r0
   24140:	b930      	cbnz	r0, 24150 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24142:	4629      	mov	r1, r5
   24144:	4807      	ldr	r0, [pc, #28]	; (24164 <_ping_ipv6+0x74>)
   24146:	f7de ff1b 	bl	2f80 <printk>
}
   2414a:	4620      	mov	r0, r4
   2414c:	b004      	add	sp, #16
   2414e:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24150:	4803      	ldr	r0, [pc, #12]	; (24160 <_ping_ipv6+0x70>)
   24152:	f7f9 fdf5 	bl	1dd40 <net_icmpv6_unregister_handler>
   24156:	e7f8      	b.n	2414a <_ping_ipv6+0x5a>
		return -EINVAL;
   24158:	f06f 0415 	mvn.w	r4, #21
   2415c:	e7f5      	b.n	2414a <_ping_ipv6+0x5a>
   2415e:	bf00      	nop
   24160:	2000c494 	.word	0x2000c494
   24164:	0002fca4 	.word	0x0002fca4

00024168 <net_shell_cmd_ping>:
{
   24168:	b510      	push	{r4, lr}
   2416a:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   2416c:	4912      	ldr	r1, [pc, #72]	; (241b8 <net_shell_cmd_ping+0x50>)
   2416e:	6820      	ldr	r0, [r4, #0]
   24170:	f7dc f94a 	bl	408 <strcmp>
   24174:	b958      	cbnz	r0, 2418e <net_shell_cmd_ping+0x26>
		host = argv[1];
   24176:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24178:	f7ff ffba 	bl	240f0 <_ping_ipv6>
	if (!ret) {
   2417c:	b168      	cbz	r0, 2419a <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   2417e:	f110 0f05 	cmn.w	r0, #5
   24182:	d006      	beq.n	24192 <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24184:	480d      	ldr	r0, [pc, #52]	; (241bc <net_shell_cmd_ping+0x54>)
   24186:	f7de fefb 	bl	2f80 <printk>
}
   2418a:	2000      	movs	r0, #0
   2418c:	bd10      	pop	{r4, pc}
		host = argv[2];
   2418e:	68a0      	ldr	r0, [r4, #8]
   24190:	e7f2      	b.n	24178 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24192:	480b      	ldr	r0, [pc, #44]	; (241c0 <net_shell_cmd_ping+0x58>)
   24194:	f7de fef4 	bl	2f80 <printk>
		return 0;
   24198:	e7f7      	b.n	2418a <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   2419a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   2419e:	4809      	ldr	r0, [pc, #36]	; (241c4 <net_shell_cmd_ping+0x5c>)
   241a0:	f004 fb2a 	bl	287f8 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   241a4:	f110 0f0b 	cmn.w	r0, #11
   241a8:	d1ef      	bne.n	2418a <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   241aa:	4807      	ldr	r0, [pc, #28]	; (241c8 <net_shell_cmd_ping+0x60>)
   241ac:	f7de fee8 	bl	2f80 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   241b0:	4806      	ldr	r0, [pc, #24]	; (241cc <net_shell_cmd_ping+0x64>)
   241b2:	f7f9 fdc5 	bl	1dd40 <net_icmpv6_unregister_handler>
   241b6:	e7e8      	b.n	2418a <net_shell_cmd_ping+0x22>
   241b8:	000303c4 	.word	0x000303c4
   241bc:	000303e4 	.word	0x000303e4
   241c0:	000303cc 	.word	0x000303cc
   241c4:	2000cfdc 	.word	0x2000cfdc
   241c8:	000303f8 	.word	0x000303f8
   241cc:	2000c494 	.word	0x2000c494

000241d0 <_handle_ipv6_echo_reply>:
{
   241d0:	b530      	push	{r4, r5, lr}
   241d2:	b08b      	sub	sp, #44	; 0x2c
   241d4:	4605      	mov	r5, r0
	return pkt->frags->data;
   241d6:	6883      	ldr	r3, [r0, #8]
   241d8:	6899      	ldr	r1, [r3, #8]
   241da:	4c11      	ldr	r4, [pc, #68]	; (24220 <_handle_ipv6_echo_reply+0x50>)
   241dc:	2328      	movs	r3, #40	; 0x28
   241de:	4622      	mov	r2, r4
   241e0:	3118      	adds	r1, #24
   241e2:	200a      	movs	r0, #10
   241e4:	f7f9 f962 	bl	1d4ac <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   241e8:	4603      	mov	r3, r0
   241ea:	4a0e      	ldr	r2, [pc, #56]	; (24224 <_handle_ipv6_echo_reply+0x54>)
   241ec:	2128      	movs	r1, #40	; 0x28
   241ee:	4668      	mov	r0, sp
   241f0:	f7de fed4 	bl	2f9c <snprintk>
   241f4:	68ab      	ldr	r3, [r5, #8]
   241f6:	6899      	ldr	r1, [r3, #8]
   241f8:	2328      	movs	r3, #40	; 0x28
   241fa:	4622      	mov	r2, r4
   241fc:	3108      	adds	r1, #8
   241fe:	200a      	movs	r0, #10
   24200:	f7f9 f954 	bl	1d4ac <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24204:	466a      	mov	r2, sp
   24206:	4601      	mov	r1, r0
   24208:	4807      	ldr	r0, [pc, #28]	; (24228 <_handle_ipv6_echo_reply+0x58>)
   2420a:	f7de feb9 	bl	2f80 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2420e:	4807      	ldr	r0, [pc, #28]	; (2422c <_handle_ipv6_echo_reply+0x5c>)
   24210:	f004 fadf 	bl	287d2 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24214:	4806      	ldr	r0, [pc, #24]	; (24230 <_handle_ipv6_echo_reply+0x60>)
   24216:	f7f9 fd93 	bl	1dd40 <net_icmpv6_unregister_handler>
}
   2421a:	2000      	movs	r0, #0
   2421c:	b00b      	add	sp, #44	; 0x2c
   2421e:	bd30      	pop	{r4, r5, pc}
   24220:	200023c8 	.word	0x200023c8
   24224:	0002ef04 	.word	0x0002ef04
   24228:	0002fc80 	.word	0x0002fc80
   2422c:	2000cfdc 	.word	0x2000cfdc
   24230:	2000c494 	.word	0x2000c494

00024234 <iface_per_route_cb>:
{
   24234:	b510      	push	{r4, lr}
   24236:	b082      	sub	sp, #8
   24238:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   2423a:	a901      	add	r1, sp, #4
   2423c:	f7ff faba 	bl	237b4 <iface2str>
   24240:	4602      	mov	r2, r0
   24242:	4621      	mov	r1, r4
   24244:	4806      	ldr	r0, [pc, #24]	; (24260 <iface_per_route_cb+0x2c>)
   24246:	f7de fe9b 	bl	2f80 <printk>
	printk("=======================================%s\n", extra);
   2424a:	9901      	ldr	r1, [sp, #4]
   2424c:	4805      	ldr	r0, [pc, #20]	; (24264 <iface_per_route_cb+0x30>)
   2424e:	f7de fe97 	bl	2f80 <printk>
	net_route_foreach(route_cb, iface);
   24252:	4621      	mov	r1, r4
   24254:	4804      	ldr	r0, [pc, #16]	; (24268 <iface_per_route_cb+0x34>)
   24256:	f7fe f829 	bl	222ac <net_route_foreach>
}
   2425a:	b002      	add	sp, #8
   2425c:	bd10      	pop	{r4, pc}
   2425e:	bf00      	nop
   24260:	0002ff38 	.word	0x0002ff38
   24264:	0002ff5c 	.word	0x0002ff5c
   24268:	00023f65 	.word	0x00023f65

0002426c <tcp_connected>:
{
   2426c:	b510      	push	{r4, lr}
	if (status < 0) {
   2426e:	2900      	cmp	r1, #0
   24270:	db03      	blt.n	2427a <tcp_connected+0xe>
		printk("TCP connected\n");
   24272:	4807      	ldr	r0, [pc, #28]	; (24290 <tcp_connected+0x24>)
   24274:	f7de fe84 	bl	2f80 <printk>
   24278:	bd10      	pop	{r4, pc}
   2427a:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   2427c:	4805      	ldr	r0, [pc, #20]	; (24294 <tcp_connected+0x28>)
   2427e:	f7de fe7f 	bl	2f80 <printk>
		net_context_put(context);
   24282:	4620      	mov	r0, r4
   24284:	f7f8 f834 	bl	1c2f0 <net_context_put>
		tcp_ctx = NULL;
   24288:	2200      	movs	r2, #0
   2428a:	4b03      	ldr	r3, [pc, #12]	; (24298 <tcp_connected+0x2c>)
   2428c:	601a      	str	r2, [r3, #0]
   2428e:	bd10      	pop	{r4, pc}
   24290:	000309d8 	.word	0x000309d8
   24294:	000309bc 	.word	0x000309bc
   24298:	200023f0 	.word	0x200023f0

0002429c <get_my_ipv6_addr>:
{
   2429c:	b538      	push	{r3, r4, r5, lr}
   2429e:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   242a0:	1d0d      	adds	r5, r1, #4
   242a2:	4629      	mov	r1, r5
   242a4:	f7f7 f81e 	bl	1b2e4 <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   242a8:	2210      	movs	r2, #16
   242aa:	4601      	mov	r1, r0
   242ac:	4628      	mov	r0, r5
   242ae:	f7dc f807 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   242b2:	2300      	movs	r3, #0
   242b4:	8063      	strh	r3, [r4, #2]
   242b6:	bd38      	pop	{r3, r4, r5, pc}

000242b8 <tcp_connect>:
{
   242b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   242ba:	b08f      	sub	sp, #60	; 0x3c
   242bc:	4607      	mov	r7, r0
   242be:	460c      	mov	r4, r1
   242c0:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   242c2:	f7f6 facb 	bl	1a85c <net_if_get_default>
   242c6:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   242c8:	aa09      	add	r2, sp, #36	; 0x24
   242ca:	4639      	mov	r1, r7
   242cc:	200a      	movs	r0, #10
   242ce:	f7f9 f9c4 	bl	1d65a <net_addr_pton>
	if (ret < 0) {
   242d2:	2800      	cmp	r0, #0
   242d4:	db34      	blt.n	24340 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   242d6:	0a21      	lsrs	r1, r4, #8
   242d8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   242dc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   242e0:	a909      	add	r1, sp, #36	; 0x24
   242e2:	2000      	movs	r0, #0
   242e4:	f7fb f964 	bl	1f5b0 <net_ipv6_nbr_lookup>
	if (nbr) {
   242e8:	b100      	cbz	r0, 242ec <tcp_connect+0x34>
		iface = nbr->iface;
   242ea:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   242ec:	a902      	add	r1, sp, #8
   242ee:	4630      	mov	r0, r6
   242f0:	f7ff ffd4 	bl	2429c <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   242f4:	240a      	movs	r4, #10
   242f6:	f8ad 4008 	strh.w	r4, [sp, #8]
   242fa:	aa0e      	add	r2, sp, #56	; 0x38
   242fc:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24300:	a902      	add	r1, sp, #8
   24302:	4620      	mov	r0, r4
   24304:	f7ff fce6 	bl	23cd4 <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24308:	462b      	mov	r3, r5
   2430a:	2206      	movs	r2, #6
   2430c:	2101      	movs	r1, #1
   2430e:	4620      	mov	r0, r4
   24310:	f7f7 fd82 	bl	1be18 <net_context_get>
	if (ret < 0) {
   24314:	1e04      	subs	r4, r0, #0
   24316:	db18      	blt.n	2434a <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24318:	2218      	movs	r2, #24
   2431a:	a902      	add	r1, sp, #8
   2431c:	6828      	ldr	r0, [r5, #0]
   2431e:	f7f8 f829 	bl	1c374 <net_context_bind>
	if (ret < 0) {
   24322:	1e04      	subs	r4, r0, #0
   24324:	db16      	blt.n	24354 <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24326:	6828      	ldr	r0, [r5, #0]
   24328:	2300      	movs	r3, #0
   2432a:	9301      	str	r3, [sp, #4]
   2432c:	9300      	str	r3, [sp, #0]
   2432e:	4b0c      	ldr	r3, [pc, #48]	; (24360 <tcp_connect+0xa8>)
   24330:	2218      	movs	r2, #24
   24332:	a908      	add	r1, sp, #32
   24334:	f7f8 f9b0 	bl	1c698 <net_context_connect>
   24338:	4604      	mov	r4, r0
}
   2433a:	4620      	mov	r0, r4
   2433c:	b00f      	add	sp, #60	; 0x3c
   2433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24340:	4808      	ldr	r0, [pc, #32]	; (24364 <tcp_connect+0xac>)
   24342:	f7de fe1d 	bl	2f80 <printk>
		return 0;
   24346:	2400      	movs	r4, #0
   24348:	e7f7      	b.n	2433a <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   2434a:	4621      	mov	r1, r4
   2434c:	4806      	ldr	r0, [pc, #24]	; (24368 <tcp_connect+0xb0>)
   2434e:	f7de fe17 	bl	2f80 <printk>
		return ret;
   24352:	e7f2      	b.n	2433a <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24354:	4621      	mov	r1, r4
   24356:	4805      	ldr	r0, [pc, #20]	; (2436c <tcp_connect+0xb4>)
   24358:	f7de fe12 	bl	2f80 <printk>
		return ret;
   2435c:	e7ed      	b.n	2433a <tcp_connect+0x82>
   2435e:	bf00      	nop
   24360:	0002426d 	.word	0x0002426d
   24364:	0003096c 	.word	0x0003096c
   24368:	00030984 	.word	0x00030984
   2436c:	000309a4 	.word	0x000309a4

00024370 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24370:	b5f0      	push	{r4, r5, r6, r7, lr}
   24372:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24374:	6848      	ldr	r0, [r1, #4]
   24376:	2800      	cmp	r0, #0
   24378:	f000 8099 	beq.w	244ae <net_shell_cmd_tcp+0x13e>
   2437c:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   2437e:	4954      	ldr	r1, [pc, #336]	; (244d0 <net_shell_cmd_tcp+0x160>)
   24380:	f7dc f842 	bl	408 <strcmp>
   24384:	4605      	mov	r5, r0
   24386:	bb20      	cbnz	r0, 243d2 <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24388:	4b52      	ldr	r3, [pc, #328]	; (244d4 <net_shell_cmd_tcp+0x164>)
   2438a:	681b      	ldr	r3, [r3, #0]
   2438c:	b123      	cbz	r3, 24398 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   2438e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24392:	f013 0f01 	tst.w	r3, #1
   24396:	d110      	bne.n	243ba <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24398:	68a6      	ldr	r6, [r4, #8]
   2439a:	b196      	cbz	r6, 243c2 <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   2439c:	68e0      	ldr	r0, [r4, #12]
   2439e:	b1a0      	cbz	r0, 243ca <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   243a0:	220a      	movs	r2, #10
   243a2:	2100      	movs	r1, #0
   243a4:	f007 f8a4 	bl	2b4f0 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   243a8:	4a4a      	ldr	r2, [pc, #296]	; (244d4 <net_shell_cmd_tcp+0x164>)
   243aa:	b281      	uxth	r1, r0
   243ac:	4630      	mov	r0, r6
   243ae:	f7ff ff83 	bl	242b8 <tcp_connect>
   243b2:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   243b4:	4628      	mov	r0, r5
   243b6:	b003      	add	sp, #12
   243b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   243ba:	4847      	ldr	r0, [pc, #284]	; (244d8 <net_shell_cmd_tcp+0x168>)
   243bc:	f7de fde0 	bl	2f80 <printk>
				return 0;
   243c0:	e7f8      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   243c2:	4846      	ldr	r0, [pc, #280]	; (244dc <net_shell_cmd_tcp+0x16c>)
   243c4:	f7de fddc 	bl	2f80 <printk>
				return 0;
   243c8:	e7f4      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   243ca:	4845      	ldr	r0, [pc, #276]	; (244e0 <net_shell_cmd_tcp+0x170>)
   243cc:	f7de fdd8 	bl	2f80 <printk>
				return 0;
   243d0:	e7f0      	b.n	243b4 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   243d2:	4944      	ldr	r1, [pc, #272]	; (244e4 <net_shell_cmd_tcp+0x174>)
   243d4:	6860      	ldr	r0, [r4, #4]
   243d6:	f7dc f817 	bl	408 <strcmp>
   243da:	4605      	mov	r5, r0
   243dc:	2800      	cmp	r0, #0
   243de:	d140      	bne.n	24462 <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   243e0:	4b3c      	ldr	r3, [pc, #240]	; (244d4 <net_shell_cmd_tcp+0x164>)
   243e2:	6818      	ldr	r0, [r3, #0]
   243e4:	b300      	cbz	r0, 24428 <net_shell_cmd_tcp+0xb8>
   243e6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   243ea:	f013 0f01 	tst.w	r3, #1
   243ee:	d01b      	beq.n	24428 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   243f0:	68a3      	ldr	r3, [r4, #8]
   243f2:	b1eb      	cbz	r3, 24430 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   243f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   243f8:	f7f8 fbdc 	bl	1cbb4 <net_pkt_get_tx>
			if (!pkt) {
   243fc:	4606      	mov	r6, r0
   243fe:	b1d8      	cbz	r0, 24438 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24400:	68a0      	ldr	r0, [r4, #8]
   24402:	f7dc f97d 	bl	700 <strlen>
   24406:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24408:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   2440c:	68a2      	ldr	r2, [r4, #8]
   2440e:	4639      	mov	r1, r7
   24410:	4630      	mov	r0, r6
   24412:	f7f8 fd3a 	bl	1ce8a <net_pkt_append>
			if (!ret) {
   24416:	4287      	cmp	r7, r0
   24418:	d012      	beq.n	24440 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   2441a:	4833      	ldr	r0, [pc, #204]	; (244e8 <net_shell_cmd_tcp+0x178>)
   2441c:	f7de fdb0 	bl	2f80 <printk>
				net_pkt_unref(pkt);
   24420:	4630      	mov	r0, r6
   24422:	f7f8 fbfa 	bl	1cc1a <net_pkt_unref>
				return 0;
   24426:	e7c5      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24428:	4830      	ldr	r0, [pc, #192]	; (244ec <net_shell_cmd_tcp+0x17c>)
   2442a:	f7de fda9 	bl	2f80 <printk>
				return 0;
   2442e:	e7c1      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24430:	482f      	ldr	r0, [pc, #188]	; (244f0 <net_shell_cmd_tcp+0x180>)
   24432:	f7de fda5 	bl	2f80 <printk>
				return 0;
   24436:	e7bd      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24438:	482e      	ldr	r0, [pc, #184]	; (244f4 <net_shell_cmd_tcp+0x184>)
   2443a:	f7de fda1 	bl	2f80 <printk>
				return 0;
   2443e:	e7b9      	b.n	243b4 <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24440:	2300      	movs	r3, #0
   24442:	9300      	str	r3, [sp, #0]
   24444:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24448:	492b      	ldr	r1, [pc, #172]	; (244f8 <net_shell_cmd_tcp+0x188>)
   2444a:	4630      	mov	r0, r6
   2444c:	f7f8 fa12 	bl	1c874 <net_context_send>
			if (ret < 0) {
   24450:	1e01      	subs	r1, r0, #0
   24452:	daaf      	bge.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   24454:	4829      	ldr	r0, [pc, #164]	; (244fc <net_shell_cmd_tcp+0x18c>)
   24456:	f7de fd93 	bl	2f80 <printk>
				net_pkt_unref(pkt);
   2445a:	4630      	mov	r0, r6
   2445c:	f7f8 fbdd 	bl	1cc1a <net_pkt_unref>
				return 0;
   24460:	e7a8      	b.n	243b4 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   24462:	4927      	ldr	r1, [pc, #156]	; (24500 <net_shell_cmd_tcp+0x190>)
   24464:	6860      	ldr	r0, [r4, #4]
   24466:	f7db ffcf 	bl	408 <strcmp>
   2446a:	4605      	mov	r5, r0
   2446c:	b9d0      	cbnz	r0, 244a4 <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   2446e:	4b19      	ldr	r3, [pc, #100]	; (244d4 <net_shell_cmd_tcp+0x164>)
   24470:	6818      	ldr	r0, [r3, #0]
   24472:	b120      	cbz	r0, 2447e <net_shell_cmd_tcp+0x10e>
   24474:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24478:	f013 0f01 	tst.w	r3, #1
   2447c:	d103      	bne.n	24486 <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   2447e:	481b      	ldr	r0, [pc, #108]	; (244ec <net_shell_cmd_tcp+0x17c>)
   24480:	f7de fd7e 	bl	2f80 <printk>
				return 0;
   24484:	e796      	b.n	243b4 <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   24486:	f7f7 ff33 	bl	1c2f0 <net_context_put>
			if (ret < 0) {
   2448a:	1e01      	subs	r1, r0, #0
   2448c:	db06      	blt.n	2449c <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   2448e:	481d      	ldr	r0, [pc, #116]	; (24504 <net_shell_cmd_tcp+0x194>)
   24490:	f7de fd76 	bl	2f80 <printk>
			tcp_ctx = NULL;
   24494:	2200      	movs	r2, #0
   24496:	4b0f      	ldr	r3, [pc, #60]	; (244d4 <net_shell_cmd_tcp+0x164>)
   24498:	601a      	str	r2, [r3, #0]
			return 0;
   2449a:	e78b      	b.n	243b4 <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   2449c:	481a      	ldr	r0, [pc, #104]	; (24508 <net_shell_cmd_tcp+0x198>)
   2449e:	f7de fd6f 	bl	2f80 <printk>
				return 0;
   244a2:	e787      	b.n	243b4 <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   244a4:	6861      	ldr	r1, [r4, #4]
   244a6:	4819      	ldr	r0, [pc, #100]	; (2450c <net_shell_cmd_tcp+0x19c>)
   244a8:	f7de fd6a 	bl	2f80 <printk>
		goto usage;
   244ac:	e002      	b.n	244b4 <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   244ae:	4818      	ldr	r0, [pc, #96]	; (24510 <net_shell_cmd_tcp+0x1a0>)
   244b0:	f7de fd66 	bl	2f80 <printk>
		printk("Usage:\n");
   244b4:	4817      	ldr	r0, [pc, #92]	; (24514 <net_shell_cmd_tcp+0x1a4>)
   244b6:	f7de fd63 	bl	2f80 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   244ba:	4817      	ldr	r0, [pc, #92]	; (24518 <net_shell_cmd_tcp+0x1a8>)
   244bc:	f7de fd60 	bl	2f80 <printk>
		printk("\ttcp send <data>\n");
   244c0:	4816      	ldr	r0, [pc, #88]	; (2451c <net_shell_cmd_tcp+0x1ac>)
   244c2:	f7de fd5d 	bl	2f80 <printk>
		printk("\ttcp close\n");
   244c6:	4816      	ldr	r0, [pc, #88]	; (24520 <net_shell_cmd_tcp+0x1b0>)
   244c8:	f7de fd5a 	bl	2f80 <printk>
	return 0;
   244cc:	2500      	movs	r5, #0
   244ce:	e771      	b.n	243b4 <net_shell_cmd_tcp+0x44>
   244d0:	0002f0d8 	.word	0x0002f0d8
   244d4:	200023f0 	.word	0x200023f0
   244d8:	0003073c 	.word	0x0003073c
   244dc:	00030750 	.word	0x00030750
   244e0:	0003076c 	.word	0x0003076c
   244e4:	00030780 	.word	0x00030780
   244e8:	000307d0 	.word	0x000307d0
   244ec:	00030788 	.word	0x00030788
   244f0:	00030798 	.word	0x00030798
   244f4:	000307ac 	.word	0x000307ac
   244f8:	00023b5d 	.word	0x00023b5d
   244fc:	000307f0 	.word	0x000307f0
   24500:	00030808 	.word	0x00030808
   24504:	00030834 	.word	0x00030834
   24508:	00030810 	.word	0x00030810
   2450c:	00030334 	.word	0x00030334
   24510:	00030848 	.word	0x00030848
   24514:	0003085c 	.word	0x0003085c
   24518:	00030864 	.word	0x00030864
   2451c:	00030880 	.word	0x00030880
   24520:	00030894 	.word	0x00030894

00024524 <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   24524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24528:	4605      	mov	r5, r0
   2452a:	460e      	mov	r6, r1
   2452c:	4617      	mov	r7, r2
   2452e:	4699      	mov	r9, r3
   24530:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24534:	2400      	movs	r4, #0
   24536:	e012      	b.n	2455e <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24538:	f013 0f02 	tst.w	r3, #2
   2453c:	d10e      	bne.n	2455c <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   2453e:	2f00      	cmp	r7, #0
   24540:	d051      	beq.n	245e6 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   24542:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24546:	009a      	lsls	r2, r3, #2
   24548:	4b3c      	ldr	r3, [pc, #240]	; (2463c <find_conn_handler+0x118>)
   2454a:	4413      	add	r3, r2
   2454c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24550:	f013 0f04 	tst.w	r3, #4
   24554:	d002      	beq.n	2455c <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   24556:	883b      	ldrh	r3, [r7, #0]
   24558:	2b0a      	cmp	r3, #10
   2455a:	d030      	beq.n	245be <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2455c:	3401      	adds	r4, #1
   2455e:	2c03      	cmp	r4, #3
   24560:	dc67      	bgt.n	24632 <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   24562:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24566:	009a      	lsls	r2, r3, #2
   24568:	4b34      	ldr	r3, [pc, #208]	; (2463c <find_conn_handler+0x118>)
   2456a:	4413      	add	r3, r2
   2456c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24570:	f013 0f01 	tst.w	r3, #1
   24574:	d0f2      	beq.n	2455c <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   24576:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2457a:	0091      	lsls	r1, r2, #2
   2457c:	4a2f      	ldr	r2, [pc, #188]	; (2463c <find_conn_handler+0x118>)
   2457e:	440a      	add	r2, r1
   24580:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   24584:	42aa      	cmp	r2, r5
   24586:	d1e9      	bne.n	2455c <find_conn_handler+0x38>
		if (remote_addr) {
   24588:	2e00      	cmp	r6, #0
   2458a:	d0d5      	beq.n	24538 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   2458c:	f013 0f02 	tst.w	r3, #2
   24590:	d0e4      	beq.n	2455c <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   24592:	8833      	ldrh	r3, [r6, #0]
   24594:	2b0a      	cmp	r3, #10
   24596:	d1e1      	bne.n	2455c <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   24598:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   2459c:	008a      	lsls	r2, r1, #2
   2459e:	4927      	ldr	r1, [pc, #156]	; (2463c <find_conn_handler+0x118>)
   245a0:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   245a2:	4293      	cmp	r3, r2
   245a4:	d1da      	bne.n	2455c <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   245a6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   245aa:	0093      	lsls	r3, r2, #2
   245ac:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   245ae:	2210      	movs	r2, #16
   245b0:	3104      	adds	r1, #4
   245b2:	1d30      	adds	r0, r6, #4
   245b4:	f006 f9ee 	bl	2a994 <memcmp>
				if (!net_ipv6_addr_cmp(
   245b8:	2800      	cmp	r0, #0
   245ba:	d1cf      	bne.n	2455c <find_conn_handler+0x38>
   245bc:	e7bf      	b.n	2453e <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   245be:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   245c2:	0091      	lsls	r1, r2, #2
   245c4:	4a1d      	ldr	r2, [pc, #116]	; (2463c <find_conn_handler+0x118>)
   245c6:	440a      	add	r2, r1
   245c8:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   245ca:	4293      	cmp	r3, r2
   245cc:	d1c6      	bne.n	2455c <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   245ce:	460b      	mov	r3, r1
   245d0:	3318      	adds	r3, #24
   245d2:	4a1a      	ldr	r2, [pc, #104]	; (2463c <find_conn_handler+0x118>)
   245d4:	4413      	add	r3, r2
   245d6:	2210      	movs	r2, #16
   245d8:	1d19      	adds	r1, r3, #4
   245da:	1d38      	adds	r0, r7, #4
   245dc:	f006 f9da 	bl	2a994 <memcmp>
				if (!net_ipv6_addr_cmp(
   245e0:	2800      	cmp	r0, #0
   245e2:	d1bb      	bne.n	2455c <find_conn_handler+0x38>
   245e4:	e009      	b.n	245fa <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   245e6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   245ea:	009a      	lsls	r2, r3, #2
   245ec:	4b13      	ldr	r3, [pc, #76]	; (2463c <find_conn_handler+0x118>)
   245ee:	4413      	add	r3, r2
   245f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   245f4:	f013 0f04 	tst.w	r3, #4
   245f8:	d1b0      	bne.n	2455c <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   245fa:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   245fe:	009a      	lsls	r2, r3, #2
   24600:	4b0e      	ldr	r3, [pc, #56]	; (2463c <find_conn_handler+0x118>)
   24602:	4413      	add	r3, r2
   24604:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   24606:	ea4f 2319 	mov.w	r3, r9, lsr #8
   2460a:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   2460e:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   24610:	429a      	cmp	r2, r3
   24612:	d1a3      	bne.n	2455c <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   24614:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24618:	0093      	lsls	r3, r2, #2
   2461a:	3318      	adds	r3, #24
   2461c:	4a07      	ldr	r2, [pc, #28]	; (2463c <find_conn_handler+0x118>)
   2461e:	4413      	add	r3, r2
   24620:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   24622:	ea4f 2318 	mov.w	r3, r8, lsr #8
   24626:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   2462a:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   2462c:	429a      	cmp	r2, r3
   2462e:	d195      	bne.n	2455c <find_conn_handler+0x38>
   24630:	e001      	b.n	24636 <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   24632:	f06f 0401 	mvn.w	r4, #1
}
   24636:	4620      	mov	r0, r4
   24638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2463c:	20000444 	.word	0x20000444

00024640 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   24640:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   24642:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   24644:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   24648:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2464c:	b29d      	uxth	r5, r3
   2464e:	42ac      	cmp	r4, r5
   24650:	d002      	beq.n	24658 <check_addr+0x18>
		return false;
   24652:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   24654:	4620      	mov	r0, r4
   24656:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24658:	2b0a      	cmp	r3, #10
   2465a:	d001      	beq.n	24660 <check_addr+0x20>
	return true;
   2465c:	2401      	movs	r4, #1
   2465e:	e7f9      	b.n	24654 <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24660:	2c0a      	cmp	r4, #10
   24662:	d001      	beq.n	24668 <check_addr+0x28>
	return true;
   24664:	2401      	movs	r4, #1
   24666:	e7f5      	b.n	24654 <check_addr+0x14>
		if (is_remote) {
   24668:	b162      	cbz	r2, 24684 <check_addr+0x44>
	return pkt->frags->data;
   2466a:	6883      	ldr	r3, [r0, #8]
   2466c:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   2466e:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24670:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24672:	b95a      	cbnz	r2, 2468c <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24674:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24676:	b9ba      	cbnz	r2, 246a8 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24678:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2467a:	b9ba      	cbnz	r2, 246ac <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2467c:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2467e:	b1ba      	cbz	r2, 246b0 <check_addr+0x70>
   24680:	2200      	movs	r2, #0
   24682:	e004      	b.n	2468e <check_addr+0x4e>
   24684:	6883      	ldr	r3, [r0, #8]
   24686:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   24688:	3318      	adds	r3, #24
   2468a:	e7f1      	b.n	24670 <check_addr+0x30>
   2468c:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   2468e:	4614      	mov	r4, r2
   24690:	2a00      	cmp	r2, #0
   24692:	d1df      	bne.n	24654 <check_addr+0x14>
   24694:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24696:	2210      	movs	r2, #16
   24698:	4619      	mov	r1, r3
   2469a:	3004      	adds	r0, #4
   2469c:	f006 f97a 	bl	2a994 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   246a0:	2800      	cmp	r0, #0
   246a2:	d1d7      	bne.n	24654 <check_addr+0x14>
		return true;
   246a4:	2401      	movs	r4, #1
   246a6:	e7d5      	b.n	24654 <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   246a8:	2200      	movs	r2, #0
   246aa:	e7f0      	b.n	2468e <check_addr+0x4e>
   246ac:	2200      	movs	r2, #0
   246ae:	e7ee      	b.n	2468e <check_addr+0x4e>
   246b0:	2201      	movs	r2, #1
   246b2:	e7ec      	b.n	2468e <check_addr+0x4e>

000246b4 <net_conn_unregister>:
{
   246b4:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   246b6:	4b0d      	ldr	r3, [pc, #52]	; (246ec <net_conn_unregister+0x38>)
   246b8:	4298      	cmp	r0, r3
   246ba:	d30d      	bcc.n	246d8 <net_conn_unregister+0x24>
   246bc:	33f0      	adds	r3, #240	; 0xf0
   246be:	4298      	cmp	r0, r3
   246c0:	d80d      	bhi.n	246de <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   246c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   246c6:	f013 0f01 	tst.w	r3, #1
   246ca:	d00b      	beq.n	246e4 <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   246cc:	223c      	movs	r2, #60	; 0x3c
   246ce:	2100      	movs	r1, #0
   246d0:	f006 f9f4 	bl	2aabc <memset>
	return 0;
   246d4:	2000      	movs	r0, #0
   246d6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   246d8:	f06f 0015 	mvn.w	r0, #21
   246dc:	bd08      	pop	{r3, pc}
   246de:	f06f 0015 	mvn.w	r0, #21
   246e2:	bd08      	pop	{r3, pc}
		return -ENOENT;
   246e4:	f06f 0001 	mvn.w	r0, #1
}
   246e8:	bd08      	pop	{r3, pc}
   246ea:	bf00      	nop
   246ec:	20000444 	.word	0x20000444

000246f0 <net_conn_register>:
{
   246f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   246f4:	b082      	sub	sp, #8
   246f6:	4681      	mov	r9, r0
   246f8:	460d      	mov	r5, r1
   246fa:	4616      	mov	r6, r2
   246fc:	4698      	mov	r8, r3
   246fe:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   24702:	9700      	str	r7, [sp, #0]
   24704:	f7ff ff0e 	bl	24524 <find_conn_handler>
	if (i != -ENOENT) {
   24708:	f110 0f02 	cmn.w	r0, #2
   2470c:	f040 80ba 	bne.w	24884 <net_conn_register+0x194>
   24710:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24712:	2c03      	cmp	r4, #3
   24714:	f300 80aa 	bgt.w	2486c <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   24718:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2471c:	009a      	lsls	r2, r3, #2
   2471e:	4b60      	ldr	r3, [pc, #384]	; (248a0 <net_conn_register+0x1b0>)
   24720:	4413      	add	r3, r2
   24722:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24726:	f013 0f01 	tst.w	r3, #1
   2472a:	d001      	beq.n	24730 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2472c:	3401      	adds	r4, #1
   2472e:	e7f0      	b.n	24712 <net_conn_register+0x22>
		if (remote_addr) {
   24730:	2d00      	cmp	r5, #0
   24732:	d04b      	beq.n	247cc <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   24734:	882b      	ldrh	r3, [r5, #0]
   24736:	2b0a      	cmp	r3, #10
   24738:	f040 80a7 	bne.w	2488a <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   2473c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24740:	0093      	lsls	r3, r2, #2
   24742:	2218      	movs	r2, #24
   24744:	4629      	mov	r1, r5
   24746:	4856      	ldr	r0, [pc, #344]	; (248a0 <net_conn_register+0x1b0>)
   24748:	4418      	add	r0, r3
   2474a:	f7db fdb9 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2474e:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24750:	b93b      	cbnz	r3, 24762 <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24752:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24754:	bb8b      	cbnz	r3, 247ba <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24756:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24758:	bb8b      	cbnz	r3, 247be <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2475a:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2475c:	b38b      	cbz	r3, 247c2 <net_conn_register+0xd2>
   2475e:	2300      	movs	r3, #0
   24760:	e000      	b.n	24764 <net_conn_register+0x74>
   24762:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   24764:	b37b      	cbz	r3, 247c6 <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   24766:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   2476a:	0122      	lsls	r2, r4, #4
   2476c:	1b12      	subs	r2, r2, r4
   2476e:	0091      	lsls	r1, r2, #2
   24770:	4b4b      	ldr	r3, [pc, #300]	; (248a0 <net_conn_register+0x1b0>)
   24772:	440b      	add	r3, r1
   24774:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24778:	f042 0202 	orr.w	r2, r2, #2
   2477c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   24780:	2e00      	cmp	r6, #0
   24782:	d036      	beq.n	247f2 <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   24784:	8833      	ldrh	r3, [r6, #0]
   24786:	2b0a      	cmp	r3, #10
   24788:	f040 8082 	bne.w	24890 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   2478c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24790:	0098      	lsls	r0, r3, #2
   24792:	3018      	adds	r0, #24
   24794:	2218      	movs	r2, #24
   24796:	4631      	mov	r1, r6
   24798:	4b41      	ldr	r3, [pc, #260]	; (248a0 <net_conn_register+0x1b0>)
   2479a:	4418      	add	r0, r3
   2479c:	f7db fd90 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   247a0:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   247a2:	b9b3      	cbnz	r3, 247d2 <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   247a4:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   247a6:	2b00      	cmp	r3, #0
   247a8:	d163      	bne.n	24872 <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   247aa:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   247ac:	2b00      	cmp	r3, #0
   247ae:	d162      	bne.n	24876 <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   247b0:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   247b2:	2b00      	cmp	r3, #0
   247b4:	d061      	beq.n	2487a <net_conn_register+0x18a>
   247b6:	2300      	movs	r3, #0
   247b8:	e00c      	b.n	247d4 <net_conn_register+0xe4>
   247ba:	2300      	movs	r3, #0
   247bc:	e7d2      	b.n	24764 <net_conn_register+0x74>
   247be:	2300      	movs	r3, #0
   247c0:	e7d0      	b.n	24764 <net_conn_register+0x74>
   247c2:	2301      	movs	r3, #1
   247c4:	e7ce      	b.n	24764 <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   247c6:	f04f 0a20 	mov.w	sl, #32
   247ca:	e7ce      	b.n	2476a <net_conn_register+0x7a>
	u8_t rank = 0;
   247cc:	f04f 0a00 	mov.w	sl, #0
   247d0:	e7d6      	b.n	24780 <net_conn_register+0x90>
   247d2:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   247d4:	2b00      	cmp	r3, #0
   247d6:	d052      	beq.n	2487e <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   247d8:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   247dc:	0122      	lsls	r2, r4, #4
   247de:	1b12      	subs	r2, r2, r4
   247e0:	0091      	lsls	r1, r2, #2
   247e2:	4b2f      	ldr	r3, [pc, #188]	; (248a0 <net_conn_register+0x1b0>)
   247e4:	440b      	add	r3, r1
   247e6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   247ea:	f042 0204 	orr.w	r2, r2, #4
   247ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   247f2:	b125      	cbz	r5, 247fe <net_conn_register+0x10e>
   247f4:	b11e      	cbz	r6, 247fe <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   247f6:	882a      	ldrh	r2, [r5, #0]
   247f8:	8833      	ldrh	r3, [r6, #0]
   247fa:	429a      	cmp	r2, r3
   247fc:	d14b      	bne.n	24896 <net_conn_register+0x1a6>
		if (remote_port) {
   247fe:	f1b8 0f00 	cmp.w	r8, #0
   24802:	d00c      	beq.n	2481e <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   24804:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   24808:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2480c:	009a      	lsls	r2, r3, #2
   2480e:	4b24      	ldr	r3, [pc, #144]	; (248a0 <net_conn_register+0x1b0>)
   24810:	4413      	add	r3, r2
				htons(remote_port);
   24812:	ea4f 2218 	mov.w	r2, r8, lsr #8
   24816:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   2481a:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   2481e:	b15f      	cbz	r7, 24838 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   24820:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   24824:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24828:	0093      	lsls	r3, r2, #2
   2482a:	3318      	adds	r3, #24
   2482c:	4a1c      	ldr	r2, [pc, #112]	; (248a0 <net_conn_register+0x1b0>)
   2482e:	4413      	add	r3, r2
				htons(local_port);
   24830:	0a3a      	lsrs	r2, r7, #8
   24832:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   24836:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   24838:	0122      	lsls	r2, r4, #4
   2483a:	1b12      	subs	r2, r2, r4
   2483c:	0091      	lsls	r1, r2, #2
   2483e:	4b18      	ldr	r3, [pc, #96]	; (248a0 <net_conn_register+0x1b0>)
   24840:	440b      	add	r3, r1
   24842:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24846:	f042 0201 	orr.w	r2, r2, #1
   2484a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   2484e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24850:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   24852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24854:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   24856:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   2485a:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   2485e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24860:	b1e3      	cbz	r3, 2489c <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   24862:	4b0f      	ldr	r3, [pc, #60]	; (248a0 <net_conn_register+0x1b0>)
   24864:	440b      	add	r3, r1
   24866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24868:	6013      	str	r3, [r2, #0]
		return 0;
   2486a:	2000      	movs	r0, #0
}
   2486c:	b002      	add	sp, #8
   2486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24872:	2300      	movs	r3, #0
   24874:	e7ae      	b.n	247d4 <net_conn_register+0xe4>
   24876:	2300      	movs	r3, #0
   24878:	e7ac      	b.n	247d4 <net_conn_register+0xe4>
   2487a:	2301      	movs	r3, #1
   2487c:	e7aa      	b.n	247d4 <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   2487e:	f04a 0a10 	orr.w	sl, sl, #16
   24882:	e7ab      	b.n	247dc <net_conn_register+0xec>
		return -EALREADY;
   24884:	f06f 0077 	mvn.w	r0, #119	; 0x77
   24888:	e7f0      	b.n	2486c <net_conn_register+0x17c>
				return -EINVAL;
   2488a:	f06f 0015 	mvn.w	r0, #21
   2488e:	e7ed      	b.n	2486c <net_conn_register+0x17c>
				return -EINVAL;
   24890:	f06f 0015 	mvn.w	r0, #21
   24894:	e7ea      	b.n	2486c <net_conn_register+0x17c>
				return -EINVAL;
   24896:	f06f 0015 	mvn.w	r0, #21
   2489a:	e7e7      	b.n	2486c <net_conn_register+0x17c>
		return 0;
   2489c:	2000      	movs	r0, #0
   2489e:	e7e5      	b.n	2486c <net_conn_register+0x17c>
   248a0:	20000444 	.word	0x20000444

000248a4 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   248a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248a8:	b089      	sub	sp, #36	; 0x24
   248aa:	4605      	mov	r5, r0
   248ac:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   248ae:	2811      	cmp	r0, #17
   248b0:	d005      	beq.n	248be <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   248b2:	2806      	cmp	r0, #6
   248b4:	d015      	beq.n	248e2 <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   248b6:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   248b8:	b009      	add	sp, #36	; 0x24
   248ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   248be:	a903      	add	r1, sp, #12
   248c0:	4630      	mov	r0, r6
   248c2:	f7fd ff73 	bl	227ac <net_udp_get_hdr>
		if (!udp_hdr) {
   248c6:	b150      	cbz	r0, 248de <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   248c8:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   248cc:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   248d0:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   248d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   248d8:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   248da:	2400      	movs	r4, #0
   248dc:	e01b      	b.n	24916 <net_conn_input+0x72>
			return NET_DROP;
   248de:	2002      	movs	r0, #2
   248e0:	e7ea      	b.n	248b8 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   248e2:	a903      	add	r1, sp, #12
   248e4:	4630      	mov	r0, r6
   248e6:	f7fe fbcd 	bl	23084 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   248ea:	b130      	cbz	r0, 248fa <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   248ec:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   248f0:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   248f4:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   248f8:	e7ec      	b.n	248d4 <net_conn_input+0x30>
			return NET_DROP;
   248fa:	2002      	movs	r0, #2
   248fc:	e7dc      	b.n	248b8 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   248fe:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   24902:	0082      	lsls	r2, r0, #2
   24904:	3218      	adds	r2, #24
   24906:	4866      	ldr	r0, [pc, #408]	; (24aa0 <net_conn_input+0x1fc>)
   24908:	1882      	adds	r2, r0, r2
   2490a:	9201      	str	r2, [sp, #4]
   2490c:	8852      	ldrh	r2, [r2, #2]
   2490e:	b1fa      	cbz	r2, 24950 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   24910:	4593      	cmp	fp, r2
   24912:	d01d      	beq.n	24950 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24914:	3401      	adds	r4, #1
   24916:	2c03      	cmp	r4, #3
   24918:	dc4d      	bgt.n	249b6 <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2491a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2491e:	009a      	lsls	r2, r3, #2
   24920:	4b5f      	ldr	r3, [pc, #380]	; (24aa0 <net_conn_input+0x1fc>)
   24922:	4413      	add	r3, r2
   24924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24928:	f013 0f01 	tst.w	r3, #1
   2492c:	d0f2      	beq.n	24914 <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   2492e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24932:	0091      	lsls	r1, r2, #2
   24934:	4a5a      	ldr	r2, [pc, #360]	; (24aa0 <net_conn_input+0x1fc>)
   24936:	440a      	add	r2, r1
   24938:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   2493c:	4295      	cmp	r5, r2
   2493e:	d1e9      	bne.n	24914 <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   24940:	4a57      	ldr	r2, [pc, #348]	; (24aa0 <net_conn_input+0x1fc>)
   24942:	4411      	add	r1, r2
   24944:	884a      	ldrh	r2, [r1, #2]
   24946:	2a00      	cmp	r2, #0
   24948:	d0d9      	beq.n	248fe <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   2494a:	4591      	cmp	r9, r2
   2494c:	d1e2      	bne.n	24914 <net_conn_input+0x70>
   2494e:	e7d6      	b.n	248fe <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24950:	f013 0f02 	tst.w	r3, #2
   24954:	d120      	bne.n	24998 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   24956:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2495a:	009a      	lsls	r2, r3, #2
   2495c:	4b50      	ldr	r3, [pc, #320]	; (24aa0 <net_conn_input+0x1fc>)
   2495e:	4413      	add	r3, r2
   24960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24964:	f013 0f04 	tst.w	r3, #4
   24968:	d11d      	bne.n	249a6 <net_conn_input+0x102>
		if (best_match >= 0 &&
   2496a:	2f00      	cmp	r7, #0
   2496c:	db07      	blt.n	2497e <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   2496e:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   24972:	009a      	lsls	r2, r3, #2
   24974:	4b4a      	ldr	r3, [pc, #296]	; (24aa0 <net_conn_input+0x1fc>)
   24976:	4413      	add	r3, r2
   24978:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   2497a:	2b00      	cmp	r3, #0
   2497c:	d1ca      	bne.n	24914 <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   2497e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24982:	009a      	lsls	r2, r3, #2
   24984:	4b46      	ldr	r3, [pc, #280]	; (24aa0 <net_conn_input+0x1fc>)
   24986:	4413      	add	r3, r2
   24988:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   2498c:	4598      	cmp	r8, r3
   2498e:	dac1      	bge.n	24914 <net_conn_input+0x70>
			best_rank = conns[i].rank;
   24990:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   24994:	4627      	mov	r7, r4
   24996:	e7bd      	b.n	24914 <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   24998:	2201      	movs	r2, #1
   2499a:	4630      	mov	r0, r6
   2499c:	f7ff fe50 	bl	24640 <check_addr>
   249a0:	2800      	cmp	r0, #0
   249a2:	d0b7      	beq.n	24914 <net_conn_input+0x70>
   249a4:	e7d7      	b.n	24956 <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   249a6:	2200      	movs	r2, #0
   249a8:	9901      	ldr	r1, [sp, #4]
   249aa:	4630      	mov	r0, r6
   249ac:	f7ff fe48 	bl	24640 <check_addr>
   249b0:	2800      	cmp	r0, #0
   249b2:	d0af      	beq.n	24914 <net_conn_input+0x70>
   249b4:	e7d9      	b.n	2496a <net_conn_input+0xc6>
	if (best_match >= 0) {
   249b6:	2f00      	cmp	r7, #0
   249b8:	db44      	blt.n	24a44 <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   249ba:	2d11      	cmp	r5, #17
   249bc:	d014      	beq.n	249e8 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   249be:	2d06      	cmp	r5, #6
   249c0:	d023      	beq.n	24a0a <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   249c2:	4c37      	ldr	r4, [pc, #220]	; (24aa0 <net_conn_input+0x1fc>)
   249c4:	013a      	lsls	r2, r7, #4
   249c6:	1bd1      	subs	r1, r2, r7
   249c8:	008b      	lsls	r3, r1, #2
   249ca:	4423      	add	r3, r4
   249cc:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   249d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   249d2:	4631      	mov	r1, r6
   249d4:	4618      	mov	r0, r3
   249d6:	47c0      	blx	r8
   249d8:	2802      	cmp	r0, #2
   249da:	d03d      	beq.n	24a58 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   249dc:	2d11      	cmp	r5, #17
   249de:	d023      	beq.n	24a28 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   249e0:	2d06      	cmp	r5, #6
   249e2:	d029      	beq.n	24a38 <net_conn_input+0x194>
		return NET_OK;
   249e4:	2000      	movs	r0, #0
   249e6:	e767      	b.n	248b8 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   249e8:	68b1      	ldr	r1, [r6, #8]
   249ea:	4630      	mov	r0, r6
   249ec:	f7fd fe6b 	bl	226c6 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   249f0:	68b1      	ldr	r1, [r6, #8]
   249f2:	4630      	mov	r0, r6
   249f4:	f7fd feb4 	bl	22760 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   249f8:	4582      	cmp	sl, r0
   249fa:	d0e2      	beq.n	249c2 <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   249fc:	4a29      	ldr	r2, [pc, #164]	; (24aa4 <net_conn_input+0x200>)
   249fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   24a02:	3301      	adds	r3, #1
   24a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   24a08:	e026      	b.n	24a58 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   24a0a:	68b1      	ldr	r1, [r6, #8]
   24a0c:	4630      	mov	r0, r6
   24a0e:	f7fe fc9e 	bl	2334e <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   24a12:	68b1      	ldr	r1, [r6, #8]
   24a14:	4630      	mov	r0, r6
   24a16:	f7fe fc74 	bl	23302 <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   24a1a:	4582      	cmp	sl, r0
   24a1c:	d0d1      	beq.n	249c2 <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   24a1e:	4a21      	ldr	r2, [pc, #132]	; (24aa4 <net_conn_input+0x200>)
   24a20:	6e13      	ldr	r3, [r2, #96]	; 0x60
   24a22:	3301      	adds	r3, #1
   24a24:	6613      	str	r3, [r2, #96]	; 0x60
   24a26:	e017      	b.n	24a58 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   24a28:	4a1e      	ldr	r2, [pc, #120]	; (24aa4 <net_conn_input+0x200>)
   24a2a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   24a2e:	3301      	adds	r3, #1
   24a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   24a34:	2000      	movs	r0, #0
   24a36:	e73f      	b.n	248b8 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   24a38:	4a1a      	ldr	r2, [pc, #104]	; (24aa4 <net_conn_input+0x200>)
   24a3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   24a3c:	3301      	adds	r3, #1
   24a3e:	6553      	str	r3, [r2, #84]	; 0x54
   24a40:	2000      	movs	r0, #0
   24a42:	e739      	b.n	248b8 <net_conn_input+0x14>
	return pkt->family;
   24a44:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   24a48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   24a4c:	2b0a      	cmp	r3, #10
   24a4e:	d009      	beq.n	24a64 <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   24a50:	2b0a      	cmp	r3, #10
   24a52:	d00d      	beq.n	24a70 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24a54:	2d06      	cmp	r5, #6
   24a56:	d012      	beq.n	24a7e <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24a58:	2d11      	cmp	r5, #17
   24a5a:	d015      	beq.n	24a88 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24a5c:	2d06      	cmp	r5, #6
   24a5e:	d019      	beq.n	24a94 <net_conn_input+0x1f0>
	return NET_DROP;
   24a60:	2002      	movs	r0, #2
   24a62:	e729      	b.n	248b8 <net_conn_input+0x14>
	return pkt->frags->data;
   24a64:	68b2      	ldr	r2, [r6, #8]
   24a66:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   24a68:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   24a6a:	2aff      	cmp	r2, #255	; 0xff
   24a6c:	d1f0      	bne.n	24a50 <net_conn_input+0x1ac>
   24a6e:	e7f3      	b.n	24a58 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   24a70:	2300      	movs	r3, #0
   24a72:	2204      	movs	r2, #4
   24a74:	2101      	movs	r1, #1
   24a76:	4630      	mov	r0, r6
   24a78:	f7f9 fc94 	bl	1e3a4 <net_icmpv6_send_error>
   24a7c:	e7ea      	b.n	24a54 <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   24a7e:	4a09      	ldr	r2, [pc, #36]	; (24aa4 <net_conn_input+0x200>)
   24a80:	6f93      	ldr	r3, [r2, #120]	; 0x78
   24a82:	3301      	adds	r3, #1
   24a84:	6793      	str	r3, [r2, #120]	; 0x78
   24a86:	e7e7      	b.n	24a58 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   24a88:	4a06      	ldr	r2, [pc, #24]	; (24aa4 <net_conn_input+0x200>)
   24a8a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   24a8c:	3301      	adds	r3, #1
   24a8e:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   24a90:	2002      	movs	r0, #2
   24a92:	e711      	b.n	248b8 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   24a94:	4a03      	ldr	r2, [pc, #12]	; (24aa4 <net_conn_input+0x200>)
   24a96:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   24a98:	3301      	adds	r3, #1
   24a9a:	65d3      	str	r3, [r2, #92]	; 0x5c
   24a9c:	2002      	movs	r0, #2
   24a9e:	e70b      	b.n	248b8 <net_conn_input+0x14>
   24aa0:	20000444 	.word	0x20000444
   24aa4:	200029f0 	.word	0x200029f0

00024aa8 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   24aa8:	4770      	bx	lr

00024aaa <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   24aaa:	297f      	cmp	r1, #127	; 0x7f
   24aac:	d912      	bls.n	24ad4 <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   24aae:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   24ab2:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   24ab6:	d311      	bcc.n	24adc <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   24ab8:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   24abc:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   24ac0:	d310      	bcc.n	24ae4 <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   24ac2:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   24ac6:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   24aca:	d20f      	bcs.n	24aec <compute_rlen_size+0x42>
		*size = 4;
   24acc:	2304      	movs	r3, #4
   24ace:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   24ad0:	2000      	movs	r0, #0
   24ad2:	4770      	bx	lr
		*size = 1;
   24ad4:	2301      	movs	r3, #1
   24ad6:	8003      	strh	r3, [r0, #0]
	return 0;
   24ad8:	2000      	movs	r0, #0
   24ada:	4770      	bx	lr
		*size = 2;
   24adc:	2302      	movs	r3, #2
   24ade:	8003      	strh	r3, [r0, #0]
	return 0;
   24ae0:	2000      	movs	r0, #0
   24ae2:	4770      	bx	lr
		*size = 3;
   24ae4:	2303      	movs	r3, #3
   24ae6:	8003      	strh	r3, [r0, #0]
	return 0;
   24ae8:	2000      	movs	r0, #0
   24aea:	4770      	bx	lr
		return -EINVAL;
   24aec:	f06f 0015 	mvn.w	r0, #21
}
   24af0:	4770      	bx	lr

00024af2 <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   24af2:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   24af4:	2200      	movs	r2, #0
   24af6:	e004      	b.n	24b02 <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   24af8:	1c53      	adds	r3, r2, #1
   24afa:	b2db      	uxtb	r3, r3
   24afc:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   24afe:	b139      	cbz	r1, 24b10 <rlen_encode+0x1e>
		buf[i++] = encoded;
   24b00:	461a      	mov	r2, r3
		encoded = len % 128;
   24b02:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   24b06:	09c9      	lsrs	r1, r1, #7
   24b08:	d0f6      	beq.n	24af8 <rlen_encode+0x6>
			encoded = encoded | 128;
   24b0a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   24b0e:	e7f3      	b.n	24af8 <rlen_encode+0x6>

	return 0;
}
   24b10:	2000      	movs	r0, #0
   24b12:	bc10      	pop	{r4}
   24b14:	4770      	bx	lr

00024b16 <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   24b16:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   24b18:	2400      	movs	r4, #0
	u32_t mult = 1;
   24b1a:	2601      	movs	r6, #1
	u32_t value = 0;
   24b1c:	4627      	mov	r7, r4
   24b1e:	e000      	b.n	24b22 <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   24b20:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   24b22:	2c03      	cmp	r4, #3
   24b24:	d810      	bhi.n	24b48 <rlen_decode+0x32>
   24b26:	429c      	cmp	r4, r3
   24b28:	d211      	bcs.n	24b4e <rlen_decode+0x38>
		encoded = buf[i++];
   24b2a:	1c65      	adds	r5, r4, #1
   24b2c:	b2ad      	uxth	r5, r5
   24b2e:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   24b30:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   24b34:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   24b38:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   24b3a:	f014 0f80 	tst.w	r4, #128	; 0x80
   24b3e:	d1ef      	bne.n	24b20 <rlen_decode+0xa>

	*rlen = value;
   24b40:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   24b42:	800d      	strh	r5, [r1, #0]

	return 0;
   24b44:	2000      	movs	r0, #0
   24b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   24b48:	f06f 000b 	mvn.w	r0, #11
   24b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24b4e:	f06f 000b 	mvn.w	r0, #11
}
   24b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024b54 <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   24b54:	b410      	push	{r4}
   24b56:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   24b5a:	2a03      	cmp	r2, #3
   24b5c:	d912      	bls.n	24b84 <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   24b5e:	011b      	lsls	r3, r3, #4
   24b60:	b2db      	uxtb	r3, r3
   24b62:	f89d 2004 	ldrb.w	r2, [sp, #4]
   24b66:	f002 020f 	and.w	r2, r2, #15
   24b6a:	4413      	add	r3, r2
   24b6c:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   24b6e:	2302      	movs	r3, #2
   24b70:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   24b72:	0a23      	lsrs	r3, r4, #8
   24b74:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   24b78:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   24b7a:	2304      	movs	r3, #4
   24b7c:	800b      	strh	r3, [r1, #0]

	return 0;
   24b7e:	2000      	movs	r0, #0
}
   24b80:	bc10      	pop	{r4}
   24b82:	4770      	bx	lr
		return -ENOMEM;
   24b84:	f06f 000b 	mvn.w	r0, #11
   24b88:	e7fa      	b.n	24b80 <pack_pkt_id+0x2c>

00024b8a <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   24b8a:	2a01      	cmp	r2, #1
   24b8c:	d90d      	bls.n	24baa <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   24b8e:	011b      	lsls	r3, r3, #4
   24b90:	b2db      	uxtb	r3, r3
   24b92:	f89d 2000 	ldrb.w	r2, [sp]
   24b96:	f002 020f 	and.w	r2, r2, #15
   24b9a:	4413      	add	r3, r2
   24b9c:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   24b9e:	2300      	movs	r3, #0
   24ba0:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   24ba2:	2202      	movs	r2, #2
   24ba4:	800a      	strh	r2, [r1, #0]

	return 0;
   24ba6:	4618      	mov	r0, r3
   24ba8:	4770      	bx	lr
		return -ENOMEM;
   24baa:	f06f 000b 	mvn.w	r0, #11
}
   24bae:	4770      	bx	lr

00024bb0 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   24bb0:	2903      	cmp	r1, #3
   24bb2:	d911      	bls.n	24bd8 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   24bb4:	7841      	ldrb	r1, [r0, #1]
   24bb6:	2902      	cmp	r1, #2
   24bb8:	d111      	bne.n	24bde <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   24bba:	7801      	ldrb	r1, [r0, #0]
   24bbc:	0909      	lsrs	r1, r1, #4
   24bbe:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24bc0:	7802      	ldrb	r2, [r0, #0]
   24bc2:	f002 020f 	and.w	r2, r2, #15
   24bc6:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   24bc8:	8842      	ldrh	r2, [r0, #2]
   24bca:	0a13      	lsrs	r3, r2, #8
   24bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24bd0:	9a00      	ldr	r2, [sp, #0]
   24bd2:	8013      	strh	r3, [r2, #0]

	return 0;
   24bd4:	2000      	movs	r0, #0
   24bd6:	4770      	bx	lr
		return -EINVAL;
   24bd8:	f06f 0015 	mvn.w	r0, #21
   24bdc:	4770      	bx	lr
		return -EINVAL;
   24bde:	f06f 0015 	mvn.w	r0, #21
}
   24be2:	4770      	bx	lr

00024be4 <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   24be4:	b510      	push	{r4, lr}
   24be6:	b084      	sub	sp, #16
   24be8:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   24bea:	9200      	str	r2, [sp, #0]
   24bec:	f10d 030e 	add.w	r3, sp, #14
   24bf0:	f10d 020f 	add.w	r2, sp, #15
   24bf4:	f7ff ffdc 	bl	24bb0 <unpack_pktid>
	if (rc != 0) {
   24bf8:	4603      	mov	r3, r0
   24bfa:	b948      	cbnz	r0, 24c10 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   24bfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24c00:	42a2      	cmp	r2, r4
   24c02:	d10b      	bne.n	24c1c <unpack_pktid_validate+0x38>
   24c04:	f89d 100e 	ldrb.w	r1, [sp, #14]
   24c08:	f89d 2018 	ldrb.w	r2, [sp, #24]
   24c0c:	4291      	cmp	r1, r2
   24c0e:	d102      	bne.n	24c16 <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   24c10:	4618      	mov	r0, r3
   24c12:	b004      	add	sp, #16
   24c14:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24c16:	f06f 0315 	mvn.w	r3, #21
   24c1a:	e7f9      	b.n	24c10 <unpack_pktid_validate+0x2c>
   24c1c:	f06f 0315 	mvn.w	r3, #21
   24c20:	e7f6      	b.n	24c10 <unpack_pktid_validate+0x2c>

00024c22 <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   24c22:	2901      	cmp	r1, #1
   24c24:	d90d      	bls.n	24c42 <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   24c26:	7801      	ldrb	r1, [r0, #0]
   24c28:	0909      	lsrs	r1, r1, #4
   24c2a:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24c2c:	7802      	ldrb	r2, [r0, #0]
   24c2e:	f002 020f 	and.w	r2, r2, #15
   24c32:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   24c34:	7843      	ldrb	r3, [r0, #1]
   24c36:	b90b      	cbnz	r3, 24c3c <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   24c38:	2000      	movs	r0, #0
}
   24c3a:	4770      	bx	lr
		return -EINVAL;
   24c3c:	f06f 0015 	mvn.w	r0, #21
   24c40:	4770      	bx	lr
		return -EINVAL;
   24c42:	f06f 0015 	mvn.w	r0, #21
   24c46:	4770      	bx	lr

00024c48 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   24c48:	b530      	push	{r4, r5, lr}
   24c4a:	b083      	sub	sp, #12
   24c4c:	4614      	mov	r4, r2
   24c4e:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   24c50:	f10d 0306 	add.w	r3, sp, #6
   24c54:	f10d 0207 	add.w	r2, sp, #7
   24c58:	f7ff ffe3 	bl	24c22 <unpack_zerolen>
	if (rc != 0) {
   24c5c:	4603      	mov	r3, r0
   24c5e:	b938      	cbnz	r0, 24c70 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   24c60:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24c64:	42a2      	cmp	r2, r4
   24c66:	d109      	bne.n	24c7c <unpack_zerolen_validate+0x34>
   24c68:	f89d 2006 	ldrb.w	r2, [sp, #6]
   24c6c:	42aa      	cmp	r2, r5
   24c6e:	d102      	bne.n	24c76 <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   24c70:	4618      	mov	r0, r3
   24c72:	b003      	add	sp, #12
   24c74:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24c76:	f06f 0315 	mvn.w	r3, #21
   24c7a:	e7f9      	b.n	24c70 <unpack_zerolen_validate+0x28>
   24c7c:	f06f 0315 	mvn.w	r3, #21
   24c80:	e7f6      	b.n	24c70 <unpack_zerolen_validate+0x28>

00024c82 <mqtt_pack_puback>:
{
   24c82:	b500      	push	{lr}
   24c84:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   24c86:	9301      	str	r3, [sp, #4]
   24c88:	2300      	movs	r3, #0
   24c8a:	9300      	str	r3, [sp, #0]
   24c8c:	2304      	movs	r3, #4
   24c8e:	f7ff ff61 	bl	24b54 <pack_pkt_id>
}
   24c92:	b003      	add	sp, #12
   24c94:	f85d fb04 	ldr.w	pc, [sp], #4

00024c98 <mqtt_pack_pubrec>:
{
   24c98:	b500      	push	{lr}
   24c9a:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   24c9c:	9301      	str	r3, [sp, #4]
   24c9e:	2300      	movs	r3, #0
   24ca0:	9300      	str	r3, [sp, #0]
   24ca2:	2305      	movs	r3, #5
   24ca4:	f7ff ff56 	bl	24b54 <pack_pkt_id>
}
   24ca8:	b003      	add	sp, #12
   24caa:	f85d fb04 	ldr.w	pc, [sp], #4

00024cae <mqtt_pack_pubrel>:
{
   24cae:	b500      	push	{lr}
   24cb0:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   24cb2:	9301      	str	r3, [sp, #4]
   24cb4:	2302      	movs	r3, #2
   24cb6:	9300      	str	r3, [sp, #0]
   24cb8:	2306      	movs	r3, #6
   24cba:	f7ff ff4b 	bl	24b54 <pack_pkt_id>
}
   24cbe:	b003      	add	sp, #12
   24cc0:	f85d fb04 	ldr.w	pc, [sp], #4

00024cc4 <mqtt_pack_pubcomp>:
{
   24cc4:	b500      	push	{lr}
   24cc6:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   24cc8:	9301      	str	r3, [sp, #4]
   24cca:	2300      	movs	r3, #0
   24ccc:	9300      	str	r3, [sp, #0]
   24cce:	2307      	movs	r3, #7
   24cd0:	f7ff ff40 	bl	24b54 <pack_pkt_id>
}
   24cd4:	b003      	add	sp, #12
   24cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00024cda <mqtt_pack_connect>:
{
   24cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24cde:	b082      	sub	sp, #8
   24ce0:	4605      	mov	r5, r0
   24ce2:	460e      	mov	r6, r1
   24ce4:	4617      	mov	r7, r2
   24ce6:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   24ce8:	891b      	ldrh	r3, [r3, #8]
   24cea:	1c99      	adds	r1, r3, #2
   24cec:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   24cee:	7aa2      	ldrb	r2, [r4, #10]
   24cf0:	f012 0f01 	tst.w	r2, #1
   24cf4:	d009      	beq.n	24d0a <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   24cf6:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   24cf8:	8aa3      	ldrh	r3, [r4, #20]
   24cfa:	fa13 f181 	uxtah	r1, r3, r1
   24cfe:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   24d00:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   24d02:	8ba3      	ldrh	r3, [r4, #28]
   24d04:	fa13 f181 	uxtah	r1, r3, r1
   24d08:	b289      	uxth	r1, r1
	if (msg->user_name) {
   24d0a:	6a23      	ldr	r3, [r4, #32]
   24d0c:	b123      	cbz	r3, 24d18 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   24d0e:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   24d10:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   24d12:	fa13 f181 	uxtah	r1, r3, r1
   24d16:	b289      	uxth	r1, r1
	if (msg->password) {
   24d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24d1a:	b123      	cbz	r3, 24d26 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   24d1c:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   24d1e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   24d20:	fa13 f181 	uxtah	r1, r3, r1
   24d24:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   24d26:	310a      	adds	r1, #10
   24d28:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   24d2c:	4651      	mov	r1, sl
   24d2e:	f10d 0006 	add.w	r0, sp, #6
   24d32:	f7ff feba 	bl	24aaa <compute_rlen_size>
	if (rc != 0) {
   24d36:	4681      	mov	r9, r0
   24d38:	2800      	cmp	r0, #0
   24d3a:	f040 80b6 	bne.w	24eaa <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   24d3e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   24d42:	44d0      	add	r8, sl
   24d44:	fa1f f888 	uxth.w	r8, r8
   24d48:	f108 0801 	add.w	r8, r8, #1
   24d4c:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   24d50:	45b8      	cmp	r8, r7
   24d52:	f200 80ad 	bhi.w	24eb0 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   24d56:	4628      	mov	r0, r5
   24d58:	2310      	movs	r3, #16
   24d5a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   24d5e:	4651      	mov	r1, sl
   24d60:	f7ff fec7 	bl	24af2 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24d64:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   24d68:	1c43      	adds	r3, r0, #1
   24d6a:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   24d6c:	2200      	movs	r2, #0
   24d6e:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   24d70:	1c59      	adds	r1, r3, #1
   24d72:	2204      	movs	r2, #4
   24d74:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   24d76:	1c99      	adds	r1, r3, #2
   24d78:	274d      	movs	r7, #77	; 0x4d
   24d7a:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   24d7c:	1cd9      	adds	r1, r3, #3
   24d7e:	2751      	movs	r7, #81	; 0x51
   24d80:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   24d82:	189f      	adds	r7, r3, r2
   24d84:	2154      	movs	r1, #84	; 0x54
   24d86:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   24d88:	1d5f      	adds	r7, r3, #5
   24d8a:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   24d8c:	1d99      	adds	r1, r3, #6
   24d8e:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d90:	1ddf      	adds	r7, r3, #7
   24d92:	6a22      	ldr	r2, [r4, #32]
   24d94:	2a00      	cmp	r2, #0
   24d96:	d05f      	beq.n	24e58 <mqtt_pack_connect+0x17e>
   24d98:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   24d9c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d9e:	2a00      	cmp	r2, #0
   24da0:	d05c      	beq.n	24e5c <mqtt_pack_connect+0x182>
   24da2:	2240      	movs	r2, #64	; 0x40
   24da4:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   24da6:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   24da8:	f012 0f01 	tst.w	r2, #1
   24dac:	d058      	beq.n	24e60 <mqtt_pack_connect+0x186>
   24dae:	2220      	movs	r2, #32
   24db0:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   24db2:	7ae2      	ldrb	r2, [r4, #11]
   24db4:	00d2      	lsls	r2, r2, #3
   24db6:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   24dba:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   24dbc:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   24dbe:	f011 0f01 	tst.w	r1, #1
   24dc2:	d04f      	beq.n	24e64 <mqtt_pack_connect+0x18a>
   24dc4:	2104      	movs	r1, #4
   24dc6:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   24dc8:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   24dca:	f012 0f01 	tst.w	r2, #1
   24dce:	d04b      	beq.n	24e68 <mqtt_pack_connect+0x18e>
   24dd0:	2202      	movs	r2, #2
   24dd2:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24dd4:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   24dd6:	3308      	adds	r3, #8
   24dd8:	8be1      	ldrh	r1, [r4, #30]
   24dda:	0a0a      	lsrs	r2, r1, #8
   24ddc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24de0:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   24de2:	f100 030b 	add.w	r3, r0, #11
   24de6:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   24de8:	8921      	ldrh	r1, [r4, #8]
   24dea:	0a0a      	lsrs	r2, r1, #8
   24dec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24df0:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   24df2:	300d      	adds	r0, #13
   24df4:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   24df6:	8922      	ldrh	r2, [r4, #8]
   24df8:	6861      	ldr	r1, [r4, #4]
   24dfa:	19e8      	adds	r0, r5, r7
   24dfc:	f7db fa60 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   24e00:	8920      	ldrh	r0, [r4, #8]
   24e02:	4438      	add	r0, r7
   24e04:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   24e06:	7aa3      	ldrb	r3, [r4, #10]
   24e08:	f013 0f01 	tst.w	r3, #1
   24e0c:	d12e      	bne.n	24e6c <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   24e0e:	6a23      	ldr	r3, [r4, #32]
   24e10:	b173      	cbz	r3, 24e30 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   24e12:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24e14:	0a13      	lsrs	r3, r2, #8
   24e16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e1a:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24e1c:	3002      	adds	r0, #2
   24e1e:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   24e20:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24e22:	6a21      	ldr	r1, [r4, #32]
   24e24:	19e8      	adds	r0, r5, r7
   24e26:	f7db fa4b 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   24e2a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   24e2c:	4438      	add	r0, r7
   24e2e:	b280      	uxth	r0, r0
	if (msg->password) {
   24e30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24e32:	b15b      	cbz	r3, 24e4c <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   24e34:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24e36:	0a13      	lsrs	r3, r2, #8
   24e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e3c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24e3e:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   24e40:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24e42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   24e44:	fa15 f080 	uxtah	r0, r5, r0
   24e48:	f7db fa3a 	bl	2c0 <memcpy>
	*length = total_buf_size;
   24e4c:	f8a6 8000 	strh.w	r8, [r6]
}
   24e50:	4648      	mov	r0, r9
   24e52:	b002      	add	sp, #8
   24e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24e58:	2100      	movs	r1, #0
   24e5a:	e79f      	b.n	24d9c <mqtt_pack_connect+0xc2>
   24e5c:	2200      	movs	r2, #0
   24e5e:	e7a1      	b.n	24da4 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   24e60:	2200      	movs	r2, #0
   24e62:	e7a5      	b.n	24db0 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   24e64:	2100      	movs	r1, #0
   24e66:	e7ae      	b.n	24dc6 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   24e68:	2200      	movs	r2, #0
   24e6a:	e7b2      	b.n	24dd2 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   24e6c:	8aa2      	ldrh	r2, [r4, #20]
   24e6e:	0a13      	lsrs	r3, r2, #8
   24e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e74:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24e76:	3002      	adds	r0, #2
   24e78:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   24e7a:	8aa2      	ldrh	r2, [r4, #20]
   24e7c:	6921      	ldr	r1, [r4, #16]
   24e7e:	19e8      	adds	r0, r5, r7
   24e80:	f7db fa1e 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   24e84:	8aa0      	ldrh	r0, [r4, #20]
   24e86:	4407      	add	r7, r0
   24e88:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   24e8a:	8ba2      	ldrh	r2, [r4, #28]
   24e8c:	0a13      	lsrs	r3, r2, #8
   24e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e92:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   24e94:	3702      	adds	r7, #2
   24e96:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   24e98:	8ba2      	ldrh	r2, [r4, #28]
   24e9a:	69a1      	ldr	r1, [r4, #24]
   24e9c:	19e8      	adds	r0, r5, r7
   24e9e:	f7db fa0f 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   24ea2:	8ba0      	ldrh	r0, [r4, #28]
   24ea4:	4438      	add	r0, r7
   24ea6:	b280      	uxth	r0, r0
   24ea8:	e7b1      	b.n	24e0e <mqtt_pack_connect+0x134>
		return -EINVAL;
   24eaa:	f06f 0915 	mvn.w	r9, #21
   24eae:	e7cf      	b.n	24e50 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   24eb0:	f06f 090b 	mvn.w	r9, #11
   24eb4:	e7cc      	b.n	24e50 <mqtt_pack_connect+0x176>
	...

00024eb8 <mqtt_unpack_suback>:
{
   24eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24ebc:	b087      	sub	sp, #28
   24ebe:	461d      	mov	r5, r3
   24ec0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   24ec4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   24ec6:	2300      	movs	r3, #0
   24ec8:	8013      	strh	r3, [r2, #0]
	*items = 0;
   24eca:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   24ecc:	2f00      	cmp	r7, #0
   24ece:	d037      	beq.n	24f40 <mqtt_unpack_suback+0x88>
   24ed0:	4604      	mov	r4, r0
   24ed2:	4689      	mov	r9, r1
   24ed4:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   24ed6:	7803      	ldrb	r3, [r0, #0]
   24ed8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   24edc:	2a90      	cmp	r2, #144	; 0x90
   24ede:	d138      	bne.n	24f52 <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   24ee0:	1e4b      	subs	r3, r1, #1
   24ee2:	b29b      	uxth	r3, r3
   24ee4:	1c42      	adds	r2, r0, #1
   24ee6:	f10d 0116 	add.w	r1, sp, #22
   24eea:	a804      	add	r0, sp, #16
   24eec:	f7ff fe13 	bl	24b16 <rlen_decode>
	if (rc != 0) {
   24ef0:	4603      	mov	r3, r0
   24ef2:	2800      	cmp	r0, #0
   24ef4:	d136      	bne.n	24f64 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   24ef6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   24efa:	9804      	ldr	r0, [sp, #16]
   24efc:	180a      	adds	r2, r1, r0
   24efe:	3201      	adds	r2, #1
   24f00:	454a      	cmp	r2, r9
   24f02:	d838      	bhi.n	24f76 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24f04:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   24f06:	fa14 f282 	uxtah	r2, r4, r2
   24f0a:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   24f0c:	0a02      	lsrs	r2, r0, #8
   24f0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   24f12:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   24f16:	3103      	adds	r1, #3
   24f18:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   24f1a:	9a04      	ldr	r2, [sp, #16]
   24f1c:	3a02      	subs	r2, #2
   24f1e:	b2d2      	uxtb	r2, r2
   24f20:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   24f22:	4297      	cmp	r7, r2
   24f24:	d335      	bcc.n	24f92 <mqtt_unpack_suback+0xda>
   24f26:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   24f28:	7828      	ldrb	r0, [r5, #0]
   24f2a:	4282      	cmp	r2, r0
   24f2c:	d242      	bcs.n	24fb4 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   24f2e:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   24f30:	2802      	cmp	r0, #2
   24f32:	d837      	bhi.n	24fa4 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   24f34:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   24f36:	3101      	adds	r1, #1
   24f38:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   24f3a:	3201      	adds	r2, #1
   24f3c:	b2d2      	uxtb	r2, r2
   24f3e:	e7f3      	b.n	24f28 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   24f40:	f240 321a 	movw	r2, #794	; 0x31a
   24f44:	491d      	ldr	r1, [pc, #116]	; (24fbc <mqtt_unpack_suback+0x104>)
   24f46:	481e      	ldr	r0, [pc, #120]	; (24fc0 <mqtt_unpack_suback+0x108>)
   24f48:	f7de f81a 	bl	2f80 <printk>
		return -EINVAL;
   24f4c:	f06f 0315 	mvn.w	r3, #21
   24f50:	e030      	b.n	24fb4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   24f52:	f240 321f 	movw	r2, #799	; 0x31f
   24f56:	4919      	ldr	r1, [pc, #100]	; (24fbc <mqtt_unpack_suback+0x104>)
   24f58:	481a      	ldr	r0, [pc, #104]	; (24fc4 <mqtt_unpack_suback+0x10c>)
   24f5a:	f7de f811 	bl	2f80 <printk>
		return -EINVAL;
   24f5e:	f06f 0315 	mvn.w	r3, #21
   24f62:	e027      	b.n	24fb4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   24f64:	f240 3226 	movw	r2, #806	; 0x326
   24f68:	4914      	ldr	r1, [pc, #80]	; (24fbc <mqtt_unpack_suback+0x104>)
   24f6a:	4817      	ldr	r0, [pc, #92]	; (24fc8 <mqtt_unpack_suback+0x110>)
   24f6c:	f7de f808 	bl	2f80 <printk>
		return -EINVAL;
   24f70:	f06f 0315 	mvn.w	r3, #21
   24f74:	e01e      	b.n	24fb4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   24f76:	f8cd 9008 	str.w	r9, [sp, #8]
   24f7a:	9101      	str	r1, [sp, #4]
   24f7c:	9000      	str	r0, [sp, #0]
   24f7e:	2301      	movs	r3, #1
   24f80:	f240 322d 	movw	r2, #813	; 0x32d
   24f84:	490d      	ldr	r1, [pc, #52]	; (24fbc <mqtt_unpack_suback+0x104>)
   24f86:	4811      	ldr	r0, [pc, #68]	; (24fcc <mqtt_unpack_suback+0x114>)
   24f88:	f7dd fffa 	bl	2f80 <printk>
		return -EINVAL;
   24f8c:	f06f 0315 	mvn.w	r3, #21
   24f90:	e010      	b.n	24fb4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   24f92:	f240 323b 	movw	r2, #827	; 0x33b
   24f96:	4909      	ldr	r1, [pc, #36]	; (24fbc <mqtt_unpack_suback+0x104>)
   24f98:	480d      	ldr	r0, [pc, #52]	; (24fd0 <mqtt_unpack_suback+0x118>)
   24f9a:	f7dd fff1 	bl	2f80 <printk>
		return -EINVAL;
   24f9e:	f06f 0315 	mvn.w	r3, #21
   24fa2:	e007      	b.n	24fb4 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   24fa4:	f240 3242 	movw	r2, #834	; 0x342
   24fa8:	4904      	ldr	r1, [pc, #16]	; (24fbc <mqtt_unpack_suback+0x104>)
   24faa:	480a      	ldr	r0, [pc, #40]	; (24fd4 <mqtt_unpack_suback+0x11c>)
   24fac:	f7dd ffe8 	bl	2f80 <printk>
			return -EINVAL;
   24fb0:	f06f 0315 	mvn.w	r3, #21
}
   24fb4:	4618      	mov	r0, r3
   24fb6:	b007      	add	sp, #28
   24fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24fbc:	000309f8 	.word	0x000309f8
   24fc0:	00030a0c 	.word	0x00030a0c
   24fc4:	00030a24 	.word	0x00030a24
   24fc8:	00030a4c 	.word	0x00030a4c
   24fcc:	00030a70 	.word	0x00030a70
   24fd0:	00030ab8 	.word	0x00030ab8
   24fd4:	00030ae4 	.word	0x00030ae4

00024fd8 <mqtt_pack_publish>:
{
   24fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24fdc:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   24fde:	785c      	ldrb	r4, [r3, #1]
   24fe0:	2c02      	cmp	r4, #2
   24fe2:	d860      	bhi.n	250a6 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   24fe4:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   24fe8:	2c00      	cmp	r4, #0
   24fea:	d057      	beq.n	2509c <mqtt_pack_publish+0xc4>
   24fec:	f04f 0e02 	mov.w	lr, #2
   24ff0:	461c      	mov	r4, r3
   24ff2:	4615      	mov	r5, r2
   24ff4:	460f      	mov	r7, r1
   24ff6:	4606      	mov	r6, r0
   24ff8:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   24ffc:	8aa2      	ldrh	r2, [r4, #20]
   24ffe:	fa12 f383 	uxtah	r3, r2, r3
   25002:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25004:	3302      	adds	r3, #2
   25006:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   2500a:	4649      	mov	r1, r9
   2500c:	f10d 0006 	add.w	r0, sp, #6
   25010:	f7ff fd4b 	bl	24aaa <compute_rlen_size>
	if (rc != 0) {
   25014:	4680      	mov	r8, r0
   25016:	2800      	cmp	r0, #0
   25018:	d148      	bne.n	250ac <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   2501a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2501e:	3301      	adds	r3, #1
   25020:	444b      	add	r3, r9
   25022:	42ab      	cmp	r3, r5
   25024:	dc45      	bgt.n	250b2 <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25026:	7823      	ldrb	r3, [r4, #0]
   25028:	2b00      	cmp	r3, #0
   2502a:	d03a      	beq.n	250a2 <mqtt_pack_publish+0xca>
   2502c:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2502e:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25030:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25034:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25036:	78a2      	ldrb	r2, [r4, #2]
   25038:	2a00      	cmp	r2, #0
   2503a:	bf18      	it	ne
   2503c:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25040:	4630      	mov	r0, r6
   25042:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25046:	4649      	mov	r1, r9
   25048:	f7ff fd53 	bl	24af2 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2504c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25050:	1c6b      	adds	r3, r5, #1
   25052:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25054:	89a1      	ldrh	r1, [r4, #12]
   25056:	0a0a      	lsrs	r2, r1, #8
   25058:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2505c:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   2505e:	3503      	adds	r5, #3
   25060:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25062:	89a2      	ldrh	r2, [r4, #12]
   25064:	68a1      	ldr	r1, [r4, #8]
   25066:	1970      	adds	r0, r6, r5
   25068:	f7db f92a 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   2506c:	89a3      	ldrh	r3, [r4, #12]
   2506e:	441d      	add	r5, r3
   25070:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25072:	7863      	ldrb	r3, [r4, #1]
   25074:	b133      	cbz	r3, 25084 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25076:	88a2      	ldrh	r2, [r4, #4]
   25078:	0a13      	lsrs	r3, r2, #8
   2507a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2507e:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25080:	3502      	adds	r5, #2
   25082:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25084:	8aa2      	ldrh	r2, [r4, #20]
   25086:	6921      	ldr	r1, [r4, #16]
   25088:	1970      	adds	r0, r6, r5
   2508a:	f7db f919 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   2508e:	8aa3      	ldrh	r3, [r4, #20]
   25090:	441d      	add	r5, r3
	*length = offset;
   25092:	803d      	strh	r5, [r7, #0]
}
   25094:	4640      	mov	r0, r8
   25096:	b003      	add	sp, #12
   25098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   2509c:	f04f 0e00 	mov.w	lr, #0
   250a0:	e7a6      	b.n	24ff0 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   250a2:	2330      	movs	r3, #48	; 0x30
   250a4:	e7c3      	b.n	2502e <mqtt_pack_publish+0x56>
		return -EINVAL;
   250a6:	f06f 0815 	mvn.w	r8, #21
   250aa:	e7f3      	b.n	25094 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   250ac:	f06f 0815 	mvn.w	r8, #21
   250b0:	e7f0      	b.n	25094 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   250b2:	f06f 080b 	mvn.w	r8, #11
   250b6:	e7ed      	b.n	25094 <mqtt_pack_publish+0xbc>

000250b8 <mqtt_unpack_publish>:
{
   250b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   250ba:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   250bc:	7807      	ldrb	r7, [r0, #0]
   250be:	093b      	lsrs	r3, r7, #4
   250c0:	2b03      	cmp	r3, #3
   250c2:	d148      	bne.n	25156 <mqtt_unpack_publish+0x9e>
   250c4:	4615      	mov	r5, r2
   250c6:	460e      	mov	r6, r1
   250c8:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   250ca:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   250ce:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   250d0:	7803      	ldrb	r3, [r0, #0]
   250d2:	f3c3 0341 	ubfx	r3, r3, #1, #2
   250d6:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   250d8:	4602      	mov	r2, r0
   250da:	f812 3b01 	ldrb.w	r3, [r2], #1
   250de:	f003 0301 	and.w	r3, r3, #1
   250e2:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   250e4:	1e4b      	subs	r3, r1, #1
   250e6:	b29b      	uxth	r3, r3
   250e8:	f10d 0106 	add.w	r1, sp, #6
   250ec:	4668      	mov	r0, sp
   250ee:	f7ff fd12 	bl	24b16 <rlen_decode>
	if (rc != 0) {
   250f2:	4607      	mov	r7, r0
   250f4:	2800      	cmp	r0, #0
   250f6:	d131      	bne.n	2515c <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   250f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   250fc:	9b00      	ldr	r3, [sp, #0]
   250fe:	4413      	add	r3, r2
   25100:	3301      	adds	r3, #1
   25102:	42b3      	cmp	r3, r6
   25104:	d82d      	bhi.n	25162 <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25106:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25108:	fa14 f383 	uxtah	r3, r4, r3
   2510c:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   2510e:	0a0b      	lsrs	r3, r1, #8
   25110:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25114:	b29b      	uxth	r3, r3
   25116:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25118:	3203      	adds	r2, #3
   2511a:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   2511c:	18d1      	adds	r1, r2, r3
   2511e:	42b1      	cmp	r1, r6
   25120:	dc22      	bgt.n	25168 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25122:	18a1      	adds	r1, r4, r2
   25124:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25126:	4413      	add	r3, r2
   25128:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2512a:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   2512c:	786a      	ldrb	r2, [r5, #1]
   2512e:	3a01      	subs	r2, #1
   25130:	b2d2      	uxtb	r2, r2
   25132:	2a01      	cmp	r2, #1
   25134:	d908      	bls.n	25148 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25136:	2200      	movs	r2, #0
   25138:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   2513a:	1af6      	subs	r6, r6, r3
   2513c:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   2513e:	4423      	add	r3, r4
   25140:	612b      	str	r3, [r5, #16]
}
   25142:	4638      	mov	r0, r7
   25144:	b003      	add	sp, #12
   25146:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25148:	0a0a      	lsrs	r2, r1, #8
   2514a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   2514e:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25150:	3302      	adds	r3, #2
   25152:	b29b      	uxth	r3, r3
   25154:	e7f1      	b.n	2513a <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25156:	f06f 0715 	mvn.w	r7, #21
   2515a:	e7f2      	b.n	25142 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   2515c:	f06f 0715 	mvn.w	r7, #21
   25160:	e7ef      	b.n	25142 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25162:	f06f 0715 	mvn.w	r7, #21
   25166:	e7ec      	b.n	25142 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25168:	f06f 0715 	mvn.w	r7, #21
   2516c:	e7e9      	b.n	25142 <mqtt_unpack_publish+0x8a>

0002516e <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   2516e:	2903      	cmp	r1, #3
   25170:	d90d      	bls.n	2518e <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25172:	7801      	ldrb	r1, [r0, #0]
   25174:	2920      	cmp	r1, #32
   25176:	d10d      	bne.n	25194 <mqtt_unpack_connack+0x26>
   25178:	7841      	ldrb	r1, [r0, #1]
   2517a:	2902      	cmp	r1, #2
   2517c:	d10d      	bne.n	2519a <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   2517e:	7881      	ldrb	r1, [r0, #2]
   25180:	2901      	cmp	r1, #1
   25182:	d80d      	bhi.n	251a0 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25184:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25186:	78c2      	ldrb	r2, [r0, #3]
   25188:	701a      	strb	r2, [r3, #0]
	return 0;
   2518a:	2000      	movs	r0, #0
   2518c:	4770      	bx	lr
		return -EINVAL;
   2518e:	f06f 0015 	mvn.w	r0, #21
   25192:	4770      	bx	lr
		return -EINVAL;
   25194:	f06f 0015 	mvn.w	r0, #21
   25198:	4770      	bx	lr
   2519a:	f06f 0015 	mvn.w	r0, #21
   2519e:	4770      	bx	lr
		return -EINVAL;
   251a0:	f06f 0015 	mvn.w	r0, #21
}
   251a4:	4770      	bx	lr

000251a6 <mqtt_pack_disconnect>:
{
   251a6:	b500      	push	{lr}
   251a8:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   251aa:	2300      	movs	r3, #0
   251ac:	9300      	str	r3, [sp, #0]
   251ae:	230e      	movs	r3, #14
   251b0:	f7ff fceb 	bl	24b8a <pack_zerolen>
}
   251b4:	b003      	add	sp, #12
   251b6:	f85d fb04 	ldr.w	pc, [sp], #4

000251ba <mqtt_unpack_puback>:
{
   251ba:	b500      	push	{lr}
   251bc:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   251be:	2300      	movs	r3, #0
   251c0:	9300      	str	r3, [sp, #0]
   251c2:	2304      	movs	r3, #4
   251c4:	f7ff fd0e 	bl	24be4 <unpack_pktid_validate>
}
   251c8:	b003      	add	sp, #12
   251ca:	f85d fb04 	ldr.w	pc, [sp], #4

000251ce <mqtt_unpack_pubrec>:
{
   251ce:	b500      	push	{lr}
   251d0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   251d2:	2300      	movs	r3, #0
   251d4:	9300      	str	r3, [sp, #0]
   251d6:	2305      	movs	r3, #5
   251d8:	f7ff fd04 	bl	24be4 <unpack_pktid_validate>
}
   251dc:	b003      	add	sp, #12
   251de:	f85d fb04 	ldr.w	pc, [sp], #4

000251e2 <mqtt_unpack_pubrel>:
{
   251e2:	b500      	push	{lr}
   251e4:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   251e6:	2302      	movs	r3, #2
   251e8:	9300      	str	r3, [sp, #0]
   251ea:	2306      	movs	r3, #6
   251ec:	f7ff fcfa 	bl	24be4 <unpack_pktid_validate>
}
   251f0:	b003      	add	sp, #12
   251f2:	f85d fb04 	ldr.w	pc, [sp], #4

000251f6 <mqtt_unpack_pubcomp>:
{
   251f6:	b500      	push	{lr}
   251f8:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   251fa:	2300      	movs	r3, #0
   251fc:	9300      	str	r3, [sp, #0]
   251fe:	2307      	movs	r3, #7
   25200:	f7ff fcf0 	bl	24be4 <unpack_pktid_validate>
}
   25204:	b003      	add	sp, #12
   25206:	f85d fb04 	ldr.w	pc, [sp], #4

0002520a <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   2520a:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   2520c:	2300      	movs	r3, #0
   2520e:	220d      	movs	r2, #13
   25210:	f7ff fd1a 	bl	24c48 <unpack_zerolen_validate>
}
   25214:	bd08      	pop	{r3, pc}
	...

00025218 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25218:	b5f0      	push	{r4, r5, r6, r7, lr}
   2521a:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   2521c:	1f13      	subs	r3, r2, #4
   2521e:	2b03      	cmp	r3, #3
   25220:	d840      	bhi.n	252a4 <mqtt_rx_pub_msgs+0x8c>
   25222:	e8df f003 	tbb	[pc, r3]
   25226:	0502      	.short	0x0502
   25228:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2522a:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   2522c:	4f22      	ldr	r7, [pc, #136]	; (252b8 <mqtt_rx_pub_msgs+0xa0>)
   2522e:	e007      	b.n	25240 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25230:	4e22      	ldr	r6, [pc, #136]	; (252bc <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25232:	4f23      	ldr	r7, [pc, #140]	; (252c0 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25234:	e004      	b.n	25240 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25236:	4e23      	ldr	r6, [pc, #140]	; (252c4 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25238:	4f23      	ldr	r7, [pc, #140]	; (252c8 <mqtt_rx_pub_msgs+0xb0>)
		break;
   2523a:	e001      	b.n	25240 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2523c:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   2523e:	4f23      	ldr	r7, [pc, #140]	; (252cc <mqtt_rx_pub_msgs+0xb4>)
   25240:	4614      	mov	r4, r2
   25242:	460b      	mov	r3, r1
   25244:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25246:	f10d 0206 	add.w	r2, sp, #6
   2524a:	8989      	ldrh	r1, [r1, #12]
   2524c:	6898      	ldr	r0, [r3, #8]
   2524e:	47b8      	blx	r7
	if (rc != 0) {
   25250:	bb58      	cbnz	r0, 252aa <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25252:	2c06      	cmp	r4, #6
   25254:	d012      	beq.n	2527c <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25256:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2525a:	4622      	mov	r2, r4
   2525c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25260:	4628      	mov	r0, r5
   25262:	4798      	blx	r3
   25264:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25266:	bb1b      	cbnz	r3, 252b0 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25268:	b12e      	cbz	r6, 25276 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   2526a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2526e:	4628      	mov	r0, r5
   25270:	47b0      	blx	r6
	if (rc != 0) {
   25272:	4603      	mov	r3, r0
   25274:	b998      	cbnz	r0, 2529e <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25276:	4618      	mov	r0, r3
   25278:	b003      	add	sp, #12
   2527a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   2527c:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25280:	2b01      	cmp	r3, #1
   25282:	d009      	beq.n	25298 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25284:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25288:	2306      	movs	r3, #6
   2528a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2528e:	2100      	movs	r1, #0
   25290:	4628      	mov	r0, r5
   25292:	47a0      	blx	r4
   25294:	4603      	mov	r3, r0
   25296:	e7e6      	b.n	25266 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25298:	f06f 0315 	mvn.w	r3, #21
   2529c:	e7e3      	b.n	25266 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   2529e:	f06f 0315 	mvn.w	r3, #21
   252a2:	e7e8      	b.n	25276 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   252a4:	f06f 0315 	mvn.w	r3, #21
   252a8:	e7e5      	b.n	25276 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   252aa:	f06f 0315 	mvn.w	r3, #21
   252ae:	e7e2      	b.n	25276 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   252b0:	f06f 0315 	mvn.w	r3, #21
   252b4:	e7df      	b.n	25276 <mqtt_rx_pub_msgs+0x5e>
   252b6:	bf00      	nop
   252b8:	000251bb 	.word	0x000251bb
   252bc:	000253af 	.word	0x000253af
   252c0:	000251cf 	.word	0x000251cf
   252c4:	000253a5 	.word	0x000253a5
   252c8:	000251e3 	.word	0x000251e3
   252cc:	000251f7 	.word	0x000251f7

000252d0 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   252d0:	4770      	bx	lr

000252d2 <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   252d2:	b96a      	cbnz	r2, 252f0 <app_recv+0x1e>
   252d4:	b161      	cbz	r1, 252f0 <app_recv+0x1e>
{
   252d6:	b510      	push	{r4, lr}
   252d8:	460c      	mov	r4, r1
	return pkt->appdatalen;
   252da:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   252dc:	b91a      	cbnz	r2, 252e6 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   252de:	4620      	mov	r0, r4
   252e0:	f7f7 fc9b 	bl	1cc1a <net_pkt_unref>
   252e4:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   252e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   252ea:	4618      	mov	r0, r3
   252ec:	4790      	blx	r2
   252ee:	e7f6      	b.n	252de <app_recv+0xc>
   252f0:	4770      	bx	lr

000252f2 <mqtt_tx_pub_msgs>:
{
   252f2:	b570      	push	{r4, r5, r6, lr}
   252f4:	b084      	sub	sp, #16
   252f6:	4604      	mov	r4, r0
	switch (pkt_type) {
   252f8:	3a04      	subs	r2, #4
   252fa:	2a03      	cmp	r2, #3
   252fc:	d849      	bhi.n	25392 <mqtt_tx_pub_msgs+0xa0>
   252fe:	e8df f002 	tbb	[pc, r2]
   25302:	2c02      	.short	0x2c02
   25304:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25306:	460b      	mov	r3, r1
   25308:	2204      	movs	r2, #4
   2530a:	f10d 010a 	add.w	r1, sp, #10
   2530e:	a803      	add	r0, sp, #12
   25310:	f7ff fcb7 	bl	24c82 <mqtt_pack_puback>
	if (rc != 0) {
   25314:	2800      	cmp	r0, #0
   25316:	d13f      	bne.n	25398 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25318:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2531a:	2100      	movs	r1, #0
   2531c:	4620      	mov	r0, r4
   2531e:	f000 fe09 	bl	25f34 <net_app_get_net_pkt>
	if (tx == NULL) {
   25322:	4605      	mov	r5, r0
   25324:	2800      	cmp	r0, #0
   25326:	d03a      	beq.n	2539e <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25328:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2532c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2532e:	aa03      	add	r2, sp, #12
   25330:	4631      	mov	r1, r6
   25332:	f7f7 fdaa 	bl	1ce8a <net_pkt_append>
	if (rc != true) {
   25336:	4286      	cmp	r6, r0
   25338:	d01f      	beq.n	2537a <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   2533a:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   2533e:	4628      	mov	r0, r5
   25340:	f7f7 fc6b 	bl	1cc1a <net_pkt_unref>
}
   25344:	4620      	mov	r0, r4
   25346:	b004      	add	sp, #16
   25348:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   2534a:	460b      	mov	r3, r1
   2534c:	2204      	movs	r2, #4
   2534e:	f10d 010a 	add.w	r1, sp, #10
   25352:	a803      	add	r0, sp, #12
   25354:	f7ff fcb6 	bl	24cc4 <mqtt_pack_pubcomp>
		break;
   25358:	e7dc      	b.n	25314 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   2535a:	460b      	mov	r3, r1
   2535c:	2204      	movs	r2, #4
   2535e:	f10d 010a 	add.w	r1, sp, #10
   25362:	a803      	add	r0, sp, #12
   25364:	f7ff fc98 	bl	24c98 <mqtt_pack_pubrec>
		break;
   25368:	e7d4      	b.n	25314 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   2536a:	460b      	mov	r3, r1
   2536c:	2204      	movs	r2, #4
   2536e:	f10d 010a 	add.w	r1, sp, #10
   25372:	a803      	add	r0, sp, #12
   25374:	f7ff fc9b 	bl	24cae <mqtt_pack_pubrel>
		break;
   25378:	e7cc      	b.n	25314 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2537a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2537c:	2200      	movs	r2, #0
   2537e:	9201      	str	r2, [sp, #4]
   25380:	9300      	str	r3, [sp, #0]
   25382:	4613      	mov	r3, r2
   25384:	4629      	mov	r1, r5
   25386:	4620      	mov	r0, r4
   25388:	f000 fd58 	bl	25e3c <net_app_send_pkt>
	if (rc < 0) {
   2538c:	1e04      	subs	r4, r0, #0
   2538e:	dad9      	bge.n	25344 <mqtt_tx_pub_msgs+0x52>
   25390:	e7d5      	b.n	2533e <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25392:	f06f 0415 	mvn.w	r4, #21
   25396:	e7d5      	b.n	25344 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25398:	f06f 0415 	mvn.w	r4, #21
   2539c:	e7d2      	b.n	25344 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   2539e:	f06f 040b 	mvn.w	r4, #11
   253a2:	e7cf      	b.n	25344 <mqtt_tx_pub_msgs+0x52>

000253a4 <mqtt_tx_pubcomp>:
{
   253a4:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   253a6:	2207      	movs	r2, #7
   253a8:	f7ff ffa3 	bl	252f2 <mqtt_tx_pub_msgs>
}
   253ac:	bd08      	pop	{r3, pc}

000253ae <mqtt_tx_pubrel>:
{
   253ae:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   253b0:	2206      	movs	r2, #6
   253b2:	f7ff ff9e 	bl	252f2 <mqtt_tx_pub_msgs>
}
   253b6:	bd08      	pop	{r3, pc}

000253b8 <mqtt_linearize_packet>:
{
   253b8:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   253ba:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   253bc:	42aa      	cmp	r2, r5
   253be:	d820      	bhi.n	25402 <mqtt_linearize_packet+0x4a>
   253c0:	2d80      	cmp	r5, #128	; 0x80
   253c2:	d820      	bhi.n	25406 <mqtt_linearize_packet+0x4e>
   253c4:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   253c6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   253c8:	4810      	ldr	r0, [pc, #64]	; (2540c <mqtt_linearize_packet+0x54>)
   253ca:	f7f4 fe49 	bl	1a060 <net_buf_alloc>
	if (data == NULL) {
   253ce:	4606      	mov	r6, r0
   253d0:	b180      	cbz	r0, 253f4 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   253d2:	68a1      	ldr	r1, [r4, #8]
   253d4:	460c      	mov	r4, r1
	size_t bytes = 0;
   253d6:	2200      	movs	r2, #0
   253d8:	e002      	b.n	253e0 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   253da:	89a3      	ldrh	r3, [r4, #12]
   253dc:	441a      	add	r2, r3
		buf = buf->frags;
   253de:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   253e0:	2c00      	cmp	r4, #0
   253e2:	d1fa      	bne.n	253da <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   253e4:	b292      	uxth	r2, r2
   253e6:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   253e8:	462b      	mov	r3, r5
   253ea:	b292      	uxth	r2, r2
   253ec:	4630      	mov	r0, r6
   253ee:	f7f7 fcc7 	bl	1cd80 <net_frag_linear_copy>
	if (rc != 0) {
   253f2:	b908      	cbnz	r0, 253f8 <mqtt_linearize_packet+0x40>
}
   253f4:	4630      	mov	r0, r6
   253f6:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   253f8:	4630      	mov	r0, r6
   253fa:	f7f7 fc08 	bl	1cc0e <net_pkt_frag_unref>
	return NULL;
   253fe:	4626      	mov	r6, r4
   25400:	e7f8      	b.n	253f4 <mqtt_linearize_packet+0x3c>
		return NULL;
   25402:	2600      	movs	r6, #0
   25404:	e7f6      	b.n	253f4 <mqtt_linearize_packet+0x3c>
   25406:	2600      	movs	r6, #0
   25408:	e7f4      	b.n	253f4 <mqtt_linearize_packet+0x3c>
   2540a:	bf00      	nop
   2540c:	2000d0ec 	.word	0x2000d0ec

00025410 <mqtt_tx_connect>:
{
   25410:	b570      	push	{r4, r5, r6, lr}
   25412:	b082      	sub	sp, #8
   25414:	4604      	mov	r4, r0
   25416:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25418:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2541a:	481d      	ldr	r0, [pc, #116]	; (25490 <mqtt_tx_connect+0x80>)
   2541c:	f7f4 fe20 	bl	1a060 <net_buf_alloc>
	if (data == NULL) {
   25420:	b398      	cbz	r0, 2548a <mqtt_tx_connect+0x7a>
   25422:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25424:	7832      	ldrb	r2, [r6, #0]
   25426:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2542a:	f362 0300 	bfi	r3, r2, #0, #1
   2542e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25432:	4633      	mov	r3, r6
   25434:	2280      	movs	r2, #128	; 0x80
   25436:	f100 010c 	add.w	r1, r0, #12
   2543a:	6880      	ldr	r0, [r0, #8]
   2543c:	f7ff fc4d 	bl	24cda <mqtt_pack_connect>
	if (rc != 0) {
   25440:	b9c0      	cbnz	r0, 25474 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25442:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25444:	2100      	movs	r1, #0
   25446:	4620      	mov	r0, r4
   25448:	f000 fd74 	bl	25f34 <net_app_get_net_pkt>
	if (tx == NULL) {
   2544c:	4606      	mov	r6, r0
   2544e:	b1c8      	cbz	r0, 25484 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25450:	4629      	mov	r1, r5
   25452:	f7f7 fc0c 	bl	1cc6e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25456:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25458:	2200      	movs	r2, #0
   2545a:	9201      	str	r2, [sp, #4]
   2545c:	9300      	str	r3, [sp, #0]
   2545e:	4613      	mov	r3, r2
   25460:	4631      	mov	r1, r6
   25462:	4620      	mov	r0, r4
   25464:	f000 fcea 	bl	25e3c <net_app_send_pkt>
	if (rc < 0) {
   25468:	1e04      	subs	r4, r0, #0
   2546a:	da08      	bge.n	2547e <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   2546c:	4630      	mov	r0, r6
   2546e:	f7f7 fbd4 	bl	1cc1a <net_pkt_unref>
   25472:	e004      	b.n	2547e <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   25474:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25478:	4628      	mov	r0, r5
   2547a:	f7f7 fbc8 	bl	1cc0e <net_pkt_frag_unref>
}
   2547e:	4620      	mov	r0, r4
   25480:	b002      	add	sp, #8
   25482:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25484:	f06f 040b 	mvn.w	r4, #11
   25488:	e7f6      	b.n	25478 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   2548a:	f06f 040b 	mvn.w	r4, #11
   2548e:	e7f6      	b.n	2547e <mqtt_tx_connect+0x6e>
   25490:	2000d0ec 	.word	0x2000d0ec

00025494 <mqtt_tx_disconnect>:
{
   25494:	b570      	push	{r4, r5, r6, lr}
   25496:	b084      	sub	sp, #16
   25498:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   2549a:	2202      	movs	r2, #2
   2549c:	f10d 010a 	add.w	r1, sp, #10
   254a0:	a803      	add	r0, sp, #12
   254a2:	f7ff fe80 	bl	251a6 <mqtt_pack_disconnect>
	if (rc != 0) {
   254a6:	bb78      	cbnz	r0, 25508 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   254a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   254aa:	2100      	movs	r1, #0
   254ac:	4620      	mov	r0, r4
   254ae:	f000 fd41 	bl	25f34 <net_app_get_net_pkt>
	if (tx == NULL) {
   254b2:	4605      	mov	r5, r0
   254b4:	b358      	cbz	r0, 2550e <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   254b6:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   254ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   254bc:	aa03      	add	r2, sp, #12
   254be:	4631      	mov	r1, r6
   254c0:	f7f7 fce3 	bl	1ce8a <net_pkt_append>
	if (rc != true) {
   254c4:	4286      	cmp	r6, r0
   254c6:	d007      	beq.n	254d8 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   254c8:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   254cc:	4628      	mov	r0, r5
   254ce:	f7f7 fba4 	bl	1cc1a <net_pkt_unref>
}
   254d2:	4630      	mov	r0, r6
   254d4:	b004      	add	sp, #16
   254d6:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   254d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   254da:	2200      	movs	r2, #0
   254dc:	9201      	str	r2, [sp, #4]
   254de:	9300      	str	r3, [sp, #0]
   254e0:	4613      	mov	r3, r2
   254e2:	4629      	mov	r1, r5
   254e4:	4620      	mov	r0, r4
   254e6:	f000 fca9 	bl	25e3c <net_app_send_pkt>
	if (rc < 0) {
   254ea:	1e06      	subs	r6, r0, #0
   254ec:	dbee      	blt.n	254cc <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   254ee:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   254f2:	f36f 0341 	bfc	r3, #1, #1
   254f6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   254fa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   254fe:	2b00      	cmp	r3, #0
   25500:	d0e7      	beq.n	254d2 <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   25502:	4620      	mov	r0, r4
   25504:	4798      	blx	r3
   25506:	e7e4      	b.n	254d2 <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   25508:	f06f 0615 	mvn.w	r6, #21
   2550c:	e7e1      	b.n	254d2 <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   2550e:	f06f 060b 	mvn.w	r6, #11
   25512:	e7de      	b.n	254d2 <mqtt_tx_disconnect+0x3e>

00025514 <mqtt_tx_puback>:
{
   25514:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   25516:	2204      	movs	r2, #4
   25518:	f7ff feeb 	bl	252f2 <mqtt_tx_pub_msgs>
}
   2551c:	bd08      	pop	{r3, pc}

0002551e <mqtt_tx_pubrec>:
{
   2551e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   25520:	2205      	movs	r2, #5
   25522:	f7ff fee6 	bl	252f2 <mqtt_tx_pub_msgs>
}
   25526:	bd08      	pop	{r3, pc}

00025528 <mqtt_tx_publish>:
{
   25528:	b570      	push	{r4, r5, r6, lr}
   2552a:	b082      	sub	sp, #8
   2552c:	4605      	mov	r5, r0
   2552e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25530:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25532:	481a      	ldr	r0, [pc, #104]	; (2559c <mqtt_tx_publish+0x74>)
   25534:	f7f4 fd94 	bl	1a060 <net_buf_alloc>
	if (data == NULL) {
   25538:	b360      	cbz	r0, 25594 <mqtt_tx_publish+0x6c>
   2553a:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   2553c:	4633      	mov	r3, r6
   2553e:	89c2      	ldrh	r2, [r0, #14]
   25540:	f100 010c 	add.w	r1, r0, #12
   25544:	6880      	ldr	r0, [r0, #8]
   25546:	f7ff fd47 	bl	24fd8 <mqtt_pack_publish>
	if (rc != 0) {
   2554a:	b9c0      	cbnz	r0, 2557e <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2554c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2554e:	2100      	movs	r1, #0
   25550:	4628      	mov	r0, r5
   25552:	f000 fcef 	bl	25f34 <net_app_get_net_pkt>
	if (tx == NULL) {
   25556:	4606      	mov	r6, r0
   25558:	b1c8      	cbz	r0, 2558e <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   2555a:	4621      	mov	r1, r4
   2555c:	f7f7 fb87 	bl	1cc6e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25560:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   25562:	2200      	movs	r2, #0
   25564:	9201      	str	r2, [sp, #4]
   25566:	9300      	str	r3, [sp, #0]
   25568:	4613      	mov	r3, r2
   2556a:	4631      	mov	r1, r6
   2556c:	4628      	mov	r0, r5
   2556e:	f000 fc65 	bl	25e3c <net_app_send_pkt>
	if (rc < 0) {
   25572:	1e05      	subs	r5, r0, #0
   25574:	da08      	bge.n	25588 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   25576:	4630      	mov	r0, r6
   25578:	f7f7 fb4f 	bl	1cc1a <net_pkt_unref>
   2557c:	e004      	b.n	25588 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   2557e:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   25582:	4620      	mov	r0, r4
   25584:	f7f7 fb43 	bl	1cc0e <net_pkt_frag_unref>
}
   25588:	4628      	mov	r0, r5
   2558a:	b002      	add	sp, #8
   2558c:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2558e:	f06f 050b 	mvn.w	r5, #11
   25592:	e7f6      	b.n	25582 <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   25594:	f06f 050b 	mvn.w	r5, #11
   25598:	e7f6      	b.n	25588 <mqtt_tx_publish+0x60>
   2559a:	bf00      	nop
   2559c:	2000d0ec 	.word	0x2000d0ec

000255a0 <mqtt_rx_connack>:
{
   255a0:	b570      	push	{r4, r5, r6, lr}
   255a2:	b082      	sub	sp, #8
   255a4:	4604      	mov	r4, r0
   255a6:	4608      	mov	r0, r1
   255a8:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   255aa:	f10d 0307 	add.w	r3, sp, #7
   255ae:	f10d 0206 	add.w	r2, sp, #6
   255b2:	8989      	ldrh	r1, [r1, #12]
   255b4:	6880      	ldr	r0, [r0, #8]
   255b6:	f7ff fdda 	bl	2516e <mqtt_unpack_connack>
	if (rc != 0) {
   255ba:	b998      	cbnz	r0, 255e4 <mqtt_rx_connack+0x44>
   255bc:	4605      	mov	r5, r0
	switch (clean_session) {
   255be:	2e01      	cmp	r6, #1
   255c0:	d113      	bne.n	255ea <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   255c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   255c6:	b99b      	cbnz	r3, 255f0 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   255c8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   255cc:	f043 0302 	orr.w	r3, r3, #2
   255d0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   255d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   255d8:	b10b      	cbz	r3, 255de <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   255da:	4620      	mov	r0, r4
   255dc:	4798      	blx	r3
}
   255de:	4628      	mov	r0, r5
   255e0:	b002      	add	sp, #8
   255e2:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   255e4:	f06f 0515 	mvn.w	r5, #21
   255e8:	e7f9      	b.n	255de <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   255ea:	f06f 0515 	mvn.w	r5, #21
   255ee:	e7f6      	b.n	255de <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   255f0:	f06f 0515 	mvn.w	r5, #21
	return rc;
   255f4:	e7f3      	b.n	255de <mqtt_rx_connack+0x3e>

000255f6 <mqtt_rx_puback>:
{
   255f6:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   255f8:	2204      	movs	r2, #4
   255fa:	f7ff fe0d 	bl	25218 <mqtt_rx_pub_msgs>
}
   255fe:	bd08      	pop	{r3, pc}

00025600 <mqtt_rx_pubcomp>:
{
   25600:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   25602:	2207      	movs	r2, #7
   25604:	f7ff fe08 	bl	25218 <mqtt_rx_pub_msgs>
}
   25608:	bd08      	pop	{r3, pc}

0002560a <mqtt_rx_pubrec>:
{
   2560a:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   2560c:	2205      	movs	r2, #5
   2560e:	f7ff fe03 	bl	25218 <mqtt_rx_pub_msgs>
}
   25612:	bd08      	pop	{r3, pc}

00025614 <mqtt_rx_pubrel>:
{
   25614:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   25616:	2206      	movs	r2, #6
   25618:	f7ff fdfe 	bl	25218 <mqtt_rx_pub_msgs>
}
   2561c:	bd08      	pop	{r3, pc}

0002561e <mqtt_rx_pingresp>:
{
   2561e:	b508      	push	{r3, lr}
   25620:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   25622:	8989      	ldrh	r1, [r1, #12]
   25624:	6898      	ldr	r0, [r3, #8]
   25626:	f7ff fdf0 	bl	2520a <mqtt_unpack_pingresp>
	if (rc != 0) {
   2562a:	4603      	mov	r3, r0
   2562c:	b908      	cbnz	r0, 25632 <mqtt_rx_pingresp+0x14>
}
   2562e:	4618      	mov	r0, r3
   25630:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25632:	f06f 0315 	mvn.w	r3, #21
   25636:	e7fa      	b.n	2562e <mqtt_rx_pingresp+0x10>

00025638 <mqtt_rx_suback>:
{
   25638:	b530      	push	{r4, r5, lr}
   2563a:	b085      	sub	sp, #20
   2563c:	4604      	mov	r4, r0
	data = rx->data;
   2563e:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   25640:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   25642:	ab03      	add	r3, sp, #12
   25644:	9301      	str	r3, [sp, #4]
   25646:	2301      	movs	r3, #1
   25648:	9300      	str	r3, [sp, #0]
   2564a:	f10d 0309 	add.w	r3, sp, #9
   2564e:	f10d 020a 	add.w	r2, sp, #10
   25652:	f7ff fc31 	bl	24eb8 <mqtt_unpack_suback>
	if (rc != 0) {
   25656:	b988      	cbnz	r0, 2567c <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   25658:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2565c:	b18d      	cbz	r5, 25682 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   2565e:	ab03      	add	r3, sp, #12
   25660:	f89d 2009 	ldrb.w	r2, [sp, #9]
   25664:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   25668:	4620      	mov	r0, r4
   2566a:	47a8      	blx	r5
	if (rc != 0) {
   2566c:	4603      	mov	r3, r0
   2566e:	b910      	cbnz	r0, 25676 <mqtt_rx_suback+0x3e>
}
   25670:	4618      	mov	r0, r3
   25672:	b005      	add	sp, #20
   25674:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25676:	f06f 0315 	mvn.w	r3, #21
   2567a:	e7f9      	b.n	25670 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2567c:	f06f 0315 	mvn.w	r3, #21
   25680:	e7f6      	b.n	25670 <mqtt_rx_suback+0x38>
		return -EINVAL;
   25682:	f06f 0315 	mvn.w	r3, #21
   25686:	e7f3      	b.n	25670 <mqtt_rx_suback+0x38>

00025688 <mqtt_rx_publish>:
{
   25688:	b530      	push	{r4, r5, lr}
   2568a:	b087      	sub	sp, #28
   2568c:	4604      	mov	r4, r0
   2568e:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   25690:	466a      	mov	r2, sp
   25692:	8989      	ldrh	r1, [r1, #12]
   25694:	6898      	ldr	r0, [r3, #8]
   25696:	f7ff fd0f 	bl	250b8 <mqtt_unpack_publish>
	if (rc != 0) {
   2569a:	bb00      	cbnz	r0, 256de <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   2569c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   256a0:	2303      	movs	r3, #3
   256a2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   256a6:	4669      	mov	r1, sp
   256a8:	4620      	mov	r0, r4
   256aa:	47a8      	blx	r5
	if (rc != 0) {
   256ac:	4602      	mov	r2, r0
   256ae:	b9c8      	cbnz	r0, 256e4 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   256b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   256b4:	2b01      	cmp	r3, #1
   256b6:	d00b      	beq.n	256d0 <mqtt_rx_publish+0x48>
   256b8:	b13b      	cbz	r3, 256ca <mqtt_rx_publish+0x42>
   256ba:	2b02      	cmp	r3, #2
   256bc:	d115      	bne.n	256ea <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   256be:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   256c2:	4620      	mov	r0, r4
   256c4:	f7ff ff2b 	bl	2551e <mqtt_tx_pubrec>
   256c8:	4602      	mov	r2, r0
}
   256ca:	4610      	mov	r0, r2
   256cc:	b007      	add	sp, #28
   256ce:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   256d0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   256d4:	4620      	mov	r0, r4
   256d6:	f7ff ff1d 	bl	25514 <mqtt_tx_puback>
   256da:	4602      	mov	r2, r0
		break;
   256dc:	e7f5      	b.n	256ca <mqtt_rx_publish+0x42>
		return -EINVAL;
   256de:	f06f 0215 	mvn.w	r2, #21
   256e2:	e7f2      	b.n	256ca <mqtt_rx_publish+0x42>
		return -EINVAL;
   256e4:	f06f 0215 	mvn.w	r2, #21
   256e8:	e7ef      	b.n	256ca <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   256ea:	f06f 0215 	mvn.w	r2, #21
   256ee:	e7ec      	b.n	256ca <mqtt_rx_publish+0x42>

000256f0 <mqtt_parser>:
{
   256f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256f2:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   256f4:	2202      	movs	r2, #2
   256f6:	f7ff fe5f 	bl	253b8 <mqtt_linearize_packet>
	if (!data) {
   256fa:	2800      	cmp	r0, #0
   256fc:	d057      	beq.n	257ae <mqtt_parser+0xbe>
   256fe:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   25700:	6883      	ldr	r3, [r0, #8]
   25702:	781b      	ldrb	r3, [r3, #0]
   25704:	091b      	lsrs	r3, r3, #4
   25706:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   25708:	3b02      	subs	r3, #2
   2570a:	2b0b      	cmp	r3, #11
   2570c:	d84c      	bhi.n	257a8 <mqtt_parser+0xb8>
   2570e:	e8df f003 	tbb	[pc, r3]
   25712:	3906      	.short	0x3906
   25714:	2d3f2716 	.word	0x2d3f2716
   25718:	4b4b454b 	.word	0x4b4b454b
   2571c:	334b      	.short	0x334b
		if (!ctx->connected) {
   2571e:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   25722:	f013 0f02 	tst.w	r3, #2
   25726:	d002      	beq.n	2572e <mqtt_parser+0x3e>
			rc = -EINVAL;
   25728:	f06f 0515 	mvn.w	r5, #21
   2572c:	e00c      	b.n	25748 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   2572e:	f003 0201 	and.w	r2, r3, #1
   25732:	4601      	mov	r1, r0
   25734:	4630      	mov	r0, r6
   25736:	f7ff ff33 	bl	255a0 <mqtt_rx_connack>
   2573a:	4605      	mov	r5, r0
   2573c:	e004      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   2573e:	4601      	mov	r1, r0
   25740:	4630      	mov	r0, r6
   25742:	f7ff ff58 	bl	255f6 <mqtt_rx_puback>
   25746:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   25748:	b12d      	cbz	r5, 25756 <mqtt_parser+0x66>
   2574a:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   2574e:	b113      	cbz	r3, 25756 <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   25750:	4639      	mov	r1, r7
   25752:	4630      	mov	r0, r6
   25754:	4798      	blx	r3
	net_pkt_frag_unref(data);
   25756:	4620      	mov	r0, r4
   25758:	f7f7 fa59 	bl	1cc0e <net_pkt_frag_unref>
}
   2575c:	4628      	mov	r0, r5
   2575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   25760:	4601      	mov	r1, r0
   25762:	4630      	mov	r0, r6
   25764:	f7ff ff51 	bl	2560a <mqtt_rx_pubrec>
   25768:	4605      	mov	r5, r0
		break;
   2576a:	e7ed      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   2576c:	4601      	mov	r1, r0
   2576e:	4630      	mov	r0, r6
   25770:	f7ff ff46 	bl	25600 <mqtt_rx_pubcomp>
   25774:	4605      	mov	r5, r0
		break;
   25776:	e7e7      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   25778:	4601      	mov	r1, r0
   2577a:	4630      	mov	r0, r6
   2577c:	f7ff ff4f 	bl	2561e <mqtt_rx_pingresp>
   25780:	4605      	mov	r5, r0
		break;
   25782:	e7e1      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   25784:	4601      	mov	r1, r0
   25786:	4630      	mov	r0, r6
   25788:	f7ff ff7e 	bl	25688 <mqtt_rx_publish>
   2578c:	4605      	mov	r5, r0
		break;
   2578e:	e7db      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   25790:	4601      	mov	r1, r0
   25792:	4630      	mov	r0, r6
   25794:	f7ff ff3e 	bl	25614 <mqtt_rx_pubrel>
   25798:	4605      	mov	r5, r0
		break;
   2579a:	e7d5      	b.n	25748 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   2579c:	4601      	mov	r1, r0
   2579e:	4630      	mov	r0, r6
   257a0:	f7ff ff4a 	bl	25638 <mqtt_rx_suback>
   257a4:	4605      	mov	r5, r0
		break;
   257a6:	e7cf      	b.n	25748 <mqtt_parser+0x58>
		rc = -EINVAL;
   257a8:	f06f 0515 	mvn.w	r5, #21
   257ac:	e7cc      	b.n	25748 <mqtt_parser+0x58>
		return -ENOMEM;
   257ae:	f06f 050b 	mvn.w	r5, #11
   257b2:	e7d3      	b.n	2575c <mqtt_parser+0x6c>

000257b4 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   257b4:	b530      	push	{r4, r5, lr}
   257b6:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   257b8:	b348      	cbz	r0, 2580e <mqtt_connect+0x5a>
   257ba:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   257bc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   257c0:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   257c4:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   257c6:	9004      	str	r0, [sp, #16]
   257c8:	9103      	str	r1, [sp, #12]
   257ca:	9202      	str	r2, [sp, #8]
   257cc:	9301      	str	r3, [sp, #4]
   257ce:	2300      	movs	r3, #0
   257d0:	9300      	str	r3, [sp, #0]
   257d2:	2206      	movs	r2, #6
   257d4:	2101      	movs	r1, #1
   257d6:	f000 f913 	bl	25a00 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   257da:	1e05      	subs	r5, r0, #0
   257dc:	db0e      	blt.n	257fc <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   257de:	2300      	movs	r3, #0
   257e0:	9300      	str	r3, [sp, #0]
   257e2:	4a0c      	ldr	r2, [pc, #48]	; (25814 <mqtt_connect+0x60>)
   257e4:	490c      	ldr	r1, [pc, #48]	; (25818 <mqtt_connect+0x64>)
   257e6:	4620      	mov	r0, r4
   257e8:	f000 fb11 	bl	25e0e <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   257ec:	1e05      	subs	r5, r0, #0
   257ee:	db05      	blt.n	257fc <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   257f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   257f2:	4620      	mov	r0, r4
   257f4:	f000 f9ec 	bl	25bd0 <net_app_connect>
	if (rc < 0) {
   257f8:	1e05      	subs	r5, r0, #0
   257fa:	da05      	bge.n	25808 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   257fc:	4620      	mov	r0, r4
   257fe:	f000 fbbd 	bl	25f7c <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   25802:	4620      	mov	r0, r4
   25804:	f000 fab8 	bl	25d78 <net_app_release>

	return rc;
}
   25808:	4628      	mov	r0, r5
   2580a:	b007      	add	sp, #28
   2580c:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   2580e:	f06f 050d 	mvn.w	r5, #13
   25812:	e7f9      	b.n	25808 <mqtt_connect+0x54>
   25814:	000252d3 	.word	0x000252d3
   25818:	000252d1 	.word	0x000252d1

0002581c <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   2581c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   25820:	f043 0301 	orr.w	r3, r3, #1
   25824:	f36f 0341 	bfc	r3, #1, #1
   25828:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   2582c:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   25830:	4b02      	ldr	r3, [pc, #8]	; (2583c <mqtt_init+0x20>)
   25832:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   25836:	2000      	movs	r0, #0
   25838:	4770      	bx	lr
   2583a:	bf00      	nop
   2583c:	000256f1 	.word	0x000256f1

00025840 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   25840:	b178      	cbz	r0, 25862 <mqtt_close+0x22>
{
   25842:	b510      	push	{r4, lr}
   25844:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   25846:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   2584a:	f012 0f01 	tst.w	r2, #1
   2584e:	d101      	bne.n	25854 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   25850:	2000      	movs	r0, #0
}
   25852:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   25854:	f000 fb92 	bl	25f7c <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   25858:	4620      	mov	r0, r4
   2585a:	f000 fa8d 	bl	25d78 <net_app_release>
	return 0;
   2585e:	2000      	movs	r0, #0
   25860:	bd10      	pop	{r4, pc}
		return -EFAULT;
   25862:	f06f 000d 	mvn.w	r0, #13
   25866:	4770      	bx	lr

00025868 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   25868:	b570      	push	{r4, r5, r6, lr}
   2586a:	460c      	mov	r4, r1
   2586c:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   2586e:	f7f4 fff5 	bl	1a85c <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   25872:	4b20      	ldr	r3, [pc, #128]	; (258f4 <net_app_init+0x8c>)
   25874:	fb83 2306 	smull	r2, r3, r3, r6
   25878:	17f5      	asrs	r5, r6, #31
   2587a:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   2587e:	b380      	cbz	r0, 258e2 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   25880:	f014 0f02 	tst.w	r4, #2
   25884:	d114      	bne.n	258b0 <net_app_init+0x48>
	int count = 0;
   25886:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   25888:	f014 0f04 	tst.w	r4, #4
   2588c:	d000      	beq.n	25890 <net_app_init+0x28>
		count++;
   2588e:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   25890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25894:	4818      	ldr	r0, [pc, #96]	; (258f8 <net_app_init+0x90>)
   25896:	f002 ff93 	bl	287c0 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2589a:	2e00      	cmp	r6, #0
   2589c:	db0a      	blt.n	258b4 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   2589e:	b166      	cbz	r6, 258ba <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   258a0:	4a16      	ldr	r2, [pc, #88]	; (258fc <net_app_init+0x94>)
   258a2:	fb82 3206 	smull	r3, r2, r2, r6
   258a6:	17f3      	asrs	r3, r6, #31
   258a8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   258ac:	3301      	adds	r3, #1
   258ae:	e007      	b.n	258c0 <net_app_init+0x58>
		count++;
   258b0:	2101      	movs	r1, #1
   258b2:	e7e9      	b.n	25888 <net_app_init+0x20>
		count = -1;
   258b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   258b8:	e002      	b.n	258c0 <net_app_init+0x58>
		count = 0;
   258ba:	2300      	movs	r3, #0
   258bc:	e000      	b.n	258c0 <net_app_init+0x58>
   258be:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   258c0:	1e5c      	subs	r4, r3, #1
   258c2:	b153      	cbz	r3, 258da <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   258c4:	4629      	mov	r1, r5
   258c6:	480e      	ldr	r0, [pc, #56]	; (25900 <net_app_init+0x98>)
   258c8:	f002 ff96 	bl	287f8 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   258cc:	2800      	cmp	r0, #0
   258ce:	d0f6      	beq.n	258be <net_app_init+0x56>
	return sem->count;
   258d0:	4b09      	ldr	r3, [pc, #36]	; (258f8 <net_app_init+0x90>)
   258d2:	689a      	ldr	r2, [r3, #8]
   258d4:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   258d6:	2a00      	cmp	r2, #0
   258d8:	d1f2      	bne.n	258c0 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   258da:	b92c      	cbnz	r4, 258e8 <net_app_init+0x80>
   258dc:	b936      	cbnz	r6, 258ec <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   258de:	2000      	movs	r0, #0
   258e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   258e2:	f06f 0012 	mvn.w	r0, #18
   258e6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   258e8:	2000      	movs	r0, #0
   258ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   258ec:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   258f0:	bd70      	pop	{r4, r5, r6, pc}
   258f2:	bf00      	nop
   258f4:	66666667 	.word	0x66666667
   258f8:	200023f4 	.word	0x200023f4
   258fc:	10624dd3 	.word	0x10624dd3
   25900:	2000d03c 	.word	0x2000d03c

00025904 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   25904:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   25906:	f000 fb5b 	bl	25fc0 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   2590a:	f247 5230 	movw	r2, #30000	; 0x7530
   2590e:	2100      	movs	r1, #0
   25910:	4801      	ldr	r0, [pc, #4]	; (25918 <init_net_app+0x14>)
   25912:	f7ff ffa9 	bl	25868 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   25916:	bd08      	pop	{r3, pc}
   25918:	00030afc 	.word	0x00030afc

0002591c <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   2591c:	f06f 0015 	mvn.w	r0, #21
   25920:	4770      	bx	lr

00025922 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   25922:	b510      	push	{r4, lr}
   25924:	4604      	mov	r4, r0
   25926:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   25928:	461a      	mov	r2, r3
   2592a:	b113      	cbz	r3, 25932 <set_remote_addr+0x10>
   2592c:	880b      	ldrh	r3, [r1, #0]
   2592e:	2b0a      	cmp	r3, #10
   25930:	d00e      	beq.n	25950 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   25932:	b112      	cbz	r2, 2593a <set_remote_addr+0x18>
   25934:	880b      	ldrh	r3, [r1, #0]
   25936:	2b02      	cmp	r3, #2
   25938:	d012      	beq.n	25960 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   2593a:	9b02      	ldr	r3, [sp, #8]
   2593c:	221c      	movs	r2, #28
   2593e:	4601      	mov	r1, r0
   25940:	4620      	mov	r0, r4
   25942:	f7ff ffeb 	bl	2591c <try_resolve>
	if (ret < 0) {
   25946:	2800      	cmp	r0, #0
   25948:	db0c      	blt.n	25964 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   2594a:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   2594c:	2000      	movs	r0, #0
   2594e:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   25950:	2218      	movs	r2, #24
   25952:	f104 001c 	add.w	r0, r4, #28
   25956:	f7da fcb3 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   2595a:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   2595c:	2000      	movs	r0, #0
   2595e:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   25960:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   25964:	bd10      	pop	{r4, pc}

00025966 <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   25966:	6803      	ldr	r3, [r0, #0]
   25968:	b13b      	cbz	r3, 2597a <close_net_ctx+0x14>
{
   2596a:	b510      	push	{r4, lr}
   2596c:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   2596e:	4618      	mov	r0, r3
   25970:	f7f6 fcbe 	bl	1c2f0 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25974:	2300      	movs	r3, #0
   25976:	6023      	str	r3, [r4, #0]
   25978:	bd10      	pop	{r4, pc}
   2597a:	4770      	bx	lr

0002597c <get_port_number>:
	if (peer_addr_str[0] == '[') {
   2597c:	7803      	ldrb	r3, [r0, #0]
   2597e:	2b5b      	cmp	r3, #91	; 0x5b
   25980:	d002      	beq.n	25988 <get_port_number+0xc>
   25982:	2300      	movs	r3, #0
   25984:	4619      	mov	r1, r3
   25986:	e019      	b.n	259bc <get_port_number+0x40>
{
   25988:	b570      	push	{r4, r5, r6, lr}
   2598a:	460d      	mov	r5, r1
   2598c:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   2598e:	4913      	ldr	r1, [pc, #76]	; (259dc <get_port_number+0x60>)
   25990:	f005 fc0e 	bl	2b1b0 <strstr>
		if (!ptr) {
   25994:	4606      	mov	r6, r0
   25996:	b1f0      	cbz	r0, 259d6 <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   25998:	1c61      	adds	r1, r4, #1
   2599a:	1a44      	subs	r4, r0, r1
   2599c:	2c2e      	cmp	r4, #46	; 0x2e
   2599e:	bfa8      	it	ge
   259a0:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   259a2:	4622      	mov	r2, r4
   259a4:	4628      	mov	r0, r5
   259a6:	f7da fc8b 	bl	2c0 <memcpy>
		buf[end] = '\0';
   259aa:	2100      	movs	r1, #0
   259ac:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   259ae:	220a      	movs	r2, #10
   259b0:	1cb0      	adds	r0, r6, #2
   259b2:	f005 fd9d 	bl	2b4f0 <strtol>
   259b6:	b280      	uxth	r0, r0
		return port;
   259b8:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   259ba:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   259bc:	5cc2      	ldrb	r2, [r0, r3]
   259be:	b11a      	cbz	r2, 259c8 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   259c0:	2a3a      	cmp	r2, #58	; 0x3a
   259c2:	d1fa      	bne.n	259ba <get_port_number+0x3e>
			count++;
   259c4:	3101      	adds	r1, #1
   259c6:	e7f8      	b.n	259ba <get_port_number+0x3e>
	if (count == 1) {
   259c8:	2901      	cmp	r1, #1
   259ca:	d001      	beq.n	259d0 <get_port_number+0x54>
	return 0;
   259cc:	2000      	movs	r0, #0
   259ce:	4770      	bx	lr
		return -EAFNOSUPPORT;
   259d0:	f06f 0069 	mvn.w	r0, #105	; 0x69
   259d4:	4770      	bx	lr
			return -EINVAL;
   259d6:	f06f 0015 	mvn.w	r0, #21
   259da:	bd70      	pop	{r4, r5, r6, pc}
   259dc:	00030b14 	.word	0x00030b14

000259e0 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   259e0:	b538      	push	{r3, r4, r5, lr}
   259e2:	460d      	mov	r5, r1
   259e4:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   259e6:	4613      	mov	r3, r2
   259e8:	2200      	movs	r2, #0
   259ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   259ec:	f7f6 ff88 	bl	1c900 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   259f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   259f2:	b11b      	cbz	r3, 259fc <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   259f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
   259f6:	4629      	mov	r1, r5
   259f8:	4620      	mov	r0, r4
   259fa:	4798      	blx	r3
   259fc:	bd38      	pop	{r3, r4, r5, pc}
	...

00025a00 <net_app_init_client>:
{
   25a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25a04:	b09a      	sub	sp, #104	; 0x68
   25a06:	9e22      	ldr	r6, [sp, #136]	; 0x88
   25a08:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   25a0c:	2800      	cmp	r0, #0
   25a0e:	f000 80c9 	beq.w	25ba4 <net_app_init_client+0x1a4>
   25a12:	4604      	mov	r4, r0
	if (ctx->is_init) {
   25a14:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25a18:	f010 0f01 	tst.w	r0, #1
   25a1c:	f040 80c5 	bne.w	25baa <net_app_init_client+0x1aa>
   25a20:	4699      	mov	r9, r3
   25a22:	4617      	mov	r7, r2
   25a24:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   25a26:	2218      	movs	r2, #24
   25a28:	2100      	movs	r1, #0
   25a2a:	a802      	add	r0, sp, #8
   25a2c:	f005 f846 	bl	2aabc <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   25a30:	2218      	movs	r2, #24
   25a32:	2100      	movs	r1, #0
   25a34:	a808      	add	r0, sp, #32
   25a36:	f005 f841 	bl	2aabc <memset>
	if (peer_addr) {
   25a3a:	2e00      	cmp	r6, #0
   25a3c:	d03c      	beq.n	25ab8 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   25a3e:	2218      	movs	r2, #24
   25a40:	4631      	mov	r1, r6
   25a42:	a808      	add	r0, sp, #32
   25a44:	f7da fc3c 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   25a48:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   25a4c:	f1b9 0f00 	cmp.w	r9, #0
   25a50:	d05e      	beq.n	25b10 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   25a52:	2218      	movs	r2, #24
   25a54:	4649      	mov	r1, r9
   25a56:	a802      	add	r0, sp, #8
   25a58:	f7da fc32 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   25a5c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   25a60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25a64:	429a      	cmp	r2, r3
   25a66:	f040 80a3 	bne.w	25bb0 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   25a6a:	2302      	movs	r3, #2
   25a6c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   25a70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25a72:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   25a74:	4b54      	ldr	r3, [pc, #336]	; (25bc8 <net_app_init_client+0x1c8>)
   25a76:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   25a78:	4b54      	ldr	r3, [pc, #336]	; (25bcc <net_app_init_client+0x1cc>)
   25a7a:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   25a7c:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   25a80:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   25a84:	ab02      	add	r3, sp, #8
   25a86:	463a      	mov	r2, r7
   25a88:	4629      	mov	r1, r5
   25a8a:	4620      	mov	r0, r4
   25a8c:	f000 f949 	bl	25d22 <_net_app_config_local_ctx>
	if (ret < 0) {
   25a90:	1e05      	subs	r5, r0, #0
   25a92:	db42      	blt.n	25b1a <net_app_init_client+0x11a>
	if (peer_addr) {
   25a94:	2e00      	cmp	r6, #0
   25a96:	d04c      	beq.n	25b32 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   25a98:	8833      	ldrh	r3, [r6, #0]
   25a9a:	2b02      	cmp	r3, #2
   25a9c:	f000 808b 	beq.w	25bb6 <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   25aa0:	2b0a      	cmp	r3, #10
   25aa2:	d03e      	beq.n	25b22 <net_app_init_client+0x122>
	ctx->is_init = true;
   25aa4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25aa8:	f043 0301 	orr.w	r3, r3, #1
   25aac:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   25ab0:	4628      	mov	r0, r5
   25ab2:	b01a      	add	sp, #104	; 0x68
   25ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   25ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25aba:	b333      	cbz	r3, 25b0a <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   25abc:	222f      	movs	r2, #47	; 0x2f
   25abe:	a90e      	add	r1, sp, #56	; 0x38
   25ac0:	4618      	mov	r0, r3
   25ac2:	f7ff ff5b 	bl	2597c <get_port_number>
		if (ret > 0) {
   25ac6:	2800      	cmp	r0, #0
   25ac8:	dd17      	ble.n	25afa <net_app_init_client+0xfa>
			peer_port = ret;
   25aca:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   25ace:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   25ad2:	4650      	mov	r0, sl
   25ad4:	f7da fe14 	bl	700 <strlen>
   25ad8:	aa08      	add	r2, sp, #32
   25ada:	4601      	mov	r1, r0
   25adc:	4650      	mov	r0, sl
   25ade:	f7f7 ff72 	bl	1d9c6 <net_ipaddr_parse>
   25ae2:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   25ae4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25ae8:	2b0a      	cmp	r3, #10
   25aea:	d1af      	bne.n	25a4c <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   25aec:	ea4f 2318 	mov.w	r3, r8, lsr #8
   25af0:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   25af4:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   25af8:	e7a8      	b.n	25a4c <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   25afa:	222e      	movs	r2, #46	; 0x2e
   25afc:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25afe:	a80e      	add	r0, sp, #56	; 0x38
   25b00:	f005 f9ba 	bl	2ae78 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   25b04:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   25b08:	e7e3      	b.n	25ad2 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   25b0a:	f04f 0a00 	mov.w	sl, #0
   25b0e:	e79d      	b.n	25a4c <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   25b10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25b14:	f8ad 3008 	strh.w	r3, [sp, #8]
   25b18:	e7a7      	b.n	25a6a <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   25b1a:	4620      	mov	r0, r4
   25b1c:	f7ff ff23 	bl	25966 <close_net_ctx>
		goto fail;
   25b20:	e7c6      	b.n	25ab0 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   25b22:	2218      	movs	r2, #24
   25b24:	4631      	mov	r1, r6
   25b26:	f104 001c 	add.w	r0, r4, #28
   25b2a:	f7da fbc9 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   25b2e:	6364      	str	r4, [r4, #52]	; 0x34
   25b30:	e7b8      	b.n	25aa4 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   25b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25b34:	b363      	cbz	r3, 25b90 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   25b36:	9b25      	ldr	r3, [sp, #148]	; 0x94
   25b38:	9300      	str	r3, [sp, #0]
   25b3a:	f11a 0300 	adds.w	r3, sl, #0
   25b3e:	bf18      	it	ne
   25b40:	2301      	movne	r3, #1
   25b42:	aa0e      	add	r2, sp, #56	; 0x38
   25b44:	a908      	add	r1, sp, #32
   25b46:	4620      	mov	r0, r4
   25b48:	f7ff feeb 	bl	25922 <set_remote_addr>
	if (ret < 0) {
   25b4c:	1e05      	subs	r5, r0, #0
   25b4e:	db25      	blt.n	25b9c <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   25b50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25b52:	b39b      	cbz	r3, 25bbc <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   25b54:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   25b56:	b3a3      	cbz	r3, 25bc2 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   25b58:	8ba3      	ldrh	r3, [r4, #28]
   25b5a:	2b0a      	cmp	r3, #10
   25b5c:	d1a2      	bne.n	25aa4 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   25b5e:	4625      	mov	r5, r4
   25b60:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   25b64:	88e2      	ldrh	r2, [r4, #6]
   25b66:	2100      	movs	r1, #0
   25b68:	4628      	mov	r0, r5
   25b6a:	f000 f8a3 	bl	25cb4 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   25b6e:	6821      	ldr	r1, [r4, #0]
   25b70:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25b74:	9300      	str	r3, [sp, #0]
   25b76:	2318      	movs	r3, #24
   25b78:	462a      	mov	r2, r5
   25b7a:	4620      	mov	r0, r4
   25b7c:	f000 f886 	bl	25c8c <_net_app_set_net_ctx>
		if (ret < 0) {
   25b80:	1e05      	subs	r5, r0, #0
   25b82:	da8f      	bge.n	25aa4 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   25b84:	6820      	ldr	r0, [r4, #0]
   25b86:	f7f6 fbb3 	bl	1c2f0 <net_context_put>
			ctx->ipv6.ctx = NULL;
   25b8a:	2300      	movs	r3, #0
   25b8c:	6023      	str	r3, [r4, #0]
   25b8e:	e789      	b.n	25aa4 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   25b90:	4620      	mov	r0, r4
   25b92:	f7ff fee8 	bl	25966 <close_net_ctx>
		ret = -EINVAL;
   25b96:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   25b9a:	e789      	b.n	25ab0 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   25b9c:	4620      	mov	r0, r4
   25b9e:	f7ff fee2 	bl	25966 <close_net_ctx>
		goto fail;
   25ba2:	e785      	b.n	25ab0 <net_app_init_client+0xb0>
		return -EINVAL;
   25ba4:	f06f 0515 	mvn.w	r5, #21
   25ba8:	e782      	b.n	25ab0 <net_app_init_client+0xb0>
		return -EALREADY;
   25baa:	f06f 0577 	mvn.w	r5, #119	; 0x77
   25bae:	e77f      	b.n	25ab0 <net_app_init_client+0xb0>
			return -EINVAL;
   25bb0:	f06f 0515 	mvn.w	r5, #21
   25bb4:	e77c      	b.n	25ab0 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   25bb6:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   25bba:	e779      	b.n	25ab0 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   25bbc:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25bc0:	e776      	b.n	25ab0 <net_app_init_client+0xb0>
   25bc2:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25bc6:	e773      	b.n	25ab0 <net_app_init_client+0xb0>
   25bc8:	0001c8bf 	.word	0x0001c8bf
   25bcc:	00025c63 	.word	0x00025c63

00025bd0 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   25bd0:	b1d0      	cbz	r0, 25c08 <net_app_connect+0x38>
{
   25bd2:	b570      	push	{r4, r5, r6, lr}
   25bd4:	b082      	sub	sp, #8
   25bd6:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25bd8:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25bdc:	f012 0f01 	tst.w	r2, #1
   25be0:	d015      	beq.n	25c0e <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   25be2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   25be6:	2a02      	cmp	r2, #2
   25be8:	d114      	bne.n	25c14 <net_app_connect+0x44>
   25bea:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25bec:	2100      	movs	r1, #0
   25bee:	f000 f8df 	bl	25db0 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25bf2:	b190      	cbz	r0, 25c1a <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   25bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   25bf6:	9401      	str	r4, [sp, #4]
   25bf8:	9500      	str	r5, [sp, #0]
   25bfa:	4b09      	ldr	r3, [pc, #36]	; (25c20 <net_app_connect+0x50>)
   25bfc:	2218      	movs	r2, #24
   25bfe:	311c      	adds	r1, #28
   25c00:	f7f6 fd4a 	bl	1c698 <net_context_connect>
		}
#endif
	}

	return ret;
}
   25c04:	b002      	add	sp, #8
   25c06:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25c08:	f06f 0015 	mvn.w	r0, #21
   25c0c:	4770      	bx	lr
		return -ENOENT;
   25c0e:	f06f 0001 	mvn.w	r0, #1
   25c12:	e7f7      	b.n	25c04 <net_app_connect+0x34>
		return -EINVAL;
   25c14:	f06f 0015 	mvn.w	r0, #21
   25c18:	e7f4      	b.n	25c04 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   25c1a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25c1e:	e7f1      	b.n	25c04 <net_app_connect+0x34>
   25c20:	000259e1 	.word	0x000259e1

00025c24 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   25c24:	6340      	str	r0, [r0, #52]	; 0x34
   25c26:	4770      	bx	lr

00025c28 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25c28:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25c2c:	2802      	cmp	r0, #2
   25c2e:	d000      	beq.n	25c32 <_app_send+0xa>
   25c30:	4770      	bx	lr
{
   25c32:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25c34:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   25c36:	b114      	cbz	r4, 25c3e <_app_send+0x16>
   25c38:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   25c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25c3c:	47a0      	blx	r4
   25c3e:	bd10      	pop	{r4, pc}

00025c40 <setup_ipv6_ctx>:
{
   25c40:	b510      	push	{r4, lr}
   25c42:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   25c44:	4603      	mov	r3, r0
   25c46:	200a      	movs	r0, #10
   25c48:	f7f6 f8e6 	bl	1be18 <net_context_get>
	if (ret < 0) {
   25c4c:	2800      	cmp	r0, #0
   25c4e:	db05      	blt.n	25c5c <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   25c50:	6823      	ldr	r3, [r4, #0]
   25c52:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   25c54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   25c56:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   25c58:	641a      	str	r2, [r3, #64]	; 0x40
}
   25c5a:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   25c5c:	2300      	movs	r3, #0
   25c5e:	6023      	str	r3, [r4, #0]
		return ret;
   25c60:	bd10      	pop	{r4, pc}

00025c62 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25c62:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25c66:	2802      	cmp	r0, #2
   25c68:	d000      	beq.n	25c6c <_net_app_received+0xa>
   25c6a:	4770      	bx	lr
{
   25c6c:	b538      	push	{r3, r4, r5, lr}
   25c6e:	4618      	mov	r0, r3
   25c70:	4614      	mov	r4, r2
		if (!pkt) {
   25c72:	b121      	cbz	r1, 25c7e <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   25c74:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   25c76:	b10d      	cbz	r5, 25c7c <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   25c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25c7a:	47a8      	blx	r5
   25c7c:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   25c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25c80:	2b00      	cmp	r3, #0
   25c82:	d0fb      	beq.n	25c7c <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   25c84:	6f02      	ldr	r2, [r0, #112]	; 0x70
   25c86:	4621      	mov	r1, r4
   25c88:	4798      	blx	r3
   25c8a:	bd38      	pop	{r3, r4, r5, pc}

00025c8c <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25c8c:	b161      	cbz	r1, 25ca8 <_net_app_set_net_ctx+0x1c>
{
   25c8e:	b510      	push	{r4, lr}
   25c90:	4614      	mov	r4, r2
   25c92:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   25c94:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25c98:	f012 0f01 	tst.w	r2, #1
   25c9c:	d007      	beq.n	25cae <_net_app_set_net_ctx+0x22>
   25c9e:	461a      	mov	r2, r3
   25ca0:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   25ca2:	f7f6 fb67 	bl	1c374 <net_context_bind>
	return ret;
   25ca6:	bd10      	pop	{r4, pc}
		return -ENOENT;
   25ca8:	f06f 0001 	mvn.w	r0, #1
   25cac:	4770      	bx	lr
   25cae:	f06f 0001 	mvn.w	r0, #1
}
   25cb2:	bd10      	pop	{r4, pc}

00025cb4 <_net_app_set_local_addr>:
{
   25cb4:	b570      	push	{r4, r5, r6, lr}
   25cb6:	b084      	sub	sp, #16
   25cb8:	4604      	mov	r4, r0
	if (myaddr) {
   25cba:	b169      	cbz	r1, 25cd8 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   25cbc:	8800      	ldrh	r0, [r0, #0]
   25cbe:	2802      	cmp	r0, #2
   25cc0:	d029      	beq.n	25d16 <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   25cc2:	280a      	cmp	r0, #10
   25cc4:	d12a      	bne.n	25d1c <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   25cc6:	0a13      	lsrs	r3, r2, #8
   25cc8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   25ccc:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   25cce:	1d22      	adds	r2, r4, #4
   25cd0:	f7f7 fcc3 	bl	1d65a <net_addr_pton>
}
   25cd4:	b004      	add	sp, #16
   25cd6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   25cd8:	8803      	ldrh	r3, [r0, #0]
   25cda:	2b0a      	cmp	r3, #10
   25cdc:	d003      	beq.n	25ce6 <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   25cde:	2b02      	cmp	r3, #2
   25ce0:	d016      	beq.n	25d10 <_net_app_set_local_addr+0x5c>
	return 0;
   25ce2:	2000      	movs	r0, #0
   25ce4:	e7f6      	b.n	25cd4 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   25ce6:	f7f9 f959 	bl	1ef9c <net_ipv6_unspecified_address>
   25cea:	4601      	mov	r1, r0
   25cec:	2000      	movs	r0, #0
   25cee:	f7f5 faf9 	bl	1b2e4 <net_if_ipv6_select_src_addr>
   25cf2:	4603      	mov	r3, r0
   25cf4:	466d      	mov	r5, sp
   25cf6:	6800      	ldr	r0, [r0, #0]
   25cf8:	6859      	ldr	r1, [r3, #4]
   25cfa:	689a      	ldr	r2, [r3, #8]
   25cfc:	68db      	ldr	r3, [r3, #12]
   25cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25d00:	466d      	mov	r5, sp
   25d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   25d04:	6060      	str	r0, [r4, #4]
   25d06:	60a1      	str	r1, [r4, #8]
   25d08:	60e2      	str	r2, [r4, #12]
   25d0a:	6123      	str	r3, [r4, #16]
	return 0;
   25d0c:	2000      	movs	r0, #0
   25d0e:	e7e1      	b.n	25cd4 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   25d10:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25d14:	e7de      	b.n	25cd4 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   25d16:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25d1a:	e7db      	b.n	25cd4 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   25d1c:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25d20:	e7d8      	b.n	25cd4 <_net_app_set_local_addr+0x20>

00025d22 <_net_app_config_local_ctx>:
{
   25d22:	b538      	push	{r3, r4, r5, lr}
   25d24:	4604      	mov	r4, r0
	if (!addr) {
   25d26:	b163      	cbz	r3, 25d42 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   25d28:	881b      	ldrh	r3, [r3, #0]
   25d2a:	2b0a      	cmp	r3, #10
   25d2c:	d015      	beq.n	25d5a <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   25d2e:	2b02      	cmp	r3, #2
   25d30:	d01c      	beq.n	25d6c <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   25d32:	b9f3      	cbnz	r3, 25d72 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25d34:	4620      	mov	r0, r4
   25d36:	f7ff ff83 	bl	25c40 <setup_ipv6_ctx>
   25d3a:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25d3c:	6364      	str	r4, [r4, #52]	; 0x34
}
   25d3e:	4628      	mov	r0, r5
   25d40:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   25d42:	8883      	ldrh	r3, [r0, #4]
   25d44:	2b0a      	cmp	r3, #10
   25d46:	d000      	beq.n	25d4a <_net_app_config_local_ctx+0x28>
   25d48:	b96b      	cbnz	r3, 25d66 <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25d4a:	4620      	mov	r0, r4
   25d4c:	f7ff ff78 	bl	25c40 <setup_ipv6_ctx>
   25d50:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   25d52:	4620      	mov	r0, r4
   25d54:	f7ff ff66 	bl	25c24 <select_default_ctx>
   25d58:	e7f1      	b.n	25d3e <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25d5a:	4620      	mov	r0, r4
   25d5c:	f7ff ff70 	bl	25c40 <setup_ipv6_ctx>
   25d60:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25d62:	6364      	str	r4, [r4, #52]	; 0x34
   25d64:	e7eb      	b.n	25d3e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25d66:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25d6a:	e7e8      	b.n	25d3e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25d6c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25d70:	e7e5      	b.n	25d3e <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   25d72:	f06f 0515 	mvn.w	r5, #21
	return ret;
   25d76:	e7e2      	b.n	25d3e <_net_app_config_local_ctx+0x1c>

00025d78 <net_app_release>:
	if (!ctx) {
   25d78:	b1a0      	cbz	r0, 25da4 <net_app_release+0x2c>
{
   25d7a:	b510      	push	{r4, lr}
   25d7c:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25d7e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25d82:	f013 0f01 	tst.w	r3, #1
   25d86:	d010      	beq.n	25daa <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   25d88:	6800      	ldr	r0, [r0, #0]
   25d8a:	b118      	cbz	r0, 25d94 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   25d8c:	f7f6 fab0 	bl	1c2f0 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25d90:	2300      	movs	r3, #0
   25d92:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   25d94:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25d98:	f36f 0300 	bfc	r3, #0, #1
   25d9c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   25da0:	2000      	movs	r0, #0
   25da2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25da4:	f06f 0015 	mvn.w	r0, #21
   25da8:	4770      	bx	lr
		return -ENOENT;
   25daa:	f06f 0001 	mvn.w	r0, #1
}
   25dae:	bd10      	pop	{r4, pc}

00025db0 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25db0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   25db4:	2b02      	cmp	r3, #2
   25db6:	d128      	bne.n	25e0a <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   25db8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   25dbc:	2b11      	cmp	r3, #17
   25dbe:	d009      	beq.n	25dd4 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   25dc0:	b1c1      	cbz	r1, 25df4 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   25dc2:	880b      	ldrh	r3, [r1, #0]
   25dc4:	2b02      	cmp	r3, #2
   25dc6:	d01c      	beq.n	25e02 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   25dc8:	2b0a      	cmp	r3, #10
   25dca:	d016      	beq.n	25dfa <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   25dcc:	b9db      	cbnz	r3, 25e06 <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   25dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25dd0:	6818      	ldr	r0, [r3, #0]
   25dd2:	4770      	bx	lr
		if (!dst) {
   25dd4:	b131      	cbz	r1, 25de4 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   25dd6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25dda:	f013 0f02 	tst.w	r3, #2
   25dde:	d0f0      	beq.n	25dc2 <_net_app_select_net_ctx+0x12>
				return NULL;
   25de0:	2000      	movs	r0, #0
   25de2:	4770      	bx	lr
			if (ctx->is_tls) {
   25de4:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25de8:	f013 0f02 	tst.w	r3, #2
   25dec:	d107      	bne.n	25dfe <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   25dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25df0:	6818      	ldr	r0, [r3, #0]
   25df2:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   25df4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25df6:	6818      	ldr	r0, [r3, #0]
   25df8:	4770      	bx	lr
				return ctx->ipv6.ctx;
   25dfa:	6800      	ldr	r0, [r0, #0]
   25dfc:	4770      	bx	lr
				return NULL;
   25dfe:	2000      	movs	r0, #0
   25e00:	4770      	bx	lr
				return NULL;
   25e02:	2000      	movs	r0, #0
   25e04:	4770      	bx	lr
	return NULL;
   25e06:	2000      	movs	r0, #0
   25e08:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   25e0a:	2000      	movs	r0, #0
}
   25e0c:	4770      	bx	lr

00025e0e <net_app_set_cb>:
	if (!ctx) {
   25e0e:	b170      	cbz	r0, 25e2e <net_app_set_cb+0x20>
{
   25e10:	b410      	push	{r4}
   25e12:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25e14:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25e18:	f010 0f01 	tst.w	r0, #1
   25e1c:	d00a      	beq.n	25e34 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   25e1e:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   25e20:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   25e22:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   25e24:	9b01      	ldr	r3, [sp, #4]
   25e26:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   25e28:	2000      	movs	r0, #0
}
   25e2a:	bc10      	pop	{r4}
   25e2c:	4770      	bx	lr
		return -EINVAL;
   25e2e:	f06f 0015 	mvn.w	r0, #21
   25e32:	4770      	bx	lr
		return -ENOENT;
   25e34:	f06f 0001 	mvn.w	r0, #1
   25e38:	e7f7      	b.n	25e2a <net_app_set_cb+0x1c>
	...

00025e3c <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   25e3c:	2800      	cmp	r0, #0
   25e3e:	d064      	beq.n	25f0a <net_app_send_pkt+0xce>
{
   25e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e44:	b08a      	sub	sp, #40	; 0x28
   25e46:	460d      	mov	r5, r1
   25e48:	4616      	mov	r6, r2
   25e4a:	461f      	mov	r7, r3
   25e4c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25e4e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25e52:	f013 0f01 	tst.w	r3, #1
   25e56:	d05b      	beq.n	25f10 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   25e58:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   25e5a:	b188      	cbz	r0, 25e80 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   25e5c:	f8d1 e008 	ldr.w	lr, [r1, #8]
   25e60:	4673      	mov	r3, lr
	size_t bytes = 0;
   25e62:	2100      	movs	r1, #0
   25e64:	e002      	b.n	25e6c <net_app_send_pkt+0x30>
		bytes += buf->len;
   25e66:	899a      	ldrh	r2, [r3, #12]
   25e68:	4411      	add	r1, r2
		buf = buf->frags;
   25e6a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25e6c:	2b00      	cmp	r3, #0
   25e6e:	d1fa      	bne.n	25e66 <net_app_send_pkt+0x2a>
   25e70:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   25e72:	2900      	cmp	r1, #0
   25e74:	dd0d      	ble.n	25e92 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   25e76:	f10e 0008 	add.w	r0, lr, #8
   25e7a:	f7f4 f9f8 	bl	1a26e <net_buf_simple_pull>
   25e7e:	e008      	b.n	25e92 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   25e80:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   25e82:	2200      	movs	r2, #0
   25e84:	e002      	b.n	25e8c <net_app_send_pkt+0x50>
		bytes += buf->len;
   25e86:	8999      	ldrh	r1, [r3, #12]
   25e88:	440a      	add	r2, r1
		buf = buf->frags;
   25e8a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25e8c:	2b00      	cmp	r3, #0
   25e8e:	d1fa      	bne.n	25e86 <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   25e90:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   25e92:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25e96:	2b11      	cmp	r3, #17
   25e98:	d00e      	beq.n	25eb8 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   25e9a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   25e9e:	9402      	str	r4, [sp, #8]
   25ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25ea2:	9301      	str	r3, [sp, #4]
   25ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25ea6:	9300      	str	r3, [sp, #0]
   25ea8:	4b21      	ldr	r3, [pc, #132]	; (25f30 <net_app_send_pkt+0xf4>)
   25eaa:	463a      	mov	r2, r7
   25eac:	4631      	mov	r1, r6
   25eae:	4628      	mov	r0, r5
   25eb0:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   25eb2:	b00a      	add	sp, #40	; 0x28
   25eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   25eb8:	b1de      	cbz	r6, 25ef2 <net_app_send_pkt+0xb6>
	return pkt->family;
   25eba:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25ebe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25ec2:	2b02      	cmp	r3, #2
   25ec4:	d02d      	beq.n	25f22 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   25ec6:	2b0a      	cmp	r3, #10
   25ec8:	d12e      	bne.n	25f28 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   25eca:	af04      	add	r7, sp, #16
   25ecc:	6830      	ldr	r0, [r6, #0]
   25ece:	6871      	ldr	r1, [r6, #4]
   25ed0:	68b2      	ldr	r2, [r6, #8]
   25ed2:	68f3      	ldr	r3, [r6, #12]
   25ed4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25ed6:	6930      	ldr	r0, [r6, #16]
   25ed8:	6971      	ldr	r1, [r6, #20]
   25eda:	c703      	stmia	r7!, {r0, r1}
   25edc:	af04      	add	r7, sp, #16
   25ede:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25ee0:	61e0      	str	r0, [r4, #28]
   25ee2:	6221      	str	r1, [r4, #32]
   25ee4:	6262      	str	r2, [r4, #36]	; 0x24
   25ee6:	62a3      	str	r3, [r4, #40]	; 0x28
   25ee8:	cf03      	ldmia	r7!, {r0, r1}
   25eea:	62e0      	str	r0, [r4, #44]	; 0x2c
   25eec:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   25eee:	2718      	movs	r7, #24
   25ef0:	e7d3      	b.n	25e9a <net_app_send_pkt+0x5e>
   25ef2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25ef6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25efa:	2b02      	cmp	r3, #2
   25efc:	d00b      	beq.n	25f16 <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   25efe:	2b0a      	cmp	r3, #10
   25f00:	d10c      	bne.n	25f1c <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   25f02:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   25f06:	2718      	movs	r7, #24
   25f08:	e7c7      	b.n	25e9a <net_app_send_pkt+0x5e>
		return -EINVAL;
   25f0a:	f06f 0015 	mvn.w	r0, #21
   25f0e:	4770      	bx	lr
		return -ENOENT;
   25f10:	f06f 0001 	mvn.w	r0, #1
   25f14:	e7cd      	b.n	25eb2 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25f16:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f1a:	e7ca      	b.n	25eb2 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25f1c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f20:	e7c7      	b.n	25eb2 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25f22:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f26:	e7c4      	b.n	25eb2 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25f28:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f2c:	e7c1      	b.n	25eb2 <net_app_send_pkt+0x76>
   25f2e:	bf00      	nop
   25f30:	00025c29 	.word	0x00025c29

00025f34 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   25f34:	b510      	push	{r4, lr}
   25f36:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   25f38:	2300      	movs	r3, #0
   25f3a:	9300      	str	r3, [sp, #0]
   25f3c:	9301      	str	r3, [sp, #4]
   25f3e:	9302      	str	r3, [sp, #8]
   25f40:	9303      	str	r3, [sp, #12]
   25f42:	9304      	str	r3, [sp, #16]
   25f44:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   25f46:	b198      	cbz	r0, 25f70 <net_app_get_net_pkt+0x3c>
   25f48:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   25f4a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25f4e:	f010 0f01 	tst.w	r0, #1
   25f52:	d00f      	beq.n	25f74 <net_app_get_net_pkt+0x40>
   25f54:	4618      	mov	r0, r3
   25f56:	4614      	mov	r4, r2
   25f58:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   25f5a:	a906      	add	r1, sp, #24
   25f5c:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   25f60:	f7ff ff26 	bl	25db0 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25f64:	b140      	cbz	r0, 25f78 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   25f66:	4621      	mov	r1, r4
   25f68:	f7f6 fe24 	bl	1cbb4 <net_pkt_get_tx>
}
   25f6c:	b006      	add	sp, #24
   25f6e:	bd10      	pop	{r4, pc}
		return NULL;
   25f70:	2000      	movs	r0, #0
   25f72:	e7fb      	b.n	25f6c <net_app_get_net_pkt+0x38>
		return NULL;
   25f74:	2000      	movs	r0, #0
   25f76:	e7f9      	b.n	25f6c <net_app_get_net_pkt+0x38>
		return NULL;
   25f78:	2000      	movs	r0, #0
   25f7a:	e7f7      	b.n	25f6c <net_app_get_net_pkt+0x38>

00025f7c <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   25f7c:	b1c0      	cbz	r0, 25fb0 <net_app_close+0x34>
{
   25f7e:	b538      	push	{r3, r4, r5, lr}
   25f80:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25f82:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25f86:	f013 0f01 	tst.w	r3, #1
   25f8a:	d014      	beq.n	25fb6 <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25f8c:	2100      	movs	r1, #0
   25f8e:	f7ff ff0f 	bl	25db0 <_net_app_select_net_ctx>
   25f92:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   25f94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25f96:	b11b      	cbz	r3, 25fa0 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   25f98:	6f22      	ldr	r2, [r4, #112]	; 0x70
   25f9a:	2100      	movs	r1, #0
   25f9c:	4620      	mov	r0, r4
   25f9e:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   25fa0:	b165      	cbz	r5, 25fbc <net_app_close+0x40>
		net_ctx->net_app = NULL;
   25fa2:	2400      	movs	r4, #0
   25fa4:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   25fa6:	4628      	mov	r0, r5
   25fa8:	f7f6 f9a2 	bl	1c2f0 <net_context_put>
	}

	return 0;
   25fac:	4620      	mov	r0, r4
   25fae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25fb0:	f06f 0015 	mvn.w	r0, #21
   25fb4:	4770      	bx	lr
		return -ENOENT;
   25fb6:	f06f 0001 	mvn.w	r0, #1
   25fba:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   25fbc:	2000      	movs	r0, #0
}
   25fbe:	bd38      	pop	{r3, r4, r5, pc}

00025fc0 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   25fc0:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   25fc2:	2000      	movs	r0, #0
   25fc4:	f7df fdec 	bl	5ba0 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   25fc8:	1e03      	subs	r3, r0, #0
   25fca:	db14      	blt.n	25ff6 <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   25fcc:	4810      	ldr	r0, [pc, #64]	; (26010 <_net_app_bt_setup+0x50>)
   25fce:	f001 f939 	bl	27244 <device_get_binding>
	if (!dev) {
   25fd2:	b1b8      	cbz	r0, 26004 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   25fd4:	f7f4 fc30 	bl	1a838 <net_if_lookup_by_dev>
	if (!iface) {
   25fd8:	4604      	mov	r4, r0
   25fda:	b1b0      	cbz	r0, 2600a <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   25fdc:	480d      	ldr	r0, [pc, #52]	; (26014 <_net_app_bt_setup+0x54>)
   25fde:	f7e3 fcf9 	bl	99d4 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   25fe2:	2303      	movs	r3, #3
   25fe4:	4a0c      	ldr	r2, [pc, #48]	; (26018 <_net_app_bt_setup+0x58>)
   25fe6:	4621      	mov	r1, r4
   25fe8:	480c      	ldr	r0, [pc, #48]	; (2601c <_net_app_bt_setup+0x5c>)
   25fea:	f7f7 fe6b 	bl	1dcc4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   25fee:	4603      	mov	r3, r0
   25ff0:	b928      	cbnz	r0, 25ffe <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   25ff2:	4618      	mov	r0, r3
   25ff4:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   25ff6:	f113 0f78 	cmn.w	r3, #120	; 0x78
   25ffa:	d1fa      	bne.n	25ff2 <_net_app_bt_setup+0x32>
   25ffc:	e7e6      	b.n	25fcc <_net_app_bt_setup+0xc>
		return -EINVAL;
   25ffe:	f06f 0315 	mvn.w	r3, #21
   26002:	e7f6      	b.n	25ff2 <_net_app_bt_setup+0x32>
		return -ENODEV;
   26004:	f06f 0312 	mvn.w	r3, #18
   26008:	e7f3      	b.n	25ff2 <_net_app_bt_setup+0x32>
		return -EINVAL;
   2600a:	f06f 0315 	mvn.w	r3, #21
   2600e:	e7f0      	b.n	25ff2 <_net_app_bt_setup+0x32>
   26010:	0002f7f0 	.word	0x0002f7f0
   26014:	2000c4b4 	.word	0x2000c4b4
   26018:	0002fc18 	.word	0x0002fc18
   2601c:	61550001 	.word	0x61550001

00026020 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26020:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26022:	4802      	ldr	r0, [pc, #8]	; (2602c <shell_run+0xc>)
   26024:	f000 fbbe 	bl	267a4 <shell_init>
	return 0;
}
   26028:	2000      	movs	r0, #0
   2602a:	bd08      	pop	{r3, pc}
   2602c:	00030b18 	.word	0x00030b18

00026030 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26030:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26032:	4b0f      	ldr	r3, [pc, #60]	; (26070 <get_prompt+0x40>)
   26034:	681b      	ldr	r3, [r3, #0]
   26036:	b123      	cbz	r3, 26042 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26038:	4798      	blx	r3
		if (str) {
   2603a:	4603      	mov	r3, r0
   2603c:	b108      	cbz	r0, 26042 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   2603e:	4618      	mov	r0, r3
   26040:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26042:	4b0c      	ldr	r3, [pc, #48]	; (26074 <get_prompt+0x44>)
   26044:	681b      	ldr	r3, [r3, #0]
   26046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2604a:	d00c      	beq.n	26066 <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   2604c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26050:	009a      	lsls	r2, r3, #2
   26052:	4b09      	ldr	r3, [pc, #36]	; (26078 <get_prompt+0x48>)
   26054:	4413      	add	r3, r2
   26056:	689b      	ldr	r3, [r3, #8]
   26058:	b143      	cbz	r3, 2606c <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   2605a:	4798      	blx	r3
			if (ret) {
   2605c:	4603      	mov	r3, r0
   2605e:	2800      	cmp	r0, #0
   26060:	d1ed      	bne.n	2603e <get_prompt+0xe>
		return default_module_prompt;
   26062:	4b06      	ldr	r3, [pc, #24]	; (2607c <get_prompt+0x4c>)
   26064:	e7eb      	b.n	2603e <get_prompt+0xe>
	return prompt;
   26066:	4b06      	ldr	r3, [pc, #24]	; (26080 <get_prompt+0x50>)
   26068:	681b      	ldr	r3, [r3, #0]
   2606a:	e7e8      	b.n	2603e <get_prompt+0xe>
		return default_module_prompt;
   2606c:	4b03      	ldr	r3, [pc, #12]	; (2607c <get_prompt+0x4c>)
   2606e:	e7e6      	b.n	2603e <get_prompt+0xe>
   26070:	20002410 	.word	0x20002410
   26074:	2000c4c0 	.word	0x2000c4c0
   26078:	2000cf80 	.word	0x2000cf80
   2607c:	200025c0 	.word	0x200025c0
   26080:	200025d8 	.word	0x200025d8

00026084 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26084:	2801      	cmp	r0, #1
   26086:	d001      	beq.n	2608c <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26088:	2000      	movs	r0, #0
   2608a:	4770      	bx	lr
		default_module = -1;
   2608c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26090:	4b01      	ldr	r3, [pc, #4]	; (26098 <exit_module+0x14>)
   26092:	601a      	str	r2, [r3, #0]
   26094:	e7f8      	b.n	26088 <exit_module+0x4>
   26096:	bf00      	nop
   26098:	2000c4c0 	.word	0x2000c4c0

0002609c <print_module_commands>:
{
   2609c:	b538      	push	{r3, r4, r5, lr}
   2609e:	4605      	mov	r5, r0
	printk("help\n");
   260a0:	480a      	ldr	r0, [pc, #40]	; (260cc <print_module_commands+0x30>)
   260a2:	f7dc ff6d 	bl	2f80 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   260a6:	2400      	movs	r4, #0
   260a8:	e003      	b.n	260b2 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   260aa:	4809      	ldr	r0, [pc, #36]	; (260d0 <print_module_commands+0x34>)
   260ac:	f7dc ff68 	bl	2f80 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   260b0:	3401      	adds	r4, #1
   260b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   260b6:	009a      	lsls	r2, r3, #2
   260b8:	4b06      	ldr	r3, [pc, #24]	; (260d4 <print_module_commands+0x38>)
   260ba:	4413      	add	r3, r2
   260bc:	6859      	ldr	r1, [r3, #4]
   260be:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   260c2:	0093      	lsls	r3, r2, #2
   260c4:	58c9      	ldr	r1, [r1, r3]
   260c6:	2900      	cmp	r1, #0
   260c8:	d1ef      	bne.n	260aa <print_module_commands+0xe>
}
   260ca:	bd38      	pop	{r3, r4, r5, pc}
   260cc:	00030bd4 	.word	0x00030bd4
   260d0:	0002fdf0 	.word	0x0002fdf0
   260d4:	2000cf80 	.word	0x2000cf80

000260d8 <line2argv>:
{
   260d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260da:	4604      	mov	r4, r0
   260dc:	460e      	mov	r6, r1
   260de:	4617      	mov	r7, r2
	if (!strlen(str)) {
   260e0:	f7da fb0e 	bl	700 <strlen>
   260e4:	b918      	cbnz	r0, 260ee <line2argv+0x16>
   260e6:	4605      	mov	r5, r0
}
   260e8:	4628      	mov	r0, r5
   260ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   260ec:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   260ee:	7823      	ldrb	r3, [r4, #0]
   260f0:	2b20      	cmp	r3, #32
   260f2:	d0fb      	beq.n	260ec <line2argv+0x14>
	if (!*str) {
   260f4:	b30b      	cbz	r3, 2613a <line2argv+0x62>
	argv[argc++] = str;
   260f6:	6034      	str	r4, [r6, #0]
   260f8:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   260fa:	e00a      	b.n	26112 <line2argv+0x3a>
			str++;
   260fc:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   260fe:	7823      	ldrb	r3, [r4, #0]
   26100:	2b20      	cmp	r3, #32
   26102:	d0fb      	beq.n	260fc <line2argv+0x24>
		if (!*str) {
   26104:	b1ab      	cbz	r3, 26132 <line2argv+0x5a>
		argv[argc++] = str;
   26106:	1c6b      	adds	r3, r5, #1
   26108:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   2610c:	42bb      	cmp	r3, r7
   2610e:	d00a      	beq.n	26126 <line2argv+0x4e>
		argv[argc++] = str;
   26110:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26112:	2120      	movs	r1, #32
   26114:	4620      	mov	r0, r4
   26116:	f004 fd8b 	bl	2ac30 <strchr>
   2611a:	4603      	mov	r3, r0
   2611c:	b148      	cbz	r0, 26132 <line2argv+0x5a>
		*str++ = '\0';
   2611e:	1c5c      	adds	r4, r3, #1
   26120:	2200      	movs	r2, #0
   26122:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26124:	e7eb      	b.n	260fe <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26126:	1e79      	subs	r1, r7, #1
   26128:	4805      	ldr	r0, [pc, #20]	; (26140 <line2argv+0x68>)
   2612a:	f7dc ff29 	bl	2f80 <printk>
			return 0;
   2612e:	2500      	movs	r5, #0
   26130:	e7da      	b.n	260e8 <line2argv+0x10>
	argv[argc] = NULL;
   26132:	2300      	movs	r3, #0
   26134:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26138:	e7d6      	b.n	260e8 <line2argv+0x10>
		return 0;
   2613a:	2500      	movs	r5, #0
   2613c:	e7d4      	b.n	260e8 <line2argv+0x10>
   2613e:	bf00      	nop
   26140:	00030bb4 	.word	0x00030bb4

00026144 <get_destination_module>:
{
   26144:	b538      	push	{r3, r4, r5, lr}
   26146:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26148:	2400      	movs	r4, #0
   2614a:	4a0c      	ldr	r2, [pc, #48]	; (2617c <get_destination_module+0x38>)
   2614c:	4b0c      	ldr	r3, [pc, #48]	; (26180 <get_destination_module+0x3c>)
   2614e:	1a9b      	subs	r3, r3, r2
   26150:	109b      	asrs	r3, r3, #2
   26152:	4a0c      	ldr	r2, [pc, #48]	; (26184 <get_destination_module+0x40>)
   26154:	fb02 f303 	mul.w	r3, r2, r3
   26158:	429c      	cmp	r4, r3
   2615a:	da0b      	bge.n	26174 <get_destination_module+0x30>
		if (!strncmp(module_str,
   2615c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26160:	0093      	lsls	r3, r2, #2
   26162:	2214      	movs	r2, #20
   26164:	4905      	ldr	r1, [pc, #20]	; (2617c <get_destination_module+0x38>)
   26166:	58c9      	ldr	r1, [r1, r3]
   26168:	4628      	mov	r0, r5
   2616a:	f004 fe33 	bl	2add4 <strncmp>
   2616e:	b118      	cbz	r0, 26178 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26170:	3401      	adds	r4, #1
   26172:	e7ea      	b.n	2614a <get_destination_module+0x6>
	return -1;
   26174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26178:	4620      	mov	r0, r4
   2617a:	bd38      	pop	{r3, r4, r5, pc}
   2617c:	2000cf80 	.word	0x2000cf80
   26180:	2000cf8c 	.word	0x2000cf8c
   26184:	aaaaaaab 	.word	0xaaaaaaab

00026188 <set_default_module>:
{
   26188:	b538      	push	{r3, r4, r5, lr}
   2618a:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   2618c:	f7da fab8 	bl	700 <strlen>
   26190:	2814      	cmp	r0, #20
   26192:	d813      	bhi.n	261bc <set_default_module+0x34>
	module = get_destination_module(name);
   26194:	4620      	mov	r0, r4
   26196:	f7ff ffd5 	bl	26144 <get_destination_module>
	if (module == -1) {
   2619a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2619e:	d014      	beq.n	261ca <set_default_module+0x42>
	default_module = module;
   261a0:	4b0d      	ldr	r3, [pc, #52]	; (261d8 <set_default_module+0x50>)
   261a2:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   261a4:	4d0d      	ldr	r5, [pc, #52]	; (261dc <set_default_module+0x54>)
   261a6:	2214      	movs	r2, #20
   261a8:	4621      	mov	r1, r4
   261aa:	4628      	mov	r0, r5
   261ac:	f004 fe64 	bl	2ae78 <strncpy>
	strcat(default_module_prompt, "> ");
   261b0:	490b      	ldr	r1, [pc, #44]	; (261e0 <set_default_module+0x58>)
   261b2:	4628      	mov	r0, r5
   261b4:	f004 fd1c 	bl	2abf0 <strcat>
	return 0;
   261b8:	2000      	movs	r0, #0
}
   261ba:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   261bc:	4621      	mov	r1, r4
   261be:	4809      	ldr	r0, [pc, #36]	; (261e4 <set_default_module+0x5c>)
   261c0:	f7dc fede 	bl	2f80 <printk>
		return -EINVAL;
   261c4:	f06f 0015 	mvn.w	r0, #21
   261c8:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   261ca:	4621      	mov	r1, r4
   261cc:	4806      	ldr	r0, [pc, #24]	; (261e8 <set_default_module+0x60>)
   261ce:	f7dc fed7 	bl	2f80 <printk>
		return -EINVAL;
   261d2:	f06f 0015 	mvn.w	r0, #21
   261d6:	bd38      	pop	{r3, r4, r5, pc}
   261d8:	2000c4c0 	.word	0x2000c4c0
   261dc:	200025c0 	.word	0x200025c0
   261e0:	00030c3c 	.word	0x00030c3c
   261e4:	00030bdc 	.word	0x00030bdc
   261e8:	00030c10 	.word	0x00030c10

000261ec <select_module>:
{
   261ec:	b508      	push	{r3, lr}
	if (argc == 1) {
   261ee:	2801      	cmp	r0, #1
   261f0:	d003      	beq.n	261fa <select_module+0xe>
	return set_default_module(argv[1]);
   261f2:	6848      	ldr	r0, [r1, #4]
   261f4:	f7ff ffc8 	bl	26188 <set_default_module>
}
   261f8:	bd08      	pop	{r3, pc}
		default_module = -1;
   261fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   261fe:	4b02      	ldr	r3, [pc, #8]	; (26208 <select_module+0x1c>)
   26200:	601a      	str	r2, [r3, #0]
		return 0;
   26202:	2000      	movs	r0, #0
   26204:	bd08      	pop	{r3, pc}
   26206:	bf00      	nop
   26208:	2000c4c0 	.word	0x2000c4c0

0002620c <get_command_and_module>:
{
   2620c:	b538      	push	{r3, r4, r5, lr}
   2620e:	4604      	mov	r4, r0
	*module = -1;
   26210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26214:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26216:	6800      	ldr	r0, [r0, #0]
   26218:	b140      	cbz	r0, 2622c <get_command_and_module+0x20>
   2621a:	460d      	mov	r5, r1
	if (default_module == -1) {
   2621c:	4b12      	ldr	r3, [pc, #72]	; (26268 <get_command_and_module+0x5c>)
   2621e:	681b      	ldr	r3, [r3, #0]
   26220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26224:	d007      	beq.n	26236 <get_command_and_module+0x2a>
	*module = default_module;
   26226:	600b      	str	r3, [r1, #0]
	return argv[0];
   26228:	6820      	ldr	r0, [r4, #0]
}
   2622a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   2622c:	480f      	ldr	r0, [pc, #60]	; (2626c <get_command_and_module+0x60>)
   2622e:	f7dc fea7 	bl	2f80 <printk>
		return NULL;
   26232:	2000      	movs	r0, #0
   26234:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26236:	6863      	ldr	r3, [r4, #4]
   26238:	b14b      	cbz	r3, 2624e <get_command_and_module+0x42>
   2623a:	781b      	ldrb	r3, [r3, #0]
   2623c:	b13b      	cbz	r3, 2624e <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   2623e:	f7ff ff81 	bl	26144 <get_destination_module>
   26242:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26244:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26248:	d007      	beq.n	2625a <get_command_and_module+0x4e>
		return argv[1];
   2624a:	6860      	ldr	r0, [r4, #4]
   2624c:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   2624e:	4601      	mov	r1, r0
   26250:	4807      	ldr	r0, [pc, #28]	; (26270 <get_command_and_module+0x64>)
   26252:	f7dc fe95 	bl	2f80 <printk>
			return NULL;
   26256:	2000      	movs	r0, #0
   26258:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   2625a:	6821      	ldr	r1, [r4, #0]
   2625c:	4805      	ldr	r0, [pc, #20]	; (26274 <get_command_and_module+0x68>)
   2625e:	f7dc fe8f 	bl	2f80 <printk>
			return NULL;
   26262:	2000      	movs	r0, #0
   26264:	bd38      	pop	{r3, r4, r5, pc}
   26266:	bf00      	nop
   26268:	2000c4c0 	.word	0x2000c4c0
   2626c:	00030b6c 	.word	0x00030b6c
   26270:	00030b84 	.word	0x00030b84
   26274:	00030ba0 	.word	0x00030ba0

00026278 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   2627a:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   2627c:	b15c      	cbz	r4, 26296 <get_cb+0x1e>
   2627e:	4606      	mov	r6, r0
   26280:	460d      	mov	r5, r1
   26282:	4617      	mov	r7, r2
   26284:	7823      	ldrb	r3, [r4, #0]
   26286:	b133      	cbz	r3, 26296 <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26288:	4929      	ldr	r1, [pc, #164]	; (26330 <get_cb+0xb8>)
   2628a:	4620      	mov	r0, r4
   2628c:	f7da f8bc 	bl	408 <strcmp>
   26290:	b930      	cbnz	r0, 262a0 <get_cb+0x28>
		return show_help;
   26292:	4828      	ldr	r0, [pc, #160]	; (26334 <get_cb+0xbc>)
   26294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26296:	4828      	ldr	r0, [pc, #160]	; (26338 <get_cb+0xc0>)
   26298:	f7dc fe72 	bl	2f80 <printk>
		return NULL;
   2629c:	2000      	movs	r0, #0
   2629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   262a0:	4926      	ldr	r1, [pc, #152]	; (2633c <get_cb+0xc4>)
   262a2:	4620      	mov	r0, r4
   262a4:	f7da f8b0 	bl	408 <strcmp>
   262a8:	b908      	cbnz	r0, 262ae <get_cb+0x36>
		return select_module;
   262aa:	4825      	ldr	r0, [pc, #148]	; (26340 <get_cb+0xc8>)
   262ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   262ae:	4925      	ldr	r1, [pc, #148]	; (26344 <get_cb+0xcc>)
   262b0:	4620      	mov	r0, r4
   262b2:	f7da f8a9 	bl	408 <strcmp>
   262b6:	2800      	cmp	r0, #0
   262b8:	d034      	beq.n	26324 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   262ba:	6833      	ldr	r3, [r6, #0]
   262bc:	2b01      	cmp	r3, #1
   262be:	d01c      	beq.n	262fa <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   262c0:	4639      	mov	r1, r7
   262c2:	4628      	mov	r0, r5
   262c4:	f7ff ffa2 	bl	2620c <get_command_and_module>
   262c8:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   262ca:	683d      	ldr	r5, [r7, #0]
   262cc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   262d0:	d02a      	beq.n	26328 <get_cb+0xb0>
   262d2:	b358      	cbz	r0, 2632c <get_cb+0xb4>
   262d4:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   262da:	009a      	lsls	r2, r3, #2
   262dc:	4b1a      	ldr	r3, [pc, #104]	; (26348 <get_cb+0xd0>)
   262de:	4413      	add	r3, r2
   262e0:	6859      	ldr	r1, [r3, #4]
   262e2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   262e6:	0093      	lsls	r3, r2, #2
   262e8:	461f      	mov	r7, r3
   262ea:	58c9      	ldr	r1, [r1, r3]
   262ec:	b1c1      	cbz	r1, 26320 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   262ee:	4630      	mov	r0, r6
   262f0:	f7da f88a 	bl	408 <strcmp>
   262f4:	b158      	cbz	r0, 2630e <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262f6:	3401      	adds	r4, #1
   262f8:	e7ed      	b.n	262d6 <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   262fa:	4b14      	ldr	r3, [pc, #80]	; (2634c <get_cb+0xd4>)
   262fc:	681b      	ldr	r3, [r3, #0]
   262fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26302:	d1dd      	bne.n	262c0 <get_cb+0x48>
		printk("Missing parameter\n");
   26304:	4812      	ldr	r0, [pc, #72]	; (26350 <get_cb+0xd8>)
   26306:	f7dc fe3b 	bl	2f80 <printk>
		return NULL;
   2630a:	2000      	movs	r0, #0
   2630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   2630e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26312:	00aa      	lsls	r2, r5, #2
   26314:	4b0c      	ldr	r3, [pc, #48]	; (26348 <get_cb+0xd0>)
   26316:	4413      	add	r3, r2
   26318:	685b      	ldr	r3, [r3, #4]
   2631a:	441f      	add	r7, r3
   2631c:	6878      	ldr	r0, [r7, #4]
   2631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26320:	2000      	movs	r0, #0
   26322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26324:	480b      	ldr	r0, [pc, #44]	; (26354 <get_cb+0xdc>)
   26326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26328:	2000      	movs	r0, #0
   2632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2632c:	2000      	movs	r0, #0
}
   2632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26330:	00030b40 	.word	0x00030b40
   26334:	000263f9 	.word	0x000263f9
   26338:	00030b2c 	.word	0x00030b2c
   2633c:	00030b48 	.word	0x00030b48
   26340:	000261ed 	.word	0x000261ed
   26344:	00030b50 	.word	0x00030b50
   26348:	2000cf80 	.word	0x2000cf80
   2634c:	2000c4c0 	.word	0x2000c4c0
   26350:	00030b58 	.word	0x00030b58
   26354:	00026085 	.word	0x00026085

00026358 <show_cmd_help>:
{
   26358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2635c:	b083      	sub	sp, #12
   2635e:	4607      	mov	r7, r0
	int module = -1;
   26360:	a902      	add	r1, sp, #8
   26362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26366:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   2636a:	f7ff ff4f 	bl	2620c <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   2636e:	9d01      	ldr	r5, [sp, #4]
   26370:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26374:	d031      	beq.n	263da <show_cmd_help+0x82>
   26376:	4606      	mov	r6, r0
   26378:	b390      	cbz	r0, 263e0 <show_cmd_help+0x88>
   2637a:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2637c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26380:	009a      	lsls	r2, r3, #2
   26382:	4b19      	ldr	r3, [pc, #100]	; (263e8 <show_cmd_help+0x90>)
   26384:	4413      	add	r3, r2
   26386:	6859      	ldr	r1, [r3, #4]
   26388:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2638c:	0093      	lsls	r3, r2, #2
   2638e:	4698      	mov	r8, r3
   26390:	58c9      	ldr	r1, [r1, r3]
   26392:	b1c1      	cbz	r1, 263c6 <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26394:	4630      	mov	r0, r6
   26396:	f7da f837 	bl	408 <strcmp>
   2639a:	4681      	mov	r9, r0
   2639c:	b108      	cbz	r0, 263a2 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2639e:	3401      	adds	r4, #1
   263a0:	e7ec      	b.n	2637c <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   263a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   263a6:	00aa      	lsls	r2, r5, #2
   263a8:	4b0f      	ldr	r3, [pc, #60]	; (263e8 <show_cmd_help+0x90>)
   263aa:	4413      	add	r3, r2
   263ac:	685b      	ldr	r3, [r3, #4]
   263ae:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   263b2:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   263b6:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   263b8:	b11a      	cbz	r2, 263c2 <show_cmd_help+0x6a>
   263ba:	480c      	ldr	r0, [pc, #48]	; (263ec <show_cmd_help+0x94>)
   263bc:	f7dc fde0 	bl	2f80 <printk>
			return 0;
   263c0:	e007      	b.n	263d2 <show_cmd_help+0x7a>
			printk("%s %s\n",
   263c2:	4a0b      	ldr	r2, [pc, #44]	; (263f0 <show_cmd_help+0x98>)
   263c4:	e7f9      	b.n	263ba <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   263c6:	6839      	ldr	r1, [r7, #0]
   263c8:	480a      	ldr	r0, [pc, #40]	; (263f4 <show_cmd_help+0x9c>)
   263ca:	f7dc fdd9 	bl	2f80 <printk>
	return -EINVAL;
   263ce:	f06f 0915 	mvn.w	r9, #21
}
   263d2:	4648      	mov	r0, r9
   263d4:	b003      	add	sp, #12
   263d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   263da:	f04f 0900 	mov.w	r9, #0
   263de:	e7f8      	b.n	263d2 <show_cmd_help+0x7a>
   263e0:	f04f 0900 	mov.w	r9, #0
   263e4:	e7f5      	b.n	263d2 <show_cmd_help+0x7a>
   263e6:	bf00      	nop
   263e8:	2000cf80 	.word	0x2000cf80
   263ec:	00030c6c 	.word	0x00030c6c
   263f0:	0002f448 	.word	0x0002f448
   263f4:	00030b84 	.word	0x00030b84

000263f8 <show_help>:
{
   263f8:	b510      	push	{r4, lr}
   263fa:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   263fc:	2802      	cmp	r0, #2
   263fe:	dc12      	bgt.n	26426 <show_help+0x2e>
   26400:	4b23      	ldr	r3, [pc, #140]	; (26490 <show_help+0x98>)
   26402:	681b      	ldr	r3, [r3, #0]
   26404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26408:	d001      	beq.n	2640e <show_help+0x16>
   2640a:	2802      	cmp	r0, #2
   2640c:	d00b      	beq.n	26426 <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   2640e:	2802      	cmp	r0, #2
   26410:	d00d      	beq.n	2642e <show_help+0x36>
   26412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26416:	d001      	beq.n	2641c <show_help+0x24>
   26418:	2801      	cmp	r0, #1
   2641a:	d008      	beq.n	2642e <show_help+0x36>
		printk("Available modules:\n");
   2641c:	481d      	ldr	r0, [pc, #116]	; (26494 <show_help+0x9c>)
   2641e:	f7dc fdaf 	bl	2f80 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26422:	2400      	movs	r4, #0
   26424:	e025      	b.n	26472 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26426:	1d20      	adds	r0, r4, #4
   26428:	f7ff ff96 	bl	26358 <show_cmd_help>
   2642c:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   2642e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26432:	d007      	beq.n	26444 <show_help+0x4c>
		print_module_commands(module);
   26434:	4618      	mov	r0, r3
   26436:	f7ff fe31 	bl	2609c <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   2643a:	4817      	ldr	r0, [pc, #92]	; (26498 <show_help+0xa0>)
   2643c:	f7dc fda0 	bl	2f80 <printk>
	return 0;
   26440:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   26442:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   26444:	6860      	ldr	r0, [r4, #4]
   26446:	f7ff fe7d 	bl	26144 <get_destination_module>
   2644a:	4603      	mov	r3, r0
			if (module == -1) {
   2644c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26450:	d1f0      	bne.n	26434 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   26452:	6861      	ldr	r1, [r4, #4]
   26454:	4811      	ldr	r0, [pc, #68]	; (2649c <show_help+0xa4>)
   26456:	f7dc fd93 	bl	2f80 <printk>
				return -EINVAL;
   2645a:	f06f 0015 	mvn.w	r0, #21
   2645e:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26460:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26464:	0093      	lsls	r3, r2, #2
   26466:	4a0e      	ldr	r2, [pc, #56]	; (264a0 <show_help+0xa8>)
   26468:	58d1      	ldr	r1, [r2, r3]
   2646a:	480e      	ldr	r0, [pc, #56]	; (264a4 <show_help+0xac>)
   2646c:	f7dc fd88 	bl	2f80 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26470:	3401      	adds	r4, #1
   26472:	4a0b      	ldr	r2, [pc, #44]	; (264a0 <show_help+0xa8>)
   26474:	4b0c      	ldr	r3, [pc, #48]	; (264a8 <show_help+0xb0>)
   26476:	1a9b      	subs	r3, r3, r2
   26478:	109b      	asrs	r3, r3, #2
   2647a:	4a0c      	ldr	r2, [pc, #48]	; (264ac <show_help+0xb4>)
   2647c:	fb02 f303 	mul.w	r3, r2, r3
   26480:	429c      	cmp	r4, r3
   26482:	dbed      	blt.n	26460 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   26484:	480a      	ldr	r0, [pc, #40]	; (264b0 <show_help+0xb8>)
   26486:	f7dc fd7b 	bl	2f80 <printk>
	return 0;
   2648a:	2000      	movs	r0, #0
}
   2648c:	bd10      	pop	{r4, pc}
   2648e:	bf00      	nop
   26490:	2000c4c0 	.word	0x2000c4c0
   26494:	00030c9c 	.word	0x00030c9c
   26498:	00030c74 	.word	0x00030c74
   2649c:	00030ba0 	.word	0x00030ba0
   264a0:	2000cf80 	.word	0x2000cf80
   264a4:	0002fdf0 	.word	0x0002fdf0
   264a8:	2000cf8c 	.word	0x2000cf8c
   264ac:	aaaaaaab 	.word	0xaaaaaaab
   264b0:	00030cb0 	.word	0x00030cb0

000264b4 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   264b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264b8:	b086      	sub	sp, #24
   264ba:	4604      	mov	r4, r0
   264bc:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   264be:	e000      	b.n	264c2 <get_command_to_complete+0xe>
		str++;
   264c0:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   264c2:	7823      	ldrb	r3, [r4, #0]
   264c4:	2b20      	cmp	r3, #32
   264c6:	d0fb      	beq.n	264c0 <get_command_to_complete+0xc>
	}

	if (!*str) {
   264c8:	b3a3      	cbz	r3, 26534 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   264ca:	4b1f      	ldr	r3, [pc, #124]	; (26548 <get_command_to_complete+0x94>)
   264cc:	681d      	ldr	r5, [r3, #0]
   264ce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   264d2:	d001      	beq.n	264d8 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   264d4:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   264d8:	2120      	movs	r1, #32
   264da:	4620      	mov	r0, r4
   264dc:	f004 fba8 	bl	2ac30 <strchr>
   264e0:	4606      	mov	r6, r0
	if (default_module != -1) {
   264e2:	4b19      	ldr	r3, [pc, #100]	; (26548 <get_command_to_complete+0x94>)
   264e4:	681f      	ldr	r7, [r3, #0]
   264e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   264ea:	d004      	beq.n	264f6 <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   264ec:	bb28      	cbnz	r0, 2653a <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   264ee:	4628      	mov	r0, r5
   264f0:	b006      	add	sp, #24
   264f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   264f6:	b318      	cbz	r0, 26540 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   264f8:	1b05      	subs	r5, r0, r4
   264fa:	1c6a      	adds	r2, r5, #1
   264fc:	2a13      	cmp	r2, #19
   264fe:	dc21      	bgt.n	26544 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   26500:	4621      	mov	r1, r4
   26502:	a801      	add	r0, sp, #4
   26504:	f004 fcb8 	bl	2ae78 <strncpy>
	dest_str[str - start] = '\0';
   26508:	ab06      	add	r3, sp, #24
   2650a:	441d      	add	r5, r3
   2650c:	2300      	movs	r3, #0
   2650e:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   26512:	a801      	add	r0, sp, #4
   26514:	f7ff fe16 	bl	26144 <get_destination_module>
   26518:	4605      	mov	r5, r0
	if (dest == -1) {
   2651a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2651e:	d0e6      	beq.n	264ee <get_command_to_complete+0x3a>
	str++;
   26520:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   26522:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   26526:	2120      	movs	r1, #32
   26528:	f004 fb82 	bl	2ac30 <strchr>
	return (str == NULL) ? dest : -1;
   2652c:	2800      	cmp	r0, #0
   2652e:	d0de      	beq.n	264ee <get_command_to_complete+0x3a>
   26530:	463d      	mov	r5, r7
   26532:	e7dc      	b.n	264ee <get_command_to_complete+0x3a>
		return -1;
   26534:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26538:	e7d9      	b.n	264ee <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   2653a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2653e:	e7d6      	b.n	264ee <get_command_to_complete+0x3a>
		return -1;
   26540:	463d      	mov	r5, r7
   26542:	e7d4      	b.n	264ee <get_command_to_complete+0x3a>
		return -1;
   26544:	463d      	mov	r5, r7
   26546:	e7d2      	b.n	264ee <get_command_to_complete+0x3a>
   26548:	2000c4c0 	.word	0x2000c4c0

0002654c <completion>:

static u8_t completion(char *line, u8_t len)
{
   2654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26550:	b087      	sub	sp, #28
   26552:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   26554:	2944      	cmp	r1, #68	; 0x44
   26556:	d903      	bls.n	26560 <completion+0x14>
		return 0;
   26558:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   2655a:	b007      	add	sp, #28
   2655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26560:	4689      	mov	r9, r1
	line[len] = '\0';
   26562:	2300      	movs	r3, #0
   26564:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   26566:	a905      	add	r1, sp, #20
   26568:	f7ff ffa4 	bl	264b4 <get_command_to_complete>
   2656c:	4605      	mov	r5, r0
	if (dest == -1) {
   2656e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26572:	f000 808f 	beq.w	26694 <completion+0x148>
	command_len = strlen(command_prefix);
   26576:	9805      	ldr	r0, [sp, #20]
   26578:	f7da f8c2 	bl	700 <strlen>
   2657c:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2657e:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   26582:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   26586:	465f      	mov	r7, fp
   26588:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2658a:	e01f      	b.n	265cc <completion+0x80>
			first_match = module->commands[i].cmd_name;
   2658c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26590:	009a      	lsls	r2, r3, #2
   26592:	4b42      	ldr	r3, [pc, #264]	; (2669c <completion+0x150>)
   26594:	4413      	add	r3, r2
   26596:	685b      	ldr	r3, [r3, #4]
   26598:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   2659c:	e014      	b.n	265c8 <completion+0x7c>
			printk("\n%s\n", first_match);
   2659e:	4639      	mov	r1, r7
   265a0:	483f      	ldr	r0, [pc, #252]	; (266a0 <completion+0x154>)
   265a2:	f7dc fced 	bl	2f80 <printk>
			common_chars = strlen(first_match);
   265a6:	4638      	mov	r0, r7
   265a8:	f7da f8aa 	bl	700 <strlen>
   265ac:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   265ae:	e026      	b.n	265fe <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   265b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   265b4:	009a      	lsls	r2, r3, #2
   265b6:	4b39      	ldr	r3, [pc, #228]	; (2669c <completion+0x150>)
   265b8:	4413      	add	r3, r2
   265ba:	685b      	ldr	r3, [r3, #4]
   265bc:	f853 100a 	ldr.w	r1, [r3, sl]
   265c0:	4838      	ldr	r0, [pc, #224]	; (266a4 <completion+0x158>)
   265c2:	f7dc fcdd 	bl	2f80 <printk>
		common_chars = j;
   265c6:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   265c8:	f10b 0b01 	add.w	fp, fp, #1
   265cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   265d0:	009a      	lsls	r2, r3, #2
   265d2:	4b32      	ldr	r3, [pc, #200]	; (2669c <completion+0x150>)
   265d4:	4413      	add	r3, r2
   265d6:	685a      	ldr	r2, [r3, #4]
   265d8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   265dc:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   265e0:	46d0      	mov	r8, sl
   265e2:	f852 100a 	ldr.w	r1, [r2, sl]
   265e6:	b1d1      	cbz	r1, 2661e <completion+0xd2>
		if (strncmp(command_prefix,
   265e8:	9a01      	ldr	r2, [sp, #4]
   265ea:	9805      	ldr	r0, [sp, #20]
   265ec:	f004 fbf2 	bl	2add4 <strncmp>
   265f0:	4604      	mov	r4, r0
   265f2:	2800      	cmp	r0, #0
   265f4:	d1e8      	bne.n	265c8 <completion+0x7c>
		if (!first_match) {
   265f6:	2f00      	cmp	r7, #0
   265f8:	d0c8      	beq.n	2658c <completion+0x40>
		if (first_match && (common_chars < 0)) {
   265fa:	2e00      	cmp	r6, #0
   265fc:	dbcf      	blt.n	2659e <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   265fe:	42a6      	cmp	r6, r4
   26600:	ddd6      	ble.n	265b0 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   26602:	5d39      	ldrb	r1, [r7, r4]
   26604:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26608:	009a      	lsls	r2, r3, #2
   2660a:	4b24      	ldr	r3, [pc, #144]	; (2669c <completion+0x150>)
   2660c:	4413      	add	r3, r2
   2660e:	685b      	ldr	r3, [r3, #4]
   26610:	f853 3008 	ldr.w	r3, [r3, r8]
   26614:	5d1b      	ldrb	r3, [r3, r4]
   26616:	4299      	cmp	r1, r3
   26618:	d1ca      	bne.n	265b0 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   2661a:	3401      	adds	r4, #1
   2661c:	e7ef      	b.n	265fe <completion+0xb2>
   2661e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   26622:	2f00      	cmp	r7, #0
   26624:	d038      	beq.n	26698 <completion+0x14c>
	if (common_chars >= 0) {
   26626:	2e00      	cmp	r6, #0
   26628:	db0d      	blt.n	26646 <completion+0xfa>
		printk("%s", get_prompt());
   2662a:	f7ff fd01 	bl	26030 <get_prompt>
   2662e:	4c1e      	ldr	r4, [pc, #120]	; (266a8 <completion+0x15c>)
   26630:	4601      	mov	r1, r0
   26632:	4620      	mov	r0, r4
   26634:	f7dc fca4 	bl	2f80 <printk>
		printk("%s", line);
   26638:	9d02      	ldr	r5, [sp, #8]
   2663a:	4629      	mov	r1, r5
   2663c:	4620      	mov	r0, r4
   2663e:	f7dc fc9f 	bl	2f80 <printk>
	int common_chars = -1, space = 0;
   26642:	2400      	movs	r4, #0
   26644:	e015      	b.n	26672 <completion+0x126>
		common_chars = strlen(first_match);
   26646:	4638      	mov	r0, r7
   26648:	f7da f85a 	bl	700 <strlen>
   2664c:	4606      	mov	r6, r0
		space = 1;
   2664e:	2401      	movs	r4, #1
   26650:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   26652:	e00e      	b.n	26672 <completion+0x126>
		printk("%c", first_match[i]);
   26654:	f817 100a 	ldrb.w	r1, [r7, sl]
   26658:	4814      	ldr	r0, [pc, #80]	; (266ac <completion+0x160>)
   2665a:	f7dc fc91 	bl	2f80 <printk>
		line[len++] = first_match[i];
   2665e:	f109 0301 	add.w	r3, r9, #1
   26662:	f817 200a 	ldrb.w	r2, [r7, sl]
   26666:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   2666a:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   2666e:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   26672:	4556      	cmp	r6, sl
   26674:	dcee      	bgt.n	26654 <completion+0x108>
	if (space) {
   26676:	b92c      	cbnz	r4, 26684 <completion+0x138>
	return common_chars - command_len + space;
   26678:	9b01      	ldr	r3, [sp, #4]
   2667a:	1af0      	subs	r0, r6, r3
   2667c:	fa54 f080 	uxtab	r0, r4, r0
   26680:	b2c0      	uxtb	r0, r0
   26682:	e76a      	b.n	2655a <completion+0xe>
		printk(" ");
   26684:	480a      	ldr	r0, [pc, #40]	; (266b0 <completion+0x164>)
   26686:	f7dc fc7b 	bl	2f80 <printk>
		line[len] = ' ';
   2668a:	2320      	movs	r3, #32
   2668c:	9a02      	ldr	r2, [sp, #8]
   2668e:	f802 3009 	strb.w	r3, [r2, r9]
   26692:	e7f1      	b.n	26678 <completion+0x12c>
		return 0;
   26694:	2000      	movs	r0, #0
   26696:	e760      	b.n	2655a <completion+0xe>
		return 0;
   26698:	2000      	movs	r0, #0
   2669a:	e75e      	b.n	2655a <completion+0xe>
   2669c:	2000cf80 	.word	0x2000cf80
   266a0:	00030b20 	.word	0x00030b20
   266a4:	0002fdf0 	.word	0x0002fdf0
   266a8:	0002ef04 	.word	0x0002ef04
   266ac:	00030b28 	.word	0x00030b28
   266b0:	00031174 	.word	0x00031174

000266b4 <line_queue_init>:
{
   266b4:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   266b6:	2400      	movs	r4, #0
   266b8:	e008      	b.n	266cc <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   266ba:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   266be:	0093      	lsls	r3, r2, #2
   266c0:	4904      	ldr	r1, [pc, #16]	; (266d4 <line_queue_init+0x20>)
   266c2:	4419      	add	r1, r3
   266c4:	4804      	ldr	r0, [pc, #16]	; (266d8 <line_queue_init+0x24>)
   266c6:	f001 fced 	bl	280a4 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   266ca:	3401      	adds	r4, #1
   266cc:	2c02      	cmp	r4, #2
   266ce:	ddf4      	ble.n	266ba <line_queue_init+0x6>
}
   266d0:	bd10      	pop	{r4, pc}
   266d2:	bf00      	nop
   266d4:	20002424 	.word	0x20002424
   266d8:	20002414 	.word	0x20002414

000266dc <shell_exec>:
{
   266dc:	b510      	push	{r4, lr}
   266de:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   266e0:	4b1e      	ldr	r3, [pc, #120]	; (2675c <shell_exec+0x80>)
   266e2:	681b      	ldr	r3, [r3, #0]
   266e4:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   266e6:	220b      	movs	r2, #11
   266e8:	a903      	add	r1, sp, #12
   266ea:	f7ff fcf5 	bl	260d8 <line2argv>
   266ee:	9002      	str	r0, [sp, #8]
	if (!argc) {
   266f0:	2800      	cmp	r0, #0
   266f2:	d02f      	beq.n	26754 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   266f4:	aa01      	add	r2, sp, #4
   266f6:	a903      	add	r1, sp, #12
   266f8:	a802      	add	r0, sp, #8
   266fa:	f7ff fdbd 	bl	26278 <get_cb>
	if (!cb) {
   266fe:	4602      	mov	r2, r0
   26700:	b168      	cbz	r0, 2671e <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   26702:	9b01      	ldr	r3, [sp, #4]
   26704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26708:	d017      	beq.n	2673a <shell_exec+0x5e>
   2670a:	4914      	ldr	r1, [pc, #80]	; (2675c <shell_exec+0x80>)
   2670c:	6809      	ldr	r1, [r1, #0]
   2670e:	428b      	cmp	r3, r1
   26710:	d013      	beq.n	2673a <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   26712:	a904      	add	r1, sp, #16
   26714:	9802      	ldr	r0, [sp, #8]
   26716:	3801      	subs	r0, #1
   26718:	4790      	blx	r2
   2671a:	4604      	mov	r4, r0
   2671c:	e011      	b.n	26742 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   2671e:	4b10      	ldr	r3, [pc, #64]	; (26760 <shell_exec+0x84>)
   26720:	681a      	ldr	r2, [r3, #0]
   26722:	2a00      	cmp	r2, #0
   26724:	d1ed      	bne.n	26702 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   26726:	9903      	ldr	r1, [sp, #12]
   26728:	480e      	ldr	r0, [pc, #56]	; (26764 <shell_exec+0x88>)
   2672a:	f7dc fc29 	bl	2f80 <printk>
	printk("Type 'help' for list of available commands\n");
   2672e:	480e      	ldr	r0, [pc, #56]	; (26768 <shell_exec+0x8c>)
   26730:	f7dc fc26 	bl	2f80 <printk>
			return -EINVAL;
   26734:	f06f 0415 	mvn.w	r4, #21
   26738:	e005      	b.n	26746 <shell_exec+0x6a>
		err = cb(argc, argv);
   2673a:	a903      	add	r1, sp, #12
   2673c:	9802      	ldr	r0, [sp, #8]
   2673e:	4790      	blx	r2
   26740:	4604      	mov	r4, r0
	if (err < 0) {
   26742:	2c00      	cmp	r4, #0
   26744:	db02      	blt.n	2674c <shell_exec+0x70>
}
   26746:	4620      	mov	r0, r4
   26748:	b00e      	add	sp, #56	; 0x38
   2674a:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   2674c:	a803      	add	r0, sp, #12
   2674e:	f7ff fe03 	bl	26358 <show_cmd_help>
   26752:	e7f8      	b.n	26746 <shell_exec+0x6a>
		return -EINVAL;
   26754:	f06f 0415 	mvn.w	r4, #21
   26758:	e7f5      	b.n	26746 <shell_exec+0x6a>
   2675a:	bf00      	nop
   2675c:	2000c4c0 	.word	0x2000c4c0
   26760:	2000240c 	.word	0x2000240c
   26764:	00030b84 	.word	0x00030b84
   26768:	00030c40 	.word	0x00030c40

0002676c <shell>:
{
   2676c:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   2676e:	f7ff fc5f 	bl	26030 <get_prompt>
   26772:	4601      	mov	r1, r0
   26774:	4808      	ldr	r0, [pc, #32]	; (26798 <shell+0x2c>)
   26776:	f7dc fc03 	bl	2f80 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   2677a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2677e:	4807      	ldr	r0, [pc, #28]	; (2679c <shell+0x30>)
   26780:	f001 fcb8 	bl	280f4 <k_queue_get>
   26784:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   26786:	3004      	adds	r0, #4
   26788:	f7ff ffa8 	bl	266dc <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   2678c:	4621      	mov	r1, r4
   2678e:	4804      	ldr	r0, [pc, #16]	; (267a0 <shell+0x34>)
   26790:	f001 fc88 	bl	280a4 <k_queue_append>
   26794:	e7eb      	b.n	2676e <shell+0x2>
   26796:	bf00      	nop
   26798:	0002ef04 	.word	0x0002ef04
   2679c:	200025b0 	.word	0x200025b0
   267a0:	20002414 	.word	0x20002414

000267a4 <shell_init>:


void shell_init(const char *str)
{
   267a4:	b510      	push	{r4, lr}
   267a6:	b086      	sub	sp, #24
   267a8:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   267aa:	4812      	ldr	r0, [pc, #72]	; (267f4 <shell_init+0x50>)
   267ac:	f001 fc47 	bl	2803e <k_queue_init>
	k_fifo_init(&avail_queue);
   267b0:	4811      	ldr	r0, [pc, #68]	; (267f8 <shell_init+0x54>)
   267b2:	f001 fc44 	bl	2803e <k_queue_init>

	line_queue_init();
   267b6:	f7ff ff7d 	bl	266b4 <line_queue_init>

	prompt = str ? str : "";
   267ba:	b1c4      	cbz	r4, 267ee <shell_init+0x4a>
   267bc:	4b0f      	ldr	r3, [pc, #60]	; (267fc <shell_init+0x58>)
   267be:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   267c0:	2300      	movs	r3, #0
   267c2:	9305      	str	r3, [sp, #20]
   267c4:	9304      	str	r3, [sp, #16]
   267c6:	f06f 0208 	mvn.w	r2, #8
   267ca:	9203      	str	r2, [sp, #12]
   267cc:	9302      	str	r3, [sp, #8]
   267ce:	9301      	str	r3, [sp, #4]
   267d0:	9300      	str	r3, [sp, #0]
   267d2:	4b0b      	ldr	r3, [pc, #44]	; (26800 <shell_init+0x5c>)
   267d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   267d8:	490a      	ldr	r1, [pc, #40]	; (26804 <shell_init+0x60>)
   267da:	480b      	ldr	r0, [pc, #44]	; (26808 <shell_init+0x64>)
   267dc:	f002 fa78 	bl	28cd0 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   267e0:	4a0a      	ldr	r2, [pc, #40]	; (2680c <shell_init+0x68>)
   267e2:	4904      	ldr	r1, [pc, #16]	; (267f4 <shell_init+0x50>)
   267e4:	4804      	ldr	r0, [pc, #16]	; (267f8 <shell_init+0x54>)
   267e6:	f7db fc0b 	bl	2000 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   267ea:	b006      	add	sp, #24
   267ec:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   267ee:	4c08      	ldr	r4, [pc, #32]	; (26810 <shell_init+0x6c>)
   267f0:	e7e4      	b.n	267bc <shell_init+0x18>
   267f2:	bf00      	nop
   267f4:	200025b0 	.word	0x200025b0
   267f8:	20002414 	.word	0x20002414
   267fc:	200025d8 	.word	0x200025d8
   26800:	0002676d 	.word	0x0002676d
   26804:	20009af0 	.word	0x20009af0
   26808:	200025dc 	.word	0x200025dc
   2680c:	0002654d 	.word	0x0002654d
   26810:	0002f448 	.word	0x0002f448

00026814 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26814:	4b0e      	ldr	r3, [pc, #56]	; (26850 <ftpan_32+0x3c>)
   26816:	781b      	ldrb	r3, [r3, #0]
   26818:	2b06      	cmp	r3, #6
   2681a:	d001      	beq.n	26820 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   2681c:	2000      	movs	r0, #0
   2681e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26820:	4b0c      	ldr	r3, [pc, #48]	; (26854 <ftpan_32+0x40>)
   26822:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26824:	f013 0f0f 	tst.w	r3, #15
   26828:	d10e      	bne.n	26848 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2682a:	4b0b      	ldr	r3, [pc, #44]	; (26858 <ftpan_32+0x44>)
   2682c:	681b      	ldr	r3, [r3, #0]
   2682e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26832:	2b30      	cmp	r3, #48	; 0x30
   26834:	d001      	beq.n	2683a <ftpan_32+0x26>
	return false;
   26836:	2000      	movs	r0, #0
   26838:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2683a:	4b08      	ldr	r3, [pc, #32]	; (2685c <ftpan_32+0x48>)
   2683c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2683e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   26842:	d003      	beq.n	2684c <ftpan_32+0x38>
	return false;
   26844:	2000      	movs	r0, #0
   26846:	4770      	bx	lr
   26848:	2000      	movs	r0, #0
   2684a:	4770      	bx	lr
			return true;
   2684c:	2001      	movs	r0, #1
}
   2684e:	4770      	bx	lr
   26850:	f0000fe0 	.word	0xf0000fe0
   26854:	f0000fe4 	.word	0xf0000fe4
   26858:	f0000fe8 	.word	0xf0000fe8
   2685c:	f0000fec 	.word	0xf0000fec

00026860 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26860:	4b0e      	ldr	r3, [pc, #56]	; (2689c <ftpan_37+0x3c>)
   26862:	781b      	ldrb	r3, [r3, #0]
   26864:	2b06      	cmp	r3, #6
   26866:	d001      	beq.n	2686c <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26868:	2000      	movs	r0, #0
   2686a:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   2686c:	4b0c      	ldr	r3, [pc, #48]	; (268a0 <ftpan_37+0x40>)
   2686e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26870:	f013 0f0f 	tst.w	r3, #15
   26874:	d10e      	bne.n	26894 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26876:	4b0b      	ldr	r3, [pc, #44]	; (268a4 <ftpan_37+0x44>)
   26878:	681b      	ldr	r3, [r3, #0]
   2687a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2687e:	2b30      	cmp	r3, #48	; 0x30
   26880:	d001      	beq.n	26886 <ftpan_37+0x26>
	return false;
   26882:	2000      	movs	r0, #0
   26884:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26886:	4b08      	ldr	r3, [pc, #32]	; (268a8 <ftpan_37+0x48>)
   26888:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2688a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2688e:	d003      	beq.n	26898 <ftpan_37+0x38>
	return false;
   26890:	2000      	movs	r0, #0
   26892:	4770      	bx	lr
   26894:	2000      	movs	r0, #0
   26896:	4770      	bx	lr
			return true;
   26898:	2001      	movs	r0, #1
}
   2689a:	4770      	bx	lr
   2689c:	f0000fe0 	.word	0xf0000fe0
   268a0:	f0000fe4 	.word	0xf0000fe4
   268a4:	f0000fe8 	.word	0xf0000fe8
   268a8:	f0000fec 	.word	0xf0000fec

000268ac <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   268ac:	4b0e      	ldr	r3, [pc, #56]	; (268e8 <ftpan_36+0x3c>)
   268ae:	781b      	ldrb	r3, [r3, #0]
   268b0:	2b06      	cmp	r3, #6
   268b2:	d001      	beq.n	268b8 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   268b4:	2000      	movs	r0, #0
   268b6:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   268b8:	4b0c      	ldr	r3, [pc, #48]	; (268ec <ftpan_36+0x40>)
   268ba:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   268bc:	f013 0f0f 	tst.w	r3, #15
   268c0:	d10e      	bne.n	268e0 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   268c2:	4b0b      	ldr	r3, [pc, #44]	; (268f0 <ftpan_36+0x44>)
   268c4:	681b      	ldr	r3, [r3, #0]
   268c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   268ca:	2b30      	cmp	r3, #48	; 0x30
   268cc:	d001      	beq.n	268d2 <ftpan_36+0x26>
	return false;
   268ce:	2000      	movs	r0, #0
   268d0:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   268d2:	4b08      	ldr	r3, [pc, #32]	; (268f4 <ftpan_36+0x48>)
   268d4:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   268d6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   268da:	d003      	beq.n	268e4 <ftpan_36+0x38>
	return false;
   268dc:	2000      	movs	r0, #0
   268de:	4770      	bx	lr
   268e0:	2000      	movs	r0, #0
   268e2:	4770      	bx	lr
			return true;
   268e4:	2001      	movs	r0, #1
}
   268e6:	4770      	bx	lr
   268e8:	f0000fe0 	.word	0xf0000fe0
   268ec:	f0000fe4 	.word	0xf0000fe4
   268f0:	f0000fe8 	.word	0xf0000fe8
   268f4:	f0000fec 	.word	0xf0000fec

000268f8 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   268f8:	4b0f      	ldr	r3, [pc, #60]	; (26938 <errata_136_nrf52832+0x40>)
   268fa:	781b      	ldrb	r3, [r3, #0]
   268fc:	2b06      	cmp	r3, #6
   268fe:	d001      	beq.n	26904 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   26900:	2000      	movs	r0, #0
   26902:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26904:	4b0d      	ldr	r3, [pc, #52]	; (2693c <errata_136_nrf52832+0x44>)
   26906:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26908:	f013 0f0f 	tst.w	r3, #15
   2690c:	d10b      	bne.n	26926 <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   2690e:	4b0c      	ldr	r3, [pc, #48]	; (26940 <errata_136_nrf52832+0x48>)
   26910:	681b      	ldr	r3, [r3, #0]
   26912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26916:	2b30      	cmp	r3, #48	; 0x30
   26918:	d007      	beq.n	2692a <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   2691a:	2b40      	cmp	r3, #64	; 0x40
   2691c:	d007      	beq.n	2692e <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   2691e:	2b50      	cmp	r3, #80	; 0x50
   26920:	d007      	beq.n	26932 <errata_136_nrf52832+0x3a>
	return false;
   26922:	2000      	movs	r0, #0
   26924:	4770      	bx	lr
   26926:	2000      	movs	r0, #0
   26928:	4770      	bx	lr
			return true;
   2692a:	2001      	movs	r0, #1
   2692c:	4770      	bx	lr
			return true;
   2692e:	2001      	movs	r0, #1
   26930:	4770      	bx	lr
			return true;
   26932:	2001      	movs	r0, #1
}
   26934:	4770      	bx	lr
   26936:	bf00      	nop
   26938:	f0000fe0 	.word	0xf0000fe0
   2693c:	f0000fe4 	.word	0xf0000fe4
   26940:	f0000fe8 	.word	0xf0000fe8

00026944 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   26944:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   26946:	f7ff ff65 	bl	26814 <ftpan_32>
   2694a:	b120      	cbz	r0, 26956 <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   2694c:	4a32      	ldr	r2, [pc, #200]	; (26a18 <nordicsemi_nrf52832_init+0xd4>)
   2694e:	68d3      	ldr	r3, [r2, #12]
   26950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26954:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   26956:	f7ff ff83 	bl	26860 <ftpan_37>
   2695a:	b110      	cbz	r0, 26962 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   2695c:	2203      	movs	r2, #3
   2695e:	4b2f      	ldr	r3, [pc, #188]	; (26a1c <nordicsemi_nrf52832_init+0xd8>)
   26960:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   26962:	f7ff ffa3 	bl	268ac <ftpan_36>
   26966:	b130      	cbz	r0, 26976 <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   26968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2696c:	2200      	movs	r2, #0
   2696e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   26972:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   26976:	f7ff ffbf 	bl	268f8 <errata_136_nrf52832>
   2697a:	b160      	cbz	r0, 26996 <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   2697c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26980:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26984:	f013 0f01 	tst.w	r3, #1
   26988:	d005      	beq.n	26996 <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   2698a:	f06f 0201 	mvn.w	r2, #1
   2698e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26992:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   26996:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2699a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2699e:	2b00      	cmp	r3, #0
   269a0:	db06      	blt.n	269b0 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   269a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   269a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   269aa:	2b00      	cmp	r3, #0
   269ac:	db00      	blt.n	269b0 <nordicsemi_nrf52832_init+0x6c>
   269ae:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   269b0:	2201      	movs	r2, #1
   269b2:	4b1b      	ldr	r3, [pc, #108]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269b8:	4b19      	ldr	r3, [pc, #100]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269be:	2b00      	cmp	r3, #0
   269c0:	d0fa      	beq.n	269b8 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   269c2:	2215      	movs	r2, #21
   269c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   269c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269cc:	4b14      	ldr	r3, [pc, #80]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269d2:	2b00      	cmp	r3, #0
   269d4:	d0fa      	beq.n	269cc <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   269d6:	2215      	movs	r2, #21
   269d8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   269dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269e0:	4b0f      	ldr	r3, [pc, #60]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269e6:	2b00      	cmp	r3, #0
   269e8:	d0fa      	beq.n	269e0 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   269ea:	2200      	movs	r2, #0
   269ec:	4b0c      	ldr	r3, [pc, #48]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269f2:	4b0b      	ldr	r3, [pc, #44]	; (26a20 <nordicsemi_nrf52832_init+0xdc>)
   269f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269f8:	2b00      	cmp	r3, #0
   269fa:	d0fa      	beq.n	269f2 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   269fc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26a00:	4908      	ldr	r1, [pc, #32]	; (26a24 <nordicsemi_nrf52832_init+0xe0>)
   26a02:	68ca      	ldr	r2, [r1, #12]
   26a04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   26a08:	4b07      	ldr	r3, [pc, #28]	; (26a28 <nordicsemi_nrf52832_init+0xe4>)
   26a0a:	4313      	orrs	r3, r2
   26a0c:	60cb      	str	r3, [r1, #12]
   26a0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   26a12:	bf00      	nop
   26a14:	e7fd      	b.n	26a12 <nordicsemi_nrf52832_init+0xce>
   26a16:	bf00      	nop
   26a18:	e000edf0 	.word	0xe000edf0
   26a1c:	400005a0 	.word	0x400005a0
   26a20:	4001e000 	.word	0x4001e000
   26a24:	e000ed00 	.word	0xe000ed00
   26a28:	05fa0004 	.word	0x05fa0004

00026a2c <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   26a2c:	4a01      	ldr	r2, [pc, #4]	; (26a34 <clock_init+0x8>)
   26a2e:	4b02      	ldr	r3, [pc, #8]	; (26a38 <clock_init+0xc>)
   26a30:	601a      	str	r2, [r3, #0]
   26a32:	4770      	bx	lr
   26a34:	03d09000 	.word	0x03d09000
   26a38:	2000c4c4 	.word	0x2000c4c4

00026a3c <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   26a3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   26a3e:	f04f 0320 	mov.w	r3, #32
   26a42:	f3ef 8411 	mrs	r4, BASEPRI
   26a46:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   26a4a:	f7ff ff7b 	bl	26944 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   26a4e:	4b05      	ldr	r3, [pc, #20]	; (26a64 <nordicsemi_nrf52_init+0x28>)
   26a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26a54:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   26a56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   26a58:	f7ff ffe8 	bl	26a2c <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   26a5c:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   26a60:	2000      	movs	r0, #0
   26a62:	bd10      	pop	{r4, pc}
   26a64:	e000ed00 	.word	0xe000ed00

00026a68 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   26a68:	4808      	ldr	r0, [pc, #32]	; (26a8c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   26a6a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   26a6c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   26a6e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   26a70:	d80b      	bhi.n	26a8a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   26a72:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   26a74:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   26a76:	d008      	beq.n	26a8a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   26a78:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   26a7a:	f001 fd1f 	bl	284bc <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   26a7e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   26a82:	4903      	ldr	r1, [pc, #12]	; (26a90 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   26a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   26a88:	600a      	str	r2, [r1, #0]

00026a8a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   26a8a:	4770      	bx	lr
    ldr r0, =_kernel
   26a8c:	20002718 	.word	0x20002718
    ldr r1, =_SCS_ICSR
   26a90:	e000ed04 	.word	0xe000ed04

00026a94 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   26a94:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26a96:	e00a      	b.n	26aae <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   26a98:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   26a9a:	2b00      	cmp	r3, #0
   26a9c:	db0a      	blt.n	26ab4 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26a9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26aa2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26aa6:	2120      	movs	r1, #32
   26aa8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26aac:	3201      	adds	r2, #1
   26aae:	2a26      	cmp	r2, #38	; 0x26
   26ab0:	ddf2      	ble.n	26a98 <_IntLibInit+0x4>
	}
}
   26ab2:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26ab4:	f002 010f 	and.w	r1, r2, #15
   26ab8:	4b02      	ldr	r3, [pc, #8]	; (26ac4 <_IntLibInit+0x30>)
   26aba:	440b      	add	r3, r1
   26abc:	2120      	movs	r1, #32
   26abe:	7619      	strb	r1, [r3, #24]
   26ac0:	e7f4      	b.n	26aac <_IntLibInit+0x18>
   26ac2:	bf00      	nop
   26ac4:	e000ecfc 	.word	0xe000ecfc

00026ac8 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26ac8:	490e      	ldr	r1, [pc, #56]	; (26b04 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26aca:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26acc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   26ad0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   26ad2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   26ad6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   26ada:	4f0b      	ldr	r7, [pc, #44]	; (26b08 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26adc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26ae0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26ae2:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   26ae6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   26ae8:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   26aea:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   26aec:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   26aee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26af0:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26af2:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26af6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   26afa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   26afe:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   26b02:	4770      	bx	lr
    ldr r1, =_kernel
   26b04:	20002718 	.word	0x20002718
    ldr v4, =_SCS_ICSR
   26b08:	e000ed04 	.word	0xe000ed04

00026b0c <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   26b0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26b10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26b12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26b16:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26b1a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   26b1c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   26b20:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   26b24:	d001      	beq.n	26b2a <_context_switch>

    cmp r1, #2
   26b26:	2902      	cmp	r1, #2
    beq _oops
   26b28:	d007      	beq.n	26b3a <_oops>

00026b2a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   26b2a:	4040      	eors	r0, r0
    msr BASEPRI, r0
   26b2c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   26b30:	4904      	ldr	r1, [pc, #16]	; (26b44 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   26b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   26b36:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   26b38:	4770      	bx	lr

00026b3a <_oops>:

_oops:
    push {lr}
   26b3a:	b500      	push	{lr}
    blx _do_kernel_oops
   26b3c:	f000 fa82 	bl	27044 <_do_kernel_oops>
    pop {pc}
   26b40:	bd00      	pop	{pc}
   26b42:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   26b44:	e000ed04 	.word	0xe000ed04

00026b48 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   26b48:	4904      	ldr	r1, [pc, #16]	; (26b5c <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26b4a:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   26b4c:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   26b4e:	4904      	ldr	r1, [pc, #16]	; (26b60 <__swap+0x18>)
    ldr r1, [r1]
   26b50:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   26b52:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   26b54:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   26b56:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   26b58:	4770      	bx	lr
   26b5a:	0000      	.short	0x0000
    ldr r1, =_kernel
   26b5c:	20002718 	.word	0x20002718
    ldr r1, =_k_neg_eagain
   26b60:	00031148 	.word	0x00031148

00026b64 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   26b64:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   26b66:	4802      	ldr	r0, [pc, #8]	; (26b70 <_DebugMonitor+0xc>)
   26b68:	f7dc fa0a 	bl	2f80 <printk>
   26b6c:	bd08      	pop	{r3, pc}
   26b6e:	bf00      	nop
   26b70:	00030d84 	.word	0x00030d84

00026b74 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   26b74:	b508      	push	{r3, lr}
   26b76:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   26b78:	290f      	cmp	r1, #15
   26b7a:	dd05      	ble.n	26b88 <_ReservedException+0x14>
   26b7c:	4903      	ldr	r1, [pc, #12]	; (26b8c <_ReservedException+0x18>)
   26b7e:	3a10      	subs	r2, #16
   26b80:	4803      	ldr	r0, [pc, #12]	; (26b90 <_ReservedException+0x1c>)
   26b82:	f7dc f9fd 	bl	2f80 <printk>
   26b86:	bd08      	pop	{r3, pc}
   26b88:	4902      	ldr	r1, [pc, #8]	; (26b94 <_ReservedException+0x20>)
   26b8a:	e7f8      	b.n	26b7e <_ReservedException+0xa>
   26b8c:	00030f0c 	.word	0x00030f0c
   26b90:	00030f28 	.word	0x00030f28
   26b94:	00030ef4 	.word	0x00030ef4

00026b98 <_FaultThreadShow>:
{
   26b98:	b510      	push	{r4, lr}
   26b9a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   26b9c:	f001 fc60 	bl	28460 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   26ba0:	69a2      	ldr	r2, [r4, #24]
   26ba2:	4601      	mov	r1, r0
   26ba4:	4801      	ldr	r0, [pc, #4]	; (26bac <_FaultThreadShow+0x14>)
   26ba6:	f7dc f9eb 	bl	2f80 <printk>
   26baa:	bd10      	pop	{r4, pc}
   26bac:	00030dbc 	.word	0x00030dbc

00026bb0 <_MpuFault>:
{
   26bb0:	b538      	push	{r3, r4, r5, lr}
   26bb2:	4604      	mov	r4, r0
   26bb4:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   26bb6:	481e      	ldr	r0, [pc, #120]	; (26c30 <_MpuFault+0x80>)
   26bb8:	f7dc f9e2 	bl	2f80 <printk>
	_FaultThreadShow(esf);
   26bbc:	4620      	mov	r0, r4
   26bbe:	f7ff ffeb 	bl	26b98 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   26bc2:	4b1c      	ldr	r3, [pc, #112]	; (26c34 <_MpuFault+0x84>)
   26bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bc6:	f013 0f10 	tst.w	r3, #16
   26bca:	d10f      	bne.n	26bec <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   26bcc:	4b19      	ldr	r3, [pc, #100]	; (26c34 <_MpuFault+0x84>)
   26bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bd0:	f013 0f08 	tst.w	r3, #8
   26bd4:	d10e      	bne.n	26bf4 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   26bd6:	4b17      	ldr	r3, [pc, #92]	; (26c34 <_MpuFault+0x84>)
   26bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bda:	f013 0f02 	tst.w	r3, #2
   26bde:	d10d      	bne.n	26bfc <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   26be0:	4b14      	ldr	r3, [pc, #80]	; (26c34 <_MpuFault+0x84>)
   26be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26be4:	f013 0f01 	tst.w	r3, #1
   26be8:	d11d      	bne.n	26c26 <_MpuFault+0x76>
   26bea:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26bec:	4812      	ldr	r0, [pc, #72]	; (26c38 <_MpuFault+0x88>)
   26bee:	f7dc f9c7 	bl	2f80 <printk>
   26bf2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26bf4:	4811      	ldr	r0, [pc, #68]	; (26c3c <_MpuFault+0x8c>)
   26bf6:	f7dc f9c3 	bl	2f80 <printk>
   26bfa:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   26bfc:	4810      	ldr	r0, [pc, #64]	; (26c40 <_MpuFault+0x90>)
   26bfe:	f7dc f9bf 	bl	2f80 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   26c02:	4b0c      	ldr	r3, [pc, #48]	; (26c34 <_MpuFault+0x84>)
   26c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c06:	f013 0f80 	tst.w	r3, #128	; 0x80
   26c0a:	d0ee      	beq.n	26bea <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   26c0c:	4b09      	ldr	r3, [pc, #36]	; (26c34 <_MpuFault+0x84>)
   26c0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   26c10:	480c      	ldr	r0, [pc, #48]	; (26c44 <_MpuFault+0x94>)
   26c12:	f7dc f9b5 	bl	2f80 <printk>
			if (fromHardFault) {
   26c16:	2d00      	cmp	r5, #0
   26c18:	d0e7      	beq.n	26bea <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   26c1a:	4a06      	ldr	r2, [pc, #24]	; (26c34 <_MpuFault+0x84>)
   26c1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   26c22:	6293      	str	r3, [r2, #40]	; 0x28
   26c24:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   26c26:	4808      	ldr	r0, [pc, #32]	; (26c48 <_MpuFault+0x98>)
   26c28:	f7dc f9aa 	bl	2f80 <printk>
}
   26c2c:	e7dd      	b.n	26bea <_MpuFault+0x3a>
   26c2e:	bf00      	nop
   26c30:	00030e64 	.word	0x00030e64
   26c34:	e000ed00 	.word	0xe000ed00
   26c38:	00030e7c 	.word	0x00030e7c
   26c3c:	00030e90 	.word	0x00030e90
   26c40:	00030ea4 	.word	0x00030ea4
   26c44:	00030ec0 	.word	0x00030ec0
   26c48:	00030ed4 	.word	0x00030ed4

00026c4c <_BusFault>:
{
   26c4c:	b538      	push	{r3, r4, r5, lr}
   26c4e:	4604      	mov	r4, r0
   26c50:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   26c52:	4827      	ldr	r0, [pc, #156]	; (26cf0 <_BusFault+0xa4>)
   26c54:	f7dc f994 	bl	2f80 <printk>
	_FaultThreadShow(esf);
   26c58:	4620      	mov	r0, r4
   26c5a:	f7ff ff9d 	bl	26b98 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   26c5e:	4b25      	ldr	r3, [pc, #148]	; (26cf4 <_BusFault+0xa8>)
   26c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c62:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   26c66:	d114      	bne.n	26c92 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   26c68:	4b22      	ldr	r3, [pc, #136]	; (26cf4 <_BusFault+0xa8>)
   26c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c6c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   26c70:	d113      	bne.n	26c9a <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   26c72:	4b20      	ldr	r3, [pc, #128]	; (26cf4 <_BusFault+0xa8>)
   26c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c76:	f413 7f00 	tst.w	r3, #512	; 0x200
   26c7a:	d112      	bne.n	26ca2 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26c7c:	4b1d      	ldr	r3, [pc, #116]	; (26cf4 <_BusFault+0xa8>)
   26c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c80:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26c84:	d12b      	bne.n	26cde <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   26c86:	4b1b      	ldr	r3, [pc, #108]	; (26cf4 <_BusFault+0xa8>)
   26c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c8a:	f413 7f80 	tst.w	r3, #256	; 0x100
   26c8e:	d12a      	bne.n	26ce6 <_BusFault+0x9a>
   26c90:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26c92:	4819      	ldr	r0, [pc, #100]	; (26cf8 <_BusFault+0xac>)
   26c94:	f7dc f974 	bl	2f80 <printk>
   26c98:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26c9a:	4818      	ldr	r0, [pc, #96]	; (26cfc <_BusFault+0xb0>)
   26c9c:	f7dc f970 	bl	2f80 <printk>
   26ca0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   26ca2:	4817      	ldr	r0, [pc, #92]	; (26d00 <_BusFault+0xb4>)
   26ca4:	f7dc f96c 	bl	2f80 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   26ca8:	4b12      	ldr	r3, [pc, #72]	; (26cf4 <_BusFault+0xa8>)
   26caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   26cb0:	d108      	bne.n	26cc4 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26cb2:	4b10      	ldr	r3, [pc, #64]	; (26cf4 <_BusFault+0xa8>)
   26cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cb6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26cba:	d0e9      	beq.n	26c90 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   26cbc:	4811      	ldr	r0, [pc, #68]	; (26d04 <_BusFault+0xb8>)
   26cbe:	f7dc f95f 	bl	2f80 <printk>
   26cc2:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   26cc4:	4b0b      	ldr	r3, [pc, #44]	; (26cf4 <_BusFault+0xa8>)
   26cc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   26cc8:	480f      	ldr	r0, [pc, #60]	; (26d08 <_BusFault+0xbc>)
   26cca:	f7dc f959 	bl	2f80 <printk>
			if (fromHardFault) {
   26cce:	2d00      	cmp	r5, #0
   26cd0:	d0ef      	beq.n	26cb2 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   26cd2:	4a08      	ldr	r2, [pc, #32]	; (26cf4 <_BusFault+0xa8>)
   26cd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   26cda:	6293      	str	r3, [r2, #40]	; 0x28
   26cdc:	e7e9      	b.n	26cb2 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   26cde:	4809      	ldr	r0, [pc, #36]	; (26d04 <_BusFault+0xb8>)
   26ce0:	f7dc f94e 	bl	2f80 <printk>
   26ce4:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   26ce6:	4809      	ldr	r0, [pc, #36]	; (26d0c <_BusFault+0xc0>)
   26ce8:	f7dc f94a 	bl	2f80 <printk>
}
   26cec:	e7d0      	b.n	26c90 <_BusFault+0x44>
   26cee:	bf00      	nop
   26cf0:	00030d18 	.word	0x00030d18
   26cf4:	e000ed00 	.word	0xe000ed00
   26cf8:	00030e7c 	.word	0x00030e7c
   26cfc:	00030e90 	.word	0x00030e90
   26d00:	00030d30 	.word	0x00030d30
   26d04:	00030d4c 	.word	0x00030d4c
   26d08:	00030ec0 	.word	0x00030ec0
   26d0c:	00030d68 	.word	0x00030d68

00026d10 <_UsageFault>:
{
   26d10:	b510      	push	{r4, lr}
   26d12:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   26d14:	4821      	ldr	r0, [pc, #132]	; (26d9c <_UsageFault+0x8c>)
   26d16:	f7dc f933 	bl	2f80 <printk>
	_FaultThreadShow(esf);
   26d1a:	4620      	mov	r0, r4
   26d1c:	f7ff ff3c 	bl	26b98 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   26d20:	4b1f      	ldr	r3, [pc, #124]	; (26da0 <_UsageFault+0x90>)
   26d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   26d28:	d120      	bne.n	26d6c <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   26d2a:	4b1d      	ldr	r3, [pc, #116]	; (26da0 <_UsageFault+0x90>)
   26d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d2e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   26d32:	d11f      	bne.n	26d74 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   26d34:	4b1a      	ldr	r3, [pc, #104]	; (26da0 <_UsageFault+0x90>)
   26d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d38:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   26d3c:	d11e      	bne.n	26d7c <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   26d3e:	4b18      	ldr	r3, [pc, #96]	; (26da0 <_UsageFault+0x90>)
   26d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d42:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   26d46:	d11d      	bne.n	26d84 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   26d48:	4b15      	ldr	r3, [pc, #84]	; (26da0 <_UsageFault+0x90>)
   26d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   26d50:	d11c      	bne.n	26d8c <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   26d52:	4b13      	ldr	r3, [pc, #76]	; (26da0 <_UsageFault+0x90>)
   26d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26d5a:	d11b      	bne.n	26d94 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26d5c:	4a10      	ldr	r2, [pc, #64]	; (26da0 <_UsageFault+0x90>)
   26d5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26d60:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26d64:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26d68:	6293      	str	r3, [r2, #40]	; 0x28
   26d6a:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   26d6c:	480d      	ldr	r0, [pc, #52]	; (26da4 <_UsageFault+0x94>)
   26d6e:	f7dc f907 	bl	2f80 <printk>
   26d72:	e7da      	b.n	26d2a <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   26d74:	480c      	ldr	r0, [pc, #48]	; (26da8 <_UsageFault+0x98>)
   26d76:	f7dc f903 	bl	2f80 <printk>
   26d7a:	e7db      	b.n	26d34 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   26d7c:	480b      	ldr	r0, [pc, #44]	; (26dac <_UsageFault+0x9c>)
   26d7e:	f7dc f8ff 	bl	2f80 <printk>
   26d82:	e7dc      	b.n	26d3e <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   26d84:	480a      	ldr	r0, [pc, #40]	; (26db0 <_UsageFault+0xa0>)
   26d86:	f7dc f8fb 	bl	2f80 <printk>
   26d8a:	e7dd      	b.n	26d48 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   26d8c:	4809      	ldr	r0, [pc, #36]	; (26db4 <_UsageFault+0xa4>)
   26d8e:	f7dc f8f7 	bl	2f80 <printk>
   26d92:	e7de      	b.n	26d52 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   26d94:	4808      	ldr	r0, [pc, #32]	; (26db8 <_UsageFault+0xa8>)
   26d96:	f7dc f8f3 	bl	2f80 <printk>
   26d9a:	e7df      	b.n	26d5c <_UsageFault+0x4c>
   26d9c:	00030f3c 	.word	0x00030f3c
   26da0:	e000ed00 	.word	0xe000ed00
   26da4:	00030f58 	.word	0x00030f58
   26da8:	00030f6c 	.word	0x00030f6c
   26dac:	00030f88 	.word	0x00030f88
   26db0:	00030fa8 	.word	0x00030fa8
   26db4:	00030fd0 	.word	0x00030fd0
   26db8:	00030fec 	.word	0x00030fec

00026dbc <_HardFault>:
{
   26dbc:	b510      	push	{r4, lr}
   26dbe:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   26dc0:	4816      	ldr	r0, [pc, #88]	; (26e1c <_HardFault+0x60>)
   26dc2:	f7dc f8dd 	bl	2f80 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   26dc6:	4b16      	ldr	r3, [pc, #88]	; (26e20 <_HardFault+0x64>)
   26dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26dca:	f013 0f02 	tst.w	r3, #2
   26dce:	d105      	bne.n	26ddc <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   26dd0:	4b13      	ldr	r3, [pc, #76]	; (26e20 <_HardFault+0x64>)
   26dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26dd4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   26dd8:	d104      	bne.n	26de4 <_HardFault+0x28>
   26dda:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   26ddc:	4811      	ldr	r0, [pc, #68]	; (26e24 <_HardFault+0x68>)
   26dde:	f7dc f8cf 	bl	2f80 <printk>
   26de2:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   26de4:	4810      	ldr	r0, [pc, #64]	; (26e28 <_HardFault+0x6c>)
   26de6:	f7dc f8cb 	bl	2f80 <printk>
		if (SCB_MMFSR) {
   26dea:	4b10      	ldr	r3, [pc, #64]	; (26e2c <_HardFault+0x70>)
   26dec:	781b      	ldrb	r3, [r3, #0]
   26dee:	b95b      	cbnz	r3, 26e08 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   26df0:	4b0f      	ldr	r3, [pc, #60]	; (26e30 <_HardFault+0x74>)
   26df2:	781b      	ldrb	r3, [r3, #0]
   26df4:	b96b      	cbnz	r3, 26e12 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   26df6:	4b0f      	ldr	r3, [pc, #60]	; (26e34 <_HardFault+0x78>)
   26df8:	881b      	ldrh	r3, [r3, #0]
   26dfa:	b29b      	uxth	r3, r3
   26dfc:	2b00      	cmp	r3, #0
   26dfe:	d0ec      	beq.n	26dda <_HardFault+0x1e>
			_UsageFault(esf);
   26e00:	4620      	mov	r0, r4
   26e02:	f7ff ff85 	bl	26d10 <_UsageFault>
}
   26e06:	e7e8      	b.n	26dda <_HardFault+0x1e>
			_MpuFault(esf, 1);
   26e08:	2101      	movs	r1, #1
   26e0a:	4620      	mov	r0, r4
   26e0c:	f7ff fed0 	bl	26bb0 <_MpuFault>
   26e10:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   26e12:	2101      	movs	r1, #1
   26e14:	4620      	mov	r0, r4
   26e16:	f7ff ff19 	bl	26c4c <_BusFault>
   26e1a:	bd10      	pop	{r4, pc}
   26e1c:	00030e08 	.word	0x00030e08
   26e20:	e000ed00 	.word	0xe000ed00
   26e24:	00030e20 	.word	0x00030e20
   26e28:	00030e44 	.word	0x00030e44
   26e2c:	e000ed28 	.word	0xe000ed28
   26e30:	e000ed29 	.word	0xe000ed29
   26e34:	e000ed2c 	.word	0xe000ed2c

00026e38 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   26e38:	b508      	push	{r3, lr}
	switch (fault) {
   26e3a:	1ecb      	subs	r3, r1, #3
   26e3c:	2b09      	cmp	r3, #9
   26e3e:	d817      	bhi.n	26e70 <_FaultDump+0x38>
   26e40:	e8df f003 	tbb	[pc, r3]
   26e44:	100c0805 	.word	0x100c0805
   26e48:	16161616 	.word	0x16161616
   26e4c:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   26e4e:	f7ff ffb5 	bl	26dbc <_HardFault>
		break;
   26e52:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   26e54:	2100      	movs	r1, #0
   26e56:	f7ff feab 	bl	26bb0 <_MpuFault>
		break;
   26e5a:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   26e5c:	2100      	movs	r1, #0
   26e5e:	f7ff fef5 	bl	26c4c <_BusFault>
		break;
   26e62:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   26e64:	f7ff ff54 	bl	26d10 <_UsageFault>
		break;
   26e68:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   26e6a:	f7ff fe7b 	bl	26b64 <_DebugMonitor>
		break;
   26e6e:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   26e70:	f7ff fe80 	bl	26b74 <_ReservedException>
   26e74:	bd08      	pop	{r3, pc}
	...

00026e78 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   26e78:	b510      	push	{r4, lr}
   26e7a:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26e7c:	4b05      	ldr	r3, [pc, #20]	; (26e94 <_Fault+0x1c>)
   26e7e:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   26e80:	f3c1 0108 	ubfx	r1, r1, #0, #9
   26e84:	f7ff ffd8 	bl	26e38 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   26e88:	4621      	mov	r1, r4
   26e8a:	2000      	movs	r0, #0
   26e8c:	f000 f8e0 	bl	27050 <_SysFatalErrorHandler>
   26e90:	bd10      	pop	{r4, pc}
   26e92:	bf00      	nop
   26e94:	e000ed00 	.word	0xe000ed00

00026e98 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26e98:	4a02      	ldr	r2, [pc, #8]	; (26ea4 <_FaultInit+0xc>)
   26e9a:	6953      	ldr	r3, [r2, #20]
   26e9c:	f043 0310 	orr.w	r3, r3, #16
   26ea0:	6153      	str	r3, [r2, #20]
   26ea2:	4770      	bx	lr
   26ea4:	e000ed00 	.word	0xe000ed00

00026ea8 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26ea8:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26eaa:	095b      	lsrs	r3, r3, #5
   26eac:	f000 001f 	and.w	r0, r0, #31
   26eb0:	2201      	movs	r2, #1
   26eb2:	fa02 f000 	lsl.w	r0, r2, r0
   26eb6:	4a02      	ldr	r2, [pc, #8]	; (26ec0 <_arch_irq_enable+0x18>)
   26eb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26ebc:	4770      	bx	lr
   26ebe:	bf00      	nop
   26ec0:	e000e100 	.word	0xe000e100

00026ec4 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   26ec4:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26ec6:	095b      	lsrs	r3, r3, #5
   26ec8:	f000 001f 	and.w	r0, r0, #31
   26ecc:	2201      	movs	r2, #1
   26ece:	fa02 f000 	lsl.w	r0, r2, r0
   26ed2:	3320      	adds	r3, #32
   26ed4:	4a01      	ldr	r2, [pc, #4]	; (26edc <_arch_irq_disable+0x18>)
   26ed6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26eda:	4770      	bx	lr
   26edc:	e000e100 	.word	0xe000e100

00026ee0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   26ee0:	0942      	lsrs	r2, r0, #5
   26ee2:	4b05      	ldr	r3, [pc, #20]	; (26ef8 <_arch_irq_is_enabled+0x18>)
   26ee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26ee8:	f000 001f 	and.w	r0, r0, #31
   26eec:	2301      	movs	r3, #1
   26eee:	fa03 f000 	lsl.w	r0, r3, r0
}
   26ef2:	4010      	ands	r0, r2
   26ef4:	4770      	bx	lr
   26ef6:	bf00      	nop
   26ef8:	e000e100 	.word	0xe000e100

00026efc <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26efc:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26efe:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   26f00:	2b00      	cmp	r3, #0
   26f02:	db08      	blt.n	26f16 <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f04:	0149      	lsls	r1, r1, #5
   26f06:	b2c9      	uxtb	r1, r1
   26f08:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26f0c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26f10:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   26f14:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f16:	f000 000f 	and.w	r0, r0, #15
   26f1a:	0149      	lsls	r1, r1, #5
   26f1c:	b2c9      	uxtb	r1, r1
   26f1e:	4b01      	ldr	r3, [pc, #4]	; (26f24 <_irq_priority_set+0x28>)
   26f20:	5419      	strb	r1, [r3, r0]
   26f22:	4770      	bx	lr
   26f24:	e000ed14 	.word	0xe000ed14

00026f28 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   26f28:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   26f2a:	f000 f847 	bl	26fbc <__bus_fault>
   26f2e:	bd08      	pop	{r3, pc}

00026f30 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26f30:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26f32:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   26f34:	4b04      	ldr	r3, [pc, #16]	; (26f48 <_arch_isr_direct_pm+0x18>)
   26f36:	6958      	ldr	r0, [r3, #20]
   26f38:	b908      	cbnz	r0, 26f3e <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   26f3a:	b662      	cpsie	i
   26f3c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   26f3e:	2200      	movs	r2, #0
   26f40:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   26f42:	f000 f9b5 	bl	272b0 <_sys_power_save_idle_exit>
   26f46:	e7f8      	b.n	26f3a <_arch_isr_direct_pm+0xa>
   26f48:	20002718 	.word	0x20002718

00026f4c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   26f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f4e:	4605      	mov	r5, r0
   26f50:	460c      	mov	r4, r1
   26f52:	4616      	mov	r6, r2
   26f54:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   26f56:	21aa      	movs	r1, #170	; 0xaa
   26f58:	4620      	mov	r0, r4
   26f5a:	f003 fdaf 	bl	2aabc <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   26f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26f60:	2204      	movs	r2, #4
   26f62:	9909      	ldr	r1, [sp, #36]	; 0x24
   26f64:	4628      	mov	r0, r5
   26f66:	f001 ff51 	bl	28e0c <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   26f6a:	2300      	movs	r3, #0
   26f6c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   26f6e:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   26f70:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   26f72:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   26f74:	f1a6 0120 	sub.w	r1, r6, #32
   26f78:	4421      	add	r1, r4
   26f7a:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   26f7e:	4a08      	ldr	r2, [pc, #32]	; (26fa0 <_new_thread+0x54>)
   26f80:	f022 0201 	bic.w	r2, r2, #1
   26f84:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   26f86:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   26f88:	9a06      	ldr	r2, [sp, #24]
   26f8a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   26f8c:	9a07      	ldr	r2, [sp, #28]
   26f8e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   26f90:	9a08      	ldr	r2, [sp, #32]
   26f92:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   26f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   26f98:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   26f9a:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   26f9c:	662b      	str	r3, [r5, #96]	; 0x60
   26f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26fa0:	00028af5 	.word	0x00028af5

00026fa4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   26fa4:	4901      	ldr	r1, [pc, #4]	; (26fac <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   26fa6:	2210      	movs	r2, #16
	str r2, [r1]
   26fa8:	600a      	str	r2, [r1, #0]
	bx lr
   26faa:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   26fac:	e000ed10 	.word	0xe000ed10

00026fb0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   26fb0:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26fb2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   26fb6:	bf30      	wfi

	bx lr
   26fb8:	4770      	bx	lr
   26fba:	bf00      	nop

00026fbc <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   26fbc:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26fbe:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   26fc2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 26fe0 <__bus_fault+0x24>
	ldr ip, [ip]
   26fc6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   26fca:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   26fce:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   26fd0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   26fd4:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   26fd8:	b500      	push	{lr}
	bl _Fault
   26fda:	f7ff ff4d 	bl	26e78 <_Fault>

	pop {pc}
   26fde:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   26fe0:	e000ed04 	.word	0xe000ed04

00026fe4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   26fe4:	b538      	push	{r3, r4, r5, lr}
   26fe6:	4604      	mov	r4, r0
   26fe8:	460d      	mov	r5, r1
	switch (reason) {
   26fea:	2804      	cmp	r0, #4
   26fec:	d017      	beq.n	2701e <_NanoFatalErrorHandler+0x3a>
   26fee:	2805      	cmp	r0, #5
   26ff0:	d019      	beq.n	27026 <_NanoFatalErrorHandler+0x42>
   26ff2:	2803      	cmp	r0, #3
   26ff4:	d004      	beq.n	27000 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   26ff6:	4601      	mov	r1, r0
   26ff8:	480d      	ldr	r0, [pc, #52]	; (27030 <_NanoFatalErrorHandler+0x4c>)
   26ffa:	f7db ffc1 	bl	2f80 <printk>
		break;
   26ffe:	e002      	b.n	27006 <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27000:	480c      	ldr	r0, [pc, #48]	; (27034 <_NanoFatalErrorHandler+0x50>)
   27002:	f7db ffbd 	bl	2f80 <printk>
   27006:	f001 fa2b 	bl	28460 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   2700a:	69aa      	ldr	r2, [r5, #24]
   2700c:	4601      	mov	r1, r0
   2700e:	480a      	ldr	r0, [pc, #40]	; (27038 <_NanoFatalErrorHandler+0x54>)
   27010:	f7db ffb6 	bl	2f80 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27014:	4629      	mov	r1, r5
   27016:	4620      	mov	r0, r4
   27018:	f000 f81a 	bl	27050 <_SysFatalErrorHandler>
   2701c:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   2701e:	4807      	ldr	r0, [pc, #28]	; (2703c <_NanoFatalErrorHandler+0x58>)
   27020:	f7db ffae 	bl	2f80 <printk>
		break;
   27024:	e7ef      	b.n	27006 <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27026:	4806      	ldr	r0, [pc, #24]	; (27040 <_NanoFatalErrorHandler+0x5c>)
   27028:	f7db ffaa 	bl	2f80 <printk>
		break;
   2702c:	e7eb      	b.n	27006 <_NanoFatalErrorHandler+0x22>
   2702e:	bf00      	nop
   27030:	00031078 	.word	0x00031078
   27034:	00031018 	.word	0x00031018
   27038:	0003109c 	.word	0x0003109c
   2703c:	00031040 	.word	0x00031040
   27040:	0003105c 	.word	0x0003105c

00027044 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27044:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27046:	4601      	mov	r1, r0
   27048:	6800      	ldr	r0, [r0, #0]
   2704a:	f7ff ffcb 	bl	26fe4 <_NanoFatalErrorHandler>
   2704e:	bd08      	pop	{r3, pc}

00027050 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27050:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27052:	2805      	cmp	r0, #5
   27054:	d00c      	beq.n	27070 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27056:	f001 fd31 	bl	28abc <k_is_in_isr>
   2705a:	b910      	cbnz	r0, 27062 <_SysFatalErrorHandler+0x12>
   2705c:	f001 fd42 	bl	28ae4 <_is_thread_essential>
   27060:	b158      	cbz	r0, 2707a <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27062:	f001 fd2b 	bl	28abc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27066:	b130      	cbz	r0, 27076 <_SysFatalErrorHandler+0x26>
   27068:	4908      	ldr	r1, [pc, #32]	; (2708c <_SysFatalErrorHandler+0x3c>)
   2706a:	4809      	ldr	r0, [pc, #36]	; (27090 <_SysFatalErrorHandler+0x40>)
   2706c:	f7db ff88 	bl	2f80 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27070:	f7ff ff9e 	bl	26fb0 <k_cpu_idle>
   27074:	e7fc      	b.n	27070 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27076:	4907      	ldr	r1, [pc, #28]	; (27094 <_SysFatalErrorHandler+0x44>)
   27078:	e7f7      	b.n	2706a <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   2707a:	4c07      	ldr	r4, [pc, #28]	; (27098 <_SysFatalErrorHandler+0x48>)
   2707c:	68a1      	ldr	r1, [r4, #8]
   2707e:	4807      	ldr	r0, [pc, #28]	; (2709c <_SysFatalErrorHandler+0x4c>)
   27080:	f7db ff7e 	bl	2f80 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27084:	68a0      	ldr	r0, [r4, #8]
   27086:	f000 f80b 	bl	270a0 <_impl_k_thread_abort>
	return;
   2708a:	bd10      	pop	{r4, pc}
   2708c:	000304e8 	.word	0x000304e8
   27090:	000310ec 	.word	0x000310ec
   27094:	000310d8 	.word	0x000310d8
   27098:	20002718 	.word	0x20002718
   2709c:	0003110c 	.word	0x0003110c

000270a0 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   270a0:	b538      	push	{r3, r4, r5, lr}
   270a2:	4605      	mov	r5, r0
	__asm__ volatile(
   270a4:	f04f 0320 	mov.w	r3, #32
   270a8:	f3ef 8411 	mrs	r4, BASEPRI
   270ac:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   270b0:	f001 fe28 	bl	28d04 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   270b4:	4b0b      	ldr	r3, [pc, #44]	; (270e4 <_impl_k_thread_abort+0x44>)
   270b6:	689b      	ldr	r3, [r3, #8]
   270b8:	429d      	cmp	r5, r3
   270ba:	d003      	beq.n	270c4 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   270bc:	4620      	mov	r0, r4
   270be:	f001 fa03 	bl	284c8 <_reschedule_threads>
   270c2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   270c4:	4b08      	ldr	r3, [pc, #32]	; (270e8 <_impl_k_thread_abort+0x48>)
   270c6:	685b      	ldr	r3, [r3, #4]
   270c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   270cc:	b12b      	cbz	r3, 270da <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   270ce:	4a06      	ldr	r2, [pc, #24]	; (270e8 <_impl_k_thread_abort+0x48>)
   270d0:	6853      	ldr	r3, [r2, #4]
   270d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   270d6:	6053      	str	r3, [r2, #4]
   270d8:	e7f0      	b.n	270bc <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   270da:	f001 f9ef 	bl	284bc <_update_time_slice_before_swap>
#endif

	return __swap(key);
   270de:	4620      	mov	r0, r4
   270e0:	f7ff fd32 	bl	26b48 <__swap>
   270e4:	20002718 	.word	0x20002718
   270e8:	e000ed00 	.word	0xe000ed00

000270ec <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   270ec:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   270ee:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   270f0:	4a0b      	ldr	r2, [pc, #44]	; (27120 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   270f2:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   270f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   270f6:	bf1e      	ittt	ne
	movne	r1, #0
   270f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   270fa:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   270fc:	f000 f8d8 	blne	272b0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27100:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27102:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27106:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2710a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   2710e:	4905      	ldr	r1, [pc, #20]	; (27124 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27110:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27112:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27114:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27116:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   2711a:	f7ff bca5 	b.w	26a68 <_ExcExit>
   2711e:	0000      	.short	0x0000
	ldr r2, =_kernel
   27120:	20002718 	.word	0x20002718
	ldr r1, =_sw_isr_table
   27124:	000000dc 	.word	0x000000dc

00027128 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27128:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2712a:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   2712e:	4809      	ldr	r0, [pc, #36]	; (27154 <__reset+0x2c>)
    ldr r1, =0xaa
   27130:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27134:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27138:	f003 fcc0 	bl	2aabc <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   2713c:	4805      	ldr	r0, [pc, #20]	; (27154 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   2713e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27142:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27144:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27148:	2002      	movs	r0, #2
    msr CONTROL, r0
   2714a:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   2714e:	f000 b807 	b.w	27160 <_PrepC>
   27152:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27154:	2000ac00 	.word	0x2000ac00

00027158 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27158:	bf30      	wfi
    b _SysNmiOnReset
   2715a:	f7ff bffd 	b.w	27158 <_SysNmiOnReset>
   2715e:	bf00      	nop

00027160 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27160:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27162:	4a07      	ldr	r2, [pc, #28]	; (27180 <_PrepC+0x20>)
   27164:	4b07      	ldr	r3, [pc, #28]	; (27184 <_PrepC+0x24>)
   27166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2716a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2716c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27170:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27174:	f000 f9d6 	bl	27524 <_bss_zero>
	_data_copy();
   27178:	f000 f9e0 	bl	2753c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   2717c:	f000 fa00 	bl	27580 <_Cstart>
   27180:	e000ed00 	.word	0xe000ed00
   27184:	00000000 	.word	0x00000000

00027188 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27188:	b508      	push	{r3, lr}
	handler();
   2718a:	f7ff ffe5 	bl	27158 <_SysNmiOnReset>
	_ExcExit();
   2718e:	f7ff fc6b 	bl	26a68 <_ExcExit>
   27192:	bd08      	pop	{r3, pc}

00027194 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27194:	4b05      	ldr	r3, [pc, #20]	; (271ac <_region_init+0x18>)
   27196:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27198:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   2719c:	4308      	orrs	r0, r1
   2719e:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   271a2:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   271a4:	f042 0201 	orr.w	r2, r2, #1
   271a8:	611a      	str	r2, [r3, #16]
   271aa:	4770      	bx	lr
   271ac:	e000ed90 	.word	0xe000ed90

000271b0 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   271b0:	4b14      	ldr	r3, [pc, #80]	; (27204 <_arm_mpu_config+0x54>)
   271b2:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   271b4:	4b14      	ldr	r3, [pc, #80]	; (27208 <_arm_mpu_config+0x58>)
   271b6:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   271b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   271bc:	429a      	cmp	r2, r3
   271be:	d81f      	bhi.n	27200 <_arm_mpu_config+0x50>
{
   271c0:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   271c2:	2400      	movs	r4, #0
   271c4:	4b10      	ldr	r3, [pc, #64]	; (27208 <_arm_mpu_config+0x58>)
   271c6:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   271c8:	e00b      	b.n	271e2 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   271ca:	4b0e      	ldr	r3, [pc, #56]	; (27204 <_arm_mpu_config+0x54>)
   271cc:	6859      	ldr	r1, [r3, #4]
   271ce:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   271d2:	0093      	lsls	r3, r2, #2
   271d4:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   271d6:	6892      	ldr	r2, [r2, #8]
   271d8:	58c9      	ldr	r1, [r1, r3]
   271da:	4620      	mov	r0, r4
   271dc:	f7ff ffda 	bl	27194 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   271e0:	3401      	adds	r4, #1
   271e2:	4b08      	ldr	r3, [pc, #32]	; (27204 <_arm_mpu_config+0x54>)
   271e4:	681b      	ldr	r3, [r3, #0]
   271e6:	429c      	cmp	r4, r3
   271e8:	d3ef      	bcc.n	271ca <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   271ea:	2205      	movs	r2, #5
   271ec:	4b06      	ldr	r3, [pc, #24]	; (27208 <_arm_mpu_config+0x58>)
   271ee:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   271f0:	2201      	movs	r2, #1
   271f2:	4b06      	ldr	r3, [pc, #24]	; (2720c <_arm_mpu_config+0x5c>)
   271f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   271f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   271fa:	f3bf 8f6f 	isb	sy
   271fe:	bd10      	pop	{r4, pc}
   27200:	4770      	bx	lr
   27202:	bf00      	nop
   27204:	2000c4c8 	.word	0x2000c4c8
   27208:	e000ed90 	.word	0xe000ed90
   2720c:	20002644 	.word	0x20002644

00027210 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27210:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27212:	f7ff ffcd 	bl	271b0 <_arm_mpu_config>

	return 0;
}
   27216:	2000      	movs	r0, #0
   27218:	bd08      	pop	{r3, pc}
	...

0002721c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   2721c:	b538      	push	{r3, r4, r5, lr}
   2721e:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27220:	4b07      	ldr	r3, [pc, #28]	; (27240 <_sys_device_do_config_level+0x24>)
   27222:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27226:	e004      	b.n	27232 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27228:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   2722a:	685b      	ldr	r3, [r3, #4]
   2722c:	4620      	mov	r0, r4
   2722e:	4798      	blx	r3
								info++) {
   27230:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27232:	1c6b      	adds	r3, r5, #1
   27234:	4a02      	ldr	r2, [pc, #8]	; (27240 <_sys_device_do_config_level+0x24>)
   27236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2723a:	429c      	cmp	r4, r3
   2723c:	d3f4      	bcc.n	27228 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   2723e:	bd38      	pop	{r3, r4, r5, pc}
   27240:	00031134 	.word	0x00031134

00027244 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27244:	b538      	push	{r3, r4, r5, lr}
   27246:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27248:	4c0a      	ldr	r4, [pc, #40]	; (27274 <device_get_binding+0x30>)
   2724a:	e000      	b.n	2724e <device_get_binding+0xa>
   2724c:	340c      	adds	r4, #12
   2724e:	4b0a      	ldr	r3, [pc, #40]	; (27278 <device_get_binding+0x34>)
   27250:	429c      	cmp	r4, r3
   27252:	d00c      	beq.n	2726e <device_get_binding+0x2a>
		if (!info->driver_api) {
   27254:	6863      	ldr	r3, [r4, #4]
   27256:	2b00      	cmp	r3, #0
   27258:	d0f8      	beq.n	2724c <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   2725a:	6823      	ldr	r3, [r4, #0]
   2725c:	6819      	ldr	r1, [r3, #0]
   2725e:	42a9      	cmp	r1, r5
   27260:	d006      	beq.n	27270 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27262:	4628      	mov	r0, r5
   27264:	f7d9 f8d0 	bl	408 <strcmp>
   27268:	2800      	cmp	r0, #0
   2726a:	d1ef      	bne.n	2724c <device_get_binding+0x8>
   2726c:	e000      	b.n	27270 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   2726e:	2400      	movs	r4, #0
}
   27270:	4620      	mov	r0, r4
   27272:	bd38      	pop	{r3, r4, r5, pc}
   27274:	2000cec0 	.word	0x2000cec0
   27278:	2000cf80 	.word	0x2000cf80

0002727c <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   2727c:	4b01      	ldr	r3, [pc, #4]	; (27284 <set_kernel_idle_time_in_ticks+0x8>)
   2727e:	6158      	str	r0, [r3, #20]
   27280:	4770      	bx	lr
   27282:	bf00      	nop
   27284:	20002718 	.word	0x20002718

00027288 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27288:	b510      	push	{r4, lr}
   2728a:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   2728c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27290:	d003      	beq.n	2729a <_sys_power_save_idle+0x12>
   27292:	4b06      	ldr	r3, [pc, #24]	; (272ac <_sys_power_save_idle+0x24>)
   27294:	681b      	ldr	r3, [r3, #0]
   27296:	4298      	cmp	r0, r3
   27298:	db02      	blt.n	272a0 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   2729a:	4620      	mov	r0, r4
   2729c:	f7db f8e4 	bl	2468 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   272a0:	4620      	mov	r0, r4
   272a2:	f7ff ffeb 	bl	2727c <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   272a6:	f7ff fe83 	bl	26fb0 <k_cpu_idle>
   272aa:	bd10      	pop	{r4, pc}
   272ac:	2000c50c 	.word	0x2000c50c

000272b0 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   272b0:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   272b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   272b6:	d003      	beq.n	272c0 <_sys_power_save_idle_exit+0x10>
   272b8:	4b03      	ldr	r3, [pc, #12]	; (272c8 <_sys_power_save_idle_exit+0x18>)
   272ba:	681b      	ldr	r3, [r3, #0]
   272bc:	4298      	cmp	r0, r3
   272be:	db01      	blt.n	272c4 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   272c0:	f7db f8e8 	bl	2494 <_timer_idle_exit>
   272c4:	bd08      	pop	{r3, pc}
   272c6:	bf00      	nop
   272c8:	2000c50c 	.word	0x2000c50c

000272cc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   272cc:	b508      	push	{r3, lr}
   272ce:	e005      	b.n	272dc <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272d0:	2300      	movs	r3, #0
   272d2:	e00e      	b.n	272f2 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   272d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   272d8:	f7ff ffd6 	bl	27288 <_sys_power_save_idle>
   272dc:	f04f 0220 	mov.w	r2, #32
   272e0:	f3ef 8311 	mrs	r3, BASEPRI
   272e4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   272e8:	4a04      	ldr	r2, [pc, #16]	; (272fc <idle+0x30>)
   272ea:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272ee:	4293      	cmp	r3, r2
   272f0:	d0ee      	beq.n	272d0 <idle+0x4>
   272f2:	2b00      	cmp	r3, #0
   272f4:	d0ee      	beq.n	272d4 <idle+0x8>
   272f6:	6918      	ldr	r0, [r3, #16]
   272f8:	e7ee      	b.n	272d8 <idle+0xc>
   272fa:	bf00      	nop
   272fc:	20002718 	.word	0x20002718

00027300 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27300:	b480      	push	{r7}
   27302:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27304:	4b07      	ldr	r3, [pc, #28]	; (27324 <switch_to_main_thread+0x24>)
   27306:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   2730a:	4907      	ldr	r1, [pc, #28]	; (27328 <switch_to_main_thread+0x28>)
   2730c:	4a07      	ldr	r2, [pc, #28]	; (2732c <switch_to_main_thread+0x2c>)
   2730e:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27310:	4c07      	ldr	r4, [pc, #28]	; (27330 <switch_to_main_thread+0x30>)
   27312:	4a08      	ldr	r2, [pc, #32]	; (27334 <switch_to_main_thread+0x34>)
   27314:	f383 8809 	msr	PSP, r3
   27318:	2100      	movs	r1, #0
   2731a:	f381 8811 	msr	BASEPRI, r1
   2731e:	4610      	mov	r0, r2
   27320:	4720      	bx	r4
   27322:	bf00      	nop
   27324:	2000aac0 	.word	0x2000aac0
   27328:	200026b0 	.word	0x200026b0
   2732c:	20002718 	.word	0x20002718
   27330:	00028af5 	.word	0x00028af5
   27334:	00027559 	.word	0x00027559

00027338 <prepare_multithreading>:
{
   27338:	b5f0      	push	{r4, r5, r6, r7, lr}
   2733a:	b087      	sub	sp, #28
	_IntLibInit();
   2733c:	f7ff fbaa 	bl	26a94 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27340:	2300      	movs	r3, #0
   27342:	e007      	b.n	27354 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27344:	1d18      	adds	r0, r3, #4
   27346:	4927      	ldr	r1, [pc, #156]	; (273e4 <prepare_multithreading+0xac>)
   27348:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   2734c:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27350:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27352:	3301      	adds	r3, #1
   27354:	2b1f      	cmp	r3, #31
   27356:	ddf5      	ble.n	27344 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27358:	4e22      	ldr	r6, [pc, #136]	; (273e4 <prepare_multithreading+0xac>)
   2735a:	4d23      	ldr	r5, [pc, #140]	; (273e8 <prepare_multithreading+0xb0>)
   2735c:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   2735e:	2701      	movs	r7, #1
   27360:	9704      	str	r7, [sp, #16]
   27362:	2400      	movs	r4, #0
   27364:	9403      	str	r4, [sp, #12]
   27366:	9402      	str	r4, [sp, #8]
   27368:	9401      	str	r4, [sp, #4]
   2736a:	9400      	str	r4, [sp, #0]
   2736c:	4b1f      	ldr	r3, [pc, #124]	; (273ec <prepare_multithreading+0xb4>)
   2736e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27372:	491f      	ldr	r1, [pc, #124]	; (273f0 <prepare_multithreading+0xb8>)
   27374:	4628      	mov	r0, r5
   27376:	f001 fc9b 	bl	28cb0 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2737a:	7a6b      	ldrb	r3, [r5, #9]
   2737c:	f023 0304 	bic.w	r3, r3, #4
   27380:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27382:	4628      	mov	r0, r5
   27384:	f000 ff08 	bl	28198 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27388:	4d1a      	ldr	r5, [pc, #104]	; (273f4 <prepare_multithreading+0xbc>)
   2738a:	9704      	str	r7, [sp, #16]
   2738c:	230f      	movs	r3, #15
   2738e:	9303      	str	r3, [sp, #12]
   27390:	9402      	str	r4, [sp, #8]
   27392:	9401      	str	r4, [sp, #4]
   27394:	9400      	str	r4, [sp, #0]
   27396:	4b18      	ldr	r3, [pc, #96]	; (273f8 <prepare_multithreading+0xc0>)
   27398:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2739c:	4917      	ldr	r1, [pc, #92]	; (273fc <prepare_multithreading+0xc4>)
   2739e:	4628      	mov	r0, r5
   273a0:	f001 fc86 	bl	28cb0 <_setup_new_thread>
   273a4:	7a6b      	ldrb	r3, [r5, #9]
   273a6:	f023 0304 	bic.w	r3, r3, #4
   273aa:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   273ac:	4628      	mov	r0, r5
   273ae:	f000 fef3 	bl	28198 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   273b2:	f106 030c 	add.w	r3, r6, #12
   273b6:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   273b8:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   273ba:	4b11      	ldr	r3, [pc, #68]	; (27400 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   273bc:	f383 8808 	msr	MSP, r3
   273c0:	4b10      	ldr	r3, [pc, #64]	; (27404 <prepare_multithreading+0xcc>)
   273c2:	22e0      	movs	r2, #224	; 0xe0
   273c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   273c8:	77dc      	strb	r4, [r3, #31]
   273ca:	761c      	strb	r4, [r3, #24]
   273cc:	765c      	strb	r4, [r3, #25]
   273ce:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   273d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   273d2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   273d6:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   273d8:	f7ff fd5e 	bl	26e98 <_FaultInit>
	_CpuIdleInit();
   273dc:	f7ff fde2 	bl	26fa4 <_CpuIdleInit>
}
   273e0:	b007      	add	sp, #28
   273e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   273e4:	20002718 	.word	0x20002718
   273e8:	200026b0 	.word	0x200026b0
   273ec:	00027559 	.word	0x00027559
   273f0:	2000a2c0 	.word	0x2000a2c0
   273f4:	20002648 	.word	0x20002648
   273f8:	000272cd 	.word	0x000272cd
   273fc:	2000aac0 	.word	0x2000aac0
   27400:	2000b400 	.word	0x2000b400
   27404:	e000ed00 	.word	0xe000ed00

00027408 <k_call_stacks_analyze>:
{
   27408:	b500      	push	{lr}
   2740a:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   2740c:	483a      	ldr	r0, [pc, #232]	; (274f8 <k_call_stacks_analyze+0xf0>)
   2740e:	f7db fdb7 	bl	2f80 <printk>
   27412:	2200      	movs	r2, #0
	size_t unused = 0;
   27414:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27416:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2741a:	d206      	bcs.n	2742a <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   2741c:	4937      	ldr	r1, [pc, #220]	; (274fc <k_call_stacks_analyze+0xf4>)
   2741e:	5c89      	ldrb	r1, [r1, r2]
   27420:	29aa      	cmp	r1, #170	; 0xaa
   27422:	d102      	bne.n	2742a <k_call_stacks_analyze+0x22>
			unused++;
   27424:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27426:	3201      	adds	r2, #1
   27428:	e7f5      	b.n	27416 <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   2742a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   2742e:	2264      	movs	r2, #100	; 0x64
   27430:	fb02 f201 	mul.w	r2, r2, r1
   27434:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27436:	9202      	str	r2, [sp, #8]
   27438:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2743c:	9201      	str	r2, [sp, #4]
   2743e:	9100      	str	r1, [sp, #0]
   27440:	492f      	ldr	r1, [pc, #188]	; (27500 <k_call_stacks_analyze+0xf8>)
   27442:	4830      	ldr	r0, [pc, #192]	; (27504 <k_call_stacks_analyze+0xfc>)
   27444:	f7db fd9c 	bl	2f80 <printk>
	for (i = 0; i < size; i++) {
   27448:	2200      	movs	r2, #0
	size_t unused = 0;
   2744a:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2744c:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27450:	d206      	bcs.n	27460 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   27452:	492d      	ldr	r1, [pc, #180]	; (27508 <k_call_stacks_analyze+0x100>)
   27454:	5c89      	ldrb	r1, [r1, r2]
   27456:	29aa      	cmp	r1, #170	; 0xaa
   27458:	d102      	bne.n	27460 <k_call_stacks_analyze+0x58>
			unused++;
   2745a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2745c:	3201      	adds	r2, #1
   2745e:	e7f5      	b.n	2744c <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27460:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   27464:	2264      	movs	r2, #100	; 0x64
   27466:	fb02 f201 	mul.w	r2, r2, r1
   2746a:	4828      	ldr	r0, [pc, #160]	; (2750c <k_call_stacks_analyze+0x104>)
   2746c:	fba0 0202 	umull	r0, r2, r0, r2
   27470:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27472:	9202      	str	r2, [sp, #8]
   27474:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27478:	9201      	str	r2, [sp, #4]
   2747a:	9100      	str	r1, [sp, #0]
   2747c:	4924      	ldr	r1, [pc, #144]	; (27510 <k_call_stacks_analyze+0x108>)
   2747e:	4821      	ldr	r0, [pc, #132]	; (27504 <k_call_stacks_analyze+0xfc>)
   27480:	f7db fd7e 	bl	2f80 <printk>
	for (i = 0; i < size; i++) {
   27484:	2200      	movs	r2, #0
	size_t unused = 0;
   27486:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27488:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2748c:	d206      	bcs.n	2749c <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   2748e:	4921      	ldr	r1, [pc, #132]	; (27514 <k_call_stacks_analyze+0x10c>)
   27490:	5c89      	ldrb	r1, [r1, r2]
   27492:	29aa      	cmp	r1, #170	; 0xaa
   27494:	d102      	bne.n	2749c <k_call_stacks_analyze+0x94>
			unused++;
   27496:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27498:	3201      	adds	r2, #1
   2749a:	e7f5      	b.n	27488 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   2749c:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   274a0:	2264      	movs	r2, #100	; 0x64
   274a2:	fb02 f201 	mul.w	r2, r2, r1
   274a6:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   274a8:	9202      	str	r2, [sp, #8]
   274aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   274ae:	9201      	str	r2, [sp, #4]
   274b0:	9100      	str	r1, [sp, #0]
   274b2:	4919      	ldr	r1, [pc, #100]	; (27518 <k_call_stacks_analyze+0x110>)
   274b4:	4813      	ldr	r0, [pc, #76]	; (27504 <k_call_stacks_analyze+0xfc>)
   274b6:	f7db fd63 	bl	2f80 <printk>
	for (i = 0; i < size; i++) {
   274ba:	2200      	movs	r2, #0
	size_t unused = 0;
   274bc:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   274be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   274c2:	d206      	bcs.n	274d2 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   274c4:	4915      	ldr	r1, [pc, #84]	; (2751c <k_call_stacks_analyze+0x114>)
   274c6:	5c89      	ldrb	r1, [r1, r2]
   274c8:	29aa      	cmp	r1, #170	; 0xaa
   274ca:	d102      	bne.n	274d2 <k_call_stacks_analyze+0xca>
			unused++;
   274cc:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   274ce:	3201      	adds	r2, #1
   274d0:	e7f5      	b.n	274be <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   274d2:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   274d6:	2264      	movs	r2, #100	; 0x64
   274d8:	fb02 f201 	mul.w	r2, r2, r1
   274dc:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   274de:	9202      	str	r2, [sp, #8]
   274e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   274e4:	9201      	str	r2, [sp, #4]
   274e6:	9100      	str	r1, [sp, #0]
   274e8:	490d      	ldr	r1, [pc, #52]	; (27520 <k_call_stacks_analyze+0x118>)
   274ea:	4806      	ldr	r0, [pc, #24]	; (27504 <k_call_stacks_analyze+0xfc>)
   274ec:	f7db fd48 	bl	2f80 <printk>
}
   274f0:	b005      	add	sp, #20
   274f2:	f85d fb04 	ldr.w	pc, [sp], #4
   274f6:	bf00      	nop
   274f8:	00031150 	.word	0x00031150
   274fc:	2000a2c0 	.word	0x2000a2c0
   27500:	00031160 	.word	0x00031160
   27504:	0002f500 	.word	0x0002f500
   27508:	2000aac0 	.word	0x2000aac0
   2750c:	cccccccd 	.word	0xcccccccd
   27510:	0003116c 	.word	0x0003116c
   27514:	2000ac00 	.word	0x2000ac00
   27518:	00031178 	.word	0x00031178
   2751c:	2000b400 	.word	0x2000b400
   27520:	00031184 	.word	0x00031184

00027524 <_bss_zero>:
{
   27524:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   27526:	4803      	ldr	r0, [pc, #12]	; (27534 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   27528:	4a03      	ldr	r2, [pc, #12]	; (27538 <_bss_zero+0x14>)
   2752a:	1a12      	subs	r2, r2, r0
   2752c:	2100      	movs	r1, #0
   2752e:	f003 fac5 	bl	2aabc <memset>
   27532:	bd08      	pop	{r3, pc}
   27534:	20000000 	.word	0x20000000
   27538:	20002bb0 	.word	0x20002bb0

0002753c <_data_copy>:
{
   2753c:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   2753e:	4803      	ldr	r0, [pc, #12]	; (2754c <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   27540:	4a03      	ldr	r2, [pc, #12]	; (27550 <_data_copy+0x14>)
   27542:	1a12      	subs	r2, r2, r0
   27544:	4903      	ldr	r1, [pc, #12]	; (27554 <_data_copy+0x18>)
   27546:	f7d8 febb 	bl	2c0 <memcpy>
   2754a:	bd08      	pop	{r3, pc}
   2754c:	2000b800 	.word	0x2000b800
   27550:	2000d454 	.word	0x2000d454
   27554:	000315e4 	.word	0x000315e4

00027558 <_main>:
{
   27558:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2755a:	2002      	movs	r0, #2
   2755c:	f7ff fe5e 	bl	2721c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   27560:	2003      	movs	r0, #3
   27562:	f7ff fe5b 	bl	2721c <_sys_device_do_config_level>
	_init_static_threads();
   27566:	f001 fc11 	bl	28d8c <_init_static_threads>
	main();
   2756a:	f7da fa15 	bl	1998 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2756e:	4a03      	ldr	r2, [pc, #12]	; (2757c <_main+0x24>)
   27570:	7a13      	ldrb	r3, [r2, #8]
   27572:	f023 0301 	bic.w	r3, r3, #1
   27576:	7213      	strb	r3, [r2, #8]
   27578:	bd08      	pop	{r3, pc}
   2757a:	bf00      	nop
   2757c:	200026b0 	.word	0x200026b0

00027580 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   27580:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   27582:	2000      	movs	r0, #0
   27584:	f7ff fed8 	bl	27338 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   27588:	2000      	movs	r0, #0
   2758a:	f7ff fe47 	bl	2721c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2758e:	2001      	movs	r0, #1
   27590:	f7ff fe44 	bl	2721c <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   27594:	f7ff feb4 	bl	27300 <switch_to_main_thread>

00027598 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   27598:	2200      	movs	r2, #0
   2759a:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   2759c:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   2759e:	e005      	b.n	275ac <create_free_list+0x14>
		*(char **)p = slab->free_list;
   275a0:	6941      	ldr	r1, [r0, #20]
   275a2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   275a4:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   275a6:	68c1      	ldr	r1, [r0, #12]
   275a8:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   275aa:	3201      	adds	r2, #1
   275ac:	6881      	ldr	r1, [r0, #8]
   275ae:	428a      	cmp	r2, r1
   275b0:	d3f6      	bcc.n	275a0 <create_free_list+0x8>
	}
}
   275b2:	4770      	bx	lr

000275b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   275b4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   275b6:	4c05      	ldr	r4, [pc, #20]	; (275cc <init_mem_slab_module+0x18>)
   275b8:	e003      	b.n	275c2 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   275ba:	4620      	mov	r0, r4
   275bc:	f7ff ffec 	bl	27598 <create_free_list>
	     slab++) {
   275c0:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   275c2:	4b03      	ldr	r3, [pc, #12]	; (275d0 <init_mem_slab_module+0x1c>)
   275c4:	429c      	cmp	r4, r3
   275c6:	d3f8      	bcc.n	275ba <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   275c8:	2000      	movs	r0, #0
   275ca:	bd10      	pop	{r4, pc}
   275cc:	2000cf8c 	.word	0x2000cf8c
   275d0:	2000cfc4 	.word	0x2000cfc4

000275d4 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   275d4:	b538      	push	{r3, r4, r5, lr}
   275d6:	f04f 0320 	mov.w	r3, #32
   275da:	f3ef 8411 	mrs	r4, BASEPRI
   275de:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   275e2:	6943      	ldr	r3, [r0, #20]
   275e4:	b15b      	cbz	r3, 275fe <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   275e6:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   275e8:	6943      	ldr	r3, [r0, #20]
   275ea:	681b      	ldr	r3, [r3, #0]
   275ec:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   275ee:	6983      	ldr	r3, [r0, #24]
   275f0:	3301      	adds	r3, #1
   275f2:	6183      	str	r3, [r0, #24]
		result = 0;
   275f4:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   275f6:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   275fa:	4618      	mov	r0, r3
   275fc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   275fe:	b922      	cbnz	r2, 2760a <k_mem_slab_alloc+0x36>
		*mem = NULL;
   27600:	2300      	movs	r3, #0
   27602:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   27604:	f06f 030b 	mvn.w	r3, #11
   27608:	e7f5      	b.n	275f6 <k_mem_slab_alloc+0x22>
   2760a:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   2760c:	4611      	mov	r1, r2
   2760e:	f000 fed7 	bl	283c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   27612:	f000 ff53 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   27616:	4620      	mov	r0, r4
   27618:	f7ff fa96 	bl	26b48 <__swap>
		if (result == 0) {
   2761c:	4603      	mov	r3, r0
   2761e:	2800      	cmp	r0, #0
   27620:	d1eb      	bne.n	275fa <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   27622:	4a02      	ldr	r2, [pc, #8]	; (2762c <k_mem_slab_alloc+0x58>)
   27624:	6892      	ldr	r2, [r2, #8]
   27626:	68d2      	ldr	r2, [r2, #12]
   27628:	602a      	str	r2, [r5, #0]
   2762a:	e7e6      	b.n	275fa <k_mem_slab_alloc+0x26>
   2762c:	20002718 	.word	0x20002718

00027630 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27630:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27632:	f04f 0320 	mov.w	r3, #32
   27636:	f3ef 8411 	mrs	r4, BASEPRI
   2763a:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   2763e:	4b3d      	ldr	r3, [pc, #244]	; (27734 <k_mem_slab_free+0x104>)
   27640:	681b      	ldr	r3, [r3, #0]
   27642:	2b00      	cmp	r3, #0
   27644:	d13a      	bne.n	276bc <k_mem_slab_free+0x8c>
	return list->head == list;
   27646:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27648:	4298      	cmp	r0, r3
   2764a:	d048      	beq.n	276de <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   2764c:	b14b      	cbz	r3, 27662 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2764e:	685a      	ldr	r2, [r3, #4]
   27650:	681d      	ldr	r5, [r3, #0]
   27652:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   27654:	681a      	ldr	r2, [r3, #0]
   27656:	685d      	ldr	r5, [r3, #4]
   27658:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2765a:	7a5a      	ldrb	r2, [r3, #9]
   2765c:	f022 0202 	bic.w	r2, r2, #2
   27660:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   27662:	2b00      	cmp	r3, #0
   27664:	d05c      	beq.n	27720 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   27666:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   27668:	2100      	movs	r1, #0
   2766a:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   2766c:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2766e:	6a19      	ldr	r1, [r3, #32]
   27670:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   27674:	d013      	beq.n	2769e <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27676:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   2767a:	482f      	ldr	r0, [pc, #188]	; (27738 <k_mem_slab_free+0x108>)
   2767c:	6900      	ldr	r0, [r0, #16]
   2767e:	4282      	cmp	r2, r0
   27680:	d004      	beq.n	2768c <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27682:	b102      	cbz	r2, 27686 <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   27684:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   27686:	6910      	ldr	r0, [r2, #16]
   27688:	4401      	add	r1, r0
   2768a:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   2768c:	695a      	ldr	r2, [r3, #20]
   2768e:	6919      	ldr	r1, [r3, #16]
   27690:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   27692:	691a      	ldr	r2, [r3, #16]
   27694:	6959      	ldr	r1, [r3, #20]
   27696:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   27698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2769c:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2769e:	7a5a      	ldrb	r2, [r3, #9]
   276a0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   276a4:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   276a6:	f012 0f1b 	tst.w	r2, #27
   276aa:	d11c      	bne.n	276e6 <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   276ac:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   276ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   276b2:	d016      	beq.n	276e2 <k_mem_slab_free+0xb2>
   276b4:	2200      	movs	r2, #0
   276b6:	e017      	b.n	276e8 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276b8:	2300      	movs	r3, #0
   276ba:	e003      	b.n	276c4 <k_mem_slab_free+0x94>
   276bc:	4605      	mov	r5, r0
	return list->head == list;
   276be:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276c0:	4298      	cmp	r0, r3
   276c2:	d0f9      	beq.n	276b8 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   276c4:	2b00      	cmp	r3, #0
   276c6:	d0c1      	beq.n	2764c <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   276c8:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   276ca:	f112 0f02 	cmn.w	r2, #2
   276ce:	d1bd      	bne.n	2764c <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   276d0:	686a      	ldr	r2, [r5, #4]
   276d2:	4293      	cmp	r3, r2
   276d4:	d001      	beq.n	276da <k_mem_slab_free+0xaa>
   276d6:	681b      	ldr	r3, [r3, #0]
   276d8:	e7f4      	b.n	276c4 <k_mem_slab_free+0x94>
   276da:	2300      	movs	r3, #0
   276dc:	e7f2      	b.n	276c4 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276de:	2300      	movs	r3, #0
   276e0:	e7b4      	b.n	2764c <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   276e2:	2201      	movs	r2, #1
   276e4:	e000      	b.n	276e8 <k_mem_slab_free+0xb8>
   276e6:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   276e8:	b94a      	cbnz	r2, 276fe <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   276ea:	4b13      	ldr	r3, [pc, #76]	; (27738 <k_mem_slab_free+0x108>)
   276ec:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   276ee:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   276f0:	2b7f      	cmp	r3, #127	; 0x7f
   276f2:	d908      	bls.n	27706 <k_mem_slab_free+0xd6>
   276f4:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   276f6:	b96b      	cbnz	r3, 27714 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   276f8:	f384 8811 	msr	BASEPRI, r4
   276fc:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   276fe:	4618      	mov	r0, r3
   27700:	f000 fd4a 	bl	28198 <_add_thread_to_ready_q>
   27704:	e7f1      	b.n	276ea <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   27706:	f000 fe6b 	bl	283e0 <__must_switch_threads>
   2770a:	4603      	mov	r3, r0
   2770c:	2800      	cmp	r0, #0
   2770e:	d0f2      	beq.n	276f6 <k_mem_slab_free+0xc6>
   27710:	2301      	movs	r3, #1
   27712:	e7f0      	b.n	276f6 <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   27714:	f000 fed2 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   27718:	4620      	mov	r0, r4
   2771a:	f7ff fa15 	bl	26b48 <__swap>
   2771e:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   27720:	680b      	ldr	r3, [r1, #0]
   27722:	6942      	ldr	r2, [r0, #20]
   27724:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   27726:	680b      	ldr	r3, [r1, #0]
   27728:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   2772a:	6983      	ldr	r3, [r0, #24]
   2772c:	3b01      	subs	r3, #1
   2772e:	6183      	str	r3, [r0, #24]
   27730:	e7e2      	b.n	276f8 <k_mem_slab_free+0xc8>
   27732:	bf00      	nop
   27734:	20002b00 	.word	0x20002b00
   27738:	20002718 	.word	0x20002718

0002773c <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   2773c:	4288      	cmp	r0, r1
   2773e:	da00      	bge.n	27742 <new_prio_for_inheritance+0x6>
   27740:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   27742:	2900      	cmp	r1, #0
   27744:	db01      	blt.n	2774a <new_prio_for_inheritance+0xe>
   27746:	4608      	mov	r0, r1
   27748:	4770      	bx	lr
   2774a:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   2774c:	4770      	bx	lr

0002774e <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   2774e:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   27750:	6884      	ldr	r4, [r0, #8]
   27752:	f994 300a 	ldrsb.w	r3, [r4, #10]
   27756:	428b      	cmp	r3, r1
   27758:	d00e      	beq.n	27778 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   2775a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2775c:	f013 0f1f 	tst.w	r3, #31
   27760:	d107      	bne.n	27772 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27762:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27768:	d001      	beq.n	2776e <adjust_owner_prio+0x20>
   2776a:	2300      	movs	r3, #0
   2776c:	e002      	b.n	27774 <adjust_owner_prio+0x26>
   2776e:	2301      	movs	r3, #1
   27770:	e000      	b.n	27774 <adjust_owner_prio+0x26>
   27772:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   27774:	b90b      	cbnz	r3, 2777a <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   27776:	72a1      	strb	r1, [r4, #10]
   27778:	bd38      	pop	{r3, r4, r5, pc}
   2777a:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   2777c:	4620      	mov	r0, r4
   2777e:	f000 fd2b 	bl	281d8 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   27782:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   27784:	4620      	mov	r0, r4
   27786:	f000 fd07 	bl	28198 <_add_thread_to_ready_q>
   2778a:	bd38      	pop	{r3, r4, r5, pc}

0002778c <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2778c:	b570      	push	{r4, r5, r6, lr}
   2778e:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   27790:	4b32      	ldr	r3, [pc, #200]	; (2785c <_impl_k_mutex_lock+0xd0>)
   27792:	689a      	ldr	r2, [r3, #8]
   27794:	7ad3      	ldrb	r3, [r2, #11]
   27796:	3b01      	subs	r3, #1
   27798:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   2779a:	68c3      	ldr	r3, [r0, #12]
   2779c:	b97b      	cbnz	r3, 277be <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   2779e:	2b00      	cmp	r3, #0
   277a0:	d133      	bne.n	2780a <_impl_k_mutex_lock+0x7e>
   277a2:	4a2e      	ldr	r2, [pc, #184]	; (2785c <_impl_k_mutex_lock+0xd0>)
   277a4:	6892      	ldr	r2, [r2, #8]
   277a6:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   277aa:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   277ac:	3301      	adds	r3, #1
   277ae:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   277b0:	4b2a      	ldr	r3, [pc, #168]	; (2785c <_impl_k_mutex_lock+0xd0>)
   277b2:	689b      	ldr	r3, [r3, #8]
   277b4:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   277b6:	f000 fea1 	bl	284fc <k_sched_unlock>

		return 0;
   277ba:	2000      	movs	r0, #0
   277bc:	bd70      	pop	{r4, r5, r6, pc}
   277be:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   277c0:	6881      	ldr	r1, [r0, #8]
   277c2:	4a26      	ldr	r2, [pc, #152]	; (2785c <_impl_k_mutex_lock+0xd0>)
   277c4:	6892      	ldr	r2, [r2, #8]
   277c6:	4291      	cmp	r1, r2
   277c8:	d0e9      	beq.n	2779e <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   277ca:	b305      	cbz	r5, 2780e <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   277cc:	f991 100a 	ldrsb.w	r1, [r1, #10]
   277d0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   277d4:	f7ff ffb2 	bl	2773c <new_prio_for_inheritance>
	__asm__ volatile(
   277d8:	f04f 0320 	mov.w	r3, #32
   277dc:	f3ef 8611 	mrs	r6, BASEPRI
   277e0:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   277e4:	68a3      	ldr	r3, [r4, #8]
   277e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
   277ea:	4298      	cmp	r0, r3
   277ec:	db14      	blt.n	27818 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   277ee:	4629      	mov	r1, r5
   277f0:	4620      	mov	r0, r4
   277f2:	f000 fde5 	bl	283c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   277f6:	f000 fe61 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   277fa:	4630      	mov	r0, r6
   277fc:	f7ff f9a4 	bl	26b48 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   27800:	b978      	cbnz	r0, 27822 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   27802:	f000 fe7b 	bl	284fc <k_sched_unlock>
		return 0;
   27806:	2000      	movs	r0, #0
   27808:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   2780a:	6922      	ldr	r2, [r4, #16]
   2780c:	e7cd      	b.n	277aa <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   2780e:	f000 fe75 	bl	284fc <k_sched_unlock>
		return -EBUSY;
   27812:	f06f 000f 	mvn.w	r0, #15
   27816:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   27818:	4601      	mov	r1, r0
   2781a:	4620      	mov	r0, r4
   2781c:	f7ff ff97 	bl	2774e <adjust_owner_prio>
   27820:	e7e5      	b.n	277ee <_impl_k_mutex_lock+0x62>
	return list->head == list;
   27822:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27824:	429c      	cmp	r4, r3
   27826:	d016      	beq.n	27856 <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   27828:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   2782a:	b123      	cbz	r3, 27836 <_impl_k_mutex_lock+0xaa>
   2782c:	f993 000a 	ldrsb.w	r0, [r3, #10]
   27830:	f7ff ff84 	bl	2773c <new_prio_for_inheritance>
   27834:	4601      	mov	r1, r0
   27836:	f04f 0320 	mov.w	r3, #32
   2783a:	f3ef 8511 	mrs	r5, BASEPRI
   2783e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   27842:	4620      	mov	r0, r4
   27844:	f7ff ff83 	bl	2774e <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27848:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   2784c:	f000 fe56 	bl	284fc <k_sched_unlock>

	return -EAGAIN;
   27850:	f06f 000a 	mvn.w	r0, #10
}
   27854:	bd70      	pop	{r4, r5, r6, pc}
   27856:	2300      	movs	r3, #0
   27858:	e7e6      	b.n	27828 <_impl_k_mutex_lock+0x9c>
   2785a:	bf00      	nop
   2785c:	20002718 	.word	0x20002718

00027860 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   27860:	b570      	push	{r4, r5, r6, lr}
   27862:	4b40      	ldr	r3, [pc, #256]	; (27964 <_impl_k_mutex_unlock+0x104>)
   27864:	689a      	ldr	r2, [r3, #8]
   27866:	7ad3      	ldrb	r3, [r2, #11]
   27868:	3b01      	subs	r3, #1
   2786a:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   2786c:	68c3      	ldr	r3, [r0, #12]
   2786e:	3b01      	subs	r3, #1
   27870:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   27872:	2b00      	cmp	r3, #0
   27874:	d143      	bne.n	278fe <_impl_k_mutex_unlock+0x9e>
   27876:	4605      	mov	r5, r0
	__asm__ volatile(
   27878:	f04f 0320 	mov.w	r3, #32
   2787c:	f3ef 8611 	mrs	r6, BASEPRI
   27880:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   27884:	6901      	ldr	r1, [r0, #16]
   27886:	f7ff ff62 	bl	2774e <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   2788a:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   2788c:	4b36      	ldr	r3, [pc, #216]	; (27968 <_impl_k_mutex_unlock+0x108>)
   2788e:	681b      	ldr	r3, [r3, #0]
   27890:	2b00      	cmp	r3, #0
   27892:	d139      	bne.n	27908 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   27894:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27896:	42a5      	cmp	r5, r4
   27898:	d046      	beq.n	27928 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   2789a:	b14c      	cbz	r4, 278b0 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   2789c:	6863      	ldr	r3, [r4, #4]
   2789e:	6822      	ldr	r2, [r4, #0]
   278a0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   278a2:	6823      	ldr	r3, [r4, #0]
   278a4:	6862      	ldr	r2, [r4, #4]
   278a6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   278a8:	7a63      	ldrb	r3, [r4, #9]
   278aa:	f023 0302 	bic.w	r3, r3, #2
   278ae:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   278b0:	2c00      	cmp	r4, #0
   278b2:	d051      	beq.n	27958 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   278b4:	6a22      	ldr	r2, [r4, #32]
   278b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   278ba:	d013      	beq.n	278e4 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   278bc:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   278c0:	4928      	ldr	r1, [pc, #160]	; (27964 <_impl_k_mutex_unlock+0x104>)
   278c2:	6909      	ldr	r1, [r1, #16]
   278c4:	428b      	cmp	r3, r1
   278c6:	d004      	beq.n	278d2 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   278c8:	b103      	cbz	r3, 278cc <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   278ca:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   278cc:	6919      	ldr	r1, [r3, #16]
   278ce:	440a      	add	r2, r1
   278d0:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   278d2:	6963      	ldr	r3, [r4, #20]
   278d4:	6922      	ldr	r2, [r4, #16]
   278d6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   278d8:	6923      	ldr	r3, [r4, #16]
   278da:	6962      	ldr	r2, [r4, #20]
   278dc:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   278de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   278e2:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   278e4:	7a63      	ldrb	r3, [r4, #9]
   278e6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   278ea:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   278ec:	f013 0f1b 	tst.w	r3, #27
   278f0:	d11e      	bne.n	27930 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   278f2:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   278f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   278f8:	d018      	beq.n	2792c <_impl_k_mutex_unlock+0xcc>
   278fa:	2300      	movs	r3, #0
   278fc:	e019      	b.n	27932 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   278fe:	f000 fdfd 	bl	284fc <k_sched_unlock>
		return;
   27902:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27904:	2400      	movs	r4, #0
   27906:	e002      	b.n	2790e <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   27908:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2790a:	42a5      	cmp	r5, r4
   2790c:	d0fa      	beq.n	27904 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2790e:	2c00      	cmp	r4, #0
   27910:	d0c3      	beq.n	2789a <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27912:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   27914:	f113 0f02 	cmn.w	r3, #2
   27918:	d1bf      	bne.n	2789a <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   2791a:	6853      	ldr	r3, [r2, #4]
   2791c:	429c      	cmp	r4, r3
   2791e:	d001      	beq.n	27924 <_impl_k_mutex_unlock+0xc4>
   27920:	6824      	ldr	r4, [r4, #0]
   27922:	e7f4      	b.n	2790e <_impl_k_mutex_unlock+0xae>
   27924:	2400      	movs	r4, #0
   27926:	e7f2      	b.n	2790e <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27928:	2400      	movs	r4, #0
   2792a:	e7b6      	b.n	2789a <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   2792c:	2301      	movs	r3, #1
   2792e:	e000      	b.n	27932 <_impl_k_mutex_unlock+0xd2>
   27930:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   27932:	b96b      	cbnz	r3, 27950 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27934:	f386 8811 	msr	BASEPRI, r6
   27938:	2300      	movs	r3, #0
   2793a:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   2793c:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   2793e:	68eb      	ldr	r3, [r5, #12]
   27940:	3301      	adds	r3, #1
   27942:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   27944:	f994 300a 	ldrsb.w	r3, [r4, #10]
   27948:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   2794a:	f000 fdd7 	bl	284fc <k_sched_unlock>
   2794e:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   27950:	4620      	mov	r0, r4
   27952:	f000 fc21 	bl	28198 <_add_thread_to_ready_q>
   27956:	e7ed      	b.n	27934 <_impl_k_mutex_unlock+0xd4>
   27958:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   2795c:	2300      	movs	r3, #0
   2795e:	60ab      	str	r3, [r5, #8]
   27960:	e7f3      	b.n	2794a <_impl_k_mutex_unlock+0xea>
   27962:	bf00      	nop
   27964:	20002718 	.word	0x20002718
   27968:	20002b00 	.word	0x20002b00

0002796c <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   2796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2796e:	4604      	mov	r4, r0
   27970:	460d      	mov	r5, r1
	*must_reschedule = 0;
   27972:	2300      	movs	r3, #0
   27974:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   27976:	6883      	ldr	r3, [r0, #8]
   27978:	2b00      	cmp	r3, #0
   2797a:	d042      	beq.n	27a02 <_signal_poll_event+0x96>
   2797c:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   2797e:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   27980:	7a43      	ldrb	r3, [r0, #9]
   27982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27986:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   27988:	f013 0f02 	tst.w	r3, #2
   2798c:	d039      	beq.n	27a02 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2798e:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   27990:	f113 0f02 	cmn.w	r3, #2
   27994:	d060      	beq.n	27a58 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   27996:	6843      	ldr	r3, [r0, #4]
   27998:	6802      	ldr	r2, [r0, #0]
   2799a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2799c:	6803      	ldr	r3, [r0, #0]
   2799e:	6842      	ldr	r2, [r0, #4]
   279a0:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   279a2:	7a43      	ldrb	r3, [r0, #9]
   279a4:	f023 0302 	bic.w	r3, r3, #2
   279a8:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   279aa:	6a02      	ldr	r2, [r0, #32]
   279ac:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   279b0:	d013      	beq.n	279da <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   279b2:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   279b6:	492a      	ldr	r1, [pc, #168]	; (27a60 <_signal_poll_event+0xf4>)
   279b8:	6909      	ldr	r1, [r1, #16]
   279ba:	428b      	cmp	r3, r1
   279bc:	d004      	beq.n	279c8 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   279be:	b103      	cbz	r3, 279c2 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   279c0:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   279c2:	6919      	ldr	r1, [r3, #16]
   279c4:	440a      	add	r2, r1
   279c6:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   279c8:	6943      	ldr	r3, [r0, #20]
   279ca:	6902      	ldr	r2, [r0, #16]
   279cc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   279ce:	6903      	ldr	r3, [r0, #16]
   279d0:	6942      	ldr	r2, [r0, #20]
   279d2:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   279d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   279d8:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   279da:	b965      	cbnz	r5, 279f6 <_signal_poll_event+0x8a>
   279dc:	f06f 0303 	mvn.w	r3, #3
   279e0:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   279e2:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   279e4:	f013 0f1f 	tst.w	r3, #31
   279e8:	d109      	bne.n	279fe <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   279ea:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   279ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   279f0:	d003      	beq.n	279fa <_signal_poll_event+0x8e>
   279f2:	2700      	movs	r7, #0
   279f4:	e004      	b.n	27a00 <_signal_poll_event+0x94>
   279f6:	2300      	movs	r3, #0
   279f8:	e7f2      	b.n	279e0 <_signal_poll_event+0x74>
   279fa:	2701      	movs	r7, #1
   279fc:	e000      	b.n	27a00 <_signal_poll_event+0x94>
   279fe:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   27a00:	b947      	cbnz	r7, 27a14 <_signal_poll_event+0xa8>
	event->poller = NULL;
   27a02:	2000      	movs	r0, #0
   27a04:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   27a06:	7b63      	ldrb	r3, [r4, #13]
   27a08:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   27a0c:	f365 1307 	bfi	r3, r5, #4, #4
   27a10:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   27a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   27a14:	f000 fbc0 	bl	28198 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   27a18:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   27a1c:	2b0d      	cmp	r3, #13
   27a1e:	d807      	bhi.n	27a30 <_signal_poll_event+0xc4>
   27a20:	b19b      	cbz	r3, 27a4a <_signal_poll_event+0xde>
   27a22:	4b10      	ldr	r3, [pc, #64]	; (27a64 <_signal_poll_event+0xf8>)
   27a24:	685b      	ldr	r3, [r3, #4]
   27a26:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27a2a:	d010      	beq.n	27a4e <_signal_poll_event+0xe2>
   27a2c:	2300      	movs	r3, #0
   27a2e:	e000      	b.n	27a32 <_signal_poll_event+0xc6>
   27a30:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   27a32:	b973      	cbnz	r3, 27a52 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   27a34:	4a0a      	ldr	r2, [pc, #40]	; (27a60 <_signal_poll_event+0xf4>)
   27a36:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27a38:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   27a3a:	2a7f      	cmp	r2, #127	; 0x7f
   27a3c:	d80a      	bhi.n	27a54 <_signal_poll_event+0xe8>
   27a3e:	f000 fccf 	bl	283e0 <__must_switch_threads>
   27a42:	4603      	mov	r3, r0
   27a44:	b130      	cbz	r0, 27a54 <_signal_poll_event+0xe8>
   27a46:	463b      	mov	r3, r7
   27a48:	e004      	b.n	27a54 <_signal_poll_event+0xe8>
   27a4a:	2300      	movs	r3, #0
   27a4c:	e7f1      	b.n	27a32 <_signal_poll_event+0xc6>
   27a4e:	463b      	mov	r3, r7
   27a50:	e7ef      	b.n	27a32 <_signal_poll_event+0xc6>
   27a52:	2300      	movs	r3, #0
   27a54:	6033      	str	r3, [r6, #0]
   27a56:	e7d4      	b.n	27a02 <_signal_poll_event+0x96>
		return -EAGAIN;
   27a58:	f06f 000a 	mvn.w	r0, #10
}
   27a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a5e:	bf00      	nop
   27a60:	20002718 	.word	0x20002718
   27a64:	e000ed00 	.word	0xe000ed00

00027a68 <k_poll_event_init>:
{
   27a68:	b430      	push	{r4, r5}
	event->poller = NULL;
   27a6a:	2500      	movs	r5, #0
   27a6c:	6085      	str	r5, [r0, #8]
	event->type = type;
   27a6e:	7b44      	ldrb	r4, [r0, #13]
   27a70:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   27a74:	f365 1407 	bfi	r4, r5, #4, #4
   27a78:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   27a7a:	7b81      	ldrb	r1, [r0, #14]
   27a7c:	f362 0100 	bfi	r1, r2, #0, #1
   27a80:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   27a82:	89c2      	ldrh	r2, [r0, #14]
   27a84:	f365 024f 	bfi	r2, r5, #1, #15
   27a88:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   27a8a:	6103      	str	r3, [r0, #16]
}
   27a8c:	bc30      	pop	{r4, r5}
   27a8e:	4770      	bx	lr

00027a90 <k_poll>:
{
   27a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a94:	b085      	sub	sp, #20
   27a96:	4691      	mov	r9, r2
	__asm__ volatile(
   27a98:	f04f 0320 	mov.w	r3, #32
   27a9c:	f3ef 8511 	mrs	r5, BASEPRI
   27aa0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   27aa4:	4ab7      	ldr	r2, [pc, #732]	; (27d84 <k_poll+0x2f4>)
   27aa6:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   27aa8:	7a63      	ldrb	r3, [r4, #9]
   27aaa:	f043 0320 	orr.w	r3, r3, #32
   27aae:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27ab0:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   27ab4:	6893      	ldr	r3, [r2, #8]
   27ab6:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   27ab8:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   27aba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   27abe:	e01e      	b.n	27afe <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   27ac0:	6917      	ldr	r7, [r2, #16]
   27ac2:	68bf      	ldr	r7, [r7, #8]
   27ac4:	b14f      	cbz	r7, 27ada <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27ac6:	f04f 0e02 	mov.w	lr, #2
			return 1;
   27aca:	2701      	movs	r7, #1
   27acc:	e005      	b.n	27ada <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   27ace:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   27ad0:	683f      	ldr	r7, [r7, #0]
   27ad2:	b117      	cbz	r7, 27ada <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27ad4:	f04f 0e04 	mov.w	lr, #4
			return 1;
   27ad8:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   27ada:	b387      	cbz	r7, 27b3e <k_poll+0xae>
	event->poller = NULL;
   27adc:	2500      	movs	r5, #0
   27ade:	6095      	str	r5, [r2, #8]
	event->state |= state;
   27ae0:	7b55      	ldrb	r5, [r2, #13]
   27ae2:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   27ae6:	f367 1507 	bfi	r5, r7, #4, #4
   27aea:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   27aec:	4aa5      	ldr	r2, [pc, #660]	; (27d84 <k_poll+0x2f4>)
   27aee:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   27af0:	7a6a      	ldrb	r2, [r5, #9]
   27af2:	f022 0220 	bic.w	r2, r2, #32
   27af6:	726a      	strb	r2, [r5, #9]
   27af8:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   27afc:	3301      	adds	r3, #1
   27afe:	428b      	cmp	r3, r1
   27b00:	f280 8191 	bge.w	27e26 <k_poll+0x396>
	__asm__ volatile(
   27b04:	f04f 0220 	mov.w	r2, #32
   27b08:	f3ef 8611 	mrs	r6, BASEPRI
   27b0c:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   27b10:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27b14:	0095      	lsls	r5, r2, #2
   27b16:	1942      	adds	r2, r0, r5
	switch (event->type) {
   27b18:	7b57      	ldrb	r7, [r2, #13]
   27b1a:	f007 070f 	and.w	r7, r7, #15
   27b1e:	2f02      	cmp	r7, #2
   27b20:	d0ce      	beq.n	27ac0 <k_poll+0x30>
   27b22:	2f04      	cmp	r7, #4
   27b24:	d0d3      	beq.n	27ace <k_poll+0x3e>
   27b26:	2f01      	cmp	r7, #1
   27b28:	d001      	beq.n	27b2e <k_poll+0x9e>
		return 0;
   27b2a:	2700      	movs	r7, #0
   27b2c:	e7d5      	b.n	27ada <k_poll+0x4a>
		if (event->signal->signaled) {
   27b2e:	6917      	ldr	r7, [r2, #16]
   27b30:	68bf      	ldr	r7, [r7, #8]
   27b32:	2f00      	cmp	r7, #0
   27b34:	d0d1      	beq.n	27ada <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   27b36:	f04f 0e01 	mov.w	lr, #1
			return 1;
   27b3a:	4677      	mov	r7, lr
   27b3c:	e7cd      	b.n	27ada <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27b3e:	f1b9 0f00 	cmp.w	r9, #0
   27b42:	d0d9      	beq.n	27af8 <k_poll+0x68>
	return _is_thread_polling(_current);
   27b44:	4f8f      	ldr	r7, [pc, #572]	; (27d84 <k_poll+0x2f4>)
   27b46:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   27b48:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27b4a:	f017 0f20 	tst.w	r7, #32
   27b4e:	d0d3      	beq.n	27af8 <k_poll+0x68>
	switch (event->type) {
   27b50:	7b57      	ldrb	r7, [r2, #13]
   27b52:	f007 070f 	and.w	r7, r7, #15
   27b56:	2f02      	cmp	r7, #2
   27b58:	d008      	beq.n	27b6c <k_poll+0xdc>
   27b5a:	2f04      	cmp	r7, #4
   27b5c:	d07a      	beq.n	27c54 <k_poll+0x1c4>
   27b5e:	2f01      	cmp	r7, #1
   27b60:	f000 80ec 	beq.w	27d3c <k_poll+0x2ac>
	event->poller = poller;
   27b64:	ad03      	add	r5, sp, #12
   27b66:	6095      	str	r5, [r2, #8]
				++last_registered;
   27b68:	3401      	adds	r4, #1
   27b6a:	e7c5      	b.n	27af8 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   27b6c:	6917      	ldr	r7, [r2, #16]
   27b6e:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   27b72:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27b76:	45c4      	cmp	ip, r8
   27b78:	d010      	beq.n	27b9c <k_poll+0x10c>
   27b7a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27b7e:	b17f      	cbz	r7, 27ba0 <k_poll+0x110>
   27b80:	68bf      	ldr	r7, [r7, #8]
   27b82:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   27b84:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27b88:	9f03      	ldr	r7, [sp, #12]
   27b8a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27b8e:	45da      	cmp	sl, fp
   27b90:	db06      	blt.n	27ba0 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b92:	45c4      	cmp	ip, r8
   27b94:	d12e      	bne.n	27bf4 <k_poll+0x164>
   27b96:	f04f 0800 	mov.w	r8, #0
   27b9a:	e02b      	b.n	27bf4 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27b9c:	2700      	movs	r7, #0
   27b9e:	e7ee      	b.n	27b7e <k_poll+0xee>
	node->next = list;
   27ba0:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27ba4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ba8:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27baa:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27bae:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27bb0:	f8cc 2004 	str.w	r2, [ip, #4]
   27bb4:	e7d6      	b.n	27b64 <k_poll+0xd4>
	if (!insert_point) {
   27bb6:	f1b8 0f00 	cmp.w	r8, #0
   27bba:	d00a      	beq.n	27bd2 <k_poll+0x142>
		node->prev = insert_point->prev;
   27bbc:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27bc0:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27bc2:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27bc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27bca:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27bcc:	f8c8 2004 	str.w	r2, [r8, #4]
   27bd0:	e7c8      	b.n	27b64 <k_poll+0xd4>
	node->next = list;
   27bd2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27bd6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27bda:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27bdc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27be0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27be2:	f8cc 2004 	str.w	r2, [ip, #4]
   27be6:	e7bd      	b.n	27b64 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27be8:	4647      	mov	r7, r8
   27bea:	e017      	b.n	27c1c <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   27bec:	2700      	movs	r7, #0
   27bee:	e015      	b.n	27c1c <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27bf0:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27bf4:	f1b8 0f00 	cmp.w	r8, #0
   27bf8:	d021      	beq.n	27c3e <k_poll+0x1ae>
					       pending->poller->thread)) {
   27bfa:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27bfe:	683f      	ldr	r7, [r7, #0]
   27c00:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27c04:	45bb      	cmp	fp, r7
   27c06:	dbd6      	blt.n	27bb6 <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27c08:	46c2      	mov	sl, r8
   27c0a:	f1b8 0f00 	cmp.w	r8, #0
   27c0e:	d0eb      	beq.n	27be8 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   27c10:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27c14:	45b8      	cmp	r8, r7
   27c16:	d0e9      	beq.n	27bec <k_poll+0x15c>
   27c18:	f8d8 7000 	ldr.w	r7, [r8]
   27c1c:	b167      	cbz	r7, 27c38 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c1e:	f1ba 0f00 	cmp.w	sl, #0
   27c22:	d0e5      	beq.n	27bf0 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   27c24:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27c28:	45ba      	cmp	sl, r7
   27c2a:	d002      	beq.n	27c32 <k_poll+0x1a2>
   27c2c:	f8d8 8000 	ldr.w	r8, [r8]
   27c30:	e7e0      	b.n	27bf4 <k_poll+0x164>
   27c32:	f04f 0800 	mov.w	r8, #0
   27c36:	e7dd      	b.n	27bf4 <k_poll+0x164>
   27c38:	f04f 0800 	mov.w	r8, #0
   27c3c:	e7da      	b.n	27bf4 <k_poll+0x164>
	node->next = list;
   27c3e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c42:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c46:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c48:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c4c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c4e:	f8cc 2004 	str.w	r2, [ip, #4]
   27c52:	e787      	b.n	27b64 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   27c54:	6917      	ldr	r7, [r2, #16]
   27c56:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   27c5a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27c5e:	45c4      	cmp	ip, r8
   27c60:	d010      	beq.n	27c84 <k_poll+0x1f4>
   27c62:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27c66:	b17f      	cbz	r7, 27c88 <k_poll+0x1f8>
   27c68:	68bf      	ldr	r7, [r7, #8]
   27c6a:	683f      	ldr	r7, [r7, #0]
   27c6c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27c70:	9f03      	ldr	r7, [sp, #12]
   27c72:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27c76:	45da      	cmp	sl, fp
   27c78:	db06      	blt.n	27c88 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c7a:	45c4      	cmp	ip, r8
   27c7c:	d12e      	bne.n	27cdc <k_poll+0x24c>
   27c7e:	f04f 0800 	mov.w	r8, #0
   27c82:	e02b      	b.n	27cdc <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27c84:	2700      	movs	r7, #0
   27c86:	e7ee      	b.n	27c66 <k_poll+0x1d6>
	node->next = list;
   27c88:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c90:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c92:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c96:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c98:	f8cc 2004 	str.w	r2, [ip, #4]
   27c9c:	e762      	b.n	27b64 <k_poll+0xd4>
	if (!insert_point) {
   27c9e:	f1b8 0f00 	cmp.w	r8, #0
   27ca2:	d00a      	beq.n	27cba <k_poll+0x22a>
		node->prev = insert_point->prev;
   27ca4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27ca8:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27caa:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27cae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27cb2:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27cb4:	f8c8 2004 	str.w	r2, [r8, #4]
   27cb8:	e754      	b.n	27b64 <k_poll+0xd4>
	node->next = list;
   27cba:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27cbe:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cc2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27cc4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cc8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27cca:	f8cc 2004 	str.w	r2, [ip, #4]
   27cce:	e749      	b.n	27b64 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27cd0:	4647      	mov	r7, r8
   27cd2:	e017      	b.n	27d04 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   27cd4:	2700      	movs	r7, #0
   27cd6:	e015      	b.n	27d04 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27cd8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27cdc:	f1b8 0f00 	cmp.w	r8, #0
   27ce0:	d021      	beq.n	27d26 <k_poll+0x296>
					       pending->poller->thread)) {
   27ce2:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27ce6:	683f      	ldr	r7, [r7, #0]
   27ce8:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27cec:	45bb      	cmp	fp, r7
   27cee:	dbd6      	blt.n	27c9e <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27cf0:	46c2      	mov	sl, r8
   27cf2:	f1b8 0f00 	cmp.w	r8, #0
   27cf6:	d0eb      	beq.n	27cd0 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   27cf8:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27cfc:	45b8      	cmp	r8, r7
   27cfe:	d0e9      	beq.n	27cd4 <k_poll+0x244>
   27d00:	f8d8 7000 	ldr.w	r7, [r8]
   27d04:	b167      	cbz	r7, 27d20 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d06:	f1ba 0f00 	cmp.w	sl, #0
   27d0a:	d0e5      	beq.n	27cd8 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   27d0c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27d10:	45ba      	cmp	sl, r7
   27d12:	d002      	beq.n	27d1a <k_poll+0x28a>
   27d14:	f8d8 8000 	ldr.w	r8, [r8]
   27d18:	e7e0      	b.n	27cdc <k_poll+0x24c>
   27d1a:	f04f 0800 	mov.w	r8, #0
   27d1e:	e7dd      	b.n	27cdc <k_poll+0x24c>
   27d20:	f04f 0800 	mov.w	r8, #0
   27d24:	e7da      	b.n	27cdc <k_poll+0x24c>
	node->next = list;
   27d26:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d2a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d2e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d30:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d34:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d36:	f8cc 2004 	str.w	r2, [ip, #4]
   27d3a:	e713      	b.n	27b64 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   27d3c:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   27d40:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27d44:	45c4      	cmp	ip, r8
   27d46:	d010      	beq.n	27d6a <k_poll+0x2da>
   27d48:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27d4c:	b17f      	cbz	r7, 27d6e <k_poll+0x2de>
   27d4e:	68bf      	ldr	r7, [r7, #8]
   27d50:	683f      	ldr	r7, [r7, #0]
   27d52:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27d56:	9f03      	ldr	r7, [sp, #12]
   27d58:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27d5c:	45da      	cmp	sl, fp
   27d5e:	db06      	blt.n	27d6e <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d60:	45c4      	cmp	ip, r8
   27d62:	d130      	bne.n	27dc6 <k_poll+0x336>
   27d64:	f04f 0800 	mov.w	r8, #0
   27d68:	e02d      	b.n	27dc6 <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27d6a:	2700      	movs	r7, #0
   27d6c:	e7ee      	b.n	27d4c <k_poll+0x2bc>
	node->next = list;
   27d6e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d72:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d76:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d78:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d7c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d7e:	f8cc 2004 	str.w	r2, [ip, #4]
   27d82:	e6ef      	b.n	27b64 <k_poll+0xd4>
   27d84:	20002718 	.word	0x20002718
	if (!insert_point) {
   27d88:	f1b8 0f00 	cmp.w	r8, #0
   27d8c:	d00a      	beq.n	27da4 <k_poll+0x314>
		node->prev = insert_point->prev;
   27d8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27d92:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27d94:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27d98:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27d9c:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27d9e:	f8c8 2004 	str.w	r2, [r8, #4]
   27da2:	e6df      	b.n	27b64 <k_poll+0xd4>
	node->next = list;
   27da4:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27da8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27dac:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27dae:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27db2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27db4:	f8cc 2004 	str.w	r2, [ip, #4]
   27db8:	e6d4      	b.n	27b64 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27dba:	4647      	mov	r7, r8
   27dbc:	e017      	b.n	27dee <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   27dbe:	2700      	movs	r7, #0
   27dc0:	e015      	b.n	27dee <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27dc2:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27dc6:	f1b8 0f00 	cmp.w	r8, #0
   27dca:	d021      	beq.n	27e10 <k_poll+0x380>
					       pending->poller->thread)) {
   27dcc:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27dd0:	683f      	ldr	r7, [r7, #0]
   27dd2:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27dd6:	45bb      	cmp	fp, r7
   27dd8:	dbd6      	blt.n	27d88 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27dda:	46c2      	mov	sl, r8
   27ddc:	f1b8 0f00 	cmp.w	r8, #0
   27de0:	d0eb      	beq.n	27dba <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   27de2:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27de6:	45b8      	cmp	r8, r7
   27de8:	d0e9      	beq.n	27dbe <k_poll+0x32e>
   27dea:	f8d8 7000 	ldr.w	r7, [r8]
   27dee:	b167      	cbz	r7, 27e0a <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27df0:	f1ba 0f00 	cmp.w	sl, #0
   27df4:	d0e5      	beq.n	27dc2 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   27df6:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27dfa:	45ba      	cmp	sl, r7
   27dfc:	d002      	beq.n	27e04 <k_poll+0x374>
   27dfe:	f8d8 8000 	ldr.w	r8, [r8]
   27e02:	e7e0      	b.n	27dc6 <k_poll+0x336>
   27e04:	f04f 0800 	mov.w	r8, #0
   27e08:	e7dd      	b.n	27dc6 <k_poll+0x336>
   27e0a:	f04f 0800 	mov.w	r8, #0
   27e0e:	e7da      	b.n	27dc6 <k_poll+0x336>
	node->next = list;
   27e10:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27e14:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27e18:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27e1a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27e1e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27e20:	f8cc 2004 	str.w	r2, [ip, #4]
   27e24:	e69e      	b.n	27b64 <k_poll+0xd4>
   27e26:	f04f 0320 	mov.w	r3, #32
   27e2a:	f3ef 8511 	mrs	r5, BASEPRI
   27e2e:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   27e32:	4b46      	ldr	r3, [pc, #280]	; (27f4c <k_poll+0x4bc>)
   27e34:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   27e36:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   27e38:	f013 0f20 	tst.w	r3, #32
   27e3c:	d047      	beq.n	27ece <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   27e3e:	f023 0320 	bic.w	r3, r3, #32
   27e42:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   27e44:	f1b9 0f00 	cmp.w	r9, #0
   27e48:	d049      	beq.n	27ede <k_poll+0x44e>
   27e4a:	4649      	mov	r1, r9
   27e4c:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   27e4e:	a801      	add	r0, sp, #4
   27e50:	9001      	str	r0, [sp, #4]
   27e52:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   27e54:	f000 fab4 	bl	283c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   27e58:	f000 fb30 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   27e5c:	4628      	mov	r0, r5
   27e5e:	f7fe fe73 	bl	26b48 <__swap>
   27e62:	f04f 0320 	mov.w	r3, #32
   27e66:	f3ef 8e11 	mrs	lr, BASEPRI
   27e6a:	f383 8811 	msr	BASEPRI, r3
   27e6e:	4675      	mov	r5, lr
   27e70:	e049      	b.n	27f06 <k_poll+0x476>
	node->prev->next = node->next;
   27e72:	6853      	ldr	r3, [r2, #4]
   27e74:	5847      	ldr	r7, [r0, r1]
   27e76:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e78:	5843      	ldr	r3, [r0, r1]
   27e7a:	6852      	ldr	r2, [r2, #4]
   27e7c:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27e7e:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   27e82:	f04f 0320 	mov.w	r3, #32
   27e86:	f3ef 8611 	mrs	r6, BASEPRI
   27e8a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27e8e:	3c01      	subs	r4, #1
   27e90:	2c00      	cmp	r4, #0
   27e92:	db1e      	blt.n	27ed2 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   27e94:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27e98:	0099      	lsls	r1, r3, #2
   27e9a:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   27e9c:	2300      	movs	r3, #0
   27e9e:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27ea0:	7b53      	ldrb	r3, [r2, #13]
   27ea2:	f003 030f 	and.w	r3, r3, #15
   27ea6:	2b02      	cmp	r3, #2
   27ea8:	d0e3      	beq.n	27e72 <k_poll+0x3e2>
   27eaa:	2b04      	cmp	r3, #4
   27eac:	d008      	beq.n	27ec0 <k_poll+0x430>
   27eae:	2b01      	cmp	r3, #1
   27eb0:	d1e5      	bne.n	27e7e <k_poll+0x3ee>
	node->prev->next = node->next;
   27eb2:	6853      	ldr	r3, [r2, #4]
   27eb4:	5847      	ldr	r7, [r0, r1]
   27eb6:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27eb8:	5843      	ldr	r3, [r0, r1]
   27eba:	6852      	ldr	r2, [r2, #4]
   27ebc:	605a      	str	r2, [r3, #4]
   27ebe:	e7de      	b.n	27e7e <k_poll+0x3ee>
	node->prev->next = node->next;
   27ec0:	6853      	ldr	r3, [r2, #4]
   27ec2:	5847      	ldr	r7, [r0, r1]
   27ec4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27ec6:	5843      	ldr	r3, [r0, r1]
   27ec8:	6852      	ldr	r2, [r2, #4]
   27eca:	605a      	str	r2, [r3, #4]
   27ecc:	e7d7      	b.n	27e7e <k_poll+0x3ee>
   27ece:	462e      	mov	r6, r5
   27ed0:	e7de      	b.n	27e90 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27ed2:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27ed6:	2000      	movs	r0, #0
}
   27ed8:	b005      	add	sp, #20
   27eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ede:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   27ee2:	f06f 000a 	mvn.w	r0, #10
   27ee6:	e7f7      	b.n	27ed8 <k_poll+0x448>
	node->prev->next = node->next;
   27ee8:	6853      	ldr	r3, [r2, #4]
   27eea:	5877      	ldr	r7, [r6, r1]
   27eec:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27eee:	5873      	ldr	r3, [r6, r1]
   27ef0:	6852      	ldr	r2, [r2, #4]
   27ef2:	605a      	str	r2, [r3, #4]
   27ef4:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   27ef8:	f04f 0320 	mov.w	r3, #32
   27efc:	f3ef 8511 	mrs	r5, BASEPRI
   27f00:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27f04:	3c01      	subs	r4, #1
   27f06:	2c00      	cmp	r4, #0
   27f08:	db1c      	blt.n	27f44 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   27f0a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27f0e:	0099      	lsls	r1, r3, #2
   27f10:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   27f12:	2300      	movs	r3, #0
   27f14:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27f16:	7b53      	ldrb	r3, [r2, #13]
   27f18:	f003 030f 	and.w	r3, r3, #15
   27f1c:	2b02      	cmp	r3, #2
   27f1e:	d0e3      	beq.n	27ee8 <k_poll+0x458>
   27f20:	2b04      	cmp	r3, #4
   27f22:	d008      	beq.n	27f36 <k_poll+0x4a6>
   27f24:	2b01      	cmp	r3, #1
   27f26:	d1e5      	bne.n	27ef4 <k_poll+0x464>
	node->prev->next = node->next;
   27f28:	6853      	ldr	r3, [r2, #4]
   27f2a:	5877      	ldr	r7, [r6, r1]
   27f2c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27f2e:	5873      	ldr	r3, [r6, r1]
   27f30:	6852      	ldr	r2, [r2, #4]
   27f32:	605a      	str	r2, [r3, #4]
   27f34:	e7de      	b.n	27ef4 <k_poll+0x464>
	node->prev->next = node->next;
   27f36:	6853      	ldr	r3, [r2, #4]
   27f38:	5877      	ldr	r7, [r6, r1]
   27f3a:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27f3c:	5873      	ldr	r3, [r6, r1]
   27f3e:	6852      	ldr	r2, [r2, #4]
   27f40:	605a      	str	r2, [r3, #4]
   27f42:	e7d7      	b.n	27ef4 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27f44:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   27f48:	e7c6      	b.n	27ed8 <k_poll+0x448>
   27f4a:	bf00      	nop
   27f4c:	20002718 	.word	0x20002718

00027f50 <_handle_obj_poll_events>:
	return list->head == list;
   27f50:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   27f52:	4298      	cmp	r0, r3
   27f54:	d010      	beq.n	27f78 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   27f56:	685a      	ldr	r2, [r3, #4]
   27f58:	6818      	ldr	r0, [r3, #0]
   27f5a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   27f5c:	681a      	ldr	r2, [r3, #0]
   27f5e:	6858      	ldr	r0, [r3, #4]
   27f60:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   27f62:	b15b      	cbz	r3, 27f7c <_handle_obj_poll_events+0x2c>
{
   27f64:	b500      	push	{lr}
   27f66:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   27f68:	aa01      	add	r2, sp, #4
   27f6a:	4618      	mov	r0, r3
   27f6c:	f7ff fcfe 	bl	2796c <_signal_poll_event>
	return must_reschedule;
   27f70:	9801      	ldr	r0, [sp, #4]
}
   27f72:	b003      	add	sp, #12
   27f74:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   27f78:	2300      	movs	r3, #0
   27f7a:	e7f2      	b.n	27f62 <_handle_obj_poll_events+0x12>
		return 0;
   27f7c:	2000      	movs	r0, #0
   27f7e:	4770      	bx	lr

00027f80 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   27f80:	b530      	push	{r4, r5, lr}
   27f82:	b083      	sub	sp, #12
	__asm__ volatile(
   27f84:	f04f 0320 	mov.w	r3, #32
   27f88:	f3ef 8511 	mrs	r5, BASEPRI
   27f8c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   27f90:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   27f92:	2301      	movs	r3, #1
   27f94:	6083      	str	r3, [r0, #8]
	return list->head == list;
   27f96:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   27f98:	4298      	cmp	r0, r3
   27f9a:	d013      	beq.n	27fc4 <k_poll_signal+0x44>
	node->prev->next = node->next;
   27f9c:	685a      	ldr	r2, [r3, #4]
   27f9e:	6819      	ldr	r1, [r3, #0]
   27fa0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   27fa2:	681a      	ldr	r2, [r3, #0]
   27fa4:	6859      	ldr	r1, [r3, #4]
   27fa6:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   27fa8:	b173      	cbz	r3, 27fc8 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   27faa:	aa01      	add	r2, sp, #4
   27fac:	2101      	movs	r1, #1
   27fae:	4618      	mov	r0, r3
   27fb0:	f7ff fcdc 	bl	2796c <_signal_poll_event>
   27fb4:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   27fb6:	9b01      	ldr	r3, [sp, #4]
   27fb8:	b953      	cbnz	r3, 27fd0 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27fba:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   27fbe:	4620      	mov	r0, r4
   27fc0:	b003      	add	sp, #12
   27fc2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   27fc4:	2300      	movs	r3, #0
   27fc6:	e7ef      	b.n	27fa8 <k_poll_signal+0x28>
   27fc8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27fcc:	2400      	movs	r4, #0
   27fce:	e7f6      	b.n	27fbe <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   27fd0:	f000 fa74 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   27fd4:	4628      	mov	r0, r5
   27fd6:	f7fe fdb7 	bl	26b48 <__swap>
   27fda:	e7f0      	b.n	27fbe <k_poll_signal+0x3e>

00027fdc <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   27fdc:	b530      	push	{r4, r5, lr}
   27fde:	b087      	sub	sp, #28
   27fe0:	4604      	mov	r4, r0
   27fe2:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   27fe4:	4603      	mov	r3, r0
   27fe6:	2200      	movs	r2, #0
   27fe8:	2104      	movs	r1, #4
   27fea:	eb0d 0001 	add.w	r0, sp, r1
   27fee:	f7ff fd3b 	bl	27a68 <k_poll_event_init>
   27ff2:	e005      	b.n	28000 <k_queue_poll+0x24>
   27ff4:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   27ff8:	b9f8      	cbnz	r0, 2803a <k_queue_poll+0x5e>
   27ffa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   27ffe:	d11c      	bne.n	2803a <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28000:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28004:	f36f 1307 	bfc	r3, #4, #4
   28008:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   2800c:	462a      	mov	r2, r5
   2800e:	2101      	movs	r1, #1
   28010:	a801      	add	r0, sp, #4
   28012:	f7ff fd3d 	bl	27a90 <k_poll>
		if (err) {
   28016:	b978      	cbnz	r0, 28038 <k_queue_poll+0x5c>
	__asm__ volatile(
   28018:	f04f 0220 	mov.w	r2, #32
   2801c:	f3ef 8311 	mrs	r3, BASEPRI
   28020:	f382 8811 	msr	BASEPRI, r2
   28024:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28026:	2800      	cmp	r0, #0
   28028:	d0e4      	beq.n	27ff4 <k_queue_poll+0x18>
	list->head = node->next;
   2802a:	6802      	ldr	r2, [r0, #0]
   2802c:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   2802e:	6861      	ldr	r1, [r4, #4]
   28030:	4288      	cmp	r0, r1
   28032:	d1df      	bne.n	27ff4 <k_queue_poll+0x18>
		list->tail = list->head;
   28034:	6062      	str	r2, [r4, #4]
   28036:	e7dd      	b.n	27ff4 <k_queue_poll+0x18>
			return NULL;
   28038:	2000      	movs	r0, #0

	return val;
}
   2803a:	b007      	add	sp, #28
   2803c:	bd30      	pop	{r4, r5, pc}

0002803e <k_queue_init>:
	list->head = NULL;
   2803e:	2300      	movs	r3, #0
   28040:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28042:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28044:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28048:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2804a:	60c3      	str	r3, [r0, #12]
   2804c:	4770      	bx	lr

0002804e <k_queue_insert>:
{
   2804e:	b510      	push	{r4, lr}
   28050:	f04f 0320 	mov.w	r3, #32
   28054:	f3ef 8411 	mrs	r4, BASEPRI
   28058:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   2805c:	b159      	cbz	r1, 28076 <k_queue_insert+0x28>
	} else if (!prev->next) {
   2805e:	680b      	ldr	r3, [r1, #0]
   28060:	b18b      	cbz	r3, 28086 <k_queue_insert+0x38>
		node->next = prev->next;
   28062:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28064:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28066:	2104      	movs	r1, #4
   28068:	3008      	adds	r0, #8
   2806a:	f7ff ff71 	bl	27f50 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2806e:	b998      	cbnz	r0, 28098 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28070:	f384 8811 	msr	BASEPRI, r4
   28074:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28076:	6803      	ldr	r3, [r0, #0]
   28078:	6013      	str	r3, [r2, #0]
	list->head = node;
   2807a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   2807c:	6843      	ldr	r3, [r0, #4]
   2807e:	2b00      	cmp	r3, #0
   28080:	d1f1      	bne.n	28066 <k_queue_insert+0x18>
		list->tail = list->head;
   28082:	6042      	str	r2, [r0, #4]
   28084:	e7ef      	b.n	28066 <k_queue_insert+0x18>
	node->next = NULL;
   28086:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28088:	6843      	ldr	r3, [r0, #4]
   2808a:	b113      	cbz	r3, 28092 <k_queue_insert+0x44>
		list->tail->next = node;
   2808c:	601a      	str	r2, [r3, #0]
		list->tail = node;
   2808e:	6042      	str	r2, [r0, #4]
   28090:	e7e9      	b.n	28066 <k_queue_insert+0x18>
		list->tail = node;
   28092:	6042      	str	r2, [r0, #4]
		list->head = node;
   28094:	6002      	str	r2, [r0, #0]
   28096:	e7e6      	b.n	28066 <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28098:	f000 fa10 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   2809c:	4620      	mov	r0, r4
   2809e:	f7fe fd53 	bl	26b48 <__swap>
   280a2:	bd10      	pop	{r4, pc}

000280a4 <k_queue_append>:
{
   280a4:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   280a6:	460a      	mov	r2, r1
   280a8:	6841      	ldr	r1, [r0, #4]
   280aa:	f7ff ffd0 	bl	2804e <k_queue_insert>
   280ae:	bd08      	pop	{r3, pc}

000280b0 <k_queue_prepend>:
{
   280b0:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   280b2:	460a      	mov	r2, r1
   280b4:	2100      	movs	r1, #0
   280b6:	f7ff ffca 	bl	2804e <k_queue_insert>
   280ba:	bd08      	pop	{r3, pc}

000280bc <k_queue_append_list>:
{
   280bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   280be:	f04f 0320 	mov.w	r3, #32
   280c2:	f3ef 8411 	mrs	r4, BASEPRI
   280c6:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   280ca:	6843      	ldr	r3, [r0, #4]
   280cc:	b14b      	cbz	r3, 280e2 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   280ce:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   280d0:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   280d2:	2104      	movs	r1, #4
   280d4:	3008      	adds	r0, #8
   280d6:	f7ff ff3b 	bl	27f50 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   280da:	b928      	cbnz	r0, 280e8 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   280dc:	f384 8811 	msr	BASEPRI, r4
   280e0:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   280e2:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   280e4:	6042      	str	r2, [r0, #4]
   280e6:	e7f4      	b.n	280d2 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   280e8:	f000 f9e8 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   280ec:	4620      	mov	r0, r4
   280ee:	f7fe fd2b 	bl	26b48 <__swap>
   280f2:	bd10      	pop	{r4, pc}

000280f4 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   280f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   280f6:	f04f 0320 	mov.w	r3, #32
   280fa:	f3ef 8211 	mrs	r2, BASEPRI
   280fe:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28102:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28104:	b153      	cbz	r3, 2811c <k_queue_get+0x28>
	list->head = node->next;
   28106:	6819      	ldr	r1, [r3, #0]
   28108:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   2810a:	6844      	ldr	r4, [r0, #4]
   2810c:	42a3      	cmp	r3, r4
   2810e:	d003      	beq.n	28118 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28110:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28114:	4618      	mov	r0, r3
   28116:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28118:	6041      	str	r1, [r0, #4]
   2811a:	e7f9      	b.n	28110 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   2811c:	b121      	cbz	r1, 28128 <k_queue_get+0x34>
   2811e:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28122:	f7ff ff5b 	bl	27fdc <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28126:	bd10      	pop	{r4, pc}
   28128:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   2812c:	2000      	movs	r0, #0
   2812e:	bd10      	pop	{r4, pc}

00028130 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28130:	3010      	adds	r0, #16
   28132:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28134:	f000 001f 	and.w	r0, r0, #31
   28138:	2201      	movs	r2, #1
   2813a:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   2813e:	1d9a      	adds	r2, r3, #6
   28140:	4b03      	ldr	r3, [pc, #12]	; (28150 <_set_ready_q_prio_bit+0x20>)
   28142:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28146:	685a      	ldr	r2, [r3, #4]
   28148:	4302      	orrs	r2, r0
   2814a:	605a      	str	r2, [r3, #4]
   2814c:	4770      	bx	lr
   2814e:	bf00      	nop
   28150:	20002718 	.word	0x20002718

00028154 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28154:	3010      	adds	r0, #16
   28156:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28158:	f000 001f 	and.w	r0, r0, #31
   2815c:	2201      	movs	r2, #1
   2815e:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28162:	1d9a      	adds	r2, r3, #6
   28164:	4b03      	ldr	r3, [pc, #12]	; (28174 <_clear_ready_q_prio_bit+0x20>)
   28166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2816a:	685a      	ldr	r2, [r3, #4]
   2816c:	ea22 0200 	bic.w	r2, r2, r0
   28170:	605a      	str	r2, [r3, #4]
   28172:	4770      	bx	lr
   28174:	20002718 	.word	0x20002718

00028178 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28178:	4b06      	ldr	r3, [pc, #24]	; (28194 <_get_ready_q_head+0x1c>)
   2817a:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   2817c:	fa92 f3a2 	rbit	r3, r2
   28180:	fab3 f383 	clz	r3, r3
   28184:	b90a      	cbnz	r2, 2818a <_get_ready_q_head+0x12>
   28186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   2818a:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   2818c:	4a01      	ldr	r2, [pc, #4]	; (28194 <_get_ready_q_head+0x1c>)
   2818e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28192:	4770      	bx	lr
   28194:	20002718 	.word	0x20002718

00028198 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28198:	b570      	push	{r4, r5, r6, lr}
   2819a:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2819c:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   281a0:	4e0c      	ldr	r6, [pc, #48]	; (281d4 <_add_thread_to_ready_q+0x3c>)
   281a2:	f100 0514 	add.w	r5, r0, #20
   281a6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   281aa:	f7ff ffc1 	bl	28130 <_set_ready_q_prio_bit>
	node->next = list;
   281ae:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   281b0:	686b      	ldr	r3, [r5, #4]
   281b2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   281b4:	686b      	ldr	r3, [r5, #4]
   281b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   281b8:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   281ba:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   281bc:	f994 200a 	ldrsb.w	r2, [r4, #10]
   281c0:	f993 100a 	ldrsb.w	r1, [r3, #10]
   281c4:	4291      	cmp	r1, r2
   281c6:	dc02      	bgt.n	281ce <_add_thread_to_ready_q+0x36>
   281c8:	4a02      	ldr	r2, [pc, #8]	; (281d4 <_add_thread_to_ready_q+0x3c>)
   281ca:	6193      	str	r3, [r2, #24]
   281cc:	bd70      	pop	{r4, r5, r6, pc}
   281ce:	4623      	mov	r3, r4
   281d0:	e7fa      	b.n	281c8 <_add_thread_to_ready_q+0x30>
   281d2:	bf00      	nop
   281d4:	20002718 	.word	0x20002718

000281d8 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   281d8:	b538      	push	{r3, r4, r5, lr}
   281da:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   281dc:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   281e0:	4a0e      	ldr	r2, [pc, #56]	; (2821c <_remove_thread_from_ready_q+0x44>)
   281e2:	3314      	adds	r3, #20
   281e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   281e8:	6840      	ldr	r0, [r0, #4]
   281ea:	6825      	ldr	r5, [r4, #0]
   281ec:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   281ee:	6820      	ldr	r0, [r4, #0]
   281f0:	6865      	ldr	r5, [r4, #4]
   281f2:	6045      	str	r5, [r0, #4]
	return list->head == list;
   281f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   281f8:	4299      	cmp	r1, r3
   281fa:	d006      	beq.n	2820a <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   281fc:	4b07      	ldr	r3, [pc, #28]	; (2821c <_remove_thread_from_ready_q+0x44>)
   281fe:	6998      	ldr	r0, [r3, #24]
   28200:	4284      	cmp	r4, r0
   28202:	d007      	beq.n	28214 <_remove_thread_from_ready_q+0x3c>
   28204:	4b05      	ldr	r3, [pc, #20]	; (2821c <_remove_thread_from_ready_q+0x44>)
   28206:	6198      	str	r0, [r3, #24]
   28208:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   2820a:	f994 000a 	ldrsb.w	r0, [r4, #10]
   2820e:	f7ff ffa1 	bl	28154 <_clear_ready_q_prio_bit>
   28212:	e7f3      	b.n	281fc <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28214:	f7ff ffb0 	bl	28178 <_get_ready_q_head>
   28218:	e7f4      	b.n	28204 <_remove_thread_from_ready_q+0x2c>
   2821a:	bf00      	nop
   2821c:	20002718 	.word	0x20002718

00028220 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28220:	b538      	push	{r3, r4, r5, lr}
   28222:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28224:	4299      	cmp	r1, r3
   28226:	d115      	bne.n	28254 <_pend_thread+0x34>
   28228:	2300      	movs	r3, #0
   2822a:	e013      	b.n	28254 <_pend_thread+0x34>
	if (!insert_point) {
   2822c:	b133      	cbz	r3, 2823c <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   2822e:	685c      	ldr	r4, [r3, #4]
   28230:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28232:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28234:	685c      	ldr	r4, [r3, #4]
   28236:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28238:	6058      	str	r0, [r3, #4]
   2823a:	e02b      	b.n	28294 <_pend_thread+0x74>
	node->next = list;
   2823c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2823e:	684b      	ldr	r3, [r1, #4]
   28240:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28242:	684b      	ldr	r3, [r1, #4]
   28244:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28246:	6048      	str	r0, [r1, #4]
   28248:	e024      	b.n	28294 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2824a:	461d      	mov	r5, r3
   2824c:	e010      	b.n	28270 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   2824e:	2500      	movs	r5, #0
   28250:	e00e      	b.n	28270 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28252:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28254:	b1c3      	cbz	r3, 28288 <_pend_thread+0x68>
   28256:	f990 500a 	ldrsb.w	r5, [r0, #10]
   2825a:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   2825e:	42a5      	cmp	r5, r4
   28260:	dbe4      	blt.n	2822c <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28262:	461c      	mov	r4, r3
   28264:	2b00      	cmp	r3, #0
   28266:	d0f0      	beq.n	2824a <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28268:	684d      	ldr	r5, [r1, #4]
   2826a:	42ab      	cmp	r3, r5
   2826c:	d0ef      	beq.n	2824e <_pend_thread+0x2e>
   2826e:	681d      	ldr	r5, [r3, #0]
   28270:	b145      	cbz	r5, 28284 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28272:	2c00      	cmp	r4, #0
   28274:	d0ed      	beq.n	28252 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28276:	684d      	ldr	r5, [r1, #4]
   28278:	42ac      	cmp	r4, r5
   2827a:	d001      	beq.n	28280 <_pend_thread+0x60>
   2827c:	681b      	ldr	r3, [r3, #0]
   2827e:	e7e9      	b.n	28254 <_pend_thread+0x34>
   28280:	2300      	movs	r3, #0
   28282:	e7e7      	b.n	28254 <_pend_thread+0x34>
   28284:	2300      	movs	r3, #0
   28286:	e7e5      	b.n	28254 <_pend_thread+0x34>
	node->next = list;
   28288:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2828a:	684b      	ldr	r3, [r1, #4]
   2828c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2828e:	684b      	ldr	r3, [r1, #4]
   28290:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28292:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28294:	7a44      	ldrb	r4, [r0, #9]
   28296:	f044 0402 	orr.w	r4, r4, #2
   2829a:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   2829c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   282a0:	f000 8089 	beq.w	283b6 <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   282a4:	f102 0309 	add.w	r3, r2, #9
   282a8:	4a43      	ldr	r2, [pc, #268]	; (283b8 <_pend_thread+0x198>)
   282aa:	fba2 2303 	umull	r2, r3, r2, r3
   282ae:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   282b0:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   282b2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   282b6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   282b8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   282ba:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   282bc:	b133      	cbz	r3, 282cc <_pend_thread+0xac>
	return list->head == list;
   282be:	4a3f      	ldr	r2, [pc, #252]	; (283bc <_pend_thread+0x19c>)
   282c0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282c4:	4293      	cmp	r3, r2
   282c6:	d151      	bne.n	2836c <_pend_thread+0x14c>
   282c8:	2300      	movs	r3, #0
   282ca:	e04f      	b.n	2836c <_pend_thread+0x14c>
	__asm__ volatile(
   282cc:	f04f 0320 	mov.w	r3, #32
   282d0:	f3ef 8511 	mrs	r5, BASEPRI
   282d4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   282d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   282dc:	6123      	str	r3, [r4, #16]
	if (thread) {
   282de:	b320      	cbz	r0, 2832a <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   282e0:	68e3      	ldr	r3, [r4, #12]
   282e2:	b15b      	cbz	r3, 282fc <_pend_thread+0xdc>
	node->prev->next = node->next;
   282e4:	6843      	ldr	r3, [r0, #4]
   282e6:	6802      	ldr	r2, [r0, #0]
   282e8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   282ea:	6803      	ldr	r3, [r0, #0]
   282ec:	6842      	ldr	r2, [r0, #4]
   282ee:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   282f0:	7a43      	ldrb	r3, [r0, #9]
   282f2:	f023 0302 	bic.w	r3, r3, #2
   282f6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   282f8:	2300      	movs	r3, #0
   282fa:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   282fc:	7a43      	ldrb	r3, [r0, #9]
   282fe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28302:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28304:	f013 0f1b 	tst.w	r3, #27
   28308:	d107      	bne.n	2831a <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2830a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28310:	d001      	beq.n	28316 <_pend_thread+0xf6>
   28312:	2300      	movs	r3, #0
   28314:	e002      	b.n	2831c <_pend_thread+0xfc>
   28316:	2301      	movs	r3, #1
   28318:	e000      	b.n	2831c <_pend_thread+0xfc>
   2831a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2831c:	b913      	cbnz	r3, 28324 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2831e:	f385 8811 	msr	BASEPRI, r5
   28322:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28324:	f7ff ff38 	bl	28198 <_add_thread_to_ready_q>
   28328:	e7f9      	b.n	2831e <_pend_thread+0xfe>
   2832a:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2832e:	6963      	ldr	r3, [r4, #20]
   28330:	2b00      	cmp	r3, #0
   28332:	d040      	beq.n	283b6 <_pend_thread+0x196>
			timeout->func(timeout);
   28334:	4620      	mov	r0, r4
   28336:	4798      	blx	r3
   28338:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   2833a:	1a8a      	subs	r2, r1, r2
   2833c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2833e:	b133      	cbz	r3, 2834e <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28340:	685a      	ldr	r2, [r3, #4]
   28342:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28344:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28346:	685a      	ldr	r2, [r3, #4]
   28348:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2834a:	605c      	str	r4, [r3, #4]
   2834c:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   2834e:	4b1b      	ldr	r3, [pc, #108]	; (283bc <_pend_thread+0x19c>)
   28350:	f103 020c 	add.w	r2, r3, #12
   28354:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28356:	691a      	ldr	r2, [r3, #16]
   28358:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2835a:	691a      	ldr	r2, [r3, #16]
   2835c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2835e:	611c      	str	r4, [r3, #16]
   28360:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28362:	4619      	mov	r1, r3
   28364:	e011      	b.n	2838a <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28366:	2100      	movs	r1, #0
   28368:	e00f      	b.n	2838a <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2836a:	2300      	movs	r3, #0
   2836c:	b1d3      	cbz	r3, 283a4 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2836e:	6922      	ldr	r2, [r4, #16]
   28370:	6919      	ldr	r1, [r3, #16]
   28372:	428a      	cmp	r2, r1
   28374:	dde1      	ble.n	2833a <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28376:	1a52      	subs	r2, r2, r1
   28378:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2837a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2837c:	2b00      	cmp	r3, #0
   2837e:	d0f0      	beq.n	28362 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28380:	490e      	ldr	r1, [pc, #56]	; (283bc <_pend_thread+0x19c>)
   28382:	6909      	ldr	r1, [r1, #16]
   28384:	428b      	cmp	r3, r1
   28386:	d0ee      	beq.n	28366 <_pend_thread+0x146>
   28388:	6819      	ldr	r1, [r3, #0]
   2838a:	2900      	cmp	r1, #0
   2838c:	d0ed      	beq.n	2836a <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2838e:	b12a      	cbz	r2, 2839c <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28390:	490a      	ldr	r1, [pc, #40]	; (283bc <_pend_thread+0x19c>)
   28392:	6909      	ldr	r1, [r1, #16]
   28394:	428a      	cmp	r2, r1
   28396:	d003      	beq.n	283a0 <_pend_thread+0x180>
   28398:	681b      	ldr	r3, [r3, #0]
   2839a:	e7e7      	b.n	2836c <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2839c:	2300      	movs	r3, #0
   2839e:	e7e5      	b.n	2836c <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   283a0:	2300      	movs	r3, #0
   283a2:	e7e3      	b.n	2836c <_pend_thread+0x14c>
	node->next = list;
   283a4:	4b05      	ldr	r3, [pc, #20]	; (283bc <_pend_thread+0x19c>)
   283a6:	f103 020c 	add.w	r2, r3, #12
   283aa:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   283ac:	691a      	ldr	r2, [r3, #16]
   283ae:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   283b0:	691a      	ldr	r2, [r3, #16]
   283b2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   283b4:	611c      	str	r4, [r3, #16]
   283b6:	bd38      	pop	{r3, r4, r5, pc}
   283b8:	cccccccd 	.word	0xcccccccd
   283bc:	20002718 	.word	0x20002718

000283c0 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   283c0:	b570      	push	{r4, r5, r6, lr}
   283c2:	4605      	mov	r5, r0
   283c4:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   283c6:	4c05      	ldr	r4, [pc, #20]	; (283dc <_pend_current_thread+0x1c>)
   283c8:	68a0      	ldr	r0, [r4, #8]
   283ca:	f7ff ff05 	bl	281d8 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   283ce:	4632      	mov	r2, r6
   283d0:	4629      	mov	r1, r5
   283d2:	68a0      	ldr	r0, [r4, #8]
   283d4:	f7ff ff24 	bl	28220 <_pend_thread>
   283d8:	bd70      	pop	{r4, r5, r6, pc}
   283da:	bf00      	nop
   283dc:	20002718 	.word	0x20002718

000283e0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   283e0:	4b09      	ldr	r3, [pc, #36]	; (28408 <__must_switch_threads+0x28>)
   283e2:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   283e4:	fa93 f0a3 	rbit	r0, r3
   283e8:	fab0 f080 	clz	r0, r0
   283ec:	b90b      	cbnz	r3, 283f2 <__must_switch_threads+0x12>
   283ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   283f2:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   283f4:	4b04      	ldr	r3, [pc, #16]	; (28408 <__must_switch_threads+0x28>)
   283f6:	689b      	ldr	r3, [r3, #8]
   283f8:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   283fc:	4283      	cmp	r3, r0
   283fe:	bfd4      	ite	le
   28400:	2000      	movle	r0, #0
   28402:	2001      	movgt	r0, #1
   28404:	4770      	bx	lr
   28406:	bf00      	nop
   28408:	20002718 	.word	0x20002718

0002840c <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2840c:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28410:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28414:	3214      	adds	r2, #20
   28416:	4911      	ldr	r1, [pc, #68]	; (2845c <_move_thread_to_end_of_prio_q+0x50>)
   28418:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   2841c:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   2841e:	4288      	cmp	r0, r1
   28420:	d01a      	beq.n	28458 <_move_thread_to_end_of_prio_q+0x4c>
{
   28422:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28424:	6841      	ldr	r1, [r0, #4]
   28426:	6804      	ldr	r4, [r0, #0]
   28428:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   2842a:	6801      	ldr	r1, [r0, #0]
   2842c:	6844      	ldr	r4, [r0, #4]
   2842e:	604c      	str	r4, [r1, #4]
	node->next = list;
   28430:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28432:	4a0a      	ldr	r2, [pc, #40]	; (2845c <_move_thread_to_end_of_prio_q+0x50>)
   28434:	3304      	adds	r3, #4
   28436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2843a:	6859      	ldr	r1, [r3, #4]
   2843c:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   2843e:	6859      	ldr	r1, [r3, #4]
   28440:	6008      	str	r0, [r1, #0]
	list->tail = node;
   28442:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28444:	6993      	ldr	r3, [r2, #24]
   28446:	4298      	cmp	r0, r3
   28448:	d002      	beq.n	28450 <_move_thread_to_end_of_prio_q+0x44>
   2844a:	4a04      	ldr	r2, [pc, #16]	; (2845c <_move_thread_to_end_of_prio_q+0x50>)
   2844c:	6193      	str	r3, [r2, #24]
   2844e:	bd10      	pop	{r4, pc}
   28450:	f7ff fe92 	bl	28178 <_get_ready_q_head>
   28454:	4603      	mov	r3, r0
   28456:	e7f8      	b.n	2844a <_move_thread_to_end_of_prio_q+0x3e>
   28458:	4770      	bx	lr
   2845a:	bf00      	nop
   2845c:	20002718 	.word	0x20002718

00028460 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28460:	4b01      	ldr	r3, [pc, #4]	; (28468 <_impl_k_current_get+0x8>)
   28462:	6898      	ldr	r0, [r3, #8]
   28464:	4770      	bx	lr
   28466:	bf00      	nop
   28468:	20002718 	.word	0x20002718

0002846c <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   2846c:	4b0f      	ldr	r3, [pc, #60]	; (284ac <_is_thread_time_slicing+0x40>)
   2846e:	681b      	ldr	r3, [r3, #0]
   28470:	2b00      	cmp	r3, #0
   28472:	dd14      	ble.n	2849e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   28474:	4b0e      	ldr	r3, [pc, #56]	; (284b0 <_is_thread_time_slicing+0x44>)
   28476:	681b      	ldr	r3, [r3, #0]
   28478:	4298      	cmp	r0, r3
   2847a:	d012      	beq.n	284a2 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   2847c:	f990 300a 	ldrsb.w	r3, [r0, #10]
   28480:	4a0c      	ldr	r2, [pc, #48]	; (284b4 <_is_thread_time_slicing+0x48>)
   28482:	6812      	ldr	r2, [r2, #0]
   28484:	4293      	cmp	r3, r2
   28486:	db0e      	blt.n	284a6 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   28488:	4a0b      	ldr	r2, [pc, #44]	; (284b8 <_is_thread_time_slicing+0x4c>)
   2848a:	3314      	adds	r3, #20
   2848c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28494:	685b      	ldr	r3, [r3, #4]
   28496:	1ac0      	subs	r0, r0, r3
   28498:	bf18      	it	ne
   2849a:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   2849c:	4770      	bx	lr
		return 0;
   2849e:	2000      	movs	r0, #0
   284a0:	4770      	bx	lr
   284a2:	2000      	movs	r0, #0
   284a4:	4770      	bx	lr
   284a6:	2000      	movs	r0, #0
}
   284a8:	4770      	bx	lr
   284aa:	bf00      	nop
   284ac:	20002838 	.word	0x20002838
   284b0:	0003114c 	.word	0x0003114c
   284b4:	2000283c 	.word	0x2000283c
   284b8:	20002718 	.word	0x20002718

000284bc <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   284bc:	2200      	movs	r2, #0
   284be:	4b01      	ldr	r3, [pc, #4]	; (284c4 <_update_time_slice_before_swap+0x8>)
   284c0:	601a      	str	r2, [r3, #0]
   284c2:	4770      	bx	lr
   284c4:	20002b04 	.word	0x20002b04

000284c8 <_reschedule_threads>:
{
   284c8:	b510      	push	{r4, lr}
   284ca:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   284cc:	4b0a      	ldr	r3, [pc, #40]	; (284f8 <_reschedule_threads+0x30>)
   284ce:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   284d0:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   284d2:	2b7f      	cmp	r3, #127	; 0x7f
   284d4:	d805      	bhi.n	284e2 <_reschedule_threads+0x1a>
   284d6:	f7ff ff83 	bl	283e0 <__must_switch_threads>
   284da:	4603      	mov	r3, r0
   284dc:	b110      	cbz	r0, 284e4 <_reschedule_threads+0x1c>
   284de:	2301      	movs	r3, #1
   284e0:	e000      	b.n	284e4 <_reschedule_threads+0x1c>
   284e2:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   284e4:	b913      	cbnz	r3, 284ec <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   284e6:	f384 8811 	msr	BASEPRI, r4
   284ea:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   284ec:	f7ff ffe6 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   284f0:	4620      	mov	r0, r4
   284f2:	f7fe fb29 	bl	26b48 <__swap>
   284f6:	bd10      	pop	{r4, pc}
   284f8:	20002718 	.word	0x20002718

000284fc <k_sched_unlock>:
{
   284fc:	b508      	push	{r3, lr}
	__asm__ volatile(
   284fe:	f04f 0320 	mov.w	r3, #32
   28502:	f3ef 8011 	mrs	r0, BASEPRI
   28506:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   2850a:	4b04      	ldr	r3, [pc, #16]	; (2851c <k_sched_unlock+0x20>)
   2850c:	689a      	ldr	r2, [r3, #8]
   2850e:	7ad3      	ldrb	r3, [r2, #11]
   28510:	3301      	adds	r3, #1
   28512:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   28514:	f7ff ffd8 	bl	284c8 <_reschedule_threads>
   28518:	bd08      	pop	{r3, pc}
   2851a:	bf00      	nop
   2851c:	20002718 	.word	0x20002718

00028520 <_impl_k_yield>:
{
   28520:	b538      	push	{r3, r4, r5, lr}
   28522:	f04f 0320 	mov.w	r3, #32
   28526:	f3ef 8511 	mrs	r5, BASEPRI
   2852a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   2852e:	4c08      	ldr	r4, [pc, #32]	; (28550 <_impl_k_yield+0x30>)
   28530:	68a0      	ldr	r0, [r4, #8]
   28532:	f7ff ff6b 	bl	2840c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   28536:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28538:	69a3      	ldr	r3, [r4, #24]
   2853a:	429a      	cmp	r2, r3
   2853c:	d005      	beq.n	2854a <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   2853e:	f7ff ffbd 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   28542:	4628      	mov	r0, r5
   28544:	f7fe fb00 	bl	26b48 <__swap>
   28548:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2854a:	f385 8811 	msr	BASEPRI, r5
   2854e:	bd38      	pop	{r3, r4, r5, pc}
   28550:	20002718 	.word	0x20002718

00028554 <_impl_k_sleep>:
{
   28554:	b570      	push	{r4, r5, r6, lr}
   28556:	b082      	sub	sp, #8
	if (duration == 0) {
   28558:	b308      	cbz	r0, 2859e <_impl_k_sleep+0x4a>
   2855a:	4603      	mov	r3, r0
   2855c:	3309      	adds	r3, #9
   2855e:	4a4f      	ldr	r2, [pc, #316]	; (2869c <_impl_k_sleep+0x148>)
   28560:	fba2 2303 	umull	r2, r3, r2, r3
   28564:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   28566:	3301      	adds	r3, #1
   28568:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   2856a:	f04f 0320 	mov.w	r3, #32
   2856e:	f3ef 8511 	mrs	r5, BASEPRI
   28572:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   28576:	4c4a      	ldr	r4, [pc, #296]	; (286a0 <_impl_k_sleep+0x14c>)
   28578:	68a0      	ldr	r0, [r4, #8]
   2857a:	f7ff fe2d 	bl	281d8 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   2857e:	68a0      	ldr	r0, [r4, #8]
   28580:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28582:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28586:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28588:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2858a:	2200      	movs	r2, #0
   2858c:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   2858e:	b14b      	cbz	r3, 285a4 <_impl_k_sleep+0x50>
	return list->head == list;
   28590:	4a43      	ldr	r2, [pc, #268]	; (286a0 <_impl_k_sleep+0x14c>)
   28592:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28596:	4293      	cmp	r3, r2
   28598:	d154      	bne.n	28644 <_impl_k_sleep+0xf0>
   2859a:	2300      	movs	r3, #0
   2859c:	e052      	b.n	28644 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2859e:	f7ff ffbf 	bl	28520 <_impl_k_yield>
   285a2:	e079      	b.n	28698 <_impl_k_sleep+0x144>
   285a4:	f04f 0320 	mov.w	r3, #32
   285a8:	f3ef 8611 	mrs	r6, BASEPRI
   285ac:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   285b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   285b4:	6123      	str	r3, [r4, #16]
	if (thread) {
   285b6:	b320      	cbz	r0, 28602 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   285b8:	68e3      	ldr	r3, [r4, #12]
   285ba:	b15b      	cbz	r3, 285d4 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   285bc:	6843      	ldr	r3, [r0, #4]
   285be:	6802      	ldr	r2, [r0, #0]
   285c0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   285c2:	6803      	ldr	r3, [r0, #0]
   285c4:	6842      	ldr	r2, [r0, #4]
   285c6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   285c8:	7a43      	ldrb	r3, [r0, #9]
   285ca:	f023 0302 	bic.w	r3, r3, #2
   285ce:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   285d0:	2300      	movs	r3, #0
   285d2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   285d4:	7a43      	ldrb	r3, [r0, #9]
   285d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   285da:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   285dc:	f013 0f1b 	tst.w	r3, #27
   285e0:	d107      	bne.n	285f2 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   285e2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   285e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   285e8:	d001      	beq.n	285ee <_impl_k_sleep+0x9a>
   285ea:	2300      	movs	r3, #0
   285ec:	e002      	b.n	285f4 <_impl_k_sleep+0xa0>
   285ee:	2301      	movs	r3, #1
   285f0:	e000      	b.n	285f4 <_impl_k_sleep+0xa0>
   285f2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   285f4:	b913      	cbnz	r3, 285fc <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   285f6:	f386 8811 	msr	BASEPRI, r6
   285fa:	e048      	b.n	2868e <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   285fc:	f7ff fdcc 	bl	28198 <_add_thread_to_ready_q>
   28600:	e7f9      	b.n	285f6 <_impl_k_sleep+0xa2>
   28602:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28606:	6963      	ldr	r3, [r4, #20]
   28608:	2b00      	cmp	r3, #0
   2860a:	d040      	beq.n	2868e <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   2860c:	4620      	mov	r0, r4
   2860e:	4798      	blx	r3
   28610:	e03d      	b.n	2868e <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   28612:	1a8a      	subs	r2, r1, r2
   28614:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28616:	b133      	cbz	r3, 28626 <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   28618:	685a      	ldr	r2, [r3, #4]
   2861a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2861c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2861e:	685a      	ldr	r2, [r3, #4]
   28620:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28622:	605c      	str	r4, [r3, #4]
   28624:	e033      	b.n	2868e <_impl_k_sleep+0x13a>
	node->next = list;
   28626:	4b1e      	ldr	r3, [pc, #120]	; (286a0 <_impl_k_sleep+0x14c>)
   28628:	f103 020c 	add.w	r2, r3, #12
   2862c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2862e:	691a      	ldr	r2, [r3, #16]
   28630:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28632:	691a      	ldr	r2, [r3, #16]
   28634:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28636:	611c      	str	r4, [r3, #16]
   28638:	e029      	b.n	2868e <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2863a:	4619      	mov	r1, r3
   2863c:	e011      	b.n	28662 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2863e:	2100      	movs	r1, #0
   28640:	e00f      	b.n	28662 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28642:	2300      	movs	r3, #0
   28644:	b1d3      	cbz	r3, 2867c <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28646:	6922      	ldr	r2, [r4, #16]
   28648:	6919      	ldr	r1, [r3, #16]
   2864a:	428a      	cmp	r2, r1
   2864c:	dde1      	ble.n	28612 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   2864e:	1a52      	subs	r2, r2, r1
   28650:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28652:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28654:	2b00      	cmp	r3, #0
   28656:	d0f0      	beq.n	2863a <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   28658:	4911      	ldr	r1, [pc, #68]	; (286a0 <_impl_k_sleep+0x14c>)
   2865a:	6909      	ldr	r1, [r1, #16]
   2865c:	428b      	cmp	r3, r1
   2865e:	d0ee      	beq.n	2863e <_impl_k_sleep+0xea>
   28660:	6819      	ldr	r1, [r3, #0]
   28662:	2900      	cmp	r1, #0
   28664:	d0ed      	beq.n	28642 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28666:	b12a      	cbz	r2, 28674 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   28668:	490d      	ldr	r1, [pc, #52]	; (286a0 <_impl_k_sleep+0x14c>)
   2866a:	6909      	ldr	r1, [r1, #16]
   2866c:	428a      	cmp	r2, r1
   2866e:	d003      	beq.n	28678 <_impl_k_sleep+0x124>
   28670:	681b      	ldr	r3, [r3, #0]
   28672:	e7e7      	b.n	28644 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28674:	2300      	movs	r3, #0
   28676:	e7e5      	b.n	28644 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28678:	2300      	movs	r3, #0
   2867a:	e7e3      	b.n	28644 <_impl_k_sleep+0xf0>
	node->next = list;
   2867c:	4b08      	ldr	r3, [pc, #32]	; (286a0 <_impl_k_sleep+0x14c>)
   2867e:	f103 020c 	add.w	r2, r3, #12
   28682:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28684:	691a      	ldr	r2, [r3, #16]
   28686:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28688:	691a      	ldr	r2, [r3, #16]
   2868a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2868c:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   2868e:	f7ff ff15 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   28692:	4628      	mov	r0, r5
   28694:	f7fe fa58 	bl	26b48 <__swap>
}
   28698:	b002      	add	sp, #8
   2869a:	bd70      	pop	{r4, r5, r6, pc}
   2869c:	cccccccd 	.word	0xcccccccd
   286a0:	20002718 	.word	0x20002718

000286a4 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   286a4:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   286a6:	4b43      	ldr	r3, [pc, #268]	; (287b4 <do_sem_give+0x110>)
   286a8:	681b      	ldr	r3, [r3, #0]
   286aa:	2b00      	cmp	r3, #0
   286ac:	d136      	bne.n	2871c <do_sem_give+0x78>
	return list->head == list;
   286ae:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286b0:	42a0      	cmp	r0, r4
   286b2:	d044      	beq.n	2873e <do_sem_give+0x9a>
	if (thread) {
   286b4:	b14c      	cbz	r4, 286ca <do_sem_give+0x26>
	node->prev->next = node->next;
   286b6:	6863      	ldr	r3, [r4, #4]
   286b8:	6822      	ldr	r2, [r4, #0]
   286ba:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   286bc:	6823      	ldr	r3, [r4, #0]
   286be:	6862      	ldr	r2, [r4, #4]
   286c0:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   286c2:	7a63      	ldrb	r3, [r4, #9]
   286c4:	f023 0302 	bic.w	r3, r3, #2
   286c8:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   286ca:	2c00      	cmp	r4, #0
   286cc:	d039      	beq.n	28742 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   286ce:	6a22      	ldr	r2, [r4, #32]
   286d0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   286d4:	d013      	beq.n	286fe <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   286d6:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   286da:	4937      	ldr	r1, [pc, #220]	; (287b8 <do_sem_give+0x114>)
   286dc:	6909      	ldr	r1, [r1, #16]
   286de:	428b      	cmp	r3, r1
   286e0:	d004      	beq.n	286ec <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   286e2:	b103      	cbz	r3, 286e6 <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   286e4:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   286e6:	6919      	ldr	r1, [r3, #16]
   286e8:	440a      	add	r2, r1
   286ea:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   286ec:	6963      	ldr	r3, [r4, #20]
   286ee:	6922      	ldr	r2, [r4, #16]
   286f0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   286f2:	6923      	ldr	r3, [r4, #16]
   286f4:	6962      	ldr	r2, [r4, #20]
   286f6:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   286f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286fc:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   286fe:	7a63      	ldrb	r3, [r4, #9]
   28700:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28704:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28706:	f013 0f1b 	tst.w	r3, #27
   2870a:	d128      	bne.n	2875e <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2870c:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28712:	d022      	beq.n	2875a <do_sem_give+0xb6>
   28714:	2300      	movs	r3, #0
   28716:	e023      	b.n	28760 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28718:	2400      	movs	r4, #0
   2871a:	e003      	b.n	28724 <do_sem_give+0x80>
   2871c:	4602      	mov	r2, r0
	return list->head == list;
   2871e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28720:	42a0      	cmp	r0, r4
   28722:	d0f9      	beq.n	28718 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28724:	2c00      	cmp	r4, #0
   28726:	d0c5      	beq.n	286b4 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28728:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2872a:	f113 0f02 	cmn.w	r3, #2
   2872e:	d1c1      	bne.n	286b4 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   28730:	6853      	ldr	r3, [r2, #4]
   28732:	429c      	cmp	r4, r3
   28734:	d001      	beq.n	2873a <do_sem_give+0x96>
   28736:	6824      	ldr	r4, [r4, #0]
   28738:	e7f4      	b.n	28724 <do_sem_give+0x80>
   2873a:	2400      	movs	r4, #0
   2873c:	e7f2      	b.n	28724 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2873e:	2400      	movs	r4, #0
   28740:	e7b8      	b.n	286b4 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   28742:	6883      	ldr	r3, [r0, #8]
   28744:	68c2      	ldr	r2, [r0, #12]
   28746:	4293      	cmp	r3, r2
   28748:	bf18      	it	ne
   2874a:	3301      	addne	r3, #1
   2874c:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   2874e:	2102      	movs	r1, #2
   28750:	3010      	adds	r0, #16
   28752:	f7ff fbfd 	bl	27f50 <_handle_obj_poll_events>
   28756:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   28758:	e01c      	b.n	28794 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   2875a:	2301      	movs	r3, #1
   2875c:	e000      	b.n	28760 <do_sem_give+0xbc>
   2875e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28760:	b96b      	cbnz	r3, 2877e <do_sem_give+0xda>
   28762:	2300      	movs	r3, #0
   28764:	6663      	str	r3, [r4, #100]	; 0x64
   28766:	f3ef 8305 	mrs	r3, IPSR
   2876a:	2b0d      	cmp	r3, #13
   2876c:	d80b      	bhi.n	28786 <do_sem_give+0xe2>
   2876e:	b19b      	cbz	r3, 28798 <do_sem_give+0xf4>
   28770:	4b12      	ldr	r3, [pc, #72]	; (287bc <do_sem_give+0x118>)
   28772:	685b      	ldr	r3, [r3, #4]
   28774:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28778:	d010      	beq.n	2879c <do_sem_give+0xf8>
   2877a:	2300      	movs	r3, #0
   2877c:	e004      	b.n	28788 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   2877e:	4620      	mov	r0, r4
   28780:	f7ff fd0a 	bl	28198 <_add_thread_to_ready_q>
   28784:	e7ed      	b.n	28762 <do_sem_give+0xbe>
   28786:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   28788:	b98b      	cbnz	r3, 287ae <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   2878a:	4a0b      	ldr	r2, [pc, #44]	; (287b8 <do_sem_give+0x114>)
   2878c:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2878e:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28790:	2a7f      	cmp	r2, #127	; 0x7f
   28792:	d905      	bls.n	287a0 <do_sem_give+0xfc>
}
   28794:	4618      	mov	r0, r3
   28796:	bd10      	pop	{r4, pc}
   28798:	2300      	movs	r3, #0
   2879a:	e7f5      	b.n	28788 <do_sem_give+0xe4>
   2879c:	2301      	movs	r3, #1
   2879e:	e7f3      	b.n	28788 <do_sem_give+0xe4>
   287a0:	f7ff fe1e 	bl	283e0 <__must_switch_threads>
   287a4:	4603      	mov	r3, r0
   287a6:	2800      	cmp	r0, #0
   287a8:	d0f4      	beq.n	28794 <do_sem_give+0xf0>
   287aa:	2301      	movs	r3, #1
   287ac:	e7f2      	b.n	28794 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   287ae:	2300      	movs	r3, #0
   287b0:	e7f0      	b.n	28794 <do_sem_give+0xf0>
   287b2:	bf00      	nop
   287b4:	20002b00 	.word	0x20002b00
   287b8:	20002718 	.word	0x20002718
   287bc:	e000ed00 	.word	0xe000ed00

000287c0 <_impl_k_sem_init>:
	sem->count = initial_count;
   287c0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   287c2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   287c4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   287c6:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   287c8:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   287cc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   287ce:	6143      	str	r3, [r0, #20]
   287d0:	4770      	bx	lr

000287d2 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   287d2:	b510      	push	{r4, lr}
	__asm__ volatile(
   287d4:	f04f 0320 	mov.w	r3, #32
   287d8:	f3ef 8411 	mrs	r4, BASEPRI
   287dc:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   287e0:	f7ff ff60 	bl	286a4 <do_sem_give>
   287e4:	b910      	cbnz	r0, 287ec <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   287e6:	f384 8811 	msr	BASEPRI, r4
   287ea:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   287ec:	f7ff fe66 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   287f0:	4620      	mov	r0, r4
   287f2:	f7fe f9a9 	bl	26b48 <__swap>
   287f6:	bd10      	pop	{r4, pc}

000287f8 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   287f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   287fa:	f04f 0320 	mov.w	r3, #32
   287fe:	f3ef 8411 	mrs	r4, BASEPRI
   28802:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   28806:	6883      	ldr	r3, [r0, #8]
   28808:	b12b      	cbz	r3, 28816 <_impl_k_sem_take+0x1e>
		sem->count--;
   2880a:	3b01      	subs	r3, #1
   2880c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2880e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   28812:	2000      	movs	r0, #0
   28814:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   28816:	b139      	cbz	r1, 28828 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   28818:	f7ff fdd2 	bl	283c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   2881c:	f7ff fe4e 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   28820:	4620      	mov	r0, r4
   28822:	f7fe f991 	bl	26b48 <__swap>

	return _Swap(key);
}
   28826:	bd10      	pop	{r4, pc}
   28828:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   2882c:	f06f 000f 	mvn.w	r0, #15
   28830:	bd10      	pop	{r4, pc}
	...

00028834 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   28834:	b538      	push	{r3, r4, r5, lr}
   28836:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   28838:	4b0f      	ldr	r3, [pc, #60]	; (28878 <handle_time_slicing+0x44>)
   2883a:	6898      	ldr	r0, [r3, #8]
   2883c:	f7ff fe16 	bl	2846c <_is_thread_time_slicing>
   28840:	b150      	cbz	r0, 28858 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   28842:	00a2      	lsls	r2, r4, #2
   28844:	1912      	adds	r2, r2, r4
   28846:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   28848:	490c      	ldr	r1, [pc, #48]	; (2887c <handle_time_slicing+0x48>)
   2884a:	680b      	ldr	r3, [r1, #0]
   2884c:	441a      	add	r2, r3
   2884e:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   28850:	4b0b      	ldr	r3, [pc, #44]	; (28880 <handle_time_slicing+0x4c>)
   28852:	681b      	ldr	r3, [r3, #0]
   28854:	429a      	cmp	r2, r3
   28856:	da00      	bge.n	2885a <handle_time_slicing+0x26>
   28858:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   2885a:	2200      	movs	r2, #0
   2885c:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   2885e:	f04f 0320 	mov.w	r3, #32
   28862:	f3ef 8411 	mrs	r4, BASEPRI
   28866:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   2886a:	4b03      	ldr	r3, [pc, #12]	; (28878 <handle_time_slicing+0x44>)
   2886c:	6898      	ldr	r0, [r3, #8]
   2886e:	f7ff fdcd 	bl	2840c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28872:	f384 8811 	msr	BASEPRI, r4
   28876:	e7ef      	b.n	28858 <handle_time_slicing+0x24>
   28878:	20002718 	.word	0x20002718
   2887c:	20002b04 	.word	0x20002b04
   28880:	20002838 	.word	0x20002838

00028884 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   28884:	4b01      	ldr	r3, [pc, #4]	; (2888c <_tick_get_32+0x8>)
   28886:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   2888a:	4770      	bx	lr
   2888c:	20002b08 	.word	0x20002b08

00028890 <_impl_k_uptime_get_32>:
{
   28890:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   28892:	f7ff fff7 	bl	28884 <_tick_get_32>
   28896:	0082      	lsls	r2, r0, #2
   28898:	1810      	adds	r0, r2, r0
   2889a:	1800      	adds	r0, r0, r0
}
   2889c:	bd38      	pop	{r3, r4, r5, pc}
	...

000288a0 <_tick_get>:
	__asm__ volatile(
   288a0:	f04f 0220 	mov.w	r2, #32
   288a4:	f3ef 8311 	mrs	r3, BASEPRI
   288a8:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   288ac:	4a02      	ldr	r2, [pc, #8]	; (288b8 <_tick_get+0x18>)
   288ae:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288b2:	f383 8811 	msr	BASEPRI, r3
}
   288b6:	4770      	bx	lr
   288b8:	20002b08 	.word	0x20002b08

000288bc <_impl_k_uptime_get>:
{
   288bc:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   288be:	f7ff ffef 	bl	288a0 <_tick_get>
   288c2:	008c      	lsls	r4, r1, #2
   288c4:	0082      	lsls	r2, r0, #2
   288c6:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   288ca:	1880      	adds	r0, r0, r2
   288cc:	4159      	adcs	r1, r3
   288ce:	1800      	adds	r0, r0, r0
   288d0:	4149      	adcs	r1, r1
}
   288d2:	bd10      	pop	{r4, pc}

000288d4 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   288d4:	b570      	push	{r4, r5, r6, lr}
   288d6:	b082      	sub	sp, #8
   288d8:	4605      	mov	r5, r0
	__asm__ volatile(
   288da:	f04f 0320 	mov.w	r3, #32
   288de:	f3ef 8011 	mrs	r0, BASEPRI
   288e2:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   288e6:	496a      	ldr	r1, [pc, #424]	; (28a90 <_nano_sys_clock_tick_announce+0x1bc>)
   288e8:	e9d1 2300 	ldrd	r2, r3, [r1]
   288ec:	1952      	adds	r2, r2, r5
   288ee:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   288f2:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288f6:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   288fa:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   288fe:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   28902:	f04f 0320 	mov.w	r3, #32
   28906:	f3ef 8111 	mrs	r1, BASEPRI
   2890a:	f383 8811 	msr	BASEPRI, r3
   2890e:	4608      	mov	r0, r1
	return list->head == list;
   28910:	4b60      	ldr	r3, [pc, #384]	; (28a94 <_nano_sys_clock_tick_announce+0x1c0>)
   28912:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28916:	429a      	cmp	r2, r3
   28918:	d02b      	beq.n	28972 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   2891a:	b362      	cbz	r2, 28976 <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   2891c:	6913      	ldr	r3, [r2, #16]
   2891e:	1b5b      	subs	r3, r3, r5
   28920:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   28922:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   28924:	2101      	movs	r1, #1
   28926:	4a5c      	ldr	r2, [pc, #368]	; (28a98 <_nano_sys_clock_tick_announce+0x1c4>)
   28928:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   2892a:	b33b      	cbz	r3, 2897c <_nano_sys_clock_tick_announce+0xa8>
   2892c:	691a      	ldr	r2, [r3, #16]
   2892e:	bb2a      	cbnz	r2, 2897c <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   28930:	685a      	ldr	r2, [r3, #4]
   28932:	6819      	ldr	r1, [r3, #0]
   28934:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28936:	681a      	ldr	r2, [r3, #0]
   28938:	6859      	ldr	r1, [r3, #4]
   2893a:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   2893c:	aa02      	add	r2, sp, #8
   2893e:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   28942:	6019      	str	r1, [r3, #0]
	node->prev = list;
   28944:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   28946:	9a00      	ldr	r2, [sp, #0]
   28948:	6053      	str	r3, [r2, #4]
	list->head = node;
   2894a:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   2894c:	f06f 0201 	mvn.w	r2, #1
   28950:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28952:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   28956:	f04f 0220 	mov.w	r2, #32
   2895a:	f3ef 8311 	mrs	r3, BASEPRI
   2895e:	f382 8811 	msr	BASEPRI, r2
   28962:	4618      	mov	r0, r3
	return list->head == list;
   28964:	4a4b      	ldr	r2, [pc, #300]	; (28a94 <_nano_sys_clock_tick_announce+0x1c0>)
   28966:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2896a:	4293      	cmp	r3, r2
   2896c:	d1dd      	bne.n	2892a <_nano_sys_clock_tick_announce+0x56>
   2896e:	2300      	movs	r3, #0
   28970:	e7db      	b.n	2892a <_nano_sys_clock_tick_announce+0x56>
   28972:	2200      	movs	r2, #0
   28974:	e7d1      	b.n	2891a <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28976:	f381 8811 	msr	BASEPRI, r1
   2897a:	e084      	b.n	28a86 <_nano_sys_clock_tick_announce+0x1b2>
   2897c:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   28980:	aa02      	add	r2, sp, #8
   28982:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28986:	4293      	cmp	r3, r2
   28988:	d00d      	beq.n	289a6 <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   2898a:	b193      	cbz	r3, 289b2 <_nano_sys_clock_tick_announce+0xde>
   2898c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2898e:	b163      	cbz	r3, 289aa <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   28990:	9901      	ldr	r1, [sp, #4]
   28992:	428b      	cmp	r3, r1
   28994:	d00b      	beq.n	289ae <_nano_sys_clock_tick_announce+0xda>
   28996:	6819      	ldr	r1, [r3, #0]
   28998:	b169      	cbz	r1, 289b6 <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2899a:	b172      	cbz	r2, 289ba <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   2899c:	9901      	ldr	r1, [sp, #4]
   2899e:	428a      	cmp	r2, r1
   289a0:	d00d      	beq.n	289be <_nano_sys_clock_tick_announce+0xea>
   289a2:	681c      	ldr	r4, [r3, #0]
   289a4:	e027      	b.n	289f6 <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   289a6:	2300      	movs	r3, #0
   289a8:	e7ef      	b.n	2898a <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289aa:	4619      	mov	r1, r3
   289ac:	e7f4      	b.n	28998 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   289ae:	2100      	movs	r1, #0
   289b0:	e7f2      	b.n	28998 <_nano_sys_clock_tick_announce+0xc4>
   289b2:	461c      	mov	r4, r3
   289b4:	e01f      	b.n	289f6 <_nano_sys_clock_tick_announce+0x122>
   289b6:	2400      	movs	r4, #0
   289b8:	e01d      	b.n	289f6 <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289ba:	2400      	movs	r4, #0
   289bc:	e01b      	b.n	289f6 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   289be:	2400      	movs	r4, #0
   289c0:	e019      	b.n	289f6 <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   289c2:	2301      	movs	r3, #1
   289c4:	e000      	b.n	289c8 <_nano_sys_clock_tick_announce+0xf4>
   289c6:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   289c8:	2b00      	cmp	r3, #0
   289ca:	d142      	bne.n	28a52 <_nano_sys_clock_tick_announce+0x17e>
   289cc:	f386 8811 	msr	BASEPRI, r6
   289d0:	2c00      	cmp	r4, #0
   289d2:	d04d      	beq.n	28a70 <_nano_sys_clock_tick_announce+0x19c>
   289d4:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289d6:	2c00      	cmp	r4, #0
   289d8:	d046      	beq.n	28a68 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   289da:	9a01      	ldr	r2, [sp, #4]
   289dc:	4294      	cmp	r4, r2
   289de:	d045      	beq.n	28a6c <_nano_sys_clock_tick_announce+0x198>
   289e0:	6822      	ldr	r2, [r4, #0]
   289e2:	2a00      	cmp	r2, #0
   289e4:	d046      	beq.n	28a74 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289e6:	2b00      	cmp	r3, #0
   289e8:	d046      	beq.n	28a78 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   289ea:	9a01      	ldr	r2, [sp, #4]
   289ec:	4293      	cmp	r3, r2
   289ee:	d045      	beq.n	28a7c <_nano_sys_clock_tick_announce+0x1a8>
   289f0:	6822      	ldr	r2, [r4, #0]
   289f2:	4623      	mov	r3, r4
   289f4:	4614      	mov	r4, r2
   289f6:	2b00      	cmp	r3, #0
   289f8:	d042      	beq.n	28a80 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   289fa:	685a      	ldr	r2, [r3, #4]
   289fc:	6819      	ldr	r1, [r3, #0]
   289fe:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28a00:	681a      	ldr	r2, [r3, #0]
   28a02:	6859      	ldr	r1, [r3, #4]
   28a04:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   28a06:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   28a08:	f04f 0220 	mov.w	r2, #32
   28a0c:	f3ef 8611 	mrs	r6, BASEPRI
   28a10:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   28a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28a18:	611a      	str	r2, [r3, #16]
	if (thread) {
   28a1a:	b1e8      	cbz	r0, 28a58 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   28a1c:	68db      	ldr	r3, [r3, #12]
   28a1e:	b15b      	cbz	r3, 28a38 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   28a20:	6843      	ldr	r3, [r0, #4]
   28a22:	6802      	ldr	r2, [r0, #0]
   28a24:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28a26:	6803      	ldr	r3, [r0, #0]
   28a28:	6842      	ldr	r2, [r0, #4]
   28a2a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28a2c:	7a43      	ldrb	r3, [r0, #9]
   28a2e:	f023 0302 	bic.w	r3, r3, #2
   28a32:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28a34:	2300      	movs	r3, #0
   28a36:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28a38:	7a43      	ldrb	r3, [r0, #9]
   28a3a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28a3e:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28a40:	f013 0f1b 	tst.w	r3, #27
   28a44:	d1bf      	bne.n	289c6 <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28a46:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28a4c:	d0b9      	beq.n	289c2 <_nano_sys_clock_tick_announce+0xee>
   28a4e:	2300      	movs	r3, #0
   28a50:	e7ba      	b.n	289c8 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   28a52:	f7ff fba1 	bl	28198 <_add_thread_to_ready_q>
   28a56:	e7b9      	b.n	289cc <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a58:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28a5c:	695a      	ldr	r2, [r3, #20]
   28a5e:	2a00      	cmp	r2, #0
   28a60:	d0b6      	beq.n	289d0 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   28a62:	4618      	mov	r0, r3
   28a64:	4790      	blx	r2
   28a66:	e7b3      	b.n	289d0 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a68:	4622      	mov	r2, r4
   28a6a:	e7ba      	b.n	289e2 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   28a6c:	2200      	movs	r2, #0
   28a6e:	e7b8      	b.n	289e2 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   28a70:	4622      	mov	r2, r4
   28a72:	e7be      	b.n	289f2 <_nano_sys_clock_tick_announce+0x11e>
   28a74:	2200      	movs	r2, #0
   28a76:	e7bc      	b.n	289f2 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a78:	2200      	movs	r2, #0
   28a7a:	e7ba      	b.n	289f2 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   28a7c:	2200      	movs	r2, #0
   28a7e:	e7b8      	b.n	289f2 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   28a80:	2200      	movs	r2, #0
   28a82:	4b05      	ldr	r3, [pc, #20]	; (28a98 <_nano_sys_clock_tick_announce+0x1c4>)
   28a84:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   28a86:	4628      	mov	r0, r5
   28a88:	f7ff fed4 	bl	28834 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   28a8c:	b002      	add	sp, #8
   28a8e:	bd70      	pop	{r4, r5, r6, pc}
   28a90:	20002b08 	.word	0x20002b08
   28a94:	20002718 	.word	0x20002718
   28a98:	20002b00 	.word	0x20002b00

00028a9c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   28a9c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   28a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28aa6:	4903      	ldr	r1, [pc, #12]	; (28ab4 <k_sys_work_q_init+0x18>)
   28aa8:	4803      	ldr	r0, [pc, #12]	; (28ab8 <k_sys_work_q_init+0x1c>)
   28aaa:	f000 fc49 	bl	29340 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   28aae:	2000      	movs	r0, #0
   28ab0:	bd08      	pop	{r3, pc}
   28ab2:	bf00      	nop
   28ab4:	2000b400 	.word	0x2000b400
   28ab8:	20002b10 	.word	0x20002b10

00028abc <k_is_in_isr>:
   28abc:	f3ef 8305 	mrs	r3, IPSR
   28ac0:	2b0d      	cmp	r3, #13
   28ac2:	d807      	bhi.n	28ad4 <k_is_in_isr+0x18>
   28ac4:	b143      	cbz	r3, 28ad8 <k_is_in_isr+0x1c>
   28ac6:	4b06      	ldr	r3, [pc, #24]	; (28ae0 <k_is_in_isr+0x24>)
   28ac8:	685b      	ldr	r3, [r3, #4]
   28aca:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28ace:	d005      	beq.n	28adc <k_is_in_isr+0x20>
   28ad0:	2000      	movs	r0, #0
   28ad2:	4770      	bx	lr
   28ad4:	2001      	movs	r0, #1
   28ad6:	4770      	bx	lr
   28ad8:	2000      	movs	r0, #0
   28ada:	4770      	bx	lr
   28adc:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   28ade:	4770      	bx	lr
   28ae0:	e000ed00 	.word	0xe000ed00

00028ae4 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   28ae4:	4b02      	ldr	r3, [pc, #8]	; (28af0 <_is_thread_essential+0xc>)
   28ae6:	689b      	ldr	r3, [r3, #8]
   28ae8:	7a18      	ldrb	r0, [r3, #8]
}
   28aea:	f000 0001 	and.w	r0, r0, #1
   28aee:	4770      	bx	lr
   28af0:	20002718 	.word	0x20002718

00028af4 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28af4:	b508      	push	{r3, lr}
   28af6:	4604      	mov	r4, r0
   28af8:	4608      	mov	r0, r1
   28afa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   28afc:	461a      	mov	r2, r3
   28afe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   28b00:	f7ff fcae 	bl	28460 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   28b04:	f7fe facc 	bl	270a0 <_impl_k_thread_abort>

00028b08 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   28b08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28b0a:	f04f 0320 	mov.w	r3, #32
   28b0e:	f3ef 8411 	mrs	r4, BASEPRI
   28b12:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   28b16:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   28b18:	f013 0f04 	tst.w	r3, #4
   28b1c:	d00b      	beq.n	28b36 <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28b1e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28b22:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28b24:	f013 0f1b 	tst.w	r3, #27
   28b28:	d10a      	bne.n	28b40 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28b2a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28b30:	d004      	beq.n	28b3c <_impl_k_thread_start+0x34>
   28b32:	2500      	movs	r5, #0
   28b34:	e005      	b.n	28b42 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b36:	f384 8811 	msr	BASEPRI, r4
   28b3a:	bd38      	pop	{r3, r4, r5, pc}
   28b3c:	2501      	movs	r5, #1
   28b3e:	e000      	b.n	28b42 <_impl_k_thread_start+0x3a>
   28b40:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   28b42:	b915      	cbnz	r5, 28b4a <_impl_k_thread_start+0x42>
   28b44:	f384 8811 	msr	BASEPRI, r4
   28b48:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28b4a:	f7ff fb25 	bl	28198 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   28b4e:	4b0a      	ldr	r3, [pc, #40]	; (28b78 <_impl_k_thread_start+0x70>)
   28b50:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28b52:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28b54:	2b7f      	cmp	r3, #127	; 0x7f
   28b56:	d908      	bls.n	28b6a <_impl_k_thread_start+0x62>
   28b58:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   28b5a:	2b00      	cmp	r3, #0
   28b5c:	d0f2      	beq.n	28b44 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   28b5e:	f7ff fcad 	bl	284bc <_update_time_slice_before_swap>
	return __swap(key);
   28b62:	4620      	mov	r0, r4
   28b64:	f7fd fff0 	bl	26b48 <__swap>
   28b68:	bd38      	pop	{r3, r4, r5, pc}
   28b6a:	f7ff fc39 	bl	283e0 <__must_switch_threads>
   28b6e:	4603      	mov	r3, r0
   28b70:	2800      	cmp	r0, #0
   28b72:	d0f2      	beq.n	28b5a <_impl_k_thread_start+0x52>
   28b74:	462b      	mov	r3, r5
   28b76:	e7f0      	b.n	28b5a <_impl_k_thread_start+0x52>
   28b78:	20002718 	.word	0x20002718

00028b7c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   28b7c:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   28b7e:	b1d1      	cbz	r1, 28bb6 <schedule_new_thread+0x3a>
   28b80:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28b82:	3309      	adds	r3, #9
   28b84:	4a47      	ldr	r2, [pc, #284]	; (28ca4 <schedule_new_thread+0x128>)
   28b86:	fba2 2303 	umull	r2, r3, r2, r3
   28b8a:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   28b8c:	3301      	adds	r3, #1
	__asm__ volatile(
   28b8e:	f04f 0220 	mov.w	r2, #32
   28b92:	f3ef 8511 	mrs	r5, BASEPRI
   28b96:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28b9a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28b9e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28ba0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28ba2:	2200      	movs	r2, #0
   28ba4:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28ba6:	b14b      	cbz	r3, 28bbc <schedule_new_thread+0x40>
	return list->head == list;
   28ba8:	4a3f      	ldr	r2, [pc, #252]	; (28ca8 <schedule_new_thread+0x12c>)
   28baa:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28bae:	4293      	cmp	r3, r2
   28bb0:	d152      	bne.n	28c58 <schedule_new_thread+0xdc>
   28bb2:	2300      	movs	r3, #0
   28bb4:	e050      	b.n	28c58 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   28bb6:	f7ff ffa7 	bl	28b08 <_impl_k_thread_start>
   28bba:	bd70      	pop	{r4, r5, r6, pc}
   28bbc:	f04f 0320 	mov.w	r3, #32
   28bc0:	f3ef 8611 	mrs	r6, BASEPRI
   28bc4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28bcc:	6123      	str	r3, [r4, #16]
	if (thread) {
   28bce:	b320      	cbz	r0, 28c1a <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   28bd0:	68e3      	ldr	r3, [r4, #12]
   28bd2:	b15b      	cbz	r3, 28bec <schedule_new_thread+0x70>
	node->prev->next = node->next;
   28bd4:	6843      	ldr	r3, [r0, #4]
   28bd6:	6802      	ldr	r2, [r0, #0]
   28bd8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28bda:	6803      	ldr	r3, [r0, #0]
   28bdc:	6842      	ldr	r2, [r0, #4]
   28bde:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28be0:	7a43      	ldrb	r3, [r0, #9]
   28be2:	f023 0302 	bic.w	r3, r3, #2
   28be6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28be8:	2300      	movs	r3, #0
   28bea:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28bec:	7a43      	ldrb	r3, [r0, #9]
   28bee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28bf2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28bf4:	f013 0f1b 	tst.w	r3, #27
   28bf8:	d107      	bne.n	28c0a <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28bfa:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28c00:	d001      	beq.n	28c06 <schedule_new_thread+0x8a>
   28c02:	2300      	movs	r3, #0
   28c04:	e002      	b.n	28c0c <schedule_new_thread+0x90>
   28c06:	2301      	movs	r3, #1
   28c08:	e000      	b.n	28c0c <schedule_new_thread+0x90>
   28c0a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28c0c:	b913      	cbnz	r3, 28c14 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c0e:	f386 8811 	msr	BASEPRI, r6
   28c12:	e044      	b.n	28c9e <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   28c14:	f7ff fac0 	bl	28198 <_add_thread_to_ready_q>
   28c18:	e7f9      	b.n	28c0e <schedule_new_thread+0x92>
   28c1a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28c1e:	6963      	ldr	r3, [r4, #20]
   28c20:	2b00      	cmp	r3, #0
   28c22:	d03c      	beq.n	28c9e <schedule_new_thread+0x122>
			timeout->func(timeout);
   28c24:	4620      	mov	r0, r4
   28c26:	4798      	blx	r3
   28c28:	e039      	b.n	28c9e <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   28c2a:	1a8a      	subs	r2, r1, r2
   28c2c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28c2e:	b133      	cbz	r3, 28c3e <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   28c30:	685a      	ldr	r2, [r3, #4]
   28c32:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28c34:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28c36:	685a      	ldr	r2, [r3, #4]
   28c38:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28c3a:	605c      	str	r4, [r3, #4]
   28c3c:	e02f      	b.n	28c9e <schedule_new_thread+0x122>
	node->next = list;
   28c3e:	4b1b      	ldr	r3, [pc, #108]	; (28cac <schedule_new_thread+0x130>)
   28c40:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28c42:	685a      	ldr	r2, [r3, #4]
   28c44:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28c46:	685a      	ldr	r2, [r3, #4]
   28c48:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28c4a:	605c      	str	r4, [r3, #4]
   28c4c:	e027      	b.n	28c9e <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c4e:	4619      	mov	r1, r3
   28c50:	e011      	b.n	28c76 <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   28c52:	2100      	movs	r1, #0
   28c54:	e00f      	b.n	28c76 <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28c56:	2300      	movs	r3, #0
   28c58:	b1d3      	cbz	r3, 28c90 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28c5a:	6922      	ldr	r2, [r4, #16]
   28c5c:	6919      	ldr	r1, [r3, #16]
   28c5e:	428a      	cmp	r2, r1
   28c60:	dde3      	ble.n	28c2a <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   28c62:	1a52      	subs	r2, r2, r1
   28c64:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28c66:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c68:	2b00      	cmp	r3, #0
   28c6a:	d0f0      	beq.n	28c4e <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28c6c:	490e      	ldr	r1, [pc, #56]	; (28ca8 <schedule_new_thread+0x12c>)
   28c6e:	6909      	ldr	r1, [r1, #16]
   28c70:	428b      	cmp	r3, r1
   28c72:	d0ee      	beq.n	28c52 <schedule_new_thread+0xd6>
   28c74:	6819      	ldr	r1, [r3, #0]
   28c76:	2900      	cmp	r1, #0
   28c78:	d0ed      	beq.n	28c56 <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c7a:	b12a      	cbz	r2, 28c88 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   28c7c:	490a      	ldr	r1, [pc, #40]	; (28ca8 <schedule_new_thread+0x12c>)
   28c7e:	6909      	ldr	r1, [r1, #16]
   28c80:	428a      	cmp	r2, r1
   28c82:	d003      	beq.n	28c8c <schedule_new_thread+0x110>
   28c84:	681b      	ldr	r3, [r3, #0]
   28c86:	e7e7      	b.n	28c58 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c88:	2300      	movs	r3, #0
   28c8a:	e7e5      	b.n	28c58 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   28c8c:	2300      	movs	r3, #0
   28c8e:	e7e3      	b.n	28c58 <schedule_new_thread+0xdc>
	node->next = list;
   28c90:	4b06      	ldr	r3, [pc, #24]	; (28cac <schedule_new_thread+0x130>)
   28c92:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28c94:	685a      	ldr	r2, [r3, #4]
   28c96:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28c98:	685a      	ldr	r2, [r3, #4]
   28c9a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28c9c:	605c      	str	r4, [r3, #4]
   28c9e:	f385 8811 	msr	BASEPRI, r5
   28ca2:	bd70      	pop	{r4, r5, r6, pc}
   28ca4:	cccccccd 	.word	0xcccccccd
   28ca8:	20002718 	.word	0x20002718
   28cac:	20002724 	.word	0x20002724

00028cb0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   28cb0:	b510      	push	{r4, lr}
   28cb2:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28cb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28cb6:	9404      	str	r4, [sp, #16]
   28cb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   28cba:	9403      	str	r4, [sp, #12]
   28cbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28cbe:	9402      	str	r4, [sp, #8]
   28cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   28cc2:	9401      	str	r4, [sp, #4]
   28cc4:	9c08      	ldr	r4, [sp, #32]
   28cc6:	9400      	str	r4, [sp, #0]
   28cc8:	f7fe f940 	bl	26f4c <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   28ccc:	b006      	add	sp, #24
   28cce:	bd10      	pop	{r4, pc}

00028cd0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   28cd0:	b570      	push	{r4, r5, r6, lr}
   28cd2:	b086      	sub	sp, #24
   28cd4:	4604      	mov	r4, r0
   28cd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28cd8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   28cda:	9604      	str	r6, [sp, #16]
   28cdc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   28cde:	9603      	str	r6, [sp, #12]
   28ce0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   28ce2:	9602      	str	r6, [sp, #8]
   28ce4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   28ce6:	9601      	str	r6, [sp, #4]
   28ce8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   28cea:	9600      	str	r6, [sp, #0]
   28cec:	f7ff ffe0 	bl	28cb0 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   28cf0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28cf4:	d003      	beq.n	28cfe <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   28cf6:	4629      	mov	r1, r5
   28cf8:	4620      	mov	r0, r4
   28cfa:	f7ff ff3f 	bl	28b7c <schedule_new_thread>
	}
	return new_thread;
}
   28cfe:	4620      	mov	r0, r4
   28d00:	b006      	add	sp, #24
   28d02:	bd70      	pop	{r4, r5, r6, pc}

00028d04 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   28d04:	b510      	push	{r4, lr}
   28d06:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   28d08:	6d03      	ldr	r3, [r0, #80]	; 0x50
   28d0a:	b103      	cbz	r3, 28d0e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   28d0c:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   28d0e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28d10:	f013 0f1f 	tst.w	r3, #31
   28d14:	d107      	bne.n	28d26 <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d16:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28d18:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28d1c:	d001      	beq.n	28d22 <_k_thread_single_abort+0x1e>
   28d1e:	2200      	movs	r2, #0
   28d20:	e002      	b.n	28d28 <_k_thread_single_abort+0x24>
   28d22:	2201      	movs	r2, #1
   28d24:	e000      	b.n	28d28 <_k_thread_single_abort+0x24>
   28d26:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   28d28:	bb4a      	cbnz	r2, 28d7e <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   28d2a:	f013 0f02 	tst.w	r3, #2
   28d2e:	d009      	beq.n	28d44 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   28d30:	6863      	ldr	r3, [r4, #4]
   28d32:	6822      	ldr	r2, [r4, #0]
   28d34:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28d36:	6823      	ldr	r3, [r4, #0]
   28d38:	6862      	ldr	r2, [r4, #4]
   28d3a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28d3c:	7a63      	ldrb	r3, [r4, #9]
   28d3e:	f023 0302 	bic.w	r3, r3, #2
   28d42:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d44:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   28d46:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28d4a:	d013      	beq.n	28d74 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28d4c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28d50:	4a0d      	ldr	r2, [pc, #52]	; (28d88 <_k_thread_single_abort+0x84>)
   28d52:	6912      	ldr	r2, [r2, #16]
   28d54:	4293      	cmp	r3, r2
   28d56:	d004      	beq.n	28d62 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28d58:	b103      	cbz	r3, 28d5c <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   28d5a:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28d5c:	691a      	ldr	r2, [r3, #16]
   28d5e:	440a      	add	r2, r1
   28d60:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28d62:	6963      	ldr	r3, [r4, #20]
   28d64:	6922      	ldr	r2, [r4, #16]
   28d66:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28d68:	6923      	ldr	r3, [r4, #16]
   28d6a:	6962      	ldr	r2, [r4, #20]
   28d6c:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d72:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   28d74:	7a63      	ldrb	r3, [r4, #9]
   28d76:	f043 0308 	orr.w	r3, r3, #8
   28d7a:	7263      	strb	r3, [r4, #9]
   28d7c:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   28d7e:	4620      	mov	r0, r4
   28d80:	f7ff fa2a 	bl	281d8 <_remove_thread_from_ready_q>
   28d84:	e7f6      	b.n	28d74 <_k_thread_single_abort+0x70>
   28d86:	bf00      	nop
   28d88:	20002718 	.word	0x20002718

00028d8c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   28d8c:	b530      	push	{r4, r5, lr}
   28d8e:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   28d90:	4c1b      	ldr	r4, [pc, #108]	; (28e00 <_init_static_threads+0x74>)
   28d92:	e012      	b.n	28dba <_init_static_threads+0x2e>
		_setup_new_thread(
   28d94:	6a23      	ldr	r3, [r4, #32]
   28d96:	9304      	str	r3, [sp, #16]
   28d98:	69e3      	ldr	r3, [r4, #28]
   28d9a:	9303      	str	r3, [sp, #12]
   28d9c:	69a3      	ldr	r3, [r4, #24]
   28d9e:	9302      	str	r3, [sp, #8]
   28da0:	6963      	ldr	r3, [r4, #20]
   28da2:	9301      	str	r3, [sp, #4]
   28da4:	6923      	ldr	r3, [r4, #16]
   28da6:	9300      	str	r3, [sp, #0]
   28da8:	68e3      	ldr	r3, [r4, #12]
   28daa:	68a2      	ldr	r2, [r4, #8]
   28dac:	6861      	ldr	r1, [r4, #4]
   28dae:	6820      	ldr	r0, [r4, #0]
   28db0:	f7ff ff7e 	bl	28cb0 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   28db4:	6823      	ldr	r3, [r4, #0]
   28db6:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   28db8:	3430      	adds	r4, #48	; 0x30
   28dba:	4b12      	ldr	r3, [pc, #72]	; (28e04 <_init_static_threads+0x78>)
   28dbc:	429c      	cmp	r4, r3
   28dbe:	d3e9      	bcc.n	28d94 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   28dc0:	4b11      	ldr	r3, [pc, #68]	; (28e08 <_init_static_threads+0x7c>)
   28dc2:	689a      	ldr	r2, [r3, #8]
   28dc4:	7ad3      	ldrb	r3, [r2, #11]
   28dc6:	3b01      	subs	r3, #1
   28dc8:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   28dca:	f04f 0320 	mov.w	r3, #32
   28dce:	f3ef 8511 	mrs	r5, BASEPRI
   28dd2:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   28dd6:	4c0a      	ldr	r4, [pc, #40]	; (28e00 <_init_static_threads+0x74>)
   28dd8:	e000      	b.n	28ddc <_init_static_threads+0x50>
   28dda:	3430      	adds	r4, #48	; 0x30
   28ddc:	4b09      	ldr	r3, [pc, #36]	; (28e04 <_init_static_threads+0x78>)
   28dde:	429c      	cmp	r4, r3
   28de0:	d207      	bcs.n	28df2 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   28de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28de4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28de8:	d0f7      	beq.n	28dda <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   28dea:	6820      	ldr	r0, [r4, #0]
   28dec:	f7ff fec6 	bl	28b7c <schedule_new_thread>
   28df0:	e7f3      	b.n	28dda <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28df2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   28df6:	f7ff fb81 	bl	284fc <k_sched_unlock>
}
   28dfa:	b007      	add	sp, #28
   28dfc:	bd30      	pop	{r4, r5, pc}
   28dfe:	bf00      	nop
   28e00:	2000cf8c 	.word	0x2000cf8c
   28e04:	2000cf8c 	.word	0x2000cf8c
   28e08:	20002718 	.word	0x20002718

00028e0c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   28e0c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   28e0e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   28e10:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   28e12:	2300      	movs	r3, #0
   28e14:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   28e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28e1a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   28e1c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   28e1e:	6183      	str	r3, [r0, #24]
	t->func = func;
   28e20:	6243      	str	r3, [r0, #36]	; 0x24
   28e22:	4770      	bx	lr

00028e24 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   28e24:	b570      	push	{r4, r5, r6, lr}
   28e26:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   28e28:	6a83      	ldr	r3, [r0, #40]	; 0x28
   28e2a:	2b00      	cmp	r3, #0
   28e2c:	f340 8088 	ble.w	28f40 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   28e30:	f04f 0320 	mov.w	r3, #32
   28e34:	f3ef 8511 	mrs	r5, BASEPRI
   28e38:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   28e3c:	f100 0218 	add.w	r2, r0, #24
   28e40:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28e42:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   28e44:	2100      	movs	r1, #0
   28e46:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28e48:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   28e4a:	b133      	cbz	r3, 28e5a <_timer_expiration_handler+0x36>
	return list->head == list;
   28e4c:	4a59      	ldr	r2, [pc, #356]	; (28fb4 <_timer_expiration_handler+0x190>)
   28e4e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e52:	4293      	cmp	r3, r2
   28e54:	d14f      	bne.n	28ef6 <_timer_expiration_handler+0xd2>
   28e56:	2300      	movs	r3, #0
   28e58:	e04d      	b.n	28ef6 <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   28e5a:	4608      	mov	r0, r1
   28e5c:	f04f 0320 	mov.w	r3, #32
   28e60:	f3ef 8611 	mrs	r6, BASEPRI
   28e64:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28e6c:	6123      	str	r3, [r4, #16]
	if (thread) {
   28e6e:	b319      	cbz	r1, 28eb8 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   28e70:	68e3      	ldr	r3, [r4, #12]
   28e72:	b153      	cbz	r3, 28e8a <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   28e74:	684b      	ldr	r3, [r1, #4]
   28e76:	680a      	ldr	r2, [r1, #0]
   28e78:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28e7a:	680b      	ldr	r3, [r1, #0]
   28e7c:	684a      	ldr	r2, [r1, #4]
   28e7e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e80:	7a4b      	ldrb	r3, [r1, #9]
   28e82:	f023 0302 	bic.w	r3, r3, #2
   28e86:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   28e88:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28e8a:	7a43      	ldrb	r3, [r0, #9]
   28e8c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e90:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28e92:	f013 0f1b 	tst.w	r3, #27
   28e96:	d107      	bne.n	28ea8 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28e98:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28e9e:	d001      	beq.n	28ea4 <_timer_expiration_handler+0x80>
   28ea0:	2300      	movs	r3, #0
   28ea2:	e002      	b.n	28eaa <_timer_expiration_handler+0x86>
   28ea4:	2301      	movs	r3, #1
   28ea6:	e000      	b.n	28eaa <_timer_expiration_handler+0x86>
   28ea8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28eaa:	b913      	cbnz	r3, 28eb2 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28eac:	f386 8811 	msr	BASEPRI, r6
   28eb0:	e044      	b.n	28f3c <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   28eb2:	f7ff f971 	bl	28198 <_add_thread_to_ready_q>
   28eb6:	e7f9      	b.n	28eac <_timer_expiration_handler+0x88>
   28eb8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28ebc:	6963      	ldr	r3, [r4, #20]
   28ebe:	2b00      	cmp	r3, #0
   28ec0:	d03c      	beq.n	28f3c <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   28ec2:	4620      	mov	r0, r4
   28ec4:	4798      	blx	r3
   28ec6:	e039      	b.n	28f3c <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   28ec8:	1a8a      	subs	r2, r1, r2
   28eca:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28ecc:	b133      	cbz	r3, 28edc <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   28ece:	685a      	ldr	r2, [r3, #4]
   28ed0:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28ed2:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   28ed4:	685a      	ldr	r2, [r3, #4]
   28ed6:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28ed8:	605c      	str	r4, [r3, #4]
   28eda:	e02f      	b.n	28f3c <_timer_expiration_handler+0x118>
	node->next = list;
   28edc:	4b36      	ldr	r3, [pc, #216]	; (28fb8 <_timer_expiration_handler+0x194>)
   28ede:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28ee0:	685a      	ldr	r2, [r3, #4]
   28ee2:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28ee4:	685a      	ldr	r2, [r3, #4]
   28ee6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28ee8:	605c      	str	r4, [r3, #4]
   28eea:	e027      	b.n	28f3c <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eec:	4619      	mov	r1, r3
   28eee:	e011      	b.n	28f14 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28ef0:	2100      	movs	r1, #0
   28ef2:	e00f      	b.n	28f14 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28ef4:	2300      	movs	r3, #0
   28ef6:	b1d3      	cbz	r3, 28f2e <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28ef8:	6902      	ldr	r2, [r0, #16]
   28efa:	6919      	ldr	r1, [r3, #16]
   28efc:	428a      	cmp	r2, r1
   28efe:	dde3      	ble.n	28ec8 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   28f00:	1a52      	subs	r2, r2, r1
   28f02:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28f04:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f06:	2b00      	cmp	r3, #0
   28f08:	d0f0      	beq.n	28eec <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   28f0a:	492a      	ldr	r1, [pc, #168]	; (28fb4 <_timer_expiration_handler+0x190>)
   28f0c:	6909      	ldr	r1, [r1, #16]
   28f0e:	428b      	cmp	r3, r1
   28f10:	d0ee      	beq.n	28ef0 <_timer_expiration_handler+0xcc>
   28f12:	6819      	ldr	r1, [r3, #0]
   28f14:	2900      	cmp	r1, #0
   28f16:	d0ed      	beq.n	28ef4 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f18:	b12a      	cbz	r2, 28f26 <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   28f1a:	4926      	ldr	r1, [pc, #152]	; (28fb4 <_timer_expiration_handler+0x190>)
   28f1c:	6909      	ldr	r1, [r1, #16]
   28f1e:	428a      	cmp	r2, r1
   28f20:	d003      	beq.n	28f2a <_timer_expiration_handler+0x106>
   28f22:	681b      	ldr	r3, [r3, #0]
   28f24:	e7e7      	b.n	28ef6 <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f26:	2300      	movs	r3, #0
   28f28:	e7e5      	b.n	28ef6 <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28f2a:	2300      	movs	r3, #0
   28f2c:	e7e3      	b.n	28ef6 <_timer_expiration_handler+0xd2>
	node->next = list;
   28f2e:	4b22      	ldr	r3, [pc, #136]	; (28fb8 <_timer_expiration_handler+0x194>)
   28f30:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28f32:	685a      	ldr	r2, [r3, #4]
   28f34:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28f36:	685a      	ldr	r2, [r3, #4]
   28f38:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f3a:	605c      	str	r4, [r3, #4]
   28f3c:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   28f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f42:	3301      	adds	r3, #1
   28f44:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   28f46:	6a23      	ldr	r3, [r4, #32]
   28f48:	b10b      	cbz	r3, 28f4e <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   28f4a:	4620      	mov	r0, r4
   28f4c:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   28f4e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   28f52:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f54:	42a3      	cmp	r3, r4
   28f56:	d01d      	beq.n	28f94 <_timer_expiration_handler+0x170>

	if (!thread) {
   28f58:	b334      	cbz	r4, 28fa8 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   28f5a:	6863      	ldr	r3, [r4, #4]
   28f5c:	6822      	ldr	r2, [r4, #0]
   28f5e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f60:	6823      	ldr	r3, [r4, #0]
   28f62:	6862      	ldr	r2, [r4, #4]
   28f64:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28f66:	7a63      	ldrb	r3, [r4, #9]
   28f68:	f023 0302 	bic.w	r3, r3, #2
   28f6c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   28f6e:	f04f 0320 	mov.w	r3, #32
   28f72:	f3ef 8511 	mrs	r5, BASEPRI
   28f76:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28f7a:	7a63      	ldrb	r3, [r4, #9]
   28f7c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28f80:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28f82:	f013 0f1b 	tst.w	r3, #27
   28f86:	d109      	bne.n	28f9c <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28f88:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28f8e:	d003      	beq.n	28f98 <_timer_expiration_handler+0x174>
   28f90:	2300      	movs	r3, #0
   28f92:	e004      	b.n	28f9e <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f94:	2400      	movs	r4, #0
   28f96:	e7df      	b.n	28f58 <_timer_expiration_handler+0x134>
   28f98:	2301      	movs	r3, #1
   28f9a:	e000      	b.n	28f9e <_timer_expiration_handler+0x17a>
   28f9c:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28f9e:	b923      	cbnz	r3, 28faa <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28fa0:	f385 8811 	msr	BASEPRI, r5
   28fa4:	2300      	movs	r3, #0
   28fa6:	6663      	str	r3, [r4, #100]	; 0x64
   28fa8:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28faa:	4620      	mov	r0, r4
   28fac:	f7ff f8f4 	bl	28198 <_add_thread_to_ready_q>
   28fb0:	e7f6      	b.n	28fa0 <_timer_expiration_handler+0x17c>
   28fb2:	bf00      	nop
   28fb4:	20002718 	.word	0x20002718
   28fb8:	20002724 	.word	0x20002724

00028fbc <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   28fbc:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   28fbe:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   28fc0:	2300      	movs	r3, #0
   28fc2:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   28fc4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   28fc8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   28fca:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   28fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28fd0:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   28fd2:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   28fd4:	6083      	str	r3, [r0, #8]
	t->func = func;
   28fd6:	4a02      	ldr	r2, [pc, #8]	; (28fe0 <k_timer_init+0x24>)
   28fd8:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   28fda:	6303      	str	r3, [r0, #48]	; 0x30
   28fdc:	4770      	bx	lr
   28fde:	bf00      	nop
   28fe0:	00028e25 	.word	0x00028e25

00028fe4 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   28fe4:	b530      	push	{r4, r5, lr}
   28fe6:	b083      	sub	sp, #12
   28fe8:	3209      	adds	r2, #9
   28fea:	4b57      	ldr	r3, [pc, #348]	; (29148 <_impl_k_timer_start+0x164>)
   28fec:	fba3 4202 	umull	r4, r2, r3, r2
   28ff0:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   28ff2:	9201      	str	r2, [sp, #4]
   28ff4:	3109      	adds	r1, #9
   28ff6:	fba3 3101 	umull	r3, r1, r3, r1
   28ffa:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   28ffc:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   28ffe:	f04f 0320 	mov.w	r3, #32
   29002:	f3ef 8411 	mrs	r4, BASEPRI
   29006:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   2900a:	6901      	ldr	r1, [r0, #16]
   2900c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29010:	d012      	beq.n	29038 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29012:	4603      	mov	r3, r0
	return list->tail == node;
   29014:	4a4d      	ldr	r2, [pc, #308]	; (2914c <_impl_k_timer_start+0x168>)
   29016:	6912      	ldr	r2, [r2, #16]
   29018:	4290      	cmp	r0, r2
   2901a:	d004      	beq.n	29026 <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2901c:	b100      	cbz	r0, 29020 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2901e:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29020:	691a      	ldr	r2, [r3, #16]
   29022:	440a      	add	r2, r1
   29024:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29026:	6843      	ldr	r3, [r0, #4]
   29028:	6802      	ldr	r2, [r0, #0]
   2902a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2902c:	6803      	ldr	r3, [r0, #0]
   2902e:	6842      	ldr	r2, [r0, #4]
   29030:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29036:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29038:	9b01      	ldr	r3, [sp, #4]
   2903a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   2903c:	2200      	movs	r2, #0
   2903e:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29040:	4605      	mov	r5, r0
   29042:	f100 0118 	add.w	r1, r0, #24
   29046:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29048:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2904a:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2904c:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   2904e:	b133      	cbz	r3, 2905e <_impl_k_timer_start+0x7a>
	return list->head == list;
   29050:	4a3e      	ldr	r2, [pc, #248]	; (2914c <_impl_k_timer_start+0x168>)
   29052:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29056:	4293      	cmp	r3, r2
   29058:	d14f      	bne.n	290fa <_impl_k_timer_start+0x116>
   2905a:	2300      	movs	r3, #0
   2905c:	e04d      	b.n	290fa <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   2905e:	4613      	mov	r3, r2
   29060:	f04f 0220 	mov.w	r2, #32
   29064:	f3ef 8511 	mrs	r5, BASEPRI
   29068:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2906c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29070:	6102      	str	r2, [r0, #16]
	if (thread) {
   29072:	b323      	cbz	r3, 290be <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29074:	68c2      	ldr	r2, [r0, #12]
   29076:	b152      	cbz	r2, 2908e <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29078:	685a      	ldr	r2, [r3, #4]
   2907a:	6819      	ldr	r1, [r3, #0]
   2907c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2907e:	681a      	ldr	r2, [r3, #0]
   29080:	6859      	ldr	r1, [r3, #4]
   29082:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29084:	7a5a      	ldrb	r2, [r3, #9]
   29086:	f022 0202 	bic.w	r2, r2, #2
   2908a:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   2908c:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2908e:	7a5a      	ldrb	r2, [r3, #9]
   29090:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29094:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29096:	f012 0f1b 	tst.w	r2, #27
   2909a:	d107      	bne.n	290ac <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2909c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2909e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   290a2:	d001      	beq.n	290a8 <_impl_k_timer_start+0xc4>
   290a4:	2200      	movs	r2, #0
   290a6:	e002      	b.n	290ae <_impl_k_timer_start+0xca>
   290a8:	2201      	movs	r2, #1
   290aa:	e000      	b.n	290ae <_impl_k_timer_start+0xca>
   290ac:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   290ae:	b912      	cbnz	r2, 290b6 <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   290b0:	f385 8811 	msr	BASEPRI, r5
   290b4:	e044      	b.n	29140 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   290b6:	4618      	mov	r0, r3
   290b8:	f7ff f86e 	bl	28198 <_add_thread_to_ready_q>
   290bc:	e7f8      	b.n	290b0 <_impl_k_timer_start+0xcc>
   290be:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   290c2:	6943      	ldr	r3, [r0, #20]
   290c4:	2b00      	cmp	r3, #0
   290c6:	d03b      	beq.n	29140 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   290c8:	4798      	blx	r3
   290ca:	e039      	b.n	29140 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   290cc:	1a8a      	subs	r2, r1, r2
   290ce:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   290d0:	b133      	cbz	r3, 290e0 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   290d2:	685a      	ldr	r2, [r3, #4]
   290d4:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   290d6:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   290d8:	685a      	ldr	r2, [r3, #4]
   290da:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   290dc:	6058      	str	r0, [r3, #4]
   290de:	e02f      	b.n	29140 <_impl_k_timer_start+0x15c>
	node->next = list;
   290e0:	4b1b      	ldr	r3, [pc, #108]	; (29150 <_impl_k_timer_start+0x16c>)
   290e2:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   290e4:	685a      	ldr	r2, [r3, #4]
   290e6:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   290e8:	685a      	ldr	r2, [r3, #4]
   290ea:	6010      	str	r0, [r2, #0]
	list->tail = node;
   290ec:	6058      	str	r0, [r3, #4]
   290ee:	e027      	b.n	29140 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290f0:	4619      	mov	r1, r3
   290f2:	e011      	b.n	29118 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   290f4:	2100      	movs	r1, #0
   290f6:	e00f      	b.n	29118 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   290f8:	2300      	movs	r3, #0
   290fa:	b1d3      	cbz	r3, 29132 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   290fc:	692a      	ldr	r2, [r5, #16]
   290fe:	6919      	ldr	r1, [r3, #16]
   29100:	428a      	cmp	r2, r1
   29102:	dde3      	ble.n	290cc <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29104:	1a52      	subs	r2, r2, r1
   29106:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29108:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2910a:	2b00      	cmp	r3, #0
   2910c:	d0f0      	beq.n	290f0 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2910e:	490f      	ldr	r1, [pc, #60]	; (2914c <_impl_k_timer_start+0x168>)
   29110:	6909      	ldr	r1, [r1, #16]
   29112:	428b      	cmp	r3, r1
   29114:	d0ee      	beq.n	290f4 <_impl_k_timer_start+0x110>
   29116:	6819      	ldr	r1, [r3, #0]
   29118:	2900      	cmp	r1, #0
   2911a:	d0ed      	beq.n	290f8 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2911c:	b12a      	cbz	r2, 2912a <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   2911e:	490b      	ldr	r1, [pc, #44]	; (2914c <_impl_k_timer_start+0x168>)
   29120:	6909      	ldr	r1, [r1, #16]
   29122:	428a      	cmp	r2, r1
   29124:	d003      	beq.n	2912e <_impl_k_timer_start+0x14a>
   29126:	681b      	ldr	r3, [r3, #0]
   29128:	e7e7      	b.n	290fa <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2912a:	2300      	movs	r3, #0
   2912c:	e7e5      	b.n	290fa <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   2912e:	2300      	movs	r3, #0
   29130:	e7e3      	b.n	290fa <_impl_k_timer_start+0x116>
	node->next = list;
   29132:	4b07      	ldr	r3, [pc, #28]	; (29150 <_impl_k_timer_start+0x16c>)
   29134:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29136:	685a      	ldr	r2, [r3, #4]
   29138:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2913a:	685a      	ldr	r2, [r3, #4]
   2913c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2913e:	6058      	str	r0, [r3, #4]
   29140:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29144:	b003      	add	sp, #12
   29146:	bd30      	pop	{r4, r5, pc}
   29148:	cccccccd 	.word	0xcccccccd
   2914c:	20002718 	.word	0x20002718
   29150:	20002724 	.word	0x20002724

00029154 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29154:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29156:	f04f 0320 	mov.w	r3, #32
   2915a:	f3ef 8411 	mrs	r4, BASEPRI
   2915e:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29162:	6903      	ldr	r3, [r0, #16]
   29164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29168:	d042      	beq.n	291f0 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2916a:	4602      	mov	r2, r0
	return list->tail == node;
   2916c:	493b      	ldr	r1, [pc, #236]	; (2925c <_impl_k_timer_stop+0x108>)
   2916e:	6909      	ldr	r1, [r1, #16]
   29170:	4288      	cmp	r0, r1
   29172:	d004      	beq.n	2917e <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29174:	b100      	cbz	r0, 29178 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29176:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29178:	6911      	ldr	r1, [r2, #16]
   2917a:	440b      	add	r3, r1
   2917c:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   2917e:	6843      	ldr	r3, [r0, #4]
   29180:	6802      	ldr	r2, [r0, #0]
   29182:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29184:	6803      	ldr	r3, [r0, #0]
   29186:	6842      	ldr	r2, [r0, #4]
   29188:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2918a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2918e:	6103      	str	r3, [r0, #16]
	return 0;
   29190:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29192:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29196:	2b00      	cmp	r3, #0
   29198:	d15f      	bne.n	2925a <_impl_k_timer_stop+0x106>
   2919a:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   2919c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2919e:	b103      	cbz	r3, 291a2 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   291a0:	4798      	blx	r3
	__asm__ volatile(
   291a2:	f04f 0320 	mov.w	r3, #32
   291a6:	f3ef 8511 	mrs	r5, BASEPRI
   291aa:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   291ae:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   291b2:	4b2b      	ldr	r3, [pc, #172]	; (29260 <_impl_k_timer_stop+0x10c>)
   291b4:	681b      	ldr	r3, [r3, #0]
   291b6:	b9f3      	cbnz	r3, 291f6 <_impl_k_timer_stop+0xa2>
	return list->head == list;
   291b8:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291ba:	4282      	cmp	r2, r0
   291bc:	d02c      	beq.n	29218 <_impl_k_timer_stop+0xc4>
	if (thread) {
   291be:	b148      	cbz	r0, 291d4 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   291c0:	6843      	ldr	r3, [r0, #4]
   291c2:	6802      	ldr	r2, [r0, #0]
   291c4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   291c6:	6803      	ldr	r3, [r0, #0]
   291c8:	6842      	ldr	r2, [r0, #4]
   291ca:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   291cc:	7a43      	ldrb	r3, [r0, #9]
   291ce:	f023 0302 	bic.w	r3, r3, #2
   291d2:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   291d4:	b330      	cbz	r0, 29224 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   291d6:	7a43      	ldrb	r3, [r0, #9]
   291d8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   291dc:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   291de:	f013 0f1b 	tst.w	r3, #27
   291e2:	d11d      	bne.n	29220 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   291e4:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   291e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291ea:	d017      	beq.n	2921c <_impl_k_timer_stop+0xc8>
   291ec:	2300      	movs	r3, #0
   291ee:	e018      	b.n	29222 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   291f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   291f4:	e7cd      	b.n	29192 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   291f6:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291f8:	4282      	cmp	r2, r0
   291fa:	d102      	bne.n	29202 <_impl_k_timer_stop+0xae>
   291fc:	2000      	movs	r0, #0
   291fe:	e000      	b.n	29202 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29200:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29202:	2800      	cmp	r0, #0
   29204:	d0db      	beq.n	291be <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29206:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29208:	f113 0f02 	cmn.w	r3, #2
   2920c:	d1d7      	bne.n	291be <_impl_k_timer_stop+0x6a>
   2920e:	6853      	ldr	r3, [r2, #4]
   29210:	4298      	cmp	r0, r3
   29212:	d1f5      	bne.n	29200 <_impl_k_timer_stop+0xac>
   29214:	2000      	movs	r0, #0
   29216:	e7f4      	b.n	29202 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29218:	2000      	movs	r0, #0
   2921a:	e7d0      	b.n	291be <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   2921c:	2301      	movs	r3, #1
   2921e:	e000      	b.n	29222 <_impl_k_timer_stop+0xce>
   29220:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29222:	b95b      	cbnz	r3, 2923c <_impl_k_timer_stop+0xe8>
   29224:	f3ef 8305 	mrs	r3, IPSR
   29228:	2b0d      	cmp	r3, #13
   2922a:	d80a      	bhi.n	29242 <_impl_k_timer_stop+0xee>
   2922c:	b173      	cbz	r3, 2924c <_impl_k_timer_stop+0xf8>
   2922e:	4b0d      	ldr	r3, [pc, #52]	; (29264 <_impl_k_timer_stop+0x110>)
   29230:	685b      	ldr	r3, [r3, #4]
   29232:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29236:	d00b      	beq.n	29250 <_impl_k_timer_stop+0xfc>
   29238:	2300      	movs	r3, #0
   2923a:	e003      	b.n	29244 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   2923c:	f7fe ffac 	bl	28198 <_add_thread_to_ready_q>
   29240:	e7f0      	b.n	29224 <_impl_k_timer_stop+0xd0>
   29242:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29244:	b133      	cbz	r3, 29254 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29246:	f385 8811 	msr	BASEPRI, r5
   2924a:	bd38      	pop	{r3, r4, r5, pc}
   2924c:	2300      	movs	r3, #0
   2924e:	e7f9      	b.n	29244 <_impl_k_timer_stop+0xf0>
   29250:	2301      	movs	r3, #1
   29252:	e7f7      	b.n	29244 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29254:	4628      	mov	r0, r5
   29256:	f7ff f937 	bl	284c8 <_reschedule_threads>
   2925a:	bd38      	pop	{r3, r4, r5, pc}
   2925c:	20002718 	.word	0x20002718
   29260:	20002b00 	.word	0x20002b00
   29264:	e000ed00 	.word	0xe000ed00

00029268 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29268:	b430      	push	{r4, r5}
	__asm__ volatile(
   2926a:	f04f 0320 	mov.w	r3, #32
   2926e:	f3ef 8411 	mrs	r4, BASEPRI
   29272:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29276:	6903      	ldr	r3, [r0, #16]
   29278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2927c:	d017      	beq.n	292ae <_timeout_remaining_get+0x46>
	return list->head == list;
   2927e:	4a10      	ldr	r2, [pc, #64]	; (292c0 <_timeout_remaining_get+0x58>)
   29280:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29284:	4293      	cmp	r3, r2
   29286:	d001      	beq.n	2928c <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29288:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   2928a:	e005      	b.n	29298 <_timeout_remaining_get+0x30>
   2928c:	2300      	movs	r3, #0
   2928e:	e7fb      	b.n	29288 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29290:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29292:	6913      	ldr	r3, [r2, #16]
   29294:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29296:	4613      	mov	r3, r2
		while (t != timeout) {
   29298:	4283      	cmp	r3, r0
   2929a:	d009      	beq.n	292b0 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2929c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2929e:	2b00      	cmp	r3, #0
   292a0:	d0f7      	beq.n	29292 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   292a2:	4a07      	ldr	r2, [pc, #28]	; (292c0 <_timeout_remaining_get+0x58>)
   292a4:	6912      	ldr	r2, [r2, #16]
   292a6:	4293      	cmp	r3, r2
   292a8:	d0f2      	beq.n	29290 <_timeout_remaining_get+0x28>
   292aa:	681a      	ldr	r2, [r3, #0]
   292ac:	e7f1      	b.n	29292 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   292ae:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   292b0:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   292b4:	008a      	lsls	r2, r1, #2
   292b6:	1850      	adds	r0, r2, r1
   292b8:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   292ba:	bc30      	pop	{r4, r5}
   292bc:	4770      	bx	lr
   292be:	bf00      	nop
   292c0:	20002718 	.word	0x20002718

000292c4 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   292c4:	b538      	push	{r3, r4, r5, lr}
   292c6:	4604      	mov	r4, r0
   292c8:	e003      	b.n	292d2 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   292ca:	4610      	mov	r0, r2
   292cc:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   292ce:	f7ff f927 	bl	28520 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   292d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   292d6:	4620      	mov	r0, r4
   292d8:	f7fe ff0c 	bl	280f4 <k_queue_get>
		if (!work) {
   292dc:	4602      	mov	r2, r0
   292de:	2800      	cmp	r0, #0
   292e0:	d0f7      	beq.n	292d2 <work_q_main+0xe>
		handler = work->handler;
   292e2:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   292e4:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   292e8:	f3bf 8f5b 	dmb	ish
   292ec:	e853 1f00 	ldrex	r1, [r3]
   292f0:	f021 0001 	bic.w	r0, r1, #1
   292f4:	e843 0e00 	strex	lr, r0, [r3]
   292f8:	f1be 0f00 	cmp.w	lr, #0
   292fc:	d1f6      	bne.n	292ec <work_q_main+0x28>
   292fe:	f3bf 8f5b 	dmb	ish
   29302:	f011 0f01 	tst.w	r1, #1
   29306:	d0e2      	beq.n	292ce <work_q_main+0xa>
   29308:	e7df      	b.n	292ca <work_q_main+0x6>

0002930a <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   2930a:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2930c:	6984      	ldr	r4, [r0, #24]
   2930e:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29312:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29314:	f3bf 8f5b 	dmb	ish
   29318:	e853 2f00 	ldrex	r2, [r3]
   2931c:	f042 0001 	orr.w	r0, r2, #1
   29320:	e843 0e00 	strex	lr, r0, [r3]
   29324:	f1be 0f00 	cmp.w	lr, #0
   29328:	d1f6      	bne.n	29318 <work_timeout+0xe>
   2932a:	f3bf 8f5b 	dmb	ish
   2932e:	f012 0f01 	tst.w	r2, #1
   29332:	d000      	beq.n	29336 <work_timeout+0x2c>
   29334:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29336:	4620      	mov	r0, r4
   29338:	f7fe feb4 	bl	280a4 <k_queue_append>
}
   2933c:	e7fa      	b.n	29334 <work_timeout+0x2a>
	...

00029340 <k_work_q_start>:
{
   29340:	b5f0      	push	{r4, r5, r6, r7, lr}
   29342:	b087      	sub	sp, #28
   29344:	4604      	mov	r4, r0
   29346:	460d      	mov	r5, r1
   29348:	4616      	mov	r6, r2
   2934a:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   2934c:	f7fe fe77 	bl	2803e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29350:	2300      	movs	r3, #0
   29352:	9305      	str	r3, [sp, #20]
   29354:	9304      	str	r3, [sp, #16]
   29356:	9703      	str	r7, [sp, #12]
   29358:	9302      	str	r3, [sp, #8]
   2935a:	9301      	str	r3, [sp, #4]
   2935c:	9400      	str	r4, [sp, #0]
   2935e:	4b04      	ldr	r3, [pc, #16]	; (29370 <k_work_q_start+0x30>)
   29360:	4632      	mov	r2, r6
   29362:	4629      	mov	r1, r5
   29364:	f104 0010 	add.w	r0, r4, #16
   29368:	f7ff fcb2 	bl	28cd0 <_impl_k_thread_create>
}
   2936c:	b007      	add	sp, #28
   2936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29370:	000292c5 	.word	0x000292c5

00029374 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29374:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29376:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2937a:	f3bf 8f5b 	dmb	ish
   2937e:	e853 2f00 	ldrex	r2, [r3]
   29382:	f022 0201 	bic.w	r2, r2, #1
   29386:	e843 2e00 	strex	lr, r2, [r3]
   2938a:	f1be 0f00 	cmp.w	lr, #0
   2938e:	d1f6      	bne.n	2937e <k_delayed_work_init+0xa>
   29390:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29394:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2939a:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   2939c:	2300      	movs	r3, #0
   2939e:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   293a0:	6143      	str	r3, [r0, #20]
	t->func = func;
   293a2:	4a02      	ldr	r2, [pc, #8]	; (293ac <k_delayed_work_init+0x38>)
   293a4:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   293a6:	6243      	str	r3, [r0, #36]	; 0x24
   293a8:	f85d fb04 	ldr.w	pc, [sp], #4
   293ac:	0002930b 	.word	0x0002930b

000293b0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   293b0:	b430      	push	{r4, r5}
	__asm__ volatile(
   293b2:	f04f 0320 	mov.w	r3, #32
   293b6:	f3ef 8411 	mrs	r4, BASEPRI
   293ba:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   293be:	6a43      	ldr	r3, [r0, #36]	; 0x24
   293c0:	b18b      	cbz	r3, 293e6 <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   293c2:	f3bf 8f5b 	dmb	ish
   293c6:	6883      	ldr	r3, [r0, #8]
   293c8:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   293cc:	f013 0f01 	tst.w	r3, #1
   293d0:	d02d      	beq.n	2942e <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   293d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   293d4:	4601      	mov	r1, r0
	return list->head;
   293d6:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   293d8:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   293da:	b193      	cbz	r3, 29402 <k_delayed_work_cancel+0x52>
		if (test == node) {
   293dc:	4299      	cmp	r1, r3
   293de:	d007      	beq.n	293f0 <k_delayed_work_cancel+0x40>
		prev = test;
   293e0:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   293e2:	681b      	ldr	r3, [r3, #0]
   293e4:	e7f9      	b.n	293da <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293e6:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   293ea:	f06f 0015 	mvn.w	r0, #21
   293ee:	e00e      	b.n	2940e <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   293f0:	b17a      	cbz	r2, 29412 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   293f2:	6803      	ldr	r3, [r0, #0]
   293f4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   293f6:	686b      	ldr	r3, [r5, #4]
   293f8:	4298      	cmp	r0, r3
   293fa:	d011      	beq.n	29420 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   293fc:	2300      	movs	r3, #0
   293fe:	6003      	str	r3, [r0, #0]
			return true;
   29400:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29402:	b17b      	cbz	r3, 29424 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29404:	2300      	movs	r3, #0
   29406:	6243      	str	r3, [r0, #36]	; 0x24
   29408:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2940c:	4618      	mov	r0, r3
}
   2940e:	bc30      	pop	{r4, r5}
   29410:	4770      	bx	lr
		list->head = node->next;
   29412:	6803      	ldr	r3, [r0, #0]
   29414:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29416:	686a      	ldr	r2, [r5, #4]
   29418:	4290      	cmp	r0, r2
   2941a:	d1ef      	bne.n	293fc <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2941c:	606b      	str	r3, [r5, #4]
   2941e:	e7ed      	b.n	293fc <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29420:	606a      	str	r2, [r5, #4]
   29422:	e7eb      	b.n	293fc <k_delayed_work_cancel+0x4c>
   29424:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29428:	f06f 0015 	mvn.w	r0, #21
   2942c:	e7ef      	b.n	2940e <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2942e:	69c2      	ldr	r2, [r0, #28]
   29430:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29434:	d0e6      	beq.n	29404 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29436:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2943a:	4909      	ldr	r1, [pc, #36]	; (29460 <k_delayed_work_cancel+0xb0>)
   2943c:	6909      	ldr	r1, [r1, #16]
   2943e:	428b      	cmp	r3, r1
   29440:	d004      	beq.n	2944c <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29442:	b103      	cbz	r3, 29446 <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   29444:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29446:	6919      	ldr	r1, [r3, #16]
   29448:	440a      	add	r2, r1
   2944a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2944c:	6903      	ldr	r3, [r0, #16]
   2944e:	68c2      	ldr	r2, [r0, #12]
   29450:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29452:	68c3      	ldr	r3, [r0, #12]
   29454:	6902      	ldr	r2, [r0, #16]
   29456:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2945c:	61c3      	str	r3, [r0, #28]
   2945e:	e7d1      	b.n	29404 <k_delayed_work_cancel+0x54>
   29460:	20002718 	.word	0x20002718

00029464 <k_delayed_work_submit_to_queue>:
{
   29464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29466:	f04f 0320 	mov.w	r3, #32
   2946a:	f3ef 8711 	mrs	r7, BASEPRI
   2946e:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   29472:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   29474:	b113      	cbz	r3, 2947c <k_delayed_work_submit_to_queue+0x18>
   29476:	4283      	cmp	r3, r0
   29478:	f040 80b4 	bne.w	295e4 <k_delayed_work_submit_to_queue+0x180>
   2947c:	4614      	mov	r4, r2
   2947e:	460e      	mov	r6, r1
   29480:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   29482:	4283      	cmp	r3, r0
   29484:	d016      	beq.n	294b4 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   29486:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   29488:	b1d4      	cbz	r4, 294c0 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2948a:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2948e:	f104 0309 	add.w	r3, r4, #9
   29492:	4c57      	ldr	r4, [pc, #348]	; (295f0 <k_delayed_work_submit_to_queue+0x18c>)
   29494:	fba4 2303 	umull	r2, r3, r4, r3
   29498:	08db      	lsrs	r3, r3, #3
   2949a:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2949c:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2949e:	2200      	movs	r2, #0
   294a0:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   294a2:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   294a4:	b32b      	cbz	r3, 294f2 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   294a6:	4a53      	ldr	r2, [pc, #332]	; (295f4 <k_delayed_work_submit_to_queue+0x190>)
   294a8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   294ac:	4293      	cmp	r3, r2
   294ae:	d172      	bne.n	29596 <k_delayed_work_submit_to_queue+0x132>
   294b0:	2300      	movs	r3, #0
   294b2:	e070      	b.n	29596 <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   294b4:	4608      	mov	r0, r1
   294b6:	f7ff ff7b 	bl	293b0 <k_delayed_work_cancel>
		if (err < 0) {
   294ba:	2800      	cmp	r0, #0
   294bc:	dae3      	bge.n	29486 <k_delayed_work_submit_to_queue+0x22>
   294be:	e08e      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   294c0:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   294c4:	f3bf 8f5b 	dmb	ish
   294c8:	e853 2f00 	ldrex	r2, [r3]
   294cc:	f042 0101 	orr.w	r1, r2, #1
   294d0:	e843 1000 	strex	r0, r1, [r3]
   294d4:	2800      	cmp	r0, #0
   294d6:	d1f7      	bne.n	294c8 <k_delayed_work_submit_to_queue+0x64>
   294d8:	f3bf 8f5b 	dmb	ish
   294dc:	f012 0f01 	tst.w	r2, #1
   294e0:	d001      	beq.n	294e6 <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   294e2:	2000      	movs	r0, #0
   294e4:	e07b      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   294e6:	4631      	mov	r1, r6
   294e8:	4628      	mov	r0, r5
   294ea:	f7fe fddb 	bl	280a4 <k_queue_append>
   294ee:	2000      	movs	r0, #0
   294f0:	e075      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   294f2:	4610      	mov	r0, r2
   294f4:	f04f 0320 	mov.w	r3, #32
   294f8:	f3ef 8411 	mrs	r4, BASEPRI
   294fc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29504:	612b      	str	r3, [r5, #16]
	if (thread) {
   29506:	b322      	cbz	r2, 29552 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   29508:	68eb      	ldr	r3, [r5, #12]
   2950a:	b153      	cbz	r3, 29522 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2950c:	6853      	ldr	r3, [r2, #4]
   2950e:	6812      	ldr	r2, [r2, #0]
   29510:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29512:	6803      	ldr	r3, [r0, #0]
   29514:	6842      	ldr	r2, [r0, #4]
   29516:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29518:	7a43      	ldrb	r3, [r0, #9]
   2951a:	f023 0302 	bic.w	r3, r3, #2
   2951e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29520:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29522:	7a43      	ldrb	r3, [r0, #9]
   29524:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29528:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2952a:	f013 0f1b 	tst.w	r3, #27
   2952e:	d107      	bne.n	29540 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29530:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29536:	d001      	beq.n	2953c <k_delayed_work_submit_to_queue+0xd8>
   29538:	2300      	movs	r3, #0
   2953a:	e002      	b.n	29542 <k_delayed_work_submit_to_queue+0xde>
   2953c:	2301      	movs	r3, #1
   2953e:	e000      	b.n	29542 <k_delayed_work_submit_to_queue+0xde>
   29540:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29542:	b91b      	cbnz	r3, 2954c <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29544:	f384 8811 	msr	BASEPRI, r4
   29548:	2000      	movs	r0, #0
   2954a:	e048      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2954c:	f7fe fe24 	bl	28198 <_add_thread_to_ready_q>
   29550:	e7f8      	b.n	29544 <k_delayed_work_submit_to_queue+0xe0>
   29552:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   29556:	696b      	ldr	r3, [r5, #20]
   29558:	2b00      	cmp	r3, #0
   2955a:	d046      	beq.n	295ea <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2955c:	4628      	mov	r0, r5
   2955e:	4798      	blx	r3
   29560:	2000      	movs	r0, #0
   29562:	e03c      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   29564:	1aa2      	subs	r2, r4, r2
   29566:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29568:	b13b      	cbz	r3, 2957a <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2956a:	685a      	ldr	r2, [r3, #4]
   2956c:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2956e:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   29570:	685a      	ldr	r2, [r3, #4]
   29572:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   29574:	605d      	str	r5, [r3, #4]
   29576:	2000      	movs	r0, #0
   29578:	e031      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2957a:	4b1f      	ldr	r3, [pc, #124]	; (295f8 <k_delayed_work_submit_to_queue+0x194>)
   2957c:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2957e:	685a      	ldr	r2, [r3, #4]
   29580:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   29582:	685a      	ldr	r2, [r3, #4]
   29584:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29586:	605d      	str	r5, [r3, #4]
   29588:	2000      	movs	r0, #0
   2958a:	e028      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2958c:	4619      	mov	r1, r3
   2958e:	e011      	b.n	295b4 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   29590:	2100      	movs	r1, #0
   29592:	e00f      	b.n	295b4 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29594:	2300      	movs	r3, #0
   29596:	b1d3      	cbz	r3, 295ce <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29598:	692a      	ldr	r2, [r5, #16]
   2959a:	691c      	ldr	r4, [r3, #16]
   2959c:	42a2      	cmp	r2, r4
   2959e:	dde1      	ble.n	29564 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   295a0:	1b12      	subs	r2, r2, r4
   295a2:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   295a4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295a6:	2b00      	cmp	r3, #0
   295a8:	d0f0      	beq.n	2958c <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   295aa:	4912      	ldr	r1, [pc, #72]	; (295f4 <k_delayed_work_submit_to_queue+0x190>)
   295ac:	6909      	ldr	r1, [r1, #16]
   295ae:	428b      	cmp	r3, r1
   295b0:	d0ee      	beq.n	29590 <k_delayed_work_submit_to_queue+0x12c>
   295b2:	6819      	ldr	r1, [r3, #0]
   295b4:	2900      	cmp	r1, #0
   295b6:	d0ed      	beq.n	29594 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295b8:	b12a      	cbz	r2, 295c6 <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   295ba:	490e      	ldr	r1, [pc, #56]	; (295f4 <k_delayed_work_submit_to_queue+0x190>)
   295bc:	6909      	ldr	r1, [r1, #16]
   295be:	428a      	cmp	r2, r1
   295c0:	d003      	beq.n	295ca <k_delayed_work_submit_to_queue+0x166>
   295c2:	681b      	ldr	r3, [r3, #0]
   295c4:	e7e7      	b.n	29596 <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295c6:	2300      	movs	r3, #0
   295c8:	e7e5      	b.n	29596 <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   295ca:	2300      	movs	r3, #0
   295cc:	e7e3      	b.n	29596 <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   295ce:	4b0a      	ldr	r3, [pc, #40]	; (295f8 <k_delayed_work_submit_to_queue+0x194>)
   295d0:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   295d2:	685a      	ldr	r2, [r3, #4]
   295d4:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   295d6:	685a      	ldr	r2, [r3, #4]
   295d8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   295da:	605d      	str	r5, [r3, #4]
   295dc:	2000      	movs	r0, #0
   295de:	f387 8811 	msr	BASEPRI, r7
}
   295e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   295e4:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   295e8:	e7f9      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   295ea:	2000      	movs	r0, #0
   295ec:	e7f7      	b.n	295de <k_delayed_work_submit_to_queue+0x17a>
   295ee:	bf00      	nop
   295f0:	cccccccd 	.word	0xcccccccd
   295f4:	20002718 	.word	0x20002718
   295f8:	20002724 	.word	0x20002724

000295fc <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   295fc:	4770      	bx	lr
	...

00029600 <sin>:
   29600:	b530      	push	{r4, r5, lr}
   29602:	4a1f      	ldr	r2, [pc, #124]	; (29680 <sin+0x80>)
   29604:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   29608:	4293      	cmp	r3, r2
   2960a:	b087      	sub	sp, #28
   2960c:	dd1b      	ble.n	29646 <sin+0x46>
   2960e:	4a1d      	ldr	r2, [pc, #116]	; (29684 <sin+0x84>)
   29610:	4293      	cmp	r3, r2
   29612:	dd05      	ble.n	29620 <sin+0x20>
   29614:	4602      	mov	r2, r0
   29616:	460b      	mov	r3, r1
   29618:	f7d7 f8e4 	bl	7e4 <__aeabi_dsub>
   2961c:	b007      	add	sp, #28
   2961e:	bd30      	pop	{r4, r5, pc}
   29620:	aa02      	add	r2, sp, #8
   29622:	f000 f831 	bl	29688 <__ieee754_rem_pio2>
   29626:	f000 0003 	and.w	r0, r0, #3
   2962a:	2801      	cmp	r0, #1
   2962c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   29630:	d01a      	beq.n	29668 <sin+0x68>
   29632:	2802      	cmp	r0, #2
   29634:	d00f      	beq.n	29656 <sin+0x56>
   29636:	b1e0      	cbz	r0, 29672 <sin+0x72>
   29638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2963c:	f000 fa48 	bl	29ad0 <__kernel_cos>
   29640:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   29644:	e7ea      	b.n	2961c <sin+0x1c>
   29646:	2300      	movs	r3, #0
   29648:	9300      	str	r3, [sp, #0]
   2964a:	2200      	movs	r2, #0
   2964c:	2300      	movs	r3, #0
   2964e:	f000 ffab 	bl	2a5a8 <__kernel_sin>
   29652:	b007      	add	sp, #28
   29654:	bd30      	pop	{r4, r5, pc}
   29656:	2401      	movs	r4, #1
   29658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2965c:	9400      	str	r4, [sp, #0]
   2965e:	f000 ffa3 	bl	2a5a8 <__kernel_sin>
   29662:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   29666:	e7d9      	b.n	2961c <sin+0x1c>
   29668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2966c:	f000 fa30 	bl	29ad0 <__kernel_cos>
   29670:	e7d4      	b.n	2961c <sin+0x1c>
   29672:	2401      	movs	r4, #1
   29674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29678:	9400      	str	r4, [sp, #0]
   2967a:	f000 ff95 	bl	2a5a8 <__kernel_sin>
   2967e:	e7cd      	b.n	2961c <sin+0x1c>
   29680:	3fe921fb 	.word	0x3fe921fb
   29684:	7fefffff 	.word	0x7fefffff

00029688 <__ieee754_rem_pio2>:
   29688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2968c:	4e9a      	ldr	r6, [pc, #616]	; (298f8 <__ieee754_rem_pio2+0x270>)
   2968e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   29692:	42b7      	cmp	r7, r6
   29694:	b091      	sub	sp, #68	; 0x44
   29696:	f340 808e 	ble.w	297b6 <__ieee754_rem_pio2+0x12e>
   2969a:	4692      	mov	sl, r2
   2969c:	4a97      	ldr	r2, [pc, #604]	; (298fc <__ieee754_rem_pio2+0x274>)
   2969e:	4297      	cmp	r7, r2
   296a0:	460c      	mov	r4, r1
   296a2:	dc26      	bgt.n	296f2 <__ieee754_rem_pio2+0x6a>
   296a4:	2900      	cmp	r1, #0
   296a6:	a38a      	add	r3, pc, #552	; (adr r3, 298d0 <__ieee754_rem_pio2+0x248>)
   296a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   296ac:	f340 81b4 	ble.w	29a18 <__ieee754_rem_pio2+0x390>
   296b0:	f7d7 f898 	bl	7e4 <__aeabi_dsub>
   296b4:	4b92      	ldr	r3, [pc, #584]	; (29900 <__ieee754_rem_pio2+0x278>)
   296b6:	429f      	cmp	r7, r3
   296b8:	4604      	mov	r4, r0
   296ba:	460d      	mov	r5, r1
   296bc:	f000 8090 	beq.w	297e0 <__ieee754_rem_pio2+0x158>
   296c0:	a385      	add	r3, pc, #532	; (adr r3, 298d8 <__ieee754_rem_pio2+0x250>)
   296c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   296c6:	f7d7 f88d 	bl	7e4 <__aeabi_dsub>
   296ca:	4602      	mov	r2, r0
   296cc:	460b      	mov	r3, r1
   296ce:	e9ca 2300 	strd	r2, r3, [sl]
   296d2:	4620      	mov	r0, r4
   296d4:	4629      	mov	r1, r5
   296d6:	f7d7 f885 	bl	7e4 <__aeabi_dsub>
   296da:	a37f      	add	r3, pc, #508	; (adr r3, 298d8 <__ieee754_rem_pio2+0x250>)
   296dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   296e0:	f7d7 f880 	bl	7e4 <__aeabi_dsub>
   296e4:	2501      	movs	r5, #1
   296e6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   296ea:	4628      	mov	r0, r5
   296ec:	b011      	add	sp, #68	; 0x44
   296ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296f2:	4a84      	ldr	r2, [pc, #528]	; (29904 <__ieee754_rem_pio2+0x27c>)
   296f4:	4297      	cmp	r7, r2
   296f6:	f340 8090 	ble.w	2981a <__ieee754_rem_pio2+0x192>
   296fa:	4a83      	ldr	r2, [pc, #524]	; (29908 <__ieee754_rem_pio2+0x280>)
   296fc:	4297      	cmp	r7, r2
   296fe:	dc65      	bgt.n	297cc <__ieee754_rem_pio2+0x144>
   29700:	153d      	asrs	r5, r7, #20
   29702:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   29706:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
   2970a:	4619      	mov	r1, r3
   2970c:	461f      	mov	r7, r3
   2970e:	4606      	mov	r6, r0
   29710:	f7d7 fccc 	bl	10ac <__aeabi_d2iz>
   29714:	f7d7 f9b4 	bl	a80 <__aeabi_i2d>
   29718:	4680      	mov	r8, r0
   2971a:	4689      	mov	r9, r1
   2971c:	4602      	mov	r2, r0
   2971e:	460b      	mov	r3, r1
   29720:	4630      	mov	r0, r6
   29722:	4639      	mov	r1, r7
   29724:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29728:	f7d7 f85c 	bl	7e4 <__aeabi_dsub>
   2972c:	2200      	movs	r2, #0
   2972e:	4b77      	ldr	r3, [pc, #476]	; (2990c <__ieee754_rem_pio2+0x284>)
   29730:	f7d7 fa0c 	bl	b4c <__aeabi_dmul>
   29734:	4689      	mov	r9, r1
   29736:	4680      	mov	r8, r0
   29738:	f7d7 fcb8 	bl	10ac <__aeabi_d2iz>
   2973c:	f7d7 f9a0 	bl	a80 <__aeabi_i2d>
   29740:	4602      	mov	r2, r0
   29742:	460b      	mov	r3, r1
   29744:	4606      	mov	r6, r0
   29746:	460f      	mov	r7, r1
   29748:	4640      	mov	r0, r8
   2974a:	4649      	mov	r1, r9
   2974c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   29750:	f7d7 f848 	bl	7e4 <__aeabi_dsub>
   29754:	2200      	movs	r2, #0
   29756:	4b6d      	ldr	r3, [pc, #436]	; (2990c <__ieee754_rem_pio2+0x284>)
   29758:	f7d7 f9f8 	bl	b4c <__aeabi_dmul>
   2975c:	2200      	movs	r2, #0
   2975e:	2300      	movs	r3, #0
   29760:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   29764:	f7d7 fc5a 	bl	101c <__aeabi_dcmpeq>
   29768:	2800      	cmp	r0, #0
   2976a:	f000 8173 	beq.w	29a54 <__ieee754_rem_pio2+0x3cc>
   2976e:	2300      	movs	r3, #0
   29770:	4630      	mov	r0, r6
   29772:	4639      	mov	r1, r7
   29774:	2200      	movs	r2, #0
   29776:	f7d7 fc51 	bl	101c <__aeabi_dcmpeq>
   2977a:	2800      	cmp	r0, #0
   2977c:	bf14      	ite	ne
   2977e:	2301      	movne	r3, #1
   29780:	2302      	moveq	r3, #2
   29782:	4a63      	ldr	r2, [pc, #396]	; (29910 <__ieee754_rem_pio2+0x288>)
   29784:	9201      	str	r2, [sp, #4]
   29786:	2102      	movs	r1, #2
   29788:	462a      	mov	r2, r5
   2978a:	9100      	str	r1, [sp, #0]
   2978c:	a80a      	add	r0, sp, #40	; 0x28
   2978e:	4651      	mov	r1, sl
   29790:	f000 fac2 	bl	29d18 <__kernel_rem_pio2>
   29794:	2c00      	cmp	r4, #0
   29796:	4605      	mov	r5, r0
   29798:	da14      	bge.n	297c4 <__ieee754_rem_pio2+0x13c>
   2979a:	f8da 2004 	ldr.w	r2, [sl, #4]
   2979e:	f8da 300c 	ldr.w	r3, [sl, #12]
   297a2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   297a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   297aa:	4245      	negs	r5, r0
   297ac:	f8ca 2004 	str.w	r2, [sl, #4]
   297b0:	f8ca 300c 	str.w	r3, [sl, #12]
   297b4:	e006      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   297b6:	e9c2 0100 	strd	r0, r1, [r2]
   297ba:	2500      	movs	r5, #0
   297bc:	2400      	movs	r4, #0
   297be:	e9c2 4502 	strd	r4, r5, [r2, #8]
   297c2:	2500      	movs	r5, #0
   297c4:	4628      	mov	r0, r5
   297c6:	b011      	add	sp, #68	; 0x44
   297c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297cc:	4602      	mov	r2, r0
   297ce:	460b      	mov	r3, r1
   297d0:	f7d7 f808 	bl	7e4 <__aeabi_dsub>
   297d4:	2500      	movs	r5, #0
   297d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   297da:	e9ca 0100 	strd	r0, r1, [sl]
   297de:	e7f1      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   297e0:	a33f      	add	r3, pc, #252	; (adr r3, 298e0 <__ieee754_rem_pio2+0x258>)
   297e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   297e6:	f7d6 fffd 	bl	7e4 <__aeabi_dsub>
   297ea:	a33f      	add	r3, pc, #252	; (adr r3, 298e8 <__ieee754_rem_pio2+0x260>)
   297ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   297f0:	460d      	mov	r5, r1
   297f2:	4604      	mov	r4, r0
   297f4:	f7d6 fff6 	bl	7e4 <__aeabi_dsub>
   297f8:	4602      	mov	r2, r0
   297fa:	460b      	mov	r3, r1
   297fc:	e9ca 2300 	strd	r2, r3, [sl]
   29800:	4629      	mov	r1, r5
   29802:	4620      	mov	r0, r4
   29804:	f7d6 ffee 	bl	7e4 <__aeabi_dsub>
   29808:	a337      	add	r3, pc, #220	; (adr r3, 298e8 <__ieee754_rem_pio2+0x260>)
   2980a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2980e:	f7d6 ffe9 	bl	7e4 <__aeabi_dsub>
   29812:	2501      	movs	r5, #1
   29814:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29818:	e7d4      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   2981a:	f000 ff7b 	bl	2a714 <fabs>
   2981e:	a334      	add	r3, pc, #208	; (adr r3, 298f0 <__ieee754_rem_pio2+0x268>)
   29820:	e9d3 2300 	ldrd	r2, r3, [r3]
   29824:	4680      	mov	r8, r0
   29826:	4689      	mov	r9, r1
   29828:	f7d7 f990 	bl	b4c <__aeabi_dmul>
   2982c:	2200      	movs	r2, #0
   2982e:	4b39      	ldr	r3, [pc, #228]	; (29914 <__ieee754_rem_pio2+0x28c>)
   29830:	f7d6 ffda 	bl	7e8 <__adddf3>
   29834:	f7d7 fc3a 	bl	10ac <__aeabi_d2iz>
   29838:	4605      	mov	r5, r0
   2983a:	f7d7 f921 	bl	a80 <__aeabi_i2d>
   2983e:	a324      	add	r3, pc, #144	; (adr r3, 298d0 <__ieee754_rem_pio2+0x248>)
   29840:	e9d3 2300 	ldrd	r2, r3, [r3]
   29844:	e9cd 0104 	strd	r0, r1, [sp, #16]
   29848:	f7d7 f980 	bl	b4c <__aeabi_dmul>
   2984c:	4602      	mov	r2, r0
   2984e:	460b      	mov	r3, r1
   29850:	4640      	mov	r0, r8
   29852:	4649      	mov	r1, r9
   29854:	f7d6 ffc6 	bl	7e4 <__aeabi_dsub>
   29858:	a31f      	add	r3, pc, #124	; (adr r3, 298d8 <__ieee754_rem_pio2+0x250>)
   2985a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2985e:	4680      	mov	r8, r0
   29860:	4689      	mov	r9, r1
   29862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   29866:	f7d7 f971 	bl	b4c <__aeabi_dmul>
   2986a:	2d1f      	cmp	r5, #31
   2986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29870:	dc54      	bgt.n	2991c <__ieee754_rem_pio2+0x294>
   29872:	4b29      	ldr	r3, [pc, #164]	; (29918 <__ieee754_rem_pio2+0x290>)
   29874:	1e6a      	subs	r2, r5, #1
   29876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2987a:	429f      	cmp	r7, r3
   2987c:	d04e      	beq.n	2991c <__ieee754_rem_pio2+0x294>
   2987e:	4602      	mov	r2, r0
   29880:	460b      	mov	r3, r1
   29882:	4640      	mov	r0, r8
   29884:	4649      	mov	r1, r9
   29886:	f7d6 ffad 	bl	7e4 <__aeabi_dsub>
   2988a:	4602      	mov	r2, r0
   2988c:	460b      	mov	r3, r1
   2988e:	e9ca 2300 	strd	r2, r3, [sl]
   29892:	4683      	mov	fp, r0
   29894:	460e      	mov	r6, r1
   29896:	465a      	mov	r2, fp
   29898:	4633      	mov	r3, r6
   2989a:	4640      	mov	r0, r8
   2989c:	4649      	mov	r1, r9
   2989e:	f7d6 ffa1 	bl	7e4 <__aeabi_dsub>
   298a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   298a6:	f7d6 ff9d 	bl	7e4 <__aeabi_dsub>
   298aa:	2c00      	cmp	r4, #0
   298ac:	4602      	mov	r2, r0
   298ae:	460b      	mov	r3, r1
   298b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
   298b4:	da86      	bge.n	297c4 <__ieee754_rem_pio2+0x13c>
   298b6:	465b      	mov	r3, fp
   298b8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
   298bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   298c0:	e88a 0048 	stmia.w	sl, {r3, r6}
   298c4:	f8ca 100c 	str.w	r1, [sl, #12]
   298c8:	f8ca 0008 	str.w	r0, [sl, #8]
   298cc:	426d      	negs	r5, r5
   298ce:	e779      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   298d0:	54400000 	.word	0x54400000
   298d4:	3ff921fb 	.word	0x3ff921fb
   298d8:	1a626331 	.word	0x1a626331
   298dc:	3dd0b461 	.word	0x3dd0b461
   298e0:	1a600000 	.word	0x1a600000
   298e4:	3dd0b461 	.word	0x3dd0b461
   298e8:	2e037073 	.word	0x2e037073
   298ec:	3ba3198a 	.word	0x3ba3198a
   298f0:	6dc9c883 	.word	0x6dc9c883
   298f4:	3fe45f30 	.word	0x3fe45f30
   298f8:	3fe921fb 	.word	0x3fe921fb
   298fc:	4002d97b 	.word	0x4002d97b
   29900:	3ff921fb 	.word	0x3ff921fb
   29904:	413921fb 	.word	0x413921fb
   29908:	7fefffff 	.word	0x7fefffff
   2990c:	41700000 	.word	0x41700000
   29910:	00031210 	.word	0x00031210
   29914:	3fe00000 	.word	0x3fe00000
   29918:	00031190 	.word	0x00031190
   2991c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   29920:	4640      	mov	r0, r8
   29922:	4649      	mov	r1, r9
   29924:	f7d6 ff5e 	bl	7e4 <__aeabi_dsub>
   29928:	153a      	asrs	r2, r7, #20
   2992a:	f3c1 530a 	ubfx	r3, r1, #20, #11
   2992e:	1ad3      	subs	r3, r2, r3
   29930:	2b10      	cmp	r3, #16
   29932:	4683      	mov	fp, r0
   29934:	460e      	mov	r6, r1
   29936:	9209      	str	r2, [sp, #36]	; 0x24
   29938:	e9ca 0100 	strd	r0, r1, [sl]
   2993c:	ddab      	ble.n	29896 <__ieee754_rem_pio2+0x20e>
   2993e:	a358      	add	r3, pc, #352	; (adr r3, 29aa0 <__ieee754_rem_pio2+0x418>)
   29940:	e9d3 2300 	ldrd	r2, r3, [r3]
   29944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   29948:	f7d7 f900 	bl	b4c <__aeabi_dmul>
   2994c:	4606      	mov	r6, r0
   2994e:	460f      	mov	r7, r1
   29950:	4602      	mov	r2, r0
   29952:	460b      	mov	r3, r1
   29954:	4640      	mov	r0, r8
   29956:	4649      	mov	r1, r9
   29958:	f7d6 ff44 	bl	7e4 <__aeabi_dsub>
   2995c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   29960:	4602      	mov	r2, r0
   29962:	460b      	mov	r3, r1
   29964:	4640      	mov	r0, r8
   29966:	4649      	mov	r1, r9
   29968:	f7d6 ff3c 	bl	7e4 <__aeabi_dsub>
   2996c:	4632      	mov	r2, r6
   2996e:	463b      	mov	r3, r7
   29970:	f7d6 ff38 	bl	7e4 <__aeabi_dsub>
   29974:	a34c      	add	r3, pc, #304	; (adr r3, 29aa8 <__ieee754_rem_pio2+0x420>)
   29976:	e9d3 2300 	ldrd	r2, r3, [r3]
   2997a:	4606      	mov	r6, r0
   2997c:	460f      	mov	r7, r1
   2997e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   29982:	f7d7 f8e3 	bl	b4c <__aeabi_dmul>
   29986:	4632      	mov	r2, r6
   29988:	463b      	mov	r3, r7
   2998a:	f7d6 ff2b 	bl	7e4 <__aeabi_dsub>
   2998e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   29992:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29996:	4602      	mov	r2, r0
   29998:	460b      	mov	r3, r1
   2999a:	4640      	mov	r0, r8
   2999c:	4649      	mov	r1, r9
   2999e:	f7d6 ff21 	bl	7e4 <__aeabi_dsub>
   299a2:	460b      	mov	r3, r1
   299a4:	f3c1 570a 	ubfx	r7, r1, #20, #11
   299a8:	460e      	mov	r6, r1
   299aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   299ac:	1bcf      	subs	r7, r1, r7
   299ae:	4602      	mov	r2, r0
   299b0:	2f31      	cmp	r7, #49	; 0x31
   299b2:	4683      	mov	fp, r0
   299b4:	e9ca 2300 	strd	r2, r3, [sl]
   299b8:	dd6c      	ble.n	29a94 <__ieee754_rem_pio2+0x40c>
   299ba:	a33d      	add	r3, pc, #244	; (adr r3, 29ab0 <__ieee754_rem_pio2+0x428>)
   299bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   299c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   299c4:	f7d7 f8c2 	bl	b4c <__aeabi_dmul>
   299c8:	4606      	mov	r6, r0
   299ca:	460f      	mov	r7, r1
   299cc:	4602      	mov	r2, r0
   299ce:	460b      	mov	r3, r1
   299d0:	4640      	mov	r0, r8
   299d2:	4649      	mov	r1, r9
   299d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   299d8:	f7d6 ff04 	bl	7e4 <__aeabi_dsub>
   299dc:	4602      	mov	r2, r0
   299de:	460b      	mov	r3, r1
   299e0:	4680      	mov	r8, r0
   299e2:	4689      	mov	r9, r1
   299e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   299e8:	f7d6 fefc 	bl	7e4 <__aeabi_dsub>
   299ec:	4632      	mov	r2, r6
   299ee:	463b      	mov	r3, r7
   299f0:	f7d6 fef8 	bl	7e4 <__aeabi_dsub>
   299f4:	a330      	add	r3, pc, #192	; (adr r3, 29ab8 <__ieee754_rem_pio2+0x430>)
   299f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   299fa:	4606      	mov	r6, r0
   299fc:	460f      	mov	r7, r1
   299fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   29a02:	f7d7 f8a3 	bl	b4c <__aeabi_dmul>
   29a06:	4632      	mov	r2, r6
   29a08:	463b      	mov	r3, r7
   29a0a:	f7d6 feeb 	bl	7e4 <__aeabi_dsub>
   29a0e:	4602      	mov	r2, r0
   29a10:	460b      	mov	r3, r1
   29a12:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29a16:	e734      	b.n	29882 <__ieee754_rem_pio2+0x1fa>
   29a18:	f7d6 fee6 	bl	7e8 <__adddf3>
   29a1c:	4b2a      	ldr	r3, [pc, #168]	; (29ac8 <__ieee754_rem_pio2+0x440>)
   29a1e:	429f      	cmp	r7, r3
   29a20:	4604      	mov	r4, r0
   29a22:	460d      	mov	r5, r1
   29a24:	d018      	beq.n	29a58 <__ieee754_rem_pio2+0x3d0>
   29a26:	a326      	add	r3, pc, #152	; (adr r3, 29ac0 <__ieee754_rem_pio2+0x438>)
   29a28:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a2c:	f7d6 fedc 	bl	7e8 <__adddf3>
   29a30:	4602      	mov	r2, r0
   29a32:	460b      	mov	r3, r1
   29a34:	e9ca 2300 	strd	r2, r3, [sl]
   29a38:	4629      	mov	r1, r5
   29a3a:	4620      	mov	r0, r4
   29a3c:	f7d6 fed2 	bl	7e4 <__aeabi_dsub>
   29a40:	a31f      	add	r3, pc, #124	; (adr r3, 29ac0 <__ieee754_rem_pio2+0x438>)
   29a42:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a46:	f7d6 fecf 	bl	7e8 <__adddf3>
   29a4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29a4e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29a52:	e6b7      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   29a54:	2303      	movs	r3, #3
   29a56:	e694      	b.n	29782 <__ieee754_rem_pio2+0xfa>
   29a58:	a311      	add	r3, pc, #68	; (adr r3, 29aa0 <__ieee754_rem_pio2+0x418>)
   29a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a5e:	f7d6 fec3 	bl	7e8 <__adddf3>
   29a62:	a311      	add	r3, pc, #68	; (adr r3, 29aa8 <__ieee754_rem_pio2+0x420>)
   29a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a68:	460d      	mov	r5, r1
   29a6a:	4604      	mov	r4, r0
   29a6c:	f7d6 febc 	bl	7e8 <__adddf3>
   29a70:	4602      	mov	r2, r0
   29a72:	460b      	mov	r3, r1
   29a74:	e9ca 2300 	strd	r2, r3, [sl]
   29a78:	4629      	mov	r1, r5
   29a7a:	4620      	mov	r0, r4
   29a7c:	f7d6 feb2 	bl	7e4 <__aeabi_dsub>
   29a80:	a309      	add	r3, pc, #36	; (adr r3, 29aa8 <__ieee754_rem_pio2+0x420>)
   29a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a86:	f7d6 feaf 	bl	7e8 <__adddf3>
   29a8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29a8e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29a92:	e697      	b.n	297c4 <__ieee754_rem_pio2+0x13c>
   29a94:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   29a98:	e6fd      	b.n	29896 <__ieee754_rem_pio2+0x20e>
   29a9a:	bf00      	nop
   29a9c:	f3af 8000 	nop.w
   29aa0:	1a600000 	.word	0x1a600000
   29aa4:	3dd0b461 	.word	0x3dd0b461
   29aa8:	2e037073 	.word	0x2e037073
   29aac:	3ba3198a 	.word	0x3ba3198a
   29ab0:	2e000000 	.word	0x2e000000
   29ab4:	3ba3198a 	.word	0x3ba3198a
   29ab8:	252049c1 	.word	0x252049c1
   29abc:	397b839a 	.word	0x397b839a
   29ac0:	1a626331 	.word	0x1a626331
   29ac4:	3dd0b461 	.word	0x3dd0b461
   29ac8:	3ff921fb 	.word	0x3ff921fb
   29acc:	00000000 	.word	0x00000000

00029ad0 <__kernel_cos>:
   29ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ad4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   29ad8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   29adc:	b085      	sub	sp, #20
   29ade:	460c      	mov	r4, r1
   29ae0:	4692      	mov	sl, r2
   29ae2:	469b      	mov	fp, r3
   29ae4:	4605      	mov	r5, r0
   29ae6:	da6b      	bge.n	29bc0 <__kernel_cos+0xf0>
   29ae8:	f7d7 fae0 	bl	10ac <__aeabi_d2iz>
   29aec:	2800      	cmp	r0, #0
   29aee:	f000 80e8 	beq.w	29cc2 <__kernel_cos+0x1f2>
   29af2:	462a      	mov	r2, r5
   29af4:	4623      	mov	r3, r4
   29af6:	4628      	mov	r0, r5
   29af8:	4621      	mov	r1, r4
   29afa:	f7d7 f827 	bl	b4c <__aeabi_dmul>
   29afe:	a374      	add	r3, pc, #464	; (adr r3, 29cd0 <__kernel_cos+0x200>)
   29b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b04:	4680      	mov	r8, r0
   29b06:	4689      	mov	r9, r1
   29b08:	f7d7 f820 	bl	b4c <__aeabi_dmul>
   29b0c:	a372      	add	r3, pc, #456	; (adr r3, 29cd8 <__kernel_cos+0x208>)
   29b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b12:	f7d6 fe69 	bl	7e8 <__adddf3>
   29b16:	4642      	mov	r2, r8
   29b18:	464b      	mov	r3, r9
   29b1a:	f7d7 f817 	bl	b4c <__aeabi_dmul>
   29b1e:	a370      	add	r3, pc, #448	; (adr r3, 29ce0 <__kernel_cos+0x210>)
   29b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b24:	f7d6 fe5e 	bl	7e4 <__aeabi_dsub>
   29b28:	4642      	mov	r2, r8
   29b2a:	464b      	mov	r3, r9
   29b2c:	f7d7 f80e 	bl	b4c <__aeabi_dmul>
   29b30:	a36d      	add	r3, pc, #436	; (adr r3, 29ce8 <__kernel_cos+0x218>)
   29b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b36:	f7d6 fe57 	bl	7e8 <__adddf3>
   29b3a:	4642      	mov	r2, r8
   29b3c:	464b      	mov	r3, r9
   29b3e:	f7d7 f805 	bl	b4c <__aeabi_dmul>
   29b42:	a36b      	add	r3, pc, #428	; (adr r3, 29cf0 <__kernel_cos+0x220>)
   29b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b48:	f7d6 fe4c 	bl	7e4 <__aeabi_dsub>
   29b4c:	4642      	mov	r2, r8
   29b4e:	464b      	mov	r3, r9
   29b50:	f7d6 fffc 	bl	b4c <__aeabi_dmul>
   29b54:	a368      	add	r3, pc, #416	; (adr r3, 29cf8 <__kernel_cos+0x228>)
   29b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b5a:	f7d6 fe45 	bl	7e8 <__adddf3>
   29b5e:	4642      	mov	r2, r8
   29b60:	464b      	mov	r3, r9
   29b62:	f7d6 fff3 	bl	b4c <__aeabi_dmul>
   29b66:	e9cd 0100 	strd	r0, r1, [sp]
   29b6a:	2200      	movs	r2, #0
   29b6c:	4b64      	ldr	r3, [pc, #400]	; (29d00 <__kernel_cos+0x230>)
   29b6e:	4640      	mov	r0, r8
   29b70:	4649      	mov	r1, r9
   29b72:	f7d6 ffeb 	bl	b4c <__aeabi_dmul>
   29b76:	e9dd 2300 	ldrd	r2, r3, [sp]
   29b7a:	4606      	mov	r6, r0
   29b7c:	460f      	mov	r7, r1
   29b7e:	4640      	mov	r0, r8
   29b80:	4649      	mov	r1, r9
   29b82:	f7d6 ffe3 	bl	b4c <__aeabi_dmul>
   29b86:	4652      	mov	r2, sl
   29b88:	4680      	mov	r8, r0
   29b8a:	4689      	mov	r9, r1
   29b8c:	465b      	mov	r3, fp
   29b8e:	4628      	mov	r0, r5
   29b90:	4621      	mov	r1, r4
   29b92:	f7d6 ffdb 	bl	b4c <__aeabi_dmul>
   29b96:	4602      	mov	r2, r0
   29b98:	460b      	mov	r3, r1
   29b9a:	4640      	mov	r0, r8
   29b9c:	4649      	mov	r1, r9
   29b9e:	f7d6 fe21 	bl	7e4 <__aeabi_dsub>
   29ba2:	4602      	mov	r2, r0
   29ba4:	460b      	mov	r3, r1
   29ba6:	4630      	mov	r0, r6
   29ba8:	4639      	mov	r1, r7
   29baa:	f7d6 fe1b 	bl	7e4 <__aeabi_dsub>
   29bae:	4602      	mov	r2, r0
   29bb0:	460b      	mov	r3, r1
   29bb2:	2000      	movs	r0, #0
   29bb4:	4953      	ldr	r1, [pc, #332]	; (29d04 <__kernel_cos+0x234>)
   29bb6:	f7d6 fe15 	bl	7e4 <__aeabi_dsub>
   29bba:	b005      	add	sp, #20
   29bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bc0:	4602      	mov	r2, r0
   29bc2:	460b      	mov	r3, r1
   29bc4:	f7d6 ffc2 	bl	b4c <__aeabi_dmul>
   29bc8:	a341      	add	r3, pc, #260	; (adr r3, 29cd0 <__kernel_cos+0x200>)
   29bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bce:	4680      	mov	r8, r0
   29bd0:	4689      	mov	r9, r1
   29bd2:	f7d6 ffbb 	bl	b4c <__aeabi_dmul>
   29bd6:	a340      	add	r3, pc, #256	; (adr r3, 29cd8 <__kernel_cos+0x208>)
   29bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bdc:	f7d6 fe04 	bl	7e8 <__adddf3>
   29be0:	4642      	mov	r2, r8
   29be2:	464b      	mov	r3, r9
   29be4:	f7d6 ffb2 	bl	b4c <__aeabi_dmul>
   29be8:	a33d      	add	r3, pc, #244	; (adr r3, 29ce0 <__kernel_cos+0x210>)
   29bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bee:	f7d6 fdf9 	bl	7e4 <__aeabi_dsub>
   29bf2:	4642      	mov	r2, r8
   29bf4:	464b      	mov	r3, r9
   29bf6:	f7d6 ffa9 	bl	b4c <__aeabi_dmul>
   29bfa:	a33b      	add	r3, pc, #236	; (adr r3, 29ce8 <__kernel_cos+0x218>)
   29bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   29c00:	f7d6 fdf2 	bl	7e8 <__adddf3>
   29c04:	4642      	mov	r2, r8
   29c06:	464b      	mov	r3, r9
   29c08:	f7d6 ffa0 	bl	b4c <__aeabi_dmul>
   29c0c:	a338      	add	r3, pc, #224	; (adr r3, 29cf0 <__kernel_cos+0x220>)
   29c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   29c12:	f7d6 fde7 	bl	7e4 <__aeabi_dsub>
   29c16:	4642      	mov	r2, r8
   29c18:	464b      	mov	r3, r9
   29c1a:	f7d6 ff97 	bl	b4c <__aeabi_dmul>
   29c1e:	a336      	add	r3, pc, #216	; (adr r3, 29cf8 <__kernel_cos+0x228>)
   29c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   29c24:	f7d6 fde0 	bl	7e8 <__adddf3>
   29c28:	464b      	mov	r3, r9
   29c2a:	4642      	mov	r2, r8
   29c2c:	f7d6 ff8e 	bl	b4c <__aeabi_dmul>
   29c30:	4b35      	ldr	r3, [pc, #212]	; (29d08 <__kernel_cos+0x238>)
   29c32:	429e      	cmp	r6, r3
   29c34:	e9cd 0100 	strd	r0, r1, [sp]
   29c38:	dd97      	ble.n	29b6a <__kernel_cos+0x9a>
   29c3a:	4b34      	ldr	r3, [pc, #208]	; (29d0c <__kernel_cos+0x23c>)
   29c3c:	429e      	cmp	r6, r3
   29c3e:	f04f 0200 	mov.w	r2, #0
   29c42:	dc38      	bgt.n	29cb6 <__kernel_cos+0x1e6>
   29c44:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
   29c48:	2000      	movs	r0, #0
   29c4a:	492e      	ldr	r1, [pc, #184]	; (29d04 <__kernel_cos+0x234>)
   29c4c:	4616      	mov	r6, r2
   29c4e:	461f      	mov	r7, r3
   29c50:	f7d6 fdc8 	bl	7e4 <__aeabi_dsub>
   29c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29c58:	2200      	movs	r2, #0
   29c5a:	4b29      	ldr	r3, [pc, #164]	; (29d00 <__kernel_cos+0x230>)
   29c5c:	4640      	mov	r0, r8
   29c5e:	4649      	mov	r1, r9
   29c60:	f7d6 ff74 	bl	b4c <__aeabi_dmul>
   29c64:	4632      	mov	r2, r6
   29c66:	463b      	mov	r3, r7
   29c68:	f7d6 fdbc 	bl	7e4 <__aeabi_dsub>
   29c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
   29c70:	4606      	mov	r6, r0
   29c72:	460f      	mov	r7, r1
   29c74:	4640      	mov	r0, r8
   29c76:	4649      	mov	r1, r9
   29c78:	f7d6 ff68 	bl	b4c <__aeabi_dmul>
   29c7c:	4652      	mov	r2, sl
   29c7e:	4680      	mov	r8, r0
   29c80:	4689      	mov	r9, r1
   29c82:	465b      	mov	r3, fp
   29c84:	4628      	mov	r0, r5
   29c86:	4621      	mov	r1, r4
   29c88:	f7d6 ff60 	bl	b4c <__aeabi_dmul>
   29c8c:	4602      	mov	r2, r0
   29c8e:	460b      	mov	r3, r1
   29c90:	4640      	mov	r0, r8
   29c92:	4649      	mov	r1, r9
   29c94:	f7d6 fda6 	bl	7e4 <__aeabi_dsub>
   29c98:	4602      	mov	r2, r0
   29c9a:	460b      	mov	r3, r1
   29c9c:	4630      	mov	r0, r6
   29c9e:	4639      	mov	r1, r7
   29ca0:	f7d6 fda0 	bl	7e4 <__aeabi_dsub>
   29ca4:	4602      	mov	r2, r0
   29ca6:	460b      	mov	r3, r1
   29ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29cac:	f7d6 fd9a 	bl	7e4 <__aeabi_dsub>
   29cb0:	b005      	add	sp, #20
   29cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29cb6:	4b16      	ldr	r3, [pc, #88]	; (29d10 <__kernel_cos+0x240>)
   29cb8:	4f16      	ldr	r7, [pc, #88]	; (29d14 <__kernel_cos+0x244>)
   29cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29cbe:	2600      	movs	r6, #0
   29cc0:	e7ca      	b.n	29c58 <__kernel_cos+0x188>
   29cc2:	4910      	ldr	r1, [pc, #64]	; (29d04 <__kernel_cos+0x234>)
   29cc4:	2000      	movs	r0, #0
   29cc6:	b005      	add	sp, #20
   29cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ccc:	f3af 8000 	nop.w
   29cd0:	be8838d4 	.word	0xbe8838d4
   29cd4:	bda8fae9 	.word	0xbda8fae9
   29cd8:	bdb4b1c4 	.word	0xbdb4b1c4
   29cdc:	3e21ee9e 	.word	0x3e21ee9e
   29ce0:	809c52ad 	.word	0x809c52ad
   29ce4:	3e927e4f 	.word	0x3e927e4f
   29ce8:	19cb1590 	.word	0x19cb1590
   29cec:	3efa01a0 	.word	0x3efa01a0
   29cf0:	16c15177 	.word	0x16c15177
   29cf4:	3f56c16c 	.word	0x3f56c16c
   29cf8:	5555554c 	.word	0x5555554c
   29cfc:	3fa55555 	.word	0x3fa55555
   29d00:	3fe00000 	.word	0x3fe00000
   29d04:	3ff00000 	.word	0x3ff00000
   29d08:	3fd33332 	.word	0x3fd33332
   29d0c:	3fe90000 	.word	0x3fe90000
   29d10:	3fe70000 	.word	0x3fe70000
   29d14:	3fd20000 	.word	0x3fd20000

00029d18 <__kernel_rem_pio2>:
   29d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d1c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   29d20:	4c9c      	ldr	r4, [pc, #624]	; (29f94 <__kernel_rem_pio2+0x27c>)
   29d22:	9ea2      	ldr	r6, [sp, #648]	; 0x288
   29d24:	4d9c      	ldr	r5, [pc, #624]	; (29f98 <__kernel_rem_pio2+0x280>)
   29d26:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   29d2a:	9405      	str	r4, [sp, #20]
   29d2c:	4626      	mov	r6, r4
   29d2e:	1ed4      	subs	r4, r2, #3
   29d30:	fb85 7504 	smull	r7, r5, r5, r4
   29d34:	17e4      	asrs	r4, r4, #31
   29d36:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   29d3a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   29d3e:	461d      	mov	r5, r3
   29d40:	9308      	str	r3, [sp, #32]
   29d42:	1c63      	adds	r3, r4, #1
   29d44:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   29d48:	3d01      	subs	r5, #1
   29d4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29d4e:	9304      	str	r3, [sp, #16]
   29d50:	462b      	mov	r3, r5
   29d52:	9409      	str	r4, [sp, #36]	; 0x24
   29d54:	9502      	str	r5, [sp, #8]
   29d56:	1b65      	subs	r5, r4, r5
   29d58:	18f4      	adds	r4, r6, r3
   29d5a:	9003      	str	r0, [sp, #12]
   29d5c:	9106      	str	r1, [sp, #24]
   29d5e:	d41a      	bmi.n	29d96 <__kernel_rem_pio2+0x7e>
   29d60:	442c      	add	r4, r5
   29d62:	3401      	adds	r4, #1
   29d64:	f10d 0878 	add.w	r8, sp, #120	; 0x78
   29d68:	2600      	movs	r6, #0
   29d6a:	2700      	movs	r7, #0
   29d6c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   29d70:	e008      	b.n	29d84 <__kernel_rem_pio2+0x6c>
   29d72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   29d76:	f7d6 fe83 	bl	a80 <__aeabi_i2d>
   29d7a:	3501      	adds	r5, #1
   29d7c:	42a5      	cmp	r5, r4
   29d7e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   29d82:	d008      	beq.n	29d96 <__kernel_rem_pio2+0x7e>
   29d84:	2d00      	cmp	r5, #0
   29d86:	daf4      	bge.n	29d72 <__kernel_rem_pio2+0x5a>
   29d88:	3501      	adds	r5, #1
   29d8a:	4630      	mov	r0, r6
   29d8c:	4639      	mov	r1, r7
   29d8e:	42a5      	cmp	r5, r4
   29d90:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   29d94:	d1f6      	bne.n	29d84 <__kernel_rem_pio2+0x6c>
   29d96:	9b05      	ldr	r3, [sp, #20]
   29d98:	2b00      	cmp	r3, #0
   29d9a:	db2e      	blt.n	29dfa <__kernel_rem_pio2+0xe2>
   29d9c:	9b08      	ldr	r3, [sp, #32]
   29d9e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   29da2:	9b03      	ldr	r3, [sp, #12]
   29da4:	f1a9 0808 	sub.w	r8, r9, #8
   29da8:	4498      	add	r8, r3
   29daa:	ab20      	add	r3, sp, #128	; 0x80
   29dac:	4499      	add	r9, r3
   29dae:	9b05      	ldr	r3, [sp, #20]
   29db0:	aa70      	add	r2, sp, #448	; 0x1c0
   29db2:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   29db6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   29dba:	9b02      	ldr	r3, [sp, #8]
   29dbc:	2b00      	cmp	r3, #0
   29dbe:	f2c0 830f 	blt.w	2a3e0 <__kernel_rem_pio2+0x6c8>
   29dc2:	9b03      	ldr	r3, [sp, #12]
   29dc4:	464d      	mov	r5, r9
   29dc6:	f1a3 0408 	sub.w	r4, r3, #8
   29dca:	2600      	movs	r6, #0
   29dcc:	2700      	movs	r7, #0
   29dce:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   29dd2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   29dd6:	f7d6 feb9 	bl	b4c <__aeabi_dmul>
   29dda:	4602      	mov	r2, r0
   29ddc:	460b      	mov	r3, r1
   29dde:	4630      	mov	r0, r6
   29de0:	4639      	mov	r1, r7
   29de2:	f7d6 fd01 	bl	7e8 <__adddf3>
   29de6:	4544      	cmp	r4, r8
   29de8:	4606      	mov	r6, r0
   29dea:	460f      	mov	r7, r1
   29dec:	d1ef      	bne.n	29dce <__kernel_rem_pio2+0xb6>
   29dee:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   29df2:	45da      	cmp	sl, fp
   29df4:	f109 0908 	add.w	r9, r9, #8
   29df8:	d1df      	bne.n	29dba <__kernel_rem_pio2+0xa2>
   29dfa:	9805      	ldr	r0, [sp, #20]
   29dfc:	9a08      	ldr	r2, [sp, #32]
   29dfe:	9000      	str	r0, [sp, #0]
   29e00:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   29e04:	3b01      	subs	r3, #1
   29e06:	009b      	lsls	r3, r3, #2
   29e08:	ac0c      	add	r4, sp, #48	; 0x30
   29e0a:	1f19      	subs	r1, r3, #4
   29e0c:	4423      	add	r3, r4
   29e0e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   29e12:	930b      	str	r3, [sp, #44]	; 0x2c
   29e14:	9b03      	ldr	r3, [sp, #12]
   29e16:	3a01      	subs	r2, #1
   29e18:	4421      	add	r1, r4
   29e1a:	910a      	str	r1, [sp, #40]	; 0x28
   29e1c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
   29e20:	9a00      	ldr	r2, [sp, #0]
   29e22:	a998      	add	r1, sp, #608	; 0x260
   29e24:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   29e28:	2a00      	cmp	r2, #0
   29e2a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   29e2e:	4613      	mov	r3, r2
   29e30:	dd2b      	ble.n	29e8a <__kernel_rem_pio2+0x172>
   29e32:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   29e36:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
   29e3a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   29e3e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   29e42:	2200      	movs	r2, #0
   29e44:	4b55      	ldr	r3, [pc, #340]	; (29f9c <__kernel_rem_pio2+0x284>)
   29e46:	4620      	mov	r0, r4
   29e48:	4629      	mov	r1, r5
   29e4a:	f7d6 fe7f 	bl	b4c <__aeabi_dmul>
   29e4e:	f7d7 f92d 	bl	10ac <__aeabi_d2iz>
   29e52:	f7d6 fe15 	bl	a80 <__aeabi_i2d>
   29e56:	2200      	movs	r2, #0
   29e58:	4b51      	ldr	r3, [pc, #324]	; (29fa0 <__kernel_rem_pio2+0x288>)
   29e5a:	4606      	mov	r6, r0
   29e5c:	460f      	mov	r7, r1
   29e5e:	f7d6 fe75 	bl	b4c <__aeabi_dmul>
   29e62:	4602      	mov	r2, r0
   29e64:	460b      	mov	r3, r1
   29e66:	4620      	mov	r0, r4
   29e68:	4629      	mov	r1, r5
   29e6a:	f7d6 fcbb 	bl	7e4 <__aeabi_dsub>
   29e6e:	f7d7 f91d 	bl	10ac <__aeabi_d2iz>
   29e72:	e878 2302 	ldrd	r2, r3, [r8], #-8
   29e76:	f849 0f04 	str.w	r0, [r9, #4]!
   29e7a:	4639      	mov	r1, r7
   29e7c:	4630      	mov	r0, r6
   29e7e:	f7d6 fcb3 	bl	7e8 <__adddf3>
   29e82:	45d0      	cmp	r8, sl
   29e84:	4604      	mov	r4, r0
   29e86:	460d      	mov	r5, r1
   29e88:	d1db      	bne.n	29e42 <__kernel_rem_pio2+0x12a>
   29e8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   29e8e:	4620      	mov	r0, r4
   29e90:	4629      	mov	r1, r5
   29e92:	464a      	mov	r2, r9
   29e94:	f000 fcd0 	bl	2a838 <scalbn>
   29e98:	2200      	movs	r2, #0
   29e9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   29e9e:	4604      	mov	r4, r0
   29ea0:	460d      	mov	r5, r1
   29ea2:	f7d6 fe53 	bl	b4c <__aeabi_dmul>
   29ea6:	f000 fc3b 	bl	2a720 <floor>
   29eaa:	2200      	movs	r2, #0
   29eac:	4b3d      	ldr	r3, [pc, #244]	; (29fa4 <__kernel_rem_pio2+0x28c>)
   29eae:	f7d6 fe4d 	bl	b4c <__aeabi_dmul>
   29eb2:	4602      	mov	r2, r0
   29eb4:	460b      	mov	r3, r1
   29eb6:	4620      	mov	r0, r4
   29eb8:	4629      	mov	r1, r5
   29eba:	f7d6 fc93 	bl	7e4 <__aeabi_dsub>
   29ebe:	460d      	mov	r5, r1
   29ec0:	4604      	mov	r4, r0
   29ec2:	f7d7 f8f3 	bl	10ac <__aeabi_d2iz>
   29ec6:	4680      	mov	r8, r0
   29ec8:	f7d6 fdda 	bl	a80 <__aeabi_i2d>
   29ecc:	460b      	mov	r3, r1
   29ece:	4602      	mov	r2, r0
   29ed0:	4629      	mov	r1, r5
   29ed2:	4620      	mov	r0, r4
   29ed4:	f7d6 fc86 	bl	7e4 <__aeabi_dsub>
   29ed8:	464b      	mov	r3, r9
   29eda:	2b00      	cmp	r3, #0
   29edc:	4606      	mov	r6, r0
   29ede:	460f      	mov	r7, r1
   29ee0:	f340 80f7 	ble.w	2a0d2 <__kernel_rem_pio2+0x3ba>
   29ee4:	9a00      	ldr	r2, [sp, #0]
   29ee6:	a90c      	add	r1, sp, #48	; 0x30
   29ee8:	3a01      	subs	r2, #1
   29eea:	f1c9 0318 	rsb	r3, r9, #24
   29eee:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   29ef2:	fa45 f103 	asr.w	r1, r5, r3
   29ef6:	fa01 f303 	lsl.w	r3, r1, r3
   29efa:	a80c      	add	r0, sp, #48	; 0x30
   29efc:	1aeb      	subs	r3, r5, r3
   29efe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   29f02:	f1c9 0517 	rsb	r5, r9, #23
   29f06:	4488      	add	r8, r1
   29f08:	fa43 f505 	asr.w	r5, r3, r5
   29f0c:	2d00      	cmp	r5, #0
   29f0e:	dd63      	ble.n	29fd8 <__kernel_rem_pio2+0x2c0>
   29f10:	9b00      	ldr	r3, [sp, #0]
   29f12:	2b00      	cmp	r3, #0
   29f14:	f108 0801 	add.w	r8, r8, #1
   29f18:	f340 8281 	ble.w	2a41e <__kernel_rem_pio2+0x706>
   29f1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29f1e:	2c00      	cmp	r4, #0
   29f20:	f000 8318 	beq.w	2a554 <__kernel_rem_pio2+0x83c>
   29f24:	2001      	movs	r0, #1
   29f26:	2300      	movs	r3, #0
   29f28:	aa0c      	add	r2, sp, #48	; 0x30
   29f2a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   29f2e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   29f32:	9a00      	ldr	r2, [sp, #0]
   29f34:	4282      	cmp	r2, r0
   29f36:	dd19      	ble.n	29f6c <__kernel_rem_pio2+0x254>
   29f38:	aa0c      	add	r2, sp, #48	; 0x30
   29f3a:	ac0c      	add	r4, sp, #48	; 0x30
   29f3c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   29f40:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   29f44:	1a51      	subs	r1, r2, r1
   29f46:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
   29f4a:	9900      	ldr	r1, [sp, #0]
   29f4c:	3302      	adds	r3, #2
   29f4e:	4299      	cmp	r1, r3
   29f50:	dd0c      	ble.n	29f6c <__kernel_rem_pio2+0x254>
   29f52:	4610      	mov	r0, r2
   29f54:	9a00      	ldr	r2, [sp, #0]
   29f56:	a90c      	add	r1, sp, #48	; 0x30
   29f58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   29f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   29f60:	681a      	ldr	r2, [r3, #0]
   29f62:	1a82      	subs	r2, r0, r2
   29f64:	f843 2b04 	str.w	r2, [r3], #4
   29f68:	428b      	cmp	r3, r1
   29f6a:	d1f9      	bne.n	29f60 <__kernel_rem_pio2+0x248>
   29f6c:	9b04      	ldr	r3, [sp, #16]
   29f6e:	2b00      	cmp	r3, #0
   29f70:	dd1a      	ble.n	29fa8 <__kernel_rem_pio2+0x290>
   29f72:	9b04      	ldr	r3, [sp, #16]
   29f74:	2b01      	cmp	r3, #1
   29f76:	f04f 0401 	mov.w	r4, #1
   29f7a:	f040 8258 	bne.w	2a42e <__kernel_rem_pio2+0x716>
   29f7e:	9b00      	ldr	r3, [sp, #0]
   29f80:	1e5a      	subs	r2, r3, #1
   29f82:	ab0c      	add	r3, sp, #48	; 0x30
   29f84:	a90c      	add	r1, sp, #48	; 0x30
   29f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29f8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   29f8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   29f92:	e258      	b.n	2a446 <__kernel_rem_pio2+0x72e>
   29f94:	00031358 	.word	0x00031358
   29f98:	2aaaaaab 	.word	0x2aaaaaab
   29f9c:	3e700000 	.word	0x3e700000
   29fa0:	41700000 	.word	0x41700000
   29fa4:	40200000 	.word	0x40200000
   29fa8:	2d02      	cmp	r5, #2
   29faa:	d115      	bne.n	29fd8 <__kernel_rem_pio2+0x2c0>
   29fac:	4632      	mov	r2, r6
   29fae:	463b      	mov	r3, r7
   29fb0:	2000      	movs	r0, #0
   29fb2:	4997      	ldr	r1, [pc, #604]	; (2a210 <__kernel_rem_pio2+0x4f8>)
   29fb4:	f7d6 fc16 	bl	7e4 <__aeabi_dsub>
   29fb8:	4606      	mov	r6, r0
   29fba:	460f      	mov	r7, r1
   29fbc:	9a04      	ldr	r2, [sp, #16]
   29fbe:	4994      	ldr	r1, [pc, #592]	; (2a210 <__kernel_rem_pio2+0x4f8>)
   29fc0:	2000      	movs	r0, #0
   29fc2:	f000 fc39 	bl	2a838 <scalbn>
   29fc6:	4602      	mov	r2, r0
   29fc8:	460b      	mov	r3, r1
   29fca:	4630      	mov	r0, r6
   29fcc:	4639      	mov	r1, r7
   29fce:	f7d6 fc09 	bl	7e4 <__aeabi_dsub>
   29fd2:	2502      	movs	r5, #2
   29fd4:	4606      	mov	r6, r0
   29fd6:	460f      	mov	r7, r1
   29fd8:	2200      	movs	r2, #0
   29fda:	2300      	movs	r3, #0
   29fdc:	4630      	mov	r0, r6
   29fde:	4639      	mov	r1, r7
   29fe0:	f7d7 f81c 	bl	101c <__aeabi_dcmpeq>
   29fe4:	2800      	cmp	r0, #0
   29fe6:	f000 8252 	beq.w	2a48e <__kernel_rem_pio2+0x776>
   29fea:	9a00      	ldr	r2, [sp, #0]
   29fec:	9b05      	ldr	r3, [sp, #20]
   29fee:	1e50      	subs	r0, r2, #1
   29ff0:	4283      	cmp	r3, r0
   29ff2:	dc0f      	bgt.n	2a014 <__kernel_rem_pio2+0x2fc>
   29ff4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   29ff8:	3b01      	subs	r3, #1
   29ffa:	aa0c      	add	r2, sp, #48	; 0x30
   29ffc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a002:	2200      	movs	r2, #0
   2a004:	f853 1904 	ldr.w	r1, [r3], #-4
   2a008:	42a3      	cmp	r3, r4
   2a00a:	ea42 0201 	orr.w	r2, r2, r1
   2a00e:	d1f9      	bne.n	2a004 <__kernel_rem_pio2+0x2ec>
   2a010:	2a00      	cmp	r2, #0
   2a012:	d16f      	bne.n	2a0f4 <__kernel_rem_pio2+0x3dc>
   2a014:	9b05      	ldr	r3, [sp, #20]
   2a016:	aa0c      	add	r2, sp, #48	; 0x30
   2a018:	3b01      	subs	r3, #1
   2a01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2a01e:	2b00      	cmp	r3, #0
   2a020:	f040 8233 	bne.w	2a48a <__kernel_rem_pio2+0x772>
   2a024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2a026:	2301      	movs	r3, #1
   2a028:	f852 1904 	ldr.w	r1, [r2], #-4
   2a02c:	3301      	adds	r3, #1
   2a02e:	2900      	cmp	r1, #0
   2a030:	d0fa      	beq.n	2a028 <__kernel_rem_pio2+0x310>
   2a032:	9a00      	ldr	r2, [sp, #0]
   2a034:	18d3      	adds	r3, r2, r3
   2a036:	f102 0a01 	add.w	sl, r2, #1
   2a03a:	459a      	cmp	sl, r3
   2a03c:	9307      	str	r3, [sp, #28]
   2a03e:	dc3d      	bgt.n	2a0bc <__kernel_rem_pio2+0x3a4>
   2a040:	9b00      	ldr	r3, [sp, #0]
   2a042:	9908      	ldr	r1, [sp, #32]
   2a044:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a046:	440b      	add	r3, r1
   2a048:	9907      	ldr	r1, [sp, #28]
   2a04a:	eb0a 0802 	add.w	r8, sl, r2
   2a04e:	4699      	mov	r9, r3
   2a050:	ab20      	add	r3, sp, #128	; 0x80
   2a052:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   2a056:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   2a05a:	188b      	adds	r3, r1, r2
   2a05c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   2a05e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2a062:	eb02 0888 	add.w	r8, r2, r8, lsl #2
   2a066:	aa70      	add	r2, sp, #448	; 0x1c0
   2a068:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
   2a06c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   2a06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a072:	9300      	str	r3, [sp, #0]
   2a074:	f858 0f04 	ldr.w	r0, [r8, #4]!
   2a078:	f7d6 fd02 	bl	a80 <__aeabi_i2d>
   2a07c:	9b02      	ldr	r3, [sp, #8]
   2a07e:	2b00      	cmp	r3, #0
   2a080:	e8e9 0102 	strd	r0, r1, [r9], #8
   2a084:	db1d      	blt.n	2a0c2 <__kernel_rem_pio2+0x3aa>
   2a086:	9b03      	ldr	r3, [sp, #12]
   2a088:	464d      	mov	r5, r9
   2a08a:	f1a3 0408 	sub.w	r4, r3, #8
   2a08e:	2600      	movs	r6, #0
   2a090:	2700      	movs	r7, #0
   2a092:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   2a096:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   2a09a:	f7d6 fd57 	bl	b4c <__aeabi_dmul>
   2a09e:	4602      	mov	r2, r0
   2a0a0:	460b      	mov	r3, r1
   2a0a2:	4630      	mov	r0, r6
   2a0a4:	4639      	mov	r1, r7
   2a0a6:	f7d6 fb9f 	bl	7e8 <__adddf3>
   2a0aa:	455c      	cmp	r4, fp
   2a0ac:	4606      	mov	r6, r0
   2a0ae:	460f      	mov	r7, r1
   2a0b0:	d1ef      	bne.n	2a092 <__kernel_rem_pio2+0x37a>
   2a0b2:	9b00      	ldr	r3, [sp, #0]
   2a0b4:	4598      	cmp	r8, r3
   2a0b6:	e8ea 6702 	strd	r6, r7, [sl], #8
   2a0ba:	d1db      	bne.n	2a074 <__kernel_rem_pio2+0x35c>
   2a0bc:	9b07      	ldr	r3, [sp, #28]
   2a0be:	9300      	str	r3, [sp, #0]
   2a0c0:	e6ae      	b.n	29e20 <__kernel_rem_pio2+0x108>
   2a0c2:	9b00      	ldr	r3, [sp, #0]
   2a0c4:	2600      	movs	r6, #0
   2a0c6:	2700      	movs	r7, #0
   2a0c8:	4598      	cmp	r8, r3
   2a0ca:	e8ea 6702 	strd	r6, r7, [sl], #8
   2a0ce:	d1d1      	bne.n	2a074 <__kernel_rem_pio2+0x35c>
   2a0d0:	e7f4      	b.n	2a0bc <__kernel_rem_pio2+0x3a4>
   2a0d2:	d106      	bne.n	2a0e2 <__kernel_rem_pio2+0x3ca>
   2a0d4:	9b00      	ldr	r3, [sp, #0]
   2a0d6:	aa0c      	add	r2, sp, #48	; 0x30
   2a0d8:	3b01      	subs	r3, #1
   2a0da:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2a0de:	15ed      	asrs	r5, r5, #23
   2a0e0:	e714      	b.n	29f0c <__kernel_rem_pio2+0x1f4>
   2a0e2:	2200      	movs	r2, #0
   2a0e4:	4b4b      	ldr	r3, [pc, #300]	; (2a214 <__kernel_rem_pio2+0x4fc>)
   2a0e6:	f7d6 ffb7 	bl	1058 <__aeabi_dcmpge>
   2a0ea:	2800      	cmp	r0, #0
   2a0ec:	f040 8182 	bne.w	2a3f4 <__kernel_rem_pio2+0x6dc>
   2a0f0:	4605      	mov	r5, r0
   2a0f2:	e771      	b.n	29fd8 <__kernel_rem_pio2+0x2c0>
   2a0f4:	a90c      	add	r1, sp, #48	; 0x30
   2a0f6:	9502      	str	r5, [sp, #8]
   2a0f8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   2a0fc:	9904      	ldr	r1, [sp, #16]
   2a0fe:	f8cd 801c 	str.w	r8, [sp, #28]
   2a102:	3918      	subs	r1, #24
   2a104:	4602      	mov	r2, r0
   2a106:	9000      	str	r0, [sp, #0]
   2a108:	9104      	str	r1, [sp, #16]
   2a10a:	b96b      	cbnz	r3, 2a128 <__kernel_rem_pio2+0x410>
   2a10c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2a110:	3b01      	subs	r3, #1
   2a112:	a80c      	add	r0, sp, #48	; 0x30
   2a114:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2a118:	f853 0904 	ldr.w	r0, [r3], #-4
   2a11c:	3a01      	subs	r2, #1
   2a11e:	3918      	subs	r1, #24
   2a120:	2800      	cmp	r0, #0
   2a122:	d0f9      	beq.n	2a118 <__kernel_rem_pio2+0x400>
   2a124:	9200      	str	r2, [sp, #0]
   2a126:	9104      	str	r1, [sp, #16]
   2a128:	9a04      	ldr	r2, [sp, #16]
   2a12a:	4939      	ldr	r1, [pc, #228]	; (2a210 <__kernel_rem_pio2+0x4f8>)
   2a12c:	2000      	movs	r0, #0
   2a12e:	f000 fb83 	bl	2a838 <scalbn>
   2a132:	9b00      	ldr	r3, [sp, #0]
   2a134:	2b00      	cmp	r3, #0
   2a136:	4604      	mov	r4, r0
   2a138:	460d      	mov	r5, r1
   2a13a:	f2c0 8203 	blt.w	2a544 <__kernel_rem_pio2+0x82c>
   2a13e:	00da      	lsls	r2, r3, #3
   2a140:	a970      	add	r1, sp, #448	; 0x1c0
   2a142:	eb01 0b02 	add.w	fp, r1, r2
   2a146:	9204      	str	r2, [sp, #16]
   2a148:	aa0c      	add	r2, sp, #48	; 0x30
   2a14a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   2a14e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2a218 <__kernel_rem_pio2+0x500>
   2a152:	f10b 0708 	add.w	r7, fp, #8
   2a156:	3604      	adds	r6, #4
   2a158:	f04f 0800 	mov.w	r8, #0
   2a15c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   2a160:	f7d6 fc8e 	bl	a80 <__aeabi_i2d>
   2a164:	4622      	mov	r2, r4
   2a166:	462b      	mov	r3, r5
   2a168:	f7d6 fcf0 	bl	b4c <__aeabi_dmul>
   2a16c:	464b      	mov	r3, r9
   2a16e:	e967 0102 	strd	r0, r1, [r7, #-8]!
   2a172:	4642      	mov	r2, r8
   2a174:	4620      	mov	r0, r4
   2a176:	4629      	mov	r1, r5
   2a178:	f7d6 fce8 	bl	b4c <__aeabi_dmul>
   2a17c:	ab0c      	add	r3, sp, #48	; 0x30
   2a17e:	429e      	cmp	r6, r3
   2a180:	4604      	mov	r4, r0
   2a182:	460d      	mov	r5, r1
   2a184:	d1ea      	bne.n	2a15c <__kernel_rem_pio2+0x444>
   2a186:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a18a:	f8cd a00c 	str.w	sl, [sp, #12]
   2a18e:	f8dd a014 	ldr.w	sl, [sp, #20]
   2a192:	f04f 0900 	mov.w	r9, #0
   2a196:	f1ba 0f00 	cmp.w	sl, #0
   2a19a:	f2c0 813d 	blt.w	2a418 <__kernel_rem_pio2+0x700>
   2a19e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a21c <__kernel_rem_pio2+0x504>
   2a1a2:	465d      	mov	r5, fp
   2a1a4:	a118      	add	r1, pc, #96	; (adr r1, 2a208 <__kernel_rem_pio2+0x4f0>)
   2a1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a1aa:	2600      	movs	r6, #0
   2a1ac:	2700      	movs	r7, #0
   2a1ae:	2400      	movs	r4, #0
   2a1b0:	e003      	b.n	2a1ba <__kernel_rem_pio2+0x4a2>
   2a1b2:	454c      	cmp	r4, r9
   2a1b4:	dc10      	bgt.n	2a1d8 <__kernel_rem_pio2+0x4c0>
   2a1b6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   2a1ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   2a1be:	f7d6 fcc5 	bl	b4c <__aeabi_dmul>
   2a1c2:	4602      	mov	r2, r0
   2a1c4:	460b      	mov	r3, r1
   2a1c6:	4630      	mov	r0, r6
   2a1c8:	4639      	mov	r1, r7
   2a1ca:	f7d6 fb0d 	bl	7e8 <__adddf3>
   2a1ce:	3401      	adds	r4, #1
   2a1d0:	45a2      	cmp	sl, r4
   2a1d2:	4606      	mov	r6, r0
   2a1d4:	460f      	mov	r7, r1
   2a1d6:	daec      	bge.n	2a1b2 <__kernel_rem_pio2+0x49a>
   2a1d8:	9b03      	ldr	r3, [sp, #12]
   2a1da:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   2a1de:	f1ab 0b08 	sub.w	fp, fp, #8
   2a1e2:	e9c3 6700 	strd	r6, r7, [r3]
   2a1e6:	ab6e      	add	r3, sp, #440	; 0x1b8
   2a1e8:	455b      	cmp	r3, fp
   2a1ea:	f109 0901 	add.w	r9, r9, #1
   2a1ee:	d1d2      	bne.n	2a196 <__kernel_rem_pio2+0x47e>
   2a1f0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a1f2:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2a1f6:	2b03      	cmp	r3, #3
   2a1f8:	f200 808b 	bhi.w	2a312 <__kernel_rem_pio2+0x5fa>
   2a1fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a200:	009000d1 	.word	0x009000d1
   2a204:	00100090 	.word	0x00100090
   2a208:	40000000 	.word	0x40000000
   2a20c:	3ff921fb 	.word	0x3ff921fb
   2a210:	3ff00000 	.word	0x3ff00000
   2a214:	3fe00000 	.word	0x3fe00000
   2a218:	3e700000 	.word	0x3e700000
   2a21c:	00031320 	.word	0x00031320
   2a220:	9b00      	ldr	r3, [sp, #0]
   2a222:	2b00      	cmp	r3, #0
   2a224:	f340 81a4 	ble.w	2a570 <__kernel_rem_pio2+0x858>
   2a228:	9b04      	ldr	r3, [sp, #16]
   2a22a:	eb0a 0803 	add.w	r8, sl, r3
   2a22e:	e9d8 6700 	ldrd	r6, r7, [r8]
   2a232:	46d3      	mov	fp, sl
   2a234:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
   2a238:	4632      	mov	r2, r6
   2a23a:	463b      	mov	r3, r7
   2a23c:	4648      	mov	r0, r9
   2a23e:	4651      	mov	r1, sl
   2a240:	f7d6 fad2 	bl	7e8 <__adddf3>
   2a244:	4604      	mov	r4, r0
   2a246:	460d      	mov	r5, r1
   2a248:	4602      	mov	r2, r0
   2a24a:	460b      	mov	r3, r1
   2a24c:	4648      	mov	r0, r9
   2a24e:	4651      	mov	r1, sl
   2a250:	f7d6 fac8 	bl	7e4 <__aeabi_dsub>
   2a254:	4632      	mov	r2, r6
   2a256:	463b      	mov	r3, r7
   2a258:	f7d6 fac6 	bl	7e8 <__adddf3>
   2a25c:	e9c8 0100 	strd	r0, r1, [r8]
   2a260:	e968 4502 	strd	r4, r5, [r8, #-8]!
   2a264:	45c3      	cmp	fp, r8
   2a266:	4626      	mov	r6, r4
   2a268:	462f      	mov	r7, r5
   2a26a:	d1e3      	bne.n	2a234 <__kernel_rem_pio2+0x51c>
   2a26c:	9b00      	ldr	r3, [sp, #0]
   2a26e:	2b01      	cmp	r3, #1
   2a270:	46da      	mov	sl, fp
   2a272:	f340 817d 	ble.w	2a570 <__kernel_rem_pio2+0x858>
   2a276:	9b04      	ldr	r3, [sp, #16]
   2a278:	445b      	add	r3, fp
   2a27a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2a27e:	4698      	mov	r8, r3
   2a280:	4699      	mov	r9, r3
   2a282:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   2a286:	e959 3402 	ldrd	r3, r4, [r9, #-8]
   2a28a:	4632      	mov	r2, r6
   2a28c:	4618      	mov	r0, r3
   2a28e:	4621      	mov	r1, r4
   2a290:	463b      	mov	r3, r7
   2a292:	e9cd 0100 	strd	r0, r1, [sp]
   2a296:	f7d6 faa7 	bl	7e8 <__adddf3>
   2a29a:	4604      	mov	r4, r0
   2a29c:	460d      	mov	r5, r1
   2a29e:	4602      	mov	r2, r0
   2a2a0:	460b      	mov	r3, r1
   2a2a2:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a2a6:	f7d6 fa9d 	bl	7e4 <__aeabi_dsub>
   2a2aa:	4632      	mov	r2, r6
   2a2ac:	463b      	mov	r3, r7
   2a2ae:	f7d6 fa9b 	bl	7e8 <__adddf3>
   2a2b2:	e9c9 0100 	strd	r0, r1, [r9]
   2a2b6:	e969 4502 	strd	r4, r5, [r9, #-8]!
   2a2ba:	45cb      	cmp	fp, r9
   2a2bc:	4626      	mov	r6, r4
   2a2be:	462f      	mov	r7, r5
   2a2c0:	d1e1      	bne.n	2a286 <__kernel_rem_pio2+0x56e>
   2a2c2:	2300      	movs	r3, #0
   2a2c4:	f108 0808 	add.w	r8, r8, #8
   2a2c8:	461d      	mov	r5, r3
   2a2ca:	ac4c      	add	r4, sp, #304	; 0x130
   2a2cc:	4618      	mov	r0, r3
   2a2ce:	4629      	mov	r1, r5
   2a2d0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   2a2d4:	f7d6 fa88 	bl	7e8 <__adddf3>
   2a2d8:	4544      	cmp	r4, r8
   2a2da:	4603      	mov	r3, r0
   2a2dc:	460d      	mov	r5, r1
   2a2de:	d1f5      	bne.n	2a2cc <__kernel_rem_pio2+0x5b4>
   2a2e0:	9a02      	ldr	r2, [sp, #8]
   2a2e2:	2a00      	cmp	r2, #0
   2a2e4:	f000 8120 	beq.w	2a528 <__kernel_rem_pio2+0x810>
   2a2e8:	f8da 4004 	ldr.w	r4, [sl, #4]
   2a2ec:	f8da 200c 	ldr.w	r2, [sl, #12]
   2a2f0:	9f06      	ldr	r7, [sp, #24]
   2a2f2:	f8da 1000 	ldr.w	r1, [sl]
   2a2f6:	f8da 0008 	ldr.w	r0, [sl, #8]
   2a2fa:	613b      	str	r3, [r7, #16]
   2a2fc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   2a300:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   2a304:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   2a308:	617d      	str	r5, [r7, #20]
   2a30a:	607c      	str	r4, [r7, #4]
   2a30c:	60fa      	str	r2, [r7, #12]
   2a30e:	6039      	str	r1, [r7, #0]
   2a310:	60b8      	str	r0, [r7, #8]
   2a312:	9b07      	ldr	r3, [sp, #28]
   2a314:	f003 0007 	and.w	r0, r3, #7
   2a318:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a320:	9c04      	ldr	r4, [sp, #16]
   2a322:	2600      	movs	r6, #0
   2a324:	3408      	adds	r4, #8
   2a326:	4454      	add	r4, sl
   2a328:	4633      	mov	r3, r6
   2a32a:	4630      	mov	r0, r6
   2a32c:	4619      	mov	r1, r3
   2a32e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   2a332:	f7d6 fa59 	bl	7e8 <__adddf3>
   2a336:	4554      	cmp	r4, sl
   2a338:	4606      	mov	r6, r0
   2a33a:	460b      	mov	r3, r1
   2a33c:	d1f5      	bne.n	2a32a <__kernel_rem_pio2+0x612>
   2a33e:	9a02      	ldr	r2, [sp, #8]
   2a340:	4630      	mov	r0, r6
   2a342:	4619      	mov	r1, r3
   2a344:	2a00      	cmp	r2, #0
   2a346:	f000 80da 	beq.w	2a4fe <__kernel_rem_pio2+0x7e6>
   2a34a:	9806      	ldr	r0, [sp, #24]
   2a34c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
   2a350:	4632      	mov	r2, r6
   2a352:	6044      	str	r4, [r0, #4]
   2a354:	6006      	str	r6, [r0, #0]
   2a356:	e9da 0100 	ldrd	r0, r1, [sl]
   2a35a:	f7d6 fa43 	bl	7e4 <__aeabi_dsub>
   2a35e:	460b      	mov	r3, r1
   2a360:	9900      	ldr	r1, [sp, #0]
   2a362:	2900      	cmp	r1, #0
   2a364:	4602      	mov	r2, r0
   2a366:	dd0e      	ble.n	2a386 <__kernel_rem_pio2+0x66e>
   2a368:	2401      	movs	r4, #1
   2a36a:	4610      	mov	r0, r2
   2a36c:	4619      	mov	r1, r3
   2a36e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
   2a372:	f7d6 fa39 	bl	7e8 <__adddf3>
   2a376:	460b      	mov	r3, r1
   2a378:	9900      	ldr	r1, [sp, #0]
   2a37a:	3401      	adds	r4, #1
   2a37c:	42a1      	cmp	r1, r4
   2a37e:	4602      	mov	r2, r0
   2a380:	daf3      	bge.n	2a36a <__kernel_rem_pio2+0x652>
   2a382:	9902      	ldr	r1, [sp, #8]
   2a384:	b109      	cbz	r1, 2a38a <__kernel_rem_pio2+0x672>
   2a386:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   2a38a:	4619      	mov	r1, r3
   2a38c:	9b06      	ldr	r3, [sp, #24]
   2a38e:	4610      	mov	r0, r2
   2a390:	e9c3 0102 	strd	r0, r1, [r3, #8]
   2a394:	9b07      	ldr	r3, [sp, #28]
   2a396:	f003 0007 	and.w	r0, r3, #7
   2a39a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3a2:	9c04      	ldr	r4, [sp, #16]
   2a3a4:	2200      	movs	r2, #0
   2a3a6:	3408      	adds	r4, #8
   2a3a8:	4454      	add	r4, sl
   2a3aa:	4613      	mov	r3, r2
   2a3ac:	4610      	mov	r0, r2
   2a3ae:	4619      	mov	r1, r3
   2a3b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   2a3b4:	f7d6 fa18 	bl	7e8 <__adddf3>
   2a3b8:	45a2      	cmp	sl, r4
   2a3ba:	4602      	mov	r2, r0
   2a3bc:	460b      	mov	r3, r1
   2a3be:	d1f5      	bne.n	2a3ac <__kernel_rem_pio2+0x694>
   2a3c0:	9902      	ldr	r1, [sp, #8]
   2a3c2:	b109      	cbz	r1, 2a3c8 <__kernel_rem_pio2+0x6b0>
   2a3c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   2a3c8:	4619      	mov	r1, r3
   2a3ca:	9b06      	ldr	r3, [sp, #24]
   2a3cc:	4610      	mov	r0, r2
   2a3ce:	e9c3 0100 	strd	r0, r1, [r3]
   2a3d2:	9b07      	ldr	r3, [sp, #28]
   2a3d4:	f003 0007 	and.w	r0, r3, #7
   2a3d8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3e0:	2600      	movs	r6, #0
   2a3e2:	2700      	movs	r7, #0
   2a3e4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   2a3e8:	45da      	cmp	sl, fp
   2a3ea:	f109 0908 	add.w	r9, r9, #8
   2a3ee:	f47f ace4 	bne.w	29dba <__kernel_rem_pio2+0xa2>
   2a3f2:	e502      	b.n	29dfa <__kernel_rem_pio2+0xe2>
   2a3f4:	9b00      	ldr	r3, [sp, #0]
   2a3f6:	2b00      	cmp	r3, #0
   2a3f8:	f108 0801 	add.w	r8, r8, #1
   2a3fc:	bfc8      	it	gt
   2a3fe:	2502      	movgt	r5, #2
   2a400:	f73f ad8c 	bgt.w	29f1c <__kernel_rem_pio2+0x204>
   2a404:	4632      	mov	r2, r6
   2a406:	463b      	mov	r3, r7
   2a408:	2000      	movs	r0, #0
   2a40a:	4963      	ldr	r1, [pc, #396]	; (2a598 <__kernel_rem_pio2+0x880>)
   2a40c:	f7d6 f9ea 	bl	7e4 <__aeabi_dsub>
   2a410:	2502      	movs	r5, #2
   2a412:	4606      	mov	r6, r0
   2a414:	460f      	mov	r7, r1
   2a416:	e5df      	b.n	29fd8 <__kernel_rem_pio2+0x2c0>
   2a418:	2600      	movs	r6, #0
   2a41a:	2700      	movs	r7, #0
   2a41c:	e6dc      	b.n	2a1d8 <__kernel_rem_pio2+0x4c0>
   2a41e:	9b04      	ldr	r3, [sp, #16]
   2a420:	2b00      	cmp	r3, #0
   2a422:	dd26      	ble.n	2a472 <__kernel_rem_pio2+0x75a>
   2a424:	2400      	movs	r4, #0
   2a426:	9b04      	ldr	r3, [sp, #16]
   2a428:	2b01      	cmp	r3, #1
   2a42a:	f43f ada8 	beq.w	29f7e <__kernel_rem_pio2+0x266>
   2a42e:	2b02      	cmp	r3, #2
   2a430:	d109      	bne.n	2a446 <__kernel_rem_pio2+0x72e>
   2a432:	9b00      	ldr	r3, [sp, #0]
   2a434:	1e5a      	subs	r2, r3, #1
   2a436:	ab0c      	add	r3, sp, #48	; 0x30
   2a438:	a90c      	add	r1, sp, #48	; 0x30
   2a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2a43e:	f3c3 0315 	ubfx	r3, r3, #0, #22
   2a442:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   2a446:	2d02      	cmp	r5, #2
   2a448:	f47f adc6 	bne.w	29fd8 <__kernel_rem_pio2+0x2c0>
   2a44c:	4632      	mov	r2, r6
   2a44e:	463b      	mov	r3, r7
   2a450:	2000      	movs	r0, #0
   2a452:	4951      	ldr	r1, [pc, #324]	; (2a598 <__kernel_rem_pio2+0x880>)
   2a454:	f7d6 f9c6 	bl	7e4 <__aeabi_dsub>
   2a458:	4606      	mov	r6, r0
   2a45a:	460f      	mov	r7, r1
   2a45c:	2c00      	cmp	r4, #0
   2a45e:	f43f adbb 	beq.w	29fd8 <__kernel_rem_pio2+0x2c0>
   2a462:	e5ab      	b.n	29fbc <__kernel_rem_pio2+0x2a4>
   2a464:	9900      	ldr	r1, [sp, #0]
   2a466:	3301      	adds	r3, #1
   2a468:	4299      	cmp	r1, r3
   2a46a:	d178      	bne.n	2a55e <__kernel_rem_pio2+0x846>
   2a46c:	9b04      	ldr	r3, [sp, #16]
   2a46e:	2b00      	cmp	r3, #0
   2a470:	dcd9      	bgt.n	2a426 <__kernel_rem_pio2+0x70e>
   2a472:	2d02      	cmp	r5, #2
   2a474:	f47f adb0 	bne.w	29fd8 <__kernel_rem_pio2+0x2c0>
   2a478:	4632      	mov	r2, r6
   2a47a:	463b      	mov	r3, r7
   2a47c:	2000      	movs	r0, #0
   2a47e:	4946      	ldr	r1, [pc, #280]	; (2a598 <__kernel_rem_pio2+0x880>)
   2a480:	f7d6 f9b0 	bl	7e4 <__aeabi_dsub>
   2a484:	4606      	mov	r6, r0
   2a486:	460f      	mov	r7, r1
   2a488:	e5a6      	b.n	29fd8 <__kernel_rem_pio2+0x2c0>
   2a48a:	2301      	movs	r3, #1
   2a48c:	e5d1      	b.n	2a032 <__kernel_rem_pio2+0x31a>
   2a48e:	4639      	mov	r1, r7
   2a490:	9f04      	ldr	r7, [sp, #16]
   2a492:	9502      	str	r5, [sp, #8]
   2a494:	427a      	negs	r2, r7
   2a496:	4630      	mov	r0, r6
   2a498:	f8cd 801c 	str.w	r8, [sp, #28]
   2a49c:	f000 f9cc 	bl	2a838 <scalbn>
   2a4a0:	2200      	movs	r2, #0
   2a4a2:	4b3e      	ldr	r3, [pc, #248]	; (2a59c <__kernel_rem_pio2+0x884>)
   2a4a4:	4604      	mov	r4, r0
   2a4a6:	460d      	mov	r5, r1
   2a4a8:	f7d6 fdd6 	bl	1058 <__aeabi_dcmpge>
   2a4ac:	2800      	cmp	r0, #0
   2a4ae:	d062      	beq.n	2a576 <__kernel_rem_pio2+0x85e>
   2a4b0:	2200      	movs	r2, #0
   2a4b2:	4b3b      	ldr	r3, [pc, #236]	; (2a5a0 <__kernel_rem_pio2+0x888>)
   2a4b4:	4620      	mov	r0, r4
   2a4b6:	4629      	mov	r1, r5
   2a4b8:	f7d6 fb48 	bl	b4c <__aeabi_dmul>
   2a4bc:	f7d6 fdf6 	bl	10ac <__aeabi_d2iz>
   2a4c0:	4606      	mov	r6, r0
   2a4c2:	f7d6 fadd 	bl	a80 <__aeabi_i2d>
   2a4c6:	2200      	movs	r2, #0
   2a4c8:	4b34      	ldr	r3, [pc, #208]	; (2a59c <__kernel_rem_pio2+0x884>)
   2a4ca:	f7d6 fb3f 	bl	b4c <__aeabi_dmul>
   2a4ce:	4602      	mov	r2, r0
   2a4d0:	460b      	mov	r3, r1
   2a4d2:	4620      	mov	r0, r4
   2a4d4:	4629      	mov	r1, r5
   2a4d6:	f7d6 f985 	bl	7e4 <__aeabi_dsub>
   2a4da:	f7d6 fde7 	bl	10ac <__aeabi_d2iz>
   2a4de:	9900      	ldr	r1, [sp, #0]
   2a4e0:	460b      	mov	r3, r1
   2a4e2:	3301      	adds	r3, #1
   2a4e4:	461a      	mov	r2, r3
   2a4e6:	9300      	str	r3, [sp, #0]
   2a4e8:	463b      	mov	r3, r7
   2a4ea:	3318      	adds	r3, #24
   2a4ec:	9304      	str	r3, [sp, #16]
   2a4ee:	460b      	mov	r3, r1
   2a4f0:	a90c      	add	r1, sp, #48	; 0x30
   2a4f2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   2a4f6:	4613      	mov	r3, r2
   2a4f8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   2a4fc:	e614      	b.n	2a128 <__kernel_rem_pio2+0x410>
   2a4fe:	9b06      	ldr	r3, [sp, #24]
   2a500:	4632      	mov	r2, r6
   2a502:	e9c3 0100 	strd	r0, r1, [r3]
   2a506:	460b      	mov	r3, r1
   2a508:	e9da 0100 	ldrd	r0, r1, [sl]
   2a50c:	f7d6 f96a 	bl	7e4 <__aeabi_dsub>
   2a510:	460b      	mov	r3, r1
   2a512:	9900      	ldr	r1, [sp, #0]
   2a514:	2900      	cmp	r1, #0
   2a516:	4602      	mov	r2, r0
   2a518:	f73f af26 	bgt.w	2a368 <__kernel_rem_pio2+0x650>
   2a51c:	4619      	mov	r1, r3
   2a51e:	9b06      	ldr	r3, [sp, #24]
   2a520:	4610      	mov	r0, r2
   2a522:	e9c3 0102 	strd	r0, r1, [r3, #8]
   2a526:	e735      	b.n	2a394 <__kernel_rem_pio2+0x67c>
   2a528:	4618      	mov	r0, r3
   2a52a:	4629      	mov	r1, r5
   2a52c:	e9da 2300 	ldrd	r2, r3, [sl]
   2a530:	e9da 4502 	ldrd	r4, r5, [sl, #8]
   2a534:	9f06      	ldr	r7, [sp, #24]
   2a536:	e9c7 0104 	strd	r0, r1, [r7, #16]
   2a53a:	e9c7 2300 	strd	r2, r3, [r7]
   2a53e:	e9c7 4502 	strd	r4, r5, [r7, #8]
   2a542:	e6e6      	b.n	2a312 <__kernel_rem_pio2+0x5fa>
   2a544:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a546:	2b03      	cmp	r3, #3
   2a548:	f63f aee3 	bhi.w	2a312 <__kernel_rem_pio2+0x5fa>
   2a54c:	e8df f003 	tbb	[pc, r3]
   2a550:	0e1c1c21 	.word	0x0e1c1c21
   2a554:	9b00      	ldr	r3, [sp, #0]
   2a556:	2b01      	cmp	r3, #1
   2a558:	dd88      	ble.n	2a46c <__kernel_rem_pio2+0x754>
   2a55a:	aa0c      	add	r2, sp, #48	; 0x30
   2a55c:	2301      	movs	r3, #1
   2a55e:	f852 4f04 	ldr.w	r4, [r2, #4]!
   2a562:	2c00      	cmp	r4, #0
   2a564:	f43f af7e 	beq.w	2a464 <__kernel_rem_pio2+0x74c>
   2a568:	1c58      	adds	r0, r3, #1
   2a56a:	e4dd      	b.n	29f28 <__kernel_rem_pio2+0x210>
   2a56c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a570:	2300      	movs	r3, #0
   2a572:	461d      	mov	r5, r3
   2a574:	e6b4      	b.n	2a2e0 <__kernel_rem_pio2+0x5c8>
   2a576:	4629      	mov	r1, r5
   2a578:	4620      	mov	r0, r4
   2a57a:	f7d6 fd97 	bl	10ac <__aeabi_d2iz>
   2a57e:	9a00      	ldr	r2, [sp, #0]
   2a580:	a90c      	add	r1, sp, #48	; 0x30
   2a582:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   2a586:	e5cf      	b.n	2a128 <__kernel_rem_pio2+0x410>
   2a588:	2600      	movs	r6, #0
   2a58a:	4633      	mov	r3, r6
   2a58c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a590:	e6d5      	b.n	2a33e <__kernel_rem_pio2+0x626>
   2a592:	2200      	movs	r2, #0
   2a594:	4613      	mov	r3, r2
   2a596:	e713      	b.n	2a3c0 <__kernel_rem_pio2+0x6a8>
   2a598:	3ff00000 	.word	0x3ff00000
   2a59c:	41700000 	.word	0x41700000
   2a5a0:	3e700000 	.word	0x3e700000
   2a5a4:	00000000 	.word	0x00000000

0002a5a8 <__kernel_sin>:
   2a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   2a5b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   2a5b4:	b085      	sub	sp, #20
   2a5b6:	460c      	mov	r4, r1
   2a5b8:	4690      	mov	r8, r2
   2a5ba:	4699      	mov	r9, r3
   2a5bc:	4605      	mov	r5, r0
   2a5be:	da04      	bge.n	2a5ca <__kernel_sin+0x22>
   2a5c0:	f7d6 fd74 	bl	10ac <__aeabi_d2iz>
   2a5c4:	2800      	cmp	r0, #0
   2a5c6:	f000 8085 	beq.w	2a6d4 <__kernel_sin+0x12c>
   2a5ca:	462a      	mov	r2, r5
   2a5cc:	4623      	mov	r3, r4
   2a5ce:	4628      	mov	r0, r5
   2a5d0:	4621      	mov	r1, r4
   2a5d2:	f7d6 fabb 	bl	b4c <__aeabi_dmul>
   2a5d6:	4606      	mov	r6, r0
   2a5d8:	460f      	mov	r7, r1
   2a5da:	4602      	mov	r2, r0
   2a5dc:	460b      	mov	r3, r1
   2a5de:	4628      	mov	r0, r5
   2a5e0:	4621      	mov	r1, r4
   2a5e2:	f7d6 fab3 	bl	b4c <__aeabi_dmul>
   2a5e6:	a33e      	add	r3, pc, #248	; (adr r3, 2a6e0 <__kernel_sin+0x138>)
   2a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5ec:	4682      	mov	sl, r0
   2a5ee:	468b      	mov	fp, r1
   2a5f0:	4630      	mov	r0, r6
   2a5f2:	4639      	mov	r1, r7
   2a5f4:	f7d6 faaa 	bl	b4c <__aeabi_dmul>
   2a5f8:	a33b      	add	r3, pc, #236	; (adr r3, 2a6e8 <__kernel_sin+0x140>)
   2a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5fe:	f7d6 f8f1 	bl	7e4 <__aeabi_dsub>
   2a602:	4632      	mov	r2, r6
   2a604:	463b      	mov	r3, r7
   2a606:	f7d6 faa1 	bl	b4c <__aeabi_dmul>
   2a60a:	a339      	add	r3, pc, #228	; (adr r3, 2a6f0 <__kernel_sin+0x148>)
   2a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a610:	f7d6 f8ea 	bl	7e8 <__adddf3>
   2a614:	4632      	mov	r2, r6
   2a616:	463b      	mov	r3, r7
   2a618:	f7d6 fa98 	bl	b4c <__aeabi_dmul>
   2a61c:	a336      	add	r3, pc, #216	; (adr r3, 2a6f8 <__kernel_sin+0x150>)
   2a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a622:	f7d6 f8df 	bl	7e4 <__aeabi_dsub>
   2a626:	4632      	mov	r2, r6
   2a628:	463b      	mov	r3, r7
   2a62a:	f7d6 fa8f 	bl	b4c <__aeabi_dmul>
   2a62e:	a334      	add	r3, pc, #208	; (adr r3, 2a700 <__kernel_sin+0x158>)
   2a630:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a634:	f7d6 f8d8 	bl	7e8 <__adddf3>
   2a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a63a:	e9cd 0100 	strd	r0, r1, [sp]
   2a63e:	b39b      	cbz	r3, 2a6a8 <__kernel_sin+0x100>
   2a640:	2200      	movs	r2, #0
   2a642:	4b33      	ldr	r3, [pc, #204]	; (2a710 <__kernel_sin+0x168>)
   2a644:	4640      	mov	r0, r8
   2a646:	4649      	mov	r1, r9
   2a648:	f7d6 fa80 	bl	b4c <__aeabi_dmul>
   2a64c:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a650:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2a654:	4650      	mov	r0, sl
   2a656:	4659      	mov	r1, fp
   2a658:	f7d6 fa78 	bl	b4c <__aeabi_dmul>
   2a65c:	4602      	mov	r2, r0
   2a65e:	460b      	mov	r3, r1
   2a660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2a664:	f7d6 f8be 	bl	7e4 <__aeabi_dsub>
   2a668:	4632      	mov	r2, r6
   2a66a:	463b      	mov	r3, r7
   2a66c:	f7d6 fa6e 	bl	b4c <__aeabi_dmul>
   2a670:	4642      	mov	r2, r8
   2a672:	464b      	mov	r3, r9
   2a674:	f7d6 f8b6 	bl	7e4 <__aeabi_dsub>
   2a678:	a323      	add	r3, pc, #140	; (adr r3, 2a708 <__kernel_sin+0x160>)
   2a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a67e:	4606      	mov	r6, r0
   2a680:	460f      	mov	r7, r1
   2a682:	4650      	mov	r0, sl
   2a684:	4659      	mov	r1, fp
   2a686:	f7d6 fa61 	bl	b4c <__aeabi_dmul>
   2a68a:	4602      	mov	r2, r0
   2a68c:	460b      	mov	r3, r1
   2a68e:	4630      	mov	r0, r6
   2a690:	4639      	mov	r1, r7
   2a692:	f7d6 f8a9 	bl	7e8 <__adddf3>
   2a696:	4602      	mov	r2, r0
   2a698:	460b      	mov	r3, r1
   2a69a:	4628      	mov	r0, r5
   2a69c:	4621      	mov	r1, r4
   2a69e:	f7d6 f8a1 	bl	7e4 <__aeabi_dsub>
   2a6a2:	b005      	add	sp, #20
   2a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6a8:	4602      	mov	r2, r0
   2a6aa:	460b      	mov	r3, r1
   2a6ac:	4630      	mov	r0, r6
   2a6ae:	4639      	mov	r1, r7
   2a6b0:	f7d6 fa4c 	bl	b4c <__aeabi_dmul>
   2a6b4:	a314      	add	r3, pc, #80	; (adr r3, 2a708 <__kernel_sin+0x160>)
   2a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a6ba:	f7d6 f893 	bl	7e4 <__aeabi_dsub>
   2a6be:	4652      	mov	r2, sl
   2a6c0:	465b      	mov	r3, fp
   2a6c2:	f7d6 fa43 	bl	b4c <__aeabi_dmul>
   2a6c6:	462a      	mov	r2, r5
   2a6c8:	4623      	mov	r3, r4
   2a6ca:	f7d6 f88d 	bl	7e8 <__adddf3>
   2a6ce:	b005      	add	sp, #20
   2a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6d4:	4628      	mov	r0, r5
   2a6d6:	4621      	mov	r1, r4
   2a6d8:	b005      	add	sp, #20
   2a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6de:	bf00      	nop
   2a6e0:	5acfd57c 	.word	0x5acfd57c
   2a6e4:	3de5d93a 	.word	0x3de5d93a
   2a6e8:	8a2b9ceb 	.word	0x8a2b9ceb
   2a6ec:	3e5ae5e6 	.word	0x3e5ae5e6
   2a6f0:	57b1fe7d 	.word	0x57b1fe7d
   2a6f4:	3ec71de3 	.word	0x3ec71de3
   2a6f8:	19c161d5 	.word	0x19c161d5
   2a6fc:	3f2a01a0 	.word	0x3f2a01a0
   2a700:	1110f8a6 	.word	0x1110f8a6
   2a704:	3f811111 	.word	0x3f811111
   2a708:	55555549 	.word	0x55555549
   2a70c:	3fc55555 	.word	0x3fc55555
   2a710:	3fe00000 	.word	0x3fe00000

0002a714 <fabs>:
   2a714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2a718:	4770      	bx	lr
   2a71a:	bf00      	nop
   2a71c:	0000      	movs	r0, r0
	...

0002a720 <floor>:
   2a720:	f3c1 520a 	ubfx	r2, r1, #20, #11
   2a724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a728:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   2a72c:	2e13      	cmp	r6, #19
   2a72e:	460b      	mov	r3, r1
   2a730:	460d      	mov	r5, r1
   2a732:	4604      	mov	r4, r0
   2a734:	4688      	mov	r8, r1
   2a736:	4607      	mov	r7, r0
   2a738:	dc1d      	bgt.n	2a776 <floor+0x56>
   2a73a:	2e00      	cmp	r6, #0
   2a73c:	db40      	blt.n	2a7c0 <floor+0xa0>
   2a73e:	4a3c      	ldr	r2, [pc, #240]	; (2a830 <floor+0x110>)
   2a740:	fa42 f906 	asr.w	r9, r2, r6
   2a744:	ea01 0209 	and.w	r2, r1, r9
   2a748:	4302      	orrs	r2, r0
   2a74a:	4686      	mov	lr, r0
   2a74c:	d018      	beq.n	2a780 <floor+0x60>
   2a74e:	a336      	add	r3, pc, #216	; (adr r3, 2a828 <floor+0x108>)
   2a750:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a754:	f7d6 f848 	bl	7e8 <__adddf3>
   2a758:	2200      	movs	r2, #0
   2a75a:	2300      	movs	r3, #0
   2a75c:	f7d6 fc86 	bl	106c <__aeabi_dcmpgt>
   2a760:	b120      	cbz	r0, 2a76c <floor+0x4c>
   2a762:	2d00      	cmp	r5, #0
   2a764:	db42      	blt.n	2a7ec <floor+0xcc>
   2a766:	ea28 0509 	bic.w	r5, r8, r9
   2a76a:	2700      	movs	r7, #0
   2a76c:	463c      	mov	r4, r7
   2a76e:	4629      	mov	r1, r5
   2a770:	4620      	mov	r0, r4
   2a772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a776:	2e33      	cmp	r6, #51	; 0x33
   2a778:	dd06      	ble.n	2a788 <floor+0x68>
   2a77a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   2a77e:	d02f      	beq.n	2a7e0 <floor+0xc0>
   2a780:	4619      	mov	r1, r3
   2a782:	4620      	mov	r0, r4
   2a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a788:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   2a78c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2a790:	fa29 f902 	lsr.w	r9, r9, r2
   2a794:	ea10 0f09 	tst.w	r0, r9
   2a798:	d0f2      	beq.n	2a780 <floor+0x60>
   2a79a:	a323      	add	r3, pc, #140	; (adr r3, 2a828 <floor+0x108>)
   2a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a7a0:	f7d6 f822 	bl	7e8 <__adddf3>
   2a7a4:	2200      	movs	r2, #0
   2a7a6:	2300      	movs	r3, #0
   2a7a8:	f7d6 fc60 	bl	106c <__aeabi_dcmpgt>
   2a7ac:	2800      	cmp	r0, #0
   2a7ae:	d0dd      	beq.n	2a76c <floor+0x4c>
   2a7b0:	2d00      	cmp	r5, #0
   2a7b2:	db21      	blt.n	2a7f8 <floor+0xd8>
   2a7b4:	4645      	mov	r5, r8
   2a7b6:	ea27 0709 	bic.w	r7, r7, r9
   2a7ba:	463c      	mov	r4, r7
   2a7bc:	4629      	mov	r1, r5
   2a7be:	e7d7      	b.n	2a770 <floor+0x50>
   2a7c0:	a319      	add	r3, pc, #100	; (adr r3, 2a828 <floor+0x108>)
   2a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a7c6:	f7d6 f80f 	bl	7e8 <__adddf3>
   2a7ca:	2200      	movs	r2, #0
   2a7cc:	2300      	movs	r3, #0
   2a7ce:	f7d6 fc4d 	bl	106c <__aeabi_dcmpgt>
   2a7d2:	2800      	cmp	r0, #0
   2a7d4:	d0ca      	beq.n	2a76c <floor+0x4c>
   2a7d6:	2d00      	cmp	r5, #0
   2a7d8:	db19      	blt.n	2a80e <floor+0xee>
   2a7da:	2700      	movs	r7, #0
   2a7dc:	463d      	mov	r5, r7
   2a7de:	e7c5      	b.n	2a76c <floor+0x4c>
   2a7e0:	4602      	mov	r2, r0
   2a7e2:	460b      	mov	r3, r1
   2a7e4:	f7d6 f800 	bl	7e8 <__adddf3>
   2a7e8:	4604      	mov	r4, r0
   2a7ea:	e7ca      	b.n	2a782 <floor+0x62>
   2a7ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   2a7f0:	fa43 f606 	asr.w	r6, r3, r6
   2a7f4:	44b0      	add	r8, r6
   2a7f6:	e7b6      	b.n	2a766 <floor+0x46>
   2a7f8:	2e14      	cmp	r6, #20
   2a7fa:	d010      	beq.n	2a81e <floor+0xfe>
   2a7fc:	2301      	movs	r3, #1
   2a7fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   2a802:	fa03 f606 	lsl.w	r6, r3, r6
   2a806:	1937      	adds	r7, r6, r4
   2a808:	bf28      	it	cs
   2a80a:	4498      	addcs	r8, r3
   2a80c:	e7d2      	b.n	2a7b4 <floor+0x94>
   2a80e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2a812:	4b08      	ldr	r3, [pc, #32]	; (2a834 <floor+0x114>)
   2a814:	4322      	orrs	r2, r4
   2a816:	bf18      	it	ne
   2a818:	461d      	movne	r5, r3
   2a81a:	2700      	movs	r7, #0
   2a81c:	e7a6      	b.n	2a76c <floor+0x4c>
   2a81e:	f105 0801 	add.w	r8, r5, #1
   2a822:	e7c7      	b.n	2a7b4 <floor+0x94>
   2a824:	f3af 8000 	nop.w
   2a828:	8800759c 	.word	0x8800759c
   2a82c:	7e37e43c 	.word	0x7e37e43c
   2a830:	000fffff 	.word	0x000fffff
   2a834:	bff00000 	.word	0xbff00000

0002a838 <scalbn>:
   2a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a83a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   2a83e:	4604      	mov	r4, r0
   2a840:	460d      	mov	r5, r1
   2a842:	460b      	mov	r3, r1
   2a844:	4617      	mov	r7, r2
   2a846:	bb0e      	cbnz	r6, 2a88c <scalbn+0x54>
   2a848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2a84c:	4303      	orrs	r3, r0
   2a84e:	4686      	mov	lr, r0
   2a850:	d025      	beq.n	2a89e <scalbn+0x66>
   2a852:	2200      	movs	r2, #0
   2a854:	4b34      	ldr	r3, [pc, #208]	; (2a928 <scalbn+0xf0>)
   2a856:	f7d6 f979 	bl	b4c <__aeabi_dmul>
   2a85a:	4a34      	ldr	r2, [pc, #208]	; (2a92c <scalbn+0xf4>)
   2a85c:	4297      	cmp	r7, r2
   2a85e:	4604      	mov	r4, r0
   2a860:	460d      	mov	r5, r1
   2a862:	460b      	mov	r3, r1
   2a864:	db2a      	blt.n	2a8bc <scalbn+0x84>
   2a866:	f3c1 560a 	ubfx	r6, r1, #20, #11
   2a86a:	3e36      	subs	r6, #54	; 0x36
   2a86c:	443e      	add	r6, r7
   2a86e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   2a872:	4296      	cmp	r6, r2
   2a874:	dc28      	bgt.n	2a8c8 <scalbn+0x90>
   2a876:	2e00      	cmp	r6, #0
   2a878:	dd12      	ble.n	2a8a0 <scalbn+0x68>
   2a87a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2a87e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   2a882:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   2a886:	4620      	mov	r0, r4
   2a888:	4629      	mov	r1, r5
   2a88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a88c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   2a890:	4296      	cmp	r6, r2
   2a892:	d1eb      	bne.n	2a86c <scalbn+0x34>
   2a894:	4602      	mov	r2, r0
   2a896:	460b      	mov	r3, r1
   2a898:	f7d5 ffa6 	bl	7e8 <__adddf3>
   2a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8a0:	f116 0f35 	cmn.w	r6, #53	; 0x35
   2a8a4:	da1d      	bge.n	2a8e2 <scalbn+0xaa>
   2a8a6:	f24c 3350 	movw	r3, #50000	; 0xc350
   2a8aa:	429f      	cmp	r7, r3
   2a8ac:	4622      	mov	r2, r4
   2a8ae:	462b      	mov	r3, r5
   2a8b0:	dc25      	bgt.n	2a8fe <scalbn+0xc6>
   2a8b2:	a119      	add	r1, pc, #100	; (adr r1, 2a918 <scalbn+0xe0>)
   2a8b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a8b8:	f000 f83c 	bl	2a934 <copysign>
   2a8bc:	a316      	add	r3, pc, #88	; (adr r3, 2a918 <scalbn+0xe0>)
   2a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a8c2:	f7d6 f943 	bl	b4c <__aeabi_dmul>
   2a8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8c8:	4622      	mov	r2, r4
   2a8ca:	462b      	mov	r3, r5
   2a8cc:	a114      	add	r1, pc, #80	; (adr r1, 2a920 <scalbn+0xe8>)
   2a8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a8d2:	f000 f82f 	bl	2a934 <copysign>
   2a8d6:	a312      	add	r3, pc, #72	; (adr r3, 2a920 <scalbn+0xe8>)
   2a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a8dc:	f7d6 f936 	bl	b4c <__aeabi_dmul>
   2a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2a8e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   2a8ea:	3636      	adds	r6, #54	; 0x36
   2a8ec:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   2a8f0:	4620      	mov	r0, r4
   2a8f2:	4629      	mov	r1, r5
   2a8f4:	2200      	movs	r2, #0
   2a8f6:	4b0e      	ldr	r3, [pc, #56]	; (2a930 <scalbn+0xf8>)
   2a8f8:	f7d6 f928 	bl	b4c <__aeabi_dmul>
   2a8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8fe:	a108      	add	r1, pc, #32	; (adr r1, 2a920 <scalbn+0xe8>)
   2a900:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a904:	f000 f816 	bl	2a934 <copysign>
   2a908:	a305      	add	r3, pc, #20	; (adr r3, 2a920 <scalbn+0xe8>)
   2a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a90e:	f7d6 f91d 	bl	b4c <__aeabi_dmul>
   2a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a914:	f3af 8000 	nop.w
   2a918:	c2f8f359 	.word	0xc2f8f359
   2a91c:	01a56e1f 	.word	0x01a56e1f
   2a920:	8800759c 	.word	0x8800759c
   2a924:	7e37e43c 	.word	0x7e37e43c
   2a928:	43500000 	.word	0x43500000
   2a92c:	ffff3cb0 	.word	0xffff3cb0
   2a930:	3c900000 	.word	0x3c900000

0002a934 <copysign>:
   2a934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   2a938:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   2a93c:	ea42 0103 	orr.w	r1, r2, r3
   2a940:	4770      	bx	lr
   2a942:	bf00      	nop

0002a944 <__locale_ctype_ptr_l>:
   2a944:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a948:	4770      	bx	lr
   2a94a:	bf00      	nop

0002a94c <__locale_ctype_ptr>:
   2a94c:	4b04      	ldr	r3, [pc, #16]	; (2a960 <__locale_ctype_ptr+0x14>)
   2a94e:	4a05      	ldr	r2, [pc, #20]	; (2a964 <__locale_ctype_ptr+0x18>)
   2a950:	681b      	ldr	r3, [r3, #0]
   2a952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a954:	2b00      	cmp	r3, #0
   2a956:	bf08      	it	eq
   2a958:	4613      	moveq	r3, r2
   2a95a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a95e:	4770      	bx	lr
   2a960:	2000c684 	.word	0x2000c684
   2a964:	2000c518 	.word	0x2000c518

0002a968 <__ascii_mbtowc>:
   2a968:	b082      	sub	sp, #8
   2a96a:	b149      	cbz	r1, 2a980 <__ascii_mbtowc+0x18>
   2a96c:	b15a      	cbz	r2, 2a986 <__ascii_mbtowc+0x1e>
   2a96e:	b16b      	cbz	r3, 2a98c <__ascii_mbtowc+0x24>
   2a970:	7813      	ldrb	r3, [r2, #0]
   2a972:	600b      	str	r3, [r1, #0]
   2a974:	7812      	ldrb	r2, [r2, #0]
   2a976:	1c10      	adds	r0, r2, #0
   2a978:	bf18      	it	ne
   2a97a:	2001      	movne	r0, #1
   2a97c:	b002      	add	sp, #8
   2a97e:	4770      	bx	lr
   2a980:	a901      	add	r1, sp, #4
   2a982:	2a00      	cmp	r2, #0
   2a984:	d1f3      	bne.n	2a96e <__ascii_mbtowc+0x6>
   2a986:	4610      	mov	r0, r2
   2a988:	b002      	add	sp, #8
   2a98a:	4770      	bx	lr
   2a98c:	f06f 0001 	mvn.w	r0, #1
   2a990:	e7f4      	b.n	2a97c <__ascii_mbtowc+0x14>
   2a992:	bf00      	nop

0002a994 <memcmp>:
   2a994:	2a03      	cmp	r2, #3
   2a996:	b470      	push	{r4, r5, r6}
   2a998:	d922      	bls.n	2a9e0 <memcmp+0x4c>
   2a99a:	ea40 0301 	orr.w	r3, r0, r1
   2a99e:	079b      	lsls	r3, r3, #30
   2a9a0:	d011      	beq.n	2a9c6 <memcmp+0x32>
   2a9a2:	7803      	ldrb	r3, [r0, #0]
   2a9a4:	780c      	ldrb	r4, [r1, #0]
   2a9a6:	42a3      	cmp	r3, r4
   2a9a8:	d11d      	bne.n	2a9e6 <memcmp+0x52>
   2a9aa:	440a      	add	r2, r1
   2a9ac:	3101      	adds	r1, #1
   2a9ae:	e005      	b.n	2a9bc <memcmp+0x28>
   2a9b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a9b8:	42a3      	cmp	r3, r4
   2a9ba:	d114      	bne.n	2a9e6 <memcmp+0x52>
   2a9bc:	4291      	cmp	r1, r2
   2a9be:	d1f7      	bne.n	2a9b0 <memcmp+0x1c>
   2a9c0:	2000      	movs	r0, #0
   2a9c2:	bc70      	pop	{r4, r5, r6}
   2a9c4:	4770      	bx	lr
   2a9c6:	680d      	ldr	r5, [r1, #0]
   2a9c8:	6806      	ldr	r6, [r0, #0]
   2a9ca:	42ae      	cmp	r6, r5
   2a9cc:	460c      	mov	r4, r1
   2a9ce:	4603      	mov	r3, r0
   2a9d0:	f101 0104 	add.w	r1, r1, #4
   2a9d4:	f100 0004 	add.w	r0, r0, #4
   2a9d8:	d108      	bne.n	2a9ec <memcmp+0x58>
   2a9da:	3a04      	subs	r2, #4
   2a9dc:	2a03      	cmp	r2, #3
   2a9de:	d8f2      	bhi.n	2a9c6 <memcmp+0x32>
   2a9e0:	2a00      	cmp	r2, #0
   2a9e2:	d1de      	bne.n	2a9a2 <memcmp+0xe>
   2a9e4:	e7ec      	b.n	2a9c0 <memcmp+0x2c>
   2a9e6:	1b18      	subs	r0, r3, r4
   2a9e8:	bc70      	pop	{r4, r5, r6}
   2a9ea:	4770      	bx	lr
   2a9ec:	4621      	mov	r1, r4
   2a9ee:	4618      	mov	r0, r3
   2a9f0:	e7d7      	b.n	2a9a2 <memcmp+0xe>
   2a9f2:	bf00      	nop

0002a9f4 <memmove>:
   2a9f4:	4288      	cmp	r0, r1
   2a9f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9f8:	d90d      	bls.n	2aa16 <memmove+0x22>
   2a9fa:	188b      	adds	r3, r1, r2
   2a9fc:	4298      	cmp	r0, r3
   2a9fe:	d20a      	bcs.n	2aa16 <memmove+0x22>
   2aa00:	1884      	adds	r4, r0, r2
   2aa02:	2a00      	cmp	r2, #0
   2aa04:	d051      	beq.n	2aaaa <memmove+0xb6>
   2aa06:	4622      	mov	r2, r4
   2aa08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2aa0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2aa10:	4299      	cmp	r1, r3
   2aa12:	d1f9      	bne.n	2aa08 <memmove+0x14>
   2aa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa16:	2a0f      	cmp	r2, #15
   2aa18:	d948      	bls.n	2aaac <memmove+0xb8>
   2aa1a:	ea41 0300 	orr.w	r3, r1, r0
   2aa1e:	079b      	lsls	r3, r3, #30
   2aa20:	d146      	bne.n	2aab0 <memmove+0xbc>
   2aa22:	f100 0410 	add.w	r4, r0, #16
   2aa26:	f101 0310 	add.w	r3, r1, #16
   2aa2a:	4615      	mov	r5, r2
   2aa2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2aa30:	f844 6c10 	str.w	r6, [r4, #-16]
   2aa34:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2aa38:	f844 6c0c 	str.w	r6, [r4, #-12]
   2aa3c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2aa40:	f844 6c08 	str.w	r6, [r4, #-8]
   2aa44:	3d10      	subs	r5, #16
   2aa46:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2aa4a:	f844 6c04 	str.w	r6, [r4, #-4]
   2aa4e:	2d0f      	cmp	r5, #15
   2aa50:	f103 0310 	add.w	r3, r3, #16
   2aa54:	f104 0410 	add.w	r4, r4, #16
   2aa58:	d8e8      	bhi.n	2aa2c <memmove+0x38>
   2aa5a:	f1a2 0310 	sub.w	r3, r2, #16
   2aa5e:	f023 030f 	bic.w	r3, r3, #15
   2aa62:	f002 0e0f 	and.w	lr, r2, #15
   2aa66:	3310      	adds	r3, #16
   2aa68:	f1be 0f03 	cmp.w	lr, #3
   2aa6c:	4419      	add	r1, r3
   2aa6e:	4403      	add	r3, r0
   2aa70:	d921      	bls.n	2aab6 <memmove+0xc2>
   2aa72:	1f1e      	subs	r6, r3, #4
   2aa74:	460d      	mov	r5, r1
   2aa76:	4674      	mov	r4, lr
   2aa78:	3c04      	subs	r4, #4
   2aa7a:	f855 7b04 	ldr.w	r7, [r5], #4
   2aa7e:	f846 7f04 	str.w	r7, [r6, #4]!
   2aa82:	2c03      	cmp	r4, #3
   2aa84:	d8f8      	bhi.n	2aa78 <memmove+0x84>
   2aa86:	f1ae 0404 	sub.w	r4, lr, #4
   2aa8a:	f024 0403 	bic.w	r4, r4, #3
   2aa8e:	3404      	adds	r4, #4
   2aa90:	4421      	add	r1, r4
   2aa92:	4423      	add	r3, r4
   2aa94:	f002 0203 	and.w	r2, r2, #3
   2aa98:	b162      	cbz	r2, 2aab4 <memmove+0xc0>
   2aa9a:	3b01      	subs	r3, #1
   2aa9c:	440a      	add	r2, r1
   2aa9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2aaa2:	f803 4f01 	strb.w	r4, [r3, #1]!
   2aaa6:	428a      	cmp	r2, r1
   2aaa8:	d1f9      	bne.n	2aa9e <memmove+0xaa>
   2aaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aaac:	4603      	mov	r3, r0
   2aaae:	e7f3      	b.n	2aa98 <memmove+0xa4>
   2aab0:	4603      	mov	r3, r0
   2aab2:	e7f2      	b.n	2aa9a <memmove+0xa6>
   2aab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aab6:	4672      	mov	r2, lr
   2aab8:	e7ee      	b.n	2aa98 <memmove+0xa4>
   2aaba:	bf00      	nop

0002aabc <memset>:
   2aabc:	b470      	push	{r4, r5, r6}
   2aabe:	0786      	lsls	r6, r0, #30
   2aac0:	d046      	beq.n	2ab50 <memset+0x94>
   2aac2:	1e54      	subs	r4, r2, #1
   2aac4:	2a00      	cmp	r2, #0
   2aac6:	d041      	beq.n	2ab4c <memset+0x90>
   2aac8:	b2ca      	uxtb	r2, r1
   2aaca:	4603      	mov	r3, r0
   2aacc:	e002      	b.n	2aad4 <memset+0x18>
   2aace:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2aad2:	d33b      	bcc.n	2ab4c <memset+0x90>
   2aad4:	f803 2b01 	strb.w	r2, [r3], #1
   2aad8:	079d      	lsls	r5, r3, #30
   2aada:	d1f8      	bne.n	2aace <memset+0x12>
   2aadc:	2c03      	cmp	r4, #3
   2aade:	d92e      	bls.n	2ab3e <memset+0x82>
   2aae0:	b2cd      	uxtb	r5, r1
   2aae2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2aae6:	2c0f      	cmp	r4, #15
   2aae8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2aaec:	d919      	bls.n	2ab22 <memset+0x66>
   2aaee:	f103 0210 	add.w	r2, r3, #16
   2aaf2:	4626      	mov	r6, r4
   2aaf4:	3e10      	subs	r6, #16
   2aaf6:	2e0f      	cmp	r6, #15
   2aaf8:	f842 5c10 	str.w	r5, [r2, #-16]
   2aafc:	f842 5c0c 	str.w	r5, [r2, #-12]
   2ab00:	f842 5c08 	str.w	r5, [r2, #-8]
   2ab04:	f842 5c04 	str.w	r5, [r2, #-4]
   2ab08:	f102 0210 	add.w	r2, r2, #16
   2ab0c:	d8f2      	bhi.n	2aaf4 <memset+0x38>
   2ab0e:	f1a4 0210 	sub.w	r2, r4, #16
   2ab12:	f022 020f 	bic.w	r2, r2, #15
   2ab16:	f004 040f 	and.w	r4, r4, #15
   2ab1a:	3210      	adds	r2, #16
   2ab1c:	2c03      	cmp	r4, #3
   2ab1e:	4413      	add	r3, r2
   2ab20:	d90d      	bls.n	2ab3e <memset+0x82>
   2ab22:	461e      	mov	r6, r3
   2ab24:	4622      	mov	r2, r4
   2ab26:	3a04      	subs	r2, #4
   2ab28:	2a03      	cmp	r2, #3
   2ab2a:	f846 5b04 	str.w	r5, [r6], #4
   2ab2e:	d8fa      	bhi.n	2ab26 <memset+0x6a>
   2ab30:	1f22      	subs	r2, r4, #4
   2ab32:	f022 0203 	bic.w	r2, r2, #3
   2ab36:	3204      	adds	r2, #4
   2ab38:	4413      	add	r3, r2
   2ab3a:	f004 0403 	and.w	r4, r4, #3
   2ab3e:	b12c      	cbz	r4, 2ab4c <memset+0x90>
   2ab40:	b2c9      	uxtb	r1, r1
   2ab42:	441c      	add	r4, r3
   2ab44:	f803 1b01 	strb.w	r1, [r3], #1
   2ab48:	429c      	cmp	r4, r3
   2ab4a:	d1fb      	bne.n	2ab44 <memset+0x88>
   2ab4c:	bc70      	pop	{r4, r5, r6}
   2ab4e:	4770      	bx	lr
   2ab50:	4614      	mov	r4, r2
   2ab52:	4603      	mov	r3, r0
   2ab54:	e7c2      	b.n	2aadc <memset+0x20>
   2ab56:	bf00      	nop

0002ab58 <snprintf>:
   2ab58:	b40c      	push	{r2, r3}
   2ab5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab5c:	4b23      	ldr	r3, [pc, #140]	; (2abec <snprintf+0x94>)
   2ab5e:	1e0c      	subs	r4, r1, #0
   2ab60:	b09d      	sub	sp, #116	; 0x74
   2ab62:	681d      	ldr	r5, [r3, #0]
   2ab64:	db3d      	blt.n	2abe2 <snprintf+0x8a>
   2ab66:	f44f 7302 	mov.w	r3, #520	; 0x208
   2ab6a:	9002      	str	r0, [sp, #8]
   2ab6c:	9006      	str	r0, [sp, #24]
   2ab6e:	f8ad 3014 	strh.w	r3, [sp, #20]
   2ab72:	ae23      	add	r6, sp, #140	; 0x8c
   2ab74:	d017      	beq.n	2aba6 <snprintf+0x4e>
   2ab76:	3c01      	subs	r4, #1
   2ab78:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ab7a:	9404      	str	r4, [sp, #16]
   2ab7c:	4633      	mov	r3, r6
   2ab7e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2ab82:	a902      	add	r1, sp, #8
   2ab84:	4628      	mov	r0, r5
   2ab86:	9407      	str	r4, [sp, #28]
   2ab88:	9601      	str	r6, [sp, #4]
   2ab8a:	f8ad 7016 	strh.w	r7, [sp, #22]
   2ab8e:	f000 fd7f 	bl	2b690 <_svfprintf_r>
   2ab92:	1c42      	adds	r2, r0, #1
   2ab94:	db1b      	blt.n	2abce <snprintf+0x76>
   2ab96:	9b02      	ldr	r3, [sp, #8]
   2ab98:	2200      	movs	r2, #0
   2ab9a:	701a      	strb	r2, [r3, #0]
   2ab9c:	b01d      	add	sp, #116	; 0x74
   2ab9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aba2:	b002      	add	sp, #8
   2aba4:	4770      	bx	lr
   2aba6:	4633      	mov	r3, r6
   2aba8:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2abac:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2abae:	9404      	str	r4, [sp, #16]
   2abb0:	a902      	add	r1, sp, #8
   2abb2:	4628      	mov	r0, r5
   2abb4:	9407      	str	r4, [sp, #28]
   2abb6:	9601      	str	r6, [sp, #4]
   2abb8:	f8ad 7016 	strh.w	r7, [sp, #22]
   2abbc:	f000 fd68 	bl	2b690 <_svfprintf_r>
   2abc0:	1c43      	adds	r3, r0, #1
   2abc2:	db07      	blt.n	2abd4 <snprintf+0x7c>
   2abc4:	b01d      	add	sp, #116	; 0x74
   2abc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2abca:	b002      	add	sp, #8
   2abcc:	4770      	bx	lr
   2abce:	238b      	movs	r3, #139	; 0x8b
   2abd0:	602b      	str	r3, [r5, #0]
   2abd2:	e7e0      	b.n	2ab96 <snprintf+0x3e>
   2abd4:	238b      	movs	r3, #139	; 0x8b
   2abd6:	602b      	str	r3, [r5, #0]
   2abd8:	b01d      	add	sp, #116	; 0x74
   2abda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2abde:	b002      	add	sp, #8
   2abe0:	4770      	bx	lr
   2abe2:	238b      	movs	r3, #139	; 0x8b
   2abe4:	602b      	str	r3, [r5, #0]
   2abe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2abea:	e7eb      	b.n	2abc4 <snprintf+0x6c>
   2abec:	2000c684 	.word	0x2000c684

0002abf0 <strcat>:
   2abf0:	0783      	lsls	r3, r0, #30
   2abf2:	b510      	push	{r4, lr}
   2abf4:	4604      	mov	r4, r0
   2abf6:	d110      	bne.n	2ac1a <strcat+0x2a>
   2abf8:	6802      	ldr	r2, [r0, #0]
   2abfa:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2abfe:	ea23 0302 	bic.w	r3, r3, r2
   2ac02:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ac06:	d108      	bne.n	2ac1a <strcat+0x2a>
   2ac08:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2ac0c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2ac10:	ea23 0302 	bic.w	r3, r3, r2
   2ac14:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ac18:	d0f6      	beq.n	2ac08 <strcat+0x18>
   2ac1a:	7803      	ldrb	r3, [r0, #0]
   2ac1c:	b11b      	cbz	r3, 2ac26 <strcat+0x36>
   2ac1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ac22:	2b00      	cmp	r3, #0
   2ac24:	d1fb      	bne.n	2ac1e <strcat+0x2e>
   2ac26:	f000 f877 	bl	2ad18 <strcpy>
   2ac2a:	4620      	mov	r0, r4
   2ac2c:	bd10      	pop	{r4, pc}
   2ac2e:	bf00      	nop

0002ac30 <strchr>:
   2ac30:	b2c9      	uxtb	r1, r1
   2ac32:	2900      	cmp	r1, #0
   2ac34:	d041      	beq.n	2acba <strchr+0x8a>
   2ac36:	0782      	lsls	r2, r0, #30
   2ac38:	b4f0      	push	{r4, r5, r6, r7}
   2ac3a:	d067      	beq.n	2ad0c <strchr+0xdc>
   2ac3c:	7803      	ldrb	r3, [r0, #0]
   2ac3e:	2b00      	cmp	r3, #0
   2ac40:	d068      	beq.n	2ad14 <strchr+0xe4>
   2ac42:	4299      	cmp	r1, r3
   2ac44:	d037      	beq.n	2acb6 <strchr+0x86>
   2ac46:	1c43      	adds	r3, r0, #1
   2ac48:	e004      	b.n	2ac54 <strchr+0x24>
   2ac4a:	f813 0b01 	ldrb.w	r0, [r3], #1
   2ac4e:	b390      	cbz	r0, 2acb6 <strchr+0x86>
   2ac50:	4281      	cmp	r1, r0
   2ac52:	d02f      	beq.n	2acb4 <strchr+0x84>
   2ac54:	079a      	lsls	r2, r3, #30
   2ac56:	461c      	mov	r4, r3
   2ac58:	d1f7      	bne.n	2ac4a <strchr+0x1a>
   2ac5a:	6825      	ldr	r5, [r4, #0]
   2ac5c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2ac60:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2ac64:	ea83 0605 	eor.w	r6, r3, r5
   2ac68:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2ac6c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2ac70:	ea20 0006 	bic.w	r0, r0, r6
   2ac74:	ea22 0205 	bic.w	r2, r2, r5
   2ac78:	4302      	orrs	r2, r0
   2ac7a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac7e:	d111      	bne.n	2aca4 <strchr+0x74>
   2ac80:	4620      	mov	r0, r4
   2ac82:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2ac86:	ea83 0706 	eor.w	r7, r3, r6
   2ac8a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2ac8e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2ac92:	ea25 0507 	bic.w	r5, r5, r7
   2ac96:	ea22 0206 	bic.w	r2, r2, r6
   2ac9a:	432a      	orrs	r2, r5
   2ac9c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2aca0:	d0ef      	beq.n	2ac82 <strchr+0x52>
   2aca2:	4604      	mov	r4, r0
   2aca4:	7820      	ldrb	r0, [r4, #0]
   2aca6:	b918      	cbnz	r0, 2acb0 <strchr+0x80>
   2aca8:	e005      	b.n	2acb6 <strchr+0x86>
   2acaa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2acae:	b110      	cbz	r0, 2acb6 <strchr+0x86>
   2acb0:	4281      	cmp	r1, r0
   2acb2:	d1fa      	bne.n	2acaa <strchr+0x7a>
   2acb4:	4620      	mov	r0, r4
   2acb6:	bcf0      	pop	{r4, r5, r6, r7}
   2acb8:	4770      	bx	lr
   2acba:	0783      	lsls	r3, r0, #30
   2acbc:	d024      	beq.n	2ad08 <strchr+0xd8>
   2acbe:	7803      	ldrb	r3, [r0, #0]
   2acc0:	2b00      	cmp	r3, #0
   2acc2:	d0f9      	beq.n	2acb8 <strchr+0x88>
   2acc4:	1c43      	adds	r3, r0, #1
   2acc6:	e003      	b.n	2acd0 <strchr+0xa0>
   2acc8:	7802      	ldrb	r2, [r0, #0]
   2acca:	3301      	adds	r3, #1
   2accc:	2a00      	cmp	r2, #0
   2acce:	d0f3      	beq.n	2acb8 <strchr+0x88>
   2acd0:	0799      	lsls	r1, r3, #30
   2acd2:	4618      	mov	r0, r3
   2acd4:	d1f8      	bne.n	2acc8 <strchr+0x98>
   2acd6:	6819      	ldr	r1, [r3, #0]
   2acd8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2acdc:	ea22 0201 	bic.w	r2, r2, r1
   2ace0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ace4:	d108      	bne.n	2acf8 <strchr+0xc8>
   2ace6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2acea:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2acee:	ea22 0201 	bic.w	r2, r2, r1
   2acf2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2acf6:	d0f6      	beq.n	2ace6 <strchr+0xb6>
   2acf8:	781a      	ldrb	r2, [r3, #0]
   2acfa:	4618      	mov	r0, r3
   2acfc:	b142      	cbz	r2, 2ad10 <strchr+0xe0>
   2acfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ad02:	2b00      	cmp	r3, #0
   2ad04:	d1fb      	bne.n	2acfe <strchr+0xce>
   2ad06:	4770      	bx	lr
   2ad08:	4603      	mov	r3, r0
   2ad0a:	e7e4      	b.n	2acd6 <strchr+0xa6>
   2ad0c:	4604      	mov	r4, r0
   2ad0e:	e7a4      	b.n	2ac5a <strchr+0x2a>
   2ad10:	4618      	mov	r0, r3
   2ad12:	4770      	bx	lr
   2ad14:	4618      	mov	r0, r3
   2ad16:	e7ce      	b.n	2acb6 <strchr+0x86>

0002ad18 <strcpy>:
   2ad18:	ea80 0201 	eor.w	r2, r0, r1
   2ad1c:	4684      	mov	ip, r0
   2ad1e:	f012 0f03 	tst.w	r2, #3
   2ad22:	d14f      	bne.n	2adc4 <strcpy+0xac>
   2ad24:	f011 0f03 	tst.w	r1, #3
   2ad28:	d132      	bne.n	2ad90 <strcpy+0x78>
   2ad2a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2ad2e:	f011 0f04 	tst.w	r1, #4
   2ad32:	f851 3b04 	ldr.w	r3, [r1], #4
   2ad36:	d00b      	beq.n	2ad50 <strcpy+0x38>
   2ad38:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ad3c:	439a      	bics	r2, r3
   2ad3e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad42:	bf04      	itt	eq
   2ad44:	f84c 3b04 	streq.w	r3, [ip], #4
   2ad48:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ad4c:	d116      	bne.n	2ad7c <strcpy+0x64>
   2ad4e:	bf00      	nop
   2ad50:	f851 4b04 	ldr.w	r4, [r1], #4
   2ad54:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ad58:	439a      	bics	r2, r3
   2ad5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad5e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ad62:	d10b      	bne.n	2ad7c <strcpy+0x64>
   2ad64:	f84c 3b04 	str.w	r3, [ip], #4
   2ad68:	43a2      	bics	r2, r4
   2ad6a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad6e:	bf04      	itt	eq
   2ad70:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ad74:	f84c 4b04 	streq.w	r4, [ip], #4
   2ad78:	d0ea      	beq.n	2ad50 <strcpy+0x38>
   2ad7a:	4623      	mov	r3, r4
   2ad7c:	f80c 3b01 	strb.w	r3, [ip], #1
   2ad80:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ad84:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ad88:	d1f8      	bne.n	2ad7c <strcpy+0x64>
   2ad8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ad8e:	4770      	bx	lr
   2ad90:	f011 0f01 	tst.w	r1, #1
   2ad94:	d006      	beq.n	2ada4 <strcpy+0x8c>
   2ad96:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad9a:	f80c 2b01 	strb.w	r2, [ip], #1
   2ad9e:	2a00      	cmp	r2, #0
   2ada0:	bf08      	it	eq
   2ada2:	4770      	bxeq	lr
   2ada4:	f011 0f02 	tst.w	r1, #2
   2ada8:	d0bf      	beq.n	2ad2a <strcpy+0x12>
   2adaa:	f831 2b02 	ldrh.w	r2, [r1], #2
   2adae:	f012 0fff 	tst.w	r2, #255	; 0xff
   2adb2:	bf16      	itet	ne
   2adb4:	f82c 2b02 	strhne.w	r2, [ip], #2
   2adb8:	f88c 2000 	strbeq.w	r2, [ip]
   2adbc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2adc0:	d1b3      	bne.n	2ad2a <strcpy+0x12>
   2adc2:	4770      	bx	lr
   2adc4:	f811 2b01 	ldrb.w	r2, [r1], #1
   2adc8:	f80c 2b01 	strb.w	r2, [ip], #1
   2adcc:	2a00      	cmp	r2, #0
   2adce:	d1f9      	bne.n	2adc4 <strcpy+0xac>
   2add0:	4770      	bx	lr
   2add2:	bf00      	nop

0002add4 <strncmp>:
   2add4:	2a00      	cmp	r2, #0
   2add6:	d041      	beq.n	2ae5c <strncmp+0x88>
   2add8:	ea40 0301 	orr.w	r3, r0, r1
   2addc:	f013 0303 	ands.w	r3, r3, #3
   2ade0:	b4f0      	push	{r4, r5, r6, r7}
   2ade2:	d125      	bne.n	2ae30 <strncmp+0x5c>
   2ade4:	2a03      	cmp	r2, #3
   2ade6:	d923      	bls.n	2ae30 <strncmp+0x5c>
   2ade8:	6804      	ldr	r4, [r0, #0]
   2adea:	680d      	ldr	r5, [r1, #0]
   2adec:	42ac      	cmp	r4, r5
   2adee:	d11f      	bne.n	2ae30 <strncmp+0x5c>
   2adf0:	3a04      	subs	r2, #4
   2adf2:	d038      	beq.n	2ae66 <strncmp+0x92>
   2adf4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2adf8:	ea25 0404 	bic.w	r4, r5, r4
   2adfc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ae00:	d12e      	bne.n	2ae60 <strncmp+0x8c>
   2ae02:	3004      	adds	r0, #4
   2ae04:	3104      	adds	r1, #4
   2ae06:	e00f      	b.n	2ae28 <strncmp+0x54>
   2ae08:	f850 3b04 	ldr.w	r3, [r0], #4
   2ae0c:	680e      	ldr	r6, [r1, #0]
   2ae0e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2ae12:	42b3      	cmp	r3, r6
   2ae14:	ea24 0403 	bic.w	r4, r4, r3
   2ae18:	f101 0104 	add.w	r1, r1, #4
   2ae1c:	d126      	bne.n	2ae6c <strncmp+0x98>
   2ae1e:	3a04      	subs	r2, #4
   2ae20:	d021      	beq.n	2ae66 <strncmp+0x92>
   2ae22:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ae26:	d11b      	bne.n	2ae60 <strncmp+0x8c>
   2ae28:	2a03      	cmp	r2, #3
   2ae2a:	4607      	mov	r7, r0
   2ae2c:	460d      	mov	r5, r1
   2ae2e:	d8eb      	bhi.n	2ae08 <strncmp+0x34>
   2ae30:	7805      	ldrb	r5, [r0, #0]
   2ae32:	780c      	ldrb	r4, [r1, #0]
   2ae34:	42ac      	cmp	r4, r5
   2ae36:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2ae3a:	d11a      	bne.n	2ae72 <strncmp+0x9e>
   2ae3c:	b183      	cbz	r3, 2ae60 <strncmp+0x8c>
   2ae3e:	b914      	cbnz	r4, 2ae46 <strncmp+0x72>
   2ae40:	e00e      	b.n	2ae60 <strncmp+0x8c>
   2ae42:	b16b      	cbz	r3, 2ae60 <strncmp+0x8c>
   2ae44:	b17a      	cbz	r2, 2ae66 <strncmp+0x92>
   2ae46:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2ae4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ae4e:	42a2      	cmp	r2, r4
   2ae50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2ae54:	d0f5      	beq.n	2ae42 <strncmp+0x6e>
   2ae56:	1b10      	subs	r0, r2, r4
   2ae58:	bcf0      	pop	{r4, r5, r6, r7}
   2ae5a:	4770      	bx	lr
   2ae5c:	4610      	mov	r0, r2
   2ae5e:	4770      	bx	lr
   2ae60:	2000      	movs	r0, #0
   2ae62:	bcf0      	pop	{r4, r5, r6, r7}
   2ae64:	4770      	bx	lr
   2ae66:	4610      	mov	r0, r2
   2ae68:	bcf0      	pop	{r4, r5, r6, r7}
   2ae6a:	4770      	bx	lr
   2ae6c:	4629      	mov	r1, r5
   2ae6e:	4638      	mov	r0, r7
   2ae70:	e7de      	b.n	2ae30 <strncmp+0x5c>
   2ae72:	462a      	mov	r2, r5
   2ae74:	e7ef      	b.n	2ae56 <strncmp+0x82>
   2ae76:	bf00      	nop

0002ae78 <strncpy>:
   2ae78:	ea40 0301 	orr.w	r3, r0, r1
   2ae7c:	f013 0f03 	tst.w	r3, #3
   2ae80:	b470      	push	{r4, r5, r6}
   2ae82:	4603      	mov	r3, r0
   2ae84:	d024      	beq.n	2aed0 <strncpy+0x58>
   2ae86:	b1a2      	cbz	r2, 2aeb2 <strncpy+0x3a>
   2ae88:	780c      	ldrb	r4, [r1, #0]
   2ae8a:	701c      	strb	r4, [r3, #0]
   2ae8c:	3a01      	subs	r2, #1
   2ae8e:	3301      	adds	r3, #1
   2ae90:	3101      	adds	r1, #1
   2ae92:	b13c      	cbz	r4, 2aea4 <strncpy+0x2c>
   2ae94:	b16a      	cbz	r2, 2aeb2 <strncpy+0x3a>
   2ae96:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ae9a:	f803 4b01 	strb.w	r4, [r3], #1
   2ae9e:	3a01      	subs	r2, #1
   2aea0:	2c00      	cmp	r4, #0
   2aea2:	d1f7      	bne.n	2ae94 <strncpy+0x1c>
   2aea4:	b12a      	cbz	r2, 2aeb2 <strncpy+0x3a>
   2aea6:	441a      	add	r2, r3
   2aea8:	2100      	movs	r1, #0
   2aeaa:	f803 1b01 	strb.w	r1, [r3], #1
   2aeae:	429a      	cmp	r2, r3
   2aeb0:	d1fb      	bne.n	2aeaa <strncpy+0x32>
   2aeb2:	bc70      	pop	{r4, r5, r6}
   2aeb4:	4770      	bx	lr
   2aeb6:	460e      	mov	r6, r1
   2aeb8:	f851 5b04 	ldr.w	r5, [r1], #4
   2aebc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2aec0:	ea24 0405 	bic.w	r4, r4, r5
   2aec4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2aec8:	d105      	bne.n	2aed6 <strncpy+0x5e>
   2aeca:	f843 5b04 	str.w	r5, [r3], #4
   2aece:	3a04      	subs	r2, #4
   2aed0:	2a03      	cmp	r2, #3
   2aed2:	d8f0      	bhi.n	2aeb6 <strncpy+0x3e>
   2aed4:	e7d7      	b.n	2ae86 <strncpy+0xe>
   2aed6:	4631      	mov	r1, r6
   2aed8:	e7d6      	b.n	2ae88 <strncpy+0x10>
   2aeda:	bf00      	nop

0002aedc <strrchr>:
   2aedc:	b171      	cbz	r1, 2aefc <strrchr+0x20>
   2aede:	b538      	push	{r3, r4, r5, lr}
   2aee0:	4603      	mov	r3, r0
   2aee2:	460c      	mov	r4, r1
   2aee4:	2500      	movs	r5, #0
   2aee6:	e001      	b.n	2aeec <strrchr+0x10>
   2aee8:	1c43      	adds	r3, r0, #1
   2aeea:	4605      	mov	r5, r0
   2aeec:	4618      	mov	r0, r3
   2aeee:	4621      	mov	r1, r4
   2aef0:	f7ff fe9e 	bl	2ac30 <strchr>
   2aef4:	2800      	cmp	r0, #0
   2aef6:	d1f7      	bne.n	2aee8 <strrchr+0xc>
   2aef8:	4628      	mov	r0, r5
   2aefa:	bd38      	pop	{r3, r4, r5, pc}
   2aefc:	f7ff be98 	b.w	2ac30 <strchr>

0002af00 <critical_factorization>:
   2af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af04:	f04f 0e01 	mov.w	lr, #1
   2af08:	4674      	mov	r4, lr
   2af0a:	2500      	movs	r5, #0
   2af0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2af10:	192b      	adds	r3, r5, r4
   2af12:	428b      	cmp	r3, r1
   2af14:	eb00 0706 	add.w	r7, r0, r6
   2af18:	d20d      	bcs.n	2af36 <critical_factorization+0x36>
   2af1a:	5d3f      	ldrb	r7, [r7, r4]
   2af1c:	f810 c003 	ldrb.w	ip, [r0, r3]
   2af20:	45bc      	cmp	ip, r7
   2af22:	d22d      	bcs.n	2af80 <critical_factorization+0x80>
   2af24:	461d      	mov	r5, r3
   2af26:	2401      	movs	r4, #1
   2af28:	eba3 0e06 	sub.w	lr, r3, r6
   2af2c:	192b      	adds	r3, r5, r4
   2af2e:	428b      	cmp	r3, r1
   2af30:	eb00 0706 	add.w	r7, r0, r6
   2af34:	d3f1      	bcc.n	2af1a <critical_factorization+0x1a>
   2af36:	f04f 0801 	mov.w	r8, #1
   2af3a:	f8c2 e000 	str.w	lr, [r2]
   2af3e:	4644      	mov	r4, r8
   2af40:	2500      	movs	r5, #0
   2af42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2af46:	192b      	adds	r3, r5, r4
   2af48:	4299      	cmp	r1, r3
   2af4a:	eb00 0e07 	add.w	lr, r0, r7
   2af4e:	d90e      	bls.n	2af6e <critical_factorization+0x6e>
   2af50:	f81e e004 	ldrb.w	lr, [lr, r4]
   2af54:	f810 c003 	ldrb.w	ip, [r0, r3]
   2af58:	45f4      	cmp	ip, lr
   2af5a:	d918      	bls.n	2af8e <critical_factorization+0x8e>
   2af5c:	461d      	mov	r5, r3
   2af5e:	2401      	movs	r4, #1
   2af60:	eba3 0807 	sub.w	r8, r3, r7
   2af64:	192b      	adds	r3, r5, r4
   2af66:	4299      	cmp	r1, r3
   2af68:	eb00 0e07 	add.w	lr, r0, r7
   2af6c:	d8f0      	bhi.n	2af50 <critical_factorization+0x50>
   2af6e:	3701      	adds	r7, #1
   2af70:	1c70      	adds	r0, r6, #1
   2af72:	4287      	cmp	r7, r0
   2af74:	bf24      	itt	cs
   2af76:	f8c2 8000 	strcs.w	r8, [r2]
   2af7a:	4638      	movcs	r0, r7
   2af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af80:	d00c      	beq.n	2af9c <critical_factorization+0x9c>
   2af82:	f04f 0e01 	mov.w	lr, #1
   2af86:	462e      	mov	r6, r5
   2af88:	4674      	mov	r4, lr
   2af8a:	4475      	add	r5, lr
   2af8c:	e7c0      	b.n	2af10 <critical_factorization+0x10>
   2af8e:	d00b      	beq.n	2afa8 <critical_factorization+0xa8>
   2af90:	f04f 0801 	mov.w	r8, #1
   2af94:	462f      	mov	r7, r5
   2af96:	4644      	mov	r4, r8
   2af98:	4445      	add	r5, r8
   2af9a:	e7d4      	b.n	2af46 <critical_factorization+0x46>
   2af9c:	4574      	cmp	r4, lr
   2af9e:	bf12      	itee	ne
   2afa0:	3401      	addne	r4, #1
   2afa2:	461d      	moveq	r5, r3
   2afa4:	2401      	moveq	r4, #1
   2afa6:	e7b3      	b.n	2af10 <critical_factorization+0x10>
   2afa8:	4544      	cmp	r4, r8
   2afaa:	bf12      	itee	ne
   2afac:	3401      	addne	r4, #1
   2afae:	461d      	moveq	r5, r3
   2afb0:	2401      	moveq	r4, #1
   2afb2:	e7c8      	b.n	2af46 <critical_factorization+0x46>

0002afb4 <two_way_long_needle>:
   2afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afb8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2afbc:	4616      	mov	r6, r2
   2afbe:	4605      	mov	r5, r0
   2afc0:	468b      	mov	fp, r1
   2afc2:	4610      	mov	r0, r2
   2afc4:	4619      	mov	r1, r3
   2afc6:	aa03      	add	r2, sp, #12
   2afc8:	461c      	mov	r4, r3
   2afca:	f7ff ff99 	bl	2af00 <critical_factorization>
   2afce:	ab03      	add	r3, sp, #12
   2afd0:	4681      	mov	r9, r0
   2afd2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2afd6:	f843 4f04 	str.w	r4, [r3, #4]!
   2afda:	4293      	cmp	r3, r2
   2afdc:	d1fb      	bne.n	2afd6 <two_way_long_needle+0x22>
   2afde:	b14c      	cbz	r4, 2aff4 <two_way_long_needle+0x40>
   2afe0:	1e63      	subs	r3, r4, #1
   2afe2:	1e72      	subs	r2, r6, #1
   2afe4:	a804      	add	r0, sp, #16
   2afe6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2afea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2afee:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2aff2:	d2f8      	bcs.n	2afe6 <two_way_long_needle+0x32>
   2aff4:	9903      	ldr	r1, [sp, #12]
   2aff6:	464a      	mov	r2, r9
   2aff8:	4431      	add	r1, r6
   2affa:	4630      	mov	r0, r6
   2affc:	f7ff fcca 	bl	2a994 <memcmp>
   2b000:	2800      	cmp	r0, #0
   2b002:	d16f      	bne.n	2b0e4 <two_way_long_needle+0x130>
   2b004:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2b008:	9300      	str	r3, [sp, #0]
   2b00a:	18f3      	adds	r3, r6, r3
   2b00c:	4682      	mov	sl, r0
   2b00e:	9301      	str	r3, [sp, #4]
   2b010:	4623      	mov	r3, r4
   2b012:	4680      	mov	r8, r0
   2b014:	4654      	mov	r4, sl
   2b016:	4658      	mov	r0, fp
   2b018:	469a      	mov	sl, r3
   2b01a:	eb08 070a 	add.w	r7, r8, sl
   2b01e:	1a3a      	subs	r2, r7, r0
   2b020:	2100      	movs	r1, #0
   2b022:	4428      	add	r0, r5
   2b024:	f7d5 f8fc 	bl	220 <memchr>
   2b028:	2800      	cmp	r0, #0
   2b02a:	d156      	bne.n	2b0da <two_way_long_needle+0x126>
   2b02c:	2f00      	cmp	r7, #0
   2b02e:	d054      	beq.n	2b0da <two_way_long_needle+0x126>
   2b030:	19eb      	adds	r3, r5, r7
   2b032:	aa04      	add	r2, sp, #16
   2b034:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b03c:	b14b      	cbz	r3, 2b052 <two_way_long_needle+0x9e>
   2b03e:	b124      	cbz	r4, 2b04a <two_way_long_needle+0x96>
   2b040:	9a03      	ldr	r2, [sp, #12]
   2b042:	4293      	cmp	r3, r2
   2b044:	d201      	bcs.n	2b04a <two_way_long_needle+0x96>
   2b046:	ebaa 0302 	sub.w	r3, sl, r2
   2b04a:	4498      	add	r8, r3
   2b04c:	2400      	movs	r4, #0
   2b04e:	4638      	mov	r0, r7
   2b050:	e7e3      	b.n	2b01a <two_way_long_needle+0x66>
   2b052:	454c      	cmp	r4, r9
   2b054:	4623      	mov	r3, r4
   2b056:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2b05a:	bf38      	it	cc
   2b05c:	464b      	movcc	r3, r9
   2b05e:	4573      	cmp	r3, lr
   2b060:	d213      	bcs.n	2b08a <two_way_long_needle+0xd6>
   2b062:	eb08 0203 	add.w	r2, r8, r3
   2b066:	f816 c003 	ldrb.w	ip, [r6, r3]
   2b06a:	5ca8      	ldrb	r0, [r5, r2]
   2b06c:	4584      	cmp	ip, r0
   2b06e:	442a      	add	r2, r5
   2b070:	eb06 0103 	add.w	r1, r6, r3
   2b074:	d006      	beq.n	2b084 <two_way_long_needle+0xd0>
   2b076:	e02c      	b.n	2b0d2 <two_way_long_needle+0x11e>
   2b078:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b07c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b080:	4584      	cmp	ip, r0
   2b082:	d126      	bne.n	2b0d2 <two_way_long_needle+0x11e>
   2b084:	3301      	adds	r3, #1
   2b086:	4573      	cmp	r3, lr
   2b088:	d3f6      	bcc.n	2b078 <two_way_long_needle+0xc4>
   2b08a:	454c      	cmp	r4, r9
   2b08c:	9900      	ldr	r1, [sp, #0]
   2b08e:	f080 8089 	bcs.w	2b1a4 <two_way_long_needle+0x1f0>
   2b092:	9b00      	ldr	r3, [sp, #0]
   2b094:	eb08 0203 	add.w	r2, r8, r3
   2b098:	9b01      	ldr	r3, [sp, #4]
   2b09a:	5ca8      	ldrb	r0, [r5, r2]
   2b09c:	781b      	ldrb	r3, [r3, #0]
   2b09e:	4298      	cmp	r0, r3
   2b0a0:	442a      	add	r2, r5
   2b0a2:	d17f      	bne.n	2b1a4 <two_way_long_needle+0x1f0>
   2b0a4:	9801      	ldr	r0, [sp, #4]
   2b0a6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2b0aa:	e006      	b.n	2b0ba <two_way_long_needle+0x106>
   2b0ac:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b0b0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b0b4:	45f4      	cmp	ip, lr
   2b0b6:	d103      	bne.n	2b0c0 <two_way_long_needle+0x10c>
   2b0b8:	4619      	mov	r1, r3
   2b0ba:	1e4b      	subs	r3, r1, #1
   2b0bc:	459b      	cmp	fp, r3
   2b0be:	d1f5      	bne.n	2b0ac <two_way_long_needle+0xf8>
   2b0c0:	3401      	adds	r4, #1
   2b0c2:	428c      	cmp	r4, r1
   2b0c4:	d870      	bhi.n	2b1a8 <two_way_long_needle+0x1f4>
   2b0c6:	9c03      	ldr	r4, [sp, #12]
   2b0c8:	4638      	mov	r0, r7
   2b0ca:	44a0      	add	r8, r4
   2b0cc:	ebaa 0404 	sub.w	r4, sl, r4
   2b0d0:	e7a3      	b.n	2b01a <two_way_long_needle+0x66>
   2b0d2:	f1c9 0201 	rsb	r2, r9, #1
   2b0d6:	4490      	add	r8, r2
   2b0d8:	e7b7      	b.n	2b04a <two_way_long_needle+0x96>
   2b0da:	2000      	movs	r0, #0
   2b0dc:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0e4:	eba4 0309 	sub.w	r3, r4, r9
   2b0e8:	454b      	cmp	r3, r9
   2b0ea:	bf38      	it	cc
   2b0ec:	464b      	movcc	r3, r9
   2b0ee:	3301      	adds	r3, #1
   2b0f0:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2b0f4:	9303      	str	r3, [sp, #12]
   2b0f6:	eb06 0308 	add.w	r3, r6, r8
   2b0fa:	4658      	mov	r0, fp
   2b0fc:	f04f 0a00 	mov.w	sl, #0
   2b100:	46cb      	mov	fp, r9
   2b102:	4699      	mov	r9, r3
   2b104:	eb0a 0704 	add.w	r7, sl, r4
   2b108:	1a3a      	subs	r2, r7, r0
   2b10a:	2100      	movs	r1, #0
   2b10c:	4428      	add	r0, r5
   2b10e:	f7d5 f887 	bl	220 <memchr>
   2b112:	2800      	cmp	r0, #0
   2b114:	d1e1      	bne.n	2b0da <two_way_long_needle+0x126>
   2b116:	2f00      	cmp	r7, #0
   2b118:	d0df      	beq.n	2b0da <two_way_long_needle+0x126>
   2b11a:	19eb      	adds	r3, r5, r7
   2b11c:	aa04      	add	r2, sp, #16
   2b11e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b126:	bba3      	cbnz	r3, 2b192 <two_way_long_needle+0x1de>
   2b128:	1e61      	subs	r1, r4, #1
   2b12a:	458b      	cmp	fp, r1
   2b12c:	d215      	bcs.n	2b15a <two_way_long_needle+0x1a6>
   2b12e:	eb0a 020b 	add.w	r2, sl, fp
   2b132:	f816 300b 	ldrb.w	r3, [r6, fp]
   2b136:	f815 e002 	ldrb.w	lr, [r5, r2]
   2b13a:	459e      	cmp	lr, r3
   2b13c:	442a      	add	r2, r5
   2b13e:	eb06 000b 	add.w	r0, r6, fp
   2b142:	465b      	mov	r3, fp
   2b144:	d006      	beq.n	2b154 <two_way_long_needle+0x1a0>
   2b146:	e027      	b.n	2b198 <two_way_long_needle+0x1e4>
   2b148:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2b14c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2b150:	45f4      	cmp	ip, lr
   2b152:	d121      	bne.n	2b198 <two_way_long_needle+0x1e4>
   2b154:	3301      	adds	r3, #1
   2b156:	428b      	cmp	r3, r1
   2b158:	d3f6      	bcc.n	2b148 <two_way_long_needle+0x194>
   2b15a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b15e:	d011      	beq.n	2b184 <two_way_long_needle+0x1d0>
   2b160:	eb0a 0208 	add.w	r2, sl, r8
   2b164:	f899 1000 	ldrb.w	r1, [r9]
   2b168:	5cab      	ldrb	r3, [r5, r2]
   2b16a:	4299      	cmp	r1, r3
   2b16c:	442a      	add	r2, r5
   2b16e:	d10f      	bne.n	2b190 <two_way_long_needle+0x1dc>
   2b170:	464b      	mov	r3, r9
   2b172:	e005      	b.n	2b180 <two_way_long_needle+0x1cc>
   2b174:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b178:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b17c:	4288      	cmp	r0, r1
   2b17e:	d107      	bne.n	2b190 <two_way_long_needle+0x1dc>
   2b180:	42b3      	cmp	r3, r6
   2b182:	d1f7      	bne.n	2b174 <two_way_long_needle+0x1c0>
   2b184:	eb05 000a 	add.w	r0, r5, sl
   2b188:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b190:	9b03      	ldr	r3, [sp, #12]
   2b192:	449a      	add	sl, r3
   2b194:	4638      	mov	r0, r7
   2b196:	e7b5      	b.n	2b104 <two_way_long_needle+0x150>
   2b198:	f1cb 0201 	rsb	r2, fp, #1
   2b19c:	4492      	add	sl, r2
   2b19e:	449a      	add	sl, r3
   2b1a0:	4638      	mov	r0, r7
   2b1a2:	e7af      	b.n	2b104 <two_way_long_needle+0x150>
   2b1a4:	4649      	mov	r1, r9
   2b1a6:	e78b      	b.n	2b0c0 <two_way_long_needle+0x10c>
   2b1a8:	eb05 0008 	add.w	r0, r5, r8
   2b1ac:	e796      	b.n	2b0dc <two_way_long_needle+0x128>
   2b1ae:	bf00      	nop

0002b1b0 <strstr>:
   2b1b0:	7802      	ldrb	r2, [r0, #0]
   2b1b2:	2a00      	cmp	r2, #0
   2b1b4:	f000 8101 	beq.w	2b3ba <strstr+0x20a>
   2b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1bc:	f891 8000 	ldrb.w	r8, [r1]
   2b1c0:	b085      	sub	sp, #20
   2b1c2:	4644      	mov	r4, r8
   2b1c4:	f1b8 0f00 	cmp.w	r8, #0
   2b1c8:	d016      	beq.n	2b1f8 <strstr+0x48>
   2b1ca:	4686      	mov	lr, r0
   2b1cc:	f101 0c01 	add.w	ip, r1, #1
   2b1d0:	2701      	movs	r7, #1
   2b1d2:	e003      	b.n	2b1dc <strstr+0x2c>
   2b1d4:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b1d8:	b16c      	cbz	r4, 2b1f6 <strstr+0x46>
   2b1da:	469c      	mov	ip, r3
   2b1dc:	42a2      	cmp	r2, r4
   2b1de:	bf14      	ite	ne
   2b1e0:	2700      	movne	r7, #0
   2b1e2:	f007 0701 	andeq.w	r7, r7, #1
   2b1e6:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b1ea:	4663      	mov	r3, ip
   2b1ec:	2a00      	cmp	r2, #0
   2b1ee:	d1f1      	bne.n	2b1d4 <strstr+0x24>
   2b1f0:	f89c 3000 	ldrb.w	r3, [ip]
   2b1f4:	b9fb      	cbnz	r3, 2b236 <strstr+0x86>
   2b1f6:	b117      	cbz	r7, 2b1fe <strstr+0x4e>
   2b1f8:	b005      	add	sp, #20
   2b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1fe:	460e      	mov	r6, r1
   2b200:	4605      	mov	r5, r0
   2b202:	4641      	mov	r1, r8
   2b204:	3001      	adds	r0, #1
   2b206:	ebac 0406 	sub.w	r4, ip, r6
   2b20a:	f7ff fd11 	bl	2ac30 <strchr>
   2b20e:	4607      	mov	r7, r0
   2b210:	b188      	cbz	r0, 2b236 <strstr+0x86>
   2b212:	2c01      	cmp	r4, #1
   2b214:	d0f0      	beq.n	2b1f8 <strstr+0x48>
   2b216:	1928      	adds	r0, r5, r4
   2b218:	4287      	cmp	r7, r0
   2b21a:	bf94      	ite	ls
   2b21c:	1bc1      	subls	r1, r0, r7
   2b21e:	2101      	movhi	r1, #1
   2b220:	2c1f      	cmp	r4, #31
   2b222:	468b      	mov	fp, r1
   2b224:	d90b      	bls.n	2b23e <strstr+0x8e>
   2b226:	4623      	mov	r3, r4
   2b228:	4632      	mov	r2, r6
   2b22a:	4638      	mov	r0, r7
   2b22c:	f7ff fec2 	bl	2afb4 <two_way_long_needle>
   2b230:	b005      	add	sp, #20
   2b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b236:	2000      	movs	r0, #0
   2b238:	b005      	add	sp, #20
   2b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b23e:	aa03      	add	r2, sp, #12
   2b240:	4621      	mov	r1, r4
   2b242:	4630      	mov	r0, r6
   2b244:	f7ff fe5c 	bl	2af00 <critical_factorization>
   2b248:	9903      	ldr	r1, [sp, #12]
   2b24a:	4680      	mov	r8, r0
   2b24c:	4602      	mov	r2, r0
   2b24e:	4431      	add	r1, r6
   2b250:	4630      	mov	r0, r6
   2b252:	f7ff fb9f 	bl	2a994 <memcmp>
   2b256:	2800      	cmp	r0, #0
   2b258:	d157      	bne.n	2b30a <strstr+0x15a>
   2b25a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b25e:	9300      	str	r3, [sp, #0]
   2b260:	18f3      	adds	r3, r6, r3
   2b262:	4681      	mov	r9, r0
   2b264:	4605      	mov	r5, r0
   2b266:	9301      	str	r3, [sp, #4]
   2b268:	4658      	mov	r0, fp
   2b26a:	46b2      	mov	sl, r6
   2b26c:	1966      	adds	r6, r4, r5
   2b26e:	1a32      	subs	r2, r6, r0
   2b270:	2100      	movs	r1, #0
   2b272:	4438      	add	r0, r7
   2b274:	f7d4 ffd4 	bl	220 <memchr>
   2b278:	2800      	cmp	r0, #0
   2b27a:	d1dc      	bne.n	2b236 <strstr+0x86>
   2b27c:	2e00      	cmp	r6, #0
   2b27e:	d0da      	beq.n	2b236 <strstr+0x86>
   2b280:	45c8      	cmp	r8, r9
   2b282:	4643      	mov	r3, r8
   2b284:	bf38      	it	cc
   2b286:	464b      	movcc	r3, r9
   2b288:	429c      	cmp	r4, r3
   2b28a:	d912      	bls.n	2b2b2 <strstr+0x102>
   2b28c:	195a      	adds	r2, r3, r5
   2b28e:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b292:	5cb8      	ldrb	r0, [r7, r2]
   2b294:	4281      	cmp	r1, r0
   2b296:	443a      	add	r2, r7
   2b298:	eb0a 0e03 	add.w	lr, sl, r3
   2b29c:	d006      	beq.n	2b2ac <strstr+0xfc>
   2b29e:	e02c      	b.n	2b2fa <strstr+0x14a>
   2b2a0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b2a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b2a8:	4288      	cmp	r0, r1
   2b2aa:	d126      	bne.n	2b2fa <strstr+0x14a>
   2b2ac:	3301      	adds	r3, #1
   2b2ae:	429c      	cmp	r4, r3
   2b2b0:	d1f6      	bne.n	2b2a0 <strstr+0xf0>
   2b2b2:	45c8      	cmp	r8, r9
   2b2b4:	9900      	ldr	r1, [sp, #0]
   2b2b6:	f240 8083 	bls.w	2b3c0 <strstr+0x210>
   2b2ba:	9b00      	ldr	r3, [sp, #0]
   2b2bc:	18ea      	adds	r2, r5, r3
   2b2be:	9b01      	ldr	r3, [sp, #4]
   2b2c0:	5cb8      	ldrb	r0, [r7, r2]
   2b2c2:	781b      	ldrb	r3, [r3, #0]
   2b2c4:	4298      	cmp	r0, r3
   2b2c6:	443a      	add	r2, r7
   2b2c8:	d17a      	bne.n	2b3c0 <strstr+0x210>
   2b2ca:	9801      	ldr	r0, [sp, #4]
   2b2cc:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b2d0:	e006      	b.n	2b2e0 <strstr+0x130>
   2b2d2:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b2d6:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b2da:	45f4      	cmp	ip, lr
   2b2dc:	d103      	bne.n	2b2e6 <strstr+0x136>
   2b2de:	4619      	mov	r1, r3
   2b2e0:	1e4b      	subs	r3, r1, #1
   2b2e2:	455b      	cmp	r3, fp
   2b2e4:	d1f5      	bne.n	2b2d2 <strstr+0x122>
   2b2e6:	f109 0901 	add.w	r9, r9, #1
   2b2ea:	4589      	cmp	r9, r1
   2b2ec:	d857      	bhi.n	2b39e <strstr+0x1ee>
   2b2ee:	9b03      	ldr	r3, [sp, #12]
   2b2f0:	4630      	mov	r0, r6
   2b2f2:	441d      	add	r5, r3
   2b2f4:	eba4 0903 	sub.w	r9, r4, r3
   2b2f8:	e7b8      	b.n	2b26c <strstr+0xbc>
   2b2fa:	f1c8 0201 	rsb	r2, r8, #1
   2b2fe:	4415      	add	r5, r2
   2b300:	441d      	add	r5, r3
   2b302:	f04f 0900 	mov.w	r9, #0
   2b306:	4630      	mov	r0, r6
   2b308:	e7b0      	b.n	2b26c <strstr+0xbc>
   2b30a:	eba4 0308 	sub.w	r3, r4, r8
   2b30e:	4543      	cmp	r3, r8
   2b310:	bf38      	it	cc
   2b312:	4643      	movcc	r3, r8
   2b314:	3301      	adds	r3, #1
   2b316:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b31a:	9303      	str	r3, [sp, #12]
   2b31c:	eb06 0309 	add.w	r3, r6, r9
   2b320:	4658      	mov	r0, fp
   2b322:	2500      	movs	r5, #0
   2b324:	46bb      	mov	fp, r7
   2b326:	469a      	mov	sl, r3
   2b328:	1967      	adds	r7, r4, r5
   2b32a:	1a3a      	subs	r2, r7, r0
   2b32c:	2100      	movs	r1, #0
   2b32e:	4458      	add	r0, fp
   2b330:	f7d4 ff76 	bl	220 <memchr>
   2b334:	2800      	cmp	r0, #0
   2b336:	f47f af7e 	bne.w	2b236 <strstr+0x86>
   2b33a:	2f00      	cmp	r7, #0
   2b33c:	f43f af7b 	beq.w	2b236 <strstr+0x86>
   2b340:	4544      	cmp	r4, r8
   2b342:	d915      	bls.n	2b370 <strstr+0x1c0>
   2b344:	eb08 0205 	add.w	r2, r8, r5
   2b348:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b34c:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b350:	4298      	cmp	r0, r3
   2b352:	445a      	add	r2, fp
   2b354:	eb06 0108 	add.w	r1, r6, r8
   2b358:	4643      	mov	r3, r8
   2b35a:	d006      	beq.n	2b36a <strstr+0x1ba>
   2b35c:	e023      	b.n	2b3a6 <strstr+0x1f6>
   2b35e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b362:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b366:	4586      	cmp	lr, r0
   2b368:	d11d      	bne.n	2b3a6 <strstr+0x1f6>
   2b36a:	3301      	adds	r3, #1
   2b36c:	429c      	cmp	r4, r3
   2b36e:	d1f6      	bne.n	2b35e <strstr+0x1ae>
   2b370:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b374:	d012      	beq.n	2b39c <strstr+0x1ec>
   2b376:	eb05 0209 	add.w	r2, r5, r9
   2b37a:	f89a 3000 	ldrb.w	r3, [sl]
   2b37e:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b382:	4299      	cmp	r1, r3
   2b384:	445a      	add	r2, fp
   2b386:	d114      	bne.n	2b3b2 <strstr+0x202>
   2b388:	4653      	mov	r3, sl
   2b38a:	e005      	b.n	2b398 <strstr+0x1e8>
   2b38c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b390:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b394:	4288      	cmp	r0, r1
   2b396:	d10c      	bne.n	2b3b2 <strstr+0x202>
   2b398:	42b3      	cmp	r3, r6
   2b39a:	d1f7      	bne.n	2b38c <strstr+0x1dc>
   2b39c:	465f      	mov	r7, fp
   2b39e:	1978      	adds	r0, r7, r5
   2b3a0:	b005      	add	sp, #20
   2b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3a6:	f1c8 0201 	rsb	r2, r8, #1
   2b3aa:	4415      	add	r5, r2
   2b3ac:	441d      	add	r5, r3
   2b3ae:	4638      	mov	r0, r7
   2b3b0:	e7ba      	b.n	2b328 <strstr+0x178>
   2b3b2:	9b03      	ldr	r3, [sp, #12]
   2b3b4:	4638      	mov	r0, r7
   2b3b6:	441d      	add	r5, r3
   2b3b8:	e7b6      	b.n	2b328 <strstr+0x178>
   2b3ba:	780b      	ldrb	r3, [r1, #0]
   2b3bc:	b913      	cbnz	r3, 2b3c4 <strstr+0x214>
   2b3be:	4770      	bx	lr
   2b3c0:	4641      	mov	r1, r8
   2b3c2:	e790      	b.n	2b2e6 <strstr+0x136>
   2b3c4:	2000      	movs	r0, #0
   2b3c6:	4770      	bx	lr

0002b3c8 <_strtol_l.isra.0>:
   2b3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b3d0:	460f      	mov	r7, r1
   2b3d2:	4680      	mov	r8, r0
   2b3d4:	4616      	mov	r6, r2
   2b3d6:	461d      	mov	r5, r3
   2b3d8:	468a      	mov	sl, r1
   2b3da:	e000      	b.n	2b3de <_strtol_l.isra.0+0x16>
   2b3dc:	46a2      	mov	sl, r4
   2b3de:	4654      	mov	r4, sl
   2b3e0:	4648      	mov	r0, r9
   2b3e2:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b3e6:	f7ff faad 	bl	2a944 <__locale_ctype_ptr_l>
   2b3ea:	4458      	add	r0, fp
   2b3ec:	7842      	ldrb	r2, [r0, #1]
   2b3ee:	f012 0208 	ands.w	r2, r2, #8
   2b3f2:	d1f3      	bne.n	2b3dc <_strtol_l.isra.0+0x14>
   2b3f4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b3f8:	d04f      	beq.n	2b49a <_strtol_l.isra.0+0xd2>
   2b3fa:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b3fe:	bf04      	itt	eq
   2b400:	f894 b000 	ldrbeq.w	fp, [r4]
   2b404:	f10a 0402 	addeq.w	r4, sl, #2
   2b408:	b11d      	cbz	r5, 2b412 <_strtol_l.isra.0+0x4a>
   2b40a:	2d10      	cmp	r5, #16
   2b40c:	d056      	beq.n	2b4bc <_strtol_l.isra.0+0xf4>
   2b40e:	46ac      	mov	ip, r5
   2b410:	e004      	b.n	2b41c <_strtol_l.isra.0+0x54>
   2b412:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b416:	d060      	beq.n	2b4da <_strtol_l.isra.0+0x112>
   2b418:	250a      	movs	r5, #10
   2b41a:	46ac      	mov	ip, r5
   2b41c:	2a00      	cmp	r2, #0
   2b41e:	bf0c      	ite	eq
   2b420:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b424:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b428:	2100      	movs	r1, #0
   2b42a:	fbb9 fefc 	udiv	lr, r9, ip
   2b42e:	4608      	mov	r0, r1
   2b430:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b434:	e005      	b.n	2b442 <_strtol_l.isra.0+0x7a>
   2b436:	d029      	beq.n	2b48c <_strtol_l.isra.0+0xc4>
   2b438:	fb0c 3000 	mla	r0, ip, r0, r3
   2b43c:	2101      	movs	r1, #1
   2b43e:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b442:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b446:	2b09      	cmp	r3, #9
   2b448:	d905      	bls.n	2b456 <_strtol_l.isra.0+0x8e>
   2b44a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b44e:	2b19      	cmp	r3, #25
   2b450:	d80b      	bhi.n	2b46a <_strtol_l.isra.0+0xa2>
   2b452:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b456:	429d      	cmp	r5, r3
   2b458:	dd0f      	ble.n	2b47a <_strtol_l.isra.0+0xb2>
   2b45a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b45e:	d0ee      	beq.n	2b43e <_strtol_l.isra.0+0x76>
   2b460:	4586      	cmp	lr, r0
   2b462:	d2e8      	bcs.n	2b436 <_strtol_l.isra.0+0x6e>
   2b464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b468:	e7e9      	b.n	2b43e <_strtol_l.isra.0+0x76>
   2b46a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b46e:	2b19      	cmp	r3, #25
   2b470:	d803      	bhi.n	2b47a <_strtol_l.isra.0+0xb2>
   2b472:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b476:	429d      	cmp	r5, r3
   2b478:	dcef      	bgt.n	2b45a <_strtol_l.isra.0+0x92>
   2b47a:	1c4b      	adds	r3, r1, #1
   2b47c:	d013      	beq.n	2b4a6 <_strtol_l.isra.0+0xde>
   2b47e:	b102      	cbz	r2, 2b482 <_strtol_l.isra.0+0xba>
   2b480:	4240      	negs	r0, r0
   2b482:	b146      	cbz	r6, 2b496 <_strtol_l.isra.0+0xce>
   2b484:	b9c1      	cbnz	r1, 2b4b8 <_strtol_l.isra.0+0xf0>
   2b486:	6037      	str	r7, [r6, #0]
   2b488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b48c:	459a      	cmp	sl, r3
   2b48e:	dad3      	bge.n	2b438 <_strtol_l.isra.0+0x70>
   2b490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b494:	e7d3      	b.n	2b43e <_strtol_l.isra.0+0x76>
   2b496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b49a:	f894 b000 	ldrb.w	fp, [r4]
   2b49e:	2201      	movs	r2, #1
   2b4a0:	f10a 0402 	add.w	r4, sl, #2
   2b4a4:	e7b0      	b.n	2b408 <_strtol_l.isra.0+0x40>
   2b4a6:	2322      	movs	r3, #34	; 0x22
   2b4a8:	f8c8 3000 	str.w	r3, [r8]
   2b4ac:	b1ee      	cbz	r6, 2b4ea <_strtol_l.isra.0+0x122>
   2b4ae:	1e67      	subs	r7, r4, #1
   2b4b0:	4648      	mov	r0, r9
   2b4b2:	6037      	str	r7, [r6, #0]
   2b4b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4b8:	4681      	mov	r9, r0
   2b4ba:	e7f8      	b.n	2b4ae <_strtol_l.isra.0+0xe6>
   2b4bc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b4c0:	d1a5      	bne.n	2b40e <_strtol_l.isra.0+0x46>
   2b4c2:	7823      	ldrb	r3, [r4, #0]
   2b4c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b4c8:	2b58      	cmp	r3, #88	; 0x58
   2b4ca:	d1a0      	bne.n	2b40e <_strtol_l.isra.0+0x46>
   2b4cc:	f04f 0c10 	mov.w	ip, #16
   2b4d0:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b4d4:	4665      	mov	r5, ip
   2b4d6:	3402      	adds	r4, #2
   2b4d8:	e7a0      	b.n	2b41c <_strtol_l.isra.0+0x54>
   2b4da:	7823      	ldrb	r3, [r4, #0]
   2b4dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b4e0:	2b58      	cmp	r3, #88	; 0x58
   2b4e2:	d0f3      	beq.n	2b4cc <_strtol_l.isra.0+0x104>
   2b4e4:	2508      	movs	r5, #8
   2b4e6:	46ac      	mov	ip, r5
   2b4e8:	e798      	b.n	2b41c <_strtol_l.isra.0+0x54>
   2b4ea:	4648      	mov	r0, r9
   2b4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b4f0 <strtol>:
   2b4f0:	b530      	push	{r4, r5, lr}
   2b4f2:	4c08      	ldr	r4, [pc, #32]	; (2b514 <strtol+0x24>)
   2b4f4:	4b08      	ldr	r3, [pc, #32]	; (2b518 <strtol+0x28>)
   2b4f6:	6825      	ldr	r5, [r4, #0]
   2b4f8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b4fa:	b083      	sub	sp, #12
   2b4fc:	2c00      	cmp	r4, #0
   2b4fe:	bf08      	it	eq
   2b500:	461c      	moveq	r4, r3
   2b502:	9400      	str	r4, [sp, #0]
   2b504:	4613      	mov	r3, r2
   2b506:	460a      	mov	r2, r1
   2b508:	4601      	mov	r1, r0
   2b50a:	4628      	mov	r0, r5
   2b50c:	f7ff ff5c 	bl	2b3c8 <_strtol_l.isra.0>
   2b510:	b003      	add	sp, #12
   2b512:	bd30      	pop	{r4, r5, pc}
   2b514:	2000c684 	.word	0x2000c684
   2b518:	2000c518 	.word	0x2000c518

0002b51c <_strtoul_l.isra.0>:
   2b51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b520:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b524:	460e      	mov	r6, r1
   2b526:	4607      	mov	r7, r0
   2b528:	4615      	mov	r5, r2
   2b52a:	4698      	mov	r8, r3
   2b52c:	468a      	mov	sl, r1
   2b52e:	e000      	b.n	2b532 <_strtoul_l.isra.0+0x16>
   2b530:	46a2      	mov	sl, r4
   2b532:	4654      	mov	r4, sl
   2b534:	4648      	mov	r0, r9
   2b536:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b53a:	f7ff fa03 	bl	2a944 <__locale_ctype_ptr_l>
   2b53e:	4458      	add	r0, fp
   2b540:	7840      	ldrb	r0, [r0, #1]
   2b542:	f010 0008 	ands.w	r0, r0, #8
   2b546:	d1f3      	bne.n	2b530 <_strtoul_l.isra.0+0x14>
   2b548:	4659      	mov	r1, fp
   2b54a:	292d      	cmp	r1, #45	; 0x2d
   2b54c:	d059      	beq.n	2b602 <_strtoul_l.isra.0+0xe6>
   2b54e:	292b      	cmp	r1, #43	; 0x2b
   2b550:	bf04      	itt	eq
   2b552:	7821      	ldrbeq	r1, [r4, #0]
   2b554:	f10a 0402 	addeq.w	r4, sl, #2
   2b558:	f1b8 0f00 	cmp.w	r8, #0
   2b55c:	d00c      	beq.n	2b578 <_strtoul_l.isra.0+0x5c>
   2b55e:	f1b8 0f10 	cmp.w	r8, #16
   2b562:	d053      	beq.n	2b60c <_strtoul_l.isra.0+0xf0>
   2b564:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b568:	fbbc fcf8 	udiv	ip, ip, r8
   2b56c:	fb08 fa0c 	mul.w	sl, r8, ip
   2b570:	ea6f 0a0a 	mvn.w	sl, sl
   2b574:	46c1      	mov	r9, r8
   2b576:	e008      	b.n	2b58a <_strtoul_l.isra.0+0x6e>
   2b578:	2930      	cmp	r1, #48	; 0x30
   2b57a:	d058      	beq.n	2b62e <_strtoul_l.isra.0+0x112>
   2b57c:	f04f 080a 	mov.w	r8, #10
   2b580:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b660 <_strtoul_l.isra.0+0x144>
   2b584:	46c1      	mov	r9, r8
   2b586:	f04f 0a05 	mov.w	sl, #5
   2b58a:	2300      	movs	r3, #0
   2b58c:	469e      	mov	lr, r3
   2b58e:	e005      	b.n	2b59c <_strtoul_l.isra.0+0x80>
   2b590:	d02a      	beq.n	2b5e8 <_strtoul_l.isra.0+0xcc>
   2b592:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b596:	2301      	movs	r3, #1
   2b598:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b59c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b5a0:	2a09      	cmp	r2, #9
   2b5a2:	d905      	bls.n	2b5b0 <_strtoul_l.isra.0+0x94>
   2b5a4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b5a8:	2a19      	cmp	r2, #25
   2b5aa:	d80a      	bhi.n	2b5c2 <_strtoul_l.isra.0+0xa6>
   2b5ac:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b5b0:	4590      	cmp	r8, r2
   2b5b2:	dd0e      	ble.n	2b5d2 <_strtoul_l.isra.0+0xb6>
   2b5b4:	2b00      	cmp	r3, #0
   2b5b6:	db01      	blt.n	2b5bc <_strtoul_l.isra.0+0xa0>
   2b5b8:	45e6      	cmp	lr, ip
   2b5ba:	d9e9      	bls.n	2b590 <_strtoul_l.isra.0+0x74>
   2b5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b5c0:	e7ea      	b.n	2b598 <_strtoul_l.isra.0+0x7c>
   2b5c2:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b5c6:	2a19      	cmp	r2, #25
   2b5c8:	d803      	bhi.n	2b5d2 <_strtoul_l.isra.0+0xb6>
   2b5ca:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b5ce:	4590      	cmp	r8, r2
   2b5d0:	dcf0      	bgt.n	2b5b4 <_strtoul_l.isra.0+0x98>
   2b5d2:	2b00      	cmp	r3, #0
   2b5d4:	db0d      	blt.n	2b5f2 <_strtoul_l.isra.0+0xd6>
   2b5d6:	b108      	cbz	r0, 2b5dc <_strtoul_l.isra.0+0xc0>
   2b5d8:	f1ce 0e00 	rsb	lr, lr, #0
   2b5dc:	b10d      	cbz	r5, 2b5e2 <_strtoul_l.isra.0+0xc6>
   2b5de:	b973      	cbnz	r3, 2b5fe <_strtoul_l.isra.0+0xe2>
   2b5e0:	602e      	str	r6, [r5, #0]
   2b5e2:	4670      	mov	r0, lr
   2b5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5e8:	4552      	cmp	r2, sl
   2b5ea:	ddd2      	ble.n	2b592 <_strtoul_l.isra.0+0x76>
   2b5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b5f0:	e7d2      	b.n	2b598 <_strtoul_l.isra.0+0x7c>
   2b5f2:	2322      	movs	r3, #34	; 0x22
   2b5f4:	603b      	str	r3, [r7, #0]
   2b5f6:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b5fa:	2d00      	cmp	r5, #0
   2b5fc:	d0f1      	beq.n	2b5e2 <_strtoul_l.isra.0+0xc6>
   2b5fe:	1e66      	subs	r6, r4, #1
   2b600:	e7ee      	b.n	2b5e0 <_strtoul_l.isra.0+0xc4>
   2b602:	7821      	ldrb	r1, [r4, #0]
   2b604:	2001      	movs	r0, #1
   2b606:	f10a 0402 	add.w	r4, sl, #2
   2b60a:	e7a5      	b.n	2b558 <_strtoul_l.isra.0+0x3c>
   2b60c:	2930      	cmp	r1, #48	; 0x30
   2b60e:	d11b      	bne.n	2b648 <_strtoul_l.isra.0+0x12c>
   2b610:	7823      	ldrb	r3, [r4, #0]
   2b612:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b616:	2b58      	cmp	r3, #88	; 0x58
   2b618:	d11c      	bne.n	2b654 <_strtoul_l.isra.0+0x138>
   2b61a:	f04f 0910 	mov.w	r9, #16
   2b61e:	7861      	ldrb	r1, [r4, #1]
   2b620:	46c8      	mov	r8, r9
   2b622:	f04f 0a0f 	mov.w	sl, #15
   2b626:	3402      	adds	r4, #2
   2b628:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b62c:	e7ad      	b.n	2b58a <_strtoul_l.isra.0+0x6e>
   2b62e:	7823      	ldrb	r3, [r4, #0]
   2b630:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b634:	2b58      	cmp	r3, #88	; 0x58
   2b636:	d0f0      	beq.n	2b61a <_strtoul_l.isra.0+0xfe>
   2b638:	f04f 0808 	mov.w	r8, #8
   2b63c:	46c1      	mov	r9, r8
   2b63e:	f04f 0a07 	mov.w	sl, #7
   2b642:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b646:	e7a0      	b.n	2b58a <_strtoul_l.isra.0+0x6e>
   2b648:	f04f 0a0f 	mov.w	sl, #15
   2b64c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b650:	46c1      	mov	r9, r8
   2b652:	e79a      	b.n	2b58a <_strtoul_l.isra.0+0x6e>
   2b654:	46c1      	mov	r9, r8
   2b656:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b65a:	f04f 0a0f 	mov.w	sl, #15
   2b65e:	e794      	b.n	2b58a <_strtoul_l.isra.0+0x6e>
   2b660:	19999999 	.word	0x19999999

0002b664 <strtoul>:
   2b664:	b530      	push	{r4, r5, lr}
   2b666:	4c08      	ldr	r4, [pc, #32]	; (2b688 <strtoul+0x24>)
   2b668:	4b08      	ldr	r3, [pc, #32]	; (2b68c <strtoul+0x28>)
   2b66a:	6825      	ldr	r5, [r4, #0]
   2b66c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b66e:	b083      	sub	sp, #12
   2b670:	2c00      	cmp	r4, #0
   2b672:	bf08      	it	eq
   2b674:	461c      	moveq	r4, r3
   2b676:	9400      	str	r4, [sp, #0]
   2b678:	4613      	mov	r3, r2
   2b67a:	460a      	mov	r2, r1
   2b67c:	4601      	mov	r1, r0
   2b67e:	4628      	mov	r0, r5
   2b680:	f7ff ff4c 	bl	2b51c <_strtoul_l.isra.0>
   2b684:	b003      	add	sp, #12
   2b686:	bd30      	pop	{r4, r5, pc}
   2b688:	2000c684 	.word	0x2000c684
   2b68c:	2000c518 	.word	0x2000c518

0002b690 <_svfprintf_r>:
   2b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b694:	b0c3      	sub	sp, #268	; 0x10c
   2b696:	460c      	mov	r4, r1
   2b698:	910b      	str	r1, [sp, #44]	; 0x2c
   2b69a:	4692      	mov	sl, r2
   2b69c:	930f      	str	r3, [sp, #60]	; 0x3c
   2b69e:	900c      	str	r0, [sp, #48]	; 0x30
   2b6a0:	f002 f9f0 	bl	2da84 <_localeconv_r>
   2b6a4:	6803      	ldr	r3, [r0, #0]
   2b6a6:	931a      	str	r3, [sp, #104]	; 0x68
   2b6a8:	4618      	mov	r0, r3
   2b6aa:	f7d5 f829 	bl	700 <strlen>
   2b6ae:	89a3      	ldrh	r3, [r4, #12]
   2b6b0:	9019      	str	r0, [sp, #100]	; 0x64
   2b6b2:	0619      	lsls	r1, r3, #24
   2b6b4:	d503      	bpl.n	2b6be <_svfprintf_r+0x2e>
   2b6b6:	6923      	ldr	r3, [r4, #16]
   2b6b8:	2b00      	cmp	r3, #0
   2b6ba:	f001 8003 	beq.w	2c6c4 <_svfprintf_r+0x1034>
   2b6be:	2300      	movs	r3, #0
   2b6c0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b6c4:	9313      	str	r3, [sp, #76]	; 0x4c
   2b6c6:	9315      	str	r3, [sp, #84]	; 0x54
   2b6c8:	9314      	str	r3, [sp, #80]	; 0x50
   2b6ca:	9327      	str	r3, [sp, #156]	; 0x9c
   2b6cc:	9326      	str	r3, [sp, #152]	; 0x98
   2b6ce:	9318      	str	r3, [sp, #96]	; 0x60
   2b6d0:	931b      	str	r3, [sp, #108]	; 0x6c
   2b6d2:	9309      	str	r3, [sp, #36]	; 0x24
   2b6d4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b6d8:	46c8      	mov	r8, r9
   2b6da:	9316      	str	r3, [sp, #88]	; 0x58
   2b6dc:	9317      	str	r3, [sp, #92]	; 0x5c
   2b6de:	f89a 3000 	ldrb.w	r3, [sl]
   2b6e2:	4654      	mov	r4, sl
   2b6e4:	b1e3      	cbz	r3, 2b720 <_svfprintf_r+0x90>
   2b6e6:	2b25      	cmp	r3, #37	; 0x25
   2b6e8:	d102      	bne.n	2b6f0 <_svfprintf_r+0x60>
   2b6ea:	e019      	b.n	2b720 <_svfprintf_r+0x90>
   2b6ec:	2b25      	cmp	r3, #37	; 0x25
   2b6ee:	d003      	beq.n	2b6f8 <_svfprintf_r+0x68>
   2b6f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b6f4:	2b00      	cmp	r3, #0
   2b6f6:	d1f9      	bne.n	2b6ec <_svfprintf_r+0x5c>
   2b6f8:	eba4 050a 	sub.w	r5, r4, sl
   2b6fc:	b185      	cbz	r5, 2b720 <_svfprintf_r+0x90>
   2b6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b700:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b702:	f8c8 a000 	str.w	sl, [r8]
   2b706:	3301      	adds	r3, #1
   2b708:	442a      	add	r2, r5
   2b70a:	2b07      	cmp	r3, #7
   2b70c:	f8c8 5004 	str.w	r5, [r8, #4]
   2b710:	9227      	str	r2, [sp, #156]	; 0x9c
   2b712:	9326      	str	r3, [sp, #152]	; 0x98
   2b714:	dc7f      	bgt.n	2b816 <_svfprintf_r+0x186>
   2b716:	f108 0808 	add.w	r8, r8, #8
   2b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b71c:	442b      	add	r3, r5
   2b71e:	9309      	str	r3, [sp, #36]	; 0x24
   2b720:	7823      	ldrb	r3, [r4, #0]
   2b722:	2b00      	cmp	r3, #0
   2b724:	d07f      	beq.n	2b826 <_svfprintf_r+0x196>
   2b726:	2300      	movs	r3, #0
   2b728:	461a      	mov	r2, r3
   2b72a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b72e:	4619      	mov	r1, r3
   2b730:	930d      	str	r3, [sp, #52]	; 0x34
   2b732:	469b      	mov	fp, r3
   2b734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b738:	7863      	ldrb	r3, [r4, #1]
   2b73a:	900a      	str	r0, [sp, #40]	; 0x28
   2b73c:	f104 0a01 	add.w	sl, r4, #1
   2b740:	f10a 0a01 	add.w	sl, sl, #1
   2b744:	f1a3 0020 	sub.w	r0, r3, #32
   2b748:	2858      	cmp	r0, #88	; 0x58
   2b74a:	f200 83c1 	bhi.w	2bed0 <_svfprintf_r+0x840>
   2b74e:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b752:	0238      	.short	0x0238
   2b754:	03bf03bf 	.word	0x03bf03bf
   2b758:	03bf0240 	.word	0x03bf0240
   2b75c:	03bf03bf 	.word	0x03bf03bf
   2b760:	03bf03bf 	.word	0x03bf03bf
   2b764:	024503bf 	.word	0x024503bf
   2b768:	03bf0203 	.word	0x03bf0203
   2b76c:	026b005d 	.word	0x026b005d
   2b770:	028603bf 	.word	0x028603bf
   2b774:	039d039d 	.word	0x039d039d
   2b778:	039d039d 	.word	0x039d039d
   2b77c:	039d039d 	.word	0x039d039d
   2b780:	039d039d 	.word	0x039d039d
   2b784:	03bf039d 	.word	0x03bf039d
   2b788:	03bf03bf 	.word	0x03bf03bf
   2b78c:	03bf03bf 	.word	0x03bf03bf
   2b790:	03bf03bf 	.word	0x03bf03bf
   2b794:	03bf03bf 	.word	0x03bf03bf
   2b798:	033703bf 	.word	0x033703bf
   2b79c:	03bf0357 	.word	0x03bf0357
   2b7a0:	03bf0357 	.word	0x03bf0357
   2b7a4:	03bf03bf 	.word	0x03bf03bf
   2b7a8:	039803bf 	.word	0x039803bf
   2b7ac:	03bf03bf 	.word	0x03bf03bf
   2b7b0:	03bf03ad 	.word	0x03bf03ad
   2b7b4:	03bf03bf 	.word	0x03bf03bf
   2b7b8:	03bf03bf 	.word	0x03bf03bf
   2b7bc:	03bf0259 	.word	0x03bf0259
   2b7c0:	031e03bf 	.word	0x031e03bf
   2b7c4:	03bf03bf 	.word	0x03bf03bf
   2b7c8:	03bf03bf 	.word	0x03bf03bf
   2b7cc:	03bf03bf 	.word	0x03bf03bf
   2b7d0:	03bf03bf 	.word	0x03bf03bf
   2b7d4:	03bf03bf 	.word	0x03bf03bf
   2b7d8:	02db02c6 	.word	0x02db02c6
   2b7dc:	03570357 	.word	0x03570357
   2b7e0:	028b0357 	.word	0x028b0357
   2b7e4:	03bf02db 	.word	0x03bf02db
   2b7e8:	029003bf 	.word	0x029003bf
   2b7ec:	029d03bf 	.word	0x029d03bf
   2b7f0:	02b401cc 	.word	0x02b401cc
   2b7f4:	03bf0208 	.word	0x03bf0208
   2b7f8:	03bf01e1 	.word	0x03bf01e1
   2b7fc:	03bf007e 	.word	0x03bf007e
   2b800:	020d03bf 	.word	0x020d03bf
   2b804:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b806:	930f      	str	r3, [sp, #60]	; 0x3c
   2b808:	4240      	negs	r0, r0
   2b80a:	900d      	str	r0, [sp, #52]	; 0x34
   2b80c:	f04b 0b04 	orr.w	fp, fp, #4
   2b810:	f89a 3000 	ldrb.w	r3, [sl]
   2b814:	e794      	b.n	2b740 <_svfprintf_r+0xb0>
   2b816:	aa25      	add	r2, sp, #148	; 0x94
   2b818:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b81a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b81c:	f002 ff08 	bl	2e630 <__ssprint_r>
   2b820:	b940      	cbnz	r0, 2b834 <_svfprintf_r+0x1a4>
   2b822:	46c8      	mov	r8, r9
   2b824:	e779      	b.n	2b71a <_svfprintf_r+0x8a>
   2b826:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b828:	b123      	cbz	r3, 2b834 <_svfprintf_r+0x1a4>
   2b82a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b82c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b82e:	aa25      	add	r2, sp, #148	; 0x94
   2b830:	f002 fefe 	bl	2e630 <__ssprint_r>
   2b834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b836:	899b      	ldrh	r3, [r3, #12]
   2b838:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b83e:	bf18      	it	ne
   2b840:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b844:	9309      	str	r3, [sp, #36]	; 0x24
   2b846:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b848:	b043      	add	sp, #268	; 0x10c
   2b84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b84e:	f01b 0f20 	tst.w	fp, #32
   2b852:	9311      	str	r3, [sp, #68]	; 0x44
   2b854:	f040 81dd 	bne.w	2bc12 <_svfprintf_r+0x582>
   2b858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b85a:	f01b 0f10 	tst.w	fp, #16
   2b85e:	4613      	mov	r3, r2
   2b860:	f040 856e 	bne.w	2c340 <_svfprintf_r+0xcb0>
   2b864:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b868:	f000 856a 	beq.w	2c340 <_svfprintf_r+0xcb0>
   2b86c:	8814      	ldrh	r4, [r2, #0]
   2b86e:	3204      	adds	r2, #4
   2b870:	2500      	movs	r5, #0
   2b872:	2301      	movs	r3, #1
   2b874:	920f      	str	r2, [sp, #60]	; 0x3c
   2b876:	2700      	movs	r7, #0
   2b878:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b87c:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b87e:	1c4a      	adds	r2, r1, #1
   2b880:	f000 8265 	beq.w	2bd4e <_svfprintf_r+0x6be>
   2b884:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b888:	9207      	str	r2, [sp, #28]
   2b88a:	ea54 0205 	orrs.w	r2, r4, r5
   2b88e:	f040 8264 	bne.w	2bd5a <_svfprintf_r+0x6ca>
   2b892:	2900      	cmp	r1, #0
   2b894:	f040 843c 	bne.w	2c110 <_svfprintf_r+0xa80>
   2b898:	2b00      	cmp	r3, #0
   2b89a:	f040 84d7 	bne.w	2c24c <_svfprintf_r+0xbbc>
   2b89e:	f01b 0301 	ands.w	r3, fp, #1
   2b8a2:	930e      	str	r3, [sp, #56]	; 0x38
   2b8a4:	f000 8604 	beq.w	2c4b0 <_svfprintf_r+0xe20>
   2b8a8:	ae42      	add	r6, sp, #264	; 0x108
   2b8aa:	2330      	movs	r3, #48	; 0x30
   2b8ac:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b8b4:	4293      	cmp	r3, r2
   2b8b6:	bfb8      	it	lt
   2b8b8:	4613      	movlt	r3, r2
   2b8ba:	9308      	str	r3, [sp, #32]
   2b8bc:	2300      	movs	r3, #0
   2b8be:	9312      	str	r3, [sp, #72]	; 0x48
   2b8c0:	b117      	cbz	r7, 2b8c8 <_svfprintf_r+0x238>
   2b8c2:	9b08      	ldr	r3, [sp, #32]
   2b8c4:	3301      	adds	r3, #1
   2b8c6:	9308      	str	r3, [sp, #32]
   2b8c8:	9b07      	ldr	r3, [sp, #28]
   2b8ca:	f013 0302 	ands.w	r3, r3, #2
   2b8ce:	9310      	str	r3, [sp, #64]	; 0x40
   2b8d0:	d002      	beq.n	2b8d8 <_svfprintf_r+0x248>
   2b8d2:	9b08      	ldr	r3, [sp, #32]
   2b8d4:	3302      	adds	r3, #2
   2b8d6:	9308      	str	r3, [sp, #32]
   2b8d8:	9b07      	ldr	r3, [sp, #28]
   2b8da:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b8de:	f040 830e 	bne.w	2befe <_svfprintf_r+0x86e>
   2b8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b8e4:	9a08      	ldr	r2, [sp, #32]
   2b8e6:	eba3 0b02 	sub.w	fp, r3, r2
   2b8ea:	f1bb 0f00 	cmp.w	fp, #0
   2b8ee:	f340 8306 	ble.w	2befe <_svfprintf_r+0x86e>
   2b8f2:	f1bb 0f10 	cmp.w	fp, #16
   2b8f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b8f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b8fa:	dd29      	ble.n	2b950 <_svfprintf_r+0x2c0>
   2b8fc:	4643      	mov	r3, r8
   2b8fe:	4621      	mov	r1, r4
   2b900:	46a8      	mov	r8, r5
   2b902:	2710      	movs	r7, #16
   2b904:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b906:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b908:	e006      	b.n	2b918 <_svfprintf_r+0x288>
   2b90a:	f1ab 0b10 	sub.w	fp, fp, #16
   2b90e:	f1bb 0f10 	cmp.w	fp, #16
   2b912:	f103 0308 	add.w	r3, r3, #8
   2b916:	dd18      	ble.n	2b94a <_svfprintf_r+0x2ba>
   2b918:	3201      	adds	r2, #1
   2b91a:	48b7      	ldr	r0, [pc, #732]	; (2bbf8 <_svfprintf_r+0x568>)
   2b91c:	9226      	str	r2, [sp, #152]	; 0x98
   2b91e:	3110      	adds	r1, #16
   2b920:	2a07      	cmp	r2, #7
   2b922:	9127      	str	r1, [sp, #156]	; 0x9c
   2b924:	e883 0081 	stmia.w	r3, {r0, r7}
   2b928:	ddef      	ble.n	2b90a <_svfprintf_r+0x27a>
   2b92a:	aa25      	add	r2, sp, #148	; 0x94
   2b92c:	4629      	mov	r1, r5
   2b92e:	4620      	mov	r0, r4
   2b930:	f002 fe7e 	bl	2e630 <__ssprint_r>
   2b934:	2800      	cmp	r0, #0
   2b936:	f47f af7d 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2b93a:	f1ab 0b10 	sub.w	fp, fp, #16
   2b93e:	f1bb 0f10 	cmp.w	fp, #16
   2b942:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b944:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b946:	464b      	mov	r3, r9
   2b948:	dce6      	bgt.n	2b918 <_svfprintf_r+0x288>
   2b94a:	4645      	mov	r5, r8
   2b94c:	460c      	mov	r4, r1
   2b94e:	4698      	mov	r8, r3
   2b950:	3201      	adds	r2, #1
   2b952:	4ba9      	ldr	r3, [pc, #676]	; (2bbf8 <_svfprintf_r+0x568>)
   2b954:	9226      	str	r2, [sp, #152]	; 0x98
   2b956:	445c      	add	r4, fp
   2b958:	2a07      	cmp	r2, #7
   2b95a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b95c:	e888 0808 	stmia.w	r8, {r3, fp}
   2b960:	f300 8498 	bgt.w	2c294 <_svfprintf_r+0xc04>
   2b964:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b968:	f108 0808 	add.w	r8, r8, #8
   2b96c:	b177      	cbz	r7, 2b98c <_svfprintf_r+0x2fc>
   2b96e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b970:	3301      	adds	r3, #1
   2b972:	3401      	adds	r4, #1
   2b974:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b978:	2201      	movs	r2, #1
   2b97a:	2b07      	cmp	r3, #7
   2b97c:	9427      	str	r4, [sp, #156]	; 0x9c
   2b97e:	9326      	str	r3, [sp, #152]	; 0x98
   2b980:	e888 0006 	stmia.w	r8, {r1, r2}
   2b984:	f300 83db 	bgt.w	2c13e <_svfprintf_r+0xaae>
   2b988:	f108 0808 	add.w	r8, r8, #8
   2b98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b98e:	b16b      	cbz	r3, 2b9ac <_svfprintf_r+0x31c>
   2b990:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b992:	3301      	adds	r3, #1
   2b994:	3402      	adds	r4, #2
   2b996:	a91e      	add	r1, sp, #120	; 0x78
   2b998:	2202      	movs	r2, #2
   2b99a:	2b07      	cmp	r3, #7
   2b99c:	9427      	str	r4, [sp, #156]	; 0x9c
   2b99e:	9326      	str	r3, [sp, #152]	; 0x98
   2b9a0:	e888 0006 	stmia.w	r8, {r1, r2}
   2b9a4:	f300 83d6 	bgt.w	2c154 <_svfprintf_r+0xac4>
   2b9a8:	f108 0808 	add.w	r8, r8, #8
   2b9ac:	2d80      	cmp	r5, #128	; 0x80
   2b9ae:	f000 8315 	beq.w	2bfdc <_svfprintf_r+0x94c>
   2b9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b9b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b9b6:	1a9f      	subs	r7, r3, r2
   2b9b8:	2f00      	cmp	r7, #0
   2b9ba:	dd36      	ble.n	2ba2a <_svfprintf_r+0x39a>
   2b9bc:	2f10      	cmp	r7, #16
   2b9be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9c0:	4d8e      	ldr	r5, [pc, #568]	; (2bbfc <_svfprintf_r+0x56c>)
   2b9c2:	dd27      	ble.n	2ba14 <_svfprintf_r+0x384>
   2b9c4:	4642      	mov	r2, r8
   2b9c6:	4621      	mov	r1, r4
   2b9c8:	46b0      	mov	r8, r6
   2b9ca:	f04f 0b10 	mov.w	fp, #16
   2b9ce:	462e      	mov	r6, r5
   2b9d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b9d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b9d4:	e004      	b.n	2b9e0 <_svfprintf_r+0x350>
   2b9d6:	3f10      	subs	r7, #16
   2b9d8:	2f10      	cmp	r7, #16
   2b9da:	f102 0208 	add.w	r2, r2, #8
   2b9de:	dd15      	ble.n	2ba0c <_svfprintf_r+0x37c>
   2b9e0:	3301      	adds	r3, #1
   2b9e2:	3110      	adds	r1, #16
   2b9e4:	2b07      	cmp	r3, #7
   2b9e6:	9127      	str	r1, [sp, #156]	; 0x9c
   2b9e8:	9326      	str	r3, [sp, #152]	; 0x98
   2b9ea:	e882 0840 	stmia.w	r2, {r6, fp}
   2b9ee:	ddf2      	ble.n	2b9d6 <_svfprintf_r+0x346>
   2b9f0:	aa25      	add	r2, sp, #148	; 0x94
   2b9f2:	4629      	mov	r1, r5
   2b9f4:	4620      	mov	r0, r4
   2b9f6:	f002 fe1b 	bl	2e630 <__ssprint_r>
   2b9fa:	2800      	cmp	r0, #0
   2b9fc:	f47f af1a 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2ba00:	3f10      	subs	r7, #16
   2ba02:	2f10      	cmp	r7, #16
   2ba04:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2ba06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba08:	464a      	mov	r2, r9
   2ba0a:	dce9      	bgt.n	2b9e0 <_svfprintf_r+0x350>
   2ba0c:	4635      	mov	r5, r6
   2ba0e:	460c      	mov	r4, r1
   2ba10:	4646      	mov	r6, r8
   2ba12:	4690      	mov	r8, r2
   2ba14:	3301      	adds	r3, #1
   2ba16:	443c      	add	r4, r7
   2ba18:	2b07      	cmp	r3, #7
   2ba1a:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba1c:	9326      	str	r3, [sp, #152]	; 0x98
   2ba1e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2ba22:	f300 8381 	bgt.w	2c128 <_svfprintf_r+0xa98>
   2ba26:	f108 0808 	add.w	r8, r8, #8
   2ba2a:	9b07      	ldr	r3, [sp, #28]
   2ba2c:	05df      	lsls	r7, r3, #23
   2ba2e:	f100 8268 	bmi.w	2bf02 <_svfprintf_r+0x872>
   2ba32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba34:	990e      	ldr	r1, [sp, #56]	; 0x38
   2ba36:	f8c8 6000 	str.w	r6, [r8]
   2ba3a:	3301      	adds	r3, #1
   2ba3c:	440c      	add	r4, r1
   2ba3e:	2b07      	cmp	r3, #7
   2ba40:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba42:	f8c8 1004 	str.w	r1, [r8, #4]
   2ba46:	9326      	str	r3, [sp, #152]	; 0x98
   2ba48:	f300 834d 	bgt.w	2c0e6 <_svfprintf_r+0xa56>
   2ba4c:	f108 0808 	add.w	r8, r8, #8
   2ba50:	9b07      	ldr	r3, [sp, #28]
   2ba52:	075b      	lsls	r3, r3, #29
   2ba54:	d53a      	bpl.n	2bacc <_svfprintf_r+0x43c>
   2ba56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2ba58:	9a08      	ldr	r2, [sp, #32]
   2ba5a:	1a9d      	subs	r5, r3, r2
   2ba5c:	2d00      	cmp	r5, #0
   2ba5e:	dd35      	ble.n	2bacc <_svfprintf_r+0x43c>
   2ba60:	2d10      	cmp	r5, #16
   2ba62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba64:	dd20      	ble.n	2baa8 <_svfprintf_r+0x418>
   2ba66:	2610      	movs	r6, #16
   2ba68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2ba6a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2ba6e:	e004      	b.n	2ba7a <_svfprintf_r+0x3ea>
   2ba70:	3d10      	subs	r5, #16
   2ba72:	2d10      	cmp	r5, #16
   2ba74:	f108 0808 	add.w	r8, r8, #8
   2ba78:	dd16      	ble.n	2baa8 <_svfprintf_r+0x418>
   2ba7a:	3301      	adds	r3, #1
   2ba7c:	4a5e      	ldr	r2, [pc, #376]	; (2bbf8 <_svfprintf_r+0x568>)
   2ba7e:	9326      	str	r3, [sp, #152]	; 0x98
   2ba80:	3410      	adds	r4, #16
   2ba82:	2b07      	cmp	r3, #7
   2ba84:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba86:	e888 0044 	stmia.w	r8, {r2, r6}
   2ba8a:	ddf1      	ble.n	2ba70 <_svfprintf_r+0x3e0>
   2ba8c:	aa25      	add	r2, sp, #148	; 0x94
   2ba8e:	4659      	mov	r1, fp
   2ba90:	4638      	mov	r0, r7
   2ba92:	f002 fdcd 	bl	2e630 <__ssprint_r>
   2ba96:	2800      	cmp	r0, #0
   2ba98:	f47f aecc 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2ba9c:	3d10      	subs	r5, #16
   2ba9e:	2d10      	cmp	r5, #16
   2baa0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2baa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2baa4:	46c8      	mov	r8, r9
   2baa6:	dce8      	bgt.n	2ba7a <_svfprintf_r+0x3ea>
   2baa8:	3301      	adds	r3, #1
   2baaa:	4a53      	ldr	r2, [pc, #332]	; (2bbf8 <_svfprintf_r+0x568>)
   2baac:	9326      	str	r3, [sp, #152]	; 0x98
   2baae:	442c      	add	r4, r5
   2bab0:	2b07      	cmp	r3, #7
   2bab2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bab4:	e888 0024 	stmia.w	r8, {r2, r5}
   2bab8:	dd08      	ble.n	2bacc <_svfprintf_r+0x43c>
   2baba:	aa25      	add	r2, sp, #148	; 0x94
   2babc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2babe:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bac0:	f002 fdb6 	bl	2e630 <__ssprint_r>
   2bac4:	2800      	cmp	r0, #0
   2bac6:	f47f aeb5 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2baca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2bad0:	9908      	ldr	r1, [sp, #32]
   2bad2:	428a      	cmp	r2, r1
   2bad4:	bfac      	ite	ge
   2bad6:	189b      	addge	r3, r3, r2
   2bad8:	185b      	addlt	r3, r3, r1
   2bada:	9309      	str	r3, [sp, #36]	; 0x24
   2badc:	2c00      	cmp	r4, #0
   2bade:	f040 830d 	bne.w	2c0fc <_svfprintf_r+0xa6c>
   2bae2:	2300      	movs	r3, #0
   2bae4:	9326      	str	r3, [sp, #152]	; 0x98
   2bae6:	46c8      	mov	r8, r9
   2bae8:	e5f9      	b.n	2b6de <_svfprintf_r+0x4e>
   2baea:	9311      	str	r3, [sp, #68]	; 0x44
   2baec:	f01b 0320 	ands.w	r3, fp, #32
   2baf0:	f040 81e3 	bne.w	2beba <_svfprintf_r+0x82a>
   2baf4:	f01b 0210 	ands.w	r2, fp, #16
   2baf8:	f040 842e 	bne.w	2c358 <_svfprintf_r+0xcc8>
   2bafc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2bb00:	f000 842a 	beq.w	2c358 <_svfprintf_r+0xcc8>
   2bb04:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bb06:	4613      	mov	r3, r2
   2bb08:	460a      	mov	r2, r1
   2bb0a:	3204      	adds	r2, #4
   2bb0c:	880c      	ldrh	r4, [r1, #0]
   2bb0e:	920f      	str	r2, [sp, #60]	; 0x3c
   2bb10:	2500      	movs	r5, #0
   2bb12:	e6b0      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bb14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb16:	9311      	str	r3, [sp, #68]	; 0x44
   2bb18:	6816      	ldr	r6, [r2, #0]
   2bb1a:	2400      	movs	r4, #0
   2bb1c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2bb20:	1d15      	adds	r5, r2, #4
   2bb22:	2e00      	cmp	r6, #0
   2bb24:	f000 86a7 	beq.w	2c876 <_svfprintf_r+0x11e6>
   2bb28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2bb2a:	1c53      	adds	r3, r2, #1
   2bb2c:	f000 8609 	beq.w	2c742 <_svfprintf_r+0x10b2>
   2bb30:	4621      	mov	r1, r4
   2bb32:	4630      	mov	r0, r6
   2bb34:	f7d4 fb74 	bl	220 <memchr>
   2bb38:	2800      	cmp	r0, #0
   2bb3a:	f000 86e1 	beq.w	2c900 <_svfprintf_r+0x1270>
   2bb3e:	1b83      	subs	r3, r0, r6
   2bb40:	930e      	str	r3, [sp, #56]	; 0x38
   2bb42:	940a      	str	r4, [sp, #40]	; 0x28
   2bb44:	950f      	str	r5, [sp, #60]	; 0x3c
   2bb46:	f8cd b01c 	str.w	fp, [sp, #28]
   2bb4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bb4e:	9308      	str	r3, [sp, #32]
   2bb50:	9412      	str	r4, [sp, #72]	; 0x48
   2bb52:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bb56:	e6b3      	b.n	2b8c0 <_svfprintf_r+0x230>
   2bb58:	f89a 3000 	ldrb.w	r3, [sl]
   2bb5c:	2201      	movs	r2, #1
   2bb5e:	212b      	movs	r1, #43	; 0x2b
   2bb60:	e5ee      	b.n	2b740 <_svfprintf_r+0xb0>
   2bb62:	f04b 0b20 	orr.w	fp, fp, #32
   2bb66:	f89a 3000 	ldrb.w	r3, [sl]
   2bb6a:	e5e9      	b.n	2b740 <_svfprintf_r+0xb0>
   2bb6c:	9311      	str	r3, [sp, #68]	; 0x44
   2bb6e:	2a00      	cmp	r2, #0
   2bb70:	f040 8795 	bne.w	2ca9e <_svfprintf_r+0x140e>
   2bb74:	4b22      	ldr	r3, [pc, #136]	; (2bc00 <_svfprintf_r+0x570>)
   2bb76:	9318      	str	r3, [sp, #96]	; 0x60
   2bb78:	f01b 0f20 	tst.w	fp, #32
   2bb7c:	f040 8111 	bne.w	2bda2 <_svfprintf_r+0x712>
   2bb80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb82:	f01b 0f10 	tst.w	fp, #16
   2bb86:	4613      	mov	r3, r2
   2bb88:	f040 83e1 	bne.w	2c34e <_svfprintf_r+0xcbe>
   2bb8c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb90:	f000 83dd 	beq.w	2c34e <_svfprintf_r+0xcbe>
   2bb94:	3304      	adds	r3, #4
   2bb96:	8814      	ldrh	r4, [r2, #0]
   2bb98:	930f      	str	r3, [sp, #60]	; 0x3c
   2bb9a:	2500      	movs	r5, #0
   2bb9c:	f01b 0f01 	tst.w	fp, #1
   2bba0:	f000 810c 	beq.w	2bdbc <_svfprintf_r+0x72c>
   2bba4:	ea54 0305 	orrs.w	r3, r4, r5
   2bba8:	f000 8108 	beq.w	2bdbc <_svfprintf_r+0x72c>
   2bbac:	2330      	movs	r3, #48	; 0x30
   2bbae:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2bbb2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2bbb6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2bbba:	f04b 0b02 	orr.w	fp, fp, #2
   2bbbe:	2302      	movs	r3, #2
   2bbc0:	e659      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bbc2:	f89a 3000 	ldrb.w	r3, [sl]
   2bbc6:	2900      	cmp	r1, #0
   2bbc8:	f47f adba 	bne.w	2b740 <_svfprintf_r+0xb0>
   2bbcc:	2201      	movs	r2, #1
   2bbce:	2120      	movs	r1, #32
   2bbd0:	e5b6      	b.n	2b740 <_svfprintf_r+0xb0>
   2bbd2:	f04b 0b01 	orr.w	fp, fp, #1
   2bbd6:	f89a 3000 	ldrb.w	r3, [sl]
   2bbda:	e5b1      	b.n	2b740 <_svfprintf_r+0xb0>
   2bbdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bbde:	6823      	ldr	r3, [r4, #0]
   2bbe0:	930d      	str	r3, [sp, #52]	; 0x34
   2bbe2:	4618      	mov	r0, r3
   2bbe4:	2800      	cmp	r0, #0
   2bbe6:	4623      	mov	r3, r4
   2bbe8:	f103 0304 	add.w	r3, r3, #4
   2bbec:	f6ff ae0a 	blt.w	2b804 <_svfprintf_r+0x174>
   2bbf0:	930f      	str	r3, [sp, #60]	; 0x3c
   2bbf2:	f89a 3000 	ldrb.w	r3, [sl]
   2bbf6:	e5a3      	b.n	2b740 <_svfprintf_r+0xb0>
   2bbf8:	000313b4 	.word	0x000313b4
   2bbfc:	000313c4 	.word	0x000313c4
   2bc00:	00031398 	.word	0x00031398
   2bc04:	f04b 0b10 	orr.w	fp, fp, #16
   2bc08:	f01b 0f20 	tst.w	fp, #32
   2bc0c:	9311      	str	r3, [sp, #68]	; 0x44
   2bc0e:	f43f ae23 	beq.w	2b858 <_svfprintf_r+0x1c8>
   2bc12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bc14:	3507      	adds	r5, #7
   2bc16:	f025 0307 	bic.w	r3, r5, #7
   2bc1a:	f103 0208 	add.w	r2, r3, #8
   2bc1e:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bc22:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc24:	2301      	movs	r3, #1
   2bc26:	e626      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bc28:	f89a 3000 	ldrb.w	r3, [sl]
   2bc2c:	2b2a      	cmp	r3, #42	; 0x2a
   2bc2e:	f10a 0401 	add.w	r4, sl, #1
   2bc32:	f000 8727 	beq.w	2ca84 <_svfprintf_r+0x13f4>
   2bc36:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bc3a:	2809      	cmp	r0, #9
   2bc3c:	46a2      	mov	sl, r4
   2bc3e:	f200 86ad 	bhi.w	2c99c <_svfprintf_r+0x130c>
   2bc42:	2300      	movs	r3, #0
   2bc44:	461c      	mov	r4, r3
   2bc46:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bc4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bc4e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bc52:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bc56:	2809      	cmp	r0, #9
   2bc58:	d9f5      	bls.n	2bc46 <_svfprintf_r+0x5b6>
   2bc5a:	940a      	str	r4, [sp, #40]	; 0x28
   2bc5c:	e572      	b.n	2b744 <_svfprintf_r+0xb4>
   2bc5e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bc62:	f89a 3000 	ldrb.w	r3, [sl]
   2bc66:	e56b      	b.n	2b740 <_svfprintf_r+0xb0>
   2bc68:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bc6c:	f89a 3000 	ldrb.w	r3, [sl]
   2bc70:	e566      	b.n	2b740 <_svfprintf_r+0xb0>
   2bc72:	f89a 3000 	ldrb.w	r3, [sl]
   2bc76:	2b6c      	cmp	r3, #108	; 0x6c
   2bc78:	bf03      	ittte	eq
   2bc7a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2bc7e:	f04b 0b20 	orreq.w	fp, fp, #32
   2bc82:	f10a 0a01 	addeq.w	sl, sl, #1
   2bc86:	f04b 0b10 	orrne.w	fp, fp, #16
   2bc8a:	e559      	b.n	2b740 <_svfprintf_r+0xb0>
   2bc8c:	2a00      	cmp	r2, #0
   2bc8e:	f040 8711 	bne.w	2cab4 <_svfprintf_r+0x1424>
   2bc92:	f01b 0f20 	tst.w	fp, #32
   2bc96:	f040 84f9 	bne.w	2c68c <_svfprintf_r+0xffc>
   2bc9a:	f01b 0f10 	tst.w	fp, #16
   2bc9e:	f040 84ac 	bne.w	2c5fa <_svfprintf_r+0xf6a>
   2bca2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bca6:	f000 84a8 	beq.w	2c5fa <_svfprintf_r+0xf6a>
   2bcaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bcac:	6813      	ldr	r3, [r2, #0]
   2bcae:	3204      	adds	r2, #4
   2bcb0:	920f      	str	r2, [sp, #60]	; 0x3c
   2bcb2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bcb6:	801a      	strh	r2, [r3, #0]
   2bcb8:	e511      	b.n	2b6de <_svfprintf_r+0x4e>
   2bcba:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bcbc:	4bb3      	ldr	r3, [pc, #716]	; (2bf8c <_svfprintf_r+0x8fc>)
   2bcbe:	680c      	ldr	r4, [r1, #0]
   2bcc0:	9318      	str	r3, [sp, #96]	; 0x60
   2bcc2:	2230      	movs	r2, #48	; 0x30
   2bcc4:	2378      	movs	r3, #120	; 0x78
   2bcc6:	3104      	adds	r1, #4
   2bcc8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bccc:	9311      	str	r3, [sp, #68]	; 0x44
   2bcce:	f04b 0b02 	orr.w	fp, fp, #2
   2bcd2:	910f      	str	r1, [sp, #60]	; 0x3c
   2bcd4:	2500      	movs	r5, #0
   2bcd6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bcda:	2302      	movs	r3, #2
   2bcdc:	e5cb      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bcde:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bce0:	9311      	str	r3, [sp, #68]	; 0x44
   2bce2:	680a      	ldr	r2, [r1, #0]
   2bce4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bce8:	2300      	movs	r3, #0
   2bcea:	460a      	mov	r2, r1
   2bcec:	461f      	mov	r7, r3
   2bcee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bcf2:	3204      	adds	r2, #4
   2bcf4:	2301      	movs	r3, #1
   2bcf6:	9308      	str	r3, [sp, #32]
   2bcf8:	f8cd b01c 	str.w	fp, [sp, #28]
   2bcfc:	970a      	str	r7, [sp, #40]	; 0x28
   2bcfe:	9712      	str	r7, [sp, #72]	; 0x48
   2bd00:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd02:	930e      	str	r3, [sp, #56]	; 0x38
   2bd04:	ae28      	add	r6, sp, #160	; 0xa0
   2bd06:	e5df      	b.n	2b8c8 <_svfprintf_r+0x238>
   2bd08:	9311      	str	r3, [sp, #68]	; 0x44
   2bd0a:	2a00      	cmp	r2, #0
   2bd0c:	f040 86ea 	bne.w	2cae4 <_svfprintf_r+0x1454>
   2bd10:	f01b 0f20 	tst.w	fp, #32
   2bd14:	d15d      	bne.n	2bdd2 <_svfprintf_r+0x742>
   2bd16:	f01b 0f10 	tst.w	fp, #16
   2bd1a:	f040 8308 	bne.w	2c32e <_svfprintf_r+0xc9e>
   2bd1e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bd22:	f000 8304 	beq.w	2c32e <_svfprintf_r+0xc9e>
   2bd26:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bd28:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bd2c:	3104      	adds	r1, #4
   2bd2e:	17e5      	asrs	r5, r4, #31
   2bd30:	4622      	mov	r2, r4
   2bd32:	462b      	mov	r3, r5
   2bd34:	910f      	str	r1, [sp, #60]	; 0x3c
   2bd36:	2a00      	cmp	r2, #0
   2bd38:	f173 0300 	sbcs.w	r3, r3, #0
   2bd3c:	db58      	blt.n	2bdf0 <_svfprintf_r+0x760>
   2bd3e:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bd40:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bd44:	1c4a      	adds	r2, r1, #1
   2bd46:	f04f 0301 	mov.w	r3, #1
   2bd4a:	f47f ad9b 	bne.w	2b884 <_svfprintf_r+0x1f4>
   2bd4e:	ea54 0205 	orrs.w	r2, r4, r5
   2bd52:	f000 81df 	beq.w	2c114 <_svfprintf_r+0xa84>
   2bd56:	f8cd b01c 	str.w	fp, [sp, #28]
   2bd5a:	2b01      	cmp	r3, #1
   2bd5c:	f000 827b 	beq.w	2c256 <_svfprintf_r+0xbc6>
   2bd60:	2b02      	cmp	r3, #2
   2bd62:	f040 8206 	bne.w	2c172 <_svfprintf_r+0xae2>
   2bd66:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bd68:	464e      	mov	r6, r9
   2bd6a:	0923      	lsrs	r3, r4, #4
   2bd6c:	f004 010f 	and.w	r1, r4, #15
   2bd70:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bd74:	092a      	lsrs	r2, r5, #4
   2bd76:	461c      	mov	r4, r3
   2bd78:	4615      	mov	r5, r2
   2bd7a:	5c43      	ldrb	r3, [r0, r1]
   2bd7c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bd80:	ea54 0305 	orrs.w	r3, r4, r5
   2bd84:	d1f1      	bne.n	2bd6a <_svfprintf_r+0x6da>
   2bd86:	eba9 0306 	sub.w	r3, r9, r6
   2bd8a:	930e      	str	r3, [sp, #56]	; 0x38
   2bd8c:	e590      	b.n	2b8b0 <_svfprintf_r+0x220>
   2bd8e:	9311      	str	r3, [sp, #68]	; 0x44
   2bd90:	2a00      	cmp	r2, #0
   2bd92:	f040 86a3 	bne.w	2cadc <_svfprintf_r+0x144c>
   2bd96:	4b7e      	ldr	r3, [pc, #504]	; (2bf90 <_svfprintf_r+0x900>)
   2bd98:	9318      	str	r3, [sp, #96]	; 0x60
   2bd9a:	f01b 0f20 	tst.w	fp, #32
   2bd9e:	f43f aeef 	beq.w	2bb80 <_svfprintf_r+0x4f0>
   2bda2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bda4:	3507      	adds	r5, #7
   2bda6:	f025 0307 	bic.w	r3, r5, #7
   2bdaa:	f103 0208 	add.w	r2, r3, #8
   2bdae:	f01b 0f01 	tst.w	fp, #1
   2bdb2:	920f      	str	r2, [sp, #60]	; 0x3c
   2bdb4:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bdb8:	f47f aef4 	bne.w	2bba4 <_svfprintf_r+0x514>
   2bdbc:	2302      	movs	r3, #2
   2bdbe:	e55a      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bdc0:	9311      	str	r3, [sp, #68]	; 0x44
   2bdc2:	2a00      	cmp	r2, #0
   2bdc4:	f040 8686 	bne.w	2cad4 <_svfprintf_r+0x1444>
   2bdc8:	f04b 0b10 	orr.w	fp, fp, #16
   2bdcc:	f01b 0f20 	tst.w	fp, #32
   2bdd0:	d0a1      	beq.n	2bd16 <_svfprintf_r+0x686>
   2bdd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bdd4:	3507      	adds	r5, #7
   2bdd6:	f025 0507 	bic.w	r5, r5, #7
   2bdda:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bdde:	2a00      	cmp	r2, #0
   2bde0:	f105 0108 	add.w	r1, r5, #8
   2bde4:	461d      	mov	r5, r3
   2bde6:	f173 0300 	sbcs.w	r3, r3, #0
   2bdea:	910f      	str	r1, [sp, #60]	; 0x3c
   2bdec:	4614      	mov	r4, r2
   2bdee:	daa6      	bge.n	2bd3e <_svfprintf_r+0x6ae>
   2bdf0:	272d      	movs	r7, #45	; 0x2d
   2bdf2:	4264      	negs	r4, r4
   2bdf4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bdf8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bdfc:	2301      	movs	r3, #1
   2bdfe:	e53d      	b.n	2b87c <_svfprintf_r+0x1ec>
   2be00:	9311      	str	r3, [sp, #68]	; 0x44
   2be02:	2a00      	cmp	r2, #0
   2be04:	f040 8662 	bne.w	2cacc <_svfprintf_r+0x143c>
   2be08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2be0a:	3507      	adds	r5, #7
   2be0c:	f025 0307 	bic.w	r3, r5, #7
   2be10:	f103 0208 	add.w	r2, r3, #8
   2be14:	920f      	str	r2, [sp, #60]	; 0x3c
   2be16:	681a      	ldr	r2, [r3, #0]
   2be18:	9215      	str	r2, [sp, #84]	; 0x54
   2be1a:	685b      	ldr	r3, [r3, #4]
   2be1c:	9314      	str	r3, [sp, #80]	; 0x50
   2be1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2be20:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2be22:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2be26:	4628      	mov	r0, r5
   2be28:	4621      	mov	r1, r4
   2be2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2be2e:	4b59      	ldr	r3, [pc, #356]	; (2bf94 <_svfprintf_r+0x904>)
   2be30:	f7d5 f926 	bl	1080 <__aeabi_dcmpun>
   2be34:	2800      	cmp	r0, #0
   2be36:	f040 834a 	bne.w	2c4ce <_svfprintf_r+0xe3e>
   2be3a:	4628      	mov	r0, r5
   2be3c:	4621      	mov	r1, r4
   2be3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2be42:	4b54      	ldr	r3, [pc, #336]	; (2bf94 <_svfprintf_r+0x904>)
   2be44:	f7d5 f8fe 	bl	1044 <__aeabi_dcmple>
   2be48:	2800      	cmp	r0, #0
   2be4a:	f040 8340 	bne.w	2c4ce <_svfprintf_r+0xe3e>
   2be4e:	a815      	add	r0, sp, #84	; 0x54
   2be50:	c80d      	ldmia	r0, {r0, r2, r3}
   2be52:	9914      	ldr	r1, [sp, #80]	; 0x50
   2be54:	f7d5 f8ec 	bl	1030 <__aeabi_dcmplt>
   2be58:	2800      	cmp	r0, #0
   2be5a:	f040 8530 	bne.w	2c8be <_svfprintf_r+0x122e>
   2be5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2be62:	4e4d      	ldr	r6, [pc, #308]	; (2bf98 <_svfprintf_r+0x908>)
   2be64:	4b4d      	ldr	r3, [pc, #308]	; (2bf9c <_svfprintf_r+0x90c>)
   2be66:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2be6a:	9007      	str	r0, [sp, #28]
   2be6c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2be6e:	2203      	movs	r2, #3
   2be70:	2100      	movs	r1, #0
   2be72:	9208      	str	r2, [sp, #32]
   2be74:	910a      	str	r1, [sp, #40]	; 0x28
   2be76:	2847      	cmp	r0, #71	; 0x47
   2be78:	bfd8      	it	le
   2be7a:	461e      	movle	r6, r3
   2be7c:	920e      	str	r2, [sp, #56]	; 0x38
   2be7e:	9112      	str	r1, [sp, #72]	; 0x48
   2be80:	e51e      	b.n	2b8c0 <_svfprintf_r+0x230>
   2be82:	f04b 0b08 	orr.w	fp, fp, #8
   2be86:	f89a 3000 	ldrb.w	r3, [sl]
   2be8a:	e459      	b.n	2b740 <_svfprintf_r+0xb0>
   2be8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2be90:	2300      	movs	r3, #0
   2be92:	461c      	mov	r4, r3
   2be94:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2be98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2be9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bea0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bea4:	2809      	cmp	r0, #9
   2bea6:	d9f5      	bls.n	2be94 <_svfprintf_r+0x804>
   2bea8:	940d      	str	r4, [sp, #52]	; 0x34
   2beaa:	e44b      	b.n	2b744 <_svfprintf_r+0xb4>
   2beac:	f04b 0b10 	orr.w	fp, fp, #16
   2beb0:	9311      	str	r3, [sp, #68]	; 0x44
   2beb2:	f01b 0320 	ands.w	r3, fp, #32
   2beb6:	f43f ae1d 	beq.w	2baf4 <_svfprintf_r+0x464>
   2beba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bebc:	3507      	adds	r5, #7
   2bebe:	f025 0307 	bic.w	r3, r5, #7
   2bec2:	f103 0208 	add.w	r2, r3, #8
   2bec6:	e9d3 4500 	ldrd	r4, r5, [r3]
   2beca:	920f      	str	r2, [sp, #60]	; 0x3c
   2becc:	2300      	movs	r3, #0
   2bece:	e4d2      	b.n	2b876 <_svfprintf_r+0x1e6>
   2bed0:	9311      	str	r3, [sp, #68]	; 0x44
   2bed2:	2a00      	cmp	r2, #0
   2bed4:	f040 85e7 	bne.w	2caa6 <_svfprintf_r+0x1416>
   2bed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2beda:	2a00      	cmp	r2, #0
   2bedc:	f43f aca3 	beq.w	2b826 <_svfprintf_r+0x196>
   2bee0:	2300      	movs	r3, #0
   2bee2:	2101      	movs	r1, #1
   2bee4:	461f      	mov	r7, r3
   2bee6:	9108      	str	r1, [sp, #32]
   2bee8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2beec:	f8cd b01c 	str.w	fp, [sp, #28]
   2bef0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bef4:	930a      	str	r3, [sp, #40]	; 0x28
   2bef6:	9312      	str	r3, [sp, #72]	; 0x48
   2bef8:	910e      	str	r1, [sp, #56]	; 0x38
   2befa:	ae28      	add	r6, sp, #160	; 0xa0
   2befc:	e4e4      	b.n	2b8c8 <_svfprintf_r+0x238>
   2befe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf00:	e534      	b.n	2b96c <_svfprintf_r+0x2dc>
   2bf02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bf04:	2b65      	cmp	r3, #101	; 0x65
   2bf06:	f340 80a7 	ble.w	2c058 <_svfprintf_r+0x9c8>
   2bf0a:	a815      	add	r0, sp, #84	; 0x54
   2bf0c:	c80d      	ldmia	r0, {r0, r2, r3}
   2bf0e:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bf10:	f7d5 f884 	bl	101c <__aeabi_dcmpeq>
   2bf14:	2800      	cmp	r0, #0
   2bf16:	f000 8150 	beq.w	2c1ba <_svfprintf_r+0xb2a>
   2bf1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf1c:	4a20      	ldr	r2, [pc, #128]	; (2bfa0 <_svfprintf_r+0x910>)
   2bf1e:	f8c8 2000 	str.w	r2, [r8]
   2bf22:	3301      	adds	r3, #1
   2bf24:	3401      	adds	r4, #1
   2bf26:	2201      	movs	r2, #1
   2bf28:	2b07      	cmp	r3, #7
   2bf2a:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf2c:	9326      	str	r3, [sp, #152]	; 0x98
   2bf2e:	f8c8 2004 	str.w	r2, [r8, #4]
   2bf32:	f300 836a 	bgt.w	2c60a <_svfprintf_r+0xf7a>
   2bf36:	f108 0808 	add.w	r8, r8, #8
   2bf3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bf3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2bf3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf40:	4293      	cmp	r3, r2
   2bf42:	db03      	blt.n	2bf4c <_svfprintf_r+0x8bc>
   2bf44:	9b07      	ldr	r3, [sp, #28]
   2bf46:	07dd      	lsls	r5, r3, #31
   2bf48:	f57f ad82 	bpl.w	2ba50 <_svfprintf_r+0x3c0>
   2bf4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf4e:	9919      	ldr	r1, [sp, #100]	; 0x64
   2bf50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bf52:	f8c8 2000 	str.w	r2, [r8]
   2bf56:	3301      	adds	r3, #1
   2bf58:	440c      	add	r4, r1
   2bf5a:	2b07      	cmp	r3, #7
   2bf5c:	f8c8 1004 	str.w	r1, [r8, #4]
   2bf60:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf62:	9326      	str	r3, [sp, #152]	; 0x98
   2bf64:	f300 839e 	bgt.w	2c6a4 <_svfprintf_r+0x1014>
   2bf68:	f108 0808 	add.w	r8, r8, #8
   2bf6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf6e:	1e5e      	subs	r6, r3, #1
   2bf70:	2e00      	cmp	r6, #0
   2bf72:	f77f ad6d 	ble.w	2ba50 <_svfprintf_r+0x3c0>
   2bf76:	2e10      	cmp	r6, #16
   2bf78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf7a:	4d0a      	ldr	r5, [pc, #40]	; (2bfa4 <_svfprintf_r+0x914>)
   2bf7c:	f340 81f5 	ble.w	2c36a <_svfprintf_r+0xcda>
   2bf80:	4622      	mov	r2, r4
   2bf82:	2710      	movs	r7, #16
   2bf84:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2bf88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bf8a:	e013      	b.n	2bfb4 <_svfprintf_r+0x924>
   2bf8c:	00031398 	.word	0x00031398
   2bf90:	00031384 	.word	0x00031384
   2bf94:	7fefffff 	.word	0x7fefffff
   2bf98:	00031378 	.word	0x00031378
   2bf9c:	00031374 	.word	0x00031374
   2bfa0:	00030d14 	.word	0x00030d14
   2bfa4:	000313c4 	.word	0x000313c4
   2bfa8:	f108 0808 	add.w	r8, r8, #8
   2bfac:	3e10      	subs	r6, #16
   2bfae:	2e10      	cmp	r6, #16
   2bfb0:	f340 81da 	ble.w	2c368 <_svfprintf_r+0xcd8>
   2bfb4:	3301      	adds	r3, #1
   2bfb6:	3210      	adds	r2, #16
   2bfb8:	2b07      	cmp	r3, #7
   2bfba:	9227      	str	r2, [sp, #156]	; 0x9c
   2bfbc:	9326      	str	r3, [sp, #152]	; 0x98
   2bfbe:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bfc2:	ddf1      	ble.n	2bfa8 <_svfprintf_r+0x918>
   2bfc4:	aa25      	add	r2, sp, #148	; 0x94
   2bfc6:	4621      	mov	r1, r4
   2bfc8:	4658      	mov	r0, fp
   2bfca:	f002 fb31 	bl	2e630 <__ssprint_r>
   2bfce:	2800      	cmp	r0, #0
   2bfd0:	f47f ac30 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2bfd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bfd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bfd8:	46c8      	mov	r8, r9
   2bfda:	e7e7      	b.n	2bfac <_svfprintf_r+0x91c>
   2bfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bfde:	9a08      	ldr	r2, [sp, #32]
   2bfe0:	1a9f      	subs	r7, r3, r2
   2bfe2:	2f00      	cmp	r7, #0
   2bfe4:	f77f ace5 	ble.w	2b9b2 <_svfprintf_r+0x322>
   2bfe8:	2f10      	cmp	r7, #16
   2bfea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bfec:	4db6      	ldr	r5, [pc, #728]	; (2c2c8 <_svfprintf_r+0xc38>)
   2bfee:	dd27      	ble.n	2c040 <_svfprintf_r+0x9b0>
   2bff0:	4642      	mov	r2, r8
   2bff2:	4621      	mov	r1, r4
   2bff4:	46b0      	mov	r8, r6
   2bff6:	f04f 0b10 	mov.w	fp, #16
   2bffa:	462e      	mov	r6, r5
   2bffc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bffe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c000:	e004      	b.n	2c00c <_svfprintf_r+0x97c>
   2c002:	3f10      	subs	r7, #16
   2c004:	2f10      	cmp	r7, #16
   2c006:	f102 0208 	add.w	r2, r2, #8
   2c00a:	dd15      	ble.n	2c038 <_svfprintf_r+0x9a8>
   2c00c:	3301      	adds	r3, #1
   2c00e:	3110      	adds	r1, #16
   2c010:	2b07      	cmp	r3, #7
   2c012:	9127      	str	r1, [sp, #156]	; 0x9c
   2c014:	9326      	str	r3, [sp, #152]	; 0x98
   2c016:	e882 0840 	stmia.w	r2, {r6, fp}
   2c01a:	ddf2      	ble.n	2c002 <_svfprintf_r+0x972>
   2c01c:	aa25      	add	r2, sp, #148	; 0x94
   2c01e:	4629      	mov	r1, r5
   2c020:	4620      	mov	r0, r4
   2c022:	f002 fb05 	bl	2e630 <__ssprint_r>
   2c026:	2800      	cmp	r0, #0
   2c028:	f47f ac04 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c02c:	3f10      	subs	r7, #16
   2c02e:	2f10      	cmp	r7, #16
   2c030:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c032:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c034:	464a      	mov	r2, r9
   2c036:	dce9      	bgt.n	2c00c <_svfprintf_r+0x97c>
   2c038:	4635      	mov	r5, r6
   2c03a:	460c      	mov	r4, r1
   2c03c:	4646      	mov	r6, r8
   2c03e:	4690      	mov	r8, r2
   2c040:	3301      	adds	r3, #1
   2c042:	443c      	add	r4, r7
   2c044:	2b07      	cmp	r3, #7
   2c046:	9427      	str	r4, [sp, #156]	; 0x9c
   2c048:	9326      	str	r3, [sp, #152]	; 0x98
   2c04a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c04e:	f300 8232 	bgt.w	2c4b6 <_svfprintf_r+0xe26>
   2c052:	f108 0808 	add.w	r8, r8, #8
   2c056:	e4ac      	b.n	2b9b2 <_svfprintf_r+0x322>
   2c058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c05a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c05c:	2b01      	cmp	r3, #1
   2c05e:	f340 81fe 	ble.w	2c45e <_svfprintf_r+0xdce>
   2c062:	3701      	adds	r7, #1
   2c064:	3401      	adds	r4, #1
   2c066:	2301      	movs	r3, #1
   2c068:	2f07      	cmp	r7, #7
   2c06a:	9427      	str	r4, [sp, #156]	; 0x9c
   2c06c:	9726      	str	r7, [sp, #152]	; 0x98
   2c06e:	f8c8 6000 	str.w	r6, [r8]
   2c072:	f8c8 3004 	str.w	r3, [r8, #4]
   2c076:	f300 8203 	bgt.w	2c480 <_svfprintf_r+0xdf0>
   2c07a:	f108 0808 	add.w	r8, r8, #8
   2c07e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c080:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2c082:	f8c8 3000 	str.w	r3, [r8]
   2c086:	3701      	adds	r7, #1
   2c088:	4414      	add	r4, r2
   2c08a:	2f07      	cmp	r7, #7
   2c08c:	9427      	str	r4, [sp, #156]	; 0x9c
   2c08e:	9726      	str	r7, [sp, #152]	; 0x98
   2c090:	f8c8 2004 	str.w	r2, [r8, #4]
   2c094:	f300 8200 	bgt.w	2c498 <_svfprintf_r+0xe08>
   2c098:	f108 0808 	add.w	r8, r8, #8
   2c09c:	a815      	add	r0, sp, #84	; 0x54
   2c09e:	c80d      	ldmia	r0, {r0, r2, r3}
   2c0a0:	9914      	ldr	r1, [sp, #80]	; 0x50
   2c0a2:	f7d4 ffbb 	bl	101c <__aeabi_dcmpeq>
   2c0a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c0a8:	2800      	cmp	r0, #0
   2c0aa:	f040 8101 	bne.w	2c2b0 <_svfprintf_r+0xc20>
   2c0ae:	3b01      	subs	r3, #1
   2c0b0:	3701      	adds	r7, #1
   2c0b2:	3601      	adds	r6, #1
   2c0b4:	441c      	add	r4, r3
   2c0b6:	2f07      	cmp	r7, #7
   2c0b8:	9726      	str	r7, [sp, #152]	; 0x98
   2c0ba:	9427      	str	r4, [sp, #156]	; 0x9c
   2c0bc:	f8c8 6000 	str.w	r6, [r8]
   2c0c0:	f8c8 3004 	str.w	r3, [r8, #4]
   2c0c4:	f300 8127 	bgt.w	2c316 <_svfprintf_r+0xc86>
   2c0c8:	f108 0808 	add.w	r8, r8, #8
   2c0cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2c0ce:	f8c8 2004 	str.w	r2, [r8, #4]
   2c0d2:	3701      	adds	r7, #1
   2c0d4:	4414      	add	r4, r2
   2c0d6:	ab21      	add	r3, sp, #132	; 0x84
   2c0d8:	2f07      	cmp	r7, #7
   2c0da:	9427      	str	r4, [sp, #156]	; 0x9c
   2c0dc:	9726      	str	r7, [sp, #152]	; 0x98
   2c0de:	f8c8 3000 	str.w	r3, [r8]
   2c0e2:	f77f acb3 	ble.w	2ba4c <_svfprintf_r+0x3bc>
   2c0e6:	aa25      	add	r2, sp, #148	; 0x94
   2c0e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0ec:	f002 faa0 	bl	2e630 <__ssprint_r>
   2c0f0:	2800      	cmp	r0, #0
   2c0f2:	f47f ab9f 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c0f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c0f8:	46c8      	mov	r8, r9
   2c0fa:	e4a9      	b.n	2ba50 <_svfprintf_r+0x3c0>
   2c0fc:	aa25      	add	r2, sp, #148	; 0x94
   2c0fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c100:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c102:	f002 fa95 	bl	2e630 <__ssprint_r>
   2c106:	2800      	cmp	r0, #0
   2c108:	f43f aceb 	beq.w	2bae2 <_svfprintf_r+0x452>
   2c10c:	f7ff bb92 	b.w	2b834 <_svfprintf_r+0x1a4>
   2c110:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c114:	2b01      	cmp	r3, #1
   2c116:	f000 8134 	beq.w	2c382 <_svfprintf_r+0xcf2>
   2c11a:	2b02      	cmp	r3, #2
   2c11c:	d125      	bne.n	2c16a <_svfprintf_r+0xada>
   2c11e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c122:	2400      	movs	r4, #0
   2c124:	2500      	movs	r5, #0
   2c126:	e61e      	b.n	2bd66 <_svfprintf_r+0x6d6>
   2c128:	aa25      	add	r2, sp, #148	; 0x94
   2c12a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c12c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c12e:	f002 fa7f 	bl	2e630 <__ssprint_r>
   2c132:	2800      	cmp	r0, #0
   2c134:	f47f ab7e 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c138:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c13a:	46c8      	mov	r8, r9
   2c13c:	e475      	b.n	2ba2a <_svfprintf_r+0x39a>
   2c13e:	aa25      	add	r2, sp, #148	; 0x94
   2c140:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c142:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c144:	f002 fa74 	bl	2e630 <__ssprint_r>
   2c148:	2800      	cmp	r0, #0
   2c14a:	f47f ab73 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c14e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c150:	46c8      	mov	r8, r9
   2c152:	e41b      	b.n	2b98c <_svfprintf_r+0x2fc>
   2c154:	aa25      	add	r2, sp, #148	; 0x94
   2c156:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c158:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c15a:	f002 fa69 	bl	2e630 <__ssprint_r>
   2c15e:	2800      	cmp	r0, #0
   2c160:	f47f ab68 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c164:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c166:	46c8      	mov	r8, r9
   2c168:	e420      	b.n	2b9ac <_svfprintf_r+0x31c>
   2c16a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c16e:	2400      	movs	r4, #0
   2c170:	2500      	movs	r5, #0
   2c172:	4649      	mov	r1, r9
   2c174:	e000      	b.n	2c178 <_svfprintf_r+0xae8>
   2c176:	4631      	mov	r1, r6
   2c178:	08e2      	lsrs	r2, r4, #3
   2c17a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2c17e:	08e8      	lsrs	r0, r5, #3
   2c180:	f004 0307 	and.w	r3, r4, #7
   2c184:	4605      	mov	r5, r0
   2c186:	4614      	mov	r4, r2
   2c188:	3330      	adds	r3, #48	; 0x30
   2c18a:	ea54 0205 	orrs.w	r2, r4, r5
   2c18e:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c192:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c196:	d1ee      	bne.n	2c176 <_svfprintf_r+0xae6>
   2c198:	9a07      	ldr	r2, [sp, #28]
   2c19a:	07d2      	lsls	r2, r2, #31
   2c19c:	f57f adf3 	bpl.w	2bd86 <_svfprintf_r+0x6f6>
   2c1a0:	2b30      	cmp	r3, #48	; 0x30
   2c1a2:	f43f adf0 	beq.w	2bd86 <_svfprintf_r+0x6f6>
   2c1a6:	3902      	subs	r1, #2
   2c1a8:	2330      	movs	r3, #48	; 0x30
   2c1aa:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c1ae:	eba9 0301 	sub.w	r3, r9, r1
   2c1b2:	930e      	str	r3, [sp, #56]	; 0x38
   2c1b4:	460e      	mov	r6, r1
   2c1b6:	f7ff bb7b 	b.w	2b8b0 <_svfprintf_r+0x220>
   2c1ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c1bc:	2900      	cmp	r1, #0
   2c1be:	f340 822e 	ble.w	2c61e <_svfprintf_r+0xf8e>
   2c1c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c1c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c1c6:	4293      	cmp	r3, r2
   2c1c8:	bfa8      	it	ge
   2c1ca:	4613      	movge	r3, r2
   2c1cc:	2b00      	cmp	r3, #0
   2c1ce:	461f      	mov	r7, r3
   2c1d0:	dd0d      	ble.n	2c1ee <_svfprintf_r+0xb5e>
   2c1d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c1d4:	f8c8 6000 	str.w	r6, [r8]
   2c1d8:	3301      	adds	r3, #1
   2c1da:	443c      	add	r4, r7
   2c1dc:	2b07      	cmp	r3, #7
   2c1de:	9427      	str	r4, [sp, #156]	; 0x9c
   2c1e0:	f8c8 7004 	str.w	r7, [r8, #4]
   2c1e4:	9326      	str	r3, [sp, #152]	; 0x98
   2c1e6:	f300 831f 	bgt.w	2c828 <_svfprintf_r+0x1198>
   2c1ea:	f108 0808 	add.w	r8, r8, #8
   2c1ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c1f0:	2f00      	cmp	r7, #0
   2c1f2:	bfa8      	it	ge
   2c1f4:	1bdb      	subge	r3, r3, r7
   2c1f6:	2b00      	cmp	r3, #0
   2c1f8:	461f      	mov	r7, r3
   2c1fa:	f340 80d6 	ble.w	2c3aa <_svfprintf_r+0xd1a>
   2c1fe:	2f10      	cmp	r7, #16
   2c200:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c202:	4d31      	ldr	r5, [pc, #196]	; (2c2c8 <_svfprintf_r+0xc38>)
   2c204:	f340 81ed 	ble.w	2c5e2 <_svfprintf_r+0xf52>
   2c208:	4642      	mov	r2, r8
   2c20a:	4621      	mov	r1, r4
   2c20c:	46b0      	mov	r8, r6
   2c20e:	f04f 0b10 	mov.w	fp, #16
   2c212:	462e      	mov	r6, r5
   2c214:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c216:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c218:	e004      	b.n	2c224 <_svfprintf_r+0xb94>
   2c21a:	3208      	adds	r2, #8
   2c21c:	3f10      	subs	r7, #16
   2c21e:	2f10      	cmp	r7, #16
   2c220:	f340 81db 	ble.w	2c5da <_svfprintf_r+0xf4a>
   2c224:	3301      	adds	r3, #1
   2c226:	3110      	adds	r1, #16
   2c228:	2b07      	cmp	r3, #7
   2c22a:	9127      	str	r1, [sp, #156]	; 0x9c
   2c22c:	9326      	str	r3, [sp, #152]	; 0x98
   2c22e:	e882 0840 	stmia.w	r2, {r6, fp}
   2c232:	ddf2      	ble.n	2c21a <_svfprintf_r+0xb8a>
   2c234:	aa25      	add	r2, sp, #148	; 0x94
   2c236:	4629      	mov	r1, r5
   2c238:	4620      	mov	r0, r4
   2c23a:	f002 f9f9 	bl	2e630 <__ssprint_r>
   2c23e:	2800      	cmp	r0, #0
   2c240:	f47f aaf8 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c244:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c246:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c248:	464a      	mov	r2, r9
   2c24a:	e7e7      	b.n	2c21c <_svfprintf_r+0xb8c>
   2c24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c24e:	930e      	str	r3, [sp, #56]	; 0x38
   2c250:	464e      	mov	r6, r9
   2c252:	f7ff bb2d 	b.w	2b8b0 <_svfprintf_r+0x220>
   2c256:	2d00      	cmp	r5, #0
   2c258:	bf08      	it	eq
   2c25a:	2c0a      	cmpeq	r4, #10
   2c25c:	f0c0 808f 	bcc.w	2c37e <_svfprintf_r+0xcee>
   2c260:	464e      	mov	r6, r9
   2c262:	4620      	mov	r0, r4
   2c264:	4629      	mov	r1, r5
   2c266:	220a      	movs	r2, #10
   2c268:	2300      	movs	r3, #0
   2c26a:	f7d4 ff47 	bl	10fc <__aeabi_uldivmod>
   2c26e:	3230      	adds	r2, #48	; 0x30
   2c270:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c274:	4620      	mov	r0, r4
   2c276:	4629      	mov	r1, r5
   2c278:	2300      	movs	r3, #0
   2c27a:	220a      	movs	r2, #10
   2c27c:	f7d4 ff3e 	bl	10fc <__aeabi_uldivmod>
   2c280:	4604      	mov	r4, r0
   2c282:	460d      	mov	r5, r1
   2c284:	ea54 0305 	orrs.w	r3, r4, r5
   2c288:	d1eb      	bne.n	2c262 <_svfprintf_r+0xbd2>
   2c28a:	eba9 0306 	sub.w	r3, r9, r6
   2c28e:	930e      	str	r3, [sp, #56]	; 0x38
   2c290:	f7ff bb0e 	b.w	2b8b0 <_svfprintf_r+0x220>
   2c294:	aa25      	add	r2, sp, #148	; 0x94
   2c296:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c298:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c29a:	f002 f9c9 	bl	2e630 <__ssprint_r>
   2c29e:	2800      	cmp	r0, #0
   2c2a0:	f47f aac8 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c2a4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c2a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c2aa:	46c8      	mov	r8, r9
   2c2ac:	f7ff bb5e 	b.w	2b96c <_svfprintf_r+0x2dc>
   2c2b0:	1e5e      	subs	r6, r3, #1
   2c2b2:	2e00      	cmp	r6, #0
   2c2b4:	f77f af0a 	ble.w	2c0cc <_svfprintf_r+0xa3c>
   2c2b8:	2e10      	cmp	r6, #16
   2c2ba:	4d03      	ldr	r5, [pc, #12]	; (2c2c8 <_svfprintf_r+0xc38>)
   2c2bc:	dd22      	ble.n	2c304 <_svfprintf_r+0xc74>
   2c2be:	4622      	mov	r2, r4
   2c2c0:	f04f 0b10 	mov.w	fp, #16
   2c2c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c2c6:	e006      	b.n	2c2d6 <_svfprintf_r+0xc46>
   2c2c8:	000313c4 	.word	0x000313c4
   2c2cc:	3e10      	subs	r6, #16
   2c2ce:	2e10      	cmp	r6, #16
   2c2d0:	f108 0808 	add.w	r8, r8, #8
   2c2d4:	dd15      	ble.n	2c302 <_svfprintf_r+0xc72>
   2c2d6:	3701      	adds	r7, #1
   2c2d8:	3210      	adds	r2, #16
   2c2da:	2f07      	cmp	r7, #7
   2c2dc:	9227      	str	r2, [sp, #156]	; 0x9c
   2c2de:	9726      	str	r7, [sp, #152]	; 0x98
   2c2e0:	e888 0820 	stmia.w	r8, {r5, fp}
   2c2e4:	ddf2      	ble.n	2c2cc <_svfprintf_r+0xc3c>
   2c2e6:	aa25      	add	r2, sp, #148	; 0x94
   2c2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c2ea:	4620      	mov	r0, r4
   2c2ec:	f002 f9a0 	bl	2e630 <__ssprint_r>
   2c2f0:	2800      	cmp	r0, #0
   2c2f2:	f47f aa9f 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c2f6:	3e10      	subs	r6, #16
   2c2f8:	2e10      	cmp	r6, #16
   2c2fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c2fc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c2fe:	46c8      	mov	r8, r9
   2c300:	dce9      	bgt.n	2c2d6 <_svfprintf_r+0xc46>
   2c302:	4614      	mov	r4, r2
   2c304:	3701      	adds	r7, #1
   2c306:	4434      	add	r4, r6
   2c308:	2f07      	cmp	r7, #7
   2c30a:	9427      	str	r4, [sp, #156]	; 0x9c
   2c30c:	9726      	str	r7, [sp, #152]	; 0x98
   2c30e:	e888 0060 	stmia.w	r8, {r5, r6}
   2c312:	f77f aed9 	ble.w	2c0c8 <_svfprintf_r+0xa38>
   2c316:	aa25      	add	r2, sp, #148	; 0x94
   2c318:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c31a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c31c:	f002 f988 	bl	2e630 <__ssprint_r>
   2c320:	2800      	cmp	r0, #0
   2c322:	f47f aa87 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c326:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c328:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c32a:	46c8      	mov	r8, r9
   2c32c:	e6ce      	b.n	2c0cc <_svfprintf_r+0xa3c>
   2c32e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c330:	6814      	ldr	r4, [r2, #0]
   2c332:	4613      	mov	r3, r2
   2c334:	3304      	adds	r3, #4
   2c336:	17e5      	asrs	r5, r4, #31
   2c338:	930f      	str	r3, [sp, #60]	; 0x3c
   2c33a:	4622      	mov	r2, r4
   2c33c:	462b      	mov	r3, r5
   2c33e:	e4fa      	b.n	2bd36 <_svfprintf_r+0x6a6>
   2c340:	3204      	adds	r2, #4
   2c342:	681c      	ldr	r4, [r3, #0]
   2c344:	920f      	str	r2, [sp, #60]	; 0x3c
   2c346:	2301      	movs	r3, #1
   2c348:	2500      	movs	r5, #0
   2c34a:	f7ff ba94 	b.w	2b876 <_svfprintf_r+0x1e6>
   2c34e:	681c      	ldr	r4, [r3, #0]
   2c350:	3304      	adds	r3, #4
   2c352:	930f      	str	r3, [sp, #60]	; 0x3c
   2c354:	2500      	movs	r5, #0
   2c356:	e421      	b.n	2bb9c <_svfprintf_r+0x50c>
   2c358:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c35a:	460a      	mov	r2, r1
   2c35c:	3204      	adds	r2, #4
   2c35e:	680c      	ldr	r4, [r1, #0]
   2c360:	920f      	str	r2, [sp, #60]	; 0x3c
   2c362:	2500      	movs	r5, #0
   2c364:	f7ff ba87 	b.w	2b876 <_svfprintf_r+0x1e6>
   2c368:	4614      	mov	r4, r2
   2c36a:	3301      	adds	r3, #1
   2c36c:	4434      	add	r4, r6
   2c36e:	2b07      	cmp	r3, #7
   2c370:	9427      	str	r4, [sp, #156]	; 0x9c
   2c372:	9326      	str	r3, [sp, #152]	; 0x98
   2c374:	e888 0060 	stmia.w	r8, {r5, r6}
   2c378:	f77f ab68 	ble.w	2ba4c <_svfprintf_r+0x3bc>
   2c37c:	e6b3      	b.n	2c0e6 <_svfprintf_r+0xa56>
   2c37e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c382:	f8cd b01c 	str.w	fp, [sp, #28]
   2c386:	ae42      	add	r6, sp, #264	; 0x108
   2c388:	3430      	adds	r4, #48	; 0x30
   2c38a:	2301      	movs	r3, #1
   2c38c:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c390:	930e      	str	r3, [sp, #56]	; 0x38
   2c392:	f7ff ba8d 	b.w	2b8b0 <_svfprintf_r+0x220>
   2c396:	aa25      	add	r2, sp, #148	; 0x94
   2c398:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c39a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c39c:	f002 f948 	bl	2e630 <__ssprint_r>
   2c3a0:	2800      	cmp	r0, #0
   2c3a2:	f47f aa47 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c3a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c3a8:	46c8      	mov	r8, r9
   2c3aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c3ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c3ae:	429a      	cmp	r2, r3
   2c3b0:	db44      	blt.n	2c43c <_svfprintf_r+0xdac>
   2c3b2:	9b07      	ldr	r3, [sp, #28]
   2c3b4:	07d9      	lsls	r1, r3, #31
   2c3b6:	d441      	bmi.n	2c43c <_svfprintf_r+0xdac>
   2c3b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c3ba:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c3bc:	1a9a      	subs	r2, r3, r2
   2c3be:	1a1d      	subs	r5, r3, r0
   2c3c0:	4295      	cmp	r5, r2
   2c3c2:	bfa8      	it	ge
   2c3c4:	4615      	movge	r5, r2
   2c3c6:	2d00      	cmp	r5, #0
   2c3c8:	dd0e      	ble.n	2c3e8 <_svfprintf_r+0xd58>
   2c3ca:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c3cc:	f8c8 5004 	str.w	r5, [r8, #4]
   2c3d0:	3101      	adds	r1, #1
   2c3d2:	4406      	add	r6, r0
   2c3d4:	442c      	add	r4, r5
   2c3d6:	2907      	cmp	r1, #7
   2c3d8:	f8c8 6000 	str.w	r6, [r8]
   2c3dc:	9427      	str	r4, [sp, #156]	; 0x9c
   2c3de:	9126      	str	r1, [sp, #152]	; 0x98
   2c3e0:	f300 823b 	bgt.w	2c85a <_svfprintf_r+0x11ca>
   2c3e4:	f108 0808 	add.w	r8, r8, #8
   2c3e8:	2d00      	cmp	r5, #0
   2c3ea:	bfac      	ite	ge
   2c3ec:	1b56      	subge	r6, r2, r5
   2c3ee:	4616      	movlt	r6, r2
   2c3f0:	2e00      	cmp	r6, #0
   2c3f2:	f77f ab2d 	ble.w	2ba50 <_svfprintf_r+0x3c0>
   2c3f6:	2e10      	cmp	r6, #16
   2c3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c3fa:	4db0      	ldr	r5, [pc, #704]	; (2c6bc <_svfprintf_r+0x102c>)
   2c3fc:	ddb5      	ble.n	2c36a <_svfprintf_r+0xcda>
   2c3fe:	4622      	mov	r2, r4
   2c400:	2710      	movs	r7, #16
   2c402:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c406:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c408:	e004      	b.n	2c414 <_svfprintf_r+0xd84>
   2c40a:	f108 0808 	add.w	r8, r8, #8
   2c40e:	3e10      	subs	r6, #16
   2c410:	2e10      	cmp	r6, #16
   2c412:	dda9      	ble.n	2c368 <_svfprintf_r+0xcd8>
   2c414:	3301      	adds	r3, #1
   2c416:	3210      	adds	r2, #16
   2c418:	2b07      	cmp	r3, #7
   2c41a:	9227      	str	r2, [sp, #156]	; 0x9c
   2c41c:	9326      	str	r3, [sp, #152]	; 0x98
   2c41e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c422:	ddf2      	ble.n	2c40a <_svfprintf_r+0xd7a>
   2c424:	aa25      	add	r2, sp, #148	; 0x94
   2c426:	4621      	mov	r1, r4
   2c428:	4658      	mov	r0, fp
   2c42a:	f002 f901 	bl	2e630 <__ssprint_r>
   2c42e:	2800      	cmp	r0, #0
   2c430:	f47f aa00 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c434:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c436:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c438:	46c8      	mov	r8, r9
   2c43a:	e7e8      	b.n	2c40e <_svfprintf_r+0xd7e>
   2c43c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c43e:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c440:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c442:	f8c8 1000 	str.w	r1, [r8]
   2c446:	3301      	adds	r3, #1
   2c448:	4404      	add	r4, r0
   2c44a:	2b07      	cmp	r3, #7
   2c44c:	9427      	str	r4, [sp, #156]	; 0x9c
   2c44e:	f8c8 0004 	str.w	r0, [r8, #4]
   2c452:	9326      	str	r3, [sp, #152]	; 0x98
   2c454:	f300 81f5 	bgt.w	2c842 <_svfprintf_r+0x11b2>
   2c458:	f108 0808 	add.w	r8, r8, #8
   2c45c:	e7ac      	b.n	2c3b8 <_svfprintf_r+0xd28>
   2c45e:	9b07      	ldr	r3, [sp, #28]
   2c460:	07da      	lsls	r2, r3, #31
   2c462:	f53f adfe 	bmi.w	2c062 <_svfprintf_r+0x9d2>
   2c466:	3701      	adds	r7, #1
   2c468:	3401      	adds	r4, #1
   2c46a:	2301      	movs	r3, #1
   2c46c:	2f07      	cmp	r7, #7
   2c46e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c470:	9726      	str	r7, [sp, #152]	; 0x98
   2c472:	f8c8 6000 	str.w	r6, [r8]
   2c476:	f8c8 3004 	str.w	r3, [r8, #4]
   2c47a:	f77f ae25 	ble.w	2c0c8 <_svfprintf_r+0xa38>
   2c47e:	e74a      	b.n	2c316 <_svfprintf_r+0xc86>
   2c480:	aa25      	add	r2, sp, #148	; 0x94
   2c482:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c484:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c486:	f002 f8d3 	bl	2e630 <__ssprint_r>
   2c48a:	2800      	cmp	r0, #0
   2c48c:	f47f a9d2 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c490:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c492:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c494:	46c8      	mov	r8, r9
   2c496:	e5f2      	b.n	2c07e <_svfprintf_r+0x9ee>
   2c498:	aa25      	add	r2, sp, #148	; 0x94
   2c49a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c49c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c49e:	f002 f8c7 	bl	2e630 <__ssprint_r>
   2c4a2:	2800      	cmp	r0, #0
   2c4a4:	f47f a9c6 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c4a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c4aa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c4ac:	46c8      	mov	r8, r9
   2c4ae:	e5f5      	b.n	2c09c <_svfprintf_r+0xa0c>
   2c4b0:	464e      	mov	r6, r9
   2c4b2:	f7ff b9fd 	b.w	2b8b0 <_svfprintf_r+0x220>
   2c4b6:	aa25      	add	r2, sp, #148	; 0x94
   2c4b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c4ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c4bc:	f002 f8b8 	bl	2e630 <__ssprint_r>
   2c4c0:	2800      	cmp	r0, #0
   2c4c2:	f47f a9b7 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c4c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c4c8:	46c8      	mov	r8, r9
   2c4ca:	f7ff ba72 	b.w	2b9b2 <_svfprintf_r+0x322>
   2c4ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c4d0:	4622      	mov	r2, r4
   2c4d2:	4620      	mov	r0, r4
   2c4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c4d6:	4623      	mov	r3, r4
   2c4d8:	4621      	mov	r1, r4
   2c4da:	f7d4 fdd1 	bl	1080 <__aeabi_dcmpun>
   2c4de:	2800      	cmp	r0, #0
   2c4e0:	f040 8286 	bne.w	2c9f0 <_svfprintf_r+0x1360>
   2c4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c4e6:	3301      	adds	r3, #1
   2c4e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4ea:	f023 0320 	bic.w	r3, r3, #32
   2c4ee:	930e      	str	r3, [sp, #56]	; 0x38
   2c4f0:	f000 81e2 	beq.w	2c8b8 <_svfprintf_r+0x1228>
   2c4f4:	2b47      	cmp	r3, #71	; 0x47
   2c4f6:	f000 811e 	beq.w	2c736 <_svfprintf_r+0x10a6>
   2c4fa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c4fe:	9307      	str	r3, [sp, #28]
   2c500:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c502:	1e1f      	subs	r7, r3, #0
   2c504:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c506:	9308      	str	r3, [sp, #32]
   2c508:	bfbb      	ittet	lt
   2c50a:	463b      	movlt	r3, r7
   2c50c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c510:	2300      	movge	r3, #0
   2c512:	232d      	movlt	r3, #45	; 0x2d
   2c514:	9310      	str	r3, [sp, #64]	; 0x40
   2c516:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c518:	2b66      	cmp	r3, #102	; 0x66
   2c51a:	f000 81bb 	beq.w	2c894 <_svfprintf_r+0x1204>
   2c51e:	2b46      	cmp	r3, #70	; 0x46
   2c520:	f000 80df 	beq.w	2c6e2 <_svfprintf_r+0x1052>
   2c524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c526:	9a08      	ldr	r2, [sp, #32]
   2c528:	2b45      	cmp	r3, #69	; 0x45
   2c52a:	bf0c      	ite	eq
   2c52c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c52e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c530:	a823      	add	r0, sp, #140	; 0x8c
   2c532:	a920      	add	r1, sp, #128	; 0x80
   2c534:	bf08      	it	eq
   2c536:	1c5d      	addeq	r5, r3, #1
   2c538:	9004      	str	r0, [sp, #16]
   2c53a:	9103      	str	r1, [sp, #12]
   2c53c:	a81f      	add	r0, sp, #124	; 0x7c
   2c53e:	2102      	movs	r1, #2
   2c540:	463b      	mov	r3, r7
   2c542:	9002      	str	r0, [sp, #8]
   2c544:	9501      	str	r5, [sp, #4]
   2c546:	9100      	str	r1, [sp, #0]
   2c548:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c54a:	f000 fb71 	bl	2cc30 <_dtoa_r>
   2c54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c550:	2b67      	cmp	r3, #103	; 0x67
   2c552:	4606      	mov	r6, r0
   2c554:	f040 81e0 	bne.w	2c918 <_svfprintf_r+0x1288>
   2c558:	f01b 0f01 	tst.w	fp, #1
   2c55c:	f000 8246 	beq.w	2c9ec <_svfprintf_r+0x135c>
   2c560:	1974      	adds	r4, r6, r5
   2c562:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c564:	9808      	ldr	r0, [sp, #32]
   2c566:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c568:	4639      	mov	r1, r7
   2c56a:	f7d4 fd57 	bl	101c <__aeabi_dcmpeq>
   2c56e:	2800      	cmp	r0, #0
   2c570:	f040 8165 	bne.w	2c83e <_svfprintf_r+0x11ae>
   2c574:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c576:	42a3      	cmp	r3, r4
   2c578:	d206      	bcs.n	2c588 <_svfprintf_r+0xef8>
   2c57a:	2130      	movs	r1, #48	; 0x30
   2c57c:	1c5a      	adds	r2, r3, #1
   2c57e:	9223      	str	r2, [sp, #140]	; 0x8c
   2c580:	7019      	strb	r1, [r3, #0]
   2c582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c584:	429c      	cmp	r4, r3
   2c586:	d8f9      	bhi.n	2c57c <_svfprintf_r+0xeec>
   2c588:	1b9b      	subs	r3, r3, r6
   2c58a:	9313      	str	r3, [sp, #76]	; 0x4c
   2c58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c58e:	2b47      	cmp	r3, #71	; 0x47
   2c590:	f000 80e9 	beq.w	2c766 <_svfprintf_r+0x10d6>
   2c594:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c596:	2b65      	cmp	r3, #101	; 0x65
   2c598:	f340 81cd 	ble.w	2c936 <_svfprintf_r+0x12a6>
   2c59c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c59e:	2b66      	cmp	r3, #102	; 0x66
   2c5a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c5a2:	9312      	str	r3, [sp, #72]	; 0x48
   2c5a4:	f000 819e 	beq.w	2c8e4 <_svfprintf_r+0x1254>
   2c5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c5aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c5ac:	4619      	mov	r1, r3
   2c5ae:	4291      	cmp	r1, r2
   2c5b0:	f300 818a 	bgt.w	2c8c8 <_svfprintf_r+0x1238>
   2c5b4:	f01b 0f01 	tst.w	fp, #1
   2c5b8:	f040 8213 	bne.w	2c9e2 <_svfprintf_r+0x1352>
   2c5bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c5c0:	9308      	str	r3, [sp, #32]
   2c5c2:	2367      	movs	r3, #103	; 0x67
   2c5c4:	920e      	str	r2, [sp, #56]	; 0x38
   2c5c6:	9311      	str	r3, [sp, #68]	; 0x44
   2c5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c5ca:	2b00      	cmp	r3, #0
   2c5cc:	f040 80c4 	bne.w	2c758 <_svfprintf_r+0x10c8>
   2c5d0:	930a      	str	r3, [sp, #40]	; 0x28
   2c5d2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c5d6:	f7ff b973 	b.w	2b8c0 <_svfprintf_r+0x230>
   2c5da:	4635      	mov	r5, r6
   2c5dc:	460c      	mov	r4, r1
   2c5de:	4646      	mov	r6, r8
   2c5e0:	4690      	mov	r8, r2
   2c5e2:	3301      	adds	r3, #1
   2c5e4:	443c      	add	r4, r7
   2c5e6:	2b07      	cmp	r3, #7
   2c5e8:	9427      	str	r4, [sp, #156]	; 0x9c
   2c5ea:	9326      	str	r3, [sp, #152]	; 0x98
   2c5ec:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c5f0:	f73f aed1 	bgt.w	2c396 <_svfprintf_r+0xd06>
   2c5f4:	f108 0808 	add.w	r8, r8, #8
   2c5f8:	e6d7      	b.n	2c3aa <_svfprintf_r+0xd1a>
   2c5fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c5fc:	6813      	ldr	r3, [r2, #0]
   2c5fe:	3204      	adds	r2, #4
   2c600:	920f      	str	r2, [sp, #60]	; 0x3c
   2c602:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c604:	601a      	str	r2, [r3, #0]
   2c606:	f7ff b86a 	b.w	2b6de <_svfprintf_r+0x4e>
   2c60a:	aa25      	add	r2, sp, #148	; 0x94
   2c60c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c60e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c610:	f002 f80e 	bl	2e630 <__ssprint_r>
   2c614:	2800      	cmp	r0, #0
   2c616:	f47f a90d 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c61a:	46c8      	mov	r8, r9
   2c61c:	e48d      	b.n	2bf3a <_svfprintf_r+0x8aa>
   2c61e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c620:	4a27      	ldr	r2, [pc, #156]	; (2c6c0 <_svfprintf_r+0x1030>)
   2c622:	f8c8 2000 	str.w	r2, [r8]
   2c626:	3301      	adds	r3, #1
   2c628:	3401      	adds	r4, #1
   2c62a:	2201      	movs	r2, #1
   2c62c:	2b07      	cmp	r3, #7
   2c62e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c630:	9326      	str	r3, [sp, #152]	; 0x98
   2c632:	f8c8 2004 	str.w	r2, [r8, #4]
   2c636:	dc72      	bgt.n	2c71e <_svfprintf_r+0x108e>
   2c638:	f108 0808 	add.w	r8, r8, #8
   2c63c:	b929      	cbnz	r1, 2c64a <_svfprintf_r+0xfba>
   2c63e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c640:	b91b      	cbnz	r3, 2c64a <_svfprintf_r+0xfba>
   2c642:	9b07      	ldr	r3, [sp, #28]
   2c644:	07d8      	lsls	r0, r3, #31
   2c646:	f57f aa03 	bpl.w	2ba50 <_svfprintf_r+0x3c0>
   2c64a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c64c:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c64e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c650:	f8c8 2000 	str.w	r2, [r8]
   2c654:	3301      	adds	r3, #1
   2c656:	4602      	mov	r2, r0
   2c658:	4422      	add	r2, r4
   2c65a:	2b07      	cmp	r3, #7
   2c65c:	9227      	str	r2, [sp, #156]	; 0x9c
   2c65e:	f8c8 0004 	str.w	r0, [r8, #4]
   2c662:	9326      	str	r3, [sp, #152]	; 0x98
   2c664:	f300 818d 	bgt.w	2c982 <_svfprintf_r+0x12f2>
   2c668:	f108 0808 	add.w	r8, r8, #8
   2c66c:	2900      	cmp	r1, #0
   2c66e:	f2c0 8165 	blt.w	2c93c <_svfprintf_r+0x12ac>
   2c672:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c674:	f8c8 6000 	str.w	r6, [r8]
   2c678:	3301      	adds	r3, #1
   2c67a:	188c      	adds	r4, r1, r2
   2c67c:	2b07      	cmp	r3, #7
   2c67e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c680:	9326      	str	r3, [sp, #152]	; 0x98
   2c682:	f8c8 1004 	str.w	r1, [r8, #4]
   2c686:	f77f a9e1 	ble.w	2ba4c <_svfprintf_r+0x3bc>
   2c68a:	e52c      	b.n	2c0e6 <_svfprintf_r+0xa56>
   2c68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c68e:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c690:	6813      	ldr	r3, [r2, #0]
   2c692:	17cd      	asrs	r5, r1, #31
   2c694:	4608      	mov	r0, r1
   2c696:	3204      	adds	r2, #4
   2c698:	4629      	mov	r1, r5
   2c69a:	920f      	str	r2, [sp, #60]	; 0x3c
   2c69c:	e9c3 0100 	strd	r0, r1, [r3]
   2c6a0:	f7ff b81d 	b.w	2b6de <_svfprintf_r+0x4e>
   2c6a4:	aa25      	add	r2, sp, #148	; 0x94
   2c6a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6aa:	f001 ffc1 	bl	2e630 <__ssprint_r>
   2c6ae:	2800      	cmp	r0, #0
   2c6b0:	f47f a8c0 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c6b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6b6:	46c8      	mov	r8, r9
   2c6b8:	e458      	b.n	2bf6c <_svfprintf_r+0x8dc>
   2c6ba:	bf00      	nop
   2c6bc:	000313c4 	.word	0x000313c4
   2c6c0:	00030d14 	.word	0x00030d14
   2c6c4:	2140      	movs	r1, #64	; 0x40
   2c6c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6c8:	f001 f9ea 	bl	2daa0 <_malloc_r>
   2c6cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c6ce:	6010      	str	r0, [r2, #0]
   2c6d0:	6110      	str	r0, [r2, #16]
   2c6d2:	2800      	cmp	r0, #0
   2c6d4:	f000 81f2 	beq.w	2cabc <_svfprintf_r+0x142c>
   2c6d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c6da:	2340      	movs	r3, #64	; 0x40
   2c6dc:	6153      	str	r3, [r2, #20]
   2c6de:	f7fe bfee 	b.w	2b6be <_svfprintf_r+0x2e>
   2c6e2:	a823      	add	r0, sp, #140	; 0x8c
   2c6e4:	a920      	add	r1, sp, #128	; 0x80
   2c6e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c6e8:	9004      	str	r0, [sp, #16]
   2c6ea:	9103      	str	r1, [sp, #12]
   2c6ec:	a81f      	add	r0, sp, #124	; 0x7c
   2c6ee:	2103      	movs	r1, #3
   2c6f0:	9002      	str	r0, [sp, #8]
   2c6f2:	9a08      	ldr	r2, [sp, #32]
   2c6f4:	9401      	str	r4, [sp, #4]
   2c6f6:	463b      	mov	r3, r7
   2c6f8:	9100      	str	r1, [sp, #0]
   2c6fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6fc:	f000 fa98 	bl	2cc30 <_dtoa_r>
   2c700:	4625      	mov	r5, r4
   2c702:	4606      	mov	r6, r0
   2c704:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c706:	2b46      	cmp	r3, #70	; 0x46
   2c708:	eb06 0405 	add.w	r4, r6, r5
   2c70c:	f47f af29 	bne.w	2c562 <_svfprintf_r+0xed2>
   2c710:	7833      	ldrb	r3, [r6, #0]
   2c712:	2b30      	cmp	r3, #48	; 0x30
   2c714:	f000 8178 	beq.w	2ca08 <_svfprintf_r+0x1378>
   2c718:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c71a:	442c      	add	r4, r5
   2c71c:	e721      	b.n	2c562 <_svfprintf_r+0xed2>
   2c71e:	aa25      	add	r2, sp, #148	; 0x94
   2c720:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c722:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c724:	f001 ff84 	bl	2e630 <__ssprint_r>
   2c728:	2800      	cmp	r0, #0
   2c72a:	f47f a883 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c72e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c730:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c732:	46c8      	mov	r8, r9
   2c734:	e782      	b.n	2c63c <_svfprintf_r+0xfac>
   2c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c738:	2b00      	cmp	r3, #0
   2c73a:	bf08      	it	eq
   2c73c:	2301      	moveq	r3, #1
   2c73e:	930a      	str	r3, [sp, #40]	; 0x28
   2c740:	e6db      	b.n	2c4fa <_svfprintf_r+0xe6a>
   2c742:	4630      	mov	r0, r6
   2c744:	940a      	str	r4, [sp, #40]	; 0x28
   2c746:	f7d3 ffdb 	bl	700 <strlen>
   2c74a:	950f      	str	r5, [sp, #60]	; 0x3c
   2c74c:	900e      	str	r0, [sp, #56]	; 0x38
   2c74e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c752:	4603      	mov	r3, r0
   2c754:	f7ff b9f9 	b.w	2bb4a <_svfprintf_r+0x4ba>
   2c758:	272d      	movs	r7, #45	; 0x2d
   2c75a:	2300      	movs	r3, #0
   2c75c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c760:	930a      	str	r3, [sp, #40]	; 0x28
   2c762:	f7ff b8ae 	b.w	2b8c2 <_svfprintf_r+0x232>
   2c766:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c768:	9312      	str	r3, [sp, #72]	; 0x48
   2c76a:	461a      	mov	r2, r3
   2c76c:	3303      	adds	r3, #3
   2c76e:	db04      	blt.n	2c77a <_svfprintf_r+0x10ea>
   2c770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c772:	4619      	mov	r1, r3
   2c774:	4291      	cmp	r1, r2
   2c776:	f6bf af17 	bge.w	2c5a8 <_svfprintf_r+0xf18>
   2c77a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c77c:	3b02      	subs	r3, #2
   2c77e:	9311      	str	r3, [sp, #68]	; 0x44
   2c780:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c784:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c788:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c78a:	3b01      	subs	r3, #1
   2c78c:	2b00      	cmp	r3, #0
   2c78e:	931f      	str	r3, [sp, #124]	; 0x7c
   2c790:	bfbd      	ittte	lt
   2c792:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c794:	f1c3 0301 	rsblt	r3, r3, #1
   2c798:	222d      	movlt	r2, #45	; 0x2d
   2c79a:	222b      	movge	r2, #43	; 0x2b
   2c79c:	2b09      	cmp	r3, #9
   2c79e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c7a2:	f340 8116 	ble.w	2c9d2 <_svfprintf_r+0x1342>
   2c7a6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c7aa:	4620      	mov	r0, r4
   2c7ac:	4dab      	ldr	r5, [pc, #684]	; (2ca5c <_svfprintf_r+0x13cc>)
   2c7ae:	e000      	b.n	2c7b2 <_svfprintf_r+0x1122>
   2c7b0:	4610      	mov	r0, r2
   2c7b2:	fb85 1203 	smull	r1, r2, r5, r3
   2c7b6:	17d9      	asrs	r1, r3, #31
   2c7b8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c7bc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c7c0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c7c4:	3230      	adds	r2, #48	; 0x30
   2c7c6:	2909      	cmp	r1, #9
   2c7c8:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c7cc:	460b      	mov	r3, r1
   2c7ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c7d2:	dced      	bgt.n	2c7b0 <_svfprintf_r+0x1120>
   2c7d4:	3330      	adds	r3, #48	; 0x30
   2c7d6:	3802      	subs	r0, #2
   2c7d8:	b2d9      	uxtb	r1, r3
   2c7da:	4284      	cmp	r4, r0
   2c7dc:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c7e0:	f240 8165 	bls.w	2caae <_svfprintf_r+0x141e>
   2c7e4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c7e8:	4613      	mov	r3, r2
   2c7ea:	e001      	b.n	2c7f0 <_svfprintf_r+0x1160>
   2c7ec:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c7f0:	f800 1b01 	strb.w	r1, [r0], #1
   2c7f4:	42a3      	cmp	r3, r4
   2c7f6:	d1f9      	bne.n	2c7ec <_svfprintf_r+0x115c>
   2c7f8:	3301      	adds	r3, #1
   2c7fa:	1a9b      	subs	r3, r3, r2
   2c7fc:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c800:	4413      	add	r3, r2
   2c802:	aa21      	add	r2, sp, #132	; 0x84
   2c804:	1a9b      	subs	r3, r3, r2
   2c806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c808:	931b      	str	r3, [sp, #108]	; 0x6c
   2c80a:	2a01      	cmp	r2, #1
   2c80c:	4413      	add	r3, r2
   2c80e:	930e      	str	r3, [sp, #56]	; 0x38
   2c810:	f340 8119 	ble.w	2ca46 <_svfprintf_r+0x13b6>
   2c814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c816:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c818:	4413      	add	r3, r2
   2c81a:	930e      	str	r3, [sp, #56]	; 0x38
   2c81c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c820:	9308      	str	r3, [sp, #32]
   2c822:	2300      	movs	r3, #0
   2c824:	9312      	str	r3, [sp, #72]	; 0x48
   2c826:	e6cf      	b.n	2c5c8 <_svfprintf_r+0xf38>
   2c828:	aa25      	add	r2, sp, #148	; 0x94
   2c82a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c82c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c82e:	f001 feff 	bl	2e630 <__ssprint_r>
   2c832:	2800      	cmp	r0, #0
   2c834:	f47e affe 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c838:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c83a:	46c8      	mov	r8, r9
   2c83c:	e4d7      	b.n	2c1ee <_svfprintf_r+0xb5e>
   2c83e:	4623      	mov	r3, r4
   2c840:	e6a2      	b.n	2c588 <_svfprintf_r+0xef8>
   2c842:	aa25      	add	r2, sp, #148	; 0x94
   2c844:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c846:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c848:	f001 fef2 	bl	2e630 <__ssprint_r>
   2c84c:	2800      	cmp	r0, #0
   2c84e:	f47e aff1 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c852:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c854:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c856:	46c8      	mov	r8, r9
   2c858:	e5ae      	b.n	2c3b8 <_svfprintf_r+0xd28>
   2c85a:	aa25      	add	r2, sp, #148	; 0x94
   2c85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c85e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c860:	f001 fee6 	bl	2e630 <__ssprint_r>
   2c864:	2800      	cmp	r0, #0
   2c866:	f47e afe5 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c86a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c86c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c86e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c870:	1a9a      	subs	r2, r3, r2
   2c872:	46c8      	mov	r8, r9
   2c874:	e5b8      	b.n	2c3e8 <_svfprintf_r+0xd58>
   2c876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c878:	9612      	str	r6, [sp, #72]	; 0x48
   2c87a:	2b06      	cmp	r3, #6
   2c87c:	bf28      	it	cs
   2c87e:	2306      	movcs	r3, #6
   2c880:	960a      	str	r6, [sp, #40]	; 0x28
   2c882:	4637      	mov	r7, r6
   2c884:	9308      	str	r3, [sp, #32]
   2c886:	950f      	str	r5, [sp, #60]	; 0x3c
   2c888:	f8cd b01c 	str.w	fp, [sp, #28]
   2c88c:	930e      	str	r3, [sp, #56]	; 0x38
   2c88e:	4e74      	ldr	r6, [pc, #464]	; (2ca60 <_svfprintf_r+0x13d0>)
   2c890:	f7ff b816 	b.w	2b8c0 <_svfprintf_r+0x230>
   2c894:	a823      	add	r0, sp, #140	; 0x8c
   2c896:	a920      	add	r1, sp, #128	; 0x80
   2c898:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c89a:	9004      	str	r0, [sp, #16]
   2c89c:	9103      	str	r1, [sp, #12]
   2c89e:	a81f      	add	r0, sp, #124	; 0x7c
   2c8a0:	2103      	movs	r1, #3
   2c8a2:	9002      	str	r0, [sp, #8]
   2c8a4:	9a08      	ldr	r2, [sp, #32]
   2c8a6:	9501      	str	r5, [sp, #4]
   2c8a8:	463b      	mov	r3, r7
   2c8aa:	9100      	str	r1, [sp, #0]
   2c8ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c8ae:	f000 f9bf 	bl	2cc30 <_dtoa_r>
   2c8b2:	4606      	mov	r6, r0
   2c8b4:	1944      	adds	r4, r0, r5
   2c8b6:	e72b      	b.n	2c710 <_svfprintf_r+0x1080>
   2c8b8:	2306      	movs	r3, #6
   2c8ba:	930a      	str	r3, [sp, #40]	; 0x28
   2c8bc:	e61d      	b.n	2c4fa <_svfprintf_r+0xe6a>
   2c8be:	272d      	movs	r7, #45	; 0x2d
   2c8c0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c8c4:	f7ff bacd 	b.w	2be62 <_svfprintf_r+0x7d2>
   2c8c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c8ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c8cc:	4413      	add	r3, r2
   2c8ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c8d0:	930e      	str	r3, [sp, #56]	; 0x38
   2c8d2:	2a00      	cmp	r2, #0
   2c8d4:	f340 80b0 	ble.w	2ca38 <_svfprintf_r+0x13a8>
   2c8d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c8dc:	9308      	str	r3, [sp, #32]
   2c8de:	2367      	movs	r3, #103	; 0x67
   2c8e0:	9311      	str	r3, [sp, #68]	; 0x44
   2c8e2:	e671      	b.n	2c5c8 <_svfprintf_r+0xf38>
   2c8e4:	2b00      	cmp	r3, #0
   2c8e6:	f340 80c3 	ble.w	2ca70 <_svfprintf_r+0x13e0>
   2c8ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c8ec:	2a00      	cmp	r2, #0
   2c8ee:	f040 8099 	bne.w	2ca24 <_svfprintf_r+0x1394>
   2c8f2:	f01b 0f01 	tst.w	fp, #1
   2c8f6:	f040 8095 	bne.w	2ca24 <_svfprintf_r+0x1394>
   2c8fa:	9308      	str	r3, [sp, #32]
   2c8fc:	930e      	str	r3, [sp, #56]	; 0x38
   2c8fe:	e663      	b.n	2c5c8 <_svfprintf_r+0xf38>
   2c900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c902:	9308      	str	r3, [sp, #32]
   2c904:	930e      	str	r3, [sp, #56]	; 0x38
   2c906:	900a      	str	r0, [sp, #40]	; 0x28
   2c908:	950f      	str	r5, [sp, #60]	; 0x3c
   2c90a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c90e:	9012      	str	r0, [sp, #72]	; 0x48
   2c910:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c914:	f7fe bfd4 	b.w	2b8c0 <_svfprintf_r+0x230>
   2c918:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c91a:	2b47      	cmp	r3, #71	; 0x47
   2c91c:	f47f ae20 	bne.w	2c560 <_svfprintf_r+0xed0>
   2c920:	f01b 0f01 	tst.w	fp, #1
   2c924:	f47f aeee 	bne.w	2c704 <_svfprintf_r+0x1074>
   2c928:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c92a:	1b9b      	subs	r3, r3, r6
   2c92c:	9313      	str	r3, [sp, #76]	; 0x4c
   2c92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c930:	2b47      	cmp	r3, #71	; 0x47
   2c932:	f43f af18 	beq.w	2c766 <_svfprintf_r+0x10d6>
   2c936:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c938:	9312      	str	r3, [sp, #72]	; 0x48
   2c93a:	e721      	b.n	2c780 <_svfprintf_r+0x10f0>
   2c93c:	424f      	negs	r7, r1
   2c93e:	3110      	adds	r1, #16
   2c940:	4d48      	ldr	r5, [pc, #288]	; (2ca64 <_svfprintf_r+0x13d4>)
   2c942:	da2f      	bge.n	2c9a4 <_svfprintf_r+0x1314>
   2c944:	2410      	movs	r4, #16
   2c946:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c94a:	e004      	b.n	2c956 <_svfprintf_r+0x12c6>
   2c94c:	f108 0808 	add.w	r8, r8, #8
   2c950:	3f10      	subs	r7, #16
   2c952:	2f10      	cmp	r7, #16
   2c954:	dd26      	ble.n	2c9a4 <_svfprintf_r+0x1314>
   2c956:	3301      	adds	r3, #1
   2c958:	3210      	adds	r2, #16
   2c95a:	2b07      	cmp	r3, #7
   2c95c:	9227      	str	r2, [sp, #156]	; 0x9c
   2c95e:	9326      	str	r3, [sp, #152]	; 0x98
   2c960:	f8c8 5000 	str.w	r5, [r8]
   2c964:	f8c8 4004 	str.w	r4, [r8, #4]
   2c968:	ddf0      	ble.n	2c94c <_svfprintf_r+0x12bc>
   2c96a:	aa25      	add	r2, sp, #148	; 0x94
   2c96c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c96e:	4658      	mov	r0, fp
   2c970:	f001 fe5e 	bl	2e630 <__ssprint_r>
   2c974:	2800      	cmp	r0, #0
   2c976:	f47e af5d 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c97a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c97c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c97e:	46c8      	mov	r8, r9
   2c980:	e7e6      	b.n	2c950 <_svfprintf_r+0x12c0>
   2c982:	aa25      	add	r2, sp, #148	; 0x94
   2c984:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c986:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c988:	f001 fe52 	bl	2e630 <__ssprint_r>
   2c98c:	2800      	cmp	r0, #0
   2c98e:	f47e af51 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c992:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c994:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c996:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c998:	46c8      	mov	r8, r9
   2c99a:	e667      	b.n	2c66c <_svfprintf_r+0xfdc>
   2c99c:	2000      	movs	r0, #0
   2c99e:	900a      	str	r0, [sp, #40]	; 0x28
   2c9a0:	f7fe bed0 	b.w	2b744 <_svfprintf_r+0xb4>
   2c9a4:	3301      	adds	r3, #1
   2c9a6:	443a      	add	r2, r7
   2c9a8:	2b07      	cmp	r3, #7
   2c9aa:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c9ae:	9227      	str	r2, [sp, #156]	; 0x9c
   2c9b0:	9326      	str	r3, [sp, #152]	; 0x98
   2c9b2:	f108 0808 	add.w	r8, r8, #8
   2c9b6:	f77f ae5c 	ble.w	2c672 <_svfprintf_r+0xfe2>
   2c9ba:	aa25      	add	r2, sp, #148	; 0x94
   2c9bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c9be:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c9c0:	f001 fe36 	bl	2e630 <__ssprint_r>
   2c9c4:	2800      	cmp	r0, #0
   2c9c6:	f47e af35 	bne.w	2b834 <_svfprintf_r+0x1a4>
   2c9ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c9cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c9ce:	46c8      	mov	r8, r9
   2c9d0:	e64f      	b.n	2c672 <_svfprintf_r+0xfe2>
   2c9d2:	3330      	adds	r3, #48	; 0x30
   2c9d4:	2230      	movs	r2, #48	; 0x30
   2c9d6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c9da:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c9de:	ab22      	add	r3, sp, #136	; 0x88
   2c9e0:	e70f      	b.n	2c802 <_svfprintf_r+0x1172>
   2c9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c9e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c9e6:	4413      	add	r3, r2
   2c9e8:	930e      	str	r3, [sp, #56]	; 0x38
   2c9ea:	e775      	b.n	2c8d8 <_svfprintf_r+0x1248>
   2c9ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c9ee:	e5cb      	b.n	2c588 <_svfprintf_r+0xef8>
   2c9f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c9f2:	4e1d      	ldr	r6, [pc, #116]	; (2ca68 <_svfprintf_r+0x13d8>)
   2c9f4:	2b00      	cmp	r3, #0
   2c9f6:	bfb6      	itet	lt
   2c9f8:	272d      	movlt	r7, #45	; 0x2d
   2c9fa:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c9fe:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2ca02:	4b1a      	ldr	r3, [pc, #104]	; (2ca6c <_svfprintf_r+0x13dc>)
   2ca04:	f7ff ba2f 	b.w	2be66 <_svfprintf_r+0x7d6>
   2ca08:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2ca0a:	9808      	ldr	r0, [sp, #32]
   2ca0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2ca0e:	4639      	mov	r1, r7
   2ca10:	f7d4 fb04 	bl	101c <__aeabi_dcmpeq>
   2ca14:	2800      	cmp	r0, #0
   2ca16:	f47f ae7f 	bne.w	2c718 <_svfprintf_r+0x1088>
   2ca1a:	f1c5 0501 	rsb	r5, r5, #1
   2ca1e:	951f      	str	r5, [sp, #124]	; 0x7c
   2ca20:	442c      	add	r4, r5
   2ca22:	e59e      	b.n	2c562 <_svfprintf_r+0xed2>
   2ca24:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ca26:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2ca28:	4413      	add	r3, r2
   2ca2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ca2c:	441a      	add	r2, r3
   2ca2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2ca32:	920e      	str	r2, [sp, #56]	; 0x38
   2ca34:	9308      	str	r3, [sp, #32]
   2ca36:	e5c7      	b.n	2c5c8 <_svfprintf_r+0xf38>
   2ca38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ca3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ca3c:	f1c3 0301 	rsb	r3, r3, #1
   2ca40:	441a      	add	r2, r3
   2ca42:	4613      	mov	r3, r2
   2ca44:	e7d0      	b.n	2c9e8 <_svfprintf_r+0x1358>
   2ca46:	f01b 0301 	ands.w	r3, fp, #1
   2ca4a:	9312      	str	r3, [sp, #72]	; 0x48
   2ca4c:	f47f aee2 	bne.w	2c814 <_svfprintf_r+0x1184>
   2ca50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ca52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ca56:	9308      	str	r3, [sp, #32]
   2ca58:	e5b6      	b.n	2c5c8 <_svfprintf_r+0xf38>
   2ca5a:	bf00      	nop
   2ca5c:	66666667 	.word	0x66666667
   2ca60:	000313ac 	.word	0x000313ac
   2ca64:	000313c4 	.word	0x000313c4
   2ca68:	00031380 	.word	0x00031380
   2ca6c:	0003137c 	.word	0x0003137c
   2ca70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ca72:	b913      	cbnz	r3, 2ca7a <_svfprintf_r+0x13ea>
   2ca74:	f01b 0f01 	tst.w	fp, #1
   2ca78:	d002      	beq.n	2ca80 <_svfprintf_r+0x13f0>
   2ca7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ca7c:	3301      	adds	r3, #1
   2ca7e:	e7d4      	b.n	2ca2a <_svfprintf_r+0x139a>
   2ca80:	2301      	movs	r3, #1
   2ca82:	e73a      	b.n	2c8fa <_svfprintf_r+0x126a>
   2ca84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2ca86:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2ca8a:	6828      	ldr	r0, [r5, #0]
   2ca8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2ca90:	900a      	str	r0, [sp, #40]	; 0x28
   2ca92:	4628      	mov	r0, r5
   2ca94:	3004      	adds	r0, #4
   2ca96:	46a2      	mov	sl, r4
   2ca98:	900f      	str	r0, [sp, #60]	; 0x3c
   2ca9a:	f7fe be51 	b.w	2b740 <_svfprintf_r+0xb0>
   2ca9e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2caa2:	f7ff b867 	b.w	2bb74 <_svfprintf_r+0x4e4>
   2caa6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2caaa:	f7ff ba15 	b.w	2bed8 <_svfprintf_r+0x848>
   2caae:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2cab2:	e6a6      	b.n	2c802 <_svfprintf_r+0x1172>
   2cab4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cab8:	f7ff b8eb 	b.w	2bc92 <_svfprintf_r+0x602>
   2cabc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cabe:	230c      	movs	r3, #12
   2cac0:	6013      	str	r3, [r2, #0]
   2cac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cac6:	9309      	str	r3, [sp, #36]	; 0x24
   2cac8:	f7fe bebd 	b.w	2b846 <_svfprintf_r+0x1b6>
   2cacc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cad0:	f7ff b99a 	b.w	2be08 <_svfprintf_r+0x778>
   2cad4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cad8:	f7ff b976 	b.w	2bdc8 <_svfprintf_r+0x738>
   2cadc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cae0:	f7ff b959 	b.w	2bd96 <_svfprintf_r+0x706>
   2cae4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cae8:	f7ff b912 	b.w	2bd10 <_svfprintf_r+0x680>

0002caec <__ascii_wctomb>:
   2caec:	b121      	cbz	r1, 2caf8 <__ascii_wctomb+0xc>
   2caee:	2aff      	cmp	r2, #255	; 0xff
   2caf0:	d804      	bhi.n	2cafc <__ascii_wctomb+0x10>
   2caf2:	700a      	strb	r2, [r1, #0]
   2caf4:	2001      	movs	r0, #1
   2caf6:	4770      	bx	lr
   2caf8:	4608      	mov	r0, r1
   2cafa:	4770      	bx	lr
   2cafc:	238a      	movs	r3, #138	; 0x8a
   2cafe:	6003      	str	r3, [r0, #0]
   2cb00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cb04:	4770      	bx	lr
   2cb06:	bf00      	nop

0002cb08 <quorem>:
   2cb08:	6902      	ldr	r2, [r0, #16]
   2cb0a:	690b      	ldr	r3, [r1, #16]
   2cb0c:	4293      	cmp	r3, r2
   2cb0e:	f300 808d 	bgt.w	2cc2c <quorem+0x124>
   2cb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2cb1a:	f101 0714 	add.w	r7, r1, #20
   2cb1e:	f100 0b14 	add.w	fp, r0, #20
   2cb22:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2cb26:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2cb2a:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2cb2e:	b083      	sub	sp, #12
   2cb30:	3201      	adds	r2, #1
   2cb32:	fbb3 f9f2 	udiv	r9, r3, r2
   2cb36:	eb0b 0304 	add.w	r3, fp, r4
   2cb3a:	9400      	str	r4, [sp, #0]
   2cb3c:	eb07 0a04 	add.w	sl, r7, r4
   2cb40:	9301      	str	r3, [sp, #4]
   2cb42:	f1b9 0f00 	cmp.w	r9, #0
   2cb46:	d039      	beq.n	2cbbc <quorem+0xb4>
   2cb48:	2500      	movs	r5, #0
   2cb4a:	462e      	mov	r6, r5
   2cb4c:	46bc      	mov	ip, r7
   2cb4e:	46de      	mov	lr, fp
   2cb50:	f85c 4b04 	ldr.w	r4, [ip], #4
   2cb54:	f8de 3000 	ldr.w	r3, [lr]
   2cb58:	b2a2      	uxth	r2, r4
   2cb5a:	fb09 5502 	mla	r5, r9, r2, r5
   2cb5e:	0c22      	lsrs	r2, r4, #16
   2cb60:	0c2c      	lsrs	r4, r5, #16
   2cb62:	fb09 4202 	mla	r2, r9, r2, r4
   2cb66:	b2ad      	uxth	r5, r5
   2cb68:	1b75      	subs	r5, r6, r5
   2cb6a:	b296      	uxth	r6, r2
   2cb6c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2cb70:	fa15 f383 	uxtah	r3, r5, r3
   2cb74:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2cb78:	b29b      	uxth	r3, r3
   2cb7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2cb7e:	45e2      	cmp	sl, ip
   2cb80:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2cb84:	f84e 3b04 	str.w	r3, [lr], #4
   2cb88:	ea4f 4626 	mov.w	r6, r6, asr #16
   2cb8c:	d2e0      	bcs.n	2cb50 <quorem+0x48>
   2cb8e:	9b00      	ldr	r3, [sp, #0]
   2cb90:	f85b 3003 	ldr.w	r3, [fp, r3]
   2cb94:	b993      	cbnz	r3, 2cbbc <quorem+0xb4>
   2cb96:	9c01      	ldr	r4, [sp, #4]
   2cb98:	1f23      	subs	r3, r4, #4
   2cb9a:	459b      	cmp	fp, r3
   2cb9c:	d20c      	bcs.n	2cbb8 <quorem+0xb0>
   2cb9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cba2:	b94b      	cbnz	r3, 2cbb8 <quorem+0xb0>
   2cba4:	f1a4 0308 	sub.w	r3, r4, #8
   2cba8:	e002      	b.n	2cbb0 <quorem+0xa8>
   2cbaa:	681a      	ldr	r2, [r3, #0]
   2cbac:	3b04      	subs	r3, #4
   2cbae:	b91a      	cbnz	r2, 2cbb8 <quorem+0xb0>
   2cbb0:	459b      	cmp	fp, r3
   2cbb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cbb6:	d3f8      	bcc.n	2cbaa <quorem+0xa2>
   2cbb8:	f8c0 8010 	str.w	r8, [r0, #16]
   2cbbc:	4604      	mov	r4, r0
   2cbbe:	f001 fc29 	bl	2e414 <__mcmp>
   2cbc2:	2800      	cmp	r0, #0
   2cbc4:	db2e      	blt.n	2cc24 <quorem+0x11c>
   2cbc6:	f109 0901 	add.w	r9, r9, #1
   2cbca:	465d      	mov	r5, fp
   2cbcc:	2300      	movs	r3, #0
   2cbce:	f857 1b04 	ldr.w	r1, [r7], #4
   2cbd2:	6828      	ldr	r0, [r5, #0]
   2cbd4:	b28a      	uxth	r2, r1
   2cbd6:	1a9a      	subs	r2, r3, r2
   2cbd8:	0c0b      	lsrs	r3, r1, #16
   2cbda:	fa12 f280 	uxtah	r2, r2, r0
   2cbde:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2cbe2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2cbe6:	b292      	uxth	r2, r2
   2cbe8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2cbec:	45ba      	cmp	sl, r7
   2cbee:	f845 2b04 	str.w	r2, [r5], #4
   2cbf2:	ea4f 4323 	mov.w	r3, r3, asr #16
   2cbf6:	d2ea      	bcs.n	2cbce <quorem+0xc6>
   2cbf8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2cbfc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2cc00:	b982      	cbnz	r2, 2cc24 <quorem+0x11c>
   2cc02:	1f1a      	subs	r2, r3, #4
   2cc04:	4593      	cmp	fp, r2
   2cc06:	d20b      	bcs.n	2cc20 <quorem+0x118>
   2cc08:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2cc0c:	b942      	cbnz	r2, 2cc20 <quorem+0x118>
   2cc0e:	3b08      	subs	r3, #8
   2cc10:	e002      	b.n	2cc18 <quorem+0x110>
   2cc12:	681a      	ldr	r2, [r3, #0]
   2cc14:	3b04      	subs	r3, #4
   2cc16:	b91a      	cbnz	r2, 2cc20 <quorem+0x118>
   2cc18:	459b      	cmp	fp, r3
   2cc1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cc1e:	d3f8      	bcc.n	2cc12 <quorem+0x10a>
   2cc20:	f8c4 8010 	str.w	r8, [r4, #16]
   2cc24:	4648      	mov	r0, r9
   2cc26:	b003      	add	sp, #12
   2cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc2c:	2000      	movs	r0, #0
   2cc2e:	4770      	bx	lr

0002cc30 <_dtoa_r>:
   2cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc34:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2cc36:	b09b      	sub	sp, #108	; 0x6c
   2cc38:	4604      	mov	r4, r0
   2cc3a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cc3c:	4692      	mov	sl, r2
   2cc3e:	469b      	mov	fp, r3
   2cc40:	b141      	cbz	r1, 2cc54 <_dtoa_r+0x24>
   2cc42:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cc44:	604a      	str	r2, [r1, #4]
   2cc46:	2301      	movs	r3, #1
   2cc48:	4093      	lsls	r3, r2
   2cc4a:	608b      	str	r3, [r1, #8]
   2cc4c:	f001 fa0a 	bl	2e064 <_Bfree>
   2cc50:	2300      	movs	r3, #0
   2cc52:	6423      	str	r3, [r4, #64]	; 0x40
   2cc54:	f1bb 0f00 	cmp.w	fp, #0
   2cc58:	465d      	mov	r5, fp
   2cc5a:	db35      	blt.n	2ccc8 <_dtoa_r+0x98>
   2cc5c:	2300      	movs	r3, #0
   2cc5e:	6033      	str	r3, [r6, #0]
   2cc60:	4b9d      	ldr	r3, [pc, #628]	; (2ced8 <_dtoa_r+0x2a8>)
   2cc62:	43ab      	bics	r3, r5
   2cc64:	d015      	beq.n	2cc92 <_dtoa_r+0x62>
   2cc66:	4650      	mov	r0, sl
   2cc68:	4659      	mov	r1, fp
   2cc6a:	2200      	movs	r2, #0
   2cc6c:	2300      	movs	r3, #0
   2cc6e:	f7d4 f9d5 	bl	101c <__aeabi_dcmpeq>
   2cc72:	4680      	mov	r8, r0
   2cc74:	2800      	cmp	r0, #0
   2cc76:	d02d      	beq.n	2ccd4 <_dtoa_r+0xa4>
   2cc78:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc7a:	2301      	movs	r3, #1
   2cc7c:	6013      	str	r3, [r2, #0]
   2cc7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc80:	2b00      	cmp	r3, #0
   2cc82:	f000 80bd 	beq.w	2ce00 <_dtoa_r+0x1d0>
   2cc86:	4895      	ldr	r0, [pc, #596]	; (2cedc <_dtoa_r+0x2ac>)
   2cc88:	6018      	str	r0, [r3, #0]
   2cc8a:	3801      	subs	r0, #1
   2cc8c:	b01b      	add	sp, #108	; 0x6c
   2cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc92:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc94:	f242 730f 	movw	r3, #9999	; 0x270f
   2cc98:	6013      	str	r3, [r2, #0]
   2cc9a:	f1ba 0f00 	cmp.w	sl, #0
   2cc9e:	d10d      	bne.n	2ccbc <_dtoa_r+0x8c>
   2cca0:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cca4:	b955      	cbnz	r5, 2ccbc <_dtoa_r+0x8c>
   2cca6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cca8:	488d      	ldr	r0, [pc, #564]	; (2cee0 <_dtoa_r+0x2b0>)
   2ccaa:	2b00      	cmp	r3, #0
   2ccac:	d0ee      	beq.n	2cc8c <_dtoa_r+0x5c>
   2ccae:	f100 0308 	add.w	r3, r0, #8
   2ccb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2ccb4:	6013      	str	r3, [r2, #0]
   2ccb6:	b01b      	add	sp, #108	; 0x6c
   2ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ccbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2ccbe:	4889      	ldr	r0, [pc, #548]	; (2cee4 <_dtoa_r+0x2b4>)
   2ccc0:	2b00      	cmp	r3, #0
   2ccc2:	d0e3      	beq.n	2cc8c <_dtoa_r+0x5c>
   2ccc4:	1cc3      	adds	r3, r0, #3
   2ccc6:	e7f4      	b.n	2ccb2 <_dtoa_r+0x82>
   2ccc8:	2301      	movs	r3, #1
   2ccca:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2ccce:	6033      	str	r3, [r6, #0]
   2ccd0:	46ab      	mov	fp, r5
   2ccd2:	e7c5      	b.n	2cc60 <_dtoa_r+0x30>
   2ccd4:	aa18      	add	r2, sp, #96	; 0x60
   2ccd6:	ab19      	add	r3, sp, #100	; 0x64
   2ccd8:	9201      	str	r2, [sp, #4]
   2ccda:	9300      	str	r3, [sp, #0]
   2ccdc:	4652      	mov	r2, sl
   2ccde:	465b      	mov	r3, fp
   2cce0:	4620      	mov	r0, r4
   2cce2:	f001 fc37 	bl	2e554 <__d2b>
   2cce6:	0d2b      	lsrs	r3, r5, #20
   2cce8:	4681      	mov	r9, r0
   2ccea:	d071      	beq.n	2cdd0 <_dtoa_r+0x1a0>
   2ccec:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2ccf0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2ccf4:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2ccf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2ccfa:	4650      	mov	r0, sl
   2ccfc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2cd00:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cd04:	2200      	movs	r2, #0
   2cd06:	4b78      	ldr	r3, [pc, #480]	; (2cee8 <_dtoa_r+0x2b8>)
   2cd08:	f7d3 fd6c 	bl	7e4 <__aeabi_dsub>
   2cd0c:	a36c      	add	r3, pc, #432	; (adr r3, 2cec0 <_dtoa_r+0x290>)
   2cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cd12:	f7d3 ff1b 	bl	b4c <__aeabi_dmul>
   2cd16:	a36c      	add	r3, pc, #432	; (adr r3, 2cec8 <_dtoa_r+0x298>)
   2cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cd1c:	f7d3 fd64 	bl	7e8 <__adddf3>
   2cd20:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2cd24:	4630      	mov	r0, r6
   2cd26:	f7d3 feab 	bl	a80 <__aeabi_i2d>
   2cd2a:	a369      	add	r3, pc, #420	; (adr r3, 2ced0 <_dtoa_r+0x2a0>)
   2cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cd30:	f7d3 ff0c 	bl	b4c <__aeabi_dmul>
   2cd34:	4602      	mov	r2, r0
   2cd36:	460b      	mov	r3, r1
   2cd38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2cd3c:	f7d3 fd54 	bl	7e8 <__adddf3>
   2cd40:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cd44:	f7d4 f9b2 	bl	10ac <__aeabi_d2iz>
   2cd48:	2200      	movs	r2, #0
   2cd4a:	9002      	str	r0, [sp, #8]
   2cd4c:	2300      	movs	r3, #0
   2cd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cd52:	f7d4 f96d 	bl	1030 <__aeabi_dcmplt>
   2cd56:	2800      	cmp	r0, #0
   2cd58:	f040 8173 	bne.w	2d042 <_dtoa_r+0x412>
   2cd5c:	9d02      	ldr	r5, [sp, #8]
   2cd5e:	2d16      	cmp	r5, #22
   2cd60:	f200 815d 	bhi.w	2d01e <_dtoa_r+0x3ee>
   2cd64:	4b61      	ldr	r3, [pc, #388]	; (2ceec <_dtoa_r+0x2bc>)
   2cd66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2cd6a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2cd6e:	4652      	mov	r2, sl
   2cd70:	465b      	mov	r3, fp
   2cd72:	f7d4 f97b 	bl	106c <__aeabi_dcmpgt>
   2cd76:	2800      	cmp	r0, #0
   2cd78:	f000 81c5 	beq.w	2d106 <_dtoa_r+0x4d6>
   2cd7c:	1e6b      	subs	r3, r5, #1
   2cd7e:	9302      	str	r3, [sp, #8]
   2cd80:	2300      	movs	r3, #0
   2cd82:	930e      	str	r3, [sp, #56]	; 0x38
   2cd84:	1bbf      	subs	r7, r7, r6
   2cd86:	1e7b      	subs	r3, r7, #1
   2cd88:	9306      	str	r3, [sp, #24]
   2cd8a:	f100 8154 	bmi.w	2d036 <_dtoa_r+0x406>
   2cd8e:	2300      	movs	r3, #0
   2cd90:	9308      	str	r3, [sp, #32]
   2cd92:	9b02      	ldr	r3, [sp, #8]
   2cd94:	2b00      	cmp	r3, #0
   2cd96:	f2c0 8145 	blt.w	2d024 <_dtoa_r+0x3f4>
   2cd9a:	9a06      	ldr	r2, [sp, #24]
   2cd9c:	930d      	str	r3, [sp, #52]	; 0x34
   2cd9e:	4611      	mov	r1, r2
   2cda0:	4419      	add	r1, r3
   2cda2:	2300      	movs	r3, #0
   2cda4:	9106      	str	r1, [sp, #24]
   2cda6:	930c      	str	r3, [sp, #48]	; 0x30
   2cda8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cdaa:	2b09      	cmp	r3, #9
   2cdac:	d82a      	bhi.n	2ce04 <_dtoa_r+0x1d4>
   2cdae:	2b05      	cmp	r3, #5
   2cdb0:	f340 865b 	ble.w	2da6a <_dtoa_r+0xe3a>
   2cdb4:	3b04      	subs	r3, #4
   2cdb6:	9324      	str	r3, [sp, #144]	; 0x90
   2cdb8:	2500      	movs	r5, #0
   2cdba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cdbc:	3b02      	subs	r3, #2
   2cdbe:	2b03      	cmp	r3, #3
   2cdc0:	f200 8642 	bhi.w	2da48 <_dtoa_r+0xe18>
   2cdc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   2cdc8:	02c903d4 	.word	0x02c903d4
   2cdcc:	046103df 	.word	0x046103df
   2cdd0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cdd2:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2cdd4:	443e      	add	r6, r7
   2cdd6:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2cdda:	2b20      	cmp	r3, #32
   2cddc:	f340 818e 	ble.w	2d0fc <_dtoa_r+0x4cc>
   2cde0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2cde4:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2cde8:	409d      	lsls	r5, r3
   2cdea:	fa2a f000 	lsr.w	r0, sl, r0
   2cdee:	4328      	orrs	r0, r5
   2cdf0:	f7d3 fe36 	bl	a60 <__aeabi_ui2d>
   2cdf4:	2301      	movs	r3, #1
   2cdf6:	3e01      	subs	r6, #1
   2cdf8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2cdfc:	9314      	str	r3, [sp, #80]	; 0x50
   2cdfe:	e781      	b.n	2cd04 <_dtoa_r+0xd4>
   2ce00:	483b      	ldr	r0, [pc, #236]	; (2cef0 <_dtoa_r+0x2c0>)
   2ce02:	e743      	b.n	2cc8c <_dtoa_r+0x5c>
   2ce04:	2100      	movs	r1, #0
   2ce06:	6461      	str	r1, [r4, #68]	; 0x44
   2ce08:	4620      	mov	r0, r4
   2ce0a:	9125      	str	r1, [sp, #148]	; 0x94
   2ce0c:	f001 f904 	bl	2e018 <_Balloc>
   2ce10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ce14:	930a      	str	r3, [sp, #40]	; 0x28
   2ce16:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2ce18:	930f      	str	r3, [sp, #60]	; 0x3c
   2ce1a:	2301      	movs	r3, #1
   2ce1c:	9004      	str	r0, [sp, #16]
   2ce1e:	6420      	str	r0, [r4, #64]	; 0x40
   2ce20:	9224      	str	r2, [sp, #144]	; 0x90
   2ce22:	930b      	str	r3, [sp, #44]	; 0x2c
   2ce24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ce26:	2b00      	cmp	r3, #0
   2ce28:	f2c0 80d9 	blt.w	2cfde <_dtoa_r+0x3ae>
   2ce2c:	9a02      	ldr	r2, [sp, #8]
   2ce2e:	2a0e      	cmp	r2, #14
   2ce30:	f300 80d5 	bgt.w	2cfde <_dtoa_r+0x3ae>
   2ce34:	4b2d      	ldr	r3, [pc, #180]	; (2ceec <_dtoa_r+0x2bc>)
   2ce36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ce3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2ce42:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ce44:	2b00      	cmp	r3, #0
   2ce46:	f2c0 83ba 	blt.w	2d5be <_dtoa_r+0x98e>
   2ce4a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2ce4e:	4650      	mov	r0, sl
   2ce50:	462a      	mov	r2, r5
   2ce52:	4633      	mov	r3, r6
   2ce54:	4659      	mov	r1, fp
   2ce56:	f7d3 ffa3 	bl	da0 <__aeabi_ddiv>
   2ce5a:	f7d4 f927 	bl	10ac <__aeabi_d2iz>
   2ce5e:	4680      	mov	r8, r0
   2ce60:	f7d3 fe0e 	bl	a80 <__aeabi_i2d>
   2ce64:	462a      	mov	r2, r5
   2ce66:	4633      	mov	r3, r6
   2ce68:	f7d3 fe70 	bl	b4c <__aeabi_dmul>
   2ce6c:	460b      	mov	r3, r1
   2ce6e:	4602      	mov	r2, r0
   2ce70:	4659      	mov	r1, fp
   2ce72:	4650      	mov	r0, sl
   2ce74:	f7d3 fcb6 	bl	7e4 <__aeabi_dsub>
   2ce78:	9d04      	ldr	r5, [sp, #16]
   2ce7a:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2ce7e:	702b      	strb	r3, [r5, #0]
   2ce80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce82:	2b01      	cmp	r3, #1
   2ce84:	4606      	mov	r6, r0
   2ce86:	460f      	mov	r7, r1
   2ce88:	f105 0501 	add.w	r5, r5, #1
   2ce8c:	d068      	beq.n	2cf60 <_dtoa_r+0x330>
   2ce8e:	2200      	movs	r2, #0
   2ce90:	4b18      	ldr	r3, [pc, #96]	; (2cef4 <_dtoa_r+0x2c4>)
   2ce92:	f7d3 fe5b 	bl	b4c <__aeabi_dmul>
   2ce96:	2200      	movs	r2, #0
   2ce98:	2300      	movs	r3, #0
   2ce9a:	4606      	mov	r6, r0
   2ce9c:	460f      	mov	r7, r1
   2ce9e:	f7d4 f8bd 	bl	101c <__aeabi_dcmpeq>
   2cea2:	2800      	cmp	r0, #0
   2cea4:	f040 8088 	bne.w	2cfb8 <_dtoa_r+0x388>
   2cea8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2ceac:	f04f 0a00 	mov.w	sl, #0
   2ceb0:	f8df b040 	ldr.w	fp, [pc, #64]	; 2cef4 <_dtoa_r+0x2c4>
   2ceb4:	940c      	str	r4, [sp, #48]	; 0x30
   2ceb6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2ceba:	e028      	b.n	2cf0e <_dtoa_r+0x2de>
   2cebc:	f3af 8000 	nop.w
   2cec0:	636f4361 	.word	0x636f4361
   2cec4:	3fd287a7 	.word	0x3fd287a7
   2cec8:	8b60c8b3 	.word	0x8b60c8b3
   2cecc:	3fc68a28 	.word	0x3fc68a28
   2ced0:	509f79fb 	.word	0x509f79fb
   2ced4:	3fd34413 	.word	0x3fd34413
   2ced8:	7ff00000 	.word	0x7ff00000
   2cedc:	00030d15 	.word	0x00030d15
   2cee0:	000314d8 	.word	0x000314d8
   2cee4:	000314e4 	.word	0x000314e4
   2cee8:	3ff80000 	.word	0x3ff80000
   2ceec:	00031510 	.word	0x00031510
   2cef0:	00030d14 	.word	0x00030d14
   2cef4:	40240000 	.word	0x40240000
   2cef8:	f7d3 fe28 	bl	b4c <__aeabi_dmul>
   2cefc:	2200      	movs	r2, #0
   2cefe:	2300      	movs	r3, #0
   2cf00:	4606      	mov	r6, r0
   2cf02:	460f      	mov	r7, r1
   2cf04:	f7d4 f88a 	bl	101c <__aeabi_dcmpeq>
   2cf08:	2800      	cmp	r0, #0
   2cf0a:	f040 83c1 	bne.w	2d690 <_dtoa_r+0xa60>
   2cf0e:	4642      	mov	r2, r8
   2cf10:	464b      	mov	r3, r9
   2cf12:	4630      	mov	r0, r6
   2cf14:	4639      	mov	r1, r7
   2cf16:	f7d3 ff43 	bl	da0 <__aeabi_ddiv>
   2cf1a:	f7d4 f8c7 	bl	10ac <__aeabi_d2iz>
   2cf1e:	4604      	mov	r4, r0
   2cf20:	f7d3 fdae 	bl	a80 <__aeabi_i2d>
   2cf24:	4642      	mov	r2, r8
   2cf26:	464b      	mov	r3, r9
   2cf28:	f7d3 fe10 	bl	b4c <__aeabi_dmul>
   2cf2c:	4602      	mov	r2, r0
   2cf2e:	460b      	mov	r3, r1
   2cf30:	4630      	mov	r0, r6
   2cf32:	4639      	mov	r1, r7
   2cf34:	f7d3 fc56 	bl	7e4 <__aeabi_dsub>
   2cf38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2cf3c:	9e04      	ldr	r6, [sp, #16]
   2cf3e:	f805 eb01 	strb.w	lr, [r5], #1
   2cf42:	eba5 0e06 	sub.w	lr, r5, r6
   2cf46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2cf48:	45b6      	cmp	lr, r6
   2cf4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2cf4e:	4652      	mov	r2, sl
   2cf50:	465b      	mov	r3, fp
   2cf52:	d1d1      	bne.n	2cef8 <_dtoa_r+0x2c8>
   2cf54:	46a0      	mov	r8, r4
   2cf56:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cf5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cf5c:	4606      	mov	r6, r0
   2cf5e:	460f      	mov	r7, r1
   2cf60:	4632      	mov	r2, r6
   2cf62:	463b      	mov	r3, r7
   2cf64:	4630      	mov	r0, r6
   2cf66:	4639      	mov	r1, r7
   2cf68:	f7d3 fc3e 	bl	7e8 <__adddf3>
   2cf6c:	4606      	mov	r6, r0
   2cf6e:	460f      	mov	r7, r1
   2cf70:	4602      	mov	r2, r0
   2cf72:	460b      	mov	r3, r1
   2cf74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf78:	f7d4 f85a 	bl	1030 <__aeabi_dcmplt>
   2cf7c:	b948      	cbnz	r0, 2cf92 <_dtoa_r+0x362>
   2cf7e:	4632      	mov	r2, r6
   2cf80:	463b      	mov	r3, r7
   2cf82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf86:	f7d4 f849 	bl	101c <__aeabi_dcmpeq>
   2cf8a:	b1a8      	cbz	r0, 2cfb8 <_dtoa_r+0x388>
   2cf8c:	f018 0f01 	tst.w	r8, #1
   2cf90:	d012      	beq.n	2cfb8 <_dtoa_r+0x388>
   2cf92:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cf96:	9a04      	ldr	r2, [sp, #16]
   2cf98:	1e6b      	subs	r3, r5, #1
   2cf9a:	e004      	b.n	2cfa6 <_dtoa_r+0x376>
   2cf9c:	429a      	cmp	r2, r3
   2cf9e:	f000 8401 	beq.w	2d7a4 <_dtoa_r+0xb74>
   2cfa2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2cfa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2cfaa:	f103 0501 	add.w	r5, r3, #1
   2cfae:	d0f5      	beq.n	2cf9c <_dtoa_r+0x36c>
   2cfb0:	f108 0801 	add.w	r8, r8, #1
   2cfb4:	f883 8000 	strb.w	r8, [r3]
   2cfb8:	4649      	mov	r1, r9
   2cfba:	4620      	mov	r0, r4
   2cfbc:	f001 f852 	bl	2e064 <_Bfree>
   2cfc0:	2200      	movs	r2, #0
   2cfc2:	9b02      	ldr	r3, [sp, #8]
   2cfc4:	702a      	strb	r2, [r5, #0]
   2cfc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cfc8:	3301      	adds	r3, #1
   2cfca:	6013      	str	r3, [r2, #0]
   2cfcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cfce:	2b00      	cmp	r3, #0
   2cfd0:	f000 839e 	beq.w	2d710 <_dtoa_r+0xae0>
   2cfd4:	9804      	ldr	r0, [sp, #16]
   2cfd6:	601d      	str	r5, [r3, #0]
   2cfd8:	b01b      	add	sp, #108	; 0x6c
   2cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cfe0:	2a00      	cmp	r2, #0
   2cfe2:	d03e      	beq.n	2d062 <_dtoa_r+0x432>
   2cfe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2cfe6:	2a01      	cmp	r2, #1
   2cfe8:	f340 8311 	ble.w	2d60e <_dtoa_r+0x9de>
   2cfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cfee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cff0:	1e5f      	subs	r7, r3, #1
   2cff2:	42ba      	cmp	r2, r7
   2cff4:	f2c0 838f 	blt.w	2d716 <_dtoa_r+0xae6>
   2cff8:	1bd7      	subs	r7, r2, r7
   2cffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cffc:	2b00      	cmp	r3, #0
   2cffe:	f2c0 848b 	blt.w	2d918 <_dtoa_r+0xce8>
   2d002:	9d08      	ldr	r5, [sp, #32]
   2d004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d006:	9a08      	ldr	r2, [sp, #32]
   2d008:	441a      	add	r2, r3
   2d00a:	9208      	str	r2, [sp, #32]
   2d00c:	9a06      	ldr	r2, [sp, #24]
   2d00e:	2101      	movs	r1, #1
   2d010:	441a      	add	r2, r3
   2d012:	4620      	mov	r0, r4
   2d014:	9206      	str	r2, [sp, #24]
   2d016:	f001 f8bf 	bl	2e198 <__i2b>
   2d01a:	4606      	mov	r6, r0
   2d01c:	e024      	b.n	2d068 <_dtoa_r+0x438>
   2d01e:	2301      	movs	r3, #1
   2d020:	930e      	str	r3, [sp, #56]	; 0x38
   2d022:	e6af      	b.n	2cd84 <_dtoa_r+0x154>
   2d024:	9a08      	ldr	r2, [sp, #32]
   2d026:	9b02      	ldr	r3, [sp, #8]
   2d028:	1ad2      	subs	r2, r2, r3
   2d02a:	425b      	negs	r3, r3
   2d02c:	930c      	str	r3, [sp, #48]	; 0x30
   2d02e:	2300      	movs	r3, #0
   2d030:	9208      	str	r2, [sp, #32]
   2d032:	930d      	str	r3, [sp, #52]	; 0x34
   2d034:	e6b8      	b.n	2cda8 <_dtoa_r+0x178>
   2d036:	f1c7 0301 	rsb	r3, r7, #1
   2d03a:	9308      	str	r3, [sp, #32]
   2d03c:	2300      	movs	r3, #0
   2d03e:	9306      	str	r3, [sp, #24]
   2d040:	e6a7      	b.n	2cd92 <_dtoa_r+0x162>
   2d042:	9d02      	ldr	r5, [sp, #8]
   2d044:	4628      	mov	r0, r5
   2d046:	f7d3 fd1b 	bl	a80 <__aeabi_i2d>
   2d04a:	4602      	mov	r2, r0
   2d04c:	460b      	mov	r3, r1
   2d04e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2d052:	f7d3 ffe3 	bl	101c <__aeabi_dcmpeq>
   2d056:	2800      	cmp	r0, #0
   2d058:	f47f ae80 	bne.w	2cd5c <_dtoa_r+0x12c>
   2d05c:	1e6b      	subs	r3, r5, #1
   2d05e:	9302      	str	r3, [sp, #8]
   2d060:	e67c      	b.n	2cd5c <_dtoa_r+0x12c>
   2d062:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d064:	9d08      	ldr	r5, [sp, #32]
   2d066:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2d068:	2d00      	cmp	r5, #0
   2d06a:	dd0c      	ble.n	2d086 <_dtoa_r+0x456>
   2d06c:	9906      	ldr	r1, [sp, #24]
   2d06e:	2900      	cmp	r1, #0
   2d070:	460b      	mov	r3, r1
   2d072:	dd08      	ble.n	2d086 <_dtoa_r+0x456>
   2d074:	42a9      	cmp	r1, r5
   2d076:	9a08      	ldr	r2, [sp, #32]
   2d078:	bfa8      	it	ge
   2d07a:	462b      	movge	r3, r5
   2d07c:	1ad2      	subs	r2, r2, r3
   2d07e:	1aed      	subs	r5, r5, r3
   2d080:	1acb      	subs	r3, r1, r3
   2d082:	9208      	str	r2, [sp, #32]
   2d084:	9306      	str	r3, [sp, #24]
   2d086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d088:	b1d3      	cbz	r3, 2d0c0 <_dtoa_r+0x490>
   2d08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d08c:	2b00      	cmp	r3, #0
   2d08e:	f000 82b7 	beq.w	2d600 <_dtoa_r+0x9d0>
   2d092:	2f00      	cmp	r7, #0
   2d094:	dd10      	ble.n	2d0b8 <_dtoa_r+0x488>
   2d096:	4631      	mov	r1, r6
   2d098:	463a      	mov	r2, r7
   2d09a:	4620      	mov	r0, r4
   2d09c:	f001 f918 	bl	2e2d0 <__pow5mult>
   2d0a0:	464a      	mov	r2, r9
   2d0a2:	4601      	mov	r1, r0
   2d0a4:	4606      	mov	r6, r0
   2d0a6:	4620      	mov	r0, r4
   2d0a8:	f001 f880 	bl	2e1ac <__multiply>
   2d0ac:	4649      	mov	r1, r9
   2d0ae:	4680      	mov	r8, r0
   2d0b0:	4620      	mov	r0, r4
   2d0b2:	f000 ffd7 	bl	2e064 <_Bfree>
   2d0b6:	46c1      	mov	r9, r8
   2d0b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d0ba:	1bda      	subs	r2, r3, r7
   2d0bc:	f040 82a1 	bne.w	2d602 <_dtoa_r+0x9d2>
   2d0c0:	2101      	movs	r1, #1
   2d0c2:	4620      	mov	r0, r4
   2d0c4:	f001 f868 	bl	2e198 <__i2b>
   2d0c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d0ca:	2b00      	cmp	r3, #0
   2d0cc:	4680      	mov	r8, r0
   2d0ce:	dd1c      	ble.n	2d10a <_dtoa_r+0x4da>
   2d0d0:	4601      	mov	r1, r0
   2d0d2:	461a      	mov	r2, r3
   2d0d4:	4620      	mov	r0, r4
   2d0d6:	f001 f8fb 	bl	2e2d0 <__pow5mult>
   2d0da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d0dc:	2b01      	cmp	r3, #1
   2d0de:	4680      	mov	r8, r0
   2d0e0:	f340 8254 	ble.w	2d58c <_dtoa_r+0x95c>
   2d0e4:	2300      	movs	r3, #0
   2d0e6:	930c      	str	r3, [sp, #48]	; 0x30
   2d0e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2d0ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2d0f0:	6918      	ldr	r0, [r3, #16]
   2d0f2:	f001 f801 	bl	2e0f8 <__hi0bits>
   2d0f6:	f1c0 0020 	rsb	r0, r0, #32
   2d0fa:	e010      	b.n	2d11e <_dtoa_r+0x4ee>
   2d0fc:	f1c3 0520 	rsb	r5, r3, #32
   2d100:	fa0a f005 	lsl.w	r0, sl, r5
   2d104:	e674      	b.n	2cdf0 <_dtoa_r+0x1c0>
   2d106:	900e      	str	r0, [sp, #56]	; 0x38
   2d108:	e63c      	b.n	2cd84 <_dtoa_r+0x154>
   2d10a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d10c:	2b01      	cmp	r3, #1
   2d10e:	f340 8287 	ble.w	2d620 <_dtoa_r+0x9f0>
   2d112:	2300      	movs	r3, #0
   2d114:	930c      	str	r3, [sp, #48]	; 0x30
   2d116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d118:	2001      	movs	r0, #1
   2d11a:	2b00      	cmp	r3, #0
   2d11c:	d1e4      	bne.n	2d0e8 <_dtoa_r+0x4b8>
   2d11e:	9a06      	ldr	r2, [sp, #24]
   2d120:	4410      	add	r0, r2
   2d122:	f010 001f 	ands.w	r0, r0, #31
   2d126:	f000 80a1 	beq.w	2d26c <_dtoa_r+0x63c>
   2d12a:	f1c0 0320 	rsb	r3, r0, #32
   2d12e:	2b04      	cmp	r3, #4
   2d130:	f340 849e 	ble.w	2da70 <_dtoa_r+0xe40>
   2d134:	9b08      	ldr	r3, [sp, #32]
   2d136:	f1c0 001c 	rsb	r0, r0, #28
   2d13a:	4403      	add	r3, r0
   2d13c:	9308      	str	r3, [sp, #32]
   2d13e:	4613      	mov	r3, r2
   2d140:	4403      	add	r3, r0
   2d142:	4405      	add	r5, r0
   2d144:	9306      	str	r3, [sp, #24]
   2d146:	9b08      	ldr	r3, [sp, #32]
   2d148:	2b00      	cmp	r3, #0
   2d14a:	dd05      	ble.n	2d158 <_dtoa_r+0x528>
   2d14c:	4649      	mov	r1, r9
   2d14e:	461a      	mov	r2, r3
   2d150:	4620      	mov	r0, r4
   2d152:	f001 f90d 	bl	2e370 <__lshift>
   2d156:	4681      	mov	r9, r0
   2d158:	9b06      	ldr	r3, [sp, #24]
   2d15a:	2b00      	cmp	r3, #0
   2d15c:	dd05      	ble.n	2d16a <_dtoa_r+0x53a>
   2d15e:	4641      	mov	r1, r8
   2d160:	461a      	mov	r2, r3
   2d162:	4620      	mov	r0, r4
   2d164:	f001 f904 	bl	2e370 <__lshift>
   2d168:	4680      	mov	r8, r0
   2d16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d16c:	2b00      	cmp	r3, #0
   2d16e:	f040 8086 	bne.w	2d27e <_dtoa_r+0x64e>
   2d172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d174:	2b00      	cmp	r3, #0
   2d176:	f340 8266 	ble.w	2d646 <_dtoa_r+0xa16>
   2d17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d17c:	2b00      	cmp	r3, #0
   2d17e:	f000 8098 	beq.w	2d2b2 <_dtoa_r+0x682>
   2d182:	2d00      	cmp	r5, #0
   2d184:	dd05      	ble.n	2d192 <_dtoa_r+0x562>
   2d186:	4631      	mov	r1, r6
   2d188:	462a      	mov	r2, r5
   2d18a:	4620      	mov	r0, r4
   2d18c:	f001 f8f0 	bl	2e370 <__lshift>
   2d190:	4606      	mov	r6, r0
   2d192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d194:	2b00      	cmp	r3, #0
   2d196:	f040 8337 	bne.w	2d808 <_dtoa_r+0xbd8>
   2d19a:	9606      	str	r6, [sp, #24]
   2d19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d19e:	9a04      	ldr	r2, [sp, #16]
   2d1a0:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d1a4:	3b01      	subs	r3, #1
   2d1a6:	18d3      	adds	r3, r2, r3
   2d1a8:	930b      	str	r3, [sp, #44]	; 0x2c
   2d1aa:	f00a 0301 	and.w	r3, sl, #1
   2d1ae:	930c      	str	r3, [sp, #48]	; 0x30
   2d1b0:	4617      	mov	r7, r2
   2d1b2:	46c2      	mov	sl, r8
   2d1b4:	4651      	mov	r1, sl
   2d1b6:	4648      	mov	r0, r9
   2d1b8:	f7ff fca6 	bl	2cb08 <quorem>
   2d1bc:	4631      	mov	r1, r6
   2d1be:	4605      	mov	r5, r0
   2d1c0:	4648      	mov	r0, r9
   2d1c2:	f001 f927 	bl	2e414 <__mcmp>
   2d1c6:	465a      	mov	r2, fp
   2d1c8:	900a      	str	r0, [sp, #40]	; 0x28
   2d1ca:	4651      	mov	r1, sl
   2d1cc:	4620      	mov	r0, r4
   2d1ce:	f001 f93d 	bl	2e44c <__mdiff>
   2d1d2:	68c2      	ldr	r2, [r0, #12]
   2d1d4:	4680      	mov	r8, r0
   2d1d6:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d1da:	2a00      	cmp	r2, #0
   2d1dc:	f040 822b 	bne.w	2d636 <_dtoa_r+0xa06>
   2d1e0:	4601      	mov	r1, r0
   2d1e2:	4648      	mov	r0, r9
   2d1e4:	9308      	str	r3, [sp, #32]
   2d1e6:	f001 f915 	bl	2e414 <__mcmp>
   2d1ea:	4641      	mov	r1, r8
   2d1ec:	9006      	str	r0, [sp, #24]
   2d1ee:	4620      	mov	r0, r4
   2d1f0:	f000 ff38 	bl	2e064 <_Bfree>
   2d1f4:	9a06      	ldr	r2, [sp, #24]
   2d1f6:	9b08      	ldr	r3, [sp, #32]
   2d1f8:	b932      	cbnz	r2, 2d208 <_dtoa_r+0x5d8>
   2d1fa:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d1fc:	b921      	cbnz	r1, 2d208 <_dtoa_r+0x5d8>
   2d1fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d200:	2a00      	cmp	r2, #0
   2d202:	f000 83ef 	beq.w	2d9e4 <_dtoa_r+0xdb4>
   2d206:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d208:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d20a:	2900      	cmp	r1, #0
   2d20c:	f2c0 829f 	blt.w	2d74e <_dtoa_r+0xb1e>
   2d210:	d105      	bne.n	2d21e <_dtoa_r+0x5ee>
   2d212:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d214:	b919      	cbnz	r1, 2d21e <_dtoa_r+0x5ee>
   2d216:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d218:	2900      	cmp	r1, #0
   2d21a:	f000 8298 	beq.w	2d74e <_dtoa_r+0xb1e>
   2d21e:	2a00      	cmp	r2, #0
   2d220:	f300 8306 	bgt.w	2d830 <_dtoa_r+0xc00>
   2d224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d226:	703b      	strb	r3, [r7, #0]
   2d228:	f107 0801 	add.w	r8, r7, #1
   2d22c:	4297      	cmp	r7, r2
   2d22e:	4645      	mov	r5, r8
   2d230:	f000 830c 	beq.w	2d84c <_dtoa_r+0xc1c>
   2d234:	4649      	mov	r1, r9
   2d236:	2300      	movs	r3, #0
   2d238:	220a      	movs	r2, #10
   2d23a:	4620      	mov	r0, r4
   2d23c:	f000 ff1c 	bl	2e078 <__multadd>
   2d240:	455e      	cmp	r6, fp
   2d242:	4681      	mov	r9, r0
   2d244:	4631      	mov	r1, r6
   2d246:	f04f 0300 	mov.w	r3, #0
   2d24a:	f04f 020a 	mov.w	r2, #10
   2d24e:	4620      	mov	r0, r4
   2d250:	f000 81eb 	beq.w	2d62a <_dtoa_r+0x9fa>
   2d254:	f000 ff10 	bl	2e078 <__multadd>
   2d258:	4659      	mov	r1, fp
   2d25a:	4606      	mov	r6, r0
   2d25c:	2300      	movs	r3, #0
   2d25e:	220a      	movs	r2, #10
   2d260:	4620      	mov	r0, r4
   2d262:	f000 ff09 	bl	2e078 <__multadd>
   2d266:	4647      	mov	r7, r8
   2d268:	4683      	mov	fp, r0
   2d26a:	e7a3      	b.n	2d1b4 <_dtoa_r+0x584>
   2d26c:	201c      	movs	r0, #28
   2d26e:	9b08      	ldr	r3, [sp, #32]
   2d270:	4403      	add	r3, r0
   2d272:	9308      	str	r3, [sp, #32]
   2d274:	9b06      	ldr	r3, [sp, #24]
   2d276:	4403      	add	r3, r0
   2d278:	4405      	add	r5, r0
   2d27a:	9306      	str	r3, [sp, #24]
   2d27c:	e763      	b.n	2d146 <_dtoa_r+0x516>
   2d27e:	4641      	mov	r1, r8
   2d280:	4648      	mov	r0, r9
   2d282:	f001 f8c7 	bl	2e414 <__mcmp>
   2d286:	2800      	cmp	r0, #0
   2d288:	f6bf af73 	bge.w	2d172 <_dtoa_r+0x542>
   2d28c:	9f02      	ldr	r7, [sp, #8]
   2d28e:	4649      	mov	r1, r9
   2d290:	2300      	movs	r3, #0
   2d292:	220a      	movs	r2, #10
   2d294:	4620      	mov	r0, r4
   2d296:	3f01      	subs	r7, #1
   2d298:	9702      	str	r7, [sp, #8]
   2d29a:	f000 feed 	bl	2e078 <__multadd>
   2d29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d2a0:	4681      	mov	r9, r0
   2d2a2:	2b00      	cmp	r3, #0
   2d2a4:	f040 83b6 	bne.w	2da14 <_dtoa_r+0xde4>
   2d2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d2aa:	2b00      	cmp	r3, #0
   2d2ac:	f340 83bf 	ble.w	2da2e <_dtoa_r+0xdfe>
   2d2b0:	930a      	str	r3, [sp, #40]	; 0x28
   2d2b2:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d2b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d2b8:	465d      	mov	r5, fp
   2d2ba:	e002      	b.n	2d2c2 <_dtoa_r+0x692>
   2d2bc:	f000 fedc 	bl	2e078 <__multadd>
   2d2c0:	4681      	mov	r9, r0
   2d2c2:	4641      	mov	r1, r8
   2d2c4:	4648      	mov	r0, r9
   2d2c6:	f7ff fc1f 	bl	2cb08 <quorem>
   2d2ca:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d2ce:	f805 ab01 	strb.w	sl, [r5], #1
   2d2d2:	eba5 030b 	sub.w	r3, r5, fp
   2d2d6:	42bb      	cmp	r3, r7
   2d2d8:	f04f 020a 	mov.w	r2, #10
   2d2dc:	f04f 0300 	mov.w	r3, #0
   2d2e0:	4649      	mov	r1, r9
   2d2e2:	4620      	mov	r0, r4
   2d2e4:	dbea      	blt.n	2d2bc <_dtoa_r+0x68c>
   2d2e6:	9b04      	ldr	r3, [sp, #16]
   2d2e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d2ea:	2a01      	cmp	r2, #1
   2d2ec:	bfac      	ite	ge
   2d2ee:	189b      	addge	r3, r3, r2
   2d2f0:	3301      	addlt	r3, #1
   2d2f2:	461d      	mov	r5, r3
   2d2f4:	f04f 0b00 	mov.w	fp, #0
   2d2f8:	4649      	mov	r1, r9
   2d2fa:	2201      	movs	r2, #1
   2d2fc:	4620      	mov	r0, r4
   2d2fe:	f001 f837 	bl	2e370 <__lshift>
   2d302:	4641      	mov	r1, r8
   2d304:	4681      	mov	r9, r0
   2d306:	f001 f885 	bl	2e414 <__mcmp>
   2d30a:	2800      	cmp	r0, #0
   2d30c:	f340 823d 	ble.w	2d78a <_dtoa_r+0xb5a>
   2d310:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d314:	9904      	ldr	r1, [sp, #16]
   2d316:	1e6b      	subs	r3, r5, #1
   2d318:	e004      	b.n	2d324 <_dtoa_r+0x6f4>
   2d31a:	428b      	cmp	r3, r1
   2d31c:	f000 81ae 	beq.w	2d67c <_dtoa_r+0xa4c>
   2d320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d324:	2a39      	cmp	r2, #57	; 0x39
   2d326:	f103 0501 	add.w	r5, r3, #1
   2d32a:	d0f6      	beq.n	2d31a <_dtoa_r+0x6ea>
   2d32c:	3201      	adds	r2, #1
   2d32e:	701a      	strb	r2, [r3, #0]
   2d330:	4641      	mov	r1, r8
   2d332:	4620      	mov	r0, r4
   2d334:	f000 fe96 	bl	2e064 <_Bfree>
   2d338:	2e00      	cmp	r6, #0
   2d33a:	f43f ae3d 	beq.w	2cfb8 <_dtoa_r+0x388>
   2d33e:	f1bb 0f00 	cmp.w	fp, #0
   2d342:	d005      	beq.n	2d350 <_dtoa_r+0x720>
   2d344:	45b3      	cmp	fp, r6
   2d346:	d003      	beq.n	2d350 <_dtoa_r+0x720>
   2d348:	4659      	mov	r1, fp
   2d34a:	4620      	mov	r0, r4
   2d34c:	f000 fe8a 	bl	2e064 <_Bfree>
   2d350:	4631      	mov	r1, r6
   2d352:	4620      	mov	r0, r4
   2d354:	f000 fe86 	bl	2e064 <_Bfree>
   2d358:	e62e      	b.n	2cfb8 <_dtoa_r+0x388>
   2d35a:	2300      	movs	r3, #0
   2d35c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d35e:	9b02      	ldr	r3, [sp, #8]
   2d360:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d362:	4413      	add	r3, r2
   2d364:	930f      	str	r3, [sp, #60]	; 0x3c
   2d366:	3301      	adds	r3, #1
   2d368:	2b01      	cmp	r3, #1
   2d36a:	461f      	mov	r7, r3
   2d36c:	461e      	mov	r6, r3
   2d36e:	930a      	str	r3, [sp, #40]	; 0x28
   2d370:	bfb8      	it	lt
   2d372:	2701      	movlt	r7, #1
   2d374:	2100      	movs	r1, #0
   2d376:	2f17      	cmp	r7, #23
   2d378:	6461      	str	r1, [r4, #68]	; 0x44
   2d37a:	d90a      	bls.n	2d392 <_dtoa_r+0x762>
   2d37c:	2201      	movs	r2, #1
   2d37e:	2304      	movs	r3, #4
   2d380:	005b      	lsls	r3, r3, #1
   2d382:	f103 0014 	add.w	r0, r3, #20
   2d386:	4287      	cmp	r7, r0
   2d388:	4611      	mov	r1, r2
   2d38a:	f102 0201 	add.w	r2, r2, #1
   2d38e:	d2f7      	bcs.n	2d380 <_dtoa_r+0x750>
   2d390:	6461      	str	r1, [r4, #68]	; 0x44
   2d392:	4620      	mov	r0, r4
   2d394:	f000 fe40 	bl	2e018 <_Balloc>
   2d398:	2e0e      	cmp	r6, #14
   2d39a:	9004      	str	r0, [sp, #16]
   2d39c:	6420      	str	r0, [r4, #64]	; 0x40
   2d39e:	f63f ad41 	bhi.w	2ce24 <_dtoa_r+0x1f4>
   2d3a2:	2d00      	cmp	r5, #0
   2d3a4:	f43f ad3e 	beq.w	2ce24 <_dtoa_r+0x1f4>
   2d3a8:	9902      	ldr	r1, [sp, #8]
   2d3aa:	2900      	cmp	r1, #0
   2d3ac:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d3b0:	f340 8202 	ble.w	2d7b8 <_dtoa_r+0xb88>
   2d3b4:	4bb8      	ldr	r3, [pc, #736]	; (2d698 <_dtoa_r+0xa68>)
   2d3b6:	f001 020f 	and.w	r2, r1, #15
   2d3ba:	110d      	asrs	r5, r1, #4
   2d3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d3c0:	06e9      	lsls	r1, r5, #27
   2d3c2:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d3c6:	f140 81ae 	bpl.w	2d726 <_dtoa_r+0xaf6>
   2d3ca:	4bb4      	ldr	r3, [pc, #720]	; (2d69c <_dtoa_r+0xa6c>)
   2d3cc:	4650      	mov	r0, sl
   2d3ce:	4659      	mov	r1, fp
   2d3d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d3d4:	f7d3 fce4 	bl	da0 <__aeabi_ddiv>
   2d3d8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d3dc:	f005 050f 	and.w	r5, r5, #15
   2d3e0:	f04f 0a03 	mov.w	sl, #3
   2d3e4:	b18d      	cbz	r5, 2d40a <_dtoa_r+0x7da>
   2d3e6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d69c <_dtoa_r+0xa6c>
   2d3ea:	07ea      	lsls	r2, r5, #31
   2d3ec:	d509      	bpl.n	2d402 <_dtoa_r+0x7d2>
   2d3ee:	4630      	mov	r0, r6
   2d3f0:	4639      	mov	r1, r7
   2d3f2:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d3f6:	f7d3 fba9 	bl	b4c <__aeabi_dmul>
   2d3fa:	f10a 0a01 	add.w	sl, sl, #1
   2d3fe:	4606      	mov	r6, r0
   2d400:	460f      	mov	r7, r1
   2d402:	106d      	asrs	r5, r5, #1
   2d404:	f108 0808 	add.w	r8, r8, #8
   2d408:	d1ef      	bne.n	2d3ea <_dtoa_r+0x7ba>
   2d40a:	463b      	mov	r3, r7
   2d40c:	4632      	mov	r2, r6
   2d40e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d412:	f7d3 fcc5 	bl	da0 <__aeabi_ddiv>
   2d416:	4607      	mov	r7, r0
   2d418:	4688      	mov	r8, r1
   2d41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d41c:	b143      	cbz	r3, 2d430 <_dtoa_r+0x800>
   2d41e:	2200      	movs	r2, #0
   2d420:	4b9f      	ldr	r3, [pc, #636]	; (2d6a0 <_dtoa_r+0xa70>)
   2d422:	4638      	mov	r0, r7
   2d424:	4641      	mov	r1, r8
   2d426:	f7d3 fe03 	bl	1030 <__aeabi_dcmplt>
   2d42a:	2800      	cmp	r0, #0
   2d42c:	f040 8286 	bne.w	2d93c <_dtoa_r+0xd0c>
   2d430:	4650      	mov	r0, sl
   2d432:	f7d3 fb25 	bl	a80 <__aeabi_i2d>
   2d436:	463a      	mov	r2, r7
   2d438:	4643      	mov	r3, r8
   2d43a:	f7d3 fb87 	bl	b4c <__aeabi_dmul>
   2d43e:	4b99      	ldr	r3, [pc, #612]	; (2d6a4 <_dtoa_r+0xa74>)
   2d440:	2200      	movs	r2, #0
   2d442:	f7d3 f9d1 	bl	7e8 <__adddf3>
   2d446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d448:	4605      	mov	r5, r0
   2d44a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d44e:	2b00      	cmp	r3, #0
   2d450:	f000 813e 	beq.w	2d6d0 <_dtoa_r+0xaa0>
   2d454:	9b02      	ldr	r3, [sp, #8]
   2d456:	9315      	str	r3, [sp, #84]	; 0x54
   2d458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d45a:	9312      	str	r3, [sp, #72]	; 0x48
   2d45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d45e:	2b00      	cmp	r3, #0
   2d460:	f000 81fa 	beq.w	2d858 <_dtoa_r+0xc28>
   2d464:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d466:	4b8c      	ldr	r3, [pc, #560]	; (2d698 <_dtoa_r+0xa68>)
   2d468:	498f      	ldr	r1, [pc, #572]	; (2d6a8 <_dtoa_r+0xa78>)
   2d46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d46e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d472:	2000      	movs	r0, #0
   2d474:	f7d3 fc94 	bl	da0 <__aeabi_ddiv>
   2d478:	462a      	mov	r2, r5
   2d47a:	4633      	mov	r3, r6
   2d47c:	f7d3 f9b2 	bl	7e4 <__aeabi_dsub>
   2d480:	4682      	mov	sl, r0
   2d482:	468b      	mov	fp, r1
   2d484:	4638      	mov	r0, r7
   2d486:	4641      	mov	r1, r8
   2d488:	f7d3 fe10 	bl	10ac <__aeabi_d2iz>
   2d48c:	4605      	mov	r5, r0
   2d48e:	f7d3 faf7 	bl	a80 <__aeabi_i2d>
   2d492:	4602      	mov	r2, r0
   2d494:	460b      	mov	r3, r1
   2d496:	4638      	mov	r0, r7
   2d498:	4641      	mov	r1, r8
   2d49a:	f7d3 f9a3 	bl	7e4 <__aeabi_dsub>
   2d49e:	3530      	adds	r5, #48	; 0x30
   2d4a0:	fa5f f885 	uxtb.w	r8, r5
   2d4a4:	9d04      	ldr	r5, [sp, #16]
   2d4a6:	4606      	mov	r6, r0
   2d4a8:	460f      	mov	r7, r1
   2d4aa:	f885 8000 	strb.w	r8, [r5]
   2d4ae:	4602      	mov	r2, r0
   2d4b0:	460b      	mov	r3, r1
   2d4b2:	4650      	mov	r0, sl
   2d4b4:	4659      	mov	r1, fp
   2d4b6:	3501      	adds	r5, #1
   2d4b8:	f7d3 fdd8 	bl	106c <__aeabi_dcmpgt>
   2d4bc:	2800      	cmp	r0, #0
   2d4be:	d154      	bne.n	2d56a <_dtoa_r+0x93a>
   2d4c0:	4632      	mov	r2, r6
   2d4c2:	463b      	mov	r3, r7
   2d4c4:	2000      	movs	r0, #0
   2d4c6:	4976      	ldr	r1, [pc, #472]	; (2d6a0 <_dtoa_r+0xa70>)
   2d4c8:	f7d3 f98c 	bl	7e4 <__aeabi_dsub>
   2d4cc:	4602      	mov	r2, r0
   2d4ce:	460b      	mov	r3, r1
   2d4d0:	4650      	mov	r0, sl
   2d4d2:	4659      	mov	r1, fp
   2d4d4:	f7d3 fdca 	bl	106c <__aeabi_dcmpgt>
   2d4d8:	2800      	cmp	r0, #0
   2d4da:	f040 8270 	bne.w	2d9be <_dtoa_r+0xd8e>
   2d4de:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d4e0:	2a01      	cmp	r2, #1
   2d4e2:	f000 8111 	beq.w	2d708 <_dtoa_r+0xad8>
   2d4e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d4e8:	9a04      	ldr	r2, [sp, #16]
   2d4ea:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d4ee:	4413      	add	r3, r2
   2d4f0:	4699      	mov	r9, r3
   2d4f2:	e00d      	b.n	2d510 <_dtoa_r+0x8e0>
   2d4f4:	2000      	movs	r0, #0
   2d4f6:	496a      	ldr	r1, [pc, #424]	; (2d6a0 <_dtoa_r+0xa70>)
   2d4f8:	f7d3 f974 	bl	7e4 <__aeabi_dsub>
   2d4fc:	4652      	mov	r2, sl
   2d4fe:	465b      	mov	r3, fp
   2d500:	f7d3 fd96 	bl	1030 <__aeabi_dcmplt>
   2d504:	2800      	cmp	r0, #0
   2d506:	f040 8258 	bne.w	2d9ba <_dtoa_r+0xd8a>
   2d50a:	454d      	cmp	r5, r9
   2d50c:	f000 80fa 	beq.w	2d704 <_dtoa_r+0xad4>
   2d510:	4650      	mov	r0, sl
   2d512:	4659      	mov	r1, fp
   2d514:	2200      	movs	r2, #0
   2d516:	4b65      	ldr	r3, [pc, #404]	; (2d6ac <_dtoa_r+0xa7c>)
   2d518:	f7d3 fb18 	bl	b4c <__aeabi_dmul>
   2d51c:	2200      	movs	r2, #0
   2d51e:	4b63      	ldr	r3, [pc, #396]	; (2d6ac <_dtoa_r+0xa7c>)
   2d520:	4682      	mov	sl, r0
   2d522:	468b      	mov	fp, r1
   2d524:	4630      	mov	r0, r6
   2d526:	4639      	mov	r1, r7
   2d528:	f7d3 fb10 	bl	b4c <__aeabi_dmul>
   2d52c:	460f      	mov	r7, r1
   2d52e:	4606      	mov	r6, r0
   2d530:	f7d3 fdbc 	bl	10ac <__aeabi_d2iz>
   2d534:	4680      	mov	r8, r0
   2d536:	f7d3 faa3 	bl	a80 <__aeabi_i2d>
   2d53a:	4602      	mov	r2, r0
   2d53c:	460b      	mov	r3, r1
   2d53e:	4630      	mov	r0, r6
   2d540:	4639      	mov	r1, r7
   2d542:	f7d3 f94f 	bl	7e4 <__aeabi_dsub>
   2d546:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d54a:	fa5f f888 	uxtb.w	r8, r8
   2d54e:	4652      	mov	r2, sl
   2d550:	465b      	mov	r3, fp
   2d552:	f805 8b01 	strb.w	r8, [r5], #1
   2d556:	4606      	mov	r6, r0
   2d558:	460f      	mov	r7, r1
   2d55a:	f7d3 fd69 	bl	1030 <__aeabi_dcmplt>
   2d55e:	4632      	mov	r2, r6
   2d560:	463b      	mov	r3, r7
   2d562:	2800      	cmp	r0, #0
   2d564:	d0c6      	beq.n	2d4f4 <_dtoa_r+0x8c4>
   2d566:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d56c:	9302      	str	r3, [sp, #8]
   2d56e:	e523      	b.n	2cfb8 <_dtoa_r+0x388>
   2d570:	2300      	movs	r3, #0
   2d572:	930b      	str	r3, [sp, #44]	; 0x2c
   2d574:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d576:	2b00      	cmp	r3, #0
   2d578:	f340 80dc 	ble.w	2d734 <_dtoa_r+0xb04>
   2d57c:	461f      	mov	r7, r3
   2d57e:	461e      	mov	r6, r3
   2d580:	930f      	str	r3, [sp, #60]	; 0x3c
   2d582:	930a      	str	r3, [sp, #40]	; 0x28
   2d584:	e6f6      	b.n	2d374 <_dtoa_r+0x744>
   2d586:	2301      	movs	r3, #1
   2d588:	930b      	str	r3, [sp, #44]	; 0x2c
   2d58a:	e7f3      	b.n	2d574 <_dtoa_r+0x944>
   2d58c:	f1ba 0f00 	cmp.w	sl, #0
   2d590:	f47f ada8 	bne.w	2d0e4 <_dtoa_r+0x4b4>
   2d594:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d598:	2b00      	cmp	r3, #0
   2d59a:	f47f adba 	bne.w	2d112 <_dtoa_r+0x4e2>
   2d59e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d5a2:	0d3f      	lsrs	r7, r7, #20
   2d5a4:	053f      	lsls	r7, r7, #20
   2d5a6:	2f00      	cmp	r7, #0
   2d5a8:	f000 820d 	beq.w	2d9c6 <_dtoa_r+0xd96>
   2d5ac:	9b08      	ldr	r3, [sp, #32]
   2d5ae:	3301      	adds	r3, #1
   2d5b0:	9308      	str	r3, [sp, #32]
   2d5b2:	9b06      	ldr	r3, [sp, #24]
   2d5b4:	3301      	adds	r3, #1
   2d5b6:	9306      	str	r3, [sp, #24]
   2d5b8:	2301      	movs	r3, #1
   2d5ba:	930c      	str	r3, [sp, #48]	; 0x30
   2d5bc:	e5ab      	b.n	2d116 <_dtoa_r+0x4e6>
   2d5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d5c0:	2b00      	cmp	r3, #0
   2d5c2:	f73f ac42 	bgt.w	2ce4a <_dtoa_r+0x21a>
   2d5c6:	f040 8221 	bne.w	2da0c <_dtoa_r+0xddc>
   2d5ca:	2200      	movs	r2, #0
   2d5cc:	4b38      	ldr	r3, [pc, #224]	; (2d6b0 <_dtoa_r+0xa80>)
   2d5ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d5d2:	f7d3 fabb 	bl	b4c <__aeabi_dmul>
   2d5d6:	4652      	mov	r2, sl
   2d5d8:	465b      	mov	r3, fp
   2d5da:	f7d3 fd3d 	bl	1058 <__aeabi_dcmpge>
   2d5de:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d5e2:	4646      	mov	r6, r8
   2d5e4:	2800      	cmp	r0, #0
   2d5e6:	d041      	beq.n	2d66c <_dtoa_r+0xa3c>
   2d5e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d5ea:	9d04      	ldr	r5, [sp, #16]
   2d5ec:	43db      	mvns	r3, r3
   2d5ee:	9302      	str	r3, [sp, #8]
   2d5f0:	4641      	mov	r1, r8
   2d5f2:	4620      	mov	r0, r4
   2d5f4:	f000 fd36 	bl	2e064 <_Bfree>
   2d5f8:	2e00      	cmp	r6, #0
   2d5fa:	f43f acdd 	beq.w	2cfb8 <_dtoa_r+0x388>
   2d5fe:	e6a7      	b.n	2d350 <_dtoa_r+0x720>
   2d600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d602:	4649      	mov	r1, r9
   2d604:	4620      	mov	r0, r4
   2d606:	f000 fe63 	bl	2e2d0 <__pow5mult>
   2d60a:	4681      	mov	r9, r0
   2d60c:	e558      	b.n	2d0c0 <_dtoa_r+0x490>
   2d60e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d610:	2a00      	cmp	r2, #0
   2d612:	f000 8187 	beq.w	2d924 <_dtoa_r+0xcf4>
   2d616:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d61a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d61c:	9d08      	ldr	r5, [sp, #32]
   2d61e:	e4f2      	b.n	2d006 <_dtoa_r+0x3d6>
   2d620:	f1ba 0f00 	cmp.w	sl, #0
   2d624:	f47f ad75 	bne.w	2d112 <_dtoa_r+0x4e2>
   2d628:	e7b4      	b.n	2d594 <_dtoa_r+0x964>
   2d62a:	f000 fd25 	bl	2e078 <__multadd>
   2d62e:	4647      	mov	r7, r8
   2d630:	4606      	mov	r6, r0
   2d632:	4683      	mov	fp, r0
   2d634:	e5be      	b.n	2d1b4 <_dtoa_r+0x584>
   2d636:	4601      	mov	r1, r0
   2d638:	4620      	mov	r0, r4
   2d63a:	9306      	str	r3, [sp, #24]
   2d63c:	f000 fd12 	bl	2e064 <_Bfree>
   2d640:	2201      	movs	r2, #1
   2d642:	9b06      	ldr	r3, [sp, #24]
   2d644:	e5e0      	b.n	2d208 <_dtoa_r+0x5d8>
   2d646:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d648:	2b02      	cmp	r3, #2
   2d64a:	f77f ad96 	ble.w	2d17a <_dtoa_r+0x54a>
   2d64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d650:	2b00      	cmp	r3, #0
   2d652:	d1c9      	bne.n	2d5e8 <_dtoa_r+0x9b8>
   2d654:	4641      	mov	r1, r8
   2d656:	2205      	movs	r2, #5
   2d658:	4620      	mov	r0, r4
   2d65a:	f000 fd0d 	bl	2e078 <__multadd>
   2d65e:	4601      	mov	r1, r0
   2d660:	4680      	mov	r8, r0
   2d662:	4648      	mov	r0, r9
   2d664:	f000 fed6 	bl	2e414 <__mcmp>
   2d668:	2800      	cmp	r0, #0
   2d66a:	ddbd      	ble.n	2d5e8 <_dtoa_r+0x9b8>
   2d66c:	9a02      	ldr	r2, [sp, #8]
   2d66e:	9904      	ldr	r1, [sp, #16]
   2d670:	2331      	movs	r3, #49	; 0x31
   2d672:	3201      	adds	r2, #1
   2d674:	9202      	str	r2, [sp, #8]
   2d676:	700b      	strb	r3, [r1, #0]
   2d678:	1c4d      	adds	r5, r1, #1
   2d67a:	e7b9      	b.n	2d5f0 <_dtoa_r+0x9c0>
   2d67c:	9a02      	ldr	r2, [sp, #8]
   2d67e:	3201      	adds	r2, #1
   2d680:	9202      	str	r2, [sp, #8]
   2d682:	9a04      	ldr	r2, [sp, #16]
   2d684:	2331      	movs	r3, #49	; 0x31
   2d686:	7013      	strb	r3, [r2, #0]
   2d688:	e652      	b.n	2d330 <_dtoa_r+0x700>
   2d68a:	2301      	movs	r3, #1
   2d68c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d68e:	e666      	b.n	2d35e <_dtoa_r+0x72e>
   2d690:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d694:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d696:	e48f      	b.n	2cfb8 <_dtoa_r+0x388>
   2d698:	00031510 	.word	0x00031510
   2d69c:	000314e8 	.word	0x000314e8
   2d6a0:	3ff00000 	.word	0x3ff00000
   2d6a4:	401c0000 	.word	0x401c0000
   2d6a8:	3fe00000 	.word	0x3fe00000
   2d6ac:	40240000 	.word	0x40240000
   2d6b0:	40140000 	.word	0x40140000
   2d6b4:	4650      	mov	r0, sl
   2d6b6:	f7d3 f9e3 	bl	a80 <__aeabi_i2d>
   2d6ba:	463a      	mov	r2, r7
   2d6bc:	4643      	mov	r3, r8
   2d6be:	f7d3 fa45 	bl	b4c <__aeabi_dmul>
   2d6c2:	2200      	movs	r2, #0
   2d6c4:	4bc1      	ldr	r3, [pc, #772]	; (2d9cc <_dtoa_r+0xd9c>)
   2d6c6:	f7d3 f88f 	bl	7e8 <__adddf3>
   2d6ca:	4605      	mov	r5, r0
   2d6cc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d6d0:	4641      	mov	r1, r8
   2d6d2:	2200      	movs	r2, #0
   2d6d4:	4bbe      	ldr	r3, [pc, #760]	; (2d9d0 <_dtoa_r+0xda0>)
   2d6d6:	4638      	mov	r0, r7
   2d6d8:	f7d3 f884 	bl	7e4 <__aeabi_dsub>
   2d6dc:	462a      	mov	r2, r5
   2d6de:	4633      	mov	r3, r6
   2d6e0:	4682      	mov	sl, r0
   2d6e2:	468b      	mov	fp, r1
   2d6e4:	f7d3 fcc2 	bl	106c <__aeabi_dcmpgt>
   2d6e8:	4680      	mov	r8, r0
   2d6ea:	2800      	cmp	r0, #0
   2d6ec:	f040 8110 	bne.w	2d910 <_dtoa_r+0xce0>
   2d6f0:	462a      	mov	r2, r5
   2d6f2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d6f6:	4650      	mov	r0, sl
   2d6f8:	4659      	mov	r1, fp
   2d6fa:	f7d3 fc99 	bl	1030 <__aeabi_dcmplt>
   2d6fe:	b118      	cbz	r0, 2d708 <_dtoa_r+0xad8>
   2d700:	4646      	mov	r6, r8
   2d702:	e771      	b.n	2d5e8 <_dtoa_r+0x9b8>
   2d704:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d708:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d70c:	f7ff bb8a 	b.w	2ce24 <_dtoa_r+0x1f4>
   2d710:	9804      	ldr	r0, [sp, #16]
   2d712:	f7ff babb 	b.w	2cc8c <_dtoa_r+0x5c>
   2d716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d71a:	970c      	str	r7, [sp, #48]	; 0x30
   2d71c:	1afb      	subs	r3, r7, r3
   2d71e:	441a      	add	r2, r3
   2d720:	920d      	str	r2, [sp, #52]	; 0x34
   2d722:	2700      	movs	r7, #0
   2d724:	e469      	b.n	2cffa <_dtoa_r+0x3ca>
   2d726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d72a:	f04f 0a02 	mov.w	sl, #2
   2d72e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d732:	e657      	b.n	2d3e4 <_dtoa_r+0x7b4>
   2d734:	2100      	movs	r1, #0
   2d736:	2301      	movs	r3, #1
   2d738:	6461      	str	r1, [r4, #68]	; 0x44
   2d73a:	4620      	mov	r0, r4
   2d73c:	9325      	str	r3, [sp, #148]	; 0x94
   2d73e:	f000 fc6b 	bl	2e018 <_Balloc>
   2d742:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d744:	9004      	str	r0, [sp, #16]
   2d746:	6420      	str	r0, [r4, #64]	; 0x40
   2d748:	930a      	str	r3, [sp, #40]	; 0x28
   2d74a:	930f      	str	r3, [sp, #60]	; 0x3c
   2d74c:	e629      	b.n	2d3a2 <_dtoa_r+0x772>
   2d74e:	2a00      	cmp	r2, #0
   2d750:	46d0      	mov	r8, sl
   2d752:	f8cd b018 	str.w	fp, [sp, #24]
   2d756:	469a      	mov	sl, r3
   2d758:	dd11      	ble.n	2d77e <_dtoa_r+0xb4e>
   2d75a:	4649      	mov	r1, r9
   2d75c:	2201      	movs	r2, #1
   2d75e:	4620      	mov	r0, r4
   2d760:	f000 fe06 	bl	2e370 <__lshift>
   2d764:	4641      	mov	r1, r8
   2d766:	4681      	mov	r9, r0
   2d768:	f000 fe54 	bl	2e414 <__mcmp>
   2d76c:	2800      	cmp	r0, #0
   2d76e:	f340 8146 	ble.w	2d9fe <_dtoa_r+0xdce>
   2d772:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d776:	f000 8106 	beq.w	2d986 <_dtoa_r+0xd56>
   2d77a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d77e:	46b3      	mov	fp, r6
   2d780:	f887 a000 	strb.w	sl, [r7]
   2d784:	1c7d      	adds	r5, r7, #1
   2d786:	9e06      	ldr	r6, [sp, #24]
   2d788:	e5d2      	b.n	2d330 <_dtoa_r+0x700>
   2d78a:	d104      	bne.n	2d796 <_dtoa_r+0xb66>
   2d78c:	f01a 0f01 	tst.w	sl, #1
   2d790:	d001      	beq.n	2d796 <_dtoa_r+0xb66>
   2d792:	e5bd      	b.n	2d310 <_dtoa_r+0x6e0>
   2d794:	4615      	mov	r5, r2
   2d796:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d79a:	2b30      	cmp	r3, #48	; 0x30
   2d79c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d7a0:	d0f8      	beq.n	2d794 <_dtoa_r+0xb64>
   2d7a2:	e5c5      	b.n	2d330 <_dtoa_r+0x700>
   2d7a4:	9904      	ldr	r1, [sp, #16]
   2d7a6:	2230      	movs	r2, #48	; 0x30
   2d7a8:	700a      	strb	r2, [r1, #0]
   2d7aa:	9a02      	ldr	r2, [sp, #8]
   2d7ac:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d7b0:	3201      	adds	r2, #1
   2d7b2:	9202      	str	r2, [sp, #8]
   2d7b4:	f7ff bbfc 	b.w	2cfb0 <_dtoa_r+0x380>
   2d7b8:	f000 80bb 	beq.w	2d932 <_dtoa_r+0xd02>
   2d7bc:	9b02      	ldr	r3, [sp, #8]
   2d7be:	425d      	negs	r5, r3
   2d7c0:	4b84      	ldr	r3, [pc, #528]	; (2d9d4 <_dtoa_r+0xda4>)
   2d7c2:	f005 020f 	and.w	r2, r5, #15
   2d7c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d7ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d7d2:	f7d3 f9bb 	bl	b4c <__aeabi_dmul>
   2d7d6:	112d      	asrs	r5, r5, #4
   2d7d8:	4607      	mov	r7, r0
   2d7da:	4688      	mov	r8, r1
   2d7dc:	f000 812c 	beq.w	2da38 <_dtoa_r+0xe08>
   2d7e0:	4e7d      	ldr	r6, [pc, #500]	; (2d9d8 <_dtoa_r+0xda8>)
   2d7e2:	f04f 0a02 	mov.w	sl, #2
   2d7e6:	07eb      	lsls	r3, r5, #31
   2d7e8:	d509      	bpl.n	2d7fe <_dtoa_r+0xbce>
   2d7ea:	4638      	mov	r0, r7
   2d7ec:	4641      	mov	r1, r8
   2d7ee:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d7f2:	f7d3 f9ab 	bl	b4c <__aeabi_dmul>
   2d7f6:	f10a 0a01 	add.w	sl, sl, #1
   2d7fa:	4607      	mov	r7, r0
   2d7fc:	4688      	mov	r8, r1
   2d7fe:	106d      	asrs	r5, r5, #1
   2d800:	f106 0608 	add.w	r6, r6, #8
   2d804:	d1ef      	bne.n	2d7e6 <_dtoa_r+0xbb6>
   2d806:	e608      	b.n	2d41a <_dtoa_r+0x7ea>
   2d808:	6871      	ldr	r1, [r6, #4]
   2d80a:	4620      	mov	r0, r4
   2d80c:	f000 fc04 	bl	2e018 <_Balloc>
   2d810:	6933      	ldr	r3, [r6, #16]
   2d812:	3302      	adds	r3, #2
   2d814:	009a      	lsls	r2, r3, #2
   2d816:	4605      	mov	r5, r0
   2d818:	f106 010c 	add.w	r1, r6, #12
   2d81c:	300c      	adds	r0, #12
   2d81e:	f7d2 fd4f 	bl	2c0 <memcpy>
   2d822:	4629      	mov	r1, r5
   2d824:	2201      	movs	r2, #1
   2d826:	4620      	mov	r0, r4
   2d828:	f000 fda2 	bl	2e370 <__lshift>
   2d82c:	9006      	str	r0, [sp, #24]
   2d82e:	e4b5      	b.n	2d19c <_dtoa_r+0x56c>
   2d830:	2b39      	cmp	r3, #57	; 0x39
   2d832:	f8cd b018 	str.w	fp, [sp, #24]
   2d836:	46d0      	mov	r8, sl
   2d838:	f000 80a5 	beq.w	2d986 <_dtoa_r+0xd56>
   2d83c:	f103 0a01 	add.w	sl, r3, #1
   2d840:	46b3      	mov	fp, r6
   2d842:	f887 a000 	strb.w	sl, [r7]
   2d846:	1c7d      	adds	r5, r7, #1
   2d848:	9e06      	ldr	r6, [sp, #24]
   2d84a:	e571      	b.n	2d330 <_dtoa_r+0x700>
   2d84c:	465a      	mov	r2, fp
   2d84e:	46d0      	mov	r8, sl
   2d850:	46b3      	mov	fp, r6
   2d852:	469a      	mov	sl, r3
   2d854:	4616      	mov	r6, r2
   2d856:	e54f      	b.n	2d2f8 <_dtoa_r+0x6c8>
   2d858:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d85a:	495e      	ldr	r1, [pc, #376]	; (2d9d4 <_dtoa_r+0xda4>)
   2d85c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d860:	462a      	mov	r2, r5
   2d862:	4633      	mov	r3, r6
   2d864:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d868:	f7d3 f970 	bl	b4c <__aeabi_dmul>
   2d86c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d870:	4638      	mov	r0, r7
   2d872:	4641      	mov	r1, r8
   2d874:	f7d3 fc1a 	bl	10ac <__aeabi_d2iz>
   2d878:	4605      	mov	r5, r0
   2d87a:	f7d3 f901 	bl	a80 <__aeabi_i2d>
   2d87e:	460b      	mov	r3, r1
   2d880:	4602      	mov	r2, r0
   2d882:	4641      	mov	r1, r8
   2d884:	4638      	mov	r0, r7
   2d886:	f7d2 ffad 	bl	7e4 <__aeabi_dsub>
   2d88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d88c:	460f      	mov	r7, r1
   2d88e:	9904      	ldr	r1, [sp, #16]
   2d890:	3530      	adds	r5, #48	; 0x30
   2d892:	2b01      	cmp	r3, #1
   2d894:	700d      	strb	r5, [r1, #0]
   2d896:	4606      	mov	r6, r0
   2d898:	f101 0501 	add.w	r5, r1, #1
   2d89c:	d026      	beq.n	2d8ec <_dtoa_r+0xcbc>
   2d89e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d8a0:	9a04      	ldr	r2, [sp, #16]
   2d8a2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d9e0 <_dtoa_r+0xdb0>
   2d8a6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d8aa:	4413      	add	r3, r2
   2d8ac:	f04f 0a00 	mov.w	sl, #0
   2d8b0:	4699      	mov	r9, r3
   2d8b2:	4652      	mov	r2, sl
   2d8b4:	465b      	mov	r3, fp
   2d8b6:	4630      	mov	r0, r6
   2d8b8:	4639      	mov	r1, r7
   2d8ba:	f7d3 f947 	bl	b4c <__aeabi_dmul>
   2d8be:	460f      	mov	r7, r1
   2d8c0:	4606      	mov	r6, r0
   2d8c2:	f7d3 fbf3 	bl	10ac <__aeabi_d2iz>
   2d8c6:	4680      	mov	r8, r0
   2d8c8:	f7d3 f8da 	bl	a80 <__aeabi_i2d>
   2d8cc:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d8d0:	4602      	mov	r2, r0
   2d8d2:	460b      	mov	r3, r1
   2d8d4:	4630      	mov	r0, r6
   2d8d6:	4639      	mov	r1, r7
   2d8d8:	f7d2 ff84 	bl	7e4 <__aeabi_dsub>
   2d8dc:	f805 8b01 	strb.w	r8, [r5], #1
   2d8e0:	454d      	cmp	r5, r9
   2d8e2:	4606      	mov	r6, r0
   2d8e4:	460f      	mov	r7, r1
   2d8e6:	d1e4      	bne.n	2d8b2 <_dtoa_r+0xc82>
   2d8e8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d8ec:	4b3b      	ldr	r3, [pc, #236]	; (2d9dc <_dtoa_r+0xdac>)
   2d8ee:	2200      	movs	r2, #0
   2d8f0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d8f4:	f7d2 ff78 	bl	7e8 <__adddf3>
   2d8f8:	4632      	mov	r2, r6
   2d8fa:	463b      	mov	r3, r7
   2d8fc:	f7d3 fb98 	bl	1030 <__aeabi_dcmplt>
   2d900:	2800      	cmp	r0, #0
   2d902:	d046      	beq.n	2d992 <_dtoa_r+0xd62>
   2d904:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d906:	9302      	str	r3, [sp, #8]
   2d908:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d90c:	f7ff bb43 	b.w	2cf96 <_dtoa_r+0x366>
   2d910:	f04f 0800 	mov.w	r8, #0
   2d914:	4646      	mov	r6, r8
   2d916:	e6a9      	b.n	2d66c <_dtoa_r+0xa3c>
   2d918:	9b08      	ldr	r3, [sp, #32]
   2d91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d91c:	1a9d      	subs	r5, r3, r2
   2d91e:	2300      	movs	r3, #0
   2d920:	f7ff bb71 	b.w	2d006 <_dtoa_r+0x3d6>
   2d924:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d926:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d928:	9d08      	ldr	r5, [sp, #32]
   2d92a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d92e:	f7ff bb6a 	b.w	2d006 <_dtoa_r+0x3d6>
   2d932:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d936:	f04f 0a02 	mov.w	sl, #2
   2d93a:	e56e      	b.n	2d41a <_dtoa_r+0x7ea>
   2d93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d93e:	2b00      	cmp	r3, #0
   2d940:	f43f aeb8 	beq.w	2d6b4 <_dtoa_r+0xa84>
   2d944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d946:	2b00      	cmp	r3, #0
   2d948:	f77f aede 	ble.w	2d708 <_dtoa_r+0xad8>
   2d94c:	2200      	movs	r2, #0
   2d94e:	4b24      	ldr	r3, [pc, #144]	; (2d9e0 <_dtoa_r+0xdb0>)
   2d950:	4638      	mov	r0, r7
   2d952:	4641      	mov	r1, r8
   2d954:	f7d3 f8fa 	bl	b4c <__aeabi_dmul>
   2d958:	4607      	mov	r7, r0
   2d95a:	4688      	mov	r8, r1
   2d95c:	f10a 0001 	add.w	r0, sl, #1
   2d960:	f7d3 f88e 	bl	a80 <__aeabi_i2d>
   2d964:	463a      	mov	r2, r7
   2d966:	4643      	mov	r3, r8
   2d968:	f7d3 f8f0 	bl	b4c <__aeabi_dmul>
   2d96c:	2200      	movs	r2, #0
   2d96e:	4b17      	ldr	r3, [pc, #92]	; (2d9cc <_dtoa_r+0xd9c>)
   2d970:	f7d2 ff3a 	bl	7e8 <__adddf3>
   2d974:	9a02      	ldr	r2, [sp, #8]
   2d976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d978:	9312      	str	r3, [sp, #72]	; 0x48
   2d97a:	3a01      	subs	r2, #1
   2d97c:	4605      	mov	r5, r0
   2d97e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d982:	9215      	str	r2, [sp, #84]	; 0x54
   2d984:	e56a      	b.n	2d45c <_dtoa_r+0x82c>
   2d986:	2239      	movs	r2, #57	; 0x39
   2d988:	46b3      	mov	fp, r6
   2d98a:	703a      	strb	r2, [r7, #0]
   2d98c:	9e06      	ldr	r6, [sp, #24]
   2d98e:	1c7d      	adds	r5, r7, #1
   2d990:	e4c0      	b.n	2d314 <_dtoa_r+0x6e4>
   2d992:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d996:	2000      	movs	r0, #0
   2d998:	4910      	ldr	r1, [pc, #64]	; (2d9dc <_dtoa_r+0xdac>)
   2d99a:	f7d2 ff23 	bl	7e4 <__aeabi_dsub>
   2d99e:	4632      	mov	r2, r6
   2d9a0:	463b      	mov	r3, r7
   2d9a2:	f7d3 fb63 	bl	106c <__aeabi_dcmpgt>
   2d9a6:	b908      	cbnz	r0, 2d9ac <_dtoa_r+0xd7c>
   2d9a8:	e6ae      	b.n	2d708 <_dtoa_r+0xad8>
   2d9aa:	4615      	mov	r5, r2
   2d9ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d9b0:	2b30      	cmp	r3, #48	; 0x30
   2d9b2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d9b6:	d0f8      	beq.n	2d9aa <_dtoa_r+0xd7a>
   2d9b8:	e5d7      	b.n	2d56a <_dtoa_r+0x93a>
   2d9ba:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d9c0:	9302      	str	r3, [sp, #8]
   2d9c2:	f7ff bae8 	b.w	2cf96 <_dtoa_r+0x366>
   2d9c6:	970c      	str	r7, [sp, #48]	; 0x30
   2d9c8:	f7ff bba5 	b.w	2d116 <_dtoa_r+0x4e6>
   2d9cc:	401c0000 	.word	0x401c0000
   2d9d0:	40140000 	.word	0x40140000
   2d9d4:	00031510 	.word	0x00031510
   2d9d8:	000314e8 	.word	0x000314e8
   2d9dc:	3fe00000 	.word	0x3fe00000
   2d9e0:	40240000 	.word	0x40240000
   2d9e4:	2b39      	cmp	r3, #57	; 0x39
   2d9e6:	f8cd b018 	str.w	fp, [sp, #24]
   2d9ea:	46d0      	mov	r8, sl
   2d9ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d9f0:	469a      	mov	sl, r3
   2d9f2:	d0c8      	beq.n	2d986 <_dtoa_r+0xd56>
   2d9f4:	f1bb 0f00 	cmp.w	fp, #0
   2d9f8:	f73f aebf 	bgt.w	2d77a <_dtoa_r+0xb4a>
   2d9fc:	e6bf      	b.n	2d77e <_dtoa_r+0xb4e>
   2d9fe:	f47f aebe 	bne.w	2d77e <_dtoa_r+0xb4e>
   2da02:	f01a 0f01 	tst.w	sl, #1
   2da06:	f43f aeba 	beq.w	2d77e <_dtoa_r+0xb4e>
   2da0a:	e6b2      	b.n	2d772 <_dtoa_r+0xb42>
   2da0c:	f04f 0800 	mov.w	r8, #0
   2da10:	4646      	mov	r6, r8
   2da12:	e5e9      	b.n	2d5e8 <_dtoa_r+0x9b8>
   2da14:	4631      	mov	r1, r6
   2da16:	2300      	movs	r3, #0
   2da18:	220a      	movs	r2, #10
   2da1a:	4620      	mov	r0, r4
   2da1c:	f000 fb2c 	bl	2e078 <__multadd>
   2da20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da22:	2b00      	cmp	r3, #0
   2da24:	4606      	mov	r6, r0
   2da26:	dd0a      	ble.n	2da3e <_dtoa_r+0xe0e>
   2da28:	930a      	str	r3, [sp, #40]	; 0x28
   2da2a:	f7ff bbaa 	b.w	2d182 <_dtoa_r+0x552>
   2da2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2da30:	2b02      	cmp	r3, #2
   2da32:	dc23      	bgt.n	2da7c <_dtoa_r+0xe4c>
   2da34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da36:	e43b      	b.n	2d2b0 <_dtoa_r+0x680>
   2da38:	f04f 0a02 	mov.w	sl, #2
   2da3c:	e4ed      	b.n	2d41a <_dtoa_r+0x7ea>
   2da3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2da40:	2b02      	cmp	r3, #2
   2da42:	dc1b      	bgt.n	2da7c <_dtoa_r+0xe4c>
   2da44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da46:	e7ef      	b.n	2da28 <_dtoa_r+0xdf8>
   2da48:	2500      	movs	r5, #0
   2da4a:	6465      	str	r5, [r4, #68]	; 0x44
   2da4c:	4629      	mov	r1, r5
   2da4e:	4620      	mov	r0, r4
   2da50:	f000 fae2 	bl	2e018 <_Balloc>
   2da54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2da58:	930a      	str	r3, [sp, #40]	; 0x28
   2da5a:	930f      	str	r3, [sp, #60]	; 0x3c
   2da5c:	2301      	movs	r3, #1
   2da5e:	9004      	str	r0, [sp, #16]
   2da60:	9525      	str	r5, [sp, #148]	; 0x94
   2da62:	6420      	str	r0, [r4, #64]	; 0x40
   2da64:	930b      	str	r3, [sp, #44]	; 0x2c
   2da66:	f7ff b9dd 	b.w	2ce24 <_dtoa_r+0x1f4>
   2da6a:	2501      	movs	r5, #1
   2da6c:	f7ff b9a5 	b.w	2cdba <_dtoa_r+0x18a>
   2da70:	f43f ab69 	beq.w	2d146 <_dtoa_r+0x516>
   2da74:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2da78:	f7ff bbf9 	b.w	2d26e <_dtoa_r+0x63e>
   2da7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da7e:	930a      	str	r3, [sp, #40]	; 0x28
   2da80:	e5e5      	b.n	2d64e <_dtoa_r+0xa1e>
   2da82:	bf00      	nop

0002da84 <_localeconv_r>:
   2da84:	4a04      	ldr	r2, [pc, #16]	; (2da98 <_localeconv_r+0x14>)
   2da86:	4b05      	ldr	r3, [pc, #20]	; (2da9c <_localeconv_r+0x18>)
   2da88:	6812      	ldr	r2, [r2, #0]
   2da8a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2da8c:	2800      	cmp	r0, #0
   2da8e:	bf08      	it	eq
   2da90:	4618      	moveq	r0, r3
   2da92:	30f0      	adds	r0, #240	; 0xf0
   2da94:	4770      	bx	lr
   2da96:	bf00      	nop
   2da98:	2000c684 	.word	0x2000c684
   2da9c:	2000c518 	.word	0x2000c518

0002daa0 <_malloc_r>:
   2daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2daa4:	f101 060b 	add.w	r6, r1, #11
   2daa8:	2e16      	cmp	r6, #22
   2daaa:	b083      	sub	sp, #12
   2daac:	4605      	mov	r5, r0
   2daae:	f240 809e 	bls.w	2dbee <_malloc_r+0x14e>
   2dab2:	f036 0607 	bics.w	r6, r6, #7
   2dab6:	f100 80bd 	bmi.w	2dc34 <_malloc_r+0x194>
   2daba:	42b1      	cmp	r1, r6
   2dabc:	f200 80ba 	bhi.w	2dc34 <_malloc_r+0x194>
   2dac0:	f000 fa9e 	bl	2e000 <__malloc_lock>
   2dac4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2dac8:	f0c0 8293 	bcc.w	2dff2 <_malloc_r+0x552>
   2dacc:	0a73      	lsrs	r3, r6, #9
   2dace:	f000 80b8 	beq.w	2dc42 <_malloc_r+0x1a2>
   2dad2:	2b04      	cmp	r3, #4
   2dad4:	f200 8179 	bhi.w	2ddca <_malloc_r+0x32a>
   2dad8:	09b3      	lsrs	r3, r6, #6
   2dada:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2dade:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2dae2:	00c3      	lsls	r3, r0, #3
   2dae4:	4fbf      	ldr	r7, [pc, #764]	; (2dde4 <_malloc_r+0x344>)
   2dae6:	443b      	add	r3, r7
   2dae8:	f1a3 0108 	sub.w	r1, r3, #8
   2daec:	685c      	ldr	r4, [r3, #4]
   2daee:	42a1      	cmp	r1, r4
   2daf0:	d106      	bne.n	2db00 <_malloc_r+0x60>
   2daf2:	e00c      	b.n	2db0e <_malloc_r+0x6e>
   2daf4:	2a00      	cmp	r2, #0
   2daf6:	f280 80aa 	bge.w	2dc4e <_malloc_r+0x1ae>
   2dafa:	68e4      	ldr	r4, [r4, #12]
   2dafc:	42a1      	cmp	r1, r4
   2dafe:	d006      	beq.n	2db0e <_malloc_r+0x6e>
   2db00:	6863      	ldr	r3, [r4, #4]
   2db02:	f023 0303 	bic.w	r3, r3, #3
   2db06:	1b9a      	subs	r2, r3, r6
   2db08:	2a0f      	cmp	r2, #15
   2db0a:	ddf3      	ble.n	2daf4 <_malloc_r+0x54>
   2db0c:	4670      	mov	r0, lr
   2db0e:	693c      	ldr	r4, [r7, #16]
   2db10:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2ddf8 <_malloc_r+0x358>
   2db14:	4574      	cmp	r4, lr
   2db16:	f000 81ab 	beq.w	2de70 <_malloc_r+0x3d0>
   2db1a:	6863      	ldr	r3, [r4, #4]
   2db1c:	f023 0303 	bic.w	r3, r3, #3
   2db20:	1b9a      	subs	r2, r3, r6
   2db22:	2a0f      	cmp	r2, #15
   2db24:	f300 8190 	bgt.w	2de48 <_malloc_r+0x3a8>
   2db28:	2a00      	cmp	r2, #0
   2db2a:	f8c7 e014 	str.w	lr, [r7, #20]
   2db2e:	f8c7 e010 	str.w	lr, [r7, #16]
   2db32:	f280 809d 	bge.w	2dc70 <_malloc_r+0x1d0>
   2db36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2db3a:	f080 8161 	bcs.w	2de00 <_malloc_r+0x360>
   2db3e:	08db      	lsrs	r3, r3, #3
   2db40:	f103 0c01 	add.w	ip, r3, #1
   2db44:	1099      	asrs	r1, r3, #2
   2db46:	687a      	ldr	r2, [r7, #4]
   2db48:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2db4c:	f8c4 8008 	str.w	r8, [r4, #8]
   2db50:	2301      	movs	r3, #1
   2db52:	408b      	lsls	r3, r1
   2db54:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2db58:	4313      	orrs	r3, r2
   2db5a:	3908      	subs	r1, #8
   2db5c:	60e1      	str	r1, [r4, #12]
   2db5e:	607b      	str	r3, [r7, #4]
   2db60:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2db64:	f8c8 400c 	str.w	r4, [r8, #12]
   2db68:	1082      	asrs	r2, r0, #2
   2db6a:	2401      	movs	r4, #1
   2db6c:	4094      	lsls	r4, r2
   2db6e:	429c      	cmp	r4, r3
   2db70:	f200 808b 	bhi.w	2dc8a <_malloc_r+0x1ea>
   2db74:	421c      	tst	r4, r3
   2db76:	d106      	bne.n	2db86 <_malloc_r+0xe6>
   2db78:	f020 0003 	bic.w	r0, r0, #3
   2db7c:	0064      	lsls	r4, r4, #1
   2db7e:	421c      	tst	r4, r3
   2db80:	f100 0004 	add.w	r0, r0, #4
   2db84:	d0fa      	beq.n	2db7c <_malloc_r+0xdc>
   2db86:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2db8a:	46cc      	mov	ip, r9
   2db8c:	4680      	mov	r8, r0
   2db8e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2db92:	459c      	cmp	ip, r3
   2db94:	d107      	bne.n	2dba6 <_malloc_r+0x106>
   2db96:	e16d      	b.n	2de74 <_malloc_r+0x3d4>
   2db98:	2a00      	cmp	r2, #0
   2db9a:	f280 817b 	bge.w	2de94 <_malloc_r+0x3f4>
   2db9e:	68db      	ldr	r3, [r3, #12]
   2dba0:	459c      	cmp	ip, r3
   2dba2:	f000 8167 	beq.w	2de74 <_malloc_r+0x3d4>
   2dba6:	6859      	ldr	r1, [r3, #4]
   2dba8:	f021 0103 	bic.w	r1, r1, #3
   2dbac:	1b8a      	subs	r2, r1, r6
   2dbae:	2a0f      	cmp	r2, #15
   2dbb0:	ddf2      	ble.n	2db98 <_malloc_r+0xf8>
   2dbb2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2dbb6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2dbba:	9300      	str	r3, [sp, #0]
   2dbbc:	199c      	adds	r4, r3, r6
   2dbbe:	4628      	mov	r0, r5
   2dbc0:	f046 0601 	orr.w	r6, r6, #1
   2dbc4:	f042 0501 	orr.w	r5, r2, #1
   2dbc8:	605e      	str	r6, [r3, #4]
   2dbca:	f8c8 c00c 	str.w	ip, [r8, #12]
   2dbce:	f8cc 8008 	str.w	r8, [ip, #8]
   2dbd2:	617c      	str	r4, [r7, #20]
   2dbd4:	613c      	str	r4, [r7, #16]
   2dbd6:	f8c4 e00c 	str.w	lr, [r4, #12]
   2dbda:	f8c4 e008 	str.w	lr, [r4, #8]
   2dbde:	6065      	str	r5, [r4, #4]
   2dbe0:	505a      	str	r2, [r3, r1]
   2dbe2:	f000 fa13 	bl	2e00c <__malloc_unlock>
   2dbe6:	9b00      	ldr	r3, [sp, #0]
   2dbe8:	f103 0408 	add.w	r4, r3, #8
   2dbec:	e01e      	b.n	2dc2c <_malloc_r+0x18c>
   2dbee:	2910      	cmp	r1, #16
   2dbf0:	d820      	bhi.n	2dc34 <_malloc_r+0x194>
   2dbf2:	f000 fa05 	bl	2e000 <__malloc_lock>
   2dbf6:	2610      	movs	r6, #16
   2dbf8:	2318      	movs	r3, #24
   2dbfa:	2002      	movs	r0, #2
   2dbfc:	4f79      	ldr	r7, [pc, #484]	; (2dde4 <_malloc_r+0x344>)
   2dbfe:	443b      	add	r3, r7
   2dc00:	f1a3 0208 	sub.w	r2, r3, #8
   2dc04:	685c      	ldr	r4, [r3, #4]
   2dc06:	4294      	cmp	r4, r2
   2dc08:	f000 813d 	beq.w	2de86 <_malloc_r+0x3e6>
   2dc0c:	6863      	ldr	r3, [r4, #4]
   2dc0e:	68e1      	ldr	r1, [r4, #12]
   2dc10:	68a6      	ldr	r6, [r4, #8]
   2dc12:	f023 0303 	bic.w	r3, r3, #3
   2dc16:	4423      	add	r3, r4
   2dc18:	4628      	mov	r0, r5
   2dc1a:	685a      	ldr	r2, [r3, #4]
   2dc1c:	60f1      	str	r1, [r6, #12]
   2dc1e:	f042 0201 	orr.w	r2, r2, #1
   2dc22:	608e      	str	r6, [r1, #8]
   2dc24:	605a      	str	r2, [r3, #4]
   2dc26:	f000 f9f1 	bl	2e00c <__malloc_unlock>
   2dc2a:	3408      	adds	r4, #8
   2dc2c:	4620      	mov	r0, r4
   2dc2e:	b003      	add	sp, #12
   2dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc34:	2400      	movs	r4, #0
   2dc36:	230c      	movs	r3, #12
   2dc38:	4620      	mov	r0, r4
   2dc3a:	602b      	str	r3, [r5, #0]
   2dc3c:	b003      	add	sp, #12
   2dc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc42:	2040      	movs	r0, #64	; 0x40
   2dc44:	f44f 7300 	mov.w	r3, #512	; 0x200
   2dc48:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2dc4c:	e74a      	b.n	2dae4 <_malloc_r+0x44>
   2dc4e:	4423      	add	r3, r4
   2dc50:	68e1      	ldr	r1, [r4, #12]
   2dc52:	685a      	ldr	r2, [r3, #4]
   2dc54:	68a6      	ldr	r6, [r4, #8]
   2dc56:	f042 0201 	orr.w	r2, r2, #1
   2dc5a:	60f1      	str	r1, [r6, #12]
   2dc5c:	4628      	mov	r0, r5
   2dc5e:	608e      	str	r6, [r1, #8]
   2dc60:	605a      	str	r2, [r3, #4]
   2dc62:	f000 f9d3 	bl	2e00c <__malloc_unlock>
   2dc66:	3408      	adds	r4, #8
   2dc68:	4620      	mov	r0, r4
   2dc6a:	b003      	add	sp, #12
   2dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc70:	4423      	add	r3, r4
   2dc72:	4628      	mov	r0, r5
   2dc74:	685a      	ldr	r2, [r3, #4]
   2dc76:	f042 0201 	orr.w	r2, r2, #1
   2dc7a:	605a      	str	r2, [r3, #4]
   2dc7c:	f000 f9c6 	bl	2e00c <__malloc_unlock>
   2dc80:	3408      	adds	r4, #8
   2dc82:	4620      	mov	r0, r4
   2dc84:	b003      	add	sp, #12
   2dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc8a:	68bc      	ldr	r4, [r7, #8]
   2dc8c:	6863      	ldr	r3, [r4, #4]
   2dc8e:	f023 0803 	bic.w	r8, r3, #3
   2dc92:	45b0      	cmp	r8, r6
   2dc94:	d304      	bcc.n	2dca0 <_malloc_r+0x200>
   2dc96:	eba8 0306 	sub.w	r3, r8, r6
   2dc9a:	2b0f      	cmp	r3, #15
   2dc9c:	f300 8085 	bgt.w	2ddaa <_malloc_r+0x30a>
   2dca0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2ddfc <_malloc_r+0x35c>
   2dca4:	4b50      	ldr	r3, [pc, #320]	; (2dde8 <_malloc_r+0x348>)
   2dca6:	f8d9 2000 	ldr.w	r2, [r9]
   2dcaa:	681b      	ldr	r3, [r3, #0]
   2dcac:	3201      	adds	r2, #1
   2dcae:	4433      	add	r3, r6
   2dcb0:	eb04 0a08 	add.w	sl, r4, r8
   2dcb4:	f000 8155 	beq.w	2df62 <_malloc_r+0x4c2>
   2dcb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2dcbc:	330f      	adds	r3, #15
   2dcbe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2dcc2:	f02b 0b0f 	bic.w	fp, fp, #15
   2dcc6:	4659      	mov	r1, fp
   2dcc8:	4628      	mov	r0, r5
   2dcca:	f000 fc9f 	bl	2e60c <_sbrk_r>
   2dcce:	1c41      	adds	r1, r0, #1
   2dcd0:	4602      	mov	r2, r0
   2dcd2:	f000 80fc 	beq.w	2dece <_malloc_r+0x42e>
   2dcd6:	4582      	cmp	sl, r0
   2dcd8:	f200 80f7 	bhi.w	2deca <_malloc_r+0x42a>
   2dcdc:	4b43      	ldr	r3, [pc, #268]	; (2ddec <_malloc_r+0x34c>)
   2dcde:	6819      	ldr	r1, [r3, #0]
   2dce0:	4459      	add	r1, fp
   2dce2:	6019      	str	r1, [r3, #0]
   2dce4:	f000 814d 	beq.w	2df82 <_malloc_r+0x4e2>
   2dce8:	f8d9 0000 	ldr.w	r0, [r9]
   2dcec:	3001      	adds	r0, #1
   2dcee:	bf1b      	ittet	ne
   2dcf0:	eba2 0a0a 	subne.w	sl, r2, sl
   2dcf4:	4451      	addne	r1, sl
   2dcf6:	f8c9 2000 	streq.w	r2, [r9]
   2dcfa:	6019      	strne	r1, [r3, #0]
   2dcfc:	f012 0107 	ands.w	r1, r2, #7
   2dd00:	f000 8115 	beq.w	2df2e <_malloc_r+0x48e>
   2dd04:	f1c1 0008 	rsb	r0, r1, #8
   2dd08:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2dd0c:	4402      	add	r2, r0
   2dd0e:	3108      	adds	r1, #8
   2dd10:	eb02 090b 	add.w	r9, r2, fp
   2dd14:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2dd18:	eba1 0909 	sub.w	r9, r1, r9
   2dd1c:	4649      	mov	r1, r9
   2dd1e:	4628      	mov	r0, r5
   2dd20:	9301      	str	r3, [sp, #4]
   2dd22:	9200      	str	r2, [sp, #0]
   2dd24:	f000 fc72 	bl	2e60c <_sbrk_r>
   2dd28:	1c43      	adds	r3, r0, #1
   2dd2a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2dd2e:	f000 8143 	beq.w	2dfb8 <_malloc_r+0x518>
   2dd32:	1a80      	subs	r0, r0, r2
   2dd34:	4448      	add	r0, r9
   2dd36:	f040 0001 	orr.w	r0, r0, #1
   2dd3a:	6819      	ldr	r1, [r3, #0]
   2dd3c:	60ba      	str	r2, [r7, #8]
   2dd3e:	4449      	add	r1, r9
   2dd40:	42bc      	cmp	r4, r7
   2dd42:	6050      	str	r0, [r2, #4]
   2dd44:	6019      	str	r1, [r3, #0]
   2dd46:	d017      	beq.n	2dd78 <_malloc_r+0x2d8>
   2dd48:	f1b8 0f0f 	cmp.w	r8, #15
   2dd4c:	f240 80fb 	bls.w	2df46 <_malloc_r+0x4a6>
   2dd50:	6860      	ldr	r0, [r4, #4]
   2dd52:	f1a8 020c 	sub.w	r2, r8, #12
   2dd56:	f022 0207 	bic.w	r2, r2, #7
   2dd5a:	eb04 0e02 	add.w	lr, r4, r2
   2dd5e:	f000 0001 	and.w	r0, r0, #1
   2dd62:	f04f 0c05 	mov.w	ip, #5
   2dd66:	4310      	orrs	r0, r2
   2dd68:	2a0f      	cmp	r2, #15
   2dd6a:	6060      	str	r0, [r4, #4]
   2dd6c:	f8ce c004 	str.w	ip, [lr, #4]
   2dd70:	f8ce c008 	str.w	ip, [lr, #8]
   2dd74:	f200 8117 	bhi.w	2dfa6 <_malloc_r+0x506>
   2dd78:	4b1d      	ldr	r3, [pc, #116]	; (2ddf0 <_malloc_r+0x350>)
   2dd7a:	68bc      	ldr	r4, [r7, #8]
   2dd7c:	681a      	ldr	r2, [r3, #0]
   2dd7e:	4291      	cmp	r1, r2
   2dd80:	bf88      	it	hi
   2dd82:	6019      	strhi	r1, [r3, #0]
   2dd84:	4b1b      	ldr	r3, [pc, #108]	; (2ddf4 <_malloc_r+0x354>)
   2dd86:	681a      	ldr	r2, [r3, #0]
   2dd88:	4291      	cmp	r1, r2
   2dd8a:	6862      	ldr	r2, [r4, #4]
   2dd8c:	bf88      	it	hi
   2dd8e:	6019      	strhi	r1, [r3, #0]
   2dd90:	f022 0203 	bic.w	r2, r2, #3
   2dd94:	4296      	cmp	r6, r2
   2dd96:	eba2 0306 	sub.w	r3, r2, r6
   2dd9a:	d801      	bhi.n	2dda0 <_malloc_r+0x300>
   2dd9c:	2b0f      	cmp	r3, #15
   2dd9e:	dc04      	bgt.n	2ddaa <_malloc_r+0x30a>
   2dda0:	4628      	mov	r0, r5
   2dda2:	f000 f933 	bl	2e00c <__malloc_unlock>
   2dda6:	2400      	movs	r4, #0
   2dda8:	e740      	b.n	2dc2c <_malloc_r+0x18c>
   2ddaa:	19a2      	adds	r2, r4, r6
   2ddac:	f043 0301 	orr.w	r3, r3, #1
   2ddb0:	f046 0601 	orr.w	r6, r6, #1
   2ddb4:	6066      	str	r6, [r4, #4]
   2ddb6:	4628      	mov	r0, r5
   2ddb8:	60ba      	str	r2, [r7, #8]
   2ddba:	6053      	str	r3, [r2, #4]
   2ddbc:	f000 f926 	bl	2e00c <__malloc_unlock>
   2ddc0:	3408      	adds	r4, #8
   2ddc2:	4620      	mov	r0, r4
   2ddc4:	b003      	add	sp, #12
   2ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ddca:	2b14      	cmp	r3, #20
   2ddcc:	d971      	bls.n	2deb2 <_malloc_r+0x412>
   2ddce:	2b54      	cmp	r3, #84	; 0x54
   2ddd0:	f200 80a3 	bhi.w	2df1a <_malloc_r+0x47a>
   2ddd4:	0b33      	lsrs	r3, r6, #12
   2ddd6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2ddda:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2ddde:	00c3      	lsls	r3, r0, #3
   2dde0:	e680      	b.n	2dae4 <_malloc_r+0x44>
   2dde2:	bf00      	nop
   2dde4:	2000cab0 	.word	0x2000cab0
   2dde8:	20002870 	.word	0x20002870
   2ddec:	20002840 	.word	0x20002840
   2ddf0:	20002868 	.word	0x20002868
   2ddf4:	2000286c 	.word	0x2000286c
   2ddf8:	2000cab8 	.word	0x2000cab8
   2ddfc:	2000ceb8 	.word	0x2000ceb8
   2de00:	0a5a      	lsrs	r2, r3, #9
   2de02:	2a04      	cmp	r2, #4
   2de04:	d95b      	bls.n	2debe <_malloc_r+0x41e>
   2de06:	2a14      	cmp	r2, #20
   2de08:	f200 80ae 	bhi.w	2df68 <_malloc_r+0x4c8>
   2de0c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2de10:	00c9      	lsls	r1, r1, #3
   2de12:	325b      	adds	r2, #91	; 0x5b
   2de14:	eb07 0c01 	add.w	ip, r7, r1
   2de18:	5879      	ldr	r1, [r7, r1]
   2de1a:	f1ac 0c08 	sub.w	ip, ip, #8
   2de1e:	458c      	cmp	ip, r1
   2de20:	f000 8088 	beq.w	2df34 <_malloc_r+0x494>
   2de24:	684a      	ldr	r2, [r1, #4]
   2de26:	f022 0203 	bic.w	r2, r2, #3
   2de2a:	4293      	cmp	r3, r2
   2de2c:	d273      	bcs.n	2df16 <_malloc_r+0x476>
   2de2e:	6889      	ldr	r1, [r1, #8]
   2de30:	458c      	cmp	ip, r1
   2de32:	d1f7      	bne.n	2de24 <_malloc_r+0x384>
   2de34:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2de38:	687b      	ldr	r3, [r7, #4]
   2de3a:	60e2      	str	r2, [r4, #12]
   2de3c:	f8c4 c008 	str.w	ip, [r4, #8]
   2de40:	6094      	str	r4, [r2, #8]
   2de42:	f8cc 400c 	str.w	r4, [ip, #12]
   2de46:	e68f      	b.n	2db68 <_malloc_r+0xc8>
   2de48:	19a1      	adds	r1, r4, r6
   2de4a:	f046 0c01 	orr.w	ip, r6, #1
   2de4e:	f042 0601 	orr.w	r6, r2, #1
   2de52:	f8c4 c004 	str.w	ip, [r4, #4]
   2de56:	4628      	mov	r0, r5
   2de58:	6179      	str	r1, [r7, #20]
   2de5a:	6139      	str	r1, [r7, #16]
   2de5c:	f8c1 e00c 	str.w	lr, [r1, #12]
   2de60:	f8c1 e008 	str.w	lr, [r1, #8]
   2de64:	604e      	str	r6, [r1, #4]
   2de66:	50e2      	str	r2, [r4, r3]
   2de68:	f000 f8d0 	bl	2e00c <__malloc_unlock>
   2de6c:	3408      	adds	r4, #8
   2de6e:	e6dd      	b.n	2dc2c <_malloc_r+0x18c>
   2de70:	687b      	ldr	r3, [r7, #4]
   2de72:	e679      	b.n	2db68 <_malloc_r+0xc8>
   2de74:	f108 0801 	add.w	r8, r8, #1
   2de78:	f018 0f03 	tst.w	r8, #3
   2de7c:	f10c 0c08 	add.w	ip, ip, #8
   2de80:	f47f ae85 	bne.w	2db8e <_malloc_r+0xee>
   2de84:	e02d      	b.n	2dee2 <_malloc_r+0x442>
   2de86:	68dc      	ldr	r4, [r3, #12]
   2de88:	42a3      	cmp	r3, r4
   2de8a:	bf08      	it	eq
   2de8c:	3002      	addeq	r0, #2
   2de8e:	f43f ae3e 	beq.w	2db0e <_malloc_r+0x6e>
   2de92:	e6bb      	b.n	2dc0c <_malloc_r+0x16c>
   2de94:	4419      	add	r1, r3
   2de96:	461c      	mov	r4, r3
   2de98:	684a      	ldr	r2, [r1, #4]
   2de9a:	68db      	ldr	r3, [r3, #12]
   2de9c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2dea0:	f042 0201 	orr.w	r2, r2, #1
   2dea4:	604a      	str	r2, [r1, #4]
   2dea6:	4628      	mov	r0, r5
   2dea8:	60f3      	str	r3, [r6, #12]
   2deaa:	609e      	str	r6, [r3, #8]
   2deac:	f000 f8ae 	bl	2e00c <__malloc_unlock>
   2deb0:	e6bc      	b.n	2dc2c <_malloc_r+0x18c>
   2deb2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2deb6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2deba:	00c3      	lsls	r3, r0, #3
   2debc:	e612      	b.n	2dae4 <_malloc_r+0x44>
   2debe:	099a      	lsrs	r2, r3, #6
   2dec0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2dec4:	00c9      	lsls	r1, r1, #3
   2dec6:	3238      	adds	r2, #56	; 0x38
   2dec8:	e7a4      	b.n	2de14 <_malloc_r+0x374>
   2deca:	42bc      	cmp	r4, r7
   2decc:	d054      	beq.n	2df78 <_malloc_r+0x4d8>
   2dece:	68bc      	ldr	r4, [r7, #8]
   2ded0:	6862      	ldr	r2, [r4, #4]
   2ded2:	f022 0203 	bic.w	r2, r2, #3
   2ded6:	e75d      	b.n	2dd94 <_malloc_r+0x2f4>
   2ded8:	f859 3908 	ldr.w	r3, [r9], #-8
   2dedc:	4599      	cmp	r9, r3
   2dede:	f040 8086 	bne.w	2dfee <_malloc_r+0x54e>
   2dee2:	f010 0f03 	tst.w	r0, #3
   2dee6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2deea:	d1f5      	bne.n	2ded8 <_malloc_r+0x438>
   2deec:	687b      	ldr	r3, [r7, #4]
   2deee:	ea23 0304 	bic.w	r3, r3, r4
   2def2:	607b      	str	r3, [r7, #4]
   2def4:	0064      	lsls	r4, r4, #1
   2def6:	429c      	cmp	r4, r3
   2def8:	f63f aec7 	bhi.w	2dc8a <_malloc_r+0x1ea>
   2defc:	2c00      	cmp	r4, #0
   2defe:	f43f aec4 	beq.w	2dc8a <_malloc_r+0x1ea>
   2df02:	421c      	tst	r4, r3
   2df04:	4640      	mov	r0, r8
   2df06:	f47f ae3e 	bne.w	2db86 <_malloc_r+0xe6>
   2df0a:	0064      	lsls	r4, r4, #1
   2df0c:	421c      	tst	r4, r3
   2df0e:	f100 0004 	add.w	r0, r0, #4
   2df12:	d0fa      	beq.n	2df0a <_malloc_r+0x46a>
   2df14:	e637      	b.n	2db86 <_malloc_r+0xe6>
   2df16:	468c      	mov	ip, r1
   2df18:	e78c      	b.n	2de34 <_malloc_r+0x394>
   2df1a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2df1e:	d815      	bhi.n	2df4c <_malloc_r+0x4ac>
   2df20:	0bf3      	lsrs	r3, r6, #15
   2df22:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2df26:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2df2a:	00c3      	lsls	r3, r0, #3
   2df2c:	e5da      	b.n	2dae4 <_malloc_r+0x44>
   2df2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2df32:	e6ed      	b.n	2dd10 <_malloc_r+0x270>
   2df34:	687b      	ldr	r3, [r7, #4]
   2df36:	1092      	asrs	r2, r2, #2
   2df38:	2101      	movs	r1, #1
   2df3a:	fa01 f202 	lsl.w	r2, r1, r2
   2df3e:	4313      	orrs	r3, r2
   2df40:	607b      	str	r3, [r7, #4]
   2df42:	4662      	mov	r2, ip
   2df44:	e779      	b.n	2de3a <_malloc_r+0x39a>
   2df46:	2301      	movs	r3, #1
   2df48:	6053      	str	r3, [r2, #4]
   2df4a:	e729      	b.n	2dda0 <_malloc_r+0x300>
   2df4c:	f240 5254 	movw	r2, #1364	; 0x554
   2df50:	4293      	cmp	r3, r2
   2df52:	d822      	bhi.n	2df9a <_malloc_r+0x4fa>
   2df54:	0cb3      	lsrs	r3, r6, #18
   2df56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2df5a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2df5e:	00c3      	lsls	r3, r0, #3
   2df60:	e5c0      	b.n	2dae4 <_malloc_r+0x44>
   2df62:	f103 0b10 	add.w	fp, r3, #16
   2df66:	e6ae      	b.n	2dcc6 <_malloc_r+0x226>
   2df68:	2a54      	cmp	r2, #84	; 0x54
   2df6a:	d829      	bhi.n	2dfc0 <_malloc_r+0x520>
   2df6c:	0b1a      	lsrs	r2, r3, #12
   2df6e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2df72:	00c9      	lsls	r1, r1, #3
   2df74:	326e      	adds	r2, #110	; 0x6e
   2df76:	e74d      	b.n	2de14 <_malloc_r+0x374>
   2df78:	4b20      	ldr	r3, [pc, #128]	; (2dffc <_malloc_r+0x55c>)
   2df7a:	6819      	ldr	r1, [r3, #0]
   2df7c:	4459      	add	r1, fp
   2df7e:	6019      	str	r1, [r3, #0]
   2df80:	e6b2      	b.n	2dce8 <_malloc_r+0x248>
   2df82:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2df86:	2800      	cmp	r0, #0
   2df88:	f47f aeae 	bne.w	2dce8 <_malloc_r+0x248>
   2df8c:	eb08 030b 	add.w	r3, r8, fp
   2df90:	68ba      	ldr	r2, [r7, #8]
   2df92:	f043 0301 	orr.w	r3, r3, #1
   2df96:	6053      	str	r3, [r2, #4]
   2df98:	e6ee      	b.n	2dd78 <_malloc_r+0x2d8>
   2df9a:	207f      	movs	r0, #127	; 0x7f
   2df9c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2dfa0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2dfa4:	e59e      	b.n	2dae4 <_malloc_r+0x44>
   2dfa6:	f104 0108 	add.w	r1, r4, #8
   2dfaa:	4628      	mov	r0, r5
   2dfac:	9300      	str	r3, [sp, #0]
   2dfae:	f000 fc3d 	bl	2e82c <_free_r>
   2dfb2:	9b00      	ldr	r3, [sp, #0]
   2dfb4:	6819      	ldr	r1, [r3, #0]
   2dfb6:	e6df      	b.n	2dd78 <_malloc_r+0x2d8>
   2dfb8:	2001      	movs	r0, #1
   2dfba:	f04f 0900 	mov.w	r9, #0
   2dfbe:	e6bc      	b.n	2dd3a <_malloc_r+0x29a>
   2dfc0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2dfc4:	d805      	bhi.n	2dfd2 <_malloc_r+0x532>
   2dfc6:	0bda      	lsrs	r2, r3, #15
   2dfc8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2dfcc:	00c9      	lsls	r1, r1, #3
   2dfce:	3277      	adds	r2, #119	; 0x77
   2dfd0:	e720      	b.n	2de14 <_malloc_r+0x374>
   2dfd2:	f240 5154 	movw	r1, #1364	; 0x554
   2dfd6:	428a      	cmp	r2, r1
   2dfd8:	d805      	bhi.n	2dfe6 <_malloc_r+0x546>
   2dfda:	0c9a      	lsrs	r2, r3, #18
   2dfdc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2dfe0:	00c9      	lsls	r1, r1, #3
   2dfe2:	327c      	adds	r2, #124	; 0x7c
   2dfe4:	e716      	b.n	2de14 <_malloc_r+0x374>
   2dfe6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2dfea:	227e      	movs	r2, #126	; 0x7e
   2dfec:	e712      	b.n	2de14 <_malloc_r+0x374>
   2dfee:	687b      	ldr	r3, [r7, #4]
   2dff0:	e780      	b.n	2def4 <_malloc_r+0x454>
   2dff2:	08f0      	lsrs	r0, r6, #3
   2dff4:	f106 0308 	add.w	r3, r6, #8
   2dff8:	e600      	b.n	2dbfc <_malloc_r+0x15c>
   2dffa:	bf00      	nop
   2dffc:	20002840 	.word	0x20002840

0002e000 <__malloc_lock>:
   2e000:	4801      	ldr	r0, [pc, #4]	; (2e008 <__malloc_lock+0x8>)
   2e002:	f000 bcf9 	b.w	2e9f8 <__retarget_lock_acquire_recursive>
   2e006:	bf00      	nop
   2e008:	20002b98 	.word	0x20002b98

0002e00c <__malloc_unlock>:
   2e00c:	4801      	ldr	r0, [pc, #4]	; (2e014 <__malloc_unlock+0x8>)
   2e00e:	f000 bcf5 	b.w	2e9fc <__retarget_lock_release_recursive>
   2e012:	bf00      	nop
   2e014:	20002b98 	.word	0x20002b98

0002e018 <_Balloc>:
   2e018:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2e01a:	b570      	push	{r4, r5, r6, lr}
   2e01c:	4605      	mov	r5, r0
   2e01e:	460c      	mov	r4, r1
   2e020:	b14b      	cbz	r3, 2e036 <_Balloc+0x1e>
   2e022:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2e026:	b180      	cbz	r0, 2e04a <_Balloc+0x32>
   2e028:	6802      	ldr	r2, [r0, #0]
   2e02a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2e02e:	2300      	movs	r3, #0
   2e030:	6103      	str	r3, [r0, #16]
   2e032:	60c3      	str	r3, [r0, #12]
   2e034:	bd70      	pop	{r4, r5, r6, pc}
   2e036:	2221      	movs	r2, #33	; 0x21
   2e038:	2104      	movs	r1, #4
   2e03a:	f000 fb77 	bl	2e72c <_calloc_r>
   2e03e:	64e8      	str	r0, [r5, #76]	; 0x4c
   2e040:	4603      	mov	r3, r0
   2e042:	2800      	cmp	r0, #0
   2e044:	d1ed      	bne.n	2e022 <_Balloc+0xa>
   2e046:	2000      	movs	r0, #0
   2e048:	bd70      	pop	{r4, r5, r6, pc}
   2e04a:	2101      	movs	r1, #1
   2e04c:	fa01 f604 	lsl.w	r6, r1, r4
   2e050:	1d72      	adds	r2, r6, #5
   2e052:	4628      	mov	r0, r5
   2e054:	0092      	lsls	r2, r2, #2
   2e056:	f000 fb69 	bl	2e72c <_calloc_r>
   2e05a:	2800      	cmp	r0, #0
   2e05c:	d0f3      	beq.n	2e046 <_Balloc+0x2e>
   2e05e:	6044      	str	r4, [r0, #4]
   2e060:	6086      	str	r6, [r0, #8]
   2e062:	e7e4      	b.n	2e02e <_Balloc+0x16>

0002e064 <_Bfree>:
   2e064:	b131      	cbz	r1, 2e074 <_Bfree+0x10>
   2e066:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2e068:	684a      	ldr	r2, [r1, #4]
   2e06a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2e06e:	6008      	str	r0, [r1, #0]
   2e070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2e074:	4770      	bx	lr
   2e076:	bf00      	nop

0002e078 <__multadd>:
   2e078:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e07a:	690c      	ldr	r4, [r1, #16]
   2e07c:	b083      	sub	sp, #12
   2e07e:	460d      	mov	r5, r1
   2e080:	4606      	mov	r6, r0
   2e082:	f101 0e14 	add.w	lr, r1, #20
   2e086:	2700      	movs	r7, #0
   2e088:	f8de 0000 	ldr.w	r0, [lr]
   2e08c:	b281      	uxth	r1, r0
   2e08e:	fb02 3301 	mla	r3, r2, r1, r3
   2e092:	0c01      	lsrs	r1, r0, #16
   2e094:	0c18      	lsrs	r0, r3, #16
   2e096:	fb02 0101 	mla	r1, r2, r1, r0
   2e09a:	b29b      	uxth	r3, r3
   2e09c:	3701      	adds	r7, #1
   2e09e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2e0a2:	42bc      	cmp	r4, r7
   2e0a4:	f84e 3b04 	str.w	r3, [lr], #4
   2e0a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2e0ac:	dcec      	bgt.n	2e088 <__multadd+0x10>
   2e0ae:	b13b      	cbz	r3, 2e0c0 <__multadd+0x48>
   2e0b0:	68aa      	ldr	r2, [r5, #8]
   2e0b2:	4294      	cmp	r4, r2
   2e0b4:	da07      	bge.n	2e0c6 <__multadd+0x4e>
   2e0b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2e0ba:	3401      	adds	r4, #1
   2e0bc:	6153      	str	r3, [r2, #20]
   2e0be:	612c      	str	r4, [r5, #16]
   2e0c0:	4628      	mov	r0, r5
   2e0c2:	b003      	add	sp, #12
   2e0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e0c6:	6869      	ldr	r1, [r5, #4]
   2e0c8:	9301      	str	r3, [sp, #4]
   2e0ca:	3101      	adds	r1, #1
   2e0cc:	4630      	mov	r0, r6
   2e0ce:	f7ff ffa3 	bl	2e018 <_Balloc>
   2e0d2:	692a      	ldr	r2, [r5, #16]
   2e0d4:	3202      	adds	r2, #2
   2e0d6:	f105 010c 	add.w	r1, r5, #12
   2e0da:	4607      	mov	r7, r0
   2e0dc:	0092      	lsls	r2, r2, #2
   2e0de:	300c      	adds	r0, #12
   2e0e0:	f7d2 f8ee 	bl	2c0 <memcpy>
   2e0e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2e0e6:	6869      	ldr	r1, [r5, #4]
   2e0e8:	9b01      	ldr	r3, [sp, #4]
   2e0ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2e0ee:	6028      	str	r0, [r5, #0]
   2e0f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2e0f4:	463d      	mov	r5, r7
   2e0f6:	e7de      	b.n	2e0b6 <__multadd+0x3e>

0002e0f8 <__hi0bits>:
   2e0f8:	0c02      	lsrs	r2, r0, #16
   2e0fa:	0412      	lsls	r2, r2, #16
   2e0fc:	4603      	mov	r3, r0
   2e0fe:	b9b2      	cbnz	r2, 2e12e <__hi0bits+0x36>
   2e100:	0403      	lsls	r3, r0, #16
   2e102:	2010      	movs	r0, #16
   2e104:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2e108:	bf04      	itt	eq
   2e10a:	021b      	lsleq	r3, r3, #8
   2e10c:	3008      	addeq	r0, #8
   2e10e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2e112:	bf04      	itt	eq
   2e114:	011b      	lsleq	r3, r3, #4
   2e116:	3004      	addeq	r0, #4
   2e118:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2e11c:	bf04      	itt	eq
   2e11e:	009b      	lsleq	r3, r3, #2
   2e120:	3002      	addeq	r0, #2
   2e122:	2b00      	cmp	r3, #0
   2e124:	db02      	blt.n	2e12c <__hi0bits+0x34>
   2e126:	005b      	lsls	r3, r3, #1
   2e128:	d403      	bmi.n	2e132 <__hi0bits+0x3a>
   2e12a:	2020      	movs	r0, #32
   2e12c:	4770      	bx	lr
   2e12e:	2000      	movs	r0, #0
   2e130:	e7e8      	b.n	2e104 <__hi0bits+0xc>
   2e132:	3001      	adds	r0, #1
   2e134:	4770      	bx	lr
   2e136:	bf00      	nop

0002e138 <__lo0bits>:
   2e138:	6803      	ldr	r3, [r0, #0]
   2e13a:	f013 0207 	ands.w	r2, r3, #7
   2e13e:	4601      	mov	r1, r0
   2e140:	d007      	beq.n	2e152 <__lo0bits+0x1a>
   2e142:	07da      	lsls	r2, r3, #31
   2e144:	d421      	bmi.n	2e18a <__lo0bits+0x52>
   2e146:	0798      	lsls	r0, r3, #30
   2e148:	d421      	bmi.n	2e18e <__lo0bits+0x56>
   2e14a:	089b      	lsrs	r3, r3, #2
   2e14c:	600b      	str	r3, [r1, #0]
   2e14e:	2002      	movs	r0, #2
   2e150:	4770      	bx	lr
   2e152:	b298      	uxth	r0, r3
   2e154:	b198      	cbz	r0, 2e17e <__lo0bits+0x46>
   2e156:	4610      	mov	r0, r2
   2e158:	f013 0fff 	tst.w	r3, #255	; 0xff
   2e15c:	bf04      	itt	eq
   2e15e:	0a1b      	lsreq	r3, r3, #8
   2e160:	3008      	addeq	r0, #8
   2e162:	071a      	lsls	r2, r3, #28
   2e164:	bf04      	itt	eq
   2e166:	091b      	lsreq	r3, r3, #4
   2e168:	3004      	addeq	r0, #4
   2e16a:	079a      	lsls	r2, r3, #30
   2e16c:	bf04      	itt	eq
   2e16e:	089b      	lsreq	r3, r3, #2
   2e170:	3002      	addeq	r0, #2
   2e172:	07da      	lsls	r2, r3, #31
   2e174:	d407      	bmi.n	2e186 <__lo0bits+0x4e>
   2e176:	085b      	lsrs	r3, r3, #1
   2e178:	d104      	bne.n	2e184 <__lo0bits+0x4c>
   2e17a:	2020      	movs	r0, #32
   2e17c:	4770      	bx	lr
   2e17e:	0c1b      	lsrs	r3, r3, #16
   2e180:	2010      	movs	r0, #16
   2e182:	e7e9      	b.n	2e158 <__lo0bits+0x20>
   2e184:	3001      	adds	r0, #1
   2e186:	600b      	str	r3, [r1, #0]
   2e188:	4770      	bx	lr
   2e18a:	2000      	movs	r0, #0
   2e18c:	4770      	bx	lr
   2e18e:	085b      	lsrs	r3, r3, #1
   2e190:	600b      	str	r3, [r1, #0]
   2e192:	2001      	movs	r0, #1
   2e194:	4770      	bx	lr
   2e196:	bf00      	nop

0002e198 <__i2b>:
   2e198:	b510      	push	{r4, lr}
   2e19a:	460c      	mov	r4, r1
   2e19c:	2101      	movs	r1, #1
   2e19e:	f7ff ff3b 	bl	2e018 <_Balloc>
   2e1a2:	2201      	movs	r2, #1
   2e1a4:	6144      	str	r4, [r0, #20]
   2e1a6:	6102      	str	r2, [r0, #16]
   2e1a8:	bd10      	pop	{r4, pc}
   2e1aa:	bf00      	nop

0002e1ac <__multiply>:
   2e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1b0:	690c      	ldr	r4, [r1, #16]
   2e1b2:	6915      	ldr	r5, [r2, #16]
   2e1b4:	42ac      	cmp	r4, r5
   2e1b6:	b083      	sub	sp, #12
   2e1b8:	468b      	mov	fp, r1
   2e1ba:	4616      	mov	r6, r2
   2e1bc:	da04      	bge.n	2e1c8 <__multiply+0x1c>
   2e1be:	4622      	mov	r2, r4
   2e1c0:	46b3      	mov	fp, r6
   2e1c2:	462c      	mov	r4, r5
   2e1c4:	460e      	mov	r6, r1
   2e1c6:	4615      	mov	r5, r2
   2e1c8:	f8db 3008 	ldr.w	r3, [fp, #8]
   2e1cc:	f8db 1004 	ldr.w	r1, [fp, #4]
   2e1d0:	eb04 0805 	add.w	r8, r4, r5
   2e1d4:	4598      	cmp	r8, r3
   2e1d6:	bfc8      	it	gt
   2e1d8:	3101      	addgt	r1, #1
   2e1da:	f7ff ff1d 	bl	2e018 <_Balloc>
   2e1de:	f100 0914 	add.w	r9, r0, #20
   2e1e2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2e1e6:	45d1      	cmp	r9, sl
   2e1e8:	9000      	str	r0, [sp, #0]
   2e1ea:	d205      	bcs.n	2e1f8 <__multiply+0x4c>
   2e1ec:	464b      	mov	r3, r9
   2e1ee:	2100      	movs	r1, #0
   2e1f0:	f843 1b04 	str.w	r1, [r3], #4
   2e1f4:	459a      	cmp	sl, r3
   2e1f6:	d8fb      	bhi.n	2e1f0 <__multiply+0x44>
   2e1f8:	f106 0c14 	add.w	ip, r6, #20
   2e1fc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2e200:	f10b 0b14 	add.w	fp, fp, #20
   2e204:	459c      	cmp	ip, r3
   2e206:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2e20a:	d24c      	bcs.n	2e2a6 <__multiply+0xfa>
   2e20c:	f8cd a004 	str.w	sl, [sp, #4]
   2e210:	469a      	mov	sl, r3
   2e212:	f8dc 5000 	ldr.w	r5, [ip]
   2e216:	b2af      	uxth	r7, r5
   2e218:	b1ef      	cbz	r7, 2e256 <__multiply+0xaa>
   2e21a:	2100      	movs	r1, #0
   2e21c:	464d      	mov	r5, r9
   2e21e:	465e      	mov	r6, fp
   2e220:	460c      	mov	r4, r1
   2e222:	f856 2b04 	ldr.w	r2, [r6], #4
   2e226:	6828      	ldr	r0, [r5, #0]
   2e228:	b293      	uxth	r3, r2
   2e22a:	b281      	uxth	r1, r0
   2e22c:	fb07 1303 	mla	r3, r7, r3, r1
   2e230:	0c12      	lsrs	r2, r2, #16
   2e232:	0c01      	lsrs	r1, r0, #16
   2e234:	4423      	add	r3, r4
   2e236:	fb07 1102 	mla	r1, r7, r2, r1
   2e23a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2e23e:	b29b      	uxth	r3, r3
   2e240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2e244:	45b6      	cmp	lr, r6
   2e246:	f845 3b04 	str.w	r3, [r5], #4
   2e24a:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2e24e:	d8e8      	bhi.n	2e222 <__multiply+0x76>
   2e250:	602c      	str	r4, [r5, #0]
   2e252:	f8dc 5000 	ldr.w	r5, [ip]
   2e256:	0c2d      	lsrs	r5, r5, #16
   2e258:	d01d      	beq.n	2e296 <__multiply+0xea>
   2e25a:	f8d9 3000 	ldr.w	r3, [r9]
   2e25e:	4648      	mov	r0, r9
   2e260:	461c      	mov	r4, r3
   2e262:	4659      	mov	r1, fp
   2e264:	2200      	movs	r2, #0
   2e266:	880e      	ldrh	r6, [r1, #0]
   2e268:	0c24      	lsrs	r4, r4, #16
   2e26a:	fb05 4406 	mla	r4, r5, r6, r4
   2e26e:	4422      	add	r2, r4
   2e270:	b29b      	uxth	r3, r3
   2e272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e276:	f840 3b04 	str.w	r3, [r0], #4
   2e27a:	f851 3b04 	ldr.w	r3, [r1], #4
   2e27e:	6804      	ldr	r4, [r0, #0]
   2e280:	0c1b      	lsrs	r3, r3, #16
   2e282:	b2a6      	uxth	r6, r4
   2e284:	fb05 6303 	mla	r3, r5, r3, r6
   2e288:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2e28c:	458e      	cmp	lr, r1
   2e28e:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2e292:	d8e8      	bhi.n	2e266 <__multiply+0xba>
   2e294:	6003      	str	r3, [r0, #0]
   2e296:	f10c 0c04 	add.w	ip, ip, #4
   2e29a:	45e2      	cmp	sl, ip
   2e29c:	f109 0904 	add.w	r9, r9, #4
   2e2a0:	d8b7      	bhi.n	2e212 <__multiply+0x66>
   2e2a2:	f8dd a004 	ldr.w	sl, [sp, #4]
   2e2a6:	f1b8 0f00 	cmp.w	r8, #0
   2e2aa:	dd0b      	ble.n	2e2c4 <__multiply+0x118>
   2e2ac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2e2b0:	f1aa 0a04 	sub.w	sl, sl, #4
   2e2b4:	b11b      	cbz	r3, 2e2be <__multiply+0x112>
   2e2b6:	e005      	b.n	2e2c4 <__multiply+0x118>
   2e2b8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2e2bc:	b913      	cbnz	r3, 2e2c4 <__multiply+0x118>
   2e2be:	f1b8 0801 	subs.w	r8, r8, #1
   2e2c2:	d1f9      	bne.n	2e2b8 <__multiply+0x10c>
   2e2c4:	9800      	ldr	r0, [sp, #0]
   2e2c6:	f8c0 8010 	str.w	r8, [r0, #16]
   2e2ca:	b003      	add	sp, #12
   2e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e2d0 <__pow5mult>:
   2e2d0:	f012 0303 	ands.w	r3, r2, #3
   2e2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e2d8:	4614      	mov	r4, r2
   2e2da:	4607      	mov	r7, r0
   2e2dc:	d12e      	bne.n	2e33c <__pow5mult+0x6c>
   2e2de:	460d      	mov	r5, r1
   2e2e0:	10a4      	asrs	r4, r4, #2
   2e2e2:	d01c      	beq.n	2e31e <__pow5mult+0x4e>
   2e2e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2e2e6:	b396      	cbz	r6, 2e34e <__pow5mult+0x7e>
   2e2e8:	07e3      	lsls	r3, r4, #31
   2e2ea:	f04f 0800 	mov.w	r8, #0
   2e2ee:	d406      	bmi.n	2e2fe <__pow5mult+0x2e>
   2e2f0:	1064      	asrs	r4, r4, #1
   2e2f2:	d014      	beq.n	2e31e <__pow5mult+0x4e>
   2e2f4:	6830      	ldr	r0, [r6, #0]
   2e2f6:	b1a8      	cbz	r0, 2e324 <__pow5mult+0x54>
   2e2f8:	4606      	mov	r6, r0
   2e2fa:	07e3      	lsls	r3, r4, #31
   2e2fc:	d5f8      	bpl.n	2e2f0 <__pow5mult+0x20>
   2e2fe:	4632      	mov	r2, r6
   2e300:	4629      	mov	r1, r5
   2e302:	4638      	mov	r0, r7
   2e304:	f7ff ff52 	bl	2e1ac <__multiply>
   2e308:	b1b5      	cbz	r5, 2e338 <__pow5mult+0x68>
   2e30a:	686a      	ldr	r2, [r5, #4]
   2e30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e30e:	1064      	asrs	r4, r4, #1
   2e310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e314:	6029      	str	r1, [r5, #0]
   2e316:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2e31a:	4605      	mov	r5, r0
   2e31c:	d1ea      	bne.n	2e2f4 <__pow5mult+0x24>
   2e31e:	4628      	mov	r0, r5
   2e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e324:	4632      	mov	r2, r6
   2e326:	4631      	mov	r1, r6
   2e328:	4638      	mov	r0, r7
   2e32a:	f7ff ff3f 	bl	2e1ac <__multiply>
   2e32e:	6030      	str	r0, [r6, #0]
   2e330:	f8c0 8000 	str.w	r8, [r0]
   2e334:	4606      	mov	r6, r0
   2e336:	e7e0      	b.n	2e2fa <__pow5mult+0x2a>
   2e338:	4605      	mov	r5, r0
   2e33a:	e7d9      	b.n	2e2f0 <__pow5mult+0x20>
   2e33c:	1e5a      	subs	r2, r3, #1
   2e33e:	4d0b      	ldr	r5, [pc, #44]	; (2e36c <__pow5mult+0x9c>)
   2e340:	2300      	movs	r3, #0
   2e342:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2e346:	f7ff fe97 	bl	2e078 <__multadd>
   2e34a:	4605      	mov	r5, r0
   2e34c:	e7c8      	b.n	2e2e0 <__pow5mult+0x10>
   2e34e:	2101      	movs	r1, #1
   2e350:	4638      	mov	r0, r7
   2e352:	f7ff fe61 	bl	2e018 <_Balloc>
   2e356:	f240 2171 	movw	r1, #625	; 0x271
   2e35a:	2201      	movs	r2, #1
   2e35c:	2300      	movs	r3, #0
   2e35e:	6141      	str	r1, [r0, #20]
   2e360:	6102      	str	r2, [r0, #16]
   2e362:	4606      	mov	r6, r0
   2e364:	64b8      	str	r0, [r7, #72]	; 0x48
   2e366:	6003      	str	r3, [r0, #0]
   2e368:	e7be      	b.n	2e2e8 <__pow5mult+0x18>
   2e36a:	bf00      	nop
   2e36c:	000315d8 	.word	0x000315d8

0002e370 <__lshift>:
   2e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e374:	4691      	mov	r9, r2
   2e376:	690a      	ldr	r2, [r1, #16]
   2e378:	688b      	ldr	r3, [r1, #8]
   2e37a:	ea4f 1469 	mov.w	r4, r9, asr #5
   2e37e:	eb04 0802 	add.w	r8, r4, r2
   2e382:	f108 0501 	add.w	r5, r8, #1
   2e386:	429d      	cmp	r5, r3
   2e388:	460e      	mov	r6, r1
   2e38a:	4607      	mov	r7, r0
   2e38c:	6849      	ldr	r1, [r1, #4]
   2e38e:	dd04      	ble.n	2e39a <__lshift+0x2a>
   2e390:	005b      	lsls	r3, r3, #1
   2e392:	429d      	cmp	r5, r3
   2e394:	f101 0101 	add.w	r1, r1, #1
   2e398:	dcfa      	bgt.n	2e390 <__lshift+0x20>
   2e39a:	4638      	mov	r0, r7
   2e39c:	f7ff fe3c 	bl	2e018 <_Balloc>
   2e3a0:	2c00      	cmp	r4, #0
   2e3a2:	f100 0314 	add.w	r3, r0, #20
   2e3a6:	dd06      	ble.n	2e3b6 <__lshift+0x46>
   2e3a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2e3ac:	2100      	movs	r1, #0
   2e3ae:	f843 1b04 	str.w	r1, [r3], #4
   2e3b2:	429a      	cmp	r2, r3
   2e3b4:	d1fb      	bne.n	2e3ae <__lshift+0x3e>
   2e3b6:	6934      	ldr	r4, [r6, #16]
   2e3b8:	f106 0114 	add.w	r1, r6, #20
   2e3bc:	f019 091f 	ands.w	r9, r9, #31
   2e3c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2e3c4:	d01d      	beq.n	2e402 <__lshift+0x92>
   2e3c6:	f1c9 0c20 	rsb	ip, r9, #32
   2e3ca:	2200      	movs	r2, #0
   2e3cc:	680c      	ldr	r4, [r1, #0]
   2e3ce:	fa04 f409 	lsl.w	r4, r4, r9
   2e3d2:	4314      	orrs	r4, r2
   2e3d4:	f843 4b04 	str.w	r4, [r3], #4
   2e3d8:	f851 2b04 	ldr.w	r2, [r1], #4
   2e3dc:	458e      	cmp	lr, r1
   2e3de:	fa22 f20c 	lsr.w	r2, r2, ip
   2e3e2:	d8f3      	bhi.n	2e3cc <__lshift+0x5c>
   2e3e4:	601a      	str	r2, [r3, #0]
   2e3e6:	b10a      	cbz	r2, 2e3ec <__lshift+0x7c>
   2e3e8:	f108 0502 	add.w	r5, r8, #2
   2e3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e3ee:	6872      	ldr	r2, [r6, #4]
   2e3f0:	3d01      	subs	r5, #1
   2e3f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e3f6:	6105      	str	r5, [r0, #16]
   2e3f8:	6031      	str	r1, [r6, #0]
   2e3fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2e3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e402:	3b04      	subs	r3, #4
   2e404:	f851 2b04 	ldr.w	r2, [r1], #4
   2e408:	f843 2f04 	str.w	r2, [r3, #4]!
   2e40c:	458e      	cmp	lr, r1
   2e40e:	d8f9      	bhi.n	2e404 <__lshift+0x94>
   2e410:	e7ec      	b.n	2e3ec <__lshift+0x7c>
   2e412:	bf00      	nop

0002e414 <__mcmp>:
   2e414:	b430      	push	{r4, r5}
   2e416:	690b      	ldr	r3, [r1, #16]
   2e418:	4605      	mov	r5, r0
   2e41a:	6900      	ldr	r0, [r0, #16]
   2e41c:	1ac0      	subs	r0, r0, r3
   2e41e:	d10f      	bne.n	2e440 <__mcmp+0x2c>
   2e420:	009b      	lsls	r3, r3, #2
   2e422:	3514      	adds	r5, #20
   2e424:	3114      	adds	r1, #20
   2e426:	4419      	add	r1, r3
   2e428:	442b      	add	r3, r5
   2e42a:	e001      	b.n	2e430 <__mcmp+0x1c>
   2e42c:	429d      	cmp	r5, r3
   2e42e:	d207      	bcs.n	2e440 <__mcmp+0x2c>
   2e430:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2e434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e438:	4294      	cmp	r4, r2
   2e43a:	d0f7      	beq.n	2e42c <__mcmp+0x18>
   2e43c:	d302      	bcc.n	2e444 <__mcmp+0x30>
   2e43e:	2001      	movs	r0, #1
   2e440:	bc30      	pop	{r4, r5}
   2e442:	4770      	bx	lr
   2e444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e448:	e7fa      	b.n	2e440 <__mcmp+0x2c>
   2e44a:	bf00      	nop

0002e44c <__mdiff>:
   2e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e450:	690f      	ldr	r7, [r1, #16]
   2e452:	460e      	mov	r6, r1
   2e454:	6911      	ldr	r1, [r2, #16]
   2e456:	1a7f      	subs	r7, r7, r1
   2e458:	2f00      	cmp	r7, #0
   2e45a:	4690      	mov	r8, r2
   2e45c:	d117      	bne.n	2e48e <__mdiff+0x42>
   2e45e:	0089      	lsls	r1, r1, #2
   2e460:	f106 0514 	add.w	r5, r6, #20
   2e464:	f102 0e14 	add.w	lr, r2, #20
   2e468:	186b      	adds	r3, r5, r1
   2e46a:	4471      	add	r1, lr
   2e46c:	e001      	b.n	2e472 <__mdiff+0x26>
   2e46e:	429d      	cmp	r5, r3
   2e470:	d25c      	bcs.n	2e52c <__mdiff+0xe0>
   2e472:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2e476:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2e47a:	42a2      	cmp	r2, r4
   2e47c:	d0f7      	beq.n	2e46e <__mdiff+0x22>
   2e47e:	d25e      	bcs.n	2e53e <__mdiff+0xf2>
   2e480:	4633      	mov	r3, r6
   2e482:	462c      	mov	r4, r5
   2e484:	4646      	mov	r6, r8
   2e486:	4675      	mov	r5, lr
   2e488:	4698      	mov	r8, r3
   2e48a:	2701      	movs	r7, #1
   2e48c:	e005      	b.n	2e49a <__mdiff+0x4e>
   2e48e:	db58      	blt.n	2e542 <__mdiff+0xf6>
   2e490:	f106 0514 	add.w	r5, r6, #20
   2e494:	f108 0414 	add.w	r4, r8, #20
   2e498:	2700      	movs	r7, #0
   2e49a:	6871      	ldr	r1, [r6, #4]
   2e49c:	f7ff fdbc 	bl	2e018 <_Balloc>
   2e4a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e4a4:	6936      	ldr	r6, [r6, #16]
   2e4a6:	60c7      	str	r7, [r0, #12]
   2e4a8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e4ac:	46a6      	mov	lr, r4
   2e4ae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e4b2:	f100 0414 	add.w	r4, r0, #20
   2e4b6:	2300      	movs	r3, #0
   2e4b8:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e4bc:	f855 8b04 	ldr.w	r8, [r5], #4
   2e4c0:	b28a      	uxth	r2, r1
   2e4c2:	fa13 f388 	uxtah	r3, r3, r8
   2e4c6:	0c09      	lsrs	r1, r1, #16
   2e4c8:	1a9a      	subs	r2, r3, r2
   2e4ca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e4ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e4d2:	b292      	uxth	r2, r2
   2e4d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e4d8:	45f4      	cmp	ip, lr
   2e4da:	f844 2b04 	str.w	r2, [r4], #4
   2e4de:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e4e2:	d8e9      	bhi.n	2e4b8 <__mdiff+0x6c>
   2e4e4:	42af      	cmp	r7, r5
   2e4e6:	d917      	bls.n	2e518 <__mdiff+0xcc>
   2e4e8:	46a4      	mov	ip, r4
   2e4ea:	46ae      	mov	lr, r5
   2e4ec:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e4f0:	fa13 f382 	uxtah	r3, r3, r2
   2e4f4:	1419      	asrs	r1, r3, #16
   2e4f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e4fa:	b29b      	uxth	r3, r3
   2e4fc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e500:	4577      	cmp	r7, lr
   2e502:	f84c 2b04 	str.w	r2, [ip], #4
   2e506:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e50a:	d8ef      	bhi.n	2e4ec <__mdiff+0xa0>
   2e50c:	43ed      	mvns	r5, r5
   2e50e:	442f      	add	r7, r5
   2e510:	f027 0703 	bic.w	r7, r7, #3
   2e514:	3704      	adds	r7, #4
   2e516:	443c      	add	r4, r7
   2e518:	3c04      	subs	r4, #4
   2e51a:	b922      	cbnz	r2, 2e526 <__mdiff+0xda>
   2e51c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e520:	3e01      	subs	r6, #1
   2e522:	2b00      	cmp	r3, #0
   2e524:	d0fa      	beq.n	2e51c <__mdiff+0xd0>
   2e526:	6106      	str	r6, [r0, #16]
   2e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e52c:	2100      	movs	r1, #0
   2e52e:	f7ff fd73 	bl	2e018 <_Balloc>
   2e532:	2201      	movs	r2, #1
   2e534:	2300      	movs	r3, #0
   2e536:	6102      	str	r2, [r0, #16]
   2e538:	6143      	str	r3, [r0, #20]
   2e53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e53e:	4674      	mov	r4, lr
   2e540:	e7ab      	b.n	2e49a <__mdiff+0x4e>
   2e542:	4633      	mov	r3, r6
   2e544:	f106 0414 	add.w	r4, r6, #20
   2e548:	f102 0514 	add.w	r5, r2, #20
   2e54c:	4616      	mov	r6, r2
   2e54e:	2701      	movs	r7, #1
   2e550:	4698      	mov	r8, r3
   2e552:	e7a2      	b.n	2e49a <__mdiff+0x4e>

0002e554 <__d2b>:
   2e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e558:	b082      	sub	sp, #8
   2e55a:	2101      	movs	r1, #1
   2e55c:	461c      	mov	r4, r3
   2e55e:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e562:	4615      	mov	r5, r2
   2e564:	9e08      	ldr	r6, [sp, #32]
   2e566:	f7ff fd57 	bl	2e018 <_Balloc>
   2e56a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e56e:	4680      	mov	r8, r0
   2e570:	b10f      	cbz	r7, 2e576 <__d2b+0x22>
   2e572:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e576:	9401      	str	r4, [sp, #4]
   2e578:	b31d      	cbz	r5, 2e5c2 <__d2b+0x6e>
   2e57a:	a802      	add	r0, sp, #8
   2e57c:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e580:	f7ff fdda 	bl	2e138 <__lo0bits>
   2e584:	2800      	cmp	r0, #0
   2e586:	d134      	bne.n	2e5f2 <__d2b+0x9e>
   2e588:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e58c:	f8c8 2014 	str.w	r2, [r8, #20]
   2e590:	2b00      	cmp	r3, #0
   2e592:	bf0c      	ite	eq
   2e594:	2101      	moveq	r1, #1
   2e596:	2102      	movne	r1, #2
   2e598:	f8c8 3018 	str.w	r3, [r8, #24]
   2e59c:	f8c8 1010 	str.w	r1, [r8, #16]
   2e5a0:	b9df      	cbnz	r7, 2e5da <__d2b+0x86>
   2e5a2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e5a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e5aa:	6030      	str	r0, [r6, #0]
   2e5ac:	6918      	ldr	r0, [r3, #16]
   2e5ae:	f7ff fda3 	bl	2e0f8 <__hi0bits>
   2e5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e5b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e5b8:	6018      	str	r0, [r3, #0]
   2e5ba:	4640      	mov	r0, r8
   2e5bc:	b002      	add	sp, #8
   2e5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e5c2:	a801      	add	r0, sp, #4
   2e5c4:	f7ff fdb8 	bl	2e138 <__lo0bits>
   2e5c8:	9b01      	ldr	r3, [sp, #4]
   2e5ca:	f8c8 3014 	str.w	r3, [r8, #20]
   2e5ce:	2101      	movs	r1, #1
   2e5d0:	3020      	adds	r0, #32
   2e5d2:	f8c8 1010 	str.w	r1, [r8, #16]
   2e5d6:	2f00      	cmp	r7, #0
   2e5d8:	d0e3      	beq.n	2e5a2 <__d2b+0x4e>
   2e5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e5dc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e5e0:	4407      	add	r7, r0
   2e5e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e5e6:	6037      	str	r7, [r6, #0]
   2e5e8:	6018      	str	r0, [r3, #0]
   2e5ea:	4640      	mov	r0, r8
   2e5ec:	b002      	add	sp, #8
   2e5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e5f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e5f6:	f1c0 0220 	rsb	r2, r0, #32
   2e5fa:	fa03 f202 	lsl.w	r2, r3, r2
   2e5fe:	430a      	orrs	r2, r1
   2e600:	40c3      	lsrs	r3, r0
   2e602:	9301      	str	r3, [sp, #4]
   2e604:	f8c8 2014 	str.w	r2, [r8, #20]
   2e608:	e7c2      	b.n	2e590 <__d2b+0x3c>
   2e60a:	bf00      	nop

0002e60c <_sbrk_r>:
   2e60c:	b538      	push	{r3, r4, r5, lr}
   2e60e:	4c07      	ldr	r4, [pc, #28]	; (2e62c <_sbrk_r+0x20>)
   2e610:	2300      	movs	r3, #0
   2e612:	4605      	mov	r5, r0
   2e614:	4608      	mov	r0, r1
   2e616:	6023      	str	r3, [r4, #0]
   2e618:	f7d3 f9f2 	bl	1a00 <_sbrk>
   2e61c:	1c43      	adds	r3, r0, #1
   2e61e:	d000      	beq.n	2e622 <_sbrk_r+0x16>
   2e620:	bd38      	pop	{r3, r4, r5, pc}
   2e622:	6823      	ldr	r3, [r4, #0]
   2e624:	2b00      	cmp	r3, #0
   2e626:	d0fb      	beq.n	2e620 <_sbrk_r+0x14>
   2e628:	602b      	str	r3, [r5, #0]
   2e62a:	bd38      	pop	{r3, r4, r5, pc}
   2e62c:	20002bac 	.word	0x20002bac

0002e630 <__ssprint_r>:
   2e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e634:	6893      	ldr	r3, [r2, #8]
   2e636:	b083      	sub	sp, #12
   2e638:	4690      	mov	r8, r2
   2e63a:	2b00      	cmp	r3, #0
   2e63c:	d070      	beq.n	2e720 <__ssprint_r+0xf0>
   2e63e:	4682      	mov	sl, r0
   2e640:	460c      	mov	r4, r1
   2e642:	6817      	ldr	r7, [r2, #0]
   2e644:	688d      	ldr	r5, [r1, #8]
   2e646:	6808      	ldr	r0, [r1, #0]
   2e648:	e042      	b.n	2e6d0 <__ssprint_r+0xa0>
   2e64a:	89a3      	ldrh	r3, [r4, #12]
   2e64c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e650:	d02e      	beq.n	2e6b0 <__ssprint_r+0x80>
   2e652:	6965      	ldr	r5, [r4, #20]
   2e654:	6921      	ldr	r1, [r4, #16]
   2e656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e65a:	eba0 0b01 	sub.w	fp, r0, r1
   2e65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e662:	f10b 0001 	add.w	r0, fp, #1
   2e666:	106d      	asrs	r5, r5, #1
   2e668:	4430      	add	r0, r6
   2e66a:	42a8      	cmp	r0, r5
   2e66c:	462a      	mov	r2, r5
   2e66e:	bf84      	itt	hi
   2e670:	4605      	movhi	r5, r0
   2e672:	462a      	movhi	r2, r5
   2e674:	055b      	lsls	r3, r3, #21
   2e676:	d538      	bpl.n	2e6ea <__ssprint_r+0xba>
   2e678:	4611      	mov	r1, r2
   2e67a:	4650      	mov	r0, sl
   2e67c:	f7ff fa10 	bl	2daa0 <_malloc_r>
   2e680:	2800      	cmp	r0, #0
   2e682:	d03c      	beq.n	2e6fe <__ssprint_r+0xce>
   2e684:	465a      	mov	r2, fp
   2e686:	6921      	ldr	r1, [r4, #16]
   2e688:	9001      	str	r0, [sp, #4]
   2e68a:	f7d1 fe19 	bl	2c0 <memcpy>
   2e68e:	89a2      	ldrh	r2, [r4, #12]
   2e690:	9b01      	ldr	r3, [sp, #4]
   2e692:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e69a:	81a2      	strh	r2, [r4, #12]
   2e69c:	eba5 020b 	sub.w	r2, r5, fp
   2e6a0:	eb03 000b 	add.w	r0, r3, fp
   2e6a4:	6165      	str	r5, [r4, #20]
   2e6a6:	6123      	str	r3, [r4, #16]
   2e6a8:	6020      	str	r0, [r4, #0]
   2e6aa:	60a2      	str	r2, [r4, #8]
   2e6ac:	4635      	mov	r5, r6
   2e6ae:	46b3      	mov	fp, r6
   2e6b0:	465a      	mov	r2, fp
   2e6b2:	4649      	mov	r1, r9
   2e6b4:	f7fc f99e 	bl	2a9f4 <memmove>
   2e6b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e6bc:	68a2      	ldr	r2, [r4, #8]
   2e6be:	6820      	ldr	r0, [r4, #0]
   2e6c0:	1b55      	subs	r5, r2, r5
   2e6c2:	4458      	add	r0, fp
   2e6c4:	1b9e      	subs	r6, r3, r6
   2e6c6:	60a5      	str	r5, [r4, #8]
   2e6c8:	6020      	str	r0, [r4, #0]
   2e6ca:	f8c8 6008 	str.w	r6, [r8, #8]
   2e6ce:	b33e      	cbz	r6, 2e720 <__ssprint_r+0xf0>
   2e6d0:	687e      	ldr	r6, [r7, #4]
   2e6d2:	463b      	mov	r3, r7
   2e6d4:	3708      	adds	r7, #8
   2e6d6:	2e00      	cmp	r6, #0
   2e6d8:	d0fa      	beq.n	2e6d0 <__ssprint_r+0xa0>
   2e6da:	42ae      	cmp	r6, r5
   2e6dc:	f8d3 9000 	ldr.w	r9, [r3]
   2e6e0:	46ab      	mov	fp, r5
   2e6e2:	d2b2      	bcs.n	2e64a <__ssprint_r+0x1a>
   2e6e4:	4635      	mov	r5, r6
   2e6e6:	46b3      	mov	fp, r6
   2e6e8:	e7e2      	b.n	2e6b0 <__ssprint_r+0x80>
   2e6ea:	4650      	mov	r0, sl
   2e6ec:	f000 f988 	bl	2ea00 <_realloc_r>
   2e6f0:	4603      	mov	r3, r0
   2e6f2:	2800      	cmp	r0, #0
   2e6f4:	d1d2      	bne.n	2e69c <__ssprint_r+0x6c>
   2e6f6:	6921      	ldr	r1, [r4, #16]
   2e6f8:	4650      	mov	r0, sl
   2e6fa:	f000 f897 	bl	2e82c <_free_r>
   2e6fe:	230c      	movs	r3, #12
   2e700:	f8ca 3000 	str.w	r3, [sl]
   2e704:	89a3      	ldrh	r3, [r4, #12]
   2e706:	2200      	movs	r2, #0
   2e708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e710:	81a3      	strh	r3, [r4, #12]
   2e712:	f8c8 2008 	str.w	r2, [r8, #8]
   2e716:	f8c8 2004 	str.w	r2, [r8, #4]
   2e71a:	b003      	add	sp, #12
   2e71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e720:	2000      	movs	r0, #0
   2e722:	f8c8 0004 	str.w	r0, [r8, #4]
   2e726:	b003      	add	sp, #12
   2e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e72c <_calloc_r>:
   2e72c:	b510      	push	{r4, lr}
   2e72e:	fb02 f101 	mul.w	r1, r2, r1
   2e732:	f7ff f9b5 	bl	2daa0 <_malloc_r>
   2e736:	4604      	mov	r4, r0
   2e738:	b1d8      	cbz	r0, 2e772 <_calloc_r+0x46>
   2e73a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2e73e:	f022 0203 	bic.w	r2, r2, #3
   2e742:	3a04      	subs	r2, #4
   2e744:	2a24      	cmp	r2, #36	; 0x24
   2e746:	d818      	bhi.n	2e77a <_calloc_r+0x4e>
   2e748:	2a13      	cmp	r2, #19
   2e74a:	d914      	bls.n	2e776 <_calloc_r+0x4a>
   2e74c:	2300      	movs	r3, #0
   2e74e:	2a1b      	cmp	r2, #27
   2e750:	6003      	str	r3, [r0, #0]
   2e752:	6043      	str	r3, [r0, #4]
   2e754:	d916      	bls.n	2e784 <_calloc_r+0x58>
   2e756:	2a24      	cmp	r2, #36	; 0x24
   2e758:	6083      	str	r3, [r0, #8]
   2e75a:	60c3      	str	r3, [r0, #12]
   2e75c:	bf11      	iteee	ne
   2e75e:	f100 0210 	addne.w	r2, r0, #16
   2e762:	6103      	streq	r3, [r0, #16]
   2e764:	6143      	streq	r3, [r0, #20]
   2e766:	f100 0218 	addeq.w	r2, r0, #24
   2e76a:	2300      	movs	r3, #0
   2e76c:	6013      	str	r3, [r2, #0]
   2e76e:	6053      	str	r3, [r2, #4]
   2e770:	6093      	str	r3, [r2, #8]
   2e772:	4620      	mov	r0, r4
   2e774:	bd10      	pop	{r4, pc}
   2e776:	4602      	mov	r2, r0
   2e778:	e7f7      	b.n	2e76a <_calloc_r+0x3e>
   2e77a:	2100      	movs	r1, #0
   2e77c:	f7fc f99e 	bl	2aabc <memset>
   2e780:	4620      	mov	r0, r4
   2e782:	bd10      	pop	{r4, pc}
   2e784:	f100 0208 	add.w	r2, r0, #8
   2e788:	e7ef      	b.n	2e76a <_calloc_r+0x3e>
   2e78a:	bf00      	nop

0002e78c <_malloc_trim_r>:
   2e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e78e:	4f24      	ldr	r7, [pc, #144]	; (2e820 <_malloc_trim_r+0x94>)
   2e790:	460c      	mov	r4, r1
   2e792:	4606      	mov	r6, r0
   2e794:	f7ff fc34 	bl	2e000 <__malloc_lock>
   2e798:	68bb      	ldr	r3, [r7, #8]
   2e79a:	685d      	ldr	r5, [r3, #4]
   2e79c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2e7a0:	310f      	adds	r1, #15
   2e7a2:	f025 0503 	bic.w	r5, r5, #3
   2e7a6:	4429      	add	r1, r5
   2e7a8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2e7ac:	f021 010f 	bic.w	r1, r1, #15
   2e7b0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2e7b4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2e7b8:	db07      	blt.n	2e7ca <_malloc_trim_r+0x3e>
   2e7ba:	2100      	movs	r1, #0
   2e7bc:	4630      	mov	r0, r6
   2e7be:	f7ff ff25 	bl	2e60c <_sbrk_r>
   2e7c2:	68bb      	ldr	r3, [r7, #8]
   2e7c4:	442b      	add	r3, r5
   2e7c6:	4298      	cmp	r0, r3
   2e7c8:	d004      	beq.n	2e7d4 <_malloc_trim_r+0x48>
   2e7ca:	4630      	mov	r0, r6
   2e7cc:	f7ff fc1e 	bl	2e00c <__malloc_unlock>
   2e7d0:	2000      	movs	r0, #0
   2e7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e7d4:	4261      	negs	r1, r4
   2e7d6:	4630      	mov	r0, r6
   2e7d8:	f7ff ff18 	bl	2e60c <_sbrk_r>
   2e7dc:	3001      	adds	r0, #1
   2e7de:	d00d      	beq.n	2e7fc <_malloc_trim_r+0x70>
   2e7e0:	4b10      	ldr	r3, [pc, #64]	; (2e824 <_malloc_trim_r+0x98>)
   2e7e2:	68ba      	ldr	r2, [r7, #8]
   2e7e4:	6819      	ldr	r1, [r3, #0]
   2e7e6:	1b2d      	subs	r5, r5, r4
   2e7e8:	f045 0501 	orr.w	r5, r5, #1
   2e7ec:	4630      	mov	r0, r6
   2e7ee:	1b09      	subs	r1, r1, r4
   2e7f0:	6055      	str	r5, [r2, #4]
   2e7f2:	6019      	str	r1, [r3, #0]
   2e7f4:	f7ff fc0a 	bl	2e00c <__malloc_unlock>
   2e7f8:	2001      	movs	r0, #1
   2e7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e7fc:	2100      	movs	r1, #0
   2e7fe:	4630      	mov	r0, r6
   2e800:	f7ff ff04 	bl	2e60c <_sbrk_r>
   2e804:	68ba      	ldr	r2, [r7, #8]
   2e806:	1a83      	subs	r3, r0, r2
   2e808:	2b0f      	cmp	r3, #15
   2e80a:	ddde      	ble.n	2e7ca <_malloc_trim_r+0x3e>
   2e80c:	4c06      	ldr	r4, [pc, #24]	; (2e828 <_malloc_trim_r+0x9c>)
   2e80e:	4905      	ldr	r1, [pc, #20]	; (2e824 <_malloc_trim_r+0x98>)
   2e810:	6824      	ldr	r4, [r4, #0]
   2e812:	f043 0301 	orr.w	r3, r3, #1
   2e816:	1b00      	subs	r0, r0, r4
   2e818:	6053      	str	r3, [r2, #4]
   2e81a:	6008      	str	r0, [r1, #0]
   2e81c:	e7d5      	b.n	2e7ca <_malloc_trim_r+0x3e>
   2e81e:	bf00      	nop
   2e820:	2000cab0 	.word	0x2000cab0
   2e824:	20002840 	.word	0x20002840
   2e828:	2000ceb8 	.word	0x2000ceb8

0002e82c <_free_r>:
   2e82c:	2900      	cmp	r1, #0
   2e82e:	d044      	beq.n	2e8ba <_free_r+0x8e>
   2e830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e834:	460d      	mov	r5, r1
   2e836:	4680      	mov	r8, r0
   2e838:	f7ff fbe2 	bl	2e000 <__malloc_lock>
   2e83c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2e840:	4969      	ldr	r1, [pc, #420]	; (2e9e8 <_free_r+0x1bc>)
   2e842:	f027 0301 	bic.w	r3, r7, #1
   2e846:	f1a5 0408 	sub.w	r4, r5, #8
   2e84a:	18e2      	adds	r2, r4, r3
   2e84c:	688e      	ldr	r6, [r1, #8]
   2e84e:	6850      	ldr	r0, [r2, #4]
   2e850:	42b2      	cmp	r2, r6
   2e852:	f020 0003 	bic.w	r0, r0, #3
   2e856:	d05e      	beq.n	2e916 <_free_r+0xea>
   2e858:	07fe      	lsls	r6, r7, #31
   2e85a:	6050      	str	r0, [r2, #4]
   2e85c:	d40b      	bmi.n	2e876 <_free_r+0x4a>
   2e85e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2e862:	1be4      	subs	r4, r4, r7
   2e864:	f101 0e08 	add.w	lr, r1, #8
   2e868:	68a5      	ldr	r5, [r4, #8]
   2e86a:	4575      	cmp	r5, lr
   2e86c:	443b      	add	r3, r7
   2e86e:	d06d      	beq.n	2e94c <_free_r+0x120>
   2e870:	68e7      	ldr	r7, [r4, #12]
   2e872:	60ef      	str	r7, [r5, #12]
   2e874:	60bd      	str	r5, [r7, #8]
   2e876:	1815      	adds	r5, r2, r0
   2e878:	686d      	ldr	r5, [r5, #4]
   2e87a:	07ed      	lsls	r5, r5, #31
   2e87c:	d53e      	bpl.n	2e8fc <_free_r+0xd0>
   2e87e:	f043 0201 	orr.w	r2, r3, #1
   2e882:	6062      	str	r2, [r4, #4]
   2e884:	50e3      	str	r3, [r4, r3]
   2e886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2e88a:	d217      	bcs.n	2e8bc <_free_r+0x90>
   2e88c:	08db      	lsrs	r3, r3, #3
   2e88e:	1c58      	adds	r0, r3, #1
   2e890:	109a      	asrs	r2, r3, #2
   2e892:	684d      	ldr	r5, [r1, #4]
   2e894:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2e898:	60a7      	str	r7, [r4, #8]
   2e89a:	2301      	movs	r3, #1
   2e89c:	4093      	lsls	r3, r2
   2e89e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2e8a2:	432b      	orrs	r3, r5
   2e8a4:	3a08      	subs	r2, #8
   2e8a6:	60e2      	str	r2, [r4, #12]
   2e8a8:	604b      	str	r3, [r1, #4]
   2e8aa:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2e8ae:	60fc      	str	r4, [r7, #12]
   2e8b0:	4640      	mov	r0, r8
   2e8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e8b6:	f7ff bba9 	b.w	2e00c <__malloc_unlock>
   2e8ba:	4770      	bx	lr
   2e8bc:	0a5a      	lsrs	r2, r3, #9
   2e8be:	2a04      	cmp	r2, #4
   2e8c0:	d852      	bhi.n	2e968 <_free_r+0x13c>
   2e8c2:	099a      	lsrs	r2, r3, #6
   2e8c4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2e8c8:	00ff      	lsls	r7, r7, #3
   2e8ca:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2e8ce:	19c8      	adds	r0, r1, r7
   2e8d0:	59ca      	ldr	r2, [r1, r7]
   2e8d2:	3808      	subs	r0, #8
   2e8d4:	4290      	cmp	r0, r2
   2e8d6:	d04f      	beq.n	2e978 <_free_r+0x14c>
   2e8d8:	6851      	ldr	r1, [r2, #4]
   2e8da:	f021 0103 	bic.w	r1, r1, #3
   2e8de:	428b      	cmp	r3, r1
   2e8e0:	d232      	bcs.n	2e948 <_free_r+0x11c>
   2e8e2:	6892      	ldr	r2, [r2, #8]
   2e8e4:	4290      	cmp	r0, r2
   2e8e6:	d1f7      	bne.n	2e8d8 <_free_r+0xac>
   2e8e8:	68c3      	ldr	r3, [r0, #12]
   2e8ea:	60a0      	str	r0, [r4, #8]
   2e8ec:	60e3      	str	r3, [r4, #12]
   2e8ee:	609c      	str	r4, [r3, #8]
   2e8f0:	60c4      	str	r4, [r0, #12]
   2e8f2:	4640      	mov	r0, r8
   2e8f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e8f8:	f7ff bb88 	b.w	2e00c <__malloc_unlock>
   2e8fc:	6895      	ldr	r5, [r2, #8]
   2e8fe:	4f3b      	ldr	r7, [pc, #236]	; (2e9ec <_free_r+0x1c0>)
   2e900:	42bd      	cmp	r5, r7
   2e902:	4403      	add	r3, r0
   2e904:	d040      	beq.n	2e988 <_free_r+0x15c>
   2e906:	68d0      	ldr	r0, [r2, #12]
   2e908:	60e8      	str	r0, [r5, #12]
   2e90a:	f043 0201 	orr.w	r2, r3, #1
   2e90e:	6085      	str	r5, [r0, #8]
   2e910:	6062      	str	r2, [r4, #4]
   2e912:	50e3      	str	r3, [r4, r3]
   2e914:	e7b7      	b.n	2e886 <_free_r+0x5a>
   2e916:	07ff      	lsls	r7, r7, #31
   2e918:	4403      	add	r3, r0
   2e91a:	d407      	bmi.n	2e92c <_free_r+0x100>
   2e91c:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2e920:	1aa4      	subs	r4, r4, r2
   2e922:	4413      	add	r3, r2
   2e924:	68a0      	ldr	r0, [r4, #8]
   2e926:	68e2      	ldr	r2, [r4, #12]
   2e928:	60c2      	str	r2, [r0, #12]
   2e92a:	6090      	str	r0, [r2, #8]
   2e92c:	4a30      	ldr	r2, [pc, #192]	; (2e9f0 <_free_r+0x1c4>)
   2e92e:	6812      	ldr	r2, [r2, #0]
   2e930:	f043 0001 	orr.w	r0, r3, #1
   2e934:	4293      	cmp	r3, r2
   2e936:	6060      	str	r0, [r4, #4]
   2e938:	608c      	str	r4, [r1, #8]
   2e93a:	d3b9      	bcc.n	2e8b0 <_free_r+0x84>
   2e93c:	4b2d      	ldr	r3, [pc, #180]	; (2e9f4 <_free_r+0x1c8>)
   2e93e:	4640      	mov	r0, r8
   2e940:	6819      	ldr	r1, [r3, #0]
   2e942:	f7ff ff23 	bl	2e78c <_malloc_trim_r>
   2e946:	e7b3      	b.n	2e8b0 <_free_r+0x84>
   2e948:	4610      	mov	r0, r2
   2e94a:	e7cd      	b.n	2e8e8 <_free_r+0xbc>
   2e94c:	1811      	adds	r1, r2, r0
   2e94e:	6849      	ldr	r1, [r1, #4]
   2e950:	07c9      	lsls	r1, r1, #31
   2e952:	d444      	bmi.n	2e9de <_free_r+0x1b2>
   2e954:	6891      	ldr	r1, [r2, #8]
   2e956:	68d2      	ldr	r2, [r2, #12]
   2e958:	60ca      	str	r2, [r1, #12]
   2e95a:	4403      	add	r3, r0
   2e95c:	f043 0001 	orr.w	r0, r3, #1
   2e960:	6091      	str	r1, [r2, #8]
   2e962:	6060      	str	r0, [r4, #4]
   2e964:	50e3      	str	r3, [r4, r3]
   2e966:	e7a3      	b.n	2e8b0 <_free_r+0x84>
   2e968:	2a14      	cmp	r2, #20
   2e96a:	d816      	bhi.n	2e99a <_free_r+0x16e>
   2e96c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2e970:	00ff      	lsls	r7, r7, #3
   2e972:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2e976:	e7aa      	b.n	2e8ce <_free_r+0xa2>
   2e978:	10aa      	asrs	r2, r5, #2
   2e97a:	2301      	movs	r3, #1
   2e97c:	684d      	ldr	r5, [r1, #4]
   2e97e:	4093      	lsls	r3, r2
   2e980:	432b      	orrs	r3, r5
   2e982:	604b      	str	r3, [r1, #4]
   2e984:	4603      	mov	r3, r0
   2e986:	e7b0      	b.n	2e8ea <_free_r+0xbe>
   2e988:	f043 0201 	orr.w	r2, r3, #1
   2e98c:	614c      	str	r4, [r1, #20]
   2e98e:	610c      	str	r4, [r1, #16]
   2e990:	60e5      	str	r5, [r4, #12]
   2e992:	60a5      	str	r5, [r4, #8]
   2e994:	6062      	str	r2, [r4, #4]
   2e996:	50e3      	str	r3, [r4, r3]
   2e998:	e78a      	b.n	2e8b0 <_free_r+0x84>
   2e99a:	2a54      	cmp	r2, #84	; 0x54
   2e99c:	d806      	bhi.n	2e9ac <_free_r+0x180>
   2e99e:	0b1a      	lsrs	r2, r3, #12
   2e9a0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2e9a4:	00ff      	lsls	r7, r7, #3
   2e9a6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2e9aa:	e790      	b.n	2e8ce <_free_r+0xa2>
   2e9ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2e9b0:	d806      	bhi.n	2e9c0 <_free_r+0x194>
   2e9b2:	0bda      	lsrs	r2, r3, #15
   2e9b4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2e9b8:	00ff      	lsls	r7, r7, #3
   2e9ba:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2e9be:	e786      	b.n	2e8ce <_free_r+0xa2>
   2e9c0:	f240 5054 	movw	r0, #1364	; 0x554
   2e9c4:	4282      	cmp	r2, r0
   2e9c6:	d806      	bhi.n	2e9d6 <_free_r+0x1aa>
   2e9c8:	0c9a      	lsrs	r2, r3, #18
   2e9ca:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2e9ce:	00ff      	lsls	r7, r7, #3
   2e9d0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2e9d4:	e77b      	b.n	2e8ce <_free_r+0xa2>
   2e9d6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2e9da:	257e      	movs	r5, #126	; 0x7e
   2e9dc:	e777      	b.n	2e8ce <_free_r+0xa2>
   2e9de:	f043 0101 	orr.w	r1, r3, #1
   2e9e2:	6061      	str	r1, [r4, #4]
   2e9e4:	6013      	str	r3, [r2, #0]
   2e9e6:	e763      	b.n	2e8b0 <_free_r+0x84>
   2e9e8:	2000cab0 	.word	0x2000cab0
   2e9ec:	2000cab8 	.word	0x2000cab8
   2e9f0:	2000cebc 	.word	0x2000cebc
   2e9f4:	20002870 	.word	0x20002870

0002e9f8 <__retarget_lock_acquire_recursive>:
   2e9f8:	4770      	bx	lr
   2e9fa:	bf00      	nop

0002e9fc <__retarget_lock_release_recursive>:
   2e9fc:	4770      	bx	lr
   2e9fe:	bf00      	nop

0002ea00 <_realloc_r>:
   2ea00:	2900      	cmp	r1, #0
   2ea02:	f000 8095 	beq.w	2eb30 <_realloc_r+0x130>
   2ea06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea0a:	460d      	mov	r5, r1
   2ea0c:	4616      	mov	r6, r2
   2ea0e:	b083      	sub	sp, #12
   2ea10:	4680      	mov	r8, r0
   2ea12:	f106 070b 	add.w	r7, r6, #11
   2ea16:	f7ff faf3 	bl	2e000 <__malloc_lock>
   2ea1a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2ea1e:	2f16      	cmp	r7, #22
   2ea20:	f02e 0403 	bic.w	r4, lr, #3
   2ea24:	f1a5 0908 	sub.w	r9, r5, #8
   2ea28:	d83c      	bhi.n	2eaa4 <_realloc_r+0xa4>
   2ea2a:	2210      	movs	r2, #16
   2ea2c:	4617      	mov	r7, r2
   2ea2e:	42be      	cmp	r6, r7
   2ea30:	d83d      	bhi.n	2eaae <_realloc_r+0xae>
   2ea32:	4294      	cmp	r4, r2
   2ea34:	da43      	bge.n	2eabe <_realloc_r+0xbe>
   2ea36:	4bc4      	ldr	r3, [pc, #784]	; (2ed48 <_realloc_r+0x348>)
   2ea38:	6899      	ldr	r1, [r3, #8]
   2ea3a:	eb09 0004 	add.w	r0, r9, r4
   2ea3e:	4288      	cmp	r0, r1
   2ea40:	f000 80b4 	beq.w	2ebac <_realloc_r+0x1ac>
   2ea44:	6843      	ldr	r3, [r0, #4]
   2ea46:	f023 0101 	bic.w	r1, r3, #1
   2ea4a:	4401      	add	r1, r0
   2ea4c:	6849      	ldr	r1, [r1, #4]
   2ea4e:	07c9      	lsls	r1, r1, #31
   2ea50:	d54c      	bpl.n	2eaec <_realloc_r+0xec>
   2ea52:	f01e 0f01 	tst.w	lr, #1
   2ea56:	f000 809b 	beq.w	2eb90 <_realloc_r+0x190>
   2ea5a:	4631      	mov	r1, r6
   2ea5c:	4640      	mov	r0, r8
   2ea5e:	f7ff f81f 	bl	2daa0 <_malloc_r>
   2ea62:	4606      	mov	r6, r0
   2ea64:	2800      	cmp	r0, #0
   2ea66:	d03a      	beq.n	2eade <_realloc_r+0xde>
   2ea68:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2ea6c:	f023 0301 	bic.w	r3, r3, #1
   2ea70:	444b      	add	r3, r9
   2ea72:	f1a0 0208 	sub.w	r2, r0, #8
   2ea76:	429a      	cmp	r2, r3
   2ea78:	f000 8121 	beq.w	2ecbe <_realloc_r+0x2be>
   2ea7c:	1f22      	subs	r2, r4, #4
   2ea7e:	2a24      	cmp	r2, #36	; 0x24
   2ea80:	f200 8107 	bhi.w	2ec92 <_realloc_r+0x292>
   2ea84:	2a13      	cmp	r2, #19
   2ea86:	f200 80db 	bhi.w	2ec40 <_realloc_r+0x240>
   2ea8a:	4603      	mov	r3, r0
   2ea8c:	462a      	mov	r2, r5
   2ea8e:	6811      	ldr	r1, [r2, #0]
   2ea90:	6019      	str	r1, [r3, #0]
   2ea92:	6851      	ldr	r1, [r2, #4]
   2ea94:	6059      	str	r1, [r3, #4]
   2ea96:	6892      	ldr	r2, [r2, #8]
   2ea98:	609a      	str	r2, [r3, #8]
   2ea9a:	4629      	mov	r1, r5
   2ea9c:	4640      	mov	r0, r8
   2ea9e:	f7ff fec5 	bl	2e82c <_free_r>
   2eaa2:	e01c      	b.n	2eade <_realloc_r+0xde>
   2eaa4:	f027 0707 	bic.w	r7, r7, #7
   2eaa8:	2f00      	cmp	r7, #0
   2eaaa:	463a      	mov	r2, r7
   2eaac:	dabf      	bge.n	2ea2e <_realloc_r+0x2e>
   2eaae:	2600      	movs	r6, #0
   2eab0:	230c      	movs	r3, #12
   2eab2:	4630      	mov	r0, r6
   2eab4:	f8c8 3000 	str.w	r3, [r8]
   2eab8:	b003      	add	sp, #12
   2eaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eabe:	462e      	mov	r6, r5
   2eac0:	1be3      	subs	r3, r4, r7
   2eac2:	2b0f      	cmp	r3, #15
   2eac4:	d81e      	bhi.n	2eb04 <_realloc_r+0x104>
   2eac6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2eaca:	f003 0301 	and.w	r3, r3, #1
   2eace:	4323      	orrs	r3, r4
   2ead0:	444c      	add	r4, r9
   2ead2:	f8c9 3004 	str.w	r3, [r9, #4]
   2ead6:	6863      	ldr	r3, [r4, #4]
   2ead8:	f043 0301 	orr.w	r3, r3, #1
   2eadc:	6063      	str	r3, [r4, #4]
   2eade:	4640      	mov	r0, r8
   2eae0:	f7ff fa94 	bl	2e00c <__malloc_unlock>
   2eae4:	4630      	mov	r0, r6
   2eae6:	b003      	add	sp, #12
   2eae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eaec:	f023 0303 	bic.w	r3, r3, #3
   2eaf0:	18e1      	adds	r1, r4, r3
   2eaf2:	4291      	cmp	r1, r2
   2eaf4:	db1f      	blt.n	2eb36 <_realloc_r+0x136>
   2eaf6:	68c3      	ldr	r3, [r0, #12]
   2eaf8:	6882      	ldr	r2, [r0, #8]
   2eafa:	462e      	mov	r6, r5
   2eafc:	60d3      	str	r3, [r2, #12]
   2eafe:	460c      	mov	r4, r1
   2eb00:	609a      	str	r2, [r3, #8]
   2eb02:	e7dd      	b.n	2eac0 <_realloc_r+0xc0>
   2eb04:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2eb08:	eb09 0107 	add.w	r1, r9, r7
   2eb0c:	f002 0201 	and.w	r2, r2, #1
   2eb10:	444c      	add	r4, r9
   2eb12:	f043 0301 	orr.w	r3, r3, #1
   2eb16:	4317      	orrs	r7, r2
   2eb18:	f8c9 7004 	str.w	r7, [r9, #4]
   2eb1c:	604b      	str	r3, [r1, #4]
   2eb1e:	6863      	ldr	r3, [r4, #4]
   2eb20:	f043 0301 	orr.w	r3, r3, #1
   2eb24:	3108      	adds	r1, #8
   2eb26:	6063      	str	r3, [r4, #4]
   2eb28:	4640      	mov	r0, r8
   2eb2a:	f7ff fe7f 	bl	2e82c <_free_r>
   2eb2e:	e7d6      	b.n	2eade <_realloc_r+0xde>
   2eb30:	4611      	mov	r1, r2
   2eb32:	f7fe bfb5 	b.w	2daa0 <_malloc_r>
   2eb36:	f01e 0f01 	tst.w	lr, #1
   2eb3a:	d18e      	bne.n	2ea5a <_realloc_r+0x5a>
   2eb3c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2eb40:	eba9 0a01 	sub.w	sl, r9, r1
   2eb44:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb48:	f021 0103 	bic.w	r1, r1, #3
   2eb4c:	440b      	add	r3, r1
   2eb4e:	4423      	add	r3, r4
   2eb50:	4293      	cmp	r3, r2
   2eb52:	db25      	blt.n	2eba0 <_realloc_r+0x1a0>
   2eb54:	68c2      	ldr	r2, [r0, #12]
   2eb56:	6881      	ldr	r1, [r0, #8]
   2eb58:	4656      	mov	r6, sl
   2eb5a:	60ca      	str	r2, [r1, #12]
   2eb5c:	6091      	str	r1, [r2, #8]
   2eb5e:	f8da 100c 	ldr.w	r1, [sl, #12]
   2eb62:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2eb66:	1f22      	subs	r2, r4, #4
   2eb68:	2a24      	cmp	r2, #36	; 0x24
   2eb6a:	60c1      	str	r1, [r0, #12]
   2eb6c:	6088      	str	r0, [r1, #8]
   2eb6e:	f200 8094 	bhi.w	2ec9a <_realloc_r+0x29a>
   2eb72:	2a13      	cmp	r2, #19
   2eb74:	d96f      	bls.n	2ec56 <_realloc_r+0x256>
   2eb76:	6829      	ldr	r1, [r5, #0]
   2eb78:	f8ca 1008 	str.w	r1, [sl, #8]
   2eb7c:	6869      	ldr	r1, [r5, #4]
   2eb7e:	f8ca 100c 	str.w	r1, [sl, #12]
   2eb82:	2a1b      	cmp	r2, #27
   2eb84:	f200 80a2 	bhi.w	2eccc <_realloc_r+0x2cc>
   2eb88:	3508      	adds	r5, #8
   2eb8a:	f10a 0210 	add.w	r2, sl, #16
   2eb8e:	e063      	b.n	2ec58 <_realloc_r+0x258>
   2eb90:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2eb94:	eba9 0a03 	sub.w	sl, r9, r3
   2eb98:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb9c:	f021 0103 	bic.w	r1, r1, #3
   2eba0:	1863      	adds	r3, r4, r1
   2eba2:	4293      	cmp	r3, r2
   2eba4:	f6ff af59 	blt.w	2ea5a <_realloc_r+0x5a>
   2eba8:	4656      	mov	r6, sl
   2ebaa:	e7d8      	b.n	2eb5e <_realloc_r+0x15e>
   2ebac:	6841      	ldr	r1, [r0, #4]
   2ebae:	f021 0b03 	bic.w	fp, r1, #3
   2ebb2:	44a3      	add	fp, r4
   2ebb4:	f107 0010 	add.w	r0, r7, #16
   2ebb8:	4583      	cmp	fp, r0
   2ebba:	da56      	bge.n	2ec6a <_realloc_r+0x26a>
   2ebbc:	f01e 0f01 	tst.w	lr, #1
   2ebc0:	f47f af4b 	bne.w	2ea5a <_realloc_r+0x5a>
   2ebc4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2ebc8:	eba9 0a01 	sub.w	sl, r9, r1
   2ebcc:	f8da 1004 	ldr.w	r1, [sl, #4]
   2ebd0:	f021 0103 	bic.w	r1, r1, #3
   2ebd4:	448b      	add	fp, r1
   2ebd6:	4558      	cmp	r0, fp
   2ebd8:	dce2      	bgt.n	2eba0 <_realloc_r+0x1a0>
   2ebda:	4656      	mov	r6, sl
   2ebdc:	f8da 100c 	ldr.w	r1, [sl, #12]
   2ebe0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2ebe4:	1f22      	subs	r2, r4, #4
   2ebe6:	2a24      	cmp	r2, #36	; 0x24
   2ebe8:	60c1      	str	r1, [r0, #12]
   2ebea:	6088      	str	r0, [r1, #8]
   2ebec:	f200 808f 	bhi.w	2ed0e <_realloc_r+0x30e>
   2ebf0:	2a13      	cmp	r2, #19
   2ebf2:	f240 808a 	bls.w	2ed0a <_realloc_r+0x30a>
   2ebf6:	6829      	ldr	r1, [r5, #0]
   2ebf8:	f8ca 1008 	str.w	r1, [sl, #8]
   2ebfc:	6869      	ldr	r1, [r5, #4]
   2ebfe:	f8ca 100c 	str.w	r1, [sl, #12]
   2ec02:	2a1b      	cmp	r2, #27
   2ec04:	f200 808a 	bhi.w	2ed1c <_realloc_r+0x31c>
   2ec08:	3508      	adds	r5, #8
   2ec0a:	f10a 0210 	add.w	r2, sl, #16
   2ec0e:	6829      	ldr	r1, [r5, #0]
   2ec10:	6011      	str	r1, [r2, #0]
   2ec12:	6869      	ldr	r1, [r5, #4]
   2ec14:	6051      	str	r1, [r2, #4]
   2ec16:	68a9      	ldr	r1, [r5, #8]
   2ec18:	6091      	str	r1, [r2, #8]
   2ec1a:	eb0a 0107 	add.w	r1, sl, r7
   2ec1e:	ebab 0207 	sub.w	r2, fp, r7
   2ec22:	f042 0201 	orr.w	r2, r2, #1
   2ec26:	6099      	str	r1, [r3, #8]
   2ec28:	604a      	str	r2, [r1, #4]
   2ec2a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ec2e:	f003 0301 	and.w	r3, r3, #1
   2ec32:	431f      	orrs	r7, r3
   2ec34:	4640      	mov	r0, r8
   2ec36:	f8ca 7004 	str.w	r7, [sl, #4]
   2ec3a:	f7ff f9e7 	bl	2e00c <__malloc_unlock>
   2ec3e:	e751      	b.n	2eae4 <_realloc_r+0xe4>
   2ec40:	682b      	ldr	r3, [r5, #0]
   2ec42:	6003      	str	r3, [r0, #0]
   2ec44:	686b      	ldr	r3, [r5, #4]
   2ec46:	6043      	str	r3, [r0, #4]
   2ec48:	2a1b      	cmp	r2, #27
   2ec4a:	d82d      	bhi.n	2eca8 <_realloc_r+0x2a8>
   2ec4c:	f100 0308 	add.w	r3, r0, #8
   2ec50:	f105 0208 	add.w	r2, r5, #8
   2ec54:	e71b      	b.n	2ea8e <_realloc_r+0x8e>
   2ec56:	4632      	mov	r2, r6
   2ec58:	6829      	ldr	r1, [r5, #0]
   2ec5a:	6011      	str	r1, [r2, #0]
   2ec5c:	6869      	ldr	r1, [r5, #4]
   2ec5e:	6051      	str	r1, [r2, #4]
   2ec60:	68a9      	ldr	r1, [r5, #8]
   2ec62:	6091      	str	r1, [r2, #8]
   2ec64:	461c      	mov	r4, r3
   2ec66:	46d1      	mov	r9, sl
   2ec68:	e72a      	b.n	2eac0 <_realloc_r+0xc0>
   2ec6a:	eb09 0107 	add.w	r1, r9, r7
   2ec6e:	ebab 0b07 	sub.w	fp, fp, r7
   2ec72:	f04b 0201 	orr.w	r2, fp, #1
   2ec76:	6099      	str	r1, [r3, #8]
   2ec78:	604a      	str	r2, [r1, #4]
   2ec7a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2ec7e:	f003 0301 	and.w	r3, r3, #1
   2ec82:	431f      	orrs	r7, r3
   2ec84:	4640      	mov	r0, r8
   2ec86:	f845 7c04 	str.w	r7, [r5, #-4]
   2ec8a:	f7ff f9bf 	bl	2e00c <__malloc_unlock>
   2ec8e:	462e      	mov	r6, r5
   2ec90:	e728      	b.n	2eae4 <_realloc_r+0xe4>
   2ec92:	4629      	mov	r1, r5
   2ec94:	f7fb feae 	bl	2a9f4 <memmove>
   2ec98:	e6ff      	b.n	2ea9a <_realloc_r+0x9a>
   2ec9a:	4629      	mov	r1, r5
   2ec9c:	4630      	mov	r0, r6
   2ec9e:	461c      	mov	r4, r3
   2eca0:	46d1      	mov	r9, sl
   2eca2:	f7fb fea7 	bl	2a9f4 <memmove>
   2eca6:	e70b      	b.n	2eac0 <_realloc_r+0xc0>
   2eca8:	68ab      	ldr	r3, [r5, #8]
   2ecaa:	6083      	str	r3, [r0, #8]
   2ecac:	68eb      	ldr	r3, [r5, #12]
   2ecae:	60c3      	str	r3, [r0, #12]
   2ecb0:	2a24      	cmp	r2, #36	; 0x24
   2ecb2:	d017      	beq.n	2ece4 <_realloc_r+0x2e4>
   2ecb4:	f100 0310 	add.w	r3, r0, #16
   2ecb8:	f105 0210 	add.w	r2, r5, #16
   2ecbc:	e6e7      	b.n	2ea8e <_realloc_r+0x8e>
   2ecbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2ecc2:	f023 0303 	bic.w	r3, r3, #3
   2ecc6:	441c      	add	r4, r3
   2ecc8:	462e      	mov	r6, r5
   2ecca:	e6f9      	b.n	2eac0 <_realloc_r+0xc0>
   2eccc:	68a9      	ldr	r1, [r5, #8]
   2ecce:	f8ca 1010 	str.w	r1, [sl, #16]
   2ecd2:	68e9      	ldr	r1, [r5, #12]
   2ecd4:	f8ca 1014 	str.w	r1, [sl, #20]
   2ecd8:	2a24      	cmp	r2, #36	; 0x24
   2ecda:	d00c      	beq.n	2ecf6 <_realloc_r+0x2f6>
   2ecdc:	3510      	adds	r5, #16
   2ecde:	f10a 0218 	add.w	r2, sl, #24
   2ece2:	e7b9      	b.n	2ec58 <_realloc_r+0x258>
   2ece4:	692b      	ldr	r3, [r5, #16]
   2ece6:	6103      	str	r3, [r0, #16]
   2ece8:	696b      	ldr	r3, [r5, #20]
   2ecea:	6143      	str	r3, [r0, #20]
   2ecec:	f105 0218 	add.w	r2, r5, #24
   2ecf0:	f100 0318 	add.w	r3, r0, #24
   2ecf4:	e6cb      	b.n	2ea8e <_realloc_r+0x8e>
   2ecf6:	692a      	ldr	r2, [r5, #16]
   2ecf8:	f8ca 2018 	str.w	r2, [sl, #24]
   2ecfc:	696a      	ldr	r2, [r5, #20]
   2ecfe:	f8ca 201c 	str.w	r2, [sl, #28]
   2ed02:	3518      	adds	r5, #24
   2ed04:	f10a 0220 	add.w	r2, sl, #32
   2ed08:	e7a6      	b.n	2ec58 <_realloc_r+0x258>
   2ed0a:	4632      	mov	r2, r6
   2ed0c:	e77f      	b.n	2ec0e <_realloc_r+0x20e>
   2ed0e:	4629      	mov	r1, r5
   2ed10:	4630      	mov	r0, r6
   2ed12:	9301      	str	r3, [sp, #4]
   2ed14:	f7fb fe6e 	bl	2a9f4 <memmove>
   2ed18:	9b01      	ldr	r3, [sp, #4]
   2ed1a:	e77e      	b.n	2ec1a <_realloc_r+0x21a>
   2ed1c:	68a9      	ldr	r1, [r5, #8]
   2ed1e:	f8ca 1010 	str.w	r1, [sl, #16]
   2ed22:	68e9      	ldr	r1, [r5, #12]
   2ed24:	f8ca 1014 	str.w	r1, [sl, #20]
   2ed28:	2a24      	cmp	r2, #36	; 0x24
   2ed2a:	d003      	beq.n	2ed34 <_realloc_r+0x334>
   2ed2c:	3510      	adds	r5, #16
   2ed2e:	f10a 0218 	add.w	r2, sl, #24
   2ed32:	e76c      	b.n	2ec0e <_realloc_r+0x20e>
   2ed34:	692a      	ldr	r2, [r5, #16]
   2ed36:	f8ca 2018 	str.w	r2, [sl, #24]
   2ed3a:	696a      	ldr	r2, [r5, #20]
   2ed3c:	f8ca 201c 	str.w	r2, [sl, #28]
   2ed40:	3518      	adds	r5, #24
   2ed42:	f10a 0220 	add.w	r2, sl, #32
   2ed46:	e762      	b.n	2ec0e <_realloc_r+0x20e>
   2ed48:	2000cab0 	.word	0x2000cab0
